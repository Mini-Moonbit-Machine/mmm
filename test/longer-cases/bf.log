// [Asm] pre_assigned_registers: Insn(iref=%1) -> v4, Self(fref=f6) -> v0, Mem(fref=f6, mref=m0) -> v2, Insn(iref=%0) -> v3
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6, s11, zero]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: [v8]
// [Asm] defined: a1 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.254"];
// [Asm]   r0 [label="v6 ← a0", color=green];
// [Asm]   r3 [label="v2 ← a2", color=green];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r13 [label="t0", color=blue];
// [Asm]   r4 [label="v8 ← a0", color=green];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r14 [label="t1", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r5 [label="a1", color=blue];
// [Asm]   r15 [label="t2", color=blue];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="t3", color=blue];
// [Asm]   r18 [label="v4 ← a0", color=green];
// [Asm]   r17 [label="t4", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r6 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r6 -- r15;
// [Asm]   r2 -- r14;
// [Asm]   r2 -- r15;
// [Asm]   r0 -- r2;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r3 -- r6;
// [Asm]   r6 -- r14;
// [Asm]   r6 -- r10;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r10;
// [Asm]   r2 -- r5;
// [Asm]   r6 -- r17;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r2 -- r17;
// [Asm]   r6 -- r16;
// [Asm]   r2 -- r16;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r3;
// [Asm]   r6 -- r12;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r13;
// [Asm]   comment = "0:v6-> 1:s11-> 2:zero-> 3:v2-> 4:v8-> 5:a1-> 6:a0-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:t0-> 14:t1-> 15:t2-> 16:t3-> 17:t4-> 18:v4"
// [Asm]   comment = "v6<-a0;v2<-a2;v8<-a0;v4<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.254"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v6, 4096 ->   li a0, 4096
// [Asm] subst   sub v2, s11, v6 ->   sub a2, s11, a0
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a2, -8
// [Asm] subst   li v8, 1024 ->   li a0, 1024
// [Asm] subst   mv a1, v8 ->   mv a1, a0
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v2 ->   mv a1, a2
// [Asm] subst   call read_prog.255 ->   call read_prog.255
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Mem(fref=f4, mref=m2) -> v6, Insn(iref=%3) -> v10, FnParam(fref=f4, fpref=$f.0) -> v2, Insn(iref=%2) -> v9, Insn(iref=%1) -> v8, Mem(fref=f4, mref=m1) -> v5, Self(fref=f4) -> v0, Mem(fref=f4, mref=m0) -> v4, FnParam(fref=f4, fpref=$f.1) -> v3, Insn(iref=%0) -> v7, Insn(iref=%4) -> v11
// [Asm] defs: []
// [Asm] live_set: [zero, a0, a1, s11]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, a1, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, s11, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, zero, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v2, v16, zero, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v2, zero, v8, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v2, v14, zero, v8, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, zero, v8, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v5, zero, v8, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, v5, zero, v4, s11, v3]
// [Asm] move_origin: [v8]
// [Asm] defined: a1 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, zero, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v5, zero, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v5, zero, a0, v4, v6, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, a0, v4, a1, v6, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, zero, a0, a2, a1, v6, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v5, zero, a0, a2, a1, v6, a3]
// [Asm] move_origin: [v3]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [zero, a0, a4, a2, a1, v6, a3]
// [Asm] move_origin: [v5]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [a5, zero, a0, a4, a2, a1, a3]
// [Asm] move_origin: [v6]
// [Asm] defined: a5 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of bf.250"];
// [Asm]   r0 [label="v2 ← a2", color=green];
// [Asm]   r20 [label="t2", color=blue];
// [Asm]   r23 [label="v11 ← a0", color=green];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r9 [label="v5 ← a5", color=green];
// [Asm]   r6 [label="v16 ← a0", color=green];
// [Asm]   r13 [label="a3", color=blue];
// [Asm]   r4 [label="v3 ← a3", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r11 [label="a0", color=blue];
// [Asm]   r7 [label="v8 ← a0", color=green];
// [Asm]   r10 [label="v6 ← a6", color=green];
// [Asm]   r22 [label="t4", color=blue];
// [Asm]   r14 [label="a4", color=blue];
// [Asm]   r8 [label="v14 ← a1", color=green];
// [Asm]   r5 [label="v4 ← a4", color=green];
// [Asm]   r15 [label="a5", color=blue];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="a6", color=blue];
// [Asm]   r18 [label="t0", color=blue];
// [Asm]   r19 [label="t1", color=blue];
// [Asm]   r21 [label="t3", color=blue];
// [Asm]   r17 [label="a7", color=blue];
// [Asm]   r12 [label="a2", color=blue];
// [Asm]   r13 -- r15;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r5;
// [Asm]   r11 -- r20;
// [Asm]   r2 -- r15;
// [Asm]   r11 -- r17;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r10;
// [Asm]   r1 -- r4;
// [Asm]   r11 -- r14;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r23;
// [Asm]   r12 -- r15;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r11 -- r16;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r22;
// [Asm]   r1 -- r10;
// [Asm]   r10 -- r13;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r11 -- r12;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r11 -- r22;
// [Asm]   r2 -- r11;
// [Asm]   r11 -- r18;
// [Asm]   r1 -- r16;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r11;
// [Asm]   r3 -- r5;
// [Asm]   r11 -- r19;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r9 -- r11;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r12 -- r13;
// [Asm]   r11 -- r13;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r9;
// [Asm]   r0 -- r3;
// [Asm]   r10 -- r12;
// [Asm]   r1 -- r21;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r9 -- r12;
// [Asm]   r13 -- r14;
// [Asm]   r2 -- r12;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r10;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r1 -- r11;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r11 -- r15;
// [Asm]   r0 -- r11;
// [Asm]   r12 -- r14;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r7 -- r8;
// [Asm]   r9 -- r13;
// [Asm]   r0 -- r7;
// [Asm]   r2 -- r3;
// [Asm]   r4 -- r9;
// [Asm]   r14 -- r15;
// [Asm]   r11 -- r21;
// [Asm]   r10 -- r14;
// [Asm]   comment = "0:v2-> 1:zero-> 2:a1-> 3:s11-> 4:v3-> 5:v4-> 9:v5-> 10:v6-> 11:a0-> 7:v8-> 8:v14-> 12:a2-> 13:a3-> 14:a4-> 15:a5-> 6:v16-> 16:a6-> 17:a7-> 18:t0-> 19:t1-> 20:t2-> 21:t3-> 22:t4-> 23:v11"
// [Asm]   comment = "v2<-a2;v11<-a0;v5<-a5;v16<-a0;v3<-a3;v8<-a0;v6<-a6;v14<-a1;v4<-a4;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of bf.250"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v2, a0 ->   mv a2, a0
// [Asm] subst   mv v3, a1 ->   mv a3, a1
// [Asm] subst   addi v4, s11, -4 ->   addi a4, s11, -4
// [Asm] subst   andi s11, v4, -8 ->   andi s11, a4, -8
// [Asm] subst   sw zero, 0(v4) ->   sw zero, 0(a4)
// [Asm] subst   li v16, 1024 ->   li a0, 1024
// [Asm] subst   mul v8, v16, v16 ->   mul a0, a0, a0
// [Asm] subst   slliw v14, v8, 2 ->   slliw a1, a0, 2
// [Asm] subst   sub v5, s11, v14 ->   sub a5, s11, a1
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a5, -8
// [Asm] subst   mv a1, v8 ->   mv a1, a0
// [Asm] subst   addi v6, s11, -4 ->   addi a6, s11, -4
// [Asm] subst   andi s11, v6, -8 ->   andi s11, a6, -8
// [Asm] subst   sw zero, 0(v6) ->   sw zero, 0(a6)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v2 ->   mv a1, a2
// [Asm] subst   mv a2, v4 ->   mv a2, a4
// [Asm] subst   mv a4, v5 ->   mv a4, a5
// [Asm] subst   mv a5, v6 ->   mv a5, a6
// [Asm] subst   call aux.252 ->   call aux.252
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v9, Insn(iref=%3) -> v8, FnParam(fref=f5, fpref=$f.0) -> v2, Self(fref=f5) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v11, Insn(iref=%2) -> v10, Insn(iref=%1) -> v7, BlockParam(bref=b0, bpref=$b.0) -> v4, BlockParam(bref=b0, bpref=$b.1) -> v5, FnParam(fref=f5, fpref=$f.1) -> v3, Insn(iref=%0) -> v6
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=-1)])
// [Asm] defs: []
// [Asm] live_set: [v4, v5]
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, v5, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v6]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v4, v5, v6, v16]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v6]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v4, v5, v6, v14]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v4, v5, v6, v15]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v5, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, v5]
// [Asm] move_origin: [v9]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5]
// [Asm] move_origin: [v5]
// [Asm] defs: []
// [Asm] live_set: [v4, v5]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, v5]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [a0]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v10]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: [v10]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5]
// [Asm] move_origin: [v3]
// [Asm] defined: v5 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of read_prog.255"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="v10 ← a0", color=green];
// [Asm]   r23 [label="v3 ← a1", color=green];
// [Asm]   r3 [label="a1", color=blue];
// [Asm]   r9 [label="a7", color=blue];
// [Asm]   r6 [label="a4", color=blue];
// [Asm]   r13 [label="t3", color=blue];
// [Asm]   r4 [label="a2", color=blue];
// [Asm]   r1 [label="v4 ← s0", color=green];
// [Asm]   r11 [label="t1", color=blue];
// [Asm]   r7 [label="a5", color=blue];
// [Asm]   r10 [label="t0", color=blue];
// [Asm]   r22 [label="v2 ← a0", color=green];
// [Asm]   r14 [label="t4", color=blue];
// [Asm]   r8 [label="a6", color=blue];
// [Asm]   r5 [label="a3", color=blue];
// [Asm]   r15 [label="v6 ← a0", color=green];
// [Asm]   r2 [label="v5 ← s1", color=green];
// [Asm]   r16 [label="v16 ← a1", color=green];
// [Asm]   r18 [label="v15 ← a1", color=green];
// [Asm]   r19 [label="v9 ← a0", color=green];
// [Asm]   r21 [label="v11 ← a0", color=green];
// [Asm]   r17 [label="v14 ← a1", color=green];
// [Asm]   r12 [label="t2", color=blue];
// [Asm]   r0 -- r13;
// [Asm]   r1 -- r12;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r23;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r10;
// [Asm]   r0 -- r14;
// [Asm]   r2 -- r10;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r17;
// [Asm]   r2 -- r16;
// [Asm]   r2 -- r11;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r22;
// [Asm]   r0 -- r6;
// [Asm]   r1 -- r9;
// [Asm]   r15 -- r18;
// [Asm]   r2 -- r6;
// [Asm]   r15 -- r17;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r8;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r22 -- r23;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r2 -- r17;
// [Asm]   r0 -- r10;
// [Asm]   r1 -- r11;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r2 -- r9;
// [Asm]   r0 -- r4;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r0 -- r7;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   comment = "0:a0-> 1:v4-> 2:v5-> 3:a1-> 4:a2-> 5:a3-> 6:a4-> 7:a5-> 8:a6-> 9:a7-> 10:t0-> 11:t1-> 12:t2-> 13:t3-> 14:t4-> 15:v6-> 16:v16-> 17:v14-> 18:v15-> 19:v9-> 22:v2-> 23:v3-> 20:v10-> 21:v11"
// [Asm]   comment = "v10<-a0;v3<-a1;v4<-s0;v2<-a0;v6<-a0;v5<-s1;v16<-a1;v15<-a1;v9<-a0;v11<-a0;v14<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of read_prog.255"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call read_ch_until_newline_or_eof.249 ->   call read_ch_until_newline_or_eof.249
// [Asm] subst   li v16, -1 ->   li a1, -1
// [Asm] subst   beq v6, v16, .read_prog.255_1 ->   beq a0, a1, .read_prog.255_1
// [Asm] subst   slliw v14, v4, 2 ->   slliw a1, s0, 2
// [Asm] subst   add v15, v5, v14 ->   add a1, s1, a1
// [Asm] subst   sw v6, 0(v15) ->   sw a0, 0(a1)
// [Asm] subst   addi v9, v4, 1 ->   addi a0, s0, 1
// [Asm] subst   mv v4, v9 ->   mv s0, a0
// [Asm] subst   j .read_prog.255_0 ->   j .read_prog.255_0
// [Asm] subst   ret ->   ret
// [Asm] subst   mv a0, v4 ->   mv a0, s0
// [Asm] subst   mv a1, v5 ->   mv a1, s1
// [Asm] subst   call bf.250 ->   call bf.250
// [Asm] subst   mv v4, v2 ->   mv s0, a0
// [Asm] subst   mv v5, v3 ->   mv s1, a1
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v71, Insn(iref=%41) -> v18, BlockParam(bref=b28, bpref=$b.0) -> v26, Insn(iref=%33) -> v58, Insn(iref=%8) -> v75, Insn(iref=%10) -> v77, Insn(iref=%27) -> v61, FnParam(fref=f3, fpref=$f.3) -> v5, Insn(iref=%25) -> v69, Insn(iref=%39) -> v55, BlockParam(bref=b26, bpref=$b.0) -> v24, Insn(iref=%59) -> v44, Insn(iref=%4) -> v80, BlockParam(bref=b25, bpref=$b.0) -> v23, Insn(iref=%56) -> v40, Insn(iref=%49) -> v32, Insn(iref=%42) -> v28, BlockParam(bref=b47, bpref=$b.0) -> v53, Insn(iref=%26) -> v15, BlockParam(bref=b23, bpref=$b.0) -> v21, BlockParam(bref=b53, bpref=$b.1) -> v36, BlockParam(bref=b24, bpref=$b.0) -> v22, BlockParam(bref=b53, bpref=$b.0) -> v35, Insn(iref=%31) -> v16, BlockParam(bref=b63, bpref=$b.0) -> v46, BlockParam(bref=b22, bpref=$b.0) -> v20, Insn(iref=%16) -> v72, Insn(iref=%53) -> v39, Insn(iref=%54) -> v48, Insn(iref=%60) -> v41, Insn(iref=%5) -> v81, Insn(iref=%19) -> v14, BlockParam(bref=b62, bpref=$b.0) -> v45, BlockParam(bref=b48, bpref=$b.0) -> v51, Insn(iref=%13) -> v70, Insn(iref=%7) -> v12, BlockParam(bref=b27, bpref=$b.0) -> v25, Insn(iref=%55) -> v49, Insn(iref=%48) -> v31, Insn(iref=%23) -> v67, Insn(iref=%20) -> v65, BlockParam(bref=b21, bpref=$b.0) -> v19, Insn(iref=%34) -> v59, Insn(iref=%36) -> v17, BlockParam(bref=b2, bpref=$b.0) -> v8, FnParam(fref=f3, fpref=$f.4) -> v6, Insn(iref=%50) -> v33, Insn(iref=%51) -> v37, FnParam(fref=f3, fpref=$f.0) -> v2, FnParam(fref=f3, fpref=$f.5) -> v7, Self(fref=f3) -> v0, Insn(iref=%52) -> v38, Insn(iref=%44) -> v30, Insn(iref=%32) -> v57, Insn(iref=%58) -> v43, Insn(iref=%1) -> v10, Insn(iref=%11) -> v78, Insn(iref=%57) -> v42, Insn(iref=%6) -> v82, Insn(iref=%35) -> v60, FnParam(fref=f3, fpref=$f.2) -> v4, BlockParam(bref=b29, bpref=$b.0) -> v83, Insn(iref=%28) -> v62, BlockParam(bref=b65, bpref=$b.0) -> v50, Insn(iref=%24) -> v68, Insn(iref=%9) -> v76, Insn(iref=%37) -> v27, Insn(iref=%45) -> v34, Insn(iref=%29) -> v63, Insn(iref=%47) -> v52, Insn(iref=%0) -> v9, Insn(iref=%18) -> v74, Insn(iref=%3) -> v79, Insn(iref=%22) -> v66, Insn(iref=%17) -> v73, FnParam(fref=f3, fpref=$f.1) -> v3, Insn(iref=%2) -> v11, Insn(iref=%43) -> v29, Insn(iref=%30) -> v64, BlockParam(bref=b30, bpref=$b.0) -> v54, Insn(iref=%40) -> v56, Insn(iref=%12) -> v13, BlockParam(bref=b64, bpref=$b.0) -> v47
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b53, bpref=$b.1), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%52), Int32(val=93)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%52), Int32(val=91)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f3, fpref=$f.1), BlockParam(bref=b53, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%43), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=93)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=91)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=44)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=46)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=45)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=43)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=60)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=62)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f3, fpref=$f.1), BlockParam(bref=b2, bpref=$b.0)])
// [Asm] defs: [v61]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v61, v3]
// [Asm] move_origin: []
// [Asm] defined: v61 is X
// [Asm] defs: [v108]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v108, v3]
// [Asm] move_origin: []
// [Asm] defined: v108 is X
// [Asm] defs: [v109]
// [Asm] live_set: [v109, v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v109 is X
// [Asm] defs: [v62]
// [Asm] live_set: [v62, v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v62 is X
// [Asm] defs: []
// [Asm] live_set: [v62, v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v7, v8, v4, v6, v3]
// [Asm] move_origin: [v62]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v63]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v63 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v64]
// [Asm] live_set: [v5, zero, v7, v4, v6, v64, v3]
// [Asm] move_origin: []
// [Asm] defined: v64 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: [v64]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v43]
// [Asm] live_set: [v5, zero, v7, v36, v4, v6, v43, v3]
// [Asm] move_origin: []
// [Asm] defined: v43 is X
// [Asm] defs: [v44]
// [Asm] live_set: [v5, zero, v7, v4, v6, v43, v44, v3]
// [Asm] move_origin: []
// [Asm] defined: v44 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v5, zero, v7, v35, v4, v6, v44, v3]
// [Asm] move_origin: [v43]
// [Asm] defined: v35 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm] move_origin: [v44]
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v24]
// [Asm] live_set: [v24]
// [Asm] move_origin: [v23]
// [Asm] defined: v24 is X
// [Asm] defs: [v144]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v144, v3]
// [Asm] move_origin: []
// [Asm] defined: v144 is X
// [Asm] defs: [v145]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v145, v3]
// [Asm] move_origin: []
// [Asm] defined: v145 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v143]
// [Asm] live_set: [v5, v10, zero, v7, v8, v4, v6, v143, v3]
// [Asm] move_origin: []
// [Asm] defined: v143 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v140]
// [Asm] live_set: [v5, v10, zero, v7, v8, v4, v6, v140, v3]
// [Asm] move_origin: []
// [Asm] defined: v140 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v54]
// [Asm] live_set: [v5, zero, v7, v4, v6, v54, v3]
// [Asm] move_origin: [v53]
// [Asm] defined: v54 is X
// [Asm] defs: [v83]
// [Asm] live_set: [v83]
// [Asm] move_origin: [v26]
// [Asm] defined: v83 is X
// [Asm] defs: [v142]
// [Asm] live_set: [v5, v10, v142, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v142 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v26]
// [Asm] live_set: [v26]
// [Asm] move_origin: [v25]
// [Asm] defined: v26 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v28, v3]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: [v132]
// [Asm] live_set: [v132, v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v132 is X
// [Asm] defs: [v133]
// [Asm] live_set: [v5, zero, v133, v8, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v133 is X
// [Asm] defs: [v29]
// [Asm] live_set: [v5, zero, v29, v8, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v75]
// [Asm] live_set: [v5, v75, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v75 is X
// [Asm] defs: [v76]
// [Asm] live_set: [v76, v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v76 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v78]
// [Asm] live_set: [v5, zero, v78, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v78 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: [v78]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v57]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v57, v3]
// [Asm] move_origin: []
// [Asm] defined: v57 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v57, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0, v7, v8, v4, v6, v57, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v58]
// [Asm] live_set: [v5, v58, zero, v7, v8, v4, v6, v57, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v58 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v58, zero, v7, v8, v4, v6, v57, v3]
// [Asm] move_origin: []
// [Asm] defs: [v113]
// [Asm] live_set: [v5, v58, zero, v7, v8, v4, v6, v113, v3]
// [Asm] move_origin: []
// [Asm] defined: v113 is X
// [Asm] defs: [v114]
// [Asm] live_set: [v5, v58, zero, v7, v8, v4, v114, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v114 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v60]
// [Asm] live_set: [v5, zero, v7, v4, v6, v60, v3]
// [Asm] move_origin: []
// [Asm] defined: v60 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: [v60]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v126]
// [Asm] live_set: [v5, zero, v126, v35, v7, v36, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v126 is X
// [Asm] defs: [v127]
// [Asm] live_set: [v5, v127, zero, v35, v7, v36, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v127 is X
// [Asm] defs: [v38]
// [Asm] live_set: [v5, zero, v35, v7, v36, v38, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v38 is X
// [Asm] defs: [v125]
// [Asm] live_set: [v5, zero, v125, v35, v7, v36, v38, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v125 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v35, v7, v36, v38, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v45]
// [Asm] live_set: [v5, zero, v45, v7, v4, v6, v3]
// [Asm] move_origin: [v35]
// [Asm] defined: v45 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v53]
// [Asm] live_set: [v5, v53, zero, v7, v4, v6, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v53 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v31, v3]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v31, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v8, v7, v4, v6, v3]
// [Asm] move_origin: [v31]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, a0, v8, v7, v4, v6, a1, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, zero, a0, v8, v7, a2, v4, v6, a1, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v5, zero, a0, v8, v7, a2, v4, v6, a1, a3, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v5, zero, a0, a4, v8, v7, a2, v4, v6, a1, a3, v3]
// [Asm] move_origin: [v6]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [v5, a5, zero, a0, a4, v8, v7, a2, v4, v6, a1, a3, v3]
// [Asm] move_origin: [v7]
// [Asm] defined: a5 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v32]
// [Asm] live_set: [v5, zero, v7, v8, v4, v32, v6, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v32 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v32, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v50]
// [Asm] live_set: [v5, zero, v50, v7, v4, v6, v3]
// [Asm] move_origin: [v35]
// [Asm] defined: v50 is X
// [Asm] defs: [v55]
// [Asm] live_set: [v5, zero, v7, v4, v6, v55, v3]
// [Asm] move_origin: []
// [Asm] defined: v55 is X
// [Asm] defs: [v56]
// [Asm] live_set: [v5, v56, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v56 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: [v56]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v22]
// [Asm] live_set: [v22]
// [Asm] move_origin: [v21]
// [Asm] defined: v22 is X
// [Asm] defs: [v136]
// [Asm] live_set: [v136, v10, v8]
// [Asm] move_origin: []
// [Asm] defined: v136 is X
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defs: [v34]
// [Asm] live_set: [v5, zero, v7, v4, v6, v34, v3]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: []
// [Asm] live_set: [a5, zero, a0, a4, a2, a1, a3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a5, zero, a4, a2, a1, a3, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a5, zero, a4, a2, a3, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, a5, zero, a4, v4, a3, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, a5, zero, a4, v4, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, a5, zero, v4, v6, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: [a5]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v8 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v5, zero, v7, v35, v4, v6, v3]
// [Asm] move_origin: [v34]
// [Asm] defined: v35 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v36 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v25]
// [Asm] move_origin: [v24]
// [Asm] defined: v25 is X
// [Asm] defs: [v70]
// [Asm] live_set: [v5, zero, v7, v8, v4, v70, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v70 is X
// [Asm] defs: [v94]
// [Asm] live_set: [v94, v5, zero, v7, v8, v4, v70, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v94 is X
// [Asm] defs: [v95]
// [Asm] live_set: [v5, zero, v7, v8, v95, v4, v70, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v95 is X
// [Asm] defs: [v71]
// [Asm] live_set: [v5, v71, zero, v7, v8, v4, v6, v70, v3]
// [Asm] move_origin: []
// [Asm] defined: v71 is X
// [Asm] defs: [v72]
// [Asm] live_set: [v72, v5, zero, v7, v8, v4, v6, v70, v3]
// [Asm] move_origin: []
// [Asm] defined: v72 is X
// [Asm] defs: [v91]
// [Asm] live_set: [v72, v5, v91, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v91 is X
// [Asm] defs: [v92]
// [Asm] live_set: [v72, v5, zero, v7, v8, v92, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v92 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v74]
// [Asm] live_set: [v5, zero, v7, v4, v6, v74, v3]
// [Asm] move_origin: []
// [Asm] defined: v74 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: [v74]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v41]
// [Asm] live_set: [v5, zero, v7, v36, v4, v41, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm] move_origin: [v41]
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm] move_origin: [v36]
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v20]
// [Asm] live_set: [v20]
// [Asm] move_origin: [v19]
// [Asm] defined: v20 is X
// [Asm] defs: [v79]
// [Asm] live_set: [v5, zero, v79, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v79 is X
// [Asm] defs: [v80]
// [Asm] live_set: [v5, zero, v7, v8, v4, v80, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v80 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v82]
// [Asm] live_set: [v5, v82, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v82 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: [v82]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v83]
// [Asm] live_set: [v83]
// [Asm] move_origin: [v8]
// [Asm] defined: v83 is X
// [Asm] defs: []
// [Asm] live_set: [v83]
// [Asm] move_origin: []
// [Asm] defs: [v47]
// [Asm] live_set: [v5, zero, v7, v47, v4, v6, v3]
// [Asm] move_origin: [v46]
// [Asm] defined: v47 is X
// [Asm] defs: [v48]
// [Asm] live_set: [v5, v48, zero, v7, v36, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v48 is X
// [Asm] defs: [v49]
// [Asm] live_set: [v5, v49, v48, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v49 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v5, v49, zero, v7, v35, v4, v6, v3]
// [Asm] move_origin: [v48]
// [Asm] defined: v35 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm] move_origin: [v49]
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v19]
// [Asm] move_origin: [v8]
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v19]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v65]
// [Asm] live_set: [v5, zero, v7, v8, v65, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v65 is X
// [Asm] defs: [v102]
// [Asm] live_set: [v5, zero, v7, v8, v65, v4, v6, v102, v3]
// [Asm] move_origin: []
// [Asm] defined: v102 is X
// [Asm] defs: [v103]
// [Asm] live_set: [v5, zero, v7, v8, v103, v65, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v103 is X
// [Asm] defs: [v66]
// [Asm] live_set: [v66, v5, zero, v7, v8, v4, v65, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v66 is X
// [Asm] defs: [v67]
// [Asm] live_set: [v5, zero, v67, v7, v8, v4, v65, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v67 is X
// [Asm] defs: [v99]
// [Asm] live_set: [v5, v99, zero, v67, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v99 is X
// [Asm] defs: [v100]
// [Asm] live_set: [v5, zero, v67, v7, v8, v4, v6, v100, v3]
// [Asm] move_origin: []
// [Asm] defined: v100 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v69]
// [Asm] live_set: [v5, v69, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v69 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: [v69]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v21]
// [Asm] move_origin: [v20]
// [Asm] defined: v21 is X
// [Asm] defs: [v141]
// [Asm] live_set: [v5, v10, zero, v7, v8, v4, v141, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v141 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v46]
// [Asm] live_set: [v46, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: [v45]
// [Asm] defined: v46 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v19]
// [Asm] move_origin: [v8]
// [Asm] defined: v19 is X
// [Asm] defs: [v139]
// [Asm] live_set: [v5, v10, zero, v8, v7, v4, v6, v139, v3]
// [Asm] move_origin: []
// [Asm] defined: v139 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v138]
// [Asm] live_set: [v5, v10, zero, v8, v7, v4, v6, v138, v3]
// [Asm] move_origin: []
// [Asm] defined: v138 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v23]
// [Asm] live_set: [v23]
// [Asm] move_origin: [v22]
// [Asm] defined: v23 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v83]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v124]
// [Asm] live_set: [v5, v124, zero, v7, v36, v35, v4, v38, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v124 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v36, v35, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v137]
// [Asm] live_set: [v5, v10, zero, v8, v7, v4, v6, v137, v3]
// [Asm] move_origin: []
// [Asm] defined: v137 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v50]
// [Asm] live_set: [v5, zero, v50, v7, v4, v6, v3]
// [Asm] move_origin: [v47]
// [Asm] defined: v50 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v50, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v51]
// [Asm] live_set: [v51, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: [v50]
// [Asm] defined: v51 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux.252"];
// [Asm]   r0 [label="v61 ← a0", color=green];
// [Asm]   r46 [label="v78 ← a0", color=green];
// [Asm]   r33 [label="v10 ← a0", color=green];
// [Asm]   r59 [label="v32 ← a0", color=green];
// [Asm]   r76 [label="v41 ← a0", color=green];
// [Asm]   r9 [label="v109 ← a0", color=green];
// [Asm]   r26 [label="v43 ← a0", color=green];
// [Asm]   r86 [label="v102 ← a1", color=green];
// [Asm]   r44 [label="v75 ← a0", color=green];
// [Asm]   r53 [label="v127 ← a2", color=green];
// [Asm]   r56 [label="v45 ← a0", color=green];
// [Asm]   r10 [label="v62 ← a0", color=green];
// [Asm]   r5 [label="v4 ← s3", color=green];
// [Asm]   r54 [label="v38 ← a2", color=green];
// [Asm]   r24 [label="v63 ← a0", color=green];
// [Asm]   r43 [label="v29 ← a0", color=green];
// [Asm]   r88 [label="v66 ← a1", color=green];
// [Asm]   r80 [label="v82 ← a0", color=green];
// [Asm]   r31 [label="v144 ← a0", color=green];
// [Asm]   r39 [label="v26 ← a0", color=green];
// [Asm]   r99 [label="v124 ← a3", color=green];
// [Asm]   r17 [label="a6", color=blue];
// [Asm]   r52 [label="v126 ← a2", color=green];
// [Asm]   r65 [label="v34 ← a0", color=green];
// [Asm]   r79 [label="v80 ← a0", color=green];
// [Asm]   r20 [label="t1", color=blue];
// [Asm]   r61 [label="v55 ← a0", color=green];
// [Asm]   r23 [label="t4", color=blue];
// [Asm]   r3 [label="v7 ← s1", color=green];
// [Asm]   r82 [label="v48 ← a0", color=green];
// [Asm]   r67 [label="v25 ← a0", color=green];
// [Asm]   r75 [label="v74 ← a0", color=green];
// [Asm]   r27 [label="v36 ← a1", color=green];
// [Asm]   r77 [label="v20 ← a0", color=green];
// [Asm]   r62 [label="v56 ← a0", color=green];
// [Asm]   r40 [label="v28 ← a0", color=green];
// [Asm]   r11 [label="a0", color=blue];
// [Asm]   r58 [label="v31 ← a0", color=green];
// [Asm]   r34 [label="v143 ← a1", color=green];
// [Asm]   r83 [label="v49 ← a1", color=green];
// [Asm]   r14 [label="a3", color=blue];
// [Asm]   r51 [label="v60 ← a0", color=green];
// [Asm]   r96 [label="v139 ← a1", color=green];
// [Asm]   r78 [label="v79 ← a0", color=green];
// [Asm]   r55 [label="v125 ← a3", color=green];
// [Asm]   r16 [label="a5", color=blue];
// [Asm]   r21 [label="t2", color=blue];
// [Asm]   r60 [label="v50 ← a0", color=green];
// [Asm]   r93 [label="v21 ← a0", color=green];
// [Asm]   r73 [label="v91 ← a0", color=green];
// [Asm]   r38 [label="v142 ← a1", color=green];
// [Asm]   r72 [label="v72 ← a1", color=green];
// [Asm]   r87 [label="v103 ← a1", color=green];
// [Asm]   r100 [label="v137 ← a1", color=green];
// [Asm]   r85 [label="v65 ← a0", color=green];
// [Asm]   r47 [label="v57 ← s6", color=green];
// [Asm]   r6 [label="v6 ← s4", color=green];
// [Asm]   r13 [label="a2", color=blue];
// [Asm]   r42 [label="v133 ← a0", color=green];
// [Asm]   r4 [label="v8 ← s2", color=green];
// [Asm]   r29 [label="v35 ← a0", color=green];
// [Asm]   r95 [label="v46 ← a0", color=green];
// [Asm]   r35 [label="v140 ← a1", color=green];
// [Asm]   r7 [label="v3 ← s5", color=green];
// [Asm]   r64 [label="v136 ← a1", color=green];
// [Asm]   r8 [label="v108 ← a0", color=green];
// [Asm]   r36 [label="v54 ← a0", color=green];
// [Asm]   r66 [label="v2 ← a0", color=green];
// [Asm]   r32 [label="v145 ← a0", color=green];
// [Asm]   r15 [label="a4", color=blue];
// [Asm]   r49 [label="v113 ← a1", color=green];
// [Asm]   r57 [label="v53 ← a0", color=green];
// [Asm]   r74 [label="v92 ← a0", color=green];
// [Asm]   r68 [label="v70 ← a0", color=green];
// [Asm]   r98 [label="v23 ← a0", color=green];
// [Asm]   r91 [label="v100 ← a0", color=green];
// [Asm]   r70 [label="v95 ← a1", color=green];
// [Asm]   r48 [label="v58 ← a0", color=green];
// [Asm]   r12 [label="a1", color=blue];
// [Asm]   r37 [label="v83 ← a0", color=green];
// [Asm]   r1 [label="v5 ← s0", color=green];
// [Asm]   r41 [label="v132 ← a0", color=green];
// [Asm]   r28 [label="v44 ← a1", color=green];
// [Asm]   r71 [label="v71 ← a1", color=green];
// [Asm]   r22 [label="t3", color=blue];
// [Asm]   r69 [label="v94 ← a1", color=green];
// [Asm]   r84 [label="v19 ← a0", color=green];
// [Asm]   r50 [label="v114 ← a1", color=green];
// [Asm]   r89 [label="v67 ← a1", color=green];
// [Asm]   r30 [label="v24 ← a0", color=green];
// [Asm]   r92 [label="v69 ← a0", color=green];
// [Asm]   r45 [label="v76 ← a0", color=green];
// [Asm]   r25 [label="v64 ← a0", color=green];
// [Asm]   r63 [label="v22 ← a0", color=green];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r18 [label="a7", color=blue];
// [Asm]   r19 [label="t0", color=blue];
// [Asm]   r90 [label="v99 ← a0", color=green];
// [Asm]   r97 [label="v138 ← a1", color=green];
// [Asm]   r81 [label="v47 ← a0", color=green];
// [Asm]   r101 [label="v51 ← a0", color=green];
// [Asm]   r94 [label="v141 ← a1", color=green];
// [Asm]   r5 -- r69;
// [Asm]   r2 -- r31;
// [Asm]   r2 -- r38;
// [Asm]   r3 -- r52;
// [Asm]   r6 -- r70;
// [Asm]   r2 -- r78;
// [Asm]   r6 -- r48;
// [Asm]   r1 -- r26;
// [Asm]   r6 -- r75;
// [Asm]   r3 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r3 -- r53;
// [Asm]   r2 -- r49;
// [Asm]   r68 -- r72;
// [Asm]   r33 -- r100;
// [Asm]   r6 -- r68;
// [Asm]   r7 -- r25;
// [Asm]   r7 -- r72;
// [Asm]   r4 -- r64;
// [Asm]   r3 -- r62;
// [Asm]   r4 -- r44;
// [Asm]   r6 -- r88;
// [Asm]   r4 -- r90;
// [Asm]   r3 -- r9;
// [Asm]   r2 -- r91;
// [Asm]   r7 -- r78;
// [Asm]   r3 -- r11;
// [Asm]   r4 -- r48;
// [Asm]   r5 -- r65;
// [Asm]   r3 -- r86;
// [Asm]   r2 -- r51;
// [Asm]   r2 -- r7;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r70;
// [Asm]   r3 -- r31;
// [Asm]   r7 -- r62;
// [Asm]   r2 -- r41;
// [Asm]   r2 -- r42;
// [Asm]   r7 -- r35;
// [Asm]   r7 -- r32;
// [Asm]   r1 -- r68;
// [Asm]   r1 -- r50;
// [Asm]   r11 -- r19;
// [Asm]   r6 -- r86;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r48;
// [Asm]   r3 -- r8;
// [Asm]   r3 -- r85;
// [Asm]   r1 -- r9;
// [Asm]   r26 -- r28;
// [Asm]   r6 -- r69;
// [Asm]   r26 -- r27;
// [Asm]   r5 -- r35;
// [Asm]   r14 -- r66;
// [Asm]   r5 -- r6;
// [Asm]   r1 -- r48;
// [Asm]   r2 -- r48;
// [Asm]   r3 -- r74;
// [Asm]   r7 -- r79;
// [Asm]   r48 -- r50;
// [Asm]   r7 -- r59;
// [Asm]   r5 -- r58;
// [Asm]   r5 -- r32;
// [Asm]   r5 -- r54;
// [Asm]   r5 -- r60;
// [Asm]   r27 -- r54;
// [Asm]   r19 -- r47;
// [Asm]   r1 -- r2;
// [Asm]   r3 -- r33;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r71;
// [Asm]   r2 -- r13;
// [Asm]   r1 -- r51;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r5 -- r51;
// [Asm]   r6 -- r72;
// [Asm]   r11 -- r15;
// [Asm]   r1 -- r38;
// [Asm]   r1 -- r41;
// [Asm]   r6 -- r50;
// [Asm]   r2 -- r96;
// [Asm]   r3 -- r35;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r35;
// [Asm]   r6 -- r56;
// [Asm]   r15 -- r47;
// [Asm]   r2 -- r69;
// [Asm]   r5 -- r36;
// [Asm]   r2 -- r86;
// [Asm]   r6 -- r25;
// [Asm]   r3 -- r94;
// [Asm]   r4 -- r13;
// [Asm]   r72 -- r74;
// [Asm]   r7 -- r44;
// [Asm]   r3 -- r25;
// [Asm]   r2 -- r73;
// [Asm]   r6 -- r62;
// [Asm]   r2 -- r4;
// [Asm]   r6 -- r41;
// [Asm]   r1 -- r75;
// [Asm]   r1 -- r55;
// [Asm]   r29 -- r83;
// [Asm]   r4 -- r88;
// [Asm]   r72 -- r73;
// [Asm]   r7 -- r20;
// [Asm]   r2 -- r50;
// [Asm]   r13 -- r16;
// [Asm]   r5 -- r19;
// [Asm]   r6 -- r53;
// [Asm]   r6 -- r46;
// [Asm]   r11 -- r23;
// [Asm]   r16 -- r66;
// [Asm]   r27 -- r53;
// [Asm]   r33 -- r35;
// [Asm]   r3 -- r83;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r38;
// [Asm]   r6 -- r59;
// [Asm]   r7 -- r75;
// [Asm]   r3 -- r22;
// [Asm]   r5 -- r74;
// [Asm]   r82 -- r83;
// [Asm]   r6 -- r19;
// [Asm]   r7 -- r22;
// [Asm]   r3 -- r65;
// [Asm]   r7 -- r19;
// [Asm]   r5 -- r97;
// [Asm]   r2 -- r14;
// [Asm]   r4 -- r100;
// [Asm]   r3 -- r99;
// [Asm]   r1 -- r79;
// [Asm]   r2 -- r89;
// [Asm]   r48 -- r49;
// [Asm]   r1 -- r97;
// [Asm]   r33 -- r64;
// [Asm]   r13 -- r14;
// [Asm]   r5 -- r68;
// [Asm]   r3 -- r29;
// [Asm]   r7 -- r36;
// [Asm]   r1 -- r72;
// [Asm]   r1 -- r89;
// [Asm]   r3 -- r66;
// [Asm]   r1 -- r99;
// [Asm]   r5 -- r81;
// [Asm]   r1 -- r95;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r60;
// [Asm]   r27 -- r76;
// [Asm]   r2 -- r75;
// [Asm]   r5 -- r25;
// [Asm]   r89 -- r91;
// [Asm]   r12 -- r16;
// [Asm]   r6 -- r38;
// [Asm]   r6 -- r74;
// [Asm]   r4 -- r74;
// [Asm]   r4 -- r10;
// [Asm]   r33 -- r97;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   r27 -- r52;
// [Asm]   r7 -- r46;
// [Asm]   r1 -- r24;
// [Asm]   r1 -- r42;
// [Asm]   r6 -- r52;
// [Asm]   r2 -- r58;
// [Asm]   r5 -- r12;
// [Asm]   r6 -- r95;
// [Asm]   r2 -- r62;
// [Asm]   r2 -- r45;
// [Asm]   r4 -- r41;
// [Asm]   r6 -- r36;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r56;
// [Asm]   r7 -- r56;
// [Asm]   r4 -- r58;
// [Asm]   r6 -- r66;
// [Asm]   r5 -- r95;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r1 -- r88;
// [Asm]   r1 -- r85;
// [Asm]   r3 -- r32;
// [Asm]   r6 -- r54;
// [Asm]   r5 -- r42;
// [Asm]   r1 -- r17;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r78;
// [Asm]   r4 -- r91;
// [Asm]   r3 -- r89;
// [Asm]   r5 -- r92;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r18;
// [Asm]   r1 -- r62;
// [Asm]   r27 -- r99;
// [Asm]   r4 -- r35;
// [Asm]   r4 -- r69;
// [Asm]   r1 -- r70;
// [Asm]   r1 -- r31;
// [Asm]   r2 -- r101;
// [Asm]   r2 -- r59;
// [Asm]   r2 -- r54;
// [Asm]   r2 -- r92;
// [Asm]   r2 -- r68;
// [Asm]   r4 -- r33;
// [Asm]   r1 -- r87;
// [Asm]   r3 -- r97;
// [Asm]   r5 -- r86;
// [Asm]   r4 -- r86;
// [Asm]   r6 -- r96;
// [Asm]   r5 -- r83;
// [Asm]   r2 -- r46;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r43;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r3 -- r40;
// [Asm]   r3 -- r10;
// [Asm]   r7 -- r95;
// [Asm]   r5 -- r91;
// [Asm]   r4 -- r12;
// [Asm]   r3 -- r27;
// [Asm]   r3 -- r69;
// [Asm]   r5 -- r80;
// [Asm]   r2 -- r97;
// [Asm]   r68 -- r70;
// [Asm]   r3 -- r95;
// [Asm]   r5 -- r7;
// [Asm]   r5 -- r90;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r11 -- r47;
// [Asm]   r4 -- r49;
// [Asm]   r7 -- r54;
// [Asm]   r2 -- r23;
// [Asm]   r6 -- r32;
// [Asm]   r15 -- r66;
// [Asm]   r7 -- r82;
// [Asm]   r6 -- r92;
// [Asm]   r5 -- r89;
// [Asm]   r29 -- r54;
// [Asm]   r2 -- r72;
// [Asm]   r4 -- r16;
// [Asm]   r7 -- r52;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r49;
// [Asm]   r7 -- r88;
// [Asm]   r1 -- r23;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r48;
// [Asm]   r5 -- r23;
// [Asm]   r1 -- r53;
// [Asm]   r5 -- r79;
// [Asm]   r4 -- r79;
// [Asm]   r7 -- r99;
// [Asm]   r7 -- r71;
// [Asm]   r3 -- r87;
// [Asm]   r1 -- r15;
// [Asm]   r4 -- r20;
// [Asm]   r1 -- r60;
// [Asm]   r3 -- r47;
// [Asm]   r6 -- r16;
// [Asm]   r5 -- r87;
// [Asm]   r2 -- r55;
// [Asm]   r1 -- r65;
// [Asm]   r4 -- r89;
// [Asm]   r21 -- r47;
// [Asm]   r1 -- r66;
// [Asm]   r6 -- r12;
// [Asm]   r7 -- r81;
// [Asm]   r6 -- r24;
// [Asm]   r14 -- r47;
// [Asm]   r7 -- r73;
// [Asm]   r2 -- r28;
// [Asm]   r23 -- r47;
// [Asm]   r2 -- r29;
// [Asm]   r4 -- r11;
// [Asm]   r7 -- r60;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r7 -- r33;
// [Asm]   r6 -- r28;
// [Asm]   r1 -- r59;
// [Asm]   r4 -- r85;
// [Asm]   r4 -- r72;
// [Asm]   r20 -- r47;
// [Asm]   r1 -- r74;
// [Asm]   r3 -- r55;
// [Asm]   r7 -- r11;
// [Asm]   r7 -- r47;
// [Asm]   r1 -- r83;
// [Asm]   r6 -- r90;
// [Asm]   r6 -- r82;
// [Asm]   r4 -- r47;
// [Asm]   r7 -- r43;
// [Asm]   r2 -- r100;
// [Asm]   r3 -- r36;
// [Asm]   r1 -- r73;
// [Asm]   r2 -- r71;
// [Asm]   r12 -- r14;
// [Asm]   r7 -- r50;
// [Asm]   r3 -- r54;
// [Asm]   r7 -- r68;
// [Asm]   r1 -- r3;
// [Asm]   r5 -- r43;
// [Asm]   r0 -- r7;
// [Asm]   r7 -- r69;
// [Asm]   r1 -- r82;
// [Asm]   r1 -- r92;
// [Asm]   r5 -- r76;
// [Asm]   r11 -- r21;
// [Asm]   r33 -- r38;
// [Asm]   r4 -- r19;
// [Asm]   r17 -- r47;
// [Asm]   r3 -- r44;
// [Asm]   r68 -- r69;
// [Asm]   r7 -- r51;
// [Asm]   r6 -- r81;
// [Asm]   r2 -- r32;
// [Asm]   r5 -- r82;
// [Asm]   r3 -- r91;
// [Asm]   r1 -- r90;
// [Asm]   r5 -- r21;
// [Asm]   r6 -- r73;
// [Asm]   r4 -- r68;
// [Asm]   r5 -- r33;
// [Asm]   r4 -- r34;
// [Asm]   r6 -- r35;
// [Asm]   r7 -- r97;
// [Asm]   r13 -- r66;
// [Asm]   r1 -- r86;
// [Asm]   r4 -- r97;
// [Asm]   r1 -- r57;
// [Asm]   r5 -- r72;
// [Asm]   r5 -- r10;
// [Asm]   r11 -- r14;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r2 -- r81;
// [Asm]   r3 -- r42;
// [Asm]   r5 -- r85;
// [Asm]   r5 -- r22;
// [Asm]   r6 -- r100;
// [Asm]   r5 -- r59;
// [Asm]   r2 -- r43;
// [Asm]   r5 -- r18;
// [Asm]   r1 -- r45;
// [Asm]   r5 -- r47;
// [Asm]   r2 -- r99;
// [Asm]   r5 -- r29;
// [Asm]   r1 -- r52;
// [Asm]   r11 -- r18;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r3 -- r68;
// [Asm]   r6 -- r101;
// [Asm]   r7 -- r27;
// [Asm]   r3 -- r5;
// [Asm]   r6 -- r89;
// [Asm]   r6 -- r85;
// [Asm]   r7 -- r91;
// [Asm]   r4 -- r31;
// [Asm]   r2 -- r34;
// [Asm]   r5 -- r31;
// [Asm]   r3 -- r92;
// [Asm]   r2 -- r25;
// [Asm]   r6 -- r60;
// [Asm]   r5 -- r62;
// [Asm]   r3 -- r78;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r57;
// [Asm]   r6 -- r80;
// [Asm]   r2 -- r83;
// [Asm]   r6 -- r91;
// [Asm]   r11 -- r13;
// [Asm]   r5 -- r78;
// [Asm]   r7 -- r94;
// [Asm]   r7 -- r38;
// [Asm]   r1 -- r40;
// [Asm]   r2 -- r12;
// [Asm]   r6 -- r83;
// [Asm]   r0 -- r1;
// [Asm]   r5 -- r101;
// [Asm]   r7 -- r80;
// [Asm]   r5 -- r55;
// [Asm]   r3 -- r49;
// [Asm]   r2 -- r36;
// [Asm]   r5 -- r66;
// [Asm]   r1 -- r80;
// [Asm]   r6 -- r55;
// [Asm]   r7 -- r42;
// [Asm]   r0 -- r4;
// [Asm]   r6 -- r23;
// [Asm]   r6 -- r65;
// [Asm]   r4 -- r14;
// [Asm]   r3 -- r46;
// [Asm]   r7 -- r65;
// [Asm]   r14 -- r15;
// [Asm]   r6 -- r76;
// [Asm]   r16 -- r47;
// [Asm]   r7 -- r76;
// [Asm]   r85 -- r88;
// [Asm]   r3 -- r19;
// [Asm]   r3 -- r45;
// [Asm]   r7 -- r29;
// [Asm]   r13 -- r15;
// [Asm]   r2 -- r26;
// [Asm]   r11 -- r20;
// [Asm]   r1 -- r43;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r3 -- r101;
// [Asm]   r3 -- r38;
// [Asm]   r1 -- r34;
// [Asm]   r1 -- r47;
// [Asm]   r5 -- r71;
// [Asm]   r7 -- r24;
// [Asm]   r22 -- r47;
// [Asm]   r2 -- r90;
// [Asm]   r47 -- r48;
// [Asm]   r6 -- r33;
// [Asm]   r11 -- r16;
// [Asm]   r1 -- r22;
// [Asm]   r2 -- r52;
// [Asm]   r11 -- r12;
// [Asm]   r2 -- r65;
// [Asm]   r2 -- r88;
// [Asm]   r2 -- r80;
// [Asm]   r1 -- r13;
// [Asm]   r11 -- r22;
// [Asm]   r7 -- r74;
// [Asm]   r7 -- r48;
// [Asm]   r6 -- r22;
// [Asm]   r7 -- r49;
// [Asm]   r6 -- r99;
// [Asm]   r6 -- r20;
// [Asm]   r3 -- r50;
// [Asm]   r7 -- r17;
// [Asm]   r2 -- r44;
// [Asm]   r3 -- r57;
// [Asm]   r4 -- r71;
// [Asm]   r6 -- r27;
// [Asm]   r2 -- r40;
// [Asm]   r4 -- r15;
// [Asm]   r12 -- r13;
// [Asm]   r5 -- r28;
// [Asm]   r27 -- r82;
// [Asm]   r1 -- r81;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r4 -- r32;
// [Asm]   r1 -- r94;
// [Asm]   r1 -- r29;
// [Asm]   r7 -- r15;
// [Asm]   r7 -- r85;
// [Asm]   r6 -- r87;
// [Asm]   r6 -- r57;
// [Asm]   r5 -- r45;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r5 -- r70;
// [Asm]   r1 -- r25;
// [Asm]   r5 -- r56;
// [Asm]   r5 -- r94;
// [Asm]   r5 -- r61;
// [Asm]   r12 -- r66;
// [Asm]   r1 -- r61;
// [Asm]   r7 -- r41;
// [Asm]   r2 -- r17;
// [Asm]   r3 -- r73;
// [Asm]   r18 -- r47;
// [Asm]   r7 -- r57;
// [Asm]   r13 -- r47;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r87;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r35;
// [Asm]   r4 -- r6;
// [Asm]   r7 -- r12;
// [Asm]   r7 -- r14;
// [Asm]   r1 -- r54;
// [Asm]   r1 -- r100;
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r71;
// [Asm]   r1 -- r76;
// [Asm]   r33 -- r96;
// [Asm]   r6 -- r21;
// [Asm]   r4 -- r87;
// [Asm]   r4 -- r38;
// [Asm]   r2 -- r94;
// [Asm]   r5 -- r41;
// [Asm]   r1 -- r12;
// [Asm]   r7 -- r21;
// [Asm]   r1 -- r71;
// [Asm]   r6 -- r47;
// [Asm]   r14 -- r16;
// [Asm]   r3 -- r43;
// [Asm]   r7 -- r40;
// [Asm]   r27 -- r29;
// [Asm]   r1 -- r4;
// [Asm]   r5 -- r88;
// [Asm]   r2 -- r95;
// [Asm]   r3 -- r100;
// [Asm]   r7 -- r100;
// [Asm]   r27 -- r55;
// [Asm]   r1 -- r7;
// [Asm]   r2 -- r85;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r56;
// [Asm]   r3 -- r60;
// [Asm]   r3 -- r79;
// [Asm]   r5 -- r96;
// [Asm]   r2 -- r10;
// [Asm]   r6 -- r29;
// [Asm]   r7 -- r53;
// [Asm]   r5 -- r49;
// [Asm]   r1 -- r69;
// [Asm]   r5 -- r99;
// [Asm]   r1 -- r91;
// [Asm]   r1 -- r20;
// [Asm]   r89 -- r90;
// [Asm]   r3 -- r24;
// [Asm]   r5 -- r73;
// [Asm]   r4 -- r40;
// [Asm]   r4 -- r42;
// [Asm]   r3 -- r51;
// [Asm]   r3 -- r34;
// [Asm]   r7 -- r83;
// [Asm]   r2 -- r74;
// [Asm]   r1 -- r46;
// [Asm]   r4 -- r21;
// [Asm]   r2 -- r76;
// [Asm]   r6 -- r13;
// [Asm]   r29 -- r55;
// [Asm]   r3 -- r76;
// [Asm]   r7 -- r34;
// [Asm]   r7 -- r90;
// [Asm]   r2 -- r33;
// [Asm]   r7 -- r55;
// [Asm]   r3 -- r96;
// [Asm]   r3 -- r4;
// [Asm]   r54 -- r55;
// [Asm]   r4 -- r43;
// [Asm]   r5 -- r75;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r5 -- r53;
// [Asm]   r85 -- r87;
// [Asm]   r7 -- r10;
// [Asm]   r2 -- r47;
// [Asm]   r3 -- r80;
// [Asm]   r6 -- r94;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r82;
// [Asm]   r7 -- r70;
// [Asm]   r1 -- r27;
// [Asm]   r6 -- r31;
// [Asm]   r2 -- r79;
// [Asm]   r6 -- r78;
// [Asm]   r28 -- r29;
// [Asm]   r7 -- r61;
// [Asm]   r6 -- r45;
// [Asm]   r4 -- r50;
// [Asm]   r4 -- r8;
// [Asm]   r5 -- r14;
// [Asm]   r5 -- r50;
// [Asm]   r1 -- r49;
// [Asm]   r1 -- r44;
// [Asm]   r12 -- r47;
// [Asm]   r3 -- r61;
// [Asm]   r7 -- r96;
// [Asm]   r2 -- r24;
// [Asm]   r4 -- r94;
// [Asm]   r7 -- r8;
// [Asm]   r6 -- r61;
// [Asm]   r6 -- r97;
// [Asm]   r3 -- r58;
// [Asm]   r4 -- r9;
// [Asm]   r3 -- r88;
// [Asm]   r29 -- r53;
// [Asm]   r2 -- r70;
// [Asm]   r5 -- r34;
// [Asm]   r2 -- r53;
// [Asm]   r2 -- r61;
// [Asm]   r2 -- r87;
// [Asm]   r6 -- r58;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r1 -- r58;
// [Asm]   r4 -- r24;
// [Asm]   r5 -- r100;
// [Asm]   r6 -- r15;
// [Asm]   r11 -- r17;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r18;
// [Asm]   r7 -- r45;
// [Asm]   r6 -- r44;
// [Asm]   r12 -- r15;
// [Asm]   r4 -- r59;
// [Asm]   r7 -- r89;
// [Asm]   r3 -- r12;
// [Asm]   r7 -- r26;
// [Asm]   r6 -- r79;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r32;
// [Asm]   r7 -- r13;
// [Asm]   r6 -- r51;
// [Asm]   r29 -- r52;
// [Asm]   r85 -- r89;
// [Asm]   r1 -- r78;
// [Asm]   r5 -- r52;
// [Asm]   r5 -- r44;
// [Asm]   r7 -- r86;
// [Asm]   r2 -- r82;
// [Asm]   r3 -- r28;
// [Asm]   r29 -- r99;
// [Asm]   r3 -- r90;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r26;
// [Asm]   r6 -- r40;
// [Asm]   r1 -- r101;
// [Asm]   r1 -- r28;
// [Asm]   r7 -- r66;
// [Asm]   r7 -- r28;
// [Asm]   r4 -- r70;
// [Asm]   r6 -- r8;
// [Asm]   r54 -- r99;
// [Asm]   r6 -- r34;
// [Asm]   r33 -- r34;
// [Asm]   r1 -- r96;
// [Asm]   r7 -- r92;
// [Asm]   r4 -- r73;
// [Asm]   r4 -- r45;
// [Asm]   r5 -- r46;
// [Asm]   r2 -- r56;
// [Asm]   r2 -- r66;
// [Asm]   r6 -- r42;
// [Asm]   r3 -- r72;
// [Asm]   r3 -- r81;
// [Asm]   r2 -- r21;
// [Asm]   r3 -- r41;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r3 -- r75;
// [Asm]   r68 -- r71;
// [Asm]   r7 -- r58;
// [Asm]   r3 -- r59;
// [Asm]   r7 -- r31;
// [Asm]   r4 -- r96;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r7 -- r23;
// [Asm]   r33 -- r94;
// [Asm]   r1 -- r36;
// [Asm]   r1 -- r14;
// [Asm]   r2 -- r19;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r7 -- r101;
// [Asm]   r85 -- r86;
// [Asm]   r5 -- r40;
// [Asm]   r5 -- r15;
// [Asm]   comment = "0:v61-> 1:v5-> 2:zero-> 3:v7-> 4:v8-> 5:v4-> 6:v6-> 7:v3-> 8:v108-> 9:v109-> 10:v62-> 11:a0-> 12:a1-> 13:a2-> 14:a3-> 15:a4-> 16:a5-> 47:v57-> 66:v2-> 17:a6-> 18:a7-> 19:t0-> 20:t1-> 21:t2-> 22:t3-> 23:t4-> 48:v58-> 49:v113-> 50:v114-> 24:v63-> 31:v144-> 32:v145-> 33:v10-> 34:v143-> 35:v140-> 38:v142-> 94:v141-> 96:v139-> 97:v138-> 100:v137-> 40:v28-> 41:v132-> 42:v133-> 43:v29-> 44:v75-> 45:v76-> 58:v31-> 59:v32-> 68:v70-> 69:v94-> 70:v95-> 71:v71-> 72:v72-> 73:v91-> 74:v92-> 78:v79-> 79:v80-> 85:v65-> 86:v102-> 87:v103-> 88:v66-> 89:v67-> 90:v99-> 91:v100-> 25:v64-> 26:v43-> 27:v36-> 28:v44-> 29:v35-> 52:v126-> 53:v127-> 54:v38-> 55:v125-> 99:v124-> 76:v41-> 82:v48-> 83:v49-> 36:v54-> 46:v78-> 51:v60-> 56:v45-> 60:v50-> 61:v55-> 62:v56-> 65:v34-> 75:v74-> 80:v82-> 81:v47-> 92:v69-> 95:v46-> 101:v51-> 57:v53-> 64:v136-> 30:v24-> 37:v83-> 39:v26-> 63:v22-> 67:v25-> 77:v20-> 84:v19-> 93:v21-> 98:v23"
// [Asm]   comment = "v61<-a0;v78<-a0;v10<-a0;v32<-a0;v41<-a0;v109<-a0;v43<-a0;v102<-a1;v75<-a0;v127<-a2;v45<-a0;v62<-a0;v4<-s3;v38<-a2;v63<-a0;v29<-a0;v66<-a1;v82<-a0;v144<-a0;v26<-a0;v124<-a3;v126<-a2;v34<-a0;v80<-a0;v55<-a0;v7<-s1;v48<-a0;v25<-a0;v74<-a0;v36<-a1;v20<-a0;v56<-a0;v28<-a0;v31<-a0;v143<-a1;v49<-a1;v60<-a0;v139<-a1;v79<-a0;v125<-a3;v50<-a0;v21<-a0;v91<-a0;v142<-a1;v72<-a1;v103<-a1;v137<-a1;v65<-a0;v57<-s6;v6<-s4;v133<-a0;v8<-s2;v35<-a0;v46<-a0;v140<-a1;v3<-s5;v136<-a1;v108<-a0;v54<-a0;v2<-a0;v145<-a0;v113<-a1;v53<-a0;v92<-a0;v70<-a0;v23<-a0;v100<-a0;v95<-a1;v58<-a0;v83<-a0;v5<-s0;v132<-a0;v44<-a1;v71<-a1;v94<-a1;v19<-a0;v114<-a1;v67<-a1;v24<-a0;v69<-a0;v76<-a0;v64<-a0;v22<-a0;v99<-a0;v138<-a1;v47<-a0;v51<-a0;v141<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux.252"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v43, v35, 1 ->   addi a0, a0, 1
// [Asm] subst   addi v44, v36, -1 ->   addi a1, a1, -1
// [Asm] subst   j .aux.252_53 ->   j .aux.252_53
// [Asm] subst   beq v36, zero, .aux.252_60 ->   beq a1, zero, .aux.252_60
// [Asm] subst   slliw v144, v8, 2 ->   slliw a0, s2, 2
// [Asm] subst   add v145, v5, v144 ->   add a0, s0, a0
// [Asm] subst   lw v10, 0(v145) ->   lw a0, 0(a0)
// [Asm] subst   li v143, 62 ->   li a1, 62
// [Asm] subst   beq v10, v143, .aux.252_5 ->   beq a0, a1, .aux.252_5
// [Asm] subst   li v140, 45 ->   li a1, 45
// [Asm] subst   beq v10, v140, .aux.252_11 ->   beq a0, a1, .aux.252_11
// [Asm] subst   li v142, 60 ->   li a1, 60
// [Asm] subst   beq v10, v142, .aux.252_7 ->   beq a0, a1, .aux.252_7
// [Asm] subst   lw v28, 0(v4) ->   lw a0, 0(s3)
// [Asm] subst   slliw v132, v28, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v133, v6, v132 ->   add a0, s4, a0
// [Asm] subst   lw v29, 0(v133) ->   lw a0, 0(a0)
// [Asm] subst   beq v29, zero, .aux.252_45 ->   beq a0, zero, .aux.252_45
// [Asm] subst   lw v75, 0(v4) ->   lw a0, 0(s3)
// [Asm] subst   addi v76, v75, -1 ->   addi a0, a0, -1
// [Asm] subst   sw v76, 0(v4) ->   sw a0, 0(s3)
// [Asm] subst   addi v78, v8, 1 ->   addi a0, s2, 1
// [Asm] subst   mv v8, v78 ->   mv s2, a0
// [Asm] subst   j .aux.252_2 ->   j .aux.252_2
// [Asm] subst   lw v57, 0(v4) ->   lw s6, 0(s3)
// [Asm] subst   call read_ch_until_newline_or_eof.249 ->   call read_ch_until_newline_or_eof.249
// [Asm] subst   slliw v113, v57, 2 ->   slliw a1, s6, 2
// [Asm] subst   add v114, v6, v113 ->   add a1, s4, a1
// [Asm] subst   sw v58, 0(v114) ->   sw a0, 0(a1)
// [Asm] subst   addi v60, v8, 1 ->   addi a0, s2, 1
// [Asm] subst   mv v8, v60 ->   mv s2, a0
// [Asm] subst   j .aux.252_2 ->   j .aux.252_2
// [Asm] subst   slliw v126, v35, 2 ->   slliw a2, a0, 2
// [Asm] subst   add v127, v5, v126 ->   add a2, s0, a2
// [Asm] subst   lw v38, 0(v127) ->   lw a2, 0(a2)
// [Asm] subst   li v125, 91 ->   li a3, 91
// [Asm] subst   beq v38, v125, .aux.252_56 ->   beq a2, a3, .aux.252_56
// [Asm] subst   sw v51, 0(v7) ->   sw a0, 0(s1)
// [Asm] subst   mv v53, zero ->   mv a0, zero
// [Asm] subst   addi v31, v8, 1 ->   addi a0, s2, 1
// [Asm] subst   mv a1, v3 ->   mv a1, s5
// [Asm] subst   mv a2, v4 ->   mv a2, s3
// [Asm] subst   mv a3, v5 ->   mv a3, s0
// [Asm] subst   mv a4, v6 ->   mv a4, s4
// [Asm] subst   mv a5, v7 ->   mv a5, s1
// [Asm] subst   call aux.252 ->   call aux.252
// [Asm] subst   sw v32, 0(v7) ->   sw a0, 0(s1)
// [Asm] subst   j .aux.252_44 ->   j .aux.252_44
// [Asm] subst   lw v55, 0(v7) ->   lw a0, 0(s1)
// [Asm] subst   addi v56, v55, 1 ->   addi a0, a0, 1
// [Asm] subst   mv v8, v56 ->   mv s2, a0
// [Asm] subst   j .aux.252_2 ->   j .aux.252_2
// [Asm] subst   li v136, 93 ->   li a1, 93
// [Asm] subst   bne v10, v136, .aux.252_20 ->   bne a0, a1, .aux.252_20
// [Asm] subst   addi v34, v8, 1 ->   addi a0, s2, 1
// [Asm] subst   mv v3, a1 ->   mv s5, a1
// [Asm] subst   mv v4, a2 ->   mv s3, a2
// [Asm] subst   mv v5, a3 ->   mv s0, a3
// [Asm] subst   mv v6, a4 ->   mv s4, a4
// [Asm] subst   mv v7, a5 ->   mv s1, a5
// [Asm] subst   mv v8, v2 ->   mv s2, a0
// [Asm] subst   mv v36, zero ->   mv a1, zero
// [Asm] subst   lw v70, 0(v4) ->   lw a0, 0(s3)
// [Asm] subst   slliw v94, v70, 2 ->   slliw a1, a0, 2
// [Asm] subst   add v95, v6, v94 ->   add a1, s4, a1
// [Asm] subst   lw v71, 0(v95) ->   lw a1, 0(a1)
// [Asm] subst   addi v72, v71, 1 ->   addi a1, a1, 1
// [Asm] subst   slliw v91, v70, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v92, v6, v91 ->   add a0, s4, a0
// [Asm] subst   sw v72, 0(v92) ->   sw a1, 0(a0)
// [Asm] subst   addi v74, v8, 1 ->   addi a0, s2, 1
// [Asm] subst   mv v8, v74 ->   mv s2, a0
// [Asm] subst   j .aux.252_2 ->   j .aux.252_2
// [Asm] subst   bge v35, v3, .aux.252_54 ->   bge a0, s5, .aux.252_54
// [Asm] subst   addi v41, v35, 1 ->   addi a0, a0, 1
// [Asm] subst   j .aux.252_53 ->   j .aux.252_53
// [Asm] subst   lw v79, 0(v4) ->   lw a0, 0(s3)
// [Asm] subst   addi v80, v79, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v80, 0(v4) ->   sw a0, 0(s3)
// [Asm] subst   addi v82, v8, 1 ->   addi a0, s2, 1
// [Asm] subst   mv v8, v82 ->   mv s2, a0
// [Asm] subst   j .aux.252_2 ->   j .aux.252_2
// [Asm] subst   mv v83, v8 ->   mv a0, s2
// [Asm] subst   j .aux.252_29 ->   j .aux.252_29
// [Asm] subst   addi v48, v35, 1 ->   addi a0, a0, 1
// [Asm] subst   addi v49, v36, 1 ->   addi a1, a1, 1
// [Asm] subst   j .aux.252_53 ->   j .aux.252_53
// [Asm] subst   sw v8, 0(v7) ->   sw s2, 0(s1)
// [Asm] subst   mv v19, v8 ->   mv a0, s2
// [Asm] subst   j .aux.252_21 ->   j .aux.252_21
// [Asm] subst   bge v8, v3, .aux.252_3 ->   bge s2, s5, .aux.252_3
// [Asm] subst   lw v65, 0(v4) ->   lw a0, 0(s3)
// [Asm] subst   slliw v102, v65, 2 ->   slliw a1, a0, 2
// [Asm] subst   add v103, v6, v102 ->   add a1, s4, a1
// [Asm] subst   lw v66, 0(v103) ->   lw a1, 0(a1)
// [Asm] subst   addi v67, v66, -1 ->   addi a1, a1, -1
// [Asm] subst   slliw v99, v65, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v100, v6, v99 ->   add a0, s4, a0
// [Asm] subst   sw v67, 0(v100) ->   sw a1, 0(a0)
// [Asm] subst   addi v69, v8, 1 ->   addi a0, s2, 1
// [Asm] subst   mv v8, v69 ->   mv s2, a0
// [Asm] subst   j .aux.252_2 ->   j .aux.252_2
// [Asm] subst   li v141, 43 ->   li a1, 43
// [Asm] subst   beq v10, v141, .aux.252_9 ->   beq a0, a1, .aux.252_9
// [Asm] subst   mv v19, v8 ->   mv a0, s2
// [Asm] subst   li v139, 46 ->   li a1, 46
// [Asm] subst   beq v10, v139, .aux.252_13 ->   beq a0, a1, .aux.252_13
// [Asm] subst   li v138, 44 ->   li a1, 44
// [Asm] subst   beq v10, v138, .aux.252_15 ->   beq a0, a1, .aux.252_15
// [Asm] subst   ret ->   ret
// [Asm] subst   li v124, 93 ->   li a3, 93
// [Asm] subst   bne v38, v124, .aux.252_59 ->   bne a2, a3, .aux.252_59
// [Asm] subst   li v137, 91 ->   li a1, 91
// [Asm] subst   beq v10, v137, .aux.252_17 ->   beq a0, a1, .aux.252_17
// [Asm] subst   j .aux.252_65 ->   j .aux.252_65
// [Asm] subst   lw v61, 0(v4) ->   lw a0, 0(s3)
// [Asm] subst   slliw v108, v61, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v109, v6, v108 ->   add a0, s4, a0
// [Asm] subst   lw v62, 0(v109) ->   lw a0, 0(a0)
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   addi v64, v8, 1 ->   addi a0, s2, 1
// [Asm] subst   mv v8, v64 ->   mv s2, a0
// [Asm] subst   j .aux.252_2 ->   j .aux.252_2
// [Asm] pre_assigned_registers: Self(fref=f14) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main.254 ->   call main.254
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v3, BlockParam(bref=b5, bpref=$b.0) -> v5, Self(fref=f0) -> v0, BlockParam(bref=b6, bpref=$b.0) -> v6, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=13)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=10)])
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [v7]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [v8]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10, v2]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [v5]
// [Asm] defined: v6 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of read_ch_until_newline_or_eof.249"];
// [Asm]   r0 [label="v7 ← a0", color=green];
// [Asm]   r3 [label="v5 ← a0", color=green];
// [Asm]   r9 [label="a5", color=blue];
// [Asm]   r6 [label="a2", color=blue];
// [Asm]   r13 [label="t1", color=blue];
// [Asm]   r4 [label="a0", color=blue];
// [Asm]   r1 [label="v6 ← a0", color=green];
// [Asm]   r11 [label="a7", color=blue];
// [Asm]   r7 [label="a3", color=blue];
// [Asm]   r10 [label="a6", color=blue];
// [Asm]   r14 [label="t2", color=blue];
// [Asm]   r8 [label="a4", color=blue];
// [Asm]   r5 [label="a1", color=blue];
// [Asm]   r15 [label="t3", color=blue];
// [Asm]   r2 [label="v8 ← a0", color=green];
// [Asm]   r16 [label="t4", color=blue];
// [Asm]   r18 [label="v10 ← a1", color=green];
// [Asm]   r19 [label="v9 ← a1", color=green];
// [Asm]   r17 [label="v2 ← a0", color=green];
// [Asm]   r12 [label="t0", color=blue];
// [Asm]   r4 -- r13;
// [Asm]   r4 -- r7;
// [Asm]   r17 -- r18;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r16;
// [Asm]   r4 -- r8;
// [Asm]   r4 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r17 -- r19;
// [Asm]   r4 -- r12;
// [Asm]   comment = "0:v7-> 1:v6-> 2:v8-> 3:v5-> 4:a0-> 5:a1-> 6:a2-> 7:a3-> 8:a4-> 9:a5-> 10:a6-> 11:a7-> 12:t0-> 13:t1-> 14:t2-> 15:t3-> 16:t4-> 17:v2-> 18:v10-> 19:v9"
// [Asm]   comment = "v7<-a0;v5<-a0;v6<-a0;v8<-a0;v10<-a1;v9<-a1;v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of read_ch_until_newline_or_eof.249"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v7, -1 ->   li a0, -1
// [Asm] subst   j .read_ch_until_newline_or_eof.249_6 ->   j .read_ch_until_newline_or_eof.249_6
// [Asm] subst   li v8, -1 ->   li a0, -1
// [Asm] subst   call minimbt_read_char ->   call minimbt_read_char
// [Asm] subst   li v10, 10 ->   li a1, 10
// [Asm] subst   beq v2, v10, .read_ch_until_newline_or_eof.249_1 ->   beq a0, a1, .read_ch_until_newline_or_eof.249_1
// [Asm] subst   ret ->   ret
// [Asm] subst   li v9, 13 ->   li a1, 13
// [Asm] subst   bne v2, v9, .read_ch_until_newline_or_eof.249_4 ->   bne a0, a1, .read_ch_until_newline_or_eof.249_4
// [Asm] subst   j .read_ch_until_newline_or_eof.249_5 ->   j .read_ch_until_newline_or_eof.249_5
// [Asm] before colored: # leaf false
// [Asm] read_prog.255:
// [Asm] # block info: defs: [v3, v4, v5, v2], uses: [v3, a1, a0, v2], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, a0], live_out: [v4, v5]
// [Asm] # block parameters: []
// [Asm] .read_prog.255_5:
// [Asm]   # save_ctx1  # live: [a1, a0]
// [Asm]   mv v2, a0  # live: [a1, v2]
// [Asm]   mv v3, a1  # live: [v2, v3]
// [Asm] # control
// [Asm]   mv v4, v2  # live: [v4, v3]
// [Asm]   mv v5, v3  # live: [v4, v5]
// [Asm] 
// [Asm] # block info: defs: [t1, v16, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v6, v16, a0], upward_exposed: [], params_defs: [v4, v5]
// [Asm] # live_in: [v4, v5], live_out: [v4, v5, v6]
// [Asm] # block parameters: [v4, v5]
// [Asm] .read_prog.255_0:
// [Asm]   # save_ctx2  # live: [v4, v5]
// [Asm]   call read_ch_until_newline_or_eof.249  # live: [v4, v5, a0]
// [Asm]   mv v6, a0  # live: [v4, v5, v6]
// [Asm]   # restore_ctx2  # live: [v4, v5, v6]
// [Asm] # control
// [Asm]   li v16, -1  # live: [v4, v5, v6, v16]
// [Asm]   beq v6, v16, .read_prog.255_1  # live: [v4, v5, v6]
// [Asm] 
// [Asm] # block info: defs: [v4, v14, v15, v9], uses: [v5, v14, v4, v6, v15, v9], upward_exposed: [v4, v5, v6], params_defs: []
// [Asm] # live_in: [v4, v5, v6], live_out: [v4, v5]
// [Asm] # block parameters: []
// [Asm] .read_prog.255_2:
// [Asm]   slliw v14, v4, 2  # live: [v4, v5, v6, v14]
// [Asm]   add v15, v5, v14  # live: [v4, v5, v6, v15]
// [Asm]   sw v6, 0(v15)  # live: [v4, v5]
// [Asm]   addi v9, v4, 1  # live: [v5, v9]
// [Asm] # control
// [Asm]   mv v4, v9  # live: [v4, v5]
// [Asm]   mv v5, v5  # live: [v4, v5]
// [Asm]   j .read_prog.255_0  # live: [v4, v5]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v4, v5, a1, v10, a0], upward_exposed: [v4, v5], params_defs: []
// [Asm] # live_in: [v4, v5], live_out: [v11]
// [Asm] # block parameters: []
// [Asm] .read_prog.255_1:
// [Asm]   # save_ctx2  # live: [v4, v5]
// [Asm]   mv a0, v4  # live: [v5, a0]
// [Asm]   mv a1, v5  # live: [a1, a0]
// [Asm]   call bf.250  # live: [a0]
// [Asm]   mv v10, a0  # live: [v10]
// [Asm]   # restore_ctx2  # live: [v10]
// [Asm] # control
// [Asm]   mv v11, v10  # live: [v11]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v11, a0], upward_exposed: [v11], params_defs: [v11]
// [Asm] # live_in: [v11], live_out: []
// [Asm] # block parameters: [v11]
// [Asm] .read_prog.255_3:
// [Asm] # control
// [Asm]   mv a0, v11  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] bf.250:
// [Asm] # block info: defs: [v2, t1, v16, v14, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, v6, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, v16, v14, v5, a5, a0, a2, a1, s11, a3, zero, a4, v8, v4, v6, v3], upward_exposed: [a1, s11, a0, zero], params_defs: []
// [Asm] # live_in: [a1, s11, a0, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .bf.250_0:
// [Asm]   # save_ctx1  # live: [zero, a0, a1, s11]
// [Asm]   mv v2, a0  # live: [zero, a1, s11, v2]
// [Asm]   mv v3, a1  # live: [v2, zero, s11, v3]
// [Asm]   addi v4, s11, -4  # live: [v2, zero, v4, v3]
// [Asm]   andi s11, v4, -8  # live: [v2, zero, v4, s11, v3]
// [Asm]   sw zero, 0(v4)  # live: [v2, zero, v4, s11, v3]
// [Asm]   li v16, 1024  # live: [v2, v16, zero, v4, s11, v3]
// [Asm]   mul v8, v16, v16  # live: [v2, zero, v8, v4, s11, v3]
// [Asm]   slliw v14, v8, 2  # live: [v2, v14, zero, v8, v4, s11, v3]
// [Asm]   sub v5, s11, v14  # live: [v2, v5, zero, v8, v4, v3]
// [Asm]   andi s11, v5, -8  # live: [v2, v5, zero, v8, v4, s11, v3]
// [Asm]   mv a1, v8  # live: [v2, v5, zero, v4, s11, v3]
// [Asm]   addi v6, s11, -4  # live: [v2, v5, zero, v4, v6, v3]
// [Asm]   andi s11, v6, -8  # live: [v2, v5, zero, v4, v6, v3]
// [Asm]   sw zero, 0(v6)  # live: [v2, v5, zero, v4, v6, v3]
// [Asm]   # save_ctx2  # live: [v2, v5, zero, v4, v6, v3]
// [Asm]   mv a0, zero  # live: [v2, v5, zero, a0, v4, v6, v3]
// [Asm]   mv a1, v2  # live: [v5, zero, a0, v4, a1, v6, v3]
// [Asm]   mv a2, v4  # live: [v5, zero, a0, a2, a1, v6, v3]
// [Asm]   mv a3, v3  # live: [v5, zero, a0, a2, a1, v6, a3]
// [Asm]   mv a4, v5  # live: [zero, a0, a4, a2, a1, v6, a3]
// [Asm]   mv a5, v6  # live: [a5, zero, a0, a4, a2, a1, a3]
// [Asm]   call aux.252  # live: [zero, a0]
// [Asm]   mv v11, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main.254  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] aux.252:
// [Asm] # block info: defs: [v2, v5, v7, v8, v4, v6, v3], uses: [a5, a0, a4, a2, a1, a3, v2], upward_exposed: [a2, a1, a3, a5, a0, a4], params_defs: []
// [Asm] # live_in: [a5, a0, zero, a4, a2, a1, a3], live_out: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.252_0:
// [Asm]   # save_ctx1  # live: [a5, zero, a0, a4, a2, a1, a3]
// [Asm]   mv v2, a0  # live: [a5, zero, a4, a2, a1, a3, v2]
// [Asm]   mv v3, a1  # live: [v2, a5, zero, a4, a2, a3, v3]
// [Asm]   mv v4, a2  # live: [v2, a5, zero, a4, v4, a3, v3]
// [Asm]   mv v5, a3  # live: [v2, v5, a5, zero, a4, v4, v3]
// [Asm]   mv v6, a4  # live: [v2, v5, a5, zero, v4, v6, v3]
// [Asm]   mv v7, a5  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v8, v2  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v3, v8], upward_exposed: [v3, v8], params_defs: [v8]
// [Asm] # live_in: [v5, zero, v7, v8, v4, v6, v3], live_out: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] # block parameters: [v8]
// [Asm] .aux.252_2:
// [Asm] # control
// [Asm]   bge v8, v3, .aux.252_3  # live: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v10, v143, v144, v145], uses: [v5, v10, v143, v144, v145, v8], upward_exposed: [v5, v8], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v8, v4, v6, v3], live_out: [v5, v10, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.252_4:
// [Asm]   slliw v144, v8, 2  # live: [v5, zero, v7, v8, v4, v6, v144, v3]
// [Asm]   add v145, v5, v144  # live: [v5, zero, v7, v8, v4, v6, v145, v3]
// [Asm]   lw v10, 0(v145)  # live: [v5, v10, zero, v7, v8, v4, v6, v3]
// [Asm] # control
// [Asm]   li v143, 62  # live: [v5, v10, zero, v7, v8, v4, v6, v143, v3]
// [Asm]   beq v10, v143, .aux.252_5  # live: [v5, v10, zero, v7, v8, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v142], uses: [v10, v142], upward_exposed: [v10], params_defs: []
// [Asm] # live_in: [v5, v10, zero, v8, v7, v4, v6, v3], live_out: [v5, v10, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.252_6:
// [Asm] # control
// [Asm]   li v142, 60  # live: [v5, v10, v142, zero, v7, v8, v4, v6, v3]
// [Asm]   beq v10, v142, .aux.252_7  # live: [v5, v10, zero, v7, v8, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v141], uses: [v141, v10], upward_exposed: [v10], params_defs: []
// [Asm] # live_in: [v5, v10, zero, v8, v7, v4, v6, v3], live_out: [v5, v10, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.252_8:
// [Asm] # control
// [Asm]   li v141, 43  # live: [v5, v10, zero, v7, v8, v4, v141, v6, v3]
// [Asm]   beq v10, v141, .aux.252_9  # live: [v5, v10, zero, v7, v8, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v140], uses: [v140, v10], upward_exposed: [v10], params_defs: []
// [Asm] # live_in: [v5, v10, zero, v8, v7, v4, v6, v3], live_out: [v5, v10, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.252_10:
// [Asm] # control
// [Asm]   li v140, 45  # live: [v5, v10, zero, v7, v8, v4, v6, v140, v3]
// [Asm]   beq v10, v140, .aux.252_11  # live: [v5, v10, zero, v7, v8, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v139], uses: [v10, v139], upward_exposed: [v10], params_defs: []
// [Asm] # live_in: [v5, v10, zero, v7, v8, v4, v6, v3], live_out: [v5, v10, zero, v7, v8, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.252_12:
// [Asm] # control
// [Asm]   li v139, 46  # live: [v5, v10, zero, v8, v7, v4, v6, v139, v3]
// [Asm]   beq v10, v139, .aux.252_13  # live: [v5, v10, zero, v8, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v138], uses: [v10, v138], upward_exposed: [v10], params_defs: []
// [Asm] # live_in: [v5, v10, zero, v7, v8, v4, v6, v3], live_out: [v5, v10, zero, v7, v8, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.252_14:
// [Asm] # control
// [Asm]   li v138, 44  # live: [v5, v10, zero, v8, v7, v4, v6, v138, v3]
// [Asm]   beq v10, v138, .aux.252_15  # live: [v5, v10, zero, v8, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v137], uses: [v10, v137], upward_exposed: [v10], params_defs: []
// [Asm] # live_in: [v5, v10, zero, v8, v7, v4, v6, v3], live_out: [v5, v10, zero, v7, v8, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.252_16:
// [Asm] # control
// [Asm]   li v137, 91  # live: [v5, v10, zero, v8, v7, v4, v6, v137, v3]
// [Asm]   beq v10, v137, .aux.252_17  # live: [v5, v10, zero, v8, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v136], uses: [v136, v10], upward_exposed: [v10], params_defs: []
// [Asm] # live_in: [v10, v8], live_out: [v8]
// [Asm] # block parameters: []
// [Asm] .aux.252_18:
// [Asm] # control
// [Asm]   li v136, 93  # live: [v136, v10, v8]
// [Asm]   bne v10, v136, .aux.252_20  # live: [v8]
// [Asm] 
// [Asm] # block info: defs: [v19], uses: [v8], upward_exposed: [v8], params_defs: []
// [Asm] # live_in: [v8], live_out: [v19]
// [Asm] # block parameters: []
// [Asm] .aux.252_19:
// [Asm] # control
// [Asm]   mv v19, v8  # live: [v19]
// [Asm] 
// [Asm] # block info: defs: [v20], uses: [v19], upward_exposed: [v19], params_defs: [v19]
// [Asm] # live_in: [v19], live_out: [v20]
// [Asm] # block parameters: [v19]
// [Asm] .aux.252_21:
// [Asm] # control
// [Asm]   mv v20, v19  # live: [v20]
// [Asm] 
// [Asm] # block info: defs: [v21], uses: [v20], upward_exposed: [v20], params_defs: [v20]
// [Asm] # live_in: [v20], live_out: [v21]
// [Asm] # block parameters: [v20]
// [Asm] .aux.252_22:
// [Asm] # control
// [Asm]   mv v21, v20  # live: [v21]
// [Asm] 
// [Asm] # block info: defs: [v22], uses: [v21], upward_exposed: [v21], params_defs: [v21]
// [Asm] # live_in: [v21], live_out: [v22]
// [Asm] # block parameters: [v21]
// [Asm] .aux.252_23:
// [Asm] # control
// [Asm]   mv v22, v21  # live: [v22]
// [Asm] 
// [Asm] # block info: defs: [v23], uses: [v22], upward_exposed: [v22], params_defs: [v22]
// [Asm] # live_in: [v22], live_out: [v23]
// [Asm] # block parameters: [v22]
// [Asm] .aux.252_24:
// [Asm] # control
// [Asm]   mv v23, v22  # live: [v23]
// [Asm] 
// [Asm] # block info: defs: [v24], uses: [v23], upward_exposed: [v23], params_defs: [v23]
// [Asm] # live_in: [v23], live_out: [v24]
// [Asm] # block parameters: [v23]
// [Asm] .aux.252_25:
// [Asm] # control
// [Asm]   mv v24, v23  # live: [v24]
// [Asm] 
// [Asm] # block info: defs: [v25], uses: [v24], upward_exposed: [v24], params_defs: [v24]
// [Asm] # live_in: [v24], live_out: [v25]
// [Asm] # block parameters: [v24]
// [Asm] .aux.252_26:
// [Asm] # control
// [Asm]   mv v25, v24  # live: [v25]
// [Asm] 
// [Asm] # block info: defs: [v26], uses: [v25], upward_exposed: [v25], params_defs: [v25]
// [Asm] # live_in: [v25], live_out: [v26]
// [Asm] # block parameters: [v25]
// [Asm] .aux.252_27:
// [Asm] # control
// [Asm]   mv v26, v25  # live: [v26]
// [Asm] 
// [Asm] # block info: defs: [v83], uses: [v26], upward_exposed: [v26], params_defs: [v26]
// [Asm] # live_in: [v26], live_out: [v83]
// [Asm] # block parameters: [v26]
// [Asm] .aux.252_28:
// [Asm] # control
// [Asm]   mv v83, v26  # live: [v83]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v83, a0], upward_exposed: [v83], params_defs: [v83]
// [Asm] # live_in: [v83], live_out: []
// [Asm] # block parameters: [v83]
// [Asm] .aux.252_29:
// [Asm] # control
// [Asm]   mv a0, v83  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v83], uses: [v8], upward_exposed: [v8], params_defs: []
// [Asm] # live_in: [v8], live_out: [v83]
// [Asm] # block parameters: []
// [Asm] .aux.252_3:
// [Asm] # control
// [Asm]   mv v83, v8  # live: [v83]
// [Asm]   j .aux.252_29  # live: [v83]
// [Asm] 
// [Asm] # block info: defs: [v80, v82, v79, v8], uses: [v4, v80, v82, v79, v8], upward_exposed: [v4, v8], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v8, v4, v6, v3], live_out: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.252_5:
// [Asm]   lw v79, 0(v4)  # live: [v5, zero, v79, v7, v8, v4, v6, v3]
// [Asm]   addi v80, v79, 1  # live: [v5, zero, v7, v8, v4, v80, v6, v3]
// [Asm]   sw v80, 0(v4)  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   addi v82, v8, 1  # live: [v5, v82, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v8, v82  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   j .aux.252_2  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v8, v75, v78, v76], uses: [v8, v4, v75, v78, v76], upward_exposed: [v4, v8], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v8, v4, v6, v3], live_out: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.252_7:
// [Asm]   lw v75, 0(v4)  # live: [v5, v75, zero, v7, v8, v4, v6, v3]
// [Asm]   addi v76, v75, -1  # live: [v76, v5, zero, v7, v8, v4, v6, v3]
// [Asm]   sw v76, 0(v4)  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   addi v78, v8, 1  # live: [v5, zero, v78, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v8, v78  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   j .aux.252_2  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v94, v72, v71, v91, v8, v95, v92, v70, v74], uses: [v94, v72, v91, v71, v8, v95, v92, v4, v70, v6, v74], upward_exposed: [v4, v6, v8], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v8, v4, v6, v3], live_out: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.252_9:
// [Asm]   lw v70, 0(v4)  # live: [v5, zero, v7, v8, v4, v70, v6, v3]
// [Asm]   slliw v94, v70, 2  # live: [v94, v5, zero, v7, v8, v4, v70, v6, v3]
// [Asm]   add v95, v6, v94  # live: [v5, zero, v7, v8, v95, v4, v70, v6, v3]
// [Asm]   lw v71, 0(v95)  # live: [v5, v71, zero, v7, v8, v4, v6, v70, v3]
// [Asm]   addi v72, v71, 1  # live: [v72, v5, zero, v7, v8, v4, v6, v70, v3]
// [Asm]   slliw v91, v70, 2  # live: [v72, v5, v91, zero, v7, v8, v4, v6, v3]
// [Asm]   add v92, v6, v91  # live: [v72, v5, zero, v7, v8, v92, v4, v6, v3]
// [Asm]   sw v72, 0(v92)  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   addi v74, v8, 1  # live: [v5, zero, v7, v4, v6, v74, v3]
// [Asm] # control
// [Asm]   mv v8, v74  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   j .aux.252_2  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v66, v69, v99, v67, v8, v103, v65, v102, v100], uses: [v66, v69, v99, v67, v8, v103, v65, v4, v6, v102, v100], upward_exposed: [v4, v6, v8], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v8, v4, v6, v3], live_out: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.252_11:
// [Asm]   lw v65, 0(v4)  # live: [v5, zero, v7, v8, v65, v4, v6, v3]
// [Asm]   slliw v102, v65, 2  # live: [v5, zero, v7, v8, v65, v4, v6, v102, v3]
// [Asm]   add v103, v6, v102  # live: [v5, zero, v7, v8, v103, v65, v4, v6, v3]
// [Asm]   lw v66, 0(v103)  # live: [v66, v5, zero, v7, v8, v4, v65, v6, v3]
// [Asm]   addi v67, v66, -1  # live: [v5, zero, v67, v7, v8, v4, v65, v6, v3]
// [Asm]   slliw v99, v65, 2  # live: [v5, v99, zero, v67, v7, v8, v4, v6, v3]
// [Asm]   add v100, v6, v99  # live: [v5, zero, v67, v7, v8, v4, v6, v100, v3]
// [Asm]   sw v67, 0(v100)  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   addi v69, v8, 1  # live: [v5, v69, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v8, v69  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   j .aux.252_2  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, v108, a1, fa1, v64, v109, v63, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, v62, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v61], uses: [v109, v62, a0, v8, v4, v108, v6, v61, v64], upward_exposed: [v4, v6, v8], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v8, v4, v6, v3], live_out: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.252_13:
// [Asm]   lw v61, 0(v4)  # live: [v5, zero, v7, v8, v4, v6, v61, v3]
// [Asm]   slliw v108, v61, 2  # live: [v5, zero, v7, v8, v4, v6, v108, v3]
// [Asm]   add v109, v6, v108  # live: [v109, v5, zero, v7, v8, v4, v6, v3]
// [Asm]   lw v62, 0(v109)  # live: [v62, v5, zero, v7, v8, v4, v6, v3]
// [Asm]   # save_ctx2  # live: [v62, v5, zero, v7, v8, v4, v6, v3]
// [Asm]   mv a0, v62  # live: [v5, zero, a0, v7, v8, v4, v6, v3]
// [Asm]   call minimbt_print_char  # live: [v5, zero, a0, v7, v8, v4, v6, v3]
// [Asm]   mv v63, a0  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   # restore_ctx2  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   addi v64, v8, 1  # live: [v5, zero, v7, v4, v6, v64, v3]
// [Asm] # control
// [Asm]   mv v8, v64  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   j .aux.252_2  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v58, ft0, ft1, a1, fa1, v60, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, v57, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v114, a3, v113, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v58, a0, v8, v4, v114, v6, v57, v113, v60], upward_exposed: [v4, v6, v8], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v8, v4, v6, v3], live_out: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.252_15:
// [Asm]   lw v57, 0(v4)  # live: [v5, zero, v7, v8, v4, v6, v57, v3]
// [Asm]   # save_ctx2  # live: [v5, zero, v7, v8, v4, v6, v57, v3]
// [Asm]   call read_ch_until_newline_or_eof.249  # live: [v5, zero, a0, v7, v8, v4, v6, v57, v3]
// [Asm]   mv v58, a0  # live: [v5, v58, zero, v7, v8, v4, v6, v57, v3]
// [Asm]   # restore_ctx2  # live: [v5, v58, zero, v7, v8, v4, v6, v57, v3]
// [Asm]   slliw v113, v57, 2  # live: [v5, v58, zero, v7, v8, v4, v6, v113, v3]
// [Asm]   add v114, v6, v113  # live: [v5, v58, zero, v7, v8, v4, v114, v6, v3]
// [Asm]   sw v58, 0(v114)  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   addi v60, v8, 1  # live: [v5, zero, v7, v4, v6, v60, v3]
// [Asm] # control
// [Asm]   mv v8, v60  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   j .aux.252_2  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v7, v8], upward_exposed: [v7, v8], params_defs: []
// [Asm] # live_in: [v5, zero, v8, v7, v4, v6, v3], live_out: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.252_17:
// [Asm]   sw v8, 0(v7)  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [], uses: [], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v8, v4, v6, v3], live_out: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.252_42:
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v28, v29, v133, v132], uses: [v29, zero, v133, v4, v6, v28, v132], upward_exposed: [v4, v6, zero], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v8, v4, v6, v3], live_out: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.252_44:
// [Asm]   lw v28, 0(v4)  # live: [v5, zero, v8, v7, v4, v6, v28, v3]
// [Asm]   slliw v132, v28, 2  # live: [v132, v5, zero, v8, v7, v4, v6, v3]
// [Asm]   add v133, v6, v132  # live: [v5, zero, v133, v8, v7, v4, v6, v3]
// [Asm]   lw v29, 0(v133)  # live: [v5, zero, v29, v8, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   beq v29, zero, .aux.252_45  # live: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, v32, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v31, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v5, a5, a0, v7, a2, v32, a1, a3, v31, a4, v8, v4, v6, v3], upward_exposed: [v5, v7, v8, v4, v6, v3], params_defs: []
// [Asm] # live_in: [v5, zero, v8, v7, v4, v6, v3], live_out: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.252_46:
// [Asm]   addi v31, v8, 1  # live: [v5, zero, v8, v7, v4, v6, v31, v3]
// [Asm]   # save_ctx2  # live: [v5, zero, v8, v7, v4, v6, v31, v3]
// [Asm]   mv a0, v31  # live: [v5, zero, a0, v8, v7, v4, v6, v3]
// [Asm]   mv a1, v3  # live: [v5, zero, a0, v8, v7, v4, v6, a1, v3]
// [Asm]   mv a2, v4  # live: [v5, zero, a0, v8, v7, a2, v4, v6, a1, v3]
// [Asm]   mv a3, v5  # live: [v5, zero, a0, v8, v7, a2, v4, v6, a1, a3, v3]
// [Asm]   mv a4, v6  # live: [v5, zero, a0, a4, v8, v7, a2, v4, v6, a1, a3, v3]
// [Asm]   mv a5, v7  # live: [v5, a5, zero, a0, a4, v8, v7, a2, v4, v6, a1, a3, v3]
// [Asm]   call aux.252  # live: [v5, zero, a0, v7, v8, v4, v6, v3]
// [Asm]   mv v32, a0  # live: [v5, zero, v7, v8, v4, v32, v6, v3]
// [Asm]   # restore_ctx2  # live: [v5, zero, v7, v8, v4, v32, v6, v3]
// [Asm]   sw v32, 0(v7)  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] # control
// [Asm]   j .aux.252_44  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v34], uses: [v8], upward_exposed: [v8], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v8, v4, v6, v3], live_out: [v5, zero, v7, v4, v6, v34, v3]
// [Asm] # block parameters: []
// [Asm] .aux.252_45:
// [Asm]   addi v34, v8, 1  # live: [v5, zero, v7, v4, v6, v34, v3]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v36, v35], uses: [v34, zero], upward_exposed: [v34, zero], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v4, v6, v34, v3], live_out: [v5, zero, v36, v7, v35, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.252_51:
// [Asm] # control
// [Asm]   mv v35, v34  # live: [v5, zero, v7, v35, v4, v6, v3]
// [Asm]   mv v36, zero  # live: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v3, v35], upward_exposed: [v3, v35], params_defs: [v36, v35]
// [Asm] # live_in: [v5, zero, v35, v7, v36, v4, v6, v3], live_out: [v5, zero, v36, v7, v35, v4, v6, v3]
// [Asm] # block parameters: [v35, v36]
// [Asm] .aux.252_53:
// [Asm] # control
// [Asm]   bge v35, v3, .aux.252_54  # live: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v38, v127, v126, v125], uses: [v38, v5, v127, v126, v125, v35], upward_exposed: [v5, v35], params_defs: []
// [Asm] # live_in: [v5, zero, v36, v7, v35, v4, v6, v3], live_out: [v5, zero, v36, v35, v7, v38, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.252_55:
// [Asm]   slliw v126, v35, 2  # live: [v5, zero, v126, v35, v7, v36, v4, v6, v3]
// [Asm]   add v127, v5, v126  # live: [v5, v127, zero, v35, v7, v36, v4, v6, v3]
// [Asm]   lw v38, 0(v127)  # live: [v5, zero, v35, v7, v36, v38, v4, v6, v3]
// [Asm] # control
// [Asm]   li v125, 91  # live: [v5, zero, v125, v35, v7, v36, v38, v4, v6, v3]
// [Asm]   beq v38, v125, .aux.252_56  # live: [v5, zero, v35, v7, v36, v38, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v124], uses: [v38, v124], upward_exposed: [v38], params_defs: []
// [Asm] # live_in: [v5, zero, v36, v35, v7, v38, v4, v6, v3], live_out: [v5, zero, v35, v7, v36, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.252_57:
// [Asm] # control
// [Asm]   li v124, 93  # live: [v5, v124, zero, v7, v36, v35, v4, v38, v6, v3]
// [Asm]   bne v38, v124, .aux.252_59  # live: [v5, zero, v7, v36, v35, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [zero, v36], upward_exposed: [zero, v36], params_defs: []
// [Asm] # live_in: [v5, zero, v35, v7, v36, v4, v6, v3], live_out: [v5, zero, v36, v7, v35, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.252_58:
// [Asm] # control
// [Asm]   beq v36, zero, .aux.252_60  # live: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v36, v43, v44, v35], uses: [v36, v43, v44, v35], upward_exposed: [v36, v35], params_defs: []
// [Asm] # live_in: [v5, zero, v35, v7, v36, v4, v6, v3], live_out: [v5, zero, v36, v7, v35, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.252_61:
// [Asm]   addi v43, v35, 1  # live: [v5, zero, v7, v36, v4, v6, v43, v3]
// [Asm]   addi v44, v36, -1  # live: [v5, zero, v7, v4, v6, v43, v44, v3]
// [Asm] # control
// [Asm]   mv v35, v43  # live: [v5, zero, v7, v35, v4, v6, v44, v3]
// [Asm]   mv v36, v44  # live: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm]   j .aux.252_53  # live: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v50], uses: [v35], upward_exposed: [v35], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v35, v4, v6, v3], live_out: [v5, zero, v50, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.252_54:
// [Asm] # control
// [Asm]   mv v50, v35  # live: [v5, zero, v50, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v51], uses: [v50], upward_exposed: [v50], params_defs: [v50]
// [Asm] # live_in: [v5, zero, v50, v7, v4, v6, v3], live_out: [v3, v5, zero, v7, v4, v6, v51]
// [Asm] # block parameters: [v50]
// [Asm] .aux.252_65:
// [Asm] # control
// [Asm]   mv v51, v50  # live: [v51, v5, zero, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v53], uses: [v7, zero, v51], upward_exposed: [v7, zero, v51], params_defs: [v51]
// [Asm] # live_in: [v51, v5, zero, v7, v4, v6, v3], live_out: [v5, v53, zero, v7, v4, v6, v3]
// [Asm] # block parameters: [v51]
// [Asm] .aux.252_48:
// [Asm]   sw v51, 0(v7)  # live: [v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v53, zero  # live: [v5, v53, zero, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v54], uses: [v53], upward_exposed: [v53], params_defs: [v53]
// [Asm] # live_in: [v5, v53, zero, v7, v4, v6, v3], live_out: [v5, zero, v7, v4, v6, v54, v3]
// [Asm] # block parameters: [v53]
// [Asm] .aux.252_47:
// [Asm] # control
// [Asm]   mv v54, v53  # live: [v5, zero, v7, v4, v6, v54, v3]
// [Asm] 
// [Asm] # block info: defs: [v56, v55, v8], uses: [v56, v55, v7], upward_exposed: [v7], params_defs: [v54]
// [Asm] # live_in: [v5, zero, v7, v4, v6, v54, v3], live_out: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: [v54]
// [Asm] .aux.252_30:
// [Asm]   lw v55, 0(v7)  # live: [v5, zero, v7, v4, v6, v55, v3]
// [Asm]   addi v56, v55, 1  # live: [v5, v56, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v8, v56  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   j .aux.252_2  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v36, v48, v49, v35], uses: [v36, v48, v49, v35], upward_exposed: [v36, v35], params_defs: []
// [Asm] # live_in: [v5, zero, v35, v7, v36, v4, v6, v3], live_out: [v5, zero, v36, v7, v35, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.252_56:
// [Asm]   addi v48, v35, 1  # live: [v5, v48, zero, v7, v36, v4, v6, v3]
// [Asm]   addi v49, v36, 1  # live: [v5, v49, v48, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v35, v48  # live: [v5, v49, zero, v7, v35, v4, v6, v3]
// [Asm]   mv v36, v49  # live: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm]   j .aux.252_53  # live: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v41, v35], uses: [v36, v41, v35], upward_exposed: [v36, v35], params_defs: []
// [Asm] # live_in: [v5, zero, v35, v7, v36, v4, v6, v3], live_out: [v5, zero, v36, v7, v35, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.252_59:
// [Asm]   addi v41, v35, 1  # live: [v5, zero, v7, v36, v4, v41, v6, v3]
// [Asm] # control
// [Asm]   mv v35, v41  # live: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm]   mv v36, v36  # live: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm]   j .aux.252_53  # live: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v45], uses: [v35], upward_exposed: [v35], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v35, v4, v6, v3], live_out: [v5, zero, v7, v45, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.252_60:
// [Asm] # control
// [Asm]   mv v45, v35  # live: [v5, zero, v45, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v46], uses: [v45], upward_exposed: [v45], params_defs: [v45]
// [Asm] # live_in: [v5, zero, v7, v45, v4, v6, v3], live_out: [v46, v5, zero, v7, v4, v6, v3]
// [Asm] # block parameters: [v45]
// [Asm] .aux.252_62:
// [Asm] # control
// [Asm]   mv v46, v45  # live: [v46, v5, zero, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v47], uses: [v46], upward_exposed: [v46], params_defs: [v46]
// [Asm] # live_in: [v46, v5, zero, v7, v4, v6, v3], live_out: [v5, zero, v7, v47, v4, v6, v3]
// [Asm] # block parameters: [v46]
// [Asm] .aux.252_63:
// [Asm] # control
// [Asm]   mv v47, v46  # live: [v5, zero, v7, v47, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v50], uses: [v47], upward_exposed: [v47], params_defs: [v47]
// [Asm] # live_in: [v5, zero, v7, v47, v4, v6, v3], live_out: [v5, zero, v50, v7, v4, v6, v3]
// [Asm] # block parameters: [v47]
// [Asm] .aux.252_64:
// [Asm] # control
// [Asm]   mv v50, v47  # live: [v5, zero, v50, v7, v4, v6, v3]
// [Asm]   j .aux.252_65  # live: [v5, zero, v50, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v19], uses: [v8], upward_exposed: [v8], params_defs: []
// [Asm] # live_in: [v8], live_out: [v19]
// [Asm] # block parameters: []
// [Asm] .aux.252_20:
// [Asm] # control
// [Asm]   mv v19, v8  # live: [v19]
// [Asm]   j .aux.252_21  # live: [v19]
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main.254:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, v4, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v8, v6, a1, s11, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.254_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   li v6, 4096  # live: [v6, s11, zero]
// [Asm]   sub v2, s11, v6  # live: [zero, v2]
// [Asm]   andi s11, v2, -8  # live: [zero, v2]
// [Asm]   li v8, 1024  # live: [v8, zero, v2]
// [Asm]   mv a1, v8  # live: [zero, v2]
// [Asm]   # save_ctx2  # live: [zero, v2]
// [Asm]   mv a0, zero  # live: [zero, a0, v2]
// [Asm]   mv a1, v2  # live: [a1, zero, a0]
// [Asm]   call read_prog.255  # live: [zero, a0]
// [Asm]   mv v4, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] read_ch_until_newline_or_eof.249:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v10, a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v2]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof.249_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call minimbt_read_char  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   li v10, 10  # live: [v10, v2]
// [Asm]   beq v2, v10, .read_ch_until_newline_or_eof.249_1  # live: [v2]
// [Asm] 
// [Asm] # block info: defs: [v9], uses: [v9, v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v2]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof.249_2:
// [Asm] # control
// [Asm]   li v9, 13  # live: [v9, v2]
// [Asm]   bne v2, v9, .read_ch_until_newline_or_eof.249_4  # live: [v2]
// [Asm] 
// [Asm] # block info: defs: [v5, v8], uses: [v8], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof.249_3:
// [Asm] # control
// [Asm]   li v8, -1  # live: [v8]
// [Asm]   mv v5, v8  # live: [v5]
// [Asm] 
// [Asm] # block info: defs: [v6], uses: [v5], upward_exposed: [v5], params_defs: [v5]
// [Asm] # live_in: [v5], live_out: [v6]
// [Asm] # block parameters: [v5]
// [Asm] .read_ch_until_newline_or_eof.249_5:
// [Asm] # control
// [Asm]   mv v6, v5  # live: [v6]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v6, a0], upward_exposed: [v6], params_defs: [v6]
// [Asm] # live_in: [v6], live_out: []
// [Asm] # block parameters: [v6]
// [Asm] .read_ch_until_newline_or_eof.249_6:
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v6, v7], uses: [v7], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v6]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof.249_1:
// [Asm] # control
// [Asm]   li v7, -1  # live: [v7]
// [Asm]   mv v6, v7  # live: [v6]
// [Asm]   j .read_ch_until_newline_or_eof.249_6  # live: [v6]
// [Asm] 
// [Asm] # block info: defs: [v5], uses: [v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof.249_4:
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v5]
// [Asm]   j .read_ch_until_newline_or_eof.249_5  # live: [v5]
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("read_ch_until_newline_or_eof", Int), args: [], body: Let(("c", Var({val: Some(Int)})), App(Var("read_char"), []), If(Eq(Var("c"), Int(10)), Neg(Int(1), kind=Some(Int)), If(Eq(Var("c"), Int(13)), Neg(Int(1), kind=Some(Int)), Var("c"))))}, LetRec({name: ("bf", Unit), args: [("len", Int), ("prog", Array(Int))], body: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), []))))
// [Knf] build_knf: Let(("c", Var({val: Some(Int)})), App(Var("read_char"), []), If(Eq(Var("c"), Int(10)), Neg(Int(1), kind=Some(Int)), If(Eq(Var("c"), Int(13)), Neg(Int(1), kind=Some(Int)), Var("c"))))
// [Knf] build_knf: App(Var("read_char"), [])
// [Knf] build_knf: If(Eq(Var("c"), Int(10)), Neg(Int(1), kind=Some(Int)), If(Eq(Var("c"), Int(13)), Neg(Int(1), kind=Some(Int)), Var("c")))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Neg(Int(1), kind=Some(Int))
// [Knf] build_knf: If(Eq(Var("c"), Int(13)), Neg(Int(1), kind=Some(Int)), Var("c"))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(13)
// [Knf] build_knf: Neg(Int(1), kind=Some(Int))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: LetRec({name: ("bf", Unit), args: [("len", Int), ("prog", Array(Int))], body: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), [])))
// [Knf] build_knf: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit)))))
// [Knf] build_knf: Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0))
// [Knf] build_knf: Prim(Int(1024), Int(1024), Mul, kind=Some(Int))
// [Knf] build_knf: Int(1024)
// [Knf] build_knf: Int(1024)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit)))
// [Knf] build_knf: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")]))))
// [Knf] build_knf: Get(Var("prog"), Var("pc"))
// [Knf] build_knf: Var("prog")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(91)
// [Knf] build_knf: App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("skip")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Prim(Var("level"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("level")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")]))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(93)
// [Knf] build_knf: If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))]))
// [Knf] build_knf: Var("level")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("skip")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Prim(Var("level"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("level")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])
// [Knf] build_knf: Var("skip")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("level")
// [Knf] build_knf: LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))
// [Knf] build_knf: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc"))))))))))
// [Knf] build_knf: Get(Var("prog"), Var("pc"))
// [Knf] build_knf: Var("prog")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(62)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc"))))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(60)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(43)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("cells"), Get(Var("ptr"), Int(0)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc"))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(45)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("cells"), Get(Var("ptr"), Int(0)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(46)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))])
// [Knf] build_knf: Get(Var("cells"), Get(Var("ptr"), Int(0)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc"))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(44)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), []))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("read_ch_until_newline_or_eof"), [])
// [Knf] build_knf: Var("read_ch_until_newline_or_eof")
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(91)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: Put(Var("next_pc"), Int(0), Var("pc"))
// [Knf] build_knf: Var("next_pc")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))
// [Knf] build_knf: Get(Var("cells"), Get(Var("ptr"), Int(0)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit)
// [Knf] build_knf: Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)]))
// [Knf] build_knf: Var("next_pc")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])
// [Knf] build_knf: Var("skip")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), []))
// [Knf] build_knf: Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Var("next_pc")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("lp"), [])
// [Knf] build_knf: Var("lp")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("lp"), [])
// [Knf] build_knf: Var("lp")
// [Knf] build_knf: App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("next_pc"), Int(0))
// [Knf] build_knf: Var("next_pc")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc"))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(93)
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit)
// [Knf] build_knf: App(Var("aux"), [Int(0)])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))
// [Knf] build_knf: Int(1024)
// [Knf] build_knf: Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit)))
// [Knf] build_knf: Array(Var("len"), Int(0))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))
// [Knf] build_knf: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: App(Var("read_ch_until_newline_or_eof"), [])
// [Knf] build_knf: Var("read_ch_until_newline_or_eof")
// [Knf] build_knf: If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Neg(Int(1), kind=Some(Int))
// [Knf] build_knf: App(Var("bf"), [Var("i"), Var("prog")])
// [Knf] build_knf: Var("bf")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("prog")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("prog"), Var("i"), Var("x"))
// [Knf] build_knf: Var("prog")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("read_prog")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit)
// [Knf] build_knf: App(Var("read_prog"), [Int(0)])
// [Knf] build_knf: Var("read_prog")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Core] b3 control: Panic -> Jump(target=b5, args=[Int32(val=-1)])
// [Core] b4 control: Panic -> Jump(target=b5, args=[Insn(iref=%0)])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%2), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b1 control: Panic -> Jump(target=b6, args=[Int32(val=-1)])
// [Core] b5 control: Panic -> Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b6 control: Panic -> Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Core] b9 control: Panic -> Jump(target=b11, args=[BlockParam(bref=b2, bpref=$b.0)])
// [Core] b10 control: Jump(target=b2, args=[Insn(iref=%7), Insn(iref=%8)]) already set
// [Core] b7 control: Panic -> Branch(cond=Insn(iref=%6), t=b9, t_args=[], f=b10, f_args=[])
// [Core] b11 control: Panic -> Jump(target=b12, args=[BlockParam(bref=b11, bpref=$b.0)])
// [Core] b8 control: Jump(target=b2, args=[Insn(iref=%9), BlockParam(bref=b2, bpref=$b.1)]) already set
// [Core] b6 control: Panic -> Branch(cond=Insn(iref=%5), t=b7, t_args=[], f=b8, f_args=[])
// [Core] b5 control: Jump(target=b2, args=[Insn(iref=%3), Insn(iref=%4)]) already set
// [Core] b12 control: Panic -> Jump(target=b13, args=[BlockParam(bref=b12, bpref=$b.0)])
// [Core] b4 control: Panic -> Branch(cond=Insn(iref=%2), t=b5, t_args=[], f=b6, f_args=[])
// [Core] b3 control: Panic -> Jump(target=b14, args=[BlockParam(bref=b2, bpref=$b.0)])
// [Core] b13 control: Panic -> Jump(target=b14, args=[BlockParam(bref=b13, bpref=$b.0)])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b14 control: Panic -> Return(args=[BlockParam(bref=b14, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[FnParam(fref=f1, fpref=$f.0), FnParam(fref=f1, fpref=$f.1)]) already set
// [Core] b3 control: Panic -> Jump(target=b5, args=[Unit])
// [Core] b4 control: Jump(target=b2, args=[]) already set
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%2), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b5 control: Panic -> Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[]) already set
// [Core] b19 control: Panic -> Jump(target=b21, args=[BlockParam(bref=b2, bpref=$b.0)])
// [Core] b20 control: Panic -> Jump(target=b21, args=[BlockParam(bref=b2, bpref=$b.0)])
// [Core] b18 control: Panic -> Branch(cond=Insn(iref=%41), t=b19, t_args=[], f=b20, f_args=[])
// [Core] b17 control: Jump(target=b2, args=[Insn(iref=%40)]) already set
// [Core] b21 control: Panic -> Jump(target=b22, args=[BlockParam(bref=b21, bpref=$b.0)])
// [Core] b16 control: Panic -> Branch(cond=Insn(iref=%36), t=b17, t_args=[], f=b18, f_args=[])
// [Core] b15 control: Jump(target=b2, args=[Insn(iref=%35)]) already set
// [Core] b22 control: Panic -> Jump(target=b23, args=[BlockParam(bref=b22, bpref=$b.0)])
// [Core] b14 control: Panic -> Branch(cond=Insn(iref=%31), t=b15, t_args=[], f=b16, f_args=[])
// [Core] b13 control: Jump(target=b2, args=[Insn(iref=%30)]) already set
// [Core] b23 control: Panic -> Jump(target=b24, args=[BlockParam(bref=b23, bpref=$b.0)])
// [Core] b12 control: Panic -> Branch(cond=Insn(iref=%26), t=b13, t_args=[], f=b14, f_args=[])
// [Core] b11 control: Jump(target=b2, args=[Insn(iref=%25)]) already set
// [Core] b24 control: Panic -> Jump(target=b25, args=[BlockParam(bref=b24, bpref=$b.0)])
// [Core] b10 control: Panic -> Branch(cond=Insn(iref=%19), t=b11, t_args=[], f=b12, f_args=[])
// [Core] b9 control: Jump(target=b2, args=[Insn(iref=%18)]) already set
// [Core] b25 control: Panic -> Jump(target=b26, args=[BlockParam(bref=b25, bpref=$b.0)])
// [Core] b8 control: Panic -> Branch(cond=Insn(iref=%12), t=b9, t_args=[], f=b10, f_args=[])
// [Core] b7 control: Jump(target=b2, args=[Insn(iref=%11)]) already set
// [Core] b26 control: Panic -> Jump(target=b27, args=[BlockParam(bref=b26, bpref=$b.0)])
// [Core] b6 control: Panic -> Branch(cond=Insn(iref=%7), t=b7, t_args=[], f=b8, f_args=[])
// [Core] b5 control: Jump(target=b2, args=[Insn(iref=%6)]) already set
// [Core] b27 control: Panic -> Jump(target=b28, args=[BlockParam(bref=b27, bpref=$b.0)])
// [Core] b4 control: Panic -> Branch(cond=Insn(iref=%2), t=b5, t_args=[], f=b6, f_args=[])
// [Core] b3 control: Panic -> Jump(target=b29, args=[BlockParam(bref=b2, bpref=$b.0)])
// [Core] b28 control: Panic -> Jump(target=b29, args=[BlockParam(bref=b28, bpref=$b.0)])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b29 control: Panic -> Return(args=[BlockParam(bref=b29, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[FnParam(fref=f3, fpref=$f.0)]) already set
// [Core] b0 control: Panic -> Return(args=[Unit])
// [Core] b1 control: Panic -> Jump(target=b3, args=[Insn(iref=%2)])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Insn(iref=%5)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b0 control: Panic -> Return(args=[Unit])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl read_prog.255
// [Main]   .type read_prog.255, @function
// [Main] # leaf false
// [Main] read_prog.255:
// [Main] .read_prog.255_5:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main] 
// [Main] .read_prog.255_0:
// [Main]   call read_ch_until_newline_or_eof.249
// [Main]   li a1, -1
// [Main]   beq a0, a1, .read_prog.255_1
// [Main] 
// [Main] .read_prog.255_2:
// [Main]   slliw a1, s0, 2
// [Main]   add a1, s1, a1
// [Main]   sw a0, 0(a1)
// [Main]   addi a0, s0, 1
// [Main]   mv s0, a0
// [Main]   j .read_prog.255_0
// [Main] 
// [Main] .read_prog.255_1:
// [Main]   mv a0, s0
// [Main]   mv a1, s1
// [Main]   call bf.250
// [Main] 
// [Main] .read_prog.255_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl bf.250
// [Main]   .type bf.250, @function
// [Main] # leaf false
// [Main] bf.250:
// [Main] .bf.250_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a2, a0
// [Main]   mv a3, a1
// [Main]   addi a4, s11, -4
// [Main]   andi s11, a4, -8
// [Main]   sw zero, 0(a4)
// [Main]   li a0, 1024
// [Main]   mul a0, a0, a0
// [Main]   slliw a1, a0, 2
// [Main]   sub a5, s11, a1
// [Main]   andi s11, a5, -8
// [Main]   mv a1, a0
// [Main]   addi a6, s11, -4
// [Main]   andi s11, a6, -8
// [Main]   sw zero, 0(a6)
// [Main]   mv a0, zero
// [Main]   mv a1, a2
// [Main]   mv a2, a4
// [Main]   mv a4, a5
// [Main]   mv a5, a6
// [Main]   call aux.252
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main.254
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux.252
// [Main]   .type aux.252, @function
// [Main] # leaf false
// [Main] aux.252:
// [Main] .aux.252_0:
// [Main]   addi sp, sp, -64
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   sd s6, 56(sp)
// [Main]   mv s5, a1
// [Main]   mv s3, a2
// [Main]   mv s0, a3
// [Main]   mv s4, a4
// [Main]   mv s1, a5
// [Main]   mv s2, a0
// [Main] 
// [Main] .aux.252_2:
// [Main]   bge s2, s5, .aux.252_3
// [Main] 
// [Main] .aux.252_4:
// [Main]   slliw a0, s2, 2
// [Main]   add a0, s0, a0
// [Main]   lw a0, 0(a0)
// [Main]   li a1, 62
// [Main]   beq a0, a1, .aux.252_5
// [Main] 
// [Main] .aux.252_6:
// [Main]   li a1, 60
// [Main]   beq a0, a1, .aux.252_7
// [Main] 
// [Main] .aux.252_8:
// [Main]   li a1, 43
// [Main]   beq a0, a1, .aux.252_9
// [Main] 
// [Main] .aux.252_10:
// [Main]   li a1, 45
// [Main]   beq a0, a1, .aux.252_11
// [Main] 
// [Main] .aux.252_12:
// [Main]   li a1, 46
// [Main]   beq a0, a1, .aux.252_13
// [Main] 
// [Main] .aux.252_14:
// [Main]   li a1, 44
// [Main]   beq a0, a1, .aux.252_15
// [Main] 
// [Main] .aux.252_16:
// [Main]   li a1, 91
// [Main]   beq a0, a1, .aux.252_17
// [Main] 
// [Main] .aux.252_18:
// [Main]   li a1, 93
// [Main]   bne a0, a1, .aux.252_20
// [Main] 
// [Main] .aux.252_19:
// [Main]   mv a0, s2
// [Main] 
// [Main] .aux.252_21:
// [Main] 
// [Main] .aux.252_22:
// [Main] 
// [Main] .aux.252_23:
// [Main] 
// [Main] .aux.252_24:
// [Main] 
// [Main] .aux.252_25:
// [Main] 
// [Main] .aux.252_26:
// [Main] 
// [Main] .aux.252_27:
// [Main] 
// [Main] .aux.252_28:
// [Main] 
// [Main] .aux.252_29:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   ld s6, 56(sp)
// [Main]   addi sp, sp, 64
// [Main]   ret
// [Main] 
// [Main] .aux.252_3:
// [Main]   mv a0, s2
// [Main]   j .aux.252_29
// [Main] 
// [Main] .aux.252_5:
// [Main]   lw a0, 0(s3)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s3)
// [Main]   addi a0, s2, 1
// [Main]   mv s2, a0
// [Main]   j .aux.252_2
// [Main] 
// [Main] .aux.252_7:
// [Main]   lw a0, 0(s3)
// [Main]   addi a0, a0, -1
// [Main]   sw a0, 0(s3)
// [Main]   addi a0, s2, 1
// [Main]   mv s2, a0
// [Main]   j .aux.252_2
// [Main] 
// [Main] .aux.252_9:
// [Main]   lw a0, 0(s3)
// [Main]   slliw a1, a0, 2
// [Main]   add a1, s4, a1
// [Main]   lw a1, 0(a1)
// [Main]   addi a1, a1, 1
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s4, a0
// [Main]   sw a1, 0(a0)
// [Main]   addi a0, s2, 1
// [Main]   mv s2, a0
// [Main]   j .aux.252_2
// [Main] 
// [Main] .aux.252_11:
// [Main]   lw a0, 0(s3)
// [Main]   slliw a1, a0, 2
// [Main]   add a1, s4, a1
// [Main]   lw a1, 0(a1)
// [Main]   addi a1, a1, -1
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s4, a0
// [Main]   sw a1, 0(a0)
// [Main]   addi a0, s2, 1
// [Main]   mv s2, a0
// [Main]   j .aux.252_2
// [Main] 
// [Main] .aux.252_13:
// [Main]   lw a0, 0(s3)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s4, a0
// [Main]   lw a0, 0(a0)
// [Main]   call minimbt_print_char
// [Main]   addi a0, s2, 1
// [Main]   mv s2, a0
// [Main]   j .aux.252_2
// [Main] 
// [Main] .aux.252_15:
// [Main]   lw s6, 0(s3)
// [Main]   call read_ch_until_newline_or_eof.249
// [Main]   slliw a1, s6, 2
// [Main]   add a1, s4, a1
// [Main]   sw a0, 0(a1)
// [Main]   addi a0, s2, 1
// [Main]   mv s2, a0
// [Main]   j .aux.252_2
// [Main] 
// [Main] .aux.252_17:
// [Main]   sw s2, 0(s1)
// [Main] 
// [Main] .aux.252_42:
// [Main] 
// [Main] .aux.252_44:
// [Main]   lw a0, 0(s3)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s4, a0
// [Main]   lw a0, 0(a0)
// [Main]   beq a0, zero, .aux.252_45
// [Main] 
// [Main] .aux.252_46:
// [Main]   addi a0, s2, 1
// [Main]   mv a1, s5
// [Main]   mv a2, s3
// [Main]   mv a3, s0
// [Main]   mv a4, s4
// [Main]   mv a5, s1
// [Main]   call aux.252
// [Main]   sw a0, 0(s1)
// [Main]   j .aux.252_44
// [Main] 
// [Main] .aux.252_45:
// [Main]   addi a0, s2, 1
// [Main] 
// [Main] .aux.252_51:
// [Main]   mv a1, zero
// [Main] 
// [Main] .aux.252_53:
// [Main]   bge a0, s5, .aux.252_54
// [Main] 
// [Main] .aux.252_55:
// [Main]   slliw a2, a0, 2
// [Main]   add a2, s0, a2
// [Main]   lw a2, 0(a2)
// [Main]   li a3, 91
// [Main]   beq a2, a3, .aux.252_56
// [Main] 
// [Main] .aux.252_57:
// [Main]   li a3, 93
// [Main]   bne a2, a3, .aux.252_59
// [Main] 
// [Main] .aux.252_58:
// [Main]   beq a1, zero, .aux.252_60
// [Main] 
// [Main] .aux.252_61:
// [Main]   addi a0, a0, 1
// [Main]   addi a1, a1, -1
// [Main]   j .aux.252_53
// [Main] 
// [Main] .aux.252_54:
// [Main] 
// [Main] .aux.252_65:
// [Main] 
// [Main] .aux.252_48:
// [Main]   sw a0, 0(s1)
// [Main]   mv a0, zero
// [Main] 
// [Main] .aux.252_47:
// [Main] 
// [Main] .aux.252_30:
// [Main]   lw a0, 0(s1)
// [Main]   addi a0, a0, 1
// [Main]   mv s2, a0
// [Main]   j .aux.252_2
// [Main] 
// [Main] .aux.252_56:
// [Main]   addi a0, a0, 1
// [Main]   addi a1, a1, 1
// [Main]   j .aux.252_53
// [Main] 
// [Main] .aux.252_59:
// [Main]   addi a0, a0, 1
// [Main]   j .aux.252_53
// [Main] 
// [Main] .aux.252_60:
// [Main] 
// [Main] .aux.252_62:
// [Main] 
// [Main] .aux.252_63:
// [Main] 
// [Main] .aux.252_64:
// [Main]   j .aux.252_65
// [Main] 
// [Main] .aux.252_20:
// [Main]   mv a0, s2
// [Main]   j .aux.252_21
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.254
// [Main]   .type main.254, @function
// [Main] # leaf false
// [Main] main.254:
// [Main] .main.254_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   li a0, 4096
// [Main]   sub a2, s11, a0
// [Main]   andi s11, a2, -8
// [Main]   li a0, 1024
// [Main]   mv a1, a0
// [Main]   mv a0, zero
// [Main]   mv a1, a2
// [Main]   call read_prog.255
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl read_ch_until_newline_or_eof.249
// [Main]   .type read_ch_until_newline_or_eof.249, @function
// [Main] # leaf false
// [Main] read_ch_until_newline_or_eof.249:
// [Main] .read_ch_until_newline_or_eof.249_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call minimbt_read_char
// [Main]   li a1, 10
// [Main]   beq a0, a1, .read_ch_until_newline_or_eof.249_1
// [Main] 
// [Main] .read_ch_until_newline_or_eof.249_2:
// [Main]   li a1, 13
// [Main]   bne a0, a1, .read_ch_until_newline_or_eof.249_4
// [Main] 
// [Main] .read_ch_until_newline_or_eof.249_3:
// [Main]   li a0, -1
// [Main] 
// [Main] .read_ch_until_newline_or_eof.249_5:
// [Main] 
// [Main] .read_ch_until_newline_or_eof.249_6:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .read_ch_until_newline_or_eof.249_1:
// [Main]   li a0, -1
// [Main]   j .read_ch_until_newline_or_eof.249_6
// [Main] 
// [Main] .read_ch_until_newline_or_eof.249_4:
// [Main]   j .read_ch_until_newline_or_eof.249_5
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function main.254
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f6, mref=m0) -> $f6.m0
// [Wasm] Lowering insn Call(ty=Unit, f=f5, args=[Int32(val=0), Mem(fref=f6, mref=m0)])
// [Wasm] Get Local name Mem(fref=f6, mref=m0) -> $f6.m0
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Local Mem(fref=f6, mref=m0) -> $f6.m0
// [Wasm] Lowered function main.254 to wasm
// [Wasm] Lowering function bf.250
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Int32(val=1024), Int32(val=1024)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m1, fills=[Zero])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m2, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Lowering insn Call(ty=Int32, f=f3, args=[Int32(val=0), FnParam(fref=f4, fpref=$f.0), Mem(fref=f4, mref=m0), FnParam(fref=f4, fpref=$f.1), Mem(fref=f4, mref=m1), Mem(fref=f4, mref=m2)])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Local Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Local Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function bf.250 to wasm
// [Wasm] Lowering function read_prog.255
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%2)])
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), offset=BlockParam(bref=b0, bpref=$b.0), width=@32), val=Insn(iref=%0))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%4), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Lowering insn Call(ty=Int32, f=f0, args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=-1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f5, fpref=$f.0), FnParam(fref=f5, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.1) -> $$f.1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function read_prog.255 to wasm
// [Wasm] Lowering function aux.252
// [Wasm] Lowering control Return(args=[BlockParam(bref=b29, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b29, bpref=$b.0) -> $b29.$b.0
// [Wasm] Lowering control Jump(target=b29, args=[BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b29, bpref=$b.0) -> $b29.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f3, fpref=$f.2), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%3), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f3, fpref=$f.2), index=0, width=@32), val=Insn(iref=%4))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Jump(target=b2, args=[Insn(iref=%6)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f3, fpref=$f.2), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%8), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f3, fpref=$f.2), index=0, width=@32), val=Insn(iref=%9))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering control Jump(target=b2, args=[Insn(iref=%11)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f3, fpref=$f.2), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f3, fpref=$f.4), offset=Insn(iref=%13), width=@32))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%15), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f3, fpref=$f.4), offset=Insn(iref=%13), width=@32), val=Insn(iref=%16))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering control Jump(target=b2, args=[Insn(iref=%18)])
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f3, fpref=$f.2), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f3, fpref=$f.4), offset=Insn(iref=%20), width=@32))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%22), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f3, fpref=$f.4), offset=Insn(iref=%20), width=@32), val=Insn(iref=%23))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering control Jump(target=b2, args=[Insn(iref=%25)])
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f3, fpref=$f.2), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f3, fpref=$f.4), offset=Insn(iref=%27), width=@32))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Insn(iref=%28)])
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering control Jump(target=b2, args=[Insn(iref=%30)])
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f3, fpref=$f.2), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn Call(ty=Int32, f=f0, args=[])
// [Wasm] Get Local name Insn(iref=%33) -> $%33
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f3, fpref=$f.4), offset=Insn(iref=%32), width=@32), val=Insn(iref=%33))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Get Local name Insn(iref=%33) -> $%33
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Lowering control Jump(target=b2, args=[Insn(iref=%35)])
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f3, fpref=$f.5), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name Insn(iref=%39) -> $%39
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%39), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%39) -> $%39
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Lowering control Jump(target=b2, args=[Insn(iref=%40)])
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering control Jump(target=b30, args=[BlockParam(bref=b47, bpref=$b.0)])
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f3, fpref=$f.5), index=0, width=@32), val=BlockParam(bref=b48, bpref=$b.0))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name BlockParam(bref=b48, bpref=$b.0) -> $b48.$b.0
// [Wasm] Lowering control Jump(target=b47, args=[Unit])
// [Wasm] Lowering control Jump(target=b48, args=[BlockParam(bref=b65, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b65, bpref=$b.0) -> $b65.$b.0
// [Wasm] Get Local name BlockParam(bref=b48, bpref=$b.0) -> $b48.$b.0
// [Wasm] Lowering control Jump(target=b65, args=[BlockParam(bref=b53, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b53, bpref=$b.0) -> $b53.$b.0
// [Wasm] Get Local name BlockParam(bref=b65, bpref=$b.0) -> $b65.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b53, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b53, bpref=$b.0) -> $b53.$b.0
// [Wasm] Get Local name Insn(iref=%54) -> $%54
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b53, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b53, bpref=$b.1) -> $b53.$b.1
// [Wasm] Get Local name Insn(iref=%55) -> $%55
// [Wasm] Lowering control Jump(target=b53, args=[Insn(iref=%54), Insn(iref=%55)])
// [Wasm] Get Local name Insn(iref=%54) -> $%54
// [Wasm] Get Local name BlockParam(bref=b53, bpref=$b.0) -> $b53.$b.0
// [Wasm] Get Local name Insn(iref=%55) -> $%55
// [Wasm] Get Local name BlockParam(bref=b53, bpref=$b.1) -> $b53.$b.1
// [Wasm] Lowering control Jump(target=b65, args=[BlockParam(bref=b64, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b64, bpref=$b.0) -> $b64.$b.0
// [Wasm] Get Local name BlockParam(bref=b65, bpref=$b.0) -> $b65.$b.0
// [Wasm] Lowering control Jump(target=b64, args=[BlockParam(bref=b63, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b63, bpref=$b.0) -> $b63.$b.0
// [Wasm] Get Local name BlockParam(bref=b64, bpref=$b.0) -> $b64.$b.0
// [Wasm] Lowering control Jump(target=b63, args=[BlockParam(bref=b62, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b62, bpref=$b.0) -> $b62.$b.0
// [Wasm] Get Local name BlockParam(bref=b63, bpref=$b.0) -> $b63.$b.0
// [Wasm] Lowering control Jump(target=b62, args=[BlockParam(bref=b53, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b53, bpref=$b.0) -> $b53.$b.0
// [Wasm] Get Local name BlockParam(bref=b62, bpref=$b.0) -> $b62.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b53, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b53, bpref=$b.0) -> $b53.$b.0
// [Wasm] Get Local name Insn(iref=%58) -> $%58
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b53, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b53, bpref=$b.1) -> $b53.$b.1
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Lowering control Jump(target=b53, args=[Insn(iref=%58), Insn(iref=%59)])
// [Wasm] Get Local name Insn(iref=%58) -> $%58
// [Wasm] Get Local name BlockParam(bref=b53, bpref=$b.0) -> $b53.$b.0
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Get Local name BlockParam(bref=b53, bpref=$b.1) -> $b53.$b.1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b53, bpref=$b.1), Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b53, bpref=$b.1) -> $b53.$b.1
// [Wasm] Get Local name Insn(iref=%57) -> $%57
// [Wasm] Lowering control Branch(cond=Insn(iref=%57), t=b60, t_args=[], f=b61, f_args=[])
// [Wasm] Get Local name Insn(iref=%57) -> $%57
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b53, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b53, bpref=$b.0) -> $b53.$b.0
// [Wasm] Get Local name Insn(iref=%60) -> $%60
// [Wasm] Lowering control Jump(target=b53, args=[Insn(iref=%60), BlockParam(bref=b53, bpref=$b.1)])
// [Wasm] Get Local name Insn(iref=%60) -> $%60
// [Wasm] Get Local name BlockParam(bref=b53, bpref=$b.0) -> $b53.$b.0
// [Wasm] Get Local name BlockParam(bref=b53, bpref=$b.1) -> $b53.$b.1
// [Wasm] Get Local name BlockParam(bref=b53, bpref=$b.1) -> $b53.$b.1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%52), Int32(val=93)])
// [Wasm] Get Local name Insn(iref=%52) -> $%52
// [Wasm] Get Local name Insn(iref=%56) -> $%56
// [Wasm] Lowering control Branch(cond=Insn(iref=%56), t=b58, t_args=[], f=b59, f_args=[])
// [Wasm] Get Local name Insn(iref=%56) -> $%56
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f3, fpref=$f.3), offset=BlockParam(bref=b53, bpref=$b.0), width=@32))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b53, bpref=$b.0) -> $b53.$b.0
// [Wasm] Get Local name Insn(iref=%52) -> $%52
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%52), Int32(val=91)])
// [Wasm] Get Local name Insn(iref=%52) -> $%52
// [Wasm] Get Local name Insn(iref=%53) -> $%53
// [Wasm] Lowering control Branch(cond=Insn(iref=%53), t=b56, t_args=[], f=b57, f_args=[])
// [Wasm] Get Local name Insn(iref=%53) -> $%53
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FnParam(fref=f3, fpref=$f.1), BlockParam(bref=b53, bpref=$b.0)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b53, bpref=$b.0) -> $b53.$b.0
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Lowering control Branch(cond=Insn(iref=%51), t=b54, t_args=[], f=b55, f_args=[])
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Lowering control Jump(target=b52, args=[Insn(iref=%45), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Get Local name BlockParam(bref=b53, bpref=$b.0) -> $b53.$b.0
// [Wasm] Get Local name BlockParam(bref=b53, bpref=$b.1) -> $b53.$b.1
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Lowering control Jump(target=b51, args=[])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Lowering insn Call(ty=Int32, f=f3, args=[Insn(iref=%48), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5)])
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f3, fpref=$f.5), index=0, width=@32), val=Insn(iref=%49))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Lowering control Jump(target=b44, args=[])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f3, fpref=$f.2), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f3, fpref=$f.4), offset=Insn(iref=%42), width=@32))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%43), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Get Local name Insn(iref=%44) -> $%44
// [Wasm] Lowering control Branch(cond=Insn(iref=%44), t=b45, t_args=[], f=b46, f_args=[])
// [Wasm] Get Local name Insn(iref=%44) -> $%44
// [Wasm] Lowering control Jump(target=b43, args=[])
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f3, fpref=$f.5), index=0, width=@32), val=BlockParam(bref=b2, bpref=$b.0))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering control Jump(target=b42, args=[])
// [Wasm] Lowering control Jump(target=b29, args=[BlockParam(bref=b28, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b28, bpref=$b.0) -> $b28.$b.0
// [Wasm] Get Local name BlockParam(bref=b29, bpref=$b.0) -> $b29.$b.0
// [Wasm] Lowering control Jump(target=b28, args=[BlockParam(bref=b27, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Get Local name BlockParam(bref=b28, bpref=$b.0) -> $b28.$b.0
// [Wasm] Lowering control Jump(target=b27, args=[BlockParam(bref=b26, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Lowering control Jump(target=b26, args=[BlockParam(bref=b25, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.0) -> $b25.$b.0
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Lowering control Jump(target=b25, args=[BlockParam(bref=b24, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b24, bpref=$b.0) -> $b24.$b.0
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.0) -> $b25.$b.0
// [Wasm] Lowering control Jump(target=b24, args=[BlockParam(bref=b23, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.0) -> $b23.$b.0
// [Wasm] Get Local name BlockParam(bref=b24, bpref=$b.0) -> $b24.$b.0
// [Wasm] Lowering control Jump(target=b23, args=[BlockParam(bref=b22, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b22, bpref=$b.0) -> $b22.$b.0
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.0) -> $b23.$b.0
// [Wasm] Lowering control Jump(target=b22, args=[BlockParam(bref=b21, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.0) -> $b21.$b.0
// [Wasm] Get Local name BlockParam(bref=b22, bpref=$b.0) -> $b22.$b.0
// [Wasm] Lowering control Jump(target=b21, args=[BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.0) -> $b21.$b.0
// [Wasm] Lowering control Jump(target=b21, args=[BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.0) -> $b21.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=93)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Lowering control Branch(cond=Insn(iref=%41), t=b19, t_args=[], f=b20, f_args=[])
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=91)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering control Branch(cond=Insn(iref=%36), t=b17, t_args=[], f=b18, f_args=[])
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=44)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering control Branch(cond=Insn(iref=%31), t=b15, t_args=[], f=b16, f_args=[])
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=46)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering control Branch(cond=Insn(iref=%26), t=b13, t_args=[], f=b14, f_args=[])
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=45)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering control Branch(cond=Insn(iref=%19), t=b11, t_args=[], f=b12, f_args=[])
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=43)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering control Branch(cond=Insn(iref=%12), t=b9, t_args=[], f=b10, f_args=[])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=60)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Branch(cond=Insn(iref=%7), t=b7, t_args=[], f=b8, f_args=[])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f3, fpref=$f.3), offset=BlockParam(bref=b2, bpref=$b.0), width=@32))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=62)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b5, t_args=[], f=b6, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FnParam(fref=f3, fpref=$f.1), BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b1, args=[FnParam(fref=f3, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.5) -> $$f.5
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local Insn(iref=%41) -> $%41
// [Wasm] Local Insn(iref=%33) -> $%33
// [Wasm] Local BlockParam(bref=b28, bpref=$b.0) -> $b28.$b.0
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%27) -> $%27
// [Wasm] Local Insn(iref=%25) -> $%25
// [Wasm] Local Insn(iref=%39) -> $%39
// [Wasm] Local Insn(iref=%59) -> $%59
// [Wasm] Local BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local BlockParam(bref=b25, bpref=$b.0) -> $b25.$b.0
// [Wasm] Local Insn(iref=%56) -> $%56
// [Wasm] Local Insn(iref=%49) -> $%49
// [Wasm] Local Insn(iref=%42) -> $%42
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local BlockParam(bref=b23, bpref=$b.0) -> $b23.$b.0
// [Wasm] Local BlockParam(bref=b53, bpref=$b.1) -> $b53.$b.1
// [Wasm] Local BlockParam(bref=b24, bpref=$b.0) -> $b24.$b.0
// [Wasm] Local BlockParam(bref=b53, bpref=$b.0) -> $b53.$b.0
// [Wasm] Local Insn(iref=%31) -> $%31
// [Wasm] Local BlockParam(bref=b63, bpref=$b.0) -> $b63.$b.0
// [Wasm] Local BlockParam(bref=b22, bpref=$b.0) -> $b22.$b.0
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%53) -> $%53
// [Wasm] Local Insn(iref=%54) -> $%54
// [Wasm] Local Insn(iref=%60) -> $%60
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local BlockParam(bref=b62, bpref=$b.0) -> $b62.$b.0
// [Wasm] Local BlockParam(bref=b48, bpref=$b.0) -> $b48.$b.0
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%55) -> $%55
// [Wasm] Local BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%48) -> $%48
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local BlockParam(bref=b21, bpref=$b.0) -> $b21.$b.0
// [Wasm] Local Insn(iref=%36) -> $%36
// [Wasm] Local BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local Insn(iref=%51) -> $%51
// [Wasm] Local Insn(iref=%52) -> $%52
// [Wasm] Local Insn(iref=%44) -> $%44
// [Wasm] Local Insn(iref=%32) -> $%32
// [Wasm] Local Insn(iref=%58) -> $%58
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%57) -> $%57
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%35) -> $%35
// [Wasm] Local BlockParam(bref=b29, bpref=$b.0) -> $b29.$b.0
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local BlockParam(bref=b65, bpref=$b.0) -> $b65.$b.0
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%45) -> $%45
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%43) -> $%43
// [Wasm] Local Insn(iref=%30) -> $%30
// [Wasm] Local Insn(iref=%40) -> $%40
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Local BlockParam(bref=b64, bpref=$b.0) -> $b64.$b.0
// [Wasm] Lowered function aux.252 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f6, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [Wasm] Lowering function read_ch_until_newline_or_eof.249
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[Int32(val=-1)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[Int32(val=-1)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=13)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_char", args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=10)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function read_ch_until_newline_or_eof.249 to wasm
// [KnfOpt] func_tre: read_ch_until_newline_or_eof.1 false
// [KnfOpt] func_tre: bf.5 false
// [KnfOpt] func_tre: skip.19 true
// [KnfOpt] func_tre: aux.36 true
// [KnfOpt] func_tre: lp.96 true
// [KnfOpt] func_tre: main.120 false
// [KnfOpt] func_tre: read_prog.124 false
// [KnfOpt] freq: {read_ch_until_newline_or_eof.1: Many(2), bf.5: Once, skip.19: Once, skip.133: Many(4), aux.36: Many(2), aux.166: Many(8), lp.226: Once, lp.227: Many(2), main.120: Once, read_prog.124: Many(2)}
// [KnfOpt] Inline threshold 11
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision read_ch_until_newline_or_eof.1 rejected
// [KnfOpt] Inline threshold 39
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision skip.19 rejected
// [KnfOpt] Inline threshold 185
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 2
// [KnfOpt] Inline decision aux.36 rejected
// [KnfOpt] Inline threshold 35
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision lp.226 rejected
// [KnfOpt] Inline threshold 185
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 2
// [KnfOpt] Inline decision aux.36 rejected
// [KnfOpt] Inline threshold 11
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision read_ch_until_newline_or_eof.1 rejected
// [KnfOpt] Inline threshold 253
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 3
// [KnfOpt] Inline decision bf.5 rejected
// [KnfOpt] Inline threshold 13
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision read_prog.124 rejected
// [KnfOpt] Inline threshold 13
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision read_prog.124 rejected
// [KnfOpt] freq: {read_ch_until_newline_or_eof.1: Many(2), bf.5: Once, skip.19: Once, skip.133: Many(4), aux.36: Many(2), aux.166: Many(8), lp.226: Once, lp.227: Many(2), main.120: Once, read_prog.124: Many(2)}
// [KnfOpt] Inline threshold 11
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision read_ch_until_newline_or_eof.1 rejected
// [KnfOpt] Inline threshold 39
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision skip.19 rejected
// [KnfOpt] Inline threshold 185
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 2
// [KnfOpt] Inline decision aux.36 rejected
// [KnfOpt] Inline threshold 35
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision lp.226 rejected
// [KnfOpt] Inline threshold 185
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 2
// [KnfOpt] Inline decision aux.36 rejected
// [KnfOpt] Inline threshold 11
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision read_ch_until_newline_or_eof.1 rejected
// [KnfOpt] Inline threshold 253
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 3
// [KnfOpt] Inline decision bf.5 rejected
// [KnfOpt] Inline threshold 13
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision read_prog.124 rejected
// [KnfOpt] Inline threshold 13
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision read_prog.124 rejected
// [KnfOpt] Numbers of let rec: 7 7 0
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %5: Call(ty=Unit, f=f5, args=[Insn(iref=%4), FnParam(fref=f5, fpref=$f.1)])
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f4: Once, f1: Once, f5: Once, f2: Once, f3: Multiple, f14: Once, f0: Multiple})
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%38) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%38) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%38) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%38) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%38) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%38) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%38) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%38) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%38) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%38) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%38) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%38) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%38) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%38) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%38) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%38) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%38) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%38) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%38) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%38) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%38) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%38) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%38) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%38) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%38) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%38) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%38) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%38) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%38) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] lp.253 is inlining Call(ty=Int32, f=f1, args=[Insn(iref=%3), Int32(val=0), FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.3)])
// [CoreOpt] shifted callee .fn skip.251 #f1 : fn(int32, int32, int32, array[int32]) -> int32
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b9 {
// [CoreOpt]   .bb #b9 () {
// [CoreOpt]     jump b10($f0, $f1)
// [CoreOpt]   }
// [CoreOpt]   .loop #b10 pre #Some(b9) header #b11 {
// [CoreOpt]     .block #b12
// [CoreOpt]     .block #b13
// [CoreOpt]     .block #b14
// [CoreOpt]     .block #b15
// [CoreOpt]     .block #b16
// [CoreOpt]     .block #b17
// [CoreOpt]     .block #b18
// [CoreOpt]     .block #b19
// [CoreOpt]     .block #b20
// [CoreOpt]     .block #b21
// [CoreOpt]     .block #b22
// [CoreOpt]     .block #b23
// [CoreOpt]   }
// [CoreOpt]   .bb #b11 (int32, int32) {
// [CoreOpt]     let %9: bool = le($f2, $b11.0)
// [CoreOpt]     br %9 b12() b13()
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 () {
// [CoreOpt]     jump b23($b11.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b13 () {
// [CoreOpt]     let %10: int32 = load int32 offset($f3, $b11.0 * @32)
// [CoreOpt]     let %11: bool = eq(%10, 91)
// [CoreOpt]     br %11 b14() b15()
// [CoreOpt]   }
// [CoreOpt]   .bb #b14 () {
// [CoreOpt]     let %12: int32 = add($b11.0, 1)
// [CoreOpt]     let %13: int32 = add($b11.1, 1)
// [CoreOpt]     jump b11(%12, %13)
// [CoreOpt]   }
// [CoreOpt]   .bb #b15 () {
// [CoreOpt]     let %14: bool = eq(%10, 93)
// [CoreOpt]     br %14 b16() b17()
// [CoreOpt]   }
// [CoreOpt]   .bb #b16 () {
// [CoreOpt]     let %15: bool = eq($b11.1, 0)
// [CoreOpt]     br %15 b18() b19()
// [CoreOpt]   }
// [CoreOpt]   .bb #b17 () {
// [CoreOpt]     let %18: int32 = add($b11.0, 1)
// [CoreOpt]     jump b11(%18, $b11.1)
// [CoreOpt]   }
// [CoreOpt]   .bb #b18 () {
// [CoreOpt]     jump b20($b11.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b19 () {
// [CoreOpt]     let %16: int32 = add($b11.0, 1)
// [CoreOpt]     let %17: int32 = sub($b11.1, 1)
// [CoreOpt]     jump b11(%16, %17)
// [CoreOpt]   }
// [CoreOpt]   .bb #b20 (int32) {
// [CoreOpt]     jump b21($b20.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b21 (int32) {
// [CoreOpt]     jump b22($b21.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b22 (any) {
// [CoreOpt]     jump b23($b22.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b23 (int32) {
// [CoreOpt]     return $b23.0
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] aux.252 is inlining Call(ty=Unit, f=f2, args=[BlockParam(bref=b2, bpref=$b.0), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5)])
// [CoreOpt] shifted callee .fn lp.253 #f2 : fn(int32, int32, array[int32], array[int32], array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b42 {
// [CoreOpt]   .bb #b42 () {
// [CoreOpt]     jump b43()
// [CoreOpt]   }
// [CoreOpt]   .loop #b43 pre #Some(b42) header #b44 {
// [CoreOpt]     .block #b45
// [CoreOpt]     .block #b46
// [CoreOpt]     .block #b47
// [CoreOpt]   }
// [CoreOpt]   .bb #b44 () {
// [CoreOpt]     let %42: int32 = load int32 field($f2, 0 * @32)
// [CoreOpt]     let %43: int32 = load int32 offset($f4, %42 * @32)
// [CoreOpt]     let %44: bool = eq(%43, 0)
// [CoreOpt]     br %44 b45() b46()
// [CoreOpt]   }
// [CoreOpt]   .bb #b45 () {
// [CoreOpt]     let %45: int32 = add($f0, 1)
// [CoreOpt]     jump b51()
// [CoreOpt]   }
// [CoreOpt]   .bb #b46 () {
// [CoreOpt]     let %48: int32 = add($f0, 1)
// [CoreOpt]     let %49: int32 = call f3(%48, $f1, $f2, $f3, $f4, $f5)
// [CoreOpt]     let _ = store int32 field($f5, 0 * @32) <- %49
// [CoreOpt]     jump b44()
// [CoreOpt]   }
// [CoreOpt]   .bb #b47 (unit) {
// [CoreOpt]     return $b47.0
// [CoreOpt]   }
// [CoreOpt]   .bb #b48 (int32) {
// [CoreOpt]     let _ = store int32 field($f5, 0 * @32) <- $b48.0
// [CoreOpt]     jump b47(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b51 () {
// [CoreOpt]     jump b52(%45, 0)
// [CoreOpt]   }
// [CoreOpt]   .loop #b52 pre #Some(b51) header #b53 {
// [CoreOpt]     .block #b54
// [CoreOpt]     .block #b55
// [CoreOpt]     .block #b56
// [CoreOpt]     .block #b57
// [CoreOpt]     .block #b58
// [CoreOpt]     .block #b59
// [CoreOpt]     .block #b60
// [CoreOpt]     .block #b61
// [CoreOpt]     .block #b62
// [CoreOpt]     .block #b63
// [CoreOpt]     .block #b64
// [CoreOpt]     .block #b65
// [CoreOpt]   }
// [CoreOpt]   .bb #b53 (int32, int32) {
// [CoreOpt]     let %51: bool = le($f1, $b53.0)
// [CoreOpt]     br %51 b54() b55()
// [CoreOpt]   }
// [CoreOpt]   .bb #b54 () {
// [CoreOpt]     jump b65($b53.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b55 () {
// [CoreOpt]     let %52: int32 = load int32 offset($f3, $b53.0 * @32)
// [CoreOpt]     let %53: bool = eq(%52, 91)
// [CoreOpt]     br %53 b56() b57()
// [CoreOpt]   }
// [CoreOpt]   .bb #b56 () {
// [CoreOpt]     let %54: int32 = add($b53.0, 1)
// [CoreOpt]     let %55: int32 = add($b53.1, 1)
// [CoreOpt]     jump b53(%54, %55)
// [CoreOpt]   }
// [CoreOpt]   .bb #b57 () {
// [CoreOpt]     let %56: bool = eq(%52, 93)
// [CoreOpt]     br %56 b58() b59()
// [CoreOpt]   }
// [CoreOpt]   .bb #b58 () {
// [CoreOpt]     let %57: bool = eq($b53.1, 0)
// [CoreOpt]     br %57 b60() b61()
// [CoreOpt]   }
// [CoreOpt]   .bb #b59 () {
// [CoreOpt]     let %60: int32 = add($b53.0, 1)
// [CoreOpt]     jump b53(%60, $b53.1)
// [CoreOpt]   }
// [CoreOpt]   .bb #b60 () {
// [CoreOpt]     jump b62($b53.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b61 () {
// [CoreOpt]     let %58: int32 = add($b53.0, 1)
// [CoreOpt]     let %59: int32 = sub($b53.1, 1)
// [CoreOpt]     jump b53(%58, %59)
// [CoreOpt]   }
// [CoreOpt]   .bb #b62 (int32) {
// [CoreOpt]     jump b63($b62.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b63 (int32) {
// [CoreOpt]     jump b64($b63.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b64 (any) {
// [CoreOpt]     jump b65($b64.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b65 (int32) {
// [CoreOpt]     jump b48($b65.0)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f1
// [CoreOpt] Remove dead function: f2
// [CoreOpt] LVN subst Insn(iref=%14) with Insn(iref=%13)
// [CoreOpt] LVN subst Insn(iref=%21) with Insn(iref=%20)
