// [Asm] pre_assigned_registers: Self(fref=f12) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_12"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_12"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main136l1_5 ->   call main136l1_5
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f4, fpref=$f.0) -> v2, BlockParam(bref=b3, bpref=$b.0) -> v19, Insn(iref=%9) -> v11, Insn(iref=%8) -> v13, BlockParam(bref=b0, bpref=$b.0) -> v7, BlockParam(bref=b0, bpref=$b.1) -> v8, FnParam(fref=f4, fpref=$f.1) -> v3, Insn(iref=%5) -> v17, Insn(iref=%0) -> v9, Insn(iref=%4) -> v16, Mem(fref=f4, mref=m2) -> v6, Insn(iref=%3) -> v15, Insn(iref=%7) -> v12, Insn(iref=%2) -> v14, Insn(iref=%1) -> v10, Mem(fref=f4, mref=m1) -> v5, Self(fref=f4) -> v0, Insn(iref=%6) -> v18, Mem(fref=f4, mref=m0) -> v4
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=-1)])
// [Asm] defs: []
// [Asm] live_set: [a1, s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, s11, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, s11, zero, v7]
// [Asm] move_origin: [v2]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, s11, zero, v8]
// [Asm] move_origin: [v3]
// [Asm] defined: v8 is X
// [Asm] defs: [v4]
// [Asm] live_set: [zero, v8, v7, v4]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v8, v7, v4, s11]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v8, v7, v4, s11]
// [Asm] move_origin: []
// [Asm] defs: [v24]
// [Asm] live_set: [zero, v8, v7, v4, s11, v24]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v15]
// [Asm] live_set: [zero, v8, v7, v4, v15, s11]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v22]
// [Asm] live_set: [zero, v22, v8, v7, v4, v15, s11]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero, v8, v7, v4, v15]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero, v8, v7, v4, s11, v15]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, v8, v7, v4, s11]
// [Asm] move_origin: [v15]
// [Asm] defined: a1 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v7, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v7, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v8, v7, v4, v6]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, a0, v8, v7, a1, v6]
// [Asm] move_origin: [v4]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, zero, a0, v8, a2, a1, v6]
// [Asm] move_origin: [v7]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v5, zero, a0, a2, a1, v6, a3]
// [Asm] move_origin: [v8]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [zero, a0, a4, a2, a1, v6, a3]
// [Asm] move_origin: [v5]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [a5, zero, a0, a4, a2, a1, a3]
// [Asm] move_origin: [v6]
// [Asm] defined: a5 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v18]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v19]
// [Asm] move_origin: [zero]
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v8, s11, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v8, s11, zero, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v8, s11, zero, v9, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v8, s11, zero, v9, v7]
// [Asm] move_origin: []
// [Asm] defs: [v30]
// [Asm] live_set: [v7, v8, s11, zero, v9, v30]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: []
// [Asm] live_set: [v7, s11, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v19]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v28]
// [Asm] live_set: [v8, s11, v28, zero, v9, v7]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: [v29]
// [Asm] live_set: [v7, v8, s11, zero, v9, v29]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: []
// [Asm] live_set: [v7, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [s11, zero, v13, v8]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v7, s11, zero, v8]
// [Asm] move_origin: [v13]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7, s11, zero, v8]
// [Asm] move_origin: [v8]
// [Asm] defs: []
// [Asm] live_set: [v7, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of read_prog140l2_4"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r20 [label="t2", color=blue];
// [Asm]   r23 [label="a6", color=blue];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="v15 ← a0", color=green];
// [Asm]   r26 [label="v19 ← a0", color=green];
// [Asm]   r27 [label="v9 ← a0", color=green];
// [Asm]   r6 [label="v8 ← s1", color=green];
// [Asm]   r13 [label="a0", color=blue];
// [Asm]   r4 [label="v3 ← a1", color=green];
// [Asm]   r29 [label="v28 ← a1", color=green];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r28 [label="v30 ← a1", color=green];
// [Asm]   r11 [label="v5 ← a4", color=green];
// [Asm]   r7 [label="v4 ← a2", color=green];
// [Asm]   r10 [label="v22 ← a1", color=green];
// [Asm]   r22 [label="t4", color=blue];
// [Asm]   r14 [label="a2", color=blue];
// [Asm]   r8 [label="v24 ← a0", color=green];
// [Asm]   r30 [label="v29 ← a1", color=green];
// [Asm]   r5 [label="v7 ← s0", color=green];
// [Asm]   r15 [label="a3", color=blue];
// [Asm]   r24 [label="a7", color=blue];
// [Asm]   r25 [label="v18 ← a0", color=green];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r16 [label="a4", color=blue];
// [Asm]   r18 [label="t0", color=blue];
// [Asm]   r19 [label="t1", color=blue];
// [Asm]   r31 [label="v13 ← a0", color=green];
// [Asm]   r21 [label="t3", color=blue];
// [Asm]   r17 [label="a5", color=blue];
// [Asm]   r12 [label="v6 ← a5", color=green];
// [Asm]   r6 -- r21;
// [Asm]   r2 -- r31;
// [Asm]   r5 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r3 -- r15;
// [Asm]   r14 -- r16;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r27 -- r29;
// [Asm]   r11 -- r14;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r1 -- r7;
// [Asm]   r5 -- r18;
// [Asm]   r2 -- r10;
// [Asm]   r6 -- r29;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r5 -- r29;
// [Asm]   r2 -- r16;
// [Asm]   r27 -- r28;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r31;
// [Asm]   r3 -- r5;
// [Asm]   r16 -- r17;
// [Asm]   r27 -- r30;
// [Asm]   r3 -- r8;
// [Asm]   r6 -- r13;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r30;
// [Asm]   r3 -- r4;
// [Asm]   r11 -- r13;
// [Asm]   r0 -- r2;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r7 -- r10;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r6 -- r31;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r27;
// [Asm]   r13 -- r18;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r5 -- r7;
// [Asm]   r9 -- r10;
// [Asm]   r11 -- r15;
// [Asm]   r5 -- r14;
// [Asm]   r13 -- r22;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r6 -- r23;
// [Asm]   r2 -- r24;
// [Asm]   r13 -- r21;
// [Asm]   r7 -- r8;
// [Asm]   r14 -- r15;
// [Asm]   r2 -- r23;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r13 -- r24;
// [Asm]   r3 -- r19;
// [Asm]   r6 -- r11;
// [Asm]   r13 -- r15;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r5;
// [Asm]   r14 -- r17;
// [Asm]   r6 -- r15;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r18;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r23;
// [Asm]   r12 -- r15;
// [Asm]   r3 -- r12;
// [Asm]   r6 -- r30;
// [Asm]   r5 -- r13;
// [Asm]   r7 -- r13;
// [Asm]   r13 -- r16;
// [Asm]   r11 -- r12;
// [Asm]   r5 -- r19;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r6 -- r16;
// [Asm]   r3 -- r28;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r12;
// [Asm]   r13 -- r20;
// [Asm]   r6 -- r24;
// [Asm]   r6 -- r20;
// [Asm]   r13 -- r19;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r19;
// [Asm]   r6 -- r27;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r9 -- r11;
// [Asm]   r12 -- r13;
// [Asm]   r15 -- r17;
// [Asm]   r5 -- r28;
// [Asm]   r2 -- r14;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r24;
// [Asm]   r13 -- r23;
// [Asm]   r0 -- r3;
// [Asm]   r6 -- r28;
// [Asm]   r13 -- r14;
// [Asm]   r3 -- r29;
// [Asm]   r3 -- r20;
// [Asm]   r7 -- r11;
// [Asm]   r13 -- r17;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r2 -- r30;
// [Asm]   r12 -- r14;
// [Asm]   r12 -- r16;
// [Asm]   r5 -- r27;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r7 -- r12;
// [Asm]   r15 -- r16;
// [Asm]   r5 -- r30;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   r5 -- r15;
// [Asm]   r5 -- r12;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:v2-> 1:a1-> 2:s11-> 3:zero-> 4:v3-> 5:v7-> 6:v8-> 7:v4-> 11:v5-> 12:v6-> 13:a0-> 14:a2-> 15:a3-> 16:a4-> 17:a5-> 9:v15-> 10:v22-> 8:v24-> 18:t0-> 19:t1-> 20:t2-> 21:t3-> 22:t4-> 23:a6-> 24:a7-> 27:v9-> 28:v30-> 29:v28-> 30:v29-> 31:v13-> 25:v18-> 26:v19"
// [Asm]   comment = "v2<-a0;v15<-a0;v19<-a0;v9<-a0;v8<-s1;v3<-a1;v28<-a1;v30<-a1;v5<-a4;v4<-a2;v22<-a1;v24<-a0;v29<-a1;v7<-s0;v18<-a0;v13<-a0;v6<-a5;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of read_prog140l2_4"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v7, v2 ->   mv s0, a0
// [Asm] subst   mv v8, v3 ->   mv s1, a1
// [Asm] subst   addi v4, s11, -4 ->   addi a2, s11, -4
// [Asm] subst   andi s11, v4, -8 ->   andi s11, a2, -8
// [Asm] subst   sw zero, 0(v4) ->   sw zero, 0(a2)
// [Asm] subst   li v24, 1024 ->   li a0, 1024
// [Asm] subst   mul v15, v24, v24 ->   mul a0, a0, a0
// [Asm] subst   slliw v22, v15, 2 ->   slliw a1, a0, 2
// [Asm] subst   sub v5, s11, v22 ->   sub a4, s11, a1
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a4, -8
// [Asm] subst   mv a1, v15 ->   mv a1, a0
// [Asm] subst   addi v6, s11, -4 ->   addi a5, s11, -4
// [Asm] subst   andi s11, v6, -8 ->   andi s11, a5, -8
// [Asm] subst   sw zero, 0(v6) ->   sw zero, 0(a5)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v4 ->   mv a1, a2
// [Asm] subst   mv a2, v7 ->   mv a2, s0
// [Asm] subst   mv a3, v8 ->   mv a3, s1
// [Asm] subst   call aux40.180l4_3 ->   call aux40.180l4_3
// [Asm] subst   mv v19, zero ->   mv a0, zero
// [Asm] subst   call read_ch_until_newline_or_eof1l0_0 ->   call read_ch_until_newline_or_eof1l0_0
// [Asm] subst   li v30, -1 ->   li a1, -1
// [Asm] subst   bne v9, v30, .read_prog140l2_4_2 ->   bne a0, a1, .read_prog140l2_4_2
// [Asm] subst   ret ->   ret
// [Asm] subst   slliw v28, v7, 2 ->   slliw a1, s0, 2
// [Asm] subst   add v29, v8, v28 ->   add a1, s1, a1
// [Asm] subst   sw v9, 0(v29) ->   sw a0, 0(a1)
// [Asm] subst   addi v13, v7, 1 ->   addi a0, s0, 1
// [Asm] subst   mv v7, v13 ->   mv s0, a0
// [Asm] subst   j .read_prog140l2_4_0 ->   j .read_prog140l2_4_0
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v4, Mem(fref=f5, mref=m0) -> v2, Self(fref=f5) -> v0, Insn(iref=%0) -> v3
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6, s11, zero]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: [v8]
// [Asm] defined: a1 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main136l1_5"];
// [Asm]   r0 [label="v6 ← a0", color=green];
// [Asm]   r3 [label="v2 ← a2", color=green];
// [Asm]   r9 [label="t2", color=blue];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r13 [label="a3", color=blue];
// [Asm]   r4 [label="v8 ← a0", color=green];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r11 [label="t4", color=blue];
// [Asm]   r7 [label="t0", color=blue];
// [Asm]   r10 [label="t3", color=blue];
// [Asm]   r14 [label="a4", color=blue];
// [Asm]   r8 [label="t1", color=blue];
// [Asm]   r5 [label="a1", color=blue];
// [Asm]   r15 [label="a5", color=blue];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="a6", color=blue];
// [Asm]   r18 [label="v4 ← a0", color=green];
// [Asm]   r17 [label="a7", color=blue];
// [Asm]   r12 [label="a2", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r6 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r6 -- r15;
// [Asm]   r2 -- r14;
// [Asm]   r2 -- r15;
// [Asm]   r0 -- r2;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r3 -- r6;
// [Asm]   r6 -- r14;
// [Asm]   r6 -- r10;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r10;
// [Asm]   r2 -- r5;
// [Asm]   r6 -- r17;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r2 -- r17;
// [Asm]   r6 -- r16;
// [Asm]   r2 -- r16;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r3;
// [Asm]   r6 -- r12;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r13;
// [Asm]   comment = "0:v6-> 1:s11-> 2:zero-> 3:v2-> 4:v8-> 5:a1-> 6:a0-> 7:t0-> 8:t1-> 9:t2-> 10:t3-> 11:t4-> 12:a2-> 13:a3-> 14:a4-> 15:a5-> 16:a6-> 17:a7-> 18:v4"
// [Asm]   comment = "v6<-a0;v2<-a2;v8<-a0;v4<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main136l1_5"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v6, 4096 ->   li a0, 4096
// [Asm] subst   sub v2, s11, v6 ->   sub a2, s11, a0
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a2, -8
// [Asm] subst   li v8, 1024 ->   li a0, 1024
// [Asm] subst   mv a1, v8 ->   mv a1, a0
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v2 ->   mv a1, a2
// [Asm] subst   call read_prog140l2_4 ->   call read_prog140l2_4
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: BlockParam(bref=b69, bpref=$b.0) -> v63, Insn(iref=%15) -> v89, Insn(iref=%33) -> v81, Insn(iref=%76) -> v79, BlockParam(bref=b49, bpref=$b.4) -> v38, Insn(iref=%8) -> v18, Insn(iref=%10) -> v96, BlockParam(bref=b49, bpref=$b.0) -> v34, BlockParam(bref=b0, bpref=$b.4) -> v12, Insn(iref=%27) -> v87, FnParam(fref=f3, fpref=$f.3) -> v5, Insn(iref=%25) -> v85, Insn(iref=%39) -> v76, BlockParam(bref=b26, bpref=$b.0) -> v32, Insn(iref=%59) -> v54, BlockParam(bref=b67, bpref=$b.0) -> v61, Insn(iref=%4) -> v100, BlockParam(bref=b25, bpref=$b.0) -> v31, Insn(iref=%56) -> v45, Insn(iref=%49) -> v40, Insn(iref=%42) -> v23, Insn(iref=%65) -> v58, Insn(iref=%73) -> v53, Insn(iref=%26) -> v86, BlockParam(bref=b49, bpref=$b.2) -> v36, BlockParam(bref=b23, bpref=$b.0) -> v29, BlockParam(bref=b49, bpref=$b.5) -> v39, BlockParam(bref=b24, bpref=$b.0) -> v30, Insn(iref=%31) -> v78, Insn(iref=%74) -> v75, Insn(iref=%64) -> v56, BlockParam(bref=b19, bpref=$b.0) -> v25, BlockParam(bref=b22, bpref=$b.0) -> v28, Insn(iref=%38) -> v74, Insn(iref=%75) -> v15, BlockParam(bref=b0, bpref=$b.1) -> v9, Insn(iref=%54) -> v68, Insn(iref=%60) -> v55, Insn(iref=%67) -> v60, Insn(iref=%5) -> v101, Insn(iref=%19) -> v93, Insn(iref=%79) -> v90, Insn(iref=%55) -> v44, BlockParam(bref=b27, bpref=$b.0) -> v103, Insn(iref=%66) -> v59, Insn(iref=%48) -> v24, Insn(iref=%23) -> v83, Insn(iref=%20) -> v94, BlockParam(bref=b21, bpref=$b.0) -> v27, BlockParam(bref=b58, bpref=$b.2) -> v50, Insn(iref=%34) -> v82, BlockParam(bref=b20, bpref=$b.0) -> v26, Insn(iref=%36) -> v22, FnParam(fref=f3, fpref=$f.4) -> v6, BlockParam(bref=b70, bpref=$b.0) -> v66, BlockParam(bref=b0, bpref=$b.5) -> v13, BlockParam(bref=b0, bpref=$b.3) -> v11, Insn(iref=%50) -> v42, Insn(iref=%14) -> v19, Insn(iref=%51) -> v43, FnParam(fref=f3, fpref=$f.0) -> v2, FnParam(fref=f3, fpref=$f.5) -> v7, Self(fref=f3) -> v0, Insn(iref=%80) -> v41, BlockParam(bref=b58, bpref=$b.0) -> v48, Insn(iref=%52) -> v47, BlockParam(bref=b68, bpref=$b.0) -> v62, Insn(iref=%32) -> v80, Insn(iref=%58) -> v52, Insn(iref=%1) -> v16, BlockParam(bref=b58, bpref=$b.1) -> v49, Insn(iref=%11) -> v97, BlockParam(bref=b55, bpref=$b.0) -> v67, Insn(iref=%57) -> v46, Insn(iref=%6) -> v102, Insn(iref=%62) -> v65, FnParam(fref=f3, fpref=$f.2) -> v4, Insn(iref=%46) -> v72, Insn(iref=%28) -> v88, Insn(iref=%9) -> v95, Insn(iref=%37) -> v73, BlockParam(bref=b58, bpref=$b.3) -> v51, BlockParam(bref=b0, bpref=$b.0) -> v8, Insn(iref=%45) -> v71, BlockParam(bref=b0, bpref=$b.2) -> v10, BlockParam(bref=b49, bpref=$b.3) -> v37, Insn(iref=%0) -> v14, Insn(iref=%61) -> v64, Insn(iref=%18) -> v92, Insn(iref=%3) -> v99, BlockParam(bref=b52, bpref=$b.0) -> v69, Insn(iref=%22) -> v20, Insn(iref=%17) -> v91, FnParam(fref=f3, fpref=$f.1) -> v3, Insn(iref=%2) -> v17, Insn(iref=%72) -> v84, Insn(iref=%43) -> v33, Insn(iref=%30) -> v21, BlockParam(bref=b30, bpref=$b.0) -> v70, Insn(iref=%40) -> v77, BlockParam(bref=b49, bpref=$b.1) -> v35, Insn(iref=%69) -> v57, Insn(iref=%12) -> v98
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%31), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%37), width=@32))
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b58, bpref=$b.1), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%59), Int32(val=93)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%59), Int32(val=91)])
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b58, bpref=$b.0), width=@32))
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b58, bpref=$b.2), BlockParam(bref=b58, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%50), Int32(val=0)])
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%49), width=@32))
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=93)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=91)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=44)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=46)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=45)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=43)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=60)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=62)])
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] defs: [v44]
// [Asm] live_set: [v11, v10, v13, v36, v37, v12, v44, v9, v39, zero, v35, v38, v34]
// [Asm] move_origin: []
// [Asm] defined: v44 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v36, v37, v12, v44, v9, v39, zero, v35, v38, v34]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v10, v13, a0, v36, v37, v12, v9, v39, zero, v35, v38, v34]
// [Asm] move_origin: [v44]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v11, v10, v13, a0, v36, v37, a1, v12, v9, v39, zero, v35, v38, v34]
// [Asm] move_origin: [v34]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v11, v10, v13, a0, v36, v37, a2, a1, v12, v9, v39, zero, v35, v38, v34]
// [Asm] move_origin: [v35]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v11, v10, v13, a0, v36, v37, a2, a1, v12, a3, v9, v39, zero, v35, v38, v34]
// [Asm] move_origin: [v37]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v11, v10, v13, a0, v36, v37, a2, a1, v12, a3, v9, v39, zero, a4, v35, v38, v34]
// [Asm] move_origin: [v38]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [v11, v10, a5, v13, a0, v36, v37, a2, a1, v12, a3, v9, v39, zero, a4, v35, v38, v34]
// [Asm] move_origin: [v39]
// [Asm] defined: a5 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, v13, a0, v36, v37, v12, v9, v39, zero, v35, v38, v34]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v45]
// [Asm] live_set: [v11, v10, v13, v36, v37, v12, v9, v39, zero, v35, v45, v38, v34]
// [Asm] move_origin: [a0]
// [Asm] defined: v45 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v36, v37, v12, v9, v39, zero, v35, v45, v38, v34]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v13, v35, v36, v37, v38, v12, v34, v9, v39]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v13, v35, v36, v37, v38, v12, v34, v9, v39]
// [Asm] move_origin: [v34]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v13, v35, v36, v37, v38, v12, v34, v9, v39]
// [Asm] move_origin: [v35]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v13, v35, v36, v37, v38, v12, v34, v9, v39]
// [Asm] move_origin: [v36]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v13, v35, v36, v37, v38, v12, v34, v9, v39]
// [Asm] move_origin: [v37]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v13, v35, v36, v37, v38, v12, v34, v9, v39]
// [Asm] move_origin: [v38]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v13, v35, v36, v37, v38, v12, v34, v9, v39]
// [Asm] move_origin: [v39]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v13, v35, v36, v37, v38, v12, v34, v9, v39]
// [Asm] move_origin: []
// [Asm] defs: [v99]
// [Asm] live_set: [v11, v10, v99, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v99 is X
// [Asm] defs: [v100]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9, v100]
// [Asm] move_origin: []
// [Asm] defined: v100 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v102]
// [Asm] live_set: [v11, v10, v13, zero, v12, v102, v9]
// [Asm] move_origin: []
// [Asm] defined: v102 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v102]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v64]
// [Asm] live_set: [v51, v11, v10, v49, zero, v13, v50, v12, v9, v64, v39]
// [Asm] move_origin: []
// [Asm] defined: v64 is X
// [Asm] defs: [v65]
// [Asm] live_set: [v51, v11, v10, zero, v13, v50, v65, v12, v9, v64, v39]
// [Asm] move_origin: []
// [Asm] defined: v65 is X
// [Asm] defs: [v48]
// [Asm] live_set: [v11, v48, v10, zero, v13, v50, v65, v12, v9, v39, v51]
// [Asm] move_origin: [v64]
// [Asm] defined: v48 is X
// [Asm] defs: [v49]
// [Asm] live_set: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm] move_origin: [v65]
// [Asm] defined: v49 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm] move_origin: [v50]
// [Asm] defs: []
// [Asm] live_set: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm] move_origin: [v51]
// [Asm] defs: []
// [Asm] live_set: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm] move_origin: []
// [Asm] defs: [v62]
// [Asm] live_set: [v62, v11, v10, zero, v13, v12, v9, v39]
// [Asm] move_origin: [v61]
// [Asm] defined: v62 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v27]
// [Asm] move_origin: [v26]
// [Asm] defined: v27 is X
// [Asm] defs: [v78]
// [Asm] live_set: [v11, v10, v13, zero, v78, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v78 is X
// [Asm] defs: [v126]
// [Asm] live_set: [v11, v10, v13, zero, v126, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v126 is X
// [Asm] defs: [v127]
// [Asm] live_set: [v11, v10, v127, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v127 is X
// [Asm] defs: [v80]
// [Asm] live_set: [v11, v10, v13, zero, v8, v80, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v80 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v80, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v10, v13, zero, a0, v8, v12, v9]
// [Asm] move_origin: [v80]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, v13, zero, a0, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v81]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v81 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v82]
// [Asm] live_set: [v11, v82, v10, v13, zero, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v82 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v82]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v89]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9, v89]
// [Asm] move_origin: []
// [Asm] defined: v89 is X
// [Asm] defs: [v90]
// [Asm] live_set: [v11, v10, v13, zero, v8, v90, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v90 is X
// [Asm] defs: [v113]
// [Asm] live_set: [v11, v10, v13, zero, v8, v90, v12, v9, v113]
// [Asm] move_origin: []
// [Asm] defined: v113 is X
// [Asm] defs: [v91]
// [Asm] live_set: [v11, v91, v10, v13, zero, v8, v90, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v91 is X
// [Asm] defs: [v92]
// [Asm] live_set: [v11, v10, v13, zero, v8, v92, v90, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v92 is X
// [Asm] defs: [v111]
// [Asm] live_set: [v11, v10, v13, zero, v8, v92, v111, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v111 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v94]
// [Asm] live_set: [v11, v94, v10, v13, zero, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v94 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v94]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v160]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v12, v160, v9]
// [Asm] move_origin: []
// [Asm] defined: v160 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v63]
// [Asm] live_set: [v11, v63, v10, zero, v13, v12, v9, v39]
// [Asm] move_origin: [v62]
// [Asm] defined: v63 is X
// [Asm] defs: [v142]
// [Asm] live_set: [v51, v11, v49, v48, v10, v142, v13, zero, v50, v12, v9, v54, v39]
// [Asm] move_origin: []
// [Asm] defined: v142 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v49, v48, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v25]
// [Asm] move_origin: [v8]
// [Asm] defined: v25 is X
// [Asm] defs: []
// [Asm] live_set: [v25]
// [Asm] move_origin: []
// [Asm] defs: [v32]
// [Asm] live_set: [v32]
// [Asm] move_origin: [v31]
// [Asm] defined: v32 is X
// [Asm] defs: []
// [Asm] live_set: [a5, zero, a0, a4, a2, a1, a3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a5, zero, a4, a2, a1, a3, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a5, zero, a4, a2, a3, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, a5, zero, a4, v4, a3, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, a5, zero, a4, v4, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, a5, zero, v4, v6, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: [a5]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v9]
// [Asm] move_origin: [v3]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero, v8, v7, v6, v9]
// [Asm] move_origin: [v4]
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v10, zero, v8, v7, v6, v9]
// [Asm] move_origin: [v5]
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v10, zero, v8, v7, v12, v9]
// [Asm] move_origin: [v6]
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v7]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm] move_origin: []
// [Asm] defs: [v30]
// [Asm] live_set: [v30]
// [Asm] move_origin: [v29]
// [Asm] defined: v30 is X
// [Asm] defs: [v70]
// [Asm] live_set: [v11, v10, v13, zero, v70, v12, v9]
// [Asm] move_origin: [v69]
// [Asm] defined: v70 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v103]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v66]
// [Asm] live_set: [v66, v11, v10, zero, v13, v12, v9, v39]
// [Asm] move_origin: [v48]
// [Asm] defined: v66 is X
// [Asm] defs: [v83]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v83, v9]
// [Asm] move_origin: []
// [Asm] defined: v83 is X
// [Asm] defs: [v84]
// [Asm] live_set: [v11, v10, v13, zero, v8, v84, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v84 is X
// [Asm] defs: [v120]
// [Asm] live_set: [v11, v10, v13, zero, v120, v8, v84, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v120 is X
// [Asm] defs: [v85]
// [Asm] live_set: [v11, v10, v13, zero, v8, v85, v84, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v85 is X
// [Asm] defs: [v86]
// [Asm] live_set: [v11, v10, v13, zero, v8, v84, v12, v86, v9]
// [Asm] move_origin: []
// [Asm] defined: v86 is X
// [Asm] defs: [v118]
// [Asm] live_set: [v11, v118, v10, v13, zero, v8, v12, v86, v9]
// [Asm] move_origin: []
// [Asm] defined: v118 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v88]
// [Asm] live_set: [v11, v10, v13, zero, v88, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v88 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v88]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v40]
// [Asm] live_set: [v11, v10, v13, v36, v37, v12, v9, v39, zero, v35, v38, v34, v40]
// [Asm] move_origin: []
// [Asm] defined: v40 is X
// [Asm] defs: [v150]
// [Asm] live_set: [v11, v10, v13, v36, v150, v37, v12, v9, v39, zero, v35, v38, v34]
// [Asm] move_origin: []
// [Asm] defined: v150 is X
// [Asm] defs: [v151]
// [Asm] live_set: [v11, v10, v13, v36, v37, v12, v9, v39, zero, v35, v151, v38, v34]
// [Asm] move_origin: []
// [Asm] defined: v151 is X
// [Asm] defs: [v42]
// [Asm] live_set: [v11, v10, v13, v42, v36, v37, v12, v9, v39, zero, v35, v38, v34]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v13, v36, v35, v37, v38, v12, v34, v9, v39]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v67]
// [Asm] live_set: [v11, v10, zero, v13, v67, v12, v9, v39]
// [Asm] move_origin: [v66]
// [Asm] defined: v67 is X
// [Asm] defs: [v71]
// [Asm] live_set: [v11, v71, v10, v13, zero, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v71 is X
// [Asm] defs: [v72]
// [Asm] live_set: [v11, v72, v10, v13, zero, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v72 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v72]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v162]
// [Asm] live_set: [v11, v162, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v162 is X
// [Asm] defs: [v163]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9, v163]
// [Asm] move_origin: []
// [Asm] defined: v163 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v161]
// [Asm] live_set: [v11, v16, v10, v161, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v161 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v31]
// [Asm] live_set: [v31]
// [Asm] move_origin: [v30]
// [Asm] defined: v31 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v28]
// [Asm] move_origin: [v27]
// [Asm] defined: v28 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v69]
// [Asm] live_set: [v11, v69, v10, v13, zero, v12, v9]
// [Asm] move_origin: [zero]
// [Asm] defined: v69 is X
// [Asm] defs: [v156]
// [Asm] live_set: [v11, v16, v10, v156, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v156 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm] move_origin: []
// [Asm] defs: [v103]
// [Asm] live_set: [v103]
// [Asm] move_origin: [v32]
// [Asm] defined: v103 is X
// [Asm] defs: [v48]
// [Asm] live_set: [v11, v48, v10, zero, v13, v35, v37, v12, v9, v39]
// [Asm] move_origin: [v47]
// [Asm] defined: v48 is X
// [Asm] defs: [v49]
// [Asm] live_set: [v11, v48, v49, v10, zero, v13, v35, v37, v12, v9, v39]
// [Asm] move_origin: [zero]
// [Asm] defined: v49 is X
// [Asm] defs: [v50]
// [Asm] live_set: [v11, v48, v49, v10, zero, v13, v50, v37, v12, v9, v39]
// [Asm] move_origin: [v35]
// [Asm] defined: v50 is X
// [Asm] defs: [v51]
// [Asm] live_set: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm] move_origin: [v37]
// [Asm] defined: v51 is X
// [Asm] defs: [v57]
// [Asm] live_set: [v11, v49, v10, zero, v13, v50, v12, v57, v9, v39, v51]
// [Asm] move_origin: []
// [Asm] defined: v57 is X
// [Asm] defs: [v48]
// [Asm] live_set: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm] move_origin: [v57]
// [Asm] defined: v48 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm] move_origin: [v49]
// [Asm] defs: []
// [Asm] live_set: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm] move_origin: [v50]
// [Asm] defs: []
// [Asm] live_set: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm] move_origin: [v51]
// [Asm] defs: []
// [Asm] live_set: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm] move_origin: []
// [Asm] defs: [v95]
// [Asm] live_set: [v11, v10, v13, zero, v8, v95, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v95 is X
// [Asm] defs: [v96]
// [Asm] live_set: [v11, v10, v96, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v96 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v98]
// [Asm] live_set: [v11, v10, v13, zero, v12, v9, v98]
// [Asm] move_origin: []
// [Asm] defined: v98 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v98]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v103]
// [Asm] live_set: [v103]
// [Asm] move_origin: [v8]
// [Asm] defined: v103 is X
// [Asm] defs: []
// [Asm] live_set: [v103]
// [Asm] move_origin: []
// [Asm] defs: [v47]
// [Asm] live_set: [v11, v10, zero, v13, v35, v47, v37, v12, v9, v39]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: [v59]
// [Asm] live_set: [v11, v10, v49, zero, v13, v50, v59, v12, v9, v39, v51]
// [Asm] move_origin: []
// [Asm] defined: v59 is X
// [Asm] defs: [v60]
// [Asm] live_set: [v51, v11, v10, zero, v13, v50, v59, v12, v9, v39, v60]
// [Asm] move_origin: []
// [Asm] defined: v60 is X
// [Asm] defs: [v48]
// [Asm] live_set: [v51, v11, v48, v10, zero, v13, v50, v12, v9, v39, v60]
// [Asm] move_origin: [v59]
// [Asm] defined: v48 is X
// [Asm] defs: [v49]
// [Asm] live_set: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm] move_origin: [v60]
// [Asm] defined: v49 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm] move_origin: [v50]
// [Asm] defs: []
// [Asm] live_set: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm] move_origin: [v51]
// [Asm] defs: []
// [Asm] live_set: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm] move_origin: []
// [Asm] defs: [v73]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9, v73]
// [Asm] move_origin: []
// [Asm] defined: v73 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9, v73]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, v13, zero, a0, v8, v12, v9, v73]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v74]
// [Asm] live_set: [v11, v10, v13, zero, v8, v74, v12, v9, v73]
// [Asm] move_origin: [a0]
// [Asm] defined: v74 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v74, v12, v9, v73]
// [Asm] move_origin: []
// [Asm] defs: [v131]
// [Asm] live_set: [v11, v10, v13, zero, v8, v74, v12, v131, v9]
// [Asm] move_origin: []
// [Asm] defined: v131 is X
// [Asm] defs: [v132]
// [Asm] live_set: [v11, v10, v13, zero, v8, v74, v12, v9, v132]
// [Asm] move_origin: []
// [Asm] defined: v132 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v77]
// [Asm] live_set: [v11, v10, v13, zero, v77, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v77 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v77]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v25]
// [Asm] move_origin: [v8]
// [Asm] defined: v25 is X
// [Asm] defs: [v155]
// [Asm] live_set: [v11, v155, v16, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v155 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v29]
// [Asm] live_set: [v29]
// [Asm] move_origin: [v28]
// [Asm] defined: v29 is X
// [Asm] defs: [v61]
// [Asm] live_set: [v11, v10, v13, zero, v61, v12, v9, v39]
// [Asm] move_origin: [v48]
// [Asm] defined: v61 is X
// [Asm] defs: [v34]
// [Asm] live_set: [v11, v10, zero, v13, v8, v12, v34, v9]
// [Asm] move_origin: [v9]
// [Asm] defined: v34 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v11, v10, zero, v13, v35, v8, v12, v34, v9]
// [Asm] move_origin: [v10]
// [Asm] defined: v35 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v11, v10, zero, v13, v35, v36, v12, v34, v9]
// [Asm] move_origin: [v8]
// [Asm] defined: v36 is X
// [Asm] defs: [v37]
// [Asm] live_set: [v11, v10, zero, v13, v35, v36, v37, v12, v34, v9]
// [Asm] move_origin: [v11]
// [Asm] defined: v37 is X
// [Asm] defs: [v38]
// [Asm] live_set: [v11, v10, zero, v13, v35, v36, v37, v38, v12, v34, v9]
// [Asm] move_origin: [v12]
// [Asm] defined: v38 is X
// [Asm] defs: [v39]
// [Asm] live_set: [v11, v10, zero, v13, v35, v36, v37, v38, v12, v34, v9, v39]
// [Asm] move_origin: [v13]
// [Asm] defined: v39 is X
// [Asm] defs: [v159]
// [Asm] live_set: [v11, v16, v10, v13, zero, v159, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v159 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v26]
// [Asm] live_set: [v26]
// [Asm] move_origin: [v25]
// [Asm] defined: v26 is X
// [Asm] defs: [v158]
// [Asm] live_set: [v11, v16, v10, v13, zero, v158, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v158 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v154]
// [Asm] live_set: [v16, v154, v8]
// [Asm] move_origin: []
// [Asm] defined: v154 is X
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v157]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v157, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v157 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v144]
// [Asm] live_set: [v51, v11, v48, v49, v10, zero, v13, v50, v12, v9, v144, v39]
// [Asm] move_origin: []
// [Asm] defined: v144 is X
// [Asm] defs: [v145]
// [Asm] live_set: [v51, v11, v48, v49, v10, zero, v13, v50, v12, v9, v145, v39]
// [Asm] move_origin: []
// [Asm] defined: v145 is X
// [Asm] defs: [v54]
// [Asm] live_set: [v51, v11, v48, v49, v10, zero, v13, v50, v12, v54, v9, v39]
// [Asm] move_origin: []
// [Asm] defined: v54 is X
// [Asm] defs: [v143]
// [Asm] live_set: [v51, v11, v48, v49, v10, zero, v13, v50, v12, v143, v54, v9, v39]
// [Asm] move_origin: []
// [Asm] defined: v143 is X
// [Asm] defs: []
// [Asm] live_set: [v51, v11, v48, v49, v10, zero, v13, v50, v12, v54, v9, v39]
// [Asm] move_origin: []
// [Asm] defs: [v66]
// [Asm] live_set: [v66, v11, v10, zero, v13, v12, v9, v39]
// [Asm] move_origin: [v63]
// [Asm] defined: v66 is X
// [Asm] defs: []
// [Asm] live_set: [v66, v11, v10, zero, v13, v12, v9, v39]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux40.180l4_3"];
// [Asm]   r0 [label="v44 ← a0", color=green];
// [Asm]   r46 [label="v90 ← a0", color=green];
// [Asm]   r33 [label="v49 ← a0", color=green];
// [Asm]   r59 [label="v2 ← a0", color=green];
// [Asm]   r76 [label="v150 ← a0", color=green];
// [Asm]   r9 [label="zero", color=blue];
// [Asm]   r26 [label="v45 ← a0", color=green];
// [Asm]   r86 [label="v28 ← a0", color=green];
// [Asm]   r44 [label="v82 ← a0", color=green];
// [Asm]   r53 [label="v16 ← a1", color=green];
// [Asm]   r56 [label="v54 ← a5", color=green];
// [Asm]   r10 [label="v35 ← s1", color=green];
// [Asm]   r111 [label="v145 ← a4", color=green];
// [Asm]   r5 [label="v37 ← s0", color=green];
// [Asm]   r54 [label="v63 ← a0", color=green];
// [Asm]   r24 [label="a6", color=blue];
// [Asm]   r43 [label="v81 ← a0", color=green];
// [Asm]   r80 [label="v71 ← a0", color=green];
// [Asm]   r88 [label="v156 ← a0", color=green];
// [Asm]   r31 [label="v64 ← a1", color=green];
// [Asm]   r99 [label="v131 ← a1", color=green];
// [Asm]   r39 [label="v78 ← a0", color=green];
// [Asm]   r17 [label="a4", color=blue];
// [Asm]   r52 [label="v160 ← a0", color=green];
// [Asm]   r65 [label="v30 ← a0", color=green];
// [Asm]   r79 [label="v67 ← a0", color=green];
// [Asm]   r20 [label="t1", color=blue];
// [Asm]   r61 [label="v4 ← a2", color=green];
// [Asm]   r23 [label="t4", color=blue];
// [Asm]   r3 [label="v13 ← s2", color=green];
// [Asm]   r108 [label="v154 ← a0", color=green];
// [Asm]   r82 [label="v162 ← a0", color=green];
// [Asm]   r67 [label="v66 ← a0", color=green];
// [Asm]   r27 [label="v99 ← a0", color=green];
// [Asm]   r75 [label="v40 ← a0", color=green];
// [Asm]   r77 [label="v151 ← a0", color=green];
// [Asm]   r62 [label="v5 ← a3", color=green];
// [Asm]   r40 [label="v126 ← a0", color=green];
// [Asm]   r11 [label="v38 ← s4", color=green];
// [Asm]   r58 [label="v32 ← a0", color=green];
// [Asm]   r110 [label="v144 ← a4", color=green];
// [Asm]   r34 [label="v50 ← a2", color=green];
// [Asm]   r105 [label="v159 ← a0", color=green];
// [Asm]   r83 [label="v163 ← a0", color=green];
// [Asm]   r103 [label="v29 ← a0", color=green];
// [Asm]   r14 [label="a1", color=blue];
// [Asm]   r96 [label="v60 ← a0", color=green];
// [Asm]   r51 [label="v94 ← a0", color=green];
// [Asm]   r78 [label="v42 ← a0", color=green];
// [Asm]   r55 [label="v142 ← a4", color=green];
// [Asm]   r16 [label="a3", color=blue];
// [Asm]   r21 [label="t2", color=blue];
// [Asm]   r60 [label="v3 ← a1", color=green];
// [Asm]   r73 [label="v118 ← a0", color=green];
// [Asm]   r93 [label="v98 ← a0", color=green];
// [Asm]   r38 [label="v27 ← a0", color=green];
// [Asm]   r72 [label="v86 ← a1", color=green];
// [Asm]   r104 [label="v61 ← a0", color=green];
// [Asm]   r87 [label="v69 ← a0", color=green];
// [Asm]   r100 [label="v132 ← a1", color=green];
// [Asm]   r85 [label="v31 ← a0", color=green];
// [Asm]   r47 [label="v113 ← a1", color=green];
// [Asm]   r6 [label="v12 ← s4", color=green];
// [Asm]   r13 [label="a0", color=blue];
// [Asm]   r42 [label="v80 ← a0", color=green];
// [Asm]   r4 [label="v36 ← s3", color=green];
// [Asm]   r95 [label="v59 ← a1", color=green];
// [Asm]   r29 [label="v100 ← a0", color=green];
// [Asm]   r35 [label="v65 ← a0", color=green];
// [Asm]   r7 [label="v9 ← s5", color=green];
// [Asm]   r64 [label="v7 ← a5", color=green];
// [Asm]   r8 [label="v39 ← s2", color=green];
// [Asm]   r36 [label="v48 ← a1", color=green];
// [Asm]   r112 [label="v143 ← a4", color=green];
// [Asm]   r66 [label="v70 ← a0", color=green];
// [Asm]   r15 [label="a2", color=blue];
// [Asm]   r32 [label="v51 ← a3", color=green];
// [Asm]   r49 [label="v92 ← a1", color=green];
// [Asm]   r57 [label="v25 ← a0", color=green];
// [Asm]   r74 [label="v88 ← a0", color=green];
// [Asm]   r68 [label="v83 ← a0", color=green];
// [Asm]   r98 [label="v74 ← a0", color=green];
// [Asm]   r91 [label="v95 ← a0", color=green];
// [Asm]   r70 [label="v120 ← a1", color=green];
// [Asm]   r12 [label="v34 ← s5", color=green];
// [Asm]   r48 [label="v91 ← a1", color=green];
// [Asm]   r37 [label="v62 ← a0", color=green];
// [Asm]   r102 [label="v155 ← a0", color=green];
// [Asm]   r106 [label="v26 ← a0", color=green];
// [Asm]   r109 [label="v157 ← a0", color=green];
// [Asm]   r1 [label="v11 ← s0", color=green];
// [Asm]   r28 [label="v8 ← s3", color=green];
// [Asm]   r41 [label="v127 ← a0", color=green];
// [Asm]   r71 [label="v85 ← a1", color=green];
// [Asm]   r69 [label="v84 ← a0", color=green];
// [Asm]   r22 [label="t3", color=blue];
// [Asm]   r84 [label="v161 ← a0", color=green];
// [Asm]   r50 [label="v111 ← a0", color=green];
// [Asm]   r89 [label="v103 ← a0", color=green];
// [Asm]   r30 [label="v102 ← a0", color=green];
// [Asm]   r92 [label="v96 ← a0", color=green];
// [Asm]   r45 [label="v89 ← a0", color=green];
// [Asm]   r107 [label="v158 ← a0", color=green];
// [Asm]   r25 [label="a7", color=blue];
// [Asm]   r63 [label="v6 ← a4", color=green];
// [Asm]   r2 [label="v10 ← s1", color=green];
// [Asm]   r18 [label="a5", color=blue];
// [Asm]   r19 [label="t0", color=blue];
// [Asm]   r90 [label="v57 ← a1", color=green];
// [Asm]   r97 [label="v73 ← s6", color=green];
// [Asm]   r81 [label="v72 ← a0", color=green];
// [Asm]   r101 [label="v77 ← a0", color=green];
// [Asm]   r94 [label="v47 ← a0", color=green];
// [Asm]   r32 -- r55;
// [Asm]   r9 -- r101;
// [Asm]   r12 -- r25;
// [Asm]   r6 -- r102;
// [Asm]   r7 -- r112;
// [Asm]   r6 -- r70;
// [Asm]   r2 -- r78;
// [Asm]   r6 -- r48;
// [Asm]   r11 -- r78;
// [Asm]   r9 -- r107;
// [Asm]   r8 -- r36;
// [Asm]   r6 -- r68;
// [Asm]   r69 -- r72;
// [Asm]   r6 -- r88;
// [Asm]   r3 -- r9;
// [Asm]   r2 -- r91;
// [Asm]   r9 -- r78;
// [Asm]   r7 -- r78;
// [Asm]   r3 -- r107;
// [Asm]   r2 -- r51;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r70;
// [Asm]   r28 -- r92;
// [Asm]   r3 -- r31;
// [Asm]   r7 -- r62;
// [Asm]   r2 -- r41;
// [Asm]   r7 -- r32;
// [Asm]   r1 -- r68;
// [Asm]   r9 -- r73;
// [Asm]   r9 -- r14;
// [Asm]   r3 -- r48;
// [Asm]   r0 -- r6;
// [Asm]   r28 -- r91;
// [Asm]   r1 -- r112;
// [Asm]   r6 -- r69;
// [Asm]   r9 -- r62;
// [Asm]   r8 -- r95;
// [Asm]   r32 -- r35;
// [Asm]   r61 -- r62;
// [Asm]   r28 -- r108;
// [Asm]   r62 -- r64;
// [Asm]   r8 -- r16;
// [Asm]   r2 -- r48;
// [Asm]   r10 -- r18;
// [Asm]   r53 -- r108;
// [Asm]   r1 -- r2;
// [Asm]   r32 -- r95;
// [Asm]   r97 -- r98;
// [Asm]   r1 -- r11;
// [Asm]   r12 -- r23;
// [Asm]   r32 -- r34;
// [Asm]   r2 -- r98;
// [Asm]   r1 -- r35;
// [Asm]   r6 -- r56;
// [Asm]   r9 -- r39;
// [Asm]   r2 -- r69;
// [Asm]   r18 -- r63;
// [Asm]   r28 -- r50;
// [Asm]   r28 -- r70;
// [Asm]   r6 -- r25;
// [Asm]   r59 -- r61;
// [Asm]   r7 -- r44;
// [Asm]   r2 -- r73;
// [Asm]   r10 -- r94;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r55;
// [Asm]   r21 -- r28;
// [Asm]   r72 -- r73;
// [Asm]   r1 -- r105;
// [Asm]   r3 -- r104;
// [Asm]   r2 -- r50;
// [Asm]   r5 -- r19;
// [Asm]   r6 -- r46;
// [Asm]   r9 -- r76;
// [Asm]   r9 -- r30;
// [Asm]   r34 -- r111;
// [Asm]   r3 -- r83;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r21 -- r97;
// [Asm]   r5 -- r11;
// [Asm]   r9 -- r84;
// [Asm]   r25 -- r97;
// [Asm]   r16 -- r18;
// [Asm]   r7 -- r75;
// [Asm]   r28 -- r63;
// [Asm]   r9 -- r99;
// [Asm]   r9 -- r102;
// [Asm]   r9 -- r11;
// [Asm]   r9 -- r83;
// [Asm]   r6 -- r105;
// [Asm]   r2 -- r14;
// [Asm]   r3 -- r99;
// [Asm]   r9 -- r63;
// [Asm]   r28 -- r102;
// [Asm]   r28 -- r41;
// [Asm]   r10 -- r15;
// [Asm]   r9 -- r24;
// [Asm]   r8 -- r35;
// [Asm]   r8 -- r18;
// [Asm]   r9 -- r36;
// [Asm]   r7 -- r36;
// [Asm]   r1 -- r72;
// [Asm]   r1 -- r99;
// [Asm]   r4 -- r7;
// [Asm]   r12 -- r16;
// [Asm]   r9 -- r46;
// [Asm]   r12 -- r17;
// [Asm]   r3 -- r23;
// [Asm]   r7 -- r46;
// [Asm]   r1 -- r24;
// [Asm]   r9 -- r21;
// [Asm]   r5 -- r12;
// [Asm]   r6 -- r95;
// [Asm]   r2 -- r45;
// [Asm]   r9 -- r25;
// [Asm]   r2 -- r15;
// [Asm]   r32 -- r90;
// [Asm]   r5 -- r8;
// [Asm]   r28 -- r100;
// [Asm]   r33 -- r95;
// [Asm]   r69 -- r70;
// [Asm]   r3 -- r112;
// [Asm]   r6 -- r66;
// [Asm]   r3 -- r56;
// [Asm]   r7 -- r56;
// [Asm]   r7 -- r77;
// [Asm]   r17 -- r61;
// [Asm]   r1 -- r10;
// [Asm]   r10 -- r19;
// [Asm]   r3 -- r32;
// [Asm]   r6 -- r54;
// [Asm]   r18 -- r97;
// [Asm]   r1 -- r17;
// [Asm]   r9 -- r31;
// [Asm]   r9 -- r45;
// [Asm]   r4 -- r78;
// [Asm]   r11 -- r24;
// [Asm]   r4 -- r22;
// [Asm]   r9 -- r41;
// [Asm]   r3 -- r18;
// [Asm]   r6 -- r77;
// [Asm]   r32 -- r56;
// [Asm]   r1 -- r70;
// [Asm]   r1 -- r31;
// [Asm]   r98 -- r99;
// [Asm]   r14 -- r28;
// [Asm]   r1 -- r87;
// [Asm]   r3 -- r97;
// [Asm]   r6 -- r96;
// [Asm]   r7 -- r93;
// [Asm]   r2 -- r46;
// [Asm]   r6 -- r18;
// [Asm]   r7 -- r63;
// [Asm]   r8 -- r78;
// [Asm]   r8 -- r94;
// [Asm]   r3 -- r40;
// [Asm]   r17 -- r59;
// [Asm]   r9 -- r59;
// [Asm]   r61 -- r63;
// [Asm]   r3 -- r69;
// [Asm]   r3 -- r27;
// [Asm]   r2 -- r97;
// [Asm]   r13 -- r18;
// [Asm]   r3 -- r95;
// [Asm]   r5 -- r7;
// [Asm]   r13 -- r22;
// [Asm]   r0 -- r11;
// [Asm]   r8 -- r11;
// [Asm]   r10 -- r25;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r110;
// [Asm]   r55 -- r56;
// [Asm]   r6 -- r32;
// [Asm]   r11 -- r25;
// [Asm]   r10 -- r17;
// [Asm]   r2 -- r72;
// [Asm]   r13 -- r24;
// [Asm]   r9 -- r98;
// [Asm]   r9 -- r60;
// [Asm]   r7 -- r111;
// [Asm]   r7 -- r88;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r23;
// [Asm]   r5 -- r23;
// [Asm]   r9 -- r29;
// [Asm]   r46 -- r47;
// [Asm]   r7 -- r99;
// [Asm]   r7 -- r71;
// [Asm]   r4 -- r20;
// [Asm]   r6 -- r16;
// [Asm]   r1 -- r66;
// [Asm]   r9 -- r67;
// [Asm]   r8 -- r110;
// [Asm]   r1 -- r39;
// [Asm]   r9 -- r44;
// [Asm]   r2 -- r63;
// [Asm]   r28 -- r88;
// [Asm]   r8 -- r54;
// [Asm]   r7 -- r37;
// [Asm]   r9 -- r112;
// [Asm]   r4 -- r11;
// [Asm]   r28 -- r47;
// [Asm]   r6 -- r112;
// [Asm]   r3 -- r84;
// [Asm]   r15 -- r17;
// [Asm]   r36 -- r111;
// [Asm]   r7 -- r33;
// [Asm]   r8 -- r67;
// [Asm]   r2 -- r104;
// [Asm]   r34 -- r36;
// [Asm]   r10 -- r23;
// [Asm]   r3 -- r55;
// [Asm]   r28 -- r48;
// [Asm]   r1 -- r83;
// [Asm]   r60 -- r61;
// [Asm]   r6 -- r82;
// [Asm]   r1 -- r84;
// [Asm]   r9 -- r16;
// [Asm]   r1 -- r73;
// [Asm]   r2 -- r71;
// [Asm]   r9 -- r19;
// [Asm]   r7 -- r50;
// [Asm]   r16 -- r97;
// [Asm]   r7 -- r68;
// [Asm]   r0 -- r7;
// [Asm]   r3 -- r109;
// [Asm]   r2 -- r110;
// [Asm]   r7 -- r69;
// [Asm]   r9 -- r54;
// [Asm]   r5 -- r76;
// [Asm]   r10 -- r21;
// [Asm]   r12 -- r18;
// [Asm]   r1 -- r93;
// [Asm]   r3 -- r44;
// [Asm]   r8 -- r31;
// [Asm]   r6 -- r81;
// [Asm]   r7 -- r51;
// [Asm]   r3 -- r91;
// [Asm]   r1 -- r90;
// [Asm]   r5 -- r21;
// [Asm]   r53 -- r109;
// [Asm]   r5 -- r33;
// [Asm]   r14 -- r97;
// [Asm]   r1 -- r30;
// [Asm]   r7 -- r97;
// [Asm]   r28 -- r71;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r2 -- r81;
// [Asm]   r5 -- r22;
// [Asm]   r6 -- r100;
// [Asm]   r7 -- r84;
// [Asm]   r1 -- r45;
// [Asm]   r1 -- r52;
// [Asm]   r11 -- r18;
// [Asm]   r33 -- r90;
// [Asm]   r6 -- r101;
// [Asm]   r9 -- r68;
// [Asm]   r3 -- r5;
// [Asm]   r28 -- r72;
// [Asm]   r8 -- r12;
// [Asm]   r8 -- r24;
// [Asm]   r17 -- r60;
// [Asm]   r3 -- r92;
// [Asm]   r8 -- r75;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r83;
// [Asm]   r10 -- r12;
// [Asm]   r1 -- r77;
// [Asm]   r2 -- r67;
// [Asm]   r28 -- r83;
// [Asm]   r9 -- r100;
// [Asm]   r0 -- r1;
// [Asm]   r9 -- r20;
// [Asm]   r9 -- r74;
// [Asm]   r4 -- r25;
// [Asm]   r3 -- r49;
// [Asm]   r2 -- r36;
// [Asm]   r8 -- r111;
// [Asm]   r1 -- r80;
// [Asm]   r6 -- r55;
// [Asm]   r12 -- r21;
// [Asm]   r7 -- r42;
// [Asm]   r6 -- r23;
// [Asm]   r34 -- r112;
// [Asm]   r4 -- r14;
// [Asm]   r3 -- r46;
// [Asm]   r7 -- r67;
// [Asm]   r14 -- r15;
// [Asm]   r1 -- r111;
// [Asm]   r3 -- r45;
// [Asm]   r13 -- r15;
// [Asm]   r2 -- r26;
// [Asm]   r1 -- r43;
// [Asm]   r4 -- r23;
// [Asm]   r1 -- r34;
// [Asm]   r7 -- r24;
// [Asm]   r9 -- r91;
// [Asm]   r6 -- r33;
// [Asm]   r15 -- r59;
// [Asm]   r9 -- r94;
// [Asm]   r8 -- r9;
// [Asm]   r28 -- r68;
// [Asm]   r9 -- r110;
// [Asm]   r33 -- r36;
// [Asm]   r2 -- r88;
// [Asm]   r2 -- r80;
// [Asm]   r28 -- r45;
// [Asm]   r6 -- r22;
// [Asm]   r34 -- r90;
// [Asm]   r2 -- r44;
// [Asm]   r6 -- r27;
// [Asm]   r2 -- r40;
// [Asm]   r12 -- r20;
// [Asm]   r4 -- r15;
// [Asm]   r9 -- r70;
// [Asm]   r12 -- r13;
// [Asm]   r32 -- r33;
// [Asm]   r1 -- r81;
// [Asm]   r13 -- r23;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r3;
// [Asm]   r1 -- r94;
// [Asm]   r22 -- r28;
// [Asm]   r7 -- r15;
// [Asm]   r6 -- r87;
// [Asm]   r7 -- r41;
// [Asm]   r2 -- r30;
// [Asm]   r20 -- r28;
// [Asm]   r7 -- r16;
// [Asm]   r9 -- r48;
// [Asm]   r7 -- r18;
// [Asm]   r7 -- r14;
// [Asm]   r1 -- r54;
// [Asm]   r28 -- r43;
// [Asm]   r9 -- r81;
// [Asm]   r46 -- r49;
// [Asm]   r2 -- r39;
// [Asm]   r6 -- r71;
// [Asm]   r6 -- r21;
// [Asm]   r2 -- r94;
// [Asm]   r1 -- r12;
// [Asm]   r6 -- r47;
// [Asm]   r14 -- r16;
// [Asm]   r33 -- r112;
// [Asm]   r7 -- r40;
// [Asm]   r10 -- r26;
// [Asm]   r2 -- r95;
// [Asm]   r3 -- r100;
// [Asm]   r1 -- r4;
// [Asm]   r8 -- r90;
// [Asm]   r7 -- r100;
// [Asm]   r1 -- r18;
// [Asm]   r7 -- r109;
// [Asm]   r9 -- r111;
// [Asm]   r1 -- r69;
// [Asm]   r6 -- r109;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r111;
// [Asm]   r3 -- r24;
// [Asm]   r34 -- r110;
// [Asm]   r3 -- r51;
// [Asm]   r3 -- r34;
// [Asm]   r16 -- r17;
// [Asm]   r2 -- r74;
// [Asm]   r9 -- r18;
// [Asm]   r1 -- r46;
// [Asm]   r15 -- r18;
// [Asm]   r7 -- r34;
// [Asm]   r7 -- r55;
// [Asm]   r53 -- r107;
// [Asm]   r8 -- r37;
// [Asm]   r7 -- r10;
// [Asm]   r2 -- r47;
// [Asm]   r3 -- r80;
// [Asm]   r6 -- r94;
// [Asm]   r3 -- r82;
// [Asm]   r7 -- r70;
// [Asm]   r98 -- r100;
// [Asm]   r1 -- r27;
// [Asm]   r2 -- r79;
// [Asm]   r28 -- r29;
// [Asm]   r7 -- r98;
// [Asm]   r7 -- r61;
// [Asm]   r3 -- r102;
// [Asm]   r8 -- r22;
// [Asm]   r8 -- r21;
// [Asm]   r4 -- r8;
// [Asm]   r1 -- r49;
// [Asm]   r8 -- r96;
// [Asm]   r53 -- r84;
// [Asm]   r7 -- r96;
// [Asm]   r2 -- r24;
// [Asm]   r8 -- r14;
// [Asm]   r15 -- r28;
// [Asm]   r28 -- r60;
// [Asm]   r7 -- r64;
// [Asm]   r2 -- r70;
// [Asm]   r2 -- r87;
// [Asm]   r35 -- r36;
// [Asm]   r9 -- r72;
// [Asm]   r18 -- r61;
// [Asm]   r28 -- r40;
// [Asm]   r16 -- r61;
// [Asm]   r17 -- r18;
// [Asm]   r4 -- r24;
// [Asm]   r17 -- r62;
// [Asm]   r6 -- r15;
// [Asm]   r14 -- r17;
// [Asm]   r9 -- r35;
// [Asm]   r9 -- r15;
// [Asm]   r15 -- r60;
// [Asm]   r6 -- r44;
// [Asm]   r5 -- r77;
// [Asm]   r12 -- r15;
// [Asm]   r62 -- r63;
// [Asm]   r7 -- r26;
// [Asm]   r3 -- r12;
// [Asm]   r16 -- r60;
// [Asm]   r6 -- r79;
// [Asm]   r6 -- r51;
// [Asm]   r28 -- r52;
// [Asm]   r1 -- r78;
// [Asm]   r9 -- r42;
// [Asm]   r3 -- r28;
// [Asm]   r20 -- r97;
// [Asm]   r32 -- r111;
// [Asm]   r7 -- r9;
// [Asm]   r6 -- r40;
// [Asm]   r34 -- r96;
// [Asm]   r1 -- r28;
// [Asm]   r7 -- r66;
// [Asm]   r7 -- r28;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r34;
// [Asm]   r3 -- r111;
// [Asm]   r9 -- r80;
// [Asm]   r7 -- r92;
// [Asm]   r8 -- r13;
// [Asm]   r2 -- r56;
// [Asm]   r23 -- r28;
// [Asm]   r6 -- r42;
// [Asm]   r3 -- r81;
// [Asm]   r2 -- r109;
// [Asm]   r3 -- r75;
// [Asm]   r28 -- r62;
// [Asm]   r7 -- r31;
// [Asm]   r4 -- r77;
// [Asm]   r4 -- r17;
// [Asm]   r1 -- r36;
// [Asm]   r24 -- r97;
// [Asm]   r6 -- r111;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r10 -- r24;
// [Asm]   r17 -- r28;
// [Asm]   r12 -- r26;
// [Asm]   r10 -- r14;
// [Asm]   r3 -- r52;
// [Asm]   r2 -- r31;
// [Asm]   r36 -- r112;
// [Asm]   r9 -- r53;
// [Asm]   r1 -- r26;
// [Asm]   r6 -- r75;
// [Asm]   r3 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r8 -- r104;
// [Asm]   r3 -- r53;
// [Asm]   r2 -- r49;
// [Asm]   r19 -- r97;
// [Asm]   r7 -- r25;
// [Asm]   r7 -- r72;
// [Asm]   r6 -- r84;
// [Asm]   r22 -- r97;
// [Asm]   r3 -- r11;
// [Asm]   r9 -- r26;
// [Asm]   r1 -- r102;
// [Asm]   r27 -- r28;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r42;
// [Asm]   r7 -- r35;
// [Asm]   r1 -- r50;
// [Asm]   r11 -- r19;
// [Asm]   r9 -- r82;
// [Asm]   r31 -- r35;
// [Asm]   r8 -- r34;
// [Asm]   r9 -- r56;
// [Asm]   r60 -- r64;
// [Asm]   r18 -- r59;
// [Asm]   r9 -- r88;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r112;
// [Asm]   r9 -- r75;
// [Asm]   r56 -- r112;
// [Asm]   r5 -- r6;
// [Asm]   r1 -- r48;
// [Asm]   r9 -- r66;
// [Asm]   r1 -- r64;
// [Asm]   r7 -- r79;
// [Asm]   r59 -- r60;
// [Asm]   r3 -- r74;
// [Asm]   r3 -- r39;
// [Asm]   r10 -- r33;
// [Asm]   r69 -- r71;
// [Asm]   r34 -- r56;
// [Asm]   r6 -- r104;
// [Asm]   r9 -- r12;
// [Asm]   r8 -- r23;
// [Asm]   r1 -- r107;
// [Asm]   r10 -- r22;
// [Asm]   r3 -- r71;
// [Asm]   r3 -- r33;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r1 -- r51;
// [Asm]   r3 -- r17;
// [Asm]   r53 -- r88;
// [Asm]   r14 -- r59;
// [Asm]   r6 -- r72;
// [Asm]   r11 -- r15;
// [Asm]   r6 -- r50;
// [Asm]   r1 -- r41;
// [Asm]   r2 -- r96;
// [Asm]   r3 -- r35;
// [Asm]   r2 -- r22;
// [Asm]   r8 -- r32;
// [Asm]   r28 -- r109;
// [Asm]   r5 -- r36;
// [Asm]   r3 -- r94;
// [Asm]   r4 -- r13;
// [Asm]   r8 -- r112;
// [Asm]   r18 -- r60;
// [Asm]   r3 -- r25;
// [Asm]   r3 -- r110;
// [Asm]   r4 -- r76;
// [Asm]   r34 -- r35;
// [Asm]   r1 -- r109;
// [Asm]   r6 -- r41;
// [Asm]   r1 -- r75;
// [Asm]   r9 -- r40;
// [Asm]   r9 -- r93;
// [Asm]   r6 -- r98;
// [Asm]   r2 -- r84;
// [Asm]   r3 -- r105;
// [Asm]   r7 -- r20;
// [Asm]   r13 -- r16;
// [Asm]   r9 -- r61;
// [Asm]   r8 -- r76;
// [Asm]   r6 -- r53;
// [Asm]   r11 -- r23;
// [Asm]   r8 -- r25;
// [Asm]   r13 -- r19;
// [Asm]   r28 -- r49;
// [Asm]   r10 -- r16;
// [Asm]   r3 -- r22;
// [Asm]   r23 -- r97;
// [Asm]   r6 -- r19;
// [Asm]   r7 -- r22;
// [Asm]   r7 -- r19;
// [Asm]   r1 -- r79;
// [Asm]   r1 -- r97;
// [Asm]   r13 -- r14;
// [Asm]   r12 -- r22;
// [Asm]   r3 -- r29;
// [Asm]   r36 -- r56;
// [Asm]   r3 -- r66;
// [Asm]   r1 -- r95;
// [Asm]   r7 -- r104;
// [Asm]   r36 -- r110;
// [Asm]   r6 -- r39;
// [Asm]   r2 -- r75;
// [Asm]   r5 -- r25;
// [Asm]   r10 -- r36;
// [Asm]   r2 -- r93;
// [Asm]   r31 -- r33;
// [Asm]   r6 -- r74;
// [Asm]   r4 -- r10;
// [Asm]   r9 -- r109;
// [Asm]   r2 -- r27;
// [Asm]   r1 -- r42;
// [Asm]   r6 -- r52;
// [Asm]   r25 -- r28;
// [Asm]   r2 -- r62;
// [Asm]   r3 -- r67;
// [Asm]   r6 -- r36;
// [Asm]   r1 -- r37;
// [Asm]   r1 -- r98;
// [Asm]   r1 -- r19;
// [Asm]   r28 -- r61;
// [Asm]   r1 -- r88;
// [Asm]   r10 -- r13;
// [Asm]   r2 -- r16;
// [Asm]   r13 -- r28;
// [Asm]   r1 -- r67;
// [Asm]   r8 -- r79;
// [Asm]   r2 -- r101;
// [Asm]   r2 -- r92;
// [Asm]   r2 -- r54;
// [Asm]   r2 -- r68;
// [Asm]   r10 -- r20;
// [Asm]   r28 -- r97;
// [Asm]   r3 -- r30;
// [Asm]   r32 -- r110;
// [Asm]   r12 -- r28;
// [Asm]   r9 -- r28;
// [Asm]   r8 -- r77;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r43;
// [Asm]   r6 -- r10;
// [Asm]   r3 -- r10;
// [Asm]   r7 -- r95;
// [Asm]   r60 -- r62;
// [Asm]   r4 -- r12;
// [Asm]   r10 -- r75;
// [Asm]   r7 -- r105;
// [Asm]   r7 -- r102;
// [Asm]   r59 -- r64;
// [Asm]   r1 -- r6;
// [Asm]   r32 -- r96;
// [Asm]   r7 -- r54;
// [Asm]   r12 -- r78;
// [Asm]   r9 -- r95;
// [Asm]   r9 -- r47;
// [Asm]   r2 -- r23;
// [Asm]   r9 -- r104;
// [Asm]   r7 -- r82;
// [Asm]   r6 -- r92;
// [Asm]   r28 -- r82;
// [Asm]   r4 -- r16;
// [Asm]   r7 -- r52;
// [Asm]   r6 -- r110;
// [Asm]   r4 -- r5;
// [Asm]   r8 -- r56;
// [Asm]   r6 -- r49;
// [Asm]   r1 -- r53;
// [Asm]   r8 -- r19;
// [Asm]   r3 -- r87;
// [Asm]   r1 -- r15;
// [Asm]   r3 -- r47;
// [Asm]   r2 -- r55;
// [Asm]   r16 -- r28;
// [Asm]   r6 -- r12;
// [Asm]   r13 -- r25;
// [Asm]   r7 -- r81;
// [Asm]   r6 -- r24;
// [Asm]   r28 -- r53;
// [Asm]   r9 -- r51;
// [Asm]   r7 -- r73;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r53 -- r102;
// [Asm]   r6 -- r37;
// [Asm]   r10 -- r28;
// [Asm]   r9 -- r34;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r28 -- r105;
// [Asm]   r9 -- r33;
// [Asm]   r0 -- r8;
// [Asm]   r6 -- r28;
// [Asm]   r9 -- r69;
// [Asm]   r1 -- r74;
// [Asm]   r7 -- r47;
// [Asm]   r6 -- r67;
// [Asm]   r7 -- r11;
// [Asm]   r6 -- r90;
// [Asm]   r9 -- r37;
// [Asm]   r7 -- r39;
// [Asm]   r7 -- r43;
// [Asm]   r11 -- r26;
// [Asm]   r2 -- r100;
// [Asm]   r9 -- r32;
// [Asm]   r0 -- r12;
// [Asm]   r3 -- r36;
// [Asm]   r12 -- r14;
// [Asm]   r31 -- r32;
// [Asm]   r3 -- r54;
// [Asm]   r3 -- r93;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r92;
// [Asm]   r1 -- r82;
// [Asm]   r49 -- r50;
// [Asm]   r9 -- r50;
// [Asm]   r33 -- r56;
// [Asm]   r11 -- r21;
// [Asm]   r2 -- r64;
// [Asm]   r4 -- r19;
// [Asm]   r52 -- r53;
// [Asm]   r4 -- r75;
// [Asm]   r2 -- r32;
// [Asm]   r32 -- r36;
// [Asm]   r11 -- r76;
// [Asm]   r6 -- r73;
// [Asm]   r3 -- r98;
// [Asm]   r28 -- r46;
// [Asm]   r6 -- r35;
// [Asm]   r12 -- r77;
// [Asm]   r9 -- r79;
// [Asm]   r11 -- r14;
// [Asm]   r5 -- r17;
// [Asm]   r3 -- r42;
// [Asm]   r2 -- r43;
// [Asm]   r5 -- r18;
// [Asm]   r2 -- r99;
// [Asm]   r3 -- r37;
// [Asm]   r33 -- r110;
// [Asm]   r2 -- r37;
// [Asm]   r9 -- r17;
// [Asm]   r1 -- r33;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r68;
// [Asm]   r9 -- r49;
// [Asm]   r7 -- r27;
// [Asm]   r7 -- r91;
// [Asm]   r2 -- r34;
// [Asm]   r18 -- r28;
// [Asm]   r34 -- r95;
// [Asm]   r28 -- r39;
// [Asm]   r3 -- r78;
// [Asm]   r2 -- r6;
// [Asm]   r6 -- r80;
// [Asm]   r6 -- r91;
// [Asm]   r11 -- r13;
// [Asm]   r0 -- r9;
// [Asm]   r9 -- r23;
// [Asm]   r5 -- r78;
// [Asm]   r7 -- r94;
// [Asm]   r28 -- r98;
// [Asm]   r1 -- r40;
// [Asm]   r2 -- r12;
// [Asm]   r6 -- r83;
// [Asm]   r0 -- r10;
// [Asm]   r6 -- r64;
// [Asm]   r15 -- r97;
// [Asm]   r7 -- r80;
// [Asm]   r0 -- r4;
// [Asm]   r6 -- r76;
// [Asm]   r7 -- r76;
// [Asm]   r17 -- r97;
// [Asm]   r3 -- r19;
// [Asm]   r53 -- r105;
// [Asm]   r7 -- r29;
// [Asm]   r11 -- r20;
// [Asm]   r11 -- r77;
// [Asm]   r3 -- r101;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r47;
// [Asm]   r2 -- r90;
// [Asm]   r11 -- r16;
// [Asm]   r6 -- r30;
// [Asm]   r1 -- r22;
// [Asm]   r2 -- r52;
// [Asm]   r11 -- r12;
// [Asm]   r7 -- r107;
// [Asm]   r1 -- r13;
// [Asm]   r9 -- r64;
// [Asm]   r18 -- r62;
// [Asm]   r7 -- r74;
// [Asm]   r11 -- r22;
// [Asm]   r1 -- r104;
// [Asm]   r7 -- r48;
// [Asm]   r7 -- r49;
// [Asm]   r8 -- r20;
// [Asm]   r28 -- r69;
// [Asm]   r24 -- r28;
// [Asm]   r6 -- r99;
// [Asm]   r6 -- r20;
// [Asm]   r9 -- r52;
// [Asm]   r3 -- r50;
// [Asm]   r7 -- r17;
// [Asm]   r2 -- r107;
// [Asm]   r19 -- r28;
// [Asm]   r9 -- r97;
// [Asm]   r2 -- r102;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r9;
// [Asm]   r28 -- r42;
// [Asm]   r12 -- r76;
// [Asm]   r1 -- r29;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r2 -- r77;
// [Asm]   r33 -- r111;
// [Asm]   r0 -- r5;
// [Asm]   r13 -- r17;
// [Asm]   r1 -- r25;
// [Asm]   r5 -- r94;
// [Asm]   r2 -- r17;
// [Asm]   r8 -- r10;
// [Asm]   r3 -- r73;
// [Asm]   r8 -- r26;
// [Asm]   r7 -- r87;
// [Asm]   r63 -- r64;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r35;
// [Asm]   r59 -- r62;
// [Asm]   r4 -- r6;
// [Asm]   r9 -- r13;
// [Asm]   r1 -- r100;
// [Asm]   r59 -- r63;
// [Asm]   r2 -- r20;
// [Asm]   r1 -- r76;
// [Asm]   r13 -- r97;
// [Asm]   r7 -- r21;
// [Asm]   r1 -- r71;
// [Asm]   r3 -- r43;
// [Asm]   r9 -- r27;
// [Asm]   r9 -- r77;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r56;
// [Asm]   r3 -- r79;
// [Asm]   r1 -- r63;
// [Asm]   r6 -- r29;
// [Asm]   r7 -- r53;
// [Asm]   r6 -- r107;
// [Asm]   r1 -- r91;
// [Asm]   r16 -- r59;
// [Asm]   r10 -- r77;
// [Asm]   r32 -- r112;
// [Asm]   r12 -- r19;
// [Asm]   r7 -- r83;
// [Asm]   r46 -- r48;
// [Asm]   r4 -- r21;
// [Asm]   r2 -- r76;
// [Asm]   r12 -- r24;
// [Asm]   r6 -- r13;
// [Asm]   r3 -- r76;
// [Asm]   r7 -- r90;
// [Asm]   r2 -- r33;
// [Asm]   r28 -- r73;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r96;
// [Asm]   r3 -- r4;
// [Asm]   r5 -- r75;
// [Asm]   r34 -- r55;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r6 -- r93;
// [Asm]   r2 -- r8;
// [Asm]   r28 -- r64;
// [Asm]   r6 -- r31;
// [Asm]   r6 -- r78;
// [Asm]   r36 -- r55;
// [Asm]   r95 -- r96;
// [Asm]   r6 -- r45;
// [Asm]   r28 -- r84;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r1 -- r44;
// [Asm]   r31 -- r34;
// [Asm]   r7 -- r110;
// [Asm]   r13 -- r21;
// [Asm]   r7 -- r8;
// [Asm]   r6 -- r97;
// [Asm]   r4 -- r9;
// [Asm]   r3 -- r88;
// [Asm]   r2 -- r53;
// [Asm]   r5 -- r34;
// [Asm]   r9 -- r90;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r14 -- r18;
// [Asm]   r11 -- r17;
// [Asm]   r28 -- r99;
// [Asm]   r5 -- r20;
// [Asm]   r7 -- r45;
// [Asm]   r2 -- r18;
// [Asm]   r2 -- r105;
// [Asm]   r9 -- r96;
// [Asm]   r10 -- r78;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r32;
// [Asm]   r7 -- r13;
// [Asm]   r10 -- r76;
// [Asm]   r8 -- r55;
// [Asm]   r28 -- r107;
// [Asm]   r2 -- r82;
// [Asm]   r7 -- r30;
// [Asm]   r8 -- r33;
// [Asm]   r3 -- r90;
// [Asm]   r6 -- r26;
// [Asm]   r5 -- r16;
// [Asm]   r1 -- r101;
// [Asm]   r13 -- r20;
// [Asm]   r3 -- r77;
// [Asm]   r33 -- r34;
// [Asm]   r9 -- r22;
// [Asm]   r9 -- r92;
// [Asm]   r1 -- r96;
// [Asm]   r12 -- r75;
// [Asm]   r36 -- r96;
// [Asm]   r11 -- r75;
// [Asm]   r9 -- r43;
// [Asm]   r2 -- r66;
// [Asm]   r3 -- r72;
// [Asm]   r2 -- r21;
// [Asm]   r3 -- r41;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r33 -- r55;
// [Asm]   r9 -- r55;
// [Asm]   r60 -- r63;
// [Asm]   r7 -- r23;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r26;
// [Asm]   r2 -- r19;
// [Asm]   r9 -- r71;
// [Asm]   r7 -- r101;
// [Asm]   r9 -- r105;
// [Asm]   r5 -- r15;
// [Asm]   r61 -- r64;
// [Asm]   comment = "0:v44-> 1:v11-> 2:v10-> 3:v13-> 4:v36-> 6:v12-> 7:v9-> 9:zero-> 5:v37-> 8:v39-> 10:v35-> 11:v38-> 12:v34-> 13:a0-> 14:a1-> 15:a2-> 16:a3-> 17:a4-> 18:a5-> 28:v8-> 19:t0-> 20:t1-> 97:v73-> 21:t2-> 22:t3-> 23:t4-> 24:a6-> 25:a7-> 26:v45-> 75:v40-> 76:v150-> 77:v151-> 78:v42-> 33:v49-> 36:v48-> 34:v50-> 32:v51-> 55:v142-> 56:v54-> 112:v143-> 110:v144-> 111:v145-> 31:v64-> 35:v65-> 90:v57-> 95:v59-> 96:v60-> 94:v47-> 98:v74-> 99:v131-> 100:v132-> 27:v99-> 29:v100-> 37:v62-> 39:v78-> 40:v126-> 41:v127-> 42:v80-> 43:v81-> 45:v89-> 46:v90-> 47:v113-> 48:v91-> 49:v92-> 50:v111-> 52:v160-> 53:v16-> 84:v161-> 88:v156-> 102:v155-> 105:v159-> 107:v158-> 109:v157-> 54:v63-> 67:v66-> 68:v83-> 69:v84-> 70:v120-> 71:v85-> 72:v86-> 73:v118-> 79:v67-> 82:v162-> 83:v163-> 91:v95-> 92:v96-> 104:v61-> 30:v102-> 44:v82-> 51:v94-> 59:v2-> 60:v3-> 61:v4-> 62:v5-> 63:v6-> 64:v7-> 66:v70-> 74:v88-> 80:v71-> 81:v72-> 93:v98-> 101:v77-> 87:v69-> 108:v154-> 38:v27-> 57:v25-> 58:v32-> 65:v30-> 85:v31-> 86:v28-> 89:v103-> 103:v29-> 106:v26"
// [Asm]   comment = "v44<-a0;v90<-a0;v49<-a0;v2<-a0;v150<-a0;v45<-a0;v28<-a0;v82<-a0;v16<-a1;v54<-a5;v35<-s1;v145<-a4;v37<-s0;v63<-a0;v81<-a0;v71<-a0;v156<-a0;v64<-a1;v131<-a1;v78<-a0;v160<-a0;v30<-a0;v67<-a0;v4<-a2;v13<-s2;v154<-a0;v162<-a0;v66<-a0;v99<-a0;v40<-a0;v151<-a0;v5<-a3;v126<-a0;v38<-s4;v32<-a0;v144<-a4;v50<-a2;v159<-a0;v163<-a0;v29<-a0;v60<-a0;v94<-a0;v42<-a0;v142<-a4;v3<-a1;v118<-a0;v98<-a0;v27<-a0;v86<-a1;v61<-a0;v69<-a0;v132<-a1;v31<-a0;v113<-a1;v12<-s4;v80<-a0;v36<-s3;v59<-a1;v100<-a0;v65<-a0;v9<-s5;v7<-a5;v39<-s2;v48<-a1;v143<-a4;v70<-a0;v51<-a3;v92<-a1;v25<-a0;v88<-a0;v83<-a0;v74<-a0;v95<-a0;v120<-a1;v34<-s5;v91<-a1;v62<-a0;v155<-a0;v26<-a0;v157<-a0;v11<-s0;v8<-s3;v127<-a0;v85<-a1;v84<-a0;v161<-a0;v111<-a0;v103<-a0;v102<-a0;v96<-a0;v89<-a0;v158<-a0;v6<-a4;v10<-s1;v57<-a1;v73<-s6;v72<-a0;v77<-a0;v47<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux40.180l4_3"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v44, v36, 1 ->   addi a0, s3, 1
// [Asm] subst   mv a1, v34 ->   mv a1, s5
// [Asm] subst   mv a2, v35 ->   mv a2, s1
// [Asm] subst   mv a3, v37 ->   mv a3, s0
// [Asm] subst   mv a4, v38 ->   mv a4, s4
// [Asm] subst   mv a5, v39 ->   mv a5, s2
// [Asm] subst   call aux40.180l4_3 ->   call aux40.180l4_3
// [Asm] subst   sw v45, 0(v39) ->   sw a0, 0(s2)
// [Asm] subst   j .aux40.180l4_3_49 ->   j .aux40.180l4_3_49
// [Asm] subst   lw v99, 0(v9) ->   lw a0, 0(s5)
// [Asm] subst   addi v100, v99, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v100, 0(v9) ->   sw a0, 0(s5)
// [Asm] subst   addi v102, v8, 1 ->   addi a0, s3, 1
// [Asm] subst   mv v8, v102 ->   mv s3, a0
// [Asm] subst   j .aux40.180l4_3_0 ->   j .aux40.180l4_3_0
// [Asm] subst   addi v64, v48, 1 ->   addi a1, a1, 1
// [Asm] subst   addi v65, v49, 1 ->   addi a0, a0, 1
// [Asm] subst   j .aux40.180l4_3_58 ->   j .aux40.180l4_3_58
// [Asm] subst   lw v78, 0(v9) ->   lw a0, 0(s5)
// [Asm] subst   slliw v126, v78, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v127, v12, v126 ->   add a0, s4, a0
// [Asm] subst   lw v80, 0(v127) ->   lw a0, 0(a0)
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   addi v82, v8, 1 ->   addi a0, s3, 1
// [Asm] subst   mv v8, v82 ->   mv s3, a0
// [Asm] subst   j .aux40.180l4_3_0 ->   j .aux40.180l4_3_0
// [Asm] subst   lw v89, 0(v9) ->   lw a0, 0(s5)
// [Asm] subst   slliw v90, v89, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v113, v12, v90 ->   add a1, s4, a0
// [Asm] subst   lw v91, 0(v113) ->   lw a1, 0(a1)
// [Asm] subst   addi v92, v91, 1 ->   addi a1, a1, 1
// [Asm] subst   add v111, v12, v90 ->   add a0, s4, a0
// [Asm] subst   sw v92, 0(v111) ->   sw a1, 0(a0)
// [Asm] subst   addi v94, v8, 1 ->   addi a0, s3, 1
// [Asm] subst   mv v8, v94 ->   mv s3, a0
// [Asm] subst   j .aux40.180l4_3_0 ->   j .aux40.180l4_3_0
// [Asm] subst   li v160, 60 ->   li a0, 60
// [Asm] subst   beq v16, v160, .aux40.180l4_3_5 ->   beq a1, a0, .aux40.180l4_3_5
// [Asm] subst   li v142, 93 ->   li a4, 93
// [Asm] subst   bne v54, v142, .aux40.180l4_3_64 ->   bne a5, a4, .aux40.180l4_3_64
// [Asm] subst   mv v25, v8 ->   mv a0, s3
// [Asm] subst   j .aux40.180l4_3_19 ->   j .aux40.180l4_3_19
// [Asm] subst   mv v8, v2 ->   mv s3, a0
// [Asm] subst   mv v9, v3 ->   mv s5, a1
// [Asm] subst   mv v10, v4 ->   mv s1, a2
// [Asm] subst   mv v11, v5 ->   mv s0, a3
// [Asm] subst   mv v12, v6 ->   mv s4, a4
// [Asm] subst   mv v13, v7 ->   mv s2, a5
// [Asm] subst   bge v48, v50, .aux40.180l4_3_59 ->   bge a1, a2, .aux40.180l4_3_59
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v66, v48 ->   mv a0, a1
// [Asm] subst   lw v83, 0(v9) ->   lw a0, 0(s5)
// [Asm] subst   slliw v84, v83, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v120, v12, v84 ->   add a1, s4, a0
// [Asm] subst   lw v85, 0(v120) ->   lw a1, 0(a1)
// [Asm] subst   addi v86, v85, -1 ->   addi a1, a1, -1
// [Asm] subst   add v118, v12, v84 ->   add a0, s4, a0
// [Asm] subst   sw v86, 0(v118) ->   sw a1, 0(a0)
// [Asm] subst   addi v88, v8, 1 ->   addi a0, s3, 1
// [Asm] subst   mv v8, v88 ->   mv s3, a0
// [Asm] subst   j .aux40.180l4_3_0 ->   j .aux40.180l4_3_0
// [Asm] subst   lw v40, 0(v34) ->   lw a0, 0(s5)
// [Asm] subst   slliw v150, v40, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v151, v38, v150 ->   add a0, s4, a0
// [Asm] subst   lw v42, 0(v151) ->   lw a0, 0(a0)
// [Asm] subst   beq v42, zero, .aux40.180l4_3_50 ->   beq a0, zero, .aux40.180l4_3_50
// [Asm] subst   sw v8, 0(v13) ->   sw s3, 0(s2)
// [Asm] subst   lw v71, 0(v13) ->   lw a0, 0(s2)
// [Asm] subst   addi v72, v71, 1 ->   addi a0, a0, 1
// [Asm] subst   mv v8, v72 ->   mv s3, a0
// [Asm] subst   j .aux40.180l4_3_0 ->   j .aux40.180l4_3_0
// [Asm] subst   slliw v162, v8, 2 ->   slliw a0, s3, 2
// [Asm] subst   add v163, v11, v162 ->   add a0, s0, a0
// [Asm] subst   lw v16, 0(v163) ->   lw a1, 0(a0)
// [Asm] subst   li v161, 62 ->   li a0, 62
// [Asm] subst   beq v16, v161, .aux40.180l4_3_3 ->   beq a1, a0, .aux40.180l4_3_3
// [Asm] subst   sw v67, 0(v39) ->   sw a0, 0(s2)
// [Asm] subst   mv v69, zero ->   mv a0, zero
// [Asm] subst   li v156, 44 ->   li a0, 44
// [Asm] subst   beq v16, v156, .aux40.180l4_3_13 ->   beq a1, a0, .aux40.180l4_3_13
// [Asm] subst   beq v49, zero, .aux40.180l4_3_65 ->   beq a0, zero, .aux40.180l4_3_65
// [Asm] subst   mv v48, v47 ->   mv a1, a0
// [Asm] subst   mv v49, zero ->   mv a0, zero
// [Asm] subst   mv v50, v35 ->   mv a2, s1
// [Asm] subst   mv v51, v37 ->   mv a3, s0
// [Asm] subst   addi v57, v48, 1 ->   addi a1, a1, 1
// [Asm] subst   j .aux40.180l4_3_58 ->   j .aux40.180l4_3_58
// [Asm] subst   lw v95, 0(v9) ->   lw a0, 0(s5)
// [Asm] subst   addi v96, v95, -1 ->   addi a0, a0, -1
// [Asm] subst   sw v96, 0(v9) ->   sw a0, 0(s5)
// [Asm] subst   addi v98, v8, 1 ->   addi a0, s3, 1
// [Asm] subst   mv v8, v98 ->   mv s3, a0
// [Asm] subst   j .aux40.180l4_3_0 ->   j .aux40.180l4_3_0
// [Asm] subst   mv v103, v8 ->   mv a0, s3
// [Asm] subst   j .aux40.180l4_3_27 ->   j .aux40.180l4_3_27
// [Asm] subst   addi v47, v36, 1 ->   addi a0, s3, 1
// [Asm] subst   addi v59, v48, 1 ->   addi a1, a1, 1
// [Asm] subst   addi v60, v49, -1 ->   addi a0, a0, -1
// [Asm] subst   j .aux40.180l4_3_58 ->   j .aux40.180l4_3_58
// [Asm] subst   lw v73, 0(v9) ->   lw s6, 0(s5)
// [Asm] subst   call read_ch_until_newline_or_eof1l0_0 ->   call read_ch_until_newline_or_eof1l0_0
// [Asm] subst   slliw v131, v73, 2 ->   slliw a1, s6, 2
// [Asm] subst   add v132, v12, v131 ->   add a1, s4, a1
// [Asm] subst   sw v74, 0(v132) ->   sw a0, 0(a1)
// [Asm] subst   addi v77, v8, 1 ->   addi a0, s3, 1
// [Asm] subst   mv v8, v77 ->   mv s3, a0
// [Asm] subst   j .aux40.180l4_3_0 ->   j .aux40.180l4_3_0
// [Asm] subst   mv v25, v8 ->   mv a0, s3
// [Asm] subst   li v155, 91 ->   li a0, 91
// [Asm] subst   beq v16, v155, .aux40.180l4_3_15 ->   beq a1, a0, .aux40.180l4_3_15
// [Asm] subst   mv v61, v48 ->   mv a0, a1
// [Asm] subst   li v159, 43 ->   li a0, 43
// [Asm] subst   beq v16, v159, .aux40.180l4_3_7 ->   beq a1, a0, .aux40.180l4_3_7
// [Asm] subst   li v158, 45 ->   li a0, 45
// [Asm] subst   beq v16, v158, .aux40.180l4_3_9 ->   beq a1, a0, .aux40.180l4_3_9
// [Asm] subst   li v154, 93 ->   li a0, 93
// [Asm] subst   bne v16, v154, .aux40.180l4_3_18 ->   bne a1, a0, .aux40.180l4_3_18
// [Asm] subst   bge v8, v10, .aux40.180l4_3_1 ->   bge s3, s1, .aux40.180l4_3_1
// [Asm] subst   li v157, 46 ->   li a0, 46
// [Asm] subst   beq v16, v157, .aux40.180l4_3_11 ->   beq a1, a0, .aux40.180l4_3_11
// [Asm] subst   slliw v144, v48, 2 ->   slliw a4, a1, 2
// [Asm] subst   add v145, v51, v144 ->   add a4, a3, a4
// [Asm] subst   lw v54, 0(v145) ->   lw a5, 0(a4)
// [Asm] subst   li v143, 91 ->   li a4, 91
// [Asm] subst   beq v54, v143, .aux40.180l4_3_61 ->   beq a5, a4, .aux40.180l4_3_61
// [Asm] subst   j .aux40.180l4_3_70 ->   j .aux40.180l4_3_70
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v3, BlockParam(bref=b5, bpref=$b.0) -> v5, Self(fref=f0) -> v0, BlockParam(bref=b6, bpref=$b.0) -> v6, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=13)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=10)])
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10, v2]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [v8]
// [Asm] defined: v5 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [v5]
// [Asm] defined: v6 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [v7]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of read_ch_until_newline_or_eof1l0_0"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r14 [label="v10 ← a1", color=green];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r15 [label="v8 ← a0", color=green];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r16 [label="v5 ← a0", color=green];
// [Asm]   r18 [label="v9 ← a1", color=green];
// [Asm]   r19 [label="v7 ← a0", color=green];
// [Asm]   r17 [label="v6 ← a0", color=green];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r13 -- r18;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r13 -- r14;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2-> 14:v10-> 18:v9-> 15:v8-> 16:v5-> 17:v6-> 19:v7"
// [Asm]   comment = "v2<-a0;v10<-a1;v8<-a0;v5<-a0;v9<-a1;v7<-a0;v6<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of read_ch_until_newline_or_eof1l0_0"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call minimbt_read_char ->   call minimbt_read_char
// [Asm] subst   li v10, 10 ->   li a1, 10
// [Asm] subst   beq v2, v10, .read_ch_until_newline_or_eof1l0_0_1 ->   beq a0, a1, .read_ch_until_newline_or_eof1l0_0_1
// [Asm] subst   li v8, -1 ->   li a0, -1
// [Asm] subst   j .read_ch_until_newline_or_eof1l0_0_5 ->   j .read_ch_until_newline_or_eof1l0_0_5
// [Asm] subst   li v9, 13 ->   li a1, 13
// [Asm] subst   bne v2, v9, .read_ch_until_newline_or_eof1l0_0_4 ->   bne a0, a1, .read_ch_until_newline_or_eof1l0_0_4
// [Asm] subst   li v7, -1 ->   li a0, -1
// [Asm] subst   j .read_ch_until_newline_or_eof1l0_0_6 ->   j .read_ch_until_newline_or_eof1l0_0_6
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] aux40.180l4_3:
// [Asm] # block info: defs: [v2, v11, v5, v10, v13, v7, v8, v4, v6, v12, v9, v3], uses: [v3, v5, a5, a0, a4, v7, a2, v4, a1, v6, a3, v2], upward_exposed: [a2, a1, a3, a5, a0, a4], params_defs: []
// [Asm] # live_in: [a5, a0, zero, a4, a2, a1, a3], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux40.180l4_3_29:
// [Asm]   # save_ctx1  # live: [a5, zero, a0, a4, a2, a1, a3]
// [Asm]   mv v2, a0  # live: [a5, zero, a4, a2, a1, a3, v2]
// [Asm]   mv v3, a1  # live: [v2, a5, zero, a4, a2, a3, v3]
// [Asm]   mv v4, a2  # live: [v2, a5, zero, a4, v4, a3, v3]
// [Asm]   mv v5, a3  # live: [v2, v5, a5, zero, a4, v4, v3]
// [Asm]   mv v6, a4  # live: [v2, v5, a5, zero, v4, v6, v3]
// [Asm]   mv v7, a5  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v8, v2  # live: [v5, zero, v8, v7, v4, v6, v3]
// [Asm]   mv v9, v3  # live: [v5, zero, v8, v7, v4, v6, v9]
// [Asm]   mv v10, v4  # live: [v5, v10, zero, v8, v7, v6, v9]
// [Asm]   mv v11, v5  # live: [v11, v10, zero, v8, v7, v6, v9]
// [Asm]   mv v12, v6  # live: [v11, v10, zero, v8, v7, v12, v9]
// [Asm]   mv v13, v7  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v10, v8], upward_exposed: [v10, v8], params_defs: [v11, v10, v12, v9, v13, v8]
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: [v8, v9, v10, v11, v12, v13]
// [Asm] .aux40.180l4_3_0:
// [Asm] # control
// [Asm]   bge v8, v10, .aux40.180l4_3_1  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v162, v16, v161, v163], uses: [v11, v162, v16, v161, v163, v8], upward_exposed: [v11, v8], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux40.180l4_3_2:
// [Asm]   slliw v162, v8, 2  # live: [v11, v162, v10, v13, zero, v8, v12, v9]
// [Asm]   add v163, v11, v162  # live: [v11, v10, v13, zero, v8, v12, v9, v163]
// [Asm]   lw v16, 0(v163)  # live: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm] # control
// [Asm]   li v161, 62  # live: [v11, v16, v10, v161, v13, zero, v8, v12, v9]
// [Asm]   beq v16, v161, .aux40.180l4_3_3  # live: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v160], uses: [v16, v160], upward_exposed: [v16], params_defs: []
// [Asm] # live_in: [v11, v16, v10, v13, zero, v8, v12, v9], live_out: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux40.180l4_3_4:
// [Asm] # control
// [Asm]   li v160, 60  # live: [v11, v16, v10, v13, zero, v8, v12, v160, v9]
// [Asm]   beq v16, v160, .aux40.180l4_3_5  # live: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v159], uses: [v16, v159], upward_exposed: [v16], params_defs: []
// [Asm] # live_in: [v11, v16, v10, v13, zero, v8, v12, v9], live_out: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux40.180l4_3_6:
// [Asm] # control
// [Asm]   li v159, 43  # live: [v11, v16, v10, v13, zero, v159, v8, v12, v9]
// [Asm]   beq v16, v159, .aux40.180l4_3_7  # live: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v158], uses: [v16, v158], upward_exposed: [v16], params_defs: []
// [Asm] # live_in: [v11, v16, v10, v13, zero, v8, v12, v9], live_out: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux40.180l4_3_8:
// [Asm] # control
// [Asm]   li v158, 45  # live: [v11, v16, v10, v13, zero, v158, v8, v12, v9]
// [Asm]   beq v16, v158, .aux40.180l4_3_9  # live: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v157], uses: [v16, v157], upward_exposed: [v16], params_defs: []
// [Asm] # live_in: [v11, v16, v10, v13, zero, v8, v12, v9], live_out: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux40.180l4_3_10:
// [Asm] # control
// [Asm]   li v157, 46  # live: [v11, v16, v10, v13, zero, v8, v157, v12, v9]
// [Asm]   beq v16, v157, .aux40.180l4_3_11  # live: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v156], uses: [v16, v156], upward_exposed: [v16], params_defs: []
// [Asm] # live_in: [v11, v16, v10, v13, zero, v8, v12, v9], live_out: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux40.180l4_3_12:
// [Asm] # control
// [Asm]   li v156, 44  # live: [v11, v16, v10, v156, v13, zero, v8, v12, v9]
// [Asm]   beq v16, v156, .aux40.180l4_3_13  # live: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v155], uses: [v155, v16], upward_exposed: [v16], params_defs: []
// [Asm] # live_in: [v11, v16, v10, v13, zero, v8, v12, v9], live_out: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux40.180l4_3_14:
// [Asm] # control
// [Asm]   li v155, 91  # live: [v11, v155, v16, v10, v13, zero, v8, v12, v9]
// [Asm]   beq v16, v155, .aux40.180l4_3_15  # live: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v154], uses: [v16, v154], upward_exposed: [v16], params_defs: []
// [Asm] # live_in: [v16, v8], live_out: [v8]
// [Asm] # block parameters: []
// [Asm] .aux40.180l4_3_16:
// [Asm] # control
// [Asm]   li v154, 93  # live: [v16, v154, v8]
// [Asm]   bne v16, v154, .aux40.180l4_3_18  # live: [v8]
// [Asm] 
// [Asm] # block info: defs: [v25], uses: [v8], upward_exposed: [v8], params_defs: []
// [Asm] # live_in: [v8], live_out: [v25]
// [Asm] # block parameters: []
// [Asm] .aux40.180l4_3_17:
// [Asm] # control
// [Asm]   mv v25, v8  # live: [v25]
// [Asm] 
// [Asm] # block info: defs: [v26], uses: [v25], upward_exposed: [v25], params_defs: [v25]
// [Asm] # live_in: [v25], live_out: [v26]
// [Asm] # block parameters: [v25]
// [Asm] .aux40.180l4_3_19:
// [Asm] # control
// [Asm]   mv v26, v25  # live: [v26]
// [Asm] 
// [Asm] # block info: defs: [v27], uses: [v26], upward_exposed: [v26], params_defs: [v26]
// [Asm] # live_in: [v26], live_out: [v27]
// [Asm] # block parameters: [v26]
// [Asm] .aux40.180l4_3_20:
// [Asm] # control
// [Asm]   mv v27, v26  # live: [v27]
// [Asm] 
// [Asm] # block info: defs: [v28], uses: [v27], upward_exposed: [v27], params_defs: [v27]
// [Asm] # live_in: [v27], live_out: [v28]
// [Asm] # block parameters: [v27]
// [Asm] .aux40.180l4_3_21:
// [Asm] # control
// [Asm]   mv v28, v27  # live: [v28]
// [Asm] 
// [Asm] # block info: defs: [v29], uses: [v28], upward_exposed: [v28], params_defs: [v28]
// [Asm] # live_in: [v28], live_out: [v29]
// [Asm] # block parameters: [v28]
// [Asm] .aux40.180l4_3_22:
// [Asm] # control
// [Asm]   mv v29, v28  # live: [v29]
// [Asm] 
// [Asm] # block info: defs: [v30], uses: [v29], upward_exposed: [v29], params_defs: [v29]
// [Asm] # live_in: [v29], live_out: [v30]
// [Asm] # block parameters: [v29]
// [Asm] .aux40.180l4_3_23:
// [Asm] # control
// [Asm]   mv v30, v29  # live: [v30]
// [Asm] 
// [Asm] # block info: defs: [v31], uses: [v30], upward_exposed: [v30], params_defs: [v30]
// [Asm] # live_in: [v30], live_out: [v31]
// [Asm] # block parameters: [v30]
// [Asm] .aux40.180l4_3_24:
// [Asm] # control
// [Asm]   mv v31, v30  # live: [v31]
// [Asm] 
// [Asm] # block info: defs: [v32], uses: [v31], upward_exposed: [v31], params_defs: [v31]
// [Asm] # live_in: [v31], live_out: [v32]
// [Asm] # block parameters: [v31]
// [Asm] .aux40.180l4_3_25:
// [Asm] # control
// [Asm]   mv v32, v31  # live: [v32]
// [Asm] 
// [Asm] # block info: defs: [v103], uses: [v32], upward_exposed: [v32], params_defs: [v32]
// [Asm] # live_in: [v32], live_out: [v103]
// [Asm] # block parameters: [v32]
// [Asm] .aux40.180l4_3_26:
// [Asm] # control
// [Asm]   mv v103, v32  # live: [v103]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v103, a0], upward_exposed: [v103], params_defs: [v103]
// [Asm] # live_in: [v103], live_out: []
// [Asm] # block parameters: [v103]
// [Asm] .aux40.180l4_3_27:
// [Asm] # control
// [Asm]   mv a0, v103  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v103], uses: [v8], upward_exposed: [v8], params_defs: []
// [Asm] # live_in: [v8], live_out: [v103]
// [Asm] # block parameters: []
// [Asm] .aux40.180l4_3_1:
// [Asm] # control
// [Asm]   mv v103, v8  # live: [v103]
// [Asm]   j .aux40.180l4_3_27  # live: [v103]
// [Asm] 
// [Asm] # block info: defs: [v102, v99, v100, v8], uses: [v11, v10, v99, v13, v8, v102, v12, v100, v9], upward_exposed: [v11, v10, v12, v9, v13, v8], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux40.180l4_3_3:
// [Asm]   lw v99, 0(v9)  # live: [v11, v10, v99, v13, zero, v8, v12, v9]
// [Asm]   addi v100, v99, 1  # live: [v11, v10, v13, zero, v8, v12, v9, v100]
// [Asm]   sw v100, 0(v9)  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   addi v102, v8, 1  # live: [v11, v10, v13, zero, v12, v102, v9]
// [Asm] # control
// [Asm]   mv v8, v102  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   j .aux40.180l4_3_0  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v8, v95, v96, v98], uses: [v11, v10, v96, v13, v8, v95, v12, v9, v98], upward_exposed: [v11, v10, v12, v9, v13, v8], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux40.180l4_3_5:
// [Asm]   lw v95, 0(v9)  # live: [v11, v10, v13, zero, v8, v95, v12, v9]
// [Asm]   addi v96, v95, -1  # live: [v11, v10, v96, v13, zero, v8, v12, v9]
// [Asm]   sw v96, 0(v9)  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   addi v98, v8, 1  # live: [v11, v10, v13, zero, v12, v9, v98]
// [Asm] # control
// [Asm]   mv v8, v98  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   j .aux40.180l4_3_0  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v94, v91, v8, v92, v90, v111, v89, v113], uses: [v11, v94, v91, v10, v13, v8, v92, v90, v111, v12, v9, v89, v113], upward_exposed: [v11, v12, v10, v9, v13, v8], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux40.180l4_3_7:
// [Asm]   lw v89, 0(v9)  # live: [v11, v10, v13, zero, v8, v12, v9, v89]
// [Asm]   slliw v90, v89, 2  # live: [v11, v10, v13, zero, v8, v90, v12, v9]
// [Asm]   add v113, v12, v90  # live: [v11, v10, v13, zero, v8, v90, v12, v9, v113]
// [Asm]   lw v91, 0(v113)  # live: [v11, v91, v10, v13, zero, v8, v90, v12, v9]
// [Asm]   addi v92, v91, 1  # live: [v11, v10, v13, zero, v8, v92, v90, v12, v9]
// [Asm]   add v111, v12, v90  # live: [v11, v10, v13, zero, v8, v92, v111, v12, v9]
// [Asm]   sw v92, 0(v111)  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   addi v94, v8, 1  # live: [v11, v94, v10, v13, zero, v12, v9]
// [Asm] # control
// [Asm]   mv v8, v94  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   j .aux40.180l4_3_0  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v118, v120, v85, v8, v88, v84, v83, v86], uses: [v118, v11, v10, v13, v120, v85, v8, v84, v88, v83, v12, v86, v9], upward_exposed: [v11, v12, v10, v9, v13, v8], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux40.180l4_3_9:
// [Asm]   lw v83, 0(v9)  # live: [v11, v10, v13, zero, v8, v12, v83, v9]
// [Asm]   slliw v84, v83, 2  # live: [v11, v10, v13, zero, v8, v84, v12, v9]
// [Asm]   add v120, v12, v84  # live: [v11, v10, v13, zero, v120, v8, v84, v12, v9]
// [Asm]   lw v85, 0(v120)  # live: [v11, v10, v13, zero, v8, v85, v84, v12, v9]
// [Asm]   addi v86, v85, -1  # live: [v11, v10, v13, zero, v8, v84, v12, v86, v9]
// [Asm]   add v118, v12, v84  # live: [v11, v118, v10, v13, zero, v8, v12, v86, v9]
// [Asm]   sw v86, 0(v118)  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   addi v88, v8, 1  # live: [v11, v10, v13, zero, v88, v12, v9]
// [Asm] # control
// [Asm]   mv v8, v88  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   j .aux40.180l4_3_0  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [t1, v127, ft0, ft1, a1, fa1, v82, fa2, v126, ft6, a4, fa6, v8, a6, ft5, v81, ft10, ft7, ft4, ft9, a5, a0, fa4, v78, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, v80, t2], uses: [v11, v82, v10, v127, v126, a0, v13, v78, v8, v80, v12, v9], upward_exposed: [v11, v12, v10, v9, v13, v8], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux40.180l4_3_11:
// [Asm]   lw v78, 0(v9)  # live: [v11, v10, v13, zero, v78, v8, v12, v9]
// [Asm]   slliw v126, v78, 2  # live: [v11, v10, v13, zero, v126, v8, v12, v9]
// [Asm]   add v127, v12, v126  # live: [v11, v10, v127, v13, zero, v8, v12, v9]
// [Asm]   lw v80, 0(v127)  # live: [v11, v10, v13, zero, v8, v80, v12, v9]
// [Asm]   # save_ctx2  # live: [v11, v10, v13, zero, v8, v80, v12, v9]
// [Asm]   mv a0, v80  # live: [v11, v10, v13, zero, a0, v8, v12, v9]
// [Asm]   call minimbt_print_char  # live: [v11, v10, v13, zero, a0, v8, v12, v9]
// [Asm]   mv v81, a0  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   # restore_ctx2  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   addi v82, v8, 1  # live: [v11, v82, v10, v13, zero, v12, v9]
// [Asm] # control
// [Asm]   mv v8, v82  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   j .aux40.180l4_3_0  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, v73, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, v74, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, v77, fa0, t4, t2, v131, v132], uses: [v132, v11, v10, a0, v13, v77, v8, v74, v12, v131, v9, v73], upward_exposed: [v11, v12, v10, v9, v13, v8], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux40.180l4_3_13:
// [Asm]   lw v73, 0(v9)  # live: [v11, v10, v13, zero, v8, v12, v9, v73]
// [Asm]   # save_ctx2  # live: [v11, v10, v13, zero, v8, v12, v9, v73]
// [Asm]   call read_ch_until_newline_or_eof1l0_0  # live: [v11, v10, v13, zero, a0, v8, v12, v9, v73]
// [Asm]   mv v74, a0  # live: [v11, v10, v13, zero, v8, v74, v12, v9, v73]
// [Asm]   # restore_ctx2  # live: [v11, v10, v13, zero, v8, v74, v12, v9, v73]
// [Asm]   slliw v131, v73, 2  # live: [v11, v10, v13, zero, v8, v74, v12, v131, v9]
// [Asm]   add v132, v12, v131  # live: [v11, v10, v13, zero, v8, v74, v12, v9, v132]
// [Asm]   sw v74, 0(v132)  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   addi v77, v8, 1  # live: [v11, v10, v13, zero, v77, v12, v9]
// [Asm] # control
// [Asm]   mv v8, v77  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   j .aux40.180l4_3_0  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v13, v8], upward_exposed: [v13, v8], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux40.180l4_3_15:
// [Asm]   sw v8, 0(v13)  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v36, v37, v38, v34, v39, v35], uses: [v11, v10, v12, v9, v13, v8], upward_exposed: [v11, v10, v12, v9, v13, v8], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, zero, v13, v36, v35, v37, v38, v12, v34, v9, v39]
// [Asm] # block parameters: []
// [Asm] .aux40.180l4_3_54:
// [Asm] # control
// [Asm]   mv v34, v9  # live: [v11, v10, zero, v13, v8, v12, v34, v9]
// [Asm]   mv v35, v10  # live: [v11, v10, zero, v13, v35, v8, v12, v34, v9]
// [Asm]   mv v36, v8  # live: [v11, v10, zero, v13, v35, v36, v12, v34, v9]
// [Asm]   mv v37, v11  # live: [v11, v10, zero, v13, v35, v36, v37, v12, v34, v9]
// [Asm]   mv v38, v12  # live: [v11, v10, zero, v13, v35, v36, v37, v38, v12, v34, v9]
// [Asm]   mv v39, v13  # live: [v11, v10, zero, v13, v35, v36, v37, v38, v12, v34, v9, v39]
// [Asm] 
// [Asm] # block info: defs: [v150, v151, v42, v40], uses: [v42, zero, v150, v151, v38, v34, v40], upward_exposed: [v38, v34, zero], params_defs: [v36, v37, v38, v34, v39, v35]
// [Asm] # live_in: [v11, v10, zero, v13, v35, v36, v37, v38, v12, v34, v9, v39], live_out: [v11, v10, zero, v13, v35, v36, v37, v38, v12, v34, v9, v39]
// [Asm] # block parameters: [v34, v35, v36, v37, v38, v39]
// [Asm] .aux40.180l4_3_49:
// [Asm]   lw v40, 0(v34)  # live: [v11, v10, v13, v36, v37, v12, v9, v39, zero, v35, v38, v34, v40]
// [Asm]   slliw v150, v40, 2  # live: [v11, v10, v13, v36, v150, v37, v12, v9, v39, zero, v35, v38, v34]
// [Asm]   add v151, v38, v150  # live: [v11, v10, v13, v36, v37, v12, v9, v39, zero, v35, v151, v38, v34]
// [Asm]   lw v42, 0(v151)  # live: [v11, v10, v13, v42, v36, v37, v12, v9, v39, zero, v35, v38, v34]
// [Asm] # control
// [Asm]   beq v42, zero, .aux40.180l4_3_50  # live: [v11, v10, zero, v13, v36, v35, v37, v38, v12, v34, v9, v39]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, v44, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, v45, t4, t2], uses: [a5, a0, v36, v37, a2, a1, a3, v44, v39, a4, v35, v45, v38, v34], upward_exposed: [v35, v36, v37, v38, v34, v39], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v13, v36, v35, v37, v38, v12, v34, v9, v39], live_out: [v11, v10, zero, v13, v36, v35, v37, v38, v12, v34, v9, v39]
// [Asm] # block parameters: []
// [Asm] .aux40.180l4_3_51:
// [Asm]   addi v44, v36, 1  # live: [v11, v10, v13, v36, v37, v12, v44, v9, v39, zero, v35, v38, v34]
// [Asm]   # save_ctx2  # live: [v11, v10, v13, v36, v37, v12, v44, v9, v39, zero, v35, v38, v34]
// [Asm]   mv a0, v44  # live: [v11, v10, v13, a0, v36, v37, v12, v9, v39, zero, v35, v38, v34]
// [Asm]   mv a1, v34  # live: [v11, v10, v13, a0, v36, v37, a1, v12, v9, v39, zero, v35, v38, v34]
// [Asm]   mv a2, v35  # live: [v11, v10, v13, a0, v36, v37, a2, a1, v12, v9, v39, zero, v35, v38, v34]
// [Asm]   mv a3, v37  # live: [v11, v10, v13, a0, v36, v37, a2, a1, v12, a3, v9, v39, zero, v35, v38, v34]
// [Asm]   mv a4, v38  # live: [v11, v10, v13, a0, v36, v37, a2, a1, v12, a3, v9, v39, zero, a4, v35, v38, v34]
// [Asm]   mv a5, v39  # live: [v11, v10, a5, v13, a0, v36, v37, a2, a1, v12, a3, v9, v39, zero, a4, v35, v38, v34]
// [Asm]   call aux40.180l4_3  # live: [v11, v10, v13, a0, v36, v37, v12, v9, v39, zero, v35, v38, v34]
// [Asm]   mv v45, a0  # live: [v11, v10, v13, v36, v37, v12, v9, v39, zero, v35, v45, v38, v34]
// [Asm]   # restore_ctx2  # live: [v11, v10, v13, v36, v37, v12, v9, v39, zero, v35, v45, v38, v34]
// [Asm]   sw v45, 0(v39)  # live: [v11, v10, zero, v13, v35, v36, v37, v38, v12, v34, v9, v39]
// [Asm] # control
// [Asm]   mv v34, v34  # live: [v11, v10, zero, v13, v35, v36, v37, v38, v12, v34, v9, v39]
// [Asm]   mv v35, v35  # live: [v11, v10, zero, v13, v35, v36, v37, v38, v12, v34, v9, v39]
// [Asm]   mv v36, v36  # live: [v11, v10, zero, v13, v35, v36, v37, v38, v12, v34, v9, v39]
// [Asm]   mv v37, v37  # live: [v11, v10, zero, v13, v35, v36, v37, v38, v12, v34, v9, v39]
// [Asm]   mv v38, v38  # live: [v11, v10, zero, v13, v35, v36, v37, v38, v12, v34, v9, v39]
// [Asm]   mv v39, v39  # live: [v11, v10, zero, v13, v35, v36, v37, v38, v12, v34, v9, v39]
// [Asm]   j .aux40.180l4_3_49  # live: [v11, v10, zero, v13, v35, v36, v37, v38, v12, v34, v9, v39]
// [Asm] 
// [Asm] # block info: defs: [v47], uses: [v36], upward_exposed: [v36], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v13, v35, v36, v37, v12, v9, v39], live_out: [v11, v10, zero, v13, v35, v47, v37, v12, v9, v39]
// [Asm] # block parameters: []
// [Asm] .aux40.180l4_3_50:
// [Asm]   addi v47, v36, 1  # live: [v11, v10, zero, v13, v35, v47, v37, v12, v9, v39]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v48, v49, v50, v51], uses: [v47, v37, zero, v35], upward_exposed: [v47, v37, zero, v35], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v13, v35, v47, v37, v12, v9, v39], live_out: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm] # block parameters: []
// [Asm] .aux40.180l4_3_72:
// [Asm] # control
// [Asm]   mv v48, v47  # live: [v11, v48, v10, zero, v13, v35, v37, v12, v9, v39]
// [Asm]   mv v49, zero  # live: [v11, v48, v49, v10, zero, v13, v35, v37, v12, v9, v39]
// [Asm]   mv v50, v35  # live: [v11, v48, v49, v10, zero, v13, v50, v37, v12, v9, v39]
// [Asm]   mv v51, v37  # live: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v48, v50], upward_exposed: [v48, v50], params_defs: [v48, v49, v50, v51]
// [Asm] # live_in: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51], live_out: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm] # block parameters: [v48, v49, v50, v51]
// [Asm] .aux40.180l4_3_58:
// [Asm] # control
// [Asm]   bge v48, v50, .aux40.180l4_3_59  # live: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm] 
// [Asm] # block info: defs: [v143, v144, v145, v54], uses: [v51, v48, v143, v144, v145, v54], upward_exposed: [v48, v51], params_defs: []
// [Asm] # live_in: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51], live_out: [v51, v11, v48, v49, v10, zero, v13, v50, v12, v54, v9, v39]
// [Asm] # block parameters: []
// [Asm] .aux40.180l4_3_60:
// [Asm]   slliw v144, v48, 2  # live: [v51, v11, v48, v49, v10, zero, v13, v50, v12, v9, v144, v39]
// [Asm]   add v145, v51, v144  # live: [v51, v11, v48, v49, v10, zero, v13, v50, v12, v9, v145, v39]
// [Asm]   lw v54, 0(v145)  # live: [v51, v11, v48, v49, v10, zero, v13, v50, v12, v54, v9, v39]
// [Asm] # control
// [Asm]   li v143, 91  # live: [v51, v11, v48, v49, v10, zero, v13, v50, v12, v143, v54, v9, v39]
// [Asm]   beq v54, v143, .aux40.180l4_3_61  # live: [v51, v11, v48, v49, v10, zero, v13, v50, v12, v54, v9, v39]
// [Asm] 
// [Asm] # block info: defs: [v142], uses: [v142, v54], upward_exposed: [v54], params_defs: []
// [Asm] # live_in: [v51, v11, v49, v48, v10, zero, v13, v50, v12, v54, v9, v39], live_out: [v11, v49, v48, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm] # block parameters: []
// [Asm] .aux40.180l4_3_62:
// [Asm] # control
// [Asm]   li v142, 93  # live: [v51, v11, v49, v48, v10, v142, v13, zero, v50, v12, v9, v54, v39]
// [Asm]   bne v54, v142, .aux40.180l4_3_64  # live: [v11, v49, v48, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v49, zero], upward_exposed: [v49, zero], params_defs: []
// [Asm] # live_in: [v11, v49, v48, v10, zero, v13, v50, v12, v9, v39, v51], live_out: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm] # block parameters: []
// [Asm] .aux40.180l4_3_63:
// [Asm] # control
// [Asm]   beq v49, zero, .aux40.180l4_3_65  # live: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm] 
// [Asm] # block info: defs: [v59, v48, v49, v60], uses: [v51, v59, v48, v49, v60, v50], upward_exposed: [v48, v49, v50, v51], params_defs: []
// [Asm] # live_in: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51], live_out: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm] # block parameters: []
// [Asm] .aux40.180l4_3_66:
// [Asm]   addi v59, v48, 1  # live: [v11, v10, v49, zero, v13, v50, v59, v12, v9, v39, v51]
// [Asm]   addi v60, v49, -1  # live: [v51, v11, v10, zero, v13, v50, v59, v12, v9, v39, v60]
// [Asm] # control
// [Asm]   mv v48, v59  # live: [v51, v11, v48, v10, zero, v13, v50, v12, v9, v39, v60]
// [Asm]   mv v49, v60  # live: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm]   mv v50, v50  # live: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm]   mv v51, v51  # live: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm]   j .aux40.180l4_3_58  # live: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm] 
// [Asm] # block info: defs: [v66], uses: [v48], upward_exposed: [v48], params_defs: []
// [Asm] # live_in: [v11, v48, v10, zero, v13, v12, v9, v39], live_out: [v66, v11, v10, zero, v13, v12, v9, v39]
// [Asm] # block parameters: []
// [Asm] .aux40.180l4_3_59:
// [Asm] # control
// [Asm]   mv v66, v48  # live: [v66, v11, v10, zero, v13, v12, v9, v39]
// [Asm] 
// [Asm] # block info: defs: [v67], uses: [v66], upward_exposed: [v66], params_defs: [v66]
// [Asm] # live_in: [v66, v11, v10, zero, v13, v12, v9, v39], live_out: [v11, v10, zero, v13, v67, v12, v9, v39]
// [Asm] # block parameters: [v66]
// [Asm] .aux40.180l4_3_70:
// [Asm] # control
// [Asm]   mv v67, v66  # live: [v11, v10, zero, v13, v67, v12, v9, v39]
// [Asm] 
// [Asm] # block info: defs: [v69], uses: [zero, v67, v39], upward_exposed: [zero, v67, v39], params_defs: [v67]
// [Asm] # live_in: [v11, v10, zero, v13, v67, v12, v9, v39], live_out: [v11, v69, v10, v13, zero, v12, v9]
// [Asm] # block parameters: [v67]
// [Asm] .aux40.180l4_3_55:
// [Asm]   sw v67, 0(v39)  # live: [v11, v10, v13, zero, v12, v9]
// [Asm] # control
// [Asm]   mv v69, zero  # live: [v11, v69, v10, v13, zero, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v70], uses: [v69], upward_exposed: [v69], params_defs: [v69]
// [Asm] # live_in: [v11, v69, v10, v13, zero, v12, v9], live_out: [v11, v10, v13, zero, v70, v12, v9]
// [Asm] # block parameters: [v69]
// [Asm] .aux40.180l4_3_52:
// [Asm] # control
// [Asm]   mv v70, v69  # live: [v11, v10, v13, zero, v70, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v72, v71, v8], uses: [v11, v72, v71, v10, v13, v12, v9], upward_exposed: [v11, v10, v12, v13, v9], params_defs: [v70]
// [Asm] # live_in: [v11, v10, v13, zero, v70, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: [v70]
// [Asm] .aux40.180l4_3_30:
// [Asm]   lw v71, 0(v13)  # live: [v11, v71, v10, v13, zero, v12, v9]
// [Asm]   addi v72, v71, 1  # live: [v11, v72, v10, v13, zero, v12, v9]
// [Asm] # control
// [Asm]   mv v8, v72  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   j .aux40.180l4_3_0  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v65, v48, v49, v64], uses: [v65, v48, v49, v64, v50, v51], upward_exposed: [v48, v49, v50, v51], params_defs: []
// [Asm] # live_in: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51], live_out: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm] # block parameters: []
// [Asm] .aux40.180l4_3_61:
// [Asm]   addi v64, v48, 1  # live: [v51, v11, v10, v49, zero, v13, v50, v12, v9, v64, v39]
// [Asm]   addi v65, v49, 1  # live: [v51, v11, v10, zero, v13, v50, v65, v12, v9, v64, v39]
// [Asm] # control
// [Asm]   mv v48, v64  # live: [v11, v48, v10, zero, v13, v50, v65, v12, v9, v39, v51]
// [Asm]   mv v49, v65  # live: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm]   mv v50, v50  # live: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm]   mv v51, v51  # live: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm]   j .aux40.180l4_3_58  # live: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm] 
// [Asm] # block info: defs: [v57, v48], uses: [v48, v57, v49, v50, v51], upward_exposed: [v48, v49, v50, v51], params_defs: []
// [Asm] # live_in: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51], live_out: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm] # block parameters: []
// [Asm] .aux40.180l4_3_64:
// [Asm]   addi v57, v48, 1  # live: [v11, v49, v10, zero, v13, v50, v12, v57, v9, v39, v51]
// [Asm] # control
// [Asm]   mv v48, v57  # live: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm]   mv v49, v49  # live: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm]   mv v50, v50  # live: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm]   mv v51, v51  # live: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm]   j .aux40.180l4_3_58  # live: [v11, v48, v49, v10, zero, v13, v50, v12, v9, v39, v51]
// [Asm] 
// [Asm] # block info: defs: [v61], uses: [v48], upward_exposed: [v48], params_defs: []
// [Asm] # live_in: [v11, v48, v10, zero, v13, v12, v9, v39], live_out: [v11, v10, zero, v13, v61, v12, v9, v39]
// [Asm] # block parameters: []
// [Asm] .aux40.180l4_3_65:
// [Asm] # control
// [Asm]   mv v61, v48  # live: [v11, v10, v13, zero, v61, v12, v9, v39]
// [Asm] 
// [Asm] # block info: defs: [v62], uses: [v61], upward_exposed: [v61], params_defs: [v61]
// [Asm] # live_in: [v11, v10, zero, v13, v61, v12, v9, v39], live_out: [v62, v11, v10, zero, v13, v12, v9, v39]
// [Asm] # block parameters: [v61]
// [Asm] .aux40.180l4_3_67:
// [Asm] # control
// [Asm]   mv v62, v61  # live: [v62, v11, v10, zero, v13, v12, v9, v39]
// [Asm] 
// [Asm] # block info: defs: [v63], uses: [v62], upward_exposed: [v62], params_defs: [v62]
// [Asm] # live_in: [v62, v11, v10, zero, v13, v12, v9, v39], live_out: [v11, v63, v10, zero, v13, v12, v9, v39]
// [Asm] # block parameters: [v62]
// [Asm] .aux40.180l4_3_68:
// [Asm] # control
// [Asm]   mv v63, v62  # live: [v11, v63, v10, zero, v13, v12, v9, v39]
// [Asm] 
// [Asm] # block info: defs: [v66], uses: [v63], upward_exposed: [v63], params_defs: [v63]
// [Asm] # live_in: [v11, v63, v10, zero, v13, v12, v9, v39], live_out: [v66, v11, v10, zero, v13, v12, v9, v39]
// [Asm] # block parameters: [v63]
// [Asm] .aux40.180l4_3_69:
// [Asm] # control
// [Asm]   mv v66, v63  # live: [v66, v11, v10, zero, v13, v12, v9, v39]
// [Asm]   j .aux40.180l4_3_70  # live: [v66, v11, v10, zero, v13, v12, v9, v39]
// [Asm] 
// [Asm] # block info: defs: [v25], uses: [v8], upward_exposed: [v8], params_defs: []
// [Asm] # live_in: [v8], live_out: [v25]
// [Asm] # block parameters: []
// [Asm] .aux40.180l4_3_18:
// [Asm] # control
// [Asm]   mv v25, v8  # live: [v25]
// [Asm]   j .aux40.180l4_3_19  # live: [v25]
// [Asm] 
// [Asm] # leaf false
// [Asm] read_ch_until_newline_or_eof1l0_0:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v10, a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v2]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof1l0_0_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call minimbt_read_char  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   li v10, 10  # live: [v10, v2]
// [Asm]   beq v2, v10, .read_ch_until_newline_or_eof1l0_0_1  # live: [v2]
// [Asm] 
// [Asm] # block info: defs: [v9], uses: [v9, v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v2]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof1l0_0_2:
// [Asm] # control
// [Asm]   li v9, 13  # live: [v9, v2]
// [Asm]   bne v2, v9, .read_ch_until_newline_or_eof1l0_0_4  # live: [v2]
// [Asm] 
// [Asm] # block info: defs: [v5, v8], uses: [v8], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof1l0_0_3:
// [Asm] # control
// [Asm]   li v8, -1  # live: [v8]
// [Asm]   mv v5, v8  # live: [v5]
// [Asm] 
// [Asm] # block info: defs: [v6], uses: [v5], upward_exposed: [v5], params_defs: [v5]
// [Asm] # live_in: [v5], live_out: [v6]
// [Asm] # block parameters: [v5]
// [Asm] .read_ch_until_newline_or_eof1l0_0_5:
// [Asm] # control
// [Asm]   mv v6, v5  # live: [v6]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v6, a0], upward_exposed: [v6], params_defs: [v6]
// [Asm] # live_in: [v6], live_out: []
// [Asm] # block parameters: [v6]
// [Asm] .read_ch_until_newline_or_eof1l0_0_6:
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v6, v7], uses: [v7], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v6]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof1l0_0_1:
// [Asm] # control
// [Asm]   li v7, -1  # live: [v7]
// [Asm]   mv v6, v7  # live: [v6]
// [Asm]   j .read_ch_until_newline_or_eof1l0_0_6  # live: [v6]
// [Asm] 
// [Asm] # block info: defs: [v5], uses: [v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof1l0_0_4:
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v5]
// [Asm]   j .read_ch_until_newline_or_eof1l0_0_5  # live: [v5]
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_12:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_12_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main136l1_5  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] read_prog140l2_4:
// [Asm] # block info: defs: [v3, v7, v8, v2], uses: [v3, a1, a0, v2], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, s11, a0, zero], live_out: [v8, s11, zero, v7]
// [Asm] # block parameters: []
// [Asm] .read_prog140l2_4_5:
// [Asm]   # save_ctx1  # live: [a1, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, s11, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, s11, zero, v3]
// [Asm] # control
// [Asm]   mv v7, v2  # live: [v3, s11, zero, v7]
// [Asm]   mv v8, v3  # live: [v7, s11, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, v30, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0, v9, v30], upward_exposed: [], params_defs: [v8, v7]
// [Asm] # live_in: [v7, s11, zero, v8], live_out: [v8, s11, zero, v9, v7]
// [Asm] # block parameters: [v7, v8]
// [Asm] .read_prog140l2_4_0:
// [Asm]   # save_ctx2  # live: [v8, s11, zero, v7]
// [Asm]   call read_ch_until_newline_or_eof1l0_0  # live: [v8, s11, zero, a0, v7]
// [Asm]   mv v9, a0  # live: [v8, s11, zero, v9, v7]
// [Asm]   # restore_ctx2  # live: [v8, s11, zero, v9, v7]
// [Asm] # control
// [Asm]   li v30, -1  # live: [v7, v8, s11, zero, v9, v30]
// [Asm]   bne v9, v30, .read_prog140l2_4_2  # live: [v7, s11, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [t1, v22, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, v19, ft5, ft10, v4, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, v24, a3, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v15], uses: [v5, a5, a0, v22, v7, a2, a1, s11, v24, a3, zero, a4, v8, v4, v6, v15], upward_exposed: [v8, s11, zero, v7], params_defs: []
// [Asm] # live_in: [v7, s11, zero, v8], live_out: [v19]
// [Asm] # block parameters: []
// [Asm] .read_prog140l2_4_1:
// [Asm]   addi v4, s11, -4  # live: [zero, v8, v7, v4]
// [Asm]   andi s11, v4, -8  # live: [zero, v8, v7, v4, s11]
// [Asm]   sw zero, 0(v4)  # live: [zero, v8, v7, v4, s11]
// [Asm]   li v24, 1024  # live: [zero, v8, v7, v4, s11, v24]
// [Asm]   mul v15, v24, v24  # live: [zero, v8, v7, v4, v15, s11]
// [Asm]   slliw v22, v15, 2  # live: [zero, v22, v8, v7, v4, v15, s11]
// [Asm]   sub v5, s11, v22  # live: [v5, zero, v8, v7, v4, v15]
// [Asm]   andi s11, v5, -8  # live: [v5, zero, v8, v7, v4, s11, v15]
// [Asm]   mv a1, v15  # live: [v5, zero, v8, v7, v4, s11]
// [Asm]   addi v6, s11, -4  # live: [v5, zero, v8, v7, v4, v6]
// [Asm]   andi s11, v6, -8  # live: [v5, zero, v8, v7, v4, v6]
// [Asm]   sw zero, 0(v6)  # live: [v5, zero, v8, v7, v4, v6]
// [Asm]   # save_ctx2  # live: [v5, zero, v8, v7, v4, v6]
// [Asm]   mv a0, zero  # live: [v5, zero, a0, v8, v7, v4, v6]
// [Asm]   mv a1, v4  # live: [v5, zero, a0, v8, v7, a1, v6]
// [Asm]   mv a2, v7  # live: [v5, zero, a0, v8, a2, a1, v6]
// [Asm]   mv a3, v8  # live: [v5, zero, a0, a2, a1, v6, a3]
// [Asm]   mv a4, v5  # live: [zero, a0, a4, a2, a1, v6, a3]
// [Asm]   mv a5, v6  # live: [a5, zero, a0, a4, a2, a1, a3]
// [Asm]   call aux40.180l4_3  # live: [zero, a0]
// [Asm]   mv v18, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv v19, zero  # live: [v19]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v19, a0], upward_exposed: [v19], params_defs: [v19]
// [Asm] # live_in: [v19], live_out: []
// [Asm] # block parameters: [v19]
// [Asm] .read_prog140l2_4_3:
// [Asm] # control
// [Asm]   mv a0, v19  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v28, v29, v13, v7], uses: [v29, v13, v8, v7, v28, v9], upward_exposed: [v8, v9, v7], params_defs: []
// [Asm] # live_in: [v7, s11, v9, zero, v8], live_out: [v8, s11, zero, v7]
// [Asm] # block parameters: []
// [Asm] .read_prog140l2_4_2:
// [Asm]   slliw v28, v7, 2  # live: [v8, s11, v28, zero, v9, v7]
// [Asm]   add v29, v8, v28  # live: [v7, v8, s11, zero, v9, v29]
// [Asm]   sw v9, 0(v29)  # live: [v7, s11, zero, v8]
// [Asm]   addi v13, v7, 1  # live: [s11, zero, v13, v8]
// [Asm] # control
// [Asm]   mv v7, v13  # live: [v7, s11, zero, v8]
// [Asm]   mv v8, v8  # live: [v7, s11, zero, v8]
// [Asm]   j .read_prog140l2_4_0  # live: [v7, s11, zero, v8]
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_12  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main136l1_5:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, v4, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v8, v6, a1, s11, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main136l1_5_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   li v6, 4096  # live: [v6, s11, zero]
// [Asm]   sub v2, s11, v6  # live: [zero, v2]
// [Asm]   andi s11, v2, -8  # live: [zero, v2]
// [Asm]   li v8, 1024  # live: [v8, zero, v2]
// [Asm]   mv a1, v8  # live: [zero, v2]
// [Asm]   # save_ctx2  # live: [zero, v2]
// [Asm]   mv a0, zero  # live: [zero, a0, v2]
// [Asm]   mv a1, v2  # live: [a1, zero, a0]
// [Asm]   call read_prog140l2_4  # live: [zero, a0]
// [Asm]   mv v4, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("read_ch_until_newline_or_eof", Int), args: [], body: Let(("c", Var({val: Some(Int)})), App(Var("read_char"), []), If(Eq(Var("c"), Int(10)), Neg(Int(1), kind=Some(Int)), If(Eq(Var("c"), Int(13)), Neg(Int(1), kind=Some(Int)), Var("c"))))}, LetRec({name: ("bf", Unit), args: [("len", Int), ("prog", Array(Int))], body: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), []))))
// [Knf] build_knf: Let(("c", Var({val: Some(Int)})), App(Var("read_char"), []), If(Eq(Var("c"), Int(10)), Neg(Int(1), kind=Some(Int)), If(Eq(Var("c"), Int(13)), Neg(Int(1), kind=Some(Int)), Var("c"))))
// [Knf] build_knf: App(Var("read_char"), [])
// [Knf] build_knf: If(Eq(Var("c"), Int(10)), Neg(Int(1), kind=Some(Int)), If(Eq(Var("c"), Int(13)), Neg(Int(1), kind=Some(Int)), Var("c")))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Neg(Int(1), kind=Some(Int))
// [Knf] build_knf: If(Eq(Var("c"), Int(13)), Neg(Int(1), kind=Some(Int)), Var("c"))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(13)
// [Knf] build_knf: Neg(Int(1), kind=Some(Int))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: LetRec({name: ("bf", Unit), args: [("len", Int), ("prog", Array(Int))], body: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), [])))
// [Knf] build_knf: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit)))))
// [Knf] build_knf: Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0))
// [Knf] build_knf: Prim(Int(1024), Int(1024), Mul, kind=Some(Int))
// [Knf] build_knf: Int(1024)
// [Knf] build_knf: Int(1024)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit)))
// [Knf] build_knf: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")]))))
// [Knf] build_knf: Get(Var("prog"), Var("pc"))
// [Knf] build_knf: Var("prog")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(91)
// [Knf] build_knf: App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("skip")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Prim(Var("level"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("level")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")]))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(93)
// [Knf] build_knf: If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))]))
// [Knf] build_knf: Var("level")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("skip")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Prim(Var("level"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("level")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])
// [Knf] build_knf: Var("skip")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("level")
// [Knf] build_knf: LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))
// [Knf] build_knf: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc"))))))))))
// [Knf] build_knf: Get(Var("prog"), Var("pc"))
// [Knf] build_knf: Var("prog")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(62)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc"))))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(60)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(43)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("cells"), Get(Var("ptr"), Int(0)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc"))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(45)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("cells"), Get(Var("ptr"), Int(0)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(46)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))])
// [Knf] build_knf: Get(Var("cells"), Get(Var("ptr"), Int(0)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc"))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(44)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), []))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("read_ch_until_newline_or_eof"), [])
// [Knf] build_knf: Var("read_ch_until_newline_or_eof")
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(91)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: Put(Var("next_pc"), Int(0), Var("pc"))
// [Knf] build_knf: Var("next_pc")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))
// [Knf] build_knf: Get(Var("cells"), Get(Var("ptr"), Int(0)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit)
// [Knf] build_knf: Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)]))
// [Knf] build_knf: Var("next_pc")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])
// [Knf] build_knf: Var("skip")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), []))
// [Knf] build_knf: Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Var("next_pc")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("lp"), [])
// [Knf] build_knf: Var("lp")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("lp"), [])
// [Knf] build_knf: Var("lp")
// [Knf] build_knf: App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("next_pc"), Int(0))
// [Knf] build_knf: Var("next_pc")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc"))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(93)
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit)
// [Knf] build_knf: App(Var("aux"), [Int(0)])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))
// [Knf] build_knf: Int(1024)
// [Knf] build_knf: Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit)))
// [Knf] build_knf: Array(Var("len"), Int(0))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))
// [Knf] build_knf: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: App(Var("read_ch_until_newline_or_eof"), [])
// [Knf] build_knf: Var("read_ch_until_newline_or_eof")
// [Knf] build_knf: If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Neg(Int(1), kind=Some(Int))
// [Knf] build_knf: App(Var("bf"), [Var("i"), Var("prog")])
// [Knf] build_knf: Var("bf")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("prog")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("prog"), Var("i"), Var("x"))
// [Knf] build_knf: Var("prog")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("read_prog")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit)
// [Knf] build_knf: App(Var("read_prog"), [Int(0)])
// [Knf] build_knf: Var("read_prog")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux40.180l4_3
// [Main]   .type aux40.180l4_3, @function
// [Main] # leaf false
// [Main] aux40.180l4_3:
// [Main] .aux40.180l4_3_29:
// [Main]   addi sp, sp, -64
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   sd s6, 56(sp)
// [Main]   mv s3, a0
// [Main]   mv s5, a1
// [Main]   mv s1, a2
// [Main]   mv s0, a3
// [Main]   mv s4, a4
// [Main]   mv s2, a5
// [Main] 
// [Main] .aux40.180l4_3_0:
// [Main]   bge s3, s1, .aux40.180l4_3_1
// [Main] 
// [Main] .aux40.180l4_3_2:
// [Main]   slliw a0, s3, 2
// [Main]   add a0, s0, a0
// [Main]   lw a1, 0(a0)
// [Main]   li a0, 62
// [Main]   beq a1, a0, .aux40.180l4_3_3
// [Main] 
// [Main] .aux40.180l4_3_4:
// [Main]   li a0, 60
// [Main]   beq a1, a0, .aux40.180l4_3_5
// [Main] 
// [Main] .aux40.180l4_3_6:
// [Main]   li a0, 43
// [Main]   beq a1, a0, .aux40.180l4_3_7
// [Main] 
// [Main] .aux40.180l4_3_8:
// [Main]   li a0, 45
// [Main]   beq a1, a0, .aux40.180l4_3_9
// [Main] 
// [Main] .aux40.180l4_3_10:
// [Main]   li a0, 46
// [Main]   beq a1, a0, .aux40.180l4_3_11
// [Main] 
// [Main] .aux40.180l4_3_12:
// [Main]   li a0, 44
// [Main]   beq a1, a0, .aux40.180l4_3_13
// [Main] 
// [Main] .aux40.180l4_3_14:
// [Main]   li a0, 91
// [Main]   beq a1, a0, .aux40.180l4_3_15
// [Main] 
// [Main] .aux40.180l4_3_16:
// [Main]   li a0, 93
// [Main]   bne a1, a0, .aux40.180l4_3_18
// [Main] 
// [Main] .aux40.180l4_3_17:
// [Main]   mv a0, s3
// [Main] 
// [Main] .aux40.180l4_3_19:
// [Main] 
// [Main] .aux40.180l4_3_20:
// [Main] 
// [Main] .aux40.180l4_3_21:
// [Main] 
// [Main] .aux40.180l4_3_22:
// [Main] 
// [Main] .aux40.180l4_3_23:
// [Main] 
// [Main] .aux40.180l4_3_24:
// [Main] 
// [Main] .aux40.180l4_3_25:
// [Main] 
// [Main] .aux40.180l4_3_26:
// [Main] 
// [Main] .aux40.180l4_3_27:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   ld s6, 56(sp)
// [Main]   addi sp, sp, 64
// [Main]   ret
// [Main] 
// [Main] .aux40.180l4_3_1:
// [Main]   mv a0, s3
// [Main]   j .aux40.180l4_3_27
// [Main] 
// [Main] .aux40.180l4_3_3:
// [Main]   lw a0, 0(s5)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s5)
// [Main]   addi a0, s3, 1
// [Main]   mv s3, a0
// [Main]   j .aux40.180l4_3_0
// [Main] 
// [Main] .aux40.180l4_3_5:
// [Main]   lw a0, 0(s5)
// [Main]   addi a0, a0, -1
// [Main]   sw a0, 0(s5)
// [Main]   addi a0, s3, 1
// [Main]   mv s3, a0
// [Main]   j .aux40.180l4_3_0
// [Main] 
// [Main] .aux40.180l4_3_7:
// [Main]   lw a0, 0(s5)
// [Main]   slliw a0, a0, 2
// [Main]   add a1, s4, a0
// [Main]   lw a1, 0(a1)
// [Main]   addi a1, a1, 1
// [Main]   add a0, s4, a0
// [Main]   sw a1, 0(a0)
// [Main]   addi a0, s3, 1
// [Main]   mv s3, a0
// [Main]   j .aux40.180l4_3_0
// [Main] 
// [Main] .aux40.180l4_3_9:
// [Main]   lw a0, 0(s5)
// [Main]   slliw a0, a0, 2
// [Main]   add a1, s4, a0
// [Main]   lw a1, 0(a1)
// [Main]   addi a1, a1, -1
// [Main]   add a0, s4, a0
// [Main]   sw a1, 0(a0)
// [Main]   addi a0, s3, 1
// [Main]   mv s3, a0
// [Main]   j .aux40.180l4_3_0
// [Main] 
// [Main] .aux40.180l4_3_11:
// [Main]   lw a0, 0(s5)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s4, a0
// [Main]   lw a0, 0(a0)
// [Main]   call minimbt_print_char
// [Main]   addi a0, s3, 1
// [Main]   mv s3, a0
// [Main]   j .aux40.180l4_3_0
// [Main] 
// [Main] .aux40.180l4_3_13:
// [Main]   lw s6, 0(s5)
// [Main]   call read_ch_until_newline_or_eof1l0_0
// [Main]   slliw a1, s6, 2
// [Main]   add a1, s4, a1
// [Main]   sw a0, 0(a1)
// [Main]   addi a0, s3, 1
// [Main]   mv s3, a0
// [Main]   j .aux40.180l4_3_0
// [Main] 
// [Main] .aux40.180l4_3_15:
// [Main]   sw s3, 0(s2)
// [Main] 
// [Main] .aux40.180l4_3_54:
// [Main] 
// [Main] .aux40.180l4_3_49:
// [Main]   lw a0, 0(s5)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s4, a0
// [Main]   lw a0, 0(a0)
// [Main]   beq a0, zero, .aux40.180l4_3_50
// [Main] 
// [Main] .aux40.180l4_3_51:
// [Main]   addi a0, s3, 1
// [Main]   mv a1, s5
// [Main]   mv a2, s1
// [Main]   mv a3, s0
// [Main]   mv a4, s4
// [Main]   mv a5, s2
// [Main]   call aux40.180l4_3
// [Main]   sw a0, 0(s2)
// [Main]   j .aux40.180l4_3_49
// [Main] 
// [Main] .aux40.180l4_3_50:
// [Main]   addi a0, s3, 1
// [Main] 
// [Main] .aux40.180l4_3_72:
// [Main]   mv a1, a0
// [Main]   mv a0, zero
// [Main]   mv a2, s1
// [Main]   mv a3, s0
// [Main] 
// [Main] .aux40.180l4_3_58:
// [Main]   bge a1, a2, .aux40.180l4_3_59
// [Main] 
// [Main] .aux40.180l4_3_60:
// [Main]   slliw a4, a1, 2
// [Main]   add a4, a3, a4
// [Main]   lw a5, 0(a4)
// [Main]   li a4, 91
// [Main]   beq a5, a4, .aux40.180l4_3_61
// [Main] 
// [Main] .aux40.180l4_3_62:
// [Main]   li a4, 93
// [Main]   bne a5, a4, .aux40.180l4_3_64
// [Main] 
// [Main] .aux40.180l4_3_63:
// [Main]   beq a0, zero, .aux40.180l4_3_65
// [Main] 
// [Main] .aux40.180l4_3_66:
// [Main]   addi a1, a1, 1
// [Main]   addi a0, a0, -1
// [Main]   j .aux40.180l4_3_58
// [Main] 
// [Main] .aux40.180l4_3_59:
// [Main]   mv a0, a1
// [Main] 
// [Main] .aux40.180l4_3_70:
// [Main] 
// [Main] .aux40.180l4_3_55:
// [Main]   sw a0, 0(s2)
// [Main]   mv a0, zero
// [Main] 
// [Main] .aux40.180l4_3_52:
// [Main] 
// [Main] .aux40.180l4_3_30:
// [Main]   lw a0, 0(s2)
// [Main]   addi a0, a0, 1
// [Main]   mv s3, a0
// [Main]   j .aux40.180l4_3_0
// [Main] 
// [Main] .aux40.180l4_3_61:
// [Main]   addi a1, a1, 1
// [Main]   addi a0, a0, 1
// [Main]   j .aux40.180l4_3_58
// [Main] 
// [Main] .aux40.180l4_3_64:
// [Main]   addi a1, a1, 1
// [Main]   j .aux40.180l4_3_58
// [Main] 
// [Main] .aux40.180l4_3_65:
// [Main]   mv a0, a1
// [Main] 
// [Main] .aux40.180l4_3_67:
// [Main] 
// [Main] .aux40.180l4_3_68:
// [Main] 
// [Main] .aux40.180l4_3_69:
// [Main]   j .aux40.180l4_3_70
// [Main] 
// [Main] .aux40.180l4_3_18:
// [Main]   mv a0, s3
// [Main]   j .aux40.180l4_3_19
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl read_ch_until_newline_or_eof1l0_0
// [Main]   .type read_ch_until_newline_or_eof1l0_0, @function
// [Main] # leaf false
// [Main] read_ch_until_newline_or_eof1l0_0:
// [Main] .read_ch_until_newline_or_eof1l0_0_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call minimbt_read_char
// [Main]   li a1, 10
// [Main]   beq a0, a1, .read_ch_until_newline_or_eof1l0_0_1
// [Main] 
// [Main] .read_ch_until_newline_or_eof1l0_0_2:
// [Main]   li a1, 13
// [Main]   bne a0, a1, .read_ch_until_newline_or_eof1l0_0_4
// [Main] 
// [Main] .read_ch_until_newline_or_eof1l0_0_3:
// [Main]   li a0, -1
// [Main] 
// [Main] .read_ch_until_newline_or_eof1l0_0_5:
// [Main] 
// [Main] .read_ch_until_newline_or_eof1l0_0_6:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .read_ch_until_newline_or_eof1l0_0_1:
// [Main]   li a0, -1
// [Main]   j .read_ch_until_newline_or_eof1l0_0_6
// [Main] 
// [Main] .read_ch_until_newline_or_eof1l0_0_4:
// [Main]   j .read_ch_until_newline_or_eof1l0_0_5
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_12
// [Main]   .type T$start_12, @function
// [Main] # leaf false
// [Main] T$start_12:
// [Main] .T$start_12_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main136l1_5
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl read_prog140l2_4
// [Main]   .type read_prog140l2_4, @function
// [Main] # leaf false
// [Main] read_prog140l2_4:
// [Main] .read_prog140l2_4_5:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main] 
// [Main] .read_prog140l2_4_0:
// [Main]   call read_ch_until_newline_or_eof1l0_0
// [Main]   li a1, -1
// [Main]   bne a0, a1, .read_prog140l2_4_2
// [Main] 
// [Main] .read_prog140l2_4_1:
// [Main]   addi a2, s11, -4
// [Main]   andi s11, a2, -8
// [Main]   sw zero, 0(a2)
// [Main]   li a0, 1024
// [Main]   mul a0, a0, a0
// [Main]   slliw a1, a0, 2
// [Main]   sub a4, s11, a1
// [Main]   andi s11, a4, -8
// [Main]   mv a1, a0
// [Main]   addi a5, s11, -4
// [Main]   andi s11, a5, -8
// [Main]   sw zero, 0(a5)
// [Main]   mv a0, zero
// [Main]   mv a1, a2
// [Main]   mv a2, s0
// [Main]   mv a3, s1
// [Main]   call aux40.180l4_3
// [Main]   mv a0, zero
// [Main] 
// [Main] .read_prog140l2_4_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .read_prog140l2_4_2:
// [Main]   slliw a1, s0, 2
// [Main]   add a1, s1, a1
// [Main]   sw a0, 0(a1)
// [Main]   addi a0, s0, 1
// [Main]   mv s0, a0
// [Main]   j .read_prog140l2_4_0
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_12
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main136l1_5
// [Main]   .type main136l1_5, @function
// [Main] # leaf false
// [Main] main136l1_5:
// [Main] .main136l1_5_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   li a0, 4096
// [Main]   sub a2, s11, a0
// [Main]   andi s11, a2, -8
// [Main]   li a0, 1024
// [Main]   mv a1, a0
// [Main]   mv a0, zero
// [Main]   mv a1, a2
// [Main]   call read_prog140l2_4
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function T$start_12
// [Wasm] Lowering insn Call(ty=Unit, f=f5, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start_12 to wasm
// [Wasm] Lowering function read_prog140l2_4
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Int32(val=1024), Int32(val=1024)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m1, fills=[Zero])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m2, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Lowering insn Call(ty=Int32, f=f3, args=[Int32(val=0), Mem(fref=f4, mref=m0), BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Mem(fref=f4, mref=m1), Mem(fref=f4, mref=m2)])
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), offset=BlockParam(bref=b0, bpref=$b.0), width=@32), val=Insn(iref=%0))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%8), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Lowering insn Call(ty=Int32, f=f0, args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=-1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f4, fpref=$f.0), FnParam(fref=f4, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Local Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function read_prog140l2_4 to wasm
// [Wasm] Lowering function main136l1_5
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[Int32(val=0), Mem(fref=f5, mref=m0)])
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Local Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Lowered function main136l1_5 to wasm
// [Wasm] Lowering function aux40.180l4_3
// [Wasm] Lowering control Return(args=[BlockParam(bref=b27, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Lowering control Jump(target=b27, args=[BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%3), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32), val=Insn(iref=%4))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%6), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%9), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32), val=Insn(iref=%10))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%12), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), offset=Insn(iref=%15), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%17), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), offset=Insn(iref=%15), width=@32), val=Insn(iref=%18))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%20), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), offset=Insn(iref=%23), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%25), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), offset=Insn(iref=%23), width=@32), val=Insn(iref=%26))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%28), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), offset=Insn(iref=%31), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Insn(iref=%32)])
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%34), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Lowering insn Call(ty=Int32, f=f0, args=[])
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), offset=Insn(iref=%37), width=@32), val=Insn(iref=%38))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%40), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.5), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%45), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%46), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering control Jump(target=b30, args=[BlockParam(bref=b52, bpref=$b.0)])
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b49, bpref=$b.5), index=0, width=@32), val=BlockParam(bref=b55, bpref=$b.0))
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.5) -> $b49.$b.5
// [Wasm] Get Local name BlockParam(bref=b55, bpref=$b.0) -> $b55.$b.0
// [Wasm] Lowering control Jump(target=b52, args=[Unit])
// [Wasm] Lowering control Jump(target=b55, args=[BlockParam(bref=b70, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b70, bpref=$b.0) -> $b70.$b.0
// [Wasm] Get Local name BlockParam(bref=b55, bpref=$b.0) -> $b55.$b.0
// [Wasm] Lowering control Jump(target=b70, args=[BlockParam(bref=b58, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Get Local name BlockParam(bref=b70, bpref=$b.0) -> $b70.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b58, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Get Local name Insn(iref=%61) -> $%61
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b58, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.1) -> $b58.$b.1
// [Wasm] Get Local name Insn(iref=%62) -> $%62
// [Wasm] Lowering control Jump(target=b58, args=[Insn(iref=%61), Insn(iref=%62), BlockParam(bref=b58, bpref=$b.2), BlockParam(bref=b58, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%61) -> $%61
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Get Local name Insn(iref=%62) -> $%62
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.1) -> $b58.$b.1
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.2) -> $b58.$b.2
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.2) -> $b58.$b.2
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.3) -> $b58.$b.3
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.3) -> $b58.$b.3
// [Wasm] Lowering control Jump(target=b70, args=[BlockParam(bref=b69, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b69, bpref=$b.0) -> $b69.$b.0
// [Wasm] Get Local name BlockParam(bref=b70, bpref=$b.0) -> $b70.$b.0
// [Wasm] Lowering control Jump(target=b69, args=[BlockParam(bref=b68, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b68, bpref=$b.0) -> $b68.$b.0
// [Wasm] Get Local name BlockParam(bref=b69, bpref=$b.0) -> $b69.$b.0
// [Wasm] Lowering control Jump(target=b68, args=[BlockParam(bref=b67, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b67, bpref=$b.0) -> $b67.$b.0
// [Wasm] Get Local name BlockParam(bref=b68, bpref=$b.0) -> $b68.$b.0
// [Wasm] Lowering control Jump(target=b67, args=[BlockParam(bref=b58, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Get Local name BlockParam(bref=b67, bpref=$b.0) -> $b67.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b58, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Get Local name Insn(iref=%66) -> $%66
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b58, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.1) -> $b58.$b.1
// [Wasm] Get Local name Insn(iref=%67) -> $%67
// [Wasm] Lowering control Jump(target=b58, args=[Insn(iref=%66), Insn(iref=%67), BlockParam(bref=b58, bpref=$b.2), BlockParam(bref=b58, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%66) -> $%66
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Get Local name Insn(iref=%67) -> $%67
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.1) -> $b58.$b.1
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.2) -> $b58.$b.2
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.2) -> $b58.$b.2
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.3) -> $b58.$b.3
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.3) -> $b58.$b.3
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b58, bpref=$b.1), Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.1) -> $b58.$b.1
// [Wasm] Get Local name Insn(iref=%65) -> $%65
// [Wasm] Lowering control Branch(cond=Insn(iref=%65), t=b65, t_args=[], f=b66, f_args=[])
// [Wasm] Get Local name Insn(iref=%65) -> $%65
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b58, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Get Local name Insn(iref=%69) -> $%69
// [Wasm] Lowering control Jump(target=b58, args=[Insn(iref=%69), BlockParam(bref=b58, bpref=$b.1), BlockParam(bref=b58, bpref=$b.2), BlockParam(bref=b58, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%69) -> $%69
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.1) -> $b58.$b.1
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.1) -> $b58.$b.1
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.2) -> $b58.$b.2
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.2) -> $b58.$b.2
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.3) -> $b58.$b.3
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.3) -> $b58.$b.3
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%59), Int32(val=93)])
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Get Local name Insn(iref=%64) -> $%64
// [Wasm] Lowering control Branch(cond=Insn(iref=%64), t=b63, t_args=[], f=b64, f_args=[])
// [Wasm] Get Local name Insn(iref=%64) -> $%64
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b58, bpref=$b.3), offset=BlockParam(bref=b58, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.3) -> $b58.$b.3
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%59), Int32(val=91)])
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Get Local name Insn(iref=%60) -> $%60
// [Wasm] Lowering control Branch(cond=Insn(iref=%60), t=b61, t_args=[], f=b62, f_args=[])
// [Wasm] Get Local name Insn(iref=%60) -> $%60
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b58, bpref=$b.2), BlockParam(bref=b58, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.2) -> $b58.$b.2
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Get Local name Insn(iref=%58) -> $%58
// [Wasm] Lowering control Branch(cond=Insn(iref=%58), t=b59, t_args=[], f=b60, f_args=[])
// [Wasm] Get Local name Insn(iref=%58) -> $%58
// [Wasm] Lowering control Jump(target=b71, args=[Insn(iref=%52), Int32(val=0), BlockParam(bref=b49, bpref=$b.1), BlockParam(bref=b49, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%52) -> $%52
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.1) -> $b58.$b.1
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.1) -> $b49.$b.1
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.2) -> $b58.$b.2
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.3) -> $b49.$b.3
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.3) -> $b58.$b.3
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b49, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.2) -> $b49.$b.2
// [Wasm] Get Local name Insn(iref=%52) -> $%52
// [Wasm] Lowering control Jump(target=b72, args=[])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b49, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.2) -> $b49.$b.2
// [Wasm] Get Local name Insn(iref=%55) -> $%55
// [Wasm] Lowering insn Call(ty=Int32, f=f3, args=[Insn(iref=%55), BlockParam(bref=b49, bpref=$b.0), BlockParam(bref=b49, bpref=$b.1), BlockParam(bref=b49, bpref=$b.3), BlockParam(bref=b49, bpref=$b.4), BlockParam(bref=b49, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%55) -> $%55
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.0) -> $b49.$b.0
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.1) -> $b49.$b.1
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.3) -> $b49.$b.3
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.4) -> $b49.$b.4
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.5) -> $b49.$b.5
// [Wasm] Get Local name Insn(iref=%56) -> $%56
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b49, bpref=$b.5), index=0, width=@32), val=Insn(iref=%56))
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.5) -> $b49.$b.5
// [Wasm] Get Local name Insn(iref=%56) -> $%56
// [Wasm] Lowering control Jump(target=b49, args=[BlockParam(bref=b49, bpref=$b.0), BlockParam(bref=b49, bpref=$b.1), BlockParam(bref=b49, bpref=$b.2), BlockParam(bref=b49, bpref=$b.3), BlockParam(bref=b49, bpref=$b.4), BlockParam(bref=b49, bpref=$b.5)])
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.0) -> $b49.$b.0
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.0) -> $b49.$b.0
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.1) -> $b49.$b.1
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.1) -> $b49.$b.1
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.2) -> $b49.$b.2
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.2) -> $b49.$b.2
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.3) -> $b49.$b.3
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.3) -> $b49.$b.3
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.4) -> $b49.$b.4
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.4) -> $b49.$b.4
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.5) -> $b49.$b.5
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.5) -> $b49.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b49, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.0) -> $b49.$b.0
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b49, bpref=$b.4), offset=Insn(iref=%49), width=@32))
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.4) -> $b49.$b.4
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Get Local name Insn(iref=%50) -> $%50
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%50), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%50) -> $%50
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Lowering control Branch(cond=Insn(iref=%51), t=b50, t_args=[], f=b51, f_args=[])
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Lowering control Jump(target=b53, args=[BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.0) -> $b49.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.1) -> $b49.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.2) -> $b49.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.3) -> $b49.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.4) -> $b49.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.5) -> $b49.$b.5
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.5), index=0, width=@32), val=BlockParam(bref=b0, bpref=$b.0))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering control Jump(target=b54, args=[])
// [Wasm] Lowering control Jump(target=b27, args=[BlockParam(bref=b26, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Lowering control Jump(target=b26, args=[BlockParam(bref=b25, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.0) -> $b25.$b.0
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Lowering control Jump(target=b25, args=[BlockParam(bref=b24, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b24, bpref=$b.0) -> $b24.$b.0
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.0) -> $b25.$b.0
// [Wasm] Lowering control Jump(target=b24, args=[BlockParam(bref=b23, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.0) -> $b23.$b.0
// [Wasm] Get Local name BlockParam(bref=b24, bpref=$b.0) -> $b24.$b.0
// [Wasm] Lowering control Jump(target=b23, args=[BlockParam(bref=b22, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b22, bpref=$b.0) -> $b22.$b.0
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.0) -> $b23.$b.0
// [Wasm] Lowering control Jump(target=b22, args=[BlockParam(bref=b21, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.0) -> $b21.$b.0
// [Wasm] Get Local name BlockParam(bref=b22, bpref=$b.0) -> $b22.$b.0
// [Wasm] Lowering control Jump(target=b21, args=[BlockParam(bref=b20, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.0) -> $b21.$b.0
// [Wasm] Lowering control Jump(target=b20, args=[BlockParam(bref=b19, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.0) -> $b19.$b.0
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Lowering control Jump(target=b19, args=[BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.0) -> $b19.$b.0
// [Wasm] Lowering control Jump(target=b19, args=[BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.0) -> $b19.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=93)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Lowering control Branch(cond=Insn(iref=%48), t=b17, t_args=[], f=b18, f_args=[])
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=91)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering control Branch(cond=Insn(iref=%42), t=b15, t_args=[], f=b16, f_args=[])
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=44)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering control Branch(cond=Insn(iref=%36), t=b13, t_args=[], f=b14, f_args=[])
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=46)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering control Branch(cond=Insn(iref=%30), t=b11, t_args=[], f=b12, f_args=[])
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=45)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering control Branch(cond=Insn(iref=%22), t=b9, t_args=[], f=b10, f_args=[])
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=43)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering control Branch(cond=Insn(iref=%14), t=b7, t_args=[], f=b8, f_args=[])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=60)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering control Branch(cond=Insn(iref=%8), t=b5, t_args=[], f=b6, f_args=[])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.3), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=62)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b28, args=[FnParam(fref=f3, fpref=$f.0), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.5) -> $$f.5
// [Wasm] Local BlockParam(bref=b69, bpref=$b.0) -> $b69.$b.0
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local BlockParam(bref=b49, bpref=$b.4) -> $b49.$b.4
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b49, bpref=$b.0) -> $b49.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Local Insn(iref=%25) -> $%25
// [Wasm] Local Insn(iref=%59) -> $%59
// [Wasm] Local BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Local BlockParam(bref=b67, bpref=$b.0) -> $b67.$b.0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local BlockParam(bref=b25, bpref=$b.0) -> $b25.$b.0
// [Wasm] Local Insn(iref=%56) -> $%56
// [Wasm] Local Insn(iref=%49) -> $%49
// [Wasm] Local Insn(iref=%42) -> $%42
// [Wasm] Local Insn(iref=%65) -> $%65
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local BlockParam(bref=b49, bpref=$b.2) -> $b49.$b.2
// [Wasm] Local BlockParam(bref=b49, bpref=$b.5) -> $b49.$b.5
// [Wasm] Local BlockParam(bref=b23, bpref=$b.0) -> $b23.$b.0
// [Wasm] Local BlockParam(bref=b24, bpref=$b.0) -> $b24.$b.0
// [Wasm] Local Insn(iref=%31) -> $%31
// [Wasm] Local Insn(iref=%64) -> $%64
// [Wasm] Local BlockParam(bref=b19, bpref=$b.0) -> $b19.$b.0
// [Wasm] Local BlockParam(bref=b22, bpref=$b.0) -> $b22.$b.0
// [Wasm] Local Insn(iref=%38) -> $%38
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local Insn(iref=%67) -> $%67
// [Wasm] Local Insn(iref=%60) -> $%60
// [Wasm] Local BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Local Insn(iref=%55) -> $%55
// [Wasm] Local Insn(iref=%66) -> $%66
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%48) -> $%48
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local BlockParam(bref=b21, bpref=$b.0) -> $b21.$b.0
// [Wasm] Local BlockParam(bref=b58, bpref=$b.2) -> $b58.$b.2
// [Wasm] Local Insn(iref=%34) -> $%34
// [Wasm] Local BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Local Insn(iref=%36) -> $%36
// [Wasm] Local BlockParam(bref=b70, bpref=$b.0) -> $b70.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local Insn(iref=%50) -> $%50
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%51) -> $%51
// [Wasm] Local BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Local Insn(iref=%52) -> $%52
// [Wasm] Local BlockParam(bref=b68, bpref=$b.0) -> $b68.$b.0
// [Wasm] Local Insn(iref=%32) -> $%32
// [Wasm] Local Insn(iref=%58) -> $%58
// [Wasm] Local BlockParam(bref=b58, bpref=$b.1) -> $b58.$b.1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b55, bpref=$b.0) -> $b55.$b.0
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%62) -> $%62
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local Insn(iref=%46) -> $%46
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%37) -> $%37
// [Wasm] Local BlockParam(bref=b58, bpref=$b.3) -> $b58.$b.3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local Insn(iref=%45) -> $%45
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local BlockParam(bref=b49, bpref=$b.3) -> $b49.$b.3
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%61) -> $%61
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%30) -> $%30
// [Wasm] Local Insn(iref=%40) -> $%40
// [Wasm] Local Insn(iref=%69) -> $%69
// [Wasm] Local BlockParam(bref=b49, bpref=$b.1) -> $b49.$b.1
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function aux40.180l4_3 to wasm
// [Wasm] Lowering function read_ch_until_newline_or_eof1l0_0
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[Int32(val=-1)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[Int32(val=-1)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=13)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_char", args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=10)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function read_ch_until_newline_or_eof1l0_0 to wasm
// [KnfOpt] freq: {read_ch_until_newline_or_eof1: Many(2), bf5: Once, skip21: Many(4), aux40: Many(9), lp108: Many(2), main136: Once, read_prog140: Many(2)}
// [KnfOpt] Inline threshold 4 37
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 4 37
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 4 37
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 9 181
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 9 181
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 9 181
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 9 181
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 9 181
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 9 181
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 4 37
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 9 181
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 33
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 33
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 9 181
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 9 181
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] Knf inline Some(bf5)
// [KnfOpt] Inline threshold 2 13
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 13
// [KnfOpt] Inline decision rejected
// [KnfOpt] Numbers of let rec: 6 6 0
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %9: Call(ty=Unit, f=f4, args=[Insn(iref=%8), FnParam(fref=f4, fpref=$f.1)])
// [CoreOpt] eliminated tail rec call %5: Call(ty=Int32, f=f1, args=[Insn(iref=%3), Insn(iref=%4), FnParam(fref=f1, fpref=$f.2), FnParam(fref=f1, fpref=$f.3)])
// [CoreOpt] eliminated tail rec call %12: Call(ty=Int32, f=f1, args=[Insn(iref=%11), FnParam(fref=f1, fpref=$f.1), FnParam(fref=f1, fpref=$f.2), FnParam(fref=f1, fpref=$f.3)])
// [CoreOpt] eliminated tail rec call %10: Call(ty=Int32, f=f1, args=[Insn(iref=%8), Insn(iref=%9), FnParam(fref=f1, fpref=$f.2), FnParam(fref=f1, fpref=$f.3)])
// [CoreOpt] eliminated tail rec call %9: Call(ty=Unit, f=f2, args=[FnParam(fref=f2, fpref=$f.0), FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.2), FnParam(fref=f2, fpref=$f.3), FnParam(fref=f2, fpref=$f.4), FnParam(fref=f2, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %7: Call(ty=Int32, f=f3, args=[Insn(iref=%6), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %13: Call(ty=Int32, f=f3, args=[Insn(iref=%12), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %21: Call(ty=Int32, f=f3, args=[Insn(iref=%20), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %29: Call(ty=Int32, f=f3, args=[Insn(iref=%28), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %35: Call(ty=Int32, f=f3, args=[Insn(iref=%34), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %41: Call(ty=Int32, f=f3, args=[Insn(iref=%40), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %47: Call(ty=Int32, f=f3, args=[Insn(iref=%46), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5)])
// [CoreOpt] Call frequnce: FnCallFreq({f12: Once, f4: Once, f1: Once, f5: Once, f2: Once, f3: Multiple, f0: Multiple})
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] lp108.240l5_2 is inlining Call(ty=Int32, f=f1, args=[Insn(iref=%3), Int32(val=0), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.3)])
// [CoreOpt] shifted callee .fn skip21.163l3_1 #f1 : fn(int32, int32, int32, array[int32]) -> int32
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b23 {
// [CoreOpt]   .bb #b9 (int32, int32, int32, array[int32]) {
// [CoreOpt]     let %9: bool = le($b9.2, $b9.0)
// [CoreOpt]     br %9 b10() b11()
// [CoreOpt]   }
// [CoreOpt]   .bb #b10 () {
// [CoreOpt]     jump b21($b9.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b11 () {
// [CoreOpt]     let %10: int32 = load int32 offset($b9.3, $b9.0 * @32)
// [CoreOpt]     let %11: bool = eq(%10, 91)
// [CoreOpt]     br %11 b12() b13()
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 () {
// [CoreOpt]     let %12: int32 = add($b9.0, 1)
// [CoreOpt]     let %13: int32 = add($b9.1, 1)
// [CoreOpt]     jump b9(%12, %13, $b9.2, $b9.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b13 () {
// [CoreOpt]     let %15: bool = eq(%10, 93)
// [CoreOpt]     br %15 b14() b15()
// [CoreOpt]   }
// [CoreOpt]   .bb #b14 () {
// [CoreOpt]     let %16: bool = eq($b9.1, 0)
// [CoreOpt]     br %16 b16() b17()
// [CoreOpt]   }
// [CoreOpt]   .bb #b15 () {
// [CoreOpt]     let %20: int32 = add($b9.0, 1)
// [CoreOpt]     jump b9(%20, $b9.1, $b9.2, $b9.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b16 () {
// [CoreOpt]     jump b18($b9.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b17 () {
// [CoreOpt]     let %17: int32 = add($b9.0, 1)
// [CoreOpt]     let %18: int32 = sub($b9.1, 1)
// [CoreOpt]     jump b9(%17, %18, $b9.2, $b9.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b18 (int32) {
// [CoreOpt]     jump b19($b18.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b19 (int32) {
// [CoreOpt]     jump b20($b19.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b20 (int32) {
// [CoreOpt]     jump b21($b20.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b21 (int32) {
// [CoreOpt]     return $b21.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b22 pre #Some(b23) header #b9 {
// [CoreOpt]     .block #b15
// [CoreOpt]     .block #b21
// [CoreOpt]     .block #b13
// [CoreOpt]     .block #b17
// [CoreOpt]     .block #b18
// [CoreOpt]     .block #b10
// [CoreOpt]     .block #b19
// [CoreOpt]     .block #b20
// [CoreOpt]     .block #b14
// [CoreOpt]     .block #b11
// [CoreOpt]     .block #b12
// [CoreOpt]     .block #b16
// [CoreOpt]   }
// [CoreOpt]   .bb #b23 () {
// [CoreOpt]     jump b22($f0, $f1, $f2, $f3)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] aux40.180l4_3 is inlining Call(ty=Unit, f=f2, args=[BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [CoreOpt] shifted callee .fn lp108.240l5_2 #f2 : fn(array[int32], int32, int32, array[int32], array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b54 {
// [CoreOpt]   .bb #b49 (array[int32], int32, int32, array[int32], array[int32], array[int32]) {
// [CoreOpt]     let %49: int32 = load int32 field($b49.0, 0 * @32)
// [CoreOpt]     let %50: int32 = load int32 offset($b49.4, %49 * @32)
// [CoreOpt]     let %51: bool = eq(%50, 0)
// [CoreOpt]     br %51 b50() b51()
// [CoreOpt]   }
// [CoreOpt]   .bb #b50 () {
// [CoreOpt]     let %52: int32 = add($b49.2, 1)
// [CoreOpt]     jump b72()
// [CoreOpt]   }
// [CoreOpt]   .bb #b51 () {
// [CoreOpt]     let %55: int32 = add($b49.2, 1)
// [CoreOpt]     let %56: int32 = call f3(%55, $b49.0, $b49.1, $b49.3, $b49.4, $b49.5)
// [CoreOpt]     let _ = store int32 field($b49.5, 0 * @32) <- %56
// [CoreOpt]     jump b49($b49.0, $b49.1, $b49.2, $b49.3, $b49.4, $b49.5)
// [CoreOpt]   }
// [CoreOpt]   .bb #b52 (unit) {
// [CoreOpt]     return $b52.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b53 pre #Some(b54) header #b49 {
// [CoreOpt]     .block #b50
// [CoreOpt]     .block #b51
// [CoreOpt]     .block #b52
// [CoreOpt]   }
// [CoreOpt]   .bb #b54 () {
// [CoreOpt]     jump b53($f0, $f1, $f2, $f3, $f4, $f5)
// [CoreOpt]   }
// [CoreOpt]   .bb #b55 (int32) {
// [CoreOpt]     let _ = store int32 field($b49.5, 0 * @32) <- $b55.0
// [CoreOpt]     jump b52(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b58 (int32, int32, int32, array[int32]) {
// [CoreOpt]     let %58: bool = le($b58.2, $b58.0)
// [CoreOpt]     br %58 b59() b60()
// [CoreOpt]   }
// [CoreOpt]   .bb #b59 () {
// [CoreOpt]     jump b70($b58.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b60 () {
// [CoreOpt]     let %59: int32 = load int32 offset($b58.3, $b58.0 * @32)
// [CoreOpt]     let %60: bool = eq(%59, 91)
// [CoreOpt]     br %60 b61() b62()
// [CoreOpt]   }
// [CoreOpt]   .bb #b61 () {
// [CoreOpt]     let %61: int32 = add($b58.0, 1)
// [CoreOpt]     let %62: int32 = add($b58.1, 1)
// [CoreOpt]     jump b58(%61, %62, $b58.2, $b58.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b62 () {
// [CoreOpt]     let %64: bool = eq(%59, 93)
// [CoreOpt]     br %64 b63() b64()
// [CoreOpt]   }
// [CoreOpt]   .bb #b63 () {
// [CoreOpt]     let %65: bool = eq($b58.1, 0)
// [CoreOpt]     br %65 b65() b66()
// [CoreOpt]   }
// [CoreOpt]   .bb #b64 () {
// [CoreOpt]     let %69: int32 = add($b58.0, 1)
// [CoreOpt]     jump b58(%69, $b58.1, $b58.2, $b58.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b65 () {
// [CoreOpt]     jump b67($b58.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b66 () {
// [CoreOpt]     let %66: int32 = add($b58.0, 1)
// [CoreOpt]     let %67: int32 = sub($b58.1, 1)
// [CoreOpt]     jump b58(%66, %67, $b58.2, $b58.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b67 (int32) {
// [CoreOpt]     jump b68($b67.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b68 (int32) {
// [CoreOpt]     jump b69($b68.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b69 (int32) {
// [CoreOpt]     jump b70($b69.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b70 (int32) {
// [CoreOpt]     jump b55($b70.0)
// [CoreOpt]   }
// [CoreOpt]   .loop #b71 pre #Some(b72) header #b58 {
// [CoreOpt]     .block #b64
// [CoreOpt]     .block #b70
// [CoreOpt]     .block #b62
// [CoreOpt]     .block #b66
// [CoreOpt]     .block #b67
// [CoreOpt]     .block #b59
// [CoreOpt]     .block #b68
// [CoreOpt]     .block #b69
// [CoreOpt]     .block #b63
// [CoreOpt]     .block #b60
// [CoreOpt]     .block #b61
// [CoreOpt]     .block #b65
// [CoreOpt]   }
// [CoreOpt]   .bb #b72 () {
// [CoreOpt]     jump b71(%52, 0, $b49.1, $b49.3)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f1
// [CoreOpt] Remove dead function: f2
// [CoreOpt] LVN subst Insn(iref=%24) with Insn(iref=%23)
// [CoreOpt] LVN subst Insn(iref=%16) with Insn(iref=%15)
// [CoreOpt2] LVN subst Insn(iref=%71) with Insn(iref=%72)
// [CoreOpt2] LVN subst Insn(iref=%78) with Insn(iref=%79)
