// [Asm] pre_assigned_registers: Self(fref=f6) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] Label("T$increase.7") clobbered_x: @hashset.of([a0])
// [Asm] Label("T$increase.7") clobbered_f: @hashset.of([])
// [Asm] subst   li v2, 43 ->   li a0, 43
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f12) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] Label("T$read.10") clobbered_x: @hashset.of([a0])
// [Asm] Label("T$read.10") clobbered_f: @hashset.of([])
// [Asm] subst   li v2, 44 ->   li a0, 44
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f4) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] Label("T$move_right.6") clobbered_x: @hashset.of([a0])
// [Asm] Label("T$move_right.6") clobbered_f: @hashset.of([])
// [Asm] subst   li v2, 62 ->   li a0, 62
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f8) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] Label("T$decrease.8") clobbered_x: @hashset.of([a0])
// [Asm] Label("T$decrease.8") clobbered_f: @hashset.of([])
// [Asm] subst   li v2, 45 ->   li a0, 45
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f28) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] Label("T$start") clobbered_x: @hashset.of([a0])
// [Asm] Label("T$start") clobbered_f: @hashset.of([])
// [Asm] subst   call main134.253 ->   call main134.253
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f16) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] Label("T$loop_end.12") clobbered_x: @hashset.of([a0])
// [Asm] Label("T$loop_end.12") clobbered_f: @hashset.of([])
// [Asm] subst   li v2, 93 ->   li a0, 93
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v3, BlockParam(bref=b5, bpref=$b.0) -> v5, Self(fref=f0) -> v0, BlockParam(bref=b6, bpref=$b.0) -> v6, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=13)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=10)])
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10, v2]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [v7]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [v8]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [v5]
// [Asm] defined: v6 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] Label("read_ch_until_newline_or_eof1.252") clobbered_x: @hashset.of([a1, a0])
// [Asm] Label("read_ch_until_newline_or_eof1.252") clobbered_f: @hashset.of([])
// [Asm] subst   call minimbt_read_char ->   call minimbt_read_char
// [Asm] subst   li v10, 10 ->   li a1, 10
// [Asm] subst   beq v2, v10, .read_ch_until_newline_or_eof1.252_1 ->   beq a0, a1, .read_ch_until_newline_or_eof1.252_1
// [Asm] subst   li v7, -1 ->   li a0, -1
// [Asm] subst   j .read_ch_until_newline_or_eof1.252_6 ->   j .read_ch_until_newline_or_eof1.252_6
// [Asm] subst   ret ->   ret
// [Asm] subst   li v9, 13 ->   li a1, 13
// [Asm] subst   bne v2, v9, .read_ch_until_newline_or_eof1.252_4 ->   bne a0, a1, .read_ch_until_newline_or_eof1.252_4
// [Asm] subst   li v8, -1 ->   li a0, -1
// [Asm] subst   j .read_ch_until_newline_or_eof1.252_5 ->   j .read_ch_until_newline_or_eof1.252_5
// [Asm] pre_assigned_registers: Self(fref=f10) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] Label("T$print.9") clobbered_x: @hashset.of([a0])
// [Asm] Label("T$print.9") clobbered_f: @hashset.of([])
// [Asm] subst   li v2, 46 ->   li a0, 46
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] Label("T$move_left.5") clobbered_x: @hashset.of([a0])
// [Asm] Label("T$move_left.5") clobbered_f: @hashset.of([])
// [Asm] subst   li v2, 60 ->   li a0, 60
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f14) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] Label("T$loop_start.11") clobbered_x: @hashset.of([a0])
// [Asm] Label("T$loop_start.11") clobbered_f: @hashset.of([])
// [Asm] subst   li v2, 91 ->   li a0, 91
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f21, fpref=$f.0) -> v2, FnParam(fref=f21, fpref=$f.1) -> v3, Mem(fref=f21, mref=m0) -> v4, BlockParam(bref=b3, bpref=$b.0) -> v19, Insn(iref=%9) -> v11, Insn(iref=%8) -> v13, Self(fref=f21) -> v0, BlockParam(bref=b0, bpref=$b.0) -> v7, BlockParam(bref=b0, bpref=$b.1) -> v8, Insn(iref=%5) -> v17, Insn(iref=%0) -> v9, Insn(iref=%4) -> v16, Insn(iref=%3) -> v15, Mem(fref=f21, mref=m1) -> v5, Insn(iref=%7) -> v12, Insn(iref=%2) -> v14, Insn(iref=%1) -> v10, Insn(iref=%6) -> v18, Mem(fref=f21, mref=m2) -> v6
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=-1)])
// [Asm] defs: []
// [Asm] live_set: [v7, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [s11, zero, v13, v8]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v7, s11, zero, v8]
// [Asm] move_origin: [v13]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7, s11, zero, v8]
// [Asm] move_origin: [v8]
// [Asm] defs: []
// [Asm] live_set: [v7, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v19]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v7, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v7, s11, zero, a0, v8]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v7, s11, zero, v9, v8]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v7, s11, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: [v28]
// [Asm] live_set: [v7, s11, v28, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: []
// [Asm] live_set: [v7, s11, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a1, s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, s11, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, s11, zero, v7]
// [Asm] move_origin: [v2]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, s11, zero, v8]
// [Asm] move_origin: [v3]
// [Asm] defined: v8 is X
// [Asm] defs: [v4]
// [Asm] live_set: [zero, v8, v7, v4]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v8, v7, v4, s11]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v8, v7, v4, s11]
// [Asm] move_origin: []
// [Asm] defs: [v24]
// [Asm] live_set: [zero, v8, v7, v4, s11, v24]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v15]
// [Asm] live_set: [zero, v8, v7, v4, v15, s11]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v22]
// [Asm] live_set: [zero, v22, v8, v7, v4, v15, s11]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero, v8, v7, v4, v15]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero, v8, v7, v4, s11, v15]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, v8, v7, v4, s11]
// [Asm] move_origin: [v15]
// [Asm] defined: a1 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v7, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v7, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v8, v7, v4, v6]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, a0, v8, v7, a1, v6]
// [Asm] move_origin: [v4]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, zero, a0, v8, a2, a1, v6]
// [Asm] move_origin: [v7]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v5, zero, a0, a2, a1, v6, a3]
// [Asm] move_origin: [v8]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [zero, a0, a4, a2, a1, v6, a3]
// [Asm] move_origin: [v5]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [a5, zero, a0, a4, a2, a1, a3]
// [Asm] move_origin: [v6]
// [Asm] defined: a5 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v18]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v19]
// [Asm] move_origin: [zero]
// [Asm] defined: v19 is X
// [Asm] Label("read_prog138.254") clobbered_x: @hashset.of([a5, a0, s1, a4, a2, s0, a1])
// [Asm] Label("read_prog138.254") clobbered_f: @hashset.of([])
// [Asm] subst   th.surw v9, v8, v7, 2 ->   th.surw a0, s0, s1, 2
// [Asm] subst   addi v13, v7, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v7, v13 ->   mv s1, a0
// [Asm] subst   j .read_prog138.254_0 ->   j .read_prog138.254_0
// [Asm] subst   ret ->   ret
// [Asm] subst   call read_ch_until_newline_or_eof1.252 ->   call read_ch_until_newline_or_eof1.252
// [Asm] subst   li v28, -1 ->   li a1, -1
// [Asm] subst   bne v9, v28, .read_prog138.254_2 ->   bne a0, a1, .read_prog138.254_2
// [Asm] subst   mv v7, v2 ->   mv s1, a0
// [Asm] subst   mv v8, v3 ->   mv s0, a1
// [Asm] subst   addi v4, s11, -4 ->   addi a2, s11, -4
// [Asm] subst   andi s11, v4, -8 ->   andi s11, a2, -8
// [Asm] subst   sw zero, 0(v4) ->   sw zero, 0(a2)
// [Asm] subst   li v24, 1024 ->   li a0, 1024
// [Asm] subst   slli v15, v24, 10 ->   slli a0, a0, 10
// [Asm] subst   slliw v22, v15, 2 ->   slliw a1, a0, 2
// [Asm] subst   sub v5, s11, v22 ->   sub a4, s11, a1
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a4, -8
// [Asm] subst   mv a1, v15 ->   mv a1, a0
// [Asm] subst   addi v6, s11, -4 ->   addi a5, s11, -4
// [Asm] subst   andi s11, v6, -8 ->   andi s11, a5, -8
// [Asm] subst   sw zero, 0(v6) ->   sw zero, 0(a5)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v4 ->   mv a1, a2
// [Asm] subst   mv a2, v7 ->   mv a2, s1
// [Asm] subst   mv a3, v8 ->   mv a3, s0
// [Asm] subst   call aux46.256 ->   call aux46.256
// [Asm] subst   mv v19, zero ->   mv a0, zero
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v4, Self(fref=f22) -> v0, Mem(fref=f22, mref=m0) -> v2, Insn(iref=%0) -> v3
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6, s11, zero]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: [v8]
// [Asm] defined: a1 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] Label("main134.253") clobbered_x: @hashset.of([a2, a0])
// [Asm] Label("main134.253") clobbered_f: @hashset.of([])
// [Asm] subst   li v6, 4096 ->   li a0, 4096
// [Asm] subst   sub v2, s11, v6 ->   sub a2, s11, a0
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a2, -8
// [Asm] subst   li v8, 1024 ->   li a0, 1024
// [Asm] subst   mv a1, v8 ->   mv a1, a0
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v2 ->   mv a1, a2
// [Asm] subst   call read_prog138.254 ->   call read_prog138.254
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%41) -> v12, Insn(iref=%82) -> v94, Insn(iref=%76) -> v69, Insn(iref=%63) -> v52, Insn(iref=%10) -> v26, FnParam(fref=f20, fpref=$f.5) -> v7, BlockParam(bref=b0, bpref=$b.4) -> v20, BlockParam(bref=b57, bpref=$b.3) -> v45, Insn(iref=%27) -> v93, Insn(iref=%25) -> v8, Insn(iref=%39) -> v92, BlockParam(bref=b26, bpref=$b.0) -> v40, Insn(iref=%59) -> v51, Insn(iref=%4) -> v109, BlockParam(bref=b25, bpref=$b.0) -> v39, Insn(iref=%56) -> v32, Insn(iref=%49) -> v31, Insn(iref=%42) -> v30, Insn(iref=%65) -> v54, Insn(iref=%68) -> v57, Insn(iref=%73) -> v56, Insn(iref=%26) -> v28, BlockParam(bref=b23, bpref=$b.0) -> v37, BlockParam(bref=b75, bpref=$b.0) -> v71, BlockParam(bref=b24, bpref=$b.0) -> v38, Insn(iref=%31) -> v97, FnParam(fref=f20, fpref=$f.2) -> v4, Insn(iref=%74) -> v66, Insn(iref=%64) -> v53, BlockParam(bref=b19, bpref=$b.0) -> v33, BlockParam(bref=b63, bpref=$b.0) -> v77, BlockParam(bref=b22, bpref=$b.0) -> v36, Insn(iref=%83) -> v85, Insn(iref=%38) -> v91, Insn(iref=%75) -> v68, Insn(iref=%16) -> v11, Insn(iref=%53) -> v82, BlockParam(bref=b0, bpref=$b.1) -> v17, Insn(iref=%60) -> v55, Insn(iref=%67) -> v64, Insn(iref=%84) -> v23, Insn(iref=%5) -> v110, Insn(iref=%13) -> v107, Insn(iref=%79) -> v67, Insn(iref=%55) -> v9, Insn(iref=%7) -> v112, BlockParam(bref=b27, bpref=$b.0) -> v113, Insn(iref=%66) -> v62, Insn(iref=%48) -> v15, Insn(iref=%71) -> v75, Insn(iref=%23) -> v104, BlockParam(bref=b57, bpref=$b.2) -> v44, Insn(iref=%20) -> v101, BlockParam(bref=b21, bpref=$b.0) -> v35, Insn(iref=%34) -> v14, BlockParam(bref=b20, bpref=$b.0) -> v34, Insn(iref=%36) -> v88, BlockParam(bref=b66, bpref=$b.1) -> v59, BlockParam(bref=b76, bpref=$b.0) -> v72, BlockParam(bref=b0, bpref=$b.5) -> v21, BlockParam(bref=b57, bpref=$b.0) -> v42, BlockParam(bref=b0, bpref=$b.3) -> v19, Insn(iref=%90) -> v100, Insn(iref=%50) -> v41, Insn(iref=%14) -> v108, Insn(iref=%77) -> v70, FnParam(fref=f20, fpref=$f.1) -> v3, BlockParam(bref=b66, bpref=$b.0) -> v58, FnParam(fref=f20, fpref=$f.3) -> v5, Insn(iref=%52) -> v81, Insn(iref=%44) -> v84, Insn(iref=%32) -> v98, Insn(iref=%58) -> v50, Insn(iref=%87) -> v63, FnParam(fref=f20, fpref=$f.0) -> v2, Insn(iref=%1) -> v24, Insn(iref=%11) -> v105, Insn(iref=%86) -> v89, Insn(iref=%57) -> v48, Insn(iref=%6) -> v111, Insn(iref=%35) -> v29, Insn(iref=%62) -> v78, Self(fref=f20) -> v0, BlockParam(bref=b66, bpref=$b.2) -> v60, BlockParam(bref=b60, bpref=$b.0) -> v79, BlockParam(bref=b78, bpref=$b.0) -> v76, Insn(iref=%46) -> v87, Insn(iref=%9) -> v13, Insn(iref=%37) -> v90, BlockParam(bref=b0, bpref=$b.0) -> v16, BlockParam(bref=b57, bpref=$b.1) -> v43, Insn(iref=%45) -> v86, BlockParam(bref=b0, bpref=$b.2) -> v18, Insn(iref=%29) -> v95, Insn(iref=%70) -> v74, FnParam(fref=f20, fpref=$f.4) -> v6, Insn(iref=%0) -> v22, Insn(iref=%3) -> v25, BlockParam(bref=b66, bpref=$b.3) -> v61, Insn(iref=%18) -> v99, BlockParam(bref=b57, bpref=$b.4) -> v46, Insn(iref=%22) -> v103, Insn(iref=%85) -> v49, Insn(iref=%17) -> v27, Insn(iref=%2) -> v10, Insn(iref=%43) -> v83, BlockParam(bref=b57, bpref=$b.5) -> v47, Insn(iref=%30) -> v96, BlockParam(bref=b77, bpref=$b.0) -> v73, BlockParam(bref=b30, bpref=$b.0) -> v80, Insn(iref=%21) -> v102, Insn(iref=%69) -> v65, Insn(iref=%12) -> v106
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%18), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%27), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%36), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%43), width=@32))
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b66, bpref=$b.1), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%67), Insn(iref=%73)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%67), Insn(iref=%68)])
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b66, bpref=$b.0), width=@32))
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b66, bpref=$b.2), BlockParam(bref=b66, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%58), Int32(val=0)])
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%57), width=@32))
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Insn(iref=%55)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Insn(iref=%48)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Insn(iref=%41)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Insn(iref=%34)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Insn(iref=%25)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Insn(iref=%16)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Insn(iref=%9)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Insn(iref=%2)])
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] defs: [v93]
// [Asm] live_set: [v11, v14, v16, v21, v10, v13, v17, v12, v9, v93, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v93 is X
// [Asm] defs: [v95]
// [Asm] live_set: [v11, v14, v16, v21, v10, v13, v95, v17, v12, v9, v93, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v95 is X
// [Asm] defs: [v96]
// [Asm] live_set: [v11, v14, v16, v21, v10, v13, v17, v12, v9, v93, v18, v96, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v96 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v16, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v98]
// [Asm] live_set: [v11, v14, v10, v21, v13, v17, v12, v9, v98, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v98 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v98]
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v17]
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v18]
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v19]
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v20]
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v21]
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v83]
// [Asm] live_set: [v11, v14, v16, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15, v83]
// [Asm] move_origin: []
// [Asm] defined: v83 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v16, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15, v83]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v14, v16, v10, v21, v13, a0, v17, v12, v9, v18, zero, v20, v8, v19, v15, v83]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v84]
// [Asm] live_set: [v11, v14, v16, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v84, v15, v83]
// [Asm] move_origin: [a0]
// [Asm] defined: v84 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v16, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v84, v15, v83]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v16, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v87]
// [Asm] live_set: [v11, v14, v87, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v87 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v87]
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v17]
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v18]
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v19]
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v20]
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v21]
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v105]
// [Asm] live_set: [v11, v14, v16, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v105, v15]
// [Asm] move_origin: []
// [Asm] defined: v105 is X
// [Asm] defs: [v106]
// [Asm] live_set: [v11, v14, v16, v21, v10, v13, v17, v12, v9, v106, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v106 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v16, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v108]
// [Asm] live_set: [v11, v14, v10, v21, v13, v17, v108, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v108 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v108]
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v17]
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v18]
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v19]
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v20]
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v21]
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v56]
// [Asm] live_set: [v11, v14, v10, v21, v13, v17, v43, v12, v9, v56, v18, zero, v20, v8, v45, v19, v47, v15, v55]
// [Asm] move_origin: []
// [Asm] defined: v56 is X
// [Asm] defs: [v57]
// [Asm] live_set: [v11, v14, v10, v21, v13, v17, v43, v12, v9, v56, v18, zero, v20, v8, v45, v19, v47, v15, v57, v55]
// [Asm] move_origin: []
// [Asm] defined: v57 is X
// [Asm] defs: [v58]
// [Asm] live_set: [v11, v58, v14, v10, v21, v13, v17, v43, v12, v9, v56, v18, zero, v20, v8, v45, v19, v47, v15, v57]
// [Asm] move_origin: [v55]
// [Asm] defined: v58 is X
// [Asm] defs: [v59]
// [Asm] live_set: [v11, v58, v14, v10, v21, v13, v17, v43, v12, v9, v56, v18, zero, v20, v8, v45, v19, v47, v59, v15, v57]
// [Asm] move_origin: [zero]
// [Asm] defined: v59 is X
// [Asm] defs: [v60]
// [Asm] live_set: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v45, v19, v47, v59, v15, v57]
// [Asm] move_origin: [v43]
// [Asm] defined: v60 is X
// [Asm] defs: [v61]
// [Asm] live_set: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] move_origin: [v45]
// [Asm] defined: v61 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v79]
// [Asm] live_set: [v11, v14, v21, v10, v13, v79, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [zero]
// [Asm] defined: v79 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v24, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v109]
// [Asm] live_set: [v11, v14, v16, v21, v10, v13, v17, v12, v9, v109, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v109 is X
// [Asm] defs: [v110]
// [Asm] live_set: [v11, v14, v16, v21, v10, v13, v110, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v110 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v16, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v112]
// [Asm] live_set: [v11, v14, v10, v21, v13, v17, v12, v9, v112, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v112 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v112]
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v17]
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v18]
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v19]
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v20]
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v21]
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v73]
// [Asm] live_set: [v11, v14, v10, v21, v13, v17, v12, v9, v73, v18, zero, v20, v8, v19, v47, v15]
// [Asm] move_origin: [v72]
// [Asm] defined: v73 is X
// [Asm] defs: [v72]
// [Asm] live_set: [v11, v14, v10, v21, v13, v17, v12, v9, v72, v18, zero, v20, v8, v19, v47, v15]
// [Asm] move_origin: [v71]
// [Asm] defined: v72 is X
// [Asm] defs: [v52]
// [Asm] live_set: [v11, v46, v14, v10, v21, v42, v13, v43, v17, v12, v52, v44, v9, v18, zero, v20, v8, v45, v19, v47, v15]
// [Asm] move_origin: []
// [Asm] defined: v52 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v46, v14, v10, v21, v42, v13, v43, v17, v12, v52, v44, v9, v18, zero, v20, v8, v45, v19, v47, v15]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v46, v14, v10, v21, v42, a0, v13, v43, v17, v12, v44, v9, v18, zero, v20, v8, v45, v19, v47, v15]
// [Asm] move_origin: [v52]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v11, v46, v14, v10, v21, v42, a0, v13, v43, a1, v17, v12, v44, v9, v18, zero, v20, v8, v45, v19, v47, v15]
// [Asm] move_origin: [v42]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v11, v46, v14, v10, v21, v42, a0, v13, a2, v43, a1, v17, v12, v44, v9, v18, zero, v20, v8, v45, v19, v47, v15]
// [Asm] move_origin: [v43]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v11, v46, v14, v10, v21, v42, a0, v13, a2, v43, a1, v17, a3, v12, v44, v9, v18, zero, v20, v8, v45, v19, v47, v15]
// [Asm] move_origin: [v45]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v11, v46, v14, v10, v21, v42, a0, v13, a2, v43, a1, v17, a3, v12, v44, v9, v18, zero, v20, a4, v8, v45, v19, v47, v15]
// [Asm] move_origin: [v46]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [v11, v46, v14, v10, v21, a5, v42, a0, v13, a2, v43, a1, v17, a3, v12, v44, v9, v18, zero, v20, a4, v8, v45, v19, v47, v15]
// [Asm] move_origin: [v47]
// [Asm] defined: a5 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v46, v14, v10, v21, v13, v42, a0, v17, v43, v12, v44, v9, v18, zero, v20, v45, v8, v19, v47, v15]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v53]
// [Asm] live_set: [v11, v46, v14, v10, v21, v53, v13, v42, v17, v43, v12, v44, v9, v18, zero, v20, v45, v8, v19, v47, v15]
// [Asm] move_origin: [a0]
// [Asm] defined: v53 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v46, v14, v10, v21, v53, v13, v42, v17, v43, v12, v44, v9, v18, zero, v20, v45, v8, v19, v47, v15]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v46, v14, v10, v21, v42, v13, v17, v43, v12, v44, v9, v18, zero, v20, v45, v8, v19, v47, v15]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v46, v14, v10, v21, v42, v13, v17, v43, v12, v44, v9, v18, zero, v20, v45, v8, v19, v47, v15]
// [Asm] move_origin: [v42]
// [Asm] defs: []
// [Asm] live_set: [v11, v46, v14, v10, v21, v42, v13, v17, v43, v12, v44, v9, v18, zero, v20, v45, v8, v19, v47, v15]
// [Asm] move_origin: [v43]
// [Asm] defs: []
// [Asm] live_set: [v11, v46, v14, v10, v21, v42, v13, v17, v43, v12, v44, v9, v18, zero, v20, v45, v8, v19, v47, v15]
// [Asm] move_origin: [v44]
// [Asm] defs: []
// [Asm] live_set: [v11, v46, v14, v10, v21, v42, v13, v17, v43, v12, v44, v9, v18, zero, v20, v45, v8, v19, v47, v15]
// [Asm] move_origin: [v45]
// [Asm] defs: []
// [Asm] live_set: [v11, v46, v14, v10, v21, v42, v13, v17, v43, v12, v44, v9, v18, zero, v20, v45, v8, v19, v47, v15]
// [Asm] move_origin: [v46]
// [Asm] defs: []
// [Asm] live_set: [v11, v46, v14, v10, v21, v42, v13, v17, v43, v12, v44, v9, v18, zero, v20, v45, v8, v19, v47, v15]
// [Asm] move_origin: [v47]
// [Asm] defs: []
// [Asm] live_set: [v11, v46, v14, v10, v21, v42, v13, v17, v43, v12, v44, v9, v18, zero, v20, v45, v8, v19, v47, v15]
// [Asm] move_origin: []
// [Asm] defs: [v113]
// [Asm] live_set: [v113]
// [Asm] move_origin: [v16]
// [Asm] defined: v113 is X
// [Asm] defs: []
// [Asm] live_set: [v113]
// [Asm] move_origin: []
// [Asm] defs: [v33]
// [Asm] live_set: [v33]
// [Asm] move_origin: [v16]
// [Asm] defined: v33 is X
// [Asm] defs: []
// [Asm] live_set: [v33]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v16]
// [Asm] move_origin: []
// [Asm] defs: [v64]
// [Asm] live_set: [v11, v58, v14, v10, v21, v13, v17, v12, v64, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] move_origin: []
// [Asm] defined: v64 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v14, v10, v21, v13, v17, v12, v64, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v24, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v39]
// [Asm] live_set: [v39]
// [Asm] move_origin: [v38]
// [Asm] defined: v39 is X
// [Asm] defs: [v69]
// [Asm] live_set: [v11, v14, v69, v21, v10, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v47, v59, v57, v61, v15]
// [Asm] move_origin: []
// [Asm] defined: v69 is X
// [Asm] defs: [v70]
// [Asm] live_set: [v11, v14, v69, v21, v10, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v47, v70, v57, v61, v15]
// [Asm] move_origin: []
// [Asm] defined: v70 is X
// [Asm] defs: [v58]
// [Asm] live_set: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v47, v70, v57, v61, v15]
// [Asm] move_origin: [v69]
// [Asm] defined: v58 is X
// [Asm] defs: [v59]
// [Asm] live_set: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] move_origin: [v70]
// [Asm] defined: v59 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] move_origin: [v60]
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] move_origin: [v61]
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] move_origin: []
// [Asm] defs: [v80]
// [Asm] live_set: [v11, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v80, v15]
// [Asm] move_origin: [v79]
// [Asm] defined: v80 is X
// [Asm] defs: [v113]
// [Asm] live_set: [v113]
// [Asm] move_origin: [v40]
// [Asm] defined: v113 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v24, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v67]
// [Asm] live_set: [v11, v14, v10, v21, v13, v67, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] move_origin: []
// [Asm] defined: v67 is X
// [Asm] defs: [v58]
// [Asm] live_set: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] move_origin: [v67]
// [Asm] defined: v58 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] move_origin: [v59]
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] move_origin: [v60]
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] move_origin: [v61]
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a5, a0, a2, a1, a3, zero, a4]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a5, a2, a1, a3, zero, a4, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a5, a2, a3, zero, a4, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, a5, a3, zero, a4, v4, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, a5, zero, a4, v4, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, a5, zero, v4, v6, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, v7, zero, v4, v6, v3]
// [Asm] move_origin: [a5]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v2, v5, v7, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v2, v5, v7, v9, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v2, v5, v10, v7, v9, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v2, v11, v5, v10, v7, v9, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v2, v11, v5, v10, v7, v12, v9, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v2, v11, v5, v10, v13, v7, v12, v9, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v2, v11, v14, v5, v10, v13, v7, v12, v9, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v2, v11, v14, v5, v10, v13, v7, v12, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v16, v14, v5, v10, v13, v7, v12, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v11, v16, v14, v5, v10, v13, v7, v17, v12, v9, zero, v8, v4, v6, v15]
// [Asm] move_origin: [v3]
// [Asm] defined: v17 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v11, v16, v14, v5, v10, v13, v7, v17, v12, v9, v18, zero, v8, v6, v15]
// [Asm] move_origin: [v4]
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v11, v16, v14, v10, v13, v7, v17, v12, v9, v18, zero, v8, v19, v6, v15]
// [Asm] move_origin: [v5]
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v11, v16, v14, v10, v13, v7, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v6]
// [Asm] defined: v20 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v7]
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v21, v10, v13, v17, v12, v24, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] move_origin: []
// [Asm] defs: [v55]
// [Asm] live_set: [v11, v14, v10, v21, v13, v43, v17, v12, v9, v18, zero, v20, v45, v8, v19, v47, v15, v55]
// [Asm] move_origin: []
// [Asm] defined: v55 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v11, v16, v14, v21, v10, v13, v17, v24, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v21, v10, v13, v17, v24, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v35]
// [Asm] live_set: [v35]
// [Asm] move_origin: [v34]
// [Asm] defined: v35 is X
// [Asm] defs: [v76]
// [Asm] live_set: [v11, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v47, v15, v76]
// [Asm] move_origin: [v73]
// [Asm] defined: v76 is X
// [Asm] defs: [v71]
// [Asm] live_set: [v11, v71, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v47, v15]
// [Asm] move_origin: [v58]
// [Asm] defined: v71 is X
// [Asm] defs: [v74]
// [Asm] live_set: [v11, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v47, v59, v74, v15, v57, v61]
// [Asm] move_origin: []
// [Asm] defined: v74 is X
// [Asm] defs: [v75]
// [Asm] live_set: [v11, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, v75, zero, v20, v8, v19, v47, v74, v61, v15, v57]
// [Asm] move_origin: []
// [Asm] defined: v75 is X
// [Asm] defs: [v58]
// [Asm] live_set: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, v75, zero, v20, v8, v19, v47, v57, v61, v15]
// [Asm] move_origin: [v74]
// [Asm] defined: v58 is X
// [Asm] defs: [v59]
// [Asm] live_set: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] move_origin: [v75]
// [Asm] defined: v59 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] move_origin: [v60]
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] move_origin: [v61]
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] move_origin: []
// [Asm] defs: [v76]
// [Asm] live_set: [v11, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v47, v15, v76]
// [Asm] move_origin: [v58]
// [Asm] defined: v76 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v47, v15, v76]
// [Asm] move_origin: []
// [Asm] defs: [v40]
// [Asm] live_set: [v40]
// [Asm] move_origin: [v39]
// [Asm] defined: v40 is X
// [Asm] defs: [v38]
// [Asm] live_set: [v38]
// [Asm] move_origin: [v37]
// [Asm] defined: v38 is X
// [Asm] defs: [v37]
// [Asm] live_set: [v37]
// [Asm] move_origin: [v36]
// [Asm] defined: v37 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v113]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v42]
// [Asm] live_set: [v11, v14, v16, v21, v10, v13, v42, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v17]
// [Asm] defined: v42 is X
// [Asm] defs: [v43]
// [Asm] live_set: [v11, v14, v16, v21, v10, v13, v42, v17, v43, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v18]
// [Asm] defined: v43 is X
// [Asm] defs: [v44]
// [Asm] live_set: [v11, v14, v10, v21, v42, v13, v17, v43, v12, v44, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v16]
// [Asm] defined: v44 is X
// [Asm] defs: [v45]
// [Asm] live_set: [v11, v14, v10, v21, v42, v13, v17, v43, v12, v44, v9, v18, zero, v20, v45, v8, v19, v15]
// [Asm] move_origin: [v19]
// [Asm] defined: v45 is X
// [Asm] defs: [v46]
// [Asm] live_set: [v11, v46, v14, v10, v21, v42, v13, v17, v43, v12, v44, v9, v18, zero, v20, v45, v8, v19, v15]
// [Asm] move_origin: [v20]
// [Asm] defined: v46 is X
// [Asm] defs: [v47]
// [Asm] live_set: [v11, v46, v14, v10, v21, v42, v13, v17, v43, v12, v44, v9, v18, zero, v20, v45, v8, v19, v47, v15]
// [Asm] move_origin: [v21]
// [Asm] defined: v47 is X
// [Asm] defs: [v88]
// [Asm] live_set: [v11, v14, v16, v21, v10, v13, v88, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v88 is X
// [Asm] defs: [v90]
// [Asm] live_set: [v11, v14, v16, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v90, v15]
// [Asm] move_origin: []
// [Asm] defined: v90 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v16, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v90, v15]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v14, v16, v21, v10, v13, a0, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v90]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v14, v16, v21, v10, v13, a0, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v91]
// [Asm] live_set: [v11, v14, v16, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [a0]
// [Asm] defined: v91 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v16, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v92]
// [Asm] live_set: [v11, v14, v10, v21, v13, v92, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v92 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v92]
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v17]
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v18]
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v19]
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v20]
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v21]
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v21, v10, v13, v17, v12, v24, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v48]
// [Asm] live_set: [v11, v46, v14, v10, v21, v42, v13, v17, v43, v12, v44, v9, v18, v48, zero, v20, v8, v45, v19, v47, v15]
// [Asm] move_origin: []
// [Asm] defined: v48 is X
// [Asm] defs: [v50]
// [Asm] live_set: [v11, v46, v14, v10, v21, v42, v13, v17, v43, v12, v44, v9, v18, zero, v20, v50, v8, v45, v19, v47, v15]
// [Asm] move_origin: []
// [Asm] defined: v50 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v46, v14, v10, v21, v42, v13, v17, v43, v12, v44, v9, v18, zero, v20, v45, v8, v19, v47, v15]
// [Asm] move_origin: []
// [Asm] defs: [v81]
// [Asm] live_set: [v11, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v81, v15]
// [Asm] move_origin: []
// [Asm] defined: v81 is X
// [Asm] defs: [v82]
// [Asm] live_set: [v11, v14, v10, v21, v13, v17, v12, v9, v82, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v82 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v82]
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v17]
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v18]
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v19]
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v20]
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v21]
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v77]
// [Asm] live_set: [v11, v14, v10, v21, v13, v17, v12, v9, v18, zero, v77, v20, v8, v19, v47, v15]
// [Asm] move_origin: [v76]
// [Asm] defined: v77 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v36]
// [Asm] move_origin: [v35]
// [Asm] defined: v36 is X
// [Asm] defs: [v33]
// [Asm] live_set: [v33]
// [Asm] move_origin: [v16]
// [Asm] defined: v33 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] move_origin: []
// [Asm] defs: [v99]
// [Asm] live_set: [v11, v14, v16, v21, v10, v13, v17, v12, v9, v18, v99, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v99 is X
// [Asm] defs: [v101]
// [Asm] live_set: [v11, v14, v16, v21, v10, v13, v17, v12, v9, v101, v18, v99, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v101 is X
// [Asm] defs: [v102]
// [Asm] live_set: [v11, v14, v16, v21, v10, v13, v17, v12, v9, v18, v99, zero, v20, v8, v19, v15, v102]
// [Asm] move_origin: []
// [Asm] defined: v102 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v16, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v104]
// [Asm] live_set: [v11, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v104, v15]
// [Asm] move_origin: []
// [Asm] defined: v104 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v104]
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v17]
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v18]
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v19]
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v20]
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: [v21]
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v34]
// [Asm] live_set: [v34]
// [Asm] move_origin: [v33]
// [Asm] defined: v34 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v21, v10, v13, v17, v24, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v14, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] Label("aux46.256") clobbered_x: @hashset.of([s7, a5, a0, s1, s2, s5, a2, a1, s3, a3, s10, s6, s8, s9, s4, a4, a6, s0])
// [Asm] Label("aux46.256") clobbered_f: @hashset.of([])
// [Asm] subst   lw v93, 0(v17) ->   lw a0, 0(s6)
// [Asm] subst   th.lurw v95, v20, v93, 2 ->   th.lurw a1, s9, a0, 2
// [Asm] subst   addi v96, v95, -1 ->   addi a1, a1, -1
// [Asm] subst   th.surw v96, v20, v93, 2 ->   th.surw a1, s9, a0, 2
// [Asm] subst   addi v98, v16, 1 ->   addi a0, s2, 1
// [Asm] subst   mv v16, v98 ->   mv s2, a0
// [Asm] subst   j .aux46.256_0 ->   j .aux46.256_0
// [Asm] subst   lw v83, 0(v17) ->   lw t5, 0(s6)
// [Asm] subst   call read_ch_until_newline_or_eof1.252 ->   call read_ch_until_newline_or_eof1.252
// [Asm] subst   th.surw v84, v20, v83, 2 ->   th.surw a0, s9, t5, 2
// [Asm] subst   addi v87, v16, 1 ->   addi a0, s2, 1
// [Asm] subst   mv v16, v87 ->   mv s2, a0
// [Asm] subst   j .aux46.256_0 ->   j .aux46.256_0
// [Asm] subst   lw v105, 0(v17) ->   lw a0, 0(s6)
// [Asm] subst   addi v106, v105, -1 ->   addi a0, a0, -1
// [Asm] subst   sw v106, 0(v17) ->   sw a0, 0(s6)
// [Asm] subst   addi v108, v16, 1 ->   addi a0, s2, 1
// [Asm] subst   mv v16, v108 ->   mv s2, a0
// [Asm] subst   j .aux46.256_0 ->   j .aux46.256_0
// [Asm] subst   lw v56, loop_end.12 ->   lw a0, loop_end.12
// [Asm] subst   lw v57, loop_start.11 ->   lw a2, loop_start.11
// [Asm] subst   mv v59, zero ->   mv a3, zero
// [Asm] subst   mv v60, v43 ->   mv a4, s8
// [Asm] subst   mv v61, v45 ->   mv a5, s10
// [Asm] subst   sw v77, 0(v47) ->   sw a0, 0(s3)
// [Asm] subst   mv v79, zero ->   mv a0, zero
// [Asm] subst   beq v24, v12, .aux46.256_13 ->   beq a0, s7, .aux46.256_13
// [Asm] subst   lw v109, 0(v17) ->   lw a0, 0(s6)
// [Asm] subst   addi v110, v109, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v110, 0(v17) ->   sw a0, 0(s6)
// [Asm] subst   addi v112, v16, 1 ->   addi a0, s2, 1
// [Asm] subst   mv v16, v112 ->   mv s2, a0
// [Asm] subst   j .aux46.256_0 ->   j .aux46.256_0
// [Asm] subst   addi v52, v44, 1 ->   addi a0, s2, 1
// [Asm] subst   mv a1, v42 ->   mv a1, s6
// [Asm] subst   mv a2, v43 ->   mv a2, s8
// [Asm] subst   mv a3, v45 ->   mv a3, s10
// [Asm] subst   mv a4, v46 ->   mv a4, s9
// [Asm] subst   mv a5, v47 ->   mv a5, s3
// [Asm] subst   call aux46.256 ->   call aux46.256
// [Asm] subst   sw v53, 0(v47) ->   sw a0, 0(s3)
// [Asm] subst   j .aux46.256_57 ->   j .aux46.256_57
// [Asm] subst   mv v113, v16 ->   mv a0, s2
// [Asm] subst   j .aux46.256_27 ->   j .aux46.256_27
// [Asm] subst   mv v33, v16 ->   mv a0, s2
// [Asm] subst   j .aux46.256_19 ->   j .aux46.256_19
// [Asm] subst   bne v24, v9, .aux46.256_18 ->   bne a0, t5, .aux46.256_18
// [Asm] subst   th.lurw v64, v61, v58, 2 ->   th.lurw a6, a5, a1, 2
// [Asm] subst   beq v64, v57, .aux46.256_69 ->   beq a6, a2, .aux46.256_69
// [Asm] subst   beq v24, v14, .aux46.256_11 ->   beq a0, s1, .aux46.256_11
// [Asm] subst   addi v69, v58, 1 ->   addi a1, a1, 1
// [Asm] subst   addi v70, v59, -1 ->   addi a3, a3, -1
// [Asm] subst   j .aux46.256_66 ->   j .aux46.256_66
// [Asm] subst   bge v58, v60, .aux46.256_67 ->   bge a1, a4, .aux46.256_67
// [Asm] subst   beq v24, v15, .aux46.256_15 ->   beq a0, t5, .aux46.256_15
// [Asm] subst   addi v67, v58, 1 ->   addi a1, a1, 1
// [Asm] subst   j .aux46.256_66 ->   j .aux46.256_66
// [Asm] subst   lw v8, decrease.8 ->   lw t5, decrease.8
// [Asm] subst   lw v9, loop_end.12 ->   lw t5, loop_end.12
// [Asm] subst   lw v10, move_right.6 ->   lw s4, move_right.6
// [Asm] subst   lw v11, increase.7 ->   lw s0, increase.7
// [Asm] subst   lw v12, read.10 ->   lw s7, read.10
// [Asm] subst   lw v13, move_left.5 ->   lw s5, move_left.5
// [Asm] subst   lw v14, print.9 ->   lw s1, print.9
// [Asm] subst   lw v15, loop_start.11 ->   lw t5, loop_start.11
// [Asm] subst   mv v16, v2 ->   mv s2, a0
// [Asm] subst   mv v17, v3 ->   mv s6, a1
// [Asm] subst   mv v18, v4 ->   mv s8, a2
// [Asm] subst   mv v19, v5 ->   mv s10, a3
// [Asm] subst   mv v20, v6 ->   mv s9, a4
// [Asm] subst   mv v21, v7 ->   mv s3, a5
// [Asm] subst   beq v24, v11, .aux46.256_7 ->   beq a0, s0, .aux46.256_7
// [Asm] subst   beq v59, zero, .aux46.256_73 ->   beq a3, zero, .aux46.256_73
// [Asm] subst   addi v55, v44, 1 ->   addi a1, s2, 1
// [Asm] subst   th.lurw v24, v19, v16, 2 ->   th.lurw a0, s10, s2, 2
// [Asm] subst   beq v24, v10, .aux46.256_3 ->   beq a0, s4, .aux46.256_3
// [Asm] subst   mv v71, v58 ->   mv a0, a1
// [Asm] subst   addi v74, v58, 1 ->   addi a1, a1, 1
// [Asm] subst   addi v75, v59, 1 ->   addi a3, a3, 1
// [Asm] subst   j .aux46.256_66 ->   j .aux46.256_66
// [Asm] subst   mv v76, v58 ->   mv a0, a1
// [Asm] subst   j .aux46.256_78 ->   j .aux46.256_78
// [Asm] subst   ret ->   ret
// [Asm] subst   lw v88, 0(v17) ->   lw a0, 0(s6)
// [Asm] subst   th.lurw v90, v20, v88, 2 ->   th.lurw a0, s9, a0, 2
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   addi v92, v16, 1 ->   addi a0, s2, 1
// [Asm] subst   mv v16, v92 ->   mv s2, a0
// [Asm] subst   j .aux46.256_0 ->   j .aux46.256_0
// [Asm] subst   beq v24, v13, .aux46.256_5 ->   beq a0, s5, .aux46.256_5
// [Asm] subst   sw v16, 0(v21) ->   sw s2, 0(s3)
// [Asm] subst   lw v48, 0(v42) ->   lw a0, 0(s6)
// [Asm] subst   th.lurw v50, v46, v48, 2 ->   th.lurw a0, s9, a0, 2
// [Asm] subst   beq v50, zero, .aux46.256_58 ->   beq a0, zero, .aux46.256_58
// [Asm] subst   lw v81, 0(v21) ->   lw a0, 0(s3)
// [Asm] subst   addi v82, v81, 1 ->   addi a0, a0, 1
// [Asm] subst   mv v16, v82 ->   mv s2, a0
// [Asm] subst   j .aux46.256_0 ->   j .aux46.256_0
// [Asm] subst   mv v33, v16 ->   mv a0, s2
// [Asm] subst   bne v64, v56, .aux46.256_72 ->   bne a6, a0, .aux46.256_72
// [Asm] subst   lw v99, 0(v17) ->   lw a0, 0(s6)
// [Asm] subst   th.lurw v101, v20, v99, 2 ->   th.lurw a1, s9, a0, 2
// [Asm] subst   addi v102, v101, 1 ->   addi a1, a1, 1
// [Asm] subst   th.surw v102, v20, v99, 2 ->   th.surw a1, s9, a0, 2
// [Asm] subst   addi v104, v16, 1 ->   addi a0, s2, 1
// [Asm] subst   mv v16, v104 ->   mv s2, a0
// [Asm] subst   j .aux46.256_0 ->   j .aux46.256_0
// [Asm] subst   beq v24, v8, .aux46.256_9 ->   beq a0, t5, .aux46.256_9
// [Asm] subst   bge v16, v18, .aux46.256_1 ->   bge s2, s8, .aux46.256_1
// [Asm] before colored: # leaf false
// [Asm] read_prog138.254:
// [Asm] # block info: defs: [v3, v7, v8, v2], uses: [v3, a1, a0, v2], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, s11, a0, zero], live_out: [v8, s11, zero, v7]
// [Asm] # block parameters: []
// [Asm] .read_prog138.254_5:
// [Asm]   # save_ctx1  # live: [a1, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, s11, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, s11, zero, v3]
// [Asm] # control
// [Asm]   mv v7, v2  # live: [v3, s11, zero, v7]
// [Asm]   mv v8, v3  # live: [v7, s11, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, v28, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v28, a0, v9], upward_exposed: [], params_defs: [v8, v7]
// [Asm] # live_in: [v7, s11, zero, v8], live_out: [v8, s11, zero, v9, v7]
// [Asm] # block parameters: [v7, v8]
// [Asm] .read_prog138.254_0:
// [Asm]   # save_ctx2  # live: [v7, s11, zero, v8]
// [Asm]   call read_ch_until_newline_or_eof1.252  # live: [v7, s11, zero, a0, v8]
// [Asm]   mv v9, a0  # live: [v7, s11, zero, v9, v8]
// [Asm]   # restore_ctx2  # live: [v7, s11, zero, v9, v8]
// [Asm] # control
// [Asm]   li v28, -1  # live: [v7, s11, v28, zero, v9, v8]
// [Asm]   bne v9, v28, .read_prog138.254_2  # live: [v7, s11, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [t1, v22, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, v19, ft5, ft10, v4, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, v24, a3, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v15], uses: [v5, a5, a0, v22, v7, a2, a1, s11, v24, a3, zero, a4, v8, v4, v6, v15], upward_exposed: [v8, s11, zero, v7], params_defs: []
// [Asm] # live_in: [v7, s11, zero, v8], live_out: [v19]
// [Asm] # block parameters: []
// [Asm] .read_prog138.254_1:
// [Asm]   addi v4, s11, -4  # live: [zero, v8, v7, v4]
// [Asm]   andi s11, v4, -8  # live: [zero, v8, v7, v4, s11]
// [Asm]   sw zero, 0(v4)  # live: [zero, v8, v7, v4, s11]
// [Asm]   li v24, 1024  # live: [zero, v8, v7, v4, s11, v24]
// [Asm]   slli v15, v24, 10  # live: [zero, v8, v7, v4, v15, s11]
// [Asm]   slliw v22, v15, 2  # live: [zero, v22, v8, v7, v4, v15, s11]
// [Asm]   sub v5, s11, v22  # live: [v5, zero, v8, v7, v4, v15]
// [Asm]   andi s11, v5, -8  # live: [v5, zero, v8, v7, v4, s11, v15]
// [Asm]   mv a1, v15  # live: [v5, zero, v8, v7, v4, s11]
// [Asm]   addi v6, s11, -4  # live: [v5, zero, v8, v7, v4, v6]
// [Asm]   andi s11, v6, -8  # live: [v5, zero, v8, v7, v4, v6]
// [Asm]   sw zero, 0(v6)  # live: [v5, zero, v8, v7, v4, v6]
// [Asm]   # save_ctx2  # live: [v5, zero, v8, v7, v4, v6]
// [Asm]   mv a0, zero  # live: [v5, zero, a0, v8, v7, v4, v6]
// [Asm]   mv a1, v4  # live: [v5, zero, a0, v8, v7, a1, v6]
// [Asm]   mv a2, v7  # live: [v5, zero, a0, v8, a2, a1, v6]
// [Asm]   mv a3, v8  # live: [v5, zero, a0, a2, a1, v6, a3]
// [Asm]   mv a4, v5  # live: [zero, a0, a4, a2, a1, v6, a3]
// [Asm]   mv a5, v6  # live: [a5, zero, a0, a4, a2, a1, a3]
// [Asm]   call aux46.256  # live: [zero, a0]
// [Asm]   mv v18, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv v19, zero  # live: [v19]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v19, a0], upward_exposed: [v19], params_defs: [v19]
// [Asm] # live_in: [v19], live_out: []
// [Asm] # block parameters: [v19]
// [Asm] .read_prog138.254_3:
// [Asm] # control
// [Asm]   mv a0, v19  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v13, v7], uses: [v7, v9, v13, v8], upward_exposed: [v7, v9, v8], params_defs: []
// [Asm] # live_in: [v8, s11, v9, zero, v7], live_out: [v8, s11, zero, v7]
// [Asm] # block parameters: []
// [Asm] .read_prog138.254_2:
// [Asm]   th.surw v9, v8, v7, 2  # live: [v7, s11, zero, v8]
// [Asm]   addi v13, v7, 1  # live: [s11, zero, v13, v8]
// [Asm] # control
// [Asm]   mv v7, v13  # live: [v7, s11, zero, v8]
// [Asm]   mv v8, v8  # live: [v7, s11, zero, v8]
// [Asm]   j .read_prog138.254_0  # live: [v7, s11, zero, v8]
// [Asm] 
// [Asm] # leaf true
// [Asm] T$loop_start.11:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$loop_start.11_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 91  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] read_ch_until_newline_or_eof1.252:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v10, a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v2]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof1.252_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call minimbt_read_char  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   li v10, 10  # live: [v10, v2]
// [Asm]   beq v2, v10, .read_ch_until_newline_or_eof1.252_1  # live: [v2]
// [Asm] 
// [Asm] # block info: defs: [v9], uses: [v9, v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v2]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof1.252_2:
// [Asm] # control
// [Asm]   li v9, 13  # live: [v9, v2]
// [Asm]   bne v2, v9, .read_ch_until_newline_or_eof1.252_4  # live: [v2]
// [Asm] 
// [Asm] # block info: defs: [v5, v8], uses: [v8], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof1.252_3:
// [Asm] # control
// [Asm]   li v8, -1  # live: [v8]
// [Asm]   mv v5, v8  # live: [v5]
// [Asm] 
// [Asm] # block info: defs: [v6], uses: [v5], upward_exposed: [v5], params_defs: [v5]
// [Asm] # live_in: [v5], live_out: [v6]
// [Asm] # block parameters: [v5]
// [Asm] .read_ch_until_newline_or_eof1.252_5:
// [Asm] # control
// [Asm]   mv v6, v5  # live: [v6]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v6, a0], upward_exposed: [v6], params_defs: [v6]
// [Asm] # live_in: [v6], live_out: []
// [Asm] # block parameters: [v6]
// [Asm] .read_ch_until_newline_or_eof1.252_6:
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v5], uses: [v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof1.252_4:
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v5]
// [Asm]   j .read_ch_until_newline_or_eof1.252_5  # live: [v5]
// [Asm] 
// [Asm] # block info: defs: [v6, v7], uses: [v7], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v6]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof1.252_1:
// [Asm] # control
// [Asm]   li v7, -1  # live: [v7]
// [Asm]   mv v6, v7  # live: [v6]
// [Asm]   j .read_ch_until_newline_or_eof1.252_6  # live: [v6]
// [Asm] 
// [Asm] # leaf true
// [Asm] T$decrease.8:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$decrease.8_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 45  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main134.253:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, v4, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v8, v6, a1, s11, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main134.253_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   li v6, 4096  # live: [v6, s11, zero]
// [Asm]   sub v2, s11, v6  # live: [zero, v2]
// [Asm]   andi s11, v2, -8  # live: [zero, v2]
// [Asm]   li v8, 1024  # live: [v8, zero, v2]
// [Asm]   mv a1, v8  # live: [zero, v2]
// [Asm]   # save_ctx2  # live: [zero, v2]
// [Asm]   mv a0, zero  # live: [zero, a0, v2]
// [Asm]   mv a1, v2  # live: [a1, zero, a0]
// [Asm]   call read_prog138.254  # live: [zero, a0]
// [Asm]   mv v4, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$read.10:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$read.10_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 44  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$loop_end.12:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$loop_end.12_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 93  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$print.9:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$print.9_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 46  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$move_right.6:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$move_right.6_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 62  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$move_left.5:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$move_left.5_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 60  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main134.253  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] aux46.256:
// [Asm] # block info: defs: [v3, v11, v5, v14, v16, v10, v21, v13, v7, v17, v12, v9, v18, v20, v8, v19, v4, v6, v15, v2], uses: [v3, v5, a5, a0, a4, v7, a2, v4, a1, v6, a3, v2], upward_exposed: [a2, a1, a3, a5, a0, a4], params_defs: []
// [Asm] # live_in: [a5, a0, zero, a4, a2, a1, a3], live_out: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] # block parameters: []
// [Asm] .aux46.256_29:
// [Asm]   # save_ctx1  # live: [a5, a0, a2, a1, a3, zero, a4]
// [Asm]   mv v2, a0  # live: [a5, a2, a1, a3, zero, a4, v2]
// [Asm]   mv v3, a1  # live: [v2, a5, a2, a3, zero, a4, v3]
// [Asm]   mv v4, a2  # live: [v2, a5, a3, zero, a4, v4, v3]
// [Asm]   mv v5, a3  # live: [v2, v5, a5, zero, a4, v4, v3]
// [Asm]   mv v6, a4  # live: [v2, v5, a5, zero, v4, v6, v3]
// [Asm]   mv v7, a5  # live: [v2, v5, v7, zero, v4, v6, v3]
// [Asm]   lw v8, decrease.8  # live: [v2, v5, v7, zero, v8, v4, v6, v3]
// [Asm]   lw v9, loop_end.12  # live: [v2, v5, v7, v9, zero, v8, v4, v6, v3]
// [Asm]   lw v10, move_right.6  # live: [v2, v5, v10, v7, v9, zero, v8, v4, v6, v3]
// [Asm]   lw v11, increase.7  # live: [v2, v11, v5, v10, v7, v9, zero, v8, v4, v6, v3]
// [Asm]   lw v12, read.10  # live: [v2, v11, v5, v10, v7, v12, v9, zero, v8, v4, v6, v3]
// [Asm]   lw v13, move_left.5  # live: [v2, v11, v5, v10, v13, v7, v12, v9, zero, v8, v4, v6, v3]
// [Asm]   lw v14, print.9  # live: [v2, v11, v14, v5, v10, v13, v7, v12, v9, zero, v8, v4, v6, v3]
// [Asm]   lw v15, loop_start.11  # live: [v2, v11, v14, v5, v10, v13, v7, v12, v9, zero, v8, v4, v6, v15, v3]
// [Asm] # control
// [Asm]   mv v16, v2  # live: [v11, v16, v14, v5, v10, v13, v7, v12, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   mv v17, v3  # live: [v11, v16, v14, v5, v10, v13, v7, v17, v12, v9, zero, v8, v4, v6, v15]
// [Asm]   mv v18, v4  # live: [v11, v16, v14, v5, v10, v13, v7, v17, v12, v9, v18, zero, v8, v6, v15]
// [Asm]   mv v19, v5  # live: [v11, v16, v14, v10, v13, v7, v17, v12, v9, v18, zero, v8, v19, v6, v15]
// [Asm]   mv v20, v6  # live: [v11, v16, v14, v10, v13, v7, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v21, v7  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v16, v18], upward_exposed: [v16, v18], params_defs: [v19, v16, v17, v18, v21, v20]
// [Asm] # live_in: [v11, v16, v14, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15], live_out: [v11, v16, v14, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] # block parameters: [v16, v17, v18, v19, v20, v21]
// [Asm] .aux46.256_0:
// [Asm] # control
// [Asm]   bge v16, v18, .aux46.256_1  # live: [v11, v16, v14, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [v24], uses: [v19, v16, v24, v10], upward_exposed: [v19, v16, v10], params_defs: []
// [Asm] # live_in: [v11, v16, v14, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15], live_out: [v11, v16, v14, v21, v10, v13, v17, v24, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] # block parameters: []
// [Asm] .aux46.256_2:
// [Asm]   th.lurw v24, v19, v16, 2  # live: [v11, v16, v14, v21, v10, v13, v17, v24, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] # control
// [Asm]   beq v24, v10, .aux46.256_3  # live: [v11, v16, v14, v21, v10, v13, v17, v24, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v24, v13], upward_exposed: [v24, v13], params_defs: []
// [Asm] # live_in: [v11, v16, v14, v21, v10, v13, v17, v24, v12, v9, v18, zero, v20, v8, v19, v15], live_out: [v11, v16, v14, v21, v10, v13, v17, v12, v24, v9, v18, zero, v20, v8, v19, v15]
// [Asm] # block parameters: []
// [Asm] .aux46.256_4:
// [Asm] # control
// [Asm]   beq v24, v13, .aux46.256_5  # live: [v11, v16, v14, v21, v10, v13, v17, v12, v24, v9, v18, zero, v20, v8, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v11, v24], upward_exposed: [v11, v24], params_defs: []
// [Asm] # live_in: [v11, v16, v14, v21, v10, v13, v17, v24, v12, v9, v18, zero, v20, v8, v19, v15], live_out: [v11, v16, v14, v21, v10, v13, v17, v12, v24, v9, v18, zero, v20, v8, v19, v15]
// [Asm] # block parameters: []
// [Asm] .aux46.256_6:
// [Asm] # control
// [Asm]   beq v24, v11, .aux46.256_7  # live: [v11, v16, v14, v21, v10, v13, v17, v12, v24, v9, v18, zero, v20, v8, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v24, v8], upward_exposed: [v24, v8], params_defs: []
// [Asm] # live_in: [v11, v16, v14, v21, v10, v13, v17, v24, v12, v9, v18, zero, v20, v8, v19, v15], live_out: [v11, v16, v14, v21, v10, v13, v17, v24, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] # block parameters: []
// [Asm] .aux46.256_8:
// [Asm] # control
// [Asm]   beq v24, v8, .aux46.256_9  # live: [v11, v16, v14, v21, v10, v13, v17, v24, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v14, v24], upward_exposed: [v14, v24], params_defs: []
// [Asm] # live_in: [v11, v14, v16, v21, v10, v13, v17, v24, v12, v9, v18, zero, v20, v8, v19, v15], live_out: [v11, v16, v14, v10, v21, v13, v17, v24, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] # block parameters: []
// [Asm] .aux46.256_10:
// [Asm] # control
// [Asm]   beq v24, v14, .aux46.256_11  # live: [v11, v16, v14, v10, v21, v13, v17, v24, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v24, v12], upward_exposed: [v24, v12], params_defs: []
// [Asm] # live_in: [v11, v16, v14, v10, v21, v13, v17, v24, v12, v9, v18, zero, v20, v8, v19, v15], live_out: [v11, v16, v14, v10, v21, v13, v17, v24, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] # block parameters: []
// [Asm] .aux46.256_12:
// [Asm] # control
// [Asm]   beq v24, v12, .aux46.256_13  # live: [v11, v16, v14, v10, v21, v13, v17, v24, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v24, v15], upward_exposed: [v24, v15], params_defs: []
// [Asm] # live_in: [v11, v16, v14, v10, v21, v13, v17, v24, v12, v9, v18, zero, v20, v8, v19, v15], live_out: [v11, v16, v14, v10, v21, v13, v17, v24, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] # block parameters: []
// [Asm] .aux46.256_14:
// [Asm] # control
// [Asm]   beq v24, v15, .aux46.256_15  # live: [v11, v16, v14, v10, v21, v13, v17, v24, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v24, v9], upward_exposed: [v24, v9], params_defs: []
// [Asm] # live_in: [v16, v24, v9], live_out: [v16]
// [Asm] # block parameters: []
// [Asm] .aux46.256_16:
// [Asm] # control
// [Asm]   bne v24, v9, .aux46.256_18  # live: [v16]
// [Asm] 
// [Asm] # block info: defs: [v33], uses: [v16], upward_exposed: [v16], params_defs: []
// [Asm] # live_in: [v16], live_out: [v33]
// [Asm] # block parameters: []
// [Asm] .aux46.256_17:
// [Asm] # control
// [Asm]   mv v33, v16  # live: [v33]
// [Asm] 
// [Asm] # block info: defs: [v34], uses: [v33], upward_exposed: [v33], params_defs: [v33]
// [Asm] # live_in: [v33], live_out: [v34]
// [Asm] # block parameters: [v33]
// [Asm] .aux46.256_19:
// [Asm] # control
// [Asm]   mv v34, v33  # live: [v34]
// [Asm] 
// [Asm] # block info: defs: [v35], uses: [v34], upward_exposed: [v34], params_defs: [v34]
// [Asm] # live_in: [v34], live_out: [v35]
// [Asm] # block parameters: [v34]
// [Asm] .aux46.256_20:
// [Asm] # control
// [Asm]   mv v35, v34  # live: [v35]
// [Asm] 
// [Asm] # block info: defs: [v36], uses: [v35], upward_exposed: [v35], params_defs: [v35]
// [Asm] # live_in: [v35], live_out: [v36]
// [Asm] # block parameters: [v35]
// [Asm] .aux46.256_21:
// [Asm] # control
// [Asm]   mv v36, v35  # live: [v36]
// [Asm] 
// [Asm] # block info: defs: [v37], uses: [v36], upward_exposed: [v36], params_defs: [v36]
// [Asm] # live_in: [v36], live_out: [v37]
// [Asm] # block parameters: [v36]
// [Asm] .aux46.256_22:
// [Asm] # control
// [Asm]   mv v37, v36  # live: [v37]
// [Asm] 
// [Asm] # block info: defs: [v38], uses: [v37], upward_exposed: [v37], params_defs: [v37]
// [Asm] # live_in: [v37], live_out: [v38]
// [Asm] # block parameters: [v37]
// [Asm] .aux46.256_23:
// [Asm] # control
// [Asm]   mv v38, v37  # live: [v38]
// [Asm] 
// [Asm] # block info: defs: [v39], uses: [v38], upward_exposed: [v38], params_defs: [v38]
// [Asm] # live_in: [v38], live_out: [v39]
// [Asm] # block parameters: [v38]
// [Asm] .aux46.256_24:
// [Asm] # control
// [Asm]   mv v39, v38  # live: [v39]
// [Asm] 
// [Asm] # block info: defs: [v40], uses: [v39], upward_exposed: [v39], params_defs: [v39]
// [Asm] # live_in: [v39], live_out: [v40]
// [Asm] # block parameters: [v39]
// [Asm] .aux46.256_25:
// [Asm] # control
// [Asm]   mv v40, v39  # live: [v40]
// [Asm] 
// [Asm] # block info: defs: [v113], uses: [v40], upward_exposed: [v40], params_defs: [v40]
// [Asm] # live_in: [v40], live_out: [v113]
// [Asm] # block parameters: [v40]
// [Asm] .aux46.256_26:
// [Asm] # control
// [Asm]   mv v113, v40  # live: [v113]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v113, a0], upward_exposed: [v113], params_defs: [v113]
// [Asm] # live_in: [v113], live_out: []
// [Asm] # block parameters: [v113]
// [Asm] .aux46.256_27:
// [Asm] # control
// [Asm]   mv a0, v113  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v33], uses: [v16], upward_exposed: [v16], params_defs: []
// [Asm] # live_in: [v16], live_out: [v33]
// [Asm] # block parameters: []
// [Asm] .aux46.256_18:
// [Asm] # control
// [Asm]   mv v33, v16  # live: [v33]
// [Asm]   j .aux46.256_19  # live: [v33]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v16, v21], upward_exposed: [v16, v21], params_defs: []
// [Asm] # live_in: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15], live_out: [v11, v16, v14, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] # block parameters: []
// [Asm] .aux46.256_15:
// [Asm]   sw v16, 0(v21)  # live: [v11, v16, v14, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v47, v43, v46, v44, v42, v45], uses: [v19, v17, v16, v18, v21, v20], upward_exposed: [v19, v17, v16, v18, v21, v20], params_defs: []
// [Asm] # live_in: [v11, v16, v14, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15], live_out: [v11, v46, v14, v10, v21, v13, v42, v17, v43, v12, v44, v9, v18, zero, v20, v45, v8, v19, v47, v15]
// [Asm] # block parameters: []
// [Asm] .aux46.256_62:
// [Asm] # control
// [Asm]   mv v42, v17  # live: [v11, v14, v16, v21, v10, v13, v42, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v43, v18  # live: [v11, v14, v16, v21, v10, v13, v42, v17, v43, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v44, v16  # live: [v11, v14, v10, v21, v42, v13, v17, v43, v12, v44, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v45, v19  # live: [v11, v14, v10, v21, v42, v13, v17, v43, v12, v44, v9, v18, zero, v20, v45, v8, v19, v15]
// [Asm]   mv v46, v20  # live: [v11, v46, v14, v10, v21, v42, v13, v17, v43, v12, v44, v9, v18, zero, v20, v45, v8, v19, v15]
// [Asm]   mv v47, v21  # live: [v11, v46, v14, v10, v21, v42, v13, v17, v43, v12, v44, v9, v18, zero, v20, v45, v8, v19, v47, v15]
// [Asm] 
// [Asm] # block info: defs: [v48, v50], uses: [v46, v48, v42, zero, v50], upward_exposed: [v46, v42, zero], params_defs: [v47, v43, v46, v44, v42, v45]
// [Asm] # live_in: [v11, v46, v14, v10, v21, v13, v42, v17, v43, v12, v44, v9, v18, zero, v20, v45, v8, v19, v47, v15], live_out: [v11, v46, v14, v10, v21, v13, v42, v17, v43, v12, v44, v9, v18, zero, v20, v45, v8, v19, v47, v15]
// [Asm] # block parameters: [v42, v43, v44, v45, v46, v47]
// [Asm] .aux46.256_57:
// [Asm]   lw v48, 0(v42)  # live: [v11, v46, v14, v10, v21, v42, v13, v17, v43, v12, v44, v9, v18, v48, zero, v20, v8, v45, v19, v47, v15]
// [Asm]   th.lurw v50, v46, v48, 2  # live: [v11, v46, v14, v10, v21, v42, v13, v17, v43, v12, v44, v9, v18, zero, v20, v50, v8, v45, v19, v47, v15]
// [Asm] # control
// [Asm]   beq v50, zero, .aux46.256_58  # live: [v11, v46, v14, v10, v21, v42, v13, v17, v43, v12, v44, v9, v18, zero, v20, v45, v8, v19, v47, v15]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, v53, a5, fa4, a0, ft2, a2, v52, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v46, v53, a5, v42, a0, a2, a1, v43, v52, a3, v44, a4, v45, v47], upward_exposed: [v46, v42, v45, v47, v43, v44], params_defs: []
// [Asm] # live_in: [v11, v46, v14, v10, v21, v13, v42, v17, v43, v12, v44, v9, v18, zero, v20, v45, v8, v19, v47, v15], live_out: [v11, v46, v14, v10, v21, v13, v42, v17, v43, v12, v44, v9, v18, zero, v20, v45, v8, v19, v47, v15]
// [Asm] # block parameters: []
// [Asm] .aux46.256_59:
// [Asm]   addi v52, v44, 1  # live: [v11, v46, v14, v10, v21, v42, v13, v43, v17, v12, v52, v44, v9, v18, zero, v20, v8, v45, v19, v47, v15]
// [Asm]   # save_ctx2  # live: [v11, v46, v14, v10, v21, v42, v13, v43, v17, v12, v52, v44, v9, v18, zero, v20, v8, v45, v19, v47, v15]
// [Asm]   mv a0, v52  # live: [v11, v46, v14, v10, v21, v42, a0, v13, v43, v17, v12, v44, v9, v18, zero, v20, v8, v45, v19, v47, v15]
// [Asm]   mv a1, v42  # live: [v11, v46, v14, v10, v21, v42, a0, v13, v43, a1, v17, v12, v44, v9, v18, zero, v20, v8, v45, v19, v47, v15]
// [Asm]   mv a2, v43  # live: [v11, v46, v14, v10, v21, v42, a0, v13, a2, v43, a1, v17, v12, v44, v9, v18, zero, v20, v8, v45, v19, v47, v15]
// [Asm]   mv a3, v45  # live: [v11, v46, v14, v10, v21, v42, a0, v13, a2, v43, a1, v17, a3, v12, v44, v9, v18, zero, v20, v8, v45, v19, v47, v15]
// [Asm]   mv a4, v46  # live: [v11, v46, v14, v10, v21, v42, a0, v13, a2, v43, a1, v17, a3, v12, v44, v9, v18, zero, v20, a4, v8, v45, v19, v47, v15]
// [Asm]   mv a5, v47  # live: [v11, v46, v14, v10, v21, a5, v42, a0, v13, a2, v43, a1, v17, a3, v12, v44, v9, v18, zero, v20, a4, v8, v45, v19, v47, v15]
// [Asm]   call aux46.256  # live: [v11, v46, v14, v10, v21, v13, v42, a0, v17, v43, v12, v44, v9, v18, zero, v20, v45, v8, v19, v47, v15]
// [Asm]   mv v53, a0  # live: [v11, v46, v14, v10, v21, v53, v13, v42, v17, v43, v12, v44, v9, v18, zero, v20, v45, v8, v19, v47, v15]
// [Asm]   # restore_ctx2  # live: [v11, v46, v14, v10, v21, v53, v13, v42, v17, v43, v12, v44, v9, v18, zero, v20, v45, v8, v19, v47, v15]
// [Asm]   sw v53, 0(v47)  # live: [v11, v46, v14, v10, v21, v42, v13, v17, v43, v12, v44, v9, v18, zero, v20, v45, v8, v19, v47, v15]
// [Asm] # control
// [Asm]   mv v42, v42  # live: [v11, v46, v14, v10, v21, v42, v13, v17, v43, v12, v44, v9, v18, zero, v20, v45, v8, v19, v47, v15]
// [Asm]   mv v43, v43  # live: [v11, v46, v14, v10, v21, v42, v13, v17, v43, v12, v44, v9, v18, zero, v20, v45, v8, v19, v47, v15]
// [Asm]   mv v44, v44  # live: [v11, v46, v14, v10, v21, v42, v13, v17, v43, v12, v44, v9, v18, zero, v20, v45, v8, v19, v47, v15]
// [Asm]   mv v45, v45  # live: [v11, v46, v14, v10, v21, v42, v13, v17, v43, v12, v44, v9, v18, zero, v20, v45, v8, v19, v47, v15]
// [Asm]   mv v46, v46  # live: [v11, v46, v14, v10, v21, v42, v13, v17, v43, v12, v44, v9, v18, zero, v20, v45, v8, v19, v47, v15]
// [Asm]   mv v47, v47  # live: [v11, v46, v14, v10, v21, v42, v13, v17, v43, v12, v44, v9, v18, zero, v20, v45, v8, v19, v47, v15]
// [Asm]   j .aux46.256_57  # live: [v11, v46, v14, v10, v21, v42, v13, v17, v43, v12, v44, v9, v18, zero, v20, v45, v8, v19, v47, v15]
// [Asm] 
// [Asm] # block info: defs: [t1, v16, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, v87, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, v84, t4, t2, v83], uses: [v16, v87, v18, v21, a0, v20, v84, v19, v17, v83], upward_exposed: [v19, v17, v16, v18, v21, v20], params_defs: []
// [Asm] # live_in: [v11, v16, v14, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15], live_out: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] # block parameters: []
// [Asm] .aux46.256_13:
// [Asm]   lw v83, 0(v17)  # live: [v11, v14, v16, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15, v83]
// [Asm]   # save_ctx2  # live: [v11, v14, v16, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15, v83]
// [Asm]   call read_ch_until_newline_or_eof1.252  # live: [v11, v14, v16, v10, v21, v13, a0, v17, v12, v9, v18, zero, v20, v8, v19, v15, v83]
// [Asm]   mv v84, a0  # live: [v11, v14, v16, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v84, v15, v83]
// [Asm]   # restore_ctx2  # live: [v11, v14, v16, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v84, v15, v83]
// [Asm]   th.surw v84, v20, v83, 2  # live: [v11, v14, v16, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   addi v87, v16, 1  # live: [v11, v14, v87, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] # control
// [Asm]   mv v16, v87  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v17, v17  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v18, v18  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v19, v19  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v20, v20  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v21, v21  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   j .aux46.256_0  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [t1, v91, v16, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, v90, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, v88, ft2, v92, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v16, v18, v21, a0, v20, v88, v92, v19, v90, v17], upward_exposed: [v19, v17, v16, v18, v21, v20], params_defs: []
// [Asm] # live_in: [v11, v16, v14, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15], live_out: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] # block parameters: []
// [Asm] .aux46.256_11:
// [Asm]   lw v88, 0(v17)  # live: [v11, v14, v16, v21, v10, v13, v88, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   th.lurw v90, v20, v88, 2  # live: [v11, v14, v16, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v90, v15]
// [Asm]   # save_ctx2  # live: [v11, v14, v16, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v90, v15]
// [Asm]   mv a0, v90  # live: [v11, v14, v16, v21, v10, v13, a0, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   call minimbt_print_char  # live: [v11, v14, v16, v21, v10, v13, a0, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v91, a0  # live: [v11, v14, v16, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   # restore_ctx2  # live: [v11, v14, v16, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   addi v92, v16, 1  # live: [v11, v14, v10, v21, v13, v92, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] # control
// [Asm]   mv v16, v92  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v17, v17  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v18, v18  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v19, v19  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v20, v20  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v21, v21  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   j .aux46.256_0  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [v98, v95, v16, v96, v93], uses: [v98, v16, v18, v21, v96, v20, v95, v19, v17, v93], upward_exposed: [v19, v17, v16, v18, v21, v20], params_defs: []
// [Asm] # live_in: [v11, v16, v14, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15], live_out: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] # block parameters: []
// [Asm] .aux46.256_9:
// [Asm]   lw v93, 0(v17)  # live: [v11, v14, v16, v21, v10, v13, v17, v12, v9, v93, v18, zero, v20, v8, v19, v15]
// [Asm]   th.lurw v95, v20, v93, 2  # live: [v11, v14, v16, v21, v10, v13, v95, v17, v12, v9, v93, v18, zero, v20, v8, v19, v15]
// [Asm]   addi v96, v95, -1  # live: [v11, v14, v16, v21, v10, v13, v17, v12, v9, v93, v18, v96, zero, v20, v8, v19, v15]
// [Asm]   th.surw v96, v20, v93, 2  # live: [v11, v14, v16, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   addi v98, v16, 1  # live: [v11, v14, v10, v21, v13, v17, v12, v9, v98, v18, zero, v20, v8, v19, v15]
// [Asm] # control
// [Asm]   mv v16, v98  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v17, v17  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v18, v18  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v19, v19  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v20, v20  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v21, v21  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   j .aux46.256_0  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [v104, v16, v102, v99, v101], uses: [v16, v18, v21, v99, v20, v104, v19, v17, v102, v101], upward_exposed: [v19, v17, v16, v18, v21, v20], params_defs: []
// [Asm] # live_in: [v11, v16, v14, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15], live_out: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] # block parameters: []
// [Asm] .aux46.256_7:
// [Asm]   lw v99, 0(v17)  # live: [v11, v14, v16, v21, v10, v13, v17, v12, v9, v18, v99, zero, v20, v8, v19, v15]
// [Asm]   th.lurw v101, v20, v99, 2  # live: [v11, v14, v16, v21, v10, v13, v17, v12, v9, v101, v18, v99, zero, v20, v8, v19, v15]
// [Asm]   addi v102, v101, 1  # live: [v11, v14, v16, v21, v10, v13, v17, v12, v9, v18, v99, zero, v20, v8, v19, v15, v102]
// [Asm]   th.surw v102, v20, v99, 2  # live: [v11, v14, v16, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   addi v104, v16, 1  # live: [v11, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v104, v15]
// [Asm] # control
// [Asm]   mv v16, v104  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v17, v17  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v18, v18  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v19, v19  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v20, v20  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v21, v21  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   j .aux46.256_0  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [v105, v106, v108, v16], uses: [v106, v16, v18, v21, v20, v105, v19, v17, v108], upward_exposed: [v19, v17, v16, v18, v21, v20], params_defs: []
// [Asm] # live_in: [v11, v16, v14, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15], live_out: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] # block parameters: []
// [Asm] .aux46.256_5:
// [Asm]   lw v105, 0(v17)  # live: [v11, v14, v16, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v105, v15]
// [Asm]   addi v106, v105, -1  # live: [v11, v14, v16, v21, v10, v13, v17, v12, v9, v106, v18, zero, v20, v8, v19, v15]
// [Asm]   sw v106, 0(v17)  # live: [v11, v14, v16, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   addi v108, v16, 1  # live: [v11, v14, v10, v21, v13, v17, v108, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] # control
// [Asm]   mv v16, v108  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v17, v17  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v18, v18  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v19, v19  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v20, v20  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v21, v21  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   j .aux46.256_0  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [v109, v112, v16, v110], uses: [v109, v112, v16, v18, v21, v110, v20, v19, v17], upward_exposed: [v19, v17, v16, v18, v21, v20], params_defs: []
// [Asm] # live_in: [v11, v16, v14, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15], live_out: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] # block parameters: []
// [Asm] .aux46.256_3:
// [Asm]   lw v109, 0(v17)  # live: [v11, v14, v16, v21, v10, v13, v17, v12, v9, v109, v18, zero, v20, v8, v19, v15]
// [Asm]   addi v110, v109, 1  # live: [v11, v14, v16, v21, v10, v13, v110, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   sw v110, 0(v17)  # live: [v11, v14, v16, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   addi v112, v16, 1  # live: [v11, v14, v10, v21, v13, v17, v12, v9, v112, v18, zero, v20, v8, v19, v15]
// [Asm] # control
// [Asm]   mv v16, v112  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v17, v17  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v18, v18  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v19, v19  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v20, v20  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v21, v21  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   j .aux46.256_0  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [v113], uses: [v16], upward_exposed: [v16], params_defs: []
// [Asm] # live_in: [v16], live_out: [v113]
// [Asm] # block parameters: []
// [Asm] .aux46.256_1:
// [Asm] # control
// [Asm]   mv v113, v16  # live: [v113]
// [Asm]   j .aux46.256_27  # live: [v113]
// [Asm] 
// [Asm] # block info: defs: [v55], uses: [v44], upward_exposed: [v44], params_defs: []
// [Asm] # live_in: [v11, v14, v21, v10, v13, v43, v17, v12, v44, v9, v18, zero, v20, v45, v8, v19, v47, v15], live_out: [v11, v14, v21, v10, v13, v43, v17, v12, v9, v18, zero, v20, v45, v8, v19, v47, v15, v55]
// [Asm] # block parameters: []
// [Asm] .aux46.256_58:
// [Asm]   addi v55, v44, 1  # live: [v11, v14, v10, v21, v13, v43, v17, v12, v9, v18, zero, v20, v45, v8, v19, v47, v15, v55]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v59, v58, v56, v57, v61, v60], uses: [v43, v55, zero, v45], upward_exposed: [v43, v55, zero, v45], params_defs: []
// [Asm] # live_in: [v11, v14, v21, v10, v13, v43, v17, v12, v9, v18, zero, v20, v45, v8, v19, v47, v15, v55], live_out: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] # block parameters: []
// [Asm] .aux46.256_80:
// [Asm]   lw v56, loop_end.12  # live: [v11, v14, v10, v21, v13, v17, v43, v12, v9, v56, v18, zero, v20, v8, v45, v19, v47, v15, v55]
// [Asm]   lw v57, loop_start.11  # live: [v11, v14, v10, v21, v13, v17, v43, v12, v9, v56, v18, zero, v20, v8, v45, v19, v47, v15, v57, v55]
// [Asm] # control
// [Asm]   mv v58, v55  # live: [v11, v58, v14, v10, v21, v13, v17, v43, v12, v9, v56, v18, zero, v20, v8, v45, v19, v47, v15, v57]
// [Asm]   mv v59, zero  # live: [v11, v58, v14, v10, v21, v13, v17, v43, v12, v9, v56, v18, zero, v20, v8, v45, v19, v47, v59, v15, v57]
// [Asm]   mv v60, v43  # live: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v45, v19, v47, v59, v15, v57]
// [Asm]   mv v61, v45  # live: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v58, v60], upward_exposed: [v58, v60], params_defs: [v59, v58, v61, v60]
// [Asm] # live_in: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15], live_out: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] # block parameters: [v58, v59, v60, v61]
// [Asm] .aux46.256_66:
// [Asm] # control
// [Asm]   bge v58, v60, .aux46.256_67  # live: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] 
// [Asm] # block info: defs: [v64], uses: [v58, v61, v57, v64], upward_exposed: [v58, v61, v57], params_defs: []
// [Asm] # live_in: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15], live_out: [v11, v58, v14, v10, v21, v13, v17, v12, v64, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] # block parameters: []
// [Asm] .aux46.256_68:
// [Asm]   th.lurw v64, v61, v58, 2  # live: [v11, v58, v14, v10, v21, v13, v17, v12, v64, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] # control
// [Asm]   beq v64, v57, .aux46.256_69  # live: [v11, v58, v14, v10, v21, v13, v17, v12, v64, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v56, v64], upward_exposed: [v56, v64], params_defs: []
// [Asm] # live_in: [v11, v58, v14, v10, v21, v13, v17, v12, v64, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15], live_out: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] # block parameters: []
// [Asm] .aux46.256_70:
// [Asm] # control
// [Asm]   bne v64, v56, .aux46.256_72  # live: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v59, zero], upward_exposed: [v59, zero], params_defs: []
// [Asm] # live_in: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15], live_out: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] # block parameters: []
// [Asm] .aux46.256_71:
// [Asm] # control
// [Asm]   beq v59, zero, .aux46.256_73  # live: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] 
// [Asm] # block info: defs: [v59, v69, v70, v58], uses: [v59, v58, v69, v70, v61, v60], upward_exposed: [v59, v58, v61, v60], params_defs: []
// [Asm] # live_in: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15], live_out: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] # block parameters: []
// [Asm] .aux46.256_74:
// [Asm]   addi v69, v58, 1  # live: [v11, v14, v69, v21, v10, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v47, v59, v57, v61, v15]
// [Asm]   addi v70, v59, -1  # live: [v11, v14, v69, v21, v10, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v47, v70, v57, v61, v15]
// [Asm] # control
// [Asm]   mv v58, v69  # live: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v47, v70, v57, v61, v15]
// [Asm]   mv v59, v70  # live: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm]   mv v60, v60  # live: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm]   mv v61, v61  # live: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm]   j .aux46.256_66  # live: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] 
// [Asm] # block info: defs: [v71], uses: [v58], upward_exposed: [v58], params_defs: []
// [Asm] # live_in: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v47, v15], live_out: [v11, v71, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v47, v15]
// [Asm] # block parameters: []
// [Asm] .aux46.256_73:
// [Asm] # control
// [Asm]   mv v71, v58  # live: [v11, v71, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v47, v15]
// [Asm] 
// [Asm] # block info: defs: [v72], uses: [v71], upward_exposed: [v71], params_defs: [v71]
// [Asm] # live_in: [v11, v71, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v47, v15], live_out: [v11, v14, v21, v10, v13, v17, v12, v9, v72, v18, zero, v20, v8, v19, v47, v15]
// [Asm] # block parameters: [v71]
// [Asm] .aux46.256_75:
// [Asm] # control
// [Asm]   mv v72, v71  # live: [v11, v14, v10, v21, v13, v17, v12, v9, v72, v18, zero, v20, v8, v19, v47, v15]
// [Asm] 
// [Asm] # block info: defs: [v73], uses: [v72], upward_exposed: [v72], params_defs: [v72]
// [Asm] # live_in: [v11, v14, v21, v10, v13, v17, v12, v9, v72, v18, zero, v20, v8, v19, v47, v15], live_out: [v11, v14, v21, v10, v13, v17, v12, v9, v73, v18, zero, v20, v8, v19, v47, v15]
// [Asm] # block parameters: [v72]
// [Asm] .aux46.256_76:
// [Asm] # control
// [Asm]   mv v73, v72  # live: [v11, v14, v10, v21, v13, v17, v12, v9, v73, v18, zero, v20, v8, v19, v47, v15]
// [Asm] 
// [Asm] # block info: defs: [v76], uses: [v73], upward_exposed: [v73], params_defs: [v73]
// [Asm] # live_in: [v11, v14, v21, v10, v13, v17, v12, v9, v73, v18, zero, v20, v8, v19, v47, v15], live_out: [v11, v14, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v47, v15, v76]
// [Asm] # block parameters: [v73]
// [Asm] .aux46.256_77:
// [Asm] # control
// [Asm]   mv v76, v73  # live: [v11, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v47, v15, v76]
// [Asm] 
// [Asm] # block info: defs: [v77], uses: [v76], upward_exposed: [v76], params_defs: [v76]
// [Asm] # live_in: [v11, v14, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v47, v15, v76], live_out: [v11, v14, v21, v10, v13, v17, v12, v9, v18, zero, v77, v20, v8, v19, v47, v15]
// [Asm] # block parameters: [v76]
// [Asm] .aux46.256_78:
// [Asm] # control
// [Asm]   mv v77, v76  # live: [v11, v14, v10, v21, v13, v17, v12, v9, v18, zero, v77, v20, v8, v19, v47, v15]
// [Asm] 
// [Asm] # block info: defs: [v79], uses: [v47, zero, v77], upward_exposed: [v47, zero, v77], params_defs: [v77]
// [Asm] # live_in: [v11, v14, v21, v10, v13, v17, v12, v9, v18, zero, v77, v20, v8, v19, v47, v15], live_out: [v11, v14, v21, v10, v79, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] # block parameters: [v77]
// [Asm] .aux46.256_63:
// [Asm]   sw v77, 0(v47)  # live: [v11, v14, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] # control
// [Asm]   mv v79, zero  # live: [v11, v14, v21, v10, v13, v79, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [v80], uses: [v79], upward_exposed: [v79], params_defs: [v79]
// [Asm] # live_in: [v11, v14, v21, v10, v79, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15], live_out: [v11, v14, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v80, v15]
// [Asm] # block parameters: [v79]
// [Asm] .aux46.256_60:
// [Asm] # control
// [Asm]   mv v80, v79  # live: [v11, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v80, v15]
// [Asm] 
// [Asm] # block info: defs: [v81, v82, v16], uses: [v82, v21, v18, v20, v19, v81, v17], upward_exposed: [v19, v17, v21, v18, v20], params_defs: [v80]
// [Asm] # live_in: [v11, v14, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v80, v15], live_out: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] # block parameters: [v80]
// [Asm] .aux46.256_30:
// [Asm]   lw v81, 0(v21)  # live: [v11, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v81, v15]
// [Asm]   addi v82, v81, 1  # live: [v11, v14, v10, v21, v13, v17, v12, v9, v82, v18, zero, v20, v8, v19, v15]
// [Asm] # control
// [Asm]   mv v16, v82  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v17, v17  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v18, v18  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v19, v19  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v20, v20  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   mv v21, v21  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm]   j .aux46.256_0  # live: [v11, v16, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [v58, v67], uses: [v59, v58, v61, v67, v60], upward_exposed: [v59, v58, v61, v60], params_defs: []
// [Asm] # live_in: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15], live_out: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] # block parameters: []
// [Asm] .aux46.256_72:
// [Asm]   addi v67, v58, 1  # live: [v11, v14, v10, v21, v13, v67, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] # control
// [Asm]   mv v58, v67  # live: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm]   mv v59, v59  # live: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm]   mv v60, v60  # live: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm]   mv v61, v61  # live: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm]   j .aux46.256_66  # live: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] 
// [Asm] # block info: defs: [v59, v74, v58, v75], uses: [v59, v58, v74, v75, v61, v60], upward_exposed: [v59, v58, v61, v60], params_defs: []
// [Asm] # live_in: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15], live_out: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] # block parameters: []
// [Asm] .aux46.256_69:
// [Asm]   addi v74, v58, 1  # live: [v11, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v47, v59, v74, v15, v57, v61]
// [Asm]   addi v75, v59, 1  # live: [v11, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, v75, zero, v20, v8, v19, v47, v74, v61, v15, v57]
// [Asm] # control
// [Asm]   mv v58, v74  # live: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, v75, zero, v20, v8, v19, v47, v57, v61, v15]
// [Asm]   mv v59, v75  # live: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm]   mv v60, v60  # live: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm]   mv v61, v61  # live: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm]   j .aux46.256_66  # live: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v60, v56, v18, zero, v20, v8, v19, v59, v47, v57, v61, v15]
// [Asm] 
// [Asm] # block info: defs: [v76], uses: [v58], upward_exposed: [v58], params_defs: []
// [Asm] # live_in: [v11, v58, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v47, v15], live_out: [v11, v14, v21, v10, v13, v17, v12, v9, v18, zero, v20, v8, v19, v47, v15, v76]
// [Asm] # block parameters: []
// [Asm] .aux46.256_67:
// [Asm] # control
// [Asm]   mv v76, v58  # live: [v11, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v47, v15, v76]
// [Asm]   j .aux46.256_78  # live: [v11, v14, v10, v21, v13, v17, v12, v9, v18, zero, v20, v8, v19, v47, v15, v76]
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0, sp, s0, ra, s11, t5], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$move_left.5  # live: [s0, a0]
// [Asm]   la t5, move_left.5  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$move_right.6  # live: [s0, a0]
// [Asm]   la t5, move_right.6  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$increase.7  # live: [s0, a0]
// [Asm]   la t5, increase.7  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$decrease.8  # live: [s0, a0]
// [Asm]   la t5, decrease.8  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$print.9  # live: [s0, a0]
// [Asm]   la t5, print.9  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$read.10  # live: [s0, a0]
// [Asm]   la t5, read.10  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$loop_start.11  # live: [s0, a0]
// [Asm]   la t5, loop_start.11  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$loop_end.12  # live: [s0, a0]
// [Asm]   la t5, loop_end.12  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$increase.7:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$increase.7_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 43  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] loop_end.12:
// [Asm]   .zero 4
// [Asm] print.9:
// [Asm]   .zero 4
// [Asm] read.10:
// [Asm]   .zero 4
// [Asm] move_right.6:
// [Asm]   .zero 4
// [Asm] start:
// [Asm]   .zero 4
// [Asm] move_left.5:
// [Asm]   .zero 4
// [Asm] decrease.8:
// [Asm]   .zero 4
// [Asm] increase.7:
// [Asm]   .zero 4
// [Asm] loop_start.11:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("read_ch_until_newline_or_eof", Int), args: [], body: Let(("c", Var({val: Some(Int)})), App(Var("read_char"), []), If(Eq(Var("c"), Int(10)), Neg(Int(1), kind=Some(Int)), If(Eq(Var("c"), Int(13)), Neg(Int(1), kind=Some(Int)), Var("c"))))}, Let(("move_left", Int), Int(60), Let(("move_right", Int), Int(62), Let(("increase", Int), Int(43), Let(("decrease", Int), Int(45), Let(("print", Int), Int(46), Let(("read", Int), Int(44), Let(("loop_start", Int), Int(91), Let(("loop_end", Int), Int(93), LetRec({name: ("bf", Unit), args: [("len", Int), ("prog", Array(Int))], body: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("loop_start")), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Var("loop_end")), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("move_right")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), []))))))))))))
// [Knf] build_knf: Let(("c", Var({val: Some(Int)})), App(Var("read_char"), []), If(Eq(Var("c"), Int(10)), Neg(Int(1), kind=Some(Int)), If(Eq(Var("c"), Int(13)), Neg(Int(1), kind=Some(Int)), Var("c"))))
// [Knf] build_knf: App(Var("read_char"), [])
// [Knf] build_knf: If(Eq(Var("c"), Int(10)), Neg(Int(1), kind=Some(Int)), If(Eq(Var("c"), Int(13)), Neg(Int(1), kind=Some(Int)), Var("c")))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Neg(Int(1), kind=Some(Int))
// [Knf] build_knf: If(Eq(Var("c"), Int(13)), Neg(Int(1), kind=Some(Int)), Var("c"))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(13)
// [Knf] build_knf: Neg(Int(1), kind=Some(Int))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Let(("move_left", Int), Int(60), Let(("move_right", Int), Int(62), Let(("increase", Int), Int(43), Let(("decrease", Int), Int(45), Let(("print", Int), Int(46), Let(("read", Int), Int(44), Let(("loop_start", Int), Int(91), Let(("loop_end", Int), Int(93), LetRec({name: ("bf", Unit), args: [("len", Int), ("prog", Array(Int))], body: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("loop_start")), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Var("loop_end")), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("move_right")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), [])))))))))))
// [Knf] build_knf: Int(60)
// [Knf] build_knf: Let(("move_right", Int), Int(62), Let(("increase", Int), Int(43), Let(("decrease", Int), Int(45), Let(("print", Int), Int(46), Let(("read", Int), Int(44), Let(("loop_start", Int), Int(91), Let(("loop_end", Int), Int(93), LetRec({name: ("bf", Unit), args: [("len", Int), ("prog", Array(Int))], body: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("loop_start")), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Var("loop_end")), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("move_right")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), []))))))))))
// [Knf] build_knf: Int(62)
// [Knf] build_knf: Let(("increase", Int), Int(43), Let(("decrease", Int), Int(45), Let(("print", Int), Int(46), Let(("read", Int), Int(44), Let(("loop_start", Int), Int(91), Let(("loop_end", Int), Int(93), LetRec({name: ("bf", Unit), args: [("len", Int), ("prog", Array(Int))], body: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("loop_start")), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Var("loop_end")), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("move_right")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), [])))))))))
// [Knf] build_knf: Int(43)
// [Knf] build_knf: Let(("decrease", Int), Int(45), Let(("print", Int), Int(46), Let(("read", Int), Int(44), Let(("loop_start", Int), Int(91), Let(("loop_end", Int), Int(93), LetRec({name: ("bf", Unit), args: [("len", Int), ("prog", Array(Int))], body: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("loop_start")), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Var("loop_end")), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("move_right")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), []))))))))
// [Knf] build_knf: Int(45)
// [Knf] build_knf: Let(("print", Int), Int(46), Let(("read", Int), Int(44), Let(("loop_start", Int), Int(91), Let(("loop_end", Int), Int(93), LetRec({name: ("bf", Unit), args: [("len", Int), ("prog", Array(Int))], body: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("loop_start")), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Var("loop_end")), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("move_right")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), [])))))))
// [Knf] build_knf: Int(46)
// [Knf] build_knf: Let(("read", Int), Int(44), Let(("loop_start", Int), Int(91), Let(("loop_end", Int), Int(93), LetRec({name: ("bf", Unit), args: [("len", Int), ("prog", Array(Int))], body: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("loop_start")), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Var("loop_end")), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("move_right")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), []))))))
// [Knf] build_knf: Int(44)
// [Knf] build_knf: Let(("loop_start", Int), Int(91), Let(("loop_end", Int), Int(93), LetRec({name: ("bf", Unit), args: [("len", Int), ("prog", Array(Int))], body: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("loop_start")), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Var("loop_end")), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("move_right")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), [])))))
// [Knf] build_knf: Int(91)
// [Knf] build_knf: Let(("loop_end", Int), Int(93), LetRec({name: ("bf", Unit), args: [("len", Int), ("prog", Array(Int))], body: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("loop_start")), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Var("loop_end")), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("move_right")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), []))))
// [Knf] build_knf: Int(93)
// [Knf] build_knf: LetRec({name: ("bf", Unit), args: [("len", Int), ("prog", Array(Int))], body: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("loop_start")), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Var("loop_end")), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("move_right")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), [])))
// [Knf] build_knf: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("loop_start")), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Var("loop_end")), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("move_right")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("loop_start")), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Var("loop_end")), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("move_right")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit)))))
// [Knf] build_knf: Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0))
// [Knf] build_knf: Prim(Int(1024), Int(1024), Mul, kind=Some(Int))
// [Knf] build_knf: Int(1024)
// [Knf] build_knf: Int(1024)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("loop_start")), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Var("loop_end")), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("move_right")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("loop_start")), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Var("loop_end")), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("move_right")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit)))
// [Knf] build_knf: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("loop_start")), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Var("loop_end")), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("loop_start")), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Var("loop_end")), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")]))))
// [Knf] build_knf: Get(Var("prog"), Var("pc"))
// [Knf] build_knf: Var("prog")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: If(Eq(Var("i"), Var("loop_start")), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Var("loop_end")), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("loop_start")
// [Knf] build_knf: App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("skip")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Prim(Var("level"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("level")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Var("loop_end")), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")]))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("loop_end")
// [Knf] build_knf: If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))]))
// [Knf] build_knf: Var("level")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("skip")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Prim(Var("level"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("level")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])
// [Knf] build_knf: Var("skip")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("level")
// [Knf] build_knf: LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("move_right")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))
// [Knf] build_knf: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("move_right")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))))))))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("move_right")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc"))))))))))
// [Knf] build_knf: Get(Var("prog"), Var("pc"))
// [Knf] build_knf: Var("prog")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: If(Eq(Var("i"), Var("move_right")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("move_right")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc"))))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("move_left")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("increase")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("cells"), Get(Var("ptr"), Int(0)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc"))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("decrease")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("cells"), Get(Var("ptr"), Int(0)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("print")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))])
// [Knf] build_knf: Get(Var("cells"), Get(Var("ptr"), Int(0)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc"))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("read")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), []))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("read_ch_until_newline_or_eof"), [])
// [Knf] build_knf: Var("read_ch_until_newline_or_eof")
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("loop_start")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: Put(Var("next_pc"), Int(0), Var("pc"))
// [Knf] build_knf: Var("next_pc")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))
// [Knf] build_knf: Get(Var("cells"), Get(Var("ptr"), Int(0)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit)
// [Knf] build_knf: Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)]))
// [Knf] build_knf: Var("next_pc")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])
// [Knf] build_knf: Var("skip")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), []))
// [Knf] build_knf: Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Var("next_pc")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("lp"), [])
// [Knf] build_knf: Var("lp")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("lp"), [])
// [Knf] build_knf: Var("lp")
// [Knf] build_knf: App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("next_pc"), Int(0))
// [Knf] build_knf: Var("next_pc")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc"))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("loop_end")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit)
// [Knf] build_knf: App(Var("aux"), [Int(0)])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))
// [Knf] build_knf: Int(1024)
// [Knf] build_knf: Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit)))
// [Knf] build_knf: Array(Var("len"), Int(0))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))
// [Knf] build_knf: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: App(Var("read_ch_until_newline_or_eof"), [])
// [Knf] build_knf: Var("read_ch_until_newline_or_eof")
// [Knf] build_knf: If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Neg(Int(1), kind=Some(Int))
// [Knf] build_knf: App(Var("bf"), [Var("i"), Var("prog")])
// [Knf] build_knf: Var("bf")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("prog")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("prog"), Var("i"), Var("x"))
// [Knf] build_knf: Var("prog")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("read_prog")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit)
// [Knf] build_knf: App(Var("read_prog"), [Int(0)])
// [Knf] build_knf: Var("read_prog")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl read_prog138.254
// [Main]   .type read_prog138.254, @function
// [Main] # leaf false
// [Main] read_prog138.254:
// [Main] .read_prog138.254_5:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   mv s1, a0
// [Main]   mv s0, a1
// [Main] 
// [Main] .read_prog138.254_0:
// [Main]   call read_ch_until_newline_or_eof1.252
// [Main]   li a1, -1
// [Main]   bne a0, a1, .read_prog138.254_2
// [Main] 
// [Main] .read_prog138.254_1:
// [Main]   addi a2, s11, -4
// [Main]   andi s11, a2, -8
// [Main]   sw zero, 0(a2)
// [Main]   li a0, 1024
// [Main]   slli a0, a0, 10
// [Main]   slliw a1, a0, 2
// [Main]   sub a4, s11, a1
// [Main]   andi s11, a4, -8
// [Main]   mv a1, a0
// [Main]   addi a5, s11, -4
// [Main]   andi s11, a5, -8
// [Main]   sw zero, 0(a5)
// [Main]   mv a0, zero
// [Main]   mv a1, a2
// [Main]   mv a2, s1
// [Main]   mv a3, s0
// [Main]   call aux46.256
// [Main]   mv a0, zero
// [Main] 
// [Main] .read_prog138.254_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .read_prog138.254_2:
// [Main]   th.surw a0, s0, s1, 2
// [Main]   addi a0, s1, 1
// [Main]   mv s1, a0
// [Main]   j .read_prog138.254_0
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$loop_start.11
// [Main]   .type T$loop_start.11, @function
// [Main] # leaf true
// [Main] T$loop_start.11:
// [Main] .T$loop_start.11_0:
// [Main]   li a0, 91
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl read_ch_until_newline_or_eof1.252
// [Main]   .type read_ch_until_newline_or_eof1.252, @function
// [Main] # leaf false
// [Main] read_ch_until_newline_or_eof1.252:
// [Main] .read_ch_until_newline_or_eof1.252_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call minimbt_read_char
// [Main]   li a1, 10
// [Main]   beq a0, a1, .read_ch_until_newline_or_eof1.252_1
// [Main] 
// [Main] .read_ch_until_newline_or_eof1.252_2:
// [Main]   li a1, 13
// [Main]   bne a0, a1, .read_ch_until_newline_or_eof1.252_4
// [Main] 
// [Main] .read_ch_until_newline_or_eof1.252_3:
// [Main]   li a0, -1
// [Main] 
// [Main] .read_ch_until_newline_or_eof1.252_5:
// [Main] 
// [Main] .read_ch_until_newline_or_eof1.252_6:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .read_ch_until_newline_or_eof1.252_4:
// [Main]   j .read_ch_until_newline_or_eof1.252_5
// [Main] 
// [Main] .read_ch_until_newline_or_eof1.252_1:
// [Main]   li a0, -1
// [Main]   j .read_ch_until_newline_or_eof1.252_6
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$decrease.8
// [Main]   .type T$decrease.8, @function
// [Main] # leaf true
// [Main] T$decrease.8:
// [Main] .T$decrease.8_0:
// [Main]   li a0, 45
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main134.253
// [Main]   .type main134.253, @function
// [Main] # leaf false
// [Main] main134.253:
// [Main] .main134.253_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   li a0, 4096
// [Main]   sub a2, s11, a0
// [Main]   andi s11, a2, -8
// [Main]   li a0, 1024
// [Main]   mv a1, a0
// [Main]   mv a0, zero
// [Main]   mv a1, a2
// [Main]   call read_prog138.254
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$read.10
// [Main]   .type T$read.10, @function
// [Main] # leaf true
// [Main] T$read.10:
// [Main] .T$read.10_0:
// [Main]   li a0, 44
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$loop_end.12
// [Main]   .type T$loop_end.12, @function
// [Main] # leaf true
// [Main] T$loop_end.12:
// [Main] .T$loop_end.12_0:
// [Main]   li a0, 93
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$print.9
// [Main]   .type T$print.9, @function
// [Main] # leaf true
// [Main] T$print.9:
// [Main] .T$print.9_0:
// [Main]   li a0, 46
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$move_right.6
// [Main]   .type T$move_right.6, @function
// [Main] # leaf true
// [Main] T$move_right.6:
// [Main] .T$move_right.6_0:
// [Main]   li a0, 62
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$move_left.5
// [Main]   .type T$move_left.5, @function
// [Main] # leaf true
// [Main] T$move_left.5:
// [Main] .T$move_left.5_0:
// [Main]   li a0, 60
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main134.253
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux46.256
// [Main]   .type aux46.256, @function
// [Main] # leaf false
// [Main] aux46.256:
// [Main] .aux46.256_29:
// [Main]   addi sp, sp, -128
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   sd s6, 56(sp)
// [Main]   sd s7, 64(sp)
// [Main]   sd s8, 72(sp)
// [Main]   sd s9, 80(sp)
// [Main]   sd s10, 88(sp)
// [Main]   lw t5, decrease.8
// [Main]   sw t5, 104(sp)
// [Main]   lw t5, loop_end.12
// [Main]   sw t5, 96(sp)
// [Main]   lw s4, move_right.6
// [Main]   lw s0, increase.7
// [Main]   lw s7, read.10
// [Main]   lw s5, move_left.5
// [Main]   lw s1, print.9
// [Main]   lw t5, loop_start.11
// [Main]   sw t5, 112(sp)
// [Main]   mv s2, a0
// [Main]   mv s6, a1
// [Main]   mv s8, a2
// [Main]   mv s10, a3
// [Main]   mv s9, a4
// [Main]   mv s3, a5
// [Main] 
// [Main] .aux46.256_0:
// [Main]   bge s2, s8, .aux46.256_1
// [Main] 
// [Main] .aux46.256_2:
// [Main]   th.lurw a0, s10, s2, 2
// [Main]   beq a0, s4, .aux46.256_3
// [Main] 
// [Main] .aux46.256_4:
// [Main]   beq a0, s5, .aux46.256_5
// [Main] 
// [Main] .aux46.256_6:
// [Main]   beq a0, s0, .aux46.256_7
// [Main] 
// [Main] .aux46.256_8:
// [Main]   lw t5, 104(sp)
// [Main]   beq a0, t5, .aux46.256_9
// [Main] 
// [Main] .aux46.256_10:
// [Main]   beq a0, s1, .aux46.256_11
// [Main] 
// [Main] .aux46.256_12:
// [Main]   beq a0, s7, .aux46.256_13
// [Main] 
// [Main] .aux46.256_14:
// [Main]   lw t5, 112(sp)
// [Main]   beq a0, t5, .aux46.256_15
// [Main] 
// [Main] .aux46.256_16:
// [Main]   lw t5, 96(sp)
// [Main]   bne a0, t5, .aux46.256_18
// [Main] 
// [Main] .aux46.256_17:
// [Main]   mv a0, s2
// [Main] 
// [Main] .aux46.256_19:
// [Main] 
// [Main] .aux46.256_20:
// [Main] 
// [Main] .aux46.256_21:
// [Main] 
// [Main] .aux46.256_22:
// [Main] 
// [Main] .aux46.256_23:
// [Main] 
// [Main] .aux46.256_24:
// [Main] 
// [Main] .aux46.256_25:
// [Main] 
// [Main] .aux46.256_26:
// [Main] 
// [Main] .aux46.256_27:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   ld s6, 56(sp)
// [Main]   ld s7, 64(sp)
// [Main]   ld s8, 72(sp)
// [Main]   ld s9, 80(sp)
// [Main]   ld s10, 88(sp)
// [Main]   addi sp, sp, 128
// [Main]   ret
// [Main] 
// [Main] .aux46.256_18:
// [Main]   mv a0, s2
// [Main]   j .aux46.256_19
// [Main] 
// [Main] .aux46.256_15:
// [Main]   sw s2, 0(s3)
// [Main] 
// [Main] .aux46.256_62:
// [Main] 
// [Main] .aux46.256_57:
// [Main]   lw a0, 0(s6)
// [Main]   th.lurw a0, s9, a0, 2
// [Main]   beq a0, zero, .aux46.256_58
// [Main] 
// [Main] .aux46.256_59:
// [Main]   addi a0, s2, 1
// [Main]   mv a1, s6
// [Main]   mv a2, s8
// [Main]   mv a3, s10
// [Main]   mv a4, s9
// [Main]   mv a5, s3
// [Main]   call aux46.256
// [Main]   sw a0, 0(s3)
// [Main]   j .aux46.256_57
// [Main] 
// [Main] .aux46.256_13:
// [Main]   lw t5, 0(s6)
// [Main]   sw t5, 120(sp)
// [Main]   call read_ch_until_newline_or_eof1.252
// [Main]   lw t5, 120(sp)
// [Main]   th.surw a0, s9, t5, 2
// [Main]   addi a0, s2, 1
// [Main]   mv s2, a0
// [Main]   j .aux46.256_0
// [Main] 
// [Main] .aux46.256_11:
// [Main]   lw a0, 0(s6)
// [Main]   th.lurw a0, s9, a0, 2
// [Main]   call minimbt_print_char
// [Main]   addi a0, s2, 1
// [Main]   mv s2, a0
// [Main]   j .aux46.256_0
// [Main] 
// [Main] .aux46.256_9:
// [Main]   lw a0, 0(s6)
// [Main]   th.lurw a1, s9, a0, 2
// [Main]   addi a1, a1, -1
// [Main]   th.surw a1, s9, a0, 2
// [Main]   addi a0, s2, 1
// [Main]   mv s2, a0
// [Main]   j .aux46.256_0
// [Main] 
// [Main] .aux46.256_7:
// [Main]   lw a0, 0(s6)
// [Main]   th.lurw a1, s9, a0, 2
// [Main]   addi a1, a1, 1
// [Main]   th.surw a1, s9, a0, 2
// [Main]   addi a0, s2, 1
// [Main]   mv s2, a0
// [Main]   j .aux46.256_0
// [Main] 
// [Main] .aux46.256_5:
// [Main]   lw a0, 0(s6)
// [Main]   addi a0, a0, -1
// [Main]   sw a0, 0(s6)
// [Main]   addi a0, s2, 1
// [Main]   mv s2, a0
// [Main]   j .aux46.256_0
// [Main] 
// [Main] .aux46.256_3:
// [Main]   lw a0, 0(s6)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s6)
// [Main]   addi a0, s2, 1
// [Main]   mv s2, a0
// [Main]   j .aux46.256_0
// [Main] 
// [Main] .aux46.256_1:
// [Main]   mv a0, s2
// [Main]   j .aux46.256_27
// [Main] 
// [Main] .aux46.256_58:
// [Main]   addi a1, s2, 1
// [Main] 
// [Main] .aux46.256_80:
// [Main]   lw a0, loop_end.12
// [Main]   lw a2, loop_start.11
// [Main]   mv a3, zero
// [Main]   mv a4, s8
// [Main]   mv a5, s10
// [Main] 
// [Main] .aux46.256_66:
// [Main]   bge a1, a4, .aux46.256_67
// [Main] 
// [Main] .aux46.256_68:
// [Main]   th.lurw a6, a5, a1, 2
// [Main]   beq a6, a2, .aux46.256_69
// [Main] 
// [Main] .aux46.256_70:
// [Main]   bne a6, a0, .aux46.256_72
// [Main] 
// [Main] .aux46.256_71:
// [Main]   beq a3, zero, .aux46.256_73
// [Main] 
// [Main] .aux46.256_74:
// [Main]   addi a1, a1, 1
// [Main]   addi a3, a3, -1
// [Main]   j .aux46.256_66
// [Main] 
// [Main] .aux46.256_73:
// [Main]   mv a0, a1
// [Main] 
// [Main] .aux46.256_75:
// [Main] 
// [Main] .aux46.256_76:
// [Main] 
// [Main] .aux46.256_77:
// [Main] 
// [Main] .aux46.256_78:
// [Main] 
// [Main] .aux46.256_63:
// [Main]   sw a0, 0(s3)
// [Main]   mv a0, zero
// [Main] 
// [Main] .aux46.256_60:
// [Main] 
// [Main] .aux46.256_30:
// [Main]   lw a0, 0(s3)
// [Main]   addi a0, a0, 1
// [Main]   mv s2, a0
// [Main]   j .aux46.256_0
// [Main] 
// [Main] .aux46.256_72:
// [Main]   addi a1, a1, 1
// [Main]   j .aux46.256_66
// [Main] 
// [Main] .aux46.256_69:
// [Main]   addi a1, a1, 1
// [Main]   addi a3, a3, 1
// [Main]   j .aux46.256_66
// [Main] 
// [Main] .aux46.256_67:
// [Main]   mv a0, a1
// [Main]   j .aux46.256_78
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$move_left.5
// [Main]   la t5, move_left.5
// [Main]   sw a0, 0(t5)
// [Main]   call T$move_right.6
// [Main]   la t5, move_right.6
// [Main]   sw a0, 0(t5)
// [Main]   call T$increase.7
// [Main]   la t5, increase.7
// [Main]   sw a0, 0(t5)
// [Main]   call T$decrease.8
// [Main]   la t5, decrease.8
// [Main]   sw a0, 0(t5)
// [Main]   call T$print.9
// [Main]   la t5, print.9
// [Main]   sw a0, 0(t5)
// [Main]   call T$read.10
// [Main]   la t5, read.10
// [Main]   sw a0, 0(t5)
// [Main]   call T$loop_start.11
// [Main]   la t5, loop_start.11
// [Main]   sw a0, 0(t5)
// [Main]   call T$loop_end.12
// [Main]   la t5, loop_end.12
// [Main]   sw a0, 0(t5)
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$increase.7
// [Main]   .type T$increase.7, @function
// [Main] # leaf true
// [Main] T$increase.7:
// [Main] .T$increase.7_0:
// [Main]   li a0, 43
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl loop_end.12
// [Main]   .type loop_end.12, @object
// [Main] loop_end.12:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl print.9
// [Main]   .type print.9, @object
// [Main] print.9:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl read.10
// [Main]   .type read.10, @object
// [Main] read.10:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl move_right.6
// [Main]   .type move_right.6, @object
// [Main] move_right.6:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl move_left.5
// [Main]   .type move_left.5, @object
// [Main] move_left.5:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl decrease.8
// [Main]   .type decrease.8, @object
// [Main] decrease.8:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl increase.7
// [Main]   .type increase.7, @object
// [Main] increase.7:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl loop_start.11
// [Main]   .type loop_start.11, @object
// [Main] loop_start.11:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function T$increase.7
// [Wasm] Lowering control Return(args=[Int32(val=43)])
// [Wasm] Lowered function T$increase.7 to wasm
// [Wasm] Lowering function T$read.10
// [Wasm] Lowering control Return(args=[Int32(val=44)])
// [Wasm] Lowered function T$read.10 to wasm
// [Wasm] Lowering function T$move_right.6
// [Wasm] Lowering control Return(args=[Int32(val=62)])
// [Wasm] Lowered function T$move_right.6 to wasm
// [Wasm] Lowering function T$decrease.8
// [Wasm] Lowering control Return(args=[Int32(val=45)])
// [Wasm] Lowered function T$decrease.8 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f22, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [Wasm] Lowering function T$loop_end.12
// [Wasm] Lowering control Return(args=[Int32(val=93)])
// [Wasm] Lowered function T$loop_end.12 to wasm
// [Wasm] Lowering function read_ch_until_newline_or_eof1.252
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[Int32(val=-1)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[Int32(val=-1)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=13)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_char", args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=10)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function read_ch_until_newline_or_eof1.252 to wasm
// [Wasm] Lowering function T$print.9
// [Wasm] Lowering control Return(args=[Int32(val=46)])
// [Wasm] Lowered function T$print.9 to wasm
// [Wasm] Lowering function T$move_left.5
// [Wasm] Lowering control Return(args=[Int32(val=60)])
// [Wasm] Lowered function T$move_left.5 to wasm
// [Wasm] Lowering function T$loop_start.11
// [Wasm] Lowering control Return(args=[Int32(val=91)])
// [Wasm] Lowered function T$loop_start.11 to wasm
// [Wasm] Lowering function read_prog138.254
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f21, mref=m0) -> $f21.m0
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Int32(val=1024), Int32(val=1024)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m1, fills=[Zero])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Mem(fref=f21, mref=m1) -> $f21.m1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m2, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f21, mref=m2) -> $f21.m2
// [Wasm] Lowering insn Call(ty=Int32, f=f20, args=[Int32(val=0), Mem(fref=f21, mref=m0), BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Mem(fref=f21, mref=m1), Mem(fref=f21, mref=m2)])
// [Wasm] Get Local name Mem(fref=f21, mref=m0) -> $f21.m0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Mem(fref=f21, mref=m1) -> $f21.m1
// [Wasm] Get Local name Mem(fref=f21, mref=m2) -> $f21.m2
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), offset=BlockParam(bref=b0, bpref=$b.0), width=@32), val=Insn(iref=%0))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%8), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Lowering insn Call(ty=Int32, f=f0, args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=-1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f21, fpref=$f.0), FnParam(fref=f21, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f21, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f21, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f21, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f21, fpref=$f.1) -> $$f.1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Mem(fref=f21, mref=m1) -> $f21.m1
// [Wasm] Local Mem(fref=f21, mref=m0) -> $f21.m0
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Mem(fref=f21, mref=m2) -> $f21.m2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function read_prog138.254 to wasm
// [Wasm] Lowering function main134.253
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f22, mref=m0) -> $f22.m0
// [Wasm] Lowering insn Call(ty=Unit, f=f21, args=[Int32(val=0), Mem(fref=f22, mref=m0)])
// [Wasm] Get Local name Mem(fref=f22, mref=m0) -> $f22.m0
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Local Mem(fref=f22, mref=m0) -> $f22.m0
// [Wasm] Lowered function main134.253 to wasm
// [Wasm] Lowering function aux46.256
// [Wasm] Lowering control Return(args=[BlockParam(bref=b27, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Lowering control Jump(target=b27, args=[BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%4), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32), val=Insn(iref=%5))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%7), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%11), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32), val=Insn(iref=%12))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%14), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), offset=Insn(iref=%18), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%20), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), offset=Insn(iref=%18), width=@32), val=Insn(iref=%21))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%23), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), offset=Insn(iref=%27), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%29), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), offset=Insn(iref=%27), width=@32), val=Insn(iref=%30))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%32), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), offset=Insn(iref=%36), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Insn(iref=%37)])
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%39) -> $%39
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%39), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%39) -> $%39
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Lowering insn Call(ty=Int32, f=f0, args=[])
// [Wasm] Get Local name Insn(iref=%44) -> $%44
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), offset=Insn(iref=%43), width=@32), val=Insn(iref=%44))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Get Local name Insn(iref=%44) -> $%44
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%46), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.5), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name Insn(iref=%52) -> $%52
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%52), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%52) -> $%52
// [Wasm] Get Local name Insn(iref=%53) -> $%53
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%53), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%53) -> $%53
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering control Jump(target=b30, args=[BlockParam(bref=b60, bpref=$b.0)])
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b57, bpref=$b.5), index=0, width=@32), val=BlockParam(bref=b63, bpref=$b.0))
// [Wasm] Get Local name BlockParam(bref=b57, bpref=$b.5) -> $b57.$b.5
// [Wasm] Get Local name BlockParam(bref=b63, bpref=$b.0) -> $b63.$b.0
// [Wasm] Lowering control Jump(target=b60, args=[Unit])
// [Wasm] Lowering control Jump(target=b63, args=[BlockParam(bref=b78, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b78, bpref=$b.0) -> $b78.$b.0
// [Wasm] Get Local name BlockParam(bref=b63, bpref=$b.0) -> $b63.$b.0
// [Wasm] Lowering control Jump(target=b78, args=[BlockParam(bref=b66, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b66, bpref=$b.0) -> $b66.$b.0
// [Wasm] Get Local name BlockParam(bref=b78, bpref=$b.0) -> $b78.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b66, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b66, bpref=$b.0) -> $b66.$b.0
// [Wasm] Get Local name Insn(iref=%70) -> $%70
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b66, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b66, bpref=$b.1) -> $b66.$b.1
// [Wasm] Get Local name Insn(iref=%71) -> $%71
// [Wasm] Lowering control Jump(target=b66, args=[Insn(iref=%70), Insn(iref=%71), BlockParam(bref=b66, bpref=$b.2), BlockParam(bref=b66, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%70) -> $%70
// [Wasm] Get Local name BlockParam(bref=b66, bpref=$b.0) -> $b66.$b.0
// [Wasm] Get Local name Insn(iref=%71) -> $%71
// [Wasm] Get Local name BlockParam(bref=b66, bpref=$b.1) -> $b66.$b.1
// [Wasm] Get Local name BlockParam(bref=b66, bpref=$b.2) -> $b66.$b.2
// [Wasm] Get Local name BlockParam(bref=b66, bpref=$b.2) -> $b66.$b.2
// [Wasm] Get Local name BlockParam(bref=b66, bpref=$b.3) -> $b66.$b.3
// [Wasm] Get Local name BlockParam(bref=b66, bpref=$b.3) -> $b66.$b.3
// [Wasm] Lowering control Jump(target=b78, args=[BlockParam(bref=b77, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b77, bpref=$b.0) -> $b77.$b.0
// [Wasm] Get Local name BlockParam(bref=b78, bpref=$b.0) -> $b78.$b.0
// [Wasm] Lowering control Jump(target=b77, args=[BlockParam(bref=b76, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b76, bpref=$b.0) -> $b76.$b.0
// [Wasm] Get Local name BlockParam(bref=b77, bpref=$b.0) -> $b77.$b.0
// [Wasm] Lowering control Jump(target=b76, args=[BlockParam(bref=b75, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b75, bpref=$b.0) -> $b75.$b.0
// [Wasm] Get Local name BlockParam(bref=b76, bpref=$b.0) -> $b76.$b.0
// [Wasm] Lowering control Jump(target=b75, args=[BlockParam(bref=b66, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b66, bpref=$b.0) -> $b66.$b.0
// [Wasm] Get Local name BlockParam(bref=b75, bpref=$b.0) -> $b75.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b66, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b66, bpref=$b.0) -> $b66.$b.0
// [Wasm] Get Local name Insn(iref=%76) -> $%76
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b66, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b66, bpref=$b.1) -> $b66.$b.1
// [Wasm] Get Local name Insn(iref=%77) -> $%77
// [Wasm] Lowering control Jump(target=b66, args=[Insn(iref=%76), Insn(iref=%77), BlockParam(bref=b66, bpref=$b.2), BlockParam(bref=b66, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%76) -> $%76
// [Wasm] Get Local name BlockParam(bref=b66, bpref=$b.0) -> $b66.$b.0
// [Wasm] Get Local name Insn(iref=%77) -> $%77
// [Wasm] Get Local name BlockParam(bref=b66, bpref=$b.1) -> $b66.$b.1
// [Wasm] Get Local name BlockParam(bref=b66, bpref=$b.2) -> $b66.$b.2
// [Wasm] Get Local name BlockParam(bref=b66, bpref=$b.2) -> $b66.$b.2
// [Wasm] Get Local name BlockParam(bref=b66, bpref=$b.3) -> $b66.$b.3
// [Wasm] Get Local name BlockParam(bref=b66, bpref=$b.3) -> $b66.$b.3
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b66, bpref=$b.1), Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b66, bpref=$b.1) -> $b66.$b.1
// [Wasm] Get Local name Insn(iref=%75) -> $%75
// [Wasm] Lowering control Branch(cond=Insn(iref=%75), t=b73, t_args=[], f=b74, f_args=[])
// [Wasm] Get Local name Insn(iref=%75) -> $%75
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b66, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b66, bpref=$b.0) -> $b66.$b.0
// [Wasm] Get Local name Insn(iref=%79) -> $%79
// [Wasm] Lowering control Jump(target=b66, args=[Insn(iref=%79), BlockParam(bref=b66, bpref=$b.1), BlockParam(bref=b66, bpref=$b.2), BlockParam(bref=b66, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%79) -> $%79
// [Wasm] Get Local name BlockParam(bref=b66, bpref=$b.0) -> $b66.$b.0
// [Wasm] Get Local name BlockParam(bref=b66, bpref=$b.1) -> $b66.$b.1
// [Wasm] Get Local name BlockParam(bref=b66, bpref=$b.1) -> $b66.$b.1
// [Wasm] Get Local name BlockParam(bref=b66, bpref=$b.2) -> $b66.$b.2
// [Wasm] Get Local name BlockParam(bref=b66, bpref=$b.2) -> $b66.$b.2
// [Wasm] Get Local name BlockParam(bref=b66, bpref=$b.3) -> $b66.$b.3
// [Wasm] Get Local name BlockParam(bref=b66, bpref=$b.3) -> $b66.$b.3
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%67), Insn(iref=%73)])
// [Wasm] Get Local name Insn(iref=%67) -> $%67
// [Wasm] Get Local name Insn(iref=%73) -> $%73
// [Wasm] Get Local name Insn(iref=%74) -> $%74
// [Wasm] Lowering control Branch(cond=Insn(iref=%74), t=b71, t_args=[], f=b72, f_args=[])
// [Wasm] Get Local name Insn(iref=%74) -> $%74
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b66, bpref=$b.3), offset=BlockParam(bref=b66, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b66, bpref=$b.3) -> $b66.$b.3
// [Wasm] Get Local name BlockParam(bref=b66, bpref=$b.0) -> $b66.$b.0
// [Wasm] Get Local name Insn(iref=%67) -> $%67
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%67), Insn(iref=%68)])
// [Wasm] Get Local name Insn(iref=%67) -> $%67
// [Wasm] Get Local name Insn(iref=%68) -> $%68
// [Wasm] Get Local name Insn(iref=%69) -> $%69
// [Wasm] Lowering control Branch(cond=Insn(iref=%69), t=b69, t_args=[], f=b70, f_args=[])
// [Wasm] Get Local name Insn(iref=%69) -> $%69
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b66, bpref=$b.2), BlockParam(bref=b66, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b66, bpref=$b.2) -> $b66.$b.2
// [Wasm] Get Local name BlockParam(bref=b66, bpref=$b.0) -> $b66.$b.0
// [Wasm] Get Local name Insn(iref=%66) -> $%66
// [Wasm] Lowering control Branch(cond=Insn(iref=%66), t=b67, t_args=[], f=b68, f_args=[])
// [Wasm] Get Local name Insn(iref=%66) -> $%66
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::7)
// [Wasm] Get Local name Insn(iref=%73) -> $%73
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::6)
// [Wasm] Get Local name Insn(iref=%68) -> $%68
// [Wasm] Lowering control Jump(target=b79, args=[Insn(iref=%60), Int32(val=0), BlockParam(bref=b57, bpref=$b.1), BlockParam(bref=b57, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%60) -> $%60
// [Wasm] Get Local name BlockParam(bref=b66, bpref=$b.0) -> $b66.$b.0
// [Wasm] Get Local name BlockParam(bref=b66, bpref=$b.1) -> $b66.$b.1
// [Wasm] Get Local name BlockParam(bref=b57, bpref=$b.1) -> $b57.$b.1
// [Wasm] Get Local name BlockParam(bref=b66, bpref=$b.2) -> $b66.$b.2
// [Wasm] Get Local name BlockParam(bref=b57, bpref=$b.3) -> $b57.$b.3
// [Wasm] Get Local name BlockParam(bref=b66, bpref=$b.3) -> $b66.$b.3
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b57, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b57, bpref=$b.2) -> $b57.$b.2
// [Wasm] Get Local name Insn(iref=%60) -> $%60
// [Wasm] Lowering control Jump(target=b80, args=[])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b57, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b57, bpref=$b.2) -> $b57.$b.2
// [Wasm] Get Local name Insn(iref=%63) -> $%63
// [Wasm] Lowering insn Call(ty=Int32, f=f20, args=[Insn(iref=%63), BlockParam(bref=b57, bpref=$b.0), BlockParam(bref=b57, bpref=$b.1), BlockParam(bref=b57, bpref=$b.3), BlockParam(bref=b57, bpref=$b.4), BlockParam(bref=b57, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%63) -> $%63
// [Wasm] Get Local name BlockParam(bref=b57, bpref=$b.0) -> $b57.$b.0
// [Wasm] Get Local name BlockParam(bref=b57, bpref=$b.1) -> $b57.$b.1
// [Wasm] Get Local name BlockParam(bref=b57, bpref=$b.3) -> $b57.$b.3
// [Wasm] Get Local name BlockParam(bref=b57, bpref=$b.4) -> $b57.$b.4
// [Wasm] Get Local name BlockParam(bref=b57, bpref=$b.5) -> $b57.$b.5
// [Wasm] Get Local name Insn(iref=%64) -> $%64
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b57, bpref=$b.5), index=0, width=@32), val=Insn(iref=%64))
// [Wasm] Get Local name BlockParam(bref=b57, bpref=$b.5) -> $b57.$b.5
// [Wasm] Get Local name Insn(iref=%64) -> $%64
// [Wasm] Lowering control Jump(target=b57, args=[BlockParam(bref=b57, bpref=$b.0), BlockParam(bref=b57, bpref=$b.1), BlockParam(bref=b57, bpref=$b.2), BlockParam(bref=b57, bpref=$b.3), BlockParam(bref=b57, bpref=$b.4), BlockParam(bref=b57, bpref=$b.5)])
// [Wasm] Get Local name BlockParam(bref=b57, bpref=$b.0) -> $b57.$b.0
// [Wasm] Get Local name BlockParam(bref=b57, bpref=$b.0) -> $b57.$b.0
// [Wasm] Get Local name BlockParam(bref=b57, bpref=$b.1) -> $b57.$b.1
// [Wasm] Get Local name BlockParam(bref=b57, bpref=$b.1) -> $b57.$b.1
// [Wasm] Get Local name BlockParam(bref=b57, bpref=$b.2) -> $b57.$b.2
// [Wasm] Get Local name BlockParam(bref=b57, bpref=$b.2) -> $b57.$b.2
// [Wasm] Get Local name BlockParam(bref=b57, bpref=$b.3) -> $b57.$b.3
// [Wasm] Get Local name BlockParam(bref=b57, bpref=$b.3) -> $b57.$b.3
// [Wasm] Get Local name BlockParam(bref=b57, bpref=$b.4) -> $b57.$b.4
// [Wasm] Get Local name BlockParam(bref=b57, bpref=$b.4) -> $b57.$b.4
// [Wasm] Get Local name BlockParam(bref=b57, bpref=$b.5) -> $b57.$b.5
// [Wasm] Get Local name BlockParam(bref=b57, bpref=$b.5) -> $b57.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b57, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b57, bpref=$b.0) -> $b57.$b.0
// [Wasm] Get Local name Insn(iref=%57) -> $%57
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b57, bpref=$b.4), offset=Insn(iref=%57), width=@32))
// [Wasm] Get Local name BlockParam(bref=b57, bpref=$b.4) -> $b57.$b.4
// [Wasm] Get Local name Insn(iref=%57) -> $%57
// [Wasm] Get Local name Insn(iref=%58) -> $%58
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%58), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%58) -> $%58
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Lowering control Branch(cond=Insn(iref=%59), t=b58, t_args=[], f=b59, f_args=[])
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Lowering control Jump(target=b61, args=[BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b57, bpref=$b.0) -> $b57.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b57, bpref=$b.1) -> $b57.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b57, bpref=$b.2) -> $b57.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b57, bpref=$b.3) -> $b57.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b57, bpref=$b.4) -> $b57.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b57, bpref=$b.5) -> $b57.$b.5
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.5), index=0, width=@32), val=BlockParam(bref=b0, bpref=$b.0))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering control Jump(target=b62, args=[])
// [Wasm] Lowering control Jump(target=b27, args=[BlockParam(bref=b26, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Lowering control Jump(target=b26, args=[BlockParam(bref=b25, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.0) -> $b25.$b.0
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Lowering control Jump(target=b25, args=[BlockParam(bref=b24, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b24, bpref=$b.0) -> $b24.$b.0
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.0) -> $b25.$b.0
// [Wasm] Lowering control Jump(target=b24, args=[BlockParam(bref=b23, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.0) -> $b23.$b.0
// [Wasm] Get Local name BlockParam(bref=b24, bpref=$b.0) -> $b24.$b.0
// [Wasm] Lowering control Jump(target=b23, args=[BlockParam(bref=b22, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b22, bpref=$b.0) -> $b22.$b.0
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.0) -> $b23.$b.0
// [Wasm] Lowering control Jump(target=b22, args=[BlockParam(bref=b21, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.0) -> $b21.$b.0
// [Wasm] Get Local name BlockParam(bref=b22, bpref=$b.0) -> $b22.$b.0
// [Wasm] Lowering control Jump(target=b21, args=[BlockParam(bref=b20, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.0) -> $b21.$b.0
// [Wasm] Lowering control Jump(target=b20, args=[BlockParam(bref=b19, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.0) -> $b19.$b.0
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Lowering control Jump(target=b19, args=[BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.0) -> $b19.$b.0
// [Wasm] Lowering control Jump(target=b19, args=[BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.0) -> $b19.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Insn(iref=%55)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%55) -> $%55
// [Wasm] Get Local name Insn(iref=%56) -> $%56
// [Wasm] Lowering control Branch(cond=Insn(iref=%56), t=b17, t_args=[], f=b18, f_args=[])
// [Wasm] Get Local name Insn(iref=%56) -> $%56
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Insn(iref=%48)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Lowering control Branch(cond=Insn(iref=%49), t=b15, t_args=[], f=b16, f_args=[])
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Insn(iref=%41)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering control Branch(cond=Insn(iref=%42), t=b13, t_args=[], f=b14, f_args=[])
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Insn(iref=%34)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Lowering control Branch(cond=Insn(iref=%35), t=b11, t_args=[], f=b12, f_args=[])
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Insn(iref=%25)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering control Branch(cond=Insn(iref=%26), t=b9, t_args=[], f=b10, f_args=[])
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Insn(iref=%16)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering control Branch(cond=Insn(iref=%17), t=b7, t_args=[], f=b8, f_args=[])
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Branch(cond=Insn(iref=%10), t=b5, t_args=[], f=b6, f_args=[])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.3), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::3)
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::7)
// [Wasm] Get Local name Insn(iref=%55) -> $%55
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::1)
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::5)
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::0)
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::4)
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::6)
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Lowering control Jump(target=b28, args=[FnParam(fref=f20, fpref=$f.0), FnParam(fref=f20, fpref=$f.1), FnParam(fref=f20, fpref=$f.2), FnParam(fref=f20, fpref=$f.3), FnParam(fref=f20, fpref=$f.4), FnParam(fref=f20, fpref=$f.5)])
// [Wasm] Get Local name FnParam(fref=f20, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f20, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f20, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f20, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f20, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name FnParam(fref=f20, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name FnParam(fref=f20, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f20, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f20, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f20, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f20, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f20, fpref=$f.5) -> $$f.5
// [Wasm] Local Insn(iref=%41) -> $%41
// [Wasm] Local Insn(iref=%76) -> $%76
// [Wasm] Local Insn(iref=%63) -> $%63
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Local BlockParam(bref=b57, bpref=$b.3) -> $b57.$b.3
// [Wasm] Local Insn(iref=%27) -> $%27
// [Wasm] Local Insn(iref=%25) -> $%25
// [Wasm] Local Insn(iref=%39) -> $%39
// [Wasm] Local Insn(iref=%59) -> $%59
// [Wasm] Local BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local BlockParam(bref=b25, bpref=$b.0) -> $b25.$b.0
// [Wasm] Local Insn(iref=%56) -> $%56
// [Wasm] Local Insn(iref=%49) -> $%49
// [Wasm] Local Insn(iref=%42) -> $%42
// [Wasm] Local Insn(iref=%68) -> $%68
// [Wasm] Local Insn(iref=%73) -> $%73
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local BlockParam(bref=b23, bpref=$b.0) -> $b23.$b.0
// [Wasm] Local BlockParam(bref=b75, bpref=$b.0) -> $b75.$b.0
// [Wasm] Local BlockParam(bref=b24, bpref=$b.0) -> $b24.$b.0
// [Wasm] Local Insn(iref=%74) -> $%74
// [Wasm] Local Insn(iref=%64) -> $%64
// [Wasm] Local BlockParam(bref=b19, bpref=$b.0) -> $b19.$b.0
// [Wasm] Local BlockParam(bref=b63, bpref=$b.0) -> $b63.$b.0
// [Wasm] Local BlockParam(bref=b22, bpref=$b.0) -> $b22.$b.0
// [Wasm] Local Insn(iref=%75) -> $%75
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%53) -> $%53
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local Insn(iref=%67) -> $%67
// [Wasm] Local Insn(iref=%60) -> $%60
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%79) -> $%79
// [Wasm] Local BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%55) -> $%55
// [Wasm] Local Insn(iref=%66) -> $%66
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%71) -> $%71
// [Wasm] Local Insn(iref=%48) -> $%48
// [Wasm] Local BlockParam(bref=b57, bpref=$b.2) -> $b57.$b.2
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local BlockParam(bref=b21, bpref=$b.0) -> $b21.$b.0
// [Wasm] Local Insn(iref=%34) -> $%34
// [Wasm] Local BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Local Insn(iref=%36) -> $%36
// [Wasm] Local BlockParam(bref=b66, bpref=$b.1) -> $b66.$b.1
// [Wasm] Local BlockParam(bref=b76, bpref=$b.0) -> $b76.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Local BlockParam(bref=b57, bpref=$b.0) -> $b57.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%77) -> $%77
// [Wasm] Local BlockParam(bref=b66, bpref=$b.0) -> $b66.$b.0
// [Wasm] Local Insn(iref=%52) -> $%52
// [Wasm] Local Insn(iref=%44) -> $%44
// [Wasm] Local Insn(iref=%32) -> $%32
// [Wasm] Local Insn(iref=%58) -> $%58
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%57) -> $%57
// [Wasm] Local Insn(iref=%35) -> $%35
// [Wasm] Local BlockParam(bref=b66, bpref=$b.2) -> $b66.$b.2
// [Wasm] Local Insn(iref=%46) -> $%46
// [Wasm] Local BlockParam(bref=b78, bpref=$b.0) -> $b78.$b.0
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%37) -> $%37
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b57, bpref=$b.1) -> $b57.$b.1
// [Wasm] Local Insn(iref=%29) -> $%29
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%70) -> $%70
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local BlockParam(bref=b66, bpref=$b.3) -> $b66.$b.3
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b57, bpref=$b.4) -> $b57.$b.4
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%43) -> $%43
// [Wasm] Local Insn(iref=%30) -> $%30
// [Wasm] Local BlockParam(bref=b57, bpref=$b.5) -> $b57.$b.5
// [Wasm] Local BlockParam(bref=b77, bpref=$b.0) -> $b77.$b.0
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local Insn(iref=%69) -> $%69
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function aux46.256 to wasm
// [KnfOpt] freq: {read_ch_until_newline_or_eof1: Many(2), bf13: Once, skip29: Many(4), aux46: Many(9), lp107: Many(2), main134: Once, read_prog138: Many(2)}
// [KnfOpt] Inline threshold 4 33
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 4 33
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 4 33
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 9 165
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 9 165
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 9 165
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 9 165
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 9 165
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 9 165
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 4 33
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 9 165
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 33
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 33
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 9 165
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 9 165
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] Knf inline Some(bf13)
// [KnfOpt] Inline threshold 2 13
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 239
// [KnfOpt] Inline decision rejected
// [KnfOpt] Numbers of let rec: 6 6 0
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %9: Call(ty=Unit, f=f19, args=[FnParam(fref=f19, fpref=$f.0), FnParam(fref=f19, fpref=$f.1), FnParam(fref=f19, fpref=$f.2), FnParam(fref=f19, fpref=$f.3), FnParam(fref=f19, fpref=$f.4), FnParam(fref=f19, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %6: Call(ty=Int32, f=f18, args=[Insn(iref=%4), Insn(iref=%5), FnParam(fref=f18, fpref=$f.2), FnParam(fref=f18, fpref=$f.3)])
// [CoreOpt] eliminated tail rec call %14: Call(ty=Int32, f=f18, args=[Insn(iref=%13), FnParam(fref=f18, fpref=$f.1), FnParam(fref=f18, fpref=$f.2), FnParam(fref=f18, fpref=$f.3)])
// [CoreOpt] eliminated tail rec call %12: Call(ty=Int32, f=f18, args=[Insn(iref=%10), Insn(iref=%11), FnParam(fref=f18, fpref=$f.2), FnParam(fref=f18, fpref=$f.3)])
// [CoreOpt] eliminated tail rec call %9: Call(ty=Unit, f=f21, args=[Insn(iref=%8), FnParam(fref=f21, fpref=$f.1)])
// [CoreOpt] eliminated tail rec call %8: Call(ty=Int32, f=f20, args=[Insn(iref=%7), FnParam(fref=f20, fpref=$f.1), FnParam(fref=f20, fpref=$f.2), FnParam(fref=f20, fpref=$f.3), FnParam(fref=f20, fpref=$f.4), FnParam(fref=f20, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %15: Call(ty=Int32, f=f20, args=[Insn(iref=%14), FnParam(fref=f20, fpref=$f.1), FnParam(fref=f20, fpref=$f.2), FnParam(fref=f20, fpref=$f.3), FnParam(fref=f20, fpref=$f.4), FnParam(fref=f20, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %24: Call(ty=Int32, f=f20, args=[Insn(iref=%23), FnParam(fref=f20, fpref=$f.1), FnParam(fref=f20, fpref=$f.2), FnParam(fref=f20, fpref=$f.3), FnParam(fref=f20, fpref=$f.4), FnParam(fref=f20, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %33: Call(ty=Int32, f=f20, args=[Insn(iref=%32), FnParam(fref=f20, fpref=$f.1), FnParam(fref=f20, fpref=$f.2), FnParam(fref=f20, fpref=$f.3), FnParam(fref=f20, fpref=$f.4), FnParam(fref=f20, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %40: Call(ty=Int32, f=f20, args=[Insn(iref=%39), FnParam(fref=f20, fpref=$f.1), FnParam(fref=f20, fpref=$f.2), FnParam(fref=f20, fpref=$f.3), FnParam(fref=f20, fpref=$f.4), FnParam(fref=f20, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %47: Call(ty=Int32, f=f20, args=[Insn(iref=%46), FnParam(fref=f20, fpref=$f.1), FnParam(fref=f20, fpref=$f.2), FnParam(fref=f20, fpref=$f.3), FnParam(fref=f20, fpref=$f.4), FnParam(fref=f20, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %54: Call(ty=Int32, f=f20, args=[Insn(iref=%53), FnParam(fref=f20, fpref=$f.1), FnParam(fref=f20, fpref=$f.2), FnParam(fref=f20, fpref=$f.3), FnParam(fref=f20, fpref=$f.4), FnParam(fref=f20, fpref=$f.5)])
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f12: Once, f4: Once, f8: Once, f28: Once, f16: Once, f0: Multiple, f19: Once, f10: Once, f2: Once, f18: Once, f14: Once, f21: Once, f22: Once, f20: Multiple})
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%51) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%51) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%51) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%51) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%51) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%51) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%51) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%51) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%51) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%51) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%51) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%51) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%51) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%51) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%51) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%51) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%51) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%51) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%51) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%51) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%51) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%51) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%51) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%51) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%51) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%51) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%51) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%51) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%51) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] lp107.257 is inlining Call(ty=Int32, f=f18, args=[Insn(iref=%3), Int32(val=0), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.3)])
// [CoreOpt] shifted callee .fn skip29.255 #f18 : fn(int32, int32, int32, array[int32]) -> int32
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b23 {
// [CoreOpt]   .bb #b9 (int32, int32, int32, array[int32]) {
// [CoreOpt]     let %9: bool = le($b9.2, $b9.0)
// [CoreOpt]     br %9 b10() b11()
// [CoreOpt]   }
// [CoreOpt]   .bb #b10 () {
// [CoreOpt]     jump b21($b9.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b11 () {
// [CoreOpt]     let %10: int32 = load int32 offset($b9.3, $b9.0 * @32)
// [CoreOpt]     let %12: bool = eq(%10, %11)
// [CoreOpt]     br %12 b12() b13()
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 () {
// [CoreOpt]     let %13: int32 = add($b9.0, 1)
// [CoreOpt]     let %14: int32 = add($b9.1, 1)
// [CoreOpt]     jump b9(%13, %14, $b9.2, $b9.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b13 () {
// [CoreOpt]     let %17: bool = eq(%10, %16)
// [CoreOpt]     br %17 b14() b15()
// [CoreOpt]   }
// [CoreOpt]   .bb #b14 () {
// [CoreOpt]     let %18: bool = eq($b9.1, 0)
// [CoreOpt]     br %18 b16() b17()
// [CoreOpt]   }
// [CoreOpt]   .bb #b15 () {
// [CoreOpt]     let %22: int32 = add($b9.0, 1)
// [CoreOpt]     jump b9(%22, $b9.1, $b9.2, $b9.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b16 () {
// [CoreOpt]     jump b18($b9.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b17 () {
// [CoreOpt]     let %19: int32 = add($b9.0, 1)
// [CoreOpt]     let %20: int32 = sub($b9.1, 1)
// [CoreOpt]     jump b9(%19, %20, $b9.2, $b9.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b18 (int32) {
// [CoreOpt]     jump b19($b18.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b19 (int32) {
// [CoreOpt]     jump b20($b19.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b20 (int32) {
// [CoreOpt]     jump b21($b20.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b21 (int32) {
// [CoreOpt]     return $b21.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b22 pre #Some(b23) header #b9 {
// [CoreOpt]     .block #b15
// [CoreOpt]     .block #b21
// [CoreOpt]     .block #b13
// [CoreOpt]     .block #b17
// [CoreOpt]     .block #b18
// [CoreOpt]     .block #b10
// [CoreOpt]     .block #b19
// [CoreOpt]     .block #b20
// [CoreOpt]     .block #b14
// [CoreOpt]     .block #b11
// [CoreOpt]     .block #b12
// [CoreOpt]     .block #b16
// [CoreOpt]   }
// [CoreOpt]   .bb #b23 () {
// [CoreOpt]     let %16: int32 = load_symbol ::7
// [CoreOpt]     let %11: int32 = load_symbol ::6
// [CoreOpt]     jump b22($f0, $f1, $f2, $f3)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] aux46.256 is inlining Call(ty=Unit, f=f19, args=[BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [CoreOpt] shifted callee .fn lp107.257 #f19 : fn(array[int32], int32, int32, array[int32], array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b62 {
// [CoreOpt]   .bb #b57 (array[int32], int32, int32, array[int32], array[int32], array[int32]) {
// [CoreOpt]     let %57: int32 = load int32 field($b57.0, 0 * @32)
// [CoreOpt]     let %58: int32 = load int32 offset($b57.4, %57 * @32)
// [CoreOpt]     let %59: bool = eq(%58, 0)
// [CoreOpt]     br %59 b58() b59()
// [CoreOpt]   }
// [CoreOpt]   .bb #b58 () {
// [CoreOpt]     let %60: int32 = add($b57.2, 1)
// [CoreOpt]     jump b80()
// [CoreOpt]   }
// [CoreOpt]   .bb #b59 () {
// [CoreOpt]     let %63: int32 = add($b57.2, 1)
// [CoreOpt]     let %64: int32 = call f20(%63, $b57.0, $b57.1, $b57.3, $b57.4, $b57.5)
// [CoreOpt]     let _ = store int32 field($b57.5, 0 * @32) <- %64
// [CoreOpt]     jump b57($b57.0, $b57.1, $b57.2, $b57.3, $b57.4, $b57.5)
// [CoreOpt]   }
// [CoreOpt]   .bb #b60 (unit) {
// [CoreOpt]     return $b60.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b61 pre #Some(b62) header #b57 {
// [CoreOpt]     .block #b58
// [CoreOpt]     .block #b59
// [CoreOpt]     .block #b60
// [CoreOpt]   }
// [CoreOpt]   .bb #b62 () {
// [CoreOpt]     jump b61($f0, $f1, $f2, $f3, $f4, $f5)
// [CoreOpt]   }
// [CoreOpt]   .bb #b63 (int32) {
// [CoreOpt]     let _ = store int32 field($b57.5, 0 * @32) <- $b63.0
// [CoreOpt]     jump b60(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b66 (int32, int32, int32, array[int32]) {
// [CoreOpt]     let %66: bool = le($b66.2, $b66.0)
// [CoreOpt]     br %66 b67() b68()
// [CoreOpt]   }
// [CoreOpt]   .bb #b67 () {
// [CoreOpt]     jump b78($b66.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b68 () {
// [CoreOpt]     let %67: int32 = load int32 offset($b66.3, $b66.0 * @32)
// [CoreOpt]     let %69: bool = eq(%67, %68)
// [CoreOpt]     br %69 b69() b70()
// [CoreOpt]   }
// [CoreOpt]   .bb #b69 () {
// [CoreOpt]     let %70: int32 = add($b66.0, 1)
// [CoreOpt]     let %71: int32 = add($b66.1, 1)
// [CoreOpt]     jump b66(%70, %71, $b66.2, $b66.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b70 () {
// [CoreOpt]     let %74: bool = eq(%67, %73)
// [CoreOpt]     br %74 b71() b72()
// [CoreOpt]   }
// [CoreOpt]   .bb #b71 () {
// [CoreOpt]     let %75: bool = eq($b66.1, 0)
// [CoreOpt]     br %75 b73() b74()
// [CoreOpt]   }
// [CoreOpt]   .bb #b72 () {
// [CoreOpt]     let %79: int32 = add($b66.0, 1)
// [CoreOpt]     jump b66(%79, $b66.1, $b66.2, $b66.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b73 () {
// [CoreOpt]     jump b75($b66.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b74 () {
// [CoreOpt]     let %76: int32 = add($b66.0, 1)
// [CoreOpt]     let %77: int32 = sub($b66.1, 1)
// [CoreOpt]     jump b66(%76, %77, $b66.2, $b66.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b75 (int32) {
// [CoreOpt]     jump b76($b75.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b76 (int32) {
// [CoreOpt]     jump b77($b76.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b77 (int32) {
// [CoreOpt]     jump b78($b77.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b78 (int32) {
// [CoreOpt]     jump b63($b78.0)
// [CoreOpt]   }
// [CoreOpt]   .loop #b79 pre #Some(b80) header #b66 {
// [CoreOpt]     .block #b72
// [CoreOpt]     .block #b78
// [CoreOpt]     .block #b70
// [CoreOpt]     .block #b74
// [CoreOpt]     .block #b75
// [CoreOpt]     .block #b67
// [CoreOpt]     .block #b76
// [CoreOpt]     .block #b77
// [CoreOpt]     .block #b71
// [CoreOpt]     .block #b68
// [CoreOpt]     .block #b69
// [CoreOpt]     .block #b73
// [CoreOpt]   }
// [CoreOpt]   .bb #b80 () {
// [CoreOpt]     let %73: int32 = load_symbol ::7
// [CoreOpt]     let %68: int32 = load_symbol ::6
// [CoreOpt]     jump b79(%60, 0, $b57.1, $b57.3)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f19
// [CoreOpt] Remove dead function: f18
// [CoreOpt] LVN subst Insn(iref=%28) with Insn(iref=%27)
// [CoreOpt] LVN subst Insn(iref=%19) with Insn(iref=%18)
// [CoreOpt2] LVN subst Insn(iref=%81) with Insn(iref=%82)
// [CoreOpt2] LVN subst Insn(iref=%89) with Insn(iref=%90)
