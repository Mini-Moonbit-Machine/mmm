// [Asm] pre_assigned_registers: Insn(iref=%3) -> v7, FnParam(fref=f12, fpref=$f.0) -> v2, BlockParam(bref=b3, bpref=$b.0) -> v10, Insn(iref=%2) -> v9, Self(fref=f12) -> v0, FreeVar(fvref=^1) -> v3, Insn(iref=%1) -> v6, BlockParam(bref=b0, bpref=$b.0) -> v4, Insn(iref=%0) -> v5, Insn(iref=%4) -> v8
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=-1)])
// [Asm] defs: []
// [Asm] live_set: [v4, v3]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v3]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v4, v5, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v9]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [v9]
// [Asm] defined: v10 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v4 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v4, v5, v13, v3]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v4, v5, v14, v3]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v3]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, v3]
// [Asm] move_origin: [v8]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v3]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of read_prog140_12"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r20 [label="v2 ← a0", color=green];
// [Asm]   r23 [label="v8 ← a0", color=green];
// [Asm]   r3 [label="v3 ← s1", color=green];
// [Asm]   r9 [label="a2", color=blue];
// [Asm]   r6 [label="t3", color=blue];
// [Asm]   r13 [label="a6", color=blue];
// [Asm]   r4 [label="t1", color=blue];
// [Asm]   r1 [label="v4 ← s0", color=green];
// [Asm]   r11 [label="a4", color=blue];
// [Asm]   r7 [label="t4", color=blue];
// [Asm]   r10 [label="a3", color=blue];
// [Asm]   r22 [label="v14 ← a1", color=green];
// [Asm]   r14 [label="a7", color=blue];
// [Asm]   r8 [label="a1", color=blue];
// [Asm]   r5 [label="t2", color=blue];
// [Asm]   r15 [label="v5 ← a0", color=green];
// [Asm]   r2 [label="a0", color=blue];
// [Asm]   r16 [label="v15 ← a1", color=green];
// [Asm]   r18 [label="v10 ← a0", color=green];
// [Asm]   r19 [label="v0 ← a1", color=green];
// [Asm]   r21 [label="v13 ← a1", color=green];
// [Asm]   r17 [label="v9 ← a0", color=green];
// [Asm]   r12 [label="a5", color=blue];
// [Asm]   r1 -- r12;
// [Asm]   r3 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r3 -- r16;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r15 -- r22;
// [Asm]   r1 -- r7;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r22;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r1 -- r15;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r13;
// [Asm]   r2 -- r11;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r22;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r15 -- r21;
// [Asm]   r3 -- r21;
// [Asm]   r1 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r3 -- r13;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r20;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r14;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r19 -- r20;
// [Asm]   comment = "0:t0-> 1:v4-> 2:a0-> 3:v3-> 4:t1-> 5:t2-> 6:t3-> 7:t4-> 8:a1-> 9:a2-> 10:a3-> 11:a4-> 12:a5-> 13:a6-> 14:a7-> 15:v5-> 16:v15-> 21:v13-> 22:v14-> 19:v0-> 20:v2-> 23:v8-> 17:v9-> 18:v10"
// [Asm]   comment = "v2<-a0;v8<-a0;v3<-s1;v4<-s0;v14<-a1;v5<-a0;v15<-a1;v10<-a0;v0<-a1;v13<-a1;v9<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of read_prog140_12"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call read_ch_until_newline_or_eof1_0 ->   call read_ch_until_newline_or_eof1_0
// [Asm] subst   li v15, -1 ->   li a1, -1
// [Asm] subst   beq v5, v15, .read_prog140_12_1 ->   beq a0, a1, .read_prog140_12_1
// [Asm] subst   mv a0, v4 ->   mv a0, s0
// [Asm] subst   mv a1, v3 ->   mv a1, s1
// [Asm] subst   call bf5_1 ->   call bf5_1
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   ld v3, 8(v0) ->   ld s1, 8(a1)
// [Asm] subst   mv v4, v2 ->   mv s0, a0
// [Asm] subst   slliw v13, v4, 2 ->   slliw a1, s0, 2
// [Asm] subst   add v14, v3, v13 ->   add a1, s1, a1
// [Asm] subst   sw v5, 0(v14) ->   sw a0, 0(a1)
// [Asm] subst   addi v8, v4, 1 ->   addi a0, s0, 1
// [Asm] subst   mv v4, v8 ->   mv s0, a0
// [Asm] subst   j .read_prog140_12_0 ->   j .read_prog140_12_0
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v13, Insn(iref=%3) -> v12, FnParam(fref=f1, fpref=$f.1) -> v3, FnParam(fref=f1, fpref=$f.0) -> v2, Insn(iref=%2) -> v11, Mem(fref=f1, mref=m2) -> v6, Insn(iref=%1) -> v10, Mem(fref=f1, mref=m0) -> v8, Mem(fref=f1, mref=m4) -> v4, Self(fref=f1) -> v0, Mem(fref=f1, mref=m1) -> v5, Insn(iref=%6) -> v15, Mem(fref=f1, mref=m3) -> v7, Insn(iref=%5) -> v14, Insn(iref=%0) -> v9
// [Asm] defs: []
// [Asm] live_set: [zero, a0, a1, s11]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, a1, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, s11, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v2, zero, v31, v3]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v2, zero, v8, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, zero, v8, s11, v3]
// [Asm] move_origin: [v8]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v8, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v29]
// [Asm] live_set: [v2, zero, v29, v8, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v2, v10, zero, v8, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v2, v10, zero, v26, v8, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v2, v10, zero, v27, v8, v3]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, v10, zero, v8, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v5, v10, zero, v8, s11, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, v5, zero, v8, a1, s11, v3]
// [Asm] move_origin: [v10]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v5, zero, a0, v8, a1, s11, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v2, v5, zero, a0, v8, a2, a1, s11, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, v5, zero, v8, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v24]
// [Asm] live_set: [v2, v5, zero, v8, v24, v3]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, zero, v8, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v5, zero, v8, v6, s11, v3]
// [Asm] move_origin: [v6]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v8, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v2, v5, v21, zero, v8, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, zero, v8, v7, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v5, zero, v8, v7, v6, s11, v3]
// [Asm] move_origin: [v7]
// [Asm] defined: s11 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v2, v5, zero, v23, v8, v7, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v8, v7, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v8, v7, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v8, v7, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v2, v5, v18, zero, v8, v7, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: s11 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v2, v5, zero, v20, v8, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v7, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, zero]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v4, zero]
// [Asm] move_origin: [v4]
// [Asm] defined: s10 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v16, zero]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v16, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v16, zero, a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v15]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of bf5_1"];
// [Asm]   r0 [label="v2 ← s0", color=green];
// [Asm]   r33 [label="v16 ← a1", color=green];
// [Asm]   r9 [label="v26 ← a1", color=green];
// [Asm]   r26 [label="v21 ← a1", color=green];
// [Asm]   r6 [label="v8 ← s2", color=green];
// [Asm]   r13 [label="a2", color=blue];
// [Asm]   r4 [label="v3 ← s1", color=green];
// [Asm]   r29 [label="v18 ← a2", color=green];
// [Asm]   r7 [label="v29 ← a0", color=green];
// [Asm]   r10 [label="v27 ← a1", color=green];
// [Asm]   r8 [label="v10 ← a0", color=green];
// [Asm]   r5 [label="v31 ← a0", color=green];
// [Asm]   r24 [label="v24 ← a0", color=green];
// [Asm]   r15 [label="t1", color=blue];
// [Asm]   r32 [label="s10", color=blue];
// [Asm]   r31 [label="v20 ← a3", color=green];
// [Asm]   r17 [label="t3", color=blue];
// [Asm]   r12 [label="a0", color=blue];
// [Asm]   r20 [label="a4", color=blue];
// [Asm]   r23 [label="a7", color=blue];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r27 [label="v7 ← a1", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r28 [label="v23 ← a2", color=green];
// [Asm]   r11 [label="v5 ← s3", color=green];
// [Asm]   r34 [label="v15 ← a0", color=green];
// [Asm]   r22 [label="a6", color=blue];
// [Asm]   r14 [label="t0", color=blue];
// [Asm]   r30 [label="v4 ← a2", color=green];
// [Asm]   r25 [label="v6 ← a0", color=green];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="t2", color=blue];
// [Asm]   r18 [label="t4", color=blue];
// [Asm]   r19 [label="a3", color=blue];
// [Asm]   r21 [label="a5", color=blue];
// [Asm]   r4 -- r19;
// [Asm]   r1 -- r24;
// [Asm]   r6 -- r21;
// [Asm]   r25 -- r28;
// [Asm]   r0 -- r13;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r1 -- r30;
// [Asm]   r3 -- r16;
// [Asm]   r27 -- r29;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r11 -- r14;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r0 -- r28;
// [Asm]   r0 -- r25;
// [Asm]   r30 -- r31;
// [Asm]   r11 -- r31;
// [Asm]   r6 -- r29;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r0 -- r23;
// [Asm]   r0 -- r22;
// [Asm]   r4 -- r27;
// [Asm]   r27 -- r28;
// [Asm]   r11 -- r24;
// [Asm]   r11 -- r18;
// [Asm]   r4 -- r22;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r3 -- r18;
// [Asm]   r0 -- r16;
// [Asm]   r12 -- r19;
// [Asm]   r11 -- r19;
// [Asm]   r27 -- r30;
// [Asm]   r4 -- r31;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r31;
// [Asm]   r6 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r25 -- r29;
// [Asm]   r0 -- r26;
// [Asm]   r3 -- r4;
// [Asm]   r11 -- r13;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r0 -- r9;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r4 -- r28;
// [Asm]   r2 -- r12;
// [Asm]   r1 -- r27;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r4 -- r29;
// [Asm]   r6 -- r31;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r27;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r10;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r25;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r8;
// [Asm]   r12 -- r23;
// [Asm]   r11 -- r15;
// [Asm]   r0 -- r11;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r12 -- r21;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r6 -- r23;
// [Asm]   r11 -- r30;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r11 -- r25;
// [Asm]   r27 -- r31;
// [Asm]   r0 -- r18;
// [Asm]   r6 -- r25;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r0 -- r15;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r11 -- r20;
// [Asm]   r6 -- r15;
// [Asm]   r11 -- r17;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r0 -- r24;
// [Asm]   r1 -- r34;
// [Asm]   r1 -- r23;
// [Asm]   r6 -- r14;
// [Asm]   r12 -- r15;
// [Asm]   r8 -- r9;
// [Asm]   r25 -- r27;
// [Asm]   r11 -- r16;
// [Asm]   r3 -- r12;
// [Asm]   r6 -- r30;
// [Asm]   r1 -- r22;
// [Asm]   r1 -- r32;
// [Asm]   r0 -- r14;
// [Asm]   r11 -- r12;
// [Asm]   r0 -- r21;
// [Asm]   r1 -- r15;
// [Asm]   r25 -- r30;
// [Asm]   r1 -- r13;
// [Asm]   r11 -- r23;
// [Asm]   r4 -- r20;
// [Asm]   r25 -- r26;
// [Asm]   r6 -- r16;
// [Asm]   r11 -- r22;
// [Asm]   r3 -- r28;
// [Asm]   r4 -- r30;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r6 -- r26;
// [Asm]   r6 -- r12;
// [Asm]   r0 -- r19;
// [Asm]   r6 -- r24;
// [Asm]   r6 -- r20;
// [Asm]   r1 -- r28;
// [Asm]   r3 -- r22;
// [Asm]   r0 -- r31;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r19;
// [Asm]   r6 -- r27;
// [Asm]   r12 -- r20;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r12 -- r13;
// [Asm]   r12 -- r33;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r8;
// [Asm]   r6 -- r28;
// [Asm]   r1 -- r29;
// [Asm]   r12 -- r22;
// [Asm]   r0 -- r29;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r25 -- r31;
// [Asm]   r1 -- r25;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r11 -- r26;
// [Asm]   r0 -- r12;
// [Asm]   r12 -- r14;
// [Asm]   r12 -- r16;
// [Asm]   r4 -- r17;
// [Asm]   r11 -- r27;
// [Asm]   r12 -- r17;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r3;
// [Asm]   r4 -- r26;
// [Asm]   r0 -- r30;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r27;
// [Asm]   r0 -- r20;
// [Asm]   r11 -- r28;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r11 -- r21;
// [Asm]   r12 -- r18;
// [Asm]   r11 -- r29;
// [Asm]   comment = "0:v2-> 1:zero-> 2:a1-> 3:s11-> 4:v3-> 6:v8-> 11:v5-> 12:a0-> 13:a2-> 14:t0-> 15:t1-> 16:t2-> 17:t3-> 18:t4-> 19:a3-> 20:a4-> 21:a5-> 22:a6-> 23:a7-> 8:v10-> 9:v26-> 25:v6-> 27:v7-> 28:v23-> 29:v18-> 30:v4-> 31:v20-> 26:v21-> 7:v29-> 10:v27-> 24:v24-> 5:v31-> 33:v16-> 32:s10-> 34:v15"
// [Asm]   comment = "v2<-s0;v16<-a1;v26<-a1;v21<-a1;v8<-s2;v3<-s1;v18<-a2;v29<-a0;v27<-a1;v10<-a0;v31<-a0;v24<-a0;v20<-a3;v7<-a1;v23<-a2;v5<-s3;v15<-a0;v4<-a2;v6<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of bf5_1"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   mv v3, a1 ->   mv s1, a1
// [Asm] subst   addi v31, s11, -4 ->   addi a0, s11, -4
// [Asm] subst   andi v8, v31, -8 ->   andi s2, a0, -8
// [Asm] subst   mv s11, v8 ->   mv s11, s2
// [Asm] subst   sw zero, 0(v8) ->   sw zero, 0(s2)
// [Asm] subst   li v29, 1024 ->   li a0, 1024
// [Asm] subst   mul v10, v29, v29 ->   mul a0, a0, a0
// [Asm] subst   slliw v26, v10, 2 ->   slliw a1, a0, 2
// [Asm] subst   sub v27, s11, v26 ->   sub a1, s11, a1
// [Asm] subst   andi v5, v27, -8 ->   andi s3, a1, -8
// [Asm] subst   mv s11, v5 ->   mv s11, s3
// [Asm] subst   mv a1, v10 ->   mv a1, a0
// [Asm] subst   mv a0, v5 ->   mv a0, s3
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   call memseti32 ->   call memseti32
// [Asm] subst   addi v24, s11, -4 ->   addi a0, s11, -4
// [Asm] subst   andi v6, v24, -8 ->   andi a0, a0, -8
// [Asm] subst   mv s11, v6 ->   mv s11, a0
// [Asm] subst   sw zero, 0(v6) ->   sw zero, 0(a0)
// [Asm] subst   addi v21, s11, -24 ->   addi a1, s11, -24
// [Asm] subst   andi v7, v21, -8 ->   andi a1, a1, -8
// [Asm] subst   mv s11, v7 ->   mv s11, a1
// [Asm] subst   la v23, skip21_5 ->   la a2, skip21_5
// [Asm] subst   sd v23, 0(v7) ->   sd a2, 0(a1)
// [Asm] subst   sd v2, 8(v7) ->   sd s0, 8(a1)
// [Asm] subst   sd v3, 16(v7) ->   sd s1, 16(a1)
// [Asm] subst   addi v18, s11, -56 ->   addi a2, s11, -56
// [Asm] subst   andi v4, v18, -8 ->   andi a2, a2, -8
// [Asm] subst   mv s11, v4 ->   mv s11, a2
// [Asm] subst   la v20, aux40_7 ->   la a3, aux40_7
// [Asm] subst   sd v20, 0(v4) ->   sd a3, 0(a2)
// [Asm] subst   sd v2, 8(v4) ->   sd s0, 8(a2)
// [Asm] subst   sd v3, 16(v4) ->   sd s1, 16(a2)
// [Asm] subst   sd v8, 24(v4) ->   sd s2, 24(a2)
// [Asm] subst   sd v5, 32(v4) ->   sd s3, 32(a2)
// [Asm] subst   sd v6, 40(v4) ->   sd a0, 40(a2)
// [Asm] subst   sd v7, 48(v4) ->   sd a1, 48(a2)
// [Asm] subst   mv s10, v4 ->   mv s10, a2
// [Asm] subst   ld v16, 0(v4) ->   ld a1, 0(a2)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   jalr v16 ->   jalr a1
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: BlockParam(bref=b12, bpref=$b.0) -> v21, Insn(iref=%9) -> v15, FreeVar(fvref=^2) -> v5, Insn(iref=%8) -> v14, FreeVar(fvref=^1) -> v4, BlockParam(bref=b10, bpref=$b.0) -> v17, BlockParam(bref=b0, bpref=$b.0) -> v6, BlockParam(bref=b0, bpref=$b.1) -> v7, Insn(iref=%0) -> v8, Insn(iref=%4) -> v20, Insn(iref=%3) -> v19, FnParam(fref=f5, fpref=$f.0) -> v2, Self(fref=f5) -> v0, BlockParam(bref=b11, bpref=$b.0) -> v18, Insn(iref=%7) -> v13, Insn(iref=%2) -> v10, Insn(iref=%1) -> v9, Insn(iref=%11) -> v12, Insn(iref=%6) -> v11, BlockParam(bref=b9, bpref=$b.0) -> v16, FnParam(fref=f5, fpref=$f.1) -> v3
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.1), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=93)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=91)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[FreeVar(fvref=^1), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] defs: [v19]
// [Asm] live_set: [v19, v4, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v19, v4, v5, zero, v20]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, v5, zero, v20]
// [Asm] move_origin: [v19]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v4, v6, v5, zero, v7]
// [Asm] move_origin: [v20]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a1, zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, a1, zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v0, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v0, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v4, v6, v5, zero, v7]
// [Asm] move_origin: [v3]
// [Asm] defined: v7 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v4, v5, v14, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v4, v5, v14, v15, zero]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, v5, v15, zero]
// [Asm] move_origin: [v14]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v4, v6, v5, zero, v7]
// [Asm] move_origin: [v15]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v4, v5, v12, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, v5, zero, v7]
// [Asm] move_origin: [v12]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v6, v5, zero, v7]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v4, v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v21]
// [Asm] move_origin: [v18]
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v21]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v16]
// [Asm] move_origin: [v6]
// [Asm] defined: v16 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v21]
// [Asm] move_origin: [v6]
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v17]
// [Asm] move_origin: [v16]
// [Asm] defined: v17 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v21]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v27]
// [Asm] live_set: [v5, zero, v27, v7, v4, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v18]
// [Asm] move_origin: [v17]
// [Asm] defined: v18 is X
// [Asm] defs: [v29]
// [Asm] live_set: [v5, zero, v29, v7, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [v30]
// [Asm] live_set: [v5, zero, v30, v7, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v7, v4, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v5, zero, v7, v4, v6, v28, v9]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v6, zero, v9, v7]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of skip21_5"];
// [Asm]   r0 [label="v19 ← a0", color=green];
// [Asm]   r20 [label="v18 ← a0", color=green];
// [Asm]   r23 [label="v28 ← a4", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="a0", color=blue];
// [Asm]   r6 [label="v6 ← a0", color=green];
// [Asm]   r13 [label="v15 ← a3", color=green];
// [Asm]   r4 [label="v7 ← a3", color=green];
// [Asm]   r1 [label="v4 ← a1", color=green];
// [Asm]   r11 [label="v3 ← a3", color=green];
// [Asm]   r7 [label="v0 ← a2", color=green];
// [Asm]   r10 [label="v2 ← a0", color=green];
// [Asm]   r22 [label="v30 ← a4", color=green];
// [Asm]   r14 [label="v12 ← a0", color=green];
// [Asm]   r8 [label="a1", color=blue];
// [Asm]   r5 [label="v20 ← a3", color=green];
// [Asm]   r15 [label="v21 ← a0", color=green];
// [Asm]   r2 [label="v5 ← a2", color=green];
// [Asm]   r16 [label="v16 ← a0", color=green];
// [Asm]   r18 [label="v27 ← a4", color=green];
// [Asm]   r19 [label="v9 ← a5", color=green];
// [Asm]   r21 [label="v29 ← a4", color=green];
// [Asm]   r17 [label="v17 ← a0", color=green];
// [Asm]   r12 [label="v14 ← a0", color=green];
// [Asm]   r6 -- r21;
// [Asm]   r3 -- r19;
// [Asm]   r6 -- r11;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r23;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r22;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r1 -- r13;
// [Asm]   r3 -- r11;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r4 -- r22;
// [Asm]   r7 -- r9;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r22;
// [Asm]   r4 -- r21;
// [Asm]   r6 -- r13;
// [Asm]   r6 -- r19;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r18 -- r19;
// [Asm]   r12 -- r13;
// [Asm]   r19 -- r23;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r7 -- r10;
// [Asm]   r2 -- r12;
// [Asm]   r10 -- r11;
// [Asm]   r7 -- r11;
// [Asm]   r3 -- r10;
// [Asm]   r0 -- r5;
// [Asm]   r2 -- r21;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r14;
// [Asm]   r0 -- r1;
// [Asm]   r8 -- r10;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r6 -- r23;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r6;
// [Asm]   r7 -- r8;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r23;
// [Asm]   r4 -- r19;
// [Asm]   comment = "0:v19-> 1:v4-> 2:v5-> 3:zero-> 4:v7-> 5:v20-> 6:v6-> 18:v27-> 19:v9-> 23:v28-> 21:v29-> 22:v30-> 11:v3-> 10:v2-> 7:v0-> 12:v14-> 13:v15-> 14:v12-> 8:a1-> 9:a0-> 15:v21-> 16:v16-> 17:v17-> 20:v18"
// [Asm]   comment = "v19<-a0;v18<-a0;v28<-a4;v6<-a0;v15<-a3;v7<-a3;v4<-a1;v3<-a3;v0<-a2;v2<-a0;v30<-a4;v12<-a0;v20<-a3;v21<-a0;v5<-a2;v16<-a0;v27<-a4;v9<-a5;v29<-a4;v17<-a0;v14<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of skip21_5"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v19, v6, 1 ->   addi a0, a0, 1
// [Asm] subst   addi v20, v7, 1 ->   addi a3, a3, 1
// [Asm] subst   j .skip21_5_0 ->   j .skip21_5_0
// [Asm] subst   mv v0, s10 ->   mv a2, s10
// [Asm] subst   mv v3, a1 ->   mv a3, a1
// [Asm] subst   lw v4, 8(v0) ->   lw a1, 8(a2)
// [Asm] subst   ld v5, 16(v0) ->   ld a2, 16(a2)
// [Asm] subst   addi v14, v6, 1 ->   addi a0, a0, 1
// [Asm] subst   addi v15, v7, -1 ->   addi a3, a3, -1
// [Asm] subst   j .skip21_5_0 ->   j .skip21_5_0
// [Asm] subst   addi v12, v6, 1 ->   addi a0, a0, 1
// [Asm] subst   j .skip21_5_0 ->   j .skip21_5_0
// [Asm] subst   j .skip21_5_12 ->   j .skip21_5_12
// [Asm] subst   bge v6, v4, .skip21_5_1 ->   bge a0, a1, .skip21_5_1
// [Asm] subst   ret ->   ret
// [Asm] subst   beq v7, zero, .skip21_5_7 ->   beq a3, zero, .skip21_5_7
// [Asm] subst   li v27, 93 ->   li a4, 93
// [Asm] subst   bne v9, v27, .skip21_5_6 ->   bne a5, a4, .skip21_5_6
// [Asm] subst   slliw v29, v6, 2 ->   slliw a4, a0, 2
// [Asm] subst   add v30, v5, v29 ->   add a4, a2, a4
// [Asm] subst   lw v9, 0(v30) ->   lw a5, 0(a4)
// [Asm] subst   li v28, 91 ->   li a4, 91
// [Asm] subst   beq v9, v28, .skip21_5_3 ->   beq a5, a4, .skip21_5_3
// [Asm] pre_assigned_registers: FreeVar(fvref=^5) -> v6, Self(fref=f9) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v17, FreeVar(fvref=^1) -> v2, FreeVar(fvref=^2) -> v3, Insn(iref=%8) -> v13, FreeVar(fvref=^4) -> v5, Insn(iref=%5) -> v16, Insn(iref=%0) -> v8, Insn(iref=%4) -> v15, FreeVar(fvref=^6) -> v7, Insn(iref=%3) -> v14, Insn(iref=%7) -> v12, Insn(iref=%2) -> v10, Insn(iref=%1) -> v9, FreeVar(fvref=^3) -> v4, Insn(iref=%6) -> v11
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Asm] defs: [v8]
// [Asm] live_set: [v3, v5, zero, v7, v8, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v3, v5, zero, v7, v4, v6, v24, v2]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v3, v25, v5, zero, v7, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v3, v5, zero, v7, v4, v6, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [zero, v0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v0, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, zero, v0, v2]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, zero, v0, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v5, zero, v0, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v3, v5, zero, v0, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v6, v14, v5, zero]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v6, v14, v5, zero]
// [Asm] move_origin: [v5]
// [Asm] defined: s10 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v6, v14, v18, zero]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v14, v18, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v6, v18, zero, a0]
// [Asm] move_origin: [v14]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v6, a1, v18, zero, a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v15]
// [Asm] live_set: [v6, v15, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v15, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v17]
// [Asm] move_origin: [zero]
// [Asm] defined: v17 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v17]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v3, v11, v5, zero, v7, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v3, v11, v5, zero, v7, v4, v6, v2]
// [Asm] move_origin: [v7]
// [Asm] defined: s10 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v3, v11, v5, v21, zero, v7, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v11, v5, v21, zero, v7, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v5, v21, zero, a0, v7, v4, v6, v2]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v3, v5, zero, a0, v7, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v12]
// [Asm] live_set: [v3, v5, zero, v7, v4, v6, v12, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v5, zero, v7, v4, v6, v12, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of lp108_9"];
// [Asm]   r0 [label="v8 ← a0", color=green];
// [Asm]   r9 [label="v25 ← a0", color=green];
// [Asm]   r26 [label="a6", color=blue];
// [Asm]   r6 [label="v6 ← s4", color=green];
// [Asm]   r13 [label="s10", color=blue];
// [Asm]   r4 [label="v7 ← s2", color=green];
// [Asm]   r29 [label="v17 ← a0", color=green];
// [Asm]   r7 [label="v2 ← s5", color=green];
// [Asm]   r10 [label="v9 ← a0", color=green];
// [Asm]   r8 [label="v24 ← a0", color=green];
// [Asm]   r5 [label="v4 ← s3", color=green];
// [Asm]   r24 [label="a4", color=blue];
// [Asm]   r15 [label="a0", color=blue];
// [Asm]   r32 [label="v12 ← a0", color=green];
// [Asm]   r31 [label="v21 ← a1", color=green];
// [Asm]   r17 [label="t0", color=blue];
// [Asm]   r12 [label="v14 ← a0", color=green];
// [Asm]   r20 [label="t3", color=blue];
// [Asm]   r23 [label="a3", color=blue];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r27 [label="a7", color=blue];
// [Asm]   r1 [label="v3 ← s0", color=green];
// [Asm]   r28 [label="v15 ← a0", color=green];
// [Asm]   r11 [label="v0 ← a0", color=green];
// [Asm]   r22 [label="a2", color=blue];
// [Asm]   r14 [label="v18 ← a2", color=green];
// [Asm]   r30 [label="v11 ← a0", color=green];
// [Asm]   r25 [label="a5", color=blue];
// [Asm]   r2 [label="v5 ← s1", color=green];
// [Asm]   r16 [label="a1", color=blue];
// [Asm]   r18 [label="t1", color=blue];
// [Asm]   r19 [label="t2", color=blue];
// [Asm]   r21 [label="t4", color=blue];
// [Asm]   r5 -- r15;
// [Asm]   r4 -- r19;
// [Asm]   r1 -- r24;
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r21;
// [Asm]   r2 -- r32;
// [Asm]   r2 -- r31;
// [Asm]   r5 -- r21;
// [Asm]   r7 -- r21;
// [Asm]   r1 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r14 -- r16;
// [Asm]   r1 -- r30;
// [Asm]   r2 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r15 -- r31;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r7 -- r25;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r5 -- r18;
// [Asm]   r30 -- r31;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r32;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r31;
// [Asm]   r7 -- r27;
// [Asm]   r15 -- r25;
// [Asm]   r7 -- r32;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r31;
// [Asm]   r0 -- r6;
// [Asm]   r5 -- r31;
// [Asm]   r1 -- r31;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r6 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r15 -- r18;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r13 -- r30;
// [Asm]   r3 -- r30;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r7 -- r10;
// [Asm]   r6 -- r10;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r5 -- r32;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r1 -- r2;
// [Asm]   r6 -- r31;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r27;
// [Asm]   r2 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r25;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r15 -- r23;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r6 -- r23;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r24;
// [Asm]   r7 -- r8;
// [Asm]   r14 -- r15;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r23;
// [Asm]   r6 -- r32;
// [Asm]   r6 -- r25;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r26;
// [Asm]   r6 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r15 -- r26;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r23;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r23;
// [Asm]   r7 -- r24;
// [Asm]   r15 -- r22;
// [Asm]   r3 -- r12;
// [Asm]   r6 -- r30;
// [Asm]   r7 -- r26;
// [Asm]   r1 -- r22;
// [Asm]   r5 -- r13;
// [Asm]   r7 -- r13;
// [Asm]   r1 -- r32;
// [Asm]   r7 -- r20;
// [Asm]   r5 -- r19;
// [Asm]   r1 -- r15;
// [Asm]   r4 -- r20;
// [Asm]   r1 -- r13;
// [Asm]   r6 -- r16;
// [Asm]   r3 -- r28;
// [Asm]   r7 -- r30;
// [Asm]   r4 -- r30;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r7 -- r9;
// [Asm]   r6 -- r26;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r12;
// [Asm]   r15 -- r27;
// [Asm]   r6 -- r24;
// [Asm]   r6 -- r20;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r8;
// [Asm]   r7 -- r17;
// [Asm]   r6 -- r19;
// [Asm]   r6 -- r27;
// [Asm]   r7 -- r22;
// [Asm]   r4 -- r15;
// [Asm]   r7 -- r19;
// [Asm]   r12 -- r13;
// [Asm]   r15 -- r17;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r15 -- r21;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r0 -- r3;
// [Asm]   r4 -- r32;
// [Asm]   r6 -- r28;
// [Asm]   r7 -- r15;
// [Asm]   r7 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r15 -- r24;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r30;
// [Asm]   r7 -- r31;
// [Asm]   r5 -- r25;
// [Asm]   r12 -- r14;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r23;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r3;
// [Asm]   r4 -- r26;
// [Asm]   r2 -- r19;
// [Asm]   r0 -- r7;
// [Asm]   r15 -- r16;
// [Asm]   r5 -- r30;
// [Asm]   r15 -- r20;
// [Asm]   r15 -- r19;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   comment = "0:v8-> 1:v3-> 2:v5-> 3:zero-> 4:v7-> 5:v4-> 6:v6-> 7:v2-> 8:v24-> 9:v25-> 10:v9-> 15:a0-> 16:a1-> 17:t0-> 18:t1-> 19:t2-> 20:t3-> 21:t4-> 22:a2-> 23:a3-> 24:a4-> 25:a5-> 26:a6-> 27:a7-> 31:v21-> 30:v11-> 13:s10-> 32:v12-> 11:v0-> 12:v14-> 14:v18-> 28:v15-> 29:v17"
// [Asm]   comment = "v8<-a0;v25<-a0;v6<-s4;v7<-s2;v17<-a0;v2<-s5;v9<-a0;v24<-a0;v4<-s3;v12<-a0;v21<-a1;v14<-a0;v3<-s0;v15<-a0;v0<-a0;v18<-a2;v11<-a0;v5<-s1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of lp108_9"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   lw v8, 0(v2) ->   lw a0, 0(s5)
// [Asm] subst   slliw v24, v8, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v25, v3, v24 ->   add a0, s0, a0
// [Asm] subst   lw v9, 0(v25) ->   lw a0, 0(a0)
// [Asm] subst   bne v9, zero, .lp108_9_2 ->   bne a0, zero, .lp108_9_2
// [Asm] subst   mv v0, s10 ->   mv a0, s10
// [Asm] subst   ld v2, 8(v0) ->   ld s5, 8(a0)
// [Asm] subst   ld v3, 16(v0) ->   ld s0, 16(a0)
// [Asm] subst   lw v4, 24(v0) ->   lw s3, 24(a0)
// [Asm] subst   ld v5, 32(v0) ->   ld s1, 32(a0)
// [Asm] subst   ld v6, 40(v0) ->   ld s4, 40(a0)
// [Asm] subst   ld v7, 48(v0) ->   ld s2, 48(a0)
// [Asm] subst   addi v14, v4, 1 ->   addi a0, s3, 1
// [Asm] subst   mv s10, v5 ->   mv s10, s1
// [Asm] subst   ld v18, 0(v5) ->   ld a2, 0(s1)
// [Asm] subst   mv a1, zero ->   mv a1, zero
// [Asm] subst   jalr v18 ->   jalr a2
// [Asm] subst   sw v15, 0(v6) ->   sw a0, 0(s4)
// [Asm] subst   mv v17, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] subst   addi v11, v4, 1 ->   addi a0, s3, 1
// [Asm] subst   mv s10, v7 ->   mv s10, s2
// [Asm] subst   ld v21, 0(v7) ->   ld a1, 0(s2)
// [Asm] subst   jalr v21 ->   jalr a1
// [Asm] subst   sw v12, 0(v6) ->   sw a0, 0(s4)
// [Asm] subst   j .lp108_9_0 ->   j .lp108_9_0
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%1) -> v5, Mem(fref=f2, mref=m1) -> v3, Mem(fref=f2, mref=m0) -> v2, Insn(iref=%0) -> v4, Insn(iref=%2) -> v6
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [s11, v12, zero]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [zero, v13]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [s11, zero, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: s11 is X
// [Asm] defs: [v15]
// [Asm] live_set: [s11, v15, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, s11, zero, v2]
// [Asm] move_origin: [v15]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a1, s11, zero, a0, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, s11, zero, a0, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [zero, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: s11 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v2, v11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [zero, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: s10 is X
// [Asm] defs: [v7]
// [Asm] live_set: [zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v7]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main136_2"];
// [Asm]   r0 [label="v12 ← a0", color=green];
// [Asm]   r20 [label="v3 ← a0", color=green];
// [Asm]   r23 [label="v7 ← a1", color=green];
// [Asm]   r3 [label="v13 ← a0", color=green];
// [Asm]   r9 [label="t0", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="t4", color=blue];
// [Asm]   r4 [label="v2 ← s0", color=green];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r11 [label="t2", color=blue];
// [Asm]   r7 [label="a0", color=blue];
// [Asm]   r10 [label="t1", color=blue];
// [Asm]   r22 [label="s10", color=blue];
// [Asm]   r14 [label="a3", color=blue];
// [Asm]   r8 [label="a2", color=blue];
// [Asm]   r5 [label="v15 ← a0", color=green];
// [Asm]   r15 [label="a4", color=blue];
// [Asm]   r24 [label="v6 ← a0", color=green];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="a5", color=blue];
// [Asm]   r18 [label="a7", color=blue];
// [Asm]   r19 [label="v9 ← a0", color=green];
// [Asm]   r17 [label="a6", color=blue];
// [Asm]   r21 [label="v11 ← a1", color=green];
// [Asm]   r12 [label="t3", color=blue];
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r23;
// [Asm]   r4 -- r19;
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r7;
// [Asm]   r4 -- r13;
// [Asm]   r4 -- r16;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r10;
// [Asm]   r7 -- r13;
// [Asm]   r2 -- r10;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r20;
// [Asm]   r1 -- r17;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r7 -- r9;
// [Asm]   r6 -- r8;
// [Asm]   r7 -- r17;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r7 -- r15;
// [Asm]   r7 -- r10;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r7 -- r11;
// [Asm]   r2 -- r21;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r8;
// [Asm]   r4 -- r17;
// [Asm]   r1 -- r6;
// [Asm]   r2 -- r22;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r23;
// [Asm]   r1 -- r5;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r24;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r2 -- r19;
// [Asm]   r7 -- r8;
// [Asm]   r7 -- r12;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r7 -- r14;
// [Asm]   r20 -- r21;
// [Asm]   comment = "0:v12-> 1:s11-> 2:zero-> 4:v2-> 5:v15-> 6:a1-> 7:a0-> 8:a2-> 9:t0-> 10:t1-> 11:t2-> 12:t3-> 13:t4-> 14:a3-> 15:a4-> 16:a5-> 17:a6-> 18:a7-> 19:v9-> 20:v3-> 21:v11-> 23:v7-> 3:v13-> 22:s10-> 24:v6"
// [Asm]   comment = "v12<-a0;v3<-a0;v7<-a1;v13<-a0;v2<-s0;v15<-a0;v6<-a0;v9<-a0;v11<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main136_2"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v12, 4096 ->   li a0, 4096
// [Asm] subst   sub v13, s11, v12 ->   sub a0, s11, a0
// [Asm] subst   andi v2, v13, -8 ->   andi s0, a0, -8
// [Asm] subst   mv s11, v2 ->   mv s11, s0
// [Asm] subst   li v15, 1024 ->   li a0, 1024
// [Asm] subst   mv a1, v15 ->   mv a1, a0
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   call memseti32 ->   call memseti32
// [Asm] subst   addi v9, s11, -16 ->   addi a0, s11, -16
// [Asm] subst   andi v3, v9, -8 ->   andi a0, a0, -8
// [Asm] subst   mv s11, v3 ->   mv s11, a0
// [Asm] subst   la v11, read_prog140_12 ->   la a1, read_prog140_12
// [Asm] subst   sd v11, 0(v3) ->   sd a1, 0(a0)
// [Asm] subst   sd v2, 8(v3) ->   sd s0, 8(a0)
// [Asm] subst   mv s10, v3 ->   mv s10, a0
// [Asm] subst   ld v7, 0(v3) ->   ld a1, 0(a0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   jalr v7 ->   jalr a1
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f14) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_14"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_14"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main136_2 ->   call main136_2
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Mem(fref=f7, mref=m0) -> v9, Insn(iref=%15) -> v48, FreeVar(fvref=^5) -> v7, Insn(iref=%33) -> v40, Self(fref=f7) -> v0, FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, Insn(iref=%8) -> v14, Insn(iref=%10) -> v55, Insn(iref=%27) -> v46, Insn(iref=%14) -> v15, Insn(iref=%25) -> v44, Insn(iref=%39) -> v36, FreeVar(fvref=^4) -> v6, BlockParam(bref=b26, bpref=$b.0) -> v28, Insn(iref=%4) -> v59, BlockParam(bref=b25, bpref=$b.0) -> v27, Insn(iref=%49) -> v20, Insn(iref=%42) -> v19, Insn(iref=%44) -> v30, Insn(iref=%32) -> v39, FnParam(fref=f7, fpref=$f.0) -> v2, Insn(iref=%1) -> v12, Insn(iref=%26) -> v45, Insn(iref=%11) -> v56, BlockParam(bref=b23, bpref=$b.0) -> v25, BlockParam(bref=b24, bpref=$b.0) -> v26, Insn(iref=%6) -> v61, Insn(iref=%31) -> v38, BlockParam(bref=b19, bpref=$b.0) -> v21, BlockParam(bref=b22, bpref=$b.0) -> v24, Insn(iref=%46) -> v32, Insn(iref=%38) -> v35, Insn(iref=%28) -> v47, Insn(iref=%24) -> v43, Insn(iref=%16) -> v49, Insn(iref=%9) -> v54, Insn(iref=%37) -> v34, BlockParam(bref=b0, bpref=$b.0) -> v10, Insn(iref=%45) -> v31, Insn(iref=%47) -> v33, Insn(iref=%5) -> v60, Insn(iref=%19) -> v52, Insn(iref=%0) -> v11, FreeVar(fvref=^6) -> v8, Insn(iref=%18) -> v51, Insn(iref=%3) -> v58, BlockParam(bref=b27, bpref=$b.0) -> v62, Insn(iref=%22) -> v16, Insn(iref=%23) -> v42, Insn(iref=%17) -> v50, Insn(iref=%2) -> v13, Insn(iref=%20) -> v53, Insn(iref=%43) -> v29, Insn(iref=%30) -> v17, BlockParam(bref=b21, bpref=$b.0) -> v23, FreeVar(fvref=^3) -> v5, Insn(iref=%34) -> v41, BlockParam(bref=b20, bpref=$b.0) -> v22, Insn(iref=%40) -> v37, Insn(iref=%36) -> v18, Insn(iref=%12) -> v57
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=93)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=91)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=44)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=46)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=45)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=43)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=60)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=62)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[FreeVar(fvref=^1), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] defs: [v26]
// [Asm] live_set: [v26]
// [Asm] move_origin: [v25]
// [Asm] defined: v26 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v21]
// [Asm] move_origin: [v10]
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v21]
// [Asm] move_origin: []
// [Asm] defs: [v109]
// [Asm] live_set: [v109, v5, v10, v7, v8, v0, v4, v6, v12, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v109 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, v12, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v113]
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v113, v3]
// [Asm] move_origin: []
// [Asm] defined: v113 is X
// [Asm] defs: [v114]
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v114, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v114 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, v12, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v112]
// [Asm] live_set: [v112, v5, v10, v7, v8, v0, v4, v6, v12, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v112 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, v12, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v106]
// [Asm] live_set: [v106, v5, v10, v7, v8, v0, v4, v6, v12, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v106 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, v12, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v62]
// [Asm] live_set: [v62]
// [Asm] move_origin: [v28]
// [Asm] defined: v62 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v23]
// [Asm] move_origin: [v22]
// [Asm] defined: v23 is X
// [Asm] defs: [v38]
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v38, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v38 is X
// [Asm] defs: [v89]
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v89, v3]
// [Asm] move_origin: []
// [Asm] defined: v89 is X
// [Asm] defs: [v90]
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v90, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v90 is X
// [Asm] defs: [v39]
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v39, v3]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v39, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, v10, a0, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: [v39]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, v10, a0, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v40]
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v40 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v41]
// [Asm] live_set: [v5, v7, v8, v0, v4, v41, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: [v41]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v28]
// [Asm] live_set: [v28]
// [Asm] move_origin: [v27]
// [Asm] defined: v28 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v27]
// [Asm] move_origin: [v26]
// [Asm] defined: v27 is X
// [Asm] defs: [v54]
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v54, v3]
// [Asm] move_origin: []
// [Asm] defined: v54 is X
// [Asm] defs: [v55]
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v55, v3]
// [Asm] move_origin: []
// [Asm] defined: v55 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v57]
// [Asm] live_set: [v5, v7, v8, v0, v4, v6, s11, v57, v3]
// [Asm] move_origin: []
// [Asm] defined: v57 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: [v57]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v42]
// [Asm] live_set: [v5, v10, v42, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: [v43]
// [Asm] live_set: [v5, v10, v42, v7, v8, v0, v4, v6, v43, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v43 is X
// [Asm] defs: [v82]
// [Asm] live_set: [v5, v82, v10, v42, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v82 is X
// [Asm] defs: [v83]
// [Asm] live_set: [v5, v10, v42, v7, v8, v0, v4, v6, s11, v83, v3]
// [Asm] move_origin: []
// [Asm] defined: v83 is X
// [Asm] defs: [v44]
// [Asm] live_set: [v5, v10, v42, v7, v8, v0, v4, v6, s11, v44, v3]
// [Asm] move_origin: []
// [Asm] defined: v44 is X
// [Asm] defs: [v45]
// [Asm] live_set: [v5, v10, v42, v7, v8, v45, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v45 is X
// [Asm] defs: [v79]
// [Asm] live_set: [v5, v10, v79, v7, v8, v45, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v79 is X
// [Asm] defs: [v80]
// [Asm] live_set: [v5, v10, v7, v8, v45, v0, v4, v80, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v80 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v47]
// [Asm] live_set: [v5, v7, v8, v0, v4, v47, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: [v47]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v24]
// [Asm] live_set: [v24]
// [Asm] move_origin: [v23]
// [Asm] defined: v24 is X
// [Asm] defs: []
// [Asm] live_set: [a0, s11, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [a0, v0, s11]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v0, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v0, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, v0, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, v7, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v2, v5, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v10 is X
// [Asm] defs: [v105]
// [Asm] live_set: [v105, v10, v12]
// [Asm] move_origin: []
// [Asm] defined: v105 is X
// [Asm] defs: []
// [Asm] live_set: [v10]
// [Asm] move_origin: []
// [Asm] defs: [v58]
// [Asm] live_set: [v5, v58, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v58 is X
// [Asm] defs: [v59]
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v59, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v59 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v61]
// [Asm] live_set: [v5, v7, v8, v0, v4, v6, s11, v61, v3]
// [Asm] move_origin: []
// [Asm] defined: v61 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: [v61]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v110]
// [Asm] live_set: [v5, v10, v110, v7, v8, v0, v4, v6, v12, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v110 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, v12, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v62]
// [Asm] live_set: [v62]
// [Asm] move_origin: [v10]
// [Asm] defined: v62 is X
// [Asm] defs: []
// [Asm] live_set: [v62]
// [Asm] move_origin: []
// [Asm] defs: [v34]
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v34, v3]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v34, v3]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, v10, a0, v7, v8, v0, v4, v6, s11, v34, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v35]
// [Asm] live_set: [v5, v10, v7, v8, v35, v0, v4, v6, s11, v34, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v8, v35, v0, v4, v6, s11, v34, v3]
// [Asm] move_origin: []
// [Asm] defs: [v94]
// [Asm] live_set: [v94, v5, v10, v7, v8, v35, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v94 is X
// [Asm] defs: [v95]
// [Asm] live_set: [v5, v10, v7, v8, v35, v0, v95, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v95 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v37]
// [Asm] live_set: [v5, v7, v8, v0, v4, v37, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: [v37]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v102]
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, v102, v3]
// [Asm] move_origin: []
// [Asm] defined: v102 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v9, v3]
// [Asm] move_origin: [v9]
// [Asm] defined: s11 is X
// [Asm] defs: [v104]
// [Asm] live_set: [v5, v10, v7, v8, v0, v104, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v104 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v7, v8, v0, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v7, v8, v0, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v7, v8, v0, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v7, v8, v0, v4, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v5, v7, v8, v0, v4, v6, s11, v9, v3]
// [Asm] move_origin: [v9]
// [Asm] defined: s10 is X
// [Asm] defs: [v100]
// [Asm] live_set: [v5, v7, v8, v0, v4, v6, s11, v100, v3]
// [Asm] move_origin: []
// [Asm] defined: v100 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v7, v8, v0, v4, v6, s11, v100, v3]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, a0, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v31]
// [Asm] live_set: [v5, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v31 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v32]
// [Asm] live_set: [v5, v7, v8, v0, v4, v32, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: [v33]
// [Asm] live_set: [v5, v7, v8, v0, v4, v6, s11, v33, v3]
// [Asm] move_origin: []
// [Asm] defined: v33 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: [v33]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v108]
// [Asm] live_set: [v5, v10, v8, v7, v0, v4, v6, v108, v12, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v108 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v8, v7, v0, v4, v6, s11, v12, v3]
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v25]
// [Asm] move_origin: [v24]
// [Asm] defined: v25 is X
// [Asm] defs: [v111]
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, v111, s11, v12, v3]
// [Asm] move_origin: []
// [Asm] defined: v111 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, v12, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v62]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v107]
// [Asm] live_set: [v5, v10, v7, v8, v0, v107, v4, v6, v12, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v107 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v12, v3]
// [Asm] move_origin: []
// [Asm] defs: [v48]
// [Asm] live_set: [v5, v10, v48, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v48 is X
// [Asm] defs: [v49]
// [Asm] live_set: [v5, v10, v48, v49, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v49 is X
// [Asm] defs: [v73]
// [Asm] live_set: [v73, v5, v10, v48, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v73 is X
// [Asm] defs: [v74]
// [Asm] live_set: [v5, v10, v48, v7, v8, v0, v4, v6, v74, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v74 is X
// [Asm] defs: [v50]
// [Asm] live_set: [v5, v10, v48, v50, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v50 is X
// [Asm] defs: [v51]
// [Asm] live_set: [v51, v5, v10, v48, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v51 is X
// [Asm] defs: [v70]
// [Asm] live_set: [v51, v5, v10, v7, v8, v0, v4, v6, v70, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v70 is X
// [Asm] defs: [v71]
// [Asm] live_set: [v51, v5, v71, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v71 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v53]
// [Asm] live_set: [v5, v53, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v53 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: [v53]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v22]
// [Asm] live_set: [v22]
// [Asm] move_origin: [v21]
// [Asm] defined: v22 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v21]
// [Asm] move_origin: [v10]
// [Asm] defined: v21 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux40_7"];
// [Asm]   r0 [label="v26 ← a0", color=green];
// [Asm]   r46 [label="v83 ← a1", color=green];
// [Asm]   r33 [label="a5", color=blue];
// [Asm]   r76 [label="v48 ← a0", color=green];
// [Asm]   r59 [label="v34 ← s8", color=green];
// [Asm]   r9 [label="v6 ← s6", color=green];
// [Asm]   r26 [label="t2", color=blue];
// [Asm]   r44 [label="v43 ← a1", color=green];
// [Asm]   r53 [label="v2 ← a0", color=green];
// [Asm]   r56 [label="v59 ← a0", color=green];
// [Asm]   r10 [label="v12 ← a1", color=green];
// [Asm]   r5 [label="v7 ← s2", color=green];
// [Asm]   r54 [label="v105 ← a0", color=green];
// [Asm]   r24 [label="t0", color=blue];
// [Asm]   r43 [label="v42 ← a0", color=green];
// [Asm]   r80 [label="v50 ← a1", color=green];
// [Asm]   r31 [label="a3", color=blue];
// [Asm]   r39 [label="v27 ← a0", color=green];
// [Asm]   r17 [label="v62 ← a0", color=green];
// [Asm]   r52 [label="v24 ← a0", color=green];
// [Asm]   r65 [label="v9 ← a1", color=green];
// [Asm]   r79 [label="v74 ← a1", color=green];
// [Asm]   r20 [label="v89 ← a0", color=green];
// [Asm]   r61 [label="v94 ← a1", color=green];
// [Asm]   r23 [label="a0", color=blue];
// [Asm]   r3 [label="v5 ← s0", color=green];
// [Asm]   r82 [label="v70 ← a0", color=green];
// [Asm]   r67 [label="s10", color=blue];
// [Asm]   r75 [label="v107 ← a0", color=green];
// [Asm]   r77 [label="v49 ← a1", color=green];
// [Asm]   r27 [label="t3", color=blue];
// [Asm]   r62 [label="v95 ← a1", color=green];
// [Asm]   r40 [label="v54 ← a0", color=green];
// [Asm]   r11 [label="s11", color=blue];
// [Asm]   r58 [label="v110 ← a0", color=green];
// [Asm]   r34 [label="a6", color=blue];
// [Asm]   r83 [label="v71 ← a0", color=green];
// [Asm]   r14 [label="v114 ← a0", color=green];
// [Asm]   r51 [label="v47 ← a0", color=green];
// [Asm]   r78 [label="v73 ← a1", color=green];
// [Asm]   r55 [label="v58 ← a0", color=green];
// [Asm]   r16 [label="v106 ← a0", color=green];
// [Asm]   r21 [label="v90 ← a0", color=green];
// [Asm]   r60 [label="v35 ← a0", color=green];
// [Asm]   r73 [label="v25 ← a0", color=green];
// [Asm]   r38 [label="v28 ← a0", color=green];
// [Asm]   r72 [label="v108 ← a0", color=green];
// [Asm]   r85 [label="v22 ← a0", color=green];
// [Asm]   r47 [label="v44 ← a1", color=green];
// [Asm]   r6 [label="v8 ← s3", color=green];
// [Asm]   r13 [label="v113 ← a0", color=green];
// [Asm]   r42 [label="v57 ← a0", color=green];
// [Asm]   r4 [label="v10 ← s1", color=green];
// [Asm]   r29 [label="a1", color=blue];
// [Asm]   r35 [label="a7", color=blue];
// [Asm]   r7 [label="v0 ← s4", color=green];
// [Asm]   r64 [label="v102 ← a0", color=green];
// [Asm]   r8 [label="v4 ← s5", color=green];
// [Asm]   r36 [label="v40 ← a0", color=green];
// [Asm]   r66 [label="v104 ← a0", color=green];
// [Asm]   r15 [label="v112 ← a0", color=green];
// [Asm]   r32 [label="a4", color=blue];
// [Asm]   r49 [label="v79 ← a0", color=green];
// [Asm]   r74 [label="v111 ← a0", color=green];
// [Asm]   r57 [label="v61 ← a0", color=green];
// [Asm]   r68 [label="v100 ← a0", color=green];
// [Asm]   r70 [label="v32 ← a0", color=green];
// [Asm]   r48 [label="v45 ← a1", color=green];
// [Asm]   r12 [label="v3 ← s7", color=green];
// [Asm]   r37 [label="v41 ← a0", color=green];
// [Asm]   r1 [label="v21 ← a0", color=green];
// [Asm]   r28 [label="t4", color=blue];
// [Asm]   r41 [label="v55 ← a0", color=green];
// [Asm]   r71 [label="v33 ← a0", color=green];
// [Asm]   r69 [label="v31 ← a0", color=green];
// [Asm]   r22 [label="v39 ← a0", color=green];
// [Asm]   r84 [label="v53 ← a0", color=green];
// [Asm]   r50 [label="v80 ← a0", color=green];
// [Asm]   r30 [label="a2", color=blue];
// [Asm]   r45 [label="v82 ← a1", color=green];
// [Asm]   r25 [label="t1", color=blue];
// [Asm]   r63 [label="v37 ← a0", color=green];
// [Asm]   r2 [label="v109 ← a0", color=green];
// [Asm]   r18 [label="v23 ← a0", color=green];
// [Asm]   r19 [label="v38 ← a0", color=green];
// [Asm]   r81 [label="v51 ← a1", color=green];
// [Asm]   r12 -- r25;
// [Asm]   r12 -- r70;
// [Asm]   r5 -- r69;
// [Asm]   r6 -- r70;
// [Asm]   r6 -- r48;
// [Asm]   r11 -- r61;
// [Asm]   r9 -- r53;
// [Asm]   r11 -- r78;
// [Asm]   r6 -- r75;
// [Asm]   r3 -- r15;
// [Asm]   r11 -- r35;
// [Asm]   r3 -- r16;
// [Asm]   r12 -- r57;
// [Asm]   r35 -- r59;
// [Asm]   r8 -- r36;
// [Asm]   r3 -- r53;
// [Asm]   r43 -- r48;
// [Asm]   r6 -- r68;
// [Asm]   r7 -- r25;
// [Asm]   r33 -- r59;
// [Asm]   r12 -- r65;
// [Asm]   r7 -- r72;
// [Asm]   r3 -- r62;
// [Asm]   r4 -- r64;
// [Asm]   r4 -- r44;
// [Asm]   r6 -- r84;
// [Asm]   r23 -- r35;
// [Asm]   r3 -- r9;
// [Asm]   r9 -- r78;
// [Asm]   r7 -- r78;
// [Asm]   r3 -- r11;
// [Asm]   r4 -- r48;
// [Asm]   r5 -- r65;
// [Asm]   r9 -- r26;
// [Asm]   r11 -- r55;
// [Asm]   r2 -- r7;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r70;
// [Asm]   r3 -- r31;
// [Asm]   r7 -- r62;
// [Asm]   r7 -- r32;
// [Asm]   r7 -- r35;
// [Asm]   r11 -- r19;
// [Asm]   r9 -- r82;
// [Asm]   r9 -- r14;
// [Asm]   r3 -- r48;
// [Asm]   r8 -- r34;
// [Asm]   r3 -- r8;
// [Asm]   r9 -- r56;
// [Asm]   r9 -- r62;
// [Asm]   r6 -- r69;
// [Asm]   r5 -- r35;
// [Asm]   r9 -- r75;
// [Asm]   r5 -- r6;
// [Asm]   r11 -- r80;
// [Asm]   r8 -- r16;
// [Asm]   r9 -- r66;
// [Asm]   r59 -- r60;
// [Asm]   r3 -- r74;
// [Asm]   r7 -- r79;
// [Asm]   r4 -- r83;
// [Asm]   r48 -- r50;
// [Asm]   r9 -- r12;
// [Asm]   r7 -- r59;
// [Asm]   r5 -- r58;
// [Asm]   r5 -- r32;
// [Asm]   r8 -- r23;
// [Asm]   r12 -- r58;
// [Asm]   r5 -- r60;
// [Asm]   r4 -- r29;
// [Asm]   r8 -- r59;
// [Asm]   r8 -- r72;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r71;
// [Asm]   r3 -- r33;
// [Asm]   r11 -- r43;
// [Asm]   r12 -- r43;
// [Asm]   r5 -- r51;
// [Asm]   r12 -- r23;
// [Asm]   r6 -- r72;
// [Asm]   r11 -- r15;
// [Asm]   r6 -- r50;
// [Asm]   r3 -- r35;
// [Asm]   r8 -- r32;
// [Asm]   r6 -- r56;
// [Asm]   r12 -- r62;
// [Asm]   r5 -- r36;
// [Asm]   r6 -- r25;
// [Asm]   r23 -- r29;
// [Asm]   r4 -- r13;
// [Asm]   r7 -- r44;
// [Asm]   r11 -- r62;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r76;
// [Asm]   r4 -- r62;
// [Asm]   r6 -- r62;
// [Asm]   r2 -- r4;
// [Asm]   r6 -- r41;
// [Asm]   r76 -- r79;
// [Asm]   r12 -- r34;
// [Asm]   r9 -- r40;
// [Asm]   r11 -- r70;
// [Asm]   r4 -- r81;
// [Asm]   r30 -- r59;
// [Asm]   r7 -- r20;
// [Asm]   r9 -- r61;
// [Asm]   r8 -- r76;
// [Asm]   r5 -- r19;
// [Asm]   r6 -- r46;
// [Asm]   r6 -- r53;
// [Asm]   r11 -- r23;
// [Asm]   r9 -- r76;
// [Asm]   r9 -- r30;
// [Asm]   r3 -- r83;
// [Asm]   r2 -- r11;
// [Asm]   r43 -- r45;
// [Asm]   r8 -- r42;
// [Asm]   r11 -- r46;
// [Asm]   r5 -- r11;
// [Asm]   r8 -- r25;
// [Asm]   r11 -- r51;
// [Asm]   r9 -- r84;
// [Asm]   r11 -- r37;
// [Asm]   r6 -- r59;
// [Asm]   r12 -- r50;
// [Asm]   r7 -- r75;
// [Asm]   r10 -- r16;
// [Asm]   r3 -- r22;
// [Asm]   r23 -- r26;
// [Asm]   r5 -- r74;
// [Asm]   r8 -- r81;
// [Asm]   r6 -- r19;
// [Asm]   r7 -- r22;
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r55;
// [Asm]   r3 -- r65;
// [Asm]   r12 -- r63;
// [Asm]   r9 -- r83;
// [Asm]   r12 -- r55;
// [Asm]   r8 -- r62;
// [Asm]   r7 -- r19;
// [Asm]   r23 -- r30;
// [Asm]   r9 -- r63;
// [Asm]   r48 -- r49;
// [Asm]   r10 -- r15;
// [Asm]   r9 -- r24;
// [Asm]   r12 -- r22;
// [Asm]   r5 -- r68;
// [Asm]   r8 -- r35;
// [Asm]   r11 -- r41;
// [Asm]   r3 -- r29;
// [Asm]   r9 -- r36;
// [Asm]   r7 -- r36;
// [Asm]   r3 -- r66;
// [Asm]   r5 -- r81;
// [Asm]   r4 -- r36;
// [Asm]   r4 -- r7;
// [Asm]   r5 -- r25;
// [Asm]   r12 -- r16;
// [Asm]   r9 -- r46;
// [Asm]   r9 -- r58;
// [Asm]   r23 -- r59;
// [Asm]   r6 -- r74;
// [Asm]   r4 -- r74;
// [Asm]   r4 -- r10;
// [Asm]   r43 -- r44;
// [Asm]   r11 -- r28;
// [Asm]   r3 -- r23;
// [Asm]   r11 -- r56;
// [Asm]   r7 -- r46;
// [Asm]   r11 -- r29;
// [Asm]   r9 -- r21;
// [Asm]   r5 -- r12;
// [Asm]   r12 -- r35;
// [Asm]   r11 -- r44;
// [Asm]   r3 -- r67;
// [Asm]   r9 -- r25;
// [Asm]   r4 -- r41;
// [Asm]   r11 -- r68;
// [Asm]   r6 -- r36;
// [Asm]   r26 -- r59;
// [Asm]   r5 -- r63;
// [Asm]   r12 -- r81;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r56;
// [Asm]   r7 -- r56;
// [Asm]   r4 -- r58;
// [Asm]   r6 -- r66;
// [Asm]   r8 -- r68;
// [Asm]   r7 -- r77;
// [Asm]   r4 -- r54;
// [Asm]   r3 -- r32;
// [Asm]   r5 -- r42;
// [Asm]   r6 -- r63;
// [Asm]   r9 -- r45;
// [Asm]   r9 -- r31;
// [Asm]   r4 -- r78;
// [Asm]   r11 -- r24;
// [Asm]   r11 -- r60;
// [Asm]   r4 -- r22;
// [Asm]   r76 -- r77;
// [Asm]   r9 -- r41;
// [Asm]   r6 -- r77;
// [Asm]   r11 -- r53;
// [Asm]   r4 -- r35;
// [Asm]   r8 -- r79;
// [Asm]   r8 -- r71;
// [Asm]   r4 -- r33;
// [Asm]   r24 -- r59;
// [Asm]   r3 -- r30;
// [Asm]   r11 -- r48;
// [Asm]   r5 -- r83;
// [Asm]   r12 -- r28;
// [Asm]   r9 -- r28;
// [Asm]   r8 -- r77;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r43;
// [Asm]   r7 -- r63;
// [Asm]   r8 -- r78;
// [Asm]   r6 -- r10;
// [Asm]   r4 -- r28;
// [Asm]   r43 -- r46;
// [Asm]   r3 -- r40;
// [Asm]   r12 -- r40;
// [Asm]   r23 -- r32;
// [Asm]   r9 -- r59;
// [Asm]   r3 -- r10;
// [Asm]   r12 -- r59;
// [Asm]   r60 -- r62;
// [Asm]   r4 -- r12;
// [Asm]   r10 -- r75;
// [Asm]   r3 -- r27;
// [Asm]   r3 -- r69;
// [Asm]   r5 -- r80;
// [Asm]   r8 -- r29;
// [Asm]   r8 -- r63;
// [Asm]   r5 -- r7;
// [Asm]   r8 -- r11;
// [Asm]   r32 -- r59;
// [Asm]   r3 -- r7;
// [Asm]   r11 -- r47;
// [Asm]   r4 -- r49;
// [Asm]   r12 -- r68;
// [Asm]   r12 -- r78;
// [Asm]   r12 -- r53;
// [Asm]   r9 -- r47;
// [Asm]   r6 -- r32;
// [Asm]   r11 -- r25;
// [Asm]   r7 -- r82;
// [Asm]   r8 -- r82;
// [Asm]   r23 -- r33;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r8 -- r66;
// [Asm]   r9 -- r57;
// [Asm]   r9 -- r60;
// [Asm]   r8 -- r56;
// [Asm]   r6 -- r49;
// [Asm]   r11 -- r57;
// [Asm]   r12 -- r51;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r48;
// [Asm]   r5 -- r23;
// [Asm]   r9 -- r29;
// [Asm]   r12 -- r36;
// [Asm]   r11 -- r49;
// [Asm]   r8 -- r19;
// [Asm]   r5 -- r79;
// [Asm]   r4 -- r79;
// [Asm]   r8 -- r43;
// [Asm]   r7 -- r71;
// [Asm]   r23 -- r34;
// [Asm]   r4 -- r20;
// [Asm]   r3 -- r47;
// [Asm]   r29 -- r59;
// [Asm]   r6 -- r16;
// [Asm]   r4 -- r30;
// [Asm]   r9 -- r67;
// [Asm]   r6 -- r12;
// [Asm]   r7 -- r81;
// [Asm]   r6 -- r24;
// [Asm]   r9 -- r51;
// [Asm]   r9 -- r44;
// [Asm]   r11 -- r83;
// [Asm]   r12 -- r42;
// [Asm]   r7 -- r37;
// [Asm]   r6 -- r37;
// [Asm]   r4 -- r11;
// [Asm]   r9 -- r34;
// [Asm]   r7 -- r60;
// [Asm]   r3 -- r84;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r7 -- r33;
// [Asm]   r9 -- r33;
// [Asm]   r6 -- r28;
// [Asm]   r25 -- r59;
// [Asm]   r8 -- r67;
// [Asm]   r4 -- r72;
// [Asm]   r9 -- r69;
// [Asm]   r12 -- r49;
// [Asm]   r11 -- r50;
// [Asm]   r3 -- r55;
// [Asm]   r7 -- r47;
// [Asm]   r6 -- r67;
// [Asm]   r7 -- r11;
// [Asm]   r60 -- r61;
// [Asm]   r9 -- r37;
// [Asm]   r6 -- r82;
// [Asm]   r11 -- r79;
// [Asm]   r4 -- r47;
// [Asm]   r7 -- r43;
// [Asm]   r12 -- r30;
// [Asm]   r11 -- r26;
// [Asm]   r12 -- r37;
// [Asm]   r9 -- r65;
// [Asm]   r8 -- r58;
// [Asm]   r9 -- r32;
// [Asm]   r9 -- r16;
// [Asm]   r11 -- r58;
// [Asm]   r3 -- r36;
// [Asm]   r12 -- r14;
// [Asm]   r12 -- r27;
// [Asm]   r9 -- r19;
// [Asm]   r11 -- r27;
// [Asm]   r7 -- r50;
// [Asm]   r7 -- r68;
// [Asm]   r5 -- r43;
// [Asm]   r5 -- r30;
// [Asm]   r7 -- r69;
// [Asm]   r5 -- r76;
// [Asm]   r9 -- r50;
// [Asm]   r11 -- r21;
// [Asm]   r4 -- r19;
// [Asm]   r3 -- r44;
// [Asm]   r12 -- r60;
// [Asm]   r8 -- r31;
// [Asm]   r7 -- r51;
// [Asm]   r6 -- r81;
// [Asm]   r4 -- r75;
// [Asm]   r12 -- r29;
// [Asm]   r81 -- r82;
// [Asm]   r28 -- r59;
// [Asm]   r5 -- r82;
// [Asm]   r12 -- r32;
// [Asm]   r12 -- r84;
// [Asm]   r5 -- r21;
// [Asm]   r11 -- r76;
// [Asm]   r5 -- r33;
// [Asm]   r12 -- r79;
// [Asm]   r8 -- r51;
// [Asm]   r4 -- r34;
// [Asm]   r6 -- r35;
// [Asm]   r12 -- r77;
// [Asm]   r5 -- r72;
// [Asm]   r11 -- r74;
// [Asm]   r9 -- r79;
// [Asm]   r5 -- r10;
// [Asm]   r11 -- r14;
// [Asm]   r3 -- r6;
// [Asm]   r3 -- r42;
// [Asm]   r5 -- r22;
// [Asm]   r11 -- r66;
// [Asm]   r5 -- r59;
// [Asm]   r7 -- r84;
// [Asm]   r5 -- r47;
// [Asm]   r12 -- r69;
// [Asm]   r11 -- r67;
// [Asm]   r5 -- r29;
// [Asm]   r3 -- r37;
// [Asm]   r11 -- r45;
// [Asm]   r9 -- r49;
// [Asm]   r3 -- r68;
// [Asm]   r7 -- r27;
// [Asm]   r9 -- r68;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r31;
// [Asm]   r8 -- r12;
// [Asm]   r8 -- r61;
// [Asm]   r5 -- r31;
// [Asm]   r8 -- r45;
// [Asm]   r8 -- r24;
// [Asm]   r8 -- r75;
// [Asm]   r6 -- r60;
// [Asm]   r5 -- r62;
// [Asm]   r3 -- r78;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r57;
// [Asm]   r6 -- r80;
// [Asm]   r11 -- r13;
// [Asm]   r10 -- r12;
// [Asm]   r9 -- r23;
// [Asm]   r4 -- r65;
// [Asm]   r5 -- r78;
// [Asm]   r2 -- r12;
// [Asm]   r5 -- r67;
// [Asm]   r8 -- r48;
// [Asm]   r6 -- r83;
// [Asm]   r4 -- r56;
// [Asm]   r9 -- r20;
// [Asm]   r23 -- r24;
// [Asm]   r6 -- r64;
// [Asm]   r4 -- r25;
// [Asm]   r9 -- r74;
// [Asm]   r7 -- r80;
// [Asm]   r5 -- r55;
// [Asm]   r8 -- r70;
// [Asm]   r3 -- r49;
// [Asm]   r5 -- r66;
// [Asm]   r6 -- r55;
// [Asm]   r12 -- r21;
// [Asm]   r6 -- r23;
// [Asm]   r7 -- r42;
// [Asm]   r6 -- r65;
// [Asm]   r11 -- r36;
// [Asm]   r3 -- r46;
// [Asm]   r4 -- r14;
// [Asm]   r7 -- r65;
// [Asm]   r7 -- r67;
// [Asm]   r8 -- r30;
// [Asm]   r11 -- r84;
// [Asm]   r6 -- r76;
// [Asm]   r7 -- r76;
// [Asm]   r3 -- r19;
// [Asm]   r3 -- r45;
// [Asm]   r7 -- r29;
// [Asm]   r11 -- r20;
// [Asm]   r11 -- r77;
// [Asm]   r4 -- r23;
// [Asm]   r7 -- r24;
// [Asm]   r8 -- r27;
// [Asm]   r5 -- r71;
// [Asm]   r12 -- r72;
// [Asm]   r6 -- r33;
// [Asm]   r8 -- r9;
// [Asm]   r11 -- r16;
// [Asm]   r6 -- r30;
// [Asm]   r11 -- r12;
// [Asm]   r12 -- r64;
// [Asm]   r9 -- r64;
// [Asm]   r11 -- r22;
// [Asm]   r7 -- r74;
// [Asm]   r7 -- r48;
// [Asm]   r6 -- r22;
// [Asm]   r12 -- r82;
// [Asm]   r34 -- r59;
// [Asm]   r7 -- r49;
// [Asm]   r8 -- r20;
// [Asm]   r8 -- r47;
// [Asm]   r6 -- r20;
// [Asm]   r3 -- r50;
// [Asm]   r8 -- r64;
// [Asm]   r8 -- r41;
// [Asm]   r3 -- r57;
// [Asm]   r6 -- r27;
// [Asm]   r12 -- r20;
// [Asm]   r4 -- r80;
// [Asm]   r4 -- r15;
// [Asm]   r12 -- r41;
// [Asm]   r23 -- r25;
// [Asm]   r9 -- r70;
// [Asm]   r12 -- r13;
// [Asm]   r12 -- r33;
// [Asm]   r5 -- r28;
// [Asm]   r8 -- r53;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r8 -- r15;
// [Asm]   r12 -- r76;
// [Asm]   r4 -- r32;
// [Asm]   r11 -- r59;
// [Asm]   r7 -- r15;
// [Asm]   r6 -- r57;
// [Asm]   r5 -- r45;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r5 -- r70;
// [Asm]   r81 -- r83;
// [Asm]   r5 -- r56;
// [Asm]   r5 -- r61;
// [Asm]   r12 -- r66;
// [Asm]   r7 -- r41;
// [Asm]   r8 -- r10;
// [Asm]   r11 -- r34;
// [Asm]   r4 -- r82;
// [Asm]   r8 -- r26;
// [Asm]   r7 -- r57;
// [Asm]   r8 -- r83;
// [Asm]   r10 -- r54;
// [Asm]   r11 -- r72;
// [Asm]   r7 -- r16;
// [Asm]   r9 -- r48;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r9 -- r13;
// [Asm]   r7 -- r12;
// [Asm]   r7 -- r14;
// [Asm]   r8 -- r50;
// [Asm]   r9 -- r81;
// [Asm]   r8 -- r60;
// [Asm]   r6 -- r71;
// [Asm]   r6 -- r21;
// [Asm]   r31 -- r59;
// [Asm]   r8 -- r57;
// [Asm]   r23 -- r31;
// [Asm]   r5 -- r41;
// [Asm]   r4 -- r66;
// [Asm]   r27 -- r59;
// [Asm]   r7 -- r21;
// [Asm]   r8 -- r84;
// [Asm]   r6 -- r47;
// [Asm]   r9 -- r27;
// [Asm]   r3 -- r43;
// [Asm]   r7 -- r40;
// [Asm]   r9 -- r77;
// [Asm]   r3 -- r60;
// [Asm]   r3 -- r79;
// [Asm]   r2 -- r10;
// [Asm]   r6 -- r29;
// [Asm]   r11 -- r31;
// [Asm]   r7 -- r53;
// [Asm]   r11 -- r32;
// [Asm]   r5 -- r49;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r4 -- r40;
// [Asm]   r10 -- r58;
// [Asm]   r3 -- r51;
// [Asm]   r3 -- r34;
// [Asm]   r12 -- r19;
// [Asm]   r65 -- r66;
// [Asm]   r7 -- r83;
// [Asm]   r4 -- r21;
// [Asm]   r12 -- r24;
// [Asm]   r6 -- r13;
// [Asm]   r43 -- r47;
// [Asm]   r3 -- r76;
// [Asm]   r7 -- r34;
// [Asm]   r12 -- r44;
// [Asm]   r7 -- r55;
// [Asm]   r11 -- r81;
// [Asm]   r3 -- r4;
// [Asm]   r12 -- r67;
// [Asm]   r8 -- r69;
// [Asm]   r4 -- r43;
// [Asm]   r5 -- r75;
// [Asm]   r12 -- r46;
// [Asm]   r11 -- r82;
// [Asm]   r8 -- r37;
// [Asm]   r5 -- r53;
// [Asm]   r10 -- r74;
// [Asm]   r7 -- r10;
// [Asm]   r3 -- r80;
// [Asm]   r12 -- r74;
// [Asm]   r2 -- r8;
// [Asm]   r76 -- r78;
// [Asm]   r3 -- r82;
// [Asm]   r7 -- r70;
// [Asm]   r6 -- r31;
// [Asm]   r8 -- r44;
// [Asm]   r6 -- r78;
// [Asm]   r11 -- r63;
// [Asm]   r8 -- r80;
// [Asm]   r7 -- r61;
// [Asm]   r8 -- r22;
// [Asm]   r6 -- r45;
// [Asm]   r4 -- r50;
// [Asm]   r4 -- r8;
// [Asm]   r8 -- r21;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r12 -- r61;
// [Asm]   r5 -- r50;
// [Asm]   r12 -- r47;
// [Asm]   r3 -- r61;
// [Asm]   r76 -- r81;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r11 -- r30;
// [Asm]   r6 -- r61;
// [Asm]   r4 -- r9;
// [Asm]   r3 -- r58;
// [Asm]   r5 -- r34;
// [Asm]   r7 -- r64;
// [Asm]   r6 -- r58;
// [Asm]   r6 -- r7;
// [Asm]   r9 -- r72;
// [Asm]   r6 -- r9;
// [Asm]   r12 -- r45;
// [Asm]   r10 -- r72;
// [Asm]   r4 -- r24;
// [Asm]   r11 -- r40;
// [Asm]   r6 -- r15;
// [Asm]   r9 -- r35;
// [Asm]   r11 -- r71;
// [Asm]   r5 -- r20;
// [Asm]   r7 -- r45;
// [Asm]   r9 -- r15;
// [Asm]   r12 -- r80;
// [Asm]   r6 -- r44;
// [Asm]   r5 -- r77;
// [Asm]   r12 -- r15;
// [Asm]   r4 -- r59;
// [Asm]   r3 -- r12;
// [Asm]   r7 -- r26;
// [Asm]   r5 -- r13;
// [Asm]   r6 -- r79;
// [Asm]   r7 -- r13;
// [Asm]   r6 -- r51;
// [Asm]   r5 -- r84;
// [Asm]   r9 -- r42;
// [Asm]   r8 -- r55;
// [Asm]   r5 -- r44;
// [Asm]   r12 -- r56;
// [Asm]   r7 -- r30;
// [Asm]   r3 -- r28;
// [Asm]   r8 -- r33;
// [Asm]   r23 -- r27;
// [Asm]   r7 -- r9;
// [Asm]   r8 -- r65;
// [Asm]   r6 -- r26;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r40;
// [Asm]   r8 -- r49;
// [Asm]   r4 -- r60;
// [Asm]   r3 -- r77;
// [Asm]   r7 -- r66;
// [Asm]   r7 -- r28;
// [Asm]   r76 -- r80;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r34;
// [Asm]   r5 -- r64;
// [Asm]   r8 -- r28;
// [Asm]   r9 -- r22;
// [Asm]   r12 -- r71;
// [Asm]   r9 -- r80;
// [Asm]   r11 -- r42;
// [Asm]   r11 -- r33;
// [Asm]   r4 -- r46;
// [Asm]   r12 -- r75;
// [Asm]   r11 -- r75;
// [Asm]   r4 -- r45;
// [Asm]   r5 -- r46;
// [Asm]   r8 -- r13;
// [Asm]   r12 -- r31;
// [Asm]   r5 -- r37;
// [Asm]   r8 -- r74;
// [Asm]   r8 -- r40;
// [Asm]   r23 -- r28;
// [Asm]   r9 -- r43;
// [Asm]   r3 -- r64;
// [Asm]   r6 -- r42;
// [Asm]   r3 -- r72;
// [Asm]   r3 -- r81;
// [Asm]   r3 -- r41;
// [Asm]   r3 -- r14;
// [Asm]   r9 -- r55;
// [Asm]   r3 -- r75;
// [Asm]   r7 -- r58;
// [Asm]   r3 -- r59;
// [Asm]   r11 -- r69;
// [Asm]   r7 -- r31;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r77;
// [Asm]   r12 -- r48;
// [Asm]   r7 -- r23;
// [Asm]   r4 -- r26;
// [Asm]   r9 -- r71;
// [Asm]   r2 -- r3;
// [Asm]   r8 -- r46;
// [Asm]   r3 -- r63;
// [Asm]   r12 -- r83;
// [Asm]   r4 -- r61;
// [Asm]   r5 -- r40;
// [Asm]   r12 -- r26;
// [Asm]   r5 -- r15;
// [Asm]   comment = "0:v26-> 1:v21-> 2:v109-> 3:v5-> 4:v10-> 5:v7-> 6:v8-> 7:v0-> 8:v4-> 9:v6-> 10:v12-> 11:s11-> 12:v3-> 15:v112-> 16:v106-> 58:v110-> 72:v108-> 74:v111-> 75:v107-> 13:v113-> 14:v114-> 19:v38-> 20:v89-> 21:v90-> 22:v39-> 23:a0-> 24:t0-> 59:v34-> 25:t1-> 26:t2-> 27:t3-> 28:t4-> 29:a1-> 30:a2-> 31:a3-> 32:a4-> 33:a5-> 34:a6-> 35:a7-> 60:v35-> 61:v94-> 62:v95-> 36:v40-> 40:v54-> 41:v55-> 43:v42-> 44:v43-> 45:v82-> 46:v83-> 47:v44-> 48:v45-> 49:v79-> 50:v80-> 55:v58-> 56:v59-> 66:v104-> 65:v9-> 76:v48-> 77:v49-> 78:v73-> 79:v74-> 80:v50-> 81:v51-> 82:v70-> 83:v71-> 37:v41-> 42:v57-> 51:v47-> 53:v2-> 57:v61-> 63:v37-> 64:v102-> 67:s10-> 68:v100-> 69:v31-> 70:v32-> 71:v33-> 84:v53-> 54:v105-> 17:v62-> 18:v23-> 38:v28-> 39:v27-> 52:v24-> 73:v25-> 85:v22"
// [Asm]   comment = "v26<-a0;v83<-a1;v48<-a0;v34<-s8;v6<-s6;v43<-a1;v2<-a0;v59<-a0;v12<-a1;v7<-s2;v105<-a0;v42<-a0;v50<-a1;v27<-a0;v62<-a0;v24<-a0;v9<-a1;v74<-a1;v89<-a0;v94<-a1;v5<-s0;v70<-a0;v107<-a0;v49<-a1;v95<-a1;v54<-a0;v110<-a0;v71<-a0;v114<-a0;v47<-a0;v73<-a1;v58<-a0;v106<-a0;v90<-a0;v35<-a0;v25<-a0;v28<-a0;v108<-a0;v22<-a0;v44<-a1;v8<-s3;v113<-a0;v57<-a0;v10<-s1;v0<-s4;v102<-a0;v4<-s5;v40<-a0;v104<-a0;v112<-a0;v79<-a0;v111<-a0;v61<-a0;v100<-a0;v32<-a0;v45<-a1;v3<-s7;v41<-a0;v21<-a0;v55<-a0;v33<-a0;v31<-a0;v39<-a0;v53<-a0;v80<-a0;v82<-a1;v37<-a0;v109<-a0;v23<-a0;v38<-a0;v51<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux40_7"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v21, v10 ->   mv a0, s1
// [Asm] subst   j .aux40_7_19 ->   j .aux40_7_19
// [Asm] subst   li v106, 91 ->   li a0, 91
// [Asm] subst   beq v12, v106, .aux40_7_15 ->   beq a1, a0, .aux40_7_15
// [Asm] subst   li v109, 45 ->   li a0, 45
// [Asm] subst   beq v12, v109, .aux40_7_9 ->   beq a1, a0, .aux40_7_9
// [Asm] subst   slliw v113, v10, 2 ->   slliw a0, s1, 2
// [Asm] subst   add v114, v4, v113 ->   add a0, s5, a0
// [Asm] subst   lw v12, 0(v114) ->   lw a1, 0(a0)
// [Asm] subst   li v112, 62 ->   li a0, 62
// [Asm] subst   beq v12, v112, .aux40_7_3 ->   beq a1, a0, .aux40_7_3
// [Asm] subst   lw v38, 0(v5) ->   lw a0, 0(s0)
// [Asm] subst   slliw v89, v38, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v90, v6, v89 ->   add a0, s6, a0
// [Asm] subst   lw v39, 0(v90) ->   lw a0, 0(a0)
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   addi v41, v10, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v10, v41 ->   mv s1, a0
// [Asm] subst   j .aux40_7_0 ->   j .aux40_7_0
// [Asm] subst   lw v54, 0(v5) ->   lw a0, 0(s0)
// [Asm] subst   addi v55, v54, -1 ->   addi a0, a0, -1
// [Asm] subst   sw v55, 0(v5) ->   sw a0, 0(s0)
// [Asm] subst   addi v57, v10, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v10, v57 ->   mv s1, a0
// [Asm] subst   j .aux40_7_0 ->   j .aux40_7_0
// [Asm] subst   lw v42, 0(v5) ->   lw a0, 0(s0)
// [Asm] subst   lw v43, 0(v5) ->   lw a1, 0(s0)
// [Asm] subst   slliw v82, v43, 2 ->   slliw a1, a1, 2
// [Asm] subst   add v83, v6, v82 ->   add a1, s6, a1
// [Asm] subst   lw v44, 0(v83) ->   lw a1, 0(a1)
// [Asm] subst   addi v45, v44, -1 ->   addi a1, a1, -1
// [Asm] subst   slliw v79, v42, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v80, v6, v79 ->   add a0, s6, a0
// [Asm] subst   sw v45, 0(v80) ->   sw a1, 0(a0)
// [Asm] subst   addi v47, v10, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v10, v47 ->   mv s1, a0
// [Asm] subst   j .aux40_7_0 ->   j .aux40_7_0
// [Asm] subst   mv v0, s10 ->   mv s4, s10
// [Asm] subst   lw v3, 8(v0) ->   lw s7, 8(s4)
// [Asm] subst   ld v4, 16(v0) ->   ld s5, 16(s4)
// [Asm] subst   ld v5, 24(v0) ->   ld s0, 24(s4)
// [Asm] subst   ld v6, 32(v0) ->   ld s6, 32(s4)
// [Asm] subst   ld v7, 40(v0) ->   ld s2, 40(s4)
// [Asm] subst   ld v8, 48(v0) ->   ld s3, 48(s4)
// [Asm] subst   mv v10, v2 ->   mv s1, a0
// [Asm] subst   li v105, 93 ->   li a0, 93
// [Asm] subst   bne v12, v105, .aux40_7_18 ->   bne a1, a0, .aux40_7_18
// [Asm] subst   lw v58, 0(v5) ->   lw a0, 0(s0)
// [Asm] subst   addi v59, v58, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v59, 0(v5) ->   sw a0, 0(s0)
// [Asm] subst   addi v61, v10, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v10, v61 ->   mv s1, a0
// [Asm] subst   j .aux40_7_0 ->   j .aux40_7_0
// [Asm] subst   li v110, 43 ->   li a0, 43
// [Asm] subst   beq v12, v110, .aux40_7_7 ->   beq a1, a0, .aux40_7_7
// [Asm] subst   mv v62, v10 ->   mv a0, s1
// [Asm] subst   j .aux40_7_27 ->   j .aux40_7_27
// [Asm] subst   lw v34, 0(v5) ->   lw s8, 0(s0)
// [Asm] subst   call read_ch_until_newline_or_eof1_0 ->   call read_ch_until_newline_or_eof1_0
// [Asm] subst   slliw v94, v34, 2 ->   slliw a1, s8, 2
// [Asm] subst   add v95, v6, v94 ->   add a1, s6, a1
// [Asm] subst   sw v35, 0(v95) ->   sw a0, 0(a1)
// [Asm] subst   addi v37, v10, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v10, v37 ->   mv s1, a0
// [Asm] subst   j .aux40_7_0 ->   j .aux40_7_0
// [Asm] subst   sw v10, 0(v7) ->   sw s1, 0(s2)
// [Asm] subst   addi v102, s11, -56 ->   addi a0, s11, -56
// [Asm] subst   andi v9, v102, -8 ->   andi a1, a0, -8
// [Asm] subst   mv s11, v9 ->   mv s11, a1
// [Asm] subst   la v104, lp108_9 ->   la a0, lp108_9
// [Asm] subst   sd v104, 0(v9) ->   sd a0, 0(a1)
// [Asm] subst   sd v5, 8(v9) ->   sd s0, 8(a1)
// [Asm] subst   sd v6, 16(v9) ->   sd s6, 16(a1)
// [Asm] subst   sd v10, 24(v9) ->   sd s1, 24(a1)
// [Asm] subst   sd v8, 32(v9) ->   sd s3, 32(a1)
// [Asm] subst   sd v7, 40(v9) ->   sd s2, 40(a1)
// [Asm] subst   sd v0, 48(v9) ->   sd s4, 48(a1)
// [Asm] subst   mv s10, v9 ->   mv s10, a1
// [Asm] subst   ld v100, 0(v9) ->   ld a0, 0(a1)
// [Asm] subst   jalr v100 ->   jalr a0
// [Asm] subst   lw v32, 0(v7) ->   lw a0, 0(s2)
// [Asm] subst   addi v33, v32, 1 ->   addi a0, a0, 1
// [Asm] subst   mv v10, v33 ->   mv s1, a0
// [Asm] subst   j .aux40_7_0 ->   j .aux40_7_0
// [Asm] subst   li v108, 46 ->   li a0, 46
// [Asm] subst   beq v12, v108, .aux40_7_11 ->   beq a1, a0, .aux40_7_11
// [Asm] subst   li v111, 60 ->   li a0, 60
// [Asm] subst   beq v12, v111, .aux40_7_5 ->   beq a1, a0, .aux40_7_5
// [Asm] subst   ret ->   ret
// [Asm] subst   bge v10, v3, .aux40_7_1 ->   bge s1, s7, .aux40_7_1
// [Asm] subst   li v107, 44 ->   li a0, 44
// [Asm] subst   beq v12, v107, .aux40_7_13 ->   beq a1, a0, .aux40_7_13
// [Asm] subst   lw v48, 0(v5) ->   lw a0, 0(s0)
// [Asm] subst   lw v49, 0(v5) ->   lw a1, 0(s0)
// [Asm] subst   slliw v73, v49, 2 ->   slliw a1, a1, 2
// [Asm] subst   add v74, v6, v73 ->   add a1, s6, a1
// [Asm] subst   lw v50, 0(v74) ->   lw a1, 0(a1)
// [Asm] subst   addi v51, v50, 1 ->   addi a1, a1, 1
// [Asm] subst   slliw v70, v48, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v71, v6, v70 ->   add a0, s6, a0
// [Asm] subst   sw v51, 0(v71) ->   sw a1, 0(a0)
// [Asm] subst   addi v53, v10, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v10, v53 ->   mv s1, a0
// [Asm] subst   j .aux40_7_0 ->   j .aux40_7_0
// [Asm] subst   mv v21, v10 ->   mv a0, s1
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v3, BlockParam(bref=b5, bpref=$b.0) -> v5, Self(fref=f0) -> v0, BlockParam(bref=b6, bpref=$b.0) -> v6, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=13)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=10)])
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10, v2]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [v8]
// [Asm] defined: v5 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [v5]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [v7]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of read_ch_until_newline_or_eof1_0"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r14 [label="v10 ← a1", color=green];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r15 [label="v8 ← a0", color=green];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r16 [label="v5 ← a0", color=green];
// [Asm]   r18 [label="v6 ← a0", color=green];
// [Asm]   r19 [label="v7 ← a0", color=green];
// [Asm]   r17 [label="v9 ← a1", color=green];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r13 -- r14;
// [Asm]   r1 -- r7;
// [Asm]   r13 -- r17;
// [Asm]   r1 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2-> 14:v10-> 17:v9-> 15:v8-> 16:v5-> 18:v6-> 19:v7"
// [Asm]   comment = "v2<-a0;v10<-a1;v8<-a0;v5<-a0;v6<-a0;v7<-a0;v9<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of read_ch_until_newline_or_eof1_0"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call minimbt_read_char ->   call minimbt_read_char
// [Asm] subst   li v10, 10 ->   li a1, 10
// [Asm] subst   beq v2, v10, .read_ch_until_newline_or_eof1_0_1 ->   beq a0, a1, .read_ch_until_newline_or_eof1_0_1
// [Asm] subst   li v8, -1 ->   li a0, -1
// [Asm] subst   li v9, 13 ->   li a1, 13
// [Asm] subst   bne v2, v9, .read_ch_until_newline_or_eof1_0_4 ->   bne a0, a1, .read_ch_until_newline_or_eof1_0_4
// [Asm] subst   li v7, -1 ->   li a0, -1
// [Asm] subst   j .read_ch_until_newline_or_eof1_0_6 ->   j .read_ch_until_newline_or_eof1_0_6
// [Asm] subst   ret ->   ret
// [Asm] subst   j .read_ch_until_newline_or_eof1_0_5 ->   j .read_ch_until_newline_or_eof1_0_5
// [Asm] before colored: # leaf true
// [Asm] skip21_5:
// [Asm] # block info: defs: [v2, v5, v7, v0, v4, v6, v3], uses: [v3, v0, a1, s10, a0, v2], upward_exposed: [a1, s10, a0], params_defs: []
// [Asm] # live_in: [a1, s10, a0, zero], live_out: [v4, v6, v5, zero, v7]
// [Asm] # block parameters: []
// [Asm] .skip21_5_13:
// [Asm]   # save_ctx1  # live: [a1, zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, v0, zero, v3]
// [Asm]   lw v4, 8(v0)  # live: [v2, v0, v4, zero, v3]
// [Asm]   ld v5, 16(v0)  # live: [v2, v4, v5, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v2  # live: [v4, v6, v5, zero, v3]
// [Asm]   mv v7, v3  # live: [v4, v6, v5, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v4, v6], upward_exposed: [v4, v6], params_defs: [v6, v7]
// [Asm] # live_in: [v4, v6, v5, zero, v7], live_out: [v4, v6, v5, zero, v7]
// [Asm] # block parameters: [v6, v7]
// [Asm] .skip21_5_0:
// [Asm] # control
// [Asm]   bge v6, v4, .skip21_5_1  # live: [v4, v6, v5, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v28, v29, v9, v30], uses: [v6, v5, v28, v29, v9, v30], upward_exposed: [v6, v5], params_defs: []
// [Asm] # live_in: [v4, v6, v5, zero, v7], live_out: [v5, zero, v7, v4, v6, v9]
// [Asm] # block parameters: []
// [Asm] .skip21_5_2:
// [Asm]   slliw v29, v6, 2  # live: [v5, zero, v29, v7, v4, v6]
// [Asm]   add v30, v5, v29  # live: [v5, zero, v30, v7, v4, v6]
// [Asm]   lw v9, 0(v30)  # live: [v5, zero, v7, v4, v6, v9]
// [Asm] # control
// [Asm]   li v28, 91  # live: [v5, zero, v7, v4, v6, v28, v9]
// [Asm]   beq v9, v28, .skip21_5_3  # live: [v4, v5, v6, zero, v9, v7]
// [Asm] 
// [Asm] # block info: defs: [v27], uses: [v9, v27], upward_exposed: [v9], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v4, v6, v9], live_out: [v4, v6, v5, zero, v7]
// [Asm] # block parameters: []
// [Asm] .skip21_5_4:
// [Asm] # control
// [Asm]   li v27, 93  # live: [v5, zero, v27, v7, v4, v6, v9]
// [Asm]   bne v9, v27, .skip21_5_6  # live: [v4, v6, v5, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [], uses: [zero, v7], upward_exposed: [zero, v7], params_defs: []
// [Asm] # live_in: [v4, v6, v5, zero, v7], live_out: [v4, v6, v5, zero, v7]
// [Asm] # block parameters: []
// [Asm] .skip21_5_5:
// [Asm] # control
// [Asm]   beq v7, zero, .skip21_5_7  # live: [v4, v6, v5, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v14, v6, v15, v7], uses: [v6, v14, v15, v7], upward_exposed: [v6, v7], params_defs: []
// [Asm] # live_in: [v4, v6, v5, zero, v7], live_out: [v4, v6, v5, zero, v7]
// [Asm] # block parameters: []
// [Asm] .skip21_5_8:
// [Asm]   addi v14, v6, 1  # live: [v4, v5, v14, zero, v7]
// [Asm]   addi v15, v7, -1  # live: [v4, v5, v14, v15, zero]
// [Asm] # control
// [Asm]   mv v6, v14  # live: [v4, v6, v5, v15, zero]
// [Asm]   mv v7, v15  # live: [v4, v6, v5, zero, v7]
// [Asm]   j .skip21_5_0  # live: [v4, v6, v5, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v21], uses: [v6], upward_exposed: [v6], params_defs: []
// [Asm] # live_in: [v6], live_out: [v21]
// [Asm] # block parameters: []
// [Asm] .skip21_5_1:
// [Asm] # control
// [Asm]   mv v21, v6  # live: [v21]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v21, a0], upward_exposed: [v21], params_defs: [v21]
// [Asm] # live_in: [v21], live_out: []
// [Asm] # block parameters: [v21]
// [Asm] .skip21_5_12:
// [Asm] # control
// [Asm]   mv a0, v21  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v19, v6, v20, v7], uses: [v19, v6, v20, v7], upward_exposed: [v6, v7], params_defs: []
// [Asm] # live_in: [v4, v6, v5, zero, v7], live_out: [v4, v6, v5, zero, v7]
// [Asm] # block parameters: []
// [Asm] .skip21_5_3:
// [Asm]   addi v19, v6, 1  # live: [v19, v4, v5, zero, v7]
// [Asm]   addi v20, v7, 1  # live: [v19, v4, v5, zero, v20]
// [Asm] # control
// [Asm]   mv v6, v19  # live: [v4, v6, v5, zero, v20]
// [Asm]   mv v7, v20  # live: [v4, v6, v5, zero, v7]
// [Asm]   j .skip21_5_0  # live: [v4, v6, v5, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v6, v12], uses: [v6, v12, v7], upward_exposed: [v6, v7], params_defs: []
// [Asm] # live_in: [v4, v6, v5, zero, v7], live_out: [v4, v6, v5, zero, v7]
// [Asm] # block parameters: []
// [Asm] .skip21_5_6:
// [Asm]   addi v12, v6, 1  # live: [v4, v5, v12, zero, v7]
// [Asm] # control
// [Asm]   mv v6, v12  # live: [v4, v6, v5, zero, v7]
// [Asm]   mv v7, v7  # live: [v4, v6, v5, zero, v7]
// [Asm]   j .skip21_5_0  # live: [v4, v6, v5, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v16], uses: [v6], upward_exposed: [v6], params_defs: []
// [Asm] # live_in: [v6], live_out: [v16]
// [Asm] # block parameters: []
// [Asm] .skip21_5_7:
// [Asm] # control
// [Asm]   mv v16, v6  # live: [v16]
// [Asm] 
// [Asm] # block info: defs: [v17], uses: [v16], upward_exposed: [v16], params_defs: [v16]
// [Asm] # live_in: [v16], live_out: [v17]
// [Asm] # block parameters: [v16]
// [Asm] .skip21_5_9:
// [Asm] # control
// [Asm]   mv v17, v16  # live: [v17]
// [Asm] 
// [Asm] # block info: defs: [v18], uses: [v17], upward_exposed: [v17], params_defs: [v17]
// [Asm] # live_in: [v17], live_out: [v18]
// [Asm] # block parameters: [v17]
// [Asm] .skip21_5_10:
// [Asm] # control
// [Asm]   mv v18, v17  # live: [v18]
// [Asm] 
// [Asm] # block info: defs: [v21], uses: [v18], upward_exposed: [v18], params_defs: [v18]
// [Asm] # live_in: [v18], live_out: [v21]
// [Asm] # block parameters: [v18]
// [Asm] .skip21_5_11:
// [Asm] # control
// [Asm]   mv v21, v18  # live: [v21]
// [Asm]   j .skip21_5_12  # live: [v21]
// [Asm] 
// [Asm] # leaf false
// [Asm] main136_2:
// [Asm] # block info: defs: [v3, t1, v13, v7, ft0, ft1, a1, v12, s11, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v6, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v9, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15, v2], uses: [v2, v11, v13, a0, v7, a2, a1, s11, v12, v9, zero, v15, v3], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main136_2_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   li v12, 4096  # live: [s11, v12, zero]
// [Asm]   sub v13, s11, v12  # live: [zero, v13]
// [Asm]   andi v2, v13, -8  # live: [zero, v2]
// [Asm]   mv s11, v2  # live: [s11, zero, v2]
// [Asm]   li v15, 1024  # live: [s11, v15, zero, v2]
// [Asm]   mv a1, v15  # live: [a1, s11, zero, v2]
// [Asm]   mv a0, v2  # live: [a1, s11, zero, a0, v2]
// [Asm]   mv a2, zero  # live: [a2, a1, s11, zero, a0, v2]
// [Asm]   call memseti32  # live: [s11, zero, v2]
// [Asm]   addi v9, s11, -16  # live: [zero, v9, v2]
// [Asm]   andi v3, v9, -8  # live: [v2, zero, v3]
// [Asm]   mv s11, v3  # live: [v2, zero, v3]
// [Asm]   la v11, read_prog140_12  # live: [v2, v11, zero, v3]
// [Asm]   sd v11, 0(v3)  # live: [v2, zero, v3]
// [Asm]   sd v2, 8(v3)  # live: [zero, v3]
// [Asm]   mv s10, v3  # live: [zero, v3]
// [Asm]   ld v7, 0(v3)  # live: [zero, v7]
// [Asm]   # save_ctx2  # live: [zero, v7]
// [Asm]   mv a0, zero  # live: [zero, a0, v7]
// [Asm]   jalr v7  # live: [zero, a0]
// [Asm]   mv v6, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_14:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_14_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main136_2  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] lp108_9:
// [Asm] # block info: defs: [v2, v5, v7, v0, v4, v6, v3], uses: [v0, s10], upward_exposed: [s10], params_defs: []
// [Asm] # live_in: [s10, zero], live_out: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .lp108_9_4:
// [Asm]   # save_ctx1  # live: [zero, s10]
// [Asm]   mv v0, s10  # live: [zero, v0]
// [Asm]   ld v2, 8(v0)  # live: [zero, v0, v2]
// [Asm]   ld v3, 16(v0)  # live: [v3, zero, v0, v2]
// [Asm]   lw v4, 24(v0)  # live: [v3, zero, v0, v4, v2]
// [Asm]   ld v5, 32(v0)  # live: [v3, v5, zero, v0, v4, v2]
// [Asm]   ld v6, 40(v0)  # live: [v3, v5, zero, v0, v4, v6, v2]
// [Asm]   ld v7, 48(v0)  # live: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v25, v24, v9, v8], uses: [v2, v25, zero, v8, v24, v9, v3], upward_exposed: [v3, zero, v2], params_defs: []
// [Asm] # live_in: [v3, v5, zero, v7, v4, v6, v2], live_out: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .lp108_9_0:
// [Asm]   lw v8, 0(v2)  # live: [v3, v5, zero, v7, v8, v4, v6, v2]
// [Asm]   slliw v24, v8, 2  # live: [v3, v5, zero, v7, v4, v6, v24, v2]
// [Asm]   add v25, v3, v24  # live: [v3, v25, v5, zero, v7, v4, v6, v2]
// [Asm]   lw v9, 0(v25)  # live: [v3, v5, zero, v7, v4, v6, v9, v2]
// [Asm] # control
// [Asm]   bne v9, zero, .lp108_9_2  # live: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, s10, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v15], uses: [v5, v14, v18, zero, a0, v4, a1, v6, v15], upward_exposed: [v4, v5, v6, zero], params_defs: []
// [Asm] # live_in: [v4, v5, v6, zero], live_out: [v17]
// [Asm] # block parameters: []
// [Asm] .lp108_9_1:
// [Asm]   addi v14, v4, 1  # live: [v6, v14, v5, zero]
// [Asm]   mv s10, v5  # live: [v6, v14, v5, zero]
// [Asm]   ld v18, 0(v5)  # live: [v6, v14, v18, zero]
// [Asm]   # save_ctx2  # live: [v6, v14, v18, zero]
// [Asm]   mv a0, v14  # live: [v6, v18, zero, a0]
// [Asm]   mv a1, zero  # live: [v6, a1, v18, zero, a0]
// [Asm]   jalr v18  # live: [v6, zero, a0]
// [Asm]   mv v15, a0  # live: [v6, v15, zero]
// [Asm]   # restore_ctx2  # live: [v6, v15, zero]
// [Asm]   sw v15, 0(v6)  # live: [zero]
// [Asm] # control
// [Asm]   mv v17, zero  # live: [v17]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v17, a0], upward_exposed: [v17], params_defs: [v17]
// [Asm] # live_in: [v17], live_out: []
// [Asm] # block parameters: [v17]
// [Asm] .lp108_9_3:
// [Asm] # control
// [Asm]   mv a0, v17  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, v21, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v11, v21, a0, v7, v4, v6, v12], upward_exposed: [v4, v6, v7], params_defs: []
// [Asm] # live_in: [v2, v5, zero, v7, v4, v6, v3], live_out: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .lp108_9_2:
// [Asm]   addi v11, v4, 1  # live: [v3, v11, v5, zero, v7, v4, v6, v2]
// [Asm]   mv s10, v7  # live: [v3, v11, v5, zero, v7, v4, v6, v2]
// [Asm]   ld v21, 0(v7)  # live: [v3, v11, v5, v21, zero, v7, v4, v6, v2]
// [Asm]   # save_ctx2  # live: [v3, v11, v5, v21, zero, v7, v4, v6, v2]
// [Asm]   mv a0, v11  # live: [v3, v5, v21, zero, a0, v7, v4, v6, v2]
// [Asm]   jalr v21  # live: [v3, v5, zero, a0, v7, v4, v6, v2]
// [Asm]   mv v12, a0  # live: [v3, v5, zero, v7, v4, v6, v12, v2]
// [Asm]   # restore_ctx2  # live: [v3, v5, zero, v7, v4, v6, v12, v2]
// [Asm]   sw v12, 0(v6)  # live: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] # control
// [Asm]   j .lp108_9_0  # live: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] 
// [Asm] # leaf false
// [Asm] read_ch_until_newline_or_eof1_0:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v10, a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v2]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof1_0_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call minimbt_read_char  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   li v10, 10  # live: [v10, v2]
// [Asm]   beq v2, v10, .read_ch_until_newline_or_eof1_0_1  # live: [v2]
// [Asm] 
// [Asm] # block info: defs: [v9], uses: [v9, v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v2]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof1_0_2:
// [Asm] # control
// [Asm]   li v9, 13  # live: [v9, v2]
// [Asm]   bne v2, v9, .read_ch_until_newline_or_eof1_0_4  # live: [v2]
// [Asm] 
// [Asm] # block info: defs: [v5, v8], uses: [v8], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof1_0_3:
// [Asm] # control
// [Asm]   li v8, -1  # live: [v8]
// [Asm]   mv v5, v8  # live: [v5]
// [Asm] 
// [Asm] # block info: defs: [v6], uses: [v5], upward_exposed: [v5], params_defs: [v5]
// [Asm] # live_in: [v5], live_out: [v6]
// [Asm] # block parameters: [v5]
// [Asm] .read_ch_until_newline_or_eof1_0_5:
// [Asm] # control
// [Asm]   mv v6, v5  # live: [v6]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v6, a0], upward_exposed: [v6], params_defs: [v6]
// [Asm] # live_in: [v6], live_out: []
// [Asm] # block parameters: [v6]
// [Asm] .read_ch_until_newline_or_eof1_0_6:
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v6, v7], uses: [v7], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v6]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof1_0_1:
// [Asm] # control
// [Asm]   li v7, -1  # live: [v7]
// [Asm]   mv v6, v7  # live: [v6]
// [Asm]   j .read_ch_until_newline_or_eof1_0_6  # live: [v6]
// [Asm] 
// [Asm] # block info: defs: [v5], uses: [v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof1_0_4:
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v5]
// [Asm]   j .read_ch_until_newline_or_eof1_0_5  # live: [v5]
// [Asm] 
// [Asm] # leaf false
// [Asm] bf5_1:
// [Asm] # block info: defs: [a1, s11, fa1, fa2, ft6, a4, v27, fa6, v20, a6, ft5, ft10, v6, ft4, v5, ft9, v10, fa4, ft2, a3, v31, a7, fa7, fa3, ft3, t2, v3, t1, v16, v26, v7, ft0, ft1, v29, v8, v4, ft7, v21, a5, a0, a2, v24, s10, ft8, t3, t0, v18, fa5, v23, fa0, t4, v15, v2], uses: [v3, v5, v16, v21, v10, v26, a0, v7, a2, a1, s11, v24, v31, v18, zero, v29, v27, v23, v20, v8, v4, v6, v2], upward_exposed: [a1, s11, a0, zero], params_defs: []
// [Asm] # live_in: [a1, s11, a0, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .bf5_1_0:
// [Asm]   # save_ctx1  # live: [zero, a0, a1, s11]
// [Asm]   mv v2, a0  # live: [zero, a1, s11, v2]
// [Asm]   mv v3, a1  # live: [v2, zero, s11, v3]
// [Asm]   addi v31, s11, -4  # live: [v2, zero, v31, v3]
// [Asm]   andi v8, v31, -8  # live: [v2, zero, v8, v3]
// [Asm]   mv s11, v8  # live: [v2, zero, v8, s11, v3]
// [Asm]   sw zero, 0(v8)  # live: [v2, zero, v8, s11, v3]
// [Asm]   li v29, 1024  # live: [v2, zero, v29, v8, s11, v3]
// [Asm]   mul v10, v29, v29  # live: [v2, v10, zero, v8, s11, v3]
// [Asm]   slliw v26, v10, 2  # live: [v2, v10, zero, v26, v8, s11, v3]
// [Asm]   sub v27, s11, v26  # live: [v2, v10, zero, v27, v8, v3]
// [Asm]   andi v5, v27, -8  # live: [v2, v5, v10, zero, v8, v3]
// [Asm]   mv s11, v5  # live: [v2, v5, v10, zero, v8, s11, v3]
// [Asm]   mv a1, v10  # live: [v2, v5, zero, v8, a1, s11, v3]
// [Asm]   mv a0, v5  # live: [v2, v5, zero, a0, v8, a1, s11, v3]
// [Asm]   mv a2, zero  # live: [v2, v5, zero, a0, v8, a2, a1, s11, v3]
// [Asm]   call memseti32  # live: [v2, v5, zero, v8, s11, v3]
// [Asm]   addi v24, s11, -4  # live: [v2, v5, zero, v8, v24, v3]
// [Asm]   andi v6, v24, -8  # live: [v2, v5, zero, v8, v6, v3]
// [Asm]   mv s11, v6  # live: [v2, v5, zero, v8, v6, s11, v3]
// [Asm]   sw zero, 0(v6)  # live: [v2, v5, zero, v8, v6, s11, v3]
// [Asm]   addi v21, s11, -24  # live: [v2, v5, v21, zero, v8, v6, v3]
// [Asm]   andi v7, v21, -8  # live: [v2, v5, zero, v8, v7, v6, v3]
// [Asm]   mv s11, v7  # live: [v2, v5, zero, v8, v7, v6, s11, v3]
// [Asm]   la v23, skip21_5  # live: [v2, v5, zero, v23, v8, v7, v6, s11, v3]
// [Asm]   sd v23, 0(v7)  # live: [v2, v5, zero, v8, v7, v6, s11, v3]
// [Asm]   sd v2, 8(v7)  # live: [v2, v5, zero, v8, v7, v6, s11, v3]
// [Asm]   sd v3, 16(v7)  # live: [v2, v5, zero, v8, v7, v6, s11, v3]
// [Asm]   addi v18, s11, -56  # live: [v2, v5, v18, zero, v8, v7, v6, v3]
// [Asm]   andi v4, v18, -8  # live: [v2, v5, zero, v8, v7, v4, v6, v3]
// [Asm]   mv s11, v4  # live: [v2, v5, zero, v8, v7, v4, v6, v3]
// [Asm]   la v20, aux40_7  # live: [v2, v5, zero, v20, v8, v7, v4, v6, v3]
// [Asm]   sd v20, 0(v4)  # live: [v2, v5, zero, v8, v7, v4, v6, v3]
// [Asm]   sd v2, 8(v4)  # live: [v5, zero, v8, v7, v4, v6, v3]
// [Asm]   sd v3, 16(v4)  # live: [v5, zero, v8, v7, v4, v6]
// [Asm]   sd v8, 24(v4)  # live: [v4, v6, v5, zero, v7]
// [Asm]   sd v5, 32(v4)  # live: [v4, v6, zero, v7]
// [Asm]   sd v6, 40(v4)  # live: [v4, zero, v7]
// [Asm]   sd v7, 48(v4)  # live: [v4, zero]
// [Asm]   mv s10, v4  # live: [v4, zero]
// [Asm]   ld v16, 0(v4)  # live: [v16, zero]
// [Asm]   # save_ctx2  # live: [v16, zero]
// [Asm]   mv a0, zero  # live: [v16, zero, a0]
// [Asm]   jalr v16  # live: [zero, a0]
// [Asm]   mv v15, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] read_prog140_12:
// [Asm] # block info: defs: [v3, v0, v4, v2], uses: [v0, s10, a0, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0], live_out: [v4, v3]
// [Asm] # block parameters: []
// [Asm] .read_prog140_12_4:
// [Asm]   # save_ctx1  # live: [a0, s10]
// [Asm]   mv v0, s10  # live: [v0, a0]
// [Asm]   mv v2, a0  # live: [v0, v2]
// [Asm]   ld v3, 8(v0)  # live: [v2, v3]
// [Asm] # control
// [Asm]   mv v4, v2  # live: [v4, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v5, v15, a0], upward_exposed: [], params_defs: [v4]
// [Asm] # live_in: [v4, v3], live_out: [v4, v5, v3]
// [Asm] # block parameters: [v4]
// [Asm] .read_prog140_12_0:
// [Asm]   # save_ctx2  # live: [v4, v3]
// [Asm]   call read_ch_until_newline_or_eof1_0  # live: [v4, a0, v3]
// [Asm]   mv v5, a0  # live: [v4, v5, v3]
// [Asm]   # restore_ctx2  # live: [v4, v5, v3]
// [Asm] # control
// [Asm]   li v15, -1  # live: [v4, v5, v15, v3]
// [Asm]   beq v5, v15, .read_prog140_12_1  # live: [v4, v5, v3]
// [Asm] 
// [Asm] # block info: defs: [v4, v14, v13, v8], uses: [v8, v4, v5, v14, v13, v3], upward_exposed: [v4, v5, v3], params_defs: []
// [Asm] # live_in: [v4, v5, v3], live_out: [v4, v3]
// [Asm] # block parameters: []
// [Asm] .read_prog140_12_2:
// [Asm]   slliw v13, v4, 2  # live: [v4, v5, v13, v3]
// [Asm]   add v14, v3, v13  # live: [v4, v5, v14, v3]
// [Asm]   sw v5, 0(v14)  # live: [v4, v3]
// [Asm]   addi v8, v4, 1  # live: [v8, v3]
// [Asm] # control
// [Asm]   mv v4, v8  # live: [v4, v3]
// [Asm]   j .read_prog140_12_0  # live: [v4, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v4, a1, a0, v9, v3], upward_exposed: [v4, v3], params_defs: []
// [Asm] # live_in: [v4, v3], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .read_prog140_12_1:
// [Asm]   # save_ctx2  # live: [v4, v3]
// [Asm]   mv a0, v4  # live: [a0, v3]
// [Asm]   mv a1, v3  # live: [a1, a0]
// [Asm]   call bf5_1  # live: [a0]
// [Asm]   mv v9, a0  # live: [v9]
// [Asm]   # restore_ctx2  # live: [v9]
// [Asm] # control
// [Asm]   mv v10, v9  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .read_prog140_12_3:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] aux40_7:
// [Asm] # block info: defs: [v2, v5, v10, v7, v8, v0, v4, v6, v3], uses: [v0, s10, a0, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s11, s10, a0], live_out: [v5, v10, v8, v7, v0, v4, v6, s11, v3]
// [Asm] # block parameters: []
// [Asm] .aux40_7_28:
// [Asm]   # save_ctx1  # live: [a0, s11, s10]
// [Asm]   mv v0, s10  # live: [a0, v0, s11]
// [Asm]   mv v2, a0  # live: [v0, s11, v2]
// [Asm]   lw v3, 8(v0)  # live: [v2, v0, s11, v3]
// [Asm]   ld v4, 16(v0)  # live: [v2, v0, v4, s11, v3]
// [Asm]   ld v5, 24(v0)  # live: [v2, v5, v0, v4, s11, v3]
// [Asm]   ld v6, 32(v0)  # live: [v2, v5, v0, v4, v6, s11, v3]
// [Asm]   ld v7, 40(v0)  # live: [v2, v5, v7, v0, v4, v6, s11, v3]
// [Asm]   ld v8, 48(v0)  # live: [v2, v5, v7, v8, v0, v4, v6, s11, v3]
// [Asm] # control
// [Asm]   mv v10, v2  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v10, v3], upward_exposed: [v10, v3], params_defs: [v10]
// [Asm] # live_in: [v5, v10, v8, v7, v0, v4, v6, s11, v3], live_out: [v5, v10, v8, v7, v0, v4, v6, s11, v3]
// [Asm] # block parameters: [v10]
// [Asm] .aux40_7_0:
// [Asm] # control
// [Asm]   bge v10, v3, .aux40_7_1  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm] 
// [Asm] # block info: defs: [v114, v112, v12, v113], uses: [v4, v114, v112, v12, v10, v113], upward_exposed: [v4, v10], params_defs: []
// [Asm] # live_in: [v5, v10, v8, v7, v0, v4, v6, s11, v3], live_out: [v5, v10, v8, v7, v0, v4, v6, v12, s11, v3]
// [Asm] # block parameters: []
// [Asm] .aux40_7_2:
// [Asm]   slliw v113, v10, 2  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v113, v3]
// [Asm]   add v114, v4, v113  # live: [v5, v10, v7, v8, v0, v4, v114, v6, s11, v3]
// [Asm]   lw v12, 0(v114)  # live: [v5, v10, v7, v8, v0, v4, v6, v12, s11, v3]
// [Asm] # control
// [Asm]   li v112, 62  # live: [v112, v5, v10, v7, v8, v0, v4, v6, v12, s11, v3]
// [Asm]   beq v12, v112, .aux40_7_3  # live: [v5, v10, v7, v8, v0, v4, v6, v12, s11, v3]
// [Asm] 
// [Asm] # block info: defs: [v111], uses: [v111, v12], upward_exposed: [v12], params_defs: []
// [Asm] # live_in: [v5, v10, v8, v7, v0, v4, v6, v12, s11, v3], live_out: [v5, v10, v8, v7, v0, v4, v6, v12, s11, v3]
// [Asm] # block parameters: []
// [Asm] .aux40_7_4:
// [Asm] # control
// [Asm]   li v111, 60  # live: [v5, v10, v7, v8, v0, v4, v6, v111, s11, v12, v3]
// [Asm]   beq v12, v111, .aux40_7_5  # live: [v5, v10, v7, v8, v0, v4, v6, v12, s11, v3]
// [Asm] 
// [Asm] # block info: defs: [v110], uses: [v12, v110], upward_exposed: [v12], params_defs: []
// [Asm] # live_in: [v5, v10, v8, v7, v0, v4, v6, v12, s11, v3], live_out: [v5, v10, v8, v7, v0, v4, v6, v12, s11, v3]
// [Asm] # block parameters: []
// [Asm] .aux40_7_6:
// [Asm] # control
// [Asm]   li v110, 43  # live: [v5, v10, v110, v7, v8, v0, v4, v6, v12, s11, v3]
// [Asm]   beq v12, v110, .aux40_7_7  # live: [v5, v10, v7, v8, v0, v4, v6, v12, s11, v3]
// [Asm] 
// [Asm] # block info: defs: [v109], uses: [v109, v12], upward_exposed: [v12], params_defs: []
// [Asm] # live_in: [v5, v10, v8, v7, v0, v4, v6, v12, s11, v3], live_out: [v5, v10, v8, v7, v0, v4, v6, v12, s11, v3]
// [Asm] # block parameters: []
// [Asm] .aux40_7_8:
// [Asm] # control
// [Asm]   li v109, 45  # live: [v109, v5, v10, v7, v8, v0, v4, v6, v12, s11, v3]
// [Asm]   beq v12, v109, .aux40_7_9  # live: [v5, v10, v7, v8, v0, v4, v6, v12, s11, v3]
// [Asm] 
// [Asm] # block info: defs: [v108], uses: [v108, v12], upward_exposed: [v12], params_defs: []
// [Asm] # live_in: [v5, v10, v8, v7, v0, v4, v6, s11, v12, v3], live_out: [v5, v10, v7, v8, v0, v4, v6, s11, v12, v3]
// [Asm] # block parameters: []
// [Asm] .aux40_7_10:
// [Asm] # control
// [Asm]   li v108, 46  # live: [v5, v10, v8, v7, v0, v4, v6, v108, v12, s11, v3]
// [Asm]   beq v12, v108, .aux40_7_11  # live: [v5, v10, v8, v7, v0, v4, v6, s11, v12, v3]
// [Asm] 
// [Asm] # block info: defs: [v107], uses: [v107, v12], upward_exposed: [v12], params_defs: []
// [Asm] # live_in: [v5, v10, v7, v8, v0, v4, v6, s11, v12, v3], live_out: [v5, v10, v8, v7, v0, v4, v6, s11, v12, v3]
// [Asm] # block parameters: []
// [Asm] .aux40_7_12:
// [Asm] # control
// [Asm]   li v107, 44  # live: [v5, v10, v7, v8, v0, v107, v4, v6, v12, s11, v3]
// [Asm]   beq v12, v107, .aux40_7_13  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v12, v3]
// [Asm] 
// [Asm] # block info: defs: [v106], uses: [v106, v12], upward_exposed: [v12], params_defs: []
// [Asm] # live_in: [v5, v10, v7, v8, v0, v4, v6, s11, v12, v3], live_out: [v5, v10, v8, v7, v0, v4, v6, v12, s11, v3]
// [Asm] # block parameters: []
// [Asm] .aux40_7_14:
// [Asm] # control
// [Asm]   li v106, 91  # live: [v106, v5, v10, v7, v8, v0, v4, v6, v12, s11, v3]
// [Asm]   beq v12, v106, .aux40_7_15  # live: [v5, v10, v7, v8, v0, v4, v6, v12, s11, v3]
// [Asm] 
// [Asm] # block info: defs: [v105], uses: [v105, v12], upward_exposed: [v12], params_defs: []
// [Asm] # live_in: [v12, v10], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .aux40_7_16:
// [Asm] # control
// [Asm]   li v105, 93  # live: [v105, v10, v12]
// [Asm]   bne v12, v105, .aux40_7_18  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [v21], uses: [v10], upward_exposed: [v10], params_defs: []
// [Asm] # live_in: [v10], live_out: [v21]
// [Asm] # block parameters: []
// [Asm] .aux40_7_17:
// [Asm] # control
// [Asm]   mv v21, v10  # live: [v21]
// [Asm] 
// [Asm] # block info: defs: [v22], uses: [v21], upward_exposed: [v21], params_defs: [v21]
// [Asm] # live_in: [v21], live_out: [v22]
// [Asm] # block parameters: [v21]
// [Asm] .aux40_7_19:
// [Asm] # control
// [Asm]   mv v22, v21  # live: [v22]
// [Asm] 
// [Asm] # block info: defs: [v23], uses: [v22], upward_exposed: [v22], params_defs: [v22]
// [Asm] # live_in: [v22], live_out: [v23]
// [Asm] # block parameters: [v22]
// [Asm] .aux40_7_20:
// [Asm] # control
// [Asm]   mv v23, v22  # live: [v23]
// [Asm] 
// [Asm] # block info: defs: [v24], uses: [v23], upward_exposed: [v23], params_defs: [v23]
// [Asm] # live_in: [v23], live_out: [v24]
// [Asm] # block parameters: [v23]
// [Asm] .aux40_7_21:
// [Asm] # control
// [Asm]   mv v24, v23  # live: [v24]
// [Asm] 
// [Asm] # block info: defs: [v25], uses: [v24], upward_exposed: [v24], params_defs: [v24]
// [Asm] # live_in: [v24], live_out: [v25]
// [Asm] # block parameters: [v24]
// [Asm] .aux40_7_22:
// [Asm] # control
// [Asm]   mv v25, v24  # live: [v25]
// [Asm] 
// [Asm] # block info: defs: [v26], uses: [v25], upward_exposed: [v25], params_defs: [v25]
// [Asm] # live_in: [v25], live_out: [v26]
// [Asm] # block parameters: [v25]
// [Asm] .aux40_7_23:
// [Asm] # control
// [Asm]   mv v26, v25  # live: [v26]
// [Asm] 
// [Asm] # block info: defs: [v27], uses: [v26], upward_exposed: [v26], params_defs: [v26]
// [Asm] # live_in: [v26], live_out: [v27]
// [Asm] # block parameters: [v26]
// [Asm] .aux40_7_24:
// [Asm] # control
// [Asm]   mv v27, v26  # live: [v27]
// [Asm] 
// [Asm] # block info: defs: [v28], uses: [v27], upward_exposed: [v27], params_defs: [v27]
// [Asm] # live_in: [v27], live_out: [v28]
// [Asm] # block parameters: [v27]
// [Asm] .aux40_7_25:
// [Asm] # control
// [Asm]   mv v28, v27  # live: [v28]
// [Asm] 
// [Asm] # block info: defs: [v62], uses: [v28], upward_exposed: [v28], params_defs: [v28]
// [Asm] # live_in: [v28], live_out: [v62]
// [Asm] # block parameters: [v28]
// [Asm] .aux40_7_26:
// [Asm] # control
// [Asm]   mv v62, v28  # live: [v62]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v62, a0], upward_exposed: [v62], params_defs: [v62]
// [Asm] # live_in: [v62], live_out: []
// [Asm] # block parameters: [v62]
// [Asm] .aux40_7_27:
// [Asm] # control
// [Asm]   mv a0, v62  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v62], uses: [v10], upward_exposed: [v10], params_defs: []
// [Asm] # live_in: [v10], live_out: [v62]
// [Asm] # block parameters: []
// [Asm] .aux40_7_1:
// [Asm] # control
// [Asm]   mv v62, v10  # live: [v62]
// [Asm]   j .aux40_7_27  # live: [v62]
// [Asm] 
// [Asm] # block info: defs: [v59, v58, v61, v10], uses: [v59, v5, v58, v10, v61], upward_exposed: [v5, v10], params_defs: []
// [Asm] # live_in: [v5, v10, v8, v7, v0, v4, v6, s11, v3], live_out: [v5, v10, v8, v7, v0, v4, v6, s11, v3]
// [Asm] # block parameters: []
// [Asm] .aux40_7_3:
// [Asm]   lw v58, 0(v5)  # live: [v5, v58, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm]   addi v59, v58, 1  # live: [v5, v10, v7, v8, v0, v4, v59, v6, s11, v3]
// [Asm]   sw v59, 0(v5)  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm]   addi v61, v10, 1  # live: [v5, v7, v8, v0, v4, v6, s11, v61, v3]
// [Asm] # control
// [Asm]   mv v10, v61  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm]   j .aux40_7_0  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm] 
// [Asm] # block info: defs: [v57, v10, v54, v55], uses: [v5, v10, v57, v54, v55], upward_exposed: [v5, v10], params_defs: []
// [Asm] # live_in: [v5, v10, v8, v7, v0, v4, v6, s11, v3], live_out: [v5, v10, v8, v7, v0, v4, v6, s11, v3]
// [Asm] # block parameters: []
// [Asm] .aux40_7_5:
// [Asm]   lw v54, 0(v5)  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v54, v3]
// [Asm]   addi v55, v54, -1  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v55, v3]
// [Asm]   sw v55, 0(v5)  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm]   addi v57, v10, 1  # live: [v5, v7, v8, v0, v4, v6, s11, v57, v3]
// [Asm] # control
// [Asm]   mv v10, v57  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm]   j .aux40_7_0  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm] 
// [Asm] # block info: defs: [v73, v71, v48, v49, v53, v10, v50, v74, v70, v51], uses: [v51, v5, v71, v48, v49, v10, v53, v50, v6, v74, v70, v73], upward_exposed: [v5, v6, v10], params_defs: []
// [Asm] # live_in: [v5, v10, v8, v7, v0, v4, v6, s11, v3], live_out: [v5, v10, v8, v7, v0, v4, v6, s11, v3]
// [Asm] # block parameters: []
// [Asm] .aux40_7_7:
// [Asm]   lw v48, 0(v5)  # live: [v5, v10, v48, v7, v8, v0, v4, v6, s11, v3]
// [Asm]   lw v49, 0(v5)  # live: [v5, v10, v48, v49, v7, v8, v0, v4, v6, s11, v3]
// [Asm]   slliw v73, v49, 2  # live: [v73, v5, v10, v48, v7, v8, v0, v4, v6, s11, v3]
// [Asm]   add v74, v6, v73  # live: [v5, v10, v48, v7, v8, v0, v4, v6, v74, s11, v3]
// [Asm]   lw v50, 0(v74)  # live: [v5, v10, v48, v50, v7, v8, v0, v4, v6, s11, v3]
// [Asm]   addi v51, v50, 1  # live: [v51, v5, v10, v48, v7, v8, v0, v4, v6, s11, v3]
// [Asm]   slliw v70, v48, 2  # live: [v51, v5, v10, v7, v8, v0, v4, v6, v70, s11, v3]
// [Asm]   add v71, v6, v70  # live: [v51, v5, v71, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm]   sw v51, 0(v71)  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm]   addi v53, v10, 1  # live: [v5, v53, v7, v8, v0, v4, v6, s11, v3]
// [Asm] # control
// [Asm]   mv v10, v53  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm]   j .aux40_7_0  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm] 
// [Asm] # block info: defs: [v82, v10, v42, v79, v45, v80, v47, v43, v83, v44], uses: [v5, v82, v10, v42, v79, v45, v80, v47, v6, v43, v83, v44], upward_exposed: [v5, v6, v10], params_defs: []
// [Asm] # live_in: [v5, v10, v8, v7, v0, v4, v6, s11, v3], live_out: [v5, v10, v8, v7, v0, v4, v6, s11, v3]
// [Asm] # block parameters: []
// [Asm] .aux40_7_9:
// [Asm]   lw v42, 0(v5)  # live: [v5, v10, v42, v7, v8, v0, v4, v6, s11, v3]
// [Asm]   lw v43, 0(v5)  # live: [v5, v10, v42, v7, v8, v0, v4, v6, v43, s11, v3]
// [Asm]   slliw v82, v43, 2  # live: [v5, v82, v10, v42, v7, v8, v0, v4, v6, s11, v3]
// [Asm]   add v83, v6, v82  # live: [v5, v10, v42, v7, v8, v0, v4, v6, s11, v83, v3]
// [Asm]   lw v44, 0(v83)  # live: [v5, v10, v42, v7, v8, v0, v4, v6, s11, v44, v3]
// [Asm]   addi v45, v44, -1  # live: [v5, v10, v42, v7, v8, v45, v0, v4, v6, s11, v3]
// [Asm]   slliw v79, v42, 2  # live: [v5, v10, v79, v7, v8, v45, v0, v4, v6, s11, v3]
// [Asm]   add v80, v6, v79  # live: [v5, v10, v7, v8, v45, v0, v4, v80, v6, s11, v3]
// [Asm]   sw v45, 0(v80)  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm]   addi v47, v10, 1  # live: [v5, v7, v8, v0, v4, v47, v6, s11, v3]
// [Asm] # control
// [Asm]   mv v10, v47  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm]   j .aux40_7_0  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, v41, a1, fa1, fa2, ft6, a4, fa6, a6, v90, ft5, ft10, v89, ft7, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, v39, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, v38, t4, t2, v40], uses: [v5, v10, a0, v38, v90, v41, v6, v89, v39], upward_exposed: [v5, v6, v10], params_defs: []
// [Asm] # live_in: [v5, v10, v8, v7, v0, v4, v6, s11, v3], live_out: [v5, v10, v8, v7, v0, v4, v6, s11, v3]
// [Asm] # block parameters: []
// [Asm] .aux40_7_11:
// [Asm]   lw v38, 0(v5)  # live: [v5, v10, v7, v8, v0, v4, v38, v6, s11, v3]
// [Asm]   slliw v89, v38, 2  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v89, v3]
// [Asm]   add v90, v6, v89  # live: [v5, v10, v7, v8, v0, v4, v90, v6, s11, v3]
// [Asm]   lw v39, 0(v90)  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v39, v3]
// [Asm]   # save_ctx2  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v39, v3]
// [Asm]   mv a0, v39  # live: [v5, v10, a0, v7, v8, v0, v4, v6, s11, v3]
// [Asm]   call minimbt_print_char  # live: [v5, v10, a0, v7, v8, v0, v4, v6, s11, v3]
// [Asm]   mv v40, a0  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm]   # restore_ctx2  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm]   addi v41, v10, 1  # live: [v5, v7, v8, v0, v4, v41, v6, s11, v3]
// [Asm] # control
// [Asm]   mv v10, v41  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm]   j .aux40_7_0  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v95, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v34, ft7, ft4, ft9, v10, a5, fa4, a0, ft2, a2, v37, a3, ft8, t3, a7, fa7, t0, v94, fa5, fa3, ft3, v35, fa0, t4, t2], uses: [v94, v5, v10, a0, v35, v95, v37, v6, v34], upward_exposed: [v5, v6, v10], params_defs: []
// [Asm] # live_in: [v5, v10, v8, v7, v0, v4, v6, s11, v3], live_out: [v5, v10, v8, v7, v0, v4, v6, s11, v3]
// [Asm] # block parameters: []
// [Asm] .aux40_7_13:
// [Asm]   lw v34, 0(v5)  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v34, v3]
// [Asm]   # save_ctx2  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v34, v3]
// [Asm]   call read_ch_until_newline_or_eof1_0  # live: [v5, v10, a0, v7, v8, v0, v4, v6, s11, v34, v3]
// [Asm]   mv v35, a0  # live: [v5, v10, v7, v8, v35, v0, v4, v6, s11, v34, v3]
// [Asm]   # restore_ctx2  # live: [v5, v10, v7, v8, v35, v0, v4, v6, s11, v34, v3]
// [Asm]   slliw v94, v34, 2  # live: [v94, v5, v10, v7, v8, v35, v0, v4, v6, s11, v3]
// [Asm]   add v95, v6, v94  # live: [v5, v10, v7, v8, v35, v0, v95, v4, v6, s11, v3]
// [Asm]   sw v35, 0(v95)  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm]   addi v37, v10, 1  # live: [v5, v7, v8, v0, v4, v37, v6, s11, v3]
// [Asm] # control
// [Asm]   mv v10, v37  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm]   j .aux40_7_0  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, v32, a1, s11, fa1, v33, fa2, ft6, a4, fa6, a6, ft5, ft10, v102, ft7, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, v31, v9, s10, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, v104, t4, t2, v100], uses: [v5, v10, a0, v7, v0, v32, s11, v9, v33, v8, v104, v6, v102, v100], upward_exposed: [v5, v10, v8, v7, v0, v6, s11], params_defs: []
// [Asm] # live_in: [v5, v10, v7, v8, v0, v4, v6, s11, v3], live_out: [v5, v10, v8, v7, v0, v4, v6, s11, v3]
// [Asm] # block parameters: []
// [Asm] .aux40_7_15:
// [Asm]   sw v10, 0(v7)  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm]   addi v102, s11, -56  # live: [v5, v10, v7, v8, v0, v4, v6, v102, v3]
// [Asm]   andi v9, v102, -8  # live: [v5, v10, v7, v8, v0, v4, v6, v9, v3]
// [Asm]   mv s11, v9  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v9, v3]
// [Asm]   la v104, lp108_9  # live: [v5, v10, v7, v8, v0, v104, v4, v6, s11, v9, v3]
// [Asm]   sd v104, 0(v9)  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v9, v3]
// [Asm]   sd v5, 8(v9)  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v9, v3]
// [Asm]   sd v6, 16(v9)  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v9, v3]
// [Asm]   sd v10, 24(v9)  # live: [v5, v7, v8, v0, v4, v6, s11, v9, v3]
// [Asm]   sd v8, 32(v9)  # live: [v5, v7, v8, v0, v4, v6, s11, v9, v3]
// [Asm]   sd v7, 40(v9)  # live: [v5, v7, v8, v0, v4, v6, s11, v9, v3]
// [Asm]   sd v0, 48(v9)  # live: [v5, v7, v8, v0, v4, v6, s11, v9, v3]
// [Asm]   mv s10, v9  # live: [v5, v7, v8, v0, v4, v6, s11, v9, v3]
// [Asm]   ld v100, 0(v9)  # live: [v5, v7, v8, v0, v4, v6, s11, v100, v3]
// [Asm]   # save_ctx2  # live: [v5, v7, v8, v0, v4, v6, s11, v100, v3]
// [Asm]   jalr v100  # live: [v5, a0, v7, v8, v0, v4, v6, s11, v3]
// [Asm]   mv v31, a0  # live: [v5, v7, v8, v0, v4, v6, s11, v3]
// [Asm]   # restore_ctx2  # live: [v5, v7, v8, v0, v4, v6, s11, v3]
// [Asm]   lw v32, 0(v7)  # live: [v5, v7, v8, v0, v4, v32, v6, s11, v3]
// [Asm]   addi v33, v32, 1  # live: [v5, v7, v8, v0, v4, v6, s11, v33, v3]
// [Asm] # control
// [Asm]   mv v10, v33  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm]   j .aux40_7_0  # live: [v5, v10, v7, v8, v0, v4, v6, s11, v3]
// [Asm] 
// [Asm] # block info: defs: [v21], uses: [v10], upward_exposed: [v10], params_defs: []
// [Asm] # live_in: [v10], live_out: [v21]
// [Asm] # block parameters: []
// [Asm] .aux40_7_18:
// [Asm] # control
// [Asm]   mv v21, v10  # live: [v21]
// [Asm]   j .aux40_7_19  # live: [v21]
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_14  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("read_ch_until_newline_or_eof", Int), args: [], body: Let(("c", Var({val: Some(Int)})), App(Var("read_char"), []), If(Eq(Var("c"), Int(10)), Neg(Int(1), kind=Some(Int)), If(Eq(Var("c"), Int(13)), Neg(Int(1), kind=Some(Int)), Var("c"))))}, LetRec({name: ("bf", Unit), args: [("len", Int), ("prog", Array(Int))], body: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), []))))
// [Knf] build_knf: Let(("c", Var({val: Some(Int)})), App(Var("read_char"), []), If(Eq(Var("c"), Int(10)), Neg(Int(1), kind=Some(Int)), If(Eq(Var("c"), Int(13)), Neg(Int(1), kind=Some(Int)), Var("c"))))
// [Knf] build_knf: App(Var("read_char"), [])
// [Knf] build_knf: If(Eq(Var("c"), Int(10)), Neg(Int(1), kind=Some(Int)), If(Eq(Var("c"), Int(13)), Neg(Int(1), kind=Some(Int)), Var("c")))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Neg(Int(1), kind=Some(Int))
// [Knf] build_knf: If(Eq(Var("c"), Int(13)), Neg(Int(1), kind=Some(Int)), Var("c"))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(13)
// [Knf] build_knf: Neg(Int(1), kind=Some(Int))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: LetRec({name: ("bf", Unit), args: [("len", Int), ("prog", Array(Int))], body: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), [])))
// [Knf] build_knf: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit)))))
// [Knf] build_knf: Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0))
// [Knf] build_knf: Prim(Int(1024), Int(1024), Mul, kind=Some(Int))
// [Knf] build_knf: Int(1024)
// [Knf] build_knf: Int(1024)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit)))
// [Knf] build_knf: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")]))))
// [Knf] build_knf: Get(Var("prog"), Var("pc"))
// [Knf] build_knf: Var("prog")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(91)
// [Knf] build_knf: App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("skip")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Prim(Var("level"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("level")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")]))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(93)
// [Knf] build_knf: If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))]))
// [Knf] build_knf: Var("level")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("skip")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Prim(Var("level"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("level")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])
// [Knf] build_knf: Var("skip")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("level")
// [Knf] build_knf: LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))
// [Knf] build_knf: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc"))))))))))
// [Knf] build_knf: Get(Var("prog"), Var("pc"))
// [Knf] build_knf: Var("prog")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(62)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc"))))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(60)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(43)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("cells"), Get(Var("ptr"), Int(0)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc"))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(45)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("cells"), Get(Var("ptr"), Int(0)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(46)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))])
// [Knf] build_knf: Get(Var("cells"), Get(Var("ptr"), Int(0)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc"))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(44)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), []))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("read_ch_until_newline_or_eof"), [])
// [Knf] build_knf: Var("read_ch_until_newline_or_eof")
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(91)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: Put(Var("next_pc"), Int(0), Var("pc"))
// [Knf] build_knf: Var("next_pc")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))
// [Knf] build_knf: Get(Var("cells"), Get(Var("ptr"), Int(0)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit)
// [Knf] build_knf: Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)]))
// [Knf] build_knf: Var("next_pc")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])
// [Knf] build_knf: Var("skip")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), []))
// [Knf] build_knf: Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Var("next_pc")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("lp"), [])
// [Knf] build_knf: Var("lp")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("lp"), [])
// [Knf] build_knf: Var("lp")
// [Knf] build_knf: App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("next_pc"), Int(0))
// [Knf] build_knf: Var("next_pc")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc"))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(93)
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit)
// [Knf] build_knf: App(Var("aux"), [Int(0)])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))
// [Knf] build_knf: Int(1024)
// [Knf] build_knf: Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit)))
// [Knf] build_knf: Array(Var("len"), Int(0))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))
// [Knf] build_knf: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: App(Var("read_ch_until_newline_or_eof"), [])
// [Knf] build_knf: Var("read_ch_until_newline_or_eof")
// [Knf] build_knf: If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Neg(Int(1), kind=Some(Int))
// [Knf] build_knf: App(Var("bf"), [Var("i"), Var("prog")])
// [Knf] build_knf: Var("bf")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("prog")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("prog"), Var("i"), Var("x"))
// [Knf] build_knf: Var("prog")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("read_prog")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit)
// [Knf] build_knf: App(Var("read_prog"), [Int(0)])
// [Knf] build_knf: Var("read_prog")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memseti32
// [Main]   .type memseti32, @function
// [Main] memseti32:
// [Main]   blez a1, .memseti32_b1
// [Main]   slli a1, a1, 2
// [Main]   add a1, a1, a0
// [Main] .memseti32_b0:
// [Main]   sw a2, 0(a0)
// [Main]   addi a0, a0, 4
// [Main]   bne a0, a1, .memseti32_b0
// [Main] .memseti32_b1:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl skip21_5
// [Main]   .type skip21_5, @function
// [Main] # leaf true
// [Main] skip21_5:
// [Main] .skip21_5_13:
// [Main]   mv a2, s10
// [Main]   mv a3, a1
// [Main]   lw a1, 8(a2)
// [Main]   ld a2, 16(a2)
// [Main] 
// [Main] .skip21_5_0:
// [Main]   bge a0, a1, .skip21_5_1
// [Main] 
// [Main] .skip21_5_2:
// [Main]   slliw a4, a0, 2
// [Main]   add a4, a2, a4
// [Main]   lw a5, 0(a4)
// [Main]   li a4, 91
// [Main]   beq a5, a4, .skip21_5_3
// [Main] 
// [Main] .skip21_5_4:
// [Main]   li a4, 93
// [Main]   bne a5, a4, .skip21_5_6
// [Main] 
// [Main] .skip21_5_5:
// [Main]   beq a3, zero, .skip21_5_7
// [Main] 
// [Main] .skip21_5_8:
// [Main]   addi a0, a0, 1
// [Main]   addi a3, a3, -1
// [Main]   j .skip21_5_0
// [Main] 
// [Main] .skip21_5_1:
// [Main] 
// [Main] .skip21_5_12:
// [Main]   ret
// [Main] 
// [Main] .skip21_5_3:
// [Main]   addi a0, a0, 1
// [Main]   addi a3, a3, 1
// [Main]   j .skip21_5_0
// [Main] 
// [Main] .skip21_5_6:
// [Main]   addi a0, a0, 1
// [Main]   j .skip21_5_0
// [Main] 
// [Main] .skip21_5_7:
// [Main] 
// [Main] .skip21_5_9:
// [Main] 
// [Main] .skip21_5_10:
// [Main] 
// [Main] .skip21_5_11:
// [Main]   j .skip21_5_12
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main136_2
// [Main]   .type main136_2, @function
// [Main] # leaf false
// [Main] main136_2:
// [Main] .main136_2_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   li a0, 4096
// [Main]   sub a0, s11, a0
// [Main]   andi s0, a0, -8
// [Main]   mv s11, s0
// [Main]   li a0, 1024
// [Main]   mv a1, a0
// [Main]   mv a0, s0
// [Main]   mv a2, zero
// [Main]   call memseti32
// [Main]   addi a0, s11, -16
// [Main]   andi a0, a0, -8
// [Main]   mv s11, a0
// [Main]   la a1, read_prog140_12
// [Main]   sd a1, 0(a0)
// [Main]   sd s0, 8(a0)
// [Main]   mv s10, a0
// [Main]   ld a1, 0(a0)
// [Main]   mv a0, zero
// [Main]   jalr a1
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_14
// [Main]   .type T$start_14, @function
// [Main] # leaf false
// [Main] T$start_14:
// [Main] .T$start_14_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main136_2
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl lp108_9
// [Main]   .type lp108_9, @function
// [Main] # leaf false
// [Main] lp108_9:
// [Main] .lp108_9_4:
// [Main]   addi sp, sp, -64
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   mv a0, s10
// [Main]   ld s5, 8(a0)
// [Main]   ld s0, 16(a0)
// [Main]   lw s3, 24(a0)
// [Main]   ld s1, 32(a0)
// [Main]   ld s4, 40(a0)
// [Main]   ld s2, 48(a0)
// [Main] 
// [Main] .lp108_9_0:
// [Main]   lw a0, 0(s5)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s0, a0
// [Main]   lw a0, 0(a0)
// [Main]   bne a0, zero, .lp108_9_2
// [Main] 
// [Main] .lp108_9_1:
// [Main]   addi a0, s3, 1
// [Main]   mv s10, s1
// [Main]   ld a2, 0(s1)
// [Main]   mv a1, zero
// [Main]   jalr a2
// [Main]   sw a0, 0(s4)
// [Main]   mv a0, zero
// [Main] 
// [Main] .lp108_9_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   addi sp, sp, 64
// [Main]   ret
// [Main] 
// [Main] .lp108_9_2:
// [Main]   addi a0, s3, 1
// [Main]   mv s10, s2
// [Main]   ld a1, 0(s2)
// [Main]   jalr a1
// [Main]   sw a0, 0(s4)
// [Main]   j .lp108_9_0
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl read_ch_until_newline_or_eof1_0
// [Main]   .type read_ch_until_newline_or_eof1_0, @function
// [Main] # leaf false
// [Main] read_ch_until_newline_or_eof1_0:
// [Main] .read_ch_until_newline_or_eof1_0_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call minimbt_read_char
// [Main]   li a1, 10
// [Main]   beq a0, a1, .read_ch_until_newline_or_eof1_0_1
// [Main] 
// [Main] .read_ch_until_newline_or_eof1_0_2:
// [Main]   li a1, 13
// [Main]   bne a0, a1, .read_ch_until_newline_or_eof1_0_4
// [Main] 
// [Main] .read_ch_until_newline_or_eof1_0_3:
// [Main]   li a0, -1
// [Main] 
// [Main] .read_ch_until_newline_or_eof1_0_5:
// [Main] 
// [Main] .read_ch_until_newline_or_eof1_0_6:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .read_ch_until_newline_or_eof1_0_1:
// [Main]   li a0, -1
// [Main]   j .read_ch_until_newline_or_eof1_0_6
// [Main] 
// [Main] .read_ch_until_newline_or_eof1_0_4:
// [Main]   j .read_ch_until_newline_or_eof1_0_5
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl bf5_1
// [Main]   .type bf5_1, @function
// [Main] # leaf false
// [Main] bf5_1:
// [Main] .bf5_1_0:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   addi a0, s11, -4
// [Main]   andi s2, a0, -8
// [Main]   mv s11, s2
// [Main]   sw zero, 0(s2)
// [Main]   li a0, 1024
// [Main]   mul a0, a0, a0
// [Main]   slliw a1, a0, 2
// [Main]   sub a1, s11, a1
// [Main]   andi s3, a1, -8
// [Main]   mv s11, s3
// [Main]   mv a1, a0
// [Main]   mv a0, s3
// [Main]   mv a2, zero
// [Main]   call memseti32
// [Main]   addi a0, s11, -4
// [Main]   andi a0, a0, -8
// [Main]   mv s11, a0
// [Main]   sw zero, 0(a0)
// [Main]   addi a1, s11, -24
// [Main]   andi a1, a1, -8
// [Main]   mv s11, a1
// [Main]   la a2, skip21_5
// [Main]   sd a2, 0(a1)
// [Main]   sd s0, 8(a1)
// [Main]   sd s1, 16(a1)
// [Main]   addi a2, s11, -56
// [Main]   andi a2, a2, -8
// [Main]   mv s11, a2
// [Main]   la a3, aux40_7
// [Main]   sd a3, 0(a2)
// [Main]   sd s0, 8(a2)
// [Main]   sd s1, 16(a2)
// [Main]   sd s2, 24(a2)
// [Main]   sd s3, 32(a2)
// [Main]   sd a0, 40(a2)
// [Main]   sd a1, 48(a2)
// [Main]   mv s10, a2
// [Main]   ld a1, 0(a2)
// [Main]   mv a0, zero
// [Main]   jalr a1
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl read_prog140_12
// [Main]   .type read_prog140_12, @function
// [Main] # leaf false
// [Main] read_prog140_12:
// [Main] .read_prog140_12_4:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   mv a1, s10
// [Main]   ld s1, 8(a1)
// [Main]   mv s0, a0
// [Main] 
// [Main] .read_prog140_12_0:
// [Main]   call read_ch_until_newline_or_eof1_0
// [Main]   li a1, -1
// [Main]   beq a0, a1, .read_prog140_12_1
// [Main] 
// [Main] .read_prog140_12_2:
// [Main]   slliw a1, s0, 2
// [Main]   add a1, s1, a1
// [Main]   sw a0, 0(a1)
// [Main]   addi a0, s0, 1
// [Main]   mv s0, a0
// [Main]   j .read_prog140_12_0
// [Main] 
// [Main] .read_prog140_12_1:
// [Main]   mv a0, s0
// [Main]   mv a1, s1
// [Main]   call bf5_1
// [Main] 
// [Main] .read_prog140_12_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux40_7
// [Main]   .type aux40_7, @function
// [Main] # leaf false
// [Main] aux40_7:
// [Main] .aux40_7_28:
// [Main]   addi sp, sp, -80
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   sd s6, 56(sp)
// [Main]   sd s7, 64(sp)
// [Main]   sd s8, 72(sp)
// [Main]   mv s4, s10
// [Main]   lw s7, 8(s4)
// [Main]   ld s5, 16(s4)
// [Main]   ld s0, 24(s4)
// [Main]   ld s6, 32(s4)
// [Main]   ld s2, 40(s4)
// [Main]   ld s3, 48(s4)
// [Main]   mv s1, a0
// [Main] 
// [Main] .aux40_7_0:
// [Main]   bge s1, s7, .aux40_7_1
// [Main] 
// [Main] .aux40_7_2:
// [Main]   slliw a0, s1, 2
// [Main]   add a0, s5, a0
// [Main]   lw a1, 0(a0)
// [Main]   li a0, 62
// [Main]   beq a1, a0, .aux40_7_3
// [Main] 
// [Main] .aux40_7_4:
// [Main]   li a0, 60
// [Main]   beq a1, a0, .aux40_7_5
// [Main] 
// [Main] .aux40_7_6:
// [Main]   li a0, 43
// [Main]   beq a1, a0, .aux40_7_7
// [Main] 
// [Main] .aux40_7_8:
// [Main]   li a0, 45
// [Main]   beq a1, a0, .aux40_7_9
// [Main] 
// [Main] .aux40_7_10:
// [Main]   li a0, 46
// [Main]   beq a1, a0, .aux40_7_11
// [Main] 
// [Main] .aux40_7_12:
// [Main]   li a0, 44
// [Main]   beq a1, a0, .aux40_7_13
// [Main] 
// [Main] .aux40_7_14:
// [Main]   li a0, 91
// [Main]   beq a1, a0, .aux40_7_15
// [Main] 
// [Main] .aux40_7_16:
// [Main]   li a0, 93
// [Main]   bne a1, a0, .aux40_7_18
// [Main] 
// [Main] .aux40_7_17:
// [Main]   mv a0, s1
// [Main] 
// [Main] .aux40_7_19:
// [Main] 
// [Main] .aux40_7_20:
// [Main] 
// [Main] .aux40_7_21:
// [Main] 
// [Main] .aux40_7_22:
// [Main] 
// [Main] .aux40_7_23:
// [Main] 
// [Main] .aux40_7_24:
// [Main] 
// [Main] .aux40_7_25:
// [Main] 
// [Main] .aux40_7_26:
// [Main] 
// [Main] .aux40_7_27:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   ld s6, 56(sp)
// [Main]   ld s7, 64(sp)
// [Main]   ld s8, 72(sp)
// [Main]   addi sp, sp, 80
// [Main]   ret
// [Main] 
// [Main] .aux40_7_1:
// [Main]   mv a0, s1
// [Main]   j .aux40_7_27
// [Main] 
// [Main] .aux40_7_3:
// [Main]   lw a0, 0(s0)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s0)
// [Main]   addi a0, s1, 1
// [Main]   mv s1, a0
// [Main]   j .aux40_7_0
// [Main] 
// [Main] .aux40_7_5:
// [Main]   lw a0, 0(s0)
// [Main]   addi a0, a0, -1
// [Main]   sw a0, 0(s0)
// [Main]   addi a0, s1, 1
// [Main]   mv s1, a0
// [Main]   j .aux40_7_0
// [Main] 
// [Main] .aux40_7_7:
// [Main]   lw a0, 0(s0)
// [Main]   lw a1, 0(s0)
// [Main]   slliw a1, a1, 2
// [Main]   add a1, s6, a1
// [Main]   lw a1, 0(a1)
// [Main]   addi a1, a1, 1
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s6, a0
// [Main]   sw a1, 0(a0)
// [Main]   addi a0, s1, 1
// [Main]   mv s1, a0
// [Main]   j .aux40_7_0
// [Main] 
// [Main] .aux40_7_9:
// [Main]   lw a0, 0(s0)
// [Main]   lw a1, 0(s0)
// [Main]   slliw a1, a1, 2
// [Main]   add a1, s6, a1
// [Main]   lw a1, 0(a1)
// [Main]   addi a1, a1, -1
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s6, a0
// [Main]   sw a1, 0(a0)
// [Main]   addi a0, s1, 1
// [Main]   mv s1, a0
// [Main]   j .aux40_7_0
// [Main] 
// [Main] .aux40_7_11:
// [Main]   lw a0, 0(s0)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s6, a0
// [Main]   lw a0, 0(a0)
// [Main]   call minimbt_print_char
// [Main]   addi a0, s1, 1
// [Main]   mv s1, a0
// [Main]   j .aux40_7_0
// [Main] 
// [Main] .aux40_7_13:
// [Main]   lw s8, 0(s0)
// [Main]   call read_ch_until_newline_or_eof1_0
// [Main]   slliw a1, s8, 2
// [Main]   add a1, s6, a1
// [Main]   sw a0, 0(a1)
// [Main]   addi a0, s1, 1
// [Main]   mv s1, a0
// [Main]   j .aux40_7_0
// [Main] 
// [Main] .aux40_7_15:
// [Main]   sw s1, 0(s2)
// [Main]   addi a0, s11, -56
// [Main]   andi a1, a0, -8
// [Main]   mv s11, a1
// [Main]   la a0, lp108_9
// [Main]   sd a0, 0(a1)
// [Main]   sd s0, 8(a1)
// [Main]   sd s6, 16(a1)
// [Main]   sd s1, 24(a1)
// [Main]   sd s3, 32(a1)
// [Main]   sd s2, 40(a1)
// [Main]   sd s4, 48(a1)
// [Main]   mv s10, a1
// [Main]   ld a0, 0(a1)
// [Main]   jalr a0
// [Main]   lw a0, 0(s2)
// [Main]   addi a0, a0, 1
// [Main]   mv s1, a0
// [Main]   j .aux40_7_0
// [Main] 
// [Main] .aux40_7_18:
// [Main]   mv a0, s1
// [Main]   j .aux40_7_19
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_14
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function read_prog140_12
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering insn Call(ty=Unit, f=f1, args=[BlockParam(bref=b0, bpref=$b.0), FreeVar(fvref=^1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%2)])
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^1), offset=BlockParam(bref=b0, bpref=$b.0), width=@32), val=Insn(iref=%0))
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering insn Call(ty=Int32, f=f0, args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=-1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b0, args=[FnParam(fref=f12, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.0) -> $$f.0
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function read_prog140_12 to wasm
// [Wasm] Lowering function bf5_1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Int32(val=1024), Int32(val=1024)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m1, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m2, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f1, mref=m2) -> $f1.m2
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32, Int32], ty=Int32), mref=m3, fills=[Field(index=0, val=Fn(fref=f5)), Field(index=1, val=FnParam(fref=f1, fpref=$f.0)), Field(index=2, val=FnParam(fref=f1, fpref=$f.1))])
// [Wasm] Get Local name Mem(fref=f1, mref=m3) -> $f1.m3
// [Wasm] Get Local name Mem(fref=f1, mref=m3) -> $f1.m3
// [Wasm] Get Local name Mem(fref=f1, mref=m3) -> $f1.m3
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f1, mref=m3) -> $f1.m3
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Int32), mref=m4, fills=[Field(index=0, val=Fn(fref=f7)), Field(index=1, val=FnParam(fref=f1, fpref=$f.0)), Field(index=2, val=FnParam(fref=f1, fpref=$f.1)), Field(index=3, val=Mem(fref=f1, mref=m0)), Field(index=4, val=Mem(fref=f1, mref=m1)), Field(index=5, val=Mem(fref=f1, mref=m2)), Field(index=6, val=Mem(fref=f1, mref=m3))])
// [Wasm] Get Local name Mem(fref=f1, mref=m4) -> $f1.m4
// [Wasm] Get Local name Mem(fref=f1, mref=m4) -> $f1.m4
// [Wasm] Get Local name Mem(fref=f1, mref=m4) -> $f1.m4
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f1, mref=m4) -> $f1.m4
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Mem(fref=f1, mref=m4) -> $f1.m4
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name Mem(fref=f1, mref=m4) -> $f1.m4
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Get Local name Mem(fref=f1, mref=m4) -> $f1.m4
// [Wasm] Get Local name Mem(fref=f1, mref=m2) -> $f1.m2
// [Wasm] Get Local name Mem(fref=f1, mref=m4) -> $f1.m4
// [Wasm] Get Local name Mem(fref=f1, mref=m3) -> $f1.m3
// [Wasm] Lowering insn Apply(ty=Int32, f=Mem(fref=f1, mref=m4), args=[Int32(val=0)])
// [Wasm] Get Local name Mem(fref=f1, mref=m4) -> $f1.m4
// [Wasm] Get Local name Mem(fref=f1, mref=m4) -> $f1.m4
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Mem(fref=f1, mref=m2) -> $f1.m2
// [Wasm] Local Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Local Mem(fref=f1, mref=m4) -> $f1.m4
// [Wasm] Local Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Mem(fref=f1, mref=m3) -> $f1.m3
// [Wasm] Lowered function bf5_1 to wasm
// [Wasm] Lowering function skip21_5
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b12, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b12, bpref=$b.0) -> $b12.$b.0
// [Wasm] Lowering control Jump(target=b12, args=[BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b12, bpref=$b.0) -> $b12.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%3), Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Lowering control Jump(target=b12, args=[BlockParam(bref=b11, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Get Local name BlockParam(bref=b12, bpref=$b.0) -> $b12.$b.0
// [Wasm] Lowering control Jump(target=b11, args=[BlockParam(bref=b10, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Lowering control Jump(target=b10, args=[BlockParam(bref=b9, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Get Local name BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Lowering control Jump(target=b9, args=[BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%8), Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.1), Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Branch(cond=Insn(iref=%7), t=b7, t_args=[], f=b8, f_args=[])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%11), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=93)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Branch(cond=Insn(iref=%6), t=b5, t_args=[], f=b6, f_args=[])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^2), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=91)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FreeVar(fvref=^1), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b0, args=[FnParam(fref=f5, fpref=$f.0), FnParam(fref=f5, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.1) -> $$f.1
// [Wasm] Local BlockParam(bref=b12, bpref=$b.0) -> $b12.$b.0
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Lowered function skip21_5 to wasm
// [Wasm] Lowering function lp108_9
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Get Local name FreeVar(fvref=^5) -> $^5
// [Wasm] Get Local name FreeVar(fvref=^6) -> $^6
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FreeVar(fvref=^3), Int32(val=1)])
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Apply(ty=Int32, f=FreeVar(fvref=^4), args=[Insn(iref=%3), Int32(val=0)])
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^5), index=0, width=@32), val=Insn(iref=%4))
// [Wasm] Get Local name FreeVar(fvref=^5) -> $^5
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FreeVar(fvref=^3), Int32(val=1)])
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Apply(ty=Int32, f=FreeVar(fvref=^6), args=[Insn(iref=%6)])
// [Wasm] Get Local name FreeVar(fvref=^6) -> $^6
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name FreeVar(fvref=^6) -> $^6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^5), index=0, width=@32), val=Insn(iref=%7))
// [Wasm] Get Local name FreeVar(fvref=^5) -> $^5
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Jump(target=b0, args=[])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^1), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^2), offset=Insn(iref=%0), width=@32))
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Jump(target=b0, args=[])
// [Wasm] Local FreeVar(fvref=^6) -> $^6
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local FreeVar(fvref=^5) -> $^5
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local FreeVar(fvref=^4) -> $^4
// [Wasm] Local FreeVar(fvref=^3) -> $^3
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function lp108_9 to wasm
// [Wasm] Lowering function main136_2
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Unit), mref=m1, fills=[Field(index=0, val=Fn(fref=f12)), Field(index=1, val=Mem(fref=f2, mref=m0))])
// [Wasm] Get Local name Mem(fref=f2, mref=m1) -> $f2.m1
// [Wasm] Get Local name Mem(fref=f2, mref=m1) -> $f2.m1
// [Wasm] Get Local name Mem(fref=f2, mref=m1) -> $f2.m1
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Lowering insn Apply(ty=Unit, f=Mem(fref=f2, mref=m1), args=[Int32(val=0)])
// [Wasm] Get Local name Mem(fref=f2, mref=m1) -> $f2.m1
// [Wasm] Get Local name Mem(fref=f2, mref=m1) -> $f2.m1
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Local Mem(fref=f2, mref=m1) -> $f2.m1
// [Wasm] Local Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Lowered function main136_2 to wasm
// [Wasm] Lowering function T$start_14
// [Wasm] Lowering insn Call(ty=Unit, f=f2, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start_14 to wasm
// [Wasm] Lowering function aux40_7
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Get Local name FreeVar(fvref=^5) -> $^5
// [Wasm] Get Local name FreeVar(fvref=^6) -> $^6
// [Wasm] Lowering control Return(args=[BlockParam(bref=b27, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Lowering control Jump(target=b27, args=[BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^3), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%3), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^3), index=0, width=@32), val=Insn(iref=%4))
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%6)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^3), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%9), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^3), index=0, width=@32), val=Insn(iref=%10))
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%12)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^3), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^3), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^4), offset=Insn(iref=%16), width=@32))
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%17), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^4), offset=Insn(iref=%15), width=@32), val=Insn(iref=%18))
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%20)])
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^3), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^3), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^4), offset=Insn(iref=%24), width=@32))
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%25), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^4), offset=Insn(iref=%23), width=@32), val=Insn(iref=%26))
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%28)])
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^3), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^4), offset=Insn(iref=%31), width=@32))
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Insn(iref=%32)])
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%34)])
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^3), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Lowering insn Call(ty=Int32, f=f0, args=[])
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^4), offset=Insn(iref=%37), width=@32), val=Insn(iref=%38))
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%40)])
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^5), index=0, width=@32), val=BlockParam(bref=b0, bpref=$b.0))
// [Wasm] Get Local name FreeVar(fvref=^5) -> $^5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[], ty=Unit), mref=m0, fills=[Field(index=0, val=Fn(fref=f9)), Field(index=1, val=FreeVar(fvref=^3)), Field(index=2, val=FreeVar(fvref=^4)), Field(index=3, val=BlockParam(bref=b0, bpref=$b.0)), Field(index=4, val=FreeVar(fvref=^6)), Field(index=5, val=FreeVar(fvref=^5)), Field(index=6, val=Self(fref=f7))])
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name FreeVar(fvref=^6) -> $^6
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name FreeVar(fvref=^5) -> $^5
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Lowering insn Apply(ty=Unit, f=Mem(fref=f7, mref=m0), args=[])
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^5), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^5) -> $^5
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%46), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%47)])
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering control Jump(target=b27, args=[BlockParam(bref=b26, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Lowering control Jump(target=b26, args=[BlockParam(bref=b25, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.0) -> $b25.$b.0
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Lowering control Jump(target=b25, args=[BlockParam(bref=b24, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b24, bpref=$b.0) -> $b24.$b.0
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.0) -> $b25.$b.0
// [Wasm] Lowering control Jump(target=b24, args=[BlockParam(bref=b23, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.0) -> $b23.$b.0
// [Wasm] Get Local name BlockParam(bref=b24, bpref=$b.0) -> $b24.$b.0
// [Wasm] Lowering control Jump(target=b23, args=[BlockParam(bref=b22, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b22, bpref=$b.0) -> $b22.$b.0
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.0) -> $b23.$b.0
// [Wasm] Lowering control Jump(target=b22, args=[BlockParam(bref=b21, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.0) -> $b21.$b.0
// [Wasm] Get Local name BlockParam(bref=b22, bpref=$b.0) -> $b22.$b.0
// [Wasm] Lowering control Jump(target=b21, args=[BlockParam(bref=b20, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.0) -> $b21.$b.0
// [Wasm] Lowering control Jump(target=b20, args=[BlockParam(bref=b19, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.0) -> $b19.$b.0
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Lowering control Jump(target=b19, args=[BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.0) -> $b19.$b.0
// [Wasm] Lowering control Jump(target=b19, args=[BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.0) -> $b19.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=93)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Lowering control Branch(cond=Insn(iref=%49), t=b17, t_args=[], f=b18, f_args=[])
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=91)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering control Branch(cond=Insn(iref=%42), t=b15, t_args=[], f=b16, f_args=[])
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=44)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering control Branch(cond=Insn(iref=%36), t=b13, t_args=[], f=b14, f_args=[])
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=46)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering control Branch(cond=Insn(iref=%30), t=b11, t_args=[], f=b12, f_args=[])
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=45)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering control Branch(cond=Insn(iref=%22), t=b9, t_args=[], f=b10, f_args=[])
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=43)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering control Branch(cond=Insn(iref=%14), t=b7, t_args=[], f=b8, f_args=[])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=60)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering control Branch(cond=Insn(iref=%8), t=b5, t_args=[], f=b6, f_args=[])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^2), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=62)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FreeVar(fvref=^1), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b0, args=[FnParam(fref=f7, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.0) -> $$f.0
// [Wasm] Local Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local FreeVar(fvref=^5) -> $^5
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%25) -> $%25
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local FreeVar(fvref=^4) -> $^4
// [Wasm] Local BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local BlockParam(bref=b25, bpref=$b.0) -> $b25.$b.0
// [Wasm] Local Insn(iref=%49) -> $%49
// [Wasm] Local Insn(iref=%42) -> $%42
// [Wasm] Local Insn(iref=%32) -> $%32
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local BlockParam(bref=b23, bpref=$b.0) -> $b23.$b.0
// [Wasm] Local BlockParam(bref=b24, bpref=$b.0) -> $b24.$b.0
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%31) -> $%31
// [Wasm] Local BlockParam(bref=b19, bpref=$b.0) -> $b19.$b.0
// [Wasm] Local BlockParam(bref=b22, bpref=$b.0) -> $b22.$b.0
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local Insn(iref=%38) -> $%38
// [Wasm] Local Insn(iref=%46) -> $%46
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%24) -> $%24
// [Wasm] Local Insn(iref=%37) -> $%37
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local Insn(iref=%47) -> $%47
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local FreeVar(fvref=^6) -> $^6
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Insn(iref=%30) -> $%30
// [Wasm] Local BlockParam(bref=b21, bpref=$b.0) -> $b21.$b.0
// [Wasm] Local FreeVar(fvref=^3) -> $^3
// [Wasm] Local Insn(iref=%34) -> $%34
// [Wasm] Local BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Local Insn(iref=%40) -> $%40
// [Wasm] Local Insn(iref=%36) -> $%36
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function aux40_7 to wasm
// [Wasm] Lowering function read_ch_until_newline_or_eof1_0
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[Int32(val=-1)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[Int32(val=-1)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=13)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_char", args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=10)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function read_ch_until_newline_or_eof1_0 to wasm
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %5: Apply(ty=Unit, f=Self(fref=f12), args=[Insn(iref=%4)])
// [CoreOpt] eliminated tail rec call %5: Apply(ty=Int32, f=Self(fref=f5), args=[Insn(iref=%3), Insn(iref=%4)])
// [CoreOpt] eliminated tail rec call %12: Apply(ty=Int32, f=Self(fref=f5), args=[Insn(iref=%11), FnParam(fref=f5, fpref=$f.1)])
// [CoreOpt] eliminated tail rec call %10: Apply(ty=Int32, f=Self(fref=f5), args=[Insn(iref=%8), Insn(iref=%9)])
// [CoreOpt] eliminated tail rec call %9: Apply(ty=Unit, f=Self(fref=f9), args=[])
// [CoreOpt] eliminated tail rec call %7: Apply(ty=Int32, f=Self(fref=f7), args=[Insn(iref=%6)])
// [CoreOpt] eliminated tail rec call %13: Apply(ty=Int32, f=Self(fref=f7), args=[Insn(iref=%12)])
// [CoreOpt] eliminated tail rec call %21: Apply(ty=Int32, f=Self(fref=f7), args=[Insn(iref=%20)])
// [CoreOpt] eliminated tail rec call %29: Apply(ty=Int32, f=Self(fref=f7), args=[Insn(iref=%28)])
// [CoreOpt] eliminated tail rec call %35: Apply(ty=Int32, f=Self(fref=f7), args=[Insn(iref=%34)])
// [CoreOpt] eliminated tail rec call %41: Apply(ty=Int32, f=Self(fref=f7), args=[Insn(iref=%40)])
// [CoreOpt] eliminated tail rec call %48: Apply(ty=Int32, f=Self(fref=f7), args=[Insn(iref=%47)])
