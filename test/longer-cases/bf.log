// [Asm] pre_assigned_registers: Insn(iref=%1) -> v4, Self(fref=f6) -> v0, Mem(fref=f6, mref=m0) -> v2, Insn(iref=%0) -> v3
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6, s11, zero]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: s11 is X
// [Asm] defs: [v9]
// [Asm] live_set: [zero, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, v2]
// [Asm] move_origin: [v9]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a1, zero, a0, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, zero, a0, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main136l2_6"];
// [Asm]   r0 [label="v6 ← a0", color=green];
// [Asm]   r3 [label="v7 ← a0", color=green];
// [Asm]   r9 [label="t0", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="t4", color=blue];
// [Asm]   r4 [label="v2 ← s0", color=green];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r11 [label="t2", color=blue];
// [Asm]   r7 [label="a0", color=blue];
// [Asm]   r10 [label="t1", color=blue];
// [Asm]   r14 [label="a3", color=blue];
// [Asm]   r8 [label="a2", color=blue];
// [Asm]   r5 [label="v9 ← a0", color=green];
// [Asm]   r15 [label="a4", color=blue];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="a5", color=blue];
// [Asm]   r18 [label="a7", color=blue];
// [Asm]   r19 [label="v4 ← a0", color=green];
// [Asm]   r17 [label="a6", color=blue];
// [Asm]   r12 [label="t3", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r4 -- r13;
// [Asm]   r2 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r16;
// [Asm]   r4 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r14;
// [Asm]   r2 -- r15;
// [Asm]   r0 -- r2;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r7 -- r15;
// [Asm]   r7 -- r10;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r7 -- r11;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r7 -- r13;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r10;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r4 -- r17;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r7 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r7 -- r8;
// [Asm]   r2 -- r19;
// [Asm]   r7 -- r12;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r7 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r6 -- r8;
// [Asm]   r7 -- r17;
// [Asm]   comment = "0:v6-> 1:s11-> 2:zero-> 3:v7-> 4:v2-> 5:v9-> 6:a1-> 7:a0-> 8:a2-> 9:t0-> 10:t1-> 11:t2-> 12:t3-> 13:t4-> 14:a3-> 15:a4-> 16:a5-> 17:a6-> 18:a7-> 19:v4"
// [Asm]   comment = "v6<-a0;v7<-a0;v2<-s0;v9<-a0;v4<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main136l2_6"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v6, 4096 ->   li a0, 4096
// [Asm] subst   sub v7, s11, v6 ->   sub a0, s11, a0
// [Asm] subst   andi v2, v7, -8 ->   andi s0, a0, -8
// [Asm] subst   mv s11, v2 ->   mv s11, s0
// [Asm] subst   li v9, 1024 ->   li a0, 1024
// [Asm] subst   mv a1, v9 ->   mv a1, a0
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   call memseti32 ->   call memseti32
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v2 ->   mv a1, s0
// [Asm] subst   call read_prog140l3_5 ->   call read_prog140l3_5
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Mem(fref=f4, mref=m2) -> v6, Insn(iref=%3) -> v10, FnParam(fref=f4, fpref=$f.0) -> v2, Insn(iref=%2) -> v9, Insn(iref=%1) -> v8, Mem(fref=f4, mref=m1) -> v5, Self(fref=f4) -> v0, Mem(fref=f4, mref=m0) -> v4, FnParam(fref=f4, fpref=$f.1) -> v3, Insn(iref=%0) -> v7, Insn(iref=%4) -> v11
// [Asm] defs: []
// [Asm] live_set: [zero, a0, a1, s11]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, a1, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, s11, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v2, zero, v20, v3]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, zero, v4, s11, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v2, v18, zero, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v2, zero, v8, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v2, zero, v8, v4, s11, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v2, v16, zero, v8, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, zero, v8, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v5, zero, v8, v4, s11, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, v5, zero, v4, a1, s11, v3]
// [Asm] move_origin: [v8]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v5, zero, a0, v4, a1, s11, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v2, v5, zero, a0, v4, a2, a1, s11, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, v5, zero, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v13]
// [Asm] live_set: [v2, v5, zero, v13, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, zero, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v5, zero, v4, v6, v3]
// [Asm] move_origin: [v6]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v5, zero, a0, v4, v6, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, v5, zero, a0, a1, v6, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, zero, a0, a2, a1, v6, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [zero, a0, a2, a1, v6, a3, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [zero, a0, a4, a2, a1, v6, a3]
// [Asm] move_origin: [v3]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [a5, zero, a0, a4, a2, a1, a3]
// [Asm] move_origin: [v6]
// [Asm] defined: a5 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of bf5l1_4"];
// [Asm]   r0 [label="v2 ← s0", color=green];
// [Asm]   r20 [label="a4", color=blue];
// [Asm]   r23 [label="a7", color=blue];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r9 [label="v15 ← a1", color=green];
// [Asm]   r26 [label="v11 ← a0", color=green];
// [Asm]   r6 [label="v4 ← s2", color=green];
// [Asm]   r13 [label="a2", color=blue];
// [Asm]   r4 [label="v3 ← s1", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r11 [label="v5 ← s3", color=green];
// [Asm]   r7 [label="v18 ← a0", color=green];
// [Asm]   r10 [label="v16 ← a1", color=green];
// [Asm]   r22 [label="a6", color=blue];
// [Asm]   r14 [label="t0", color=blue];
// [Asm]   r8 [label="v8 ← a0", color=green];
// [Asm]   r5 [label="v20 ← a0", color=green];
// [Asm]   r15 [label="t1", color=blue];
// [Asm]   r24 [label="v13 ← a0", color=green];
// [Asm]   r25 [label="v6 ← a5", color=green];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="t2", color=blue];
// [Asm]   r18 [label="t4", color=blue];
// [Asm]   r19 [label="a3", color=blue];
// [Asm]   r17 [label="t3", color=blue];
// [Asm]   r21 [label="a5", color=blue];
// [Asm]   r12 [label="a0", color=blue];
// [Asm]   r19 -- r20;
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r21;
// [Asm]   r12 -- r25;
// [Asm]   r0 -- r13;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r11 -- r14;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r0 -- r25;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r0 -- r23;
// [Asm]   r0 -- r22;
// [Asm]   r11 -- r24;
// [Asm]   r11 -- r18;
// [Asm]   r1 -- r16;
// [Asm]   r4 -- r22;
// [Asm]   r19 -- r21;
// [Asm]   r3 -- r18;
// [Asm]   r0 -- r16;
// [Asm]   r12 -- r19;
// [Asm]   r11 -- r19;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r6 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r11 -- r13;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r0 -- r9;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r2 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r10;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r25;
// [Asm]   r4 -- r8;
// [Asm]   r12 -- r23;
// [Asm]   r11 -- r15;
// [Asm]   r0 -- r11;
// [Asm]   r8 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r12 -- r21;
// [Asm]   r6 -- r23;
// [Asm]   r0 -- r4;
// [Asm]   r13 -- r21;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r11 -- r25;
// [Asm]   r0 -- r18;
// [Asm]   r6 -- r25;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r0 -- r15;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r11 -- r20;
// [Asm]   r6 -- r15;
// [Asm]   r11 -- r17;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r0 -- r24;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r23;
// [Asm]   r12 -- r15;
// [Asm]   r8 -- r9;
// [Asm]   r11 -- r16;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r22;
// [Asm]   r0 -- r14;
// [Asm]   r11 -- r12;
// [Asm]   r0 -- r21;
// [Asm]   r1 -- r15;
// [Asm]   r4 -- r20;
// [Asm]   r1 -- r13;
// [Asm]   r11 -- r23;
// [Asm]   r6 -- r16;
// [Asm]   r11 -- r22;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r6 -- r12;
// [Asm]   r0 -- r19;
// [Asm]   r13 -- r25;
// [Asm]   r6 -- r24;
// [Asm]   r13 -- r20;
// [Asm]   r20 -- r25;
// [Asm]   r6 -- r20;
// [Asm]   r13 -- r19;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r19;
// [Asm]   r12 -- r20;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r12 -- r13;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r8;
// [Asm]   r12 -- r22;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r0 -- r12;
// [Asm]   r12 -- r14;
// [Asm]   r12 -- r16;
// [Asm]   r4 -- r17;
// [Asm]   r12 -- r17;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r20;
// [Asm]   r2 -- r3;
// [Asm]   r19 -- r25;
// [Asm]   r3 -- r23;
// [Asm]   r20 -- r21;
// [Asm]   r11 -- r21;
// [Asm]   r12 -- r18;
// [Asm]   r4 -- r19;
// [Asm]   r1 -- r24;
// [Asm]   comment = "0:v2-> 1:zero-> 2:a1-> 3:s11-> 4:v3-> 6:v4-> 11:v5-> 12:a0-> 13:a2-> 19:a3-> 20:a4-> 21:a5-> 25:v6-> 14:t0-> 15:t1-> 16:t2-> 17:t3-> 18:t4-> 22:a6-> 23:a7-> 8:v8-> 9:v15-> 7:v18-> 10:v16-> 24:v13-> 5:v20-> 26:v11"
// [Asm]   comment = "v2<-s0;v15<-a1;v11<-a0;v4<-s2;v3<-s1;v5<-s3;v18<-a0;v16<-a1;v8<-a0;v20<-a0;v13<-a0;v6<-a5;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of bf5l1_4"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   mv v3, a1 ->   mv s1, a1
// [Asm] subst   addi v20, s11, -4 ->   addi a0, s11, -4
// [Asm] subst   andi v4, v20, -8 ->   andi s2, a0, -8
// [Asm] subst   mv s11, v4 ->   mv s11, s2
// [Asm] subst   sw zero, 0(v4) ->   sw zero, 0(s2)
// [Asm] subst   li v18, 1024 ->   li a0, 1024
// [Asm] subst   mul v8, v18, v18 ->   mul a0, a0, a0
// [Asm] subst   slliw v15, v8, 2 ->   slliw a1, a0, 2
// [Asm] subst   sub v16, s11, v15 ->   sub a1, s11, a1
// [Asm] subst   andi v5, v16, -8 ->   andi s3, a1, -8
// [Asm] subst   mv s11, v5 ->   mv s11, s3
// [Asm] subst   mv a1, v8 ->   mv a1, a0
// [Asm] subst   mv a0, v5 ->   mv a0, s3
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   call memseti32 ->   call memseti32
// [Asm] subst   addi v13, s11, -4 ->   addi a0, s11, -4
// [Asm] subst   andi v6, v13, -8 ->   andi a5, a0, -8
// [Asm] subst   mv s11, v6 ->   mv s11, a5
// [Asm] subst   sw zero, 0(v6) ->   sw zero, 0(a5)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v4 ->   mv a1, s2
// [Asm] subst   mv a2, v2 ->   mv a2, s0
// [Asm] subst   mv a3, v5 ->   mv a3, s3
// [Asm] subst   mv a4, v3 ->   mv a4, s1
// [Asm] subst   call aux40l3_3 ->   call aux40l3_3
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v9, Insn(iref=%3) -> v8, FnParam(fref=f5, fpref=$f.0) -> v2, Self(fref=f5) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v11, Insn(iref=%2) -> v10, Insn(iref=%1) -> v7, BlockParam(bref=b0, bpref=$b.0) -> v4, BlockParam(bref=b0, bpref=$b.1) -> v5, FnParam(fref=f5, fpref=$f.1) -> v3, Insn(iref=%0) -> v6
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=-1)])
// [Asm] defs: []
// [Asm] live_set: [v4, v5]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [a0]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v10]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: [v10]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5]
// [Asm] move_origin: [v3]
// [Asm] defined: v5 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v4, v5, v6, v14]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v4, v5, v6, v15]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v5, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, v5]
// [Asm] move_origin: [v9]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5]
// [Asm] move_origin: [v5]
// [Asm] defs: []
// [Asm] live_set: [v4, v5]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, v5]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, v5, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v6]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v4, v5, v6, v16]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v6]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of read_prog140l3_5"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="v6 ← a1", color=green];
// [Asm]   r23 [label="v16 ← a0", color=green];
// [Asm]   r3 [label="t0", color=blue];
// [Asm]   r9 [label="a3", color=blue];
// [Asm]   r6 [label="t3", color=blue];
// [Asm]   r13 [label="a7", color=blue];
// [Asm]   r4 [label="t1", color=blue];
// [Asm]   r1 [label="v5 ← s0", color=green];
// [Asm]   r11 [label="a5", color=blue];
// [Asm]   r7 [label="t4", color=blue];
// [Asm]   r10 [label="a4", color=blue];
// [Asm]   r22 [label="v9 ← a0", color=green];
// [Asm]   r14 [label="v10 ← a0", color=green];
// [Asm]   r8 [label="a2", color=blue];
// [Asm]   r5 [label="t2", color=blue];
// [Asm]   r15 [label="v11 ← a0", color=green];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="v2 ← a0", color=green];
// [Asm]   r18 [label="v4 ← s1", color=green];
// [Asm]   r19 [label="v14 ← a0", color=green];
// [Asm]   r21 [label="v15 ← a0", color=green];
// [Asm]   r17 [label="v3 ← a1", color=green];
// [Asm]   r12 [label="a6", color=blue];
// [Asm]   r17 -- r18;
// [Asm]   r0 -- r13;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r23;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r22;
// [Asm]   r1 -- r19;
// [Asm]   r5 -- r18;
// [Asm]   r1 -- r10;
// [Asm]   r1 -- r13;
// [Asm]   r18 -- r21;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r18;
// [Asm]   r11 -- r18;
// [Asm]   r3 -- r18;
// [Asm]   r16 -- r17;
// [Asm]   r9 -- r18;
// [Asm]   r0 -- r6;
// [Asm]   r20 -- r23;
// [Asm]   r1 -- r9;
// [Asm]   r18 -- r19;
// [Asm]   r10 -- r18;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r8;
// [Asm]   r6 -- r18;
// [Asm]   r8 -- r18;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r2;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r10;
// [Asm]   r13 -- r18;
// [Asm]   r1 -- r11;
// [Asm]   r18 -- r20;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r7 -- r18;
// [Asm]   r0 -- r4;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r20 -- r21;
// [Asm]   r12 -- r18;
// [Asm]   r19 -- r20;
// [Asm]   r0 -- r18;
// [Asm]   r18 -- r23;
// [Asm]   comment = "0:a0-> 1:v5-> 2:a1-> 18:v4-> 3:t0-> 4:t1-> 5:t2-> 6:t3-> 7:t4-> 8:a2-> 9:a3-> 10:a4-> 11:a5-> 12:a6-> 13:a7-> 19:v14-> 20:v6-> 21:v15-> 23:v16-> 16:v2-> 17:v3-> 22:v9-> 14:v10-> 15:v11"
// [Asm]   comment = "v6<-a1;v16<-a0;v5<-s0;v9<-a0;v10<-a0;v11<-a0;v2<-a0;v4<-s1;v14<-a0;v15<-a0;v3<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of read_prog140l3_5"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv a0, v4 ->   mv a0, s1
// [Asm] subst   mv a1, v5 ->   mv a1, s0
// [Asm] subst   call bf5l1_4 ->   call bf5l1_4
// [Asm] subst   mv v4, v2 ->   mv s1, a0
// [Asm] subst   mv v5, v3 ->   mv s0, a1
// [Asm] subst   slliw v14, v4, 2 ->   slliw a0, s1, 2
// [Asm] subst   add v15, v5, v14 ->   add a0, s0, a0
// [Asm] subst   sw v6, 0(v15) ->   sw a1, 0(a0)
// [Asm] subst   addi v9, v4, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v4, v9 ->   mv s1, a0
// [Asm] subst   j .read_prog140l3_5_0 ->   j .read_prog140l3_5_0
// [Asm] subst   ret ->   ret
// [Asm] subst   call read_ch_until_newline_or_eof1l0_0 ->   call read_ch_until_newline_or_eof1l0_0
// [Asm] subst   mv v6, a0 ->   mv a1, a0
// [Asm] subst   li v16, -1 ->   li a0, -1
// [Asm] subst   beq v6, v16, .read_prog140l3_5_1 ->   beq a1, a0, .read_prog140l3_5_1
// [Asm] pre_assigned_registers: BlockParam(bref=b69, bpref=$b.0) -> v70, Insn(iref=%15) -> v94, Insn(iref=%33) -> v86, BlockParam(bref=b54, bpref=$b.2) -> v35, BlockParam(bref=b49, bpref=$b.4) -> v43, Insn(iref=%8) -> v17, Insn(iref=%10) -> v101, BlockParam(bref=b49, bpref=$b.0) -> v39, BlockParam(bref=b0, bpref=$b.4) -> v12, Insn(iref=%27) -> v92, FnParam(fref=f3, fpref=$f.3) -> v5, Insn(iref=%25) -> v90, Insn(iref=%39) -> v82, BlockParam(bref=b26, bpref=$b.0) -> v31, Insn(iref=%59) -> v61, BlockParam(bref=b67, bpref=$b.0) -> v68, Insn(iref=%4) -> v105, BlockParam(bref=b25, bpref=$b.0) -> v30, Insn(iref=%56) -> v49, Insn(iref=%49) -> v45, Insn(iref=%42) -> v22, Insn(iref=%65) -> v65, Insn(iref=%26) -> v91, BlockParam(bref=b49, bpref=$b.2) -> v41, BlockParam(bref=b23, bpref=$b.0) -> v28, BlockParam(bref=b49, bpref=$b.5) -> v44, BlockParam(bref=b24, bpref=$b.0) -> v29, Insn(iref=%31) -> v84, BlockParam(bref=b54, bpref=$b.5) -> v38, Insn(iref=%64) -> v63, BlockParam(bref=b19, bpref=$b.0) -> v24, BlockParam(bref=b22, bpref=$b.0) -> v27, Insn(iref=%38) -> v81, BlockParam(bref=b54, bpref=$b.1) -> v34, Insn(iref=%16) -> v95, BlockParam(bref=b0, bpref=$b.1) -> v9, Insn(iref=%54) -> v75, Insn(iref=%60) -> v62, Insn(iref=%67) -> v67, Insn(iref=%5) -> v106, Insn(iref=%19) -> v98, Insn(iref=%55) -> v48, BlockParam(bref=b27, bpref=$b.0) -> v108, Insn(iref=%66) -> v66, Insn(iref=%48) -> v23, Insn(iref=%23) -> v88, Insn(iref=%20) -> v99, BlockParam(bref=b21, bpref=$b.0) -> v26, BlockParam(bref=b58, bpref=$b.2) -> v58, Insn(iref=%34) -> v87, BlockParam(bref=b20, bpref=$b.0) -> v25, Insn(iref=%36) -> v21, BlockParam(bref=b72, bpref=$b.1) -> v53, FnParam(fref=f3, fpref=$f.4) -> v6, BlockParam(bref=b70, bpref=$b.0) -> v73, BlockParam(bref=b0, bpref=$b.5) -> v13, BlockParam(bref=b0, bpref=$b.3) -> v11, BlockParam(bref=b72, bpref=$b.0) -> v52, Insn(iref=%50) -> v46, Insn(iref=%14) -> v18, Insn(iref=%51) -> v47, FnParam(fref=f3, fpref=$f.0) -> v2, FnParam(fref=f3, fpref=$f.5) -> v7, Self(fref=f3) -> v0, BlockParam(bref=b58, bpref=$b.0) -> v56, Insn(iref=%52) -> v51, BlockParam(bref=b68, bpref=$b.0) -> v69, Insn(iref=%32) -> v85, Insn(iref=%58) -> v60, BlockParam(bref=b54, bpref=$b.4) -> v37, Insn(iref=%1) -> v15, BlockParam(bref=b58, bpref=$b.1) -> v57, Insn(iref=%11) -> v102, BlockParam(bref=b54, bpref=$b.3) -> v36, BlockParam(bref=b55, bpref=$b.0) -> v74, Insn(iref=%57) -> v50, Insn(iref=%6) -> v107, Insn(iref=%62) -> v72, FnParam(fref=f3, fpref=$f.2) -> v4, BlockParam(bref=b72, bpref=$b.2) -> v54, Insn(iref=%46) -> v79, Insn(iref=%28) -> v93, Insn(iref=%24) -> v89, Insn(iref=%9) -> v100, Insn(iref=%37) -> v80, BlockParam(bref=b54, bpref=$b.0) -> v33, BlockParam(bref=b58, bpref=$b.3) -> v59, BlockParam(bref=b0, bpref=$b.0) -> v8, Insn(iref=%45) -> v78, BlockParam(bref=b0, bpref=$b.2) -> v10, BlockParam(bref=b49, bpref=$b.3) -> v42, Insn(iref=%0) -> v14, Insn(iref=%61) -> v71, BlockParam(bref=b72, bpref=$b.3) -> v55, Insn(iref=%18) -> v97, Insn(iref=%3) -> v104, BlockParam(bref=b52, bpref=$b.0) -> v76, Insn(iref=%22) -> v19, Insn(iref=%17) -> v96, FnParam(fref=f3, fpref=$f.1) -> v3, Insn(iref=%2) -> v16, Insn(iref=%43) -> v32, Insn(iref=%30) -> v20, BlockParam(bref=b30, bpref=$b.0) -> v77, Insn(iref=%40) -> v83, BlockParam(bref=b49, bpref=$b.1) -> v40, Insn(iref=%69) -> v64, Insn(iref=%12) -> v103
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b58, bpref=$b.1), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%59), Int32(val=93)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%59), Int32(val=91)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b58, bpref=$b.2), BlockParam(bref=b58, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%50), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=93)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=91)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=44)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=46)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=45)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=43)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=60)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=62)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm] move_origin: []
// [Asm] defs: [v56]
// [Asm] live_set: [v11, v56, v10, zero, v13, v43, v12, v44, v9, v40]
// [Asm] move_origin: [v51]
// [Asm] defined: v56 is X
// [Asm] defs: [v57]
// [Asm] live_set: [v11, v56, v10, zero, v13, v43, v57, v12, v44, v9, v40]
// [Asm] move_origin: [zero]
// [Asm] defined: v57 is X
// [Asm] defs: [v58]
// [Asm] live_set: [v11, v58, v56, v10, zero, v13, v43, v57, v12, v44, v9]
// [Asm] move_origin: [v40]
// [Asm] defined: v58 is X
// [Asm] defs: [v59]
// [Asm] live_set: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm] move_origin: [v43]
// [Asm] defined: v59 is X
// [Asm] defs: [v74]
// [Asm] live_set: [v11, v10, zero, v13, v74, v12, v44, v9]
// [Asm] move_origin: [v73]
// [Asm] defined: v74 is X
// [Asm] defs: [v70]
// [Asm] live_set: [v11, v10, zero, v13, v70, v12, v44, v9]
// [Asm] move_origin: [v69]
// [Asm] defined: v70 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v27]
// [Asm] move_origin: [v26]
// [Asm] defined: v27 is X
// [Asm] defs: [v73]
// [Asm] live_set: [v11, v10, v13, zero, v12, v44, v9, v73]
// [Asm] move_origin: [v56]
// [Asm] defined: v73 is X
// [Asm] defs: [v168]
// [Asm] live_set: [v11, v168, v10, v13, zero, v8, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v168 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm] move_origin: []
// [Asm] defs: [v151]
// [Asm] live_set: [v11, v58, v56, v10, zero, v13, v151, v59, v57, v12, v61, v44, v9]
// [Asm] move_origin: []
// [Asm] defined: v151 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm] move_origin: []
// [Asm] defs: [v51]
// [Asm] live_set: [v11, v10, v13, v43, v12, v44, v9, v51, zero, v40]
// [Asm] move_origin: []
// [Asm] defined: v51 is X
// [Asm] defs: [v52]
// [Asm] live_set: [v11, v10, v13, v43, v52, v12, v44, v9, v51, zero, v40]
// [Asm] move_origin: [v51]
// [Asm] defined: v52 is X
// [Asm] defs: [v53]
// [Asm] live_set: [v11, v53, v10, v13, v43, v52, v12, v44, v9, v51, zero, v40]
// [Asm] move_origin: [zero]
// [Asm] defined: v53 is X
// [Asm] defs: [v54]
// [Asm] live_set: [v11, v53, v10, v13, v43, v52, v12, v44, v9, v51, zero, v54, v40]
// [Asm] move_origin: [v40]
// [Asm] defined: v54 is X
// [Asm] defs: [v55]
// [Asm] live_set: [v11, v53, v10, v13, v43, v52, v12, v44, v9, v51, zero, v54, v55, v40]
// [Asm] move_origin: [v43]
// [Asm] defined: v55 is X
// [Asm] defs: [v108]
// [Asm] live_set: [v108]
// [Asm] move_origin: [v31]
// [Asm] defined: v108 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v31]
// [Asm] move_origin: [v30]
// [Asm] defined: v31 is X
// [Asm] defs: [v84]
// [Asm] live_set: [v11, v10, v13, zero, v8, v84, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v84 is X
// [Asm] defs: [v135]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9, v135]
// [Asm] move_origin: []
// [Asm] defined: v135 is X
// [Asm] defs: [v136]
// [Asm] live_set: [v11, v10, v13, zero, v8, v136, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v136 is X
// [Asm] defs: [v85]
// [Asm] live_set: [v11, v10, v13, zero, v8, v85, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v85 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v85, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v10, v13, zero, a0, v8, v12, v9]
// [Asm] move_origin: [v85]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, v13, zero, a0, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v86]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v86 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v87]
// [Asm] live_set: [v11, v87, v10, v13, zero, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v87 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v87]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v94]
// [Asm] live_set: [v11, v94, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v94 is X
// [Asm] defs: [v95]
// [Asm] live_set: [v11, v94, v10, v13, zero, v8, v95, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v95 is X
// [Asm] defs: [v119]
// [Asm] live_set: [v11, v94, v10, v13, zero, v119, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v119 is X
// [Asm] defs: [v120]
// [Asm] live_set: [v11, v94, v10, v13, zero, v120, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v120 is X
// [Asm] defs: [v96]
// [Asm] live_set: [v11, v94, v10, v96, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v96 is X
// [Asm] defs: [v97]
// [Asm] live_set: [v11, v94, v10, v13, zero, v97, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v97 is X
// [Asm] defs: [v116]
// [Asm] live_set: [v11, v116, v10, v13, zero, v97, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v116 is X
// [Asm] defs: [v117]
// [Asm] live_set: [v11, v10, v13, zero, v97, v8, v12, v117, v9]
// [Asm] move_origin: []
// [Asm] defined: v117 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v99]
// [Asm] live_set: [v11, v10, v99, v13, zero, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v99 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v99]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v25]
// [Asm] move_origin: [v24]
// [Asm] defined: v25 is X
// [Asm] defs: [v69]
// [Asm] live_set: [v11, v69, v10, zero, v13, v12, v44, v9]
// [Asm] move_origin: [v68]
// [Asm] defined: v69 is X
// [Asm] defs: [v163]
// [Asm] live_set: [v15, v163, v8]
// [Asm] move_origin: []
// [Asm] defined: v163 is X
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defs: [v45]
// [Asm] live_set: [v11, v10, v42, v13, v41, v43, v12, v44, v9, v39, zero, v45, v40]
// [Asm] move_origin: []
// [Asm] defined: v45 is X
// [Asm] defs: [v159]
// [Asm] live_set: [v11, v10, v42, v13, v159, v41, v43, v12, v44, v9, v39, zero, v40]
// [Asm] move_origin: []
// [Asm] defined: v159 is X
// [Asm] defs: [v160]
// [Asm] live_set: [v11, v10, v42, v13, v41, v43, v12, v44, v160, v9, v39, zero, v40]
// [Asm] move_origin: []
// [Asm] defined: v160 is X
// [Asm] defs: [v46]
// [Asm] live_set: [v11, v46, v10, v42, v13, v41, v43, v12, v44, v9, v39, zero, v40]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v42, v13, v41, v43, v12, v44, v9, v39, v40]
// [Asm] move_origin: []
// [Asm] defs: [v66]
// [Asm] live_set: [v11, v66, v58, v10, zero, v13, v59, v12, v57, v44, v9]
// [Asm] move_origin: []
// [Asm] defined: v66 is X
// [Asm] defs: [v67]
// [Asm] live_set: [v11, v66, v58, v10, zero, v13, v67, v59, v12, v44, v9]
// [Asm] move_origin: []
// [Asm] defined: v67 is X
// [Asm] defs: [v56]
// [Asm] live_set: [v11, v58, v56, v10, zero, v13, v67, v59, v12, v44, v9]
// [Asm] move_origin: [v66]
// [Asm] defined: v56 is X
// [Asm] defs: [v57]
// [Asm] live_set: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm] move_origin: [v67]
// [Asm] defined: v57 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm] move_origin: [v58]
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm] move_origin: [v59]
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm] move_origin: []
// [Asm] defs: [v28]
// [Asm] live_set: [v28]
// [Asm] move_origin: [v27]
// [Asm] defined: v28 is X
// [Asm] defs: [v167]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v15, v9, v167]
// [Asm] move_origin: []
// [Asm] defined: v167 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defs: [v29]
// [Asm] live_set: [v29]
// [Asm] move_origin: [v28]
// [Asm] defined: v29 is X
// [Asm] defs: [v30]
// [Asm] live_set: [v30]
// [Asm] move_origin: [v29]
// [Asm] defined: v30 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v108]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v77]
// [Asm] live_set: [v11, v10, v13, zero, v77, v12, v9]
// [Asm] move_origin: [v76]
// [Asm] defined: v77 is X
// [Asm] defs: []
// [Asm] live_set: [a5, zero, a0, a4, a2, a1, a3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a5, zero, a4, a2, a1, a3, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a5, zero, a4, a2, a3, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, a5, zero, a4, v4, a3, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, a5, zero, a4, v4, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, a5, zero, v4, v6, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: [a5]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v9]
// [Asm] move_origin: [v3]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero, v8, v7, v6, v9]
// [Asm] move_origin: [v4]
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v10, zero, v8, v7, v6, v9]
// [Asm] move_origin: [v5]
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v10, zero, v8, v7, v12, v9]
// [Asm] move_origin: [v6]
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v7]
// [Asm] defined: v13 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v26]
// [Asm] move_origin: [v25]
// [Asm] defined: v26 is X
// [Asm] defs: [v73]
// [Asm] live_set: [v11, v10, v13, zero, v12, v44, v9, v73]
// [Asm] move_origin: [v70]
// [Asm] defined: v73 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v12, v44, v9, v73]
// [Asm] move_origin: []
// [Asm] defs: [v108]
// [Asm] live_set: [v108]
// [Asm] move_origin: [v8]
// [Asm] defined: v108 is X
// [Asm] defs: []
// [Asm] live_set: [v108]
// [Asm] move_origin: []
// [Asm] defs: [v153]
// [Asm] live_set: [v11, v153, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm] move_origin: []
// [Asm] defined: v153 is X
// [Asm] defs: [v154]
// [Asm] live_set: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v154, v44, v9]
// [Asm] move_origin: []
// [Asm] defined: v154 is X
// [Asm] defs: [v61]
// [Asm] live_set: [v11, v58, v56, v10, zero, v13, v59, v57, v61, v12, v44, v9]
// [Asm] move_origin: []
// [Asm] defined: v61 is X
// [Asm] defs: [v152]
// [Asm] live_set: [v11, v58, v56, v10, zero, v13, v152, v59, v57, v61, v12, v44, v9]
// [Asm] move_origin: []
// [Asm] defined: v152 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v56, v10, zero, v13, v59, v57, v61, v12, v44, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v33]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v33, v9]
// [Asm] move_origin: [v9]
// [Asm] defined: v33 is X
// [Asm] defs: [v34]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v33, v9, v34]
// [Asm] move_origin: [v10]
// [Asm] defined: v34 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v11, v10, v13, zero, v8, v35, v12, v33, v9, v34]
// [Asm] move_origin: [v8]
// [Asm] defined: v35 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v11, v10, v13, zero, v36, v8, v35, v12, v33, v9, v34]
// [Asm] move_origin: [v11]
// [Asm] defined: v36 is X
// [Asm] defs: [v37]
// [Asm] live_set: [v11, v10, v13, zero, v36, v8, v35, v37, v12, v33, v9, v34]
// [Asm] move_origin: [v12]
// [Asm] defined: v37 is X
// [Asm] defs: [v38]
// [Asm] live_set: [v11, v10, v13, zero, v36, v8, v35, v37, v38, v12, v33, v9, v34]
// [Asm] move_origin: [v13]
// [Asm] defined: v38 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v24]
// [Asm] move_origin: [v8]
// [Asm] defined: v24 is X
// [Asm] defs: []
// [Asm] live_set: [v24]
// [Asm] move_origin: []
// [Asm] defs: [v64]
// [Asm] live_set: [v11, v58, v10, zero, v13, v59, v57, v12, v44, v9, v64]
// [Asm] move_origin: []
// [Asm] defined: v64 is X
// [Asm] defs: [v56]
// [Asm] live_set: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm] move_origin: [v64]
// [Asm] defined: v56 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm] move_origin: [v57]
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm] move_origin: [v58]
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm] move_origin: [v59]
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm] move_origin: []
// [Asm] defs: [v100]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9, v100]
// [Asm] move_origin: []
// [Asm] defined: v100 is X
// [Asm] defs: [v101]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9, v101]
// [Asm] move_origin: []
// [Asm] defined: v101 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v103]
// [Asm] live_set: [v11, v10, v13, zero, v103, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v103 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v103]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v24]
// [Asm] live_set: [v24]
// [Asm] move_origin: [v8]
// [Asm] defined: v24 is X
// [Asm] defs: [v78]
// [Asm] live_set: [v11, v10, v13, zero, v78, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v78 is X
// [Asm] defs: [v79]
// [Asm] live_set: [v11, v10, v13, zero, v79, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v79 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v79]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v39]
// [Asm] live_set: [v11, v10, zero, v13, v8, v12, v9, v39]
// [Asm] move_origin: [v9]
// [Asm] defined: v39 is X
// [Asm] defs: [v40]
// [Asm] live_set: [v11, v10, zero, v13, v8, v12, v9, v39, v40]
// [Asm] move_origin: [v10]
// [Asm] defined: v40 is X
// [Asm] defs: [v41]
// [Asm] live_set: [v11, v10, zero, v13, v41, v12, v9, v39, v40]
// [Asm] move_origin: [v8]
// [Asm] defined: v41 is X
// [Asm] defs: [v42]
// [Asm] live_set: [v11, v10, v42, zero, v13, v41, v12, v9, v39, v40]
// [Asm] move_origin: [v11]
// [Asm] defined: v42 is X
// [Asm] defs: [v43]
// [Asm] live_set: [v11, v10, v42, zero, v13, v41, v43, v12, v9, v39, v40]
// [Asm] move_origin: [v12]
// [Asm] defined: v43 is X
// [Asm] defs: [v44]
// [Asm] live_set: [v11, v10, v42, zero, v13, v41, v43, v12, v44, v9, v39, v40]
// [Asm] move_origin: [v13]
// [Asm] defined: v44 is X
// [Asm] defs: [v80]
// [Asm] live_set: [v11, v10, v13, zero, v8, v80, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v80 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v80, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, v13, zero, a0, v8, v80, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v81]
// [Asm] live_set: [v11, v10, v13, zero, v8, v81, v80, v12, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v81 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v81, v80, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v140]
// [Asm] live_set: [v11, v10, v13, zero, v8, v81, v140, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v140 is X
// [Asm] defs: [v141]
// [Asm] live_set: [v11, v10, v13, zero, v8, v81, v141, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v141 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v83]
// [Asm] live_set: [v11, v10, v13, zero, v12, v83, v9]
// [Asm] move_origin: []
// [Asm] defined: v83 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v83]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v166]
// [Asm] live_set: [v11, v10, v13, zero, v8, v166, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v166 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defs: [v71]
// [Asm] live_set: [v11, v58, v71, v10, zero, v13, v59, v12, v57, v44, v9]
// [Asm] move_origin: []
// [Asm] defined: v71 is X
// [Asm] defs: [v72]
// [Asm] live_set: [v11, v72, v58, v71, v10, zero, v13, v59, v12, v44, v9]
// [Asm] move_origin: []
// [Asm] defined: v72 is X
// [Asm] defs: [v56]
// [Asm] live_set: [v11, v72, v58, v56, v10, zero, v13, v59, v12, v44, v9]
// [Asm] move_origin: [v71]
// [Asm] defined: v56 is X
// [Asm] defs: [v57]
// [Asm] live_set: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm] move_origin: [v72]
// [Asm] defined: v57 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm] move_origin: [v58]
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm] move_origin: [v59]
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm] move_origin: []
// [Asm] defs: [v68]
// [Asm] live_set: [v11, v10, v68, zero, v13, v12, v44, v9]
// [Asm] move_origin: [v56]
// [Asm] defined: v68 is X
// [Asm] defs: [v48]
// [Asm] live_set: [v11, v10, v42, v13, v41, v43, v12, v44, v9, v39, v48, zero, v40]
// [Asm] move_origin: []
// [Asm] defined: v48 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v42, v13, v41, v43, v12, v44, v9, v39, v48, zero, v40]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v10, v42, v13, a0, v41, v43, v12, v44, v9, v39, zero, v40]
// [Asm] move_origin: [v48]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v11, v10, v42, v13, a0, v41, a1, v43, v12, v44, v9, v39, zero, v40]
// [Asm] move_origin: [v39]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v11, v10, v42, v13, a0, v41, a2, a1, v43, v12, v44, v9, v39, zero, v40]
// [Asm] move_origin: [v40]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v11, v10, v42, v13, a0, v41, a2, a1, v43, v12, a3, v44, v9, v39, zero, v40]
// [Asm] move_origin: [v42]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v11, v10, v42, v13, a0, v41, a2, a1, v43, v12, a3, v44, v9, v39, zero, a4, v40]
// [Asm] move_origin: [v43]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [v11, v10, a5, v42, v13, a0, v41, a2, a1, v43, v12, a3, v44, v9, v39, zero, a4, v40]
// [Asm] move_origin: [v44]
// [Asm] defined: a5 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, v42, v13, a0, v41, v43, v12, v44, v9, v39, zero, v40]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v49]
// [Asm] live_set: [v11, v10, v49, v42, v13, v41, v43, v12, v44, v9, v39, zero, v40]
// [Asm] move_origin: [a0]
// [Asm] defined: v49 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v49, v42, v13, v41, v43, v12, v44, v9, v39, zero, v40]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v42, zero, v13, v41, v43, v12, v44, v9, v39, v40]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v42, zero, v13, v41, v43, v12, v44, v9, v39, v40]
// [Asm] move_origin: [v39]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v42, zero, v13, v41, v43, v12, v44, v9, v39, v40]
// [Asm] move_origin: [v40]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v42, zero, v13, v41, v43, v12, v44, v9, v39, v40]
// [Asm] move_origin: [v41]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v42, zero, v13, v41, v43, v12, v44, v9, v39, v40]
// [Asm] move_origin: [v42]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v42, zero, v13, v41, v43, v12, v44, v9, v39, v40]
// [Asm] move_origin: [v43]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v42, zero, v13, v41, v43, v12, v44, v9, v39, v40]
// [Asm] move_origin: [v44]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v42, zero, v13, v41, v43, v12, v44, v9, v39, v40]
// [Asm] move_origin: []
// [Asm] defs: [v104]
// [Asm] live_set: [v11, v10, v13, zero, v8, v104, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v104 is X
// [Asm] defs: [v105]
// [Asm] live_set: [v11, v10, v13, zero, v8, v105, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v105 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v107]
// [Asm] live_set: [v11, v10, v13, zero, v107, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v107 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v107]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v76]
// [Asm] live_set: [v11, v10, v13, zero, v12, v9, v76]
// [Asm] move_origin: [zero]
// [Asm] defined: v76 is X
// [Asm] defs: [v88]
// [Asm] live_set: [v11, v10, v13, zero, v8, v88, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v88 is X
// [Asm] defs: [v89]
// [Asm] live_set: [v11, v10, v13, zero, v8, v88, v12, v9, v89]
// [Asm] move_origin: []
// [Asm] defined: v89 is X
// [Asm] defs: [v128]
// [Asm] live_set: [v11, v10, v13, zero, v8, v88, v12, v128, v9]
// [Asm] move_origin: []
// [Asm] defined: v128 is X
// [Asm] defs: [v129]
// [Asm] live_set: [v11, v10, v13, zero, v8, v88, v12, v9, v129]
// [Asm] move_origin: []
// [Asm] defined: v129 is X
// [Asm] defs: [v90]
// [Asm] live_set: [v11, v10, v13, zero, v8, v88, v90, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v90 is X
// [Asm] defs: [v91]
// [Asm] live_set: [v11, v91, v10, v13, zero, v8, v88, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v91 is X
// [Asm] defs: [v125]
// [Asm] live_set: [v11, v91, v10, v13, zero, v125, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v125 is X
// [Asm] defs: [v126]
// [Asm] live_set: [v11, v91, v10, v13, zero, v126, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v126 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v93]
// [Asm] live_set: [v11, v10, v13, zero, v12, v9, v93]
// [Asm] move_origin: []
// [Asm] defined: v93 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v93]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v164]
// [Asm] live_set: [v11, v164, v10, v13, zero, v8, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v164 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defs: [v169]
// [Asm] live_set: [v11, v10, v13, zero, v169, v8, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v169 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defs: [v165]
// [Asm] live_set: [v11, v165, v10, v13, zero, v8, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v165 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defs: [v171]
// [Asm] live_set: [v11, v10, v171, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v171 is X
// [Asm] defs: [v172]
// [Asm] live_set: [v11, v10, v13, zero, v8, v172, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v172 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v170]
// [Asm] live_set: [v11, v10, v13, zero, v8, v170, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v170 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux40l3_3"];
// [Asm]   r0 [label="v56 ← a0", color=green];
// [Asm]   r46 [label="v86 ← a0", color=green];
// [Asm]   r120 [label="v93 ← a0", color=green];
// [Asm]   r33 [label="a0", color=blue];
// [Asm]   r59 [label="v163 ← a0", color=green];
// [Asm]   r76 [label="v4 ← a2", color=green];
// [Asm]   r9 [label="v40 ← s1", color=green];
// [Asm]   r26 [label="v55 ← a3", color=green];
// [Asm]   r86 [label="v35 ← a2", color=green];
// [Asm]   r118 [label="v125 ← a0", color=green];
// [Asm]   r44 [label="a6", color=blue];
// [Asm]   r53 [label="v97 ← a1", color=green];
// [Asm]   r56 [label="v99 ← a0", color=green];
// [Asm]   r10 [label="v57 ← a1", color=green];
// [Asm]   r111 [label="v76 ← a0", color=green];
// [Asm]   r5 [label="v43 ← s3", color=green];
// [Asm]   r54 [label="v116 ← a0", color=green];
// [Asm]   r24 [label="v53 ← a1", color=green];
// [Asm]   r126 [label="v170 ← a0", color=green];
// [Asm]   r119 [label="v126 ← a0", color=green];
// [Asm]   r43 [label="a5", color=blue];
// [Asm]   r88 [label="v37 ← a4", color=green];
// [Asm]   r80 [label="v26 ← a0", color=green];
// [Asm]   r31 [label="v136 ← a0", color=green];
// [Asm]   r99 [label="v140 ← a1", color=green];
// [Asm]   r39 [label="a1", color=blue];
// [Asm]   r17 [label="v168 ← a0", color=green];
// [Asm]   r65 [label="v160 ← a0", color=green];
// [Asm]   r52 [label="v96 ← a1", color=green];
// [Asm]   r79 [label="v7 ← a5", color=green];
// [Asm]   r20 [label="v151 ← a4", color=green];
// [Asm]   r61 [label="v42 ← s0", color=green];
// [Asm]   r113 [label="v89 ← a1", color=green];
// [Asm]   r23 [label="v52 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r108 [label="v104 ← a0", color=green];
// [Asm]   r82 [label="v154 ← a4", color=green];
// [Asm]   r67 [label="v66 ← a0", color=green];
// [Asm]   r27 [label="v108 ← a0", color=green];
// [Asm]   r75 [label="v3 ← a1", color=green];
// [Asm]   r77 [label="v5 ← a3", color=green];
// [Asm]   r62 [label="v41 ← s5", color=green];
// [Asm]   r40 [label="a2", color=blue];
// [Asm]   r11 [label="v58 ← a2", color=green];
// [Asm]   r110 [label="v107 ← a0", color=green];
// [Asm]   r58 [label="v69 ← a0", color=green];
// [Asm]   r105 [label="v68 ← a0", color=green];
// [Asm]   r34 [label="t0", color=blue];
// [Asm]   r83 [label="v152 ← a4", color=green];
// [Asm]   r103 [label="v71 ← a0", color=green];
// [Asm]   r14 [label="v70 ← a0", color=green];
// [Asm]   r51 [label="v120 ← a1", color=green];
// [Asm]   r96 [label="v79 ← a0", color=green];
// [Asm]   r78 [label="v6 ← a4", color=green];
// [Asm]   r55 [label="v117 ← a0", color=green];
// [Asm]   r16 [label="v73 ← a0", color=green];
// [Asm]   r21 [label="v61 ← a5", color=green];
// [Asm]   r60 [label="v45 ← a0", color=green];
// [Asm]   r73 [label="v77 ← a0", color=green];
// [Asm]   r93 [label="v101 ← a0", color=green];
// [Asm]   r38 [label="t4", color=blue];
// [Asm]   r72 [label="v30 ← a0", color=green];
// [Asm]   r104 [label="v72 ← a1", color=green];
// [Asm]   r116 [label="v90 ← a1", color=green];
// [Asm]   r122 [label="v169 ← a0", color=green];
// [Asm]   r87 [label="v36 ← a3", color=green];
// [Asm]   r100 [label="v141 ← a1", color=green];
// [Asm]   r85 [label="v34 ← a1", color=green];
// [Asm]   r47 [label="v87 ← a0", color=green];
// [Asm]   r6 [label="v12 ← s3", color=green];
// [Asm]   r13 [label="v74 ← a0", color=green];
// [Asm]   r42 [label="a4", color=blue];
// [Asm]   r117 [label="v91 ← a1", color=green];
// [Asm]   r4 [label="v13 ← s2", color=green];
// [Asm]   r29 [label="v84 ← a0", color=green];
// [Asm]   r95 [label="v78 ← a0", color=green];
// [Asm]   r35 [label="t1", color=blue];
// [Asm]   r7 [label="v44 ← s2", color=green];
// [Asm]   r114 [label="v128 ← a1", color=green];
// [Asm]   r64 [label="v159 ← a0", color=green];
// [Asm]   r8 [label="v9 ← s4", color=green];
// [Asm]   r112 [label="v88 ← a0", color=green];
// [Asm]   r36 [label="t2", color=blue];
// [Asm]   r66 [label="v46 ← a0", color=green];
// [Asm]   r15 [label="v27 ← a0", color=green];
// [Asm]   r32 [label="v85 ← a0", color=green];
// [Asm]   r49 [label="v95 ← a1", color=green];
// [Asm]   r115 [label="v129 ← a1", color=green];
// [Asm]   r57 [label="v25 ← a0", color=green];
// [Asm]   r74 [label="v2 ← a0", color=green];
// [Asm]   r68 [label="v67 ← a1", color=green];
// [Asm]   r98 [label="v81 ← a0", color=green];
// [Asm]   r124 [label="v171 ← a0", color=green];
// [Asm]   r91 [label="v64 ← a0", color=green];
// [Asm]   r70 [label="v167 ← a0", color=green];
// [Asm]   r12 [label="v59 ← a3", color=green];
// [Asm]   r48 [label="v94 ← a0", color=green];
// [Asm]   r37 [label="t3", color=blue];
// [Asm]   r102 [label="v166 ← a0", color=green];
// [Asm]   r123 [label="v165 ← a0", color=green];
// [Asm]   r125 [label="v172 ← a0", color=green];
// [Asm]   r106 [label="v48 ← a0", color=green];
// [Asm]   r109 [label="v105 ← a0", color=green];
// [Asm]   r1 [label="v11 ← s0", color=green];
// [Asm]   r28 [label="v31 ← a0", color=green];
// [Asm]   r41 [label="a3", color=blue];
// [Asm]   r71 [label="v29 ← a0", color=green];
// [Asm]   r69 [label="v28 ← a0", color=green];
// [Asm]   r22 [label="v51 ← a0", color=green];
// [Asm]   r84 [label="v33 ← a0", color=green];
// [Asm]   r50 [label="v119 ← a1", color=green];
// [Asm]   r89 [label="v38 ← a5", color=green];
// [Asm]   r30 [label="v135 ← a0", color=green];
// [Asm]   r45 [label="a7", color=blue];
// [Asm]   r92 [label="v100 ← a0", color=green];
// [Asm]   r107 [label="v49 ← a0", color=green];
// [Asm]   r25 [label="v54 ← a2", color=green];
// [Asm]   r63 [label="v39 ← s4", color=green];
// [Asm]   r2 [label="v10 ← s1", color=green];
// [Asm]   r18 [label="v8 ← s5", color=green];
// [Asm]   r19 [label="v15 ← a1", color=green];
// [Asm]   r121 [label="v164 ← a0", color=green];
// [Asm]   r90 [label="v24 ← a0", color=green];
// [Asm]   r97 [label="v80 ← s6", color=green];
// [Asm]   r81 [label="v153 ← a4", color=green];
// [Asm]   r101 [label="v83 ← a0", color=green];
// [Asm]   r94 [label="v103 ← a0", color=green];
// [Asm]   r117 -- r118;
// [Asm]   r18 -- r49;
// [Asm]   r6 -- r102;
// [Asm]   r2 -- r38;
// [Asm]   r6 -- r70;
// [Asm]   r12 -- r91;
// [Asm]   r18 -- r99;
// [Asm]   r2 -- r78;
// [Asm]   r6 -- r48;
// [Asm]   r9 -- r107;
// [Asm]   r8 -- r36;
// [Asm]   r6 -- r68;
// [Asm]   r4 -- r101;
// [Asm]   r35 -- r61;
// [Asm]   r37 -- r62;
// [Asm]   r88 -- r89;
// [Asm]   r4 -- r44;
// [Asm]   r8 -- r101;
// [Asm]   r2 -- r91;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r107;
// [Asm]   r4 -- r48;
// [Asm]   r10 -- r103;
// [Asm]   r3 -- r86;
// [Asm]   r5 -- r65;
// [Asm]   r2 -- r51;
// [Asm]   r18 -- r85;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r70;
// [Asm]   r3 -- r31;
// [Asm]   r7 -- r62;
// [Asm]   r4 -- r113;
// [Asm]   r43 -- r78;
// [Asm]   r2 -- r41;
// [Asm]   r6 -- r121;
// [Asm]   r18 -- r44;
// [Asm]   r1 -- r68;
// [Asm]   r2 -- r123;
// [Asm]   r8 -- r106;
// [Asm]   r3 -- r48;
// [Asm]   r0 -- r6;
// [Asm]   r19 -- r70;
// [Asm]   r1 -- r112;
// [Asm]   r9 -- r62;
// [Asm]   r8 -- r95;
// [Asm]   r5 -- r35;
// [Asm]   r61 -- r62;
// [Asm]   r0 -- r81;
// [Asm]   r5 -- r107;
// [Asm]   r62 -- r64;
// [Asm]   r8 -- r16;
// [Asm]   r2 -- r48;
// [Asm]   r18 -- r119;
// [Asm]   r4 -- r83;
// [Asm]   r84 -- r87;
// [Asm]   r8 -- r97;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r29;
// [Asm]   r41 -- r63;
// [Asm]   r97 -- r98;
// [Asm]   r1 -- r11;
// [Asm]   r86 -- r89;
// [Asm]   r18 -- r37;
// [Asm]   r2 -- r98;
// [Asm]   r62 -- r65;
// [Asm]   r1 -- r35;
// [Asm]   r6 -- r56;
// [Asm]   r86 -- r88;
// [Asm]   r9 -- r39;
// [Asm]   r8 -- r125;
// [Asm]   r18 -- r43;
// [Asm]   r6 -- r114;
// [Asm]   r1 -- r117;
// [Asm]   r40 -- r42;
// [Asm]   r18 -- r63;
// [Asm]   r6 -- r25;
// [Asm]   r7 -- r44;
// [Asm]   r2 -- r73;
// [Asm]   r6 -- r62;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r103;
// [Asm]   r76 -- r79;
// [Asm]   r1 -- r55;
// [Asm]   r6 -- r116;
// [Asm]   r7 -- r103;
// [Asm]   r1 -- r105;
// [Asm]   r18 -- r84;
// [Asm]   r3 -- r104;
// [Asm]   r2 -- r50;
// [Asm]   r22 -- r26;
// [Asm]   r6 -- r46;
// [Asm]   r33 -- r35;
// [Asm]   r3 -- r83;
// [Asm]   r75 -- r78;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r1 -- r114;
// [Asm]   r3 -- r113;
// [Asm]   r8 -- r42;
// [Asm]   r5 -- r11;
// [Asm]   r8 -- r109;
// [Asm]   r18 -- r39;
// [Asm]   r18 -- r51;
// [Asm]   r10 -- r81;
// [Asm]   r18 -- r53;
// [Asm]   r74 -- r79;
// [Asm]   r3 -- r65;
// [Asm]   r6 -- r105;
// [Asm]   r34 -- r63;
// [Asm]   r1 -- r126;
// [Asm]   r2 -- r14;
// [Asm]   r4 -- r100;
// [Asm]   r3 -- r99;
// [Asm]   r9 -- r63;
// [Asm]   r48 -- r49;
// [Asm]   r8 -- r126;
// [Asm]   r9 -- r24;
// [Asm]   r6 -- r113;
// [Asm]   r33 -- r37;
// [Asm]   r8 -- r35;
// [Asm]   r8 -- r18;
// [Asm]   r9 -- r36;
// [Asm]   r7 -- r36;
// [Asm]   r1 -- r99;
// [Asm]   r2 -- r60;
// [Asm]   r42 -- r75;
// [Asm]   r4 -- r63;
// [Asm]   r44 -- r63;
// [Asm]   r6 -- r38;
// [Asm]   r8 -- r100;
// [Asm]   r0 -- r20;
// [Asm]   r3 -- r23;
// [Asm]   r112 -- r115;
// [Asm]   r62 -- r106;
// [Asm]   r8 -- r123;
// [Asm]   r1 -- r24;
// [Asm]   r2 -- r58;
// [Asm]   r6 -- r95;
// [Asm]   r2 -- r45;
// [Asm]   r8 -- r93;
// [Asm]   r4 -- r41;
// [Asm]   r11 -- r68;
// [Asm]   r12 -- r81;
// [Asm]   r5 -- r63;
// [Asm]   r40 -- r74;
// [Asm]   r5 -- r8;
// [Asm]   r1 -- r125;
// [Asm]   r3 -- r112;
// [Asm]   r3 -- r56;
// [Asm]   r6 -- r66;
// [Asm]   r8 -- r68;
// [Asm]   r4 -- r117;
// [Asm]   r4 -- r110;
// [Asm]   r1 -- r10;
// [Asm]   r4 -- r54;
// [Asm]   r1 -- r85;
// [Asm]   r3 -- r32;
// [Asm]   r6 -- r54;
// [Asm]   r18 -- r97;
// [Asm]   r38 -- r97;
// [Asm]   r1 -- r17;
// [Asm]   r9 -- r45;
// [Asm]   r4 -- r91;
// [Asm]   r42 -- r43;
// [Asm]   r3 -- r89;
// [Asm]   r36 -- r63;
// [Asm]   r4 -- r22;
// [Asm]   r76 -- r77;
// [Asm]   r9 -- r41;
// [Asm]   r3 -- r18;
// [Asm]   r38 -- r62;
// [Asm]   r8 -- r91;
// [Asm]   r4 -- r35;
// [Asm]   r42 -- r76;
// [Asm]   r11 -- r103;
// [Asm]   r1 -- r70;
// [Asm]   r1 -- r31;
// [Asm]   r1 -- r103;
// [Asm]   r98 -- r99;
// [Asm]   r42 -- r61;
// [Asm]   r3 -- r97;
// [Asm]   r4 -- r86;
// [Asm]   r6 -- r96;
// [Asm]   r43 -- r62;
// [Asm]   r2 -- r46;
// [Asm]   r6 -- r18;
// [Asm]   r8 -- r78;
// [Asm]   r7 -- r63;
// [Asm]   r18 -- r116;
// [Asm]   r8 -- r94;
// [Asm]   r3 -- r40;
// [Asm]   r43 -- r63;
// [Asm]   r18 -- r30;
// [Asm]   r3 -- r123;
// [Asm]   r61 -- r63;
// [Asm]   r2 -- r97;
// [Asm]   r3 -- r95;
// [Asm]   r8 -- r29;
// [Asm]   r5 -- r7;
// [Asm]   r18 -- r79;
// [Asm]   r2 -- r103;
// [Asm]   r0 -- r11;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r110;
// [Asm]   r4 -- r49;
// [Asm]   r12 -- r68;
// [Asm]   r18 -- r87;
// [Asm]   r6 -- r32;
// [Asm]   r67 -- r68;
// [Asm]   r53 -- r55;
// [Asm]   r41 -- r61;
// [Asm]   r2 -- r122;
// [Asm]   r9 -- r60;
// [Asm]   r6 -- r126;
// [Asm]   r11 -- r91;
// [Asm]   r1 -- r23;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r23;
// [Asm]   r18 -- r115;
// [Asm]   r43 -- r76;
// [Asm]   r4 -- r20;
// [Asm]   r1 -- r60;
// [Asm]   r25 -- r26;
// [Asm]   r6 -- r16;
// [Asm]   r33 -- r39;
// [Asm]   r4 -- r30;
// [Asm]   r1 -- r65;
// [Asm]   r1 -- r66;
// [Asm]   r8 -- r110;
// [Asm]   r35 -- r62;
// [Asm]   r1 -- r39;
// [Asm]   r6 -- r123;
// [Asm]   r9 -- r44;
// [Asm]   r2 -- r63;
// [Asm]   r75 -- r79;
// [Asm]   r8 -- r54;
// [Asm]   r43 -- r61;
// [Asm]   r112 -- r114;
// [Asm]   r1 -- r106;
// [Asm]   r7 -- r37;
// [Asm]   r4 -- r11;
// [Asm]   r9 -- r38;
// [Asm]   r6 -- r112;
// [Asm]   r3 -- r84;
// [Asm]   r8 -- r52;
// [Asm]   r7 -- r33;
// [Asm]   r8 -- r67;
// [Asm]   r2 -- r104;
// [Asm]   r3 -- r55;
// [Asm]   r1 -- r83;
// [Asm]   r18 -- r48;
// [Asm]   r60 -- r61;
// [Asm]   r6 -- r82;
// [Asm]   r1 -- r84;
// [Asm]   r9 -- r65;
// [Asm]   r18 -- r117;
// [Asm]   r4 -- r39;
// [Asm]   r1 -- r73;
// [Asm]   r37 -- r61;
// [Asm]   r7 -- r68;
// [Asm]   r0 -- r7;
// [Asm]   r5 -- r43;
// [Asm]   r3 -- r109;
// [Asm]   r2 -- r110;
// [Asm]   r112 -- r113;
// [Asm]   r10 -- r21;
// [Asm]   r44 -- r97;
// [Asm]   r3 -- r116;
// [Asm]   r33 -- r38;
// [Asm]   r1 -- r93;
// [Asm]   r7 -- r106;
// [Asm]   r3 -- r44;
// [Asm]   r4 -- r111;
// [Asm]   r6 -- r81;
// [Asm]   r8 -- r31;
// [Asm]   r3 -- r91;
// [Asm]   r5 -- r33;
// [Asm]   r8 -- r51;
// [Asm]   r4 -- r34;
// [Asm]   r1 -- r30;
// [Asm]   r4 -- r97;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r2 -- r81;
// [Asm]   r6 -- r100;
// [Asm]   r5 -- r22;
// [Asm]   r1 -- r45;
// [Asm]   r39 -- r63;
// [Asm]   r61 -- r106;
// [Asm]   r62 -- r107;
// [Asm]   r11 -- r67;
// [Asm]   r1 -- r52;
// [Asm]   r112 -- r116;
// [Asm]   r6 -- r101;
// [Asm]   r8 -- r120;
// [Asm]   r6 -- r89;
// [Asm]   r3 -- r5;
// [Asm]   r18 -- r100;
// [Asm]   r4 -- r31;
// [Asm]   r8 -- r61;
// [Asm]   r12 -- r103;
// [Asm]   r8 -- r12;
// [Asm]   r45 -- r62;
// [Asm]   r8 -- r24;
// [Asm]   r33 -- r42;
// [Asm]   r3 -- r92;
// [Asm]   r6 -- r60;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r83;
// [Asm]   r10 -- r12;
// [Asm]   r39 -- r62;
// [Asm]   r12 -- r104;
// [Asm]   r75 -- r77;
// [Asm]   r2 -- r67;
// [Asm]   r18 -- r54;
// [Asm]   r87 -- r89;
// [Asm]   r84 -- r86;
// [Asm]   r4 -- r56;
// [Asm]   r0 -- r1;
// [Asm]   r23 -- r24;
// [Asm]   r3 -- r124;
// [Asm]   r4 -- r25;
// [Asm]   r8 -- r70;
// [Asm]   r8 -- r108;
// [Asm]   r3 -- r49;
// [Asm]   r2 -- r36;
// [Asm]   r8 -- r111;
// [Asm]   r18 -- r121;
// [Asm]   r42 -- r62;
// [Asm]   r6 -- r55;
// [Asm]   r12 -- r21;
// [Asm]   r7 -- r42;
// [Asm]   r6 -- r23;
// [Asm]   r4 -- r14;
// [Asm]   r3 -- r46;
// [Asm]   r7 -- r67;
// [Asm]   r7 -- r65;
// [Asm]   r1 -- r111;
// [Asm]   r18 -- r89;
// [Asm]   r2 -- r116;
// [Asm]   r3 -- r45;
// [Asm]   r4 -- r106;
// [Asm]   r2 -- r26;
// [Asm]   r1 -- r43;
// [Asm]   r4 -- r23;
// [Asm]   r1 -- r34;
// [Asm]   r7 -- r24;
// [Asm]   r6 -- r33;
// [Asm]   r8 -- r9;
// [Asm]   r33 -- r36;
// [Asm]   r2 -- r65;
// [Asm]   r2 -- r88;
// [Asm]   r42 -- r63;
// [Asm]   r6 -- r22;
// [Asm]   r41 -- r74;
// [Asm]   r6 -- r120;
// [Asm]   r8 -- r64;
// [Asm]   r3 -- r114;
// [Asm]   r2 -- r44;
// [Asm]   r2 -- r40;
// [Asm]   r12 -- r20;
// [Asm]   r23 -- r25;
// [Asm]   r1 -- r81;
// [Asm]   r0 -- r3;
// [Asm]   r1 -- r94;
// [Asm]   r6 -- r87;
// [Asm]   r4 -- r109;
// [Asm]   r33 -- r41;
// [Asm]   r7 -- r41;
// [Asm]   r4 -- r114;
// [Asm]   r63 -- r106;
// [Asm]   r2 -- r30;
// [Asm]   r5 -- r39;
// [Asm]   r7 -- r16;
// [Asm]   r8 -- r115;
// [Asm]   r7 -- r12;
// [Asm]   r44 -- r62;
// [Asm]   r20 -- r21;
// [Asm]   r7 -- r14;
// [Asm]   r1 -- r54;
// [Asm]   r3 -- r119;
// [Asm]   r8 -- r60;
// [Asm]   r2 -- r39;
// [Asm]   r6 -- r21;
// [Asm]   r4 -- r87;
// [Asm]   r38 -- r61;
// [Asm]   r4 -- r38;
// [Asm]   r8 -- r99;
// [Asm]   r2 -- r94;
// [Asm]   r4 -- r66;
// [Asm]   r33 -- r61;
// [Asm]   r1 -- r12;
// [Asm]   r3 -- r115;
// [Asm]   r6 -- r47;
// [Asm]   r18 -- r55;
// [Asm]   r7 -- r40;
// [Asm]   r3 -- r100;
// [Asm]   r1 -- r4;
// [Asm]   r2 -- r95;
// [Asm]   r4 -- r105;
// [Asm]   r1 -- r18;
// [Asm]   r2 -- r10;
// [Asm]   r6 -- r109;
// [Asm]   r18 -- r78;
// [Asm]   r34 -- r97;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r111;
// [Asm]   r4 -- r40;
// [Asm]   r43 -- r75;
// [Asm]   r34 -- r62;
// [Asm]   r87 -- r88;
// [Asm]   r3 -- r51;
// [Asm]   r3 -- r34;
// [Asm]   r36 -- r97;
// [Asm]   r9 -- r18;
// [Asm]   r1 -- r46;
// [Asm]   r18 -- r50;
// [Asm]   r84 -- r88;
// [Asm]   r8 -- r102;
// [Asm]   r7 -- r34;
// [Asm]   r1 -- r118;
// [Asm]   r18 -- r112;
// [Asm]   r18 -- r52;
// [Asm]   r4 -- r43;
// [Asm]   r4 -- r98;
// [Asm]   r40 -- r75;
// [Asm]   r11 -- r82;
// [Asm]   r8 -- r37;
// [Asm]   r7 -- r10;
// [Asm]   r2 -- r47;
// [Asm]   r40 -- r97;
// [Asm]   r6 -- r94;
// [Asm]   r76 -- r78;
// [Asm]   r3 -- r82;
// [Asm]   r98 -- r100;
// [Asm]   r2 -- r79;
// [Asm]   r8 -- r39;
// [Asm]   r78 -- r79;
// [Asm]   r3 -- r102;
// [Asm]   r7 -- r61;
// [Asm]   r4 -- r50;
// [Asm]   r8 -- r22;
// [Asm]   r4 -- r8;
// [Asm]   r8 -- r21;
// [Asm]   r3 -- r118;
// [Asm]   r1 -- r49;
// [Asm]   r8 -- r96;
// [Asm]   r18 -- r31;
// [Asm]   r63 -- r66;
// [Asm]   r2 -- r24;
// [Asm]   r8 -- r14;
// [Asm]   r34 -- r61;
// [Asm]   r3 -- r58;
// [Asm]   r2 -- r70;
// [Asm]   r7 -- r64;
// [Asm]   r2 -- r87;
// [Asm]   r6 -- r58;
// [Asm]   r17 -- r18;
// [Asm]   r33 -- r63;
// [Asm]   r1 -- r58;
// [Asm]   r4 -- r24;
// [Asm]   r2 -- r126;
// [Asm]   r9 -- r35;
// [Asm]   r4 -- r125;
// [Asm]   r6 -- r44;
// [Asm]   r62 -- r63;
// [Asm]   r3 -- r12;
// [Asm]   r7 -- r26;
// [Asm]   r6 -- r79;
// [Asm]   r6 -- r51;
// [Asm]   r85 -- r89;
// [Asm]   r1 -- r78;
// [Asm]   r19 -- r122;
// [Asm]   r9 -- r42;
// [Asm]   r5 -- r44;
// [Asm]   r3 -- r122;
// [Asm]   r8 -- r38;
// [Asm]   r3 -- r106;
// [Asm]   r8 -- r65;
// [Asm]   r7 -- r9;
// [Asm]   r6 -- r40;
// [Asm]   r4 -- r60;
// [Asm]   r9 -- r106;
// [Asm]   r7 -- r66;
// [Asm]   r18 -- r77;
// [Asm]   r6 -- r8;
// [Asm]   r2 -- r121;
// [Asm]   r6 -- r34;
// [Asm]   r5 -- r64;
// [Asm]   r10 -- r91;
// [Asm]   r18 -- r32;
// [Asm]   r77 -- r78;
// [Asm]   r4 -- r73;
// [Asm]   r18 -- r19;
// [Asm]   r8 -- r13;
// [Asm]   r2 -- r56;
// [Asm]   r8 -- r85;
// [Asm]   r3 -- r64;
// [Asm]   r6 -- r42;
// [Asm]   r8 -- r116;
// [Asm]   r1 -- r115;
// [Asm]   r3 -- r81;
// [Asm]   r2 -- r109;
// [Asm]   r18 -- r41;
// [Asm]   r4 -- r126;
// [Asm]   r3 -- r75;
// [Asm]   r7 -- r58;
// [Asm]   r4 -- r96;
// [Asm]   r112 -- r117;
// [Asm]   r1 -- r113;
// [Asm]   r18 -- r125;
// [Asm]   r4 -- r17;
// [Asm]   r1 -- r36;
// [Asm]   r6 -- r111;
// [Asm]   r2 -- r3;
// [Asm]   r18 -- r70;
// [Asm]   r8 -- r46;
// [Asm]   r3 -- r63;
// [Asm]   r1 -- r120;
// [Asm]   r5 -- r40;
// [Asm]   r39 -- r97;
// [Asm]   r3 -- r52;
// [Asm]   r2 -- r31;
// [Asm]   r1 -- r26;
// [Asm]   r0 -- r83;
// [Asm]   r3 -- r16;
// [Asm]   r4 -- r51;
// [Asm]   r8 -- r104;
// [Asm]   r39 -- r41;
// [Asm]   r3 -- r53;
// [Asm]   r2 -- r49;
// [Asm]   r7 -- r25;
// [Asm]   r4 -- r64;
// [Asm]   r3 -- r62;
// [Asm]   r63 -- r107;
// [Asm]   r18 -- r92;
// [Asm]   r45 -- r61;
// [Asm]   r6 -- r84;
// [Asm]   r3 -- r11;
// [Asm]   r9 -- r26;
// [Asm]   r1 -- r102;
// [Asm]   r2 -- r7;
// [Asm]   r18 -- r35;
// [Asm]   r18 -- r45;
// [Asm]   r2 -- r42;
// [Asm]   r7 -- r35;
// [Asm]   r17 -- r19;
// [Asm]   r1 -- r50;
// [Asm]   r6 -- r86;
// [Asm]   r117 -- r119;
// [Asm]   r8 -- r114;
// [Asm]   r10 -- r67;
// [Asm]   r3 -- r8;
// [Asm]   r3 -- r85;
// [Asm]   r8 -- r34;
// [Asm]   r18 -- r59;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r112;
// [Asm]   r22 -- r25;
// [Asm]   r18 -- r88;
// [Asm]   r37 -- r63;
// [Asm]   r1 -- r48;
// [Asm]   r1 -- r64;
// [Asm]   r9 -- r66;
// [Asm]   r4 -- r122;
// [Asm]   r3 -- r74;
// [Asm]   r3 -- r39;
// [Asm]   r5 -- r106;
// [Asm]   r6 -- r104;
// [Asm]   r48 -- r50;
// [Asm]   r8 -- r23;
// [Asm]   r1 -- r107;
// [Asm]   r5 -- r60;
// [Asm]   r4 -- r115;
// [Asm]   r3 -- r33;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r121;
// [Asm]   r2 -- r13;
// [Asm]   r74 -- r77;
// [Asm]   r8 -- r103;
// [Asm]   r1 -- r51;
// [Asm]   r3 -- r17;
// [Asm]   r39 -- r40;
// [Asm]   r1 -- r41;
// [Asm]   r1 -- r38;
// [Asm]   r6 -- r50;
// [Asm]   r2 -- r96;
// [Asm]   r3 -- r35;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r8 -- r32;
// [Asm]   r40 -- r62;
// [Asm]   r24 -- r25;
// [Asm]   r5 -- r36;
// [Asm]   r2 -- r86;
// [Asm]   r3 -- r94;
// [Asm]   r4 -- r13;
// [Asm]   r8 -- r112;
// [Asm]   r3 -- r25;
// [Asm]   r3 -- r110;
// [Asm]   r4 -- r121;
// [Asm]   r8 -- r122;
// [Asm]   r4 -- r62;
// [Asm]   r84 -- r89;
// [Asm]   r1 -- r109;
// [Asm]   r6 -- r41;
// [Asm]   r6 -- r106;
// [Asm]   r18 -- r109;
// [Asm]   r74 -- r75;
// [Asm]   r9 -- r40;
// [Asm]   r4 -- r88;
// [Asm]   r41 -- r97;
// [Asm]   r6 -- r98;
// [Asm]   r2 -- r84;
// [Asm]   r3 -- r105;
// [Asm]   r4 -- r81;
// [Asm]   r7 -- r20;
// [Asm]   r8 -- r76;
// [Asm]   r21 -- r83;
// [Asm]   r9 -- r61;
// [Asm]   r6 -- r53;
// [Asm]   r18 -- r40;
// [Asm]   r39 -- r74;
// [Asm]   r8 -- r25;
// [Asm]   r40 -- r61;
// [Asm]   r33 -- r45;
// [Asm]   r8 -- r119;
// [Asm]   r5 -- r38;
// [Asm]   r8 -- r118;
// [Asm]   r24 -- r26;
// [Asm]   r3 -- r22;
// [Asm]   r19 -- r126;
// [Asm]   r23 -- r26;
// [Asm]   r8 -- r81;
// [Asm]   r6 -- r19;
// [Asm]   r6 -- r108;
// [Asm]   r1 -- r121;
// [Asm]   r7 -- r22;
// [Asm]   r2 -- r118;
// [Asm]   r4 -- r55;
// [Asm]   r8 -- r62;
// [Asm]   r4 -- r99;
// [Asm]   r1 -- r79;
// [Asm]   r18 -- r113;
// [Asm]   r2 -- r89;
// [Asm]   r1 -- r97;
// [Asm]   r0 -- r104;
// [Asm]   r3 -- r125;
// [Asm]   r3 -- r29;
// [Asm]   r48 -- r51;
// [Asm]   r1 -- r89;
// [Asm]   r3 -- r66;
// [Asm]   r1 -- r95;
// [Asm]   r4 -- r36;
// [Asm]   r7 -- r104;
// [Asm]   r48 -- r52;
// [Asm]   r6 -- r39;
// [Asm]   r2 -- r124;
// [Asm]   r5 -- r25;
// [Asm]   r2 -- r93;
// [Asm]   r4 -- r10;
// [Asm]   r33 -- r97;
// [Asm]   r1 -- r42;
// [Asm]   r6 -- r52;
// [Asm]   r86 -- r87;
// [Asm]   r61 -- r65;
// [Asm]   r4 -- r108;
// [Asm]   r3 -- r67;
// [Asm]   r2 -- r62;
// [Asm]   r6 -- r119;
// [Asm]   r4 -- r102;
// [Asm]   r6 -- r36;
// [Asm]   r1 -- r37;
// [Asm]   r36 -- r61;
// [Asm]   r61 -- r66;
// [Asm]   r1 -- r98;
// [Asm]   r4 -- r58;
// [Asm]   r1 -- r19;
// [Asm]   r41 -- r76;
// [Asm]   r1 -- r88;
// [Asm]   r39 -- r42;
// [Asm]   r6 -- r63;
// [Asm]   r5 -- r42;
// [Asm]   r1 -- r119;
// [Asm]   r2 -- r16;
// [Asm]   r63 -- r65;
// [Asm]   r1 -- r62;
// [Asm]   r8 -- r98;
// [Asm]   r1 -- r67;
// [Asm]   r8 -- r79;
// [Asm]   r2 -- r101;
// [Asm]   r4 -- r107;
// [Asm]   r2 -- r54;
// [Asm]   r2 -- r92;
// [Asm]   r2 -- r68;
// [Asm]   r4 -- r33;
// [Asm]   r10 -- r20;
// [Asm]   r3 -- r30;
// [Asm]   r40 -- r63;
// [Asm]   r8 -- r77;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r43;
// [Asm]   r6 -- r10;
// [Asm]   r2 -- r115;
// [Asm]   r18 -- r93;
// [Asm]   r77 -- r79;
// [Asm]   r36 -- r62;
// [Asm]   r6 -- r124;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r104;
// [Asm]   r60 -- r62;
// [Asm]   r4 -- r12;
// [Asm]   r7 -- r105;
// [Asm]   r4 -- r92;
// [Asm]   r3 -- r120;
// [Asm]   r42 -- r97;
// [Asm]   r4 -- r84;
// [Asm]   r1 -- r108;
// [Asm]   r1 -- r6;
// [Asm]   r2 -- r23;
// [Asm]   r7 -- r82;
// [Asm]   r6 -- r92;
// [Asm]   r8 -- r107;
// [Asm]   r8 -- r117;
// [Asm]   r2 -- r120;
// [Asm]   r8 -- r82;
// [Asm]   r18 -- r98;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r6 -- r110;
// [Asm]   r4 -- r5;
// [Asm]   r8 -- r66;
// [Asm]   r4 -- r95;
// [Asm]   r8 -- r56;
// [Asm]   r6 -- r49;
// [Asm]   r1 -- r53;
// [Asm]   r41 -- r62;
// [Asm]   r18 -- r29;
// [Asm]   r8 -- r19;
// [Asm]   r2 -- r119;
// [Asm]   r8 -- r43;
// [Asm]   r3 -- r87;
// [Asm]   r3 -- r47;
// [Asm]   r2 -- r55;
// [Asm]   r4 -- r112;
// [Asm]   r6 -- r12;
// [Asm]   r19 -- r102;
// [Asm]   r4 -- r118;
// [Asm]   r7 -- r81;
// [Asm]   r18 -- r36;
// [Asm]   r22 -- r24;
// [Asm]   r6 -- r24;
// [Asm]   r11 -- r83;
// [Asm]   r1 -- r124;
// [Asm]   r2 -- r29;
// [Asm]   r6 -- r37;
// [Asm]   r9 -- r34;
// [Asm]   r7 -- r60;
// [Asm]   r5 -- r24;
// [Asm]   r0 -- r8;
// [Asm]   r9 -- r33;
// [Asm]   r18 -- r108;
// [Asm]   r38 -- r63;
// [Asm]   r4 -- r85;
// [Asm]   r7 -- r11;
// [Asm]   r6 -- r67;
// [Asm]   r8 -- r88;
// [Asm]   r9 -- r37;
// [Asm]   r8 -- r73;
// [Asm]   r4 -- r47;
// [Asm]   r7 -- r39;
// [Asm]   r4 -- r123;
// [Asm]   r7 -- r43;
// [Asm]   r2 -- r100;
// [Asm]   r40 -- r41;
// [Asm]   r8 -- r58;
// [Asm]   r0 -- r12;
// [Asm]   r3 -- r36;
// [Asm]   r35 -- r63;
// [Asm]   r18 -- r38;
// [Asm]   r33 -- r44;
// [Asm]   r3 -- r54;
// [Asm]   r3 -- r93;
// [Asm]   r1 -- r3;
// [Asm]   r8 -- r124;
// [Asm]   r1 -- r92;
// [Asm]   r1 -- r82;
// [Asm]   r4 -- r52;
// [Asm]   r11 -- r21;
// [Asm]   r2 -- r64;
// [Asm]   r4 -- r19;
// [Asm]   r4 -- r53;
// [Asm]   r18 -- r75;
// [Asm]   r2 -- r32;
// [Asm]   r48 -- r53;
// [Asm]   r33 -- r40;
// [Asm]   r6 -- r73;
// [Asm]   r4 -- r68;
// [Asm]   r3 -- r98;
// [Asm]   r6 -- r35;
// [Asm]   r1 -- r86;
// [Asm]   r18 -- r42;
// [Asm]   r3 -- r42;
// [Asm]   r39 -- r61;
// [Asm]   r2 -- r43;
// [Asm]   r19 -- r59;
// [Asm]   r4 -- r103;
// [Asm]   r2 -- r99;
// [Asm]   r6 -- r115;
// [Asm]   r3 -- r37;
// [Asm]   r2 -- r37;
// [Asm]   r3 -- r126;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r84 -- r85;
// [Asm]   r3 -- r68;
// [Asm]   r18 -- r34;
// [Asm]   r6 -- r85;
// [Asm]   r7 -- r91;
// [Asm]   r8 -- r105;
// [Asm]   r2 -- r34;
// [Asm]   r8 -- r45;
// [Asm]   r5 -- r62;
// [Asm]   r3 -- r78;
// [Asm]   r2 -- r6;
// [Asm]   r43 -- r74;
// [Asm]   r6 -- r91;
// [Asm]   r4 -- r67;
// [Asm]   r0 -- r9;
// [Asm]   r9 -- r23;
// [Asm]   r37 -- r97;
// [Asm]   r4 -- r65;
// [Asm]   r1 -- r40;
// [Asm]   r7 -- r38;
// [Asm]   r2 -- r12;
// [Asm]   r18 -- r46;
// [Asm]   r6 -- r117;
// [Asm]   r6 -- r83;
// [Asm]   r8 -- r48;
// [Asm]   r41 -- r42;
// [Asm]   r0 -- r10;
// [Asm]   r6 -- r64;
// [Asm]   r2 -- r108;
// [Asm]   r43 -- r77;
// [Asm]   r18 -- r33;
// [Asm]   r5 -- r66;
// [Asm]   r0 -- r4;
// [Asm]   r6 -- r65;
// [Asm]   r4 -- r120;
// [Asm]   r8 -- r86;
// [Asm]   r8 -- r30;
// [Asm]   r85 -- r88;
// [Asm]   r3 -- r19;
// [Asm]   r53 -- r54;
// [Asm]   r11 -- r104;
// [Asm]   r6 -- r125;
// [Asm]   r11 -- r20;
// [Asm]   r1 -- r8;
// [Asm]   r3 -- r101;
// [Asm]   r3 -- r38;
// [Asm]   r1 -- r47;
// [Asm]   r6 -- r30;
// [Asm]   r1 -- r22;
// [Asm]   r2 -- r52;
// [Asm]   r19 -- r123;
// [Asm]   r11 -- r12;
// [Asm]   r8 -- r113;
// [Asm]   r7 -- r107;
// [Asm]   r1 -- r13;
// [Asm]   r9 -- r64;
// [Asm]   r1 -- r104;
// [Asm]   r2 -- r114;
// [Asm]   r12 -- r82;
// [Asm]   r45 -- r63;
// [Asm]   r8 -- r20;
// [Asm]   r8 -- r47;
// [Asm]   r6 -- r99;
// [Asm]   r6 -- r20;
// [Asm]   r3 -- r50;
// [Asm]   r8 -- r41;
// [Asm]   r2 -- r107;
// [Asm]   r2 -- r102;
// [Asm]   r8 -- r53;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r9;
// [Asm]   r4 -- r32;
// [Asm]   r1 -- r29;
// [Asm]   r3 -- r117;
// [Asm]   r5 -- r45;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r8 -- r92;
// [Asm]   r2 -- r77;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r18 -- r122;
// [Asm]   r5 -- r61;
// [Asm]   r41 -- r43;
// [Asm]   r8 -- r10;
// [Asm]   r2 -- r17;
// [Asm]   r6 -- r122;
// [Asm]   r3 -- r73;
// [Asm]   r4 -- r82;
// [Asm]   r4 -- r124;
// [Asm]   r8 -- r83;
// [Asm]   r8 -- r26;
// [Asm]   r18 -- r114;
// [Asm]   r63 -- r64;
// [Asm]   r2 -- r35;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r93;
// [Asm]   r18 -- r123;
// [Asm]   r8 -- r50;
// [Asm]   r1 -- r100;
// [Asm]   r2 -- r20;
// [Asm]   r35 -- r97;
// [Asm]   r5 -- r41;
// [Asm]   r33 -- r43;
// [Asm]   r8 -- r89;
// [Asm]   r7 -- r21;
// [Asm]   r3 -- r43;
// [Asm]   r42 -- r74;
// [Asm]   r33 -- r62;
// [Asm]   r1 -- r7;
// [Asm]   r18 -- r76;
// [Asm]   r1 -- r56;
// [Asm]   r3 -- r60;
// [Asm]   r3 -- r79;
// [Asm]   r3 -- r108;
// [Asm]   r1 -- r63;
// [Asm]   r6 -- r29;
// [Asm]   r6 -- r107;
// [Asm]   r1 -- r91;
// [Asm]   r42 -- r77;
// [Asm]   r4 -- r42;
// [Asm]   r7 -- r83;
// [Asm]   r103 -- r104;
// [Asm]   r4 -- r21;
// [Asm]   r75 -- r76;
// [Asm]   r6 -- r13;
// [Asm]   r3 -- r76;
// [Asm]   r2 -- r33;
// [Asm]   r0 -- r82;
// [Asm]   r8 -- r17;
// [Asm]   r11 -- r81;
// [Asm]   r3 -- r96;
// [Asm]   r3 -- r4;
// [Asm]   r12 -- r67;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r6 -- r93;
// [Asm]   r62 -- r66;
// [Asm]   r85 -- r87;
// [Asm]   r8 -- r121;
// [Asm]   r1 -- r116;
// [Asm]   r4 -- r116;
// [Asm]   r2 -- r8;
// [Asm]   r6 -- r103;
// [Asm]   r45 -- r97;
// [Asm]   r6 -- r31;
// [Asm]   r8 -- r44;
// [Asm]   r40 -- r43;
// [Asm]   r1 -- r122;
// [Asm]   r2 -- r117;
// [Asm]   r6 -- r45;
// [Asm]   r9 -- r10;
// [Asm]   r74 -- r78;
// [Asm]   r1 -- r44;
// [Asm]   r18 -- r118;
// [Asm]   r3 -- r61;
// [Asm]   r7 -- r8;
// [Asm]   r8 -- r87;
// [Asm]   r4 -- r94;
// [Asm]   r6 -- r61;
// [Asm]   r6 -- r97;
// [Asm]   r2 -- r106;
// [Asm]   r4 -- r9;
// [Asm]   r3 -- r88;
// [Asm]   r2 -- r53;
// [Asm]   r5 -- r34;
// [Asm]   r2 -- r61;
// [Asm]   r44 -- r61;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r10 -- r83;
// [Asm]   r74 -- r76;
// [Asm]   r2 -- r125;
// [Asm]   r4 -- r37;
// [Asm]   r2 -- r18;
// [Asm]   r7 -- r45;
// [Asm]   r2 -- r105;
// [Asm]   r0 -- r68;
// [Asm]   r7 -- r13;
// [Asm]   r1 -- r32;
// [Asm]   r39 -- r43;
// [Asm]   r1 -- r123;
// [Asm]   r0 -- r21;
// [Asm]   r8 -- r55;
// [Asm]   r2 -- r82;
// [Asm]   r19 -- r121;
// [Asm]   r8 -- r33;
// [Asm]   r6 -- r26;
// [Asm]   r8 -- r49;
// [Asm]   r1 -- r101;
// [Asm]   r3 -- r77;
// [Asm]   r4 -- r70;
// [Asm]   r61 -- r107;
// [Asm]   r33 -- r34;
// [Asm]   r9 -- r22;
// [Asm]   r1 -- r96;
// [Asm]   r4 -- r46;
// [Asm]   r4 -- r119;
// [Asm]   r4 -- r45;
// [Asm]   r43 -- r97;
// [Asm]   r18 -- r124;
// [Asm]   r5 -- r37;
// [Asm]   r18 -- r126;
// [Asm]   r2 -- r113;
// [Asm]   r8 -- r40;
// [Asm]   r2 -- r66;
// [Asm]   r9 -- r43;
// [Asm]   r18 -- r102;
// [Asm]   r3 -- r41;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r6 -- r118;
// [Asm]   r3 -- r14;
// [Asm]   r10 -- r82;
// [Asm]   r60 -- r63;
// [Asm]   r7 -- r23;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r26;
// [Asm]   r2 -- r19;
// [Asm]   r41 -- r75;
// [Asm]   r12 -- r83;
// [Asm]   r85 -- r86;
// [Asm]   r4 -- r61;
// [Asm]   r61 -- r64;
// [Asm]   comment = "0:v56-> 1:v11-> 2:v10-> 3:zero-> 4:v13-> 5:v43-> 8:v9-> 10:v57-> 11:v58-> 6:v12-> 7:v44-> 12:v59-> 20:v151-> 21:v61-> 83:v152-> 81:v153-> 82:v154-> 67:v66-> 68:v67-> 91:v64-> 103:v71-> 104:v72-> 9:v40-> 22:v51-> 23:v52-> 24:v53-> 25:v54-> 26:v55-> 33:a0-> 34:t0-> 62:v41-> 35:t1-> 61:v42-> 63:v39-> 36:t2-> 37:t3-> 18:v8-> 38:t4-> 39:a1-> 40:a2-> 41:a3-> 42:a4-> 43:a5-> 97:v80-> 44:a6-> 45:a7-> 60:v45-> 64:v159-> 65:v160-> 66:v46-> 106:v48-> 107:v49-> 98:v81-> 99:v140-> 100:v141-> 13:v74-> 14:v70-> 16:v73-> 17:v168-> 19:v15-> 70:v167-> 102:v166-> 121:v164-> 122:v169-> 123:v165-> 126:v170-> 29:v84-> 30:v135-> 31:v136-> 32:v85-> 46:v86-> 48:v94-> 49:v95-> 50:v119-> 51:v120-> 52:v96-> 53:v97-> 54:v116-> 55:v117-> 58:v69-> 92:v100-> 93:v101-> 105:v68-> 108:v104-> 109:v105-> 112:v88-> 113:v89-> 114:v128-> 115:v129-> 116:v90-> 117:v91-> 118:v125-> 119:v126-> 124:v171-> 125:v172-> 47:v87-> 56:v99-> 73:v77-> 74:v2-> 75:v3-> 76:v4-> 77:v5-> 78:v6-> 79:v7-> 84:v33-> 85:v34-> 86:v35-> 87:v36-> 88:v37-> 89:v38-> 94:v103-> 95:v78-> 96:v79-> 101:v83-> 110:v107-> 120:v93-> 111:v76-> 59:v163-> 15:v27-> 27:v108-> 28:v31-> 57:v25-> 69:v28-> 71:v29-> 72:v30-> 80:v26-> 90:v24"
// [Asm]   comment = "v56<-a0;v86<-a0;v93<-a0;v163<-a0;v4<-a2;v40<-s1;v55<-a3;v35<-a2;v125<-a0;v97<-a1;v99<-a0;v57<-a1;v76<-a0;v43<-s3;v116<-a0;v53<-a1;v170<-a0;v126<-a0;v37<-a4;v26<-a0;v136<-a0;v140<-a1;v168<-a0;v160<-a0;v96<-a1;v7<-a5;v151<-a4;v42<-s0;v89<-a1;v52<-a0;v104<-a0;v154<-a4;v66<-a0;v108<-a0;v3<-a1;v5<-a3;v41<-s5;v58<-a2;v107<-a0;v69<-a0;v68<-a0;v152<-a4;v71<-a0;v70<-a0;v120<-a1;v79<-a0;v6<-a4;v117<-a0;v73<-a0;v61<-a5;v45<-a0;v77<-a0;v101<-a0;v30<-a0;v72<-a1;v90<-a1;v169<-a0;v36<-a3;v141<-a1;v34<-a1;v87<-a0;v12<-s3;v74<-a0;v91<-a1;v13<-s2;v84<-a0;v78<-a0;v44<-s2;v128<-a1;v159<-a0;v9<-s4;v88<-a0;v46<-a0;v27<-a0;v85<-a0;v95<-a1;v129<-a1;v25<-a0;v2<-a0;v67<-a1;v81<-a0;v171<-a0;v64<-a0;v167<-a0;v59<-a3;v94<-a0;v166<-a0;v165<-a0;v172<-a0;v48<-a0;v105<-a0;v11<-s0;v31<-a0;v29<-a0;v28<-a0;v51<-a0;v33<-a0;v119<-a1;v38<-a5;v135<-a0;v100<-a0;v49<-a0;v54<-a2;v39<-s4;v10<-s1;v8<-s5;v15<-a1;v164<-a0;v24<-a0;v80<-s6;v153<-a4;v83<-a0;v103<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux40l3_3"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   bge v8, v10, .aux40l3_3_1 ->   bge s5, s1, .aux40l3_3_1
// [Asm] subst   bge v56, v58, .aux40l3_3_59 ->   bge a0, a2, .aux40l3_3_59
// [Asm] subst   mv v57, zero ->   mv a1, zero
// [Asm] subst   mv v58, v40 ->   mv a2, s1
// [Asm] subst   mv v59, v43 ->   mv a3, s3
// [Asm] subst   li v168, 43 ->   li a0, 43
// [Asm] subst   beq v15, v168, .aux40l3_3_7 ->   beq a1, a0, .aux40l3_3_7
// [Asm] subst   beq v57, zero, .aux40l3_3_65 ->   beq a1, zero, .aux40l3_3_65
// [Asm] subst   li v151, 93 ->   li a4, 93
// [Asm] subst   bne v61, v151, .aux40l3_3_64 ->   bne a5, a4, .aux40l3_3_64
// [Asm] subst   addi v51, v41, 1 ->   addi a0, s5, 1
// [Asm] subst   mv v53, zero ->   mv a1, zero
// [Asm] subst   mv v54, v40 ->   mv a2, s1
// [Asm] subst   mv v55, v43 ->   mv a3, s3
// [Asm] subst   lw v84, 0(v9) ->   lw a0, 0(s4)
// [Asm] subst   slliw v135, v84, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v136, v11, v135 ->   add a0, s0, a0
// [Asm] subst   lw v85, 0(v136) ->   lw a0, 0(a0)
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   addi v87, v8, 1 ->   addi a0, s5, 1
// [Asm] subst   mv v8, v87 ->   mv s5, a0
// [Asm] subst   j .aux40l3_3_0 ->   j .aux40l3_3_0
// [Asm] subst   lw v94, 0(v9) ->   lw a0, 0(s4)
// [Asm] subst   lw v95, 0(v9) ->   lw a1, 0(s4)
// [Asm] subst   slliw v119, v95, 2 ->   slliw a1, a1, 2
// [Asm] subst   add v120, v11, v119 ->   add a1, s0, a1
// [Asm] subst   lw v96, 0(v120) ->   lw a1, 0(a1)
// [Asm] subst   addi v97, v96, 1 ->   addi a1, a1, 1
// [Asm] subst   slliw v116, v94, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v117, v11, v116 ->   add a0, s0, a0
// [Asm] subst   sw v97, 0(v117) ->   sw a1, 0(a0)
// [Asm] subst   addi v99, v8, 1 ->   addi a0, s5, 1
// [Asm] subst   mv v8, v99 ->   mv s5, a0
// [Asm] subst   j .aux40l3_3_0 ->   j .aux40l3_3_0
// [Asm] subst   li v163, 93 ->   li a0, 93
// [Asm] subst   bne v15, v163, .aux40l3_3_18 ->   bne a1, a0, .aux40l3_3_18
// [Asm] subst   lw v45, 0(v39) ->   lw a0, 0(s4)
// [Asm] subst   slliw v159, v45, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v160, v42, v159 ->   add a0, s0, a0
// [Asm] subst   lw v46, 0(v160) ->   lw a0, 0(a0)
// [Asm] subst   beq v46, zero, .aux40l3_3_50 ->   beq a0, zero, .aux40l3_3_50
// [Asm] subst   addi v66, v56, 1 ->   addi a0, a0, 1
// [Asm] subst   addi v67, v57, -1 ->   addi a1, a1, -1
// [Asm] subst   j .aux40l3_3_58 ->   j .aux40l3_3_58
// [Asm] subst   li v167, 45 ->   li a0, 45
// [Asm] subst   beq v15, v167, .aux40l3_3_9 ->   beq a1, a0, .aux40l3_3_9
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v8, v2 ->   mv s5, a0
// [Asm] subst   mv v9, v3 ->   mv s4, a1
// [Asm] subst   mv v10, v4 ->   mv s1, a2
// [Asm] subst   mv v11, v5 ->   mv s0, a3
// [Asm] subst   mv v12, v6 ->   mv s3, a4
// [Asm] subst   mv v13, v7 ->   mv s2, a5
// [Asm] subst   j .aux40l3_3_70 ->   j .aux40l3_3_70
// [Asm] subst   mv v108, v8 ->   mv a0, s5
// [Asm] subst   j .aux40l3_3_27 ->   j .aux40l3_3_27
// [Asm] subst   slliw v153, v56, 2 ->   slliw a4, a0, 2
// [Asm] subst   add v154, v59, v153 ->   add a4, a3, a4
// [Asm] subst   lw v61, 0(v154) ->   lw a5, 0(a4)
// [Asm] subst   li v152, 91 ->   li a4, 91
// [Asm] subst   beq v61, v152, .aux40l3_3_61 ->   beq a5, a4, .aux40l3_3_61
// [Asm] subst   sw v8, 0(v13) ->   sw s5, 0(s2)
// [Asm] subst   mv v33, v9 ->   mv a0, s4
// [Asm] subst   mv v34, v10 ->   mv a1, s1
// [Asm] subst   mv v35, v8 ->   mv a2, s5
// [Asm] subst   mv v36, v11 ->   mv a3, s0
// [Asm] subst   mv v37, v12 ->   mv a4, s3
// [Asm] subst   mv v38, v13 ->   mv a5, s2
// [Asm] subst   mv v24, v8 ->   mv a0, s5
// [Asm] subst   j .aux40l3_3_19 ->   j .aux40l3_3_19
// [Asm] subst   addi v64, v56, 1 ->   addi a0, a0, 1
// [Asm] subst   j .aux40l3_3_58 ->   j .aux40l3_3_58
// [Asm] subst   lw v100, 0(v9) ->   lw a0, 0(s4)
// [Asm] subst   addi v101, v100, -1 ->   addi a0, a0, -1
// [Asm] subst   sw v101, 0(v9) ->   sw a0, 0(s4)
// [Asm] subst   addi v103, v8, 1 ->   addi a0, s5, 1
// [Asm] subst   mv v8, v103 ->   mv s5, a0
// [Asm] subst   j .aux40l3_3_0 ->   j .aux40l3_3_0
// [Asm] subst   mv v24, v8 ->   mv a0, s5
// [Asm] subst   lw v78, 0(v13) ->   lw a0, 0(s2)
// [Asm] subst   addi v79, v78, 1 ->   addi a0, a0, 1
// [Asm] subst   mv v8, v79 ->   mv s5, a0
// [Asm] subst   j .aux40l3_3_0 ->   j .aux40l3_3_0
// [Asm] subst   lw v80, 0(v9) ->   lw s6, 0(s4)
// [Asm] subst   call read_ch_until_newline_or_eof1l0_0 ->   call read_ch_until_newline_or_eof1l0_0
// [Asm] subst   slliw v140, v80, 2 ->   slliw a1, s6, 2
// [Asm] subst   add v141, v11, v140 ->   add a1, s0, a1
// [Asm] subst   sw v81, 0(v141) ->   sw a0, 0(a1)
// [Asm] subst   addi v83, v8, 1 ->   addi a0, s5, 1
// [Asm] subst   mv v8, v83 ->   mv s5, a0
// [Asm] subst   j .aux40l3_3_0 ->   j .aux40l3_3_0
// [Asm] subst   li v166, 46 ->   li a0, 46
// [Asm] subst   beq v15, v166, .aux40l3_3_11 ->   beq a1, a0, .aux40l3_3_11
// [Asm] subst   addi v71, v56, 1 ->   addi a0, a0, 1
// [Asm] subst   addi v72, v57, 1 ->   addi a1, a1, 1
// [Asm] subst   j .aux40l3_3_58 ->   j .aux40l3_3_58
// [Asm] subst   addi v48, v41, 1 ->   addi a0, s5, 1
// [Asm] subst   mv a1, v39 ->   mv a1, s4
// [Asm] subst   mv a2, v40 ->   mv a2, s1
// [Asm] subst   mv a3, v42 ->   mv a3, s0
// [Asm] subst   mv a4, v43 ->   mv a4, s3
// [Asm] subst   mv a5, v44 ->   mv a5, s2
// [Asm] subst   call aux40l3_3 ->   call aux40l3_3
// [Asm] subst   sw v49, 0(v44) ->   sw a0, 0(s2)
// [Asm] subst   j .aux40l3_3_49 ->   j .aux40l3_3_49
// [Asm] subst   lw v104, 0(v9) ->   lw a0, 0(s4)
// [Asm] subst   addi v105, v104, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v105, 0(v9) ->   sw a0, 0(s4)
// [Asm] subst   addi v107, v8, 1 ->   addi a0, s5, 1
// [Asm] subst   mv v8, v107 ->   mv s5, a0
// [Asm] subst   j .aux40l3_3_0 ->   j .aux40l3_3_0
// [Asm] subst   sw v74, 0(v44) ->   sw a0, 0(s2)
// [Asm] subst   mv v76, zero ->   mv a0, zero
// [Asm] subst   lw v88, 0(v9) ->   lw a0, 0(s4)
// [Asm] subst   lw v89, 0(v9) ->   lw a1, 0(s4)
// [Asm] subst   slliw v128, v89, 2 ->   slliw a1, a1, 2
// [Asm] subst   add v129, v11, v128 ->   add a1, s0, a1
// [Asm] subst   lw v90, 0(v129) ->   lw a1, 0(a1)
// [Asm] subst   addi v91, v90, -1 ->   addi a1, a1, -1
// [Asm] subst   slliw v125, v88, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v126, v11, v125 ->   add a0, s0, a0
// [Asm] subst   sw v91, 0(v126) ->   sw a1, 0(a0)
// [Asm] subst   addi v93, v8, 1 ->   addi a0, s5, 1
// [Asm] subst   mv v8, v93 ->   mv s5, a0
// [Asm] subst   j .aux40l3_3_0 ->   j .aux40l3_3_0
// [Asm] subst   li v164, 91 ->   li a0, 91
// [Asm] subst   beq v15, v164, .aux40l3_3_15 ->   beq a1, a0, .aux40l3_3_15
// [Asm] subst   li v169, 60 ->   li a0, 60
// [Asm] subst   beq v15, v169, .aux40l3_3_5 ->   beq a1, a0, .aux40l3_3_5
// [Asm] subst   li v165, 44 ->   li a0, 44
// [Asm] subst   beq v15, v165, .aux40l3_3_13 ->   beq a1, a0, .aux40l3_3_13
// [Asm] subst   slliw v171, v8, 2 ->   slliw a0, s5, 2
// [Asm] subst   add v172, v12, v171 ->   add a0, s3, a0
// [Asm] subst   lw v15, 0(v172) ->   lw a1, 0(a0)
// [Asm] subst   li v170, 62 ->   li a0, 62
// [Asm] subst   beq v15, v170, .aux40l3_3_3 ->   beq a1, a0, .aux40l3_3_3
// [Asm] pre_assigned_registers: Self(fref=f14) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_14"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_14"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main136l2_6 ->   call main136l2_6
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v3, BlockParam(bref=b5, bpref=$b.0) -> v5, Self(fref=f0) -> v0, BlockParam(bref=b6, bpref=$b.0) -> v6, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=13)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=10)])
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10, v2]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [v8]
// [Asm] defined: v5 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [v5]
// [Asm] defined: v6 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [v7]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of read_ch_until_newline_or_eof1l0_0"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r14 [label="v10 ← a1", color=green];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r15 [label="v8 ← a0", color=green];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r16 [label="v5 ← a0", color=green];
// [Asm]   r18 [label="v9 ← a1", color=green];
// [Asm]   r19 [label="v7 ← a0", color=green];
// [Asm]   r17 [label="v6 ← a0", color=green];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r13 -- r18;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r13 -- r14;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2-> 14:v10-> 18:v9-> 15:v8-> 16:v5-> 17:v6-> 19:v7"
// [Asm]   comment = "v2<-a0;v10<-a1;v8<-a0;v5<-a0;v9<-a1;v7<-a0;v6<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of read_ch_until_newline_or_eof1l0_0"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call minimbt_read_char ->   call minimbt_read_char
// [Asm] subst   li v10, 10 ->   li a1, 10
// [Asm] subst   beq v2, v10, .read_ch_until_newline_or_eof1l0_0_1 ->   beq a0, a1, .read_ch_until_newline_or_eof1l0_0_1
// [Asm] subst   li v8, -1 ->   li a0, -1
// [Asm] subst   j .read_ch_until_newline_or_eof1l0_0_5 ->   j .read_ch_until_newline_or_eof1l0_0_5
// [Asm] subst   li v9, 13 ->   li a1, 13
// [Asm] subst   bne v2, v9, .read_ch_until_newline_or_eof1l0_0_4 ->   bne a0, a1, .read_ch_until_newline_or_eof1l0_0_4
// [Asm] subst   li v7, -1 ->   li a0, -1
// [Asm] subst   j .read_ch_until_newline_or_eof1l0_0_6 ->   j .read_ch_until_newline_or_eof1l0_0_6
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] bf5l1_4:
// [Asm] # block info: defs: [v2, t1, v16, v13, ft0, ft1, a1, s11, fa1, fa2, ft6, v20, a4, fa6, v8, a6, ft5, ft10, v4, v6, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v15, v3], uses: [v3, v16, v5, a5, a0, v13, a2, a1, s11, a3, v18, zero, v20, a4, v8, v4, v6, v15, v2], upward_exposed: [a1, s11, a0, zero], params_defs: []
// [Asm] # live_in: [a1, s11, a0, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .bf5l1_4_0:
// [Asm]   # save_ctx1  # live: [zero, a0, a1, s11]
// [Asm]   mv v2, a0  # live: [zero, a1, s11, v2]
// [Asm]   mv v3, a1  # live: [v2, zero, s11, v3]
// [Asm]   addi v20, s11, -4  # live: [v2, zero, v20, v3]
// [Asm]   andi v4, v20, -8  # live: [v2, zero, v4, v3]
// [Asm]   mv s11, v4  # live: [v2, zero, v4, s11, v3]
// [Asm]   sw zero, 0(v4)  # live: [v2, zero, v4, s11, v3]
// [Asm]   li v18, 1024  # live: [v2, v18, zero, v4, s11, v3]
// [Asm]   mul v8, v18, v18  # live: [v2, zero, v8, v4, s11, v3]
// [Asm]   slliw v15, v8, 2  # live: [v2, zero, v8, v4, s11, v15, v3]
// [Asm]   sub v16, s11, v15  # live: [v2, v16, zero, v8, v4, v3]
// [Asm]   andi v5, v16, -8  # live: [v2, v5, zero, v8, v4, v3]
// [Asm]   mv s11, v5  # live: [v2, v5, zero, v8, v4, s11, v3]
// [Asm]   mv a1, v8  # live: [v2, v5, zero, v4, a1, s11, v3]
// [Asm]   mv a0, v5  # live: [v2, v5, zero, a0, v4, a1, s11, v3]
// [Asm]   mv a2, zero  # live: [v2, v5, zero, a0, v4, a2, a1, s11, v3]
// [Asm]   call memseti32  # live: [v2, v5, zero, v4, s11, v3]
// [Asm]   addi v13, s11, -4  # live: [v2, v5, zero, v13, v4, v3]
// [Asm]   andi v6, v13, -8  # live: [v2, v5, zero, v4, v6, v3]
// [Asm]   mv s11, v6  # live: [v2, v5, zero, v4, v6, v3]
// [Asm]   sw zero, 0(v6)  # live: [v2, v5, zero, v4, v6, v3]
// [Asm]   # save_ctx2  # live: [v2, v5, zero, v4, v6, v3]
// [Asm]   mv a0, zero  # live: [v2, v5, zero, a0, v4, v6, v3]
// [Asm]   mv a1, v4  # live: [v2, v5, zero, a0, a1, v6, v3]
// [Asm]   mv a2, v2  # live: [v5, zero, a0, a2, a1, v6, v3]
// [Asm]   mv a3, v5  # live: [zero, a0, a2, a1, v6, a3, v3]
// [Asm]   mv a4, v3  # live: [zero, a0, a4, a2, a1, v6, a3]
// [Asm]   mv a5, v6  # live: [a5, zero, a0, a4, a2, a1, a3]
// [Asm]   call aux40l3_3  # live: [zero, a0]
// [Asm]   mv v11, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] aux40l3_3:
// [Asm] # block info: defs: [v2, v11, v5, v10, v13, v7, v8, v4, v6, v12, v9, v3], uses: [v3, v5, a5, a0, a4, v7, a2, v4, a1, v6, a3, v2], upward_exposed: [a2, a1, a3, a5, a0, a4], params_defs: []
// [Asm] # live_in: [a5, a0, zero, a4, a2, a1, a3], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_29:
// [Asm]   # save_ctx1  # live: [a5, zero, a0, a4, a2, a1, a3]
// [Asm]   mv v2, a0  # live: [a5, zero, a4, a2, a1, a3, v2]
// [Asm]   mv v3, a1  # live: [v2, a5, zero, a4, a2, a3, v3]
// [Asm]   mv v4, a2  # live: [v2, a5, zero, a4, v4, a3, v3]
// [Asm]   mv v5, a3  # live: [v2, v5, a5, zero, a4, v4, v3]
// [Asm]   mv v6, a4  # live: [v2, v5, a5, zero, v4, v6, v3]
// [Asm]   mv v7, a5  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v8, v2  # live: [v5, zero, v8, v7, v4, v6, v3]
// [Asm]   mv v9, v3  # live: [v5, zero, v8, v7, v4, v6, v9]
// [Asm]   mv v10, v4  # live: [v5, v10, zero, v8, v7, v6, v9]
// [Asm]   mv v11, v5  # live: [v11, v10, zero, v8, v7, v6, v9]
// [Asm]   mv v12, v6  # live: [v11, v10, zero, v8, v7, v12, v9]
// [Asm]   mv v13, v7  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v10, v8], upward_exposed: [v10, v8], params_defs: [v11, v10, v12, v9, v13, v8]
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: [v8, v9, v10, v11, v12, v13]
// [Asm] .aux40l3_3_0:
// [Asm] # control
// [Asm]   bge v8, v10, .aux40l3_3_1  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v172, v170, v171, v15], uses: [v172, v170, v12, v171, v15, v8], upward_exposed: [v12, v8], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v15, v9]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_2:
// [Asm]   slliw v171, v8, 2  # live: [v11, v10, v171, v13, zero, v8, v12, v9]
// [Asm]   add v172, v12, v171  # live: [v11, v10, v13, zero, v8, v172, v12, v9]
// [Asm]   lw v15, 0(v172)  # live: [v11, v10, v13, zero, v8, v12, v15, v9]
// [Asm] # control
// [Asm]   li v170, 62  # live: [v11, v10, v13, zero, v8, v170, v12, v15, v9]
// [Asm]   beq v15, v170, .aux40l3_3_3  # live: [v11, v10, v13, zero, v8, v12, v15, v9]
// [Asm] 
// [Asm] # block info: defs: [v169], uses: [v15, v169], upward_exposed: [v15], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v15, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v15, v9]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_4:
// [Asm] # control
// [Asm]   li v169, 60  # live: [v11, v10, v13, zero, v169, v8, v12, v15, v9]
// [Asm]   beq v15, v169, .aux40l3_3_5  # live: [v11, v10, v13, zero, v8, v12, v15, v9]
// [Asm] 
// [Asm] # block info: defs: [v168], uses: [v168, v15], upward_exposed: [v15], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v15, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v15, v9]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_6:
// [Asm] # control
// [Asm]   li v168, 43  # live: [v11, v168, v10, v13, zero, v8, v12, v15, v9]
// [Asm]   beq v15, v168, .aux40l3_3_7  # live: [v11, v10, v13, zero, v8, v12, v15, v9]
// [Asm] 
// [Asm] # block info: defs: [v167], uses: [v15, v167], upward_exposed: [v15], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v15, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v15, v9]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_8:
// [Asm] # control
// [Asm]   li v167, 45  # live: [v11, v10, v13, zero, v8, v12, v15, v9, v167]
// [Asm]   beq v15, v167, .aux40l3_3_9  # live: [v11, v10, v13, zero, v8, v12, v15, v9]
// [Asm] 
// [Asm] # block info: defs: [v166], uses: [v166, v15], upward_exposed: [v15], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v15, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v15, v9]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_10:
// [Asm] # control
// [Asm]   li v166, 46  # live: [v11, v10, v13, zero, v8, v166, v12, v15, v9]
// [Asm]   beq v15, v166, .aux40l3_3_11  # live: [v11, v10, v13, zero, v8, v12, v15, v9]
// [Asm] 
// [Asm] # block info: defs: [v165], uses: [v165, v15], upward_exposed: [v15], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v15, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v15, v9]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_12:
// [Asm] # control
// [Asm]   li v165, 44  # live: [v11, v165, v10, v13, zero, v8, v12, v15, v9]
// [Asm]   beq v15, v165, .aux40l3_3_13  # live: [v11, v10, v13, zero, v8, v12, v15, v9]
// [Asm] 
// [Asm] # block info: defs: [v164], uses: [v164, v15], upward_exposed: [v15], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v15, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v15, v9]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_14:
// [Asm] # control
// [Asm]   li v164, 91  # live: [v11, v164, v10, v13, zero, v8, v12, v15, v9]
// [Asm]   beq v15, v164, .aux40l3_3_15  # live: [v11, v10, v13, zero, v8, v12, v15, v9]
// [Asm] 
// [Asm] # block info: defs: [v163], uses: [v15, v163], upward_exposed: [v15], params_defs: []
// [Asm] # live_in: [v15, v8], live_out: [v8]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_16:
// [Asm] # control
// [Asm]   li v163, 93  # live: [v15, v163, v8]
// [Asm]   bne v15, v163, .aux40l3_3_18  # live: [v8]
// [Asm] 
// [Asm] # block info: defs: [v24], uses: [v8], upward_exposed: [v8], params_defs: []
// [Asm] # live_in: [v8], live_out: [v24]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_17:
// [Asm] # control
// [Asm]   mv v24, v8  # live: [v24]
// [Asm] 
// [Asm] # block info: defs: [v25], uses: [v24], upward_exposed: [v24], params_defs: [v24]
// [Asm] # live_in: [v24], live_out: [v25]
// [Asm] # block parameters: [v24]
// [Asm] .aux40l3_3_19:
// [Asm] # control
// [Asm]   mv v25, v24  # live: [v25]
// [Asm] 
// [Asm] # block info: defs: [v26], uses: [v25], upward_exposed: [v25], params_defs: [v25]
// [Asm] # live_in: [v25], live_out: [v26]
// [Asm] # block parameters: [v25]
// [Asm] .aux40l3_3_20:
// [Asm] # control
// [Asm]   mv v26, v25  # live: [v26]
// [Asm] 
// [Asm] # block info: defs: [v27], uses: [v26], upward_exposed: [v26], params_defs: [v26]
// [Asm] # live_in: [v26], live_out: [v27]
// [Asm] # block parameters: [v26]
// [Asm] .aux40l3_3_21:
// [Asm] # control
// [Asm]   mv v27, v26  # live: [v27]
// [Asm] 
// [Asm] # block info: defs: [v28], uses: [v27], upward_exposed: [v27], params_defs: [v27]
// [Asm] # live_in: [v27], live_out: [v28]
// [Asm] # block parameters: [v27]
// [Asm] .aux40l3_3_22:
// [Asm] # control
// [Asm]   mv v28, v27  # live: [v28]
// [Asm] 
// [Asm] # block info: defs: [v29], uses: [v28], upward_exposed: [v28], params_defs: [v28]
// [Asm] # live_in: [v28], live_out: [v29]
// [Asm] # block parameters: [v28]
// [Asm] .aux40l3_3_23:
// [Asm] # control
// [Asm]   mv v29, v28  # live: [v29]
// [Asm] 
// [Asm] # block info: defs: [v30], uses: [v29], upward_exposed: [v29], params_defs: [v29]
// [Asm] # live_in: [v29], live_out: [v30]
// [Asm] # block parameters: [v29]
// [Asm] .aux40l3_3_24:
// [Asm] # control
// [Asm]   mv v30, v29  # live: [v30]
// [Asm] 
// [Asm] # block info: defs: [v31], uses: [v30], upward_exposed: [v30], params_defs: [v30]
// [Asm] # live_in: [v30], live_out: [v31]
// [Asm] # block parameters: [v30]
// [Asm] .aux40l3_3_25:
// [Asm] # control
// [Asm]   mv v31, v30  # live: [v31]
// [Asm] 
// [Asm] # block info: defs: [v108], uses: [v31], upward_exposed: [v31], params_defs: [v31]
// [Asm] # live_in: [v31], live_out: [v108]
// [Asm] # block parameters: [v31]
// [Asm] .aux40l3_3_26:
// [Asm] # control
// [Asm]   mv v108, v31  # live: [v108]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v108, a0], upward_exposed: [v108], params_defs: [v108]
// [Asm] # live_in: [v108], live_out: []
// [Asm] # block parameters: [v108]
// [Asm] .aux40l3_3_27:
// [Asm] # control
// [Asm]   mv a0, v108  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v108], uses: [v8], upward_exposed: [v8], params_defs: []
// [Asm] # live_in: [v8], live_out: [v108]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_1:
// [Asm] # control
// [Asm]   mv v108, v8  # live: [v108]
// [Asm]   j .aux40l3_3_27  # live: [v108]
// [Asm] 
// [Asm] # block info: defs: [v104, v105, v107, v8], uses: [v11, v10, v13, v8, v104, v105, v107, v12, v9], upward_exposed: [v11, v10, v12, v9, v13, v8], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_3:
// [Asm]   lw v104, 0(v9)  # live: [v11, v10, v13, zero, v8, v104, v12, v9]
// [Asm]   addi v105, v104, 1  # live: [v11, v10, v13, zero, v8, v105, v12, v9]
// [Asm]   sw v105, 0(v9)  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   addi v107, v8, 1  # live: [v11, v10, v13, zero, v107, v12, v9]
// [Asm] # control
// [Asm]   mv v8, v107  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   j .aux40l3_3_0  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v8, v103, v100, v101], uses: [v11, v10, v13, v8, v103, v12, v9, v100, v101], upward_exposed: [v11, v10, v12, v9, v13, v8], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_5:
// [Asm]   lw v100, 0(v9)  # live: [v11, v10, v13, zero, v8, v12, v9, v100]
// [Asm]   addi v101, v100, -1  # live: [v11, v10, v13, zero, v8, v12, v9, v101]
// [Asm]   sw v101, 0(v9)  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   addi v103, v8, 1  # live: [v11, v10, v13, zero, v103, v12, v9]
// [Asm] # control
// [Asm]   mv v8, v103  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   j .aux40l3_3_0  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v116, v94, v96, v99, v97, v120, v119, v8, v95, v117], uses: [v11, v116, v10, v13, v120, v119, v95, v12, v9, v94, v96, v99, v97, v8, v117], upward_exposed: [v11, v10, v12, v9, v13, v8], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_7:
// [Asm]   lw v94, 0(v9)  # live: [v11, v94, v10, v13, zero, v8, v12, v9]
// [Asm]   lw v95, 0(v9)  # live: [v11, v94, v10, v13, zero, v8, v95, v12, v9]
// [Asm]   slliw v119, v95, 2  # live: [v11, v94, v10, v13, zero, v119, v8, v12, v9]
// [Asm]   add v120, v11, v119  # live: [v11, v94, v10, v13, zero, v120, v8, v12, v9]
// [Asm]   lw v96, 0(v120)  # live: [v11, v94, v10, v96, v13, zero, v8, v12, v9]
// [Asm]   addi v97, v96, 1  # live: [v11, v94, v10, v13, zero, v97, v8, v12, v9]
// [Asm]   slliw v116, v94, 2  # live: [v11, v116, v10, v13, zero, v97, v8, v12, v9]
// [Asm]   add v117, v11, v116  # live: [v11, v10, v13, zero, v97, v8, v12, v117, v9]
// [Asm]   sw v97, 0(v117)  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   addi v99, v8, 1  # live: [v11, v10, v99, v13, zero, v12, v9]
// [Asm] # control
// [Asm]   mv v8, v99  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   j .aux40l3_3_0  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v91, v125, v126, v8, v88, v90, v128, v89, v129, v93], uses: [v11, v91, v10, v125, v13, v88, v12, v9, v93, v126, v8, v90, v128, v89, v129], upward_exposed: [v11, v10, v12, v9, v13, v8], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_9:
// [Asm]   lw v88, 0(v9)  # live: [v11, v10, v13, zero, v8, v88, v12, v9]
// [Asm]   lw v89, 0(v9)  # live: [v11, v10, v13, zero, v8, v88, v12, v9, v89]
// [Asm]   slliw v128, v89, 2  # live: [v11, v10, v13, zero, v8, v88, v12, v128, v9]
// [Asm]   add v129, v11, v128  # live: [v11, v10, v13, zero, v8, v88, v12, v9, v129]
// [Asm]   lw v90, 0(v129)  # live: [v11, v10, v13, zero, v8, v88, v90, v12, v9]
// [Asm]   addi v91, v90, -1  # live: [v11, v91, v10, v13, zero, v8, v88, v12, v9]
// [Asm]   slliw v125, v88, 2  # live: [v11, v91, v10, v13, zero, v125, v8, v12, v9]
// [Asm]   add v126, v11, v125  # live: [v11, v91, v10, v13, zero, v126, v8, v12, v9]
// [Asm]   sw v91, 0(v126)  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   addi v93, v8, 1  # live: [v11, v10, v13, zero, v12, v9, v93]
// [Asm] # control
// [Asm]   mv v8, v93  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   j .aux40l3_3_0  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, v86, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, ft4, v87, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, v85, fa0, v84, v136, t4, t2, v135], uses: [v11, v87, v10, a0, v13, v85, v8, v136, v84, v12, v9, v135], upward_exposed: [v11, v10, v12, v9, v13, v8], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_11:
// [Asm]   lw v84, 0(v9)  # live: [v11, v10, v13, zero, v8, v84, v12, v9]
// [Asm]   slliw v135, v84, 2  # live: [v11, v10, v13, zero, v8, v12, v9, v135]
// [Asm]   add v136, v11, v135  # live: [v11, v10, v13, zero, v8, v136, v12, v9]
// [Asm]   lw v85, 0(v136)  # live: [v11, v10, v13, zero, v8, v85, v12, v9]
// [Asm]   # save_ctx2  # live: [v11, v10, v13, zero, v8, v85, v12, v9]
// [Asm]   mv a0, v85  # live: [v11, v10, v13, zero, a0, v8, v12, v9]
// [Asm]   call minimbt_print_char  # live: [v11, v10, v13, zero, a0, v8, v12, v9]
// [Asm]   mv v86, a0  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   # restore_ctx2  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   addi v87, v8, 1  # live: [v11, v87, v10, v13, zero, v12, v9]
// [Asm] # control
// [Asm]   mv v8, v87  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   j .aux40l3_3_0  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, v81, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v141, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, v80, t2, v140, v83], uses: [v11, v10, a0, v13, v8, v80, v81, v141, v140, v83, v12, v9], upward_exposed: [v11, v10, v12, v9, v13, v8], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_13:
// [Asm]   lw v80, 0(v9)  # live: [v11, v10, v13, zero, v8, v80, v12, v9]
// [Asm]   # save_ctx2  # live: [v11, v10, v13, zero, v8, v80, v12, v9]
// [Asm]   call read_ch_until_newline_or_eof1l0_0  # live: [v11, v10, v13, zero, a0, v8, v80, v12, v9]
// [Asm]   mv v81, a0  # live: [v11, v10, v13, zero, v8, v81, v80, v12, v9]
// [Asm]   # restore_ctx2  # live: [v11, v10, v13, zero, v8, v81, v80, v12, v9]
// [Asm]   slliw v140, v80, 2  # live: [v11, v10, v13, zero, v8, v81, v140, v12, v9]
// [Asm]   add v141, v11, v140  # live: [v11, v10, v13, zero, v8, v81, v141, v12, v9]
// [Asm]   sw v81, 0(v141)  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   addi v83, v8, 1  # live: [v11, v10, v13, zero, v12, v83, v9]
// [Asm] # control
// [Asm]   mv v8, v83  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   j .aux40l3_3_0  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v36, v37, v38, v33, v34, v35], uses: [v11, v10, v13, v8, v12, v9], upward_exposed: [v11, v10, v13, v8, v12, v9], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, v36, v37, v12, v33, v9, zero, v8, v35, v38, v34]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_15:
// [Asm]   sw v8, 0(v13)  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # control
// [Asm]   mv v33, v9  # live: [v11, v10, v13, zero, v8, v12, v33, v9]
// [Asm]   mv v34, v10  # live: [v11, v10, v13, zero, v8, v12, v33, v9, v34]
// [Asm]   mv v35, v8  # live: [v11, v10, v13, zero, v8, v35, v12, v33, v9, v34]
// [Asm]   mv v36, v11  # live: [v11, v10, v13, zero, v36, v8, v35, v12, v33, v9, v34]
// [Asm]   mv v37, v12  # live: [v11, v10, v13, zero, v36, v8, v35, v37, v12, v33, v9, v34]
// [Asm]   mv v38, v13  # live: [v11, v10, v13, zero, v36, v8, v35, v37, v38, v12, v33, v9, v34]
// [Asm] 
// [Asm] # block info: defs: [v41, v43, v44, v42, v39, v40], uses: [v11, v10, v12, v9, v13, v8], upward_exposed: [v11, v10, v12, v9, v13, v8], params_defs: [v36, v37, v38, v33, v34, v35]
// [Asm] # live_in: [v11, v10, v13, v36, v37, v12, v33, v9, zero, v35, v8, v38, v34], live_out: [v11, v10, v42, zero, v13, v41, v43, v12, v44, v9, v39, v40]
// [Asm] # block parameters: [v33, v34, v35, v36, v37, v38]
// [Asm] .aux40l3_3_54:
// [Asm] # control
// [Asm]   mv v39, v9  # live: [v11, v10, zero, v13, v8, v12, v9, v39]
// [Asm]   mv v40, v10  # live: [v11, v10, zero, v13, v8, v12, v9, v39, v40]
// [Asm]   mv v41, v8  # live: [v11, v10, zero, v13, v41, v12, v9, v39, v40]
// [Asm]   mv v42, v11  # live: [v11, v10, v42, zero, v13, v41, v12, v9, v39, v40]
// [Asm]   mv v43, v12  # live: [v11, v10, v42, zero, v13, v41, v43, v12, v9, v39, v40]
// [Asm]   mv v44, v13  # live: [v11, v10, v42, zero, v13, v41, v43, v12, v44, v9, v39, v40]
// [Asm] 
// [Asm] # block info: defs: [v46, v160, v159, v45], uses: [v46, v42, zero, v159, v45, v160, v39], upward_exposed: [v42, zero, v39], params_defs: [v41, v43, v44, v42, v39, v40]
// [Asm] # live_in: [v11, v10, v42, zero, v13, v41, v43, v12, v44, v9, v39, v40], live_out: [v11, v10, zero, v42, v13, v41, v43, v12, v44, v9, v39, v40]
// [Asm] # block parameters: [v39, v40, v41, v42, v43, v44]
// [Asm] .aux40l3_3_49:
// [Asm]   lw v45, 0(v39)  # live: [v11, v10, v42, v13, v41, v43, v12, v44, v9, v39, zero, v45, v40]
// [Asm]   slliw v159, v45, 2  # live: [v11, v10, v42, v13, v159, v41, v43, v12, v44, v9, v39, zero, v40]
// [Asm]   add v160, v42, v159  # live: [v11, v10, v42, v13, v41, v43, v12, v44, v160, v9, v39, zero, v40]
// [Asm]   lw v46, 0(v160)  # live: [v11, v46, v10, v42, v13, v41, v43, v12, v44, v9, v39, zero, v40]
// [Asm] # control
// [Asm]   beq v46, zero, .aux40l3_3_50  # live: [v11, v10, zero, v42, v13, v41, v43, v12, v44, v9, v39, v40]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, v49, a5, fa4, a0, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, v48, fa3, ft3, fa0, t4, t2], uses: [v49, a5, v42, a0, v41, a2, a1, v43, a3, v44, v39, v48, a4, v40], upward_exposed: [v42, v41, v43, v44, v39, v40], params_defs: []
// [Asm] # live_in: [v11, v10, v42, zero, v13, v41, v43, v12, v44, v9, v39, v40], live_out: [v11, v10, v42, zero, v13, v41, v43, v12, v44, v9, v39, v40]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_51:
// [Asm]   addi v48, v41, 1  # live: [v11, v10, v42, v13, v41, v43, v12, v44, v9, v39, v48, zero, v40]
// [Asm]   # save_ctx2  # live: [v11, v10, v42, v13, v41, v43, v12, v44, v9, v39, v48, zero, v40]
// [Asm]   mv a0, v48  # live: [v11, v10, v42, v13, a0, v41, v43, v12, v44, v9, v39, zero, v40]
// [Asm]   mv a1, v39  # live: [v11, v10, v42, v13, a0, v41, a1, v43, v12, v44, v9, v39, zero, v40]
// [Asm]   mv a2, v40  # live: [v11, v10, v42, v13, a0, v41, a2, a1, v43, v12, v44, v9, v39, zero, v40]
// [Asm]   mv a3, v42  # live: [v11, v10, v42, v13, a0, v41, a2, a1, v43, v12, a3, v44, v9, v39, zero, v40]
// [Asm]   mv a4, v43  # live: [v11, v10, v42, v13, a0, v41, a2, a1, v43, v12, a3, v44, v9, v39, zero, a4, v40]
// [Asm]   mv a5, v44  # live: [v11, v10, a5, v42, v13, a0, v41, a2, a1, v43, v12, a3, v44, v9, v39, zero, a4, v40]
// [Asm]   call aux40l3_3  # live: [v11, v10, v42, v13, a0, v41, v43, v12, v44, v9, v39, zero, v40]
// [Asm]   mv v49, a0  # live: [v11, v10, v49, v42, v13, v41, v43, v12, v44, v9, v39, zero, v40]
// [Asm]   # restore_ctx2  # live: [v11, v10, v49, v42, v13, v41, v43, v12, v44, v9, v39, zero, v40]
// [Asm]   sw v49, 0(v44)  # live: [v11, v10, v42, zero, v13, v41, v43, v12, v44, v9, v39, v40]
// [Asm] # control
// [Asm]   mv v39, v39  # live: [v11, v10, v42, zero, v13, v41, v43, v12, v44, v9, v39, v40]
// [Asm]   mv v40, v40  # live: [v11, v10, v42, zero, v13, v41, v43, v12, v44, v9, v39, v40]
// [Asm]   mv v41, v41  # live: [v11, v10, v42, zero, v13, v41, v43, v12, v44, v9, v39, v40]
// [Asm]   mv v42, v42  # live: [v11, v10, v42, zero, v13, v41, v43, v12, v44, v9, v39, v40]
// [Asm]   mv v43, v43  # live: [v11, v10, v42, zero, v13, v41, v43, v12, v44, v9, v39, v40]
// [Asm]   mv v44, v44  # live: [v11, v10, v42, zero, v13, v41, v43, v12, v44, v9, v39, v40]
// [Asm]   j .aux40l3_3_49  # live: [v11, v10, v42, zero, v13, v41, v43, v12, v44, v9, v39, v40]
// [Asm] 
// [Asm] # block info: defs: [v52, v53, v54, v55, v51], uses: [v40, v41, v43, zero, v51], upward_exposed: [v41, v43, zero, v40], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v13, v41, v43, v12, v44, v9, v40], live_out: [v11, v53, v10, v13, v43, v52, v12, v44, v9, v51, zero, v55, v54, v40]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_50:
// [Asm]   addi v51, v41, 1  # live: [v11, v10, v13, v43, v12, v44, v9, v51, zero, v40]
// [Asm] # control
// [Asm]   mv v52, v51  # live: [v11, v10, v13, v43, v52, v12, v44, v9, v51, zero, v40]
// [Asm]   mv v53, zero  # live: [v11, v53, v10, v13, v43, v52, v12, v44, v9, v51, zero, v40]
// [Asm]   mv v54, v40  # live: [v11, v53, v10, v13, v43, v52, v12, v44, v9, v51, zero, v54, v40]
// [Asm]   mv v55, v43  # live: [v11, v53, v10, v13, v43, v52, v12, v44, v9, v51, zero, v54, v55, v40]
// [Asm] 
// [Asm] # block info: defs: [v59, v58, v56, v57], uses: [v40, v43, zero, v51], upward_exposed: [v40, v43, zero, v51], params_defs: [v52, v53, v54, v55]
// [Asm] # live_in: [v11, v53, v10, v13, v43, v52, v12, v44, v9, v51, zero, v55, v54, v40], live_out: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm] # block parameters: [v52, v53, v54, v55]
// [Asm] .aux40l3_3_72:
// [Asm] # control
// [Asm]   mv v56, v51  # live: [v11, v56, v10, zero, v13, v43, v12, v44, v9, v40]
// [Asm]   mv v57, zero  # live: [v11, v56, v10, zero, v13, v43, v57, v12, v44, v9, v40]
// [Asm]   mv v58, v40  # live: [v11, v58, v56, v10, zero, v13, v43, v57, v12, v44, v9]
// [Asm]   mv v59, v43  # live: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v58, v56], upward_exposed: [v58, v56], params_defs: [v59, v58, v56, v57]
// [Asm] # live_in: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9], live_out: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm] # block parameters: [v56, v57, v58, v59]
// [Asm] .aux40l3_3_58:
// [Asm] # control
// [Asm]   bge v56, v58, .aux40l3_3_59  # live: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm] 
// [Asm] # block info: defs: [v153, v154, v61, v152], uses: [v153, v59, v56, v154, v61, v152], upward_exposed: [v59, v56], params_defs: []
// [Asm] # live_in: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9], live_out: [v11, v58, v56, v10, zero, v13, v59, v57, v61, v12, v44, v9]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_60:
// [Asm]   slliw v153, v56, 2  # live: [v11, v153, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm]   add v154, v59, v153  # live: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v154, v44, v9]
// [Asm]   lw v61, 0(v154)  # live: [v11, v58, v56, v10, zero, v13, v59, v57, v61, v12, v44, v9]
// [Asm] # control
// [Asm]   li v152, 91  # live: [v11, v58, v56, v10, zero, v13, v152, v59, v57, v61, v12, v44, v9]
// [Asm]   beq v61, v152, .aux40l3_3_61  # live: [v11, v58, v56, v10, zero, v13, v59, v57, v61, v12, v44, v9]
// [Asm] 
// [Asm] # block info: defs: [v151], uses: [v151, v61], upward_exposed: [v61], params_defs: []
// [Asm] # live_in: [v11, v58, v56, v10, zero, v13, v59, v61, v57, v12, v44, v9], live_out: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_62:
// [Asm] # control
// [Asm]   li v151, 93  # live: [v11, v58, v56, v10, zero, v13, v151, v59, v57, v12, v61, v44, v9]
// [Asm]   bne v61, v151, .aux40l3_3_64  # live: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v57, zero], upward_exposed: [v57, zero], params_defs: []
// [Asm] # live_in: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9], live_out: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_63:
// [Asm] # control
// [Asm]   beq v57, zero, .aux40l3_3_65  # live: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm] 
// [Asm] # block info: defs: [v66, v56, v57, v67], uses: [v66, v59, v58, v56, v57, v67], upward_exposed: [v59, v58, v56, v57], params_defs: []
// [Asm] # live_in: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9], live_out: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_66:
// [Asm]   addi v66, v56, 1  # live: [v11, v66, v58, v10, zero, v13, v59, v12, v57, v44, v9]
// [Asm]   addi v67, v57, -1  # live: [v11, v66, v58, v10, zero, v13, v67, v59, v12, v44, v9]
// [Asm] # control
// [Asm]   mv v56, v66  # live: [v11, v58, v56, v10, zero, v13, v67, v59, v12, v44, v9]
// [Asm]   mv v57, v67  # live: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm]   mv v58, v58  # live: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm]   mv v59, v59  # live: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm]   j .aux40l3_3_58  # live: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm] 
// [Asm] # block info: defs: [v73], uses: [v56], upward_exposed: [v56], params_defs: []
// [Asm] # live_in: [v11, v56, v10, zero, v13, v12, v44, v9], live_out: [v11, v10, zero, v13, v12, v44, v9, v73]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_59:
// [Asm] # control
// [Asm]   mv v73, v56  # live: [v11, v10, v13, zero, v12, v44, v9, v73]
// [Asm] 
// [Asm] # block info: defs: [v74], uses: [v73], upward_exposed: [v73], params_defs: [v73]
// [Asm] # live_in: [v11, v10, zero, v13, v12, v44, v9, v73], live_out: [v11, v10, zero, v13, v74, v12, v44, v9]
// [Asm] # block parameters: [v73]
// [Asm] .aux40l3_3_70:
// [Asm] # control
// [Asm]   mv v74, v73  # live: [v11, v10, zero, v13, v74, v12, v44, v9]
// [Asm] 
// [Asm] # block info: defs: [v76], uses: [v74, v44, zero], upward_exposed: [v74, v44, zero], params_defs: [v74]
// [Asm] # live_in: [v11, v10, zero, v13, v74, v12, v44, v9], live_out: [v11, v10, v13, zero, v12, v9, v76]
// [Asm] # block parameters: [v74]
// [Asm] .aux40l3_3_55:
// [Asm]   sw v74, 0(v44)  # live: [v11, v10, v13, zero, v12, v9]
// [Asm] # control
// [Asm]   mv v76, zero  # live: [v11, v10, v13, zero, v12, v9, v76]
// [Asm] 
// [Asm] # block info: defs: [v77], uses: [v76], upward_exposed: [v76], params_defs: [v76]
// [Asm] # live_in: [v11, v10, v13, zero, v12, v9, v76], live_out: [v11, v10, v13, zero, v77, v12, v9]
// [Asm] # block parameters: [v76]
// [Asm] .aux40l3_3_52:
// [Asm] # control
// [Asm]   mv v77, v76  # live: [v11, v10, v13, zero, v77, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v79, v78, v8], uses: [v11, v10, v13, v79, v78, v12, v9], upward_exposed: [v11, v10, v12, v13, v9], params_defs: [v77]
// [Asm] # live_in: [v11, v10, v13, zero, v77, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: [v77]
// [Asm] .aux40l3_3_30:
// [Asm]   lw v78, 0(v13)  # live: [v11, v10, v13, zero, v78, v12, v9]
// [Asm]   addi v79, v78, 1  # live: [v11, v10, v13, zero, v79, v12, v9]
// [Asm] # control
// [Asm]   mv v8, v79  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   j .aux40l3_3_0  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v72, v71, v56, v57], uses: [v72, v59, v58, v71, v56, v57], upward_exposed: [v59, v58, v56, v57], params_defs: []
// [Asm] # live_in: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9], live_out: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_61:
// [Asm]   addi v71, v56, 1  # live: [v11, v58, v71, v10, zero, v13, v59, v12, v57, v44, v9]
// [Asm]   addi v72, v57, 1  # live: [v11, v72, v58, v71, v10, zero, v13, v59, v12, v44, v9]
// [Asm] # control
// [Asm]   mv v56, v71  # live: [v11, v72, v58, v56, v10, zero, v13, v59, v12, v44, v9]
// [Asm]   mv v57, v72  # live: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm]   mv v58, v58  # live: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm]   mv v59, v59  # live: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm]   j .aux40l3_3_58  # live: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm] 
// [Asm] # block info: defs: [v56, v64], uses: [v59, v58, v56, v57, v64], upward_exposed: [v59, v58, v56, v57], params_defs: []
// [Asm] # live_in: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9], live_out: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_64:
// [Asm]   addi v64, v56, 1  # live: [v11, v58, v10, zero, v13, v59, v57, v12, v44, v9, v64]
// [Asm] # control
// [Asm]   mv v56, v64  # live: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm]   mv v57, v57  # live: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm]   mv v58, v58  # live: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm]   mv v59, v59  # live: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm]   j .aux40l3_3_58  # live: [v11, v58, v56, v10, zero, v13, v59, v57, v12, v44, v9]
// [Asm] 
// [Asm] # block info: defs: [v68], uses: [v56], upward_exposed: [v56], params_defs: []
// [Asm] # live_in: [v11, v56, v10, zero, v13, v12, v44, v9], live_out: [v11, v10, v68, zero, v13, v12, v44, v9]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_65:
// [Asm] # control
// [Asm]   mv v68, v56  # live: [v11, v10, v68, zero, v13, v12, v44, v9]
// [Asm] 
// [Asm] # block info: defs: [v69], uses: [v68], upward_exposed: [v68], params_defs: [v68]
// [Asm] # live_in: [v11, v10, v68, zero, v13, v12, v44, v9], live_out: [v11, v69, v10, zero, v13, v12, v44, v9]
// [Asm] # block parameters: [v68]
// [Asm] .aux40l3_3_67:
// [Asm] # control
// [Asm]   mv v69, v68  # live: [v11, v69, v10, zero, v13, v12, v44, v9]
// [Asm] 
// [Asm] # block info: defs: [v70], uses: [v69], upward_exposed: [v69], params_defs: [v69]
// [Asm] # live_in: [v11, v69, v10, zero, v13, v12, v44, v9], live_out: [v11, v10, zero, v13, v70, v12, v44, v9]
// [Asm] # block parameters: [v69]
// [Asm] .aux40l3_3_68:
// [Asm] # control
// [Asm]   mv v70, v69  # live: [v11, v10, zero, v13, v70, v12, v44, v9]
// [Asm] 
// [Asm] # block info: defs: [v73], uses: [v70], upward_exposed: [v70], params_defs: [v70]
// [Asm] # live_in: [v11, v10, zero, v13, v70, v12, v44, v9], live_out: [v11, v10, zero, v13, v12, v44, v9, v73]
// [Asm] # block parameters: [v70]
// [Asm] .aux40l3_3_69:
// [Asm] # control
// [Asm]   mv v73, v70  # live: [v11, v10, v13, zero, v12, v44, v9, v73]
// [Asm]   j .aux40l3_3_70  # live: [v11, v10, v13, zero, v12, v44, v9, v73]
// [Asm] 
// [Asm] # block info: defs: [v24], uses: [v8], upward_exposed: [v8], params_defs: []
// [Asm] # live_in: [v8], live_out: [v24]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_18:
// [Asm] # control
// [Asm]   mv v24, v8  # live: [v24]
// [Asm]   j .aux40l3_3_19  # live: [v24]
// [Asm] 
// [Asm] # leaf false
// [Asm] read_ch_until_newline_or_eof1l0_0:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v10, a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v2]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof1l0_0_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call minimbt_read_char  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   li v10, 10  # live: [v10, v2]
// [Asm]   beq v2, v10, .read_ch_until_newline_or_eof1l0_0_1  # live: [v2]
// [Asm] 
// [Asm] # block info: defs: [v9], uses: [v9, v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v2]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof1l0_0_2:
// [Asm] # control
// [Asm]   li v9, 13  # live: [v9, v2]
// [Asm]   bne v2, v9, .read_ch_until_newline_or_eof1l0_0_4  # live: [v2]
// [Asm] 
// [Asm] # block info: defs: [v5, v8], uses: [v8], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof1l0_0_3:
// [Asm] # control
// [Asm]   li v8, -1  # live: [v8]
// [Asm]   mv v5, v8  # live: [v5]
// [Asm] 
// [Asm] # block info: defs: [v6], uses: [v5], upward_exposed: [v5], params_defs: [v5]
// [Asm] # live_in: [v5], live_out: [v6]
// [Asm] # block parameters: [v5]
// [Asm] .read_ch_until_newline_or_eof1l0_0_5:
// [Asm] # control
// [Asm]   mv v6, v5  # live: [v6]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v6, a0], upward_exposed: [v6], params_defs: [v6]
// [Asm] # live_in: [v6], live_out: []
// [Asm] # block parameters: [v6]
// [Asm] .read_ch_until_newline_or_eof1l0_0_6:
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v6, v7], uses: [v7], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v6]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof1l0_0_1:
// [Asm] # control
// [Asm]   li v7, -1  # live: [v7]
// [Asm]   mv v6, v7  # live: [v6]
// [Asm]   j .read_ch_until_newline_or_eof1l0_0_6  # live: [v6]
// [Asm] 
// [Asm] # block info: defs: [v5], uses: [v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof1l0_0_4:
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v5]
// [Asm]   j .read_ch_until_newline_or_eof1l0_0_5  # live: [v5]
// [Asm] 
// [Asm] # leaf false
// [Asm] read_prog140l3_5:
// [Asm] # block info: defs: [v3, v4, v5, v2], uses: [v3, a1, a0, v2], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, a0], live_out: [v4, v5]
// [Asm] # block parameters: []
// [Asm] .read_prog140l3_5_5:
// [Asm]   # save_ctx1  # live: [a1, a0]
// [Asm]   mv v2, a0  # live: [a1, v2]
// [Asm]   mv v3, a1  # live: [v2, v3]
// [Asm] # control
// [Asm]   mv v4, v2  # live: [v4, v3]
// [Asm]   mv v5, v3  # live: [v4, v5]
// [Asm] 
// [Asm] # block info: defs: [t1, v16, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v6, v16, a0], upward_exposed: [], params_defs: [v4, v5]
// [Asm] # live_in: [v4, v5], live_out: [v4, v5, v6]
// [Asm] # block parameters: [v4, v5]
// [Asm] .read_prog140l3_5_0:
// [Asm]   # save_ctx2  # live: [v4, v5]
// [Asm]   call read_ch_until_newline_or_eof1l0_0  # live: [v4, v5, a0]
// [Asm]   mv v6, a0  # live: [v4, v5, v6]
// [Asm]   # restore_ctx2  # live: [v4, v5, v6]
// [Asm] # control
// [Asm]   li v16, -1  # live: [v4, v5, v6, v16]
// [Asm]   beq v6, v16, .read_prog140l3_5_1  # live: [v4, v5, v6]
// [Asm] 
// [Asm] # block info: defs: [v4, v14, v15, v9], uses: [v5, v14, v4, v6, v15, v9], upward_exposed: [v4, v5, v6], params_defs: []
// [Asm] # live_in: [v4, v5, v6], live_out: [v4, v5]
// [Asm] # block parameters: []
// [Asm] .read_prog140l3_5_2:
// [Asm]   slliw v14, v4, 2  # live: [v4, v5, v6, v14]
// [Asm]   add v15, v5, v14  # live: [v4, v5, v6, v15]
// [Asm]   sw v6, 0(v15)  # live: [v4, v5]
// [Asm]   addi v9, v4, 1  # live: [v5, v9]
// [Asm] # control
// [Asm]   mv v4, v9  # live: [v4, v5]
// [Asm]   mv v5, v5  # live: [v4, v5]
// [Asm]   j .read_prog140l3_5_0  # live: [v4, v5]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v4, v5, a1, v10, a0], upward_exposed: [v4, v5], params_defs: []
// [Asm] # live_in: [v4, v5], live_out: [v11]
// [Asm] # block parameters: []
// [Asm] .read_prog140l3_5_1:
// [Asm]   # save_ctx2  # live: [v4, v5]
// [Asm]   mv a0, v4  # live: [v5, a0]
// [Asm]   mv a1, v5  # live: [a1, a0]
// [Asm]   call bf5l1_4  # live: [a0]
// [Asm]   mv v10, a0  # live: [v10]
// [Asm]   # restore_ctx2  # live: [v10]
// [Asm] # control
// [Asm]   mv v11, v10  # live: [v11]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v11, a0], upward_exposed: [v11], params_defs: [v11]
// [Asm] # live_in: [v11], live_out: []
// [Asm] # block parameters: [v11]
// [Asm] .read_prog140l3_5_3:
// [Asm] # control
// [Asm]   mv a0, v11  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_14  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main136l2_6:
// [Asm] # block info: defs: [t1, v7, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v7, a2, v6, a1, s11, v9, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main136l2_6_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   li v6, 4096  # live: [v6, s11, zero]
// [Asm]   sub v7, s11, v6  # live: [zero, v7]
// [Asm]   andi v2, v7, -8  # live: [zero, v2]
// [Asm]   mv s11, v2  # live: [zero, v2]
// [Asm]   li v9, 1024  # live: [zero, v9, v2]
// [Asm]   mv a1, v9  # live: [a1, zero, v2]
// [Asm]   mv a0, v2  # live: [a1, zero, a0, v2]
// [Asm]   mv a2, zero  # live: [a2, a1, zero, a0, v2]
// [Asm]   call memseti32  # live: [zero, v2]
// [Asm]   # save_ctx2  # live: [zero, v2]
// [Asm]   mv a0, zero  # live: [zero, a0, v2]
// [Asm]   mv a1, v2  # live: [a1, zero, a0]
// [Asm]   call read_prog140l3_5  # live: [zero, a0]
// [Asm]   mv v4, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_14:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_14_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main136l2_6  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("read_ch_until_newline_or_eof", Int), args: [], body: Let(("c", Var({val: Some(Int)})), App(Var("read_char"), []), If(Eq(Var("c"), Int(10)), Neg(Int(1), kind=Some(Int)), If(Eq(Var("c"), Int(13)), Neg(Int(1), kind=Some(Int)), Var("c"))))}, LetRec({name: ("bf", Unit), args: [("len", Int), ("prog", Array(Int))], body: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), []))))
// [Knf] build_knf: Let(("c", Var({val: Some(Int)})), App(Var("read_char"), []), If(Eq(Var("c"), Int(10)), Neg(Int(1), kind=Some(Int)), If(Eq(Var("c"), Int(13)), Neg(Int(1), kind=Some(Int)), Var("c"))))
// [Knf] build_knf: App(Var("read_char"), [])
// [Knf] build_knf: If(Eq(Var("c"), Int(10)), Neg(Int(1), kind=Some(Int)), If(Eq(Var("c"), Int(13)), Neg(Int(1), kind=Some(Int)), Var("c")))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Neg(Int(1), kind=Some(Int))
// [Knf] build_knf: If(Eq(Var("c"), Int(13)), Neg(Int(1), kind=Some(Int)), Var("c"))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(13)
// [Knf] build_knf: Neg(Int(1), kind=Some(Int))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: LetRec({name: ("bf", Unit), args: [("len", Int), ("prog", Array(Int))], body: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), [])))
// [Knf] build_knf: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit)))))
// [Knf] build_knf: Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0))
// [Knf] build_knf: Prim(Int(1024), Int(1024), Mul, kind=Some(Int))
// [Knf] build_knf: Int(1024)
// [Knf] build_knf: Int(1024)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit)))
// [Knf] build_knf: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")]))))
// [Knf] build_knf: Get(Var("prog"), Var("pc"))
// [Knf] build_knf: Var("prog")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(91)
// [Knf] build_knf: App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("skip")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Prim(Var("level"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("level")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")]))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(93)
// [Knf] build_knf: If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))]))
// [Knf] build_knf: Var("level")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("skip")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Prim(Var("level"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("level")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])
// [Knf] build_knf: Var("skip")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("level")
// [Knf] build_knf: LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))
// [Knf] build_knf: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc"))))))))))
// [Knf] build_knf: Get(Var("prog"), Var("pc"))
// [Knf] build_knf: Var("prog")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(62)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc"))))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(60)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(43)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("cells"), Get(Var("ptr"), Int(0)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc"))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(45)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("cells"), Get(Var("ptr"), Int(0)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(46)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))])
// [Knf] build_knf: Get(Var("cells"), Get(Var("ptr"), Int(0)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc"))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(44)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), []))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("read_ch_until_newline_or_eof"), [])
// [Knf] build_knf: Var("read_ch_until_newline_or_eof")
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(91)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: Put(Var("next_pc"), Int(0), Var("pc"))
// [Knf] build_knf: Var("next_pc")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))
// [Knf] build_knf: Get(Var("cells"), Get(Var("ptr"), Int(0)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit)
// [Knf] build_knf: Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)]))
// [Knf] build_knf: Var("next_pc")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])
// [Knf] build_knf: Var("skip")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), []))
// [Knf] build_knf: Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Var("next_pc")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("lp"), [])
// [Knf] build_knf: Var("lp")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("lp"), [])
// [Knf] build_knf: Var("lp")
// [Knf] build_knf: App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("next_pc"), Int(0))
// [Knf] build_knf: Var("next_pc")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc"))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(93)
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit)
// [Knf] build_knf: App(Var("aux"), [Int(0)])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))
// [Knf] build_knf: Int(1024)
// [Knf] build_knf: Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit)))
// [Knf] build_knf: Array(Var("len"), Int(0))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))
// [Knf] build_knf: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: App(Var("read_ch_until_newline_or_eof"), [])
// [Knf] build_knf: Var("read_ch_until_newline_or_eof")
// [Knf] build_knf: If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Neg(Int(1), kind=Some(Int))
// [Knf] build_knf: App(Var("bf"), [Var("i"), Var("prog")])
// [Knf] build_knf: Var("bf")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("prog")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("prog"), Var("i"), Var("x"))
// [Knf] build_knf: Var("prog")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("read_prog")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit)
// [Knf] build_knf: App(Var("read_prog"), [Int(0)])
// [Knf] build_knf: Var("read_prog")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memseti32
// [Main]   .type memseti32, @function
// [Main] memseti32:
// [Main]   blez a1, .memseti32_b1
// [Main]   slli a1, a1, 2
// [Main]   add a1, a1, a0
// [Main] .memseti32_b0:
// [Main]   sw a2, 0(a0)
// [Main]   addi a0, a0, 4
// [Main]   bne a0, a1, .memseti32_b0
// [Main] .memseti32_b1:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl bf5l1_4
// [Main]   .type bf5l1_4, @function
// [Main] # leaf false
// [Main] bf5l1_4:
// [Main] .bf5l1_4_0:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   addi a0, s11, -4
// [Main]   andi s2, a0, -8
// [Main]   mv s11, s2
// [Main]   sw zero, 0(s2)
// [Main]   li a0, 1024
// [Main]   mul a0, a0, a0
// [Main]   slliw a1, a0, 2
// [Main]   sub a1, s11, a1
// [Main]   andi s3, a1, -8
// [Main]   mv s11, s3
// [Main]   mv a1, a0
// [Main]   mv a0, s3
// [Main]   mv a2, zero
// [Main]   call memseti32
// [Main]   addi a0, s11, -4
// [Main]   andi a5, a0, -8
// [Main]   mv s11, a5
// [Main]   sw zero, 0(a5)
// [Main]   mv a0, zero
// [Main]   mv a1, s2
// [Main]   mv a2, s0
// [Main]   mv a3, s3
// [Main]   mv a4, s1
// [Main]   call aux40l3_3
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux40l3_3
// [Main]   .type aux40l3_3, @function
// [Main] # leaf false
// [Main] aux40l3_3:
// [Main] .aux40l3_3_29:
// [Main]   addi sp, sp, -64
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   sd s6, 56(sp)
// [Main]   mv s5, a0
// [Main]   mv s4, a1
// [Main]   mv s1, a2
// [Main]   mv s0, a3
// [Main]   mv s3, a4
// [Main]   mv s2, a5
// [Main] 
// [Main] .aux40l3_3_0:
// [Main]   bge s5, s1, .aux40l3_3_1
// [Main] 
// [Main] .aux40l3_3_2:
// [Main]   slliw a0, s5, 2
// [Main]   add a0, s3, a0
// [Main]   lw a1, 0(a0)
// [Main]   li a0, 62
// [Main]   beq a1, a0, .aux40l3_3_3
// [Main] 
// [Main] .aux40l3_3_4:
// [Main]   li a0, 60
// [Main]   beq a1, a0, .aux40l3_3_5
// [Main] 
// [Main] .aux40l3_3_6:
// [Main]   li a0, 43
// [Main]   beq a1, a0, .aux40l3_3_7
// [Main] 
// [Main] .aux40l3_3_8:
// [Main]   li a0, 45
// [Main]   beq a1, a0, .aux40l3_3_9
// [Main] 
// [Main] .aux40l3_3_10:
// [Main]   li a0, 46
// [Main]   beq a1, a0, .aux40l3_3_11
// [Main] 
// [Main] .aux40l3_3_12:
// [Main]   li a0, 44
// [Main]   beq a1, a0, .aux40l3_3_13
// [Main] 
// [Main] .aux40l3_3_14:
// [Main]   li a0, 91
// [Main]   beq a1, a0, .aux40l3_3_15
// [Main] 
// [Main] .aux40l3_3_16:
// [Main]   li a0, 93
// [Main]   bne a1, a0, .aux40l3_3_18
// [Main] 
// [Main] .aux40l3_3_17:
// [Main]   mv a0, s5
// [Main] 
// [Main] .aux40l3_3_19:
// [Main] 
// [Main] .aux40l3_3_20:
// [Main] 
// [Main] .aux40l3_3_21:
// [Main] 
// [Main] .aux40l3_3_22:
// [Main] 
// [Main] .aux40l3_3_23:
// [Main] 
// [Main] .aux40l3_3_24:
// [Main] 
// [Main] .aux40l3_3_25:
// [Main] 
// [Main] .aux40l3_3_26:
// [Main] 
// [Main] .aux40l3_3_27:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   ld s6, 56(sp)
// [Main]   addi sp, sp, 64
// [Main]   ret
// [Main] 
// [Main] .aux40l3_3_1:
// [Main]   mv a0, s5
// [Main]   j .aux40l3_3_27
// [Main] 
// [Main] .aux40l3_3_3:
// [Main]   lw a0, 0(s4)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s4)
// [Main]   addi a0, s5, 1
// [Main]   mv s5, a0
// [Main]   j .aux40l3_3_0
// [Main] 
// [Main] .aux40l3_3_5:
// [Main]   lw a0, 0(s4)
// [Main]   addi a0, a0, -1
// [Main]   sw a0, 0(s4)
// [Main]   addi a0, s5, 1
// [Main]   mv s5, a0
// [Main]   j .aux40l3_3_0
// [Main] 
// [Main] .aux40l3_3_7:
// [Main]   lw a0, 0(s4)
// [Main]   lw a1, 0(s4)
// [Main]   slliw a1, a1, 2
// [Main]   add a1, s0, a1
// [Main]   lw a1, 0(a1)
// [Main]   addi a1, a1, 1
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s0, a0
// [Main]   sw a1, 0(a0)
// [Main]   addi a0, s5, 1
// [Main]   mv s5, a0
// [Main]   j .aux40l3_3_0
// [Main] 
// [Main] .aux40l3_3_9:
// [Main]   lw a0, 0(s4)
// [Main]   lw a1, 0(s4)
// [Main]   slliw a1, a1, 2
// [Main]   add a1, s0, a1
// [Main]   lw a1, 0(a1)
// [Main]   addi a1, a1, -1
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s0, a0
// [Main]   sw a1, 0(a0)
// [Main]   addi a0, s5, 1
// [Main]   mv s5, a0
// [Main]   j .aux40l3_3_0
// [Main] 
// [Main] .aux40l3_3_11:
// [Main]   lw a0, 0(s4)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s0, a0
// [Main]   lw a0, 0(a0)
// [Main]   call minimbt_print_char
// [Main]   addi a0, s5, 1
// [Main]   mv s5, a0
// [Main]   j .aux40l3_3_0
// [Main] 
// [Main] .aux40l3_3_13:
// [Main]   lw s6, 0(s4)
// [Main]   call read_ch_until_newline_or_eof1l0_0
// [Main]   slliw a1, s6, 2
// [Main]   add a1, s0, a1
// [Main]   sw a0, 0(a1)
// [Main]   addi a0, s5, 1
// [Main]   mv s5, a0
// [Main]   j .aux40l3_3_0
// [Main] 
// [Main] .aux40l3_3_15:
// [Main]   sw s5, 0(s2)
// [Main]   mv a0, s4
// [Main]   mv a1, s1
// [Main]   mv a2, s5
// [Main]   mv a3, s0
// [Main]   mv a4, s3
// [Main]   mv a5, s2
// [Main] 
// [Main] .aux40l3_3_54:
// [Main] 
// [Main] .aux40l3_3_49:
// [Main]   lw a0, 0(s4)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s0, a0
// [Main]   lw a0, 0(a0)
// [Main]   beq a0, zero, .aux40l3_3_50
// [Main] 
// [Main] .aux40l3_3_51:
// [Main]   addi a0, s5, 1
// [Main]   mv a1, s4
// [Main]   mv a2, s1
// [Main]   mv a3, s0
// [Main]   mv a4, s3
// [Main]   mv a5, s2
// [Main]   call aux40l3_3
// [Main]   sw a0, 0(s2)
// [Main]   j .aux40l3_3_49
// [Main] 
// [Main] .aux40l3_3_50:
// [Main]   addi a0, s5, 1
// [Main]   mv a1, zero
// [Main]   mv a2, s1
// [Main]   mv a3, s3
// [Main] 
// [Main] .aux40l3_3_72:
// [Main]   mv a1, zero
// [Main]   mv a2, s1
// [Main]   mv a3, s3
// [Main] 
// [Main] .aux40l3_3_58:
// [Main]   bge a0, a2, .aux40l3_3_59
// [Main] 
// [Main] .aux40l3_3_60:
// [Main]   slliw a4, a0, 2
// [Main]   add a4, a3, a4
// [Main]   lw a5, 0(a4)
// [Main]   li a4, 91
// [Main]   beq a5, a4, .aux40l3_3_61
// [Main] 
// [Main] .aux40l3_3_62:
// [Main]   li a4, 93
// [Main]   bne a5, a4, .aux40l3_3_64
// [Main] 
// [Main] .aux40l3_3_63:
// [Main]   beq a1, zero, .aux40l3_3_65
// [Main] 
// [Main] .aux40l3_3_66:
// [Main]   addi a0, a0, 1
// [Main]   addi a1, a1, -1
// [Main]   j .aux40l3_3_58
// [Main] 
// [Main] .aux40l3_3_59:
// [Main] 
// [Main] .aux40l3_3_70:
// [Main] 
// [Main] .aux40l3_3_55:
// [Main]   sw a0, 0(s2)
// [Main]   mv a0, zero
// [Main] 
// [Main] .aux40l3_3_52:
// [Main] 
// [Main] .aux40l3_3_30:
// [Main]   lw a0, 0(s2)
// [Main]   addi a0, a0, 1
// [Main]   mv s5, a0
// [Main]   j .aux40l3_3_0
// [Main] 
// [Main] .aux40l3_3_61:
// [Main]   addi a0, a0, 1
// [Main]   addi a1, a1, 1
// [Main]   j .aux40l3_3_58
// [Main] 
// [Main] .aux40l3_3_64:
// [Main]   addi a0, a0, 1
// [Main]   j .aux40l3_3_58
// [Main] 
// [Main] .aux40l3_3_65:
// [Main] 
// [Main] .aux40l3_3_67:
// [Main] 
// [Main] .aux40l3_3_68:
// [Main] 
// [Main] .aux40l3_3_69:
// [Main]   j .aux40l3_3_70
// [Main] 
// [Main] .aux40l3_3_18:
// [Main]   mv a0, s5
// [Main]   j .aux40l3_3_19
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl read_ch_until_newline_or_eof1l0_0
// [Main]   .type read_ch_until_newline_or_eof1l0_0, @function
// [Main] # leaf false
// [Main] read_ch_until_newline_or_eof1l0_0:
// [Main] .read_ch_until_newline_or_eof1l0_0_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call minimbt_read_char
// [Main]   li a1, 10
// [Main]   beq a0, a1, .read_ch_until_newline_or_eof1l0_0_1
// [Main] 
// [Main] .read_ch_until_newline_or_eof1l0_0_2:
// [Main]   li a1, 13
// [Main]   bne a0, a1, .read_ch_until_newline_or_eof1l0_0_4
// [Main] 
// [Main] .read_ch_until_newline_or_eof1l0_0_3:
// [Main]   li a0, -1
// [Main] 
// [Main] .read_ch_until_newline_or_eof1l0_0_5:
// [Main] 
// [Main] .read_ch_until_newline_or_eof1l0_0_6:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .read_ch_until_newline_or_eof1l0_0_1:
// [Main]   li a0, -1
// [Main]   j .read_ch_until_newline_or_eof1l0_0_6
// [Main] 
// [Main] .read_ch_until_newline_or_eof1l0_0_4:
// [Main]   j .read_ch_until_newline_or_eof1l0_0_5
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl read_prog140l3_5
// [Main]   .type read_prog140l3_5, @function
// [Main] # leaf false
// [Main] read_prog140l3_5:
// [Main] .read_prog140l3_5_5:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   mv s1, a0
// [Main]   mv s0, a1
// [Main] 
// [Main] .read_prog140l3_5_0:
// [Main]   call read_ch_until_newline_or_eof1l0_0
// [Main]   mv a1, a0
// [Main]   li a0, -1
// [Main]   beq a1, a0, .read_prog140l3_5_1
// [Main] 
// [Main] .read_prog140l3_5_2:
// [Main]   slliw a0, s1, 2
// [Main]   add a0, s0, a0
// [Main]   sw a1, 0(a0)
// [Main]   addi a0, s1, 1
// [Main]   mv s1, a0
// [Main]   j .read_prog140l3_5_0
// [Main] 
// [Main] .read_prog140l3_5_1:
// [Main]   mv a0, s1
// [Main]   mv a1, s0
// [Main]   call bf5l1_4
// [Main] 
// [Main] .read_prog140l3_5_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_14
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main136l2_6
// [Main]   .type main136l2_6, @function
// [Main] # leaf false
// [Main] main136l2_6:
// [Main] .main136l2_6_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   li a0, 4096
// [Main]   sub a0, s11, a0
// [Main]   andi s0, a0, -8
// [Main]   mv s11, s0
// [Main]   li a0, 1024
// [Main]   mv a1, a0
// [Main]   mv a0, s0
// [Main]   mv a2, zero
// [Main]   call memseti32
// [Main]   mv a0, zero
// [Main]   mv a1, s0
// [Main]   call read_prog140l3_5
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_14
// [Main]   .type T$start_14, @function
// [Main] # leaf false
// [Main] T$start_14:
// [Main] .T$start_14_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main136l2_6
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function main136l2_6
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f6, mref=m0) -> $f6.m0
// [Wasm] Lowering insn Call(ty=Unit, f=f5, args=[Int32(val=0), Mem(fref=f6, mref=m0)])
// [Wasm] Get Local name Mem(fref=f6, mref=m0) -> $f6.m0
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Local Mem(fref=f6, mref=m0) -> $f6.m0
// [Wasm] Lowered function main136l2_6 to wasm
// [Wasm] Lowering function bf5l1_4
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Int32(val=1024), Int32(val=1024)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m1, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m2, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Lowering insn Call(ty=Int32, f=f3, args=[Int32(val=0), Mem(fref=f4, mref=m0), FnParam(fref=f4, fpref=$f.0), Mem(fref=f4, mref=m1), FnParam(fref=f4, fpref=$f.1), Mem(fref=f4, mref=m2)])
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Local Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Local Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function bf5l1_4 to wasm
// [Wasm] Lowering function read_prog140l3_5
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%2)])
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), offset=BlockParam(bref=b0, bpref=$b.0), width=@32), val=Insn(iref=%0))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%4), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Lowering insn Call(ty=Int32, f=f0, args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=-1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f5, fpref=$f.0), FnParam(fref=f5, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.1) -> $$f.1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function read_prog140l3_5 to wasm
// [Wasm] Lowering function aux40l3_3
// [Wasm] Lowering control Return(args=[BlockParam(bref=b27, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Lowering control Jump(target=b27, args=[BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%3), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32), val=Insn(iref=%4))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%6), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%9), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32), val=Insn(iref=%10))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%12), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.3), offset=Insn(iref=%16), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%17), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.3), offset=Insn(iref=%15), width=@32), val=Insn(iref=%18))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%20), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.3), offset=Insn(iref=%24), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%25), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.3), offset=Insn(iref=%23), width=@32), val=Insn(iref=%26))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%28), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.3), offset=Insn(iref=%31), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Insn(iref=%32)])
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%34), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Lowering insn Call(ty=Int32, f=f0, args=[])
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.3), offset=Insn(iref=%37), width=@32), val=Insn(iref=%38))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%40), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.5), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%45), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%46), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering control Jump(target=b30, args=[BlockParam(bref=b52, bpref=$b.0)])
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b49, bpref=$b.5), index=0, width=@32), val=BlockParam(bref=b55, bpref=$b.0))
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.5) -> $b49.$b.5
// [Wasm] Get Local name BlockParam(bref=b55, bpref=$b.0) -> $b55.$b.0
// [Wasm] Lowering control Jump(target=b52, args=[Unit])
// [Wasm] Lowering control Jump(target=b55, args=[BlockParam(bref=b70, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b70, bpref=$b.0) -> $b70.$b.0
// [Wasm] Get Local name BlockParam(bref=b55, bpref=$b.0) -> $b55.$b.0
// [Wasm] Lowering control Jump(target=b70, args=[BlockParam(bref=b58, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Get Local name BlockParam(bref=b70, bpref=$b.0) -> $b70.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b58, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Get Local name Insn(iref=%61) -> $%61
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b58, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.1) -> $b58.$b.1
// [Wasm] Get Local name Insn(iref=%62) -> $%62
// [Wasm] Lowering control Jump(target=b58, args=[Insn(iref=%61), Insn(iref=%62), BlockParam(bref=b58, bpref=$b.2), BlockParam(bref=b58, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%61) -> $%61
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Get Local name Insn(iref=%62) -> $%62
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.1) -> $b58.$b.1
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.2) -> $b58.$b.2
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.2) -> $b58.$b.2
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.3) -> $b58.$b.3
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.3) -> $b58.$b.3
// [Wasm] Lowering control Jump(target=b70, args=[BlockParam(bref=b69, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b69, bpref=$b.0) -> $b69.$b.0
// [Wasm] Get Local name BlockParam(bref=b70, bpref=$b.0) -> $b70.$b.0
// [Wasm] Lowering control Jump(target=b69, args=[BlockParam(bref=b68, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b68, bpref=$b.0) -> $b68.$b.0
// [Wasm] Get Local name BlockParam(bref=b69, bpref=$b.0) -> $b69.$b.0
// [Wasm] Lowering control Jump(target=b68, args=[BlockParam(bref=b67, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b67, bpref=$b.0) -> $b67.$b.0
// [Wasm] Get Local name BlockParam(bref=b68, bpref=$b.0) -> $b68.$b.0
// [Wasm] Lowering control Jump(target=b67, args=[BlockParam(bref=b58, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Get Local name BlockParam(bref=b67, bpref=$b.0) -> $b67.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b58, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Get Local name Insn(iref=%66) -> $%66
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b58, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.1) -> $b58.$b.1
// [Wasm] Get Local name Insn(iref=%67) -> $%67
// [Wasm] Lowering control Jump(target=b58, args=[Insn(iref=%66), Insn(iref=%67), BlockParam(bref=b58, bpref=$b.2), BlockParam(bref=b58, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%66) -> $%66
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Get Local name Insn(iref=%67) -> $%67
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.1) -> $b58.$b.1
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.2) -> $b58.$b.2
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.2) -> $b58.$b.2
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.3) -> $b58.$b.3
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.3) -> $b58.$b.3
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b58, bpref=$b.1), Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.1) -> $b58.$b.1
// [Wasm] Get Local name Insn(iref=%65) -> $%65
// [Wasm] Lowering control Branch(cond=Insn(iref=%65), t=b65, t_args=[], f=b66, f_args=[])
// [Wasm] Get Local name Insn(iref=%65) -> $%65
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b58, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Get Local name Insn(iref=%69) -> $%69
// [Wasm] Lowering control Jump(target=b58, args=[Insn(iref=%69), BlockParam(bref=b58, bpref=$b.1), BlockParam(bref=b58, bpref=$b.2), BlockParam(bref=b58, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%69) -> $%69
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.1) -> $b58.$b.1
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.1) -> $b58.$b.1
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.2) -> $b58.$b.2
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.2) -> $b58.$b.2
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.3) -> $b58.$b.3
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.3) -> $b58.$b.3
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%59), Int32(val=93)])
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Get Local name Insn(iref=%64) -> $%64
// [Wasm] Lowering control Branch(cond=Insn(iref=%64), t=b63, t_args=[], f=b64, f_args=[])
// [Wasm] Get Local name Insn(iref=%64) -> $%64
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b58, bpref=$b.3), offset=BlockParam(bref=b58, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.3) -> $b58.$b.3
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%59), Int32(val=91)])
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Get Local name Insn(iref=%60) -> $%60
// [Wasm] Lowering control Branch(cond=Insn(iref=%60), t=b61, t_args=[], f=b62, f_args=[])
// [Wasm] Get Local name Insn(iref=%60) -> $%60
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b58, bpref=$b.2), BlockParam(bref=b58, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.2) -> $b58.$b.2
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Get Local name Insn(iref=%58) -> $%58
// [Wasm] Lowering control Branch(cond=Insn(iref=%58), t=b59, t_args=[], f=b60, f_args=[])
// [Wasm] Get Local name Insn(iref=%58) -> $%58
// [Wasm] Lowering control Jump(target=b71, args=[Insn(iref=%52), Int32(val=0), BlockParam(bref=b49, bpref=$b.1), BlockParam(bref=b49, bpref=$b.4)])
// [Wasm] Get Local name Insn(iref=%52) -> $%52
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.1) -> $b58.$b.1
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.1) -> $b49.$b.1
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.2) -> $b58.$b.2
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.4) -> $b49.$b.4
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.3) -> $b58.$b.3
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b49, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.2) -> $b49.$b.2
// [Wasm] Get Local name Insn(iref=%52) -> $%52
// [Wasm] Lowering control Jump(target=b72, args=[Insn(iref=%52), Int32(val=0), BlockParam(bref=b49, bpref=$b.1), BlockParam(bref=b49, bpref=$b.4)])
// [Wasm] Get Local name Insn(iref=%52) -> $%52
// [Wasm] Get Local name BlockParam(bref=b72, bpref=$b.0) -> $b72.$b.0
// [Wasm] Get Local name BlockParam(bref=b72, bpref=$b.1) -> $b72.$b.1
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.1) -> $b49.$b.1
// [Wasm] Get Local name BlockParam(bref=b72, bpref=$b.2) -> $b72.$b.2
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.4) -> $b49.$b.4
// [Wasm] Get Local name BlockParam(bref=b72, bpref=$b.3) -> $b72.$b.3
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b49, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.2) -> $b49.$b.2
// [Wasm] Get Local name Insn(iref=%55) -> $%55
// [Wasm] Lowering insn Call(ty=Int32, f=f3, args=[Insn(iref=%55), BlockParam(bref=b49, bpref=$b.0), BlockParam(bref=b49, bpref=$b.1), BlockParam(bref=b49, bpref=$b.3), BlockParam(bref=b49, bpref=$b.4), BlockParam(bref=b49, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%55) -> $%55
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.0) -> $b49.$b.0
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.1) -> $b49.$b.1
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.3) -> $b49.$b.3
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.4) -> $b49.$b.4
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.5) -> $b49.$b.5
// [Wasm] Get Local name Insn(iref=%56) -> $%56
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b49, bpref=$b.5), index=0, width=@32), val=Insn(iref=%56))
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.5) -> $b49.$b.5
// [Wasm] Get Local name Insn(iref=%56) -> $%56
// [Wasm] Lowering control Jump(target=b49, args=[BlockParam(bref=b49, bpref=$b.0), BlockParam(bref=b49, bpref=$b.1), BlockParam(bref=b49, bpref=$b.2), BlockParam(bref=b49, bpref=$b.3), BlockParam(bref=b49, bpref=$b.4), BlockParam(bref=b49, bpref=$b.5)])
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.0) -> $b49.$b.0
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.0) -> $b49.$b.0
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.1) -> $b49.$b.1
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.1) -> $b49.$b.1
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.2) -> $b49.$b.2
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.2) -> $b49.$b.2
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.3) -> $b49.$b.3
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.3) -> $b49.$b.3
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.4) -> $b49.$b.4
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.4) -> $b49.$b.4
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.5) -> $b49.$b.5
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.5) -> $b49.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b49, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.0) -> $b49.$b.0
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b49, bpref=$b.3), offset=Insn(iref=%49), width=@32))
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.3) -> $b49.$b.3
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Get Local name Insn(iref=%50) -> $%50
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%50), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%50) -> $%50
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Lowering control Branch(cond=Insn(iref=%51), t=b50, t_args=[], f=b51, f_args=[])
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Lowering control Jump(target=b53, args=[BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.0) -> $b49.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.1) -> $b49.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.2) -> $b49.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.3) -> $b49.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.4) -> $b49.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.5) -> $b49.$b.5
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.5), index=0, width=@32), val=BlockParam(bref=b0, bpref=$b.0))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering control Jump(target=b54, args=[BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.0) -> $b54.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.1) -> $b54.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.2) -> $b54.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.3) -> $b54.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.4) -> $b54.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.5) -> $b54.$b.5
// [Wasm] Lowering control Jump(target=b27, args=[BlockParam(bref=b26, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Lowering control Jump(target=b26, args=[BlockParam(bref=b25, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.0) -> $b25.$b.0
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Lowering control Jump(target=b25, args=[BlockParam(bref=b24, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b24, bpref=$b.0) -> $b24.$b.0
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.0) -> $b25.$b.0
// [Wasm] Lowering control Jump(target=b24, args=[BlockParam(bref=b23, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.0) -> $b23.$b.0
// [Wasm] Get Local name BlockParam(bref=b24, bpref=$b.0) -> $b24.$b.0
// [Wasm] Lowering control Jump(target=b23, args=[BlockParam(bref=b22, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b22, bpref=$b.0) -> $b22.$b.0
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.0) -> $b23.$b.0
// [Wasm] Lowering control Jump(target=b22, args=[BlockParam(bref=b21, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.0) -> $b21.$b.0
// [Wasm] Get Local name BlockParam(bref=b22, bpref=$b.0) -> $b22.$b.0
// [Wasm] Lowering control Jump(target=b21, args=[BlockParam(bref=b20, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.0) -> $b21.$b.0
// [Wasm] Lowering control Jump(target=b20, args=[BlockParam(bref=b19, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.0) -> $b19.$b.0
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Lowering control Jump(target=b19, args=[BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.0) -> $b19.$b.0
// [Wasm] Lowering control Jump(target=b19, args=[BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.0) -> $b19.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=93)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Lowering control Branch(cond=Insn(iref=%48), t=b17, t_args=[], f=b18, f_args=[])
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=91)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering control Branch(cond=Insn(iref=%42), t=b15, t_args=[], f=b16, f_args=[])
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=44)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering control Branch(cond=Insn(iref=%36), t=b13, t_args=[], f=b14, f_args=[])
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=46)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering control Branch(cond=Insn(iref=%30), t=b11, t_args=[], f=b12, f_args=[])
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=45)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering control Branch(cond=Insn(iref=%22), t=b9, t_args=[], f=b10, f_args=[])
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=43)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering control Branch(cond=Insn(iref=%14), t=b7, t_args=[], f=b8, f_args=[])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=60)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering control Branch(cond=Insn(iref=%8), t=b5, t_args=[], f=b6, f_args=[])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=62)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b28, args=[FnParam(fref=f3, fpref=$f.0), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.5) -> $$f.5
// [Wasm] Local BlockParam(bref=b69, bpref=$b.0) -> $b69.$b.0
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local BlockParam(bref=b54, bpref=$b.2) -> $b54.$b.2
// [Wasm] Local BlockParam(bref=b49, bpref=$b.4) -> $b49.$b.4
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b49, bpref=$b.0) -> $b49.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Local Insn(iref=%25) -> $%25
// [Wasm] Local Insn(iref=%59) -> $%59
// [Wasm] Local BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Local BlockParam(bref=b67, bpref=$b.0) -> $b67.$b.0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local BlockParam(bref=b25, bpref=$b.0) -> $b25.$b.0
// [Wasm] Local Insn(iref=%56) -> $%56
// [Wasm] Local Insn(iref=%49) -> $%49
// [Wasm] Local Insn(iref=%42) -> $%42
// [Wasm] Local Insn(iref=%65) -> $%65
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local BlockParam(bref=b49, bpref=$b.2) -> $b49.$b.2
// [Wasm] Local BlockParam(bref=b49, bpref=$b.5) -> $b49.$b.5
// [Wasm] Local BlockParam(bref=b23, bpref=$b.0) -> $b23.$b.0
// [Wasm] Local BlockParam(bref=b24, bpref=$b.0) -> $b24.$b.0
// [Wasm] Local Insn(iref=%31) -> $%31
// [Wasm] Local Insn(iref=%64) -> $%64
// [Wasm] Local BlockParam(bref=b54, bpref=$b.5) -> $b54.$b.5
// [Wasm] Local BlockParam(bref=b19, bpref=$b.0) -> $b19.$b.0
// [Wasm] Local BlockParam(bref=b22, bpref=$b.0) -> $b22.$b.0
// [Wasm] Local Insn(iref=%38) -> $%38
// [Wasm] Local BlockParam(bref=b54, bpref=$b.1) -> $b54.$b.1
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local Insn(iref=%67) -> $%67
// [Wasm] Local Insn(iref=%60) -> $%60
// [Wasm] Local BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Local Insn(iref=%55) -> $%55
// [Wasm] Local Insn(iref=%66) -> $%66
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%48) -> $%48
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local BlockParam(bref=b21, bpref=$b.0) -> $b21.$b.0
// [Wasm] Local BlockParam(bref=b58, bpref=$b.2) -> $b58.$b.2
// [Wasm] Local Insn(iref=%34) -> $%34
// [Wasm] Local BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Local Insn(iref=%36) -> $%36
// [Wasm] Local BlockParam(bref=b72, bpref=$b.1) -> $b72.$b.1
// [Wasm] Local BlockParam(bref=b70, bpref=$b.0) -> $b70.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local BlockParam(bref=b72, bpref=$b.0) -> $b72.$b.0
// [Wasm] Local Insn(iref=%50) -> $%50
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%51) -> $%51
// [Wasm] Local BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Local Insn(iref=%52) -> $%52
// [Wasm] Local BlockParam(bref=b68, bpref=$b.0) -> $b68.$b.0
// [Wasm] Local Insn(iref=%32) -> $%32
// [Wasm] Local Insn(iref=%58) -> $%58
// [Wasm] Local BlockParam(bref=b54, bpref=$b.4) -> $b54.$b.4
// [Wasm] Local BlockParam(bref=b58, bpref=$b.1) -> $b58.$b.1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b54, bpref=$b.3) -> $b54.$b.3
// [Wasm] Local BlockParam(bref=b55, bpref=$b.0) -> $b55.$b.0
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%62) -> $%62
// [Wasm] Local BlockParam(bref=b72, bpref=$b.2) -> $b72.$b.2
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local Insn(iref=%46) -> $%46
// [Wasm] Local Insn(iref=%24) -> $%24
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%37) -> $%37
// [Wasm] Local BlockParam(bref=b54, bpref=$b.0) -> $b54.$b.0
// [Wasm] Local BlockParam(bref=b58, bpref=$b.3) -> $b58.$b.3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local Insn(iref=%45) -> $%45
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local BlockParam(bref=b49, bpref=$b.3) -> $b49.$b.3
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%61) -> $%61
// [Wasm] Local BlockParam(bref=b72, bpref=$b.3) -> $b72.$b.3
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%30) -> $%30
// [Wasm] Local Insn(iref=%40) -> $%40
// [Wasm] Local Insn(iref=%69) -> $%69
// [Wasm] Local BlockParam(bref=b49, bpref=$b.1) -> $b49.$b.1
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function aux40l3_3 to wasm
// [Wasm] Lowering function T$start_14
// [Wasm] Lowering insn Call(ty=Unit, f=f6, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start_14 to wasm
// [Wasm] Lowering function read_ch_until_newline_or_eof1l0_0
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[Int32(val=-1)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[Int32(val=-1)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=13)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_char", args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=10)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function read_ch_until_newline_or_eof1l0_0 to wasm
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %5: Call(ty=Int32, f=f1, args=[Insn(iref=%3), Insn(iref=%4), FnParam(fref=f1, fpref=$f.2), FnParam(fref=f1, fpref=$f.3)])
// [CoreOpt] eliminated tail rec call %12: Call(ty=Int32, f=f1, args=[Insn(iref=%11), FnParam(fref=f1, fpref=$f.1), FnParam(fref=f1, fpref=$f.2), FnParam(fref=f1, fpref=$f.3)])
// [CoreOpt] eliminated tail rec call %10: Call(ty=Int32, f=f1, args=[Insn(iref=%8), Insn(iref=%9), FnParam(fref=f1, fpref=$f.2), FnParam(fref=f1, fpref=$f.3)])
// [CoreOpt] eliminated tail rec call %5: Call(ty=Unit, f=f5, args=[Insn(iref=%4), FnParam(fref=f5, fpref=$f.1)])
// [CoreOpt] eliminated tail rec call %9: Call(ty=Unit, f=f2, args=[FnParam(fref=f2, fpref=$f.0), FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.2), FnParam(fref=f2, fpref=$f.3), FnParam(fref=f2, fpref=$f.4), FnParam(fref=f2, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %7: Call(ty=Int32, f=f3, args=[Insn(iref=%6), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %13: Call(ty=Int32, f=f3, args=[Insn(iref=%12), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %21: Call(ty=Int32, f=f3, args=[Insn(iref=%20), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %29: Call(ty=Int32, f=f3, args=[Insn(iref=%28), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %35: Call(ty=Int32, f=f3, args=[Insn(iref=%34), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %41: Call(ty=Int32, f=f3, args=[Insn(iref=%40), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %47: Call(ty=Int32, f=f3, args=[Insn(iref=%46), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5)])
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f4: Once, f1: Once, f5: Once, f2: Once, f3: Multiple, f14: Once, f0: Multiple})
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] lp108l4_2 is inlining Call(ty=Int32, f=f1, args=[Insn(iref=%3), Int32(val=0), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.4)])
// [CoreOpt] shifted callee .fn skip21l2_1 #f1 : fn(int32, int32, int32, array[int32]) -> int32
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b23 {
// [CoreOpt]   .bb #b9 (int32, int32, int32, array[int32]) {
// [CoreOpt]     let %9: bool = le($b9.2, $b9.0)
// [CoreOpt]     br %9 b10() b11()
// [CoreOpt]   }
// [CoreOpt]   .bb #b10 () {
// [CoreOpt]     jump b21($b9.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b11 () {
// [CoreOpt]     let %10: int32 = load int32 offset($b9.3, $b9.0 * @32)
// [CoreOpt]     let %11: bool = eq(%10, 91)
// [CoreOpt]     br %11 b12() b13()
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 () {
// [CoreOpt]     let %12: int32 = add($b9.0, 1)
// [CoreOpt]     let %13: int32 = add($b9.1, 1)
// [CoreOpt]     jump b9(%12, %13, $b9.2, $b9.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b13 () {
// [CoreOpt]     let %15: bool = eq(%10, 93)
// [CoreOpt]     br %15 b14() b15()
// [CoreOpt]   }
// [CoreOpt]   .bb #b14 () {
// [CoreOpt]     let %16: bool = eq($b9.1, 0)
// [CoreOpt]     br %16 b16() b17()
// [CoreOpt]   }
// [CoreOpt]   .bb #b15 () {
// [CoreOpt]     let %20: int32 = add($b9.0, 1)
// [CoreOpt]     jump b9(%20, $b9.1, $b9.2, $b9.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b16 () {
// [CoreOpt]     jump b18($b9.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b17 () {
// [CoreOpt]     let %17: int32 = add($b9.0, 1)
// [CoreOpt]     let %18: int32 = sub($b9.1, 1)
// [CoreOpt]     jump b9(%17, %18, $b9.2, $b9.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b18 (int32) {
// [CoreOpt]     jump b19($b18.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b19 (int32) {
// [CoreOpt]     jump b20($b19.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b20 (int32) {
// [CoreOpt]     jump b21($b20.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b21 (int32) {
// [CoreOpt]     return $b21.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b22 header #b9 {
// [CoreOpt]     .block #b15
// [CoreOpt]     .block #b21
// [CoreOpt]     .block #b13
// [CoreOpt]     .block #b17
// [CoreOpt]     .block #b18
// [CoreOpt]     .block #b10
// [CoreOpt]     .block #b19
// [CoreOpt]     .block #b20
// [CoreOpt]     .block #b14
// [CoreOpt]     .block #b11
// [CoreOpt]     .block #b12
// [CoreOpt]     .block #b16
// [CoreOpt]   }
// [CoreOpt]   .bb #b23 () {
// [CoreOpt]     jump b22($f0, $f1, $f2, $f3)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] aux40l3_3 is inlining Call(ty=Unit, f=f2, args=[BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [CoreOpt] shifted callee .fn lp108l4_2 #f2 : fn(array[int32], int32, int32, array[int32], array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b54 {
// [CoreOpt]   .bb #b49 (array[int32], int32, int32, array[int32], array[int32], array[int32]) {
// [CoreOpt]     let %49: int32 = load int32 field($b49.0, 0 * @32)
// [CoreOpt]     let %50: int32 = load int32 offset($b49.3, %49 * @32)
// [CoreOpt]     let %51: bool = eq(%50, 0)
// [CoreOpt]     br %51 b50() b51()
// [CoreOpt]   }
// [CoreOpt]   .bb #b50 () {
// [CoreOpt]     let %52: int32 = add($b49.2, 1)
// [CoreOpt]     jump b72(%52, 0, $b49.1, $b49.4)
// [CoreOpt]   }
// [CoreOpt]   .bb #b51 () {
// [CoreOpt]     let %55: int32 = add($b49.2, 1)
// [CoreOpt]     let %56: int32 = call f3(%55, $b49.0, $b49.1, $b49.3, $b49.4, $b49.5)
// [CoreOpt]     let _ = store int32 field($b49.5, 0 * @32) <- %56
// [CoreOpt]     jump b49($b49.0, $b49.1, $b49.2, $b49.3, $b49.4, $b49.5)
// [CoreOpt]   }
// [CoreOpt]   .bb #b52 (unit) {
// [CoreOpt]     return $b52.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b53 header #b49 {
// [CoreOpt]     .block #b50
// [CoreOpt]     .block #b51
// [CoreOpt]     .block #b52
// [CoreOpt]   }
// [CoreOpt]   .bb #b54 () {
// [CoreOpt]     jump b53($f0, $f1, $f2, $f3, $f4, $f5)
// [CoreOpt]   }
// [CoreOpt]   .bb #b55 (int32) {
// [CoreOpt]     let _ = store int32 field($b49.5, 0 * @32) <- $b55.0
// [CoreOpt]     jump b52(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b58 (int32, int32, int32, array[int32]) {
// [CoreOpt]     let %58: bool = le($b58.2, $b58.0)
// [CoreOpt]     br %58 b59() b60()
// [CoreOpt]   }
// [CoreOpt]   .bb #b59 () {
// [CoreOpt]     jump b70($b58.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b60 () {
// [CoreOpt]     let %59: int32 = load int32 offset($b58.3, $b58.0 * @32)
// [CoreOpt]     let %60: bool = eq(%59, 91)
// [CoreOpt]     br %60 b61() b62()
// [CoreOpt]   }
// [CoreOpt]   .bb #b61 () {
// [CoreOpt]     let %61: int32 = add($b58.0, 1)
// [CoreOpt]     let %62: int32 = add($b58.1, 1)
// [CoreOpt]     jump b58(%61, %62, $b58.2, $b58.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b62 () {
// [CoreOpt]     let %64: bool = eq(%59, 93)
// [CoreOpt]     br %64 b63() b64()
// [CoreOpt]   }
// [CoreOpt]   .bb #b63 () {
// [CoreOpt]     let %65: bool = eq($b58.1, 0)
// [CoreOpt]     br %65 b65() b66()
// [CoreOpt]   }
// [CoreOpt]   .bb #b64 () {
// [CoreOpt]     let %69: int32 = add($b58.0, 1)
// [CoreOpt]     jump b58(%69, $b58.1, $b58.2, $b58.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b65 () {
// [CoreOpt]     jump b67($b58.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b66 () {
// [CoreOpt]     let %66: int32 = add($b58.0, 1)
// [CoreOpt]     let %67: int32 = sub($b58.1, 1)
// [CoreOpt]     jump b58(%66, %67, $b58.2, $b58.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b67 (int32) {
// [CoreOpt]     jump b68($b67.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b68 (int32) {
// [CoreOpt]     jump b69($b68.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b69 (int32) {
// [CoreOpt]     jump b70($b69.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b70 (int32) {
// [CoreOpt]     jump b55($b70.0)
// [CoreOpt]   }
// [CoreOpt]   .loop #b71 header #b58 {
// [CoreOpt]     .block #b64
// [CoreOpt]     .block #b70
// [CoreOpt]     .block #b62
// [CoreOpt]     .block #b66
// [CoreOpt]     .block #b67
// [CoreOpt]     .block #b59
// [CoreOpt]     .block #b68
// [CoreOpt]     .block #b69
// [CoreOpt]     .block #b63
// [CoreOpt]     .block #b60
// [CoreOpt]     .block #b61
// [CoreOpt]     .block #b65
// [CoreOpt]   }
// [CoreOpt]   .bb #b72 (int32, int32, int32, array[int32]) {
// [CoreOpt]     jump b71(%52, 0, $b49.1, $b49.4)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f1
// [CoreOpt] Remove dead function: f2
