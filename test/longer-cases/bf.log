// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f12) -> v0, Insn(iref=%0) -> v2
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v2
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("T$start") clobbered_x: @hashset.of([a0])
// [Asm] Label("T$start") clobbered_f: @hashset.of([])
// [Asm] subst   call main134.263 ->   call main134.263
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [5, 0, 2, 1, 3]
// [Asm] LoweringOrder: [[4], [1, 2], [0], [3], []]
// [Asm] LoweringOrder: HashMap::of([(b1, 0), (b5, 0), (b2, 1), (b3, 0), (b0, 0)])
// [Asm] LoweringOrder: [b5, b0, b1, b3, b2]
// [Asm] LoweringOrder: HashMap::of([(b1, 2), (b5, 0), (b2, 0), (b3, 3), (b0, 1)])
// [Asm] pre_assigned_registers: FnParam(fref=f4, fpref=$f.0) -> v2, BlockParam(bref=b3, bpref=$b.0) -> v19, Insn(iref=%9) -> v11, Insn(iref=%8) -> v13, BlockParam(bref=b0, bpref=$b.0) -> v7, BlockParam(bref=b0, bpref=$b.1) -> v8, FnParam(fref=f4, fpref=$f.1) -> v3, Insn(iref=%5) -> v17, Insn(iref=%0) -> v9, Insn(iref=%4) -> v16, Mem(fref=f4, mref=m2) -> v6, Insn(iref=%3) -> v15, Insn(iref=%7) -> v12, Insn(iref=%2) -> v14, Insn(iref=%1) -> v10, Mem(fref=f4, mref=m1) -> v5, Self(fref=f4) -> v0, Insn(iref=%6) -> v18, Mem(fref=f4, mref=m0) -> v4
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: [0]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=-1)])
// [Asm] succs: [4]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] defs: []
// [Asm] live_set: [a1, s11, zero, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [a1, s11, zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, s11, zero, v3]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, s11, zero, v7]
// [Asm] move: v7 <- v2
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, s11, zero, v8]
// [Asm] move: v8 <- v3
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v8, s11, zero, v7]
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v8, s11, zero, a0, v7]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v8, s11, zero, v9, v7]
// [Asm] move: v9 <- a0
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v8, s11, zero, v9, v7]
// [Asm] defs: [v28]
// [Asm] live_set: [v8, s11, v28, zero, v9, v7]
// [Asm] defined: v28 is X
// [Asm] defs: []
// [Asm] live_set: [v8, s11, zero, v9, v7]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v19
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v4]
// [Asm] live_set: [zero, v8, v7, v4]
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v8, v7, v4, s11]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v8, v7, v4, s11]
// [Asm] defs: [v24]
// [Asm] live_set: [zero, v8, v7, v4, s11, v24]
// [Asm] defined: v24 is X
// [Asm] defs: [v15]
// [Asm] live_set: [zero, v8, v7, v4, v15, s11]
// [Asm] defined: v15 is X
// [Asm] defs: [v22]
// [Asm] live_set: [zero, v22, v8, v7, v4, v15, s11]
// [Asm] defined: v22 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero, v8, v7, v4, v15]
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero, v8, v7, v4, s11, v15]
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, v8, v7, v4, s11]
// [Asm] move: a1 <- v15
// [Asm] defined: a1 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6]
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v7, v4, v6]
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v7, v4, v6]
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v8, v7, v4, v6]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] skip edge 1 -> 4
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, a0, v8, v7, a1, v6]
// [Asm] move: a1 <- v4
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, zero, a0, v8, a2, a1, v6]
// [Asm] move: a2 <- v7
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v5, zero, a0, a2, a1, v6, a3]
// [Asm] move: a3 <- v8
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [zero, a0, a4, a2, a1, v6, a3]
// [Asm] move: a4 <- v5
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [a5, zero, a0, a4, a2, a1, a3]
// [Asm] move: a5 <- v6
// [Asm] defined: a5 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v18]
// [Asm] live_set: [zero]
// [Asm] move: v18 <- a0
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v19]
// [Asm] live_set: [v19]
// [Asm] move: v19 <- zero
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v7, s11, zero, v8]
// [Asm] defs: [v13]
// [Asm] live_set: [s11, zero, v13, v8]
// [Asm] defined: v13 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v8, s11, zero, v7]
// [Asm] move: v7 <- v13
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v8, s11, zero, v7]
// [Asm] move: v8 <- v8
// [Asm] defs: []
// [Asm] live_set: [v8, s11, zero, v7]
// [Asm] Label("read_prog138.264") clobbered_x: @hashset.of([a5, a0, s1, a4, a2, s0, a1])
// [Asm] Label("read_prog138.264") clobbered_f: @hashset.of([])
// [Asm] subst   mv v7, v2 ->   mv s0, a0
// [Asm] subst   mv v8, v3 ->   mv s1, a1
// [Asm] subst   call read_ch_until_newline_or_eof1.262 ->   call read_ch_until_newline_or_eof1.262
// [Asm] subst   li v28, -1 ->   li a1, -1
// [Asm] subst   bne v9, v28, .read_prog138.264_2 ->   bne a0, a1, .read_prog138.264_2
// [Asm] subst   ret ->   ret
// [Asm] subst   addi v4, s11, -4 ->   addi a2, s11, -4
// [Asm] subst   andi s11, v4, -8 ->   andi s11, a2, -8
// [Asm] subst   sw zero, 0(v4) ->   sw zero, 0(a2)
// [Asm] subst   li v24, 1024 ->   li a0, 1024
// [Asm] subst   slli v15, v24, 10 ->   slli a0, a0, 10
// [Asm] subst   slliw v22, v15, 2 ->   slliw a1, a0, 2
// [Asm] subst   sub v5, s11, v22 ->   sub a4, s11, a1
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a4, -8
// [Asm] subst   mv a1, v15 ->   mv a1, a0
// [Asm] subst   addi v6, s11, -4 ->   addi a5, s11, -4
// [Asm] subst   andi s11, v6, -8 ->   andi s11, a5, -8
// [Asm] subst   sw zero, 0(v6) ->   sw zero, 0(a5)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v4 ->   mv a1, a2
// [Asm] subst   mv a2, v7 ->   mv a2, s0
// [Asm] subst   mv a3, v8 ->   mv a3, s1
// [Asm] subst   call aux46.266 ->   call aux46.266
// [Asm] subst   mv v19, zero ->   mv a0, zero
// [Asm] subst   th.surw v9, v8, v7, 2 ->   th.surw a0, s1, s0, 2
// [Asm] subst   addi v13, v7, 1 ->   addi a0, s0, 1
// [Asm] subst   mv v7, v13 ->   mv s0, a0
// [Asm] subst   j .read_prog138.264_0 ->   j .read_prog138.264_0
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v4, Mem(fref=f5, mref=m0) -> v2, Self(fref=f5) -> v0, Insn(iref=%0) -> v3
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] defs: [v6]
// [Asm] live_set: [v6, s11, zero]
// [Asm] defined: v6 is X
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v2]
// [Asm] defined: s11 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8, zero, v2]
// [Asm] defined: v8 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, v2]
// [Asm] move: a1 <- v8
// [Asm] defined: a1 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v2]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] skip edge 6 -> 2
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0]
// [Asm] move: a1 <- v2
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [zero]
// [Asm] move: v4 <- a0
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main134.263") clobbered_x: @hashset.of([a2, a0])
// [Asm] Label("main134.263") clobbered_f: @hashset.of([])
// [Asm] subst   li v6, 4096 ->   li a0, 4096
// [Asm] subst   sub v2, s11, v6 ->   sub a2, s11, a0
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a2, -8
// [Asm] subst   li v8, 1024 ->   li a0, 1024
// [Asm] subst   mv a1, v8 ->   mv a1, a0
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v2 ->   mv a1, a2
// [Asm] subst   call read_prog138.264 ->   call read_prog138.264
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [29, 0, 2, 2 -> 18 (4), 2 -> 18 (5), 2 -> 18 (6), 2 -> 18 (7), 2 -> 18 (8), 2 -> 18 (9), 2 -> 18 (10), 2 -> 18 (11), 2 -> 18 (12), 2 -> 18 (13), 2 -> 18 (14), 2 -> 18 (15), 2 -> 18 (16), 2 -> 18 (18), 2 -> 18 (20), 2 -> 18 (21), 2 -> 18 (22), 2 -> 18 (23), 2 -> 18 (24), 2 -> 18 (25), 2 -> 18 (26), 2 -> 18 (27), 2 -> 18 (28), 2 -> 18 (29), 2 -> 18 (30), 2 -> 18 (31), 2 -> 18 (32), 2 -> 18 (33), 2 -> 18 (34), 2 -> 18 (35), 2 -> 18 (36), 2 -> 18 (37), 2 -> 18 (38), 2 -> 18 (39), 2 -> 18 (40), 2 -> 18 (41), 2 -> 18 (42), 2 -> 18 (43), 2 -> 18 (44), 2 -> 18 (45), 2 -> 18 (46), 2 -> 18 (47), 2 -> 18 (49), 17, 15, 54, 49, 51, 50, 72, 58, 60, 62, 64, 63, 66, 65, 67, 68, 69, 61, 59, 70, 55, 52, 30, 3, 5, 18, 19, 20, 21, 22, 23, 24, 25, 26, 11, 9, 13, 7, 1, 27]
// [Asm] LoweringOrder: [[28], [1, 2], [7, 13, 9, 11, 2 -> 18 (4), 2 -> 18 (5), 2 -> 18 (6), 2 -> 18 (7), 2 -> 18 (8), 2 -> 18 (9), 2 -> 18 (10), 2 -> 18 (11), 2 -> 18 (12), 2 -> 18 (13), 2 -> 18 (14), 2 -> 18 (15), 2 -> 18 (16), 5, 2 -> 18 (18), 3, 2 -> 18 (20), 2 -> 18 (21), 2 -> 18 (22), 2 -> 18 (23), 2 -> 18 (24), 2 -> 18 (25), 2 -> 18 (26), 2 -> 18 (27), 2 -> 18 (28), 2 -> 18 (29), 2 -> 18 (30), 2 -> 18 (31), 2 -> 18 (32), 2 -> 18 (33), 2 -> 18 (34), 2 -> 18 (35), 2 -> 18 (36), 2 -> 18 (37), 2 -> 18 (38), 2 -> 18 (39), 2 -> 18 (40), 2 -> 18 (41), 2 -> 18 (42), 2 -> 18 (43), 2 -> 18 (44), 2 -> 18 (45), 2 -> 18 (46), 2 -> 18 (47), 15, 2 -> 18 (49), 17], [18], [18], [18], [18], [18], [18], [18], [18], [18], [18], [18], [18], [18], [18], [18], [18], [18], [18], [18], [18], [18], [18], [18], [18], [18], [18], [18], [18], [18], [18], [18], [18], [18], [18], [18], [18], [18], [18], [18], [18], [18], [18], [18], [19], [54], [53], [50, 51], [49], [72], [71], [59, 60], [61, 62], [63, 64], [58], [65, 66], [58], [67], [68], [69], [70], [58], [70], [55], [52], [30], [0], [0], [0], [19], [20], [21], [22], [23], [24], [25], [26], [27], [0], [0], [0], [0], [27], []]
// [Asm] LoweringOrder: HashMap::of([(b9, 45), (b60, 53), (b13, 44), (b26, 1), (b15, 49), (b62, 53), (b65, 55), (b1, 51), (b2, 0), (b22, 1), (b58, 53), (b61, 57), (b64, 56), (b59, 58), (b67, 55), (b25, 1), (b5, 47), (b29, 0), (b30, 55), (b27, 1), (b23, 1), (b19, 1), (b69, 55), (b11, 46), (b18, 1), (b24, 1), (b21, 1), (b70, 55), (b20, 1), (b72, 53), (b55, 55), (b17, 50), (b68, 55), (b0, 0), (b52, 55), (b66, 53), (b51, 49), (b50, 53), (b54, 49), (b3, 48), (b7, 0), (b49, 49), (b63, 53)])
// [Asm] LoweringOrder: [b29, b0, b2, b7, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b13, b9, b11, b5, b3, b15, b54, b49, b51, b17, b1, b50, b72, b58, b60, b62, b63, b66, b65, b67, b68, b69, b70, b55, b52, b30, b64, b61, b59]
// [Asm] LoweringOrder: HashMap::of([(b9, 0), (b60, 3), (b13, 0), (b26, 8), (b15, 0), (b62, 4), (b65, 0), (b1, 0), (b2, 2), (b22, 4), (b58, 2), (b61, 0), (b64, 0), (b59, 0), (b67, 1), (b25, 7), (b5, 0), (b29, 0), (b30, 7), (b27, 9), (b23, 5), (b19, 1), (b69, 3), (b11, 0), (b18, 0), (b24, 6), (b21, 3), (b70, 4), (b20, 2), (b72, 1), (b55, 5), (b17, 0), (b68, 2), (b0, 1), (b52, 6), (b66, 6), (b51, 3), (b50, 0), (b54, 1), (b3, 0), (b7, 3), (b49, 2), (b63, 5)])
// [Asm] pre_assigned_registers: BlockParam(bref=b69, bpref=$b.0) -> v49, Insn(iref=%15) -> v91, Insn(iref=%33) -> v78, Insn(iref=%76) -> v76, BlockParam(bref=b49, bpref=$b.4) -> v24, Insn(iref=%10) -> v64, BlockParam(bref=b49, bpref=$b.0) -> v20, BlockParam(bref=b0, bpref=$b.4) -> v12, Insn(iref=%27) -> v84, FnParam(fref=f3, fpref=$f.3) -> v5, Insn(iref=%25) -> v82, Insn(iref=%39) -> v89, Insn(iref=%59) -> v40, BlockParam(bref=b26, bpref=$b.0) -> v74, BlockParam(bref=b67, bpref=$b.0) -> v47, Insn(iref=%81) -> v18, Insn(iref=%4) -> v60, BlockParam(bref=b25, bpref=$b.0) -> v73, Insn(iref=%56) -> v31, Insn(iref=%49) -> v26, Insn(iref=%65) -> v44, Insn(iref=%73) -> v39, Insn(iref=%26) -> v83, BlockParam(bref=b49, bpref=$b.2) -> v22, BlockParam(bref=b49, bpref=$b.5) -> v25, BlockParam(bref=b23, bpref=$b.0) -> v71, BlockParam(bref=b24, bpref=$b.0) -> v72, Insn(iref=%31) -> v75, Insn(iref=%74) -> v88, Insn(iref=%64) -> v42, BlockParam(bref=b19, bpref=$b.0) -> v67, BlockParam(bref=b22, bpref=$b.0) -> v70, Insn(iref=%38) -> v87, Insn(iref=%75) -> v15, BlockParam(bref=b0, bpref=$b.1) -> v9, Insn(iref=%54) -> v54, Insn(iref=%60) -> v41, Insn(iref=%67) -> v46, Insn(iref=%5) -> v61, Insn(iref=%19) -> v95, Insn(iref=%79) -> v92, Insn(iref=%55) -> v30, BlockParam(bref=b27, bpref=$b.0) -> v97, Insn(iref=%66) -> v45, Insn(iref=%23) -> v80, Insn(iref=%20) -> v96, BlockParam(bref=b21, bpref=$b.0) -> v69, BlockParam(bref=b58, bpref=$b.2) -> v36, Insn(iref=%34) -> v79, BlockParam(bref=b20, bpref=$b.0) -> v68, FnParam(fref=f3, fpref=$f.4) -> v6, BlockParam(bref=b70, bpref=$b.0) -> v52, BlockParam(bref=b0, bpref=$b.5) -> v13, BlockParam(bref=b0, bpref=$b.3) -> v11, Insn(iref=%50) -> v28, Insn(iref=%51) -> v29, FnParam(fref=f3, fpref=$f.0) -> v2, FnParam(fref=f3, fpref=$f.5) -> v7, Self(fref=f3) -> v0, Insn(iref=%80) -> v27, BlockParam(bref=b58, bpref=$b.0) -> v34, Insn(iref=%52) -> v33, BlockParam(bref=b68, bpref=$b.0) -> v48, Insn(iref=%32) -> v77, Insn(iref=%58) -> v38, Insn(iref=%1) -> v16, BlockParam(bref=b58, bpref=$b.1) -> v35, Insn(iref=%11) -> v65, BlockParam(bref=b55, bpref=$b.0) -> v53, Insn(iref=%57) -> v32, Insn(iref=%6) -> v62, Insn(iref=%62) -> v51, FnParam(fref=f3, fpref=$f.2) -> v4, Insn(iref=%46) -> v58, Insn(iref=%28) -> v85, Insn(iref=%9) -> v63, Insn(iref=%37) -> v86, BlockParam(bref=b58, bpref=$b.3) -> v37, BlockParam(bref=b0, bpref=$b.0) -> v8, Insn(iref=%45) -> v57, BlockParam(bref=b0, bpref=$b.2) -> v10, BlockParam(bref=b49, bpref=$b.3) -> v23, Insn(iref=%0) -> v14, Insn(iref=%61) -> v50, Insn(iref=%3) -> v59, Insn(iref=%18) -> v94, BlockParam(bref=b52, bpref=$b.0) -> v55, Insn(iref=%17) -> v93, FnParam(fref=f3, fpref=$f.1) -> v3, Insn(iref=%2) -> v17, Insn(iref=%72) -> v81, Insn(iref=%43) -> v19, BlockParam(bref=b30, bpref=$b.0) -> v56, Insn(iref=%40) -> v90, BlockParam(bref=b49, bpref=$b.1) -> v21, Insn(iref=%69) -> v43, Insn(iref=%12) -> v66
// [Asm] succs: []
// [Asm] critical edges for b27: []
// [Asm] critical color seq for b27: []
// [Asm] succs: [27]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: [0]
// [Asm] critical edges for b7: []
// [Asm] critical color seq for b7: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%15), width=@32))
// [Asm] succs: [0]
// [Asm] critical edges for b13: []
// [Asm] critical color seq for b13: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%37), width=@32))
// [Asm] succs: [0]
// [Asm] critical edges for b9: []
// [Asm] critical color seq for b9: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%23), width=@32))
// [Asm] succs: [0]
// [Asm] critical edges for b11: []
// [Asm] critical color seq for b11: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%31), width=@32))
// [Asm] succs: [27]
// [Asm] critical edges for b26: []
// [Asm] critical color seq for b26: []
// [Asm] succs: [26]
// [Asm] critical edges for b25: []
// [Asm] critical color seq for b25: []
// [Asm] succs: [25]
// [Asm] critical edges for b24: []
// [Asm] critical color seq for b24: []
// [Asm] succs: [24]
// [Asm] critical edges for b23: []
// [Asm] critical color seq for b23: []
// [Asm] succs: [23]
// [Asm] critical edges for b22: []
// [Asm] critical color seq for b22: []
// [Asm] succs: [22]
// [Asm] critical edges for b21: []
// [Asm] critical color seq for b21: []
// [Asm] succs: [21]
// [Asm] critical edges for b20: []
// [Asm] critical color seq for b20: []
// [Asm] succs: [20]
// [Asm] critical edges for b19: []
// [Asm] critical color seq for b19: []
// [Asm] succs: [19]
// [Asm] critical edges for b18: []
// [Asm] critical color seq for b18: []
// [Asm] succs: [0]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] succs: [0]
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [0]
// [Asm] critical edges for b30: []
// [Asm] critical color seq for b30: []
// [Asm] succs: [30]
// [Asm] critical edges for b52: []
// [Asm] critical color seq for b52: []
// [Asm] succs: [52]
// [Asm] critical edges for b55: []
// [Asm] critical color seq for b55: []
// [Asm] succs: [55]
// [Asm] critical edges for b70: []
// [Asm] critical color seq for b70: []
// [Asm] succs: [70]
// [Asm] critical edges for b59: []
// [Asm] critical color seq for b59: []
// [Asm] succs: [58]
// [Asm] critical edges for b61: []
// [Asm] critical color seq for b61: []
// [Asm] succs: [70]
// [Asm] critical edges for b69: []
// [Asm] critical color seq for b69: []
// [Asm] succs: [69]
// [Asm] critical edges for b68: []
// [Asm] critical color seq for b68: []
// [Asm] succs: [68]
// [Asm] critical edges for b67: []
// [Asm] critical color seq for b67: []
// [Asm] succs: [67]
// [Asm] critical edges for b65: []
// [Asm] critical color seq for b65: []
// [Asm] succs: [58]
// [Asm] critical edges for b66: []
// [Asm] critical color seq for b66: []
// [Asm] succs: [65, 66]
// [Asm] critical edges for b63: []
// [Asm] critical color seq for b63: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b58, bpref=$b.1), Int32(val=0)])
// [Asm] succs: [58]
// [Asm] critical edges for b64: []
// [Asm] critical color seq for b64: []
// [Asm] succs: [63, 64]
// [Asm] critical edges for b62: []
// [Asm] critical color seq for b62: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%59), Int32(val=93)])
// [Asm] succs: [61, 62]
// [Asm] critical edges for b60: []
// [Asm] critical color seq for b60: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%59), Int32(val=91)])
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b58, bpref=$b.0), width=@32))
// [Asm] succs: [59, 60]
// [Asm] critical edges for b58: []
// [Asm] critical color seq for b58: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b58, bpref=$b.2), BlockParam(bref=b58, bpref=$b.0)])
// [Asm] succs: [71]
// [Asm] critical edges for b72: []
// [Asm] critical color seq for b72: []
// [Asm] succs: [72]
// [Asm] critical edges for b50: []
// [Asm] critical color seq for b50: []
// [Asm] succs: [49]
// [Asm] critical edges for b51: []
// [Asm] critical color seq for b51: []
// [Asm] succs: [50, 51]
// [Asm] critical edges for b49: []
// [Asm] critical color seq for b49: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%50), Int32(val=0)])
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%49), width=@32))
// [Asm] succs: [53]
// [Asm] critical edges for b54: []
// [Asm] critical color seq for b54: []
// [Asm] succs: [54]
// [Asm] critical edges for b15: []
// [Asm] critical color seq for b15: []
// [Asm] succs: [19]
// [Asm] critical edges for b17: []
// [Asm] critical color seq for b17: []
// [Asm] succs: [7, 13, 9, 11, 2 -> 18 (4), 2 -> 18 (5), 2 -> 18 (6), 2 -> 18 (7), 2 -> 18 (8), 2 -> 18 (9), 2 -> 18 (10), 2 -> 18 (11), 2 -> 18 (12), 2 -> 18 (13), 2 -> 18 (14), 2 -> 18 (15), 2 -> 18 (16), 5, 2 -> 18 (18), 3, 2 -> 18 (20), 2 -> 18 (21), 2 -> 18 (22), 2 -> 18 (23), 2 -> 18 (24), 2 -> 18 (25), 2 -> 18 (26), 2 -> 18 (27), 2 -> 18 (28), 2 -> 18 (29), 2 -> 18 (30), 2 -> 18 (31), 2 -> 18 (32), 2 -> 18 (33), 2 -> 18 (34), 2 -> 18 (35), 2 -> 18 (36), 2 -> 18 (37), 2 -> 18 (38), 2 -> 18 (39), 2 -> 18 (40), 2 -> 18 (41), 2 -> 18 (42), 2 -> 18 (43), 2 -> 18 (44), 2 -> 18 (45), 2 -> 18 (46), 2 -> 18 (47), 15, 2 -> 18 (49), 17]
// [Asm] critical edges for b2: [(b2, b18, 4), (b2, b18, 5), (b2, b18, 6), (b2, b18, 7), (b2, b18, 8), (b2, b18, 9), (b2, b18, 10), (b2, b18, 11), (b2, b18, 12), (b2, b18, 13), (b2, b18, 14), (b2, b18, 15), (b2, b18, 16), (b2, b18, 18), (b2, b18, 20), (b2, b18, 21), (b2, b18, 22), (b2, b18, 23), (b2, b18, 24), (b2, b18, 25), (b2, b18, 26), (b2, b18, 27), (b2, b18, 28), (b2, b18, 29), (b2, b18, 30), (b2, b18, 31), (b2, b18, 32), (b2, b18, 33), (b2, b18, 34), (b2, b18, 35), (b2, b18, 36), (b2, b18, 37), (b2, b18, 38), (b2, b18, 39), (b2, b18, 40), (b2, b18, 41), (b2, b18, 42), (b2, b18, 43), (b2, b18, 44), (b2, b18, 45), (b2, b18, 46), (b2, b18, 47), (b2, b18, 49)]
// [Asm] critical color seq for b2: [{color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}, {color: 1, seq: 0, critical: []}]
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=62)])
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] succs: [28]
// [Asm] critical edges for b29: []
// [Asm] critical color seq for b29: []
// [Asm] defs: [v97]
// [Asm] live_set: [v97]
// [Asm] move: v97 <- v8
// [Asm] defined: v97 is X
// [Asm] defs: []
// [Asm] live_set: [v97]
// [Asm] defs: [v97]
// [Asm] live_set: [v97]
// [Asm] move: v97 <- v74
// [Asm] defined: v97 is X
// [Asm] defs: [v74]
// [Asm] live_set: [v74]
// [Asm] move: v74 <- v73
// [Asm] defined: v74 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v25, v11, v21, v10, v13, v26, v22, v24, v12, v9, zero, v20, v23]
// [Asm] defined: v26 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v25, v11, v21, v10, v13, v22, v24, v12, v28, v9, zero, v20, v23]
// [Asm] defined: v28 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, zero, v13, v22, v20, v23, v24, v12, v9]
// [Asm] defs: [v34]
// [Asm] live_set: [v25, v11, v10, v21, zero, v13, v23, v12, v34, v9]
// [Asm] move: v34 <- v33
// [Asm] defined: v34 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v25, v11, v10, v21, zero, v13, v23, v35, v12, v34, v9]
// [Asm] move: v35 <- zero
// [Asm] defined: v35 is X
// [Asm] skip edge 20 -> 14
// [Asm] defs: [v36]
// [Asm] live_set: [v25, v11, v10, zero, v13, v23, v35, v36, v12, v34, v9]
// [Asm] move: v36 <- v21
// [Asm] defined: v36 is X
// [Asm] defs: [v37]
// [Asm] live_set: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm] move: v37 <- v23
// [Asm] defined: v37 is X
// [Asm] defs: [v80]
// [Asm] live_set: [v11, v10, v13, zero, v8, v80, v12, v9]
// [Asm] defined: v80 is X
// [Asm] defs: [v82]
// [Asm] live_set: [v11, v82, v10, v13, zero, v8, v80, v12, v9]
// [Asm] defined: v82 is X
// [Asm] defs: [v83]
// [Asm] live_set: [v11, v10, v13, zero, v8, v80, v12, v83, v9]
// [Asm] defined: v83 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: [v85]
// [Asm] live_set: [v11, v10, v13, zero, v85, v12, v9]
// [Asm] defined: v85 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v8 <- v85
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v9 <- v9
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v10 <- v10
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v11 <- v11
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v12 <- v12
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v13 <- v13
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: [v86]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v86, v9]
// [Asm] defined: v86 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v86, v9]
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, v13, zero, a0, v8, v12, v86, v9]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v87]
// [Asm] live_set: [v11, v87, v10, v13, zero, v8, v12, v86, v9]
// [Asm] move: v87 <- a0
// [Asm] defined: v87 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v87, v10, v13, zero, v8, v12, v86, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: [v90]
// [Asm] live_set: [v11, v10, v13, zero, v90, v12, v9]
// [Asm] defined: v90 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v8 <- v90
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v9 <- v9
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v10 <- v10
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v11 <- v11
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v12 <- v12
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v13 <- v13
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [a5, zero, a0, a4, a2, a1, a3]
// [Asm] defs: [v2]
// [Asm] live_set: [a5, zero, a4, a2, a1, a3, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a5, zero, a4, a2, a3, v3]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, a5, zero, a4, v4, a3, v3]
// [Asm] move: v4 <- a2
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, a5, zero, a4, v4, v3]
// [Asm] move: v5 <- a3
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, a5, zero, v4, v6, v3]
// [Asm] move: v6 <- a4
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move: v7 <- a5
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] move: v8 <- v2
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v9]
// [Asm] move: v9 <- v3
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero, v8, v7, v6, v9]
// [Asm] move: v10 <- v4
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v10, zero, v8, v7, v6, v9]
// [Asm] move: v11 <- v5
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v10, zero, v8, v7, v12, v9]
// [Asm] move: v12 <- v6
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v13 <- v7
// [Asm] defined: v13 is X
// [Asm] defs: [v67]
// [Asm] live_set: [v67]
// [Asm] move: v67 <- v8
// [Asm] defined: v67 is X
// [Asm] defs: [v53]
// [Asm] live_set: [v25, v11, v53, v10, zero, v13, v12, v9]
// [Asm] move: v53 <- v52
// [Asm] defined: v53 is X
// [Asm] defs: [v40]
// [Asm] live_set: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9, v40]
// [Asm] defined: v40 is X
// [Asm] defs: [v127]
// [Asm] live_set: [v25, v11, v10, v127, zero, v13, v36, v35, v37, v12, v34, v9, v40]
// [Asm] defined: v127 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9, v40]
// [Asm] defs: [v72]
// [Asm] live_set: [v72]
// [Asm] move: v72 <- v71
// [Asm] defined: v72 is X
// [Asm] defs: [v49]
// [Asm] live_set: [v25, v11, v49, v10, zero, v13, v12, v9]
// [Asm] move: v49 <- v48
// [Asm] defined: v49 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v97
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: [v33]
// [Asm] live_set: [v25, v11, v21, v10, zero, v13, v23, v12, v33, v9]
// [Asm] defined: v33 is X
// [Asm] defs: [v43]
// [Asm] live_set: [v25, v11, v10, zero, v13, v36, v35, v37, v43, v12, v9]
// [Asm] defined: v43 is X
// [Asm] defs: [v34]
// [Asm] live_set: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm] move: v34 <- v43
// [Asm] defined: v34 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm] move: v35 <- v35
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm] move: v36 <- v36
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm] move: v37 <- v37
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm] defs: [v57]
// [Asm] live_set: [v11, v10, v13, zero, v12, v57, v9]
// [Asm] defined: v57 is X
// [Asm] defs: [v58]
// [Asm] live_set: [v11, v58, v10, v13, zero, v12, v9]
// [Asm] defined: v58 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v8 <- v58
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v9 <- v9
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v10 <- v10
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v11 <- v11
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v12 <- v12
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v13 <- v13
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: [v59]
// [Asm] live_set: [v11, v10, v13, zero, v8, v59, v12, v9]
// [Asm] defined: v59 is X
// [Asm] defs: [v60]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9, v60]
// [Asm] defined: v60 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: [v62]
// [Asm] live_set: [v11, v62, v10, v13, zero, v12, v9]
// [Asm] defined: v62 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v8 <- v62
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v9 <- v9
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v10 <- v10
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v11 <- v11
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v12 <- v12
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v13 <- v13
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: [v20]
// [Asm] live_set: [v11, v10, zero, v13, v20, v8, v12, v9]
// [Asm] move: v20 <- v9
// [Asm] defined: v20 is X
// [Asm] skip edge 15 -> 13
// [Asm] defs: [v21]
// [Asm] live_set: [v11, v21, v10, zero, v13, v20, v8, v12, v9]
// [Asm] move: v21 <- v10
// [Asm] defined: v21 is X
// [Asm] skip edge 7 -> 8
// [Asm] defs: [v22]
// [Asm] live_set: [v11, v21, v10, zero, v13, v22, v20, v12, v9]
// [Asm] move: v22 <- v8
// [Asm] defined: v22 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v11, v21, v10, zero, v13, v22, v23, v20, v12, v9]
// [Asm] move: v23 <- v11
// [Asm] defined: v23 is X
// [Asm] skip edge 16 -> 6
// [Asm] defs: [v24]
// [Asm] live_set: [v11, v21, v10, zero, v13, v22, v23, v20, v24, v12, v9]
// [Asm] move: v24 <- v12
// [Asm] defined: v24 is X
// [Asm] skip edge 11 -> 12
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v11, v21, v10, zero, v13, v22, v23, v20, v24, v12, v9]
// [Asm] move: v25 <- v13
// [Asm] defined: v25 is X
// [Asm] skip edge 5 -> 9
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm] defs: [v73]
// [Asm] live_set: [v73]
// [Asm] move: v73 <- v72
// [Asm] defined: v73 is X
// [Asm] defs: [v63]
// [Asm] live_set: [v11, v63, v10, v13, zero, v8, v12, v9]
// [Asm] defined: v63 is X
// [Asm] defs: [v64]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9, v64]
// [Asm] defined: v64 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: [v66]
// [Asm] live_set: [v11, v66, v10, v13, zero, v12, v9]
// [Asm] defined: v66 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v8 <- v66
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v9 <- v9
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v10 <- v10
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v11 <- v11
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v12 <- v12
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v13 <- v13
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: [v50]
// [Asm] live_set: [v25, v11, v10, zero, v13, v50, v36, v35, v37, v12, v9]
// [Asm] defined: v50 is X
// [Asm] defs: [v51]
// [Asm] live_set: [v25, v11, v10, zero, v13, v50, v36, v37, v12, v9, v51]
// [Asm] defined: v51 is X
// [Asm] defs: [v34]
// [Asm] live_set: [v25, v11, v10, zero, v13, v36, v37, v12, v34, v9, v51]
// [Asm] move: v34 <- v50
// [Asm] defined: v34 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm] move: v35 <- v51
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm] move: v36 <- v36
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm] move: v37 <- v37
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm] defs: [v45]
// [Asm] live_set: [v25, v11, v10, zero, v13, v36, v45, v35, v37, v12, v9]
// [Asm] defined: v45 is X
// [Asm] defs: [v46]
// [Asm] live_set: [v25, v11, v46, v10, zero, v13, v36, v45, v37, v12, v9]
// [Asm] defined: v46 is X
// [Asm] defs: [v34]
// [Asm] live_set: [v25, v11, v46, v10, zero, v13, v36, v37, v12, v34, v9]
// [Asm] move: v34 <- v45
// [Asm] defined: v34 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm] move: v35 <- v46
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm] move: v36 <- v36
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm] move: v37 <- v37
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm] defs: [v70]
// [Asm] live_set: [v70]
// [Asm] move: v70 <- v69
// [Asm] defined: v70 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm] defined: v16 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v11, v10, v18, v13, zero, v8, v12, v9]
// [Asm] defined: v18 is X
// [Asm] defs: [v134]
// [Asm] live_set: [v11, v10, v18, v13, zero, v8, v134, v12, v9]
// [Asm] defined: v134 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: [v135]
// [Asm] live_set: [v11, v10, v18, v13, zero, v8, v12, v9, v135]
// [Asm] defined: v135 is X
// [Asm] defs: [v136]
// [Asm] live_set: [v11, v10, v13, zero, v8, v136, v12, v9, v135]
// [Asm] defined: v136 is X
// [Asm] defs: [v137]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9, v137]
// [Asm] defined: v137 is X
// [Asm] defs: [v138]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defined: v138 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: [v30]
// [Asm] live_set: [v25, v11, v21, v10, v13, v22, v30, v24, v12, v9, zero, v23, v20]
// [Asm] defined: v30 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v13, v22, v30, v24, v12, v9, zero, v23, v20]
// [Asm] defs: [a0]
// [Asm] live_set: [v25, v11, v21, v10, a0, v13, v22, v24, v12, v9, zero, v23, v20]
// [Asm] move: a0 <- v30
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v25, v11, v21, v10, a0, v13, v22, a1, v24, v12, v9, zero, v23, v20]
// [Asm] move: a1 <- v20
// [Asm] defined: a1 is X
// [Asm] skip edge 34 -> 15
// [Asm] defs: [a2]
// [Asm] live_set: [v25, v11, v21, v10, a0, v13, v22, a2, a1, v24, v12, v9, zero, v23, v20]
// [Asm] move: a2 <- v21
// [Asm] defined: a2 is X
// [Asm] skip edge 35 -> 7
// [Asm] defs: [a3]
// [Asm] live_set: [v25, v11, v21, v10, a0, v13, v22, a2, a1, v24, v12, a3, v9, zero, v23, v20]
// [Asm] move: a3 <- v23
// [Asm] defined: a3 is X
// [Asm] skip edge 36 -> 16
// [Asm] defs: [a4]
// [Asm] live_set: [v25, v11, v21, v10, a0, v13, v22, a2, a1, v24, v12, a3, v9, zero, v23, v20, a4]
// [Asm] move: a4 <- v24
// [Asm] defined: a4 is X
// [Asm] skip edge 37 -> 11
// [Asm] defs: [a5]
// [Asm] live_set: [v25, v11, v21, v10, a5, a0, v13, v22, a2, a1, v24, v12, a3, v9, zero, v23, v20, a4]
// [Asm] move: a5 <- v25
// [Asm] defined: a5 is X
// [Asm] skip edge 38 -> 5
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v25, v11, v21, v10, v13, a0, v22, v24, v12, v9, zero, v23, v20]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v31]
// [Asm] live_set: [v25, v11, v21, v10, v13, v22, v24, v12, v31, v9, zero, v23, v20]
// [Asm] move: v31 <- a0
// [Asm] defined: v31 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v13, v22, v24, v12, v31, v9, zero, v23, v20]
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, zero, v13, v22, v23, v20, v24, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, zero, v13, v22, v23, v20, v24, v12, v9]
// [Asm] move: v20 <- v20
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, zero, v13, v22, v23, v20, v24, v12, v9]
// [Asm] move: v21 <- v21
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, zero, v13, v22, v23, v20, v24, v12, v9]
// [Asm] move: v22 <- v22
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, zero, v13, v22, v23, v20, v24, v12, v9]
// [Asm] move: v23 <- v23
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, zero, v13, v22, v23, v20, v24, v12, v9]
// [Asm] move: v24 <- v24
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, zero, v13, v22, v23, v20, v24, v12, v9]
// [Asm] move: v25 <- v25
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, zero, v13, v22, v23, v20, v24, v12, v9]
// [Asm] defs: [v67]
// [Asm] live_set: [v67]
// [Asm] move: v67 <- v8
// [Asm] defined: v67 is X
// [Asm] defs: []
// [Asm] live_set: [v67]
// [Asm] defs: [v75]
// [Asm] live_set: [v11, v10, v75, v13, zero, v8, v12, v9]
// [Asm] defined: v75 is X
// [Asm] defs: [v77]
// [Asm] live_set: [v11, v10, v13, zero, v77, v8, v12, v9]
// [Asm] defined: v77 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v77, v8, v12, v9]
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v10, v13, zero, a0, v8, v12, v9]
// [Asm] move: a0 <- v77
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, v13, zero, a0, v8, v12, v9]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v78]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v78 <- a0
// [Asm] defined: v78 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: [v79]
// [Asm] live_set: [v11, v10, v13, zero, v79, v12, v9]
// [Asm] defined: v79 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v8 <- v79
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v9 <- v9
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v10 <- v10
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v11 <- v11
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v12 <- v12
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v13 <- v13
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: [v91]
// [Asm] live_set: [v11, v91, v10, v13, zero, v8, v12, v9]
// [Asm] defined: v91 is X
// [Asm] defs: [v93]
// [Asm] live_set: [v11, v91, v10, v13, zero, v8, v12, v9, v93]
// [Asm] defined: v93 is X
// [Asm] defs: [v94]
// [Asm] live_set: [v11, v94, v91, v10, v13, zero, v8, v12, v9]
// [Asm] defined: v94 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: [v96]
// [Asm] live_set: [v11, v10, v96, v13, zero, v12, v9]
// [Asm] defined: v96 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v8 <- v96
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v9 <- v9
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v10 <- v10
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v11 <- v11
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v12 <- v12
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v13 <- v13
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: [v56]
// [Asm] live_set: [v11, v56, v10, zero, v13, v12, v9]
// [Asm] move: v56 <- v55
// [Asm] defined: v56 is X
// [Asm] defs: [v52]
// [Asm] live_set: [v25, v11, v10, zero, v13, v52, v12, v9]
// [Asm] move: v52 <- v34
// [Asm] defined: v52 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v10, zero, v13, v52, v12, v9]
// [Asm] defs: [v71]
// [Asm] live_set: [v71]
// [Asm] move: v71 <- v70
// [Asm] defined: v71 is X
// [Asm] defs: [v68]
// [Asm] live_set: [v68]
// [Asm] move: v68 <- v67
// [Asm] defined: v68 is X
// [Asm] defs: [v47]
// [Asm] live_set: [v25, v11, v10, zero, v13, v47, v12, v9]
// [Asm] move: v47 <- v34
// [Asm] defined: v47 is X
// [Asm] defs: [v52]
// [Asm] live_set: [v25, v11, v10, zero, v13, v52, v12, v9]
// [Asm] move: v52 <- v49
// [Asm] defined: v52 is X
// [Asm] defs: [v48]
// [Asm] live_set: [v25, v11, v48, v10, zero, v13, v12, v9]
// [Asm] move: v48 <- v47
// [Asm] defined: v48 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v12, v9]
// [Asm] defs: [v55]
// [Asm] live_set: [v11, v10, v13, zero, v12, v55, v9]
// [Asm] move: v55 <- zero
// [Asm] defined: v55 is X
// [Asm] skip edge 91 -> 14
// [Asm] defs: [v126]
// [Asm] live_set: [v25, v11, v10, zero, v13, v126, v35, v36, v37, v12, v34, v9, v40]
// [Asm] defined: v126 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm] defs: [v69]
// [Asm] live_set: [v69]
// [Asm] move: v69 <- v68
// [Asm] defined: v69 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] Label("aux46.266") clobbered_x: @hashset.of([s6, s4, a5, a0, a4, s1, s2, a2, s5, s0, a1, a3, s3])
// [Asm] Label("aux46.266") clobbered_f: @hashset.of([])
// [Asm] subst   mv v97, v8 ->   mv a0, s0
// [Asm] subst   j .aux46.266_27 ->   j .aux46.266_27
// [Asm] subst   lw v26, 0(v20) ->   lw a0, 0(s5)
// [Asm] subst   th.lurw v28, v24, v26, 2 ->   th.lurw a0, s4, a0, 2
// [Asm] subst   beq v28, zero, .aux46.266_50 ->   beq a0, zero, .aux46.266_50
// [Asm] subst   mv v35, zero ->   mv a1, zero
// [Asm] subst   mv v36, v21 ->   mv a2, s2
// [Asm] subst   mv v37, v23 ->   mv a3, s1
// [Asm] subst   lw v80, 0(v9) ->   lw a0, 0(s5)
// [Asm] subst   th.lurw v82, v12, v80, 2 ->   th.lurw a1, s4, a0, 2
// [Asm] subst   addi v83, v82, -1 ->   addi a1, a1, -1
// [Asm] subst   th.surw v83, v12, v80, 2 ->   th.surw a1, s4, a0, 2
// [Asm] subst   addi v85, v8, 1 ->   addi a0, s0, 1
// [Asm] subst   mv v8, v85 ->   mv s0, a0
// [Asm] subst   j .aux46.266_0 ->   j .aux46.266_0
// [Asm] subst   lw v86, 0(v9) ->   lw s6, 0(s5)
// [Asm] subst   call read_ch_until_newline_or_eof1.262 ->   call read_ch_until_newline_or_eof1.262
// [Asm] subst   th.surw v87, v12, v86, 2 ->   th.surw a0, s4, s6, 2
// [Asm] subst   addi v90, v8, 1 ->   addi a0, s0, 1
// [Asm] subst   mv v8, v90 ->   mv s0, a0
// [Asm] subst   j .aux46.266_0 ->   j .aux46.266_0
// [Asm] subst   mv v8, v2 ->   mv s0, a0
// [Asm] subst   mv v9, v3 ->   mv s5, a1
// [Asm] subst   mv v10, v4 ->   mv s2, a2
// [Asm] subst   mv v11, v5 ->   mv s1, a3
// [Asm] subst   mv v12, v6 ->   mv s4, a4
// [Asm] subst   mv v13, v7 ->   mv s3, a5
// [Asm] subst   mv v67, v8 ->   mv a0, s0
// [Asm] subst   th.lurw v40, v37, v34, 2 ->   th.lurw a4, a3, a0, 2
// [Asm] subst   li v127, 91 ->   li a5, 91
// [Asm] subst   beq v40, v127, .aux46.266_61 ->   beq a4, a5, .aux46.266_61
// [Asm] subst   ret ->   ret
// [Asm] subst   bge v8, v10, .aux46.266_1 ->   bge s0, s2, .aux46.266_1
// [Asm] subst   addi v33, v22, 1 ->   addi a0, s0, 1
// [Asm] subst   addi v43, v34, 1 ->   addi a0, a0, 1
// [Asm] subst   j .aux46.266_58 ->   j .aux46.266_58
// [Asm] subst   lw v57, 0(v13) ->   lw a0, 0(s3)
// [Asm] subst   addi v58, v57, 1 ->   addi a0, a0, 1
// [Asm] subst   mv v8, v58 ->   mv s0, a0
// [Asm] subst   j .aux46.266_0 ->   j .aux46.266_0
// [Asm] subst   lw v59, 0(v9) ->   lw a0, 0(s5)
// [Asm] subst   addi v60, v59, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v60, 0(v9) ->   sw a0, 0(s5)
// [Asm] subst   addi v62, v8, 1 ->   addi a0, s0, 1
// [Asm] subst   mv v8, v62 ->   mv s0, a0
// [Asm] subst   j .aux46.266_0 ->   j .aux46.266_0
// [Asm] subst   beq v35, zero, .aux46.266_65 ->   beq a1, zero, .aux46.266_65
// [Asm] subst   lw v63, 0(v9) ->   lw a0, 0(s5)
// [Asm] subst   addi v64, v63, -1 ->   addi a0, a0, -1
// [Asm] subst   sw v64, 0(v9) ->   sw a0, 0(s5)
// [Asm] subst   addi v66, v8, 1 ->   addi a0, s0, 1
// [Asm] subst   mv v8, v66 ->   mv s0, a0
// [Asm] subst   j .aux46.266_0 ->   j .aux46.266_0
// [Asm] subst   addi v50, v34, 1 ->   addi a0, a0, 1
// [Asm] subst   addi v51, v35, 1 ->   addi a1, a1, 1
// [Asm] subst   j .aux46.266_58 ->   j .aux46.266_58
// [Asm] subst   bge v34, v36, .aux46.266_59 ->   bge a0, a2, .aux46.266_59
// [Asm] subst   addi v45, v34, 1 ->   addi a0, a0, 1
// [Asm] subst   addi v46, v35, -1 ->   addi a1, a1, -1
// [Asm] subst   j .aux46.266_58 ->   j .aux46.266_58
// [Asm] subst   th.lurw v16, v11, v8, 2 ->   th.lurw a0, s1, s0, 2
// [Asm] subst   addi v18, v16, -43 ->   addi a0, a0, -43
// [Asm] subst   li v134, 50 ->   li a1, 50
// [Asm] subst   bltu v134, v18, .aux46.266_18 ->   bltu a1, a0, .aux46.266_18
// [Asm] subst   la v135, .aux46.266_jtbl_0 ->   la a1, .aux46.266_jtbl_0
// [Asm] subst   slliw v136, v18, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v137, v135, v136 ->   add a0, a1, a0
// [Asm] subst   lw v138, 0(v137) ->   lw a0, 0(a0)
// [Asm] subst   jr v138 ->   jr a0
// [Asm] subst   .p2align 2 ->   .p2align 2
// [Asm] subst   .rodata ->   .rodata
// [Asm] subst .aux46.266_jtbl_0: -> .aux46.266_jtbl_0:
// [Asm] subst   .word .aux46.266_7 ->   .word .aux46.266_7
// [Asm] subst   .word .aux46.266_13 ->   .word .aux46.266_13
// [Asm] subst   .word .aux46.266_9 ->   .word .aux46.266_9
// [Asm] subst   .word .aux46.266_11 ->   .word .aux46.266_11
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_5 ->   .word .aux46.266_5
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_3 ->   .word .aux46.266_3
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_15 ->   .word .aux46.266_15
// [Asm] subst   .word .aux46.266_18 ->   .word .aux46.266_18
// [Asm] subst   .word .aux46.266_17 ->   .word .aux46.266_17
// [Asm] subst   .p2align 2 ->   .p2align 2
// [Asm] subst   .text ->   .text
// [Asm] subst   addi v30, v22, 1 ->   addi a0, s0, 1
// [Asm] subst   mv a1, v20 ->   mv a1, s5
// [Asm] subst   mv a2, v21 ->   mv a2, s2
// [Asm] subst   mv a3, v23 ->   mv a3, s1
// [Asm] subst   mv a4, v24 ->   mv a4, s4
// [Asm] subst   mv a5, v25 ->   mv a5, s3
// [Asm] subst   call aux46.266 ->   call aux46.266
// [Asm] subst   sw v31, 0(v25) ->   sw a0, 0(s3)
// [Asm] subst   j .aux46.266_49 ->   j .aux46.266_49
// [Asm] subst   mv v67, v8 ->   mv a0, s0
// [Asm] subst   j .aux46.266_19 ->   j .aux46.266_19
// [Asm] subst   lw v75, 0(v9) ->   lw a0, 0(s5)
// [Asm] subst   th.lurw v77, v12, v75, 2 ->   th.lurw a0, s4, a0, 2
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   addi v79, v8, 1 ->   addi a0, s0, 1
// [Asm] subst   mv v8, v79 ->   mv s0, a0
// [Asm] subst   j .aux46.266_0 ->   j .aux46.266_0
// [Asm] subst   lw v91, 0(v9) ->   lw a0, 0(s5)
// [Asm] subst   th.lurw v93, v12, v91, 2 ->   th.lurw a1, s4, a0, 2
// [Asm] subst   addi v94, v93, 1 ->   addi a1, a1, 1
// [Asm] subst   th.surw v94, v12, v91, 2 ->   th.surw a1, s4, a0, 2
// [Asm] subst   addi v96, v8, 1 ->   addi a0, s0, 1
// [Asm] subst   mv v8, v96 ->   mv s0, a0
// [Asm] subst   j .aux46.266_0 ->   j .aux46.266_0
// [Asm] subst   j .aux46.266_70 ->   j .aux46.266_70
// [Asm] subst   sw v53, 0(v25) ->   sw a0, 0(s3)
// [Asm] subst   mv v55, zero ->   mv a0, zero
// [Asm] subst   li v126, 93 ->   li a5, 93
// [Asm] subst   bne v40, v126, .aux46.266_64 ->   bne a4, a5, .aux46.266_64
// [Asm] subst   sw v8, 0(v13) ->   sw s0, 0(s3)
// [Asm] LoweringOrder: [0, 2, 4, 3, 5, 1, 6]
// [Asm] LoweringOrder: [[1, 2], [3, 4], [5], [5], [6], [6], []]
// [Asm] LoweringOrder: HashMap::of([(b6, 0), (b4, 1), (b1, 2), (b5, 0), (b2, 0), (b3, 0), (b0, 0)])
// [Asm] LoweringOrder: [b0, b2, b3, b5, b6, b4, b1]
// [Asm] LoweringOrder: HashMap::of([(b6, 4), (b4, 0), (b1, 0), (b5, 3), (b2, 1), (b3, 2), (b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v3, BlockParam(bref=b5, bpref=$b.0) -> v5, Self(fref=f0) -> v0, BlockParam(bref=b6, bpref=$b.0) -> v6, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] succs: []
// [Asm] critical edges for b6: []
// [Asm] critical color seq for b6: []
// [Asm] succs: [6]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: [6]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] succs: [5]
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [5]
// [Asm] critical edges for b4: []
// [Asm] critical color seq for b4: []
// [Asm] succs: [3, 4]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=13)])
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=10)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v6
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] defs: [v10]
// [Asm] live_set: [v10, v2]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move: v5 <- v2
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] defs: [v9]
// [Asm] live_set: [v9, v2]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] defined: v7 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move: v6 <- v7
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move: v6 <- v5
// [Asm] defined: v6 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] defined: v8 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move: v5 <- v8
// [Asm] defined: v5 is X
// [Asm] Label("read_ch_until_newline_or_eof1.262") clobbered_x: @hashset.of([a1, a0])
// [Asm] Label("read_ch_until_newline_or_eof1.262") clobbered_f: @hashset.of([])
// [Asm] subst   ret ->   ret
// [Asm] subst   call minimbt_read_char ->   call minimbt_read_char
// [Asm] subst   li v10, 10 ->   li a1, 10
// [Asm] subst   beq v2, v10, .read_ch_until_newline_or_eof1.262_1 ->   beq a0, a1, .read_ch_until_newline_or_eof1.262_1
// [Asm] subst   j .read_ch_until_newline_or_eof1.262_5 ->   j .read_ch_until_newline_or_eof1.262_5
// [Asm] subst   li v9, 13 ->   li a1, 13
// [Asm] subst   bne v2, v9, .read_ch_until_newline_or_eof1.262_4 ->   bne a0, a1, .read_ch_until_newline_or_eof1.262_4
// [Asm] subst   li v7, -1 ->   li a0, -1
// [Asm] subst   j .read_ch_until_newline_or_eof1.262_6 ->   j .read_ch_until_newline_or_eof1.262_6
// [Asm] subst   li v8, -1 ->   li a0, -1
// [Asm] before colored: # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main134.263  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] read_prog138.264:
// [Asm] # block info: defs: [v3, v7, v8, v2], uses: [v3, a1, a0, v2], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, s11, a0, zero], live_out: [v8, s11, zero, v7]
// [Asm] # block parameters: []
// [Asm] .read_prog138.264_5:
// [Asm]   # save_ctx1  # live: [a1, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, s11, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, s11, zero, v3]
// [Asm] # control
// [Asm]   mv v7, v2  # live: [v3, s11, zero, v7]
// [Asm]   mv v8, v3  # live: [v7, s11, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, v28, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v28, a0, v9], upward_exposed: [], params_defs: [v8, v7]
// [Asm] # live_in: [v7, s11, zero, v8], live_out: [v8, s11, zero, v9, v7]
// [Asm] # block parameters: [v7, v8]
// [Asm] .read_prog138.264_0:
// [Asm]   # save_ctx2  # live: [v8, s11, zero, v7]
// [Asm]   call read_ch_until_newline_or_eof1.262  # live: [v8, s11, zero, a0, v7]
// [Asm]   mv v9, a0  # live: [v8, s11, zero, v9, v7]
// [Asm]   # restore_ctx2  # live: [v8, s11, zero, v9, v7]
// [Asm] # control
// [Asm]   li v28, -1  # live: [v8, s11, v28, zero, v9, v7]
// [Asm]   bne v9, v28, .read_prog138.264_2  # live: [v8, s11, zero, v9, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, v22, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, v19, ft5, ft10, v4, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, v24, a3, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v15], uses: [v5, a5, a0, v22, v7, a2, a1, s11, v24, a3, zero, a4, v8, v4, v6, v15], upward_exposed: [v8, s11, zero, v7], params_defs: []
// [Asm] # live_in: [v7, s11, zero, v8], live_out: [v19]
// [Asm] # block parameters: []
// [Asm] .read_prog138.264_1:
// [Asm]   addi v4, s11, -4  # live: [zero, v8, v7, v4]
// [Asm]   andi s11, v4, -8  # live: [zero, v8, v7, v4, s11]
// [Asm]   sw zero, 0(v4)  # live: [zero, v8, v7, v4, s11]
// [Asm]   li v24, 1024  # live: [zero, v8, v7, v4, s11, v24]
// [Asm]   slli v15, v24, 10  # live: [zero, v8, v7, v4, v15, s11]
// [Asm]   slliw v22, v15, 2  # live: [zero, v22, v8, v7, v4, v15, s11]
// [Asm]   sub v5, s11, v22  # live: [v5, zero, v8, v7, v4, v15]
// [Asm]   andi s11, v5, -8  # live: [v5, zero, v8, v7, v4, s11, v15]
// [Asm]   mv a1, v15  # live: [v5, zero, v8, v7, v4, s11]
// [Asm]   addi v6, s11, -4  # live: [v5, zero, v8, v7, v4, v6]
// [Asm]   andi s11, v6, -8  # live: [v5, zero, v8, v7, v4, v6]
// [Asm]   sw zero, 0(v6)  # live: [v5, zero, v8, v7, v4, v6]
// [Asm]   # save_ctx2  # live: [v5, zero, v8, v7, v4, v6]
// [Asm]   mv a0, zero  # live: [v5, zero, a0, v8, v7, v4, v6]
// [Asm]   mv a1, v4  # live: [v5, zero, a0, v8, v7, a1, v6]
// [Asm]   mv a2, v7  # live: [v5, zero, a0, v8, a2, a1, v6]
// [Asm]   mv a3, v8  # live: [v5, zero, a0, a2, a1, v6, a3]
// [Asm]   mv a4, v5  # live: [zero, a0, a4, a2, a1, v6, a3]
// [Asm]   mv a5, v6  # live: [a5, zero, a0, a4, a2, a1, a3]
// [Asm]   call aux46.266  # live: [zero, a0]
// [Asm]   mv v18, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv v19, zero  # live: [v19]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v19, a0], upward_exposed: [v19], params_defs: [v19]
// [Asm] # live_in: [v19], live_out: []
// [Asm] # block parameters: [v19]
// [Asm] .read_prog138.264_3:
// [Asm] # control
// [Asm]   mv a0, v19  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v13, v7], uses: [v7, v9, v13, v8], upward_exposed: [v7, v9, v8], params_defs: []
// [Asm] # live_in: [v8, s11, v9, zero, v7], live_out: [v8, s11, zero, v7]
// [Asm] # block parameters: []
// [Asm] .read_prog138.264_2:
// [Asm]   th.surw v9, v8, v7, 2  # live: [v7, s11, zero, v8]
// [Asm]   addi v13, v7, 1  # live: [s11, zero, v13, v8]
// [Asm] # control
// [Asm]   mv v7, v13  # live: [v8, s11, zero, v7]
// [Asm]   mv v8, v8  # live: [v8, s11, zero, v7]
// [Asm]   j .read_prog138.264_0  # live: [v8, s11, zero, v7]
// [Asm] 
// [Asm] # leaf false
// [Asm] main134.263:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, v4, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v8, v6, a1, s11, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main134.263_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   li v6, 4096  # live: [v6, s11, zero]
// [Asm]   sub v2, s11, v6  # live: [zero, v2]
// [Asm]   andi s11, v2, -8  # live: [zero, v2]
// [Asm]   li v8, 1024  # live: [v8, zero, v2]
// [Asm]   mv a1, v8  # live: [zero, v2]
// [Asm]   # save_ctx2  # live: [zero, v2]
// [Asm]   mv a0, zero  # live: [zero, a0, v2]
// [Asm]   mv a1, v2  # live: [a1, zero, a0]
// [Asm]   call read_prog138.264  # live: [zero, a0]
// [Asm]   mv v4, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] read_ch_until_newline_or_eof1.262:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v10, a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v2]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof1.262_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call minimbt_read_char  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   li v10, 10  # live: [v10, v2]
// [Asm]   beq v2, v10, .read_ch_until_newline_or_eof1.262_1  # live: [v2]
// [Asm] 
// [Asm] # block info: defs: [v9], uses: [v9, v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v2]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof1.262_2:
// [Asm] # control
// [Asm]   li v9, 13  # live: [v9, v2]
// [Asm]   bne v2, v9, .read_ch_until_newline_or_eof1.262_4  # live: [v2]
// [Asm] 
// [Asm] # block info: defs: [v5, v8], uses: [v8], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof1.262_3:
// [Asm] # control
// [Asm]   li v8, -1  # live: [v8]
// [Asm]   mv v5, v8  # live: [v5]
// [Asm] 
// [Asm] # block info: defs: [v6], uses: [v5], upward_exposed: [v5], params_defs: [v5]
// [Asm] # live_in: [v5], live_out: [v6]
// [Asm] # block parameters: [v5]
// [Asm] .read_ch_until_newline_or_eof1.262_5:
// [Asm] # control
// [Asm]   mv v6, v5  # live: [v6]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v6, a0], upward_exposed: [v6], params_defs: [v6]
// [Asm] # live_in: [v6], live_out: []
// [Asm] # block parameters: [v6]
// [Asm] .read_ch_until_newline_or_eof1.262_6:
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v5], uses: [v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof1.262_4:
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v5]
// [Asm]   j .read_ch_until_newline_or_eof1.262_5  # live: [v5]
// [Asm] 
// [Asm] # block info: defs: [v6, v7], uses: [v7], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v6]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof1.262_1:
// [Asm] # control
// [Asm]   li v7, -1  # live: [v7]
// [Asm]   mv v6, v7  # live: [v6]
// [Asm]   j .read_ch_until_newline_or_eof1.262_6  # live: [v6]
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] aux46.266:
// [Asm] # block info: defs: [v2, v11, v5, v10, v13, v7, v8, v4, v6, v12, v9, v3], uses: [v3, v5, a5, a0, a4, v7, a2, v4, a1, v6, a3, v2], upward_exposed: [a2, a1, a3, a5, a0, a4], params_defs: []
// [Asm] # live_in: [a5, a0, zero, a4, a2, a1, a3], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux46.266_29:
// [Asm]   # save_ctx1  # live: [a5, zero, a0, a4, a2, a1, a3]
// [Asm]   mv v2, a0  # live: [a5, zero, a4, a2, a1, a3, v2]
// [Asm]   mv v3, a1  # live: [v2, a5, zero, a4, a2, a3, v3]
// [Asm]   mv v4, a2  # live: [v2, a5, zero, a4, v4, a3, v3]
// [Asm]   mv v5, a3  # live: [v2, v5, a5, zero, a4, v4, v3]
// [Asm]   mv v6, a4  # live: [v2, v5, a5, zero, v4, v6, v3]
// [Asm]   mv v7, a5  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v8, v2  # live: [v5, zero, v8, v7, v4, v6, v3]
// [Asm]   mv v9, v3  # live: [v5, zero, v8, v7, v4, v6, v9]
// [Asm]   mv v10, v4  # live: [v5, v10, zero, v8, v7, v6, v9]
// [Asm]   mv v11, v5  # live: [v11, v10, zero, v8, v7, v6, v9]
// [Asm]   mv v12, v6  # live: [v11, v10, zero, v8, v7, v12, v9]
// [Asm]   mv v13, v7  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v10, v8], upward_exposed: [v10, v8], params_defs: [v11, v10, v12, v9, v13, v8]
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: [v8, v9, v10, v11, v12, v13]
// [Asm] .aux46.266_0:
// [Asm] # control
// [Asm]   bge v8, v10, .aux46.266_1  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v16, v18, v134, v136, v137, v135, v138], uses: [v11, v16, v18, v8, v134, v136, v137, v135], upward_exposed: [v11, v8], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux46.266_2:
// [Asm]   th.lurw v16, v11, v8, 2  # live: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm]   addi v18, v16, -43  # live: [v11, v10, v18, v13, zero, v8, v12, v9]
// [Asm] # control
// [Asm]   li v134, 50  # live: [v11, v10, v18, v13, zero, v8, v134, v12, v9]
// [Asm]   bltu v134, v18, .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   la v135, .aux46.266_jtbl_0  # live: [v11, v10, v18, v13, zero, v8, v12, v9, v135]
// [Asm]   slliw v136, v18, 2  # live: [v11, v10, v13, zero, v8, v136, v12, v9, v135]
// [Asm]   add v137, v135, v136  # live: [v11, v10, v13, zero, v8, v12, v9, v137]
// [Asm]   lw v138, 0(v137)  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   jr v138  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .p2align 2  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .rodata  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] .aux46.266_jtbl_0:  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_7  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_13  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_9  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_11  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_5  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_3  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_15  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .word .aux46.266_17  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .p2align 2  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   .text  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v8, v94, v91, v96, v93], uses: [v11, v94, v91, v10, v96, v13, v8, v12, v9, v93], upward_exposed: [v11, v12, v10, v9, v13, v8], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux46.266_7:
// [Asm]   lw v91, 0(v9)  # live: [v11, v91, v10, v13, zero, v8, v12, v9]
// [Asm]   th.lurw v93, v12, v91, 2  # live: [v11, v91, v10, v13, zero, v8, v12, v9, v93]
// [Asm]   addi v94, v93, 1  # live: [v11, v94, v91, v10, v13, zero, v8, v12, v9]
// [Asm]   th.surw v94, v12, v91, 2  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   addi v96, v8, 1  # live: [v11, v10, v96, v13, zero, v12, v9]
// [Asm] # control
// [Asm]   mv v8, v96  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   j .aux46.266_0  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v67], uses: [v8], upward_exposed: [v8], params_defs: []
// [Asm] # live_in: [v8], live_out: [v67]
// [Asm] # block parameters: []
// [Asm] .aux46.266_18:
// [Asm] # control
// [Asm]   mv v67, v8  # live: [v67]
// [Asm] 
// [Asm] # block info: defs: [v68], uses: [v67], upward_exposed: [v67], params_defs: [v67]
// [Asm] # live_in: [v67], live_out: [v68]
// [Asm] # block parameters: [v67]
// [Asm] .aux46.266_19:
// [Asm] # control
// [Asm]   mv v68, v67  # live: [v68]
// [Asm] 
// [Asm] # block info: defs: [v69], uses: [v68], upward_exposed: [v68], params_defs: [v68]
// [Asm] # live_in: [v68], live_out: [v69]
// [Asm] # block parameters: [v68]
// [Asm] .aux46.266_20:
// [Asm] # control
// [Asm]   mv v69, v68  # live: [v69]
// [Asm] 
// [Asm] # block info: defs: [v70], uses: [v69], upward_exposed: [v69], params_defs: [v69]
// [Asm] # live_in: [v69], live_out: [v70]
// [Asm] # block parameters: [v69]
// [Asm] .aux46.266_21:
// [Asm] # control
// [Asm]   mv v70, v69  # live: [v70]
// [Asm] 
// [Asm] # block info: defs: [v71], uses: [v70], upward_exposed: [v70], params_defs: [v70]
// [Asm] # live_in: [v70], live_out: [v71]
// [Asm] # block parameters: [v70]
// [Asm] .aux46.266_22:
// [Asm] # control
// [Asm]   mv v71, v70  # live: [v71]
// [Asm] 
// [Asm] # block info: defs: [v72], uses: [v71], upward_exposed: [v71], params_defs: [v71]
// [Asm] # live_in: [v71], live_out: [v72]
// [Asm] # block parameters: [v71]
// [Asm] .aux46.266_23:
// [Asm] # control
// [Asm]   mv v72, v71  # live: [v72]
// [Asm] 
// [Asm] # block info: defs: [v73], uses: [v72], upward_exposed: [v72], params_defs: [v72]
// [Asm] # live_in: [v72], live_out: [v73]
// [Asm] # block parameters: [v72]
// [Asm] .aux46.266_24:
// [Asm] # control
// [Asm]   mv v73, v72  # live: [v73]
// [Asm] 
// [Asm] # block info: defs: [v74], uses: [v73], upward_exposed: [v73], params_defs: [v73]
// [Asm] # live_in: [v73], live_out: [v74]
// [Asm] # block parameters: [v73]
// [Asm] .aux46.266_25:
// [Asm] # control
// [Asm]   mv v74, v73  # live: [v74]
// [Asm] 
// [Asm] # block info: defs: [v97], uses: [v74], upward_exposed: [v74], params_defs: [v74]
// [Asm] # live_in: [v74], live_out: [v97]
// [Asm] # block parameters: [v74]
// [Asm] .aux46.266_26:
// [Asm] # control
// [Asm]   mv v97, v74  # live: [v97]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v97, a0], upward_exposed: [v97], params_defs: [v97]
// [Asm] # live_in: [v97], live_out: []
// [Asm] # block parameters: [v97]
// [Asm] .aux46.266_27:
// [Asm] # control
// [Asm]   mv a0, v97  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, v86, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, v90, ft5, ft7, ft4, v87, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v11, v87, v10, a0, v13, v8, v90, v12, v86, v9], upward_exposed: [v11, v12, v10, v9, v13, v8], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux46.266_13:
// [Asm]   lw v86, 0(v9)  # live: [v11, v10, v13, zero, v8, v12, v86, v9]
// [Asm]   # save_ctx2  # live: [v11, v10, v13, zero, v8, v12, v86, v9]
// [Asm]   call read_ch_until_newline_or_eof1.262  # live: [v11, v10, v13, zero, a0, v8, v12, v86, v9]
// [Asm]   mv v87, a0  # live: [v11, v87, v10, v13, zero, v8, v12, v86, v9]
// [Asm]   # restore_ctx2  # live: [v11, v87, v10, v13, zero, v8, v12, v86, v9]
// [Asm]   th.surw v87, v12, v86, 2  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   addi v90, v8, 1  # live: [v11, v10, v13, zero, v90, v12, v9]
// [Asm] # control
// [Asm]   mv v8, v90  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   j .aux46.266_0  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v8, v80, v82, v83, v85], uses: [v11, v82, v10, v13, v8, v85, v80, v12, v83, v9], upward_exposed: [v11, v12, v10, v9, v13, v8], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux46.266_9:
// [Asm]   lw v80, 0(v9)  # live: [v11, v10, v13, zero, v8, v80, v12, v9]
// [Asm]   th.lurw v82, v12, v80, 2  # live: [v11, v82, v10, v13, zero, v8, v80, v12, v9]
// [Asm]   addi v83, v82, -1  # live: [v11, v10, v13, zero, v8, v80, v12, v83, v9]
// [Asm]   th.surw v83, v12, v80, 2  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   addi v85, v8, 1  # live: [v11, v10, v13, zero, v85, v12, v9]
// [Asm] # control
// [Asm]   mv v8, v85  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   j .aux46.266_0  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [t1, v79, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, v78, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, v75, fa3, ft3, v77, fa0, t4, t2], uses: [v11, v75, v10, a0, v79, v13, v77, v8, v12, v9], upward_exposed: [v11, v12, v10, v9, v13, v8], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux46.266_11:
// [Asm]   lw v75, 0(v9)  # live: [v11, v10, v75, v13, zero, v8, v12, v9]
// [Asm]   th.lurw v77, v12, v75, 2  # live: [v11, v10, v13, zero, v77, v8, v12, v9]
// [Asm]   # save_ctx2  # live: [v11, v10, v13, zero, v77, v8, v12, v9]
// [Asm]   mv a0, v77  # live: [v11, v10, v13, zero, a0, v8, v12, v9]
// [Asm]   call minimbt_print_char  # live: [v11, v10, v13, zero, a0, v8, v12, v9]
// [Asm]   mv v78, a0  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   # restore_ctx2  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   addi v79, v8, 1  # live: [v11, v10, v13, zero, v79, v12, v9]
// [Asm] # control
// [Asm]   mv v8, v79  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   j .aux46.266_0  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v66, v63, v64, v8], uses: [v66, v11, v63, v10, v13, v8, v12, v9, v64], upward_exposed: [v11, v10, v12, v9, v13, v8], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux46.266_5:
// [Asm]   lw v63, 0(v9)  # live: [v11, v63, v10, v13, zero, v8, v12, v9]
// [Asm]   addi v64, v63, -1  # live: [v11, v10, v13, zero, v8, v12, v9, v64]
// [Asm]   sw v64, 0(v9)  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   addi v66, v8, 1  # live: [v11, v66, v10, v13, zero, v12, v9]
// [Asm] # control
// [Asm]   mv v8, v66  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   j .aux46.266_0  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v62, v59, v60, v8], uses: [v62, v11, v10, v13, v8, v59, v12, v9, v60], upward_exposed: [v11, v10, v12, v9, v13, v8], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux46.266_3:
// [Asm]   lw v59, 0(v9)  # live: [v11, v10, v13, zero, v8, v59, v12, v9]
// [Asm]   addi v60, v59, 1  # live: [v11, v10, v13, zero, v8, v12, v9, v60]
// [Asm]   sw v60, 0(v9)  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   addi v62, v8, 1  # live: [v11, v62, v10, v13, zero, v12, v9]
// [Asm] # control
// [Asm]   mv v8, v62  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   j .aux46.266_0  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v13, v8], upward_exposed: [v13, v8], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux46.266_15:
// [Asm]   sw v8, 0(v13)  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v23, v25, v21, v24, v20, v22], uses: [v11, v10, v12, v9, v13, v8], upward_exposed: [v11, v10, v12, v9, v13, v8], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v25, v11, v21, v10, zero, v13, v22, v23, v20, v24, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux46.266_54:
// [Asm] # control
// [Asm]   mv v20, v9  # live: [v11, v10, zero, v13, v20, v8, v12, v9]
// [Asm]   mv v21, v10  # live: [v11, v21, v10, zero, v13, v20, v8, v12, v9]
// [Asm]   mv v22, v8  # live: [v11, v21, v10, zero, v13, v22, v20, v12, v9]
// [Asm]   mv v23, v11  # live: [v11, v21, v10, zero, v13, v22, v23, v20, v12, v9]
// [Asm]   mv v24, v12  # live: [v11, v21, v10, zero, v13, v22, v23, v20, v24, v12, v9]
// [Asm]   mv v25, v13  # live: [v25, v11, v21, v10, zero, v13, v22, v23, v20, v24, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v28, v26], uses: [v24, v28, v26, zero, v20], upward_exposed: [v24, zero, v20], params_defs: [v23, v25, v21, v24, v20, v22]
// [Asm] # live_in: [v25, v11, v21, v10, zero, v13, v23, v20, v22, v24, v12, v9], live_out: [v25, v11, v21, v10, zero, v13, v22, v20, v23, v24, v12, v9]
// [Asm] # block parameters: [v20, v21, v22, v23, v24, v25]
// [Asm] .aux46.266_49:
// [Asm]   lw v26, 0(v20)  # live: [v25, v11, v21, v10, v13, v26, v22, v24, v12, v9, zero, v20, v23]
// [Asm]   th.lurw v28, v24, v26, 2  # live: [v25, v11, v21, v10, v13, v22, v24, v12, v28, v9, zero, v20, v23]
// [Asm] # control
// [Asm]   beq v28, zero, .aux46.266_50  # live: [v25, v11, v21, v10, zero, v13, v22, v20, v23, v24, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, v30, ft2, a2, a3, v31, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v25, v21, a5, a0, v22, v30, a2, a1, a3, v24, v31, v20, v23, a4], upward_exposed: [v25, v21, v23, v22, v20, v24], params_defs: []
// [Asm] # live_in: [v25, v11, v21, v10, zero, v13, v23, v22, v20, v24, v12, v9], live_out: [v25, v11, v21, v10, zero, v13, v22, v23, v20, v24, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux46.266_51:
// [Asm]   addi v30, v22, 1  # live: [v25, v11, v21, v10, v13, v22, v30, v24, v12, v9, zero, v23, v20]
// [Asm]   # save_ctx2  # live: [v25, v11, v21, v10, v13, v22, v30, v24, v12, v9, zero, v23, v20]
// [Asm]   mv a0, v30  # live: [v25, v11, v21, v10, a0, v13, v22, v24, v12, v9, zero, v23, v20]
// [Asm]   mv a1, v20  # live: [v25, v11, v21, v10, a0, v13, v22, a1, v24, v12, v9, zero, v23, v20]
// [Asm]   mv a2, v21  # live: [v25, v11, v21, v10, a0, v13, v22, a2, a1, v24, v12, v9, zero, v23, v20]
// [Asm]   mv a3, v23  # live: [v25, v11, v21, v10, a0, v13, v22, a2, a1, v24, v12, a3, v9, zero, v23, v20]
// [Asm]   mv a4, v24  # live: [v25, v11, v21, v10, a0, v13, v22, a2, a1, v24, v12, a3, v9, zero, v23, v20, a4]
// [Asm]   mv a5, v25  # live: [v25, v11, v21, v10, a5, a0, v13, v22, a2, a1, v24, v12, a3, v9, zero, v23, v20, a4]
// [Asm]   call aux46.266  # live: [v25, v11, v21, v10, v13, a0, v22, v24, v12, v9, zero, v23, v20]
// [Asm]   mv v31, a0  # live: [v25, v11, v21, v10, v13, v22, v24, v12, v31, v9, zero, v23, v20]
// [Asm]   # restore_ctx2  # live: [v25, v11, v21, v10, v13, v22, v24, v12, v31, v9, zero, v23, v20]
// [Asm]   sw v31, 0(v25)  # live: [v25, v11, v21, v10, zero, v13, v22, v23, v20, v24, v12, v9]
// [Asm] # control
// [Asm]   mv v20, v20  # live: [v25, v11, v21, v10, zero, v13, v22, v23, v20, v24, v12, v9]
// [Asm]   mv v21, v21  # live: [v25, v11, v21, v10, zero, v13, v22, v23, v20, v24, v12, v9]
// [Asm]   mv v22, v22  # live: [v25, v11, v21, v10, zero, v13, v22, v23, v20, v24, v12, v9]
// [Asm]   mv v23, v23  # live: [v25, v11, v21, v10, zero, v13, v22, v23, v20, v24, v12, v9]
// [Asm]   mv v24, v24  # live: [v25, v11, v21, v10, zero, v13, v22, v23, v20, v24, v12, v9]
// [Asm]   mv v25, v25  # live: [v25, v11, v21, v10, zero, v13, v22, v23, v20, v24, v12, v9]
// [Asm]   j .aux46.266_49  # live: [v25, v11, v21, v10, zero, v13, v22, v23, v20, v24, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v67], uses: [v8], upward_exposed: [v8], params_defs: []
// [Asm] # live_in: [v8], live_out: [v67]
// [Asm] # block parameters: []
// [Asm] .aux46.266_17:
// [Asm] # control
// [Asm]   mv v67, v8  # live: [v67]
// [Asm]   j .aux46.266_19  # live: [v67]
// [Asm] 
// [Asm] # block info: defs: [v97], uses: [v8], upward_exposed: [v8], params_defs: []
// [Asm] # live_in: [v8], live_out: [v97]
// [Asm] # block parameters: []
// [Asm] .aux46.266_1:
// [Asm] # control
// [Asm]   mv v97, v8  # live: [v97]
// [Asm]   j .aux46.266_27  # live: [v97]
// [Asm] 
// [Asm] # block info: defs: [v33], uses: [v22], upward_exposed: [v22], params_defs: []
// [Asm] # live_in: [v25, v11, v21, v10, zero, v13, v23, v22, v12, v9], live_out: [v25, v11, v21, v10, zero, v13, v23, v12, v33, v9]
// [Asm] # block parameters: []
// [Asm] .aux46.266_50:
// [Asm]   addi v33, v22, 1  # live: [v25, v11, v21, v10, zero, v13, v23, v12, v33, v9]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v36, v37, v34, v35], uses: [v21, v33, zero, v23], upward_exposed: [v21, v33, zero, v23], params_defs: []
// [Asm] # live_in: [v25, v11, v21, v10, zero, v13, v23, v12, v33, v9], live_out: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm] # block parameters: []
// [Asm] .aux46.266_72:
// [Asm] # control
// [Asm]   mv v34, v33  # live: [v25, v11, v10, v21, zero, v13, v23, v12, v34, v9]
// [Asm]   mv v35, zero  # live: [v25, v11, v10, v21, zero, v13, v23, v35, v12, v34, v9]
// [Asm]   mv v36, v21  # live: [v25, v11, v10, zero, v13, v23, v35, v36, v12, v34, v9]
// [Asm]   mv v37, v23  # live: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v34, v36], upward_exposed: [v34, v36], params_defs: [v36, v37, v34, v35]
// [Asm] # live_in: [v25, v11, v10, zero, v13, v35, v36, v37, v12, v34, v9], live_out: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm] # block parameters: [v34, v35, v36, v37]
// [Asm] .aux46.266_58:
// [Asm] # control
// [Asm]   bge v34, v36, .aux46.266_59  # live: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm] 
// [Asm] # block info: defs: [v127, v40], uses: [v37, v127, v34, v40], upward_exposed: [v37, v34], params_defs: []
// [Asm] # live_in: [v25, v11, v10, zero, v13, v35, v36, v37, v12, v34, v9], live_out: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9, v40]
// [Asm] # block parameters: []
// [Asm] .aux46.266_60:
// [Asm]   th.lurw v40, v37, v34, 2  # live: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9, v40]
// [Asm] # control
// [Asm]   li v127, 91  # live: [v25, v11, v10, v127, zero, v13, v36, v35, v37, v12, v34, v9, v40]
// [Asm]   beq v40, v127, .aux46.266_61  # live: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9, v40]
// [Asm] 
// [Asm] # block info: defs: [v126], uses: [v126, v40], upward_exposed: [v40], params_defs: []
// [Asm] # live_in: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9, v40], live_out: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm] # block parameters: []
// [Asm] .aux46.266_62:
// [Asm] # control
// [Asm]   li v126, 93  # live: [v25, v11, v10, zero, v13, v126, v35, v36, v37, v12, v34, v9, v40]
// [Asm]   bne v40, v126, .aux46.266_64  # live: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm] 
// [Asm] # block info: defs: [], uses: [zero, v35], upward_exposed: [zero, v35], params_defs: []
// [Asm] # live_in: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9], live_out: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm] # block parameters: []
// [Asm] .aux46.266_63:
// [Asm] # control
// [Asm]   beq v35, zero, .aux46.266_65  # live: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm] 
// [Asm] # block info: defs: [v35, v46, v34, v45], uses: [v45, v36, v37, v46, v34, v35], upward_exposed: [v36, v37, v34, v35], params_defs: []
// [Asm] # live_in: [v25, v11, v10, zero, v13, v35, v36, v37, v12, v34, v9], live_out: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm] # block parameters: []
// [Asm] .aux46.266_66:
// [Asm]   addi v45, v34, 1  # live: [v25, v11, v10, zero, v13, v36, v45, v35, v37, v12, v9]
// [Asm]   addi v46, v35, -1  # live: [v25, v11, v46, v10, zero, v13, v36, v45, v37, v12, v9]
// [Asm] # control
// [Asm]   mv v34, v45  # live: [v25, v11, v46, v10, zero, v13, v36, v37, v12, v34, v9]
// [Asm]   mv v35, v46  # live: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm]   mv v36, v36  # live: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm]   mv v37, v37  # live: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm]   j .aux46.266_58  # live: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm] 
// [Asm] # block info: defs: [v47], uses: [v34], upward_exposed: [v34], params_defs: []
// [Asm] # live_in: [v25, v11, v10, zero, v13, v12, v34, v9], live_out: [v25, v11, v10, zero, v13, v47, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux46.266_65:
// [Asm] # control
// [Asm]   mv v47, v34  # live: [v25, v11, v10, zero, v13, v47, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v48], uses: [v47], upward_exposed: [v47], params_defs: [v47]
// [Asm] # live_in: [v25, v11, v10, zero, v13, v47, v12, v9], live_out: [v25, v11, v48, v10, zero, v13, v12, v9]
// [Asm] # block parameters: [v47]
// [Asm] .aux46.266_67:
// [Asm] # control
// [Asm]   mv v48, v47  # live: [v25, v11, v48, v10, zero, v13, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v49], uses: [v48], upward_exposed: [v48], params_defs: [v48]
// [Asm] # live_in: [v25, v11, v48, v10, zero, v13, v12, v9], live_out: [v25, v11, v49, v10, zero, v13, v12, v9]
// [Asm] # block parameters: [v48]
// [Asm] .aux46.266_68:
// [Asm] # control
// [Asm]   mv v49, v48  # live: [v25, v11, v49, v10, zero, v13, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v52], uses: [v49], upward_exposed: [v49], params_defs: [v49]
// [Asm] # live_in: [v25, v11, v49, v10, zero, v13, v12, v9], live_out: [v25, v11, v10, zero, v13, v52, v12, v9]
// [Asm] # block parameters: [v49]
// [Asm] .aux46.266_69:
// [Asm] # control
// [Asm]   mv v52, v49  # live: [v25, v11, v10, zero, v13, v52, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v53], uses: [v52], upward_exposed: [v52], params_defs: [v52]
// [Asm] # live_in: [v25, v11, v10, zero, v13, v52, v12, v9], live_out: [v25, v11, v53, v10, zero, v13, v12, v9]
// [Asm] # block parameters: [v52]
// [Asm] .aux46.266_70:
// [Asm] # control
// [Asm]   mv v53, v52  # live: [v25, v11, v53, v10, zero, v13, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v55], uses: [v25, v53, zero], upward_exposed: [v25, v53, zero], params_defs: [v53]
// [Asm] # live_in: [v25, v11, v53, v10, zero, v13, v12, v9], live_out: [v11, v10, v13, zero, v12, v55, v9]
// [Asm] # block parameters: [v53]
// [Asm] .aux46.266_55:
// [Asm]   sw v53, 0(v25)  # live: [v11, v10, v13, zero, v12, v9]
// [Asm] # control
// [Asm]   mv v55, zero  # live: [v11, v10, v13, zero, v12, v55, v9]
// [Asm] 
// [Asm] # block info: defs: [v56], uses: [v55], upward_exposed: [v55], params_defs: [v55]
// [Asm] # live_in: [v11, v10, v13, zero, v12, v55, v9], live_out: [v11, v56, v10, v13, zero, v12, v9]
// [Asm] # block parameters: [v55]
// [Asm] .aux46.266_52:
// [Asm] # control
// [Asm]   mv v56, v55  # live: [v11, v56, v10, zero, v13, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v58, v57, v8], uses: [v11, v58, v10, v13, v57, v12, v9], upward_exposed: [v11, v10, v12, v13, v9], params_defs: [v56]
// [Asm] # live_in: [v11, v56, v10, v13, zero, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: [v56]
// [Asm] .aux46.266_30:
// [Asm]   lw v57, 0(v13)  # live: [v11, v10, v13, zero, v12, v57, v9]
// [Asm]   addi v58, v57, 1  # live: [v11, v58, v10, v13, zero, v12, v9]
// [Asm] # control
// [Asm]   mv v8, v58  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   j .aux46.266_0  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v43, v34], uses: [v36, v37, v43, v34, v35], upward_exposed: [v36, v37, v34, v35], params_defs: []
// [Asm] # live_in: [v25, v11, v10, zero, v13, v35, v36, v37, v12, v34, v9], live_out: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm] # block parameters: []
// [Asm] .aux46.266_64:
// [Asm]   addi v43, v34, 1  # live: [v25, v11, v10, zero, v13, v36, v35, v37, v43, v12, v9]
// [Asm] # control
// [Asm]   mv v34, v43  # live: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm]   mv v35, v35  # live: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm]   mv v36, v36  # live: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm]   mv v37, v37  # live: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm]   j .aux46.266_58  # live: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm] 
// [Asm] # block info: defs: [v35, v34, v50, v51], uses: [v51, v36, v37, v34, v50, v35], upward_exposed: [v36, v37, v34, v35], params_defs: []
// [Asm] # live_in: [v25, v11, v10, zero, v13, v35, v36, v37, v12, v34, v9], live_out: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm] # block parameters: []
// [Asm] .aux46.266_61:
// [Asm]   addi v50, v34, 1  # live: [v25, v11, v10, zero, v13, v50, v36, v35, v37, v12, v9]
// [Asm]   addi v51, v35, 1  # live: [v25, v11, v10, zero, v13, v50, v36, v37, v12, v9, v51]
// [Asm] # control
// [Asm]   mv v34, v50  # live: [v25, v11, v10, zero, v13, v36, v37, v12, v34, v9, v51]
// [Asm]   mv v35, v51  # live: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm]   mv v36, v36  # live: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm]   mv v37, v37  # live: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm]   j .aux46.266_58  # live: [v25, v11, v10, zero, v13, v36, v35, v37, v12, v34, v9]
// [Asm] 
// [Asm] # block info: defs: [v52], uses: [v34], upward_exposed: [v34], params_defs: []
// [Asm] # live_in: [v25, v11, v10, zero, v13, v12, v34, v9], live_out: [v25, v11, v10, zero, v13, v52, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux46.266_59:
// [Asm] # control
// [Asm]   mv v52, v34  # live: [v25, v11, v10, zero, v13, v52, v12, v9]
// [Asm]   j .aux46.266_70  # live: [v25, v11, v10, zero, v13, v52, v12, v9]
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("read_ch_until_newline_or_eof", Int), args: [], body: Let(("c", Var({val: Some(Int)})), App(Var("read_char"), []), If(Eq(Var("c"), Int(10)), Neg(Int(1), kind=Some(Int)), If(Eq(Var("c"), Int(13)), Neg(Int(1), kind=Some(Int)), Var("c"))))}, Let(("move_left", Int), Int(60), Let(("move_right", Int), Int(62), Let(("increase", Int), Int(43), Let(("decrease", Int), Int(45), Let(("print", Int), Int(46), Let(("read", Int), Int(44), Let(("loop_start", Int), Int(91), Let(("loop_end", Int), Int(93), LetRec({name: ("bf", Unit), args: [("len", Int), ("prog", Array(Int))], body: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("loop_start")), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Var("loop_end")), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("move_right")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), []))))))))))))
// [Knf] build_knf: Let(("c", Var({val: Some(Int)})), App(Var("read_char"), []), If(Eq(Var("c"), Int(10)), Neg(Int(1), kind=Some(Int)), If(Eq(Var("c"), Int(13)), Neg(Int(1), kind=Some(Int)), Var("c"))))
// [Knf] build_knf: App(Var("read_char"), [])
// [Knf] build_knf: If(Eq(Var("c"), Int(10)), Neg(Int(1), kind=Some(Int)), If(Eq(Var("c"), Int(13)), Neg(Int(1), kind=Some(Int)), Var("c")))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Neg(Int(1), kind=Some(Int))
// [Knf] build_knf: If(Eq(Var("c"), Int(13)), Neg(Int(1), kind=Some(Int)), Var("c"))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(13)
// [Knf] build_knf: Neg(Int(1), kind=Some(Int))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Let(("move_left", Int), Int(60), Let(("move_right", Int), Int(62), Let(("increase", Int), Int(43), Let(("decrease", Int), Int(45), Let(("print", Int), Int(46), Let(("read", Int), Int(44), Let(("loop_start", Int), Int(91), Let(("loop_end", Int), Int(93), LetRec({name: ("bf", Unit), args: [("len", Int), ("prog", Array(Int))], body: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("loop_start")), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Var("loop_end")), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("move_right")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), [])))))))))))
// [Knf] build_knf: Int(60)
// [Knf] build_knf: Let(("move_right", Int), Int(62), Let(("increase", Int), Int(43), Let(("decrease", Int), Int(45), Let(("print", Int), Int(46), Let(("read", Int), Int(44), Let(("loop_start", Int), Int(91), Let(("loop_end", Int), Int(93), LetRec({name: ("bf", Unit), args: [("len", Int), ("prog", Array(Int))], body: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("loop_start")), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Var("loop_end")), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("move_right")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), []))))))))))
// [Knf] build_knf: Int(62)
// [Knf] build_knf: Let(("increase", Int), Int(43), Let(("decrease", Int), Int(45), Let(("print", Int), Int(46), Let(("read", Int), Int(44), Let(("loop_start", Int), Int(91), Let(("loop_end", Int), Int(93), LetRec({name: ("bf", Unit), args: [("len", Int), ("prog", Array(Int))], body: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("loop_start")), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Var("loop_end")), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("move_right")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), [])))))))))
// [Knf] build_knf: Int(43)
// [Knf] build_knf: Let(("decrease", Int), Int(45), Let(("print", Int), Int(46), Let(("read", Int), Int(44), Let(("loop_start", Int), Int(91), Let(("loop_end", Int), Int(93), LetRec({name: ("bf", Unit), args: [("len", Int), ("prog", Array(Int))], body: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("loop_start")), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Var("loop_end")), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("move_right")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), []))))))))
// [Knf] build_knf: Int(45)
// [Knf] build_knf: Let(("print", Int), Int(46), Let(("read", Int), Int(44), Let(("loop_start", Int), Int(91), Let(("loop_end", Int), Int(93), LetRec({name: ("bf", Unit), args: [("len", Int), ("prog", Array(Int))], body: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("loop_start")), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Var("loop_end")), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("move_right")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), [])))))))
// [Knf] build_knf: Int(46)
// [Knf] build_knf: Let(("read", Int), Int(44), Let(("loop_start", Int), Int(91), Let(("loop_end", Int), Int(93), LetRec({name: ("bf", Unit), args: [("len", Int), ("prog", Array(Int))], body: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("loop_start")), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Var("loop_end")), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("move_right")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), []))))))
// [Knf] build_knf: Int(44)
// [Knf] build_knf: Let(("loop_start", Int), Int(91), Let(("loop_end", Int), Int(93), LetRec({name: ("bf", Unit), args: [("len", Int), ("prog", Array(Int))], body: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("loop_start")), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Var("loop_end")), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("move_right")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), [])))))
// [Knf] build_knf: Int(91)
// [Knf] build_knf: Let(("loop_end", Int), Int(93), LetRec({name: ("bf", Unit), args: [("len", Int), ("prog", Array(Int))], body: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("loop_start")), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Var("loop_end")), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("move_right")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), []))))
// [Knf] build_knf: Int(93)
// [Knf] build_knf: LetRec({name: ("bf", Unit), args: [("len", Int), ("prog", Array(Int))], body: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("loop_start")), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Var("loop_end")), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("move_right")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), [])))
// [Knf] build_knf: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("loop_start")), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Var("loop_end")), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("move_right")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("loop_start")), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Var("loop_end")), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("move_right")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit)))))
// [Knf] build_knf: Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0))
// [Knf] build_knf: Prim(Int(1024), Int(1024), Mul, kind=Some(Int))
// [Knf] build_knf: Int(1024)
// [Knf] build_knf: Int(1024)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("loop_start")), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Var("loop_end")), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("move_right")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("loop_start")), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Var("loop_end")), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("move_right")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit)))
// [Knf] build_knf: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("loop_start")), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Var("loop_end")), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("loop_start")), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Var("loop_end")), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")]))))
// [Knf] build_knf: Get(Var("prog"), Var("pc"))
// [Knf] build_knf: Var("prog")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: If(Eq(Var("i"), Var("loop_start")), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Var("loop_end")), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("loop_start")
// [Knf] build_knf: App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("skip")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Prim(Var("level"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("level")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Var("loop_end")), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")]))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("loop_end")
// [Knf] build_knf: If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))]))
// [Knf] build_knf: Var("level")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("skip")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Prim(Var("level"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("level")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])
// [Knf] build_knf: Var("skip")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("level")
// [Knf] build_knf: LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("move_right")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))
// [Knf] build_knf: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("move_right")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))))))))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Var("move_right")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc"))))))))))
// [Knf] build_knf: Get(Var("prog"), Var("pc"))
// [Knf] build_knf: Var("prog")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: If(Eq(Var("i"), Var("move_right")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("move_right")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Var("move_left")), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc"))))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("move_left")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Var("increase")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("increase")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("cells"), Get(Var("ptr"), Int(0)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Var("decrease")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc"))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("decrease")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("cells"), Get(Var("ptr"), Int(0)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Var("print")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("print")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))])
// [Knf] build_knf: Get(Var("cells"), Get(Var("ptr"), Int(0)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Var("read")), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc"))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("read")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), []))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("read_ch_until_newline_or_eof"), [])
// [Knf] build_knf: Var("read_ch_until_newline_or_eof")
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Var("loop_start")), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc")))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("loop_start")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: Put(Var("next_pc"), Int(0), Var("pc"))
// [Knf] build_knf: Var("next_pc")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))
// [Knf] build_knf: Get(Var("cells"), Get(Var("ptr"), Int(0)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit)
// [Knf] build_knf: Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)]))
// [Knf] build_knf: Var("next_pc")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])
// [Knf] build_knf: Var("skip")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), []))
// [Knf] build_knf: Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Var("next_pc")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("lp"), [])
// [Knf] build_knf: Var("lp")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("lp"), [])
// [Knf] build_knf: Var("lp")
// [Knf] build_knf: App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("next_pc"), Int(0))
// [Knf] build_knf: Var("next_pc")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Var("loop_end")), Var("pc"), Var("pc"))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("loop_end")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit)
// [Knf] build_knf: App(Var("aux"), [Int(0)])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))
// [Knf] build_knf: Int(1024)
// [Knf] build_knf: Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit)))
// [Knf] build_knf: Array(Var("len"), Int(0))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))
// [Knf] build_knf: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: App(Var("read_ch_until_newline_or_eof"), [])
// [Knf] build_knf: Var("read_ch_until_newline_or_eof")
// [Knf] build_knf: If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Neg(Int(1), kind=Some(Int))
// [Knf] build_knf: App(Var("bf"), [Var("i"), Var("prog")])
// [Knf] build_knf: Var("bf")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("prog")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("prog"), Var("i"), Var("x"))
// [Knf] build_knf: Var("prog")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("read_prog")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit)
// [Knf] build_knf: App(Var("read_prog"), [Int(0)])
// [Knf] build_knf: Var("read_prog")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] top int reduce move_left.5 = Int(60)
// [Main] top int reduce move_right.6 = Int(62)
// [Main] top int reduce increase.7 = Int(43)
// [Main] top int reduce decrease.8 = Int(45)
// [Main] top int reduce print.9 = Int(46)
// [Main] top int reduce read.10 = Int(44)
// [Main] top int reduce loop_start.11 = Int(91)
// [Main] top int reduce loop_end.12 = Int(93)
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main134.263
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl read_prog138.264
// [Main]   .type read_prog138.264, @function
// [Main] # leaf false
// [Main] read_prog138.264:
// [Main] .read_prog138.264_5:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main] 
// [Main] .read_prog138.264_0:
// [Main]   call read_ch_until_newline_or_eof1.262
// [Main]   li a1, -1
// [Main]   bne a0, a1, .read_prog138.264_2
// [Main] 
// [Main] .read_prog138.264_1:
// [Main]   addi a2, s11, -4
// [Main]   andi s11, a2, -8
// [Main]   sw zero, 0(a2)
// [Main]   li a0, 1024
// [Main]   slli a0, a0, 10
// [Main]   slliw a1, a0, 2
// [Main]   sub a4, s11, a1
// [Main]   andi s11, a4, -8
// [Main]   mv a1, a0
// [Main]   addi a5, s11, -4
// [Main]   andi s11, a5, -8
// [Main]   sw zero, 0(a5)
// [Main]   mv a0, zero
// [Main]   mv a1, a2
// [Main]   mv a2, s0
// [Main]   mv a3, s1
// [Main]   call aux46.266
// [Main]   mv a0, zero
// [Main] 
// [Main] .read_prog138.264_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .read_prog138.264_2:
// [Main]   th.surw a0, s1, s0, 2
// [Main]   addi a0, s0, 1
// [Main]   mv s0, a0
// [Main]   j .read_prog138.264_0
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main134.263
// [Main]   .type main134.263, @function
// [Main] # leaf false
// [Main] main134.263:
// [Main] .main134.263_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   li a0, 4096
// [Main]   sub a2, s11, a0
// [Main]   andi s11, a2, -8
// [Main]   li a0, 1024
// [Main]   mv a1, a0
// [Main]   mv a0, zero
// [Main]   mv a1, a2
// [Main]   call read_prog138.264
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl read_ch_until_newline_or_eof1.262
// [Main]   .type read_ch_until_newline_or_eof1.262, @function
// [Main] # leaf false
// [Main] read_ch_until_newline_or_eof1.262:
// [Main] .read_ch_until_newline_or_eof1.262_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call minimbt_read_char
// [Main]   li a1, 10
// [Main]   beq a0, a1, .read_ch_until_newline_or_eof1.262_1
// [Main] 
// [Main] .read_ch_until_newline_or_eof1.262_2:
// [Main]   li a1, 13
// [Main]   bne a0, a1, .read_ch_until_newline_or_eof1.262_4
// [Main] 
// [Main] .read_ch_until_newline_or_eof1.262_3:
// [Main]   li a0, -1
// [Main] 
// [Main] .read_ch_until_newline_or_eof1.262_5:
// [Main] 
// [Main] .read_ch_until_newline_or_eof1.262_6:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .read_ch_until_newline_or_eof1.262_4:
// [Main]   j .read_ch_until_newline_or_eof1.262_5
// [Main] 
// [Main] .read_ch_until_newline_or_eof1.262_1:
// [Main]   li a0, -1
// [Main]   j .read_ch_until_newline_or_eof1.262_6
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux46.266
// [Main]   .type aux46.266, @function
// [Main] # leaf false
// [Main] aux46.266:
// [Main] .aux46.266_29:
// [Main]   addi sp, sp, -64
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   sd s6, 56(sp)
// [Main]   mv s0, a0
// [Main]   mv s5, a1
// [Main]   mv s2, a2
// [Main]   mv s1, a3
// [Main]   mv s4, a4
// [Main]   mv s3, a5
// [Main] 
// [Main] .aux46.266_0:
// [Main]   bge s0, s2, .aux46.266_1
// [Main] 
// [Main] .aux46.266_2:
// [Main]   th.lurw a0, s1, s0, 2
// [Main]   addi a0, a0, -43
// [Main]   li a1, 50
// [Main]   bltu a1, a0, .aux46.266_18
// [Main]   la a1, .aux46.266_jtbl_0
// [Main]   slliw a0, a0, 2
// [Main]   add a0, a1, a0
// [Main]   lw a0, 0(a0)
// [Main]   jr a0
// [Main]   .p2align 2
// [Main]   .rodata
// [Main] .aux46.266_jtbl_0:
// [Main]   .word .aux46.266_7
// [Main]   .word .aux46.266_13
// [Main]   .word .aux46.266_9
// [Main]   .word .aux46.266_11
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_5
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_3
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_15
// [Main]   .word .aux46.266_18
// [Main]   .word .aux46.266_17
// [Main]   .p2align 2
// [Main]   .text
// [Main] 
// [Main] .aux46.266_7:
// [Main]   lw a0, 0(s5)
// [Main]   th.lurw a1, s4, a0, 2
// [Main]   addi a1, a1, 1
// [Main]   th.surw a1, s4, a0, 2
// [Main]   addi a0, s0, 1
// [Main]   mv s0, a0
// [Main]   j .aux46.266_0
// [Main] 
// [Main] .aux46.266_18:
// [Main]   mv a0, s0
// [Main] 
// [Main] .aux46.266_19:
// [Main] 
// [Main] .aux46.266_20:
// [Main] 
// [Main] .aux46.266_21:
// [Main] 
// [Main] .aux46.266_22:
// [Main] 
// [Main] .aux46.266_23:
// [Main] 
// [Main] .aux46.266_24:
// [Main] 
// [Main] .aux46.266_25:
// [Main] 
// [Main] .aux46.266_26:
// [Main] 
// [Main] .aux46.266_27:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   ld s6, 56(sp)
// [Main]   addi sp, sp, 64
// [Main]   ret
// [Main] 
// [Main] .aux46.266_13:
// [Main]   lw s6, 0(s5)
// [Main]   call read_ch_until_newline_or_eof1.262
// [Main]   th.surw a0, s4, s6, 2
// [Main]   addi a0, s0, 1
// [Main]   mv s0, a0
// [Main]   j .aux46.266_0
// [Main] 
// [Main] .aux46.266_9:
// [Main]   lw a0, 0(s5)
// [Main]   th.lurw a1, s4, a0, 2
// [Main]   addi a1, a1, -1
// [Main]   th.surw a1, s4, a0, 2
// [Main]   addi a0, s0, 1
// [Main]   mv s0, a0
// [Main]   j .aux46.266_0
// [Main] 
// [Main] .aux46.266_11:
// [Main]   lw a0, 0(s5)
// [Main]   th.lurw a0, s4, a0, 2
// [Main]   call minimbt_print_char
// [Main]   addi a0, s0, 1
// [Main]   mv s0, a0
// [Main]   j .aux46.266_0
// [Main] 
// [Main] .aux46.266_5:
// [Main]   lw a0, 0(s5)
// [Main]   addi a0, a0, -1
// [Main]   sw a0, 0(s5)
// [Main]   addi a0, s0, 1
// [Main]   mv s0, a0
// [Main]   j .aux46.266_0
// [Main] 
// [Main] .aux46.266_3:
// [Main]   lw a0, 0(s5)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s5)
// [Main]   addi a0, s0, 1
// [Main]   mv s0, a0
// [Main]   j .aux46.266_0
// [Main] 
// [Main] .aux46.266_15:
// [Main]   sw s0, 0(s3)
// [Main] 
// [Main] .aux46.266_54:
// [Main] 
// [Main] .aux46.266_49:
// [Main]   lw a0, 0(s5)
// [Main]   th.lurw a0, s4, a0, 2
// [Main]   beq a0, zero, .aux46.266_50
// [Main] 
// [Main] .aux46.266_51:
// [Main]   addi a0, s0, 1
// [Main]   mv a1, s5
// [Main]   mv a2, s2
// [Main]   mv a3, s1
// [Main]   mv a4, s4
// [Main]   mv a5, s3
// [Main]   call aux46.266
// [Main]   sw a0, 0(s3)
// [Main]   j .aux46.266_49
// [Main] 
// [Main] .aux46.266_17:
// [Main]   mv a0, s0
// [Main]   j .aux46.266_19
// [Main] 
// [Main] .aux46.266_1:
// [Main]   mv a0, s0
// [Main]   j .aux46.266_27
// [Main] 
// [Main] .aux46.266_50:
// [Main]   addi a0, s0, 1
// [Main] 
// [Main] .aux46.266_72:
// [Main]   mv a1, zero
// [Main]   mv a2, s2
// [Main]   mv a3, s1
// [Main] 
// [Main] .aux46.266_58:
// [Main]   bge a0, a2, .aux46.266_59
// [Main] 
// [Main] .aux46.266_60:
// [Main]   th.lurw a4, a3, a0, 2
// [Main]   li a5, 91
// [Main]   beq a4, a5, .aux46.266_61
// [Main] 
// [Main] .aux46.266_62:
// [Main]   li a5, 93
// [Main]   bne a4, a5, .aux46.266_64
// [Main] 
// [Main] .aux46.266_63:
// [Main]   beq a1, zero, .aux46.266_65
// [Main] 
// [Main] .aux46.266_66:
// [Main]   addi a0, a0, 1
// [Main]   addi a1, a1, -1
// [Main]   j .aux46.266_58
// [Main] 
// [Main] .aux46.266_65:
// [Main] 
// [Main] .aux46.266_67:
// [Main] 
// [Main] .aux46.266_68:
// [Main] 
// [Main] .aux46.266_69:
// [Main] 
// [Main] .aux46.266_70:
// [Main] 
// [Main] .aux46.266_55:
// [Main]   sw a0, 0(s3)
// [Main]   mv a0, zero
// [Main] 
// [Main] .aux46.266_52:
// [Main] 
// [Main] .aux46.266_30:
// [Main]   lw a0, 0(s3)
// [Main]   addi a0, a0, 1
// [Main]   mv s0, a0
// [Main]   j .aux46.266_0
// [Main] 
// [Main] .aux46.266_64:
// [Main]   addi a0, a0, 1
// [Main]   j .aux46.266_58
// [Main] 
// [Main] .aux46.266_61:
// [Main]   addi a0, a0, 1
// [Main]   addi a1, a1, 1
// [Main]   j .aux46.266_58
// [Main] 
// [Main] .aux46.266_59:
// [Main]   j .aux46.266_70
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f5, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [Wasm] LoweringOrder: [5, 0, 2, 1, 3]
// [Wasm] LoweringOrder: [[4], [1, 2], [0], [3], []]
// [Wasm] LoweringOrder: HashMap::of([(b1, 0), (b5, 0), (b2, 1), (b3, 0), (b0, 0)])
// [Wasm] LoweringOrder: [b5, b0, b1, b3, b2]
// [Wasm] LoweringOrder: HashMap::of([(b1, 2), (b5, 0), (b2, 0), (b3, 3), (b0, 1)])
// [Wasm] Lowering function read_prog138.264
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Int32(val=1024), Int32(val=1024)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m1, fills=[Zero])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m2, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Lowering insn Call(ty=Int32, f=f3, args=[Int32(val=0), Mem(fref=f4, mref=m0), BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Mem(fref=f4, mref=m1), Mem(fref=f4, mref=m2)])
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), offset=BlockParam(bref=b0, bpref=$b.0), width=@32), val=Insn(iref=%0))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%8), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Lowering insn Call(ty=Int32, f=f0, args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=-1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f4, fpref=$f.0), FnParam(fref=f4, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Local Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function read_prog138.264 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function main134.263
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[Int32(val=0), Mem(fref=f5, mref=m0)])
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Local Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Lowered function main134.263 to wasm
// [Wasm] LoweringOrder: [29, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 17, 19, 20, 21, 22, 23, 24, 25, 26, 15, 54, 49, 51, 50, 72, 58, 60, 62, 64, 63, 66, 65, 67, 68, 69, 61, 59, 70, 55, 52, 30, 13, 11, 9, 7, 5, 3, 1, 27]
// [Wasm] LoweringOrder: [[28], [1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19], [19], [20], [21], [22], [23], [24], [25], [26], [27], [54], [53], [50, 51], [49], [72], [71], [59, 60], [61, 62], [63, 64], [58], [65, 66], [58], [67], [68], [69], [70], [58], [70], [55], [52], [30], [0], [0], [0], [0], [0], [0], [0], [27], []]
// [Wasm] LoweringOrder: HashMap::of([(b9, 5), (b60, 11), (b13, 3), (b26, 0), (b15, 2), (b62, 11), (b65, 13), (b1, 9), (b2, 0), (b22, 0), (b6, 0), (b12, 0), (b58, 11), (b61, 15), (b64, 14), (b59, 16), (b67, 13), (b10, 0), (b25, 0), (b5, 7), (b29, 0), (b14, 0), (b30, 13), (b27, 0), (b23, 0), (b8, 0), (b16, 0), (b19, 0), (b69, 13), (b11, 4), (b18, 1), (b24, 0), (b21, 0), (b70, 13), (b20, 0), (b72, 11), (b4, 0), (b55, 13), (b17, 0), (b68, 13), (b0, 0), (b52, 13), (b66, 11), (b51, 2), (b50, 11), (b54, 2), (b3, 8), (b7, 6), (b49, 2), (b63, 11)])
// [Wasm] LoweringOrder: [b29, b0, b2, b4, b6, b8, b10, b12, b14, b16, b17, b19, b20, b21, b22, b23, b24, b25, b26, b27, b18, b15, b54, b49, b51, b13, b11, b9, b7, b5, b3, b1, b50, b72, b58, b60, b62, b63, b66, b65, b67, b68, b69, b70, b55, b52, b30, b64, b61, b59]
// [Wasm] LoweringOrder: HashMap::of([(b9, 0), (b60, 3), (b13, 0), (b26, 18), (b15, 0), (b62, 4), (b65, 0), (b1, 0), (b2, 2), (b22, 14), (b6, 4), (b12, 7), (b58, 2), (b61, 0), (b64, 0), (b59, 0), (b67, 1), (b10, 6), (b25, 17), (b5, 0), (b29, 0), (b14, 8), (b30, 7), (b27, 19), (b23, 15), (b8, 5), (b16, 9), (b19, 11), (b69, 3), (b11, 0), (b18, 0), (b24, 16), (b21, 13), (b70, 4), (b20, 12), (b72, 1), (b4, 3), (b55, 5), (b17, 10), (b68, 2), (b0, 1), (b52, 6), (b66, 6), (b51, 3), (b50, 0), (b54, 1), (b3, 0), (b7, 0), (b49, 2), (b63, 5)])
// [Wasm] Lowering function aux46.266
// [Wasm] Lowering control Return(args=[BlockParam(bref=b27, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Lowering control Jump(target=b27, args=[BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%3), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32), val=Insn(iref=%4))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%6), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%9), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32), val=Insn(iref=%10))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%12), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), offset=Insn(iref=%15), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%17), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), offset=Insn(iref=%15), width=@32), val=Insn(iref=%18))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%20), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), offset=Insn(iref=%23), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%25), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), offset=Insn(iref=%23), width=@32), val=Insn(iref=%26))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%28), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), offset=Insn(iref=%31), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Insn(iref=%32)])
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%34), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Lowering insn Call(ty=Int32, f=f0, args=[])
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), offset=Insn(iref=%37), width=@32), val=Insn(iref=%38))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%40), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.5), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%45), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%46), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering control Jump(target=b30, args=[BlockParam(bref=b52, bpref=$b.0)])
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b49, bpref=$b.5), index=0, width=@32), val=BlockParam(bref=b55, bpref=$b.0))
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.5) -> $b49.$b.5
// [Wasm] Get Local name BlockParam(bref=b55, bpref=$b.0) -> $b55.$b.0
// [Wasm] Lowering control Jump(target=b52, args=[Unit])
// [Wasm] Lowering control Jump(target=b55, args=[BlockParam(bref=b70, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b70, bpref=$b.0) -> $b70.$b.0
// [Wasm] Get Local name BlockParam(bref=b55, bpref=$b.0) -> $b55.$b.0
// [Wasm] Lowering control Jump(target=b70, args=[BlockParam(bref=b58, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Get Local name BlockParam(bref=b70, bpref=$b.0) -> $b70.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b58, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Get Local name Insn(iref=%61) -> $%61
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b58, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.1) -> $b58.$b.1
// [Wasm] Get Local name Insn(iref=%62) -> $%62
// [Wasm] Lowering control Jump(target=b58, args=[Insn(iref=%61), Insn(iref=%62), BlockParam(bref=b58, bpref=$b.2), BlockParam(bref=b58, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%61) -> $%61
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Get Local name Insn(iref=%62) -> $%62
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.1) -> $b58.$b.1
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.2) -> $b58.$b.2
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.2) -> $b58.$b.2
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.3) -> $b58.$b.3
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.3) -> $b58.$b.3
// [Wasm] Lowering control Jump(target=b70, args=[BlockParam(bref=b69, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b69, bpref=$b.0) -> $b69.$b.0
// [Wasm] Get Local name BlockParam(bref=b70, bpref=$b.0) -> $b70.$b.0
// [Wasm] Lowering control Jump(target=b69, args=[BlockParam(bref=b68, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b68, bpref=$b.0) -> $b68.$b.0
// [Wasm] Get Local name BlockParam(bref=b69, bpref=$b.0) -> $b69.$b.0
// [Wasm] Lowering control Jump(target=b68, args=[BlockParam(bref=b67, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b67, bpref=$b.0) -> $b67.$b.0
// [Wasm] Get Local name BlockParam(bref=b68, bpref=$b.0) -> $b68.$b.0
// [Wasm] Lowering control Jump(target=b67, args=[BlockParam(bref=b58, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Get Local name BlockParam(bref=b67, bpref=$b.0) -> $b67.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b58, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Get Local name Insn(iref=%66) -> $%66
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b58, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.1) -> $b58.$b.1
// [Wasm] Get Local name Insn(iref=%67) -> $%67
// [Wasm] Lowering control Jump(target=b58, args=[Insn(iref=%66), Insn(iref=%67), BlockParam(bref=b58, bpref=$b.2), BlockParam(bref=b58, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%66) -> $%66
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Get Local name Insn(iref=%67) -> $%67
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.1) -> $b58.$b.1
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.2) -> $b58.$b.2
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.2) -> $b58.$b.2
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.3) -> $b58.$b.3
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.3) -> $b58.$b.3
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b58, bpref=$b.1), Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.1) -> $b58.$b.1
// [Wasm] Get Local name Insn(iref=%65) -> $%65
// [Wasm] Lowering control Branch(cond=Insn(iref=%65), t=b65, t_args=[], f=b66, f_args=[])
// [Wasm] Get Local name Insn(iref=%65) -> $%65
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b58, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Get Local name Insn(iref=%69) -> $%69
// [Wasm] Lowering control Jump(target=b58, args=[Insn(iref=%69), BlockParam(bref=b58, bpref=$b.1), BlockParam(bref=b58, bpref=$b.2), BlockParam(bref=b58, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%69) -> $%69
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.1) -> $b58.$b.1
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.1) -> $b58.$b.1
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.2) -> $b58.$b.2
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.2) -> $b58.$b.2
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.3) -> $b58.$b.3
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.3) -> $b58.$b.3
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%59), Int32(val=93)])
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Get Local name Insn(iref=%64) -> $%64
// [Wasm] Lowering control Branch(cond=Insn(iref=%64), t=b63, t_args=[], f=b64, f_args=[])
// [Wasm] Get Local name Insn(iref=%64) -> $%64
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b58, bpref=$b.3), offset=BlockParam(bref=b58, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.3) -> $b58.$b.3
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%59), Int32(val=91)])
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Get Local name Insn(iref=%60) -> $%60
// [Wasm] Lowering control Branch(cond=Insn(iref=%60), t=b61, t_args=[], f=b62, f_args=[])
// [Wasm] Get Local name Insn(iref=%60) -> $%60
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b58, bpref=$b.2), BlockParam(bref=b58, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.2) -> $b58.$b.2
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Get Local name Insn(iref=%58) -> $%58
// [Wasm] Lowering control Branch(cond=Insn(iref=%58), t=b59, t_args=[], f=b60, f_args=[])
// [Wasm] Get Local name Insn(iref=%58) -> $%58
// [Wasm] Lowering control Jump(target=b71, args=[Insn(iref=%52), Int32(val=0), BlockParam(bref=b49, bpref=$b.1), BlockParam(bref=b49, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%52) -> $%52
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.1) -> $b58.$b.1
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.1) -> $b49.$b.1
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.2) -> $b58.$b.2
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.3) -> $b49.$b.3
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.3) -> $b58.$b.3
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b49, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.2) -> $b49.$b.2
// [Wasm] Get Local name Insn(iref=%52) -> $%52
// [Wasm] Lowering control Jump(target=b72, args=[])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b49, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.2) -> $b49.$b.2
// [Wasm] Get Local name Insn(iref=%55) -> $%55
// [Wasm] Lowering insn Call(ty=Int32, f=f3, args=[Insn(iref=%55), BlockParam(bref=b49, bpref=$b.0), BlockParam(bref=b49, bpref=$b.1), BlockParam(bref=b49, bpref=$b.3), BlockParam(bref=b49, bpref=$b.4), BlockParam(bref=b49, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%55) -> $%55
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.0) -> $b49.$b.0
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.1) -> $b49.$b.1
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.3) -> $b49.$b.3
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.4) -> $b49.$b.4
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.5) -> $b49.$b.5
// [Wasm] Get Local name Insn(iref=%56) -> $%56
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b49, bpref=$b.5), index=0, width=@32), val=Insn(iref=%56))
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.5) -> $b49.$b.5
// [Wasm] Get Local name Insn(iref=%56) -> $%56
// [Wasm] Lowering control Jump(target=b49, args=[BlockParam(bref=b49, bpref=$b.0), BlockParam(bref=b49, bpref=$b.1), BlockParam(bref=b49, bpref=$b.2), BlockParam(bref=b49, bpref=$b.3), BlockParam(bref=b49, bpref=$b.4), BlockParam(bref=b49, bpref=$b.5)])
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.0) -> $b49.$b.0
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.0) -> $b49.$b.0
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.1) -> $b49.$b.1
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.1) -> $b49.$b.1
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.2) -> $b49.$b.2
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.2) -> $b49.$b.2
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.3) -> $b49.$b.3
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.3) -> $b49.$b.3
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.4) -> $b49.$b.4
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.4) -> $b49.$b.4
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.5) -> $b49.$b.5
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.5) -> $b49.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b49, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.0) -> $b49.$b.0
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b49, bpref=$b.4), offset=Insn(iref=%49), width=@32))
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.4) -> $b49.$b.4
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Get Local name Insn(iref=%50) -> $%50
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%50), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%50) -> $%50
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Lowering control Branch(cond=Insn(iref=%51), t=b50, t_args=[], f=b51, f_args=[])
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Lowering control Jump(target=b53, args=[BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.0) -> $b49.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.1) -> $b49.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.2) -> $b49.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.3) -> $b49.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.4) -> $b49.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b49, bpref=$b.5) -> $b49.$b.5
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.5), index=0, width=@32), val=BlockParam(bref=b0, bpref=$b.0))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering control Jump(target=b54, args=[])
// [Wasm] Lowering control Jump(target=b27, args=[BlockParam(bref=b26, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Lowering control Jump(target=b26, args=[BlockParam(bref=b25, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.0) -> $b25.$b.0
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Lowering control Jump(target=b25, args=[BlockParam(bref=b24, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b24, bpref=$b.0) -> $b24.$b.0
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.0) -> $b25.$b.0
// [Wasm] Lowering control Jump(target=b24, args=[BlockParam(bref=b23, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.0) -> $b23.$b.0
// [Wasm] Get Local name BlockParam(bref=b24, bpref=$b.0) -> $b24.$b.0
// [Wasm] Lowering control Jump(target=b23, args=[BlockParam(bref=b22, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b22, bpref=$b.0) -> $b22.$b.0
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.0) -> $b23.$b.0
// [Wasm] Lowering control Jump(target=b22, args=[BlockParam(bref=b21, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.0) -> $b21.$b.0
// [Wasm] Get Local name BlockParam(bref=b22, bpref=$b.0) -> $b22.$b.0
// [Wasm] Lowering control Jump(target=b21, args=[BlockParam(bref=b20, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.0) -> $b21.$b.0
// [Wasm] Lowering control Jump(target=b20, args=[BlockParam(bref=b19, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.0) -> $b19.$b.0
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Lowering control Jump(target=b19, args=[BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.0) -> $b19.$b.0
// [Wasm] Lowering control Jump(target=b19, args=[BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.0) -> $b19.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=93)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Lowering control Branch(cond=Insn(iref=%48), t=b17, t_args=[], f=b18, f_args=[])
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=91)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering control Branch(cond=Insn(iref=%42), t=b15, t_args=[], f=b16, f_args=[])
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=44)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering control Branch(cond=Insn(iref=%36), t=b13, t_args=[], f=b14, f_args=[])
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=46)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering control Branch(cond=Insn(iref=%30), t=b11, t_args=[], f=b12, f_args=[])
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=45)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering control Branch(cond=Insn(iref=%22), t=b9, t_args=[], f=b10, f_args=[])
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=43)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering control Branch(cond=Insn(iref=%14), t=b7, t_args=[], f=b8, f_args=[])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=60)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering control Branch(cond=Insn(iref=%8), t=b5, t_args=[], f=b6, f_args=[])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.3), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=62)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b28, args=[FnParam(fref=f3, fpref=$f.0), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.5) -> $$f.5
// [Wasm] Local BlockParam(bref=b69, bpref=$b.0) -> $b69.$b.0
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local BlockParam(bref=b49, bpref=$b.4) -> $b49.$b.4
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b49, bpref=$b.0) -> $b49.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Local Insn(iref=%25) -> $%25
// [Wasm] Local Insn(iref=%59) -> $%59
// [Wasm] Local BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Local BlockParam(bref=b67, bpref=$b.0) -> $b67.$b.0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local BlockParam(bref=b25, bpref=$b.0) -> $b25.$b.0
// [Wasm] Local Insn(iref=%56) -> $%56
// [Wasm] Local Insn(iref=%49) -> $%49
// [Wasm] Local Insn(iref=%42) -> $%42
// [Wasm] Local Insn(iref=%65) -> $%65
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local BlockParam(bref=b49, bpref=$b.2) -> $b49.$b.2
// [Wasm] Local BlockParam(bref=b49, bpref=$b.5) -> $b49.$b.5
// [Wasm] Local BlockParam(bref=b23, bpref=$b.0) -> $b23.$b.0
// [Wasm] Local BlockParam(bref=b24, bpref=$b.0) -> $b24.$b.0
// [Wasm] Local Insn(iref=%31) -> $%31
// [Wasm] Local Insn(iref=%64) -> $%64
// [Wasm] Local BlockParam(bref=b19, bpref=$b.0) -> $b19.$b.0
// [Wasm] Local BlockParam(bref=b22, bpref=$b.0) -> $b22.$b.0
// [Wasm] Local Insn(iref=%38) -> $%38
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local Insn(iref=%67) -> $%67
// [Wasm] Local Insn(iref=%60) -> $%60
// [Wasm] Local BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Local Insn(iref=%55) -> $%55
// [Wasm] Local Insn(iref=%66) -> $%66
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%48) -> $%48
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local BlockParam(bref=b21, bpref=$b.0) -> $b21.$b.0
// [Wasm] Local BlockParam(bref=b58, bpref=$b.2) -> $b58.$b.2
// [Wasm] Local Insn(iref=%34) -> $%34
// [Wasm] Local BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Local Insn(iref=%36) -> $%36
// [Wasm] Local BlockParam(bref=b70, bpref=$b.0) -> $b70.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local Insn(iref=%50) -> $%50
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%51) -> $%51
// [Wasm] Local BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Local Insn(iref=%52) -> $%52
// [Wasm] Local BlockParam(bref=b68, bpref=$b.0) -> $b68.$b.0
// [Wasm] Local Insn(iref=%32) -> $%32
// [Wasm] Local Insn(iref=%58) -> $%58
// [Wasm] Local BlockParam(bref=b58, bpref=$b.1) -> $b58.$b.1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b55, bpref=$b.0) -> $b55.$b.0
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%62) -> $%62
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local Insn(iref=%46) -> $%46
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%37) -> $%37
// [Wasm] Local BlockParam(bref=b58, bpref=$b.3) -> $b58.$b.3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local Insn(iref=%45) -> $%45
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local BlockParam(bref=b49, bpref=$b.3) -> $b49.$b.3
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%61) -> $%61
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%30) -> $%30
// [Wasm] Local Insn(iref=%40) -> $%40
// [Wasm] Local Insn(iref=%69) -> $%69
// [Wasm] Local BlockParam(bref=b49, bpref=$b.1) -> $b49.$b.1
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function aux46.266 to wasm
// [Wasm] LoweringOrder: [0, 2, 4, 3, 5, 1, 6]
// [Wasm] LoweringOrder: [[1, 2], [3, 4], [5], [5], [6], [6], []]
// [Wasm] LoweringOrder: HashMap::of([(b6, 0), (b4, 1), (b1, 2), (b5, 0), (b2, 0), (b3, 0), (b0, 0)])
// [Wasm] LoweringOrder: [b0, b2, b3, b5, b6, b4, b1]
// [Wasm] LoweringOrder: HashMap::of([(b6, 4), (b4, 0), (b1, 0), (b5, 3), (b2, 1), (b3, 2), (b0, 0)])
// [Wasm] Lowering function read_ch_until_newline_or_eof1.262
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[Int32(val=-1)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[Int32(val=-1)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=13)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_char", args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=10)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function read_ch_until_newline_or_eof1.262 to wasm
// [KnfOpt] freq: {read_ch_until_newline_or_eof1: Many(2), bf13: Once, skip29: Many(4), aux46: Many(9), lp107: Many(2), main134: Once, read_prog138: Many(2)}
// [KnfOpt] Inline threshold 4 33
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 4 33
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 4 33
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 9 165
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 9 165
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 9 165
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 9 165
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 9 165
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 9 165
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 4 33
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 9 165
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 33
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 33
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 9 165
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 9 165
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] Knf inline Some(bf13)
// [KnfOpt] Inline threshold 2 13
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 239
// [KnfOpt] Inline decision rejected
// [KnfOpt] Numbers of let rec: 6 6 0
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %9: Call(ty=Unit, f=f4, args=[Insn(iref=%8), FnParam(fref=f4, fpref=$f.1)])
// [CoreOpt] eliminated tail rec call %5: Call(ty=Int32, f=f1, args=[Insn(iref=%3), Insn(iref=%4), FnParam(fref=f1, fpref=$f.2), FnParam(fref=f1, fpref=$f.3)])
// [CoreOpt] eliminated tail rec call %12: Call(ty=Int32, f=f1, args=[Insn(iref=%11), FnParam(fref=f1, fpref=$f.1), FnParam(fref=f1, fpref=$f.2), FnParam(fref=f1, fpref=$f.3)])
// [CoreOpt] eliminated tail rec call %10: Call(ty=Int32, f=f1, args=[Insn(iref=%8), Insn(iref=%9), FnParam(fref=f1, fpref=$f.2), FnParam(fref=f1, fpref=$f.3)])
// [CoreOpt] eliminated tail rec call %9: Call(ty=Unit, f=f2, args=[FnParam(fref=f2, fpref=$f.0), FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.2), FnParam(fref=f2, fpref=$f.3), FnParam(fref=f2, fpref=$f.4), FnParam(fref=f2, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %7: Call(ty=Int32, f=f3, args=[Insn(iref=%6), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %13: Call(ty=Int32, f=f3, args=[Insn(iref=%12), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %21: Call(ty=Int32, f=f3, args=[Insn(iref=%20), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %29: Call(ty=Int32, f=f3, args=[Insn(iref=%28), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %35: Call(ty=Int32, f=f3, args=[Insn(iref=%34), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %41: Call(ty=Int32, f=f3, args=[Insn(iref=%40), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %47: Call(ty=Int32, f=f3, args=[Insn(iref=%46), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5)])
// [CoreOpt] Call frequnce: FnCallFreq({f12: Once, f4: Once, f1: Once, f5: Once, f2: Once, f3: Multiple, f0: Multiple})
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%44) -> BlockParam(bref=b30, bpref=$b.0)
// [CoreOpt] lp107.267 is inlining Call(ty=Int32, f=f1, args=[Insn(iref=%3), Int32(val=0), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.3)])
// [CoreOpt] shifted callee .fn skip29.265 #f1 : fn(int32, int32, int32, array[int32]) -> int32
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b23 {
// [CoreOpt]   .bb #b9 (int32, int32, int32, array[int32]) {
// [CoreOpt]     let %9: bool = le($b9.2, $b9.0)
// [CoreOpt]     br %9 b10() b11()
// [CoreOpt]   }
// [CoreOpt]   .bb #b10 () {
// [CoreOpt]     jump b21($b9.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b11 () {
// [CoreOpt]     let %10: int32 = load int32 offset($b9.3, $b9.0 * @32)
// [CoreOpt]     let %11: bool = eq(%10, 91)
// [CoreOpt]     br %11 b12() b13()
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 () {
// [CoreOpt]     let %12: int32 = add($b9.0, 1)
// [CoreOpt]     let %13: int32 = add($b9.1, 1)
// [CoreOpt]     jump b9(%12, %13, $b9.2, $b9.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b13 () {
// [CoreOpt]     let %15: bool = eq(%10, 93)
// [CoreOpt]     br %15 b14() b15()
// [CoreOpt]   }
// [CoreOpt]   .bb #b14 () {
// [CoreOpt]     let %16: bool = eq($b9.1, 0)
// [CoreOpt]     br %16 b16() b17()
// [CoreOpt]   }
// [CoreOpt]   .bb #b15 () {
// [CoreOpt]     let %20: int32 = add($b9.0, 1)
// [CoreOpt]     jump b9(%20, $b9.1, $b9.2, $b9.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b16 () {
// [CoreOpt]     jump b18($b9.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b17 () {
// [CoreOpt]     let %17: int32 = add($b9.0, 1)
// [CoreOpt]     let %18: int32 = sub($b9.1, 1)
// [CoreOpt]     jump b9(%17, %18, $b9.2, $b9.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b18 (int32) {
// [CoreOpt]     jump b19($b18.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b19 (int32) {
// [CoreOpt]     jump b20($b19.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b20 (int32) {
// [CoreOpt]     jump b21($b20.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b21 (int32) {
// [CoreOpt]     return $b21.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b22 pre #Some(b23) header #b9 {
// [CoreOpt]     .block #b15
// [CoreOpt]     .block #b21
// [CoreOpt]     .block #b13
// [CoreOpt]     .block #b17
// [CoreOpt]     .block #b18
// [CoreOpt]     .block #b10
// [CoreOpt]     .block #b19
// [CoreOpt]     .block #b20
// [CoreOpt]     .block #b14
// [CoreOpt]     .block #b11
// [CoreOpt]     .block #b12
// [CoreOpt]     .block #b16
// [CoreOpt]   }
// [CoreOpt]   .bb #b23 () {
// [CoreOpt]     jump b22($f0, $f1, $f2, $f3)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] aux46.266 is inlining Call(ty=Unit, f=f2, args=[BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [CoreOpt] shifted callee .fn lp107.267 #f2 : fn(array[int32], int32, int32, array[int32], array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b54 {
// [CoreOpt]   .bb #b49 (array[int32], int32, int32, array[int32], array[int32], array[int32]) {
// [CoreOpt]     let %49: int32 = load int32 field($b49.0, 0 * @32)
// [CoreOpt]     let %50: int32 = load int32 offset($b49.4, %49 * @32)
// [CoreOpt]     let %51: bool = eq(%50, 0)
// [CoreOpt]     br %51 b50() b51()
// [CoreOpt]   }
// [CoreOpt]   .bb #b50 () {
// [CoreOpt]     let %52: int32 = add($b49.2, 1)
// [CoreOpt]     jump b72()
// [CoreOpt]   }
// [CoreOpt]   .bb #b51 () {
// [CoreOpt]     let %55: int32 = add($b49.2, 1)
// [CoreOpt]     let %56: int32 = call f3(%55, $b49.0, $b49.1, $b49.3, $b49.4, $b49.5)
// [CoreOpt]     let _ = store int32 field($b49.5, 0 * @32) <- %56
// [CoreOpt]     jump b49($b49.0, $b49.1, $b49.2, $b49.3, $b49.4, $b49.5)
// [CoreOpt]   }
// [CoreOpt]   .bb #b52 (unit) {
// [CoreOpt]     return $b52.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b53 pre #Some(b54) header #b49 {
// [CoreOpt]     .block #b50
// [CoreOpt]     .block #b51
// [CoreOpt]     .block #b52
// [CoreOpt]   }
// [CoreOpt]   .bb #b54 () {
// [CoreOpt]     jump b53($f0, $f1, $f2, $f3, $f4, $f5)
// [CoreOpt]   }
// [CoreOpt]   .bb #b55 (int32) {
// [CoreOpt]     let _ = store int32 field($b49.5, 0 * @32) <- $b55.0
// [CoreOpt]     jump b52(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b58 (int32, int32, int32, array[int32]) {
// [CoreOpt]     let %58: bool = le($b58.2, $b58.0)
// [CoreOpt]     br %58 b59() b60()
// [CoreOpt]   }
// [CoreOpt]   .bb #b59 () {
// [CoreOpt]     jump b70($b58.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b60 () {
// [CoreOpt]     let %59: int32 = load int32 offset($b58.3, $b58.0 * @32)
// [CoreOpt]     let %60: bool = eq(%59, 91)
// [CoreOpt]     br %60 b61() b62()
// [CoreOpt]   }
// [CoreOpt]   .bb #b61 () {
// [CoreOpt]     let %61: int32 = add($b58.0, 1)
// [CoreOpt]     let %62: int32 = add($b58.1, 1)
// [CoreOpt]     jump b58(%61, %62, $b58.2, $b58.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b62 () {
// [CoreOpt]     let %64: bool = eq(%59, 93)
// [CoreOpt]     br %64 b63() b64()
// [CoreOpt]   }
// [CoreOpt]   .bb #b63 () {
// [CoreOpt]     let %65: bool = eq($b58.1, 0)
// [CoreOpt]     br %65 b65() b66()
// [CoreOpt]   }
// [CoreOpt]   .bb #b64 () {
// [CoreOpt]     let %69: int32 = add($b58.0, 1)
// [CoreOpt]     jump b58(%69, $b58.1, $b58.2, $b58.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b65 () {
// [CoreOpt]     jump b67($b58.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b66 () {
// [CoreOpt]     let %66: int32 = add($b58.0, 1)
// [CoreOpt]     let %67: int32 = sub($b58.1, 1)
// [CoreOpt]     jump b58(%66, %67, $b58.2, $b58.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b67 (int32) {
// [CoreOpt]     jump b68($b67.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b68 (int32) {
// [CoreOpt]     jump b69($b68.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b69 (int32) {
// [CoreOpt]     jump b70($b69.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b70 (int32) {
// [CoreOpt]     jump b55($b70.0)
// [CoreOpt]   }
// [CoreOpt]   .loop #b71 pre #Some(b72) header #b58 {
// [CoreOpt]     .block #b64
// [CoreOpt]     .block #b70
// [CoreOpt]     .block #b62
// [CoreOpt]     .block #b66
// [CoreOpt]     .block #b67
// [CoreOpt]     .block #b59
// [CoreOpt]     .block #b68
// [CoreOpt]     .block #b69
// [CoreOpt]     .block #b63
// [CoreOpt]     .block #b60
// [CoreOpt]     .block #b61
// [CoreOpt]     .block #b65
// [CoreOpt]   }
// [CoreOpt]   .bb #b72 () {
// [CoreOpt]     jump b71(%52, 0, $b49.1, $b49.3)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f1
// [CoreOpt] Remove dead function: f2
// [CoreOpt] LVN subst Insn(iref=%24) with Insn(iref=%23)
// [CoreOpt] LVN subst Insn(iref=%16) with Insn(iref=%15)
// [CoreOpt2] LVN subst Insn(iref=%71) with Insn(iref=%72)
// [CoreOpt2] LVN subst Insn(iref=%78) with Insn(iref=%79)
// [CoreOpt2] Jump table detected
// [CoreOpt2] {tag: Insn(iref=%1), check_const_targets: [(b2, 62, b3), (b4, 60, b5), (b6, 43, b7), (b8, 45, b9), (b10, 46, b11), (b12, 44, b13), (b14, 91, b15), (b16, 93, b17)], term: b18}
// [CoreOpt2] First check block: b2
// [CoreOpt2] 43 93
// [CoreOpt2] [b7, b13, b9, b11, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b5, b18, b3, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b15, b18, b17]
// [CoreOpt2] Jump table converted to select
// [CoreOpt2] {tag: Insn(iref=%1), deduce: 43, cases: [b7, b13, b9, b11, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b5, b18, b3, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b15, b18, b17], fallback: b18}
// [CoreOpt2] select control: Select(cond=Insn(iref=%81), targets=[b7, b13, b9, b11, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b5, b18, b3, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b18, b15, b18, b17], fallback=b18)
