// [Asm] pre_assigned_registers: Insn(iref=%1) -> v4, Self(fref=f6) -> v0, Mem(fref=f6, mref=m0) -> v2, Insn(iref=%0) -> v3
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6, s11, zero]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: s11 is X
// [Asm] defs: [v9]
// [Asm] live_set: [zero, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, v2]
// [Asm] move_origin: [v9]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a1, zero, a0, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, zero, a0, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main136l2_6"];
// [Asm]   r0 [label="v6 ← a0", color=green];
// [Asm]   r3 [label="v7 ← a0", color=green];
// [Asm]   r9 [label="t0", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="t4", color=blue];
// [Asm]   r4 [label="v2 ← s0", color=green];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r11 [label="t2", color=blue];
// [Asm]   r7 [label="a0", color=blue];
// [Asm]   r10 [label="t1", color=blue];
// [Asm]   r14 [label="a3", color=blue];
// [Asm]   r8 [label="a2", color=blue];
// [Asm]   r5 [label="v9 ← a0", color=green];
// [Asm]   r15 [label="a4", color=blue];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="a5", color=blue];
// [Asm]   r18 [label="a7", color=blue];
// [Asm]   r19 [label="v4 ← a0", color=green];
// [Asm]   r17 [label="a6", color=blue];
// [Asm]   r12 [label="t3", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r4 -- r13;
// [Asm]   r2 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r16;
// [Asm]   r4 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r14;
// [Asm]   r2 -- r15;
// [Asm]   r0 -- r2;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r7 -- r15;
// [Asm]   r7 -- r10;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r7 -- r11;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r7 -- r13;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r10;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r4 -- r17;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r7 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r7 -- r8;
// [Asm]   r2 -- r19;
// [Asm]   r7 -- r12;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r7 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r6 -- r8;
// [Asm]   r7 -- r17;
// [Asm]   comment = "0:v6-> 1:s11-> 2:zero-> 3:v7-> 4:v2-> 5:v9-> 6:a1-> 7:a0-> 8:a2-> 9:t0-> 10:t1-> 11:t2-> 12:t3-> 13:t4-> 14:a3-> 15:a4-> 16:a5-> 17:a6-> 18:a7-> 19:v4"
// [Asm]   comment = "v6<-a0;v7<-a0;v2<-s0;v9<-a0;v4<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main136l2_6"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v6, 4096 ->   li a0, 4096
// [Asm] subst   sub v7, s11, v6 ->   sub a0, s11, a0
// [Asm] subst   andi v2, v7, -8 ->   andi s0, a0, -8
// [Asm] subst   mv s11, v2 ->   mv s11, s0
// [Asm] subst   li v9, 1024 ->   li a0, 1024
// [Asm] subst   mv a1, v9 ->   mv a1, a0
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   call memseti32 ->   call memseti32
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v2 ->   mv a1, s0
// [Asm] subst   call read_prog140l3_5 ->   call read_prog140l3_5
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Mem(fref=f4, mref=m2) -> v6, Insn(iref=%3) -> v10, FnParam(fref=f4, fpref=$f.0) -> v2, Insn(iref=%2) -> v9, Insn(iref=%1) -> v8, Mem(fref=f4, mref=m1) -> v5, Self(fref=f4) -> v0, Mem(fref=f4, mref=m0) -> v4, FnParam(fref=f4, fpref=$f.1) -> v3, Insn(iref=%0) -> v7, Insn(iref=%4) -> v11
// [Asm] defs: []
// [Asm] live_set: [zero, a0, a1, s11]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, a1, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, s11, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v2, zero, v20, v3]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, zero, v4, s11, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v2, v18, zero, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v2, zero, v8, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v2, zero, v8, v4, s11, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v2, v16, zero, v8, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, zero, v8, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v5, zero, v8, v4, s11, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, v5, zero, v4, a1, s11, v3]
// [Asm] move_origin: [v8]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v5, zero, a0, v4, a1, s11, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v2, v5, zero, a0, v4, a2, a1, s11, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, v5, zero, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v13]
// [Asm] live_set: [v2, v5, zero, v13, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, zero, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v5, zero, v4, v6, v3]
// [Asm] move_origin: [v6]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v5, zero, a0, v4, v6, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, v5, zero, a0, a1, v6, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, zero, a0, a2, a1, v6, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [zero, a0, a2, a1, v6, a3, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [zero, a0, a4, a2, a1, v6, a3]
// [Asm] move_origin: [v3]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [a5, zero, a0, a4, a2, a1, a3]
// [Asm] move_origin: [v6]
// [Asm] defined: a5 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of bf5l1_4"];
// [Asm]   r0 [label="v2 ← s0", color=green];
// [Asm]   r20 [label="a4", color=blue];
// [Asm]   r23 [label="a7", color=blue];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r9 [label="v15 ← a1", color=green];
// [Asm]   r26 [label="v11 ← a0", color=green];
// [Asm]   r6 [label="v4 ← s2", color=green];
// [Asm]   r13 [label="a2", color=blue];
// [Asm]   r4 [label="v3 ← s1", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r11 [label="v5 ← s3", color=green];
// [Asm]   r7 [label="v18 ← a0", color=green];
// [Asm]   r10 [label="v16 ← a1", color=green];
// [Asm]   r22 [label="a6", color=blue];
// [Asm]   r14 [label="t0", color=blue];
// [Asm]   r8 [label="v8 ← a0", color=green];
// [Asm]   r5 [label="v20 ← a0", color=green];
// [Asm]   r15 [label="t1", color=blue];
// [Asm]   r24 [label="v13 ← a0", color=green];
// [Asm]   r25 [label="v6 ← a5", color=green];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="t2", color=blue];
// [Asm]   r18 [label="t4", color=blue];
// [Asm]   r19 [label="a3", color=blue];
// [Asm]   r17 [label="t3", color=blue];
// [Asm]   r21 [label="a5", color=blue];
// [Asm]   r12 [label="a0", color=blue];
// [Asm]   r19 -- r20;
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r21;
// [Asm]   r12 -- r25;
// [Asm]   r0 -- r13;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r11 -- r14;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r0 -- r25;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r0 -- r23;
// [Asm]   r0 -- r22;
// [Asm]   r11 -- r24;
// [Asm]   r11 -- r18;
// [Asm]   r1 -- r16;
// [Asm]   r4 -- r22;
// [Asm]   r19 -- r21;
// [Asm]   r3 -- r18;
// [Asm]   r0 -- r16;
// [Asm]   r12 -- r19;
// [Asm]   r11 -- r19;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r6 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r11 -- r13;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r0 -- r9;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r2 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r10;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r25;
// [Asm]   r4 -- r8;
// [Asm]   r12 -- r23;
// [Asm]   r11 -- r15;
// [Asm]   r0 -- r11;
// [Asm]   r8 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r12 -- r21;
// [Asm]   r6 -- r23;
// [Asm]   r0 -- r4;
// [Asm]   r13 -- r21;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r11 -- r25;
// [Asm]   r0 -- r18;
// [Asm]   r6 -- r25;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r0 -- r15;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r11 -- r20;
// [Asm]   r6 -- r15;
// [Asm]   r11 -- r17;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r0 -- r24;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r23;
// [Asm]   r12 -- r15;
// [Asm]   r8 -- r9;
// [Asm]   r11 -- r16;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r22;
// [Asm]   r0 -- r14;
// [Asm]   r11 -- r12;
// [Asm]   r0 -- r21;
// [Asm]   r1 -- r15;
// [Asm]   r4 -- r20;
// [Asm]   r1 -- r13;
// [Asm]   r11 -- r23;
// [Asm]   r6 -- r16;
// [Asm]   r11 -- r22;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r6 -- r12;
// [Asm]   r0 -- r19;
// [Asm]   r13 -- r25;
// [Asm]   r6 -- r24;
// [Asm]   r13 -- r20;
// [Asm]   r20 -- r25;
// [Asm]   r6 -- r20;
// [Asm]   r13 -- r19;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r19;
// [Asm]   r12 -- r20;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r12 -- r13;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r8;
// [Asm]   r12 -- r22;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r0 -- r12;
// [Asm]   r12 -- r14;
// [Asm]   r12 -- r16;
// [Asm]   r4 -- r17;
// [Asm]   r12 -- r17;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r20;
// [Asm]   r2 -- r3;
// [Asm]   r19 -- r25;
// [Asm]   r3 -- r23;
// [Asm]   r20 -- r21;
// [Asm]   r11 -- r21;
// [Asm]   r12 -- r18;
// [Asm]   r4 -- r19;
// [Asm]   r1 -- r24;
// [Asm]   comment = "0:v2-> 1:zero-> 2:a1-> 3:s11-> 4:v3-> 6:v4-> 11:v5-> 12:a0-> 13:a2-> 19:a3-> 20:a4-> 21:a5-> 25:v6-> 14:t0-> 15:t1-> 16:t2-> 17:t3-> 18:t4-> 22:a6-> 23:a7-> 8:v8-> 9:v15-> 7:v18-> 10:v16-> 24:v13-> 5:v20-> 26:v11"
// [Asm]   comment = "v2<-s0;v15<-a1;v11<-a0;v4<-s2;v3<-s1;v5<-s3;v18<-a0;v16<-a1;v8<-a0;v20<-a0;v13<-a0;v6<-a5;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of bf5l1_4"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   mv v3, a1 ->   mv s1, a1
// [Asm] subst   addi v20, s11, -4 ->   addi a0, s11, -4
// [Asm] subst   andi v4, v20, -8 ->   andi s2, a0, -8
// [Asm] subst   mv s11, v4 ->   mv s11, s2
// [Asm] subst   sw zero, 0(v4) ->   sw zero, 0(s2)
// [Asm] subst   li v18, 1024 ->   li a0, 1024
// [Asm] subst   mul v8, v18, v18 ->   mul a0, a0, a0
// [Asm] subst   slliw v15, v8, 2 ->   slliw a1, a0, 2
// [Asm] subst   sub v16, s11, v15 ->   sub a1, s11, a1
// [Asm] subst   andi v5, v16, -8 ->   andi s3, a1, -8
// [Asm] subst   mv s11, v5 ->   mv s11, s3
// [Asm] subst   mv a1, v8 ->   mv a1, a0
// [Asm] subst   mv a0, v5 ->   mv a0, s3
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   call memseti32 ->   call memseti32
// [Asm] subst   addi v13, s11, -4 ->   addi a0, s11, -4
// [Asm] subst   andi v6, v13, -8 ->   andi a5, a0, -8
// [Asm] subst   mv s11, v6 ->   mv s11, a5
// [Asm] subst   sw zero, 0(v6) ->   sw zero, 0(a5)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v4 ->   mv a1, s2
// [Asm] subst   mv a2, v2 ->   mv a2, s0
// [Asm] subst   mv a3, v5 ->   mv a3, s3
// [Asm] subst   mv a4, v3 ->   mv a4, s1
// [Asm] subst   call aux40l3_3 ->   call aux40l3_3
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: BlockParam(bref=b12, bpref=$b.0) -> v23, FnParam(fref=f1, fpref=$f.0) -> v2, FnParam(fref=f1, fpref=$f.3) -> v5, Insn(iref=%9) -> v17, Insn(iref=%8) -> v16, BlockParam(bref=b10, bpref=$b.0) -> v19, BlockParam(bref=b0, bpref=$b.3) -> v9, BlockParam(bref=b0, bpref=$b.0) -> v6, BlockParam(bref=b0, bpref=$b.1) -> v7, BlockParam(bref=b0, bpref=$b.2) -> v8, Insn(iref=%0) -> v10, Insn(iref=%4) -> v22, Insn(iref=%3) -> v21, BlockParam(bref=b11, bpref=$b.0) -> v20, FnParam(fref=f1, fpref=$f.1) -> v3, Insn(iref=%7) -> v15, FnParam(fref=f1, fpref=$f.2) -> v4, Insn(iref=%2) -> v12, Insn(iref=%1) -> v11, Insn(iref=%11) -> v14, Self(fref=f1) -> v0, Insn(iref=%6) -> v13, BlockParam(bref=b9, bpref=$b.0) -> v18
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.1), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=93)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=91)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] defs: [v14]
// [Asm] live_set: [v7, v14, v9, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v14]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v8]
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v19]
// [Asm] move_origin: [v18]
// [Asm] defined: v19 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v7, v16, v9, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v17, v16, v9, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6, v17, v9, zero, v8]
// [Asm] move_origin: [v16]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v17]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v8]
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v31]
// [Asm] live_set: [zero, v7, v8, v6, v31, v9]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: [v32]
// [Asm] live_set: [zero, v7, v8, v32, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, zero, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v30]
// [Asm] live_set: [v11, zero, v30, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v6, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: [v23]
// [Asm] live_set: [v23]
// [Asm] move_origin: [v20]
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [v23]
// [Asm] move_origin: []
// [Asm] defs: [v20]
// [Asm] live_set: [v20]
// [Asm] move_origin: [v19]
// [Asm] defined: v20 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v18]
// [Asm] move_origin: [v6]
// [Asm] defined: v18 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v23]
// [Asm] move_origin: [v6]
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v7, v21, v9, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v8, v21, v9, zero, v22]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v8, v6, v9, zero, v22]
// [Asm] move_origin: [v21]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v22]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v8]
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v29]
// [Asm] live_set: [v11, zero, v29, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, a3, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, a3, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, a3, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, a3, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, zero, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v4, v6, v5, zero, v7]
// [Asm] move_origin: [v3]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v6, v5, zero, v8]
// [Asm] move_origin: [v4]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v5]
// [Asm] defined: v9 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v23]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of skip21l2_1"];
// [Asm]   r0 [label="v14 ← a0", color=green];
// [Asm]   r20 [label="a2", color=blue];
// [Asm]   r23 [label="v3 ← a1", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="v31 ← a4", color=green];
// [Asm]   r26 [label="a0", color=blue];
// [Asm]   r6 [label="v19 ← a0", color=green];
// [Asm]   r13 [label="v23 ← a0", color=green];
// [Asm]   r4 [label="v8 ← a3", color=green];
// [Asm]   r1 [label="v7 ← a1", color=green];
// [Asm]   r11 [label="v11 ← a4", color=green];
// [Asm]   r7 [label="v16 ← a0", color=green];
// [Asm]   r10 [label="v32 ← a4", color=green];
// [Asm]   r22 [label="a3", color=blue];
// [Asm]   r14 [label="v20 ← a0", color=green];
// [Asm]   r8 [label="v17 ← a1", color=green];
// [Asm]   r5 [label="v6 ← a0", color=green];
// [Asm]   r15 [label="v18 ← a0", color=green];
// [Asm]   r24 [label="v4 ← a4", color=green];
// [Asm]   r25 [label="v5 ← a2", color=green];
// [Asm]   r2 [label="v9 ← a2", color=green];
// [Asm]   r16 [label="v21 ← a0", color=green];
// [Asm]   r18 [label="v29 ← a5", color=green];
// [Asm]   r19 [label="v2 ← a0", color=green];
// [Asm]   r17 [label="v22 ← a1", color=green];
// [Asm]   r21 [label="a1", color=blue];
// [Asm]   r12 [label="v30 ← a5", color=green];
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r3 -- r25;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r5;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r16;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r5 -- r10;
// [Asm]   r1 -- r4;
// [Asm]   r5 -- r23;
// [Asm]   r5 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r10;
// [Asm]   r5 -- r18;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r11 -- r12;
// [Asm]   r3 -- r11;
// [Asm]   r19 -- r24;
// [Asm]   r2 -- r16;
// [Asm]   r3 -- r24;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r11 -- r18;
// [Asm]   r1 -- r16;
// [Asm]   r19 -- r21;
// [Asm]   r3 -- r18;
// [Asm]   r5 -- r11;
// [Asm]   r3 -- r5;
// [Asm]   r22 -- r24;
// [Asm]   r16 -- r17;
// [Asm]   r3 -- r8;
// [Asm]   r20 -- r23;
// [Asm]   r1 -- r9;
// [Asm]   r4 -- r11;
// [Asm]   r23 -- r25;
// [Asm]   r3 -- r4;
// [Asm]   r19 -- r23;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r9;
// [Asm]   r5 -- r24;
// [Asm]   r0 -- r3;
// [Asm]   r19 -- r22;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r22 -- r23;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r25;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r23 -- r24;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r25;
// [Asm]   r4 -- r8;
// [Asm]   r5 -- r25;
// [Asm]   r4 -- r17;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r3;
// [Asm]   r7 -- r8;
// [Asm]   r24 -- r25;
// [Asm]   r19 -- r25;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r19 -- r20;
// [Asm]   r1 -- r24;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v14-> 1:v7-> 2:v9-> 3:zero-> 4:v8-> 5:v6-> 9:v31-> 10:v32-> 11:v11-> 12:v30-> 18:v29-> 7:v16-> 8:v17-> 16:v21-> 17:v22-> 25:v5-> 24:v4-> 23:v3-> 19:v2-> 22:a3-> 20:a2-> 21:a1-> 6:v19-> 13:v23-> 14:v20-> 15:v18-> 26:a0"
// [Asm]   comment = "v14<-a0;v3<-a1;v31<-a4;v19<-a0;v23<-a0;v8<-a3;v7<-a1;v11<-a4;v16<-a0;v32<-a4;v20<-a0;v17<-a1;v6<-a0;v18<-a0;v4<-a4;v5<-a2;v9<-a2;v21<-a0;v29<-a5;v2<-a0;v22<-a1;v30<-a5;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of skip21l2_1"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v14, v6, 1 ->   addi a0, a0, 1
// [Asm] subst   j .skip21l2_1_0 ->   j .skip21l2_1_0
// [Asm] subst   addi v16, v6, 1 ->   addi a0, a0, 1
// [Asm] subst   addi v17, v7, -1 ->   addi a1, a1, -1
// [Asm] subst   j .skip21l2_1_0 ->   j .skip21l2_1_0
// [Asm] subst   slliw v31, v6, 2 ->   slliw a4, a0, 2
// [Asm] subst   add v32, v9, v31 ->   add a4, a2, a4
// [Asm] subst   lw v11, 0(v32) ->   lw a4, 0(a4)
// [Asm] subst   li v30, 91 ->   li a5, 91
// [Asm] subst   beq v11, v30, .skip21l2_1_3 ->   beq a4, a5, .skip21l2_1_3
// [Asm] subst   j .skip21l2_1_12 ->   j .skip21l2_1_12
// [Asm] subst   beq v7, zero, .skip21l2_1_7 ->   beq a1, zero, .skip21l2_1_7
// [Asm] subst   bge v6, v8, .skip21l2_1_1 ->   bge a0, a3, .skip21l2_1_1
// [Asm] subst   addi v21, v6, 1 ->   addi a0, a0, 1
// [Asm] subst   addi v22, v7, 1 ->   addi a1, a1, 1
// [Asm] subst   j .skip21l2_1_0 ->   j .skip21l2_1_0
// [Asm] subst   li v29, 93 ->   li a5, 93
// [Asm] subst   bne v11, v29, .skip21l2_1_6 ->   bne a4, a5, .skip21l2_1_6
// [Asm] subst   mv v4, a2 ->   mv a4, a2
// [Asm] subst   mv v5, a3 ->   mv a2, a3
// [Asm] subst   mv v8, v4 ->   mv a3, a4
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v9, Insn(iref=%3) -> v8, FnParam(fref=f5, fpref=$f.0) -> v2, Self(fref=f5) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v11, Insn(iref=%2) -> v10, Insn(iref=%1) -> v7, BlockParam(bref=b0, bpref=$b.0) -> v4, BlockParam(bref=b0, bpref=$b.1) -> v5, FnParam(fref=f5, fpref=$f.1) -> v3, Insn(iref=%0) -> v6
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=-1)])
// [Asm] defs: []
// [Asm] live_set: [v4, v5]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [a0]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v10]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: [v10]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5]
// [Asm] move_origin: [v3]
// [Asm] defined: v5 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v4, v5, v6, v14]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v4, v5, v6, v15]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v5, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, v5]
// [Asm] move_origin: [v9]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5]
// [Asm] move_origin: [v5]
// [Asm] defs: []
// [Asm] live_set: [v4, v5]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, v5]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, v5, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v6]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v4, v5, v6, v16]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v6]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of read_prog140l3_5"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="v6 ← a1", color=green];
// [Asm]   r23 [label="v16 ← a0", color=green];
// [Asm]   r3 [label="t0", color=blue];
// [Asm]   r9 [label="a3", color=blue];
// [Asm]   r6 [label="t3", color=blue];
// [Asm]   r13 [label="a7", color=blue];
// [Asm]   r4 [label="t1", color=blue];
// [Asm]   r1 [label="v5 ← s0", color=green];
// [Asm]   r11 [label="a5", color=blue];
// [Asm]   r7 [label="t4", color=blue];
// [Asm]   r10 [label="a4", color=blue];
// [Asm]   r22 [label="v9 ← a0", color=green];
// [Asm]   r14 [label="v10 ← a0", color=green];
// [Asm]   r8 [label="a2", color=blue];
// [Asm]   r5 [label="t2", color=blue];
// [Asm]   r15 [label="v11 ← a0", color=green];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="v2 ← a0", color=green];
// [Asm]   r18 [label="v4 ← s1", color=green];
// [Asm]   r19 [label="v14 ← a0", color=green];
// [Asm]   r21 [label="v15 ← a0", color=green];
// [Asm]   r17 [label="v3 ← a1", color=green];
// [Asm]   r12 [label="a6", color=blue];
// [Asm]   r17 -- r18;
// [Asm]   r0 -- r13;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r23;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r22;
// [Asm]   r1 -- r19;
// [Asm]   r5 -- r18;
// [Asm]   r1 -- r10;
// [Asm]   r1 -- r13;
// [Asm]   r18 -- r21;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r18;
// [Asm]   r11 -- r18;
// [Asm]   r3 -- r18;
// [Asm]   r16 -- r17;
// [Asm]   r9 -- r18;
// [Asm]   r0 -- r6;
// [Asm]   r20 -- r23;
// [Asm]   r1 -- r9;
// [Asm]   r18 -- r19;
// [Asm]   r10 -- r18;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r8;
// [Asm]   r6 -- r18;
// [Asm]   r8 -- r18;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r2;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r10;
// [Asm]   r13 -- r18;
// [Asm]   r1 -- r11;
// [Asm]   r18 -- r20;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r7 -- r18;
// [Asm]   r0 -- r4;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r20 -- r21;
// [Asm]   r12 -- r18;
// [Asm]   r19 -- r20;
// [Asm]   r0 -- r18;
// [Asm]   r18 -- r23;
// [Asm]   comment = "0:a0-> 1:v5-> 2:a1-> 18:v4-> 3:t0-> 4:t1-> 5:t2-> 6:t3-> 7:t4-> 8:a2-> 9:a3-> 10:a4-> 11:a5-> 12:a6-> 13:a7-> 19:v14-> 20:v6-> 21:v15-> 23:v16-> 16:v2-> 17:v3-> 22:v9-> 14:v10-> 15:v11"
// [Asm]   comment = "v6<-a1;v16<-a0;v5<-s0;v9<-a0;v10<-a0;v11<-a0;v2<-a0;v4<-s1;v14<-a0;v15<-a0;v3<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of read_prog140l3_5"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv a0, v4 ->   mv a0, s1
// [Asm] subst   mv a1, v5 ->   mv a1, s0
// [Asm] subst   call bf5l1_4 ->   call bf5l1_4
// [Asm] subst   mv v4, v2 ->   mv s1, a0
// [Asm] subst   mv v5, v3 ->   mv s0, a1
// [Asm] subst   slliw v14, v4, 2 ->   slliw a0, s1, 2
// [Asm] subst   add v15, v5, v14 ->   add a0, s0, a0
// [Asm] subst   sw v6, 0(v15) ->   sw a1, 0(a0)
// [Asm] subst   addi v9, v4, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v4, v9 ->   mv s1, a0
// [Asm] subst   j .read_prog140l3_5_0 ->   j .read_prog140l3_5_0
// [Asm] subst   ret ->   ret
// [Asm] subst   call read_ch_until_newline_or_eof1l0_0 ->   call read_ch_until_newline_or_eof1l0_0
// [Asm] subst   mv v6, a0 ->   mv a1, a0
// [Asm] subst   li v16, -1 ->   li a0, -1
// [Asm] subst   beq v6, v16, .read_prog140l3_5_1 ->   beq a1, a0, .read_prog140l3_5_1
// [Asm] pre_assigned_registers: FnParam(fref=f2, fpref=$f.4) -> v6, BlockParam(bref=b0, bpref=$b.5) -> v13, BlockParam(bref=b3, bpref=$b.0) -> v23, Self(fref=f2) -> v0, Insn(iref=%8) -> v19, BlockParam(bref=b0, bpref=$b.4) -> v12, BlockParam(bref=b0, bpref=$b.3) -> v11, BlockParam(bref=b0, bpref=$b.0) -> v8, BlockParam(bref=b0, bpref=$b.1) -> v9, BlockParam(bref=b0, bpref=$b.2) -> v10, Insn(iref=%5) -> v22, Insn(iref=%0) -> v14, Insn(iref=%4) -> v21, FnParam(fref=f2, fpref=$f.5) -> v7, Insn(iref=%3) -> v20, Insn(iref=%7) -> v18, Insn(iref=%2) -> v16, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%1) -> v15, Insn(iref=%6) -> v17, FnParam(fref=f2, fpref=$f.0) -> v2, FnParam(fref=f2, fpref=$f.2) -> v4, FnParam(fref=f2, fpref=$f.3) -> v5
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Asm] defs: [v17]
// [Asm] live_set: [v11, v10, v13, zero, v8, v17, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v17, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v10, v13, zero, a0, v8, v12, v9]
// [Asm] move_origin: [v17]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v11, v10, v13, zero, a0, v8, a1, v12, v9]
// [Asm] move_origin: [v8]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v11, v10, v13, zero, a0, v8, a2, a1, v12, v9]
// [Asm] move_origin: [v9]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v11, v10, v13, zero, a0, v8, a2, a1, a3, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v11, v10, v13, zero, a0, a4, v8, a2, a1, a3, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [v11, v10, a5, v13, zero, a0, a4, v8, a2, a1, a3, v12, v9]
// [Asm] move_origin: [v13]
// [Asm] defined: a5 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, v13, zero, a0, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v18]
// [Asm] live_set: [v11, v10, v18, v13, zero, v8, v12, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v18, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v8]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v23]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v11, v14, v10, zero, v13, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v11, v10, zero, v13, v8, v12, v28, v9]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: [v29]
// [Asm] live_set: [v11, v10, zero, v13, v29, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v11, v10, zero, v13, v8, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v13, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v20]
// [Asm] live_set: [v20, v12, zero, v13, v9]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v20, v12, zero, v13, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v9, v12, zero, v13, a0]
// [Asm] move_origin: [v20]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v9, a1, v12, zero, v13, a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, v12, zero, v13, a0]
// [Asm] move_origin: [v9]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [a2, a1, a3, zero, v13, a0]
// [Asm] move_origin: [v12]
// [Asm] defined: a3 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, v13, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v21]
// [Asm] live_set: [v21, zero, v13]
// [Asm] move_origin: [a0]
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v21, zero, v13]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v23]
// [Asm] live_set: [v23]
// [Asm] move_origin: [zero]
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [a5, zero, a0, a4, a2, a1, a3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a5, zero, a4, a2, a1, a3, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a5, zero, a4, a2, a3, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, a5, zero, a4, v4, a3, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, a5, zero, a4, v4, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, a5, zero, v4, v6, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: [a5]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v9]
// [Asm] move_origin: [v3]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero, v8, v7, v6, v9]
// [Asm] move_origin: [v4]
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v10, zero, v8, v7, v6, v9]
// [Asm] move_origin: [v5]
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v10, zero, v8, v7, v12, v9]
// [Asm] move_origin: [v6]
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v7]
// [Asm] defined: v13 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of lp108l4_2"];
// [Asm]   r0 [label="v17 ← a0", color=green];
// [Asm]   r33 [label="v6 ← a4", color=green];
// [Asm]   r9 [label="a1", color=blue];
// [Asm]   r26 [label="v20 ← a0", color=green];
// [Asm]   r6 [label="v12 ← s4", color=green];
// [Asm]   r13 [label="a5", color=blue];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r29 [label="v2 ← a0", color=green];
// [Asm]   r7 [label="v9 ← s5", color=green];
// [Asm]   r10 [label="a2", color=blue];
// [Asm]   r8 [label="a0", color=blue];
// [Asm]   r5 [label="v8 ← s3", color=green];
// [Asm]   r15 [label="t1", color=blue];
// [Asm]   r24 [label="v29 ← a0", color=green];
// [Asm]   r32 [label="v5 ← a3", color=green];
// [Asm]   r31 [label="v4 ← a2", color=green];
// [Asm]   r17 [label="t3", color=blue];
// [Asm]   r12 [label="a4", color=blue];
// [Asm]   r20 [label="a7", color=blue];
// [Asm]   r23 [label="v28 ← a0", color=green];
// [Asm]   r3 [label="v13 ← s2", color=green];
// [Asm]   r27 [label="v21 ← a0", color=green];
// [Asm]   r1 [label="v11 ← s0", color=green];
// [Asm]   r28 [label="v23 ← a0", color=green];
// [Asm]   r11 [label="a3", color=blue];
// [Asm]   r34 [label="v7 ← a5", color=green];
// [Asm]   r22 [label="v14 ← a0", color=green];
// [Asm]   r14 [label="t0", color=blue];
// [Asm]   r30 [label="v3 ← a1", color=green];
// [Asm]   r25 [label="v15 ← a0", color=green];
// [Asm]   r2 [label="v10 ← s1", color=green];
// [Asm]   r16 [label="t2", color=blue];
// [Asm]   r18 [label="t4", color=blue];
// [Asm]   r19 [label="a6", color=blue];
// [Asm]   r21 [label="v18 ← a0", color=green];
// [Asm]   r2 -- r32;
// [Asm]   r12 -- r29;
// [Asm]   r12 -- r32;
// [Asm]   r5 -- r21;
// [Asm]   r5 -- r33;
// [Asm]   r3 -- r15;
// [Asm]   r4 -- r34;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r13 -- r32;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r7 -- r25;
// [Asm]   r5 -- r18;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r13 -- r31;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r3 -- r26;
// [Asm]   r30 -- r34;
// [Asm]   r7 -- r32;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r31;
// [Asm]   r8 -- r12;
// [Asm]   r2 -- r34;
// [Asm]   r0 -- r6;
// [Asm]   r5 -- r31;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r13 -- r30;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r13 -- r33;
// [Asm]   r8 -- r16;
// [Asm]   r11 -- r13;
// [Asm]   r10 -- r12;
// [Asm]   r29 -- r33;
// [Asm]   r9 -- r12;
// [Asm]   r2 -- r12;
// [Asm]   r5 -- r32;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r29;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r25;
// [Asm]   r32 -- r34;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r6 -- r23;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r14;
// [Asm]   r6 -- r25;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r3 -- r25;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r34;
// [Asm]   r7 -- r24;
// [Asm]   r29 -- r30;
// [Asm]   r30 -- r32;
// [Asm]   r8 -- r9;
// [Asm]   r1 -- r22;
// [Asm]   r7 -- r20;
// [Asm]   r11 -- r12;
// [Asm]   r5 -- r19;
// [Asm]   r1 -- r13;
// [Asm]   r10 -- r29;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r5 -- r11;
// [Asm]   r8 -- r20;
// [Asm]   r6 -- r20;
// [Asm]   r3 -- r22;
// [Asm]   r7 -- r17;
// [Asm]   r6 -- r19;
// [Asm]   r7 -- r22;
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r15;
// [Asm]   r7 -- r19;
// [Asm]   r12 -- r13;
// [Asm]   r2 -- r14;
// [Asm]   r32 -- r33;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r9;
// [Asm]   r0 -- r3;
// [Asm]   r8 -- r15;
// [Asm]   r4 -- r32;
// [Asm]   r7 -- r15;
// [Asm]   r8 -- r18;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r8 -- r10;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r5 -- r25;
// [Asm]   r7 -- r16;
// [Asm]   r31 -- r33;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r9 -- r13;
// [Asm]   r7 -- r12;
// [Asm]   r3 -- r23;
// [Asm]   r7 -- r14;
// [Asm]   r11 -- r29;
// [Asm]   r1 -- r24;
// [Asm]   r5 -- r12;
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r7 -- r21;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r10 -- r13;
// [Asm]   r30 -- r31;
// [Asm]   r11 -- r31;
// [Asm]   r2 -- r10;
// [Asm]   r29 -- r31;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r18;
// [Asm]   r4 -- r21;
// [Asm]   r6 -- r13;
// [Asm]   r7 -- r34;
// [Asm]   r4 -- r33;
// [Asm]   r2 -- r33;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r7 -- r10;
// [Asm]   r6 -- r10;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r3 -- r27;
// [Asm]   r10 -- r30;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r8 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r2 -- r24;
// [Asm]   r31 -- r34;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r11 -- r30;
// [Asm]   r13 -- r29;
// [Asm]   r2 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r30 -- r33;
// [Asm]   r5 -- r34;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r24;
// [Asm]   r29 -- r32;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r18;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r23;
// [Asm]   r5 -- r23;
// [Asm]   r9 -- r29;
// [Asm]   r8 -- r19;
// [Asm]   r3 -- r12;
// [Asm]   r7 -- r26;
// [Asm]   r5 -- r13;
// [Asm]   r7 -- r13;
// [Asm]   r1 -- r15;
// [Asm]   r4 -- r20;
// [Asm]   r6 -- r16;
// [Asm]   r4 -- r30;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r26;
// [Asm]   r6 -- r12;
// [Asm]   r6 -- r24;
// [Asm]   r6 -- r8;
// [Asm]   r33 -- r34;
// [Asm]   r6 -- r34;
// [Asm]   r4 -- r11;
// [Asm]   r8 -- r13;
// [Asm]   r5 -- r24;
// [Asm]   r12 -- r31;
// [Asm]   r7 -- r33;
// [Asm]   r7 -- r11;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r12 -- r30;
// [Asm]   r29 -- r34;
// [Asm]   r7 -- r31;
// [Asm]   r4 -- r17;
// [Asm]   r31 -- r32;
// [Asm]   r7 -- r23;
// [Asm]   r1 -- r14;
// [Asm]   r2 -- r19;
// [Asm]   r4 -- r26;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r5 -- r30;
// [Asm]   r2 -- r3;
// [Asm]   r5 -- r15;
// [Asm]   r4 -- r19;
// [Asm]   comment = "0:v17-> 1:v11-> 2:v10-> 3:v13-> 4:zero-> 5:v8-> 6:v12-> 7:v9-> 8:a0-> 9:a1-> 10:a2-> 11:a3-> 12:a4-> 13:a5-> 14:t0-> 15:t1-> 16:t2-> 17:t3-> 18:t4-> 19:a6-> 20:a7-> 21:v18-> 22:v14-> 23:v28-> 24:v29-> 25:v15-> 29:v2-> 30:v3-> 31:v4-> 32:v5-> 33:v6-> 34:v7-> 26:v20-> 27:v21-> 28:v23"
// [Asm]   comment = "v17<-a0;v6<-a4;v20<-a0;v12<-s4;v2<-a0;v9<-s5;v8<-s3;v29<-a0;v5<-a3;v4<-a2;v28<-a0;v13<-s2;v21<-a0;v11<-s0;v23<-a0;v7<-a5;v14<-a0;v3<-a1;v15<-a0;v10<-s1;v18<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of lp108l4_2"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v17, v10, 1 ->   addi a0, s1, 1
// [Asm] subst   mv a1, v8 ->   mv a1, s3
// [Asm] subst   mv a2, v9 ->   mv a2, s5
// [Asm] subst   mv a3, v11 ->   mv a3, s0
// [Asm] subst   mv a4, v12 ->   mv a4, s4
// [Asm] subst   mv a5, v13 ->   mv a5, s2
// [Asm] subst   call aux40l3_3 ->   call aux40l3_3
// [Asm] subst   sw v18, 0(v13) ->   sw a0, 0(s2)
// [Asm] subst   j .lp108l4_2_0 ->   j .lp108l4_2_0
// [Asm] subst   ret ->   ret
// [Asm] subst   lw v14, 0(v8) ->   lw a0, 0(s3)
// [Asm] subst   slliw v28, v14, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v29, v11, v28 ->   add a0, s0, a0
// [Asm] subst   lw v15, 0(v29) ->   lw a0, 0(a0)
// [Asm] subst   bne v15, zero, .lp108l4_2_2 ->   bne a0, zero, .lp108l4_2_2
// [Asm] subst   addi v20, v10, 1 ->   addi a0, s1, 1
// [Asm] subst   mv a1, zero ->   mv a1, zero
// [Asm] subst   mv a2, v9 ->   mv a2, s5
// [Asm] subst   mv a3, v12 ->   mv a3, s4
// [Asm] subst   call skip21l2_1 ->   call skip21l2_1
// [Asm] subst   sw v21, 0(v13) ->   sw a0, 0(s2)
// [Asm] subst   mv v23, zero ->   mv a0, zero
// [Asm] subst   mv v8, v2 ->   mv s3, a0
// [Asm] subst   mv v9, v3 ->   mv s5, a1
// [Asm] subst   mv v10, v4 ->   mv s1, a2
// [Asm] subst   mv v11, v5 ->   mv s0, a3
// [Asm] subst   mv v12, v6 ->   mv s4, a4
// [Asm] subst   mv v13, v7 ->   mv s2, a5
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v50, FnParam(fref=f3, fpref=$f.4) -> v6, Insn(iref=%33) -> v42, BlockParam(bref=b0, bpref=$b.5) -> v13, Insn(iref=%8) -> v17, Insn(iref=%10) -> v57, BlockParam(bref=b0, bpref=$b.4) -> v12, BlockParam(bref=b0, bpref=$b.3) -> v11, Insn(iref=%27) -> v48, FnParam(fref=f3, fpref=$f.3) -> v5, Insn(iref=%25) -> v46, Insn(iref=%14) -> v18, Insn(iref=%39) -> v38, FnParam(fref=f3, fpref=$f.0) -> v2, BlockParam(bref=b26, bpref=$b.0) -> v31, FnParam(fref=f3, fpref=$f.5) -> v7, Self(fref=f3) -> v0, Insn(iref=%4) -> v61, BlockParam(bref=b25, bpref=$b.0) -> v30, Insn(iref=%42) -> v22, Insn(iref=%44) -> v33, Insn(iref=%32) -> v41, Insn(iref=%1) -> v15, Insn(iref=%26) -> v47, Insn(iref=%11) -> v58, BlockParam(bref=b23, bpref=$b.0) -> v28, BlockParam(bref=b24, bpref=$b.0) -> v29, Insn(iref=%6) -> v63, Insn(iref=%31) -> v40, FnParam(fref=f3, fpref=$f.2) -> v4, BlockParam(bref=b19, bpref=$b.0) -> v24, BlockParam(bref=b22, bpref=$b.0) -> v27, Insn(iref=%46) -> v35, Insn(iref=%38) -> v37, Insn(iref=%28) -> v49, Insn(iref=%24) -> v45, Insn(iref=%16) -> v51, Insn(iref=%9) -> v56, Insn(iref=%37) -> v36, BlockParam(bref=b0, bpref=$b.0) -> v8, BlockParam(bref=b0, bpref=$b.1) -> v9, Insn(iref=%45) -> v34, BlockParam(bref=b0, bpref=$b.2) -> v10, Insn(iref=%5) -> v62, Insn(iref=%0) -> v14, Insn(iref=%19) -> v54, Insn(iref=%18) -> v53, Insn(iref=%3) -> v60, BlockParam(bref=b27, bpref=$b.0) -> v64, Insn(iref=%22) -> v19, Insn(iref=%48) -> v23, Insn(iref=%23) -> v44, Insn(iref=%17) -> v52, FnParam(fref=f3, fpref=$f.1) -> v3, Insn(iref=%2) -> v16, Insn(iref=%20) -> v55, Insn(iref=%43) -> v32, Insn(iref=%30) -> v20, BlockParam(bref=b21, bpref=$b.0) -> v26, Insn(iref=%34) -> v43, BlockParam(bref=b20, bpref=$b.0) -> v25, Insn(iref=%36) -> v21, Insn(iref=%40) -> v39, Insn(iref=%12) -> v59
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=93)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=91)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=44)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=46)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=45)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=43)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=60)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=62)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v12, v13, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: [v26]
// [Asm] live_set: [v26]
// [Asm] move_origin: [v25]
// [Asm] defined: v26 is X
// [Asm] defs: [v64]
// [Asm] live_set: [v64]
// [Asm] move_origin: [v8]
// [Asm] defined: v64 is X
// [Asm] defs: []
// [Asm] live_set: [v64]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v10, v13, a0, v8, v12, v9]
// [Asm] move_origin: [v9]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v11, v10, v13, a0, v8, a1, v12, v9]
// [Asm] move_origin: [v10]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v11, v10, v13, a0, a2, a1, v12, v9]
// [Asm] move_origin: [v8]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v11, v10, v13, a0, a2, a1, v12, a3, v9]
// [Asm] move_origin: [v11]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v11, v10, v13, a0, a4, a2, a1, v12, a3, v9]
// [Asm] move_origin: [v12]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [v11, v10, a5, v13, a0, a4, a2, a1, v12, a3, v9]
// [Asm] move_origin: [v13]
// [Asm] defined: a5 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, v13, a0, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v33]
// [Asm] live_set: [v11, v10, v13, v12, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v33 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v34]
// [Asm] live_set: [v11, v10, v13, v12, v9, v34]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v11, v10, v13, v35, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: [v35]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v12, v13, v9, v8]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v12, v13, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: [v24]
// [Asm] live_set: [v24]
// [Asm] move_origin: [v8]
// [Asm] defined: v24 is X
// [Asm] defs: []
// [Asm] live_set: [v24]
// [Asm] move_origin: []
// [Asm] defs: [v56]
// [Asm] live_set: [v11, v10, v56, v13, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v56 is X
// [Asm] defs: [v57]
// [Asm] live_set: [v11, v10, v13, v8, v12, v57, v9]
// [Asm] move_origin: []
// [Asm] defined: v57 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v59]
// [Asm] live_set: [v11, v10, v13, v59, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v59 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: [v59]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v12, v13, v9, v8]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v12, v13, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: [v24]
// [Asm] live_set: [v24]
// [Asm] move_origin: [v8]
// [Asm] defined: v24 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v27]
// [Asm] move_origin: [v26]
// [Asm] defined: v27 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v11, v10, v13, v8, v36, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v36, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, v13, a0, v8, v36, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v37]
// [Asm] live_set: [v11, v10, v13, v8, v36, v37, v12, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v37 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v36, v37, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v96]
// [Asm] live_set: [v11, v10, v96, v13, v8, v37, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v96 is X
// [Asm] defs: [v97]
// [Asm] live_set: [v11, v10, v13, v97, v8, v37, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v97 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v39]
// [Asm] live_set: [v11, v10, v13, v12, v9, v39]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: [v39]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v12, v13, v9, v8]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v12, v13, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: [v106]
// [Asm] live_set: [v11, v106, v10, v13, v8, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v106 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defs: [v108]
// [Asm] live_set: [v11, v10, v13, v8, v108, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v108 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defs: [v64]
// [Asm] live_set: [v64]
// [Asm] move_origin: [v31]
// [Asm] defined: v64 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v31]
// [Asm] move_origin: [v30]
// [Asm] defined: v31 is X
// [Asm] defs: [v40]
// [Asm] live_set: [v11, v10, v13, v8, v12, v9, v40]
// [Asm] move_origin: []
// [Asm] defined: v40 is X
// [Asm] defs: [v91]
// [Asm] live_set: [v11, v91, v10, v13, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v91 is X
// [Asm] defs: [v92]
// [Asm] live_set: [v11, v10, v13, v8, v92, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v92 is X
// [Asm] defs: [v41]
// [Asm] live_set: [v11, v10, v13, v8, v41, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v41, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v10, v13, a0, v8, v12, v9]
// [Asm] move_origin: [v41]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, v13, a0, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v42]
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v42 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v43]
// [Asm] live_set: [v11, v10, v13, v43, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v43 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: [v43]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v12, v13, v9, v8]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v12, v13, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: [v60]
// [Asm] live_set: [v11, v10, v13, v8, v12, v9, v60]
// [Asm] move_origin: []
// [Asm] defined: v60 is X
// [Asm] defs: [v61]
// [Asm] live_set: [v11, v10, v13, v8, v12, v61, v9]
// [Asm] move_origin: []
// [Asm] defined: v61 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v63]
// [Asm] live_set: [v11, v63, v10, v13, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v63 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: [v63]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v12, v13, v9, v8]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v12, v13, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: [v50]
// [Asm] live_set: [v11, v10, v13, v50, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v50 is X
// [Asm] defs: [v51]
// [Asm] live_set: [v11, v10, v13, v50, v8, v12, v9, v51]
// [Asm] move_origin: []
// [Asm] defined: v51 is X
// [Asm] defs: [v75]
// [Asm] live_set: [v11, v10, v75, v13, v50, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v75 is X
// [Asm] defs: [v76]
// [Asm] live_set: [v11, v10, v13, v50, v8, v12, v9, v76]
// [Asm] move_origin: []
// [Asm] defined: v76 is X
// [Asm] defs: [v52]
// [Asm] live_set: [v11, v10, v13, v50, v8, v12, v52, v9]
// [Asm] move_origin: []
// [Asm] defined: v52 is X
// [Asm] defs: [v53]
// [Asm] live_set: [v11, v10, v53, v13, v50, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v53 is X
// [Asm] defs: [v72]
// [Asm] live_set: [v11, v72, v10, v53, v13, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v72 is X
// [Asm] defs: [v73]
// [Asm] live_set: [v11, v10, v53, v13, v8, v12, v9, v73]
// [Asm] move_origin: []
// [Asm] defined: v73 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v55]
// [Asm] live_set: [v11, v10, v13, v12, v9, v55]
// [Asm] move_origin: []
// [Asm] defined: v55 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: [v55]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v12, v13, v9, v8]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v12, v13, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v25]
// [Asm] move_origin: [v24]
// [Asm] defined: v25 is X
// [Asm] defs: [v103]
// [Asm] live_set: [v103, v15, v8]
// [Asm] move_origin: []
// [Asm] defined: v103 is X
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defs: [v44]
// [Asm] live_set: [v11, v10, v13, v8, v12, v44, v9]
// [Asm] move_origin: []
// [Asm] defined: v44 is X
// [Asm] defs: [v45]
// [Asm] live_set: [v11, v10, v13, v8, v45, v12, v44, v9]
// [Asm] move_origin: []
// [Asm] defined: v45 is X
// [Asm] defs: [v84]
// [Asm] live_set: [v11, v10, v13, v8, v84, v12, v44, v9]
// [Asm] move_origin: []
// [Asm] defined: v84 is X
// [Asm] defs: [v85]
// [Asm] live_set: [v11, v10, v13, v8, v85, v12, v44, v9]
// [Asm] move_origin: []
// [Asm] defined: v85 is X
// [Asm] defs: [v46]
// [Asm] live_set: [v11, v46, v10, v13, v8, v12, v44, v9]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: [v47]
// [Asm] live_set: [v11, v10, v13, v8, v47, v12, v44, v9]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: [v81]
// [Asm] live_set: [v11, v10, v13, v8, v47, v81, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v81 is X
// [Asm] defs: [v82]
// [Asm] live_set: [v11, v82, v10, v13, v8, v47, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v82 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v49]
// [Asm] live_set: [v11, v10, v49, v13, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v49 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: [v49]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v12, v13, v9, v8]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v12, v13, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: [v104]
// [Asm] live_set: [v11, v10, v13, v8, v104, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v104 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defs: [v109]
// [Asm] live_set: [v11, v109, v10, v13, v8, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v109 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defs: [v28]
// [Asm] live_set: [v28]
// [Asm] move_origin: [v27]
// [Asm] defined: v28 is X
// [Asm] defs: [v105]
// [Asm] live_set: [v11, v10, v13, v8, v105, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v105 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defs: [v107]
// [Asm] live_set: [v11, v10, v13, v8, v107, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v107 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defs: [v29]
// [Asm] live_set: [v29]
// [Asm] move_origin: [v28]
// [Asm] defined: v29 is X
// [Asm] defs: [v30]
// [Asm] live_set: [v30]
// [Asm] move_origin: [v29]
// [Asm] defined: v30 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v64]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v111]
// [Asm] live_set: [v11, v10, v13, v8, v111, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v111 is X
// [Asm] defs: [v112]
// [Asm] live_set: [v11, v112, v10, v13, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v112 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v11, v10, v13, v8, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v110]
// [Asm] live_set: [v11, v10, v13, v110, v8, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v110 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v8, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, a3, a5, a0, a4]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, a3, a5, a4, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, a3, a5, a4, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, a3, a5, a4, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, a5, a4, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v4, v6, v5, a5, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v2, v4, v6, v5, v7]
// [Asm] move_origin: [a5]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v3, v4, v5, v6, v8]
// [Asm] move_origin: [v2]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v7, v4, v6, v5, v9, v8]
// [Asm] move_origin: [v3]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v7, v6, v5, v10, v9, v8]
// [Asm] move_origin: [v4]
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v7, v11, v6, v10, v9, v8]
// [Asm] move_origin: [v5]
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v7, v11, v10, v12, v9, v8]
// [Asm] move_origin: [v6]
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v10, v12, v13, v9, v8]
// [Asm] move_origin: [v7]
// [Asm] defined: v13 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux40l3_3"];
// [Asm]   r0 [label="v26 ← a0", color=green];
// [Asm]   r46 [label="v63 ← a0", color=green];
// [Asm]   r33 [label="v39 ← a0", color=green];
// [Asm]   r76 [label="v110 ← a0", color=green];
// [Asm]   r59 [label="v45 ← a1", color=green];
// [Asm]   r9 [label="a1", color=blue];
// [Asm]   r26 [label="v57 ← a0", color=green];
// [Asm]   r44 [label="v60 ← a0", color=green];
// [Asm]   r53 [label="v72 ← a0", color=green];
// [Asm]   r56 [label="v25 ← a0", color=green];
// [Asm]   r10 [label="a2", color=blue];
// [Asm]   r5 [label="v13 ← s2", color=green];
// [Asm]   r54 [label="v73 ← a0", color=green];
// [Asm]   r24 [label="v24 ← a0", color=green];
// [Asm]   r43 [label="v43 ← a0", color=green];
// [Asm]   r80 [label="v5 ← a3", color=green];
// [Asm]   r31 [label="v96 ← a1", color=green];
// [Asm]   r39 [label="v91 ← a0", color=green];
// [Asm]   r17 [label="t3", color=blue];
// [Asm]   r52 [label="v53 ← a1", color=green];
// [Asm]   r65 [label="v82 ← a0", color=green];
// [Asm]   r79 [label="v4 ← a2", color=green];
// [Asm]   r20 [label="a7", color=blue];
// [Asm]   r61 [label="v85 ← a1", color=green];
// [Asm]   r23 [label="v35 ← a0", color=green];
// [Asm]   r3 [label="v11 ← s0", color=green];
// [Asm]   r82 [label="v7 ← a5", color=green];
// [Asm]   r67 [label="v104 ← a0", color=green];
// [Asm]   r77 [label="v2 ← a0", color=green];
// [Asm]   r75 [label="v112 ← a0", color=green];
// [Asm]   r27 [label="v59 ← a0", color=green];
// [Asm]   r62 [label="v46 ← a1", color=green];
// [Asm]   r40 [label="v92 ← a0", color=green];
// [Asm]   r11 [label="a3", color=blue];
// [Asm]   r58 [label="v44 ← a0", color=green];
// [Asm]   r34 [label="v106 ← a0", color=green];
// [Asm]   r14 [label="t0", color=blue];
// [Asm]   r51 [label="v52 ← a1", color=green];
// [Asm]   r78 [label="v3 ← a1", color=green];
// [Asm]   r55 [label="v55 ← a0", color=green];
// [Asm]   r16 [label="t2", color=blue];
// [Asm]   r21 [label="v33 ← a0", color=green];
// [Asm]   r60 [label="v84 ← a1", color=green];
// [Asm]   r73 [label="v30 ← a0", color=green];
// [Asm]   r38 [label="v40 ← a0", color=green];
// [Asm]   r72 [label="v29 ← a0", color=green];
// [Asm]   r47 [label="v50 ← a0", color=green];
// [Asm]   r6 [label="v8 ← s3", color=green];
// [Asm]   r13 [label="a5", color=blue];
// [Asm]   r42 [label="v42 ← a0", color=green];
// [Asm]   r4 [label="v10 ← s1", color=green];
// [Asm]   r29 [label="v36 ← s6", color=green];
// [Asm]   r35 [label="v15 ← a1", color=green];
// [Asm]   r7 [label="v12 ← s4", color=green];
// [Asm]   r64 [label="v81 ← a0", color=green];
// [Asm]   r8 [label="v9 ← s5", color=green];
// [Asm]   r36 [label="v108 ← a0", color=green];
// [Asm]   r66 [label="v49 ← a0", color=green];
// [Asm]   r32 [label="v97 ← a1", color=green];
// [Asm]   r15 [label="t1", color=blue];
// [Asm]   r49 [label="v75 ← a1", color=green];
// [Asm]   r74 [label="v111 ← a0", color=green];
// [Asm]   r57 [label="v103 ← a0", color=green];
// [Asm]   r68 [label="v109 ← a0", color=green];
// [Asm]   r70 [label="v105 ← a0", color=green];
// [Asm]   r48 [label="v51 ← a1", color=green];
// [Asm]   r12 [label="a4", color=blue];
// [Asm]   r37 [label="v31 ← a0", color=green];
// [Asm]   r1 [label="v64 ← a0", color=green];
// [Asm]   r28 [label="v27 ← a0", color=green];
// [Asm]   r41 [label="v41 ← a0", color=green];
// [Asm]   r71 [label="v107 ← a0", color=green];
// [Asm]   r69 [label="v28 ← a0", color=green];
// [Asm]   r22 [label="v34 ← a0", color=green];
// [Asm]   r50 [label="v76 ← a1", color=green];
// [Asm]   r30 [label="v37 ← a0", color=green];
// [Asm]   r45 [label="v61 ← a0", color=green];
// [Asm]   r25 [label="v56 ← a0", color=green];
// [Asm]   r63 [label="v47 ← a1", color=green];
// [Asm]   r2 [label="a0", color=blue];
// [Asm]   r18 [label="t4", color=blue];
// [Asm]   r19 [label="a6", color=blue];
// [Asm]   r81 [label="v6 ← a4", color=green];
// [Asm]   r58 -- r61;
// [Asm]   r6 -- r70;
// [Asm]   r3 -- r52;
// [Asm]   r6 -- r48;
// [Asm]   r11 -- r78;
// [Asm]   r6 -- r75;
// [Asm]   r3 -- r15;
// [Asm]   r4 -- r51;
// [Asm]   r3 -- r16;
// [Asm]   r3 -- r53;
// [Asm]   r8 -- r36;
// [Asm]   r6 -- r68;
// [Asm]   r7 -- r25;
// [Asm]   r4 -- r64;
// [Asm]   r3 -- r62;
// [Asm]   r4 -- r44;
// [Asm]   r58 -- r63;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r4 -- r48;
// [Asm]   r5 -- r65;
// [Asm]   r2 -- r7;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r70;
// [Asm]   r3 -- r31;
// [Asm]   r7 -- r62;
// [Asm]   r7 -- r32;
// [Asm]   r7 -- r35;
// [Asm]   r3 -- r48;
// [Asm]   r8 -- r34;
// [Asm]   r3 -- r8;
// [Asm]   r5 -- r35;
// [Asm]   r5 -- r6;
// [Asm]   r8 -- r16;
// [Asm]   r3 -- r74;
// [Asm]   r3 -- r39;
// [Asm]   r9 -- r12;
// [Asm]   r7 -- r59;
// [Asm]   r5 -- r58;
// [Asm]   r5 -- r54;
// [Asm]   r8 -- r23;
// [Asm]   r5 -- r32;
// [Asm]   r5 -- r60;
// [Asm]   r8 -- r59;
// [Asm]   r4 -- r29;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r33;
// [Asm]   r3 -- r71;
// [Asm]   r2 -- r13;
// [Asm]   r35 -- r71;
// [Asm]   r3 -- r17;
// [Asm]   r5 -- r51;
// [Asm]   r6 -- r50;
// [Asm]   r3 -- r35;
// [Asm]   r8 -- r32;
// [Asm]   r5 -- r36;
// [Asm]   r6 -- r25;
// [Asm]   r4 -- r13;
// [Asm]   r58 -- r62;
// [Asm]   r7 -- r44;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r76;
// [Asm]   r35 -- r67;
// [Asm]   r34 -- r35;
// [Asm]   r4 -- r62;
// [Asm]   r6 -- r62;
// [Asm]   r2 -- r4;
// [Asm]   r6 -- r41;
// [Asm]   r29 -- r30;
// [Asm]   r4 -- r81;
// [Asm]   r7 -- r20;
// [Asm]   r8 -- r76;
// [Asm]   r5 -- r19;
// [Asm]   r80 -- r81;
// [Asm]   r6 -- r53;
// [Asm]   r13 -- r80;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r5 -- r11;
// [Asm]   r8 -- r42;
// [Asm]   r8 -- r25;
// [Asm]   r5 -- r38;
// [Asm]   r6 -- r59;
// [Asm]   r7 -- r75;
// [Asm]   r3 -- r22;
// [Asm]   r58 -- r60;
// [Asm]   r5 -- r74;
// [Asm]   r8 -- r81;
// [Asm]   r6 -- r19;
// [Asm]   r7 -- r22;
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r55;
// [Asm]   r3 -- r65;
// [Asm]   r8 -- r62;
// [Asm]   r7 -- r19;
// [Asm]   r2 -- r14;
// [Asm]   r47 -- r51;
// [Asm]   r13 -- r78;
// [Asm]   r5 -- r68;
// [Asm]   r8 -- r18;
// [Asm]   r8 -- r35;
// [Asm]   r3 -- r29;
// [Asm]   r7 -- r36;
// [Asm]   r3 -- r66;
// [Asm]   r4 -- r36;
// [Asm]   r4 -- r7;
// [Asm]   r4 -- r63;
// [Asm]   r6 -- r39;
// [Asm]   r5 -- r25;
// [Asm]   r6 -- r38;
// [Asm]   r6 -- r74;
// [Asm]   r4 -- r74;
// [Asm]   r4 -- r10;
// [Asm]   r3 -- r23;
// [Asm]   r77 -- r80;
// [Asm]   r7 -- r46;
// [Asm]   r11 -- r29;
// [Asm]   r6 -- r52;
// [Asm]   r5 -- r12;
// [Asm]   r3 -- r67;
// [Asm]   r4 -- r41;
// [Asm]   r6 -- r36;
// [Asm]   r5 -- r63;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r4 -- r58;
// [Asm]   r8 -- r68;
// [Asm]   r4 -- r54;
// [Asm]   r10 -- r13;
// [Asm]   r3 -- r32;
// [Asm]   r6 -- r54;
// [Asm]   r5 -- r42;
// [Asm]   r6 -- r63;
// [Asm]   r47 -- r52;
// [Asm]   r2 -- r16;
// [Asm]   r63 -- r65;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r18;
// [Asm]   r4 -- r35;
// [Asm]   r8 -- r79;
// [Asm]   r8 -- r71;
// [Asm]   r4 -- r33;
// [Asm]   r3 -- r30;
// [Asm]   r3 -- r13;
// [Asm]   r58 -- r59;
// [Asm]   r6 -- r18;
// [Asm]   r7 -- r63;
// [Asm]   r6 -- r10;
// [Asm]   r3 -- r40;
// [Asm]   r77 -- r79;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r77 -- r82;
// [Asm]   r3 -- r27;
// [Asm]   r8 -- r29;
// [Asm]   r8 -- r63;
// [Asm]   r5 -- r7;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r52 -- r54;
// [Asm]   r35 -- r76;
// [Asm]   r4 -- r49;
// [Asm]   r7 -- r54;
// [Asm]   r12 -- r78;
// [Asm]   r6 -- r32;
// [Asm]   r7 -- r82;
// [Asm]   r8 -- r82;
// [Asm]   r4 -- r16;
// [Asm]   r7 -- r52;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r8 -- r66;
// [Asm]   r78 -- r80;
// [Asm]   r6 -- r49;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r48;
// [Asm]   r5 -- r23;
// [Asm]   r18 -- r29;
// [Asm]   r9 -- r29;
// [Asm]   r8 -- r19;
// [Asm]   r8 -- r43;
// [Asm]   r7 -- r71;
// [Asm]   r4 -- r20;
// [Asm]   r3 -- r47;
// [Asm]   r6 -- r16;
// [Asm]   r4 -- r30;
// [Asm]   r6 -- r12;
// [Asm]   r8 -- r54;
// [Asm]   r2 -- r29;
// [Asm]   r4 -- r11;
// [Asm]   r7 -- r60;
// [Asm]   r8 -- r52;
// [Asm]   r5 -- r26;
// [Asm]   r7 -- r33;
// [Asm]   r8 -- r67;
// [Asm]   r3 -- r55;
// [Asm]   r7 -- r47;
// [Asm]   r7 -- r11;
// [Asm]   r6 -- r67;
// [Asm]   r6 -- r82;
// [Asm]   r11 -- r79;
// [Asm]   r7 -- r39;
// [Asm]   r4 -- r47;
// [Asm]   r7 -- r43;
// [Asm]   r8 -- r58;
// [Asm]   r4 -- r39;
// [Asm]   r3 -- r36;
// [Asm]   r3 -- r54;
// [Asm]   r7 -- r50;
// [Asm]   r78 -- r82;
// [Asm]   r7 -- r68;
// [Asm]   r5 -- r43;
// [Asm]   r79 -- r82;
// [Asm]   r5 -- r30;
// [Asm]   r5 -- r76;
// [Asm]   r4 -- r52;
// [Asm]   r4 -- r19;
// [Asm]   r3 -- r44;
// [Asm]   r52 -- r53;
// [Asm]   r4 -- r53;
// [Asm]   r78 -- r81;
// [Asm]   r79 -- r81;
// [Asm]   r8 -- r31;
// [Asm]   r7 -- r51;
// [Asm]   r6 -- r81;
// [Asm]   r4 -- r75;
// [Asm]   r81 -- r82;
// [Asm]   r12 -- r29;
// [Asm]   r5 -- r21;
// [Asm]   r4 -- r68;
// [Asm]   r5 -- r33;
// [Asm]   r8 -- r51;
// [Asm]   r12 -- r79;
// [Asm]   r6 -- r35;
// [Asm]   r4 -- r34;
// [Asm]   r12 -- r77;
// [Asm]   r47 -- r50;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r3 -- r42;
// [Asm]   r5 -- r22;
// [Asm]   r5 -- r59;
// [Asm]   r5 -- r18;
// [Asm]   r5 -- r47;
// [Asm]   r5 -- r29;
// [Asm]   r77 -- r81;
// [Asm]   r35 -- r70;
// [Asm]   r3 -- r68;
// [Asm]   r7 -- r27;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r31;
// [Asm]   r8 -- r12;
// [Asm]   r8 -- r61;
// [Asm]   r5 -- r31;
// [Asm]   r8 -- r45;
// [Asm]   r8 -- r75;
// [Asm]   r16 -- r29;
// [Asm]   r6 -- r60;
// [Asm]   r5 -- r62;
// [Asm]   r2 -- r6;
// [Asm]   r19 -- r29;
// [Asm]   r6 -- r80;
// [Asm]   r11 -- r13;
// [Asm]   r10 -- r12;
// [Asm]   r4 -- r67;
// [Asm]   r4 -- r65;
// [Asm]   r7 -- r38;
// [Asm]   r2 -- r12;
// [Asm]   r5 -- r67;
// [Asm]   r8 -- r48;
// [Asm]   r6 -- r64;
// [Asm]   r4 -- r25;
// [Asm]   r5 -- r55;
// [Asm]   r8 -- r70;
// [Asm]   r3 -- r49;
// [Asm]   r5 -- r66;
// [Asm]   r6 -- r65;
// [Asm]   r7 -- r42;
// [Asm]   r13 -- r77;
// [Asm]   r3 -- r46;
// [Asm]   r4 -- r14;
// [Asm]   r7 -- r67;
// [Asm]   r7 -- r65;
// [Asm]   r8 -- r30;
// [Asm]   r6 -- r76;
// [Asm]   r7 -- r76;
// [Asm]   r3 -- r19;
// [Asm]   r3 -- r45;
// [Asm]   r7 -- r29;
// [Asm]   r11 -- r77;
// [Asm]   r4 -- r23;
// [Asm]   r17 -- r29;
// [Asm]   r3 -- r38;
// [Asm]   r8 -- r27;
// [Asm]   r5 -- r71;
// [Asm]   r47 -- r48;
// [Asm]   r30 -- r32;
// [Asm]   r8 -- r9;
// [Asm]   r6 -- r30;
// [Asm]   r80 -- r82;
// [Asm]   r20 -- r29;
// [Asm]   r11 -- r12;
// [Asm]   r10 -- r29;
// [Asm]   r7 -- r74;
// [Asm]   r7 -- r48;
// [Asm]   r7 -- r49;
// [Asm]   r8 -- r20;
// [Asm]   r8 -- r47;
// [Asm]   r79 -- r80;
// [Asm]   r6 -- r20;
// [Asm]   r3 -- r50;
// [Asm]   r7 -- r17;
// [Asm]   r8 -- r64;
// [Asm]   r8 -- r41;
// [Asm]   r4 -- r71;
// [Asm]   r4 -- r80;
// [Asm]   r4 -- r15;
// [Asm]   r12 -- r13;
// [Asm]   r8 -- r53;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r8 -- r15;
// [Asm]   r4 -- r32;
// [Asm]   r7 -- r15;
// [Asm]   r6 -- r57;
// [Asm]   r5 -- r45;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r5 -- r70;
// [Asm]   r5 -- r61;
// [Asm]   r7 -- r41;
// [Asm]   r2 -- r17;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r82;
// [Asm]   r5 -- r39;
// [Asm]   r8 -- r26;
// [Asm]   r7 -- r16;
// [Asm]   r63 -- r64;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r9 -- r13;
// [Asm]   r7 -- r12;
// [Asm]   r13 -- r79;
// [Asm]   r7 -- r14;
// [Asm]   r8 -- r50;
// [Asm]   r8 -- r60;
// [Asm]   r6 -- r71;
// [Asm]   r2 -- r20;
// [Asm]   r4 -- r38;
// [Asm]   r5 -- r41;
// [Asm]   r4 -- r66;
// [Asm]   r7 -- r21;
// [Asm]   r6 -- r47;
// [Asm]   r3 -- r43;
// [Asm]   r7 -- r40;
// [Asm]   r9 -- r77;
// [Asm]   r3 -- r60;
// [Asm]   r30 -- r31;
// [Asm]   r6 -- r29;
// [Asm]   r2 -- r10;
// [Asm]   r7 -- r53;
// [Asm]   r5 -- r49;
// [Asm]   r4 -- r27;
// [Asm]   r10 -- r77;
// [Asm]   r4 -- r40;
// [Asm]   r4 -- r42;
// [Asm]   r3 -- r51;
// [Asm]   r3 -- r34;
// [Asm]   r4 -- r21;
// [Asm]   r6 -- r13;
// [Asm]   r3 -- r76;
// [Asm]   r7 -- r34;
// [Asm]   r7 -- r55;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r43;
// [Asm]   r5 -- r75;
// [Asm]   r35 -- r68;
// [Asm]   r5 -- r53;
// [Asm]   r7 -- r10;
// [Asm]   r35 -- r57;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r82;
// [Asm]   r7 -- r70;
// [Asm]   r6 -- r31;
// [Asm]   r8 -- r44;
// [Asm]   r6 -- r78;
// [Asm]   r8 -- r39;
// [Asm]   r78 -- r79;
// [Asm]   r8 -- r80;
// [Asm]   r7 -- r61;
// [Asm]   r4 -- r50;
// [Asm]   r8 -- r22;
// [Asm]   r6 -- r45;
// [Asm]   r8 -- r21;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r5 -- r50;
// [Asm]   r3 -- r61;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r13 -- r29;
// [Asm]   r6 -- r61;
// [Asm]   r3 -- r58;
// [Asm]   r4 -- r9;
// [Asm]   r5 -- r34;
// [Asm]   r7 -- r64;
// [Asm]   r6 -- r58;
// [Asm]   r35 -- r36;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r6 -- r15;
// [Asm]   r15 -- r29;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r18;
// [Asm]   r7 -- r45;
// [Asm]   r12 -- r80;
// [Asm]   r6 -- r44;
// [Asm]   r10 -- r78;
// [Asm]   r4 -- r59;
// [Asm]   r3 -- r12;
// [Asm]   r7 -- r26;
// [Asm]   r5 -- r13;
// [Asm]   r6 -- r79;
// [Asm]   r7 -- r13;
// [Asm]   r6 -- r51;
// [Asm]   r5 -- r52;
// [Asm]   r8 -- r55;
// [Asm]   r5 -- r44;
// [Asm]   r7 -- r30;
// [Asm]   r8 -- r38;
// [Asm]   r14 -- r29;
// [Asm]   r8 -- r33;
// [Asm]   r7 -- r9;
// [Asm]   r8 -- r65;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r26;
// [Asm]   r6 -- r40;
// [Asm]   r8 -- r49;
// [Asm]   r4 -- r60;
// [Asm]   r7 -- r66;
// [Asm]   r4 -- r70;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r34;
// [Asm]   r5 -- r64;
// [Asm]   r13 -- r81;
// [Asm]   r77 -- r78;
// [Asm]   r4 -- r46;
// [Asm]   r4 -- r45;
// [Asm]   r5 -- r46;
// [Asm]   r8 -- r13;
// [Asm]   r8 -- r74;
// [Asm]   r8 -- r40;
// [Asm]   r3 -- r64;
// [Asm]   r6 -- r42;
// [Asm]   r47 -- r49;
// [Asm]   r3 -- r81;
// [Asm]   r3 -- r41;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r3 -- r75;
// [Asm]   r7 -- r58;
// [Asm]   r3 -- r59;
// [Asm]   r7 -- r31;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r7 -- r23;
// [Asm]   r2 -- r19;
// [Asm]   r4 -- r26;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r63;
// [Asm]   r8 -- r46;
// [Asm]   r4 -- r61;
// [Asm]   r5 -- r40;
// [Asm]   r5 -- r15;
// [Asm]   comment = "0:v26-> 1:v64-> 2:a0-> 3:v11-> 4:v10-> 5:v13-> 6:v8-> 7:v12-> 8:v9-> 9:a1-> 10:a2-> 11:a3-> 12:a4-> 13:a5-> 29:v36-> 14:t0-> 15:t1-> 16:t2-> 17:t3-> 18:t4-> 19:a6-> 20:a7-> 30:v37-> 31:v96-> 32:v97-> 25:v56-> 26:v57-> 34:v106-> 35:v15-> 36:v108-> 67:v104-> 68:v109-> 70:v105-> 71:v107-> 76:v110-> 38:v40-> 39:v91-> 40:v92-> 41:v41-> 42:v42-> 44:v60-> 45:v61-> 47:v50-> 48:v51-> 49:v75-> 50:v76-> 51:v52-> 52:v53-> 53:v72-> 54:v73-> 58:v44-> 59:v45-> 60:v84-> 61:v85-> 62:v46-> 63:v47-> 64:v81-> 65:v82-> 74:v111-> 75:v112-> 21:v33-> 22:v34-> 23:v35-> 27:v59-> 33:v39-> 43:v43-> 46:v63-> 55:v55-> 66:v49-> 77:v2-> 78:v3-> 79:v4-> 80:v5-> 81:v6-> 82:v7-> 57:v103-> 24:v24-> 28:v27-> 37:v31-> 56:v25-> 69:v28-> 72:v29-> 73:v30"
// [Asm]   comment = "v26<-a0;v63<-a0;v39<-a0;v110<-a0;v45<-a1;v57<-a0;v60<-a0;v72<-a0;v25<-a0;v13<-s2;v73<-a0;v24<-a0;v43<-a0;v5<-a3;v96<-a1;v91<-a0;v53<-a1;v82<-a0;v4<-a2;v85<-a1;v35<-a0;v11<-s0;v7<-a5;v104<-a0;v2<-a0;v112<-a0;v59<-a0;v46<-a1;v92<-a0;v44<-a0;v106<-a0;v52<-a1;v3<-a1;v55<-a0;v33<-a0;v84<-a1;v30<-a0;v40<-a0;v29<-a0;v50<-a0;v8<-s3;v42<-a0;v10<-s1;v36<-s6;v15<-a1;v12<-s4;v81<-a0;v9<-s5;v108<-a0;v49<-a0;v97<-a1;v75<-a1;v111<-a0;v103<-a0;v109<-a0;v105<-a0;v51<-a1;v31<-a0;v64<-a0;v27<-a0;v41<-a0;v107<-a0;v28<-a0;v34<-a0;v76<-a1;v37<-a0;v61<-a0;v56<-a0;v47<-a1;v6<-a4;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux40l3_3"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   bge v8, v10, .aux40l3_3_1 ->   bge s3, s1, .aux40l3_3_1
// [Asm] subst   mv v64, v8 ->   mv a0, s3
// [Asm] subst   j .aux40l3_3_27 ->   j .aux40l3_3_27
// [Asm] subst   sw v8, 0(v13) ->   sw s3, 0(s2)
// [Asm] subst   mv a0, v9 ->   mv a0, s5
// [Asm] subst   mv a1, v10 ->   mv a1, s1
// [Asm] subst   mv a2, v8 ->   mv a2, s3
// [Asm] subst   mv a3, v11 ->   mv a3, s0
// [Asm] subst   mv a4, v12 ->   mv a4, s4
// [Asm] subst   mv a5, v13 ->   mv a5, s2
// [Asm] subst   call lp108l4_2 ->   call lp108l4_2
// [Asm] subst   lw v34, 0(v13) ->   lw a0, 0(s2)
// [Asm] subst   addi v35, v34, 1 ->   addi a0, a0, 1
// [Asm] subst   mv v8, v35 ->   mv s3, a0
// [Asm] subst   j .aux40l3_3_0 ->   j .aux40l3_3_0
// [Asm] subst   mv v24, v8 ->   mv a0, s3
// [Asm] subst   j .aux40l3_3_19 ->   j .aux40l3_3_19
// [Asm] subst   lw v56, 0(v9) ->   lw a0, 0(s5)
// [Asm] subst   addi v57, v56, -1 ->   addi a0, a0, -1
// [Asm] subst   sw v57, 0(v9) ->   sw a0, 0(s5)
// [Asm] subst   addi v59, v8, 1 ->   addi a0, s3, 1
// [Asm] subst   mv v8, v59 ->   mv s3, a0
// [Asm] subst   j .aux40l3_3_0 ->   j .aux40l3_3_0
// [Asm] subst   mv v24, v8 ->   mv a0, s3
// [Asm] subst   lw v36, 0(v9) ->   lw s6, 0(s5)
// [Asm] subst   call read_ch_until_newline_or_eof1l0_0 ->   call read_ch_until_newline_or_eof1l0_0
// [Asm] subst   slliw v96, v36, 2 ->   slliw a1, s6, 2
// [Asm] subst   add v97, v11, v96 ->   add a1, s0, a1
// [Asm] subst   sw v37, 0(v97) ->   sw a0, 0(a1)
// [Asm] subst   addi v39, v8, 1 ->   addi a0, s3, 1
// [Asm] subst   mv v8, v39 ->   mv s3, a0
// [Asm] subst   j .aux40l3_3_0 ->   j .aux40l3_3_0
// [Asm] subst   li v106, 46 ->   li a0, 46
// [Asm] subst   beq v15, v106, .aux40l3_3_11 ->   beq a1, a0, .aux40l3_3_11
// [Asm] subst   li v108, 43 ->   li a0, 43
// [Asm] subst   beq v15, v108, .aux40l3_3_7 ->   beq a1, a0, .aux40l3_3_7
// [Asm] subst   lw v40, 0(v9) ->   lw a0, 0(s5)
// [Asm] subst   slliw v91, v40, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v92, v11, v91 ->   add a0, s0, a0
// [Asm] subst   lw v41, 0(v92) ->   lw a0, 0(a0)
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   addi v43, v8, 1 ->   addi a0, s3, 1
// [Asm] subst   mv v8, v43 ->   mv s3, a0
// [Asm] subst   j .aux40l3_3_0 ->   j .aux40l3_3_0
// [Asm] subst   lw v60, 0(v9) ->   lw a0, 0(s5)
// [Asm] subst   addi v61, v60, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v61, 0(v9) ->   sw a0, 0(s5)
// [Asm] subst   addi v63, v8, 1 ->   addi a0, s3, 1
// [Asm] subst   mv v8, v63 ->   mv s3, a0
// [Asm] subst   j .aux40l3_3_0 ->   j .aux40l3_3_0
// [Asm] subst   lw v50, 0(v9) ->   lw a0, 0(s5)
// [Asm] subst   lw v51, 0(v9) ->   lw a1, 0(s5)
// [Asm] subst   slliw v75, v51, 2 ->   slliw a1, a1, 2
// [Asm] subst   add v76, v11, v75 ->   add a1, s0, a1
// [Asm] subst   lw v52, 0(v76) ->   lw a1, 0(a1)
// [Asm] subst   addi v53, v52, 1 ->   addi a1, a1, 1
// [Asm] subst   slliw v72, v50, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v73, v11, v72 ->   add a0, s0, a0
// [Asm] subst   sw v53, 0(v73) ->   sw a1, 0(a0)
// [Asm] subst   addi v55, v8, 1 ->   addi a0, s3, 1
// [Asm] subst   mv v8, v55 ->   mv s3, a0
// [Asm] subst   j .aux40l3_3_0 ->   j .aux40l3_3_0
// [Asm] subst   li v103, 93 ->   li a0, 93
// [Asm] subst   bne v15, v103, .aux40l3_3_18 ->   bne a1, a0, .aux40l3_3_18
// [Asm] subst   lw v44, 0(v9) ->   lw a0, 0(s5)
// [Asm] subst   lw v45, 0(v9) ->   lw a1, 0(s5)
// [Asm] subst   slliw v84, v45, 2 ->   slliw a1, a1, 2
// [Asm] subst   add v85, v11, v84 ->   add a1, s0, a1
// [Asm] subst   lw v46, 0(v85) ->   lw a1, 0(a1)
// [Asm] subst   addi v47, v46, -1 ->   addi a1, a1, -1
// [Asm] subst   slliw v81, v44, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v82, v11, v81 ->   add a0, s0, a0
// [Asm] subst   sw v47, 0(v82) ->   sw a1, 0(a0)
// [Asm] subst   addi v49, v8, 1 ->   addi a0, s3, 1
// [Asm] subst   mv v8, v49 ->   mv s3, a0
// [Asm] subst   j .aux40l3_3_0 ->   j .aux40l3_3_0
// [Asm] subst   li v104, 91 ->   li a0, 91
// [Asm] subst   beq v15, v104, .aux40l3_3_15 ->   beq a1, a0, .aux40l3_3_15
// [Asm] subst   li v109, 60 ->   li a0, 60
// [Asm] subst   beq v15, v109, .aux40l3_3_5 ->   beq a1, a0, .aux40l3_3_5
// [Asm] subst   li v105, 44 ->   li a0, 44
// [Asm] subst   beq v15, v105, .aux40l3_3_13 ->   beq a1, a0, .aux40l3_3_13
// [Asm] subst   li v107, 45 ->   li a0, 45
// [Asm] subst   beq v15, v107, .aux40l3_3_9 ->   beq a1, a0, .aux40l3_3_9
// [Asm] subst   ret ->   ret
// [Asm] subst   slliw v111, v8, 2 ->   slliw a0, s3, 2
// [Asm] subst   add v112, v12, v111 ->   add a0, s4, a0
// [Asm] subst   lw v15, 0(v112) ->   lw a1, 0(a0)
// [Asm] subst   li v110, 62 ->   li a0, 62
// [Asm] subst   beq v15, v110, .aux40l3_3_3 ->   beq a1, a0, .aux40l3_3_3
// [Asm] subst   mv v8, v2 ->   mv s3, a0
// [Asm] subst   mv v9, v3 ->   mv s5, a1
// [Asm] subst   mv v10, v4 ->   mv s1, a2
// [Asm] subst   mv v11, v5 ->   mv s0, a3
// [Asm] subst   mv v12, v6 ->   mv s4, a4
// [Asm] subst   mv v13, v7 ->   mv s2, a5
// [Asm] pre_assigned_registers: Self(fref=f14) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_14"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_14"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main136l2_6 ->   call main136l2_6
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v3, BlockParam(bref=b5, bpref=$b.0) -> v5, Self(fref=f0) -> v0, BlockParam(bref=b6, bpref=$b.0) -> v6, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=13)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=10)])
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10, v2]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [v8]
// [Asm] defined: v5 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [v5]
// [Asm] defined: v6 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [v7]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of read_ch_until_newline_or_eof1l0_0"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r14 [label="v10 ← a1", color=green];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r15 [label="v8 ← a0", color=green];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r16 [label="v5 ← a0", color=green];
// [Asm]   r18 [label="v9 ← a1", color=green];
// [Asm]   r19 [label="v7 ← a0", color=green];
// [Asm]   r17 [label="v6 ← a0", color=green];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r13 -- r18;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r13 -- r14;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2-> 14:v10-> 18:v9-> 15:v8-> 16:v5-> 17:v6-> 19:v7"
// [Asm]   comment = "v2<-a0;v10<-a1;v8<-a0;v5<-a0;v9<-a1;v7<-a0;v6<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of read_ch_until_newline_or_eof1l0_0"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call minimbt_read_char ->   call minimbt_read_char
// [Asm] subst   li v10, 10 ->   li a1, 10
// [Asm] subst   beq v2, v10, .read_ch_until_newline_or_eof1l0_0_1 ->   beq a0, a1, .read_ch_until_newline_or_eof1l0_0_1
// [Asm] subst   li v8, -1 ->   li a0, -1
// [Asm] subst   j .read_ch_until_newline_or_eof1l0_0_5 ->   j .read_ch_until_newline_or_eof1l0_0_5
// [Asm] subst   li v9, 13 ->   li a1, 13
// [Asm] subst   bne v2, v9, .read_ch_until_newline_or_eof1l0_0_4 ->   bne a0, a1, .read_ch_until_newline_or_eof1l0_0_4
// [Asm] subst   li v7, -1 ->   li a0, -1
// [Asm] subst   j .read_ch_until_newline_or_eof1l0_0_6 ->   j .read_ch_until_newline_or_eof1l0_0_6
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf true
// [Asm] skip21l2_1:
// [Asm] # block info: defs: [v2, v5, v7, v8, v4, v6, v9, v3], uses: [v2, v5, a0, a2, v4, a1, a3, v3], upward_exposed: [a2, a1, a3, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a3, a0, zero], live_out: [v8, v6, v9, zero, v7]
// [Asm] # block parameters: []
// [Asm] .skip21l2_1_14:
// [Asm]   # save_ctx1  # live: [a2, a1, a3, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, a3, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, a3, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, a3, zero, v3]
// [Asm]   mv v5, a3  # live: [v2, v4, v5, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v2  # live: [v4, v6, v5, zero, v3]
// [Asm]   mv v7, v3  # live: [v4, v6, v5, zero, v7]
// [Asm]   mv v8, v4  # live: [v7, v6, v5, zero, v8]
// [Asm]   mv v9, v5  # live: [v7, v6, v9, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v6, v8], upward_exposed: [v6, v8], params_defs: [v8, v6, v9, v7]
// [Asm] # live_in: [v7, v6, v9, zero, v8], live_out: [v8, v6, v9, zero, v7]
// [Asm] # block parameters: [v6, v7, v8, v9]
// [Asm] .skip21l2_1_0:
// [Asm] # control
// [Asm]   bge v6, v8, .skip21l2_1_1  # live: [v7, v6, v9, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v11, v32, v31, v30], uses: [v11, v32, v6, v31, v9, v30], upward_exposed: [v6, v9], params_defs: []
// [Asm] # live_in: [v7, v6, v9, zero, v8], live_out: [v11, zero, v8, v7, v6, v9]
// [Asm] # block parameters: []
// [Asm] .skip21l2_1_2:
// [Asm]   slliw v31, v6, 2  # live: [zero, v7, v8, v6, v31, v9]
// [Asm]   add v32, v9, v31  # live: [zero, v7, v8, v32, v6, v9]
// [Asm]   lw v11, 0(v32)  # live: [v11, zero, v7, v8, v6, v9]
// [Asm] # control
// [Asm]   li v30, 91  # live: [v11, zero, v30, v7, v8, v6, v9]
// [Asm]   beq v11, v30, .skip21l2_1_3  # live: [v7, v11, v6, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [v29], uses: [v11, v29], upward_exposed: [v11], params_defs: []
// [Asm] # live_in: [v11, zero, v7, v8, v6, v9], live_out: [v8, v6, zero, v9, v7]
// [Asm] # block parameters: []
// [Asm] .skip21l2_1_4:
// [Asm] # control
// [Asm]   li v29, 93  # live: [v11, zero, v29, v7, v8, v6, v9]
// [Asm]   bne v11, v29, .skip21l2_1_6  # live: [v7, v6, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [zero, v7], upward_exposed: [zero, v7], params_defs: []
// [Asm] # live_in: [v8, v6, zero, v9, v7], live_out: [v8, v6, v9, zero, v7]
// [Asm] # block parameters: []
// [Asm] .skip21l2_1_5:
// [Asm] # control
// [Asm]   beq v7, zero, .skip21l2_1_7  # live: [v7, v6, v9, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v16, v17, v6, v7], uses: [v8, v6, v16, v17, v9, v7], upward_exposed: [v8, v6, v9, v7], params_defs: []
// [Asm] # live_in: [v7, v6, v9, zero, v8], live_out: [v8, v6, v9, zero, v7]
// [Asm] # block parameters: []
// [Asm] .skip21l2_1_8:
// [Asm]   addi v16, v6, 1  # live: [v7, v16, v9, zero, v8]
// [Asm]   addi v17, v7, -1  # live: [v17, v16, v9, zero, v8]
// [Asm] # control
// [Asm]   mv v6, v16  # live: [v6, v17, v9, zero, v8]
// [Asm]   mv v7, v17  # live: [v7, v6, v9, zero, v8]
// [Asm]   mv v8, v8  # live: [v7, v6, v9, zero, v8]
// [Asm]   mv v9, v9  # live: [v7, v6, v9, zero, v8]
// [Asm]   j .skip21l2_1_0  # live: [v7, v6, v9, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v23], uses: [v6], upward_exposed: [v6], params_defs: []
// [Asm] # live_in: [v6], live_out: [v23]
// [Asm] # block parameters: []
// [Asm] .skip21l2_1_1:
// [Asm] # control
// [Asm]   mv v23, v6  # live: [v23]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v23], upward_exposed: [v23], params_defs: [v23]
// [Asm] # live_in: [v23], live_out: []
// [Asm] # block parameters: [v23]
// [Asm] .skip21l2_1_12:
// [Asm] # control
// [Asm]   mv a0, v23  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v6, v21, v22, v7], uses: [v8, v6, v21, v9, v22, v7], upward_exposed: [v8, v6, v9, v7], params_defs: []
// [Asm] # live_in: [v7, v6, v9, zero, v8], live_out: [v8, v6, v9, zero, v7]
// [Asm] # block parameters: []
// [Asm] .skip21l2_1_3:
// [Asm]   addi v21, v6, 1  # live: [v7, v21, v9, zero, v8]
// [Asm]   addi v22, v7, 1  # live: [v8, v21, v9, zero, v22]
// [Asm] # control
// [Asm]   mv v6, v21  # live: [v8, v6, v9, zero, v22]
// [Asm]   mv v7, v22  # live: [v7, v6, v9, zero, v8]
// [Asm]   mv v8, v8  # live: [v7, v6, v9, zero, v8]
// [Asm]   mv v9, v9  # live: [v7, v6, v9, zero, v8]
// [Asm]   j .skip21l2_1_0  # live: [v7, v6, v9, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v14, v6], uses: [v8, v6, v14, v9, v7], upward_exposed: [v8, v6, v9, v7], params_defs: []
// [Asm] # live_in: [v7, v6, v9, zero, v8], live_out: [v8, v6, v9, zero, v7]
// [Asm] # block parameters: []
// [Asm] .skip21l2_1_6:
// [Asm]   addi v14, v6, 1  # live: [v7, v14, v9, zero, v8]
// [Asm] # control
// [Asm]   mv v6, v14  # live: [v7, v6, v9, zero, v8]
// [Asm]   mv v7, v7  # live: [v7, v6, v9, zero, v8]
// [Asm]   mv v8, v8  # live: [v7, v6, v9, zero, v8]
// [Asm]   mv v9, v9  # live: [v7, v6, v9, zero, v8]
// [Asm]   j .skip21l2_1_0  # live: [v7, v6, v9, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v18], uses: [v6], upward_exposed: [v6], params_defs: []
// [Asm] # live_in: [v6], live_out: [v18]
// [Asm] # block parameters: []
// [Asm] .skip21l2_1_7:
// [Asm] # control
// [Asm]   mv v18, v6  # live: [v18]
// [Asm] 
// [Asm] # block info: defs: [v19], uses: [v18], upward_exposed: [v18], params_defs: [v18]
// [Asm] # live_in: [v18], live_out: [v19]
// [Asm] # block parameters: [v18]
// [Asm] .skip21l2_1_9:
// [Asm] # control
// [Asm]   mv v19, v18  # live: [v19]
// [Asm] 
// [Asm] # block info: defs: [v20], uses: [v19], upward_exposed: [v19], params_defs: [v19]
// [Asm] # live_in: [v19], live_out: [v20]
// [Asm] # block parameters: [v19]
// [Asm] .skip21l2_1_10:
// [Asm] # control
// [Asm]   mv v20, v19  # live: [v20]
// [Asm] 
// [Asm] # block info: defs: [v23], uses: [v20], upward_exposed: [v20], params_defs: [v20]
// [Asm] # live_in: [v20], live_out: [v23]
// [Asm] # block parameters: [v20]
// [Asm] .skip21l2_1_11:
// [Asm] # control
// [Asm]   mv v23, v20  # live: [v23]
// [Asm]   j .skip21l2_1_12  # live: [v23]
// [Asm] 
// [Asm] # leaf false
// [Asm] main136l2_6:
// [Asm] # block info: defs: [t1, v7, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v7, a2, v6, a1, s11, v9, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main136l2_6_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   li v6, 4096  # live: [v6, s11, zero]
// [Asm]   sub v7, s11, v6  # live: [zero, v7]
// [Asm]   andi v2, v7, -8  # live: [zero, v2]
// [Asm]   mv s11, v2  # live: [zero, v2]
// [Asm]   li v9, 1024  # live: [zero, v9, v2]
// [Asm]   mv a1, v9  # live: [a1, zero, v2]
// [Asm]   mv a0, v2  # live: [a1, zero, a0, v2]
// [Asm]   mv a2, zero  # live: [a2, a1, zero, a0, v2]
// [Asm]   call memseti32  # live: [zero, v2]
// [Asm]   # save_ctx2  # live: [zero, v2]
// [Asm]   mv a0, zero  # live: [zero, a0, v2]
// [Asm]   mv a1, v2  # live: [a1, zero, a0]
// [Asm]   call read_prog140l3_5  # live: [zero, a0]
// [Asm]   mv v4, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_14:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_14_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main136l2_6  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] lp108l4_2:
// [Asm] # block info: defs: [v2, v11, v5, v10, v13, v7, v8, v4, v6, v12, v9, v3], uses: [v3, v5, a5, a0, a4, v7, a2, v4, a1, v6, a3, v2], upward_exposed: [a2, a1, a3, a5, a0, a4], params_defs: []
// [Asm] # live_in: [a5, a0, zero, a4, a2, a1, a3], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .lp108l4_2_5:
// [Asm]   # save_ctx1  # live: [a5, zero, a0, a4, a2, a1, a3]
// [Asm]   mv v2, a0  # live: [a5, zero, a4, a2, a1, a3, v2]
// [Asm]   mv v3, a1  # live: [v2, a5, zero, a4, a2, a3, v3]
// [Asm]   mv v4, a2  # live: [v2, a5, zero, a4, v4, a3, v3]
// [Asm]   mv v5, a3  # live: [v2, v5, a5, zero, a4, v4, v3]
// [Asm]   mv v6, a4  # live: [v2, v5, a5, zero, v4, v6, v3]
// [Asm]   mv v7, a5  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v8, v2  # live: [v5, zero, v8, v7, v4, v6, v3]
// [Asm]   mv v9, v3  # live: [v5, zero, v8, v7, v4, v6, v9]
// [Asm]   mv v10, v4  # live: [v5, v10, zero, v8, v7, v6, v9]
// [Asm]   mv v11, v5  # live: [v11, v10, zero, v8, v7, v6, v9]
// [Asm]   mv v12, v6  # live: [v11, v10, zero, v8, v7, v12, v9]
// [Asm]   mv v13, v7  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v14, v15, v28, v29], uses: [v11, v14, v29, zero, v8, v15, v28], upward_exposed: [v11, zero, v8], params_defs: [v11, v10, v12, v9, v13, v8]
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, zero, v13, v8, v12, v9]
// [Asm] # block parameters: [v8, v9, v10, v11, v12, v13]
// [Asm] .lp108l4_2_0:
// [Asm]   lw v14, 0(v8)  # live: [v11, v14, v10, zero, v13, v8, v12, v9]
// [Asm]   slliw v28, v14, 2  # live: [v11, v10, zero, v13, v8, v12, v28, v9]
// [Asm]   add v29, v11, v28  # live: [v11, v10, zero, v13, v29, v8, v12, v9]
// [Asm]   lw v15, 0(v29)  # live: [v11, v10, zero, v13, v8, v12, v15, v9]
// [Asm] # control
// [Asm]   bne v15, zero, .lp108l4_2_2  # live: [v11, v10, zero, v13, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, v20, a4, fa6, a6, ft10, ft5, ft7, ft4, ft9, v21, a5, fa4, a0, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, v23, fa0, t4, t2], uses: [v10, v21, zero, a0, v13, v20, a2, a1, v12, a3, v9], upward_exposed: [v10, v12, zero, v9, v13], params_defs: []
// [Asm] # live_in: [v10, v12, zero, v9, v13], live_out: [v23]
// [Asm] # block parameters: []
// [Asm] .lp108l4_2_1:
// [Asm]   addi v20, v10, 1  # live: [v20, v12, zero, v13, v9]
// [Asm]   # save_ctx2  # live: [v20, v12, zero, v13, v9]
// [Asm]   mv a0, v20  # live: [v9, v12, zero, v13, a0]
// [Asm]   mv a1, zero  # live: [v9, a1, v12, zero, v13, a0]
// [Asm]   mv a2, v9  # live: [a2, a1, v12, zero, v13, a0]
// [Asm]   mv a3, v12  # live: [a2, a1, a3, zero, v13, a0]
// [Asm]   call skip21l2_1  # live: [zero, v13, a0]
// [Asm]   mv v21, a0  # live: [v21, zero, v13]
// [Asm]   # restore_ctx2  # live: [v21, zero, v13]
// [Asm]   sw v21, 0(v13)  # live: [zero]
// [Asm] # control
// [Asm]   mv v23, zero  # live: [v23]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v23], upward_exposed: [v23], params_defs: [v23]
// [Asm] # live_in: [v23], live_out: []
// [Asm] # block parameters: [v23]
// [Asm] .lp108l4_2_3:
// [Asm] # control
// [Asm]   mv a0, v23  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v11, v10, a5, v13, a0, a2, v17, a1, v12, a3, v9, v18, a4, v8], upward_exposed: [v11, v10, v13, v8, v12, v9], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .lp108l4_2_2:
// [Asm]   addi v17, v10, 1  # live: [v11, v10, v13, zero, v8, v17, v12, v9]
// [Asm]   # save_ctx2  # live: [v11, v10, v13, zero, v8, v17, v12, v9]
// [Asm]   mv a0, v17  # live: [v11, v10, v13, zero, a0, v8, v12, v9]
// [Asm]   mv a1, v8  # live: [v11, v10, v13, zero, a0, v8, a1, v12, v9]
// [Asm]   mv a2, v9  # live: [v11, v10, v13, zero, a0, v8, a2, a1, v12, v9]
// [Asm]   mv a3, v11  # live: [v11, v10, v13, zero, a0, v8, a2, a1, a3, v12, v9]
// [Asm]   mv a4, v12  # live: [v11, v10, v13, zero, a0, a4, v8, a2, a1, a3, v12, v9]
// [Asm]   mv a5, v13  # live: [v11, v10, a5, v13, zero, a0, a4, v8, a2, a1, a3, v12, v9]
// [Asm]   call aux40l3_3  # live: [v11, v10, v13, zero, a0, v8, v12, v9]
// [Asm]   mv v18, a0  # live: [v11, v10, v18, v13, zero, v8, v12, v9]
// [Asm]   # restore_ctx2  # live: [v11, v10, v18, v13, zero, v8, v12, v9]
// [Asm]   sw v18, 0(v13)  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # control
// [Asm]   mv v8, v8  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   j .lp108l4_2_0  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # leaf false
// [Asm] bf5l1_4:
// [Asm] # block info: defs: [v2, t1, v16, v13, ft0, ft1, a1, s11, fa1, fa2, ft6, v20, a4, fa6, v8, a6, ft5, ft10, v4, v6, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v15, v3], uses: [v3, v16, v5, a5, a0, v13, a2, a1, s11, a3, v18, zero, v20, a4, v8, v4, v6, v15, v2], upward_exposed: [a1, s11, a0, zero], params_defs: []
// [Asm] # live_in: [a1, s11, a0, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .bf5l1_4_0:
// [Asm]   # save_ctx1  # live: [zero, a0, a1, s11]
// [Asm]   mv v2, a0  # live: [zero, a1, s11, v2]
// [Asm]   mv v3, a1  # live: [v2, zero, s11, v3]
// [Asm]   addi v20, s11, -4  # live: [v2, zero, v20, v3]
// [Asm]   andi v4, v20, -8  # live: [v2, zero, v4, v3]
// [Asm]   mv s11, v4  # live: [v2, zero, v4, s11, v3]
// [Asm]   sw zero, 0(v4)  # live: [v2, zero, v4, s11, v3]
// [Asm]   li v18, 1024  # live: [v2, v18, zero, v4, s11, v3]
// [Asm]   mul v8, v18, v18  # live: [v2, zero, v8, v4, s11, v3]
// [Asm]   slliw v15, v8, 2  # live: [v2, zero, v8, v4, s11, v15, v3]
// [Asm]   sub v16, s11, v15  # live: [v2, v16, zero, v8, v4, v3]
// [Asm]   andi v5, v16, -8  # live: [v2, v5, zero, v8, v4, v3]
// [Asm]   mv s11, v5  # live: [v2, v5, zero, v8, v4, s11, v3]
// [Asm]   mv a1, v8  # live: [v2, v5, zero, v4, a1, s11, v3]
// [Asm]   mv a0, v5  # live: [v2, v5, zero, a0, v4, a1, s11, v3]
// [Asm]   mv a2, zero  # live: [v2, v5, zero, a0, v4, a2, a1, s11, v3]
// [Asm]   call memseti32  # live: [v2, v5, zero, v4, s11, v3]
// [Asm]   addi v13, s11, -4  # live: [v2, v5, zero, v13, v4, v3]
// [Asm]   andi v6, v13, -8  # live: [v2, v5, zero, v4, v6, v3]
// [Asm]   mv s11, v6  # live: [v2, v5, zero, v4, v6, v3]
// [Asm]   sw zero, 0(v6)  # live: [v2, v5, zero, v4, v6, v3]
// [Asm]   # save_ctx2  # live: [v2, v5, zero, v4, v6, v3]
// [Asm]   mv a0, zero  # live: [v2, v5, zero, a0, v4, v6, v3]
// [Asm]   mv a1, v4  # live: [v2, v5, zero, a0, a1, v6, v3]
// [Asm]   mv a2, v2  # live: [v5, zero, a0, a2, a1, v6, v3]
// [Asm]   mv a3, v5  # live: [zero, a0, a2, a1, v6, a3, v3]
// [Asm]   mv a4, v3  # live: [zero, a0, a4, a2, a1, v6, a3]
// [Asm]   mv a5, v6  # live: [a5, zero, a0, a4, a2, a1, a3]
// [Asm]   call aux40l3_3  # live: [zero, a0]
// [Asm]   mv v11, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] aux40l3_3:
// [Asm] # block info: defs: [v2, v11, v5, v10, v13, v7, v8, v4, v6, v12, v9, v3], uses: [v3, v5, a5, a0, a4, v7, a2, v4, a1, v6, a3, v2], upward_exposed: [a2, a1, a3, a5, a0, a4], params_defs: []
// [Asm] # live_in: [a5, a0, a4, a2, a1, a3], live_out: [v11, v10, v13, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_29:
// [Asm]   # save_ctx1  # live: [a2, a1, a3, a5, a0, a4]
// [Asm]   mv v2, a0  # live: [a2, a1, a3, a5, a4, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, a3, a5, a4, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, a3, a5, a4, v3]
// [Asm]   mv v5, a3  # live: [v2, v4, v5, a5, a4, v3]
// [Asm]   mv v6, a4  # live: [v2, v4, v6, v5, a5, v3]
// [Asm]   mv v7, a5  # live: [v3, v2, v4, v6, v5, v7]
// [Asm] # control
// [Asm]   mv v8, v2  # live: [v7, v3, v4, v5, v6, v8]
// [Asm]   mv v9, v3  # live: [v7, v4, v6, v5, v9, v8]
// [Asm]   mv v10, v4  # live: [v7, v6, v5, v10, v9, v8]
// [Asm]   mv v11, v5  # live: [v7, v11, v6, v10, v9, v8]
// [Asm]   mv v12, v6  # live: [v7, v11, v10, v12, v9, v8]
// [Asm]   mv v13, v7  # live: [v11, v10, v12, v13, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v10, v8], upward_exposed: [v10, v8], params_defs: [v11, v10, v12, v9, v13, v8]
// [Asm] # live_in: [v11, v10, v13, v8, v12, v9], live_out: [v11, v10, v13, v8, v12, v9]
// [Asm] # block parameters: [v8, v9, v10, v11, v12, v13]
// [Asm] .aux40l3_3_0:
// [Asm] # control
// [Asm]   bge v8, v10, .aux40l3_3_1  # live: [v11, v10, v12, v13, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [v112, v111, v15, v110], uses: [v112, v111, v12, v15, v110, v8], upward_exposed: [v12, v8], params_defs: []
// [Asm] # live_in: [v11, v10, v13, v8, v12, v9], live_out: [v11, v10, v13, v8, v12, v15, v9]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_2:
// [Asm]   slliw v111, v8, 2  # live: [v11, v10, v13, v8, v111, v12, v9]
// [Asm]   add v112, v12, v111  # live: [v11, v112, v10, v13, v8, v12, v9]
// [Asm]   lw v15, 0(v112)  # live: [v11, v10, v13, v8, v12, v15, v9]
// [Asm] # control
// [Asm]   li v110, 62  # live: [v11, v10, v13, v110, v8, v12, v15, v9]
// [Asm]   beq v15, v110, .aux40l3_3_3  # live: [v11, v10, v13, v8, v12, v15, v9]
// [Asm] 
// [Asm] # block info: defs: [v109], uses: [v109, v15], upward_exposed: [v15], params_defs: []
// [Asm] # live_in: [v11, v10, v13, v8, v15, v12, v9], live_out: [v11, v10, v13, v8, v12, v15, v9]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_4:
// [Asm] # control
// [Asm]   li v109, 60  # live: [v11, v109, v10, v13, v8, v12, v15, v9]
// [Asm]   beq v15, v109, .aux40l3_3_5  # live: [v11, v10, v13, v8, v12, v15, v9]
// [Asm] 
// [Asm] # block info: defs: [v108], uses: [v108, v15], upward_exposed: [v15], params_defs: []
// [Asm] # live_in: [v11, v10, v13, v8, v15, v12, v9], live_out: [v11, v10, v13, v8, v12, v15, v9]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_6:
// [Asm] # control
// [Asm]   li v108, 43  # live: [v11, v10, v13, v8, v108, v12, v15, v9]
// [Asm]   beq v15, v108, .aux40l3_3_7  # live: [v11, v10, v13, v8, v12, v15, v9]
// [Asm] 
// [Asm] # block info: defs: [v107], uses: [v107, v15], upward_exposed: [v15], params_defs: []
// [Asm] # live_in: [v11, v10, v13, v8, v15, v12, v9], live_out: [v11, v10, v13, v8, v12, v15, v9]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_8:
// [Asm] # control
// [Asm]   li v107, 45  # live: [v11, v10, v13, v8, v107, v12, v15, v9]
// [Asm]   beq v15, v107, .aux40l3_3_9  # live: [v11, v10, v13, v8, v12, v15, v9]
// [Asm] 
// [Asm] # block info: defs: [v106], uses: [v106, v15], upward_exposed: [v15], params_defs: []
// [Asm] # live_in: [v11, v10, v13, v8, v15, v12, v9], live_out: [v11, v10, v13, v8, v12, v15, v9]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_10:
// [Asm] # control
// [Asm]   li v106, 46  # live: [v11, v106, v10, v13, v8, v12, v15, v9]
// [Asm]   beq v15, v106, .aux40l3_3_11  # live: [v11, v10, v13, v8, v12, v15, v9]
// [Asm] 
// [Asm] # block info: defs: [v105], uses: [v105, v15], upward_exposed: [v15], params_defs: []
// [Asm] # live_in: [v11, v10, v13, v8, v15, v12, v9], live_out: [v11, v10, v13, v8, v12, v15, v9]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_12:
// [Asm] # control
// [Asm]   li v105, 44  # live: [v11, v10, v13, v8, v105, v12, v15, v9]
// [Asm]   beq v15, v105, .aux40l3_3_13  # live: [v11, v10, v13, v8, v12, v15, v9]
// [Asm] 
// [Asm] # block info: defs: [v104], uses: [v104, v15], upward_exposed: [v15], params_defs: []
// [Asm] # live_in: [v11, v10, v13, v8, v15, v12, v9], live_out: [v11, v10, v13, v8, v12, v15, v9]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_14:
// [Asm] # control
// [Asm]   li v104, 91  # live: [v11, v10, v13, v8, v104, v12, v15, v9]
// [Asm]   beq v15, v104, .aux40l3_3_15  # live: [v11, v10, v13, v8, v12, v15, v9]
// [Asm] 
// [Asm] # block info: defs: [v103], uses: [v103, v15], upward_exposed: [v15], params_defs: []
// [Asm] # live_in: [v15, v8], live_out: [v8]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_16:
// [Asm] # control
// [Asm]   li v103, 93  # live: [v103, v15, v8]
// [Asm]   bne v15, v103, .aux40l3_3_18  # live: [v8]
// [Asm] 
// [Asm] # block info: defs: [v24], uses: [v8], upward_exposed: [v8], params_defs: []
// [Asm] # live_in: [v8], live_out: [v24]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_17:
// [Asm] # control
// [Asm]   mv v24, v8  # live: [v24]
// [Asm] 
// [Asm] # block info: defs: [v25], uses: [v24], upward_exposed: [v24], params_defs: [v24]
// [Asm] # live_in: [v24], live_out: [v25]
// [Asm] # block parameters: [v24]
// [Asm] .aux40l3_3_19:
// [Asm] # control
// [Asm]   mv v25, v24  # live: [v25]
// [Asm] 
// [Asm] # block info: defs: [v26], uses: [v25], upward_exposed: [v25], params_defs: [v25]
// [Asm] # live_in: [v25], live_out: [v26]
// [Asm] # block parameters: [v25]
// [Asm] .aux40l3_3_20:
// [Asm] # control
// [Asm]   mv v26, v25  # live: [v26]
// [Asm] 
// [Asm] # block info: defs: [v27], uses: [v26], upward_exposed: [v26], params_defs: [v26]
// [Asm] # live_in: [v26], live_out: [v27]
// [Asm] # block parameters: [v26]
// [Asm] .aux40l3_3_21:
// [Asm] # control
// [Asm]   mv v27, v26  # live: [v27]
// [Asm] 
// [Asm] # block info: defs: [v28], uses: [v27], upward_exposed: [v27], params_defs: [v27]
// [Asm] # live_in: [v27], live_out: [v28]
// [Asm] # block parameters: [v27]
// [Asm] .aux40l3_3_22:
// [Asm] # control
// [Asm]   mv v28, v27  # live: [v28]
// [Asm] 
// [Asm] # block info: defs: [v29], uses: [v28], upward_exposed: [v28], params_defs: [v28]
// [Asm] # live_in: [v28], live_out: [v29]
// [Asm] # block parameters: [v28]
// [Asm] .aux40l3_3_23:
// [Asm] # control
// [Asm]   mv v29, v28  # live: [v29]
// [Asm] 
// [Asm] # block info: defs: [v30], uses: [v29], upward_exposed: [v29], params_defs: [v29]
// [Asm] # live_in: [v29], live_out: [v30]
// [Asm] # block parameters: [v29]
// [Asm] .aux40l3_3_24:
// [Asm] # control
// [Asm]   mv v30, v29  # live: [v30]
// [Asm] 
// [Asm] # block info: defs: [v31], uses: [v30], upward_exposed: [v30], params_defs: [v30]
// [Asm] # live_in: [v30], live_out: [v31]
// [Asm] # block parameters: [v30]
// [Asm] .aux40l3_3_25:
// [Asm] # control
// [Asm]   mv v31, v30  # live: [v31]
// [Asm] 
// [Asm] # block info: defs: [v64], uses: [v31], upward_exposed: [v31], params_defs: [v31]
// [Asm] # live_in: [v31], live_out: [v64]
// [Asm] # block parameters: [v31]
// [Asm] .aux40l3_3_26:
// [Asm] # control
// [Asm]   mv v64, v31  # live: [v64]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v64, a0], upward_exposed: [v64], params_defs: [v64]
// [Asm] # live_in: [v64], live_out: []
// [Asm] # block parameters: [v64]
// [Asm] .aux40l3_3_27:
// [Asm] # control
// [Asm]   mv a0, v64  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v64], uses: [v8], upward_exposed: [v8], params_defs: []
// [Asm] # live_in: [v8], live_out: [v64]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_1:
// [Asm] # control
// [Asm]   mv v64, v8  # live: [v64]
// [Asm]   j .aux40l3_3_27  # live: [v64]
// [Asm] 
// [Asm] # block info: defs: [v63, v61, v60, v8], uses: [v11, v63, v10, v13, v8, v61, v12, v9, v60], upward_exposed: [v11, v10, v12, v9, v13, v8], params_defs: []
// [Asm] # live_in: [v11, v10, v13, v8, v12, v9], live_out: [v11, v10, v13, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_3:
// [Asm]   lw v60, 0(v9)  # live: [v11, v10, v13, v8, v12, v9, v60]
// [Asm]   addi v61, v60, 1  # live: [v11, v10, v13, v8, v12, v61, v9]
// [Asm]   sw v61, 0(v9)  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   addi v63, v8, 1  # live: [v11, v63, v10, v13, v12, v9]
// [Asm] # control
// [Asm]   mv v8, v63  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v12, v13, v9, v8]
// [Asm]   j .aux40l3_3_0  # live: [v11, v10, v12, v13, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [v59, v56, v57, v8], uses: [v11, v56, v10, v13, v8, v59, v57, v12, v9], upward_exposed: [v11, v10, v12, v9, v13, v8], params_defs: []
// [Asm] # live_in: [v11, v10, v13, v8, v12, v9], live_out: [v11, v10, v13, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_5:
// [Asm]   lw v56, 0(v9)  # live: [v11, v10, v56, v13, v8, v12, v9]
// [Asm]   addi v57, v56, -1  # live: [v11, v10, v13, v8, v12, v57, v9]
// [Asm]   sw v57, 0(v9)  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   addi v59, v8, 1  # live: [v11, v10, v13, v59, v12, v9]
// [Asm] # control
// [Asm]   mv v8, v59  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v12, v13, v9, v8]
// [Asm]   j .aux40l3_3_0  # live: [v11, v10, v12, v13, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [v51, v73, v72, v75, v53, v50, v8, v52, v55, v76], uses: [v11, v53, v10, v13, v52, v12, v9, v51, v73, v72, v75, v50, v8, v55, v76], upward_exposed: [v11, v10, v12, v9, v13, v8], params_defs: []
// [Asm] # live_in: [v11, v10, v13, v8, v12, v9], live_out: [v11, v10, v13, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_7:
// [Asm]   lw v50, 0(v9)  # live: [v11, v10, v13, v50, v8, v12, v9]
// [Asm]   lw v51, 0(v9)  # live: [v11, v10, v13, v50, v8, v12, v9, v51]
// [Asm]   slliw v75, v51, 2  # live: [v11, v10, v75, v13, v50, v8, v12, v9]
// [Asm]   add v76, v11, v75  # live: [v11, v10, v13, v50, v8, v12, v9, v76]
// [Asm]   lw v52, 0(v76)  # live: [v11, v10, v13, v50, v8, v12, v52, v9]
// [Asm]   addi v53, v52, 1  # live: [v11, v10, v53, v13, v50, v8, v12, v9]
// [Asm]   slliw v72, v50, 2  # live: [v11, v72, v10, v53, v13, v8, v12, v9]
// [Asm]   add v73, v11, v72  # live: [v11, v10, v53, v13, v8, v12, v9, v73]
// [Asm]   sw v53, 0(v73)  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   addi v55, v8, 1  # live: [v11, v10, v13, v12, v9, v55]
// [Asm] # control
// [Asm]   mv v8, v55  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v12, v13, v9, v8]
// [Asm]   j .aux40l3_3_0  # live: [v11, v10, v12, v13, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [v46, v82, v49, v85, v45, v8, v84, v81, v47, v44], uses: [v11, v46, v49, v10, v13, v12, v44, v9, v82, v85, v45, v8, v84, v47, v81], upward_exposed: [v11, v10, v12, v9, v13, v8], params_defs: []
// [Asm] # live_in: [v11, v10, v13, v8, v12, v9], live_out: [v11, v10, v13, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_9:
// [Asm]   lw v44, 0(v9)  # live: [v11, v10, v13, v8, v12, v44, v9]
// [Asm]   lw v45, 0(v9)  # live: [v11, v10, v13, v8, v45, v12, v44, v9]
// [Asm]   slliw v84, v45, 2  # live: [v11, v10, v13, v8, v84, v12, v44, v9]
// [Asm]   add v85, v11, v84  # live: [v11, v10, v13, v8, v85, v12, v44, v9]
// [Asm]   lw v46, 0(v85)  # live: [v11, v46, v10, v13, v8, v12, v44, v9]
// [Asm]   addi v47, v46, -1  # live: [v11, v10, v13, v8, v47, v12, v44, v9]
// [Asm]   slliw v81, v44, 2  # live: [v11, v10, v13, v8, v47, v81, v12, v9]
// [Asm]   add v82, v11, v81  # live: [v11, v82, v10, v13, v8, v47, v12, v9]
// [Asm]   sw v47, 0(v82)  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   addi v49, v8, 1  # live: [v11, v10, v49, v13, v12, v9]
// [Asm] # control
// [Asm]   mv v8, v49  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v12, v13, v9, v8]
// [Asm]   j .aux40l3_3_0  # live: [v11, v10, v12, v13, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [t1, v91, v42, ft0, ft1, v41, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, v92, ft2, a2, v43, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v40], uses: [v11, v91, v10, a0, v13, v8, v92, v41, v43, v12, v9, v40], upward_exposed: [v11, v10, v12, v9, v13, v8], params_defs: []
// [Asm] # live_in: [v11, v10, v13, v8, v12, v9], live_out: [v11, v10, v13, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_11:
// [Asm]   lw v40, 0(v9)  # live: [v11, v10, v13, v8, v12, v9, v40]
// [Asm]   slliw v91, v40, 2  # live: [v11, v91, v10, v13, v8, v12, v9]
// [Asm]   add v92, v11, v91  # live: [v11, v10, v13, v8, v92, v12, v9]
// [Asm]   lw v41, 0(v92)  # live: [v11, v10, v13, v8, v41, v12, v9]
// [Asm]   # save_ctx2  # live: [v11, v10, v13, v8, v41, v12, v9]
// [Asm]   mv a0, v41  # live: [v11, v10, v13, a0, v8, v12, v9]
// [Asm]   call minimbt_print_char  # live: [v11, v10, v13, a0, v8, v12, v9]
// [Asm]   mv v42, a0  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   # restore_ctx2  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   addi v43, v8, 1  # live: [v11, v10, v13, v43, v12, v9]
// [Asm] # control
// [Asm]   mv v8, v43  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v12, v13, v9, v8]
// [Asm]   j .aux40l3_3_0  # live: [v11, v10, v12, v13, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, v97, fa6, a4, v8, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, v36, ft2, a2, v37, a3, v39, ft8, t3, a7, fa7, t0, fa5, fa3, v96, ft3, fa0, t4, t2], uses: [v11, v10, v96, a0, v97, v13, v8, v36, v37, v12, v9, v39], upward_exposed: [v11, v10, v12, v9, v13, v8], params_defs: []
// [Asm] # live_in: [v11, v10, v13, v8, v12, v9], live_out: [v11, v10, v13, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_13:
// [Asm]   lw v36, 0(v9)  # live: [v11, v10, v13, v8, v36, v12, v9]
// [Asm]   # save_ctx2  # live: [v11, v10, v13, v8, v36, v12, v9]
// [Asm]   call read_ch_until_newline_or_eof1l0_0  # live: [v11, v10, v13, a0, v8, v36, v12, v9]
// [Asm]   mv v37, a0  # live: [v11, v10, v13, v8, v36, v37, v12, v9]
// [Asm]   # restore_ctx2  # live: [v11, v10, v13, v8, v36, v37, v12, v9]
// [Asm]   slliw v96, v36, 2  # live: [v11, v10, v96, v13, v8, v37, v12, v9]
// [Asm]   add v97, v11, v96  # live: [v11, v10, v13, v97, v8, v37, v12, v9]
// [Asm]   sw v37, 0(v97)  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   addi v39, v8, 1  # live: [v11, v10, v13, v12, v9, v39]
// [Asm] # control
// [Asm]   mv v8, v39  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v12, v13, v9, v8]
// [Asm]   j .aux40l3_3_0  # live: [v11, v10, v12, v13, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, v33, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, v34, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, v35, t4, t2], uses: [v11, v10, a5, v13, a0, a2, a1, v12, a3, v9, a4, v8, v35, v34], upward_exposed: [v11, v10, v13, v8, v12, v9], params_defs: []
// [Asm] # live_in: [v11, v10, v13, v8, v12, v9], live_out: [v11, v10, v13, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_15:
// [Asm]   sw v8, 0(v13)  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   # save_ctx2  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   mv a0, v9  # live: [v11, v10, v13, a0, v8, v12, v9]
// [Asm]   mv a1, v10  # live: [v11, v10, v13, a0, v8, a1, v12, v9]
// [Asm]   mv a2, v8  # live: [v11, v10, v13, a0, a2, a1, v12, v9]
// [Asm]   mv a3, v11  # live: [v11, v10, v13, a0, a2, a1, v12, a3, v9]
// [Asm]   mv a4, v12  # live: [v11, v10, v13, a0, a4, a2, a1, v12, a3, v9]
// [Asm]   mv a5, v13  # live: [v11, v10, a5, v13, a0, a4, a2, a1, v12, a3, v9]
// [Asm]   call lp108l4_2  # live: [v11, v10, v13, a0, v12, v9]
// [Asm]   mv v33, a0  # live: [v11, v10, v13, v12, v9]
// [Asm]   # restore_ctx2  # live: [v11, v10, v13, v12, v9]
// [Asm]   lw v34, 0(v13)  # live: [v11, v10, v13, v12, v9, v34]
// [Asm]   addi v35, v34, 1  # live: [v11, v10, v13, v35, v12, v9]
// [Asm] # control
// [Asm]   mv v8, v35  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v12, v13, v9, v8]
// [Asm]   j .aux40l3_3_0  # live: [v11, v10, v12, v13, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [v24], uses: [v8], upward_exposed: [v8], params_defs: []
// [Asm] # live_in: [v8], live_out: [v24]
// [Asm] # block parameters: []
// [Asm] .aux40l3_3_18:
// [Asm] # control
// [Asm]   mv v24, v8  # live: [v24]
// [Asm]   j .aux40l3_3_19  # live: [v24]
// [Asm] 
// [Asm] # leaf false
// [Asm] read_ch_until_newline_or_eof1l0_0:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v10, a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v2]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof1l0_0_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call minimbt_read_char  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   li v10, 10  # live: [v10, v2]
// [Asm]   beq v2, v10, .read_ch_until_newline_or_eof1l0_0_1  # live: [v2]
// [Asm] 
// [Asm] # block info: defs: [v9], uses: [v9, v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v2]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof1l0_0_2:
// [Asm] # control
// [Asm]   li v9, 13  # live: [v9, v2]
// [Asm]   bne v2, v9, .read_ch_until_newline_or_eof1l0_0_4  # live: [v2]
// [Asm] 
// [Asm] # block info: defs: [v5, v8], uses: [v8], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof1l0_0_3:
// [Asm] # control
// [Asm]   li v8, -1  # live: [v8]
// [Asm]   mv v5, v8  # live: [v5]
// [Asm] 
// [Asm] # block info: defs: [v6], uses: [v5], upward_exposed: [v5], params_defs: [v5]
// [Asm] # live_in: [v5], live_out: [v6]
// [Asm] # block parameters: [v5]
// [Asm] .read_ch_until_newline_or_eof1l0_0_5:
// [Asm] # control
// [Asm]   mv v6, v5  # live: [v6]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v6, a0], upward_exposed: [v6], params_defs: [v6]
// [Asm] # live_in: [v6], live_out: []
// [Asm] # block parameters: [v6]
// [Asm] .read_ch_until_newline_or_eof1l0_0_6:
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v6, v7], uses: [v7], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v6]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof1l0_0_1:
// [Asm] # control
// [Asm]   li v7, -1  # live: [v7]
// [Asm]   mv v6, v7  # live: [v6]
// [Asm]   j .read_ch_until_newline_or_eof1l0_0_6  # live: [v6]
// [Asm] 
// [Asm] # block info: defs: [v5], uses: [v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof1l0_0_4:
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v5]
// [Asm]   j .read_ch_until_newline_or_eof1l0_0_5  # live: [v5]
// [Asm] 
// [Asm] # leaf false
// [Asm] read_prog140l3_5:
// [Asm] # block info: defs: [v3, v4, v5, v2], uses: [v3, a1, a0, v2], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, a0], live_out: [v4, v5]
// [Asm] # block parameters: []
// [Asm] .read_prog140l3_5_5:
// [Asm]   # save_ctx1  # live: [a1, a0]
// [Asm]   mv v2, a0  # live: [a1, v2]
// [Asm]   mv v3, a1  # live: [v2, v3]
// [Asm] # control
// [Asm]   mv v4, v2  # live: [v4, v3]
// [Asm]   mv v5, v3  # live: [v4, v5]
// [Asm] 
// [Asm] # block info: defs: [t1, v16, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v6, v16, a0], upward_exposed: [], params_defs: [v4, v5]
// [Asm] # live_in: [v4, v5], live_out: [v4, v5, v6]
// [Asm] # block parameters: [v4, v5]
// [Asm] .read_prog140l3_5_0:
// [Asm]   # save_ctx2  # live: [v4, v5]
// [Asm]   call read_ch_until_newline_or_eof1l0_0  # live: [v4, v5, a0]
// [Asm]   mv v6, a0  # live: [v4, v5, v6]
// [Asm]   # restore_ctx2  # live: [v4, v5, v6]
// [Asm] # control
// [Asm]   li v16, -1  # live: [v4, v5, v6, v16]
// [Asm]   beq v6, v16, .read_prog140l3_5_1  # live: [v4, v5, v6]
// [Asm] 
// [Asm] # block info: defs: [v4, v14, v15, v9], uses: [v5, v14, v4, v6, v15, v9], upward_exposed: [v4, v5, v6], params_defs: []
// [Asm] # live_in: [v4, v5, v6], live_out: [v4, v5]
// [Asm] # block parameters: []
// [Asm] .read_prog140l3_5_2:
// [Asm]   slliw v14, v4, 2  # live: [v4, v5, v6, v14]
// [Asm]   add v15, v5, v14  # live: [v4, v5, v6, v15]
// [Asm]   sw v6, 0(v15)  # live: [v4, v5]
// [Asm]   addi v9, v4, 1  # live: [v5, v9]
// [Asm] # control
// [Asm]   mv v4, v9  # live: [v4, v5]
// [Asm]   mv v5, v5  # live: [v4, v5]
// [Asm]   j .read_prog140l3_5_0  # live: [v4, v5]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v4, v5, a1, v10, a0], upward_exposed: [v4, v5], params_defs: []
// [Asm] # live_in: [v4, v5], live_out: [v11]
// [Asm] # block parameters: []
// [Asm] .read_prog140l3_5_1:
// [Asm]   # save_ctx2  # live: [v4, v5]
// [Asm]   mv a0, v4  # live: [v5, a0]
// [Asm]   mv a1, v5  # live: [a1, a0]
// [Asm]   call bf5l1_4  # live: [a0]
// [Asm]   mv v10, a0  # live: [v10]
// [Asm]   # restore_ctx2  # live: [v10]
// [Asm] # control
// [Asm]   mv v11, v10  # live: [v11]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v11, a0], upward_exposed: [v11], params_defs: [v11]
// [Asm] # live_in: [v11], live_out: []
// [Asm] # block parameters: [v11]
// [Asm] .read_prog140l3_5_3:
// [Asm] # control
// [Asm]   mv a0, v11  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_14  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("read_ch_until_newline_or_eof", Int), args: [], body: Let(("c", Var({val: Some(Int)})), App(Var("read_char"), []), If(Eq(Var("c"), Int(10)), Neg(Int(1), kind=Some(Int)), If(Eq(Var("c"), Int(13)), Neg(Int(1), kind=Some(Int)), Var("c"))))}, LetRec({name: ("bf", Unit), args: [("len", Int), ("prog", Array(Int))], body: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), []))))
// [Knf] build_knf: Let(("c", Var({val: Some(Int)})), App(Var("read_char"), []), If(Eq(Var("c"), Int(10)), Neg(Int(1), kind=Some(Int)), If(Eq(Var("c"), Int(13)), Neg(Int(1), kind=Some(Int)), Var("c"))))
// [Knf] build_knf: App(Var("read_char"), [])
// [Knf] build_knf: If(Eq(Var("c"), Int(10)), Neg(Int(1), kind=Some(Int)), If(Eq(Var("c"), Int(13)), Neg(Int(1), kind=Some(Int)), Var("c")))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Neg(Int(1), kind=Some(Int))
// [Knf] build_knf: If(Eq(Var("c"), Int(13)), Neg(Int(1), kind=Some(Int)), Var("c"))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(13)
// [Knf] build_knf: Neg(Int(1), kind=Some(Int))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: LetRec({name: ("bf", Unit), args: [("len", Int), ("prog", Array(Int))], body: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), [])))
// [Knf] build_knf: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit)))))
// [Knf] build_knf: Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0))
// [Knf] build_knf: Prim(Int(1024), Int(1024), Mul, kind=Some(Int))
// [Knf] build_knf: Int(1024)
// [Knf] build_knf: Int(1024)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit)))
// [Knf] build_knf: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")]))))
// [Knf] build_knf: Get(Var("prog"), Var("pc"))
// [Knf] build_knf: Var("prog")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(91)
// [Knf] build_knf: App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("skip")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Prim(Var("level"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("level")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")]))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(93)
// [Knf] build_knf: If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))]))
// [Knf] build_knf: Var("level")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("skip")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Prim(Var("level"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("level")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])
// [Knf] build_knf: Var("skip")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("level")
// [Knf] build_knf: LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))
// [Knf] build_knf: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc"))))))))))
// [Knf] build_knf: Get(Var("prog"), Var("pc"))
// [Knf] build_knf: Var("prog")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(62)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc"))))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(60)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(43)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("cells"), Get(Var("ptr"), Int(0)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc"))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(45)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("cells"), Get(Var("ptr"), Int(0)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(46)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))])
// [Knf] build_knf: Get(Var("cells"), Get(Var("ptr"), Int(0)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc"))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(44)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), []))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("read_ch_until_newline_or_eof"), [])
// [Knf] build_knf: Var("read_ch_until_newline_or_eof")
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(91)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: Put(Var("next_pc"), Int(0), Var("pc"))
// [Knf] build_knf: Var("next_pc")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))
// [Knf] build_knf: Get(Var("cells"), Get(Var("ptr"), Int(0)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit)
// [Knf] build_knf: Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)]))
// [Knf] build_knf: Var("next_pc")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])
// [Knf] build_knf: Var("skip")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), []))
// [Knf] build_knf: Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Var("next_pc")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("lp"), [])
// [Knf] build_knf: Var("lp")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("lp"), [])
// [Knf] build_knf: Var("lp")
// [Knf] build_knf: App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("next_pc"), Int(0))
// [Knf] build_knf: Var("next_pc")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc"))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(93)
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit)
// [Knf] build_knf: App(Var("aux"), [Int(0)])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))
// [Knf] build_knf: Int(1024)
// [Knf] build_knf: Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit)))
// [Knf] build_knf: Array(Var("len"), Int(0))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))
// [Knf] build_knf: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: App(Var("read_ch_until_newline_or_eof"), [])
// [Knf] build_knf: Var("read_ch_until_newline_or_eof")
// [Knf] build_knf: If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Neg(Int(1), kind=Some(Int))
// [Knf] build_knf: App(Var("bf"), [Var("i"), Var("prog")])
// [Knf] build_knf: Var("bf")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("prog")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("prog"), Var("i"), Var("x"))
// [Knf] build_knf: Var("prog")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("read_prog")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit)
// [Knf] build_knf: App(Var("read_prog"), [Int(0)])
// [Knf] build_knf: Var("read_prog")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memseti32
// [Main]   .type memseti32, @function
// [Main] memseti32:
// [Main]   blez a1, .memseti32_b1
// [Main]   slli a1, a1, 2
// [Main]   add a1, a1, a0
// [Main] .memseti32_b0:
// [Main]   sw a2, 0(a0)
// [Main]   addi a0, a0, 4
// [Main]   bne a0, a1, .memseti32_b0
// [Main] .memseti32_b1:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl skip21l2_1
// [Main]   .type skip21l2_1, @function
// [Main] # leaf true
// [Main] skip21l2_1:
// [Main] .skip21l2_1_14:
// [Main]   mv a4, a2
// [Main]   mv a2, a3
// [Main]   mv a3, a4
// [Main] 
// [Main] .skip21l2_1_0:
// [Main]   bge a0, a3, .skip21l2_1_1
// [Main] 
// [Main] .skip21l2_1_2:
// [Main]   slliw a4, a0, 2
// [Main]   add a4, a2, a4
// [Main]   lw a4, 0(a4)
// [Main]   li a5, 91
// [Main]   beq a4, a5, .skip21l2_1_3
// [Main] 
// [Main] .skip21l2_1_4:
// [Main]   li a5, 93
// [Main]   bne a4, a5, .skip21l2_1_6
// [Main] 
// [Main] .skip21l2_1_5:
// [Main]   beq a1, zero, .skip21l2_1_7
// [Main] 
// [Main] .skip21l2_1_8:
// [Main]   addi a0, a0, 1
// [Main]   addi a1, a1, -1
// [Main]   j .skip21l2_1_0
// [Main] 
// [Main] .skip21l2_1_1:
// [Main] 
// [Main] .skip21l2_1_12:
// [Main]   ret
// [Main] 
// [Main] .skip21l2_1_3:
// [Main]   addi a0, a0, 1
// [Main]   addi a1, a1, 1
// [Main]   j .skip21l2_1_0
// [Main] 
// [Main] .skip21l2_1_6:
// [Main]   addi a0, a0, 1
// [Main]   j .skip21l2_1_0
// [Main] 
// [Main] .skip21l2_1_7:
// [Main] 
// [Main] .skip21l2_1_9:
// [Main] 
// [Main] .skip21l2_1_10:
// [Main] 
// [Main] .skip21l2_1_11:
// [Main]   j .skip21l2_1_12
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main136l2_6
// [Main]   .type main136l2_6, @function
// [Main] # leaf false
// [Main] main136l2_6:
// [Main] .main136l2_6_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   li a0, 4096
// [Main]   sub a0, s11, a0
// [Main]   andi s0, a0, -8
// [Main]   mv s11, s0
// [Main]   li a0, 1024
// [Main]   mv a1, a0
// [Main]   mv a0, s0
// [Main]   mv a2, zero
// [Main]   call memseti32
// [Main]   mv a0, zero
// [Main]   mv a1, s0
// [Main]   call read_prog140l3_5
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_14
// [Main]   .type T$start_14, @function
// [Main] # leaf false
// [Main] T$start_14:
// [Main] .T$start_14_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main136l2_6
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl lp108l4_2
// [Main]   .type lp108l4_2, @function
// [Main] # leaf false
// [Main] lp108l4_2:
// [Main] .lp108l4_2_5:
// [Main]   addi sp, sp, -64
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   mv s3, a0
// [Main]   mv s5, a1
// [Main]   mv s1, a2
// [Main]   mv s0, a3
// [Main]   mv s4, a4
// [Main]   mv s2, a5
// [Main] 
// [Main] .lp108l4_2_0:
// [Main]   lw a0, 0(s3)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s0, a0
// [Main]   lw a0, 0(a0)
// [Main]   bne a0, zero, .lp108l4_2_2
// [Main] 
// [Main] .lp108l4_2_1:
// [Main]   addi a0, s1, 1
// [Main]   mv a1, zero
// [Main]   mv a2, s5
// [Main]   mv a3, s4
// [Main]   call skip21l2_1
// [Main]   sw a0, 0(s2)
// [Main]   mv a0, zero
// [Main] 
// [Main] .lp108l4_2_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   addi sp, sp, 64
// [Main]   ret
// [Main] 
// [Main] .lp108l4_2_2:
// [Main]   addi a0, s1, 1
// [Main]   mv a1, s3
// [Main]   mv a2, s5
// [Main]   mv a3, s0
// [Main]   mv a4, s4
// [Main]   mv a5, s2
// [Main]   call aux40l3_3
// [Main]   sw a0, 0(s2)
// [Main]   j .lp108l4_2_0
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl bf5l1_4
// [Main]   .type bf5l1_4, @function
// [Main] # leaf false
// [Main] bf5l1_4:
// [Main] .bf5l1_4_0:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   addi a0, s11, -4
// [Main]   andi s2, a0, -8
// [Main]   mv s11, s2
// [Main]   sw zero, 0(s2)
// [Main]   li a0, 1024
// [Main]   mul a0, a0, a0
// [Main]   slliw a1, a0, 2
// [Main]   sub a1, s11, a1
// [Main]   andi s3, a1, -8
// [Main]   mv s11, s3
// [Main]   mv a1, a0
// [Main]   mv a0, s3
// [Main]   mv a2, zero
// [Main]   call memseti32
// [Main]   addi a0, s11, -4
// [Main]   andi a5, a0, -8
// [Main]   mv s11, a5
// [Main]   sw zero, 0(a5)
// [Main]   mv a0, zero
// [Main]   mv a1, s2
// [Main]   mv a2, s0
// [Main]   mv a3, s3
// [Main]   mv a4, s1
// [Main]   call aux40l3_3
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux40l3_3
// [Main]   .type aux40l3_3, @function
// [Main] # leaf false
// [Main] aux40l3_3:
// [Main] .aux40l3_3_29:
// [Main]   addi sp, sp, -64
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   sd s6, 56(sp)
// [Main]   mv s3, a0
// [Main]   mv s5, a1
// [Main]   mv s1, a2
// [Main]   mv s0, a3
// [Main]   mv s4, a4
// [Main]   mv s2, a5
// [Main] 
// [Main] .aux40l3_3_0:
// [Main]   bge s3, s1, .aux40l3_3_1
// [Main] 
// [Main] .aux40l3_3_2:
// [Main]   slliw a0, s3, 2
// [Main]   add a0, s4, a0
// [Main]   lw a1, 0(a0)
// [Main]   li a0, 62
// [Main]   beq a1, a0, .aux40l3_3_3
// [Main] 
// [Main] .aux40l3_3_4:
// [Main]   li a0, 60
// [Main]   beq a1, a0, .aux40l3_3_5
// [Main] 
// [Main] .aux40l3_3_6:
// [Main]   li a0, 43
// [Main]   beq a1, a0, .aux40l3_3_7
// [Main] 
// [Main] .aux40l3_3_8:
// [Main]   li a0, 45
// [Main]   beq a1, a0, .aux40l3_3_9
// [Main] 
// [Main] .aux40l3_3_10:
// [Main]   li a0, 46
// [Main]   beq a1, a0, .aux40l3_3_11
// [Main] 
// [Main] .aux40l3_3_12:
// [Main]   li a0, 44
// [Main]   beq a1, a0, .aux40l3_3_13
// [Main] 
// [Main] .aux40l3_3_14:
// [Main]   li a0, 91
// [Main]   beq a1, a0, .aux40l3_3_15
// [Main] 
// [Main] .aux40l3_3_16:
// [Main]   li a0, 93
// [Main]   bne a1, a0, .aux40l3_3_18
// [Main] 
// [Main] .aux40l3_3_17:
// [Main]   mv a0, s3
// [Main] 
// [Main] .aux40l3_3_19:
// [Main] 
// [Main] .aux40l3_3_20:
// [Main] 
// [Main] .aux40l3_3_21:
// [Main] 
// [Main] .aux40l3_3_22:
// [Main] 
// [Main] .aux40l3_3_23:
// [Main] 
// [Main] .aux40l3_3_24:
// [Main] 
// [Main] .aux40l3_3_25:
// [Main] 
// [Main] .aux40l3_3_26:
// [Main] 
// [Main] .aux40l3_3_27:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   ld s6, 56(sp)
// [Main]   addi sp, sp, 64
// [Main]   ret
// [Main] 
// [Main] .aux40l3_3_1:
// [Main]   mv a0, s3
// [Main]   j .aux40l3_3_27
// [Main] 
// [Main] .aux40l3_3_3:
// [Main]   lw a0, 0(s5)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s5)
// [Main]   addi a0, s3, 1
// [Main]   mv s3, a0
// [Main]   j .aux40l3_3_0
// [Main] 
// [Main] .aux40l3_3_5:
// [Main]   lw a0, 0(s5)
// [Main]   addi a0, a0, -1
// [Main]   sw a0, 0(s5)
// [Main]   addi a0, s3, 1
// [Main]   mv s3, a0
// [Main]   j .aux40l3_3_0
// [Main] 
// [Main] .aux40l3_3_7:
// [Main]   lw a0, 0(s5)
// [Main]   lw a1, 0(s5)
// [Main]   slliw a1, a1, 2
// [Main]   add a1, s0, a1
// [Main]   lw a1, 0(a1)
// [Main]   addi a1, a1, 1
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s0, a0
// [Main]   sw a1, 0(a0)
// [Main]   addi a0, s3, 1
// [Main]   mv s3, a0
// [Main]   j .aux40l3_3_0
// [Main] 
// [Main] .aux40l3_3_9:
// [Main]   lw a0, 0(s5)
// [Main]   lw a1, 0(s5)
// [Main]   slliw a1, a1, 2
// [Main]   add a1, s0, a1
// [Main]   lw a1, 0(a1)
// [Main]   addi a1, a1, -1
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s0, a0
// [Main]   sw a1, 0(a0)
// [Main]   addi a0, s3, 1
// [Main]   mv s3, a0
// [Main]   j .aux40l3_3_0
// [Main] 
// [Main] .aux40l3_3_11:
// [Main]   lw a0, 0(s5)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s0, a0
// [Main]   lw a0, 0(a0)
// [Main]   call minimbt_print_char
// [Main]   addi a0, s3, 1
// [Main]   mv s3, a0
// [Main]   j .aux40l3_3_0
// [Main] 
// [Main] .aux40l3_3_13:
// [Main]   lw s6, 0(s5)
// [Main]   call read_ch_until_newline_or_eof1l0_0
// [Main]   slliw a1, s6, 2
// [Main]   add a1, s0, a1
// [Main]   sw a0, 0(a1)
// [Main]   addi a0, s3, 1
// [Main]   mv s3, a0
// [Main]   j .aux40l3_3_0
// [Main] 
// [Main] .aux40l3_3_15:
// [Main]   sw s3, 0(s2)
// [Main]   mv a0, s5
// [Main]   mv a1, s1
// [Main]   mv a2, s3
// [Main]   mv a3, s0
// [Main]   mv a4, s4
// [Main]   mv a5, s2
// [Main]   call lp108l4_2
// [Main]   lw a0, 0(s2)
// [Main]   addi a0, a0, 1
// [Main]   mv s3, a0
// [Main]   j .aux40l3_3_0
// [Main] 
// [Main] .aux40l3_3_18:
// [Main]   mv a0, s3
// [Main]   j .aux40l3_3_19
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl read_ch_until_newline_or_eof1l0_0
// [Main]   .type read_ch_until_newline_or_eof1l0_0, @function
// [Main] # leaf false
// [Main] read_ch_until_newline_or_eof1l0_0:
// [Main] .read_ch_until_newline_or_eof1l0_0_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call minimbt_read_char
// [Main]   li a1, 10
// [Main]   beq a0, a1, .read_ch_until_newline_or_eof1l0_0_1
// [Main] 
// [Main] .read_ch_until_newline_or_eof1l0_0_2:
// [Main]   li a1, 13
// [Main]   bne a0, a1, .read_ch_until_newline_or_eof1l0_0_4
// [Main] 
// [Main] .read_ch_until_newline_or_eof1l0_0_3:
// [Main]   li a0, -1
// [Main] 
// [Main] .read_ch_until_newline_or_eof1l0_0_5:
// [Main] 
// [Main] .read_ch_until_newline_or_eof1l0_0_6:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .read_ch_until_newline_or_eof1l0_0_1:
// [Main]   li a0, -1
// [Main]   j .read_ch_until_newline_or_eof1l0_0_6
// [Main] 
// [Main] .read_ch_until_newline_or_eof1l0_0_4:
// [Main]   j .read_ch_until_newline_or_eof1l0_0_5
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl read_prog140l3_5
// [Main]   .type read_prog140l3_5, @function
// [Main] # leaf false
// [Main] read_prog140l3_5:
// [Main] .read_prog140l3_5_5:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   mv s1, a0
// [Main]   mv s0, a1
// [Main] 
// [Main] .read_prog140l3_5_0:
// [Main]   call read_ch_until_newline_or_eof1l0_0
// [Main]   mv a1, a0
// [Main]   li a0, -1
// [Main]   beq a1, a0, .read_prog140l3_5_1
// [Main] 
// [Main] .read_prog140l3_5_2:
// [Main]   slliw a0, s1, 2
// [Main]   add a0, s0, a0
// [Main]   sw a1, 0(a0)
// [Main]   addi a0, s1, 1
// [Main]   mv s1, a0
// [Main]   j .read_prog140l3_5_0
// [Main] 
// [Main] .read_prog140l3_5_1:
// [Main]   mv a0, s1
// [Main]   mv a1, s0
// [Main]   call bf5l1_4
// [Main] 
// [Main] .read_prog140l3_5_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_14
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function main136l2_6
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f6, mref=m0) -> $f6.m0
// [Wasm] Lowering insn Call(ty=Unit, f=f5, args=[Int32(val=0), Mem(fref=f6, mref=m0)])
// [Wasm] Get Local name Mem(fref=f6, mref=m0) -> $f6.m0
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Local Mem(fref=f6, mref=m0) -> $f6.m0
// [Wasm] Lowered function main136l2_6 to wasm
// [Wasm] Lowering function bf5l1_4
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Int32(val=1024), Int32(val=1024)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m1, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m2, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Lowering insn Call(ty=Int32, f=f3, args=[Int32(val=0), Mem(fref=f4, mref=m0), FnParam(fref=f4, fpref=$f.0), Mem(fref=f4, mref=m1), FnParam(fref=f4, fpref=$f.1), Mem(fref=f4, mref=m2)])
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Local Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Local Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function bf5l1_4 to wasm
// [Wasm] Lowering function skip21l2_1
// [Wasm] Lowering control Return(args=[BlockParam(bref=b12, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b12, bpref=$b.0) -> $b12.$b.0
// [Wasm] Lowering control Jump(target=b12, args=[BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b12, bpref=$b.0) -> $b12.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%3), Insn(iref=%4), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Lowering control Jump(target=b12, args=[BlockParam(bref=b11, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Get Local name BlockParam(bref=b12, bpref=$b.0) -> $b12.$b.0
// [Wasm] Lowering control Jump(target=b11, args=[BlockParam(bref=b10, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Lowering control Jump(target=b10, args=[BlockParam(bref=b9, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Get Local name BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Lowering control Jump(target=b9, args=[BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%8), Insn(iref=%9), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.1), Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Branch(cond=Insn(iref=%7), t=b7, t_args=[], f=b8, f_args=[])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%11), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=93)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Branch(cond=Insn(iref=%6), t=b5, t_args=[], f=b6, f_args=[])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.3), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=91)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b13, args=[FnParam(fref=f1, fpref=$f.0), FnParam(fref=f1, fpref=$f.1), FnParam(fref=f1, fpref=$f.2), FnParam(fref=f1, fpref=$f.3)])
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.3) -> $$f.3
// [Wasm] Local BlockParam(bref=b12, bpref=$b.0) -> $b12.$b.0
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Lowered function skip21l2_1 to wasm
// [Wasm] Lowering function read_prog140l3_5
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%2)])
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), offset=BlockParam(bref=b0, bpref=$b.0), width=@32), val=Insn(iref=%0))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%4), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Lowering insn Call(ty=Int32, f=f0, args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=-1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f5, fpref=$f.0), FnParam(fref=f5, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.1) -> $$f.1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function read_prog140l3_5 to wasm
// [Wasm] Lowering function lp108l4_2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Call(ty=Int32, f=f1, args=[Insn(iref=%3), Int32(val=0), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.4)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.5), index=0, width=@32), val=Insn(iref=%4))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Call(ty=Int32, f=f3, args=[Insn(iref=%6), BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.5), index=0, width=@32), val=Insn(iref=%7))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.3), offset=Insn(iref=%0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f2, fpref=$f.0), FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.2), FnParam(fref=f2, fpref=$f.3), FnParam(fref=f2, fpref=$f.4), FnParam(fref=f2, fpref=$f.5)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.5) -> $$f.5
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function lp108l4_2 to wasm
// [Wasm] Lowering function aux40l3_3
// [Wasm] Lowering control Return(args=[BlockParam(bref=b27, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Lowering control Jump(target=b27, args=[BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%3), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32), val=Insn(iref=%4))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%6), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%9), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32), val=Insn(iref=%10))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%12), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.3), offset=Insn(iref=%16), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%17), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.3), offset=Insn(iref=%15), width=@32), val=Insn(iref=%18))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%20), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.3), offset=Insn(iref=%24), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%25), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.3), offset=Insn(iref=%23), width=@32), val=Insn(iref=%26))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%28), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.3), offset=Insn(iref=%31), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Insn(iref=%32)])
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%34), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Lowering insn Call(ty=Int32, f=f0, args=[])
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.3), offset=Insn(iref=%37), width=@32), val=Insn(iref=%38))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%40), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.5), index=0, width=@32), val=BlockParam(bref=b0, bpref=$b.0))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering insn Call(ty=Unit, f=f2, args=[BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b0, bpref=$b.5), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%45), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%46), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering control Jump(target=b27, args=[BlockParam(bref=b26, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Lowering control Jump(target=b26, args=[BlockParam(bref=b25, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.0) -> $b25.$b.0
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Lowering control Jump(target=b25, args=[BlockParam(bref=b24, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b24, bpref=$b.0) -> $b24.$b.0
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.0) -> $b25.$b.0
// [Wasm] Lowering control Jump(target=b24, args=[BlockParam(bref=b23, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.0) -> $b23.$b.0
// [Wasm] Get Local name BlockParam(bref=b24, bpref=$b.0) -> $b24.$b.0
// [Wasm] Lowering control Jump(target=b23, args=[BlockParam(bref=b22, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b22, bpref=$b.0) -> $b22.$b.0
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.0) -> $b23.$b.0
// [Wasm] Lowering control Jump(target=b22, args=[BlockParam(bref=b21, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.0) -> $b21.$b.0
// [Wasm] Get Local name BlockParam(bref=b22, bpref=$b.0) -> $b22.$b.0
// [Wasm] Lowering control Jump(target=b21, args=[BlockParam(bref=b20, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.0) -> $b21.$b.0
// [Wasm] Lowering control Jump(target=b20, args=[BlockParam(bref=b19, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.0) -> $b19.$b.0
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Lowering control Jump(target=b19, args=[BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.0) -> $b19.$b.0
// [Wasm] Lowering control Jump(target=b19, args=[BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.0) -> $b19.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=93)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Lowering control Branch(cond=Insn(iref=%48), t=b17, t_args=[], f=b18, f_args=[])
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=91)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering control Branch(cond=Insn(iref=%42), t=b15, t_args=[], f=b16, f_args=[])
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=44)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering control Branch(cond=Insn(iref=%36), t=b13, t_args=[], f=b14, f_args=[])
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=46)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering control Branch(cond=Insn(iref=%30), t=b11, t_args=[], f=b12, f_args=[])
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=45)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering control Branch(cond=Insn(iref=%22), t=b9, t_args=[], f=b10, f_args=[])
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=43)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering control Branch(cond=Insn(iref=%14), t=b7, t_args=[], f=b8, f_args=[])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=60)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering control Branch(cond=Insn(iref=%8), t=b5, t_args=[], f=b6, f_args=[])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=62)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b28, args=[FnParam(fref=f3, fpref=$f.0), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.5) -> $$f.5
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local Insn(iref=%25) -> $%25
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local BlockParam(bref=b25, bpref=$b.0) -> $b25.$b.0
// [Wasm] Local Insn(iref=%42) -> $%42
// [Wasm] Local Insn(iref=%32) -> $%32
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local BlockParam(bref=b23, bpref=$b.0) -> $b23.$b.0
// [Wasm] Local BlockParam(bref=b24, bpref=$b.0) -> $b24.$b.0
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%31) -> $%31
// [Wasm] Local BlockParam(bref=b19, bpref=$b.0) -> $b19.$b.0
// [Wasm] Local BlockParam(bref=b22, bpref=$b.0) -> $b22.$b.0
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local Insn(iref=%38) -> $%38
// [Wasm] Local Insn(iref=%46) -> $%46
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%24) -> $%24
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%37) -> $%37
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local Insn(iref=%45) -> $%45
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%48) -> $%48
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Insn(iref=%30) -> $%30
// [Wasm] Local BlockParam(bref=b21, bpref=$b.0) -> $b21.$b.0
// [Wasm] Local Insn(iref=%34) -> $%34
// [Wasm] Local BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Local Insn(iref=%40) -> $%40
// [Wasm] Local Insn(iref=%36) -> $%36
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function aux40l3_3 to wasm
// [Wasm] Lowering function T$start_14
// [Wasm] Lowering insn Call(ty=Unit, f=f6, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start_14 to wasm
// [Wasm] Lowering function read_ch_until_newline_or_eof1l0_0
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[Int32(val=-1)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[Int32(val=-1)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=13)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_char", args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=10)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function read_ch_until_newline_or_eof1l0_0 to wasm
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %5: Call(ty=Int32, f=f1, args=[Insn(iref=%3), Insn(iref=%4), FnParam(fref=f1, fpref=$f.2), FnParam(fref=f1, fpref=$f.3)])
// [CoreOpt] eliminated tail rec call %12: Call(ty=Int32, f=f1, args=[Insn(iref=%11), FnParam(fref=f1, fpref=$f.1), FnParam(fref=f1, fpref=$f.2), FnParam(fref=f1, fpref=$f.3)])
// [CoreOpt] eliminated tail rec call %10: Call(ty=Int32, f=f1, args=[Insn(iref=%8), Insn(iref=%9), FnParam(fref=f1, fpref=$f.2), FnParam(fref=f1, fpref=$f.3)])
// [CoreOpt] eliminated tail rec call %5: Call(ty=Unit, f=f5, args=[Insn(iref=%4), FnParam(fref=f5, fpref=$f.1)])
// [CoreOpt] eliminated tail rec call %9: Call(ty=Unit, f=f2, args=[FnParam(fref=f2, fpref=$f.0), FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.2), FnParam(fref=f2, fpref=$f.3), FnParam(fref=f2, fpref=$f.4), FnParam(fref=f2, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %7: Call(ty=Int32, f=f3, args=[Insn(iref=%6), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %13: Call(ty=Int32, f=f3, args=[Insn(iref=%12), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %21: Call(ty=Int32, f=f3, args=[Insn(iref=%20), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %29: Call(ty=Int32, f=f3, args=[Insn(iref=%28), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %35: Call(ty=Int32, f=f3, args=[Insn(iref=%34), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %41: Call(ty=Int32, f=f3, args=[Insn(iref=%40), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %47: Call(ty=Int32, f=f3, args=[Insn(iref=%46), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5)])
