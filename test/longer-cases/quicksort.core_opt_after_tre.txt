# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn input79l4_3 #f3 : fn(int32, array[int32], int32) -> unit
.freevars ()
.entry b4 {
  .bb #b0 (int32, array[int32], int32) {
    let %0: int32 = sub($b0.2, 1)
    let %1: bool = le($b0.0, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = ext_call minimbt_read_int()
    let _ = store int32 offset($b0.1, $b0.0 * @32) <- %2
    let %4: int32 = add($b0.0, 1)
    jump b0(%4, $b0.1, $b0.2)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .bb #b4 () {
    jump b0($f0, $f1, $f2)
  }
}
.fn partition14l1_1 #f1 : fn(array[int32], int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 offset($f0, $f2 * @32)
    let %1: int32 = sub($f1, 1)
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = %1
    let _ = alloc <m1: closure(int32) -> unit heap(5)> <- [0] = f8, [1] = $f2, [2] = $f0, [3] = %0, [4] = f1.m0
    let %4: unit = apply f1.m1($f1)
    let %5: int32 = load int32 field(f1.m0, 0 * @32)
    let %6: int32 = add(%5, 1)
    let _ = store int32 field(f1.m0, 0 * @32) <- %6
    let %8: int32 = load int32 field(f1.m0, 0 * @32)
    let %9: unit = call f0($f0, %8, $f2)
    let %10: int32 = load int32 field(f1.m0, 0 * @32)
    return %10
  }
}
.fn main75l3_5 #f5 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = ext_call minimbt_read_int()
    let _ = alloc <m0: array[int32] heap(%0)> <- [..] = 0
    let %2: unit = call f3(0, f5.m0, %0)
    let %3: int32 = sub(%0, 1)
    let %4: unit = call f2(f5.m0, 0, %3)
    let %5: unit = call f4(0, f5.m0, %0)
    return %5
  }
}
.fn swap1l0_0 #f0 : fn(array[int32], int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 offset($f0, $f1 * @32)
    let %1: int32 = load int32 offset($f0, $f2 * @32)
    let _ = store int32 offset($f0, $f1 * @32) <- %1
    let _ = store int32 offset($f0, $f2 * @32) <- %0
    return ()
  }
}
.fn quicksort59l2_2 #f2 : fn(array[int32], int32, int32) -> unit
.freevars ()
.entry b4 {
  .bb #b0 (array[int32], int32, int32) {
    let %0: int32 = sub($b0.2, 1)
    let %1: bool = le($b0.1, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = call f1($b0.0, $b0.1, $b0.2)
    let %3: int32 = sub(%2, 1)
    let %4: unit = call f2($b0.0, $b0.1, %3)
    let %5: int32 = add(%2, 1)
    jump b0($b0.0, %5, $b0.2)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .bb #b4 () {
    jump b0($f0, $f1, $f2)
  }
}
.fn output97l5_4 #f4 : fn(int32, array[int32], int32) -> unit
.freevars ()
.entry b4 {
  .bb #b0 (int32, array[int32], int32) {
    let %0: int32 = sub($b0.2, 1)
    let %1: bool = le($b0.0, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = load int32 offset($b0.1, $b0.0 * @32)
    let %3: unit = ext_call minimbt_print_int(%2)
    let %4: unit = ext_call minimbt_print_endline()
    let %5: int32 = add($b0.0, 1)
    jump b0(%5, $b0.1, $b0.2)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .bb #b4 () {
    jump b0($f0, $f1, $f2)
  }
}
.fn T$start_14 #f14 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f5()
    return %0
  }
}
.fn l26_8 #f8 : closure(int32) -> unit
.freevars (int32, array[int32], int32, array[int32])
.entry b7 {
  .bb #b0 (int32) {
    let %0: int32 = sub(^1, 1)
    let %1: bool = le($b0.0, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = load int32 offset(^2, $b0.0 * @32)
    let %3: bool = le(%2, ^3)
    br %3 b3() b4()
  }
  .bb #b2 () {
    jump b6(())
  }
  .bb #b3 () {
    let %4: int32 = load int32 field(^4, 0 * @32)
    let %5: int32 = add(%4, 1)
    let _ = store int32 field(^4, 0 * @32) <- %5
    let %7: int32 = load int32 field(^4, 0 * @32)
    let %8: unit = call f0(^2, %7, $b0.0)
    jump b5(%8)
  }
  .bb #b4 () {
    jump b5(())
  }
  .bb #b5 (unit) {
    let %9: int32 = add($b0.0, 1)
    jump b0(%9)
  }
  .bb #b6 (unit) {
    return $b6.0
  }
  .bb #b7 () {
    jump b0($f0)
  }
}
.thunk ::0 start
