# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn main.96 #f5 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = ext_call minimbt_read_int()
    let _ = alloc <m0: array[int32] heap(%0)> <- [..] = 0
    let %2: unit = call f3(0, f5.m0, %0)
    let %3: int32 = sub(%0, 1)
    let %4: unit = call f2(f5.m0, 0, %3)
    let %5: unit = call f4(0, f5.m0, %0)
    return %5
  }
}
.fn l.94 #f0 : fn(int32, array[int32], array[int32], int32, int32) -> unit
.freevars ()
.entry b8 {
  .bb #b0 (int32, array[int32], array[int32], int32, int32) {
    let %0: int32 = sub($b0.3, 1)
    let %1: bool = le($b0.0, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = load int32 offset($b0.2, $b0.0 * @32)
    let %3: bool = le(%2, $b0.4)
    br %3 b3() b4()
  }
  .bb #b2 () {
    jump b6(())
  }
  .bb #b3 () {
    let %4: int32 = load int32 field($b0.1, 0 * @32)
    let %5: int32 = add(%4, 1)
    let _ = store int32 field($b0.1, 0 * @32) <- %5
    let %7: int32 = load int32 field($b0.1, 0 * @32)
    let %8: int32 = load int32 offset($b0.2, %7 * @32)
    let %9: int32 = load int32 offset($b0.2, $b0.0 * @32)
    let _ = store int32 offset($b0.2, %7 * @32) <- %9
    let _ = store int32 offset($b0.2, $b0.0 * @32) <- %8
    let %12: int32 = add($b0.0, 1)
    jump b0(%12, $b0.1, $b0.2, $b0.3, $b0.4)
  }
  .bb #b4 () {
    let %14: int32 = add($b0.0, 1)
    jump b0(%14, $b0.1, $b0.2, $b0.3, $b0.4)
  }
  .bb #b5 (unit) {
    jump b6($b5.0)
  }
  .bb #b6 (unit) {
    return $b6.0
  }
  .loop #b7 pre #Some(b8) header #b0 {
    .block #b6
    .block #b4
    .block #b1
    .block #b5
    .block #b2
    .block #b3
  }
  .bb #b8 () {
    jump b7($f0, $f1, $f2, $f3, $f4)
  }
}
.fn output.98 #f4 : fn(int32, array[int32], int32) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (int32, array[int32], int32) {
    let %0: int32 = sub($b0.2, 1)
    let %1: bool = le($b0.0, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = load int32 offset($b0.1, $b0.0 * @32)
    let %3: unit = ext_call minimbt_print_int(%2)
    let %4: unit = ext_call minimbt_print_endline()
    let %5: int32 = add($b0.0, 1)
    jump b0(%5, $b0.1, $b0.2)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1, $f2)
  }
}
.fn quicksort.95 #f2 : fn(array[int32], int32, int32) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (array[int32], int32, int32) {
    let %0: int32 = sub($b0.2, 1)
    let %1: bool = le($b0.1, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = call f1($b0.0, $b0.1, $b0.2)
    let %3: int32 = sub(%2, 1)
    let %4: unit = call f2($b0.0, $b0.1, %3)
    let %5: int32 = add(%2, 1)
    jump b0($b0.0, %5, $b0.2)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1, $f2)
  }
}
.fn partition.93 #f1 : fn(array[int32], int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 offset($f0, $f2 * @32)
    let %1: int32 = sub($f1, 1)
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = %1
    let %3: unit = call f0($f1, f1.m0, $f0, $f2, %0)
    let %4: int32 = load int32 field(f1.m0, 0 * @32)
    let %5: int32 = add(%4, 1)
    let _ = store int32 field(f1.m0, 0 * @32) <- %5
    let %7: int32 = load int32 field(f1.m0, 0 * @32)
    let %8: int32 = load int32 offset($f0, %7 * @32)
    let %9: int32 = load int32 offset($f0, $f2 * @32)
    let _ = store int32 offset($f0, %7 * @32) <- %9
    let _ = store int32 offset($f0, $f2 * @32) <- %8
    let %12: int32 = load int32 field(f1.m0, 0 * @32)
    return %12
  }
}
.fn T$start #f12 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f5()
    return %0
  }
}
.fn input.97 #f3 : fn(int32, array[int32], int32) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (int32, array[int32], int32) {
    let %0: int32 = sub($b0.2, 1)
    let %1: bool = le($b0.0, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = ext_call minimbt_read_int()
    let _ = store int32 offset($b0.1, $b0.0 * @32) <- %2
    let %4: int32 = add($b0.0, 1)
    jump b0(%4, $b0.1, $b0.2)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1, $f2)
  }
}
.thunk ::0 start
