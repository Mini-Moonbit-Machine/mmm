let rec next.80: Bool = (i.61: Var({val: Some(Int)}), _44: Int, arr.28: Array(Int), yield.59: Var({val: Some(Fun([Int], Bool))})) {
  let _62: Int = Int(1)
  let _63: Int = Sub(_44, _62)
  if (i.61 <= _63) then {
    let _64: Int = Get arr.28[i.61]
    let _65: Bool = Apply(yield.59, [_64, ])
    let _66: Bool = Bool(true)
    if (_65 == _66) then {
      let _67: Int = Int(1)
      let _68: Int = Add(i.61, _67)
      Apply(next.80, [_68, _44, arr.28, yield.59, ])
    } else {
      Bool(false)
    }
  } else {
    Bool(false)
  }
}
let rec do.79: Bool = (yield.59: Var({val: Some(Fun([Int], Bool))}), _44: Int, arr.28: Array(Int)) {
  let _69: Int = Int(0)
  Apply(next.80, [_69, _44, arr.28, yield.59, ])
}
let rec print.81: Unit = (x.47: Var({val: Some(Int)})) {
  ExtApply(minimbt_print_int, [x.47, ])
}
let rec yield.82: Bool = (x.71: Var({val: Some(Int)})) {
  let _72: Unit = Apply(print.81, [x.71, ])
  Bool(true)
}
let rec do.83: Var({val: Some(Unit)}) = (_44: Int, arr.28: Array(Int)) {
  let rec yield.84: Bool = (x.71: Var({val: Some(Int)})) {
    Apply(yield.82, [x.71, ])
  }
  let _74: Bool = Apply(do.79, [yield.84, _44, arr.28, ])
  let _75: Bool = Bool(true)
  if (_74 == _75) then {
    let rec yield.85: Bool = (x.71: Var({val: Some(Int)})) {
      Apply(yield.82, [x.71, ])
    }
    let _76: Bool = Apply(do.79, [yield.85, _44, arr.28, ])
    let _77: Bool = Bool(true)
    if (_76 == _77) then {
      Apply(do.83, [_44, arr.28, ])
    } else {
      Unit
    }
  } else {
    Unit
  }
}
let rec main.78: Var({val: Some(Unit)}) = () {
  let _26: Int = Int(5)
  let _27: Int = Int(1)
  let arr.28: Array(Int) = ExtApply(minimbt_create_array, [_26, _27, ])
  let _29: Int = Int(0)
  let _30: Int = Int(1)
  let _31: Unit = Put arr.28[_29] = _30
  let _32: Int = Int(1)
  let _33: Int = Int(2)
  let _34: Unit = Put arr.28[_32] = _33
  let _35: Int = Int(2)
  let _36: Int = Int(3)
  let _37: Unit = Put arr.28[_35] = _36
  let _38: Int = Int(3)
  let _39: Int = Int(4)
  let _40: Unit = Put arr.28[_38] = _39
  let _41: Int = Int(4)
  let _42: Int = Int(5)
  let _43: Unit = Put arr.28[_41] = _42
  let _44: Int = Int(5)
  Apply(do.83, [_44, arr.28, ])
}
Apply(main.78, [])