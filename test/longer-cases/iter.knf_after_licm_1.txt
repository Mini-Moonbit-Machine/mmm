let rec next9.93: Bool = (i10.81: Var({val: Some(Int)}), _57: Int, arr.36: Array(Int)) {
  let _82: Int = Int(1)
  let _83: Int = Sub(_57, _82)
  if (i10.81 <= _83) then {
    let _84: Int = Get arr.36[i10.81]
    let _90: Unit = ExtApply(minimbt_print_int, [_84, ])
    let _85: Bool = Bool(true)
    let _86: Bool = Bool(true)
    if (_85 == _86) then {
      let _87: Int = Int(1)
      let _88: Int = Add(i10.81, _87)
      Apply(next9.93, [_88, _57, arr.36, ])
    } else {
      Bool(false)
    }
  } else {
    Bool(false)
  }
}
let rec do30.92: Var({val: Some(Unit)}) = (_57: Int, arr.36: Array(Int)) {
  let _89: Int = Int(0)
  let _78: Bool = Apply(next9.93, [_89, _57, arr.36, ])
  let _79: Bool = Bool(true)
  if (_78 == _79) then {
    Apply(do30.92, [_57, arr.36, ])
  } else {
    Unit
  }
}
let rec main33.91: Var({val: Some(Unit)}) = () {
  let _34: Int = Int(5)
  let _35: Int = Int(1)
  let arr.36: Array(Int) = ExtApply(minimbt_create_array, [_34, _35, ])
  let _37: Int = Int(0)
  let _38: Int = Int(1)
  let _40: Unit = Put arr.36[_37] = _38
  let _41: Int = Int(1)
  let _42: Int = Int(2)
  let _44: Unit = Put arr.36[_41] = _42
  let _45: Int = Int(2)
  let _46: Int = Int(3)
  let _48: Unit = Put arr.36[_45] = _46
  let _49: Int = Int(3)
  let _50: Int = Int(4)
  let _52: Unit = Put arr.36[_49] = _50
  let _53: Int = Int(4)
  let _54: Int = Int(5)
  let _56: Unit = Put arr.36[_53] = _54
  let _57: Int = Int(5)
  Apply(do30.92, [_57, arr.36, ])
}
Apply(main33.91, [])
