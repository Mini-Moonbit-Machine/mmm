# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn main.96 #f5 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = ext_call minimbt_read_int()
    let _ = alloc <m0: array[int32] heap(%0)> <- [..] = 0
    let %2: unit = call f3(0, f5.m0, %0)
    let %3: int32 = sub(%0, 1)
    let %4: unit = call f2(f5.m0, 0, %3)
    let %5: unit = call f4(0, f5.m0, %0)
    return %5
  }
}
.fn output.98 #f4 : fn(int32, array[int32], int32) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (int32, array[int32], int32) {
    let %0: int32 = sub($b0.2, 1)
    let %1: bool = le($b0.0, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %6: ptr = compute_address unit offset(0, $b0.0 * @32)
    let %2: int32 = load int32 raw($b0.1, %6)
    let %3: unit = ext_call minimbt_print_int(%2)
    let %4: unit = ext_call minimbt_print_endline()
    let %5: int32 = add($b0.0, 1)
    jump b0(%5, $b0.1, $b0.2)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1, $f2)
  }
}
.fn quicksort.95 #f2 : fn(array[int32], int32, int32) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (array[int32], int32, int32) {
    let %0: int32 = sub($b0.2, 1)
    let %1: bool = le($b0.1, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    jump b7()
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1, $f2)
  }
  .bb #b6 (int32) {
    let %3: int32 = sub($b6.0, 1)
    let %4: unit = call f2($b0.0, $b0.1, %3)
    let %5: int32 = add($b6.0, 1)
    jump b0($b0.0, %5, $b0.2)
  }
  .bb #b7 () {
    let %55: ptr = compute_address unit offset(0, $b0.2 * @32)
    let %6: int32 = load int32 raw($b0.0, %55)
    let %7: int32 = sub($b0.1, 1)
    let _ = alloc <m7: array[int32] heap(1)> <- [..] = %7
    jump b28()
  }
  .bb #b8 (unit) {
    let %10: int32 = load int32 field(f2.m7, 0 * @32)
    let %11: int32 = add(%10, 1)
    let _ = store int32 field(f2.m7, 0 * @32) <- %11
    let %13: int32 = load int32 field(f2.m7, 0 * @32)
    let %53: ptr = compute_address unit offset(0, %13 * @32)
    let %14: int32 = load int32 raw($b0.0, %53)
    let %52: ptr = compute_address unit offset(0, $b0.2 * @32)
    let %15: int32 = load int32 raw($b0.0, %52)
    let _ = store int32 raw($b0.0, %53) <- %15
    let _ = store int32 raw($b0.0, %52) <- %14
    let %18: int32 = load int32 field(f2.m7, 0 * @32)
    jump b6(%18)
  }
  .bb #b20 (int32, array[int32], array[int32], int32, int32) {
    let %19: int32 = sub($b20.3, 1)
    let %20: bool = le($b20.0, %19)
    br %20 b21() b22()
  }
  .bb #b21 () {
    let %54: ptr = compute_address unit offset(0, $b20.0 * @32)
    let %21: int32 = load int32 raw($b20.2, %54)
    let %22: bool = le(%21, $b20.4)
    br %22 b23() b24()
  }
  .bb #b22 () {
    jump b26(())
  }
  .bb #b23 () {
    let %23: int32 = load int32 field($b20.1, 0 * @32)
    let %24: int32 = add(%23, 1)
    let _ = store int32 field($b20.1, 0 * @32) <- %24
    let %26: int32 = load int32 field($b20.1, 0 * @32)
    let %43: ptr = compute_address unit offset(0, %26 * @32)
    let %27: int32 = load int32 raw($b20.2, %43)
    let %42: ptr = compute_address unit offset(0, $b20.0 * @32)
    let %28: int32 = load int32 raw($b20.2, %42)
    let _ = store int32 raw($b20.2, %43) <- %28
    let _ = store int32 raw($b20.2, %42) <- %27
    let %31: int32 = add($b20.0, 1)
    jump b20(%31, $b20.1, $b20.2, $b20.3, $b20.4)
  }
  .bb #b24 () {
    let %33: int32 = add($b20.0, 1)
    jump b20(%33, $b20.1, $b20.2, $b20.3, $b20.4)
  }
  .bb #b25 (unit) {
    jump b26($b25.0)
  }
  .bb #b26 (unit) {
    jump b8($b26.0)
  }
  .loop #b27 pre #Some(b28) header #b20 {
    .block #b26
    .block #b24
    .block #b21
    .block #b25
    .block #b22
    .block #b23
  }
  .bb #b28 () {
    jump b27($b0.1, f2.m7, $b0.0, $b0.2, %6)
  }
}
.fn T$start #f12 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f5()
    return %0
  }
}
.fn input.97 #f3 : fn(int32, array[int32], int32) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (int32, array[int32], int32) {
    let %0: int32 = sub($b0.2, 1)
    let %1: bool = le($b0.0, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = ext_call minimbt_read_int()
    let %5: ptr = compute_address unit offset(0, $b0.0 * @32)
    let _ = store int32 raw($b0.1, %5) <- %2
    let %4: int32 = add($b0.0, 1)
    jump b0(%4, $b0.1, $b0.2)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1, $f2)
  }
}
.thunk ::0 start
