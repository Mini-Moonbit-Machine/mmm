# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn init_arr9_4 #f4 : closure(int32) -> unit
.freevars (int32, array[int32])
.entry b0 {
  .bb #b0 () {
    let %0: int32 = sub(^1, 1)
    let %1: bool = le($f0, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let _ = store int32 offset(^2, $f0 * @32) <- $f0
    let %3: int32 = add($f0, 1)
    let %4: unit = apply self(%3)
    jump b3(%4)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn fannkuch1l0_1 #f1 : fn(int32) -> (int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: array[int32] = call f0($f0)
    let _ = alloc <m0: array[int32] heap($f0)> <- [..] = 0
    let _ = alloc <m1: array[int32] heap($f0)> <- [..] = 0
    let _ = alloc <m2: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m3: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m4: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m5: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m6: array[int32] heap(1)> <- [..] = $f0
    let _ = alloc <m7: closure(array[int32]) -> unit heap(9)> <- [0] = f7, [1] = $f0, [2] = %0, [3] = f1.m0, [4] = f1.m1, [5] = f1.m2, [6] = f1.m3, [7] = f1.m4, [8] = f1.m5
    let %9: unit = apply f1.m7(f1.m6)
    let %10: int32 = load int32 field(f1.m3, 0 * @32)
    let %11: int32 = load int32 field(f1.m4, 0 * @32)
    let _ = alloc <m8: (int32, int32) heap(2)> <- [0] = %10, [1] = %11
    return f1.m8
  }
}
.fn flip_loop99_15 #f15 : closure(int32) -> unit
.freevars (array[int32], array[int32], array[int32])
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 field(^1, 0 * @32)
    let %1: int32 = div(%0, 2)
    let %2: bool = le($f0, %1)
    br %2 b1() b2()
  }
  .bb #b1 () {
    let %3: int32 = load int32 offset(^2, $f0 * @32)
    let _ = store int32 field(^3, 0 * @32) <- %3
    let %5: int32 = load int32 field(^1, 0 * @32)
    let %6: int32 = sub(%5, $f0)
    let %7: int32 = load int32 offset(^2, %6 * @32)
    let _ = store int32 offset(^2, $f0 * @32) <- %7
    let %9: int32 = load int32 field(^1, 0 * @32)
    let %10: int32 = sub(%9, $f0)
    let %11: int32 = load int32 field(^3, 0 * @32)
    let _ = store int32 offset(^2, %10 * @32) <- %11
    let %13: int32 = add($f0, 1)
    let %14: unit = apply self(%13)
    jump b3(%14)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn go_loop179_17 #f17 : closure() -> unit
.freevars (array[bool], array[int32], int32, array[int32], array[int32], array[int32])
.entry b0 {
  .bb #b0 () {
    let %0: bool = load bool field(^1, 0 * @32)
    let %1: bool = eq(%0, true)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = load int32 field(^2, 0 * @32)
    let %3: bool = eq(%2, ^3)
    br %3 b3() b4()
  }
  .bb #b2 () {
    jump b9(())
  }
  .bb #b3 () {
    let _ = store bool field(^1, 0 * @32) <- false
    let _ = store int32 field(^2, 0 * @32) <- 0
    jump b8(())
  }
  .bb #b4 () {
    let %6: int32 = load int32 field(^4, 0 * @32)
    let _ = store int32 field(^5, 0 * @32) <- %6
    let _ = alloc <m0: closure(int32) -> unit heap(3)> <- [0] = f19, [1] = ^2, [2] = ^4
    let %9: unit = apply f17.m0(0)
    let %10: int32 = load int32 field(^2, 0 * @32)
    let %11: int32 = load int32 field(^5, 0 * @32)
    let _ = store int32 offset(^4, %10 * @32) <- %11
    let %13: int32 = load int32 field(^2, 0 * @32)
    let %14: int32 = load int32 field(^2, 0 * @32)
    let %15: int32 = load int32 offset(^6, %14 * @32)
    let %16: int32 = sub(%15, 1)
    let _ = store int32 offset(^6, %13 * @32) <- %16
    let %18: int32 = load int32 field(^2, 0 * @32)
    let %19: int32 = load int32 offset(^6, %18 * @32)
    let %20: bool = le(1, %19)
    br %20 b5() b6()
  }
  .bb #b5 () {
    let _ = store bool field(^1, 0 * @32) <- false
    jump b7(())
  }
  .bb #b6 () {
    let %22: int32 = load int32 field(^2, 0 * @32)
    let %23: int32 = add(%22, 1)
    let _ = store int32 field(^2, 0 * @32) <- %23
    jump b7(())
  }
  .bb #b7 (unit) {
    jump b8(())
  }
  .bb #b8 (unit) {
    let %25: unit = apply self()
    jump b9(%25)
  }
  .bb #b9 (unit) {
    return $b9.0
  }
}
.fn gen_perm14l1_0 #f0 : fn(int32) -> array[int32]
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap($f0)> <- [..] = 0
    let _ = alloc <m1: closure(int32) -> unit heap(3)> <- [0] = f4, [1] = $f0, [2] = f0.m0
    let %2: unit = apply f0.m1(0)
    return f0.m0
  }
}
.fn compute40_7 #f7 : closure(array[int32]) -> unit
.freevars (int32, array[int32], array[int32], array[int32], array[int32], array[int32], array[int32], array[int32])
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 field($f0, 0 * @32)
    let %1: bool = le(1, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: closure(int32) -> unit heap(4)> <- [0] = f9, [1] = ^1, [2] = ^2, [3] = ^3
    let %3: unit = apply f7.m0(0)
    let _ = alloc <m1: closure() -> unit heap(3)> <- [0] = f11, [1] = $f0, [2] = ^4
    let %5: unit = apply f7.m1()
    let _ = store int32 field(^5, 0 * @32) <- 0
    let %7: int32 = load int32 field(^3, 0 * @32)
    let _ = alloc <m2: array[int32] heap(1)> <- [..] = %7
    let _ = alloc <m3: closure(array[int32]) -> unit heap(3)> <- [0] = f13, [1] = ^3, [2] = ^5
    let %10: unit = apply f7.m3(f7.m2)
    let %11: int32 = load int32 field(^6, 0 * @32)
    let %12: int32 = load int32 field(^5, 0 * @32)
    let %13: bool = le(%11, %12)
    br %13 b3() b4()
  }
  .bb #b2 () {
    jump b6(())
  }
  .bb #b3 () {
    let %14: int32 = load int32 field(^5, 0 * @32)
    let _ = store int32 field(^6, 0 * @32) <- %14
    jump b5(())
  }
  .bb #b4 () {
    jump b5(())
  }
  .bb #b5 (unit) {
    let %16: int32 = load int32 field(^7, 0 * @32)
    let %17: int32 = load int32 field(^5, 0 * @32)
    let %18: int32 = load int32 field(^8, 0 * @32)
    let %19: int32 = load int32 field(^8, 0 * @32)
    let %20: int32 = div(%19, 2)
    let %21: int32 = mul(%20, 2)
    let %22: int32 = sub(%18, %21)
    let %23: int32 = mul(%22, 2)
    let %24: int32 = sub(1, %23)
    let %25: int32 = mul(%17, %24)
    let %26: int32 = add(%16, %25)
    let _ = store int32 field(^7, 0 * @32) <- %26
    let _ = alloc <m4: array[int32] heap(1)> <- [..] = true
    let _ = alloc <m5: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m6: closure() -> unit heap(7)> <- [0] = f17, [1] = f7.m4, [2] = $f0, [3] = ^1, [4] = ^2, [5] = f7.m5, [6] = ^4
    let %31: unit = apply f7.m6()
    let %32: int32 = load int32 field(^8, 0 * @32)
    let %33: int32 = add(%32, 1)
    let _ = store int32 field(^8, 0 * @32) <- %33
    let %35: unit = apply self($f0)
    jump b6(%35)
  }
  .bb #b6 (unit) {
    return $b6.0
  }
}
.fn move_perm1_forward197_19 #f19 : closure(int32) -> unit
.freevars (array[int32], array[int32])
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 field(^1, 0 * @32)
    let %1: int32 = sub(%0, 1)
    let %2: bool = le($f0, %1)
    br %2 b1() b2()
  }
  .bb #b1 () {
    let %3: int32 = add($f0, 1)
    let %4: int32 = load int32 offset(^2, %3 * @32)
    let _ = store int32 offset(^2, $f0 * @32) <- %4
    let %6: int32 = add($f0, 1)
    let %7: unit = apply self(%6)
    jump b3(())
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn main262l1_2 #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: (int32, int32) = call f1(9)
    let %1: int32 = load int32 field(%0, 0 * @(@32, @(@32, @32)))
    let %2: int32 = load int32 field(%0, 1 * @(@32, @(@32, @32)))
    let %3: unit = ext_call minimbt_print_int(%2)
    let %4: unit = ext_call minimbt_print_int(%1)
    return %4
  }
}
.fn copy_perm46_9 #f9 : closure(int32) -> unit
.freevars (int32, array[int32], array[int32])
.entry b0 {
  .bb #b0 () {
    let %0: int32 = sub(^1, 1)
    let %1: bool = le($f0, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = load int32 offset(^2, $f0 * @32)
    let _ = store int32 offset(^3, $f0 * @32) <- %2
    let %4: int32 = add($f0, 1)
    let %5: unit = apply self(%4)
    jump b3(%5)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn T$start_22 #f22 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f2()
    return %0
  }
}
.fn do_flip90_13 #f13 : closure(array[int32]) -> unit
.freevars (array[int32], array[int32])
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 field($f0, 0 * @32)
    let %1: bool = eq(%0, 0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    jump b3(())
  }
  .bb #b2 () {
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m1: closure(int32) -> unit heap(4)> <- [0] = f15, [1] = $f0, [2] = ^1, [3] = f13.m0
    let %4: unit = apply f13.m1(0)
    let %5: int32 = load int32 field(^1, 0 * @32)
    let _ = store int32 field($f0, 0 * @32) <- %5
    let %7: int32 = load int32 field(^2, 0 * @32)
    let %8: int32 = add(%7, 1)
    let _ = store int32 field(^2, 0 * @32) <- %8
    let %10: unit = apply self($f0)
    jump b3(%10)
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn init_count59_11 #f11 : closure() -> unit
.freevars (array[int32], array[int32])
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 field(^1, 0 * @32)
    let %1: bool = eq(%0, 1)
    br %1 b1() b2()
  }
  .bb #b1 () {
    jump b3(())
  }
  .bb #b2 () {
    let %2: int32 = load int32 field(^1, 0 * @32)
    let %3: int32 = sub(%2, 1)
    let %4: int32 = load int32 field(^1, 0 * @32)
    let _ = store int32 offset(^2, %3 * @32) <- %4
    let %6: int32 = load int32 field(^1, 0 * @32)
    let %7: int32 = sub(%6, 1)
    let _ = store int32 field(^1, 0 * @32) <- %7
    let %9: unit = apply self()
    jump b3(%9)
  }
  .bb #b3 (unit) {
    return ()
  }
}
.thunk ::0 start
