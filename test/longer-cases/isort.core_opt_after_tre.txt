# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn main85l5_8 #f8 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap(100)> <- [..] = 0
    let %1: unit = call f2(f8.m0, 100)
    let %2: unit = call f5(f8.m0, 100)
    let %3: unit = call f7(f8.m0, 100)
    return %3
  }
}
.fn aux60l5_4 #f4 : fn(int32, int32, array[int32]) -> unit
.freevars ()
.entry b4 {
  .bb #b0 (int32, int32, array[int32]) {
    let %0: bool = eq($b0.0, $b0.1)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3(())
  }
  .bb #b2 () {
    let %1: unit = call f3($b0.2, $b0.0)
    let %2: int32 = add($b0.0, 1)
    jump b0(%2, $b0.1, $b0.2)
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .bb #b4 () {
    jump b0($f0, $f1, $f2)
  }
}
.fn aux19_12 #f12 : closure(int32, int32) -> unit
.freevars (int32, array[int32])
.entry b4 {
  .bb #b0 (int32, int32) {
    let %0: bool = eq($b0.0, ^1)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3(())
  }
  .bb #b2 () {
    let %1: int32 = call f0($b0.1)
    let %2: int32 = call f1(%1, 65537)
    let _ = store int32 offset(^2, $b0.0 * @32) <- %2
    let %4: int32 = add($b0.0, 1)
    jump b0(%4, %2)
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .bb #b4 () {
    jump b0($f0, $f1)
  }
}
.fn modulo7l1_1 #f1 : fn(int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = div($f0, $f1)
    let %1: int32 = mul(%0, $f1)
    let %2: int32 = sub($f0, %1)
    return %2
  }
}
.fn T$start_20 #f20 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f8()
    return %0
  }
}
.fn isort33l3_5 #f5 : fn(array[int32], int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f4(1, $f1, $f0)
    return %0
  }
}
.fn print_array68l4_7 #f7 : fn(array[int32], int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f6(0, $f1, $f0)
    return %0
  }
}
.fn random1l0_0 #f0 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = mul($f0, 75)
    let %1: int32 = add(%0, 74)
    return %1
  }
}
.fn insert38l4_3 #f3 : fn(array[int32], int32) -> unit
.freevars ()
.entry b7 {
  .bb #b0 (array[int32], int32) {
    let %0: bool = eq($b0.1, 0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b6(())
  }
  .bb #b2 () {
    let %1: int32 = sub($b0.1, 1)
    let %2: int32 = load int32 offset($b0.0, %1 * @32)
    let %3: int32 = load int32 offset($b0.0, $b0.1 * @32)
    let %4: bool = le(%2, %3)
    br %4 b3() b4()
  }
  .bb #b3 () {
    jump b5(())
  }
  .bb #b4 () {
    let %5: int32 = load int32 offset($b0.0, $b0.1 * @32)
    let %6: int32 = sub($b0.1, 1)
    let %7: int32 = load int32 offset($b0.0, %6 * @32)
    let _ = store int32 offset($b0.0, $b0.1 * @32) <- %7
    let %9: int32 = sub($b0.1, 1)
    let _ = store int32 offset($b0.0, %9 * @32) <- %5
    let %11: int32 = sub($b0.1, 1)
    jump b0($b0.0, %11)
  }
  .bb #b5 (unit) {
    jump b6($b5.0)
  }
  .bb #b6 (unit) {
    return $b6.0
  }
  .bb #b7 () {
    jump b0($f0, $f1)
  }
}
.fn fill_buffer14l2_2 #f2 : fn(array[int32], int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure(int32, int32) -> unit heap(3)> <- [0] = f12, [1] = $f1, [2] = $f0
    let %1: unit = apply f2.m0(0, 12345)
    return %1
  }
}
.fn aux73l5_6 #f6 : fn(int32, int32, array[int32]) -> unit
.freevars ()
.entry b4 {
  .bb #b0 (int32, int32, array[int32]) {
    let %0: bool = eq($b0.0, $b0.1)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3(())
  }
  .bb #b2 () {
    let %1: int32 = load int32 offset($b0.2, $b0.0 * @32)
    let %2: unit = ext_call minimbt_print_int(%1)
    let %3: unit = ext_call minimbt_print_char(32)
    let %4: int32 = add($b0.0, 1)
    jump b0(%4, $b0.1, $b0.2)
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .bb #b4 () {
    jump b0($f0, $f1, $f2)
  }
}
.thunk ::0 start
