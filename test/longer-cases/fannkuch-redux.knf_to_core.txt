# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn move_perm1_forward197.494l6_6 #f6 : fn(int32, array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 offset($f1, 0 * @32)
    let %1: int32 = sub(%0, 1)
    let %2: bool = le($f0, %1)
    br %2 b1() b2()
  }
  .bb #b1 () {
    let %3: int32 = add($f0, 1)
    let %4: int32 = load int32 offset($f2, %3 * @32)
    let _ = store int32 offset($f2, $f0 * @32) <- %4
    let %6: int32 = add($f0, 1)
    let %7: unit = call f6(%6, $f1, $f2)
    jump b3(())
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn copy_perm46.363l2_2 #f2 : fn(int32, int32, array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = sub($f1, 1)
    let %1: bool = le($f0, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = load int32 offset($f3, $f0 * @32)
    let _ = store int32 offset($f2, $f0 * @32) <- %2
    let %4: int32 = add($f0, 1)
    let %5: unit = call f2(%4, $f1, $f2, $f3)
    jump b3(%5)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn main262l0_8 #f8 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: array[int32] = call f1(9)
    let _ = alloc <m0: array[int32] heap(9)> <- [..] = 0
    let _ = alloc <m1: array[int32] heap(9)> <- [..] = 0
    let _ = alloc <m2: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m3: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m4: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m5: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m6: array[int32] heap(1)> <- [..] = 9
    let _ = alloc <m7: closure(array[int32]) -> unit heap(9)> <- [0] = f18, [1] = 9, [2] = f8.m0, [3] = %0, [4] = f8.m1, [5] = f8.m2, [6] = f8.m3, [7] = f8.m4, [8] = f8.m5
    let %9: unit = apply f8.m7(f8.m6)
    let %10: int32 = load int32 offset(f8.m3, 0 * @32)
    let %11: int32 = load int32 offset(f8.m4, 0 * @32)
    let _ = alloc <m8: (int32, int32) heap(2)> <- [0] = %10, [1] = %11
    let %13: int32 = load int32 field(f8.m8, 0 * @(@32, @(@32, @32)))
    let %14: int32 = load int32 field(f8.m8, 1 * @(@32, @(@32, @32)))
    let %15: unit = ext_call minimbt_print_int(%14)
    let %16: unit = ext_call minimbt_print_int(%13)
    return %16
  }
}
.fn T$start_20 #f20 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f8()
    return %0
  }
}
.fn flip_loop99.407l5_4 #f4 : fn(int32, array[int32], array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 offset($f2, 0 * @32)
    let %1: int32 = div(%0, 2)
    let %2: bool = le($f0, %1)
    br %2 b1() b2()
  }
  .bb #b1 () {
    let %3: int32 = load int32 offset($f3, $f0 * @32)
    let _ = store int32 offset($f1, 0 * @32) <- %3
    let %5: int32 = load int32 offset($f2, 0 * @32)
    let %6: int32 = sub(%5, $f0)
    let %7: int32 = load int32 offset($f3, %6 * @32)
    let _ = store int32 offset($f3, $f0 * @32) <- %7
    let %9: int32 = load int32 offset($f2, 0 * @32)
    let %10: int32 = sub(%9, $f0)
    let %11: int32 = load int32 offset($f1, 0 * @32)
    let _ = store int32 offset($f3, %10 * @32) <- %11
    let %13: int32 = add($f0, 1)
    let %14: unit = call f4(%13, $f1, $f2, $f3)
    jump b3(%14)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn init_count59.373l3_3 #f3 : fn(array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 offset($f0, 0 * @32)
    let %1: bool = eq(%0, 1)
    br %1 b1() b2()
  }
  .bb #b1 () {
    jump b3(())
  }
  .bb #b2 () {
    let %2: int32 = load int32 offset($f0, 0 * @32)
    let %3: int32 = sub(%2, 1)
    let %4: int32 = load int32 offset($f0, 0 * @32)
    let _ = store int32 offset($f1, %3 * @32) <- %4
    let %6: int32 = load int32 offset($f0, 0 * @32)
    let %7: int32 = sub(%6, 1)
    let _ = store int32 offset($f0, 0 * @32) <- %7
    let %9: unit = call f3($f0, $f1)
    jump b3(%9)
  }
  .bb #b3 (unit) {
    return ()
  }
}
.fn do_flip90.399l4_5 #f5 : fn(array[int32], array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 offset($f0, 0 * @32)
    let %1: bool = eq(%0, 0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    jump b3(())
  }
  .bb #b2 () {
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = 0
    let %3: unit = call f4(0, f5.m0, $f0, $f1)
    let %4: int32 = load int32 offset($f1, 0 * @32)
    let _ = store int32 offset($f0, 0 * @32) <- %4
    let %6: int32 = load int32 offset($f2, 0 * @32)
    let %7: int32 = add(%6, 1)
    let _ = store int32 offset($f2, 0 * @32) <- %7
    let %9: unit = call f5($f0, $f1, $f2)
    jump b3(%9)
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn go_loop179.477l5_7 #f7 : fn(int32, array[int32], array[bool], array[int32], array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = load bool offset($f2, 0 * @32)
    let %1: bool = eq(%0, true)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = load int32 offset($f3, 0 * @32)
    let %3: bool = eq(%2, $f0)
    br %3 b3() b4()
  }
  .bb #b2 () {
    jump b9(())
  }
  .bb #b3 () {
    let _ = store bool offset($f2, 0 * @32) <- false
    let _ = store int32 offset($f3, 0 * @32) <- 0
    jump b8(())
  }
  .bb #b4 () {
    let %6: int32 = load int32 offset($f5, 0 * @32)
    let _ = store int32 offset($f1, 0 * @32) <- %6
    let %8: unit = call f6(0, $f3, $f5)
    let %9: int32 = load int32 offset($f3, 0 * @32)
    let %10: int32 = load int32 offset($f1, 0 * @32)
    let _ = store int32 offset($f5, %9 * @32) <- %10
    let %12: int32 = load int32 offset($f3, 0 * @32)
    let %13: int32 = load int32 offset($f3, 0 * @32)
    let %14: int32 = load int32 offset($f4, %13 * @32)
    let %15: int32 = sub(%14, 1)
    let _ = store int32 offset($f4, %12 * @32) <- %15
    let %17: int32 = load int32 offset($f3, 0 * @32)
    let %18: int32 = load int32 offset($f4, %17 * @32)
    let %19: bool = le(1, %18)
    br %19 b5() b6()
  }
  .bb #b5 () {
    let _ = store bool offset($f2, 0 * @32) <- false
    jump b7(())
  }
  .bb #b6 () {
    let %21: int32 = load int32 offset($f3, 0 * @32)
    let %22: int32 = add(%21, 1)
    let _ = store int32 offset($f3, 0 * @32) <- %22
    jump b7(())
  }
  .bb #b7 (unit) {
    jump b8(())
  }
  .bb #b8 (unit) {
    let %24: unit = call f7($f0, $f1, $f2, $f3, $f4, $f5)
    jump b9(%24)
  }
  .bb #b9 (unit) {
    return $b9.0
  }
}
.fn compute40.358_18 #f18 : closure(array[int32]) -> unit
.freevars (int32, array[int32], array[int32], array[int32], array[int32], array[int32], array[int32], array[int32])
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 offset($f0, 0 * @32)
    let %1: bool = le(1, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: unit = call f2(0, ^1, ^2, ^3)
    let %3: unit = call f3($f0, ^4)
    let _ = store int32 offset(^5, 0 * @32) <- 0
    let %5: int32 = load int32 offset(^2, 0 * @32)
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = %5
    let %7: unit = call f5(f18.m0, ^2, ^5)
    let %8: int32 = load int32 offset(^6, 0 * @32)
    let %9: int32 = load int32 offset(^5, 0 * @32)
    let %10: bool = le(%8, %9)
    br %10 b3() b4()
  }
  .bb #b2 () {
    jump b6(())
  }
  .bb #b3 () {
    let %11: int32 = load int32 offset(^5, 0 * @32)
    let _ = store int32 offset(^6, 0 * @32) <- %11
    jump b5(())
  }
  .bb #b4 () {
    jump b5(())
  }
  .bb #b5 (unit) {
    let %13: int32 = load int32 offset(^7, 0 * @32)
    let %14: int32 = load int32 offset(^5, 0 * @32)
    let %15: int32 = load int32 offset(^8, 0 * @32)
    let %16: int32 = load int32 offset(^8, 0 * @32)
    let %17: int32 = div(%16, 2)
    let %18: int32 = mul(%17, 2)
    let %19: int32 = sub(%15, %18)
    let %20: int32 = mul(%19, 2)
    let %21: int32 = sub(1, %20)
    let %22: int32 = mul(%14, %21)
    let %23: int32 = add(%13, %22)
    let _ = store int32 offset(^7, 0 * @32) <- %23
    let _ = alloc <m1: array[int32] heap(1)> <- [..] = true
    let _ = alloc <m2: array[int32] heap(1)> <- [..] = 0
    let %27: unit = call f7(^1, f18.m2, f18.m1, $f0, ^4, ^3)
    let %28: int32 = load int32 offset(^8, 0 * @32)
    let %29: int32 = add(%28, 1)
    let _ = store int32 offset(^8, 0 * @32) <- %29
    let %31: unit = apply self($f0)
    jump b6(%31)
  }
  .bb #b6 (unit) {
    return $b6.0
  }
}
.fn init_arr9.330l2_0 #f0 : fn(int32, array[int32], int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = sub($f2, 1)
    let %1: bool = le($f0, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let _ = store int32 offset($f1, $f0 * @32) <- $f0
    let %3: int32 = add($f0, 1)
    let %4: unit = call f0(%3, $f1, $f2)
    jump b3(%4)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn gen_perm14.326l1_1 #f1 : fn(int32) -> array[int32]
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap($f0)> <- [..] = 0
    let %1: unit = call f0(0, f1.m0, $f0)
    return f1.m0
  }
}
.thunk ::0 start
