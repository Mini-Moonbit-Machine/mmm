# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn read_prog.255 #f5 : fn(int32, array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f0()
    let %1: bool = eq(%0, -1)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: unit = call f4($f0, $f1)
    jump b3(%2)
  }
  .bb #b2 () {
    let _ = store int32 offset($f1, $f0 * @32) <- %0
    let %4: int32 = add($f0, 1)
    let %5: unit = call f5(%4, $f1)
    jump b3(%5)
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn bf.250 #f4 : fn(int32, array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = 0
    let %1: int32 = mul(1024, 1024)
    let _ = alloc <m1: array[int32] heap(%1)> <- [..] = 0
    let _ = alloc <m2: array[int32] heap(1)> <- [..] = 0
    let %4: int32 = call f3(0, $f0, f4.m0, $f1, f4.m1, f4.m2)
    return ()
  }
}
.fn lp.253 #f2 : fn(int32, int32, array[int32], array[int32], array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1()
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
  }
  .bb #b2 () {
    let %0: int32 = load int32 field($f2, 0 * @32)
    let %1: int32 = load int32 offset($f4, %0 * @32)
    let %2: bool = eq(%1, 0)
    br %2 b3() b4()
  }
  .bb #b3 () {
    let %3: int32 = add($f0, 1)
    let %4: int32 = call f1(%3, 0, $f1, $f3)
    let _ = store int32 field($f5, 0 * @32) <- %4
    jump b5(())
  }
  .bb #b4 () {
    let %6: int32 = add($f0, 1)
    let %7: int32 = call f3(%6, $f1, $f2, $f3, $f4, $f5)
    let _ = store int32 field($f5, 0 * @32) <- %7
    jump b2()
  }
  .bb #b5 (unit) {
    return $b5.0
  }
}
.fn T$start #f14 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f6()
    return %0
  }
}
.fn aux.252 #f3 : fn(int32, int32, array[int32], array[int32], array[int32], array[int32]) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1($f0)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
    .block #b6
    .block #b7
    .block #b8
    .block #b9
    .block #b10
    .block #b11
    .block #b12
    .block #b13
    .block #b14
    .block #b15
    .block #b16
    .block #b17
    .block #b18
    .block #b19
    .block #b20
    .block #b21
    .block #b22
    .block #b23
    .block #b24
    .block #b25
    .block #b26
    .block #b27
    .block #b28
    .block #b29
  }
  .bb #b2 (int32) {
    let %0: bool = le($f1, $b2.0)
    br %0 b3() b4()
  }
  .bb #b3 () {
    jump b29($b2.0)
  }
  .bb #b4 () {
    let %1: int32 = load int32 offset($f3, $b2.0 * @32)
    let %2: bool = eq(%1, 62)
    br %2 b5() b6()
  }
  .bb #b5 () {
    let %3: int32 = load int32 field($f2, 0 * @32)
    let %4: int32 = add(%3, 1)
    let _ = store int32 field($f2, 0 * @32) <- %4
    let %6: int32 = add($b2.0, 1)
    jump b2(%6)
  }
  .bb #b6 () {
    let %7: bool = eq(%1, 60)
    br %7 b7() b8()
  }
  .bb #b7 () {
    let %8: int32 = load int32 field($f2, 0 * @32)
    let %9: int32 = sub(%8, 1)
    let _ = store int32 field($f2, 0 * @32) <- %9
    let %11: int32 = add($b2.0, 1)
    jump b2(%11)
  }
  .bb #b8 () {
    let %12: bool = eq(%1, 43)
    br %12 b9() b10()
  }
  .bb #b9 () {
    let %13: int32 = load int32 field($f2, 0 * @32)
    let %14: int32 = load int32 field($f2, 0 * @32)
    let %15: int32 = load int32 offset($f4, %14 * @32)
    let %16: int32 = add(%15, 1)
    let _ = store int32 offset($f4, %13 * @32) <- %16
    let %18: int32 = add($b2.0, 1)
    jump b2(%18)
  }
  .bb #b10 () {
    let %19: bool = eq(%1, 45)
    br %19 b11() b12()
  }
  .bb #b11 () {
    let %20: int32 = load int32 field($f2, 0 * @32)
    let %21: int32 = load int32 field($f2, 0 * @32)
    let %22: int32 = load int32 offset($f4, %21 * @32)
    let %23: int32 = sub(%22, 1)
    let _ = store int32 offset($f4, %20 * @32) <- %23
    let %25: int32 = add($b2.0, 1)
    jump b2(%25)
  }
  .bb #b12 () {
    let %26: bool = eq(%1, 46)
    br %26 b13() b14()
  }
  .bb #b13 () {
    let %27: int32 = load int32 field($f2, 0 * @32)
    let %28: int32 = load int32 offset($f4, %27 * @32)
    let %29: unit = ext_call minimbt_print_char(%28)
    let %30: int32 = add($b2.0, 1)
    jump b2(%30)
  }
  .bb #b14 () {
    let %31: bool = eq(%1, 44)
    br %31 b15() b16()
  }
  .bb #b15 () {
    let %32: int32 = load int32 field($f2, 0 * @32)
    let %33: int32 = call f0()
    let _ = store int32 offset($f4, %32 * @32) <- %33
    let %35: int32 = add($b2.0, 1)
    jump b2(%35)
  }
  .bb #b16 () {
    let %36: bool = eq(%1, 91)
    br %36 b17() b18()
  }
  .bb #b17 () {
    let _ = store int32 field($f5, 0 * @32) <- $b2.0
    let %38: unit = call f2($b2.0, $f1, $f2, $f3, $f4, $f5)
    let %39: int32 = load int32 field($f5, 0 * @32)
    let %40: int32 = add(%39, 1)
    jump b2(%40)
  }
  .bb #b18 () {
    let %41: bool = eq(%1, 93)
    br %41 b19() b20()
  }
  .bb #b19 () {
    jump b21($b2.0)
  }
  .bb #b20 () {
    jump b21($b2.0)
  }
  .bb #b21 (int32) {
    jump b22($b21.0)
  }
  .bb #b22 (any) {
    jump b23($b22.0)
  }
  .bb #b23 (any) {
    jump b24($b23.0)
  }
  .bb #b24 (any) {
    jump b25($b24.0)
  }
  .bb #b25 (any) {
    jump b26($b25.0)
  }
  .bb #b26 (any) {
    jump b27($b26.0)
  }
  .bb #b27 (any) {
    jump b28($b27.0)
  }
  .bb #b28 (any) {
    jump b29($b28.0)
  }
  .bb #b29 (int32) {
    return $b29.0
  }
}
.fn skip.251 #f1 : fn(int32, int32, int32, array[int32]) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1($f0, $f1)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
    .block #b6
    .block #b7
    .block #b8
    .block #b9
    .block #b10
    .block #b11
    .block #b12
    .block #b13
    .block #b14
  }
  .bb #b2 (int32, int32) {
    let %0: bool = le($f2, $b2.0)
    br %0 b3() b4()
  }
  .bb #b3 () {
    jump b14($b2.0)
  }
  .bb #b4 () {
    let %1: int32 = load int32 offset($f3, $b2.0 * @32)
    let %2: bool = eq(%1, 91)
    br %2 b5() b6()
  }
  .bb #b5 () {
    let %3: int32 = add($b2.0, 1)
    let %4: int32 = add($b2.1, 1)
    jump b2(%3, %4)
  }
  .bb #b6 () {
    let %5: bool = eq(%1, 93)
    br %5 b7() b8()
  }
  .bb #b7 () {
    let %6: bool = eq($b2.1, 0)
    br %6 b9() b10()
  }
  .bb #b8 () {
    let %9: int32 = add($b2.0, 1)
    jump b2(%9, $b2.1)
  }
  .bb #b9 () {
    jump b11($b2.0)
  }
  .bb #b10 () {
    let %7: int32 = add($b2.0, 1)
    let %8: int32 = sub($b2.1, 1)
    jump b2(%7, %8)
  }
  .bb #b11 (int32) {
    jump b12($b11.0)
  }
  .bb #b12 (int32) {
    jump b13($b12.0)
  }
  .bb #b13 (any) {
    jump b14($b13.0)
  }
  .bb #b14 (int32) {
    return $b14.0
  }
}
.fn read_ch_until_newline_or_eof.249 #f0 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = ext_call minimbt_read_char()
    let %1: bool = eq(%0, 10)
    br %1 b1() b2()
  }
  .bb #b1 () {
    jump b6(-1)
  }
  .bb #b2 () {
    let %2: bool = eq(%0, 13)
    br %2 b3() b4()
  }
  .bb #b3 () {
    jump b5(-1)
  }
  .bb #b4 () {
    jump b5(%0)
  }
  .bb #b5 (int32) {
    jump b6($b5.0)
  }
  .bb #b6 (int32) {
    return $b6.0
  }
}
.fn main.254 #f6 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap(1024)> <- [..] = 0
    let %1: unit = call f5(0, f6.m0)
    return ()
  }
}
.thunk ::0 start
