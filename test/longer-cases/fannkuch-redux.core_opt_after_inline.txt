# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn fannkuch.572 #f9 : fn(int32) -> (int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b12()
  }
  .bb #b1 (array[int32]) {
    let _ = alloc <m0: array[int32] heap($f0)> <- [..] = 0
    let _ = alloc <m1: array[int32] heap($f0)> <- [..] = 0
    let _ = alloc <m2: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m3: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m4: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m5: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m6: array[int32] heap(1)> <- [..] = $f0
    jump b18()
  }
  .bb #b2 (unit) {
    let %9: int32 = load int32 field(f9.m3, 0 * @32)
    let %10: int32 = load int32 field(f9.m4, 0 * @32)
    let _ = alloc <m7: (int32, int32) heap(2)> <- [0] = %9, [1] = %10
    return f9.m7
  }
  .bb #b12 () {
    let _ = alloc <m12: array[int32] heap($f0)> <- [..] = 0
    jump b13(0)
  }
  .loop #b13 pre #Some(b12) header #b14 {
    .block #b15
    .block #b16
    .block #b17
  }
  .bb #b14 (int32) {
    let %13: int32 = sub($f0, 1)
    let %14: bool = le($b14.0, %13)
    br %14 b15() b16()
  }
  .bb #b15 () {
    let _ = store int32 offset(f9.m12, $b14.0 * @32) <- $b14.0
    let %16: int32 = add($b14.0, 1)
    jump b14(%16)
  }
  .bb #b16 () {
    jump b17(f9.m12)
  }
  .bb #b17 (any) {
    jump b1($b17.0)
  }
  .bb #b18 () {
    jump b19(f9.m6)
  }
  .loop #b19 pre #Some(b18) header #b20 {
    .block #b21
    .block #b22
    .block #b31
  }
  .bb #b20 (array[int32]) {
    let %17: int32 = load int32 field($b20.0, 0 * @32)
    let %18: bool = le(1, %17)
    br %18 b21() b22()
  }
  .bb #b21 () {
    jump b23(0)
  }
  .bb #b22 () {
    jump b31(())
  }
  .loop #b23 pre #Some(b21) header #b24 {
    .block #b25
    .block #b26
    .block #b27
    .block #b28
    .block #b29
    .block #b30
  }
  .bb #b24 (int32) {
    let %19: int32 = sub($f0, 1)
    let %20: bool = le($b24.0, %19)
    br %20 b25() b26()
  }
  .bb #b25 () {
    let %21: int32 = load int32 offset($b1.0, $b24.0 * @32)
    let _ = store int32 offset(f9.m0, $b24.0 * @32) <- %21
    let %23: int32 = add($b24.0, 1)
    jump b24(%23)
  }
  .bb #b26 () {
    let %24: unit = call f1($b20.0, f9.m1)
    let _ = store int32 field(f9.m2, 0 * @32) <- 0
    let %26: int32 = load int32 field(f9.m0, 0 * @32)
    let _ = alloc <m18: array[int32] heap(1)> <- [..] = %26
    jump b71()
  }
  .bb #b27 () {
    let %32: int32 = load int32 field(f9.m2, 0 * @32)
    let _ = store int32 field(f9.m3, 0 * @32) <- %32
    let %34: int32 = load int32 field(f9.m4, 0 * @32)
    let %35: int32 = load int32 field(f9.m2, 0 * @32)
    let %36: int32 = load int32 field(f9.m5, 0 * @32)
    let %37: int32 = load int32 field(f9.m5, 0 * @32)
    let %38: int32 = div(%37, 2)
    let %39: int32 = mul(%38, 2)
    let %40: int32 = sub(%36, %39)
    let %41: int32 = mul(%40, 2)
    let %42: int32 = sub(1, %41)
    let %43: int32 = mul(%35, %42)
    let %44: int32 = add(%34, %43)
    let _ = store int32 field(f9.m4, 0 * @32) <- %44
    let _ = alloc <m19: array[int32] heap(1)> <- [..] = true
    let _ = alloc <m20: array[int32] heap(1)> <- [..] = 0
    jump b80()
  }
  .bb #b28 () {
    let %52: int32 = load int32 field(f9.m4, 0 * @32)
    let %53: int32 = load int32 field(f9.m2, 0 * @32)
    let %54: int32 = load int32 field(f9.m5, 0 * @32)
    let %55: int32 = load int32 field(f9.m5, 0 * @32)
    let %56: int32 = div(%55, 2)
    let %57: int32 = mul(%56, 2)
    let %58: int32 = sub(%54, %57)
    let %59: int32 = mul(%58, 2)
    let %60: int32 = sub(1, %59)
    let %61: int32 = mul(%53, %60)
    let %62: int32 = add(%52, %61)
    let _ = store int32 field(f9.m4, 0 * @32) <- %62
    let _ = alloc <m21: array[int32] heap(1)> <- [..] = true
    let _ = alloc <m22: array[int32] heap(1)> <- [..] = 0
    jump b104()
  }
  .bb #b29 (any) {
    jump b30($b29.0)
  }
  .bb #b30 (any) {
    jump b2($b30.0)
  }
  .bb #b31 (any) {
    jump b2($b31.0)
  }
  .bb #b32 (unit) {
    let %29: int32 = load int32 field(f9.m3, 0 * @32)
    let %30: int32 = load int32 field(f9.m2, 0 * @32)
    let %31: bool = le(%29, %30)
    br %31 b27() b28()
  }
  .bb #b33 (unit) {
    let %49: int32 = load int32 field(f9.m5, 0 * @32)
    let %50: int32 = add(%49, 1)
    let _ = store int32 field(f9.m5, 0 * @32) <- %50
    jump b20($b20.0)
  }
  .bb #b34 (unit) {
    let %67: int32 = load int32 field(f9.m5, 0 * @32)
    let %68: int32 = add(%67, 1)
    let _ = store int32 field(f9.m5, 0 * @32) <- %68
    jump b20($b20.0)
  }
  .bb #b71 () {
    jump b72(f9.m18)
  }
  .loop #b72 pre #Some(b71) header #b73 {
    .block #b74
    .block #b75
    .block #b76
  }
  .bb #b73 (array[int32]) {
    let %70: int32 = load int32 field($b73.0, 0 * @32)
    let %71: bool = eq(%70, 0)
    br %71 b74() b75()
  }
  .bb #b74 () {
    jump b76(())
  }
  .bb #b75 () {
    let _ = alloc <m71: array[int32] heap(1)> <- [..] = 0
    let %73: unit = call f2(0, $b73.0, f9.m71, f9.m0)
    jump b77(%73)
  }
  .bb #b76 (unit) {
    jump b32($b76.0)
  }
  .bb #b77 (unit) {
    let %74: int32 = load int32 field(f9.m0, 0 * @32)
    let _ = store int32 field($b73.0, 0 * @32) <- %74
    let %76: int32 = load int32 field(f9.m2, 0 * @32)
    let %77: int32 = add(%76, 1)
    let _ = store int32 field(f9.m2, 0 * @32) <- %77
    jump b73($b73.0)
  }
  .bb #b80 () {
    jump b81()
  }
  .loop #b81 pre #Some(b80) header #b82 {
    .block #b83
    .block #b84
    .block #b85
    .block #b86
    .block #b87
    .block #b88
    .block #b89
    .block #b90
    .block #b91
  }
  .bb #b82 () {
    let %79: bool = load bool field(f9.m19, 0 * @32)
    let %80: bool = eq(%79, true)
    br %80 b83() b84()
  }
  .bb #b83 () {
    let %81: int32 = load int32 field($b20.0, 0 * @32)
    let %82: bool = eq(%81, $f0)
    br %82 b85() b86()
  }
  .bb #b84 () {
    jump b91(())
  }
  .bb #b85 () {
    let _ = store bool field(f9.m19, 0 * @32) <- false
    let _ = store int32 field($b20.0, 0 * @32) <- 0
    jump b82()
  }
  .bb #b86 () {
    let %85: int32 = load int32 field($b1.0, 0 * @32)
    let _ = store int32 field(f9.m20, 0 * @32) <- %85
    let %87: unit = call f4(0, $b20.0, $b1.0)
    let %88: int32 = load int32 field($b20.0, 0 * @32)
    let %89: int32 = load int32 field(f9.m20, 0 * @32)
    let _ = store int32 offset($b1.0, %88 * @32) <- %89
    let %91: int32 = load int32 field($b20.0, 0 * @32)
    let %92: int32 = load int32 field($b20.0, 0 * @32)
    let %93: int32 = load int32 offset(f9.m1, %92 * @32)
    let %94: int32 = sub(%93, 1)
    let _ = store int32 offset(f9.m1, %91 * @32) <- %94
    let %96: int32 = load int32 field($b20.0, 0 * @32)
    let %97: int32 = load int32 offset(f9.m1, %96 * @32)
    let %98: bool = le(1, %97)
    br %98 b87() b88()
  }
  .bb #b87 () {
    let _ = store bool field(f9.m19, 0 * @32) <- false
    jump b82()
  }
  .bb #b88 () {
    let %100: int32 = load int32 field($b20.0, 0 * @32)
    let %101: int32 = add(%100, 1)
    let _ = store int32 field($b20.0, 0 * @32) <- %101
    jump b82()
  }
  .bb #b89 (any) {
    jump b90($b89.0)
  }
  .bb #b90 (any) {
    jump b91($b90.0)
  }
  .bb #b91 (any) {
    jump b33($b91.0)
  }
  .bb #b104 () {
    jump b105()
  }
  .loop #b105 pre #Some(b104) header #b106 {
    .block #b107
    .block #b108
    .block #b109
    .block #b110
    .block #b111
    .block #b112
    .block #b113
    .block #b114
    .block #b115
  }
  .bb #b106 () {
    let %103: bool = load bool field(f9.m21, 0 * @32)
    let %104: bool = eq(%103, true)
    br %104 b107() b108()
  }
  .bb #b107 () {
    let %105: int32 = load int32 field($b20.0, 0 * @32)
    let %106: bool = eq(%105, $f0)
    br %106 b109() b110()
  }
  .bb #b108 () {
    jump b115(())
  }
  .bb #b109 () {
    let _ = store bool field(f9.m21, 0 * @32) <- false
    let _ = store int32 field($b20.0, 0 * @32) <- 0
    jump b106()
  }
  .bb #b110 () {
    let %109: int32 = load int32 field($b1.0, 0 * @32)
    let _ = store int32 field(f9.m22, 0 * @32) <- %109
    let %111: unit = call f6(0, $b20.0, $b1.0)
    let %112: int32 = load int32 field($b20.0, 0 * @32)
    let %113: int32 = load int32 field(f9.m22, 0 * @32)
    let _ = store int32 offset($b1.0, %112 * @32) <- %113
    let %115: int32 = load int32 field($b20.0, 0 * @32)
    let %116: int32 = load int32 field($b20.0, 0 * @32)
    let %117: int32 = load int32 offset(f9.m1, %116 * @32)
    let %118: int32 = sub(%117, 1)
    let _ = store int32 offset(f9.m1, %115 * @32) <- %118
    let %120: int32 = load int32 field($b20.0, 0 * @32)
    let %121: int32 = load int32 offset(f9.m1, %120 * @32)
    let %122: bool = le(1, %121)
    br %122 b111() b112()
  }
  .bb #b111 () {
    let _ = store bool field(f9.m21, 0 * @32) <- false
    jump b106()
  }
  .bb #b112 () {
    let %124: int32 = load int32 field($b20.0, 0 * @32)
    let %125: int32 = add(%124, 1)
    let _ = store int32 field($b20.0, 0 * @32) <- %125
    jump b106()
  }
  .bb #b113 (any) {
    jump b114($b113.0)
  }
  .bb #b114 (any) {
    jump b115($b114.0)
  }
  .bb #b115 (any) {
    jump b34($b115.0)
  }
}
.fn move_perm1_forward.579 #f4 : fn(int32, array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 field($f1, 0 * @32)
    let %1: int32 = sub(%0, 1)
    let %2: bool = le($f0, %1)
    br %2 b1() b2()
  }
  .bb #b1 () {
    let %3: int32 = add($f0, 1)
    let %4: int32 = load int32 offset($f2, %3 * @32)
    let _ = store int32 offset($f2, $f0 * @32) <- %4
    let %6: int32 = add($f0, 1)
    let %7: unit = call f4(%6, $f1, $f2)
    jump b3(())
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn compute.574 #f8 : fn(array[int32], int32, array[int32], array[int32], array[int32], array[int32], array[int32], array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1($f0)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b13
  }
  .bb #b2 (array[int32]) {
    let %0: int32 = load int32 field($b2.0, 0 * @32)
    let %1: bool = le(1, %0)
    br %1 b3() b4()
  }
  .bb #b3 () {
    jump b5(0)
  }
  .bb #b4 () {
    jump b13(())
  }
  .loop #b5 pre #Some(b3) header #b6 {
    .block #b7
    .block #b8
    .block #b9
    .block #b10
    .block #b11
    .block #b12
  }
  .bb #b6 (int32) {
    let %2: int32 = sub($f1, 1)
    let %3: bool = le($b6.0, %2)
    br %3 b7() b8()
  }
  .bb #b7 () {
    let %4: int32 = load int32 offset($f6, $b6.0 * @32)
    let _ = store int32 offset($f2, $b6.0 * @32) <- %4
    let %6: int32 = add($b6.0, 1)
    jump b6(%6)
  }
  .bb #b8 () {
    let %7: unit = call f1($b2.0, $f3)
    let _ = store int32 field($f4, 0 * @32) <- 0
    let %9: int32 = load int32 field($f2, 0 * @32)
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = %9
    jump b53()
  }
  .bb #b9 () {
    let %15: int32 = load int32 field($f4, 0 * @32)
    let _ = store int32 field($f8, 0 * @32) <- %15
    let %17: int32 = load int32 field($f7, 0 * @32)
    let %18: int32 = load int32 field($f4, 0 * @32)
    let %19: int32 = load int32 field($f5, 0 * @32)
    let %20: int32 = load int32 field($f5, 0 * @32)
    let %21: int32 = div(%20, 2)
    let %22: int32 = mul(%21, 2)
    let %23: int32 = sub(%19, %22)
    let %24: int32 = mul(%23, 2)
    let %25: int32 = sub(1, %24)
    let %26: int32 = mul(%18, %25)
    let %27: int32 = add(%17, %26)
    let _ = store int32 field($f7, 0 * @32) <- %27
    let _ = alloc <m1: array[int32] heap(1)> <- [..] = true
    let _ = alloc <m2: array[int32] heap(1)> <- [..] = 0
    jump b62()
  }
  .bb #b10 () {
    let %35: int32 = load int32 field($f7, 0 * @32)
    let %36: int32 = load int32 field($f4, 0 * @32)
    let %37: int32 = load int32 field($f5, 0 * @32)
    let %38: int32 = load int32 field($f5, 0 * @32)
    let %39: int32 = div(%38, 2)
    let %40: int32 = mul(%39, 2)
    let %41: int32 = sub(%37, %40)
    let %42: int32 = mul(%41, 2)
    let %43: int32 = sub(1, %42)
    let %44: int32 = mul(%36, %43)
    let %45: int32 = add(%35, %44)
    let _ = store int32 field($f7, 0 * @32) <- %45
    let _ = alloc <m3: array[int32] heap(1)> <- [..] = true
    let _ = alloc <m4: array[int32] heap(1)> <- [..] = 0
    jump b86()
  }
  .bb #b11 (any) {
    jump b12($b11.0)
  }
  .bb #b12 (any) {
    return $b12.0
  }
  .bb #b13 (any) {
    return $b13.0
  }
  .bb #b14 (unit) {
    let %12: int32 = load int32 field($f8, 0 * @32)
    let %13: int32 = load int32 field($f4, 0 * @32)
    let %14: bool = le(%12, %13)
    br %14 b9() b10()
  }
  .bb #b15 (unit) {
    let %32: int32 = load int32 field($f5, 0 * @32)
    let %33: int32 = add(%32, 1)
    let _ = store int32 field($f5, 0 * @32) <- %33
    jump b2($b2.0)
  }
  .bb #b16 (unit) {
    let %50: int32 = load int32 field($f5, 0 * @32)
    let %51: int32 = add(%50, 1)
    let _ = store int32 field($f5, 0 * @32) <- %51
    jump b2($b2.0)
  }
  .bb #b53 () {
    jump b54(f8.m0)
  }
  .loop #b54 pre #Some(b53) header #b55 {
    .block #b56
    .block #b57
    .block #b58
  }
  .bb #b55 (array[int32]) {
    let %53: int32 = load int32 field($b55.0, 0 * @32)
    let %54: bool = eq(%53, 0)
    br %54 b56() b57()
  }
  .bb #b56 () {
    jump b58(())
  }
  .bb #b57 () {
    let _ = alloc <m53: array[int32] heap(1)> <- [..] = 0
    let %56: unit = call f2(0, $b55.0, f8.m53, $f2)
    jump b59(%56)
  }
  .bb #b58 (unit) {
    jump b14($b58.0)
  }
  .bb #b59 (unit) {
    let %57: int32 = load int32 field($f2, 0 * @32)
    let _ = store int32 field($b55.0, 0 * @32) <- %57
    let %59: int32 = load int32 field($f4, 0 * @32)
    let %60: int32 = add(%59, 1)
    let _ = store int32 field($f4, 0 * @32) <- %60
    jump b55($b55.0)
  }
  .bb #b62 () {
    jump b63()
  }
  .loop #b63 pre #Some(b62) header #b64 {
    .block #b65
    .block #b66
    .block #b67
    .block #b68
    .block #b69
    .block #b70
    .block #b71
    .block #b72
    .block #b73
  }
  .bb #b64 () {
    let %62: bool = load bool field(f8.m1, 0 * @32)
    let %63: bool = eq(%62, true)
    br %63 b65() b66()
  }
  .bb #b65 () {
    let %64: int32 = load int32 field($b2.0, 0 * @32)
    let %65: bool = eq(%64, $f1)
    br %65 b67() b68()
  }
  .bb #b66 () {
    jump b73(())
  }
  .bb #b67 () {
    let _ = store bool field(f8.m1, 0 * @32) <- false
    let _ = store int32 field($b2.0, 0 * @32) <- 0
    jump b64()
  }
  .bb #b68 () {
    let %68: int32 = load int32 field($f6, 0 * @32)
    let _ = store int32 field(f8.m2, 0 * @32) <- %68
    let %70: unit = call f4(0, $b2.0, $f6)
    let %71: int32 = load int32 field($b2.0, 0 * @32)
    let %72: int32 = load int32 field(f8.m2, 0 * @32)
    let _ = store int32 offset($f6, %71 * @32) <- %72
    let %74: int32 = load int32 field($b2.0, 0 * @32)
    let %75: int32 = load int32 field($b2.0, 0 * @32)
    let %76: int32 = load int32 offset($f3, %75 * @32)
    let %77: int32 = sub(%76, 1)
    let _ = store int32 offset($f3, %74 * @32) <- %77
    let %79: int32 = load int32 field($b2.0, 0 * @32)
    let %80: int32 = load int32 offset($f3, %79 * @32)
    let %81: bool = le(1, %80)
    br %81 b69() b70()
  }
  .bb #b69 () {
    let _ = store bool field(f8.m1, 0 * @32) <- false
    jump b64()
  }
  .bb #b70 () {
    let %83: int32 = load int32 field($b2.0, 0 * @32)
    let %84: int32 = add(%83, 1)
    let _ = store int32 field($b2.0, 0 * @32) <- %84
    jump b64()
  }
  .bb #b71 (any) {
    jump b72($b71.0)
  }
  .bb #b72 (any) {
    jump b73($b72.0)
  }
  .bb #b73 (any) {
    jump b15($b73.0)
  }
  .bb #b86 () {
    jump b87()
  }
  .loop #b87 pre #Some(b86) header #b88 {
    .block #b89
    .block #b90
    .block #b91
    .block #b92
    .block #b93
    .block #b94
    .block #b95
    .block #b96
    .block #b97
  }
  .bb #b88 () {
    let %86: bool = load bool field(f8.m3, 0 * @32)
    let %87: bool = eq(%86, true)
    br %87 b89() b90()
  }
  .bb #b89 () {
    let %88: int32 = load int32 field($b2.0, 0 * @32)
    let %89: bool = eq(%88, $f1)
    br %89 b91() b92()
  }
  .bb #b90 () {
    jump b97(())
  }
  .bb #b91 () {
    let _ = store bool field(f8.m3, 0 * @32) <- false
    let _ = store int32 field($b2.0, 0 * @32) <- 0
    jump b88()
  }
  .bb #b92 () {
    let %92: int32 = load int32 field($f6, 0 * @32)
    let _ = store int32 field(f8.m4, 0 * @32) <- %92
    let %94: unit = call f6(0, $b2.0, $f6)
    let %95: int32 = load int32 field($b2.0, 0 * @32)
    let %96: int32 = load int32 field(f8.m4, 0 * @32)
    let _ = store int32 offset($f6, %95 * @32) <- %96
    let %98: int32 = load int32 field($b2.0, 0 * @32)
    let %99: int32 = load int32 field($b2.0, 0 * @32)
    let %100: int32 = load int32 offset($f3, %99 * @32)
    let %101: int32 = sub(%100, 1)
    let _ = store int32 offset($f3, %98 * @32) <- %101
    let %103: int32 = load int32 field($b2.0, 0 * @32)
    let %104: int32 = load int32 offset($f3, %103 * @32)
    let %105: bool = le(1, %104)
    br %105 b93() b94()
  }
  .bb #b93 () {
    let _ = store bool field(f8.m3, 0 * @32) <- false
    jump b88()
  }
  .bb #b94 () {
    let %107: int32 = load int32 field($b2.0, 0 * @32)
    let %108: int32 = add(%107, 1)
    let _ = store int32 field($b2.0, 0 * @32) <- %108
    jump b88()
  }
  .bb #b95 (any) {
    jump b96($b95.0)
  }
  .bb #b96 (any) {
    jump b97($b96.0)
  }
  .bb #b97 (any) {
    jump b16($b97.0)
  }
}
.fn do_flip.576 #f3 : fn(array[int32], array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1($f0)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
  }
  .bb #b2 (array[int32]) {
    let %0: int32 = load int32 field($b2.0, 0 * @32)
    let %1: bool = eq(%0, 0)
    br %1 b3() b4()
  }
  .bb #b3 () {
    jump b5(())
  }
  .bb #b4 () {
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = 0
    jump b9()
  }
  .bb #b5 (unit) {
    return $b5.0
  }
  .bb #b6 (unit) {
    let %4: int32 = load int32 field($f1, 0 * @32)
    let _ = store int32 field($b2.0, 0 * @32) <- %4
    let %6: int32 = load int32 field($f2, 0 * @32)
    let %7: int32 = add(%6, 1)
    let _ = store int32 field($f2, 0 * @32) <- %7
    jump b2($b2.0)
  }
  .bb #b9 () {
    jump b10(0)
  }
  .loop #b10 pre #Some(b9) header #b11 {
    .block #b12
    .block #b13
    .block #b14
  }
  .bb #b11 (int32) {
    let %9: int32 = load int32 field($b2.0, 0 * @32)
    let %10: int32 = div(%9, 2)
    let %11: bool = le($b11.0, %10)
    br %11 b12() b13()
  }
  .bb #b12 () {
    let %12: int32 = load int32 offset($f1, $b11.0 * @32)
    let _ = store int32 field(f3.m0, 0 * @32) <- %12
    let %14: int32 = load int32 field($b2.0, 0 * @32)
    let %15: int32 = sub(%14, $b11.0)
    let %16: int32 = load int32 offset($f1, %15 * @32)
    let _ = store int32 offset($f1, $b11.0 * @32) <- %16
    let %18: int32 = load int32 field($b2.0, 0 * @32)
    let %19: int32 = sub(%18, $b11.0)
    let %20: int32 = load int32 field(f3.m0, 0 * @32)
    let _ = store int32 offset($f1, %19 * @32) <- %20
    let %22: int32 = add($b11.0, 1)
    jump b11(%22)
  }
  .bb #b13 () {
    jump b14(())
  }
  .bb #b14 (any) {
    jump b6($b14.0)
  }
}
.fn go_loop.580 #f7 : fn(int32, array[int32], array[int32], array[bool], array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1()
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
    .block #b6
    .block #b7
    .block #b8
    .block #b9
    .block #b10
    .block #b11
  }
  .bb #b2 () {
    let %0: bool = load bool field($f3, 0 * @32)
    let %1: bool = eq(%0, true)
    br %1 b3() b4()
  }
  .bb #b3 () {
    let %2: int32 = load int32 field($f1, 0 * @32)
    let %3: bool = eq(%2, $f0)
    br %3 b5() b6()
  }
  .bb #b4 () {
    jump b11(())
  }
  .bb #b5 () {
    let _ = store bool field($f3, 0 * @32) <- false
    let _ = store int32 field($f1, 0 * @32) <- 0
    jump b2()
  }
  .bb #b6 () {
    let %6: int32 = load int32 field($f5, 0 * @32)
    let _ = store int32 field($f2, 0 * @32) <- %6
    let %8: unit = call f6(0, $f1, $f5)
    let %9: int32 = load int32 field($f1, 0 * @32)
    let %10: int32 = load int32 field($f2, 0 * @32)
    let _ = store int32 offset($f5, %9 * @32) <- %10
    let %12: int32 = load int32 field($f1, 0 * @32)
    let %13: int32 = load int32 field($f1, 0 * @32)
    let %14: int32 = load int32 offset($f4, %13 * @32)
    let %15: int32 = sub(%14, 1)
    let _ = store int32 offset($f4, %12 * @32) <- %15
    let %17: int32 = load int32 field($f1, 0 * @32)
    let %18: int32 = load int32 offset($f4, %17 * @32)
    let %19: bool = le(1, %18)
    br %19 b7() b8()
  }
  .bb #b7 () {
    let _ = store bool field($f3, 0 * @32) <- false
    jump b2()
  }
  .bb #b8 () {
    let %21: int32 = load int32 field($f1, 0 * @32)
    let %22: int32 = add(%21, 1)
    let _ = store int32 field($f1, 0 * @32) <- %22
    jump b2()
  }
  .bb #b9 (any) {
    jump b10($b9.0)
  }
  .bb #b10 (any) {
    jump b11($b10.0)
  }
  .bb #b11 (any) {
    return $b11.0
  }
}
.fn move_perm1_forward.581 #f6 : fn(int32, array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 field($f1, 0 * @32)
    let %1: int32 = sub(%0, 1)
    let %2: bool = le($f0, %1)
    br %2 b1() b2()
  }
  .bb #b1 () {
    let %3: int32 = add($f0, 1)
    let %4: int32 = load int32 offset($f2, %3 * @32)
    let _ = store int32 offset($f2, $f0 * @32) <- %4
    let %6: int32 = add($f0, 1)
    let %7: unit = call f6(%6, $f1, $f2)
    jump b3(())
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn go_loop.578 #f5 : fn(int32, array[int32], array[int32], array[bool], array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1()
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
    .block #b6
    .block #b7
    .block #b8
    .block #b9
    .block #b10
    .block #b11
  }
  .bb #b2 () {
    let %0: bool = load bool field($f3, 0 * @32)
    let %1: bool = eq(%0, true)
    br %1 b3() b4()
  }
  .bb #b3 () {
    let %2: int32 = load int32 field($f1, 0 * @32)
    let %3: bool = eq(%2, $f0)
    br %3 b5() b6()
  }
  .bb #b4 () {
    jump b11(())
  }
  .bb #b5 () {
    let _ = store bool field($f3, 0 * @32) <- false
    let _ = store int32 field($f1, 0 * @32) <- 0
    jump b2()
  }
  .bb #b6 () {
    let %6: int32 = load int32 field($f5, 0 * @32)
    let _ = store int32 field($f2, 0 * @32) <- %6
    let %8: unit = call f4(0, $f1, $f5)
    let %9: int32 = load int32 field($f1, 0 * @32)
    let %10: int32 = load int32 field($f2, 0 * @32)
    let _ = store int32 offset($f5, %9 * @32) <- %10
    let %12: int32 = load int32 field($f1, 0 * @32)
    let %13: int32 = load int32 field($f1, 0 * @32)
    let %14: int32 = load int32 offset($f4, %13 * @32)
    let %15: int32 = sub(%14, 1)
    let _ = store int32 offset($f4, %12 * @32) <- %15
    let %17: int32 = load int32 field($f1, 0 * @32)
    let %18: int32 = load int32 offset($f4, %17 * @32)
    let %19: bool = le(1, %18)
    br %19 b7() b8()
  }
  .bb #b7 () {
    let _ = store bool field($f3, 0 * @32) <- false
    jump b2()
  }
  .bb #b8 () {
    let %21: int32 = load int32 field($f1, 0 * @32)
    let %22: int32 = add(%21, 1)
    let _ = store int32 field($f1, 0 * @32) <- %22
    jump b2()
  }
  .bb #b9 (any) {
    jump b10($b9.0)
  }
  .bb #b10 (any) {
    jump b11($b10.0)
  }
  .bb #b11 (any) {
    return $b11.0
  }
}
.fn main.582 #f10 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: (int32, int32) = call f9(9)
    let %1: int32 = load int32 field(%0, 0 * @(@32, @(@32, @32)))
    let %2: int32 = load int32 field(%0, 1 * @(@32, @(@32, @32)))
    let %3: unit = ext_call minimbt_print_int(%2)
    let %4: unit = ext_call minimbt_print_int(%1)
    return %4
  }
}
.fn flip_loop.577 #f2 : fn(int32, array[int32], array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1($f0)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
  }
  .bb #b2 (int32) {
    let %0: int32 = load int32 field($f1, 0 * @32)
    let %1: int32 = div(%0, 2)
    let %2: bool = le($b2.0, %1)
    br %2 b3() b4()
  }
  .bb #b3 () {
    let %3: int32 = load int32 offset($f3, $b2.0 * @32)
    let _ = store int32 field($f2, 0 * @32) <- %3
    let %5: int32 = load int32 field($f1, 0 * @32)
    let %6: int32 = sub(%5, $b2.0)
    let %7: int32 = load int32 offset($f3, %6 * @32)
    let _ = store int32 offset($f3, $b2.0 * @32) <- %7
    let %9: int32 = load int32 field($f1, 0 * @32)
    let %10: int32 = sub(%9, $b2.0)
    let %11: int32 = load int32 field($f2, 0 * @32)
    let _ = store int32 offset($f3, %10 * @32) <- %11
    let %13: int32 = add($b2.0, 1)
    jump b2(%13)
  }
  .bb #b4 () {
    jump b5(())
  }
  .bb #b5 (any) {
    return $b5.0
  }
}
.fn T$start #f22 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f10()
    return %0
  }
}
.fn gen_perm1.573 #f0 : fn(int32) -> array[int32]
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap($f0)> <- [..] = 0
    jump b1(0)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
  }
  .bb #b2 (int32) {
    let %1: int32 = sub($f0, 1)
    let %2: bool = le($b2.0, %1)
    br %2 b3() b4()
  }
  .bb #b3 () {
    let _ = store int32 offset(f0.m0, $b2.0 * @32) <- $b2.0
    let %4: int32 = add($b2.0, 1)
    jump b2(%4)
  }
  .bb #b4 () {
    jump b5(f0.m0)
  }
  .bb #b5 (any) {
    return $b5.0
  }
}
.fn init_count.575 #f1 : fn(array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 field($f0, 0 * @32)
    let %1: bool = eq(%0, 1)
    br %1 b1() b2()
  }
  .bb #b1 () {
    jump b3(())
  }
  .bb #b2 () {
    let %2: int32 = load int32 field($f0, 0 * @32)
    let %3: int32 = sub(%2, 1)
    let %4: int32 = load int32 field($f0, 0 * @32)
    let _ = store int32 offset($f1, %3 * @32) <- %4
    let %6: int32 = load int32 field($f0, 0 * @32)
    let %7: int32 = sub(%6, 1)
    let _ = store int32 field($f0, 0 * @32) <- %7
    let %9: unit = call f1($f0, $f1)
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.thunk ::0 start
