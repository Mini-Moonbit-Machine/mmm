let rec iter.1: Fun([Fun([Int], Bool)], Bool) = (arr.3: Array(Int), len.5: Int) {
  let rec do.6: Bool = (yield.8: Var({val: Some(Fun([Int], Bool))})) {
    let rec next.9: Bool = (i.11: Var({val: Some(Int)})) {
      let _12: Int = Int(1)
      let _13: Int = Sub(len.5, _12)
      if (i.11 <= _13) then {
        let _14: Int = Get arr.3[i.11]
        let _15: Bool = Apply(yield.8, [_14, ])
        let _18: Bool = Bool(true)
        if (_15 == _18) then {
          let _16: Int = Int(1)
          let _17: Int = Add(i.11, _16)
          Apply(next.9, [_17, ])
        } else {
          Bool(false)
        }
      } else {
        Bool(false)
      }
    }
    let _19: Int = Int(0)
    Apply(next.9, [_19, ])
  }
  Var(do.6)
}
let rec each.20: Unit = (iter.22: Fun([Fun([Int], Bool)], Bool), f.24: Fun([Int], Unit)) {
  let rec yield.25: Bool = (x.27: Var({val: Some(Int)})) {
    let _29: Unit = Apply(f.24, [x.27, ])
    Bool(true)
  }
  let rec do.30: Var({val: Some(Unit)}) = () {
    let _31: Bool = Apply(iter.22, [yield.25, ])
    let _32: Bool = Bool(true)
    if (_31 == _32) then {
      Apply(do.30, [])
    } else {
      Unit
    }
  }
  Apply(do.30, [])
}
let rec main.33: Var({val: Some(Unit)}) = () {
  let _34: Int = Int(5)
  let _35: Int = Int(1)
  let arr.36: Array(Int) = ExtApply(minimbt_create_array, [_34, _35, ])
  let _37: Int = Int(0)
  let _38: Int = Int(1)
  let _40: Unit = Put arr.36[_37] = _38
  let _41: Int = Int(1)
  let _42: Int = Int(2)
  let _44: Unit = Put arr.36[_41] = _42
  let _45: Int = Int(2)
  let _46: Int = Int(3)
  let _48: Unit = Put arr.36[_45] = _46
  let _49: Int = Int(3)
  let _50: Int = Int(4)
  let _52: Unit = Put arr.36[_49] = _50
  let _53: Int = Int(4)
  let _54: Int = Int(5)
  let _56: Unit = Put arr.36[_53] = _54
  let _57: Int = Int(5)
  let f.58: Fun([Fun([Int], Bool)], Bool) = Apply(iter.1, [arr.36, _57, ])
  let rec print.59: Unit = (x.61: Var({val: Some(Int)})) {
    ExtApply(minimbt_print_int, [x.61, ])
  }
  Apply(each.20, [f.58, print.59, ])
}
Apply(main.33, [])
