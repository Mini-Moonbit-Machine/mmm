# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn main33.65 #f1 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = ext_call minimbt_read_int()
    let %1: int32 = add(%0, 1)
    let _ = alloc <m0: array[int32] heap(%1)> <- [..] = -1919810
    let %3: int32 = call f0(%0, f1.m0)
    let %4: unit = ext_call minimbt_print_int(%3)
    let %5: unit = ext_call minimbt_print_char(10)
    return ()
  }
}
.fn T$start #f4 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f1()
    return %0
  }
}
.fn memed8.66 #f0 : fn(int32, array[int32]) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %12: ptr = compute_address unit offset(0, $f0 * @32)
    let %0: int32 = load int32 raw($f1, %12)
    let %1: bool = eq(%0, -1919810)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: bool = le($f0, 1)
    br %2 b3() b4()
  }
  .bb #b2 () {
    let %11: ptr = compute_address unit offset(0, $f0 * @32)
    let %9: int32 = load int32 raw($f1, %11)
    jump b6(%9)
  }
  .bb #b3 () {
    jump b5($f0)
  }
  .bb #b4 () {
    let %3: int32 = sub($f0, 1)
    let %4: int32 = call f0(%3, $f1)
    let %5: int32 = sub($f0, 2)
    let %6: int32 = call f0(%5, $f1)
    let %7: int32 = add(%4, %6)
    jump b5(%7)
  }
  .bb #b5 (int32) {
    let %10: ptr = compute_address unit offset(0, $f0 * @32)
    let _ = store int32 raw($f1, %10) <- $b5.0
    jump b6($b5.0)
  }
  .bb #b6 (int32) {
    return $b6.0
  }
}
.thunk ::0 start

