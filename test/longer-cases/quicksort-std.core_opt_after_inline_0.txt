# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn output.394 #f1 : fn(array[int32], int32, int32) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (array[int32], int32, int32) {
    let %0: int32 = sub($b0.2, 1)
    let %1: bool = le($b0.1, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = load int32 offset($b0.0, $b0.1 * @32)
    let %3: unit = ext_call minimbt_print_int(%2)
    let %4: unit = ext_call minimbt_print_endline()
    let %5: int32 = add($b0.1, 1)
    jump b0($b0.0, %5, $b0.2)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1, $f2)
  }
}
.fn aux.400 #f6 : fn(int32, array[int32], array[int32], int32, int32, array[int32]) -> unit
.freevars ()
.entry b11 {
  .bb #b0 (int32, array[int32], array[int32], int32, int32, array[int32]) {
    let %0: int32 = sub($b0.3, 2)
    let %1: bool = le($b0.0, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = load int32 offset($b0.2, $b0.0 * @32)
    let %3: int32 = sub($b0.4, 1)
    let %4: bool = le(%2, %3)
    br %4 b3() b4()
  }
  .bb #b2 () {
    jump b9(())
  }
  .bb #b3 () {
    let %5: int32 = load int32 field($b0.1, 0 * @32)
    let %6: bool = eq(%5, $b0.0)
    br %6 b5() b6()
  }
  .bb #b4 () {
    jump b8(())
  }
  .bb #b5 () {
    jump b7(())
  }
  .bb #b6 () {
    let %7: int32 = load int32 field($b0.1, 0 * @32)
    jump b14()
  }
  .bb #b7 (unit) {
    let %10: int32 = load int32 field($b0.1, 0 * @32)
    let %11: int32 = add(%10, 1)
    let _ = store int32 field($b0.1, 0 * @32) <- %11
    jump b8(())
  }
  .bb #b8 (unit) {
    let %13: int32 = add($b0.0, 1)
    jump b0(%13, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b9 (unit) {
    return $b9.0
  }
  .loop #b10 pre #Some(b11) header #b0 {
    .block #b6
    .block #b4
    .block #b8
    .block #b9
    .block #b1
    .block #b5
    .block #b2
    .block #b3
    .block #b7
  }
  .bb #b11 () {
    jump b10($f0, $f1, $f2, $f3, $f4, $f5)
  }
  .bb #b12 (unit) {
    let _ = store int32 field($b0.5, 0 * @32) <- 0
    jump b7(())
  }
  .bb #b14 () {
    let %14: int32 = load int32 offset($b0.2, %7 * @32)
    let %15: int32 = load int32 offset($b0.2, $b0.0 * @32)
    let _ = store int32 offset($b0.2, %7 * @32) <- %15
    let _ = store int32 offset($b0.2, $b0.0 * @32) <- %14
    jump b12(())
  }
}
.fn swap.393 #f0 : fn(array[int32], int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 offset($f0, $f1 * @32)
    let %1: int32 = load int32 offset($f0, $f2 * @32)
    let _ = store int32 offset($f0, $f1 * @32) <- %1
    let _ = store int32 offset($f0, $f2 * @32) <- %0
    return ()
  }
}
.fn f.397 #f3 : fn(int32, array[int32], int32, int32) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (int32, array[int32], int32, int32) {
    let %0: int32 = sub($b0.3, 1)
    let %1: bool = le($b0.0, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    jump b15()
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1, $f2, $f3)
  }
  .bb #b6 (unit) {
    let %3: int32 = add($b0.0, 1)
    jump b0(%3, $b0.1, $b0.2, $b0.3)
  }
  .bb #b7 (int32, array[int32], int32) {
    let %4: int32 = add(1, $b7.2)
    let %5: bool = le(%4, $b7.0)
    br %5 b8() b9()
  }
  .bb #b8 () {
    let %6: int32 = load int32 offset($b7.1, $b7.0 * @32)
    let %7: int32 = sub($b7.0, 1)
    let %8: int32 = load int32 offset($b7.1, %7 * @32)
    let %9: int32 = sub(%8, 1)
    let %10: bool = le(%6, %9)
    br %10 b10() b11()
  }
  .bb #b9 () {
    jump b13(())
  }
  .bb #b10 () {
    let %11: int32 = sub($b7.0, 1)
    jump b17()
  }
  .bb #b11 () {
    jump b12(())
  }
  .bb #b12 (unit) {
    jump b13($b12.0)
  }
  .bb #b13 (unit) {
    jump b6($b13.0)
  }
  .loop #b14 pre #Some(b15) header #b7 {
    .block #b13
    .block #b11
    .block #b8
    .block #b12
    .block #b9
    .block #b10
  }
  .bb #b15 () {
    jump b14($b0.0, $b0.1, $b0.2)
  }
  .bb #b16 (unit) {
    let %13: int32 = sub($b7.0, 1)
    jump b7(%13, $b7.1, $b7.2)
  }
  .bb #b17 () {
    let %14: int32 = load int32 offset($b7.1, $b7.0 * @32)
    let %15: int32 = load int32 offset($b7.1, %11 * @32)
    let _ = store int32 offset($b7.1, $b7.0 * @32) <- %15
    let _ = store int32 offset($b7.1, %11 * @32) <- %14
    jump b16(())
  }
}
.fn quick_sort.395 #f7 : fn(array[int32], int32, int32) -> unit
.freevars ()
.entry b17 {
  .bb #b0 (array[int32], int32, int32) {
    let %0: int32 = sub($b0.2, $b0.1)
    let %1: bool = le(%0, 16)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = add($b0.1, 1)
    jump b60()
  }
  .bb #b2 () {
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = 0
    let %5: int32 = sub($b0.2, $b0.1)
    let %6: int32 = div(%5, 4)
    let %7: int32 = mul(%6, 2)
    let %8: int32 = add($b0.1, %7)
    let %9: bool = le(8, %5)
    br %9 b3() b4()
  }
  .bb #b3 () {
    let %10: int32 = div(%5, 4)
    let %11: int32 = mul(%10, 1)
    let %12: int32 = add($b0.1, %11)
    let %13: int32 = div(%5, 4)
    let %14: int32 = mul(%13, 3)
    let %15: int32 = add($b0.1, %14)
    let %16: int32 = sub(%5, 1)
    let %17: bool = le(50, %16)
    br %17 b5() b6()
  }
  .bb #b4 () {
    jump b8(())
  }
  .bb #b5 () {
    let %18: int32 = sub(%12, 1)
    let %19: int32 = add(%12, 1)
    jump b76()
  }
  .bb #b6 () {
    jump b7(())
  }
  .bb #b7 (unit) {
    jump b104()
  }
  .bb #b8 (unit) {
    let %28: int32 = load int32 field(f7.m0, 0 * @32)
    let %29: bool = eq(%28, 0)
    br %29 b9() b10()
  }
  .bb #b9 () {
    jump b11(true)
  }
  .bb #b10 () {
    jump b11(false)
  }
  .bb #b11 (bool) {
    let %30: #(int32, bool) = pack %8, $b11.0
    let %31: int32 = extract %30 0
    let %32: bool = extract %30 1
    let %33: int32 = sub($b0.2, 1)
    jump b79()
  }
  .bb #b12 () {
    jump b14(true)
  }
  .bb #b13 () {
    jump b14(false)
  }
  .bb #b14 (bool) {
    let %46: #(int32, bool) = pack %43, $b14.0
    let %47: int32 = extract %46 0
    let %48: bool = extract %46 1
    let %49: unit = call f7($b0.0, $b0.1, %47)
    let %50: int32 = add(%47, 1)
    jump b0($b0.0, %50, $b0.2)
  }
  .bb #b15 (unit) {
    return $b15.0
  }
  .loop #b16 pre #Some(b17) header #b0 {
    .block #b6
    .block #b12
    .block #b4
    .block #b8
    .block #b9
    .block #b13
    .block #b15
    .block #b1
    .block #b10
    .block #b11
    .block #b5
    .block #b2
    .block #b3
    .block #b14
    .block #b7
  }
  .bb #b17 () {
    jump b16($f0, $f1, $f2)
  }
  .bb #b18 (unit) {
    let %35: int32 = sub($b0.2, 1)
    let %36: int32 = load int32 offset($b0.0, %35 * @32)
    let _ = alloc <m1: array[int32] heap(1)> <- [..] = $b0.1
    let _ = alloc <m2: array[int32] heap(1)> <- [..] = 1
    jump b94()
  }
  .bb #b19 (unit) {
    let %40: int32 = load int32 field(f7.m1, 0 * @32)
    let %41: int32 = sub($b0.2, 1)
    jump b51()
  }
  .bb #b20 (unit) {
    let %43: int32 = load int32 field(f7.m1, 0 * @32)
    let %44: int32 = load int32 field(f7.m2, 0 * @32)
    let %45: bool = eq(%44, 1)
    br %45 b12() b13()
  }
  .bb #b21 (unit) {
    let %21: int32 = sub(%8, 1)
    let %22: int32 = add(%8, 1)
    jump b101()
  }
  .bb #b22 (unit) {
    let %24: int32 = sub(%15, 1)
    let %25: int32 = add(%15, 1)
    jump b73()
  }
  .bb #b51 () {
    let %51: int32 = load int32 offset($b0.0, %40 * @32)
    let %52: int32 = load int32 offset($b0.0, %41 * @32)
    let _ = store int32 offset($b0.0, %40 * @32) <- %52
    let _ = store int32 offset($b0.0, %41 * @32) <- %51
    jump b20(())
  }
  .bb #b55 (int32, array[int32], int32, int32) {
    let %55: int32 = sub($b55.3, 1)
    let %56: bool = le($b55.0, %55)
    br %56 b56() b57()
  }
  .bb #b56 () {
    jump b70()
  }
  .bb #b57 () {
    jump b58(())
  }
  .bb #b58 (unit) {
    jump b15($b58.0)
  }
  .loop #b59 pre #Some(b60) header #b55 {
    .block #b56
    .block #b57
    .block #b58
  }
  .bb #b60 () {
    jump b59(%2, $b0.0, $b0.1, $b0.2)
  }
  .bb #b61 (unit) {
    let %58: int32 = add($b55.0, 1)
    jump b55(%58, $b55.1, $b55.2, $b55.3)
  }
  .bb #b62 (int32, array[int32], int32) {
    let %59: int32 = add(1, $b62.2)
    let %60: bool = le(%59, $b62.0)
    br %60 b63() b64()
  }
  .bb #b63 () {
    let %61: int32 = load int32 offset($b62.1, $b62.0 * @32)
    let %62: int32 = sub($b62.0, 1)
    let %63: int32 = load int32 offset($b62.1, %62 * @32)
    let %64: int32 = sub(%63, 1)
    let %65: bool = le(%61, %64)
    br %65 b65() b66()
  }
  .bb #b64 () {
    jump b68(())
  }
  .bb #b65 () {
    let %66: int32 = sub($b62.0, 1)
    jump b72()
  }
  .bb #b66 () {
    jump b67(())
  }
  .bb #b67 (unit) {
    jump b68($b67.0)
  }
  .bb #b68 (unit) {
    jump b61($b68.0)
  }
  .loop #b69 pre #Some(b70) header #b62 {
    .block #b68
    .block #b66
    .block #b63
    .block #b67
    .block #b64
    .block #b65
  }
  .bb #b70 () {
    jump b69($b55.0, $b55.1, $b55.2)
  }
  .bb #b71 (unit) {
    let %68: int32 = sub($b62.0, 1)
    jump b62(%68, $b62.1, $b62.2)
  }
  .bb #b72 () {
    let %69: int32 = load int32 offset($b62.1, $b62.0 * @32)
    let %70: int32 = load int32 offset($b62.1, %66 * @32)
    let _ = store int32 offset($b62.1, $b62.0 * @32) <- %70
    let _ = store int32 offset($b62.1, %66 * @32) <- %69
    jump b71(())
  }
  .bb #b73 () {
    let %73: unit = call f4(%24, %15, $b0.0, f7.m0)
    let %74: unit = call f4(%15, %25, $b0.0, f7.m0)
    let %75: unit = call f4(%24, %15, $b0.0, f7.m0)
    jump b7(%75)
  }
  .bb #b76 () {
    let %76: unit = call f4(%18, %12, $b0.0, f7.m0)
    let %77: unit = call f4(%12, %19, $b0.0, f7.m0)
    let %78: unit = call f4(%18, %12, $b0.0, f7.m0)
    jump b21(%78)
  }
  .bb #b79 () {
    let %79: int32 = load int32 offset($b0.0, %31 * @32)
    let %80: int32 = load int32 offset($b0.0, %33 * @32)
    let _ = store int32 offset($b0.0, %31 * @32) <- %80
    let _ = store int32 offset($b0.0, %33 * @32) <- %79
    jump b18(())
  }
  .bb #b83 (int32, array[int32], array[int32], int32, int32, array[int32]) {
    let %83: int32 = sub($b83.3, 2)
    let %84: bool = le($b83.0, %83)
    br %84 b84() b85()
  }
  .bb #b84 () {
    let %85: int32 = load int32 offset($b83.2, $b83.0 * @32)
    let %86: int32 = sub($b83.4, 1)
    let %87: bool = le(%85, %86)
    br %87 b86() b87()
  }
  .bb #b85 () {
    jump b92(())
  }
  .bb #b86 () {
    let %88: int32 = load int32 field($b83.1, 0 * @32)
    let %89: bool = eq(%88, $b83.0)
    br %89 b88() b89()
  }
  .bb #b87 () {
    jump b91(())
  }
  .bb #b88 () {
    jump b90(())
  }
  .bb #b89 () {
    let %90: int32 = load int32 field($b83.1, 0 * @32)
    jump b97()
  }
  .bb #b90 (unit) {
    let %93: int32 = load int32 field($b83.1, 0 * @32)
    let %94: int32 = add(%93, 1)
    let _ = store int32 field($b83.1, 0 * @32) <- %94
    jump b91(())
  }
  .bb #b91 (unit) {
    let %96: int32 = add($b83.0, 1)
    jump b83(%96, $b83.1, $b83.2, $b83.3, $b83.4, $b83.5)
  }
  .bb #b92 (unit) {
    jump b19($b92.0)
  }
  .loop #b93 pre #Some(b94) header #b83 {
    .block #b89
    .block #b87
    .block #b91
    .block #b92
    .block #b84
    .block #b88
    .block #b85
    .block #b86
    .block #b90
  }
  .bb #b94 () {
    jump b93($b0.1, f7.m1, $b0.0, $b0.2, %36, f7.m2)
  }
  .bb #b95 (unit) {
    let _ = store int32 field($b83.5, 0 * @32) <- 0
    jump b90(())
  }
  .bb #b97 () {
    let %97: int32 = load int32 offset($b83.2, %90 * @32)
    let %98: int32 = load int32 offset($b83.2, $b83.0 * @32)
    let _ = store int32 offset($b83.2, %90 * @32) <- %98
    let _ = store int32 offset($b83.2, $b83.0 * @32) <- %97
    jump b95(())
  }
  .bb #b101 () {
    let %101: unit = call f4(%21, %8, $b0.0, f7.m0)
    let %102: unit = call f4(%8, %22, $b0.0, f7.m0)
    let %103: unit = call f4(%21, %8, $b0.0, f7.m0)
    jump b22(%103)
  }
  .bb #b104 () {
    let %104: unit = call f4(%12, %8, $b0.0, f7.m0)
    let %105: unit = call f4(%8, %15, $b0.0, f7.m0)
    let %106: unit = call f4(%12, %8, $b0.0, f7.m0)
    jump b8(%106)
  }
}
.fn main.401 #f9 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = ext_call minimbt_read_int()
    let _ = alloc <m0: array[int32] heap(%0)> <- [..] = 0
    let %2: unit = call f8(0, f9.m0, %0)
    let %3: unit = call f7(f9.m0, 0, %0)
    let %4: unit = call f1(f9.m0, 0, %0)
    return %4
  }
}
.fn sort_3.399 #f5 : fn(int32, int32, int32, array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f4($f0, $f1, $f3, $f4)
    let %1: unit = call f4($f1, $f2, $f3, $f4)
    let %2: unit = call f4($f0, $f1, $f3, $f4)
    return %2
  }
}
.fn g.396 #f2 : fn(int32, array[int32], int32) -> unit
.freevars ()
.entry b8 {
  .bb #b0 (int32, array[int32], int32) {
    let %0: int32 = add(1, $b0.2)
    let %1: bool = le(%0, $b0.0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = load int32 offset($b0.1, $b0.0 * @32)
    let %3: int32 = sub($b0.0, 1)
    let %4: int32 = load int32 offset($b0.1, %3 * @32)
    let %5: int32 = sub(%4, 1)
    let %6: bool = le(%2, %5)
    br %6 b3() b4()
  }
  .bb #b2 () {
    jump b6(())
  }
  .bb #b3 () {
    let %7: int32 = sub($b0.0, 1)
    jump b10()
  }
  .bb #b4 () {
    jump b5(())
  }
  .bb #b5 (unit) {
    jump b6($b5.0)
  }
  .bb #b6 (unit) {
    return $b6.0
  }
  .loop #b7 pre #Some(b8) header #b0 {
    .block #b6
    .block #b4
    .block #b1
    .block #b5
    .block #b2
    .block #b3
  }
  .bb #b8 () {
    jump b7($f0, $f1, $f2)
  }
  .bb #b9 (unit) {
    let %9: int32 = sub($b0.0, 1)
    jump b0(%9, $b0.1, $b0.2)
  }
  .bb #b10 () {
    let %10: int32 = load int32 offset($b0.1, $b0.0 * @32)
    let %11: int32 = load int32 offset($b0.1, %7 * @32)
    let _ = store int32 offset($b0.1, $b0.0 * @32) <- %11
    let _ = store int32 offset($b0.1, %7 * @32) <- %10
    jump b9(())
  }
}
.fn input.402 #f8 : fn(int32, array[int32], int32) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (int32, array[int32], int32) {
    let %0: int32 = sub($b0.2, 1)
    let %1: bool = le($b0.0, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = ext_call minimbt_read_int()
    let _ = store int32 offset($b0.1, $b0.0 * @32) <- %2
    let %4: int32 = add($b0.0, 1)
    jump b0(%4, $b0.1, $b0.2)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1, $f2)
  }
}
.fn sort_2.398 #f4 : fn(int32, int32, array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 offset($f2, $f1 * @32)
    let %1: int32 = load int32 offset($f2, $f0 * @32)
    let %2: int32 = sub(%1, 1)
    let %3: bool = le(%0, %2)
    br %3 b1() b2()
  }
  .bb #b1 () {
    jump b8()
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .bb #b4 (unit) {
    let %5: int32 = load int32 field($f3, 0 * @32)
    let %6: int32 = add(%5, 1)
    let _ = store int32 field($f3, 0 * @32) <- %6
    jump b3(())
  }
  .bb #b8 () {
    let %8: int32 = load int32 offset($f2, $f0 * @32)
    let %9: int32 = load int32 offset($f2, $f1 * @32)
    let _ = store int32 offset($f2, $f0 * @32) <- %9
    let _ = store int32 offset($f2, $f1 * @32) <- %8
    jump b4(())
  }
}
.fn T$start #f20 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f9()
    return %0
  }
}
.thunk ::0 start

