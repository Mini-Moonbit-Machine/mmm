# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn bf5l1_4 #f4 : fn(int32, array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = 0
    let %1: int32 = mul(1024, 1024)
    let _ = alloc <m1: array[int32] heap(%1)> <- [..] = 0
    let _ = alloc <m2: array[int32] heap(1)> <- [..] = 0
    let %4: int32 = call f3(0, f4.m0, $f0, f4.m1, $f1, f4.m2)
    return ()
  }
}
.fn read_ch_until_newline_or_eof1l0_0 #f0 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = ext_call minimbt_read_char()
    let %1: bool = eq(%0, 10)
    br %1 b1() b2()
  }
  .bb #b1 () {
    jump b6(-1)
  }
  .bb #b2 () {
    let %2: bool = eq(%0, 13)
    br %2 b3() b4()
  }
  .bb #b3 () {
    jump b5(-1)
  }
  .bb #b4 () {
    jump b5(%0)
  }
  .bb #b5 (int32) {
    jump b6($b5.0)
  }
  .bb #b6 (int32) {
    return $b6.0
  }
}
.fn aux40l3_3 #f3 : fn(int32, array[int32], int32, array[int32], array[int32], array[int32]) -> int32
.freevars ()
.entry b28 {
  .bb #b0 (int32, array[int32], int32, array[int32], array[int32], array[int32]) {
    let %0: bool = le($b0.2, $b0.0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b27($b0.0)
  }
  .bb #b2 () {
    let %1: int32 = load int32 offset($b0.4, $b0.0 * @32)
    let %2: bool = eq(%1, 62)
    br %2 b3() b4()
  }
  .bb #b3 () {
    let %3: int32 = load int32 field($b0.1, 0 * @32)
    let %4: int32 = add(%3, 1)
    let _ = store int32 field($b0.1, 0 * @32) <- %4
    let %6: int32 = add($b0.0, 1)
    jump b0(%6, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b4 () {
    let %8: bool = eq(%1, 60)
    br %8 b5() b6()
  }
  .bb #b5 () {
    let %9: int32 = load int32 field($b0.1, 0 * @32)
    let %10: int32 = sub(%9, 1)
    let _ = store int32 field($b0.1, 0 * @32) <- %10
    let %12: int32 = add($b0.0, 1)
    jump b0(%12, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b6 () {
    let %14: bool = eq(%1, 43)
    br %14 b7() b8()
  }
  .bb #b7 () {
    let %15: int32 = load int32 field($b0.1, 0 * @32)
    let %16: int32 = load int32 field($b0.1, 0 * @32)
    let %17: int32 = load int32 offset($b0.3, %16 * @32)
    let %18: int32 = add(%17, 1)
    let _ = store int32 offset($b0.3, %15 * @32) <- %18
    let %20: int32 = add($b0.0, 1)
    jump b0(%20, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b8 () {
    let %22: bool = eq(%1, 45)
    br %22 b9() b10()
  }
  .bb #b9 () {
    let %23: int32 = load int32 field($b0.1, 0 * @32)
    let %24: int32 = load int32 field($b0.1, 0 * @32)
    let %25: int32 = load int32 offset($b0.3, %24 * @32)
    let %26: int32 = sub(%25, 1)
    let _ = store int32 offset($b0.3, %23 * @32) <- %26
    let %28: int32 = add($b0.0, 1)
    jump b0(%28, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b10 () {
    let %30: bool = eq(%1, 46)
    br %30 b11() b12()
  }
  .bb #b11 () {
    let %31: int32 = load int32 field($b0.1, 0 * @32)
    let %32: int32 = load int32 offset($b0.3, %31 * @32)
    let %33: unit = ext_call minimbt_print_char(%32)
    let %34: int32 = add($b0.0, 1)
    jump b0(%34, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b12 () {
    let %36: bool = eq(%1, 44)
    br %36 b13() b14()
  }
  .bb #b13 () {
    let %37: int32 = load int32 field($b0.1, 0 * @32)
    let %38: int32 = call f0()
    let _ = store int32 offset($b0.3, %37 * @32) <- %38
    let %40: int32 = add($b0.0, 1)
    jump b0(%40, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b14 () {
    let %42: bool = eq(%1, 91)
    br %42 b15() b16()
  }
  .bb #b15 () {
    let _ = store int32 field($b0.5, 0 * @32) <- $b0.0
    let %44: unit = call f2($b0.1, $b0.2, $b0.0, $b0.3, $b0.4, $b0.5)
    let %45: int32 = load int32 field($b0.5, 0 * @32)
    let %46: int32 = add(%45, 1)
    jump b0(%46, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b16 () {
    let %48: bool = eq(%1, 93)
    br %48 b17() b18()
  }
  .bb #b17 () {
    jump b19($b0.0)
  }
  .bb #b18 () {
    jump b19($b0.0)
  }
  .bb #b19 (int32) {
    jump b20($b19.0)
  }
  .bb #b20 (int32) {
    jump b21($b20.0)
  }
  .bb #b21 (int32) {
    jump b22($b21.0)
  }
  .bb #b22 (int32) {
    jump b23($b22.0)
  }
  .bb #b23 (int32) {
    jump b24($b23.0)
  }
  .bb #b24 (int32) {
    jump b25($b24.0)
  }
  .bb #b25 (int32) {
    jump b26($b25.0)
  }
  .bb #b26 (int32) {
    jump b27($b26.0)
  }
  .bb #b27 (int32) {
    return $b27.0
  }
  .bb #b28 () {
    jump b0($f0, $f1, $f2, $f3, $f4, $f5)
  }
}
.fn skip21l2_1 #f1 : fn(int32, int32, int32, array[int32]) -> int32
.freevars ()
.entry b13 {
  .bb #b0 (int32, int32, int32, array[int32]) {
    let %0: bool = le($b0.2, $b0.0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b12($b0.0)
  }
  .bb #b2 () {
    let %1: int32 = load int32 offset($b0.3, $b0.0 * @32)
    let %2: bool = eq(%1, 91)
    br %2 b3() b4()
  }
  .bb #b3 () {
    let %3: int32 = add($b0.0, 1)
    let %4: int32 = add($b0.1, 1)
    jump b0(%3, %4, $b0.2, $b0.3)
  }
  .bb #b4 () {
    let %6: bool = eq(%1, 93)
    br %6 b5() b6()
  }
  .bb #b5 () {
    let %7: bool = eq($b0.1, 0)
    br %7 b7() b8()
  }
  .bb #b6 () {
    let %11: int32 = add($b0.0, 1)
    jump b0(%11, $b0.1, $b0.2, $b0.3)
  }
  .bb #b7 () {
    jump b9($b0.0)
  }
  .bb #b8 () {
    let %8: int32 = add($b0.0, 1)
    let %9: int32 = sub($b0.1, 1)
    jump b0(%8, %9, $b0.2, $b0.3)
  }
  .bb #b9 (int32) {
    jump b10($b9.0)
  }
  .bb #b10 (int32) {
    jump b11($b10.0)
  }
  .bb #b11 (int32) {
    jump b12($b11.0)
  }
  .bb #b12 (int32) {
    return $b12.0
  }
  .bb #b13 () {
    jump b0($f0, $f1, $f2, $f3)
  }
}
.fn read_prog140l3_5 #f5 : fn(int32, array[int32]) -> unit
.freevars ()
.entry b4 {
  .bb #b0 (int32, array[int32]) {
    let %0: int32 = call f0()
    let %1: bool = eq(%0, -1)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: unit = call f4($b0.0, $b0.1)
    jump b3(%2)
  }
  .bb #b2 () {
    let _ = store int32 offset($b0.1, $b0.0 * @32) <- %0
    let %4: int32 = add($b0.0, 1)
    jump b0(%4, $b0.1)
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .bb #b4 () {
    jump b0($f0, $f1)
  }
}
.fn main136l2_6 #f6 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap(1024)> <- [..] = 0
    let %1: unit = call f5(0, f6.m0)
    return ()
  }
}
.fn T$start_14 #f14 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f6()
    return %0
  }
}
.fn lp108l4_2 #f2 : fn(array[int32], int32, int32, array[int32], array[int32], array[int32]) -> unit
.freevars ()
.entry b4 {
  .bb #b0 (array[int32], int32, int32, array[int32], array[int32], array[int32]) {
    let %0: int32 = load int32 field($b0.0, 0 * @32)
    let %1: int32 = load int32 offset($b0.3, %0 * @32)
    let %2: bool = eq(%1, 0)
    br %2 b1() b2()
  }
  .bb #b1 () {
    let %3: int32 = add($b0.2, 1)
    let %4: int32 = call f1(%3, 0, $b0.1, $b0.4)
    let _ = store int32 field($b0.5, 0 * @32) <- %4
    jump b3(())
  }
  .bb #b2 () {
    let %6: int32 = add($b0.2, 1)
    let %7: int32 = call f3(%6, $b0.0, $b0.1, $b0.3, $b0.4, $b0.5)
    let _ = store int32 field($b0.5, 0 * @32) <- %7
    jump b0($b0.0, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .bb #b4 () {
    jump b0($f0, $f1, $f2, $f3, $f4, $f5)
  }
}
.thunk ::0 start
