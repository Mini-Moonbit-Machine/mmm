# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn main.167 #f3 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = ext_call minimbt_read_int()
    let _ = alloc <m0: array[int32] heap(%0)> <- [..] = 0
    jump b1(0)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b10
  }
  .bb #b2 (int32) {
    let %2: int32 = sub(%0, 1)
    let %3: bool = le($b2.0, %2)
    br %3 b3() b4()
  }
  .bb #b3 () {
    let %4: int32 = ext_call minimbt_read_int()
    let _ = store int32 offset(f3.m0, $b2.0 * @32) <- %4
    let %6: int32 = add($b2.0, 1)
    jump b2(%6)
  }
  .bb #b4 () {
    let %7: int32 = sub(%0, 1)
    let %8: unit = call f2(f3.m0, 0, %7)
    jump b5(0)
  }
  .loop #b5 pre #Some(b4) header #b6 {
    .block #b7
    .block #b8
    .block #b9
  }
  .bb #b6 (int32) {
    let %9: int32 = sub(%0, 1)
    let %10: bool = le($b6.0, %9)
    br %10 b7() b8()
  }
  .bb #b7 () {
    let %11: int32 = load int32 offset(f3.m0, $b6.0 * @32)
    let %12: unit = ext_call minimbt_print_int(%11)
    let %13: unit = ext_call minimbt_print_endline()
    let %14: int32 = add($b6.0, 1)
    jump b6(%14)
  }
  .bb #b8 () {
    jump b9(())
  }
  .bb #b9 (any) {
    return $b9.0
  }
  .bb #b10 (any) {
    return $b10.0
  }
}
.fn quicksort.166 #f2 : fn(array[int32], int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1($f0, $f1, $f2)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
  }
  .bb #b2 (array[int32], int32, int32) {
    let %0: int32 = sub($b2.2, 1)
    let %1: bool = le($b2.1, %0)
    br %1 b3() b4()
  }
  .bb #b3 () {
    jump b7()
  }
  .bb #b4 () {
    jump b5(())
  }
  .bb #b5 (any) {
    return $b5.0
  }
  .bb #b6 (int32) {
    let %3: int32 = sub($b6.0, 1)
    let %4: unit = call f2($b2.0, $b2.1, %3)
    let %5: int32 = add($b6.0, 1)
    jump b2($b2.0, %5, $b2.2)
  }
  .bb #b7 () {
    let %6: int32 = load int32 offset($b2.0, $b2.2 * @32)
    let %7: int32 = sub($b2.1, 1)
    let _ = alloc <m7: array[int32] heap(1)> <- [..] = %7
    jump b20()
  }
  .bb #b8 (unit) {
    let %10: int32 = load int32 field(f2.m7, 0 * @32)
    let %11: int32 = add(%10, 1)
    let _ = store int32 field(f2.m7, 0 * @32) <- %11
    let %13: int32 = load int32 field(f2.m7, 0 * @32)
    let %14: int32 = load int32 offset($b2.0, %13 * @32)
    let %15: int32 = load int32 offset($b2.0, $b2.2 * @32)
    let _ = store int32 offset($b2.0, %13 * @32) <- %15
    let _ = store int32 offset($b2.0, $b2.2 * @32) <- %14
    let %18: int32 = load int32 field(f2.m7, 0 * @32)
    jump b6(%18)
  }
  .bb #b20 () {
    jump b21($b2.1)
  }
  .loop #b21 pre #Some(b20) header #b22 {
    .block #b23
    .block #b24
    .block #b25
    .block #b26
    .block #b27
    .block #b28
  }
  .bb #b22 (int32) {
    let %19: int32 = sub($b2.2, 1)
    let %20: bool = le($b22.0, %19)
    br %20 b23() b24()
  }
  .bb #b23 () {
    let %21: int32 = load int32 offset($b2.0, $b22.0 * @32)
    let %22: bool = le(%21, %6)
    br %22 b25() b26()
  }
  .bb #b24 () {
    jump b28(())
  }
  .bb #b25 () {
    let %23: int32 = load int32 field(f2.m7, 0 * @32)
    let %24: int32 = add(%23, 1)
    let _ = store int32 field(f2.m7, 0 * @32) <- %24
    let %26: int32 = load int32 field(f2.m7, 0 * @32)
    let %27: int32 = load int32 offset($b2.0, %26 * @32)
    let %28: int32 = load int32 offset($b2.0, $b22.0 * @32)
    let _ = store int32 offset($b2.0, %26 * @32) <- %28
    let _ = store int32 offset($b2.0, $b22.0 * @32) <- %27
    let %31: int32 = add($b22.0, 1)
    jump b22(%31)
  }
  .bb #b26 () {
    let %32: int32 = add($b22.0, 1)
    jump b22(%32)
  }
  .bb #b27 (any) {
    jump b28($b27.0)
  }
  .bb #b28 (any) {
    jump b8($b28.0)
  }
}
.fn T$start #f8 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f3()
    return %0
  }
}
.thunk ::0 start
