# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn swap.253 #f0 : fn(array[int32], int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 offset($f0, $f1 * @32)
    let %1: int32 = load int32 offset($f0, $f2 * @32)
    let _ = store int32 offset($f0, $f1 * @32) <- %1
    let _ = store int32 offset($f0, $f2 * @32) <- %0
    return ()
  }
}
.fn main.255 #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = ext_call minimbt_read_int()
    let _ = alloc <m0: array[int32] heap(%0)> <- [..] = 0
    jump b1(0)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b10
  }
  .bb #b2 (int32) {
    let %2: int32 = sub(%0, 1)
    let %3: bool = le($b2.0, %2)
    br %3 b3() b4()
  }
  .bb #b3 () {
    let %4: int32 = ext_call minimbt_read_int()
    let _ = store int32 offset(f2.m0, $b2.0 * @32) <- %4
    let %6: int32 = add($b2.0, 1)
    jump b2(%6)
  }
  .bb #b4 () {
    let %7: int32 = sub(%0, 1)
    let %8: unit = call f1(f2.m0, 0, %7)
    jump b5(0)
  }
  .loop #b5 pre #Some(b4) header #b6 {
    .block #b7
    .block #b8
    .block #b9
  }
  .bb #b6 (int32) {
    let %9: int32 = sub(%0, 1)
    let %10: bool = le($b6.0, %9)
    br %10 b7() b8()
  }
  .bb #b7 () {
    let %11: int32 = load int32 offset(f2.m0, $b6.0 * @32)
    let %12: unit = ext_call minimbt_print_int(%11)
    let %13: unit = ext_call minimbt_print_endline()
    let %14: int32 = add($b6.0, 1)
    jump b6(%14)
  }
  .bb #b8 () {
    jump b9(())
  }
  .bb #b9 (any) {
    return $b9.0
  }
  .bb #b10 (any) {
    return $b10.0
  }
}
.fn quicksort.254 #f1 : fn(array[int32], int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1($f0, $f1, $f2)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b13
  }
  .bb #b2 (array[int32], int32, int32) {
    let %0: int32 = sub($b2.2, 1)
    let %1: bool = le($b2.1, %0)
    br %1 b3() b4()
  }
  .bb #b3 () {
    let %2: int32 = load int32 offset($b2.0, $b2.2 * @32)
    let %3: int32 = sub($b2.1, 1)
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = %3
    jump b5($b2.1)
  }
  .bb #b4 () {
    jump b13(())
  }
  .loop #b5 pre #Some(b3) header #b6 {
    .block #b7
    .block #b8
    .block #b9
    .block #b10
    .block #b11
    .block #b12
  }
  .bb #b6 (int32) {
    let %5: int32 = sub($b2.2, 1)
    let %6: bool = le($b6.0, %5)
    br %6 b7() b8()
  }
  .bb #b7 () {
    let %7: int32 = load int32 offset($b2.0, $b6.0 * @32)
    let %8: bool = le(%7, %2)
    br %8 b9() b10()
  }
  .bb #b8 () {
    let %16: int32 = load int32 offset(f1.m0, 0 * @32)
    let %17: int32 = add(%16, 1)
    let _ = store int32 offset(f1.m0, 0 * @32) <- %17
    let %19: int32 = load int32 offset(f1.m0, 0 * @32)
    let %20: int32 = load int32 offset($b2.0, %19 * @32)
    let %21: int32 = load int32 offset($b2.0, $b2.2 * @32)
    let _ = store int32 offset($b2.0, %19 * @32) <- %21
    let _ = store int32 offset($b2.0, $b2.2 * @32) <- %20
    let %24: int32 = load int32 offset(f1.m0, 0 * @32)
    let %25: int32 = sub(%24, 1)
    let %26: unit = call f1($b2.0, $b2.1, %25)
    let %27: int32 = add(%24, 1)
    jump b2($b2.0, %27, $b2.2)
  }
  .bb #b9 () {
    let %9: int32 = load int32 offset(f1.m0, 0 * @32)
    let %10: int32 = add(%9, 1)
    let _ = store int32 offset(f1.m0, 0 * @32) <- %10
    let %12: int32 = load int32 offset(f1.m0, 0 * @32)
    let %13: unit = call f0($b2.0, %12, $b6.0)
    let %14: int32 = add($b6.0, 1)
    jump b6(%14)
  }
  .bb #b10 () {
    let %15: int32 = add($b6.0, 1)
    jump b6(%15)
  }
  .bb #b11 (any) {
    jump b12($b11.0)
  }
  .bb #b12 (any) {
    return $b12.0
  }
  .bb #b13 (any) {
    return $b13.0
  }
}
.fn T$start #f6 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f2()
    return %0
  }
}
.thunk ::0 start
