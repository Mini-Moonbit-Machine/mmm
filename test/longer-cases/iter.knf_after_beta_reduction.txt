let rec main33: Var({val: Some(Unit)}) = () {
  let _34: Int = Int(5)
  let _35: Int = Int(1)
  let arr.36: Array(Int) = ExtApply(minimbt_create_array, [_34, _35, ])
  let _37: Int = Int(0)
  let _38: Int = Int(1)
  let _40: Unit = Put arr.36[_37] = _38
  let _41: Int = Int(1)
  let _42: Int = Int(2)
  let _44: Unit = Put arr.36[_41] = _42
  let _45: Int = Int(2)
  let _46: Int = Int(3)
  let _48: Unit = Put arr.36[_45] = _46
  let _49: Int = Int(3)
  let _50: Int = Int(4)
  let _52: Unit = Put arr.36[_49] = _50
  let _53: Int = Int(4)
  let _54: Int = Int(5)
  let _56: Unit = Put arr.36[_53] = _54
  let _57: Int = Int(5)
  let rec do6.66: Bool = (yield7.67: Var({val: Some(Fun([Int], Bool))})) {
    let rec next9.68: Bool = (i10.69: Var({val: Some(Int)})) {
      let _70: Int = Int(1)
      let _71: Int = Sub(_57, _70)
      if (i10.69 <= _71) then {
        let _72: Int = Get arr.36[i10.69]
        let _73: Bool = Apply(yield7.67, [_72, ])
        let _74: Bool = Bool(true)
        if (_73 == _74) then {
          let _75: Int = Int(1)
          let _76: Int = Add(i10.69, _75)
          Apply(next9.68, [_76, ])
        } else {
          Bool(false)
        }
      } else {
        Bool(false)
      }
    }
    let _77: Int = Int(0)
    Apply(next9.68, [_77, ])
  }
  let rec print59: Unit = (x60.61: Var({val: Some(Int)})) {
    ExtApply(minimbt_print_int, [x60.61, ])
  }
  let rec yield25.78: Bool = (x26.79: Var({val: Some(Int)})) {
    let _80: Unit = Apply(print59, [x26.79, ])
    Bool(true)
  }
  let rec do30.81: Var({val: Some(Unit)}) = () {
    let _82: Bool = Apply(do6.66, [yield25.78, ])
    let _83: Bool = Bool(true)
    if (_82 == _83) then {
      Apply(do30.81, [])
    } else {
      Unit
    }
  }
  Apply(do30.81, [])
}
Apply(main33, [])