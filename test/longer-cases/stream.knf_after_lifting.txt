let rec aux.744: Tuple([Int, Int]) = (u.19: Var({val: Some(Unit)}), f.17: Fun([Int], Int), stream.16: Fun([Unit], Tuple([Int, Int]))) {
  let _20: Unit = Unit
  let _21: Tuple([Int, Int]) = Apply(stream.16, [_20, ])
  let (ok.22: Var({val: Some(Int)}), val.23: Var({val: Some(Int)})) = _21
  let _24: Int = Int(0)
  if (ok.22 == _24) then {
    let _25: Int = Int(0)
    let _26: Int = Int(0)
    Tuple([_25, _26, ])
  } else {
    let r.27: Int = Apply(f.17, [val.23, ])
    let _28: Int = Int(0)
    if (r.27 == _28) then {
      let _29: Int = Int(1)
      Tuple([_29, val.23, ])
    } else {
      let _30: Unit = Unit
      Apply(aux.744, [_30, f.17, stream.16, ])
    }
  }
}
let rec filter.743: Fun([Unit], Tuple([Int, Int])) = (stream.16: Fun([Unit], Tuple([Int, Int])), f.17: Fun([Int], Int)) {
  let rec aux.745: Tuple([Int, Int]) = (u.19: Var({val: Some(Unit)})) {
    Apply(aux.744, [u.19, f.17, stream.16, ])
  }
  Var(aux.745)
}
let rec aux.747: Tuple([Int, Int]) = (u.49: Var({val: Some(Unit)}), to.45: Int, state.47: Array(Int)) {
  let _50: Int = Int(0)
  let val.51: Int = Get state.47[_50]
  if (val.51 == to.45) then {
    let _52: Int = Int(0)
    let _53: Int = Int(0)
    Tuple([_52, _53, ])
  } else {
    let _54: Int = Int(0)
    let _55: Int = Int(1)
    let _56: Int = Add(val.51, _55)
    let _57: Unit = Put state.47[_54] = _56
    let _58: Int = Int(1)
    Tuple([_58, val.51, ])
  }
}
let rec range.746: Fun([Unit], Tuple([Int, Int])) = (from.44: Int, to.45: Int) {
  let _46: Int = Int(1)
  let state.47: Array(Int) = ExtApply(minimbt_create_array, [_46, from.44, ])
  let rec aux.748: Tuple([Int, Int]) = (u.49: Var({val: Some(Unit)})) {
    Apply(aux.747, [u.49, to.45, state.47, ])
  }
  Var(aux.748)
}
let rec fold.749: Int = (stream.64: Fun([Unit], Tuple([Int, Int])), f.65: Fun([Int, Int], Int), acc.66: Int) {
  let _67: Unit = Unit
  let _68: Tuple([Int, Int]) = Apply(stream.64, [_67, ])
  let (ok.69: Var({val: Some(Int)}), val.70: Var({val: Some(Int)})) = _68
  let _71: Int = Int(0)
  if (ok.69 == _71) then {
    Var(acc.66)
  } else {
    let _72: Int = Apply(f.65, [acc.66, val.70, ])
    let _108: Unit = Unit
    let _109: Tuple([Int, Int]) = Apply(stream.64, [_108, ])
    let (ok.110: Var({val: Some(Int)}), val.111: Var({val: Some(Int)})) = _109
    let _112: Int = Int(0)
    if (ok.110 == _112) then {
      Var(_72)
    } else {
      let _113: Int = Apply(f.65, [_72, val.111, ])
      Apply(fold.749, [stream.64, f.65, _113, ])
    }
  }
}
let rec aux.751: Tuple([Int, Int]) = (u.431: Var({val: Some(Unit)}), range100.90: Fun([Unit], Tuple([Int, Int])), range1000.93: Fun([Unit], Tuple([Int, Int]))) {
  let _432: Unit = Unit
  let _433: Tuple([Int, Int]) = Apply(range100.90, [_432, ])
  let (ok.434: Var({val: Some(Int)}), val.435: Var({val: Some(Int)})) = _433
  let _436: Int = Int(0)
  if (ok.434 == _436) then {
    let _437: Unit = Unit
    Apply(range1000.93, [_437, ])
  } else {
    let _438: Int = Int(1)
    Tuple([_438, val.435, ])
  }
}
let rec aux.752: Int = (y.591: Int, _95: Int) {
  Add(_95, y.591)
}
let rec aux.753: Tuple([Int, Int]) = (u.663: Var({val: Some(Unit)}), _95: Int, range100.90: Fun([Unit], Tuple([Int, Int])), range1000.93: Fun([Unit], Tuple([Int, Int]))) {
  let _664: Unit = Unit
  let _665: Tuple([Int, Int]) = Apply(aux.751, [_664, range100.90, range1000.93, ])
  let (ok.666: Var({val: Some(Int)}), val.667: Var({val: Some(Int)})) = _665
  let _668: Int = Int(0)
  if (ok.666 == _668) then {
    let _669: Int = Int(0)
    let _670: Int = Int(0)
    Tuple([_669, _670, ])
  } else {
    let _671: Int = Int(1)
    let _672: Int = Apply(aux.752, [val.667, _95, ])
    Tuple([_671, _672, ])
  }
}
let rec aux.754: Int = (y.708: Int, _98: Int) {
  if (_98 <= y.708) then {
    Int(0)
  } else {
    Int(1)
  }
}
let rec aux.757: Int = (y.726: Int, _101: Int) {
  if (y.726 <= _101) then {
    Int(0)
  } else {
    Int(1)
  }
}
let rec add.759: Int = (x.728: Int, y.729: Int) {
  Add(x.728, y.729)
}
let rec main.750: Var({val: Some(Unit)}) = () {
  let _88: Int = Int(0)
  let _89: Int = Int(100)
  let range100.90: Fun([Unit], Tuple([Int, Int])) = Apply(range.746, [_88, _89, ])
  let _91: Int = Int(0)
  let _92: Int = Int(1000)
  let range1000.93: Fun([Unit], Tuple([Int, Int])) = Apply(range.746, [_91, _92, ])
  let _95: Int = Int(1)
  let _98: Int = Int(50)
  let rec aux.755: Tuple([Int, Int]) = (u.663: Var({val: Some(Unit)})) {
    Apply(aux.753, [u.663, _95, range100.90, range1000.93, ])
  }
  let rec aux.756: Int = (y.708: Int) {
    Apply(aux.754, [y.708, _98, ])
  }
  let over50.100: Fun([Unit], Tuple([Int, Int])) = Apply(filter.743, [aux.755, aux.756, ])
  let _101: Int = Int(1200)
  let rec aux.758: Int = (y.726: Int) {
    Apply(aux.757, [y.726, _101, ])
  }
  let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.743, [over50.100, aux.758, ])
  let _730: Int = Int(0)
  let _731: Unit = Unit
  let _732: Tuple([Int, Int]) = Apply(under1200.103, [_731, ])
  let (ok.733: Var({val: Some(Int)}), val.734: Var({val: Some(Int)})) = _732
  let _735: Int = Int(0)
  if (ok.733 == _735) then {
    let _105: Unit = ExtApply(minimbt_print_int, [_730, ])
    let _106: Int = Int(10)
    let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
    Unit
  } else {
    let _736: Int = Apply(add.759, [_730, val.734, ])
    let _737: Unit = Unit
    let _738: Tuple([Int, Int]) = Apply(under1200.103, [_737, ])
    let (ok.739: Var({val: Some(Int)}), val.740: Var({val: Some(Int)})) = _738
    let _741: Int = Int(0)
    if (ok.739 == _741) then {
      let _105: Unit = ExtApply(minimbt_print_int, [_736, ])
      let _106: Int = Int(10)
      let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
      Unit
    } else {
      let _742: Int = Apply(add.759, [_736, val.740, ])
      let rec add.760: Int = (x.728: Int, y.729: Int) {
        Apply(add.759, [x.728, y.729, ])
      }
      let sum.104: Int = Apply(fold.749, [under1200.103, add.760, _742, ])
      let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
      let _106: Int = Int(10)
      let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
      Unit
    }
  }
}
Apply(main.750, [])