let rec aux25.174: Tuple([Int, Int]) = (u26.27: Var({val: Some(Unit)}), f23.24: Fun([Int], Int), stream21.22: Fun([Unit], Tuple([Int, Int]))) {
  let _28: Unit = Unit
  let _29: Tuple([Int, Int]) = Apply(stream21.22, [_28, ])
  let (ok30.31: Var({val: Some(Int)}), val32.33: Var({val: Some(Int)})) = _29
  let _34: Int = Int(0)
  if (ok30.31 == _34) then {
    let _35: Int = Int(0)
    let _36: Int = Int(0)
    Tuple([_35, _36, ])
  } else {
    let r.37: Int = Apply(f23.24, [val32.33, ])
    let _38: Int = Int(0)
    if (r.37 == _38) then {
      let _39: Int = Int(1)
      Tuple([_39, val32.33, ])
    } else {
      let _40: Unit = Unit
      Apply(aux25.174, [_40, f23.24, stream21.22, ])
    }
  }
}
let rec filter20.173: Fun([Unit], Tuple([Int, Int])) = (stream21.22: Fun([Unit], Tuple([Int, Int])), f23.24: Fun([Int], Int)) {
  let rec aux25.175: Tuple([Int, Int]) = (u26.27: Var({val: Some(Unit)})) {
    Apply(aux25.174, [u26.27, f23.24, stream21.22, ])
  }
  Var(aux25.175)
}
let rec aux65.177: Tuple([Int, Int]) = (u66.67: Var({val: Some(Unit)}), to61.62: Int, state.64: Array(Int)) {
  let _68: Int = Int(0)
  let val.69: Int = Get state.64[_68]
  if (val.69 == to61.62) then {
    let _70: Int = Int(0)
    let _71: Int = Int(0)
    Tuple([_70, _71, ])
  } else {
    let _72: Int = Int(0)
    let _73: Int = Int(1)
    let _74: Int = Add(val.69, _73)
    let _76: Unit = Put state.64[_72] = _74
    let _77: Int = Int(1)
    Tuple([_77, val.69, ])
  }
}
let rec range58.176: Fun([Unit], Tuple([Int, Int])) = (from59.60: Int, to61.62: Int) {
  let _63: Int = Int(1)
  let state.64: Array(Int) = ExtApply(minimbt_create_array, [_63, from59.60, ])
  let rec aux65.178: Tuple([Int, Int]) = (u66.67: Var({val: Some(Unit)})) {
    Apply(aux65.177, [u66.67, to61.62, state.64, ])
  }
  Var(aux65.178)
}
let rec fold84.179: Int = (stream85.86: Fun([Unit], Tuple([Int, Int])), f87.88: Fun([Int, Int], Int), acc89.90: Int) {
  let _91: Unit = Unit
  let _92: Tuple([Int, Int]) = Apply(stream85.86, [_91, ])
  let (ok93.94: Var({val: Some(Int)}), val95.96: Var({val: Some(Int)})) = _92
  let _97: Int = Int(0)
  if (ok93.94 == _97) then {
    Var(acc89.90)
  } else {
    let _98: Int = Apply(f87.88, [acc89.90, val95.96, ])
    Apply(fold84.179, [stream85.86, f87.88, _98, ])
  }
}
let rec aux46.181: Tuple([Int, Int]) = (u47.144: Var({val: Some(Unit)}), range100.123: Fun([Unit], Tuple([Int, Int])), range1000.126: Fun([Unit], Tuple([Int, Int]))) {
  let _145: Unit = Unit
  let _146: Tuple([Int, Int]) = Apply(range100.123, [_145, ])
  let (ok51.147: Var({val: Some(Int)}), val53.148: Var({val: Some(Int)})) = _146
  let _149: Int = Int(0)
  if (ok51.147 == _149) then {
    let _150: Unit = Unit
    Apply(range1000.126, [_150, ])
  } else {
    let _151: Int = Int(1)
    Tuple([_151, val53.148, ])
  }
}
let rec aux81.183: Int = (y82.153: Int, _128: Int) {
  Add(_128, y82.153)
}
let rec aux6.185: Tuple([Int, Int]) = (u7.155: Var({val: Some(Unit)}), _129: Fun([Int], Int), catt.127: Fun([Unit], Tuple([Int, Int]))) {
  let _156: Unit = Unit
  let _157: Tuple([Int, Int]) = Apply(catt.127, [_156, ])
  let (ok11.158: Var({val: Some(Int)}), val13.159: Var({val: Some(Int)})) = _157
  let _160: Int = Int(0)
  if (ok11.158 == _160) then {
    let _161: Int = Int(0)
    let _162: Int = Int(0)
    Tuple([_161, _162, ])
  } else {
    let _163: Int = Int(1)
    let _164: Int = Apply(_129, [val13.159, ])
    Tuple([_163, _164, ])
  }
}
let rec aux111.187: Int = (y112.166: Int, _131: Int) {
  if (_131 <= y112.166) then {
    Int(0)
  } else {
    Int(1)
  }
}
let rec aux117.189: Int = (y118.168: Int, _134: Int) {
  if (y118.168 <= _134) then {
    Int(0)
  } else {
    Int(1)
  }
}
let rec add102.191: Int = (x103.170: Int, y105.171: Int) {
  Add(x103.170, y105.171)
}
let rec main120.180: Var({val: Some(Unit)}) = () {
  let _121: Int = Int(0)
  let _122: Int = Int(100)
  let range100.123: Fun([Unit], Tuple([Int, Int])) = Apply(range58.176, [_121, _122, ])
  let _124: Int = Int(0)
  let _125: Int = Int(1000)
  let range1000.126: Fun([Unit], Tuple([Int, Int])) = Apply(range58.176, [_124, _125, ])
  let rec aux46.182: Tuple([Int, Int]) = (u47.144: Var({val: Some(Unit)})) {
    Apply(aux46.181, [u47.144, range100.123, range1000.126, ])
  }
  let catt.127: Fun([Unit], Tuple([Int, Int])) = Var(aux46.182)
  let _128: Int = Int(1)
  let rec aux81.184: Int = (y82.153: Int) {
    Apply(aux81.183, [y82.153, _128, ])
  }
  let _129: Fun([Int], Int) = Var(aux81.184)
  let rec aux6.186: Tuple([Int, Int]) = (u7.155: Var({val: Some(Unit)})) {
    Apply(aux6.185, [u7.155, _129, catt.127, ])
  }
  let addone.130: Fun([Unit], Tuple([Int, Int])) = Var(aux6.186)
  let _131: Int = Int(50)
  let rec aux111.188: Int = (y112.166: Int) {
    Apply(aux111.187, [y112.166, _131, ])
  }
  let _132: Fun([Int], Int) = Var(aux111.188)
  let over50.133: Fun([Unit], Tuple([Int, Int])) = Apply(filter20.173, [addone.130, _132, ])
  let _134: Int = Int(1200)
  let rec aux117.190: Int = (y118.168: Int) {
    Apply(aux117.189, [y118.168, _134, ])
  }
  let _135: Fun([Int], Int) = Var(aux117.190)
  let under1200.136: Fun([Unit], Tuple([Int, Int])) = Apply(filter20.173, [over50.133, _135, ])
  let _172: Int = Int(0)
  let rec add102.192: Int = (x103.170: Int, y105.171: Int) {
    Apply(add102.191, [x103.170, y105.171, ])
  }
  let sum.137: Int = Apply(fold84.179, [under1200.136, add102.192, _172, ])
  let _139: Unit = ExtApply(minimbt_print_int, [sum.137, ])
  let _140: Int = Int(10)
  let _142: Unit = ExtApply(minimbt_print_char, [_140, ])
  Unit
}
Apply(main120.180, [])