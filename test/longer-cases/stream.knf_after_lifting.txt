let rec aux6l1: Tuple([Int, Int]) = (u7.8: Var({val: Some(Unit)}), f4.5: Fun([Int], Int), stream2.3: Fun([Unit], Tuple([Int, Int]))) {
  let _9: Unit = Unit
  let _10: Tuple([Int, Int]) = Apply(stream2.3, [_9, ])
  let (, ok11.12: Var({val: Some(Int)})val13.14: Var({val: Some(Int)})) = _10let _15: Int = Int(0)
  if (ok11.12 == _15) then {
    let _16: Int = Int(0)
    let _17: Int = Int(0)
    Tuple([_16, _17, ])
  } else {
    let _18: Int = Int(1)
    let _19: Int = Apply(f4.5, [val13.14, ])
    Tuple([_18, _19, ])
  }
}
let rec map1l0: Fun([Unit], Tuple([Int, Int])) = (stream2.3: Fun([Unit], Tuple([Int, Int])), f4.5: Fun([Int], Int)) {
  let rec aux6l1c0: Tuple([Int, Int]) = (u7.8: Var({val: Some(Unit)})) {
    Apply(aux6l1, [u7.8, f4.5, stream2.3, ])
  }
  Var(aux6l1c0)
}
let rec aux25l2: Tuple([Int, Int]) = (u26.27: Var({val: Some(Unit)}), f23.24: Fun([Int], Int), stream21.22: Fun([Unit], Tuple([Int, Int]))) {
  let _28: Unit = Unit
  let _29: Tuple([Int, Int]) = Apply(stream21.22, [_28, ])
  let (, ok30.31: Var({val: Some(Int)})val32.33: Var({val: Some(Int)})) = _29let _34: Int = Int(0)
  if (ok30.31 == _34) then {
    let _35: Int = Int(0)
    let _36: Int = Int(0)
    Tuple([_35, _36, ])
  } else {
    let r.37: Int = Apply(f23.24, [val32.33, ])
    let _38: Int = Int(0)
    if (r.37 == _38) then {
      let _39: Int = Int(1)
      Tuple([_39, val32.33, ])
    } else {
      let _40: Unit = Unit
      Apply(aux25l2, [_40, f23.24, stream21.22, ])
    }
  }
}
let rec filter20l1: Fun([Unit], Tuple([Int, Int])) = (stream21.22: Fun([Unit], Tuple([Int, Int])), f23.24: Fun([Int], Int)) {
  let rec aux25l2c0: Tuple([Int, Int]) = (u26.27: Var({val: Some(Unit)})) {
    Apply(aux25l2, [u26.27, f23.24, stream21.22, ])
  }
  Var(aux25l2c0)
}
let rec aux46l3: Tuple([Int, Int]) = (u47.48: Var({val: Some(Unit)}), stream142.43: Fun([Unit], Tuple([Int, Int])), stream244.45: Fun([Unit], Tuple([Int, Int]))) {
  let _49: Unit = Unit
  let _50: Tuple([Int, Int]) = Apply(stream142.43, [_49, ])
  let (, ok51.52: Var({val: Some(Int)})val53.54: Var({val: Some(Int)})) = _50let _55: Int = Int(0)
  if (ok51.52 == _55) then {
    let _56: Unit = Unit
    Apply(stream244.45, [_56, ])
  } else {
    let _57: Int = Int(1)
    Tuple([_57, val53.54, ])
  }
}
let rec concat41l2: Fun([Unit], Tuple([Int, Int])) = (stream142.43: Fun([Unit], Tuple([Int, Int])), stream244.45: Fun([Unit], Tuple([Int, Int]))) {
  let rec aux46l3c0: Tuple([Int, Int]) = (u47.48: Var({val: Some(Unit)})) {
    Apply(aux46l3, [u47.48, stream142.43, stream244.45, ])
  }
  Var(aux46l3c0)
}
let rec aux65l4: Tuple([Int, Int]) = (u66.67: Var({val: Some(Unit)}), to61.62: Int, state.64: Array(Int)) {
  let _68: Int = Int(0)
  let val.69: Int = Get state.64[_68]
  if (val.69 == to61.62) then {
    let _70: Int = Int(0)
    let _71: Int = Int(0)
    Tuple([_70, _71, ])
  } else {
    let _72: Int = Int(0)
    let _73: Int = Int(1)
    let _74: Int = Add(val.69, _73)
    let _76: Unit = Put state.64[_72] = _74
    let _77: Int = Int(1)
    Tuple([_77, val.69, ])
  }
}
let rec range58l3: Fun([Unit], Tuple([Int, Int])) = (from59.60: Int, to61.62: Int) {
  let _63: Int = Int(1)
  let state.64: Array(Int) = ExtApply(minimbt_create_array, [_63, from59.60, ])
  let rec aux65l4c0: Tuple([Int, Int]) = (u66.67: Var({val: Some(Unit)})) {
    Apply(aux65l4, [u66.67, to61.62, state.64, ])
  }
  Var(aux65l4c0)
}
let rec aux81l5: Int = (y82.83: Int, x79.80: Int) {
  Add(x79.80, y82.83)
}
let rec addx78l4: Fun([Int], Int) = (x79.80: Int) {
  let rec aux81l5c0: Int = (y82.83: Int) {
    Apply(aux81l5, [y82.83, x79.80, ])
  }
  Var(aux81l5c0)
}
let rec fold84l5: Int = (stream85.86: Fun([Unit], Tuple([Int, Int])), f87.88: Fun([Int, Int], Int), acc89.90: Int) {
  let _91: Unit = Unit
  let _92: Tuple([Int, Int]) = Apply(stream85.86, [_91, ])
  let (, ok93.94: Var({val: Some(Int)})val95.96: Var({val: Some(Int)})) = _92let _97: Int = Int(0)
  if (ok93.94 == _97) then {
    Var(acc89.90)
  } else {
    let _98: Int = Apply(f87.88, [acc89.90, val95.96, ])
    Apply(fold84l5, [stream85.86, f87.88, _98, ])
  }
}
let rec add102l7: Int = (x103.104: Int, y105.106: Int) {
  Add(x103.104, y105.106)
}
let rec sum99l6: Int = (stream100.101: Fun([Unit], Tuple([Int, Int]))) {
  let _107: Int = Int(0)
  let rec add102l7c0: Int = (x103.104: Int, y105.106: Int) {
    Apply(add102l7, [x103.104, y105.106, ])
  }
  Apply(fold84l5, [stream100.101, add102l7c0, _107, ])
}
let rec aux111l8: Int = (y112.113: Int, x109.110: Int) {
  if (x109.110 <= y112.113) then {
    Int(0)
  } else {
    Int(1)
  }
}
let rec gt108l7: Fun([Int], Int) = (x109.110: Int) {
  let rec aux111l8c0: Int = (y112.113: Int) {
    Apply(aux111l8, [y112.113, x109.110, ])
  }
  Var(aux111l8c0)
}
let rec aux117l9: Int = (y118.119: Int, x115.116: Int) {
  if (y118.119 <= x115.116) then {
    Int(0)
  } else {
    Int(1)
  }
}
let rec le114l8: Fun([Int], Int) = (x115.116: Int) {
  let rec aux117l9c0: Int = (y118.119: Int) {
    Apply(aux117l9, [y118.119, x115.116, ])
  }
  Var(aux117l9c0)
}
let rec main120l9: Var({val: Some(Unit)}) = () {
  let _121: Int = Int(0)
  let _122: Int = Int(100)
  let range100.123: Fun([Unit], Tuple([Int, Int])) = Apply(range58l3, [_121, _122, ])
  let _124: Int = Int(0)
  let _125: Int = Int(1000)
  let range1000.126: Fun([Unit], Tuple([Int, Int])) = Apply(range58l3, [_124, _125, ])
  let catt.127: Fun([Unit], Tuple([Int, Int])) = Apply(concat41l2, [range100.123, range1000.126, ])
  let _128: Int = Int(1)
  let _129: Fun([Int], Int) = Apply(addx78l4, [_128, ])
  let addone.130: Fun([Unit], Tuple([Int, Int])) = Apply(map1l0, [catt.127, _129, ])
  let _131: Int = Int(50)
  let _132: Fun([Int], Int) = Apply(gt108l7, [_131, ])
  let over50.133: Fun([Unit], Tuple([Int, Int])) = Apply(filter20l1, [addone.130, _132, ])
  let _134: Int = Int(1200)
  let _135: Fun([Int], Int) = Apply(le114l8, [_134, ])
  let under1200.136: Fun([Unit], Tuple([Int, Int])) = Apply(filter20l1, [over50.133, _135, ])
  let sum.137: Int = Apply(sum99l6, [under1200.136, ])
  let _139: Unit = ExtApply(minimbt_print_int, [sum.137, ])
  let _140: Int = Int(10)
  let _142: Unit = ExtApply(minimbt_print_char, [_140, ])
  Unit
}
Apply(main120l9, [])