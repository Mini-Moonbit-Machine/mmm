let rec fold.302: Int = (stream.86: (Unit) -> (Int, Int), f.88: (Int, Int) -> Int, acc.90: Int) {
  let _91: Unit = Unit
  let _92: (Int, Int) = Apply(stream.86, [_91, ])
  let (ok.94: Int, val.96: Int) = _92
  let _97: Int = Int(0)
  if (ok.94 == _97) then {
    Var(acc.90)
  } else {
    let _98: Int = Apply(f.88, [acc.90, val.96, ])
    Apply(fold.302, [stream.86, f.88, _98, ])
  }
}
let rec aux.304: (Int, Int) = (u.194: Unit, _122: Int, _125: Int, _128: Int, _131: Int, state.144: Array[Int], state.157: Array[Int]) {
  let _195: Unit = Unit
  let _268: Unit = Unit
  let _270: Unit = Unit
  let _272: Int = Int(0)
  let val.273: Int = Get state.144[_272]
  let _271: (Int, Int) = if (val.273 == _122) then {
    let _274: Int = Int(0)
    let _275: Int = Int(0)
    Tuple([_274, _275, ])
  } else {
    let _276: Int = Int(0)
    let _277: Int = Int(1)
    let _278: Int = Add(val.273, _277)
    let _279: Unit = Put state.144[_276] = _278
    let _280: Int = Int(1)
    Tuple([_280, val.273, ])
  }
  let (ok.281: Int, val.282: Int) = _271
  let _283: Int = Int(0)
  let _269: (Int, Int) = if (ok.281 == _283) then {
    let _284: Unit = Unit
    let _285: Int = Int(0)
    let val.286: Int = Get state.157[_285]
    if (val.286 == _125) then {
      let _287: Int = Int(0)
      let _288: Int = Int(0)
      Tuple([_287, _288, ])
    } else {
      let _289: Int = Int(0)
      let _290: Int = Int(1)
      let _291: Int = Add(val.286, _290)
      let _292: Unit = Put state.157[_289] = _291
      let _293: Int = Int(1)
      Tuple([_293, val.286, ])
    }
  } else {
    let _294: Int = Int(1)
    Tuple([_294, val.282, ])
  }
  let (ok.295: Int, val.296: Int) = _269
  let _297: Int = Int(0)
  let _196: (Int, Int) = if (ok.295 == _297) then {
    let _298: Int = Int(0)
    let _299: Int = Int(0)
    Tuple([_298, _299, ])
  } else {
    let _300: Int = Int(1)
    let _301: Int = Add(_128, val.296)
    Tuple([_300, _301, ])
  }
  let (ok.197: Int, val.198: Int) = _196
  let _199: Int = Int(0)
  if (ok.197 == _199) then {
    let _200: Int = Int(0)
    let _201: Int = Int(0)
    Tuple([_200, _201, ])
  } else {
    let r.202: Int = if (_131 <= val.198) then {
      Int(0)
    } else {
      Int(1)
    }
    let _203: Int = Int(0)
    if (r.202 == _203) then {
      let _204: Int = Int(1)
      Tuple([_204, val.198, ])
    } else {
      let _205: Unit = Unit
      Apply(aux.304, [_205, _122, _125, _128, _131, state.144, state.157, ])
    }
  }
}
let rec aux.305: (Int, Int) = (u.209: Unit, _122: Int, _125: Int, _128: Int, _131: Int, _134: Int, state.144: Array[Int], state.157: Array[Int]) {
  let _210: Unit = Unit
  let _211: (Int, Int) = Apply(aux.304, [_210, _122, _125, _128, _131, state.144, state.157, ])
  let (ok.212: Int, val.213: Int) = _211
  let _214: Int = Int(0)
  if (ok.212 == _214) then {
    let _215: Int = Int(0)
    let _216: Int = Int(0)
    Tuple([_215, _216, ])
  } else {
    let r.217: Int = if (val.213 <= _134) then {
      Int(0)
    } else {
      Int(1)
    }
    let _218: Int = Int(0)
    if (r.217 == _218) then {
      let _219: Int = Int(1)
      Tuple([_219, val.213, ])
    } else {
      let _220: Unit = Unit
      Apply(aux.305, [_220, _122, _125, _128, _131, _134, state.144, state.157, ])
    }
  }
}
let rec add.306: Int = (x.222: Int, y.223: Int) {
  Add(x.222, y.223)
}
let rec main.303: Unit = () {
  let _121: Int = Int(0)
  let _122: Int = Int(100)
  let _143: Int = Int(1)
  let state.144: Array[Int] = ExtApply(minimbt_create_array, [_143, _121, ])
  let _124: Int = Int(0)
  let _125: Int = Int(1000)
  let _156: Int = Int(1)
  let state.157: Array[Int] = ExtApply(minimbt_create_array, [_156, _124, ])
  let _128: Int = Int(1)
  let _131: Int = Int(50)
  let _134: Int = Int(1200)
  let _224: Int = Int(0)
  let rec aux.307: (Int, Int) = (u.209: Unit) {
    Apply(aux.305, [u.209, _122, _125, _128, _131, _134, state.144, state.157, ])
  }
  let rec add.308: Int = (x.222: Int, y.223: Int) {
    Apply(add.306, [x.222, y.223, ])
  }
  let sum.137: Int = Apply(fold.302, [aux.307, add.308, _224, ])
  let _139: Unit = ExtApply(minimbt_print_int, [sum.137, ])
  let _140: Int = Int(10)
  let _142: Unit = ExtApply(minimbt_print_char, [_140, ])
  Unit
}
Apply(main.303, [])
