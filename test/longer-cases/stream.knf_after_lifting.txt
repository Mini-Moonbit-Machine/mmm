let rec map1: Fun([Unit], Tuple([Int, Int])) = (stream2.3: Fun([Unit], Tuple([Int, Int])), f4.5: Fun([Int], Int)) {
  let rec aux6: Tuple([Int, Int]) = (u7.8: Var({val: Some(Unit)})) {
    let _9: Unit = Unit
    let _10: Tuple([Int, Int]) = Apply(stream2.3, [_9, ])
    let (, ok11.12: Var({val: Some(Int)})val13.14: Var({val: Some(Int)})) = _10let _15: Int = Int(0)
    if (ok11.12 == _15) then {
      let _16: Int = Int(0)
      let _17: Int = Int(0)
      Tuple([_16, _17, ])
    } else {
      let _18: Int = Int(1)
      let _19: Int = Apply(f4.5, [val13.14, ])
      Tuple([_18, _19, ])
    }
  }
  Var(aux6)
}
let rec filter20: Fun([Unit], Tuple([Int, Int])) = (stream21.22: Fun([Unit], Tuple([Int, Int])), f23.24: Fun([Int], Int)) {
  let rec aux25: Tuple([Int, Int]) = (u26.27: Var({val: Some(Unit)})) {
    let _28: Unit = Unit
    let _29: Tuple([Int, Int]) = Apply(stream21.22, [_28, ])
    let (, ok30.31: Var({val: Some(Int)})val32.33: Var({val: Some(Int)})) = _29let _34: Int = Int(0)
    if (ok30.31 == _34) then {
      let _35: Int = Int(0)
      let _36: Int = Int(0)
      Tuple([_35, _36, ])
    } else {
      let r.37: Int = Apply(f23.24, [val32.33, ])
      let _38: Int = Int(0)
      if (r.37 == _38) then {
        let _39: Int = Int(1)
        Tuple([_39, val32.33, ])
      } else {
        let _40: Unit = Unit
        Apply(aux25, [_40, ])
      }
    }
  }
  Var(aux25)
}
let rec concat41: Fun([Unit], Tuple([Int, Int])) = (stream142.43: Fun([Unit], Tuple([Int, Int])), stream244.45: Fun([Unit], Tuple([Int, Int]))) {
  let rec aux46: Tuple([Int, Int]) = (u47.48: Var({val: Some(Unit)})) {
    let _49: Unit = Unit
    let _50: Tuple([Int, Int]) = Apply(stream142.43, [_49, ])
    let (, ok51.52: Var({val: Some(Int)})val53.54: Var({val: Some(Int)})) = _50let _55: Int = Int(0)
    if (ok51.52 == _55) then {
      let _56: Unit = Unit
      Apply(stream244.45, [_56, ])
    } else {
      let _57: Int = Int(1)
      Tuple([_57, val53.54, ])
    }
  }
  Var(aux46)
}
let rec range58: Fun([Unit], Tuple([Int, Int])) = (from59.60: Int, to61.62: Int) {
  let _63: Int = Int(1)
  let state.64: Array(Int) = ExtApply(minimbt_create_array, [_63, from59.60, ])
  let rec aux65: Tuple([Int, Int]) = (u66.67: Var({val: Some(Unit)})) {
    let _68: Int = Int(0)
    let val.69: Int = Get state.64[_68]
    if (val.69 == to61.62) then {
      let _70: Int = Int(0)
      let _71: Int = Int(0)
      Tuple([_70, _71, ])
    } else {
      let _72: Int = Int(0)
      let _73: Int = Int(1)
      let _74: Int = Add(val.69, _73)
      let _76: Unit = Put state.64[_72] = _74
      let _77: Int = Int(1)
      Tuple([_77, val.69, ])
    }
  }
  Var(aux65)
}
let rec addx78l0: Fun([Int], Int) = (x79.80: Int) {
  let rec aux81: Int = (y82.83: Int) {
    Add(x79.80, y82.83)
  }
  Var(aux81)
}
let rec fold84: Int = (stream85.86: Fun([Unit], Tuple([Int, Int])), f87.88: Fun([Int, Int], Int), acc89.90: Int) {
  let _91: Unit = Unit
  let _92: Tuple([Int, Int]) = Apply(stream85.86, [_91, ])
  let (, ok93.94: Var({val: Some(Int)})val95.96: Var({val: Some(Int)})) = _92let _97: Int = Int(0)
  if (ok93.94 == _97) then {
    Var(acc89.90)
  } else {
    let _98: Int = Apply(f87.88, [acc89.90, val95.96, ])
    Apply(fold84, [stream85.86, f87.88, _98, ])
  }
}
let rec sum99l1: Int = (stream100.101: Fun([Unit], Tuple([Int, Int]))) {
  let rec add102: Int = (x103.104: Int, y105.106: Int) {
    Add(x103.104, y105.106)
  }
  let _107: Int = Int(0)
  Apply(fold84, [stream100.101, add102, _107, ])
}
let rec gt108l2: Fun([Int], Int) = (x109.110: Int) {
  let rec aux111: Int = (y112.113: Int) {
    if (x109.110 <= y112.113) then {
      Int(0)
    } else {
      Int(1)
    }
  }
  Var(aux111)
}
let rec le114l3: Fun([Int], Int) = (x115.116: Int) {
  let rec aux117: Int = (y118.119: Int) {
    if (y118.119 <= x115.116) then {
      Int(0)
    } else {
      Int(1)
    }
  }
  Var(aux117)
}
let rec main120l4: Var({val: Some(Unit)}) = () {
  let _121: Int = Int(0)
  let _122: Int = Int(100)
  let range100.123: Fun([Unit], Tuple([Int, Int])) = Apply(range58, [_121, _122, ])
  let _124: Int = Int(0)
  let _125: Int = Int(1000)
  let range1000.126: Fun([Unit], Tuple([Int, Int])) = Apply(range58, [_124, _125, ])
  let catt.127: Fun([Unit], Tuple([Int, Int])) = Apply(concat41, [range100.123, range1000.126, ])
  let _128: Int = Int(1)
  let _129: Fun([Int], Int) = Apply(addx78l0, [_128, ])
  let addone.130: Fun([Unit], Tuple([Int, Int])) = Apply(map1, [catt.127, _129, ])
  let _131: Int = Int(50)
  let _132: Fun([Int], Int) = Apply(gt108l2, [_131, ])
  let over50.133: Fun([Unit], Tuple([Int, Int])) = Apply(filter20, [addone.130, _132, ])
  let _134: Int = Int(1200)
  let _135: Fun([Int], Int) = Apply(le114l3, [_134, ])
  let under1200.136: Fun([Unit], Tuple([Int, Int])) = Apply(filter20, [over50.133, _135, ])
  let sum.137: Int = Apply(sum99l1, [under1200.136, ])
  let _139: Unit = ExtApply(minimbt_print_int, [sum.137, ])
  let _140: Int = Int(10)
  let _142: Unit = ExtApply(minimbt_print_char, [_140, ])
  Unit
}
Apply(main120l4, [])