# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn read_prog138.254 #f21 : fn(int32, array[int32]) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (int32, array[int32]) {
    let %0: int32 = call f0()
    let %1: bool = eq(%0, -1)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = 0
    let %3: int32 = mul(1024, 1024)
    let _ = alloc <m1: array[int32] heap(%3)> <- [..] = 0
    let _ = alloc <m2: array[int32] heap(1)> <- [..] = 0
    let %6: int32 = call f20(0, f21.m0, $b0.0, $b0.1, f21.m1, f21.m2)
    jump b3(())
  }
  .bb #b2 () {
    let _ = store int32 offset($b0.1, $b0.0 * @32) <- %0
    let %8: int32 = add($b0.0, 1)
    jump b0(%8, $b0.1)
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1)
  }
}
.fn T$loop_start.11 #f14 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 91
  }
}
.fn read_ch_until_newline_or_eof1.252 #f0 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = ext_call minimbt_read_char()
    let %1: bool = eq(%0, 10)
    br %1 b1() b2()
  }
  .bb #b1 () {
    jump b6(-1)
  }
  .bb #b2 () {
    let %2: bool = eq(%0, 13)
    br %2 b3() b4()
  }
  .bb #b3 () {
    jump b5(-1)
  }
  .bb #b4 () {
    jump b5(%0)
  }
  .bb #b5 (int32) {
    jump b6($b5.0)
  }
  .bb #b6 (int32) {
    return $b6.0
  }
}
.fn T$decrease.8 #f8 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 45
  }
}
.fn main134.253 #f22 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap(1024)> <- [..] = 0
    let %1: unit = call f21(0, f22.m0)
    return ()
  }
}
.fn skip29.255 #f18 : fn(int32, int32, int32, array[int32]) -> int32
.freevars ()
.entry b14 {
  .bb #b0 (int32, int32, int32, array[int32]) {
    let %0: bool = le($b0.2, $b0.0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b12($b0.0)
  }
  .bb #b2 () {
    let %1: int32 = load int32 offset($b0.3, $b0.0 * @32)
    let %3: bool = eq(%1, %2)
    br %3 b3() b4()
  }
  .bb #b3 () {
    let %4: int32 = add($b0.0, 1)
    let %5: int32 = add($b0.1, 1)
    jump b0(%4, %5, $b0.2, $b0.3)
  }
  .bb #b4 () {
    let %8: bool = eq(%1, %7)
    br %8 b5() b6()
  }
  .bb #b5 () {
    let %9: bool = eq($b0.1, 0)
    br %9 b7() b8()
  }
  .bb #b6 () {
    let %13: int32 = add($b0.0, 1)
    jump b0(%13, $b0.1, $b0.2, $b0.3)
  }
  .bb #b7 () {
    jump b9($b0.0)
  }
  .bb #b8 () {
    let %10: int32 = add($b0.0, 1)
    let %11: int32 = sub($b0.1, 1)
    jump b0(%10, %11, $b0.2, $b0.3)
  }
  .bb #b9 (int32) {
    jump b10($b9.0)
  }
  .bb #b10 (int32) {
    jump b11($b10.0)
  }
  .bb #b11 (int32) {
    jump b12($b11.0)
  }
  .bb #b12 (int32) {
    return $b12.0
  }
  .loop #b13 pre #Some(b14) header #b0 {
    .block #b6
    .block #b12
    .block #b4
    .block #b8
    .block #b9
    .block #b1
    .block #b10
    .block #b11
    .block #b5
    .block #b2
    .block #b3
    .block #b7
  }
  .bb #b14 () {
    let %7: int32 = load_symbol ::7
    let %2: int32 = load_symbol ::6
    jump b13($f0, $f1, $f2, $f3)
  }
}
.fn T$read.10 #f12 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 44
  }
}
.fn T$loop_end.12 #f16 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 93
  }
}
.fn T$print.9 #f10 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 46
  }
}
.fn T$move_right.6 #f4 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 62
  }
}
.fn T$move_left.5 #f2 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 60
  }
}
.fn T$start #f28 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f22()
    return %0
  }
}
.fn lp107.257 #f19 : fn(array[int32], int32, int32, array[int32], array[int32], array[int32]) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (array[int32], int32, int32, array[int32], array[int32], array[int32]) {
    let %0: int32 = load int32 field($b0.0, 0 * @32)
    let %1: int32 = load int32 offset($b0.4, %0 * @32)
    let %2: bool = eq(%1, 0)
    br %2 b1() b2()
  }
  .bb #b1 () {
    let %3: int32 = add($b0.2, 1)
    let %4: int32 = call f18(%3, 0, $b0.1, $b0.3)
    let _ = store int32 field($b0.5, 0 * @32) <- %4
    jump b3(())
  }
  .bb #b2 () {
    let %6: int32 = add($b0.2, 1)
    let %7: int32 = call f20(%6, $b0.0, $b0.1, $b0.3, $b0.4, $b0.5)
    let _ = store int32 field($b0.5, 0 * @32) <- %7
    jump b0($b0.0, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1, $f2, $f3, $f4, $f5)
  }
}
.fn aux46.256 #f20 : fn(int32, array[int32], int32, array[int32], array[int32], array[int32]) -> int32
.freevars ()
.entry b29 {
  .bb #b0 (int32, array[int32], int32, array[int32], array[int32], array[int32]) {
    let %0: bool = le($b0.2, $b0.0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b27($b0.0)
  }
  .bb #b2 () {
    let %1: int32 = load int32 offset($b0.3, $b0.0 * @32)
    let %3: bool = eq(%1, %2)
    br %3 b3() b4()
  }
  .bb #b3 () {
    let %4: int32 = load int32 field($b0.1, 0 * @32)
    let %5: int32 = add(%4, 1)
    let _ = store int32 field($b0.1, 0 * @32) <- %5
    let %7: int32 = add($b0.0, 1)
    jump b0(%7, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b4 () {
    let %10: bool = eq(%1, %9)
    br %10 b5() b6()
  }
  .bb #b5 () {
    let %11: int32 = load int32 field($b0.1, 0 * @32)
    let %12: int32 = sub(%11, 1)
    let _ = store int32 field($b0.1, 0 * @32) <- %12
    let %14: int32 = add($b0.0, 1)
    jump b0(%14, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b6 () {
    let %17: bool = eq(%1, %16)
    br %17 b7() b8()
  }
  .bb #b7 () {
    let %18: int32 = load int32 field($b0.1, 0 * @32)
    let %19: int32 = load int32 field($b0.1, 0 * @32)
    let %20: int32 = load int32 offset($b0.4, %19 * @32)
    let %21: int32 = add(%20, 1)
    let _ = store int32 offset($b0.4, %18 * @32) <- %21
    let %23: int32 = add($b0.0, 1)
    jump b0(%23, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b8 () {
    let %26: bool = eq(%1, %25)
    br %26 b9() b10()
  }
  .bb #b9 () {
    let %27: int32 = load int32 field($b0.1, 0 * @32)
    let %28: int32 = load int32 field($b0.1, 0 * @32)
    let %29: int32 = load int32 offset($b0.4, %28 * @32)
    let %30: int32 = sub(%29, 1)
    let _ = store int32 offset($b0.4, %27 * @32) <- %30
    let %32: int32 = add($b0.0, 1)
    jump b0(%32, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b10 () {
    let %35: bool = eq(%1, %34)
    br %35 b11() b12()
  }
  .bb #b11 () {
    let %36: int32 = load int32 field($b0.1, 0 * @32)
    let %37: int32 = load int32 offset($b0.4, %36 * @32)
    let %38: unit = ext_call minimbt_print_char(%37)
    let %39: int32 = add($b0.0, 1)
    jump b0(%39, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b12 () {
    let %42: bool = eq(%1, %41)
    br %42 b13() b14()
  }
  .bb #b13 () {
    let %43: int32 = load int32 field($b0.1, 0 * @32)
    let %44: int32 = call f0()
    let _ = store int32 offset($b0.4, %43 * @32) <- %44
    let %46: int32 = add($b0.0, 1)
    jump b0(%46, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b14 () {
    let %49: bool = eq(%1, %48)
    br %49 b15() b16()
  }
  .bb #b15 () {
    let _ = store int32 field($b0.5, 0 * @32) <- $b0.0
    let %51: unit = call f19($b0.1, $b0.2, $b0.0, $b0.3, $b0.4, $b0.5)
    let %52: int32 = load int32 field($b0.5, 0 * @32)
    let %53: int32 = add(%52, 1)
    jump b0(%53, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b16 () {
    let %56: bool = eq(%1, %55)
    br %56 b17() b18()
  }
  .bb #b17 () {
    jump b19($b0.0)
  }
  .bb #b18 () {
    jump b19($b0.0)
  }
  .bb #b19 (int32) {
    jump b20($b19.0)
  }
  .bb #b20 (int32) {
    jump b21($b20.0)
  }
  .bb #b21 (int32) {
    jump b22($b21.0)
  }
  .bb #b22 (int32) {
    jump b23($b22.0)
  }
  .bb #b23 (int32) {
    jump b24($b23.0)
  }
  .bb #b24 (int32) {
    jump b25($b24.0)
  }
  .bb #b25 (int32) {
    jump b26($b25.0)
  }
  .bb #b26 (int32) {
    jump b27($b26.0)
  }
  .bb #b27 (int32) {
    return $b27.0
  }
  .loop #b28 pre #Some(b29) header #b0 {
    .block #b23
    .block #b8
    .block #b9
    .block #b16
    .block #b13
    .block #b19
    .block #b26
    .block #b15
    .block #b1
    .block #b11
    .block #b2
    .block #b18
    .block #b24
    .block #b21
    .block #b22
    .block #b20
    .block #b6
    .block #b12
    .block #b4
    .block #b17
    .block #b10
    .block #b25
    .block #b5
    .block #b3
    .block #b14
    .block #b7
    .block #b27
  }
  .bb #b29 () {
    let %25: int32 = load_symbol ::3
    let %55: int32 = load_symbol ::7
    let %2: int32 = load_symbol ::1
    let %16: int32 = load_symbol ::2
    let %41: int32 = load_symbol ::5
    let %9: int32 = load_symbol ::0
    let %34: int32 = load_symbol ::4
    let %48: int32 = load_symbol ::6
    jump b28($f0, $f1, $f2, $f3, $f4, $f5)
  }
}
.fn T$increase.7 #f6 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 43
  }
}
.thunk ::0 move_left.5
.thunk ::1 move_right.6
.thunk ::2 increase.7
.thunk ::3 decrease.8
.thunk ::4 print.9
.thunk ::5 read.10
.thunk ::6 loop_start.11
.thunk ::7 loop_end.12
.thunk ::8 start

