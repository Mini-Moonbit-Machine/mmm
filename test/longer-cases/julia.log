// [Asm] pre_assigned_registers: Self(fref=f6) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$_4_6"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   comment = "0:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$_4_6"];
// [Asm]   r0 [label="fv3 ← fa0", color=green];
// [Asm]   r1 [label="fa0", color=blue];
// [Asm]   comment = "0:fv3-> 1:fa0"
// [Asm]   comment = "fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 4593527504729830064 ->   li a0, 4593527504729830064
// [Asm] subst   fmv.d.x fv3, v2 ->   fmv.d.x fa0, a0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: BlockParam(bref=b12, bpref=$b.0) -> v53, Insn(iref=%15) -> v30, FnParam(fref=f12, fpref=$f.5) -> v7, FnParam(fref=f12, fpref=$f.2) -> v4, BlockParam(bref=b0, bpref=$b.5) -> v14, Insn(iref=%8) -> fv23, BlockParam(bref=b10, bpref=$b.0) -> v50, Insn(iref=%10) -> fv25, BlockParam(bref=b0, bpref=$b.4) -> fv13, BlockParam(bref=b0, bpref=$b.3) -> fv12, FnParam(fref=f12, fpref=$f.6) -> fv8, Insn(iref=%27) -> fv41, Insn(iref=%25) -> fv39, Insn(iref=%14) -> fv29, Insn(iref=%4) -> v52, FnParam(fref=f12, fpref=$f.3) -> fv5, FnParam(fref=f12, fpref=$f.0) -> fv2, FnParam(fref=f12, fpref=$f.4) -> fv6, Insn(iref=%1) -> fv17, Insn(iref=%11) -> fv26, Insn(iref=%26) -> fv40, BlockParam(bref=b0, bpref=$b.6) -> fv15, Insn(iref=%6) -> fv21, Insn(iref=%31) -> v45, Insn(iref=%35) -> fv47, BlockParam(bref=b9, bpref=$b.0) -> v48, Insn(iref=%28) -> fv42, Insn(iref=%9) -> fv24, Insn(iref=%16) -> fv31, Insn(iref=%24) -> fv38, Self(fref=f12) -> v0, BlockParam(bref=b0, bpref=$b.0) -> fv9, BlockParam(bref=b0, bpref=$b.1) -> fv10, BlockParam(bref=b0, bpref=$b.2) -> v11, Insn(iref=%29) -> fv43, Insn(iref=%5) -> fv20, Insn(iref=%0) -> fv16, Insn(iref=%19) -> v34, FnParam(fref=f12, fpref=$f.1) -> fv3, Insn(iref=%3) -> v19, Insn(iref=%18) -> v33, Insn(iref=%13) -> fv28, BlockParam(bref=b11, bpref=$b.0) -> v51, Insn(iref=%7) -> v22, Insn(iref=%22) -> fv36, Insn(iref=%17) -> fv32, Insn(iref=%23) -> v37, Insn(iref=%2) -> v18, Insn(iref=%20) -> v49, Insn(iref=%30) -> fv44, Insn(iref=%21) -> fv35, Insn(iref=%34) -> v46, Insn(iref=%12) -> fv27
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%24), Insn(iref=%11)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%15), Insn(iref=%18)])
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%8), BlockParam(bref=b0, bpref=$b.1)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.2), Insn(iref=%2)])
// [Asm] defs: [v51]
// [Asm] live_set: [v51]
// [Asm] move_origin: [v50]
// [Asm] defined: v51 is X
// [Asm] defs: []
// [Asm] live_set: [v51]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v53]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [fv35]
// [Asm] live_set: [fv32, fv31, zero, v30, fv29, fv35, fv26]
// [Asm] move_origin: []
// [Asm] defined: fv35 is F
// [Asm] defs: [fv36]
// [Asm] live_set: [fv32, fv31, zero, fv36, v30, fv29, fv35, fv26]
// [Asm] move_origin: []
// [Asm] defined: fv36 is F
// [Asm] defs: [v37]
// [Asm] live_set: [fv32, fv31, zero, v30, fv29, v37, fv26]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: []
// [Asm] live_set: [fv29, fv32, fv31, zero, fv26, v30]
// [Asm] move_origin: []
// [Asm] defs: [v48]
// [Asm] live_set: [v48]
// [Asm] move_origin: [v30]
// [Asm] defined: v48 is X
// [Asm] defs: [v52]
// [Asm] live_set: [v52]
// [Asm] move_origin: []
// [Asm] defined: v52 is X
// [Asm] defs: [v53]
// [Asm] live_set: [v53]
// [Asm] move_origin: [v52]
// [Asm] defined: v53 is X
// [Asm] defs: []
// [Asm] live_set: [fa3, fa2, fa4, zero, a0, fa0, a1, fa1]
// [Asm] move_origin: []
// [Asm] defs: [fv2]
// [Asm] live_set: [fv2, fa3, fa2, fa4, zero, a0, a1, fa1]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fv2, fa3, fa2, fa4, zero, a0, a1, fv3]
// [Asm] move_origin: [fa1]
// [Asm] defined: fv3 is F
// [Asm] defs: [v4]
// [Asm] live_set: [fv2, fa3, fa2, fa4, zero, v4, a1, fv3]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: [fv5]
// [Asm] live_set: [fv5, fv2, fa3, zero, fa4, v4, a1, fv3]
// [Asm] move_origin: [fa2]
// [Asm] defined: fv5 is F
// [Asm] defs: [fv6]
// [Asm] live_set: [fv5, fv2, zero, fa4, v4, a1, fv6, fv3]
// [Asm] move_origin: [fa3]
// [Asm] defined: fv6 is F
// [Asm] defs: [v7]
// [Asm] live_set: [fv5, fv2, zero, fa4, v7, v4, fv6, fv3]
// [Asm] move_origin: [a1]
// [Asm] defined: v7 is X
// [Asm] defs: [fv8]
// [Asm] live_set: [fv5, fv2, zero, fv8, v7, v4, fv6, fv3]
// [Asm] move_origin: [fa4]
// [Asm] defined: fv8 is F
// [Asm] defs: [fv9]
// [Asm] live_set: [fv9, fv5, zero, fv8, v7, v4, fv6, fv3]
// [Asm] move_origin: [fv2]
// [Asm] defined: fv9 is F
// [Asm] defs: [fv10]
// [Asm] live_set: [fv9, fv5, fv10, zero, fv8, v7, v4, fv6]
// [Asm] move_origin: [fv3]
// [Asm] defined: fv10 is F
// [Asm] defs: [v11]
// [Asm] live_set: [fv9, v11, fv5, fv10, zero, fv8, v7, fv6]
// [Asm] move_origin: [v4]
// [Asm] defined: v11 is X
// [Asm] defs: [fv12]
// [Asm] live_set: [fv9, v11, fv10, zero, fv8, v7, fv12, fv6]
// [Asm] move_origin: [fv5]
// [Asm] defined: fv12 is F
// [Asm] defs: [fv13]
// [Asm] live_set: [fv9, v11, fv10, zero, fv13, fv8, v7, fv12]
// [Asm] move_origin: [fv6]
// [Asm] defined: fv13 is F
// [Asm] defs: [v14]
// [Asm] live_set: [fv9, v11, fv10, v14, zero, fv13, fv8, fv12]
// [Asm] move_origin: [v7]
// [Asm] defined: v14 is X
// [Asm] defs: [fv15]
// [Asm] live_set: [fv9, v11, fv10, v14, zero, fv13, fv12, fv15]
// [Asm] move_origin: [fv8]
// [Asm] defined: fv15 is F
// [Asm] defs: [v51]
// [Asm] live_set: [v51]
// [Asm] move_origin: [v11]
// [Asm] defined: v51 is X
// [Asm] defs: [v49]
// [Asm] live_set: [v49]
// [Asm] move_origin: []
// [Asm] defined: v49 is X
// [Asm] defs: [v50]
// [Asm] live_set: [v50]
// [Asm] move_origin: [v49]
// [Asm] defined: v50 is X
// [Asm] defs: [v50]
// [Asm] live_set: [v50]
// [Asm] move_origin: [v48]
// [Asm] defined: v50 is X
// [Asm] defs: []
// [Asm] live_set: [v50]
// [Asm] move_origin: []
// [Asm] defs: [fv16]
// [Asm] live_set: [v11, fv9, fv10, zero, fv16]
// [Asm] move_origin: []
// [Asm] defined: fv16 is F
// [Asm] defs: [fv17]
// [Asm] live_set: [v11, fv9, fv10, zero, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv17 is F
// [Asm] defs: [v18]
// [Asm] live_set: [v11, fv9, fv10, v18, zero, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v11, fv9, fv10, fv16, zero, fv17]
// [Asm] move_origin: []
// [Asm] defs: [v64]
// [Asm] live_set: [fv32, fv31, zero, v30, fv29, fv26, v64]
// [Asm] move_origin: []
// [Asm] defined: v64 is X
// [Asm] defs: [fv65]
// [Asm] live_set: [fv32, fv31, fv65, zero, v30, fv29, fv26]
// [Asm] move_origin: []
// [Asm] defined: fv65 is F
// [Asm] defs: [fv38]
// [Asm] live_set: [fv32, fv31, zero, v30, fv26, fv38]
// [Asm] move_origin: []
// [Asm] defined: fv38 is F
// [Asm] defs: [fv40]
// [Asm] live_set: [fv32, fv31, zero, v30, fv26, fv40, fv38]
// [Asm] move_origin: []
// [Asm] defined: fv40 is F
// [Asm] defs: [fv41]
// [Asm] live_set: [fv32, fv31, zero, fv41, v30, fv40]
// [Asm] move_origin: []
// [Asm] defined: fv41 is F
// [Asm] defs: [fv42]
// [Asm] live_set: [zero, fv41, v30, fv42, fv40]
// [Asm] move_origin: []
// [Asm] defined: fv42 is F
// [Asm] defs: [fv43]
// [Asm] live_set: [zero, fv43, fv41, v30, fv42, fv40]
// [Asm] move_origin: []
// [Asm] defined: fv43 is F
// [Asm] defs: [fv44]
// [Asm] live_set: [zero, fv43, fv41, v30, fv44, fv40]
// [Asm] move_origin: []
// [Asm] defined: fv44 is F
// [Asm] defs: [v45]
// [Asm] live_set: [zero, fv43, fv41, v45, fv44, fv40]
// [Asm] move_origin: []
// [Asm] defined: v45 is X
// [Asm] defs: [v46]
// [Asm] live_set: [v46, zero, fv43, fv41, v45, fv44, fv40]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: [fv47]
// [Asm] live_set: [v46, zero, fv43, fv41, v45, fv47, fv44, fv40]
// [Asm] move_origin: []
// [Asm] defined: fv47 is F
// [Asm] defs: [fv9]
// [Asm] live_set: [fv9, v46, zero, fv43, fv41, v45, fv47, fv40]
// [Asm] move_origin: [fv44]
// [Asm] defined: fv9 is F
// [Asm] defs: [fv10]
// [Asm] live_set: [fv9, fv10, v46, zero, fv43, v45, fv47, fv40]
// [Asm] move_origin: [fv41]
// [Asm] defined: fv10 is F
// [Asm] defs: [v11]
// [Asm] live_set: [fv9, v11, fv10, v46, zero, fv43, fv47, fv40]
// [Asm] move_origin: [v45]
// [Asm] defined: v11 is X
// [Asm] defs: [fv12]
// [Asm] live_set: [fv9, v11, fv10, v46, zero, fv43, fv12, fv47]
// [Asm] move_origin: [fv40]
// [Asm] defined: fv12 is F
// [Asm] defs: [fv13]
// [Asm] live_set: [fv9, v11, fv10, v46, zero, fv13, fv12, fv47]
// [Asm] move_origin: [fv43]
// [Asm] defined: fv13 is F
// [Asm] defs: [v14]
// [Asm] live_set: [fv9, v11, fv10, v14, zero, fv13, fv12, fv47]
// [Asm] move_origin: [v46]
// [Asm] defined: v14 is X
// [Asm] defs: [fv15]
// [Asm] live_set: [fv9, v11, fv10, v14, zero, fv13, fv12, fv15]
// [Asm] move_origin: [fv47]
// [Asm] defined: fv15 is F
// [Asm] defs: []
// [Asm] live_set: [fv9, v11, fv10, v14, zero, fv13, fv12, fv15]
// [Asm] move_origin: []
// [Asm] defs: [fv20]
// [Asm] live_set: [v11, fv9, fv10, zero, fv20, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv20 is F
// [Asm] defs: [fv21]
// [Asm] live_set: [v11, fv9, fv10, zero, fv20, fv16, fv17, fv21]
// [Asm] move_origin: []
// [Asm] defined: fv21 is F
// [Asm] defs: [v22]
// [Asm] live_set: [v11, fv9, fv10, zero, v22, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v11, fv9, fv10, fv16, zero, fv17]
// [Asm] move_origin: []
// [Asm] defs: [v79]
// [Asm] live_set: [v11, fv9, fv10, zero, v79, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defined: v79 is X
// [Asm] defs: [fv80]
// [Asm] live_set: [v11, fv9, fv10, zero, fv16, fv17, fv80]
// [Asm] move_origin: []
// [Asm] defined: fv80 is F
// [Asm] defs: [fv23]
// [Asm] live_set: [v11, fv23, fv10, zero, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv23 is F
// [Asm] defs: [fv25]
// [Asm] live_set: [v11, fv23, fv10, zero, fv25, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv25 is F
// [Asm] defs: [fv26]
// [Asm] live_set: [v11, zero, fv16, fv26, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv26 is F
// [Asm] defs: [fv27]
// [Asm] live_set: [v11, zero, fv27, fv26]
// [Asm] move_origin: []
// [Asm] defined: fv27 is F
// [Asm] defs: [fv28]
// [Asm] live_set: [v11, fv28, zero, fv27, fv26]
// [Asm] move_origin: []
// [Asm] defined: fv28 is F
// [Asm] defs: [fv29]
// [Asm] live_set: [v11, zero, fv29, fv26]
// [Asm] move_origin: []
// [Asm] defined: fv29 is F
// [Asm] defs: [v30]
// [Asm] live_set: [zero, v30, fv29, fv26]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: [fv31]
// [Asm] live_set: [fv31, zero, v30, fv29, fv26]
// [Asm] move_origin: []
// [Asm] defined: fv31 is F
// [Asm] defs: [fv32]
// [Asm] live_set: [fv32, fv31, zero, v30, fv29, fv26]
// [Asm] move_origin: []
// [Asm] defined: fv32 is F
// [Asm] defs: [v33]
// [Asm] live_set: [fv32, fv31, zero, v30, fv29, fv26, v33]
// [Asm] move_origin: []
// [Asm] defined: v33 is X
// [Asm] defs: []
// [Asm] live_set: [fv29, fv32, fv31, zero, fv26, v30]
// [Asm] move_origin: []
// [Asm] defs: [v53]
// [Asm] live_set: [v53]
// [Asm] move_origin: [v51]
// [Asm] defined: v53 is X
// [Asm] defs: []
// [Asm] live_set: [v53]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of calc_pixel7l0_12"];
// [Asm]   r0 [label="v51 ← a0", color=green];
// [Asm]   r20 [label="v79 ← a1", color=green];
// [Asm]   r3 [label="v30 ← a0", color=green];
// [Asm]   r9 [label="v4 ← a0", color=green];
// [Asm]   r6 [label="v52 ← a0", color=green];
// [Asm]   r13 [label="v49 ← a0", color=green];
// [Asm]   r4 [label="v37 ← a1", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="v11 ← a0", color=green];
// [Asm]   r7 [label="v53 ← a0", color=green];
// [Asm]   r10 [label="v7 ← a1", color=green];
// [Asm]   r14 [label="v50 ← a0", color=green];
// [Asm]   r8 [label="a1", color=blue];
// [Asm]   r5 [label="v48 ← a0", color=green];
// [Asm]   r15 [label="v18 ← a1", color=green];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="v64 ← a1", color=green];
// [Asm]   r18 [label="v46 ← a1", color=green];
// [Asm]   r19 [label="v22 ← a1", color=green];
// [Asm]   r17 [label="v45 ← a0", color=green];
// [Asm]   r21 [label="v33 ← a1", color=green];
// [Asm]   r12 [label="v14 ← a1", color=green];
// [Asm]   r2 -- r10;
// [Asm]   r11 -- r12;
// [Asm]   r2 -- r17;
// [Asm]   r17 -- r18;
// [Asm]   r3 -- r4;
// [Asm]   r9 -- r10;
// [Asm]   r2 -- r16;
// [Asm]   r11 -- r15;
// [Asm]   r11 -- r20;
// [Asm]   r11 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r2 -- r15;
// [Asm]   r3 -- r21;
// [Asm]   r3 -- r16;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r2 -- r19;
// [Asm]   r2 -- r3;
// [Asm]   r2 -- r12;
// [Asm]   r11 -- r19;
// [Asm]   r10 -- r11;
// [Asm]   r8 -- r9;
// [Asm]   r2 -- r21;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:v51-> 1:a0-> 2:zero-> 3:v30-> 4:v37-> 16:v64-> 21:v33-> 9:v4-> 10:v7-> 11:v11-> 12:v14-> 15:v18-> 18:v46-> 17:v45-> 19:v22-> 20:v79-> 8:a1-> 5:v48-> 6:v52-> 7:v53-> 13:v49-> 14:v50"
// [Asm]   comment = "v51<-a0;v79<-a1;v30<-a0;v4<-a0;v52<-a0;v49<-a0;v37<-a1;v11<-a0;v53<-a0;v7<-a1;v50<-a0;v48<-a0;v18<-a1;v64<-a1;v46<-a1;v22<-a1;v45<-a0;v33<-a1;v14<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of calc_pixel7l0_12"];
// [Asm]   r0 [label="fv35 ← fa0", color=green];
// [Asm]   r33 [label="fv23 ← fa1", color=green];
// [Asm]   r9 [label="fa4", color=blue];
// [Asm]   r26 [label="fv42 ← fa1", color=green];
// [Asm]   r6 [label="fv2 ← fa6", color=green];
// [Asm]   r13 [label="fv6 ← fa2", color=green];
// [Asm]   r4 [label="fv26 ← fa4", color=green];
// [Asm]   r29 [label="fv47 ← fa4", color=green];
// [Asm]   r35 [label="fv27 ← fa0", color=green];
// [Asm]   r7 [label="fa3", color=blue];
// [Asm]   r10 [label="fa1", color=blue];
// [Asm]   r8 [label="fa2", color=blue];
// [Asm]   r5 [label="fv36 ← fa5", color=green];
// [Asm]   r36 [label="fv28 ← fa1", color=green];
// [Asm]   r32 [label="fv80 ← fa4", color=green];
// [Asm]   r15 [label="fv9 ← fa1", color=green];
// [Asm]   r24 [label="fv40 ← fa3", color=green];
// [Asm]   r31 [label="fv21 ← fa5", color=green];
// [Asm]   r17 [label="fv12 ← fa3", color=green];
// [Asm]   r12 [label="fv5 ← fa5", color=green];
// [Asm]   r20 [label="fv16 ← fa2", color=green];
// [Asm]   r23 [label="fv38 ← fa0", color=green];
// [Asm]   r3 [label="fv29 ← fa3", color=green];
// [Asm]   r27 [label="fv43 ← fa2", color=green];
// [Asm]   r1 [label="fv32 ← fa1", color=green];
// [Asm]   r28 [label="fv44 ← fa1", color=green];
// [Asm]   r11 [label="fv3 ← fa0", color=green];
// [Asm]   r34 [label="fv25 ← fa4", color=green];
// [Asm]   r22 [label="fv65 ← fa0", color=green];
// [Asm]   r14 [label="fv8 ← fa4", color=green];
// [Asm]   r30 [label="fv20 ← fa4", color=green];
// [Asm]   r25 [label="fv41 ← fa0", color=green];
// [Asm]   r2 [label="fv31 ← fa2", color=green];
// [Asm]   r16 [label="fv10 ← fa0", color=green];
// [Asm]   r18 [label="fv13 ← fa2", color=green];
// [Asm]   r19 [label="fv15 ← fa4", color=green];
// [Asm]   r21 [label="fv17 ← fa3", color=green];
// [Asm]   r20 -- r33;
// [Asm]   r25 -- r28;
// [Asm]   r16 -- r20;
// [Asm]   r14 -- r16;
// [Asm]   r27 -- r29;
// [Asm]   r11 -- r14;
// [Asm]   r15 -- r31;
// [Asm]   r1 -- r4;
// [Asm]   r30 -- r31;
// [Asm]   r20 -- r34;
// [Asm]   r27 -- r28;
// [Asm]   r4 -- r22;
// [Asm]   r15 -- r25;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r35;
// [Asm]   r17 -- r19;
// [Asm]   r20 -- r30;
// [Asm]   r16 -- r17;
// [Asm]   r4 -- r21;
// [Asm]   r6 -- r13;
// [Asm]   r16 -- r34;
// [Asm]   r16 -- r29;
// [Asm]   r15 -- r18;
// [Asm]   r2 -- r25;
// [Asm]   r26 -- r27;
// [Asm]   r25 -- r29;
// [Asm]   r21 -- r33;
// [Asm]   r3 -- r4;
// [Asm]   r11 -- r13;
// [Asm]   r0 -- r2;
// [Asm]   r20 -- r32;
// [Asm]   r16 -- r33;
// [Asm]   r6 -- r10;
// [Asm]   r21 -- r32;
// [Asm]   r9 -- r12;
// [Asm]   r24 -- r27;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r28 -- r29;
// [Asm]   r0 -- r1;
// [Asm]   r23 -- r24;
// [Asm]   r11 -- r15;
// [Asm]   r8 -- r11;
// [Asm]   r16 -- r21;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r24;
// [Asm]   r24 -- r25;
// [Asm]   r16 -- r24;
// [Asm]   r17 -- r27;
// [Asm]   r15 -- r30;
// [Asm]   r2 -- r23;
// [Asm]   r14 -- r15;
// [Asm]   r16 -- r27;
// [Asm]   r35 -- r36;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r16 -- r31;
// [Asm]   r17 -- r18;
// [Asm]   r16 -- r30;
// [Asm]   r6 -- r11;
// [Asm]   r13 -- r15;
// [Asm]   r4 -- r24;
// [Asm]   r20 -- r31;
// [Asm]   r4 -- r5;
// [Asm]   r14 -- r18;
// [Asm]   r14 -- r17;
// [Asm]   r15 -- r29;
// [Asm]   r17 -- r29;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r23;
// [Asm]   r6 -- r14;
// [Asm]   r18 -- r29;
// [Asm]   r16 -- r32;
// [Asm]   r12 -- r15;
// [Asm]   r25 -- r27;
// [Asm]   r1 -- r22;
// [Asm]   r16 -- r19;
// [Asm]   r13 -- r16;
// [Asm]   r11 -- r12;
// [Asm]   r4 -- r20;
// [Asm]   r21 -- r34;
// [Asm]   r25 -- r26;
// [Asm]   r6 -- r12;
// [Asm]   r24 -- r28;
// [Asm]   r24 -- r29;
// [Asm]   r15 -- r27;
// [Asm]   r16 -- r18;
// [Asm]   r24 -- r26;
// [Asm]   r15 -- r32;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r8;
// [Asm]   r33 -- r34;
// [Asm]   r9 -- r11;
// [Asm]   r18 -- r19;
// [Asm]   r12 -- r13;
// [Asm]   r21 -- r31;
// [Asm]   r15 -- r17;
// [Asm]   r15 -- r21;
// [Asm]   r21 -- r30;
// [Asm]   r0 -- r3;
// [Asm]   r13 -- r14;
// [Asm]   r7 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r13 -- r17;
// [Asm]   r1 -- r25;
// [Asm]   r4 -- r36;
// [Asm]   r15 -- r24;
// [Asm]   r12 -- r14;
// [Asm]   r12 -- r16;
// [Asm]   r1 -- r3;
// [Asm]   r7 -- r12;
// [Asm]   r9 -- r13;
// [Asm]   r15 -- r16;
// [Asm]   r15 -- r20;
// [Asm]   r15 -- r19;
// [Asm]   r2 -- r3;
// [Asm]   r20 -- r21;
// [Asm]   r1 -- r24;
// [Asm]   comment = "0:fv35-> 1:fv32-> 2:fv31-> 3:fv29-> 4:fv26-> 5:fv36-> 22:fv65-> 23:fv38-> 24:fv40-> 25:fv41-> 15:fv9-> 27:fv43-> 29:fv47-> 16:fv10-> 17:fv12-> 18:fv13-> 14:fv8-> 13:fv6-> 12:fv5-> 11:fv3-> 6:fv2-> 9:fa4-> 19:fv15-> 28:fv44-> 7:fa3-> 20:fv16-> 21:fv17-> 30:fv20-> 31:fv21-> 32:fv80-> 26:fv42-> 33:fv23-> 34:fv25-> 8:fa2-> 10:fa1-> 35:fv27-> 36:fv28"
// [Asm]   comment = "fv35<-fa0;fv23<-fa1;fv42<-fa1;fv2<-fa6;fv6<-fa2;fv26<-fa4;fv47<-fa4;fv27<-fa0;fv36<-fa5;fv28<-fa1;fv80<-fa4;fv9<-fa1;fv40<-fa3;fv21<-fa5;fv12<-fa3;fv5<-fa5;fv16<-fa2;fv38<-fa0;fv29<-fa3;fv43<-fa2;fv32<-fa1;fv44<-fa1;fv3<-fa0;fv25<-fa4;fv65<-fa0;fv8<-fa4;fv20<-fa4;fv41<-fa0;fv31<-fa2;fv10<-fa0;fv13<-fa2;fv15<-fa4;fv17<-fa3;"
// [Asm] }
// [Asm] 
// [Asm] subst   j .calc_pixel7l0_12_11 ->   j .calc_pixel7l0_12_11
// [Asm] subst   ret ->   ret
// [Asm] subst   fadd.d fv35, fv31, fv32 ->   fadd.d fa0, fa2, fa1
// [Asm] subst   fld fv36, limit_sq.2, t5 ->   fld fa5, limit_sq.2, t5
// [Asm] subst   fle.d v37, fv36, fv35 ->   fle.d a1, fa5, fa0
// [Asm] subst   bne v37, zero, .calc_pixel7l0_12_7 ->   bne a1, zero, .calc_pixel7l0_12_7
// [Asm] subst   lw v52, iter.3 ->   lw a0, iter.3
// [Asm] subst   fmv.d fv2, fa0 ->   fmv.d fa6, fa0
// [Asm] subst   fmv.d fv3, fa1 ->   fmv.d fa0, fa1
// [Asm] subst   fmv.d fv5, fa2 ->   fmv.d fa5, fa2
// [Asm] subst   fmv.d fv6, fa3 ->   fmv.d fa2, fa3
// [Asm] subst   fmv.d fv9, fv2 ->   fmv.d fa1, fa6
// [Asm] subst   fmv.d fv12, fv5 ->   fmv.d fa3, fa5
// [Asm] subst   lw v49, iter.3 ->   lw a0, iter.3
// [Asm] subst   j .calc_pixel7l0_12_10 ->   j .calc_pixel7l0_12_10
// [Asm] subst   fmul.d fv16, fv9, fv9 ->   fmul.d fa2, fa1, fa1
// [Asm] subst   fmul.d fv17, fv10, fv10 ->   fmul.d fa3, fa0, fa0
// [Asm] subst   lw v18, iter.3 ->   lw a1, iter.3
// [Asm] subst   beq v11, v18, .calc_pixel7l0_12_1 ->   beq a0, a1, .calc_pixel7l0_12_1
// [Asm] subst   li v64, 4611686018427387904 ->   li a1, 4611686018427387904
// [Asm] subst   fmv.d.x fv65, v64 ->   fmv.d.x fa0, a1
// [Asm] subst   fmul.d fv38, fv65, fv29 ->   fmul.d fa0, fa0, fa3
// [Asm] subst   fld fv40, c_im.6, t5 ->   fld fa3, c_im.6, t5
// [Asm] subst   fmadd.d fv41, fv38, fv26, fv40 ->   fmadd.d fa0, fa0, fa4, fa3
// [Asm] subst   fsub.d fv42, fv31, fv32 ->   fsub.d fa1, fa2, fa1
// [Asm] subst   fld fv43, c_re.5, t5 ->   fld fa2, c_re.5, t5
// [Asm] subst   fadd.d fv44, fv42, fv43 ->   fadd.d fa1, fa1, fa2
// [Asm] subst   addi v45, v30, 1 ->   addi a0, a0, 1
// [Asm] subst   lw v46, iter.3 ->   lw a1, iter.3
// [Asm] subst   fld fv47, limit_sq.2, t5 ->   fld fa4, limit_sq.2, t5
// [Asm] subst   j .calc_pixel7l0_12_0 ->   j .calc_pixel7l0_12_0
// [Asm] subst   fadd.d fv20, fv16, fv17 ->   fadd.d fa4, fa2, fa3
// [Asm] subst   fld fv21, limit_sq.2, t5 ->   fld fa5, limit_sq.2, t5
// [Asm] subst   fle.d v22, fv21, fv20 ->   fle.d a1, fa5, fa4
// [Asm] subst   bne v22, zero, .calc_pixel7l0_12_3 ->   bne a1, zero, .calc_pixel7l0_12_3
// [Asm] subst   li v79, 4611686018427387904 ->   li a1, 4611686018427387904
// [Asm] subst   fmv.d.x fv80, v79 ->   fmv.d.x fa4, a1
// [Asm] subst   fmul.d fv23, fv80, fv9 ->   fmul.d fa1, fa4, fa1
// [Asm] subst   fld fv25, c_im.6, t5 ->   fld fa4, c_im.6, t5
// [Asm] subst   fmadd.d fv26, fv23, fv10, fv25 ->   fmadd.d fa4, fa1, fa0, fa4
// [Asm] subst   fsub.d fv27, fv16, fv17 ->   fsub.d fa0, fa2, fa3
// [Asm] subst   fld fv28, c_re.5, t5 ->   fld fa1, c_re.5, t5
// [Asm] subst   fadd.d fv29, fv27, fv28 ->   fadd.d fa3, fa0, fa1
// [Asm] subst   addi v30, v11, 1 ->   addi a0, a0, 1
// [Asm] subst   fmul.d fv31, fv29, fv29 ->   fmul.d fa2, fa3, fa3
// [Asm] subst   fmul.d fv32, fv26, fv26 ->   fmul.d fa1, fa4, fa4
// [Asm] subst   lw v33, iter.3 ->   lw a1, iter.3
// [Asm] subst   beq v30, v33, .calc_pixel7l0_12_5 ->   beq a0, a1, .calc_pixel7l0_12_5
// [Asm] subst   j .calc_pixel7l0_12_12 ->   j .calc_pixel7l0_12_12
// [Asm] pre_assigned_registers: Self(fref=f4) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$iter.3_4"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   comment = "0:v2-> 1:a0"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$iter.3_4"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 300 ->   li a0, 300
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> fv3, Self(fref=f8) -> v0, Insn(iref=%0) -> fv2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [fv2]
// [Asm] live_set: [fv2]
// [Asm] move_origin: []
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$c_re.5_8"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$c_re.5_8"];
// [Asm]   r0 [label="fv2 ← fa0", color=green];
// [Asm]   r2 [label="fa0", color=blue];
// [Asm]   r1 [label="fv3 ← fa0", color=green];
// [Asm]   comment = "0:fv2-> 1:fv3-> 2:fa0"
// [Asm]   comment = "fv2<-fa0;fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   fld fv2, _4, t5 ->   fld fa0, _4, t5
// [Asm] subst   fneg.d fv3, fv2 ->   fneg.d fa0, fa0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$limit.1_0"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   comment = "0:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$limit.1_0"];
// [Asm]   r0 [label="fv3 ← fa0", color=green];
// [Asm]   r1 [label="fa0", color=blue];
// [Asm]   comment = "0:fv3-> 1:fa0"
// [Asm]   comment = "fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 4611686018427387904 ->   li a0, 4611686018427387904
// [Asm] subst   fmv.d.x fv3, v2 ->   fmv.d.x fa0, a0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: BlockParam(bref=b0, bpref=$b.7) -> v18, Insn(iref=%15) -> fv29, Insn(iref=%41) -> v55, Insn(iref=%33) -> fv46, Insn(iref=%8) -> fv22, BlockParam(bref=b10, bpref=$b.0) -> v53, Insn(iref=%10) -> fv24, BlockParam(bref=b0, bpref=$b.4) -> v15, Insn(iref=%27) -> fv40, Insn(iref=%25) -> fv38, Insn(iref=%39) -> v50, BlockParam(bref=b18, bpref=$b.0) -> v71, Insn(iref=%4) -> fv68, Insn(iref=%49) -> fv65, Insn(iref=%42) -> v56, BlockParam(bref=b0, bpref=$b.8) -> fv19, Insn(iref=%26) -> v39, Self(fref=f13) -> v0, BlockParam(bref=b0, bpref=$b.6) -> fv17, FnParam(fref=f13, fpref=$f.2) -> v4, Insn(iref=%31) -> fv44, BlockParam(bref=b9, bpref=$b.0) -> v51, BlockParam(bref=b16, bpref=$b.0) -> v59, Insn(iref=%38) -> fv49, Insn(iref=%16) -> fv30, BlockParam(bref=b0, bpref=$b.1) -> v12, Insn(iref=%5) -> v69, Insn(iref=%19) -> fv33, Insn(iref=%13) -> fv27, FnParam(fref=f13, fpref=$f.7) -> v9, FnParam(fref=f13, fpref=$f.8) -> fv10, Insn(iref=%23) -> v52, Insn(iref=%48) -> v64, Insn(iref=%20) -> fv34, Insn(iref=%34) -> v47, FnParam(fref=f13, fpref=$f.6) -> fv8, BlockParam(bref=b15, bpref=$b.0) -> v58, BlockParam(bref=b0, bpref=$b.5) -> fv16, FnParam(fref=f13, fpref=$f.0) -> v2, FnParam(fref=f13, fpref=$f.3) -> v5, BlockParam(bref=b0, bpref=$b.3) -> v14, Insn(iref=%14) -> fv28, FnParam(fref=f13, fpref=$f.5) -> fv7, Insn(iref=%44) -> v60, Insn(iref=%32) -> fv45, Insn(iref=%1) -> v21, Insn(iref=%11) -> fv25, Insn(iref=%6) -> fv70, FnParam(fref=f13, fpref=$f.4) -> v6, Insn(iref=%28) -> fv41, Insn(iref=%46) -> fv62, Insn(iref=%9) -> fv23, Insn(iref=%24) -> fv37, Insn(iref=%37) -> v48, BlockParam(bref=b0, bpref=$b.0) -> v11, Insn(iref=%45) -> v61, BlockParam(bref=b0, bpref=$b.2) -> v13, Insn(iref=%29) -> fv42, Insn(iref=%47) -> fv63, Insn(iref=%0) -> v20, Insn(iref=%18) -> fv32, Insn(iref=%3) -> fv67, Insn(iref=%22) -> v36, Insn(iref=%17) -> fv31, Insn(iref=%2) -> v66, Insn(iref=%43) -> v57, Insn(iref=%30) -> fv43, Insn(iref=%21) -> v35, FnParam(fref=f13, fpref=$f.1) -> v3, Insn(iref=%40) -> v54, Insn(iref=%12) -> fv26
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=48), BlockParam(bref=b10, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b10, bpref=$b.0), Int32(val=0)])
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%27), Insn(iref=%18)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Int32(val=0), Insn(iref=%21)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.1)])
// [Asm] defs: [v71]
// [Asm] live_set: [v71]
// [Asm] move_origin: [zero]
// [Asm] defined: v71 is X
// [Asm] defs: [fv22]
// [Asm] live_set: [v11, fv22, v14, zero, v13, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: fv22 is F
// [Asm] defs: [v123]
// [Asm] live_set: [v11, fv22, v14, zero, v13, v123, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v123 is X
// [Asm] defs: [fv124]
// [Asm] live_set: [v11, fv22, v14, zero, v13, fv124, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: fv124 is F
// [Asm] defs: [fv23]
// [Asm] live_set: [v11, fv23, v14, zero, v13, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: fv23 is F
// [Asm] defs: [fv24]
// [Asm] live_set: [v11, fv23, fv24, v14, zero, v13, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: fv24 is F
// [Asm] defs: [fv25]
// [Asm] live_set: [v11, v14, zero, v13, fv25, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: fv25 is F
// [Asm] defs: [v118]
// [Asm] live_set: [v11, v118, v14, zero, v13, fv25, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v118 is X
// [Asm] defs: [fv119]
// [Asm] live_set: [v11, v14, zero, v13, fv25, v12, v15, fv119]
// [Asm] move_origin: []
// [Asm] defined: fv119 is F
// [Asm] defs: [fv26]
// [Asm] live_set: [v11, v14, zero, v13, v12, v15, fv26]
// [Asm] move_origin: []
// [Asm] defined: fv26 is F
// [Asm] defs: [fv27]
// [Asm] live_set: [v11, v14, zero, v13, fv27, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: fv27 is F
// [Asm] defs: [fv28]
// [Asm] live_set: [v11, v14, fv28, zero, v13, fv27, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: fv28 is F
// [Asm] defs: [v113]
// [Asm] live_set: [v11, v14, fv28, zero, v13, fv27, v12, v15, v113]
// [Asm] move_origin: []
// [Asm] defined: v113 is X
// [Asm] defs: [fv114]
// [Asm] live_set: [v11, v14, fv28, zero, v13, fv27, v12, v15, fv114]
// [Asm] move_origin: []
// [Asm] defined: fv114 is F
// [Asm] defs: [fv29]
// [Asm] live_set: [v11, v14, zero, v13, fv29, fv27, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: fv29 is F
// [Asm] defs: [fv30]
// [Asm] live_set: [v11, v14, zero, v13, fv30, fv29, fv27, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: fv30 is F
// [Asm] defs: [fv31]
// [Asm] live_set: [v11, v14, fv31, zero, v13, fv27, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: fv31 is F
// [Asm] defs: [v108]
// [Asm] live_set: [v11, v14, fv31, zero, v13, fv27, v108, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v108 is X
// [Asm] defs: [fv109]
// [Asm] live_set: [v11, v14, fv31, zero, v13, fv109, fv27, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv109 is F
// [Asm] defs: [fv32]
// [Asm] live_set: [v11, v14, fv32, zero, v13, fv27, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv32 is F
// [Asm] defs: [fv33]
// [Asm] live_set: [v11, v14, fv32, zero, v13, fv33, fv27, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv33 is F
// [Asm] defs: [fv34]
// [Asm] live_set: [v11, v14, fv32, zero, v13, fv34, fv33, fv27, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv34 is F
// [Asm] defs: [v35]
// [Asm] live_set: [v11, v14, fv32, zero, v13, fv34, fv33, v35, fv27, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, fv32, zero, v13, fv34, fv33, fv27, v15, v12]
// [Asm] move_origin: []
// [Asm] defs: [v58]
// [Asm] live_set: [v11, v58, v14, v13, zero, v15, v12, v55]
// [Asm] move_origin: [v53]
// [Asm] defined: v58 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v14, v13, zero, v15, v12, v55]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v71]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v59]
// [Asm] live_set: [v11, v14, v13, zero, v59, v15, v12, v55]
// [Asm] move_origin: [zero]
// [Asm] defined: v59 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v13, zero, v59, v15, v12, v55]
// [Asm] move_origin: []
// [Asm] defs: [v51]
// [Asm] live_set: [v11, v14, v13, zero, v15, v12, v51]
// [Asm] move_origin: [zero]
// [Asm] defined: v51 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v13, zero, v15, v12, v51]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12, v15, zero, v13]
// [Asm] move_origin: []
// [Asm] defs: [v85]
// [Asm] live_set: [v11, v14, v53, v13, zero, v85, v15, v12, v55]
// [Asm] move_origin: []
// [Asm] defined: v85 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v53, v13, zero, v15, v12, v55]
// [Asm] move_origin: []
// [Asm] defs: [v84]
// [Asm] live_set: [v11, v14, v13, zero, v84, v15, v12, v55]
// [Asm] move_origin: []
// [Asm] defined: v84 is X
// [Asm] defs: [v58]
// [Asm] live_set: [v11, v58, v14, v13, zero, v15, v12, v55]
// [Asm] move_origin: [v84]
// [Asm] defined: v58 is X
// [Asm] defs: [v53]
// [Asm] live_set: [v11, v14, v53, v13, zero, v15, v12]
// [Asm] move_origin: [v51]
// [Asm] defined: v53 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12, v15, zero, v13]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [fa2, a5, zero, a0, a4, fa0, a2, a1, a3, fa1]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [fa2, a5, zero, a4, fa0, a2, a1, a3, fa1, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, fa2, a5, zero, a4, fa0, a2, a3, fa1, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, fa2, a5, zero, a4, fa0, v4, a3, fa1, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, fa2, a5, zero, a4, fa0, v4, fa1, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, fa2, a5, zero, fa0, v4, v6, fa1, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [fv7]
// [Asm] live_set: [v2, v5, fa2, a5, zero, v4, v6, fa1, fv7, v3]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv7 is F
// [Asm] defs: [fv8]
// [Asm] live_set: [v2, v5, fa2, a5, zero, fv8, v4, v6, fv7, v3]
// [Asm] move_origin: [fa1]
// [Asm] defined: fv8 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v2, v5, fa2, zero, fv8, v4, v6, v9, fv7, v3]
// [Asm] move_origin: [a5]
// [Asm] defined: v9 is X
// [Asm] defs: [fv10]
// [Asm] live_set: [v2, fv10, v5, zero, fv8, v4, v6, v9, fv7, v3]
// [Asm] move_origin: [fa2]
// [Asm] defined: fv10 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v11, fv10, v5, zero, fv8, v4, v6, v9, fv7, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, fv10, v5, zero, fv8, v4, v6, v12, v9, fv7]
// [Asm] move_origin: [v3]
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v11, fv10, v5, v13, zero, fv8, v6, v12, v9, fv7]
// [Asm] move_origin: [v4]
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v11, fv10, v14, v13, zero, fv8, v6, v12, v9, fv7]
// [Asm] move_origin: [v5]
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v11, fv10, v14, v13, zero, fv8, v12, v15, v9, fv7]
// [Asm] move_origin: [v6]
// [Asm] defined: v15 is X
// [Asm] defs: [fv16]
// [Asm] live_set: [v11, fv10, v14, v13, zero, fv8, v12, v15, fv16, v9]
// [Asm] move_origin: [fv7]
// [Asm] defined: fv16 is F
// [Asm] defs: [fv17]
// [Asm] live_set: [v11, fv10, v14, v13, zero, v12, v15, fv16, fv17, v9]
// [Asm] move_origin: [fv8]
// [Asm] defined: fv17 is F
// [Asm] defs: [v18]
// [Asm] live_set: [v11, fv10, v14, v18, v13, zero, v12, v15, fv16, fv17]
// [Asm] move_origin: [v9]
// [Asm] defined: v18 is X
// [Asm] defs: [fv19]
// [Asm] live_set: [v11, v14, v18, v13, zero, fv19, v12, v15, fv16, fv17]
// [Asm] move_origin: [fv10]
// [Asm] defined: fv19 is F
// [Asm] defs: [fv37]
// [Asm] live_set: [v11, fv37, v14, fv32, zero, v13, fv34, fv33, fv27, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv37 is F
// [Asm] defs: [fv38]
// [Asm] live_set: [v11, fv37, v14, fv32, zero, v13, fv34, fv33, fv27, v15, v12, fv38]
// [Asm] move_origin: []
// [Asm] defined: fv38 is F
// [Asm] defs: [v39]
// [Asm] live_set: [v11, v14, fv32, zero, v13, fv34, fv33, fv27, v15, v12, v39]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, fv32, zero, v13, fv34, fv33, fv27, v15, v12]
// [Asm] move_origin: []
// [Asm] defs: [v59]
// [Asm] live_set: [v11, v14, v13, zero, v59, v15, v12, v55]
// [Asm] move_origin: [v58]
// [Asm] defined: v59 is X
// [Asm] defs: [v54]
// [Asm] live_set: [v11, v14, v53, zero, v13, v15, v12, v54]
// [Asm] move_origin: []
// [Asm] defined: v54 is X
// [Asm] defs: [v55]
// [Asm] live_set: [v11, v14, v53, zero, v13, v15, v12, v55]
// [Asm] move_origin: []
// [Asm] defined: v55 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v53, zero, v13, v15, v12, v55]
// [Asm] move_origin: []
// [Asm] defs: [v82]
// [Asm] live_set: [v11, v14, v82, zero, v13, v59, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v82 is X
// [Asm] defs: [v83]
// [Asm] live_set: [v11, v14, zero, v13, v59, v12, v15, v83]
// [Asm] move_origin: []
// [Asm] defined: v83 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, zero, v13, v12, v15]
// [Asm] move_origin: []
// [Asm] defs: [v61]
// [Asm] live_set: [v11, v14, zero, v12, v15, v61]
// [Asm] move_origin: []
// [Asm] defined: v61 is X
// [Asm] defs: [fv62]
// [Asm] live_set: [v11, v14, fv62, zero, v12, v15, v61]
// [Asm] move_origin: []
// [Asm] defined: fv62 is F
// [Asm] defs: [fv63]
// [Asm] live_set: [v11, fv63, v14, fv62, zero, v12, v15, v61]
// [Asm] move_origin: []
// [Asm] defined: fv63 is F
// [Asm] defs: [v64]
// [Asm] live_set: [v11, fv63, v14, fv62, zero, v12, v15, v61, v64]
// [Asm] move_origin: []
// [Asm] defined: v64 is X
// [Asm] defs: [fv65]
// [Asm] live_set: [v11, fv63, v14, fv65, fv62, zero, v12, v15, v61, v64]
// [Asm] move_origin: []
// [Asm] defined: fv65 is F
// [Asm] defs: []
// [Asm] live_set: [v11, fv63, v14, fv65, fv62, zero, v12, v15, v61, v64]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, fv63, v14, fv65, fv62, zero, v12, v15, v61, v64]
// [Asm] move_origin: [v12]
// [Asm] defs: [v13]
// [Asm] live_set: [v11, fv63, v14, fv65, fv62, zero, v13, v12, v15, v64]
// [Asm] move_origin: [v61]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v11, fv63, v14, fv65, fv62, zero, v13, v12, v15, v64]
// [Asm] move_origin: [v14]
// [Asm] defs: []
// [Asm] live_set: [v11, fv63, v14, fv65, fv62, zero, v13, v12, v15, v64]
// [Asm] move_origin: [v15]
// [Asm] defs: [fv16]
// [Asm] live_set: [v11, fv63, v14, fv65, v13, zero, v12, v15, fv16, v64]
// [Asm] move_origin: [fv62]
// [Asm] defined: fv16 is F
// [Asm] defs: [fv17]
// [Asm] live_set: [v11, v14, fv65, v13, zero, v12, v15, fv16, fv17, v64]
// [Asm] move_origin: [fv63]
// [Asm] defined: fv17 is F
// [Asm] defs: [v18]
// [Asm] live_set: [v11, v14, v18, fv65, v13, zero, v12, v15, fv16, fv17]
// [Asm] move_origin: [v64]
// [Asm] defined: v18 is X
// [Asm] defs: [fv19]
// [Asm] live_set: [v11, v14, v18, v13, zero, fv19, v12, v15, fv16, fv17]
// [Asm] move_origin: [fv65]
// [Asm] defined: fv19 is F
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v18, v13, zero, fv19, v12, v15, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defs: [v52]
// [Asm] live_set: [v11, v14, v13, zero, v15, v12, v52]
// [Asm] move_origin: []
// [Asm] defined: v52 is X
// [Asm] defs: [v53]
// [Asm] live_set: [v11, v14, v53, v13, zero, v15, v12]
// [Asm] move_origin: [v52]
// [Asm] defined: v53 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v53, v13, zero, v15, v12]
// [Asm] move_origin: []
// [Asm] defs: [v99]
// [Asm] live_set: [v11, v14, fv32, v99, v13, zero, fv34, fv33, fv27, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v99 is X
// [Asm] defs: [fv100]
// [Asm] live_set: [v11, v14, fv32, v13, zero, fv34, fv33, fv100, fv27, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: fv100 is F
// [Asm] defs: [fv40]
// [Asm] live_set: [v11, v14, fv32, v13, zero, fv34, fv33, v12, v15, fv40]
// [Asm] move_origin: []
// [Asm] defined: fv40 is F
// [Asm] defs: [fv42]
// [Asm] live_set: [v11, v14, fv32, v13, zero, fv42, fv34, fv33, v12, v15, fv40]
// [Asm] move_origin: []
// [Asm] defined: fv42 is F
// [Asm] defs: [fv43]
// [Asm] live_set: [v11, v14, v13, zero, fv42, fv43, fv34, fv33, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: fv43 is F
// [Asm] defs: [fv44]
// [Asm] live_set: [v11, v14, v13, zero, fv42, fv43, v12, v15, fv44]
// [Asm] move_origin: []
// [Asm] defined: fv44 is F
// [Asm] defs: [fv45]
// [Asm] live_set: [v11, v14, fv45, v13, zero, fv42, fv43, v12, v15, fv44]
// [Asm] move_origin: []
// [Asm] defined: fv45 is F
// [Asm] defs: [fv46]
// [Asm] live_set: [v11, fv46, v14, fv45, v13, zero, fv42, fv43, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: fv46 is F
// [Asm] defs: [v92]
// [Asm] live_set: [v11, fv46, v14, fv45, v13, zero, fv42, fv43, v92, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v92 is X
// [Asm] defs: [v47]
// [Asm] live_set: [v11, fv46, v14, fv45, v13, zero, fv42, fv43, v47, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: [v48]
// [Asm] live_set: [v11, fv46, v14, fv45, v48, v13, zero, fv42, fv43, v47, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v48 is X
// [Asm] defs: [fv49]
// [Asm] live_set: [v11, fv46, v14, fv45, v48, v13, zero, fv42, fv43, v47, fv49, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: fv49 is F
// [Asm] defs: []
// [Asm] live_set: [v11, fv46, v14, fv45, v48, v13, zero, fv42, fv43, v47, fv49, v12, v15]
// [Asm] move_origin: []
// [Asm] defs: [fa0]
// [Asm] live_set: [v11, v14, fv45, v48, v13, zero, fv42, fv43, fa0, v47, fv49, v12, v15]
// [Asm] move_origin: [fv46]
// [Asm] defined: fa0 is F
// [Asm] defs: [fa1]
// [Asm] live_set: [v11, v14, fv45, v48, v13, zero, fv42, fa0, v47, fv49, v15, v12, fa1]
// [Asm] move_origin: [fv43]
// [Asm] defined: fa1 is F
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v14, fv45, v48, v13, a0, zero, fv42, fa0, fv49, v15, v12, fa1]
// [Asm] move_origin: [v47]
// [Asm] defined: a0 is X
// [Asm] defs: [fa2]
// [Asm] live_set: [v11, v14, fv45, v48, fa2, v13, a0, zero, fa0, fv49, v15, v12, fa1]
// [Asm] move_origin: [fv42]
// [Asm] defined: fa2 is F
// [Asm] defs: [fa3]
// [Asm] live_set: [v11, v14, v48, fa2, fa3, zero, v13, a0, fa0, fv49, v15, v12, fa1]
// [Asm] move_origin: [fv45]
// [Asm] defined: fa3 is F
// [Asm] defs: [a1]
// [Asm] live_set: [v11, v14, fa2, fa3, zero, v13, a0, fa0, a1, fv49, v15, v12, fa1]
// [Asm] move_origin: [v48]
// [Asm] defined: a1 is X
// [Asm] defs: [fa4]
// [Asm] live_set: [v11, v14, fa2, fa3, zero, v13, fa4, a0, fa0, a1, v12, v15, fa1]
// [Asm] move_origin: [fv49]
// [Asm] defined: fa4 is F
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v14, v13, zero, a0, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v50]
// [Asm] live_set: [v11, v14, v13, zero, v50, v15, v12]
// [Asm] move_origin: [a0]
// [Asm] defined: v50 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v13, zero, v50, v15, v12]
// [Asm] move_origin: []
// [Asm] defs: [v51]
// [Asm] live_set: [v11, v14, v13, zero, v15, v12, v51]
// [Asm] move_origin: [v50]
// [Asm] defined: v51 is X
// [Asm] defs: [v66]
// [Asm] live_set: [v11, v66, zero, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v66 is X
// [Asm] defs: [fv67]
// [Asm] live_set: [v11, v66, fv67, zero, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: fv67 is F
// [Asm] defs: [fv68]
// [Asm] live_set: [v11, fv68, v66, fv67, zero, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: fv68 is F
// [Asm] defs: [v69]
// [Asm] live_set: [v11, fv68, v66, v69, fv67, zero, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v69 is X
// [Asm] defs: [fv70]
// [Asm] live_set: [v11, fv68, v66, fv70, v69, fv67, zero, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: fv70 is F
// [Asm] defs: []
// [Asm] live_set: [v11, fv68, v66, fv70, v69, fv67, zero, v12, v15]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, fv68, v66, fv70, v69, fv67, zero, v12, v15]
// [Asm] move_origin: [v12]
// [Asm] defs: [v13]
// [Asm] live_set: [v11, fv68, v66, fv70, v69, fv67, v13, zero, v12, v15]
// [Asm] move_origin: [zero]
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v11, fv68, fv70, v69, v14, fv67, zero, v13, v12, v15]
// [Asm] move_origin: [v66]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v11, fv68, fv70, v69, v14, fv67, zero, v13, v12, v15]
// [Asm] move_origin: [v15]
// [Asm] defs: [fv16]
// [Asm] live_set: [v11, fv68, fv70, v69, v14, v13, zero, v12, v15, fv16]
// [Asm] move_origin: [fv67]
// [Asm] defined: fv16 is F
// [Asm] defs: [fv17]
// [Asm] live_set: [v11, fv70, v14, v69, v13, zero, v12, v15, fv16, fv17]
// [Asm] move_origin: [fv68]
// [Asm] defined: fv17 is F
// [Asm] defs: [v18]
// [Asm] live_set: [v11, fv70, v14, v18, v13, zero, v12, v15, fv16, fv17]
// [Asm] move_origin: [v69]
// [Asm] defined: v18 is X
// [Asm] defs: [fv19]
// [Asm] live_set: [v11, v14, v18, v13, zero, fv19, v12, v15, fv16, fv17]
// [Asm] move_origin: [fv70]
// [Asm] defined: fv19 is F
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v18, v13, zero, fv19, v12, v15, fv16, fv17]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main_loop30l1_13"];
// [Asm]   r0 [label="v71 ← a0", color=green];
// [Asm]   r46 [label="t1", color=blue];
// [Asm]   r38 [label="v52 ← a0", color=green];
// [Asm]   r33 [label="v54 ← a0", color=green];
// [Asm]   r9 [label="v113 ← a0", color=green];
// [Asm]   r26 [label="v3 ← a1", color=green];
// [Asm]   r47 [label="t2", color=blue];
// [Asm]   r6 [label="v15 ← s4", color=green];
// [Asm]   r44 [label="a7", color=blue];
// [Asm]   r13 [label="v55 ← a1", color=green];
// [Asm]   r42 [label="v48 ← a1", color=green];
// [Asm]   r4 [label="v13 ← s2", color=green];
// [Asm]   r29 [label="v6 ← a4", color=green];
// [Asm]   r35 [label="v83 ← a1", color=green];
// [Asm]   r7 [label="v123 ← a0", color=green];
// [Asm]   r10 [label="v108 ← a0", color=green];
// [Asm]   r8 [label="v118 ← a0", color=green];
// [Asm]   r5 [label="v12 ← s3", color=green];
// [Asm]   r36 [label="v61 ← a1", color=green];
// [Asm]   r32 [label="v39 ← a0", color=green];
// [Asm]   r15 [label="v59 ← a0", color=green];
// [Asm]   r24 [label="a1", color=blue];
// [Asm]   r49 [label="t4", color=blue];
// [Asm]   r43 [label="a6", color=blue];
// [Asm]   r31 [label="v18 ← a0", color=green];
// [Asm]   r39 [label="v99 ← a0", color=green];
// [Asm]   r17 [label="v85 ← a0", color=green];
// [Asm]   r52 [label="v69 ← a0", color=green];
// [Asm]   r48 [label="t3", color=blue];
// [Asm]   r12 [label="v58 ← a0", color=green];
// [Asm]   r37 [label="v64 ← a0", color=green];
// [Asm]   r20 [label="v2 ← a0", color=green];
// [Asm]   r23 [label="a2", color=blue];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r27 [label="v4 ← a2", color=green];
// [Asm]   r1 [label="v11 ← s0", color=green];
// [Asm]   r40 [label="v92 ← a0", color=green];
// [Asm]   r41 [label="v47 ← a0", color=green];
// [Asm]   r28 [label="v5 ← a3", color=green];
// [Asm]   r11 [label="v35 ← a0", color=green];
// [Asm]   r34 [label="v82 ← a1", color=green];
// [Asm]   r22 [label="a4", color=blue];
// [Asm]   r14 [label="a0", color=blue];
// [Asm]   r50 [label="v50 ← a0", color=green];
// [Asm]   r30 [label="v9 ← a5", color=green];
// [Asm]   r51 [label="v66 ← a1", color=green];
// [Asm]   r45 [label="t0", color=blue];
// [Asm]   r25 [label="a3", color=blue];
// [Asm]   r2 [label="v14 ← s1", color=green];
// [Asm]   r16 [label="v51 ← a0", color=green];
// [Asm]   r18 [label="v53 ← a2", color=green];
// [Asm]   r19 [label="v84 ← a0", color=green];
// [Asm]   r21 [label="a5", color=blue];
// [Asm]   r2 -- r32;
// [Asm]   r2 -- r31;
// [Asm]   r2 -- r38;
// [Asm]   r3 -- r52;
// [Asm]   r6 -- r48;
// [Asm]   r5 -- r21;
// [Asm]   r5 -- r33;
// [Asm]   r1 -- r26;
// [Asm]   r4 -- r34;
// [Asm]   r6 -- r35;
// [Asm]   r3 -- r15;
// [Asm]   r1 -- r30;
// [Asm]   r14 -- r43;
// [Asm]   r3 -- r16;
// [Asm]   r4 -- r51;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r2 -- r49;
// [Asm]   r5 -- r17;
// [Asm]   r3 -- r42;
// [Asm]   r5 -- r22;
// [Asm]   r2 -- r43;
// [Asm]   r5 -- r18;
// [Asm]   r28 -- r30;
// [Asm]   r4 -- r44;
// [Asm]   r1 -- r45;
// [Asm]   r3 -- r9;
// [Asm]   r5 -- r47;
// [Asm]   r3 -- r11;
// [Asm]   r4 -- r48;
// [Asm]   r5 -- r29;
// [Asm]   r1 -- r52;
// [Asm]   r3 -- r37;
// [Asm]   r27 -- r28;
// [Asm]   r2 -- r37;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r31;
// [Asm]   r2 -- r41;
// [Asm]   r2 -- r42;
// [Asm]   r3 -- r5;
// [Asm]   r20 -- r30;
// [Asm]   r1 -- r50;
// [Asm]   r4 -- r31;
// [Asm]   r2 -- r34;
// [Asm]   r5 -- r31;
// [Asm]   r3 -- r48;
// [Asm]   r20 -- r23;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r26 -- r28;
// [Asm]   r26 -- r27;
// [Asm]   r2 -- r25;
// [Asm]   r5 -- r35;
// [Asm]   r2 -- r6;
// [Asm]   r20 -- r22;
// [Asm]   r5 -- r6;
// [Asm]   r1 -- r48;
// [Asm]   r2 -- r48;
// [Asm]   r3 -- r39;
// [Asm]   r1 -- r40;
// [Asm]   r22 -- r27;
// [Asm]   r2 -- r12;
// [Asm]   r5 -- r32;
// [Asm]   r20 -- r27;
// [Asm]   r1 -- r2;
// [Asm]   r41 -- r42;
// [Asm]   r4 -- r29;
// [Asm]   r3 -- r33;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r1 -- r51;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r25;
// [Asm]   r3 -- r17;
// [Asm]   r3 -- r49;
// [Asm]   r18 -- r33;
// [Asm]   r2 -- r36;
// [Asm]   r5 -- r51;
// [Asm]   r6 -- r50;
// [Asm]   r1 -- r41;
// [Asm]   r1 -- r38;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r35;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r35;
// [Asm]   r6 -- r23;
// [Asm]   r4 -- r14;
// [Asm]   r3 -- r46;
// [Asm]   r14 -- r44;
// [Asm]   r5 -- r36;
// [Asm]   r6 -- r25;
// [Asm]   r51 -- r52;
// [Asm]   r14 -- r49;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r3 -- r45;
// [Asm]   r13 -- r15;
// [Asm]   r3 -- r25;
// [Asm]   r1 -- r43;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r3 -- r38;
// [Asm]   r6 -- r41;
// [Asm]   r2 -- r4;
// [Asm]   r20 -- r26;
// [Asm]   r1 -- r34;
// [Asm]   r1 -- r47;
// [Asm]   r29 -- r30;
// [Asm]   r21 -- r28;
// [Asm]   r21 -- r29;
// [Asm]   r6 -- r33;
// [Asm]   r6 -- r30;
// [Asm]   r15 -- r35;
// [Asm]   r1 -- r22;
// [Asm]   r20 -- r29;
// [Asm]   r2 -- r52;
// [Asm]   r2 -- r50;
// [Asm]   r5 -- r19;
// [Asm]   r22 -- r26;
// [Asm]   r6 -- r46;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r38;
// [Asm]   r14 -- r46;
// [Asm]   r13 -- r19;
// [Asm]   r3 -- r22;
// [Asm]   r3 -- r50;
// [Asm]   r23 -- r26;
// [Asm]   r6 -- r19;
// [Asm]   r2 -- r44;
// [Asm]   r2 -- r40;
// [Asm]   r4 -- r15;
// [Asm]   r12 -- r13;
// [Asm]   r5 -- r28;
// [Asm]   r2 -- r14;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r4 -- r32;
// [Asm]   r22 -- r28;
// [Asm]   r14 -- r25;
// [Asm]   r1 -- r29;
// [Asm]   r14 -- r21;
// [Asm]   r5 -- r45;
// [Asm]   r3 -- r29;
// [Asm]   r3 -- r20;
// [Asm]   r13 -- r17;
// [Asm]   r1 -- r25;
// [Asm]   r15 -- r34;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r30;
// [Asm]   r5 -- r39;
// [Asm]   r6 -- r39;
// [Asm]   r5 -- r25;
// [Asm]   r20 -- r28;
// [Asm]   r6 -- r38;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r35;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r20 -- r21;
// [Asm]   r3 -- r23;
// [Asm]   r1 -- r42;
// [Asm]   r1 -- r24;
// [Asm]   r6 -- r52;
// [Asm]   r5 -- r12;
// [Asm]   r2 -- r39;
// [Asm]   r6 -- r21;
// [Asm]   r4 -- r38;
// [Asm]   r5 -- r41;
// [Asm]   r2 -- r45;
// [Asm]   r4 -- r41;
// [Asm]   r1 -- r12;
// [Asm]   r6 -- r36;
// [Asm]   r1 -- r37;
// [Asm]   r6 -- r47;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r43;
// [Asm]   r27 -- r29;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r32;
// [Asm]   r5 -- r49;
// [Asm]   r5 -- r42;
// [Asm]   r1 -- r17;
// [Asm]   r2 -- r16;
// [Asm]   r3 -- r24;
// [Asm]   r4 -- r40;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r18;
// [Asm]   r4 -- r42;
// [Asm]   r3 -- r51;
// [Asm]   r3 -- r34;
// [Asm]   r4 -- r35;
// [Asm]   r27 -- r30;
// [Asm]   r1 -- r46;
// [Asm]   r1 -- r31;
// [Asm]   r4 -- r21;
// [Asm]   r6 -- r13;
// [Asm]   r2 -- r33;
// [Asm]   r4 -- r33;
// [Asm]   r3 -- r30;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r43;
// [Asm]   r1 -- r21;
// [Asm]   r2 -- r46;
// [Asm]   r21 -- r27;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r43;
// [Asm]   r6 -- r10;
// [Asm]   r4 -- r28;
// [Asm]   r2 -- r47;
// [Asm]   r3 -- r40;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r4 -- r12;
// [Asm]   r6 -- r31;
// [Asm]   r28 -- r29;
// [Asm]   r3 -- r27;
// [Asm]   r13 -- r18;
// [Asm]   r5 -- r7;
// [Asm]   r6 -- r45;
// [Asm]   r4 -- r50;
// [Asm]   r4 -- r8;
// [Asm]   r5 -- r14;
// [Asm]   r5 -- r50;
// [Asm]   r1 -- r49;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r44;
// [Asm]   r2 -- r24;
// [Asm]   r4 -- r49;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r23;
// [Asm]   r14 -- r22;
// [Asm]   r6 -- r32;
// [Asm]   r5 -- r34;
// [Asm]   r36 -- r37;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r17 -- r18;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r20 -- r24;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r4 -- r37;
// [Asm]   r2 -- r18;
// [Asm]   r6 -- r49;
// [Asm]   r1 -- r23;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r48;
// [Asm]   r5 -- r23;
// [Asm]   r6 -- r44;
// [Asm]   r14 -- r42;
// [Asm]   r25 -- r27;
// [Asm]   r14 -- r23;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r32;
// [Asm]   r6 -- r51;
// [Asm]   r5 -- r52;
// [Asm]   r1 -- r15;
// [Asm]   r5 -- r44;
// [Asm]   r3 -- r47;
// [Asm]   r6 -- r16;
// [Asm]   r25 -- r26;
// [Asm]   r3 -- r28;
// [Asm]   r4 -- r30;
// [Asm]   r14 -- r24;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r12;
// [Asm]   r6 -- r40;
// [Asm]   r20 -- r25;
// [Asm]   r6 -- r24;
// [Asm]   r1 -- r28;
// [Asm]   r1 -- r39;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r34;
// [Asm]   r14 -- r47;
// [Asm]   r2 -- r29;
// [Asm]   r6 -- r37;
// [Asm]   r4 -- r11;
// [Asm]   r4 -- r46;
// [Asm]   r4 -- r45;
// [Asm]   r5 -- r46;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r37;
// [Asm]   r26 -- r30;
// [Asm]   r6 -- r42;
// [Asm]   r3 -- r41;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r14 -- r45;
// [Asm]   r4 -- r47;
// [Asm]   r21 -- r26;
// [Asm]   r3 -- r14;
// [Asm]   r4 -- r39;
// [Asm]   r3 -- r36;
// [Asm]   r26 -- r29;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r1 -- r36;
// [Asm]   r1 -- r14;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r5 -- r43;
// [Asm]   r5 -- r30;
// [Asm]   r2 -- r3;
// [Asm]   r14 -- r48;
// [Asm]   r4 -- r52;
// [Asm]   r5 -- r40;
// [Asm]   r4 -- r19;
// [Asm]   r5 -- r15;
// [Asm]   r3 -- r44;
// [Asm]   comment = "0:v71-> 1:v11-> 2:v14-> 3:zero-> 4:v13-> 5:v12-> 6:v15-> 7:v123-> 8:v118-> 9:v113-> 10:v108-> 11:v35-> 12:v58-> 13:v55-> 15:v59-> 17:v85-> 18:v53-> 19:v84-> 33:v54-> 34:v82-> 35:v83-> 14:a0-> 21:a5-> 22:a4-> 23:a2-> 24:a1-> 25:a3-> 42:v48-> 41:v47-> 43:a6-> 44:a7-> 45:t0-> 46:t1-> 47:t2-> 48:t3-> 49:t4-> 16:v51-> 20:v2-> 26:v3-> 27:v4-> 28:v5-> 29:v6-> 30:v9-> 31:v18-> 32:v39-> 37:v64-> 36:v61-> 38:v52-> 39:v99-> 40:v92-> 50:v50-> 52:v69-> 51:v66"
// [Asm]   comment = "v71<-a0;v52<-a0;v54<-a0;v113<-a0;v3<-a1;v15<-s4;v55<-a1;v48<-a1;v13<-s2;v6<-a4;v83<-a1;v123<-a0;v108<-a0;v118<-a0;v12<-s3;v61<-a1;v39<-a0;v59<-a0;v18<-a0;v99<-a0;v85<-a0;v69<-a0;v58<-a0;v64<-a0;v2<-a0;v4<-a2;v11<-s0;v92<-a0;v47<-a0;v5<-a3;v35<-a0;v82<-a1;v50<-a0;v9<-a5;v66<-a1;v14<-s1;v51<-a0;v53<-a2;v84<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main_loop30l1_13"];
// [Asm]   r0 [label="fv22 ← fa0", color=green];
// [Asm]   r46 [label="ft5", color=blue];
// [Asm]   r38 [label="fv49 ← fa5", color=green];
// [Asm]   r33 [label="fv42 ← fa4", color=green];
// [Asm]   r9 [label="fv114 ← fa2", color=green];
// [Asm]   r26 [label="fv37 ← fa4", color=green];
// [Asm]   r47 [label="ft6", color=blue];
// [Asm]   r6 [label="fv26 ← fa0", color=green];
// [Asm]   r44 [label="ft3", color=blue];
// [Asm]   r13 [label="fv109 ← fa2", color=green];
// [Asm]   r53 [label="fa6", color=blue];
// [Asm]   r42 [label="ft1", color=blue];
// [Asm]   r4 [label="fv25 ← fa0", color=green];
// [Asm]   r29 [label="fv63 ← fa1", color=green];
// [Asm]   r35 [label="fv44 ← fa0", color=green];
// [Asm]   r56 [label="fv68 ← fa1", color=green];
// [Asm]   r7 [label="fv27 ← fa0", color=green];
// [Asm]   r10 [label="fv29 ← fa1", color=green];
// [Asm]   r8 [label="fv28 ← fa1", color=green];
// [Asm]   r5 [label="fv119 ← fa1", color=green];
// [Asm]   r54 [label="fa7", color=blue];
// [Asm]   r36 [label="fv45 ← fa3", color=green];
// [Asm]   r15 [label="fv33 ← fa2", color=green];
// [Asm]   r24 [label="fv17 ← fa1", color=green];
// [Asm]   r32 [label="fv40 ← fa0", color=green];
// [Asm]   r49 [label="ft8", color=blue];
// [Asm]   r57 [label="fv70 ← fa2", color=green];
// [Asm]   r43 [label="ft2", color=blue];
// [Asm]   r31 [label="fv100 ← fa4", color=green];
// [Asm]   r39 [label="fa3", color=blue];
// [Asm]   r17 [label="fa2", color=blue];
// [Asm]   r52 [label="fa5", color=blue];
// [Asm]   r48 [label="ft7", color=blue];
// [Asm]   r12 [label="fv31 ← fa1", color=green];
// [Asm]   r37 [label="fv46 ← fa0", color=green];
// [Asm]   r20 [label="fv7 ← fa0", color=green];
// [Asm]   r23 [label="fv16 ← fa0", color=green];
// [Asm]   r3 [label="fv24 ← fa1", color=green];
// [Asm]   r27 [label="fv38 ← fa5", color=green];
// [Asm]   r1 [label="fv124 ← fa1", color=green];
// [Asm]   r40 [label="fa4", color=blue];
// [Asm]   r41 [label="ft0", color=blue];
// [Asm]   r28 [label="fv62 ← fa0", color=green];
// [Asm]   r11 [label="fv30 ← fa2", color=green];
// [Asm]   r34 [label="fv43 ← fa1", color=green];
// [Asm]   r22 [label="fv10 ← fa2", color=green];
// [Asm]   r14 [label="fv32 ← fa1", color=green];
// [Asm]   r50 [label="ft9", color=blue];
// [Asm]   r30 [label="fv65 ← fa2", color=green];
// [Asm]   r51 [label="ft10", color=blue];
// [Asm]   r45 [label="ft4", color=blue];
// [Asm]   r25 [label="fv19 ← fa2", color=green];
// [Asm]   r2 [label="fv23 ← fa0", color=green];
// [Asm]   r55 [label="fv67 ← fa0", color=green];
// [Asm]   r16 [label="fv34 ← fa3", color=green];
// [Asm]   r18 [label="fa0", color=blue];
// [Asm]   r19 [label="fa1", color=blue];
// [Asm]   r21 [label="fv8 ← fa1", color=green];
// [Asm]   r19 -- r20;
// [Asm]   r36 -- r38;
// [Asm]   r35 -- r36;
// [Asm]   r23 -- r29;
// [Asm]   r16 -- r31;
// [Asm]   r17 -- r18;
// [Asm]   r19 -- r40;
// [Asm]   r23 -- r57;
// [Asm]   r17 -- r21;
// [Asm]   r4 -- r5;
// [Asm]   r34 -- r35;
// [Asm]   r14 -- r16;
// [Asm]   r14 -- r27;
// [Asm]   r14 -- r26;
// [Asm]   r15 -- r26;
// [Asm]   r17 -- r40;
// [Asm]   r15 -- r31;
// [Asm]   r37 -- r38;
// [Asm]   r29 -- r30;
// [Asm]   r16 -- r32;
// [Asm]   r19 -- r38;
// [Asm]   r19 -- r39;
// [Asm]   r8 -- r9;
// [Asm]   r7 -- r26;
// [Asm]   r23 -- r56;
// [Asm]   r28 -- r30;
// [Asm]   r7 -- r13;
// [Asm]   r55 -- r57;
// [Asm]   r33 -- r36;
// [Asm]   r18 -- r40;
// [Asm]   r33 -- r35;
// [Asm]   r16 -- r26;
// [Asm]   r7 -- r9;
// [Asm]   r17 -- r36;
// [Asm]   r15 -- r27;
// [Asm]   r7 -- r27;
// [Asm]   r18 -- r36;
// [Asm]   r22 -- r24;
// [Asm]   r17 -- r39;
// [Asm]   r17 -- r19;
// [Asm]   r18 -- r34;
// [Asm]   r24 -- r30;
// [Asm]   r15 -- r32;
// [Asm]   r21 -- r23;
// [Asm]   r34 -- r38;
// [Asm]   r33 -- r34;
// [Asm]   r18 -- r39;
// [Asm]   r16 -- r34;
// [Asm]   r26 -- r27;
// [Asm]   r14 -- r33;
// [Asm]   r20 -- r22;
// [Asm]   r23 -- r25;
// [Asm]   r18 -- r19;
// [Asm]   r12 -- r13;
// [Asm]   r32 -- r33;
// [Asm]   r56 -- r57;
// [Asm]   r23 -- r30;
// [Asm]   r34 -- r37;
// [Asm]   r16 -- r33;
// [Asm]   r24 -- r57;
// [Asm]   r7 -- r15;
// [Asm]   r7 -- r10;
// [Asm]   r34 -- r36;
// [Asm]   r33 -- r37;
// [Asm]   r10 -- r11;
// [Asm]   r22 -- r23;
// [Asm]   r7 -- r11;
// [Asm]   r19 -- r36;
// [Asm]   r19 -- r33;
// [Asm]   r28 -- r29;
// [Asm]   r15 -- r34;
// [Asm]   r0 -- r1;
// [Asm]   r23 -- r24;
// [Asm]   r39 -- r40;
// [Asm]   r7 -- r31;
// [Asm]   r15 -- r33;
// [Asm]   r18 -- r33;
// [Asm]   r14 -- r31;
// [Asm]   r18 -- r38;
// [Asm]   r7 -- r16;
// [Asm]   r38 -- r39;
// [Asm]   r21 -- r22;
// [Asm]   r17 -- r38;
// [Asm]   r7 -- r8;
// [Asm]   r7 -- r12;
// [Asm]   r24 -- r25;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r7 -- r14;
// [Asm]   r20 -- r21;
// [Asm]   r14 -- r15;
// [Asm]   r55 -- r56;
// [Asm]   r16 -- r27;
// [Asm]   r33 -- r38;
// [Asm]   r17 -- r20;
// [Asm]   r36 -- r37;
// [Asm]   r14 -- r32;
// [Asm]   comment = "0:fv22-> 1:fv124-> 2:fv23-> 3:fv24-> 4:fv25-> 5:fv119-> 6:fv26-> 7:fv27-> 8:fv28-> 9:fv114-> 10:fv29-> 11:fv30-> 12:fv31-> 13:fv109-> 14:fv32-> 15:fv33-> 16:fv34-> 26:fv37-> 27:fv38-> 31:fv100-> 32:fv40-> 33:fv42-> 34:fv43-> 18:fa0-> 36:fv45-> 38:fv49-> 19:fa1-> 17:fa2-> 37:fv46-> 39:fa3-> 40:fa4-> 35:fv44-> 20:fv7-> 21:fv8-> 22:fv10-> 23:fv16-> 24:fv17-> 25:fv19-> 30:fv65-> 29:fv63-> 28:fv62-> 57:fv70-> 56:fv68-> 55:fv67-> 41:ft0-> 42:ft1-> 43:ft2-> 44:ft3-> 45:ft4-> 46:ft5-> 47:ft6-> 48:ft7-> 49:ft8-> 50:ft9-> 51:ft10-> 52:fa5-> 53:fa6-> 54:fa7"
// [Asm]   comment = "fv22<-fa0;fv49<-fa5;fv42<-fa4;fv114<-fa2;fv37<-fa4;fv26<-fa0;fv109<-fa2;fv25<-fa0;fv63<-fa1;fv44<-fa0;fv68<-fa1;fv27<-fa0;fv29<-fa1;fv28<-fa1;fv119<-fa1;fv45<-fa3;fv33<-fa2;fv17<-fa1;fv40<-fa0;fv70<-fa2;fv100<-fa4;fv31<-fa1;fv46<-fa0;fv7<-fa0;fv16<-fa0;fv24<-fa1;fv38<-fa5;fv124<-fa1;fv62<-fa0;fv30<-fa2;fv43<-fa1;fv10<-fa2;fv32<-fa1;fv65<-fa2;fv19<-fa2;fv23<-fa0;fv67<-fa0;fv34<-fa3;fv8<-fa1;"
// [Asm] }
// [Asm] 
// [Asm] subst   mv v71, zero ->   mv a0, zero
// [Asm] subst   fcvt.d.w fv22, v13 ->   fcvt.d.w fa0, s2
// [Asm] subst   li v123, 4613937818241073152 ->   li a0, 4613937818241073152
// [Asm] subst   fmv.d.x fv124, v123 ->   fmv.d.x fa1, a0
// [Asm] subst   fmul.d fv23, fv124, fv22 ->   fmul.d fa0, fa1, fa0
// [Asm] subst   fcvt.d.w fv24, v11 ->   fcvt.d.w fa1, s0
// [Asm] subst   fdiv.d fv25, fv23, fv24 ->   fdiv.d fa0, fa0, fa1
// [Asm] subst   li v118, 4609434218613702656 ->   li a0, 4609434218613702656
// [Asm] subst   fmv.d.x fv119, v118 ->   fmv.d.x fa1, a0
// [Asm] subst   fsub.d fv26, fv25, fv119 ->   fsub.d fa0, fa0, fa1
// [Asm] subst   fneg.d fv27, fv26 ->   fneg.d fa0, fa0
// [Asm] subst   fcvt.d.w fv28, v14 ->   fcvt.d.w fa1, s1
// [Asm] subst   li v113, 4613937818241073152 ->   li a0, 4613937818241073152
// [Asm] subst   fmv.d.x fv114, v113 ->   fmv.d.x fa2, a0
// [Asm] subst   fmul.d fv29, fv114, fv28 ->   fmul.d fa1, fa2, fa1
// [Asm] subst   fcvt.d.w fv30, v12 ->   fcvt.d.w fa2, s3
// [Asm] subst   fdiv.d fv31, fv29, fv30 ->   fdiv.d fa1, fa1, fa2
// [Asm] subst   li v108, 4609434218613702656 ->   li a0, 4609434218613702656
// [Asm] subst   fmv.d.x fv109, v108 ->   fmv.d.x fa2, a0
// [Asm] subst   fsub.d fv32, fv31, fv109 ->   fsub.d fa1, fa1, fa2
// [Asm] subst   fmul.d fv33, fv27, fv27 ->   fmul.d fa2, fa0, fa0
// [Asm] subst   fmul.d fv34, fv32, fv32 ->   fmul.d fa3, fa1, fa1
// [Asm] subst   lw v35, iter.3 ->   lw a0, iter.3
// [Asm] subst   beq zero, v35, .main_loop30l1_13_5 ->   beq zero, a0, .main_loop30l1_13_5
// [Asm] subst   mv v58, v53 ->   mv a0, a2
// [Asm] subst   j .main_loop30l1_13_15 ->   j .main_loop30l1_13_15
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v59, zero ->   mv a0, zero
// [Asm] subst   j .main_loop30l1_13_16 ->   j .main_loop30l1_13_16
// [Asm] subst   mv v51, zero ->   mv a0, zero
// [Asm] subst   j .main_loop30l1_13_9 ->   j .main_loop30l1_13_9
// [Asm] subst   beq v14, v12, .main_loop30l1_13_1 ->   beq s1, s3, .main_loop30l1_13_1
// [Asm] subst   li v85, 48 ->   li a0, 48
// [Asm] subst   blt v53, v85, .main_loop30l1_13_14 ->   blt a2, a0, .main_loop30l1_13_14
// [Asm] subst   li v84, 48 ->   li a0, 48
// [Asm] subst   mv v53, v51 ->   mv a2, a0
// [Asm] subst   beq v13, v11, .main_loop30l1_13_3 ->   beq s2, s0, .main_loop30l1_13_3
// [Asm] subst   mv v11, v2 ->   mv s0, a0
// [Asm] subst   mv v12, v3 ->   mv s3, a1
// [Asm] subst   mv v13, v4 ->   mv s2, a2
// [Asm] subst   mv v14, v5 ->   mv s1, a3
// [Asm] subst   mv v15, v6 ->   mv s4, a4
// [Asm] subst   mv v18, v9 ->   mv a0, a5
// [Asm] subst   fadd.d fv37, fv33, fv34 ->   fadd.d fa4, fa2, fa3
// [Asm] subst   fld fv38, limit_sq.2, t5 ->   fld fa5, limit_sq.2, t5
// [Asm] subst   fle.d v39, fv38, fv37 ->   fle.d a0, fa5, fa4
// [Asm] subst   bne v39, zero, .main_loop30l1_13_7 ->   bne a0, zero, .main_loop30l1_13_7
// [Asm] subst   mul v54, v14, v11 ->   mul a0, s1, s0
// [Asm] subst   add v55, v54, v13 ->   add a1, a0, s2
// [Asm] subst   bge zero, v53, .main_loop30l1_13_11 ->   bge zero, a2, .main_loop30l1_13_11
// [Asm] subst   slliw v82, v55, 2 ->   slliw a1, a1, 2
// [Asm] subst   add v83, v15, v82 ->   add a1, s4, a1
// [Asm] subst   sw v59, 0(v83) ->   sw a0, 0(a1)
// [Asm] subst   addi v61, v13, 1 ->   addi a1, s2, 1
// [Asm] subst   fld fv62, c_im.6, t5 ->   fld fa0, c_im.6, t5
// [Asm] subst   fld fv63, c_re.5, t5 ->   fld fa1, c_re.5, t5
// [Asm] subst   lw v64, iter.3 ->   lw a0, iter.3
// [Asm] subst   fld fv65, limit_sq.2, t5 ->   fld fa2, limit_sq.2, t5
// [Asm] subst   mv v13, v61 ->   mv s2, a1
// [Asm] subst   j .main_loop30l1_13_0 ->   j .main_loop30l1_13_0
// [Asm] subst   lw v52, iter.3 ->   lw a0, iter.3
// [Asm] subst   mv v53, v52 ->   mv a2, a0
// [Asm] subst   j .main_loop30l1_13_10 ->   j .main_loop30l1_13_10
// [Asm] subst   li v99, 4611686018427387904 ->   li a0, 4611686018427387904
// [Asm] subst   fmv.d.x fv100, v99 ->   fmv.d.x fa4, a0
// [Asm] subst   fmul.d fv40, fv100, fv27 ->   fmul.d fa0, fa4, fa0
// [Asm] subst   fld fv42, c_im.6, t5 ->   fld fa4, c_im.6, t5
// [Asm] subst   fmadd.d fv43, fv40, fv32, fv42 ->   fmadd.d fa1, fa0, fa1, fa4
// [Asm] subst   fsub.d fv44, fv33, fv34 ->   fsub.d fa0, fa2, fa3
// [Asm] subst   fld fv45, c_re.5, t5 ->   fld fa3, c_re.5, t5
// [Asm] subst   fadd.d fv46, fv44, fv45 ->   fadd.d fa0, fa0, fa3
// [Asm] subst   li v92, 1 ->   li a0, 1
// [Asm] subst   addi v47, v92, 0 ->   addi a0, a0, 0
// [Asm] subst   lw v48, iter.3 ->   lw a1, iter.3
// [Asm] subst   fld fv49, limit_sq.2, t5 ->   fld fa5, limit_sq.2, t5
// [Asm] subst   fmv.d fa2, fv42 ->   fmv.d fa2, fa4
// [Asm] subst   fmv.d fa4, fv49 ->   fmv.d fa4, fa5
// [Asm] subst   call calc_pixel7l0_12 ->   call calc_pixel7l0_12
// [Asm] subst   addi v66, v14, 1 ->   addi a1, s1, 1
// [Asm] subst   fld fv67, c_im.6, t5 ->   fld fa0, c_im.6, t5
// [Asm] subst   fld fv68, c_re.5, t5 ->   fld fa1, c_re.5, t5
// [Asm] subst   lw v69, iter.3 ->   lw a0, iter.3
// [Asm] subst   fld fv70, limit_sq.2, t5 ->   fld fa2, limit_sq.2, t5
// [Asm] subst   mv v13, zero ->   mv s2, zero
// [Asm] subst   mv v14, v66 ->   mv s1, a1
// [Asm] subst   j .main_loop30l1_13_0 ->   j .main_loop30l1_13_0
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v19, FnParam(fref=f15, fpref=$f.2) -> v4, FnParam(fref=f15, fpref=$f.3) -> fv5, Insn(iref=%9) -> v16, Insn(iref=%16) -> v20, Insn(iref=%8) -> v15, Insn(iref=%10) -> v17, Insn(iref=%14) -> v18, Insn(iref=%5) -> fv12, Insn(iref=%0) -> v7, Insn(iref=%19) -> v23, Insn(iref=%4) -> fv11, FnParam(fref=f15, fpref=$f.1) -> fv3, Insn(iref=%3) -> v10, Insn(iref=%18) -> v22, Insn(iref=%13) -> v27, Mem(fref=f15, mref=m0) -> v6, FnParam(fref=f15, fpref=$f.0) -> fv2, Insn(iref=%7) -> fv14, Self(fref=f15) -> v0, BlockParam(bref=b5, bpref=$b.0) -> v28, Insn(iref=%17) -> v21, BlockParam(bref=b6, bpref=$b.0) -> v29, Insn(iref=%2) -> v9, Insn(iref=%1) -> v8, Insn(iref=%20) -> v24, Insn(iref=%11) -> v25, Insn(iref=%6) -> v13, Insn(iref=%12) -> v26
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Int32(val=0), Insn(iref=%1)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Int32(val=0), Insn(iref=%0)])
// [Asm] defs: [v18]
// [Asm] live_set: [v8, v6, v18, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v8, v19, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v40]
// [Asm] live_set: [v8, v40, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v40 is X
// [Asm] defs: [v41]
// [Asm] live_set: [v8, v41, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v8, v6, zero, v20, v7]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v8, v6, v21, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v6, v21, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v8, v6, zero, a0, v7]
// [Asm] move_origin: [v21]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v8, v6, zero, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v22]
// [Asm] live_set: [v8, v6, zero, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v36]
// [Asm] live_set: [v8, v36, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v8, v6, zero, v23, v7]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v6, zero, v23, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v7, v6, zero, a0, v23]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, v6, zero, a0, v23]
// [Asm] move_origin: [v7]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, v6, zero, a0]
// [Asm] move_origin: [v23]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [a2, a1, v6, a3, zero, a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [a2, a1, a3, zero, a0, a4]
// [Asm] move_origin: [v6]
// [Asm] defined: a4 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v24]
// [Asm] live_set: [v24, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v24 is X
// [Asm] defs: []
// [Asm] live_set: [v24, zero]
// [Asm] move_origin: []
// [Asm] defs: [v28]
// [Asm] live_set: [v28, zero]
// [Asm] move_origin: [v24]
// [Asm] defined: v28 is X
// [Asm] defs: [v29]
// [Asm] live_set: [v29, zero]
// [Asm] move_origin: [v28]
// [Asm] defined: v29 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v33]
// [Asm] live_set: [v8, v6, zero, v33, v7]
// [Asm] move_origin: []
// [Asm] defined: v33 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v8, v6, zero, a0, v7]
// [Asm] move_origin: [v33]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v8, v6, zero, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v25]
// [Asm] live_set: [v8, v6, zero, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v25 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v31]
// [Asm] live_set: [v8, v6, v31, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v8, v6, zero, v26, v7]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v6, zero, v26, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v7, v6, zero, a0, v26]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, v6, zero, a0, v26]
// [Asm] move_origin: [v7]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, v6, zero, a0, v26]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [a2, a1, v6, a3, zero, a0]
// [Asm] move_origin: [v26]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [a2, a1, a3, zero, a0, a4]
// [Asm] move_origin: [v6]
// [Asm] defined: a4 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v27]
// [Asm] live_set: [zero, v27]
// [Asm] move_origin: [a0]
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v27]
// [Asm] move_origin: []
// [Asm] defs: [v28]
// [Asm] live_set: [v28, zero]
// [Asm] move_origin: [v27]
// [Asm] defined: v28 is X
// [Asm] defs: []
// [Asm] live_set: [v28, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v8, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [fa2, zero, a0, fa0, s11, fa1]
// [Asm] move_origin: []
// [Asm] defs: [fv2]
// [Asm] live_set: [fa2, zero, a0, s11, fa1]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fa2, zero, a0, s11]
// [Asm] move_origin: [fa1]
// [Asm] defined: fv3 is F
// [Asm] defs: [v4]
// [Asm] live_set: [fa2, zero, s11]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: [fv5]
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: [fa2]
// [Asm] defined: fv5 is F
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, s11]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [zero, v7, s11]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v7, s11]
// [Asm] move_origin: []
// [Asm] defs: [v53]
// [Asm] live_set: [v53, zero, v7, s11]
// [Asm] move_origin: []
// [Asm] defined: v53 is X
// [Asm] defs: [v8]
// [Asm] live_set: [zero, v7, v8, s11]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [zero, v7, v8, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v50]
// [Asm] live_set: [zero, v50, v7, v8, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: v50 is X
// [Asm] defs: [v6]
// [Asm] live_set: [zero, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, v7, v8, v6]
// [Asm] move_origin: [v9]
// [Asm] defined: a1 is X
// [Asm] defs: [fv11]
// [Asm] live_set: [zero, fv11, v7, v8, v6]
// [Asm] move_origin: []
// [Asm] defined: fv11 is F
// [Asm] defs: [fv12]
// [Asm] live_set: [zero, fv11, v7, v8, fv12, v6]
// [Asm] move_origin: []
// [Asm] defined: fv12 is F
// [Asm] defs: [v13]
// [Asm] live_set: [zero, v13, fv11, v7, v8, fv12, v6]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [fv14]
// [Asm] live_set: [zero, v13, fv11, v7, v8, fv12, v6, fv14]
// [Asm] move_origin: []
// [Asm] defined: fv14 is F
// [Asm] defs: []
// [Asm] live_set: [zero, v13, fv11, v7, v8, fv12, v6, fv14]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, zero, v13, fv11, v7, v8, fv12, v6, fv14]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a0, zero, v13, fv11, v7, v8, fv12, v6, a1, fv14]
// [Asm] move_origin: [v7]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a0, zero, v13, fv11, v7, v8, fv12, a2, v6, a1, fv14]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [a3, a0, zero, v13, fv11, v7, v8, fv12, a2, v6, a1, fv14]
// [Asm] move_origin: [zero]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [fv14, a3, a0, zero, v13, fv11, a4, v7, v8, fv12, a2, v6, a1]
// [Asm] move_origin: [v6]
// [Asm] defined: a4 is X
// [Asm] defs: [fa0]
// [Asm] live_set: [a3, fv14, a0, zero, v13, a4, v8, fa0, v7, a2, fv12, a1, v6]
// [Asm] move_origin: [fv11]
// [Asm] defined: fa0 is F
// [Asm] defs: [fa1]
// [Asm] live_set: [a3, fa1, a0, zero, v13, a4, v8, fa0, v7, a2, v6, a1, fv14]
// [Asm] move_origin: [fv12]
// [Asm] defined: fa1 is F
// [Asm] defs: [a5]
// [Asm] live_set: [fa1, a5, a0, zero, a4, v7, v8, fa0, a2, a1, v6, a3, fv14]
// [Asm] move_origin: [v13]
// [Asm] defined: a5 is X
// [Asm] defs: [fa2]
// [Asm] live_set: [fa1, fa2, a5, a0, zero, a4, v7, v8, fa0, a2, a1, v6, a3]
// [Asm] move_origin: [fv14]
// [Asm] defined: fa2 is F
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v8, v6, zero, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v15]
// [Asm] live_set: [v8, v6, zero, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v8, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v29]
// [Asm] live_set: [v29, zero]
// [Asm] move_origin: [zero]
// [Asm] defined: v29 is X
// [Asm] defs: []
// [Asm] live_set: [v29, zero]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main94l3_15"];
// [Asm]   r0 [label="v18 ← a0", color=green];
// [Asm]   r38 [label="v50 ← a1", color=green];
// [Asm]   r33 [label="v27 ← a0", color=green];
// [Asm]   r9 [label="v21 ← a0", color=green];
// [Asm]   r26 [label="v24 ← a0", color=green];
// [Asm]   r6 [label="v40 ← a0", color=green];
// [Asm]   r13 [label="a3", color=blue];
// [Asm]   r4 [label="v7 ← s2", color=green];
// [Asm]   r29 [label="v33 ← a0", color=green];
// [Asm]   r35 [label="v4 ← a0", color=green];
// [Asm]   r7 [label="v41 ← a0", color=green];
// [Asm]   r10 [label="a0", color=blue];
// [Asm]   r8 [label="v20 ← a0", color=green];
// [Asm]   r5 [label="v19 ← a0", color=green];
// [Asm]   r36 [label="v53 ← a0", color=green];
// [Asm]   r15 [label="a5", color=blue];
// [Asm]   r32 [label="v26 ← a3", color=green];
// [Asm]   r24 [label="v36 ← a0", color=green];
// [Asm]   r31 [label="v31 ← a0", color=green];
// [Asm]   r39 [label="v13 ← a5", color=green];
// [Asm]   r17 [label="a7", color=blue];
// [Asm]   r12 [label="a2", color=blue];
// [Asm]   r37 [label="v9 ← a0", color=green];
// [Asm]   r20 [label="t2", color=blue];
// [Asm]   r23 [label="v22 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r27 [label="v28 ← a0", color=green];
// [Asm]   r40 [label="v15 ← a0", color=green];
// [Asm]   r1 [label="v8 ← s0", color=green];
// [Asm]   r28 [label="v29 ← a0", color=green];
// [Asm]   r11 [label="a1", color=blue];
// [Asm]   r34 [label="s11", color=blue];
// [Asm]   r22 [label="t4", color=blue];
// [Asm]   r14 [label="a4", color=blue];
// [Asm]   r30 [label="v25 ← a0", color=green];
// [Asm]   r25 [label="v23 ← a2", color=green];
// [Asm]   r2 [label="v6 ← s1", color=green];
// [Asm]   r16 [label="a6", color=blue];
// [Asm]   r18 [label="t0", color=blue];
// [Asm]   r19 [label="t1", color=blue];
// [Asm]   r21 [label="t3", color=blue];
// [Asm]   r2 -- r39;
// [Asm]   r2 -- r32;
// [Asm]   r2 -- r31;
// [Asm]   r4 -- r38;
// [Asm]   r12 -- r32;
// [Asm]   r1 -- r12;
// [Asm]   r3 -- r15;
// [Asm]   r4 -- r34;
// [Asm]   r1 -- r37;
// [Asm]   r1 -- r30;
// [Asm]   r2 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r3 -- r6;
// [Asm]   r11 -- r14;
// [Asm]   r1 -- r4;
// [Asm]   r37 -- r38;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r10 -- r13;
// [Asm]   r2 -- r10;
// [Asm]   r10 -- r19;
// [Asm]   r20 -- r34;
// [Asm]   r3 -- r32;
// [Asm]   r11 -- r32;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r3 -- r37;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r37;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r4 -- r22;
// [Asm]   r4 -- r40;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r14 -- r39;
// [Asm]   r3 -- r31;
// [Asm]   r3 -- r34;
// [Asm]   r3 -- r5;
// [Asm]   r18 -- r34;
// [Asm]   r4 -- r31;
// [Asm]   r14 -- r34;
// [Asm]   r2 -- r34;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r31;
// [Asm]   r16 -- r34;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r10 -- r20;
// [Asm]   r3 -- r30;
// [Asm]   r3 -- r4;
// [Asm]   r11 -- r13;
// [Asm]   r10 -- r18;
// [Asm]   r3 -- r39;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r22 -- r34;
// [Asm]   r10 -- r12;
// [Asm]   r3 -- r13;
// [Asm]   r3 -- r40;
// [Asm]   r1 -- r40;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r10 -- r22;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r29;
// [Asm]   r3 -- r33;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r27;
// [Asm]   r4 -- r25;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r8;
// [Asm]   r11 -- r15;
// [Asm]   r1 -- r38;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r2 -- r22;
// [Asm]   r10 -- r25;
// [Asm]   r3 -- r35;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r24;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r23;
// [Asm]   r17 -- r34;
// [Asm]   r14 -- r15;
// [Asm]   r11 -- r25;
// [Asm]   r10 -- r17;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r3 -- r25;
// [Asm]   r13 -- r15;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r34 -- r35;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r3 -- r38;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r4 -- r37;
// [Asm]   r1 -- r34;
// [Asm]   r1 -- r23;
// [Asm]   r12 -- r34;
// [Asm]   r12 -- r15;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r22;
// [Asm]   r1 -- r32;
// [Asm]   r19 -- r34;
// [Asm]   r11 -- r12;
// [Asm]   r1 -- r15;
// [Asm]   r4 -- r20;
// [Asm]   r1 -- r13;
// [Asm]   r21 -- r34;
// [Asm]   r3 -- r28;
// [Asm]   r4 -- r30;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r10 -- r34;
// [Asm]   r10 -- r16;
// [Asm]   r1 -- r39;
// [Asm]   r3 -- r22;
// [Asm]   r34 -- r38;
// [Asm]   r2 -- r40;
// [Asm]   r2 -- r29;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r13 -- r34;
// [Asm]   r12 -- r13;
// [Asm]   r2 -- r14;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r34 -- r37;
// [Asm]   r4 -- r32;
// [Asm]   r1 -- r29;
// [Asm]   r11 -- r39;
// [Asm]   r10 -- r15;
// [Asm]   r13 -- r14;
// [Asm]   r34 -- r36;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r29;
// [Asm]   r10 -- r39;
// [Asm]   r3 -- r20;
// [Asm]   r1 -- r25;
// [Asm]   r2 -- r21;
// [Asm]   r12 -- r39;
// [Asm]   r15 -- r34;
// [Asm]   r3 -- r14;
// [Asm]   r4 -- r36;
// [Asm]   r11 -- r34;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r30;
// [Asm]   r4 -- r39;
// [Asm]   r3 -- r36;
// [Asm]   r12 -- r14;
// [Asm]   r4 -- r17;
// [Asm]   r13 -- r39;
// [Asm]   r2 -- r9;
// [Asm]   r10 -- r32;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r10;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r10 -- r21;
// [Asm]   r4 -- r19;
// [Asm]   r1 -- r24;
// [Asm]   r10 -- r14;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:v18-> 1:v8-> 2:v6-> 3:zero-> 4:v7-> 5:v19-> 6:v40-> 7:v41-> 8:v20-> 9:v21-> 10:a0-> 11:a1-> 12:a2-> 13:a3-> 14:a4-> 15:a5-> 34:s11-> 39:v13-> 32:v26-> 16:a6-> 17:a7-> 18:t0-> 19:t1-> 20:t2-> 21:t3-> 22:t4-> 25:v23-> 37:v9-> 38:v50-> 23:v22-> 24:v36-> 29:v33-> 30:v25-> 31:v31-> 40:v15-> 36:v53-> 35:v4-> 26:v24-> 27:v28-> 28:v29-> 33:v27"
// [Asm]   comment = "v18<-a0;v50<-a1;v27<-a0;v21<-a0;v24<-a0;v40<-a0;v7<-s2;v33<-a0;v4<-a0;v41<-a0;v20<-a0;v19<-a0;v53<-a0;v26<-a3;v36<-a0;v31<-a0;v13<-a5;v9<-a0;v22<-a0;v28<-a0;v15<-a0;v8<-s0;v29<-a0;v25<-a0;v23<-a2;v6<-s1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main94l3_15"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r20 [label="fv3 ← fa0", color=green];
// [Asm]   r23 [label="fv12 ← fa1", color=green];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r22 [label="fv11 ← fa0", color=green];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r24 [label="fv14 ← fa2", color=green];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r19 [label="fv2 ← fa0", color=green];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r21 [label="fv5 ← fa0", color=green];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   r11 -- r12;
// [Asm]   r23 -- r24;
// [Asm]   r11 -- r23;
// [Asm]   r12 -- r19;
// [Asm]   r13 -- r20;
// [Asm]   r22 -- r24;
// [Asm]   r13 -- r19;
// [Asm]   r22 -- r23;
// [Asm]   r12 -- r13;
// [Asm]   r11 -- r24;
// [Asm]   r11 -- r13;
// [Asm]   r12 -- r24;
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 19:fv2-> 24:fv14-> 23:fv12-> 22:fv11-> 20:fv3-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7-> 21:fv5"
// [Asm]   comment = "fv3<-fa0;fv12<-fa1;fv11<-fa0;fv14<-fa2;fv2<-fa0;fv5<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   fmv.d fv3, fa1 ->   fmv.d fa0, fa1
// [Asm] subst   fmv.d fv5, fa2 ->   fmv.d fa0, fa2
// [Asm] subst   call minimbt_read_int ->   call minimbt_read_int
// [Asm] subst   mv v7, a0 ->   mv s2, a0
// [Asm] subst   li v53, 2 ->   li a0, 2
// [Asm] subst   mul v8, v7, v53 ->   mul s0, s2, a0
// [Asm] subst   mul v9, v8, v7 ->   mul a0, s0, s2
// [Asm] subst   slliw v50, v9, 2 ->   slliw a1, a0, 2
// [Asm] subst   sub v6, s11, v50 ->   sub s1, s11, a1
// [Asm] subst   andi s11, v6, -8 ->   andi s11, s1, -8
// [Asm] subst   mv a1, v9 ->   mv a1, a0
// [Asm] subst   fld fv11, c_im.6, t5 ->   fld fa0, c_im.6, t5
// [Asm] subst   fld fv12, c_re.5, t5 ->   fld fa1, c_re.5, t5
// [Asm] subst   lw v13, iter.3 ->   lw a5, iter.3
// [Asm] subst   fld fv14, limit_sq.2, t5 ->   fld fa2, limit_sq.2, t5
// [Asm] subst   mv a0, v8 ->   mv a0, s0
// [Asm] subst   mv a1, v7 ->   mv a1, s2
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   mv a3, zero ->   mv a3, zero
// [Asm] subst   mv a4, v6 ->   mv a4, s1
// [Asm] subst   call main_loop30l1_13 ->   call main_loop30l1_13
// [Asm] subst   beq zero, v7, .main94l3_15_1 ->   beq zero, s2, .main94l3_15_1
// [Asm] subst   li v33, 10 ->   li a0, 10
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   li v31, 1 ->   li a0, 1
// [Asm] subst   addi v26, v31, 0 ->   addi a3, a0, 0
// [Asm] subst   mv a0, v8 ->   mv a0, s0
// [Asm] subst   mv a1, v7 ->   mv a1, s2
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   mv a4, v6 ->   mv a4, s1
// [Asm] subst   call print_loop68l2_14 ->   call print_loop68l2_14
// [Asm] subst   j .main94l3_15_5 ->   j .main94l3_15_5
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] subst   beq zero, v8, .main94l3_15_3 ->   beq zero, s0, .main94l3_15_3
// [Asm] subst   mv v29, zero ->   mv a0, zero
// [Asm] subst   j .main94l3_15_6 ->   j .main94l3_15_6
// [Asm] subst   mul v18, zero, v8 ->   mul a0, zero, s0
// [Asm] subst   addi v19, v18, 0 ->   addi a0, a0, 0
// [Asm] subst   slliw v40, v19, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v41, v6, v40 ->   add a0, s1, a0
// [Asm] subst   lw v20, 0(v41) ->   lw a0, 0(a0)
// [Asm] subst   addi v21, v20, 48 ->   addi a0, a0, 48
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   li v36, 1 ->   li a0, 1
// [Asm] subst   addi v23, v36, 0 ->   addi a2, a0, 0
// [Asm] subst   mv a0, v8 ->   mv a0, s0
// [Asm] subst   mv a1, v7 ->   mv a1, s2
// [Asm] subst   mv a3, zero ->   mv a3, zero
// [Asm] subst   mv a4, v6 ->   mv a4, s1
// [Asm] subst   call print_loop68l2_14 ->   call print_loop68l2_14
// [Asm] pre_assigned_registers: Self(fref=f10) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$c_im.6_10"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   comment = "0:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$c_im.6_10"];
// [Asm]   r0 [label="fv3 ← fa0", color=green];
// [Asm]   r1 [label="fa0", color=blue];
// [Asm]   comment = "0:fv3-> 1:fa0"
// [Asm]   comment = "fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 4604885582990058455 ->   li a0, 4604885582990058455
// [Asm] subst   fmv.d.x fv3, v2 ->   fmv.d.x fa0, a0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%0) -> fv2, Insn(iref=%2) -> fv3
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [fv2]
// [Asm] live_set: [fv2]
// [Asm] move_origin: []
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$limit_sq.2_2"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$limit_sq.2_2"];
// [Asm]   r0 [label="fv2 ← fa0", color=green];
// [Asm]   r2 [label="fa0", color=blue];
// [Asm]   r1 [label="fv3 ← fa0", color=green];
// [Asm]   comment = "0:fv2-> 1:fv3-> 2:fa0"
// [Asm]   comment = "fv2<-fa0;fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   fld fv2, limit.1, t5 ->   fld fa0, limit.1, t5
// [Asm] subst   fmul.d fv3, fv2, fv2 ->   fmul.d fa0, fa0, fa0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f14, fpref=$f.2) -> v4, FnParam(fref=f14, fpref=$f.1) -> v3, BlockParam(bref=b10, bpref=$b.0) -> v43, Insn(iref=%10) -> v36, BlockParam(bref=b0, bpref=$b.4) -> v11, BlockParam(bref=b0, bpref=$b.3) -> v10, Insn(iref=%27) -> v22, Insn(iref=%25) -> v29, Insn(iref=%14) -> v40, BlockParam(bref=b18, bpref=$b.0) -> v45, FnParam(fref=f14, fpref=$f.4) -> v6, FnParam(fref=f14, fpref=$f.0) -> v2, Insn(iref=%4) -> v33, Insn(iref=%32) -> v27, Insn(iref=%1) -> v13, Insn(iref=%11) -> v37, Insn(iref=%6) -> v41, Insn(iref=%31) -> v26, FnParam(fref=f14, fpref=$f.3) -> v5, BlockParam(bref=b16, bpref=$b.0) -> v30, BlockParam(bref=b17, bpref=$b.0) -> v44, Insn(iref=%28) -> v23, Insn(iref=%16) -> v14, Insn(iref=%24) -> v28, Insn(iref=%9) -> v35, BlockParam(bref=b0, bpref=$b.0) -> v7, BlockParam(bref=b0, bpref=$b.1) -> v8, BlockParam(bref=b0, bpref=$b.2) -> v9, Insn(iref=%29) -> v24, Insn(iref=%5) -> v34, Insn(iref=%0) -> v12, Insn(iref=%19) -> v17, Insn(iref=%18) -> v16, Insn(iref=%3) -> v32, Insn(iref=%13) -> v39, Insn(iref=%7) -> v42, Insn(iref=%22) -> v20, Self(fref=f14) -> v0, Insn(iref=%17) -> v15, Insn(iref=%23) -> v21, Insn(iref=%2) -> v31, Insn(iref=%20) -> v18, Insn(iref=%30) -> v25, Insn(iref=%21) -> v19, Insn(iref=%12) -> v38
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%3), BlockParam(bref=b0, bpref=$b.1)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%21), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.1)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.1)])
// [Asm] defs: []
// [Asm] live_set: [v8, v11, v10, zero, v9, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v45]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, a3, zero, a0, a4]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, a3, zero, a4, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, a3, zero, a4, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, a3, zero, a4, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, zero, a4, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v4, v6, v5, zero, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v4, v6, v5, zero, v7]
// [Asm] move_origin: [v2]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v4, v6, v5, zero, v8]
// [Asm] move_origin: [v3]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v7, v6, v5, zero, v9, v8]
// [Asm] move_origin: [v4]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v7, v6, v10, zero, v9, v8]
// [Asm] move_origin: [v5]
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: [v6]
// [Asm] defined: v11 is X
// [Asm] defs: [v45]
// [Asm] live_set: [v45]
// [Asm] move_origin: [zero]
// [Asm] defined: v45 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v11, zero, v7, v8, v35, v32]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v11, zero, v7, v8, v36, v32]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: [v53]
// [Asm] live_set: [v11, v53, zero, v7, v8, v32]
// [Asm] move_origin: []
// [Asm] defined: v53 is X
// [Asm] defs: [v54]
// [Asm] live_set: [v11, zero, v7, v8, v32, v54]
// [Asm] move_origin: []
// [Asm] defined: v54 is X
// [Asm] defs: [v37]
// [Asm] live_set: [v11, zero, v7, v8, v32, v37]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: [v38]
// [Asm] live_set: [v11, zero, v7, v8, v32, v38]
// [Asm] move_origin: []
// [Asm] defined: v38 is X
// [Asm] defs: []
// [Asm] live_set: [v11, zero, v7, v8, v32, v38]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, zero, a0, v7, v8, v32]
// [Asm] move_origin: [v38]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, zero, a0, v7, v8, v32]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v39]
// [Asm] live_set: [v11, zero, v7, v8, v32]
// [Asm] move_origin: [a0]
// [Asm] defined: v39 is X
// [Asm] defs: []
// [Asm] live_set: [v11, zero, v7, v8, v32]
// [Asm] move_origin: []
// [Asm] defs: [v49]
// [Asm] live_set: [v11, v49, zero, v7, v8, v32]
// [Asm] move_origin: []
// [Asm] defined: v49 is X
// [Asm] defs: [v40]
// [Asm] live_set: [v11, zero, v7, v8, v32, v40]
// [Asm] move_origin: []
// [Asm] defined: v40 is X
// [Asm] defs: []
// [Asm] live_set: [v11, zero, v7, v8, v32, v40]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v11, zero, v7, v8, v32, v40]
// [Asm] move_origin: [v8]
// [Asm] defs: [v9]
// [Asm] live_set: [v11, zero, v7, v8, v32, v9]
// [Asm] move_origin: [v40]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: [v32]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, zero, v7, v8, v32]
// [Asm] move_origin: []
// [Asm] defs: [v47]
// [Asm] live_set: [v11, zero, v7, v8, v32, v47]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v11, zero, a0, v7, v8, v32]
// [Asm] move_origin: [v47]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, zero, a0, v7, v8, v32]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v41]
// [Asm] live_set: [v11, zero, v7, v8, v32]
// [Asm] move_origin: [a0]
// [Asm] defined: v41 is X
// [Asm] defs: []
// [Asm] live_set: [v11, zero, v7, v8, v32]
// [Asm] move_origin: []
// [Asm] defs: [v42]
// [Asm] live_set: [v11, zero, v42, v7, v8]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: []
// [Asm] live_set: [v11, zero, v42, v7, v8]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v11, zero, v42, v7, v8]
// [Asm] move_origin: [v8]
// [Asm] defs: [v9]
// [Asm] live_set: [v11, zero, v42, v7, v8, v9]
// [Asm] move_origin: [zero]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: [v42]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v7, v8]
// [Asm] move_origin: []
// [Asm] defs: [v62]
// [Asm] live_set: [v11, v62, v10, zero, v7, v8]
// [Asm] move_origin: []
// [Asm] defined: v62 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v10, zero, a0, v7, v8]
// [Asm] move_origin: [v62]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, zero, a0, v7, v8]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v28]
// [Asm] live_set: [v11, v10, zero, v7, v8]
// [Asm] move_origin: [a0]
// [Asm] defined: v28 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v7, v8]
// [Asm] move_origin: []
// [Asm] defs: [v29]
// [Asm] live_set: [v11, zero, v29, v7, v8]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: []
// [Asm] live_set: [v11, zero, v29, v7, v8]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v11, zero, v29, v7, v8]
// [Asm] move_origin: [v8]
// [Asm] defs: [v9]
// [Asm] live_set: [v11, zero, v29, v7, v8, v9]
// [Asm] move_origin: [zero]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: [v29]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: [v43]
// [Asm] live_set: [v43]
// [Asm] move_origin: [zero]
// [Asm] defined: v43 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v11, v14, v10, zero, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v11, v10, zero, v7, v8, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v75]
// [Asm] live_set: [v11, v10, v75, zero, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: v75 is X
// [Asm] defs: [v76]
// [Asm] live_set: [v11, v10, zero, v7, v8, v9, v76]
// [Asm] move_origin: []
// [Asm] defined: v76 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v16, v10, zero, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v11, v10, zero, v7, v8, v17, v9]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v7, v8, v17, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v10, zero, a0, v7, v8, v9]
// [Asm] move_origin: [v17]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, zero, a0, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v18]
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v11, v10, zero, v7, v8, v19]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v19, v10, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v30]
// [Asm] live_set: [v30]
// [Asm] move_origin: [zero]
// [Asm] defined: v30 is X
// [Asm] defs: [v44]
// [Asm] live_set: [v44]
// [Asm] move_origin: [v30]
// [Asm] defined: v44 is X
// [Asm] defs: []
// [Asm] live_set: [v44]
// [Asm] move_origin: []
// [Asm] defs: [v44]
// [Asm] live_set: [v44]
// [Asm] move_origin: [v43]
// [Asm] defined: v44 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v59]
// [Asm] live_set: [v7, v11, v59, v10, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v59 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v7, v11, v10, zero, a0, v8]
// [Asm] move_origin: [v59]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v7, v11, v10, zero, a0, v8]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v31]
// [Asm] live_set: [v7, v11, v10, zero, v8]
// [Asm] move_origin: [a0]
// [Asm] defined: v31 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v32]
// [Asm] live_set: [v7, v11, v32, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v32, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v19, v10, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v32, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: [v22]
// [Asm] live_set: [v11, v10, zero, v22, v7, v8, v19]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v11, v10, zero, v23, v7, v8, v19]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v67]
// [Asm] live_set: [v11, v10, zero, v67, v7, v8, v19]
// [Asm] move_origin: []
// [Asm] defined: v67 is X
// [Asm] defs: [v68]
// [Asm] live_set: [v11, v10, zero, v68, v7, v8, v19]
// [Asm] move_origin: []
// [Asm] defined: v68 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v11, v10, zero, v7, v8, v19, v24]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v11, v25, v10, zero, v7, v8, v19]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v25, v10, zero, v7, v8, v19]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v10, zero, a0, v7, v8, v19]
// [Asm] move_origin: [v25]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, zero, a0, v7, v8, v19]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v26]
// [Asm] live_set: [v11, v10, zero, v7, v8, v19]
// [Asm] move_origin: [a0]
// [Asm] defined: v26 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v7, v8, v19]
// [Asm] move_origin: []
// [Asm] defs: [v27]
// [Asm] live_set: [v11, v10, zero, v27, v7, v8]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v27, v7, v8]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v27, v7, v8]
// [Asm] move_origin: [v8]
// [Asm] defs: [v9]
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: [v27]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: [v45]
// [Asm] live_set: [v45]
// [Asm] move_origin: [v44]
// [Asm] defined: v45 is X
// [Asm] defs: []
// [Asm] live_set: [v45]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of print_loop68l2_14"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r46 [label="v16 ← a0", color=green];
// [Asm]   r38 [label="v62 ← a0", color=green];
// [Asm]   r33 [label="v49 ← a0", color=green];
// [Asm]   r59 [label="v25 ← a0", color=green];
// [Asm]   r9 [label="v5 ← a3", color=green];
// [Asm]   r26 [label="a7", color=blue];
// [Asm]   r47 [label="v17 ← a0", color=green];
// [Asm]   r6 [label="a4", color=blue];
// [Asm]   r44 [label="v75 ← a0", color=green];
// [Asm]   r13 [label="v9 ← s2", color=green];
// [Asm]   r42 [label="v14 ← a0", color=green];
// [Asm]   r53 [label="v31 ← a0", color=green];
// [Asm]   r4 [label="a3", color=blue];
// [Asm]   r29 [label="t2", color=blue];
// [Asm]   r35 [label="v47 ← a0", color=green];
// [Asm]   r7 [label="v3 ← a1", color=green];
// [Asm]   r56 [label="v67 ← a0", color=green];
// [Asm]   r10 [label="v6 ← a4", color=green];
// [Asm]   r8 [label="v4 ← a2", color=green];
// [Asm]   r5 [label="zero", color=blue];
// [Asm]   r54 [label="v22 ← a0", color=green];
// [Asm]   r36 [label="v41 ← a0", color=green];
// [Asm]   r32 [label="v39 ← a0", color=green];
// [Asm]   r24 [label="a5", color=blue];
// [Asm]   r15 [label="v11 ← s4", color=green];
// [Asm]   r49 [label="v19 ← s2", color=green];
// [Asm]   r57 [label="v68 ← a0", color=green];
// [Asm]   r43 [label="v15 ← a0", color=green];
// [Asm]   r31 [label="t4", color=blue];
// [Asm]   r39 [label="v28 ← a0", color=green];
// [Asm]   r17 [label="v35 ← a0", color=green];
// [Asm]   r52 [label="v59 ← a0", color=green];
// [Asm]   r48 [label="v18 ← a0", color=green];
// [Asm]   r12 [label="v8 ← s1", color=green];
// [Asm]   r37 [label="v42 ← a0", color=green];
// [Asm]   r20 [label="v53 ← a0", color=green];
// [Asm]   r61 [label="v27 ← a0", color=green];
// [Asm]   r23 [label="v38 ← a0", color=green];
// [Asm]   r3 [label="a1", color=blue];
// [Asm]   r27 [label="t0", color=blue];
// [Asm]   r1 [label="v2 ← a0", color=green];
// [Asm]   r40 [label="v29 ← a0", color=green];
// [Asm]   r28 [label="t1", color=blue];
// [Asm]   r41 [label="v43 ← a0", color=green];
// [Asm]   r11 [label="v7 ← s0", color=green];
// [Asm]   r58 [label="v24 ← a0", color=green];
// [Asm]   r34 [label="v40 ← a0", color=green];
// [Asm]   r22 [label="v37 ← a0", color=green];
// [Asm]   r14 [label="v10 ← s3", color=green];
// [Asm]   r50 [label="v30 ← a0", color=green];
// [Asm]   r30 [label="t3", color=blue];
// [Asm]   r51 [label="v44 ← a0", color=green];
// [Asm]   r45 [label="v76 ← a0", color=green];
// [Asm]   r25 [label="a6", color=blue];
// [Asm]   r55 [label="v23 ← a0", color=green];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r16 [label="v45 ← a0", color=green];
// [Asm]   r18 [label="v32 ← s3", color=green];
// [Asm]   r19 [label="v36 ← a0", color=green];
// [Asm]   r21 [label="v54 ← a0", color=green];
// [Asm]   r60 [label="v26 ← a0", color=green];
// [Asm]   r12 -- r60;
// [Asm]   r12 -- r25;
// [Asm]   r15 -- r39;
// [Asm]   r12 -- r29;
// [Asm]   r12 -- r32;
// [Asm]   r11 -- r61;
// [Asm]   r5 -- r21;
// [Asm]   r5 -- r33;
// [Asm]   r15 -- r43;
// [Asm]   r3 -- r15;
// [Asm]   r11 -- r35;
// [Asm]   r14 -- r43;
// [Asm]   r12 -- r57;
// [Asm]   r5 -- r10;
// [Asm]   r14 -- r57;
// [Asm]   r11 -- r14;
// [Asm]   r15 -- r31;
// [Asm]   r5 -- r17;
// [Asm]   r2 -- r49;
// [Asm]   r5 -- r22;
// [Asm]   r5 -- r59;
// [Asm]   r15 -- r45;
// [Asm]   r0 -- r28;
// [Asm]   r15 -- r36;
// [Asm]   r5 -- r18;
// [Asm]   r5 -- r47;
// [Asm]   r15 -- r42;
// [Asm]   r3 -- r11;
// [Asm]   r13 -- r31;
// [Asm]   r5 -- r29;
// [Asm]   r18 -- r21;
// [Asm]   r11 -- r45;
// [Asm]   r11 -- r55;
// [Asm]   r2 -- r7;
// [Asm]   r11 -- r18;
// [Asm]   r15 -- r58;
// [Asm]   r18 -- r35;
// [Asm]   r15 -- r25;
// [Asm]   r3 -- r5;
// [Asm]   r18 -- r34;
// [Asm]   r11 -- r19;
// [Asm]   r8 -- r12;
// [Asm]   r0 -- r6;
// [Asm]   r18 -- r28;
// [Asm]   r5 -- r31;
// [Asm]   r1 -- r9;
// [Asm]   r5 -- r35;
// [Asm]   r13 -- r30;
// [Asm]   r5 -- r6;
// [Asm]   r14 -- r53;
// [Asm]   r0 -- r26;
// [Asm]   r5 -- r57;
// [Asm]   r11 -- r13;
// [Asm]   r10 -- r12;
// [Asm]   r25 -- r49;
// [Asm]   r9 -- r12;
// [Asm]   r12 -- r54;
// [Asm]   r5 -- r58;
// [Asm]   r2 -- r12;
// [Asm]   r5 -- r54;
// [Asm]   r5 -- r32;
// [Asm]   r14 -- r61;
// [Asm]   r14 -- r60;
// [Asm]   r5 -- r60;
// [Asm]   r12 -- r58;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r15 -- r52;
// [Asm]   r11 -- r43;
// [Asm]   r15 -- r37;
// [Asm]   r12 -- r43;
// [Asm]   r5 -- r55;
// [Asm]   r14 -- r59;
// [Asm]   r3 -- r49;
// [Asm]   r18 -- r33;
// [Asm]   r12 -- r23;
// [Asm]   r15 -- r23;
// [Asm]   r11 -- r15;
// [Asm]   r18 -- r20;
// [Asm]   r1 -- r5;
// [Asm]   r12 -- r21;
// [Asm]   r0 -- r4;
// [Asm]   r14 -- r54;
// [Asm]   r11 -- r36;
// [Asm]   r4 -- r14;
// [Asm]   r15 -- r47;
// [Asm]   r15 -- r30;
// [Asm]   r14 -- r15;
// [Asm]   r29 -- r49;
// [Asm]   r49 -- r56;
// [Asm]   r49 -- r54;
// [Asm]   r14 -- r44;
// [Asm]   r5 -- r36;
// [Asm]   r0 -- r18;
// [Asm]   r18 -- r24;
// [Asm]   r14 -- r49;
// [Asm]   r4 -- r13;
// [Asm]   r0 -- r15;
// [Asm]   r13 -- r15;
// [Asm]   r11 -- r20;
// [Asm]   r14 -- r26;
// [Asm]   r1 -- r8;
// [Asm]   r12 -- r34;
// [Asm]   r8 -- r9;
// [Asm]   r15 -- r59;
// [Asm]   r15 -- r35;
// [Asm]   r0 -- r14;
// [Asm]   r5 -- r19;
// [Asm]   r11 -- r12;
// [Asm]   r11 -- r23;
// [Asm]   r11 -- r22;
// [Asm]   r13 -- r48;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r15 -- r61;
// [Asm]   r5 -- r11;
// [Asm]   r11 -- r46;
// [Asm]   r5 -- r38;
// [Asm]   r14 -- r46;
// [Asm]   r11 -- r37;
// [Asm]   r28 -- r49;
// [Asm]   r0 -- r31;
// [Asm]   r12 -- r20;
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r15;
// [Asm]   r15 -- r54;
// [Asm]   r12 -- r55;
// [Asm]   r12 -- r13;
// [Asm]   r5 -- r28;
// [Asm]   r12 -- r33;
// [Asm]   r2 -- r14;
// [Asm]   r5 -- r9;
// [Asm]   r0 -- r3;
// [Asm]   r11 -- r52;
// [Asm]   r14 -- r25;
// [Asm]   r11 -- r59;
// [Asm]   r13 -- r14;
// [Asm]   r12 -- r22;
// [Asm]   r5 -- r45;
// [Asm]   r0 -- r29;
// [Asm]   r10 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r5 -- r56;
// [Asm]   r5 -- r61;
// [Asm]   r15 -- r34;
// [Asm]   r8 -- r10;
// [Asm]   r15 -- r24;
// [Asm]   r11 -- r34;
// [Asm]   r4 -- r7;
// [Asm]   r15 -- r33;
// [Asm]   r5 -- r39;
// [Asm]   r5 -- r25;
// [Asm]   r15 -- r48;
// [Asm]   r13 -- r47;
// [Asm]   r12 -- r17;
// [Asm]   r0 -- r30;
// [Asm]   r9 -- r13;
// [Asm]   r15 -- r20;
// [Asm]   r11 -- r28;
// [Asm]   r15 -- r19;
// [Asm]   r11 -- r56;
// [Asm]   r11 -- r29;
// [Asm]   r18 -- r23;
// [Asm]   r5 -- r12;
// [Asm]   r12 -- r35;
// [Asm]   r11 -- r44;
// [Asm]   r0 -- r13;
// [Asm]   r13 -- r44;
// [Asm]   r0 -- r49;
// [Asm]   r14 -- r27;
// [Asm]   r2 -- r15;
// [Asm]   r14 -- r38;
// [Asm]   r5 -- r8;
// [Asm]   r1 -- r4;
// [Asm]   r49 -- r58;
// [Asm]   r1 -- r7;
// [Asm]   r18 -- r25;
// [Asm]   r27 -- r49;
// [Asm]   r1 -- r10;
// [Asm]   r14 -- r55;
// [Asm]   r0 -- r25;
// [Asm]   r10 -- r13;
// [Asm]   r11 -- r31;
// [Asm]   r11 -- r32;
// [Asm]   r5 -- r49;
// [Asm]   r18 -- r27;
// [Asm]   r5 -- r42;
// [Asm]   r13 -- r28;
// [Asm]   r15 -- r53;
// [Asm]   r11 -- r24;
// [Asm]   r11 -- r60;
// [Asm]   r3 -- r18;
// [Asm]   r14 -- r39;
// [Asm]   r11 -- r53;
// [Asm]   r12 -- r19;
// [Asm]   r49 -- r59;
// [Asm]   r13 -- r37;
// [Asm]   r13 -- r40;
// [Asm]   r14 -- r30;
// [Asm]   r12 -- r24;
// [Asm]   r6 -- r13;
// [Asm]   r14 -- r28;
// [Asm]   r26 -- r49;
// [Asm]   r12 -- r52;
// [Asm]   r15 -- r18;
// [Asm]   r12 -- r44;
// [Asm]   r15 -- r57;
// [Asm]   r18 -- r26;
// [Asm]   r14 -- r56;
// [Asm]   r11 -- r48;
// [Asm]   r12 -- r28;
// [Asm]   r0 -- r2;
// [Asm]   r12 -- r46;
// [Asm]   r5 -- r53;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r13 -- r43;
// [Asm]   r7 -- r10;
// [Asm]   r12 -- r40;
// [Asm]   r18 -- r30;
// [Asm]   r11 -- r54;
// [Asm]   r15 -- r56;
// [Asm]   r49 -- r60;
// [Asm]   r12 -- r59;
// [Asm]   r4 -- r12;
// [Asm]   r14 -- r52;
// [Asm]   r13 -- r18;
// [Asm]   r5 -- r7;
// [Asm]   r15 -- r44;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r12 -- r61;
// [Asm]   r0 -- r11;
// [Asm]   r14 -- r31;
// [Asm]   r8 -- r11;
// [Asm]   r18 -- r31;
// [Asm]   r12 -- r47;
// [Asm]   r1 -- r6;
// [Asm]   r11 -- r47;
// [Asm]   r7 -- r8;
// [Asm]   r15 -- r28;
// [Asm]   r4 -- r49;
// [Asm]   r11 -- r30;
// [Asm]   r13 -- r29;
// [Asm]   r12 -- r53;
// [Asm]   r15 -- r38;
// [Asm]   r5 -- r34;
// [Asm]   r30 -- r49;
// [Asm]   r11 -- r25;
// [Asm]   r49 -- r57;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r12 -- r45;
// [Asm]   r13 -- r24;
// [Asm]   r17 -- r18;
// [Asm]   r15 -- r46;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r11 -- r40;
// [Asm]   r6 -- r15;
// [Asm]   r15 -- r29;
// [Asm]   r12 -- r38;
// [Asm]   r11 -- r17;
// [Asm]   r13 -- r42;
// [Asm]   r15 -- r49;
// [Asm]   r5 -- r20;
// [Asm]   r15 -- r26;
// [Asm]   r13 -- r46;
// [Asm]   r2 -- r18;
// [Asm]   r11 -- r57;
// [Asm]   r6 -- r49;
// [Asm]   r0 -- r24;
// [Asm]   r49 -- r55;
// [Asm]   r6 -- r14;
// [Asm]   r15 -- r60;
// [Asm]   r5 -- r48;
// [Asm]   r5 -- r23;
// [Asm]   r15 -- r22;
// [Asm]   r18 -- r29;
// [Asm]   r12 -- r36;
// [Asm]   r14 -- r58;
// [Asm]   r11 -- r49;
// [Asm]   r12 -- r15;
// [Asm]   r13 -- r45;
// [Asm]   r14 -- r42;
// [Asm]   r24 -- r49;
// [Asm]   r13 -- r26;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r5 -- r52;
// [Asm]   r5 -- r44;
// [Asm]   r12 -- r56;
// [Asm]   r14 -- r29;
// [Asm]   r14 -- r24;
// [Asm]   r18 -- r22;
// [Asm]   r7 -- r9;
// [Asm]   r6 -- r12;
// [Asm]   r15 -- r27;
// [Asm]   r13 -- r25;
// [Asm]   r18 -- r36;
// [Asm]   r15 -- r32;
// [Asm]   r6 -- r8;
// [Asm]   r14 -- r47;
// [Asm]   r18 -- r32;
// [Asm]   r12 -- r42;
// [Asm]   r11 -- r42;
// [Asm]   r11 -- r33;
// [Asm]   r4 -- r11;
// [Asm]   r18 -- r19;
// [Asm]   r15 -- r17;
// [Asm]   r5 -- r46;
// [Asm]   r15 -- r21;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r12 -- r31;
// [Asm]   r5 -- r37;
// [Asm]   r11 -- r39;
// [Asm]   r12 -- r49;
// [Asm]   r15 -- r55;
// [Asm]   r15 -- r40;
// [Asm]   r7 -- r11;
// [Asm]   r12 -- r39;
// [Asm]   r14 -- r45;
// [Asm]   r3 -- r14;
// [Asm]   r12 -- r30;
// [Asm]   r31 -- r49;
// [Asm]   r11 -- r26;
// [Asm]   r12 -- r37;
// [Asm]   r11 -- r38;
// [Asm]   r0 -- r12;
// [Asm]   r11 -- r58;
// [Asm]   r12 -- r14;
// [Asm]   r5 -- r27;
// [Asm]   r12 -- r27;
// [Asm]   r11 -- r27;
// [Asm]   r12 -- r48;
// [Asm]   r1 -- r3;
// [Asm]   r5 -- r43;
// [Asm]   r5 -- r30;
// [Asm]   r0 -- r27;
// [Asm]   r14 -- r48;
// [Asm]   r13 -- r27;
// [Asm]   r11 -- r21;
// [Asm]   r12 -- r18;
// [Asm]   r5 -- r40;
// [Asm]   r12 -- r26;
// [Asm]   r5 -- r15;
// [Asm]   r10 -- r14;
// [Asm]   comment = "0:a0-> 2:a2-> 5:zero-> 11:v7-> 12:v8-> 13:v9-> 14:v10-> 15:v11-> 3:a1-> 18:v32-> 4:a3-> 49:v19-> 6:a4-> 24:a5-> 25:a6-> 26:a7-> 27:t0-> 28:t1-> 29:t2-> 30:t3-> 31:t4-> 42:v14-> 43:v15-> 44:v75-> 45:v76-> 46:v16-> 47:v17-> 48:v18-> 54:v22-> 55:v23-> 56:v67-> 57:v68-> 58:v24-> 59:v25-> 60:v26-> 1:v2-> 7:v3-> 8:v4-> 9:v5-> 10:v6-> 17:v35-> 19:v36-> 20:v53-> 21:v54-> 22:v37-> 23:v38-> 32:v39-> 33:v49-> 34:v40-> 35:v47-> 36:v41-> 37:v42-> 38:v62-> 39:v28-> 40:v29-> 52:v59-> 53:v31-> 61:v27-> 16:v45-> 41:v43-> 50:v30-> 51:v44"
// [Asm]   comment = "v16<-a0;v62<-a0;v49<-a0;v25<-a0;v5<-a3;v17<-a0;v75<-a0;v9<-s2;v14<-a0;v31<-a0;v47<-a0;v3<-a1;v67<-a0;v6<-a4;v4<-a2;v22<-a0;v41<-a0;v39<-a0;v11<-s4;v19<-s2;v68<-a0;v15<-a0;v28<-a0;v35<-a0;v59<-a0;v18<-a0;v8<-s1;v42<-a0;v53<-a0;v27<-a0;v38<-a0;v2<-a0;v29<-a0;v43<-a0;v7<-s0;v24<-a0;v40<-a0;v37<-a0;v10<-s3;v30<-a0;v44<-a0;v76<-a0;v23<-a0;v45<-a0;v32<-s3;v36<-a0;v54<-a0;v26<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of print_loop68l2_14"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   beq v9, v7, .print_loop68l2_14_3 ->   beq s2, s0, .print_loop68l2_14_3
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v7, v2 ->   mv s0, a0
// [Asm] subst   mv v8, v3 ->   mv s1, a1
// [Asm] subst   mv v9, v4 ->   mv s2, a2
// [Asm] subst   mv v10, v5 ->   mv s3, a3
// [Asm] subst   mv v11, v6 ->   mv s4, a4
// [Asm] subst   mv v45, zero ->   mv a0, zero
// [Asm] subst   mul v35, v32, v7 ->   mul a0, s3, s0
// [Asm] subst   addi v36, v35, 0 ->   addi a0, a0, 0
// [Asm] subst   slliw v53, v36, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v54, v11, v53 ->   add a0, s4, a0
// [Asm] subst   lw v37, 0(v54) ->   lw a0, 0(a0)
// [Asm] subst   addi v38, v37, 48 ->   addi a0, a0, 48
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   li v49, 1 ->   li a0, 1
// [Asm] subst   addi v40, v49, 0 ->   addi a0, a0, 0
// [Asm] subst   mv v9, v40 ->   mv s2, a0
// [Asm] subst   j .print_loop68l2_14_0 ->   j .print_loop68l2_14_0
// [Asm] subst   li v47, 10 ->   li a0, 10
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   addi v42, v32, 1 ->   addi a0, s3, 1
// [Asm] subst   mv v9, zero ->   mv s2, zero
// [Asm] subst   mv v10, v42 ->   mv s3, a0
// [Asm] subst   j .print_loop68l2_14_0 ->   j .print_loop68l2_14_0
// [Asm] subst   li v62, 10 ->   li a0, 10
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   addi v29, v10, 1 ->   addi a0, s3, 1
// [Asm] subst   mv v9, zero ->   mv s2, zero
// [Asm] subst   mv v10, v29 ->   mv s3, a0
// [Asm] subst   j .print_loop68l2_14_0 ->   j .print_loop68l2_14_0
// [Asm] subst   mv v43, zero ->   mv a0, zero
// [Asm] subst   mul v14, v10, v7 ->   mul a0, s3, s0
// [Asm] subst   add v15, v14, v9 ->   add a0, a0, s2
// [Asm] subst   slliw v75, v15, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v76, v11, v75 ->   add a0, s4, a0
// [Asm] subst   lw v16, 0(v76) ->   lw a0, 0(a0)
// [Asm] subst   addi v17, v16, 48 ->   addi a0, a0, 48
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   addi v19, v9, 1 ->   addi s2, s2, 1
// [Asm] subst   beq v10, v8, .print_loop68l2_14_11 ->   beq s3, s1, .print_loop68l2_14_11
// [Asm] subst   mv v30, zero ->   mv a0, zero
// [Asm] subst   j .print_loop68l2_14_17 ->   j .print_loop68l2_14_17
// [Asm] subst   li v59, 10 ->   li a0, 10
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   addi v32, v10, 1 ->   addi s3, s3, 1
// [Asm] subst   beq v32, v8, .print_loop68l2_14_5 ->   beq s3, s1, .print_loop68l2_14_5
// [Asm] subst   beq v19, v7, .print_loop68l2_14_13 ->   beq s2, s0, .print_loop68l2_14_13
// [Asm] subst   beq zero, v7, .print_loop68l2_14_7 ->   beq zero, s0, .print_loop68l2_14_7
// [Asm] subst   beq v10, v8, .print_loop68l2_14_1 ->   beq s3, s1, .print_loop68l2_14_1
// [Asm] subst   mul v22, v10, v7 ->   mul a0, s3, s0
// [Asm] subst   add v23, v22, v19 ->   add a0, a0, s2
// [Asm] subst   slliw v67, v23, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v68, v11, v67 ->   add a0, s4, a0
// [Asm] subst   lw v24, 0(v68) ->   lw a0, 0(a0)
// [Asm] subst   addi v25, v24, 48 ->   addi a0, a0, 48
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   addi v27, v19, 1 ->   addi a0, s2, 1
// [Asm] subst   mv v9, v27 ->   mv s2, a0
// [Asm] subst   j .print_loop68l2_14_0 ->   j .print_loop68l2_14_0
// [Asm] subst   j .print_loop68l2_14_18 ->   j .print_loop68l2_14_18
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v6, Insn(iref=%1) -> fv3, Insn(iref=%3) -> fv5, Self(fref=f20) -> v0, Insn(iref=%0) -> fv2, Insn(iref=%2) -> v4
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [fv2]
// [Asm] live_set: [fv2]
// [Asm] move_origin: []
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fv2, fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v4, fv2, fv3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [fv5]
// [Asm] live_set: [fv5, v4, fv2, fv3]
// [Asm] move_origin: []
// [Asm] defined: fv5 is F
// [Asm] defs: []
// [Asm] live_set: [fv5, v4, fv2, fv3]
// [Asm] move_origin: []
// [Asm] defs: [fa0]
// [Asm] live_set: [fv5, v4, fv3, fa0]
// [Asm] move_origin: [fv2]
// [Asm] defined: fa0 is F
// [Asm] defs: [fa1]
// [Asm] live_set: [fv5, v4, fa1, fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa1 is F
// [Asm] defs: [a0]
// [Asm] live_set: [fv5, fa1, a0, fa0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [fa2]
// [Asm] live_set: [fa2, fa1, a0, fa0]
// [Asm] move_origin: [fv5]
// [Asm] defined: fa2 is F
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_20"];
// [Asm]   r8 [label="a7", color=blue];
// [Asm]   r0 [label="v4 ← a0", color=green];
// [Asm]   r5 [label="a4", color=blue];
// [Asm]   r3 [label="a2", color=blue];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r9 [label="t0", color=blue];
// [Asm]   r6 [label="a5", color=blue];
// [Asm]   r13 [label="t4", color=blue];
// [Asm]   r4 [label="a3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="t2", color=blue];
// [Asm]   r7 [label="a6", color=blue];
// [Asm]   r10 [label="t1", color=blue];
// [Asm]   r14 [label="v6 ← a0", color=green];
// [Asm]   r12 [label="t3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:v4-> 1:a0-> 2:a1-> 3:a2-> 4:a3-> 5:a4-> 6:a5-> 7:a6-> 8:a7-> 9:t0-> 10:t1-> 11:t2-> 12:t3-> 13:t4-> 14:v6"
// [Asm]   comment = "v4<-a0;v6<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_20"];
// [Asm]   r0 [label="fv2 ← fa0", color=green];
// [Asm]   r20 [label="fa6", color=blue];
// [Asm]   r3 [label="fa0", color=blue];
// [Asm]   r9 [label="ft3", color=blue];
// [Asm]   r6 [label="ft0", color=blue];
// [Asm]   r13 [label="ft7", color=blue];
// [Asm]   r4 [label="fa1", color=blue];
// [Asm]   r1 [label="fv3 ← fa1", color=green];
// [Asm]   r11 [label="ft5", color=blue];
// [Asm]   r7 [label="ft1", color=blue];
// [Asm]   r10 [label="ft4", color=blue];
// [Asm]   r14 [label="ft8", color=blue];
// [Asm]   r8 [label="ft2", color=blue];
// [Asm]   r5 [label="fa2", color=blue];
// [Asm]   r15 [label="ft9", color=blue];
// [Asm]   r2 [label="fv5 ← fa2", color=green];
// [Asm]   r16 [label="ft10", color=blue];
// [Asm]   r18 [label="fa4", color=blue];
// [Asm]   r19 [label="fa5", color=blue];
// [Asm]   r21 [label="fa7", color=blue];
// [Asm]   r17 [label="fa3", color=blue];
// [Asm]   r12 [label="ft6", color=blue];
// [Asm]   r0 -- r2;
// [Asm]   r2 -- r4;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r1 -- r2;
// [Asm]   comment = "0:fv2-> 1:fv3-> 2:fv5-> 3:fa0-> 4:fa1-> 5:fa2-> 6:ft0-> 7:ft1-> 8:ft2-> 9:ft3-> 10:ft4-> 11:ft5-> 12:ft6-> 13:ft7-> 14:ft8-> 15:ft9-> 16:ft10-> 17:fa3-> 18:fa4-> 19:fa5-> 20:fa6-> 21:fa7"
// [Asm]   comment = "fv2<-fa0;fv3<-fa1;fv5<-fa2;"
// [Asm] }
// [Asm] 
// [Asm] subst   fld fv2, c_im.6, t5 ->   fld fa0, c_im.6, t5
// [Asm] subst   fld fv3, c_re.5, t5 ->   fld fa1, c_re.5, t5
// [Asm] subst   lw v4, iter.3 ->   lw a0, iter.3
// [Asm] subst   fld fv5, limit_sq.2, t5 ->   fld fa2, limit_sq.2, t5
// [Asm] subst   call main94l3_15 ->   call main94l3_15
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf true
// [Asm] T$limit.1_0:
// [Asm] # block info: defs: [fa0, fv3, v2], uses: [fa0, fv3, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$limit.1_0_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 4611686018427387904  # live: [v2]
// [Asm]   fmv.d.x fv3, v2  # live: [fv3]
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] print_loop68l2_14:
// [Asm] # block info: defs: [v2, v11, v5, v10, v7, v8, v4, v6, v9, v3], uses: [v3, v5, a0, a4, a2, v4, a1, v6, a3, v2], upward_exposed: [a2, a1, a3, a0, a4], params_defs: []
// [Asm] # live_in: [a0, zero, a4, a2, a1, a3], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: []
// [Asm] .print_loop68l2_14_20:
// [Asm]   # save_ctx1  # live: [a2, a1, a3, zero, a0, a4]
// [Asm]   mv v2, a0  # live: [a2, a1, a3, zero, a4, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, a3, zero, a4, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, a3, zero, a4, v3]
// [Asm]   mv v5, a3  # live: [v2, v4, v5, zero, a4, v3]
// [Asm]   mv v6, a4  # live: [v2, v4, v6, v5, zero, v3]
// [Asm] # control
// [Asm]   mv v7, v2  # live: [v3, v4, v6, v5, zero, v7]
// [Asm]   mv v8, v3  # live: [v7, v4, v6, v5, zero, v8]
// [Asm]   mv v9, v4  # live: [v7, v6, v5, zero, v9, v8]
// [Asm]   mv v10, v5  # live: [v7, v6, v10, zero, v9, v8]
// [Asm]   mv v11, v6  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v10, v8], upward_exposed: [v10, v8], params_defs: [v8, v11, v10, v9, v7]
// [Asm] # live_in: [v11, v10, zero, v7, v8, v9], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: [v7, v8, v9, v10, v11]
// [Asm] .print_loop68l2_14_0:
// [Asm] # control
// [Asm]   beq v10, v8, .print_loop68l2_14_1  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v9, v7], upward_exposed: [v9, v7], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v8, v7, v9], live_out: [v11, v10, zero, v7, v8, v9]
// [Asm] # block parameters: []
// [Asm] .print_loop68l2_14_2:
// [Asm] # control
// [Asm]   beq v9, v7, .print_loop68l2_14_3  # live: [v8, v11, v10, zero, v9, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, v16, v14, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, v19, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, ft8, a7, t3, fa7, t0, fa5, v75, v18, fa3, ft3, fa0, t4, t2, v15, v76], uses: [v11, v14, v16, v75, v10, a0, v7, v8, v17, v15, v9, v76], upward_exposed: [v8, v11, v10, v9, v7], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v7, v8, v9], live_out: [v11, v10, zero, v8, v7, v19]
// [Asm] # block parameters: []
// [Asm] .print_loop68l2_14_4:
// [Asm]   mul v14, v10, v7  # live: [v11, v14, v10, zero, v7, v8, v9]
// [Asm]   add v15, v14, v9  # live: [v11, v10, zero, v7, v8, v15, v9]
// [Asm]   slliw v75, v15, 2  # live: [v11, v10, v75, zero, v7, v8, v9]
// [Asm]   add v76, v11, v75  # live: [v11, v10, zero, v7, v8, v9, v76]
// [Asm]   lw v16, 0(v76)  # live: [v11, v16, v10, zero, v7, v8, v9]
// [Asm]   addi v17, v16, 48  # live: [v11, v10, zero, v7, v8, v17, v9]
// [Asm]   # save_ctx2  # live: [v11, v10, zero, v7, v8, v17, v9]
// [Asm]   mv a0, v17  # live: [v11, v10, zero, a0, v7, v8, v9]
// [Asm]   call minimbt_print_char  # live: [v11, v10, zero, a0, v7, v8, v9]
// [Asm]   mv v18, a0  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   # restore_ctx2  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   addi v19, v9, 1  # live: [v11, v10, zero, v7, v8, v19]
// [Asm] # control
// [Asm]   beq v10, v8, .print_loop68l2_14_11  # live: [v7, v11, v19, v10, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v19, v7], upward_exposed: [v19, v7], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v8, v7, v19], live_out: [v11, v10, zero, v8, v7, v19]
// [Asm] # block parameters: []
// [Asm] .print_loop68l2_14_12:
// [Asm] # control
// [Asm]   beq v19, v7, .print_loop68l2_14_13  # live: [v7, v11, v19, v10, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v25, t1, v26, v22, v67, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v27, a6, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v24, a3, v9, ft8, a7, t3, fa7, t0, fa5, fa3, v68, v23, ft3, fa0, t4, t2], uses: [v11, v25, v10, a0, v67, v22, v7, v24, v68, v23, v27, v8, v19], upward_exposed: [v8, v11, v19, v10, v7], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v7, v8, v19], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: []
// [Asm] .print_loop68l2_14_14:
// [Asm]   mul v22, v10, v7  # live: [v11, v10, zero, v22, v7, v8, v19]
// [Asm]   add v23, v22, v19  # live: [v11, v10, zero, v23, v7, v8, v19]
// [Asm]   slliw v67, v23, 2  # live: [v11, v10, zero, v67, v7, v8, v19]
// [Asm]   add v68, v11, v67  # live: [v11, v10, zero, v68, v7, v8, v19]
// [Asm]   lw v24, 0(v68)  # live: [v11, v10, zero, v7, v8, v19, v24]
// [Asm]   addi v25, v24, 48  # live: [v11, v25, v10, zero, v7, v8, v19]
// [Asm]   # save_ctx2  # live: [v11, v25, v10, zero, v7, v8, v19]
// [Asm]   mv a0, v25  # live: [v11, v10, zero, a0, v7, v8, v19]
// [Asm]   call minimbt_print_char  # live: [v11, v10, zero, a0, v7, v8, v19]
// [Asm]   mv v26, a0  # live: [v11, v10, zero, v7, v8, v19]
// [Asm]   # restore_ctx2  # live: [v11, v10, zero, v7, v8, v19]
// [Asm]   addi v27, v19, 1  # live: [v11, v10, zero, v27, v7, v8]
// [Asm] # control
// [Asm]   mv v7, v7  # live: [v11, v10, zero, v27, v7, v8]
// [Asm]   mv v8, v8  # live: [v11, v10, zero, v27, v7, v8]
// [Asm]   mv v9, v27  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   mv v11, v11  # live: [v7, v11, v10, zero, v9, v8]
// [Asm]   j .print_loop68l2_14_0  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [v45], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v45]
// [Asm] # block parameters: []
// [Asm] .print_loop68l2_14_1:
// [Asm] # control
// [Asm]   mv v45, zero  # live: [v45]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v45], upward_exposed: [v45], params_defs: [v45]
// [Asm] # live_in: [v45], live_out: []
// [Asm] # block parameters: [v45]
// [Asm] .print_loop68l2_14_18:
// [Asm] # control
// [Asm]   mv a0, v45  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, v32, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v59, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v31, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v59, v32, v10, a0, v8], upward_exposed: [v10, v8], params_defs: []
// [Asm] # live_in: [v7, v11, v10, zero, v8], live_out: [v8, v11, v32, zero, v7]
// [Asm] # block parameters: []
// [Asm] .print_loop68l2_14_3:
// [Asm]   # save_ctx2  # live: [v7, v11, v10, zero, v8]
// [Asm]   li v59, 10  # live: [v7, v11, v59, v10, zero, v8]
// [Asm]   mv a0, v59  # live: [v7, v11, v10, zero, a0, v8]
// [Asm]   call minimbt_print_char  # live: [v7, v11, v10, zero, a0, v8]
// [Asm]   mv v31, a0  # live: [v7, v11, v10, zero, v8]
// [Asm]   # restore_ctx2  # live: [v7, v11, v10, zero, v8]
// [Asm]   addi v32, v10, 1  # live: [v7, v11, v32, zero, v8]
// [Asm] # control
// [Asm]   beq v32, v8, .print_loop68l2_14_5  # live: [v7, v11, v32, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [zero, v7], upward_exposed: [zero, v7], params_defs: []
// [Asm] # live_in: [v8, v11, v32, zero, v7], live_out: [v8, v11, v32, zero, v7]
// [Asm] # block parameters: []
// [Asm] .print_loop68l2_14_6:
// [Asm] # control
// [Asm]   beq zero, v7, .print_loop68l2_14_7  # live: [v7, v11, v32, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v54, ft7, ft4, v53, ft9, v49, v10, a5, a0, fa4, v36, ft2, v37, a2, a3, v9, v39, ft8, fa7, a7, t3, t0, fa5, fa3, ft3, v35, fa0, t4, v38, t2, v40], uses: [v11, v53, v49, a0, v36, v7, v37, v32, v35, v8, v38, v54, v40], upward_exposed: [v8, v11, v32, v7], params_defs: []
// [Asm] # live_in: [v7, v11, v32, zero, v8], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: []
// [Asm] .print_loop68l2_14_8:
// [Asm]   mul v35, v32, v7  # live: [v11, zero, v7, v8, v35, v32]
// [Asm]   addi v36, v35, 0  # live: [v11, zero, v7, v8, v36, v32]
// [Asm]   slliw v53, v36, 2  # live: [v11, v53, zero, v7, v8, v32]
// [Asm]   add v54, v11, v53  # live: [v11, zero, v7, v8, v32, v54]
// [Asm]   lw v37, 0(v54)  # live: [v11, zero, v7, v8, v32, v37]
// [Asm]   addi v38, v37, 48  # live: [v11, zero, v7, v8, v32, v38]
// [Asm]   # save_ctx2  # live: [v11, zero, v7, v8, v32, v38]
// [Asm]   mv a0, v38  # live: [v11, zero, a0, v7, v8, v32]
// [Asm]   call minimbt_print_char  # live: [v11, zero, a0, v7, v8, v32]
// [Asm]   mv v39, a0  # live: [v11, zero, v7, v8, v32]
// [Asm]   # restore_ctx2  # live: [v11, zero, v7, v8, v32]
// [Asm]   li v49, 1  # live: [v11, v49, zero, v7, v8, v32]
// [Asm]   addi v40, v49, 0  # live: [v11, zero, v7, v8, v32, v40]
// [Asm] # control
// [Asm]   mv v7, v7  # live: [v11, zero, v7, v8, v32, v40]
// [Asm]   mv v8, v8  # live: [v11, zero, v7, v8, v32, v40]
// [Asm]   mv v9, v40  # live: [v11, zero, v7, v8, v32, v9]
// [Asm]   mv v10, v32  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   mv v11, v11  # live: [v7, v11, v10, zero, v9, v8]
// [Asm]   j .print_loop68l2_14_0  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [v43], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v43]
// [Asm] # block parameters: []
// [Asm] .print_loop68l2_14_5:
// [Asm] # control
// [Asm]   mv v43, zero  # live: [v43]
// [Asm] 
// [Asm] # block info: defs: [v44], uses: [v43], upward_exposed: [v43], params_defs: [v43]
// [Asm] # live_in: [v43], live_out: [v44]
// [Asm] # block parameters: [v43]
// [Asm] .print_loop68l2_14_10:
// [Asm] # control
// [Asm]   mv v44, v43  # live: [v44]
// [Asm] 
// [Asm] # block info: defs: [v45], uses: [v44], upward_exposed: [v44], params_defs: [v44]
// [Asm] # live_in: [v44], live_out: [v45]
// [Asm] # block parameters: [v44]
// [Asm] .print_loop68l2_14_17:
// [Asm] # control
// [Asm]   mv v45, v44  # live: [v45]
// [Asm]   j .print_loop68l2_14_18  # live: [v45]
// [Asm] 
// [Asm] # block info: defs: [t1, v42, ft0, ft1, v41, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v47, ft7, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v11, a0, zero, v42, v7, v8, v32, v47], upward_exposed: [v8, v11, v32, zero, v7], params_defs: []
// [Asm] # live_in: [v7, v11, v32, zero, v8], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: []
// [Asm] .print_loop68l2_14_7:
// [Asm]   # save_ctx2  # live: [v11, zero, v7, v8, v32]
// [Asm]   li v47, 10  # live: [v11, zero, v7, v8, v32, v47]
// [Asm]   mv a0, v47  # live: [v11, zero, a0, v7, v8, v32]
// [Asm]   call minimbt_print_char  # live: [v11, zero, a0, v7, v8, v32]
// [Asm]   mv v41, a0  # live: [v11, zero, v7, v8, v32]
// [Asm]   # restore_ctx2  # live: [v11, zero, v7, v8, v32]
// [Asm]   addi v42, v32, 1  # live: [v11, zero, v42, v7, v8]
// [Asm] # control
// [Asm]   mv v7, v7  # live: [v11, zero, v42, v7, v8]
// [Asm]   mv v8, v8  # live: [v11, zero, v42, v7, v8]
// [Asm]   mv v9, zero  # live: [v11, zero, v42, v7, v8, v9]
// [Asm]   mv v10, v42  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   mv v11, v11  # live: [v7, v11, v10, zero, v9, v8]
// [Asm]   j .print_loop68l2_14_0  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [v30], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v30]
// [Asm] # block parameters: []
// [Asm] .print_loop68l2_14_11:
// [Asm] # control
// [Asm]   mv v30, zero  # live: [v30]
// [Asm] 
// [Asm] # block info: defs: [v44], uses: [v30], upward_exposed: [v30], params_defs: [v30]
// [Asm] # live_in: [v30], live_out: [v44]
// [Asm] # block parameters: [v30]
// [Asm] .print_loop68l2_14_16:
// [Asm] # control
// [Asm]   mv v44, v30  # live: [v44]
// [Asm]   j .print_loop68l2_14_17  # live: [v44]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, v28, fa1, fa2, ft6, v29, fa6, a4, a6, ft10, ft5, ft7, v62, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v62, v11, v10, a0, zero, v29, v7, v8], upward_exposed: [v8, v11, v10, zero, v7], params_defs: []
// [Asm] # live_in: [v7, v11, v10, zero, v8], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: []
// [Asm] .print_loop68l2_14_13:
// [Asm]   # save_ctx2  # live: [v11, v10, zero, v7, v8]
// [Asm]   li v62, 10  # live: [v11, v62, v10, zero, v7, v8]
// [Asm]   mv a0, v62  # live: [v11, v10, zero, a0, v7, v8]
// [Asm]   call minimbt_print_char  # live: [v11, v10, zero, a0, v7, v8]
// [Asm]   mv v28, a0  # live: [v11, v10, zero, v7, v8]
// [Asm]   # restore_ctx2  # live: [v11, v10, zero, v7, v8]
// [Asm]   addi v29, v10, 1  # live: [v11, zero, v29, v7, v8]
// [Asm] # control
// [Asm]   mv v7, v7  # live: [v11, zero, v29, v7, v8]
// [Asm]   mv v8, v8  # live: [v11, zero, v29, v7, v8]
// [Asm]   mv v9, zero  # live: [v11, zero, v29, v7, v8, v9]
// [Asm]   mv v10, v29  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   mv v11, v11  # live: [v7, v11, v10, zero, v9, v8]
// [Asm]   j .print_loop68l2_14_0  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # leaf true
// [Asm] T$_4_6:
// [Asm] # block info: defs: [fa0, fv3, v2], uses: [fa0, fv3, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_4_6_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 4593527504729830064  # live: [v2]
// [Asm]   fmv.d.x fv3, v2  # live: [fv3]
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main94l3_15:
// [Asm] # block info: defs: [t1, v13, v7, ft0, ft1, fv12, a1, s11, fv14, fa1, fv5, fv2, fa2, ft6, a4, fa6, v50, v8, a6, ft10, v4, ft5, v6, fv3, ft7, ft4, ft9, v53, a5, fa4, a0, ft2, a2, a3, v9, ft8, a7, t3, fa7, t0, fa5, fa3, fv11, ft3, fa0, t4, t2, v15], uses: [v53, a5, a0, v13, v7, fv12, a2, a1, fv14, s11, a3, v9, fa1, fa2, zero, fv11, v50, a4, fa0, v8, v6], upward_exposed: [fa2, a0, zero, fa0, s11, fa1], params_defs: []
// [Asm] # live_in: [fa2, a0, zero, fa0, s11, fa1], live_out: [v7, v6, zero, v8]
// [Asm] # block parameters: []
// [Asm] .main94l3_15_0:
// [Asm]   # save_ctx1  # live: [fa2, zero, a0, fa0, s11, fa1]
// [Asm]   fmv.d fv2, fa0  # live: [fa2, zero, a0, s11, fa1]
// [Asm]   fmv.d fv3, fa1  # live: [fa2, zero, a0, s11]
// [Asm]   mv v4, a0  # live: [fa2, zero, s11]
// [Asm]   fmv.d fv5, fa2  # live: [zero, s11]
// [Asm]   # save_ctx2  # live: [zero, s11]
// [Asm]   call minimbt_read_int  # live: [zero, a0, s11]
// [Asm]   mv v7, a0  # live: [zero, v7, s11]
// [Asm]   # restore_ctx2  # live: [zero, v7, s11]
// [Asm]   li v53, 2  # live: [v53, zero, v7, s11]
// [Asm]   mul v8, v7, v53  # live: [zero, v7, v8, s11]
// [Asm]   mul v9, v8, v7  # live: [zero, v7, v8, s11, v9]
// [Asm]   slliw v50, v9, 2  # live: [zero, v50, v7, v8, s11, v9]
// [Asm]   sub v6, s11, v50  # live: [zero, v7, v8, v6, v9]
// [Asm]   andi s11, v6, -8  # live: [zero, v7, v8, v6, v9]
// [Asm]   mv a1, v9  # live: [zero, v7, v8, v6]
// [Asm]   fld fv11, c_im.6, t5  # live: [zero, fv11, v7, v8, v6]
// [Asm]   fld fv12, c_re.5, t5  # live: [zero, fv11, v7, v8, fv12, v6]
// [Asm]   lw v13, iter.3  # live: [zero, v13, fv11, v7, v8, fv12, v6]
// [Asm]   fld fv14, limit_sq.2, t5  # live: [zero, v13, fv11, v7, v8, fv12, v6, fv14]
// [Asm]   # save_ctx2  # live: [zero, v13, fv11, v7, v8, fv12, v6, fv14]
// [Asm]   mv a0, v8  # live: [a0, zero, v13, fv11, v7, v8, fv12, v6, fv14]
// [Asm]   mv a1, v7  # live: [a0, zero, v13, fv11, v7, v8, fv12, v6, a1, fv14]
// [Asm]   mv a2, zero  # live: [a0, zero, v13, fv11, v7, v8, fv12, a2, v6, a1, fv14]
// [Asm]   mv a3, zero  # live: [a3, a0, zero, v13, fv11, v7, v8, fv12, a2, v6, a1, fv14]
// [Asm]   mv a4, v6  # live: [fv14, a3, a0, zero, v13, fv11, a4, v7, v8, fv12, a2, v6, a1]
// [Asm]   fmv.d fa0, fv11  # live: [a3, fv14, a0, zero, v13, a4, v8, fa0, v7, a2, fv12, a1, v6]
// [Asm]   fmv.d fa1, fv12  # live: [a3, fa1, a0, zero, v13, a4, v8, fa0, v7, a2, v6, a1, fv14]
// [Asm]   mv a5, v13  # live: [fa1, a5, a0, zero, a4, v7, v8, fa0, a2, a1, v6, a3, fv14]
// [Asm]   fmv.d fa2, fv14  # live: [fa1, fa2, a5, a0, zero, a4, v7, v8, fa0, a2, a1, v6, a3]
// [Asm]   call main_loop30l1_13  # live: [v8, v6, zero, a0, v7]
// [Asm]   mv v15, a0  # live: [v8, v6, zero, v7]
// [Asm]   # restore_ctx2  # live: [v8, v6, zero, v7]
// [Asm] # control
// [Asm]   beq zero, v7, .main94l3_15_1  # live: [v8, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [], uses: [zero, v8], upward_exposed: [zero, v8], params_defs: []
// [Asm] # live_in: [v7, v6, zero, v8], live_out: [v7, v6, zero, v8]
// [Asm] # block parameters: []
// [Asm] .main94l3_15_2:
// [Asm] # control
// [Asm]   beq zero, v8, .main94l3_15_3  # live: [v8, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, v22, v41, ft0, ft1, a1, v28, fa1, fa2, ft6, a4, v20, fa6, v19, a6, ft10, ft5, ft7, ft4, v21, ft9, a5, a0, fa4, v36, ft2, a2, a3, v24, ft8, a7, t3, fa7, t0, fa5, v18, fa3, ft3, v23, fa0, t4, t2, v40], uses: [v21, a0, v36, v7, v41, a2, a1, a3, v24, v18, zero, v20, v23, a4, v8, v19, v6, v40], upward_exposed: [v7, v6, zero, v8], params_defs: []
// [Asm] # live_in: [v8, v6, zero, v7], live_out: [v28, zero]
// [Asm] # block parameters: []
// [Asm] .main94l3_15_4:
// [Asm]   mul v18, zero, v8  # live: [v8, v6, v18, zero, v7]
// [Asm]   addi v19, v18, 0  # live: [v8, v19, v6, zero, v7]
// [Asm]   slliw v40, v19, 2  # live: [v8, v40, v6, zero, v7]
// [Asm]   add v41, v6, v40  # live: [v8, v41, v6, zero, v7]
// [Asm]   lw v20, 0(v41)  # live: [v8, v6, zero, v20, v7]
// [Asm]   addi v21, v20, 48  # live: [v8, v6, v21, zero, v7]
// [Asm]   # save_ctx2  # live: [v8, v6, v21, zero, v7]
// [Asm]   mv a0, v21  # live: [v8, v6, zero, a0, v7]
// [Asm]   call minimbt_print_char  # live: [v8, v6, zero, a0, v7]
// [Asm]   mv v22, a0  # live: [v8, v6, zero, v7]
// [Asm]   # restore_ctx2  # live: [v8, v6, zero, v7]
// [Asm]   li v36, 1  # live: [v8, v36, v6, zero, v7]
// [Asm]   addi v23, v36, 0  # live: [v8, v6, zero, v23, v7]
// [Asm]   # save_ctx2  # live: [v8, v6, zero, v23, v7]
// [Asm]   mv a0, v8  # live: [v7, v6, zero, a0, v23]
// [Asm]   mv a1, v7  # live: [a1, v6, zero, a0, v23]
// [Asm]   mv a2, v23  # live: [a2, a1, v6, zero, a0]
// [Asm]   mv a3, zero  # live: [a2, a1, v6, a3, zero, a0]
// [Asm]   mv a4, v6  # live: [a2, a1, a3, zero, a0, a4]
// [Asm]   call print_loop68l2_14  # live: [zero, a0]
// [Asm]   mv v24, a0  # live: [v24, zero]
// [Asm]   # restore_ctx2  # live: [v24, zero]
// [Asm] # control
// [Asm]   mv v28, v24  # live: [v28, zero]
// [Asm] 
// [Asm] # block info: defs: [v29], uses: [v28], upward_exposed: [v28], params_defs: [v28]
// [Asm] # live_in: [v28, zero], live_out: [v29, zero]
// [Asm] # block parameters: [v28]
// [Asm] .main94l3_15_5:
// [Asm] # control
// [Asm]   mv v29, v28  # live: [v29, zero]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [zero, a0], upward_exposed: [zero], params_defs: [v29]
// [Asm] # live_in: [v29, zero], live_out: []
// [Asm] # block parameters: [v29]
// [Asm] .main94l3_15_6:
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v29], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v29, zero]
// [Asm] # block parameters: []
// [Asm] .main94l3_15_1:
// [Asm] # control
// [Asm]   mv v29, zero  # live: [v29, zero]
// [Asm]   j .main94l3_15_6  # live: [v29, zero]
// [Asm] 
// [Asm] # block info: defs: [v25, t1, v26, ft0, ft1, a1, v28, v33, fa1, fa2, ft6, a4, fa6, v27, a6, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v31, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v31, v33, a0, zero, v26, a4, v27, v8, v7, a2, a1, v6, a3], upward_exposed: [v7, v6, zero, v8], params_defs: []
// [Asm] # live_in: [v8, v6, zero, v7], live_out: [v28, zero]
// [Asm] # block parameters: []
// [Asm] .main94l3_15_3:
// [Asm]   # save_ctx2  # live: [v8, v6, zero, v7]
// [Asm]   li v33, 10  # live: [v8, v6, zero, v33, v7]
// [Asm]   mv a0, v33  # live: [v8, v6, zero, a0, v7]
// [Asm]   call minimbt_print_char  # live: [v8, v6, zero, a0, v7]
// [Asm]   mv v25, a0  # live: [v8, v6, zero, v7]
// [Asm]   # restore_ctx2  # live: [v8, v6, zero, v7]
// [Asm]   li v31, 1  # live: [v8, v6, v31, zero, v7]
// [Asm]   addi v26, v31, 0  # live: [v8, v6, zero, v26, v7]
// [Asm]   # save_ctx2  # live: [v8, v6, zero, v26, v7]
// [Asm]   mv a0, v8  # live: [v7, v6, zero, a0, v26]
// [Asm]   mv a1, v7  # live: [a1, v6, zero, a0, v26]
// [Asm]   mv a2, zero  # live: [a2, a1, v6, zero, a0, v26]
// [Asm]   mv a3, v26  # live: [a2, a1, v6, a3, zero, a0]
// [Asm]   mv a4, v6  # live: [a2, a1, a3, zero, a0, a4]
// [Asm]   call print_loop68l2_14  # live: [zero, a0]
// [Asm]   mv v27, a0  # live: [zero, v27]
// [Asm]   # restore_ctx2  # live: [zero, v27]
// [Asm] # control
// [Asm]   mv v28, v27  # live: [v28, zero]
// [Asm]   j .main94l3_15_5  # live: [v28, zero]
// [Asm] 
// [Asm] # leaf true
// [Asm] T$c_im.6_10:
// [Asm] # block info: defs: [fa0, fv3, v2], uses: [fa0, fv3, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$c_im.6_10_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 4604885582990058455  # live: [v2]
// [Asm]   fmv.d.x fv3, v2  # live: [fv3]
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main_loop30l1_13:
// [Asm] # block info: defs: [v3, v11, fv10, v14, v5, v13, fv8, fv19, v12, fv16, v9, v18, v4, v6, v15, fv17, fv7, v2], uses: [v2, fv10, v5, a5, a0, fv8, a2, a1, a3, fa1, v9, fa2, a4, fa0, v4, v6, fv7, v3], upward_exposed: [a5, fa2, a0, a4, fa0, a2, a1, a3, fa1], params_defs: []
// [Asm] # live_in: [a5, fa2, a0, zero, a4, fa0, a2, a1, a3, fa1], live_out: [v11, v14, v18, v13, zero, fv19, v12, v15, fv16, fv17]
// [Asm] # block parameters: []
// [Asm] .main_loop30l1_13_20:
// [Asm]   # save_ctx1  # live: [fa2, a5, zero, a0, a4, fa0, a2, a1, a3, fa1]
// [Asm]   mv v2, a0  # live: [fa2, a5, zero, a4, fa0, a2, a1, a3, fa1, v2]
// [Asm]   mv v3, a1  # live: [v2, fa2, a5, zero, a4, fa0, a2, a3, fa1, v3]
// [Asm]   mv v4, a2  # live: [v2, fa2, a5, zero, a4, fa0, v4, a3, fa1, v3]
// [Asm]   mv v5, a3  # live: [v2, v5, fa2, a5, zero, a4, fa0, v4, fa1, v3]
// [Asm]   mv v6, a4  # live: [v2, v5, fa2, a5, zero, fa0, v4, v6, fa1, v3]
// [Asm]   fmv.d fv7, fa0  # live: [v2, v5, fa2, a5, zero, v4, v6, fa1, fv7, v3]
// [Asm]   fmv.d fv8, fa1  # live: [v2, v5, fa2, a5, zero, fv8, v4, v6, fv7, v3]
// [Asm]   mv v9, a5  # live: [v2, v5, fa2, zero, fv8, v4, v6, v9, fv7, v3]
// [Asm]   fmv.d fv10, fa2  # live: [v2, fv10, v5, zero, fv8, v4, v6, v9, fv7, v3]
// [Asm] # control
// [Asm]   mv v11, v2  # live: [v11, fv10, v5, zero, fv8, v4, v6, v9, fv7, v3]
// [Asm]   mv v12, v3  # live: [v11, fv10, v5, zero, fv8, v4, v6, v12, v9, fv7]
// [Asm]   mv v13, v4  # live: [v11, fv10, v5, v13, zero, fv8, v6, v12, v9, fv7]
// [Asm]   mv v14, v5  # live: [v11, fv10, v14, v13, zero, fv8, v6, v12, v9, fv7]
// [Asm]   mv v15, v6  # live: [v11, fv10, v14, v13, zero, fv8, v12, v15, v9, fv7]
// [Asm]   fmv.d fv16, fv7  # live: [v11, fv10, v14, v13, zero, fv8, v12, v15, fv16, v9]
// [Asm]   fmv.d fv17, fv8  # live: [v11, fv10, v14, v13, zero, v12, v15, fv16, fv17, v9]
// [Asm]   mv v18, v9  # live: [v11, fv10, v14, v18, v13, zero, v12, v15, fv16, fv17]
// [Asm]   fmv.d fv19, fv10  # live: [v11, v14, v18, v13, zero, fv19, v12, v15, fv16, fv17]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v14, v12], upward_exposed: [v14, v12], params_defs: [v11, v14, v18, v13, fv19, v12, v15, fv16, fv17]
// [Asm] # live_in: [v11, v14, v18, v13, zero, fv19, v12, v15, fv16, fv17], live_out: [v11, v14, zero, v13, v12, v15]
// [Asm] # block parameters: [v11, v12, v13, v14, v15, fv16, fv17, v18, fv19]
// [Asm] .main_loop30l1_13_0:
// [Asm] # control
// [Asm]   beq v14, v12, .main_loop30l1_13_1  # live: [v11, v14, v12, v15, zero, v13]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v11, v13], upward_exposed: [v11, v13], params_defs: []
// [Asm] # live_in: [v11, v14, v13, zero, v12, v15], live_out: [v11, v14, zero, v13, v12, v15]
// [Asm] # block parameters: []
// [Asm] .main_loop30l1_13_2:
// [Asm] # control
// [Asm]   beq v13, v11, .main_loop30l1_13_3  # live: [v11, v14, v12, v15, zero, v13]
// [Asm] 
// [Asm] # block info: defs: [fv23, fv24, fv32, v123, fv30, v108, fv26, v113, v118, fv22, fv28, fv31, fv25, fv34, fv33, v35, fv29, fv109, fv124, fv27, fv119, fv114], uses: [v11, fv24, fv23, v14, fv32, v13, v123, fv30, v108, v12, fv26, v113, fv22, v118, fv28, fv31, fv25, zero, v35, fv29, fv124, fv109, fv27, fv119, fv114], upward_exposed: [v11, v14, v12, v13, zero], params_defs: []
// [Asm] # live_in: [v11, v14, v13, zero, v12, v15], live_out: [v11, v14, fv32, zero, v13, fv34, fv33, fv27, v15, v12]
// [Asm] # block parameters: []
// [Asm] .main_loop30l1_13_4:
// [Asm]   fcvt.d.w fv22, v13  # live: [v11, fv22, v14, zero, v13, v12, v15]
// [Asm]   li v123, 4613937818241073152  # live: [v11, fv22, v14, zero, v13, v123, v12, v15]
// [Asm]   fmv.d.x fv124, v123  # live: [v11, fv22, v14, zero, v13, fv124, v12, v15]
// [Asm]   fmul.d fv23, fv124, fv22  # live: [v11, fv23, v14, zero, v13, v12, v15]
// [Asm]   fcvt.d.w fv24, v11  # live: [v11, fv23, fv24, v14, zero, v13, v12, v15]
// [Asm]   fdiv.d fv25, fv23, fv24  # live: [v11, v14, zero, v13, fv25, v12, v15]
// [Asm]   li v118, 4609434218613702656  # live: [v11, v118, v14, zero, v13, fv25, v12, v15]
// [Asm]   fmv.d.x fv119, v118  # live: [v11, v14, zero, v13, fv25, v12, v15, fv119]
// [Asm]   fsub.d fv26, fv25, fv119  # live: [v11, v14, zero, v13, v12, v15, fv26]
// [Asm]   fneg.d fv27, fv26  # live: [v11, v14, zero, v13, fv27, v12, v15]
// [Asm]   fcvt.d.w fv28, v14  # live: [v11, v14, fv28, zero, v13, fv27, v12, v15]
// [Asm]   li v113, 4613937818241073152  # live: [v11, v14, fv28, zero, v13, fv27, v12, v15, v113]
// [Asm]   fmv.d.x fv114, v113  # live: [v11, v14, fv28, zero, v13, fv27, v12, v15, fv114]
// [Asm]   fmul.d fv29, fv114, fv28  # live: [v11, v14, zero, v13, fv29, fv27, v12, v15]
// [Asm]   fcvt.d.w fv30, v12  # live: [v11, v14, zero, v13, fv30, fv29, fv27, v12, v15]
// [Asm]   fdiv.d fv31, fv29, fv30  # live: [v11, v14, fv31, zero, v13, fv27, v12, v15]
// [Asm]   li v108, 4609434218613702656  # live: [v11, v14, fv31, zero, v13, fv27, v108, v12, v15]
// [Asm]   fmv.d.x fv109, v108  # live: [v11, v14, fv31, zero, v13, fv109, fv27, v15, v12]
// [Asm]   fsub.d fv32, fv31, fv109  # live: [v11, v14, fv32, zero, v13, fv27, v15, v12]
// [Asm]   fmul.d fv33, fv27, fv27  # live: [v11, v14, fv32, zero, v13, fv33, fv27, v15, v12]
// [Asm]   fmul.d fv34, fv32, fv32  # live: [v11, v14, fv32, zero, v13, fv34, fv33, fv27, v15, v12]
// [Asm]   lw v35, iter.3  # live: [v11, v14, fv32, zero, v13, fv34, fv33, v35, fv27, v15, v12]
// [Asm] # control
// [Asm]   beq zero, v35, .main_loop30l1_13_5  # live: [v11, v14, fv32, zero, v13, fv34, fv33, fv27, v15, v12]
// [Asm] 
// [Asm] # block info: defs: [fv37, fv38, v39], uses: [v39, fv33, fv37, zero, fv34, fv38], upward_exposed: [zero, fv34, fv33], params_defs: []
// [Asm] # live_in: [v11, v14, fv32, zero, v13, fv34, fv33, fv27, v15, v12], live_out: [v11, v14, fv32, zero, v13, fv34, fv33, fv27, v15, v12]
// [Asm] # block parameters: []
// [Asm] .main_loop30l1_13_6:
// [Asm]   fadd.d fv37, fv33, fv34  # live: [v11, fv37, v14, fv32, zero, v13, fv34, fv33, fv27, v15, v12]
// [Asm]   fld fv38, limit_sq.2, t5  # live: [v11, fv37, v14, fv32, zero, v13, fv34, fv33, fv27, v15, v12, fv38]
// [Asm]   fle.d v39, fv38, fv37  # live: [v11, v14, fv32, zero, v13, fv34, fv33, fv27, v15, v12, v39]
// [Asm] # control
// [Asm]   bne v39, zero, .main_loop30l1_13_7  # live: [v11, v14, fv32, zero, v13, fv34, fv33, fv27, v15, v12]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fv40, v51, v99, fa2, ft6, a4, fa6, v50, fv100, a6, ft10, v47, ft5, ft7, ft4, fv45, ft9, a5, a0, fa4, v92, ft2, a2, a3, ft8, a7, t3, fa7, fv46, t0, fa5, v48, fa3, ft3, fv42, fv43, fa0, t4, t2, fv49, fv44], uses: [fv27, fv44, fv45, fv32, fa4, a0, v92, a1, fa1, fv40, fv46, v48, v99, fa2, fa3, fv34, fv43, fv42, v50, fv33, fa0, fv100, v47, fv49], upward_exposed: [fv27, fv32, fv34, fv33], params_defs: []
// [Asm] # live_in: [v11, v14, fv32, v13, zero, fv34, fv33, fv27, v15, v12], live_out: [v11, v14, v13, zero, v15, v12, v51]
// [Asm] # block parameters: []
// [Asm] .main_loop30l1_13_8:
// [Asm]   li v99, 4611686018427387904  # live: [v11, v14, fv32, v99, v13, zero, fv34, fv33, fv27, v12, v15]
// [Asm]   fmv.d.x fv100, v99  # live: [v11, v14, fv32, v13, zero, fv34, fv33, fv100, fv27, v12, v15]
// [Asm]   fmul.d fv40, fv100, fv27  # live: [v11, v14, fv32, v13, zero, fv34, fv33, v12, v15, fv40]
// [Asm]   fld fv42, c_im.6, t5  # live: [v11, v14, fv32, v13, zero, fv42, fv34, fv33, v12, v15, fv40]
// [Asm]   fmadd.d fv43, fv40, fv32, fv42  # live: [v11, v14, v13, zero, fv42, fv43, fv34, fv33, v12, v15]
// [Asm]   fsub.d fv44, fv33, fv34  # live: [v11, v14, v13, zero, fv42, fv43, v12, v15, fv44]
// [Asm]   fld fv45, c_re.5, t5  # live: [v11, v14, fv45, v13, zero, fv42, fv43, v12, v15, fv44]
// [Asm]   fadd.d fv46, fv44, fv45  # live: [v11, fv46, v14, fv45, v13, zero, fv42, fv43, v12, v15]
// [Asm]   li v92, 1  # live: [v11, fv46, v14, fv45, v13, zero, fv42, fv43, v92, v12, v15]
// [Asm]   addi v47, v92, 0  # live: [v11, fv46, v14, fv45, v13, zero, fv42, fv43, v47, v12, v15]
// [Asm]   lw v48, iter.3  # live: [v11, fv46, v14, fv45, v48, v13, zero, fv42, fv43, v47, v12, v15]
// [Asm]   fld fv49, limit_sq.2, t5  # live: [v11, fv46, v14, fv45, v48, v13, zero, fv42, fv43, v47, fv49, v12, v15]
// [Asm]   # save_ctx2  # live: [v11, fv46, v14, fv45, v48, v13, zero, fv42, fv43, v47, fv49, v12, v15]
// [Asm]   fmv.d fa0, fv46  # live: [v11, v14, fv45, v48, v13, zero, fv42, fv43, fa0, v47, fv49, v12, v15]
// [Asm]   fmv.d fa1, fv43  # live: [v11, v14, fv45, v48, v13, zero, fv42, fa0, v47, fv49, v15, v12, fa1]
// [Asm]   mv a0, v47  # live: [v11, v14, fv45, v48, v13, a0, zero, fv42, fa0, fv49, v15, v12, fa1]
// [Asm]   fmv.d fa2, fv42  # live: [v11, v14, fv45, v48, fa2, v13, a0, zero, fa0, fv49, v15, v12, fa1]
// [Asm]   fmv.d fa3, fv45  # live: [v11, v14, v48, fa2, fa3, zero, v13, a0, fa0, fv49, v15, v12, fa1]
// [Asm]   mv a1, v48  # live: [v11, v14, fa2, fa3, zero, v13, a0, fa0, a1, fv49, v15, v12, fa1]
// [Asm]   fmv.d fa4, fv49  # live: [v11, v14, fa2, fa3, zero, v13, fa4, a0, fa0, a1, v12, v15, fa1]
// [Asm]   call calc_pixel7l0_12  # live: [v11, v14, v13, zero, a0, v15, v12]
// [Asm]   mv v50, a0  # live: [v11, v14, v13, zero, v50, v15, v12]
// [Asm]   # restore_ctx2  # live: [v11, v14, v13, zero, v50, v15, v12]
// [Asm] # control
// [Asm]   mv v51, v50  # live: [v11, v14, v13, zero, v15, v12, v51]
// [Asm] 
// [Asm] # block info: defs: [v53], uses: [v51], upward_exposed: [v51], params_defs: [v51]
// [Asm] # live_in: [v11, v14, v13, zero, v15, v12, v51], live_out: [v11, v14, v53, v13, zero, v15, v12]
// [Asm] # block parameters: [v51]
// [Asm] .main_loop30l1_13_9:
// [Asm] # control
// [Asm]   mv v53, v51  # live: [v11, v14, v53, v13, zero, v15, v12]
// [Asm] 
// [Asm] # block info: defs: [v54, v55], uses: [v11, v14, v53, v54, v13, zero], upward_exposed: [v11, v14, v53, v13, zero], params_defs: [v53]
// [Asm] # live_in: [v11, v14, v53, v13, zero, v15, v12], live_out: [v11, v14, v53, zero, v13, v15, v12, v55]
// [Asm] # block parameters: [v53]
// [Asm] .main_loop30l1_13_10:
// [Asm]   mul v54, v14, v11  # live: [v11, v14, v53, zero, v13, v15, v12, v54]
// [Asm]   add v55, v54, v13  # live: [v11, v14, v53, zero, v13, v15, v12, v55]
// [Asm] # control
// [Asm]   bge zero, v53, .main_loop30l1_13_11  # live: [v11, v14, v53, zero, v13, v15, v12, v55]
// [Asm] 
// [Asm] # block info: defs: [v85], uses: [v53, v85], upward_exposed: [v53], params_defs: []
// [Asm] # live_in: [v11, v14, v53, v13, zero, v15, v12, v55], live_out: [v11, v14, v53, v13, zero, v15, v12, v55]
// [Asm] # block parameters: []
// [Asm] .main_loop30l1_13_12:
// [Asm] # control
// [Asm]   li v85, 48  # live: [v11, v14, v53, v13, zero, v85, v15, v12, v55]
// [Asm]   blt v53, v85, .main_loop30l1_13_14  # live: [v11, v14, v53, v13, zero, v15, v12, v55]
// [Asm] 
// [Asm] # block info: defs: [v84, v58], uses: [v84], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v11, v14, v13, zero, v15, v12, v55], live_out: [v11, v58, v14, v13, zero, v15, v12, v55]
// [Asm] # block parameters: []
// [Asm] .main_loop30l1_13_13:
// [Asm] # control
// [Asm]   li v84, 48  # live: [v11, v14, v13, zero, v84, v15, v12, v55]
// [Asm]   mv v58, v84  # live: [v11, v58, v14, v13, zero, v15, v12, v55]
// [Asm] 
// [Asm] # block info: defs: [v59], uses: [v58], upward_exposed: [v58], params_defs: [v58]
// [Asm] # live_in: [v11, v58, v14, v13, zero, v15, v12, v55], live_out: [v11, v14, v13, zero, v59, v15, v12, v55]
// [Asm] # block parameters: [v58]
// [Asm] .main_loop30l1_13_15:
// [Asm] # control
// [Asm]   mv v59, v58  # live: [v11, v14, v13, zero, v59, v15, v12, v55]
// [Asm] 
// [Asm] # block info: defs: [fv63, v82, v18, fv62, fv65, v13, fv19, v83, v61, fv16, v64, fv17], uses: [v11, fv63, v14, fv65, v13, v12, v64, v82, fv62, v59, v15, v83, v61, v55], upward_exposed: [v11, v14, v13, v59, v15, v12, v55], params_defs: [v59]
// [Asm] # live_in: [v11, v14, v13, zero, v59, v15, v12, v55], live_out: [v11, v14, v18, v13, zero, fv19, v12, v15, fv16, fv17]
// [Asm] # block parameters: [v59]
// [Asm] .main_loop30l1_13_16:
// [Asm]   slliw v82, v55, 2  # live: [v11, v14, v82, zero, v13, v59, v12, v15]
// [Asm]   add v83, v15, v82  # live: [v11, v14, zero, v13, v59, v12, v15, v83]
// [Asm]   sw v59, 0(v83)  # live: [v11, v14, zero, v13, v12, v15]
// [Asm]   addi v61, v13, 1  # live: [v11, v14, zero, v12, v15, v61]
// [Asm]   fld fv62, c_im.6, t5  # live: [v11, v14, fv62, zero, v12, v15, v61]
// [Asm]   fld fv63, c_re.5, t5  # live: [v11, fv63, v14, fv62, zero, v12, v15, v61]
// [Asm]   lw v64, iter.3  # live: [v11, fv63, v14, fv62, zero, v12, v15, v61, v64]
// [Asm]   fld fv65, limit_sq.2, t5  # live: [v11, fv63, v14, fv65, fv62, zero, v12, v15, v61, v64]
// [Asm] # control
// [Asm]   mv v11, v11  # live: [v11, fv63, v14, fv65, fv62, zero, v12, v15, v61, v64]
// [Asm]   mv v12, v12  # live: [v11, fv63, v14, fv65, fv62, zero, v12, v15, v61, v64]
// [Asm]   mv v13, v61  # live: [v11, fv63, v14, fv65, fv62, zero, v13, v12, v15, v64]
// [Asm]   mv v14, v14  # live: [v11, fv63, v14, fv65, fv62, zero, v13, v12, v15, v64]
// [Asm]   mv v15, v15  # live: [v11, fv63, v14, fv65, fv62, zero, v13, v12, v15, v64]
// [Asm]   fmv.d fv16, fv62  # live: [v11, fv63, v14, fv65, v13, zero, v12, v15, fv16, v64]
// [Asm]   fmv.d fv17, fv63  # live: [v11, v14, fv65, v13, zero, v12, v15, fv16, fv17, v64]
// [Asm]   mv v18, v64  # live: [v11, v14, v18, fv65, v13, zero, v12, v15, fv16, fv17]
// [Asm]   fmv.d fv19, fv65  # live: [v11, v14, v18, v13, zero, fv19, v12, v15, fv16, fv17]
// [Asm]   j .main_loop30l1_13_0  # live: [v11, v14, v18, v13, zero, fv19, v12, v15, fv16, fv17]
// [Asm] 
// [Asm] # block info: defs: [v71], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v71]
// [Asm] # block parameters: []
// [Asm] .main_loop30l1_13_1:
// [Asm] # control
// [Asm]   mv v71, zero  # live: [v71]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v71, a0], upward_exposed: [v71], params_defs: [v71]
// [Asm] # live_in: [v71], live_out: []
// [Asm] # block parameters: [v71]
// [Asm] .main_loop30l1_13_18:
// [Asm] # control
// [Asm]   mv a0, v71  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v66, fv68, fv70, v69, v14, fv67, v18, v13, fv19, fv16, fv17], uses: [v11, v66, fv68, fv70, v69, v14, fv67, zero, v12, v15], upward_exposed: [v11, v14, v12, v15, zero], params_defs: []
// [Asm] # live_in: [v11, v14, v12, v15, zero], live_out: [v11, v14, v18, v13, zero, fv19, v12, v15, fv16, fv17]
// [Asm] # block parameters: []
// [Asm] .main_loop30l1_13_3:
// [Asm]   addi v66, v14, 1  # live: [v11, v66, zero, v12, v15]
// [Asm]   fld fv67, c_im.6, t5  # live: [v11, v66, fv67, zero, v12, v15]
// [Asm]   fld fv68, c_re.5, t5  # live: [v11, fv68, v66, fv67, zero, v12, v15]
// [Asm]   lw v69, iter.3  # live: [v11, fv68, v66, v69, fv67, zero, v12, v15]
// [Asm]   fld fv70, limit_sq.2, t5  # live: [v11, fv68, v66, fv70, v69, fv67, zero, v12, v15]
// [Asm] # control
// [Asm]   mv v11, v11  # live: [v11, fv68, v66, fv70, v69, fv67, zero, v12, v15]
// [Asm]   mv v12, v12  # live: [v11, fv68, v66, fv70, v69, fv67, zero, v12, v15]
// [Asm]   mv v13, zero  # live: [v11, fv68, v66, fv70, v69, fv67, v13, zero, v12, v15]
// [Asm]   mv v14, v66  # live: [v11, fv68, fv70, v69, v14, fv67, zero, v13, v12, v15]
// [Asm]   mv v15, v15  # live: [v11, fv68, fv70, v69, v14, fv67, zero, v13, v12, v15]
// [Asm]   fmv.d fv16, fv67  # live: [v11, fv68, fv70, v69, v14, v13, zero, v12, v15, fv16]
// [Asm]   fmv.d fv17, fv68  # live: [v11, fv70, v14, v69, v13, zero, v12, v15, fv16, fv17]
// [Asm]   mv v18, v69  # live: [v11, fv70, v14, v18, v13, zero, v12, v15, fv16, fv17]
// [Asm]   fmv.d fv19, fv70  # live: [v11, v14, v18, v13, zero, fv19, v12, v15, fv16, fv17]
// [Asm]   j .main_loop30l1_13_0  # live: [v11, v14, v18, v13, zero, fv19, v12, v15, fv16, fv17]
// [Asm] 
// [Asm] # block info: defs: [v52, v53], uses: [v52], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v11, v14, v13, zero, v15, v12], live_out: [v11, v14, v53, v13, zero, v15, v12]
// [Asm] # block parameters: []
// [Asm] .main_loop30l1_13_5:
// [Asm]   lw v52, iter.3  # live: [v11, v14, v13, zero, v15, v12, v52]
// [Asm] # control
// [Asm]   mv v53, v52  # live: [v11, v14, v53, v13, zero, v15, v12]
// [Asm]   j .main_loop30l1_13_10  # live: [v11, v14, v53, v13, zero, v15, v12]
// [Asm] 
// [Asm] # block info: defs: [v51], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v11, v14, zero, v13, v15, v12], live_out: [v11, v14, v13, zero, v15, v12, v51]
// [Asm] # block parameters: []
// [Asm] .main_loop30l1_13_7:
// [Asm] # control
// [Asm]   mv v51, zero  # live: [v11, v14, v13, zero, v15, v12, v51]
// [Asm]   j .main_loop30l1_13_9  # live: [v11, v14, v13, zero, v15, v12, v51]
// [Asm] 
// [Asm] # block info: defs: [v59], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v11, v14, zero, v13, v15, v12, v55], live_out: [v11, v14, v13, zero, v59, v15, v12, v55]
// [Asm] # block parameters: []
// [Asm] .main_loop30l1_13_11:
// [Asm] # control
// [Asm]   mv v59, zero  # live: [v11, v14, v13, zero, v59, v15, v12, v55]
// [Asm]   j .main_loop30l1_13_16  # live: [v11, v14, v13, zero, v59, v15, v12, v55]
// [Asm] 
// [Asm] # block info: defs: [v58], uses: [v53], upward_exposed: [v53], params_defs: []
// [Asm] # live_in: [v11, v14, v53, v13, zero, v15, v12, v55], live_out: [v11, v58, v14, v13, zero, v15, v12, v55]
// [Asm] # block parameters: []
// [Asm] .main_loop30l1_13_14:
// [Asm] # control
// [Asm]   mv v58, v53  # live: [v11, v58, v14, v13, zero, v15, v12, v55]
// [Asm]   j .main_loop30l1_13_15  # live: [v11, v58, v14, v13, zero, v15, v12, v55]
// [Asm] 
// [Asm] # leaf true
// [Asm] T$c_re.5_8:
// [Asm] # block info: defs: [fv2, fv3, fa0], uses: [fv2, fv3, fa0], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$c_re.5_8_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   fld fv2, _4, t5  # live: [fv2]
// [Asm]   fneg.d fv3, fv2  # live: [fv3]
// [Asm] # control
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_20:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fv5, fv2, fa2, ft6, a4, fa6, a6, v4, ft5, ft10, v6, fv3, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [fv5, fv2, fa2, a0, fa0, v4, v6, fv3, fa1], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_20_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   fld fv2, c_im.6, t5  # live: [fv2]
// [Asm]   fld fv3, c_re.5, t5  # live: [fv2, fv3]
// [Asm]   lw v4, iter.3  # live: [v4, fv2, fv3]
// [Asm]   fld fv5, limit_sq.2, t5  # live: [fv5, v4, fv2, fv3]
// [Asm]   # save_ctx2  # live: [fv5, v4, fv2, fv3]
// [Asm]   fmv.d fa0, fv2  # live: [fv5, v4, fv3, fa0]
// [Asm]   fmv.d fa1, fv3  # live: [fv5, v4, fa1, fa0]
// [Asm]   mv a0, v4  # live: [fv5, fa1, a0, fa0]
// [Asm]   fmv.d fa2, fv5  # live: [fa2, fa1, a0, fa0]
// [Asm]   call main94l3_15  # live: [a0]
// [Asm]   mv v6, a0  # live: [v6]
// [Asm]   # restore_ctx2  # live: [v6]
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] calc_pixel7l0_12:
// [Asm] # block info: defs: [v11, fv10, v14, v7, fv8, fv12, fv6, fv15, fv5, fv9, fv2, fv13, v4, fv3], uses: [a0, fa4, v7, fv8, a1, fv6, fa1, fv5, fv2, fa2, fa3, fa0, v4, fv3], upward_exposed: [fa2, fa3, a0, fa4, fa0, a1, fa1], params_defs: []
// [Asm] # live_in: [fa2, fa3, a0, fa4, zero, fa0, a1, fa1], live_out: [fv9, v11, fv10, v14, zero, fv13, fv12, fv15]
// [Asm] # block parameters: []
// [Asm] .calc_pixel7l0_12_14:
// [Asm]   # save_ctx1  # live: [fa3, fa2, fa4, zero, a0, fa0, a1, fa1]
// [Asm]   fmv.d fv2, fa0  # live: [fv2, fa3, fa2, fa4, zero, a0, a1, fa1]
// [Asm]   fmv.d fv3, fa1  # live: [fv2, fa3, fa2, fa4, zero, a0, a1, fv3]
// [Asm]   mv v4, a0  # live: [fv2, fa3, fa2, fa4, zero, v4, a1, fv3]
// [Asm]   fmv.d fv5, fa2  # live: [fv5, fv2, fa3, zero, fa4, v4, a1, fv3]
// [Asm]   fmv.d fv6, fa3  # live: [fv5, fv2, zero, fa4, v4, a1, fv6, fv3]
// [Asm]   mv v7, a1  # live: [fv5, fv2, zero, fa4, v7, v4, fv6, fv3]
// [Asm]   fmv.d fv8, fa4  # live: [fv5, fv2, zero, fv8, v7, v4, fv6, fv3]
// [Asm] # control
// [Asm]   fmv.d fv9, fv2  # live: [fv9, fv5, zero, fv8, v7, v4, fv6, fv3]
// [Asm]   fmv.d fv10, fv3  # live: [fv9, fv5, fv10, zero, fv8, v7, v4, fv6]
// [Asm]   mv v11, v4  # live: [fv9, v11, fv5, fv10, zero, fv8, v7, fv6]
// [Asm]   fmv.d fv12, fv5  # live: [fv9, v11, fv10, zero, fv8, v7, fv12, fv6]
// [Asm]   fmv.d fv13, fv6  # live: [fv9, v11, fv10, zero, fv13, fv8, v7, fv12]
// [Asm]   mv v14, v7  # live: [fv9, v11, fv10, v14, zero, fv13, fv8, fv12]
// [Asm]   fmv.d fv15, fv8  # live: [fv9, v11, fv10, v14, zero, fv13, fv12, fv15]
// [Asm] 
// [Asm] # block info: defs: [v18, fv16, fv17], uses: [fv9, v11, fv10, v18], upward_exposed: [fv9, v11, fv10], params_defs: [fv9, v11, fv10, v14, fv13, fv12, fv15]
// [Asm] # live_in: [fv9, v11, fv10, v14, zero, fv13, fv12, fv15], live_out: [v11, fv9, fv10, zero, fv16, fv17]
// [Asm] # block parameters: [fv9, fv10, v11, fv12, fv13, v14, fv15]
// [Asm] .calc_pixel7l0_12_0:
// [Asm]   fmul.d fv16, fv9, fv9  # live: [v11, fv9, fv10, zero, fv16]
// [Asm]   fmul.d fv17, fv10, fv10  # live: [v11, fv9, fv10, zero, fv16, fv17]
// [Asm]   lw v18, iter.3  # live: [v11, fv9, fv10, v18, zero, fv16, fv17]
// [Asm] # control
// [Asm]   beq v11, v18, .calc_pixel7l0_12_1  # live: [v11, fv9, fv10, fv16, zero, fv17]
// [Asm] 
// [Asm] # block info: defs: [fv20, fv21, v22], uses: [fv21, fv20, fv16, fv17, zero, v22], upward_exposed: [fv16, fv17, zero], params_defs: []
// [Asm] # live_in: [v11, fv9, fv10, zero, fv16, fv17], live_out: [v11, fv9, fv10, zero, fv16, fv17]
// [Asm] # block parameters: []
// [Asm] .calc_pixel7l0_12_2:
// [Asm]   fadd.d fv20, fv16, fv17  # live: [v11, fv9, fv10, zero, fv20, fv16, fv17]
// [Asm]   fld fv21, limit_sq.2, t5  # live: [v11, fv9, fv10, zero, fv20, fv16, fv17, fv21]
// [Asm]   fle.d v22, fv21, fv20  # live: [v11, fv9, fv10, zero, v22, fv16, fv17]
// [Asm] # control
// [Asm]   bne v22, zero, .calc_pixel7l0_12_3  # live: [v11, fv9, fv10, fv16, zero, fv17]
// [Asm] 
// [Asm] # block info: defs: [fv23, fv28, fv32, fv31, v79, fv25, v30, fv29, fv27, fv26, fv80, v33], uses: [v11, fv10, fv23, v79, v30, fv16, fv80, fv26, v33, fv9, fv28, fv25, fv29, fv27, fv17], upward_exposed: [fv9, v11, fv10, fv16, fv17], params_defs: []
// [Asm] # live_in: [fv9, v11, fv10, zero, fv16, fv17], live_out: [fv32, fv31, zero, v30, fv29, fv26]
// [Asm] # block parameters: []
// [Asm] .calc_pixel7l0_12_4:
// [Asm]   li v79, 4611686018427387904  # live: [v11, fv9, fv10, zero, v79, fv16, fv17]
// [Asm]   fmv.d.x fv80, v79  # live: [v11, fv9, fv10, zero, fv16, fv17, fv80]
// [Asm]   fmul.d fv23, fv80, fv9  # live: [v11, fv23, fv10, zero, fv16, fv17]
// [Asm]   fld fv25, c_im.6, t5  # live: [v11, fv23, fv10, zero, fv25, fv16, fv17]
// [Asm]   fmadd.d fv26, fv23, fv10, fv25  # live: [v11, zero, fv16, fv26, fv17]
// [Asm]   fsub.d fv27, fv16, fv17  # live: [v11, zero, fv27, fv26]
// [Asm]   fld fv28, c_re.5, t5  # live: [v11, fv28, zero, fv27, fv26]
// [Asm]   fadd.d fv29, fv27, fv28  # live: [v11, zero, fv29, fv26]
// [Asm]   addi v30, v11, 1  # live: [zero, v30, fv29, fv26]
// [Asm]   fmul.d fv31, fv29, fv29  # live: [fv31, zero, v30, fv29, fv26]
// [Asm]   fmul.d fv32, fv26, fv26  # live: [fv32, fv31, zero, v30, fv29, fv26]
// [Asm]   lw v33, iter.3  # live: [fv32, fv31, zero, v30, fv29, fv26, v33]
// [Asm] # control
// [Asm]   beq v30, v33, .calc_pixel7l0_12_5  # live: [fv29, fv32, fv31, zero, fv26, v30]
// [Asm] 
// [Asm] # block info: defs: [v37, fv35, fv36], uses: [v37, fv32, fv31, fv35, fv36, zero], upward_exposed: [fv32, fv31, zero], params_defs: []
// [Asm] # live_in: [fv32, fv31, zero, v30, fv29, fv26], live_out: [fv32, fv31, zero, v30, fv29, fv26]
// [Asm] # block parameters: []
// [Asm] .calc_pixel7l0_12_6:
// [Asm]   fadd.d fv35, fv31, fv32  # live: [fv32, fv31, zero, v30, fv29, fv35, fv26]
// [Asm]   fld fv36, limit_sq.2, t5  # live: [fv32, fv31, zero, fv36, v30, fv29, fv35, fv26]
// [Asm]   fle.d v37, fv36, fv35  # live: [fv32, fv31, zero, v30, fv29, v37, fv26]
// [Asm] # control
// [Asm]   bne v37, zero, .calc_pixel7l0_12_7  # live: [fv29, fv32, fv31, zero, fv26, v30]
// [Asm] 
// [Asm] # block info: defs: [v11, fv10, v46, v14, fv65, fv12, fv47, fv15, v64, fv38, fv40, fv9, fv41, fv42, fv43, v45, fv13, fv44], uses: [v46, fv32, fv65, v30, fv47, v64, fv26, fv38, fv40, fv31, fv42, fv43, fv41, v45, fv29, fv44], upward_exposed: [fv29, fv32, fv31, fv26, v30], params_defs: []
// [Asm] # live_in: [fv32, fv31, zero, v30, fv29, fv26], live_out: [fv9, v11, fv10, v14, zero, fv13, fv12, fv15]
// [Asm] # block parameters: []
// [Asm] .calc_pixel7l0_12_8:
// [Asm]   li v64, 4611686018427387904  # live: [fv32, fv31, zero, v30, fv29, fv26, v64]
// [Asm]   fmv.d.x fv65, v64  # live: [fv32, fv31, fv65, zero, v30, fv29, fv26]
// [Asm]   fmul.d fv38, fv65, fv29  # live: [fv32, fv31, zero, v30, fv26, fv38]
// [Asm]   fld fv40, c_im.6, t5  # live: [fv32, fv31, zero, v30, fv26, fv40, fv38]
// [Asm]   fmadd.d fv41, fv38, fv26, fv40  # live: [fv32, fv31, zero, fv41, v30, fv40]
// [Asm]   fsub.d fv42, fv31, fv32  # live: [zero, fv41, v30, fv42, fv40]
// [Asm]   fld fv43, c_re.5, t5  # live: [zero, fv43, fv41, v30, fv42, fv40]
// [Asm]   fadd.d fv44, fv42, fv43  # live: [zero, fv43, fv41, v30, fv44, fv40]
// [Asm]   addi v45, v30, 1  # live: [zero, fv43, fv41, v45, fv44, fv40]
// [Asm]   lw v46, iter.3  # live: [v46, zero, fv43, fv41, v45, fv44, fv40]
// [Asm]   fld fv47, limit_sq.2, t5  # live: [v46, zero, fv43, fv41, v45, fv47, fv44, fv40]
// [Asm] # control
// [Asm]   fmv.d fv9, fv44  # live: [fv9, v46, zero, fv43, fv41, v45, fv47, fv40]
// [Asm]   fmv.d fv10, fv41  # live: [fv9, fv10, v46, zero, fv43, v45, fv47, fv40]
// [Asm]   mv v11, v45  # live: [fv9, v11, fv10, v46, zero, fv43, fv47, fv40]
// [Asm]   fmv.d fv12, fv40  # live: [fv9, v11, fv10, v46, zero, fv43, fv12, fv47]
// [Asm]   fmv.d fv13, fv43  # live: [fv9, v11, fv10, v46, zero, fv13, fv12, fv47]
// [Asm]   mv v14, v46  # live: [fv9, v11, fv10, v14, zero, fv13, fv12, fv47]
// [Asm]   fmv.d fv15, fv47  # live: [fv9, v11, fv10, v14, zero, fv13, fv12, fv15]
// [Asm]   j .calc_pixel7l0_12_0  # live: [fv9, v11, fv10, v14, zero, fv13, fv12, fv15]
// [Asm] 
// [Asm] # block info: defs: [v52, v53], uses: [v52], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v53]
// [Asm] # block parameters: []
// [Asm] .calc_pixel7l0_12_1:
// [Asm]   lw v52, iter.3  # live: [v52]
// [Asm] # control
// [Asm]   mv v53, v52  # live: [v53]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v53, a0], upward_exposed: [v53], params_defs: [v53]
// [Asm] # live_in: [v53], live_out: []
// [Asm] # block parameters: [v53]
// [Asm] .calc_pixel7l0_12_12:
// [Asm] # control
// [Asm]   mv a0, v53  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v51], uses: [v11], upward_exposed: [v11], params_defs: []
// [Asm] # live_in: [v11], live_out: [v51]
// [Asm] # block parameters: []
// [Asm] .calc_pixel7l0_12_3:
// [Asm] # control
// [Asm]   mv v51, v11  # live: [v51]
// [Asm] 
// [Asm] # block info: defs: [v53], uses: [v51], upward_exposed: [v51], params_defs: [v51]
// [Asm] # live_in: [v51], live_out: [v53]
// [Asm] # block parameters: [v51]
// [Asm] .calc_pixel7l0_12_11:
// [Asm] # control
// [Asm]   mv v53, v51  # live: [v53]
// [Asm]   j .calc_pixel7l0_12_12  # live: [v53]
// [Asm] 
// [Asm] # block info: defs: [v49, v50], uses: [v49], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v50]
// [Asm] # block parameters: []
// [Asm] .calc_pixel7l0_12_5:
// [Asm]   lw v49, iter.3  # live: [v49]
// [Asm] # control
// [Asm]   mv v50, v49  # live: [v50]
// [Asm] 
// [Asm] # block info: defs: [v51], uses: [v50], upward_exposed: [v50], params_defs: [v50]
// [Asm] # live_in: [v50], live_out: [v51]
// [Asm] # block parameters: [v50]
// [Asm] .calc_pixel7l0_12_10:
// [Asm] # control
// [Asm]   mv v51, v50  # live: [v51]
// [Asm]   j .calc_pixel7l0_12_11  # live: [v51]
// [Asm] 
// [Asm] # block info: defs: [v48], uses: [v30], upward_exposed: [v30], params_defs: []
// [Asm] # live_in: [v30], live_out: [v48]
// [Asm] # block parameters: []
// [Asm] .calc_pixel7l0_12_7:
// [Asm] # control
// [Asm]   mv v48, v30  # live: [v48]
// [Asm] 
// [Asm] # block info: defs: [v50], uses: [v48], upward_exposed: [v48], params_defs: [v48]
// [Asm] # live_in: [v48], live_out: [v50]
// [Asm] # block parameters: [v48]
// [Asm] .calc_pixel7l0_12_9:
// [Asm] # control
// [Asm]   mv v50, v48  # live: [v50]
// [Asm]   j .calc_pixel7l0_12_10  # live: [v50]
// [Asm] 
// [Asm] # leaf true
// [Asm] T$iter.3_4:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$iter.3_4_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 300  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$limit_sq.2_2:
// [Asm] # block info: defs: [fv2, fv3, fa0], uses: [fv2, fv3, fa0], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$limit_sq.2_2_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   fld fv2, limit.1, t5  # live: [fv2]
// [Asm]   fmul.d fv3, fv2, fv2  # live: [fv3]
// [Asm] # control
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0, fa0, sp, s0, ra, s11, t5], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$limit.1_0  # live: [s0, fa0]
// [Asm]   la t5, limit.1  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$limit_sq.2_2  # live: [s0, fa0]
// [Asm]   la t5, limit_sq.2  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$iter.3_4  # live: [s0, a0]
// [Asm]   la t5, iter.3  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$_4_6  # live: [s0, fa0]
// [Asm]   la t5, _4  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$c_re.5_8  # live: [s0, fa0]
// [Asm]   la t5, c_re.5  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$c_im.6_10  # live: [s0, fa0]
// [Asm]   la t5, c_im.6  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$start_20  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] iter.3:
// [Asm]   .zero 4
// [Asm] c_im.6:
// [Asm]   .zero 8
// [Asm] start:
// [Asm]   .zero 4
// [Asm] _4:
// [Asm]   .zero 8
// [Asm] limit_sq.2:
// [Asm]   .zero 8
// [Asm] limit.1:
// [Asm]   .zero 8
// [Asm] c_re.5:
// [Asm]   .zero 8
// [Asm] 
// [Knf] build_knf: Let(("limit", Double), Double(2), Let(("limit_sq", Double), Prim(Var("limit"), Var("limit"), Mul, kind=Some(Double)), Let(("iter", Int), Int(300), Let(("c_re", Double), Neg(Double(0.123), kind=Some(Double)), Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))))))))))
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Let(("limit_sq", Double), Prim(Var("limit"), Var("limit"), Mul, kind=Some(Double)), Let(("iter", Int), Int(300), Let(("c_re", Double), Neg(Double(0.123), kind=Some(Double)), Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))))))))))
// [Knf] build_knf: Prim(Var("limit"), Var("limit"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("limit")
// [Knf] build_knf: Var("limit")
// [Knf] build_knf: Let(("iter", Int), Int(300), Let(("c_re", Double), Neg(Double(0.123), kind=Some(Double)), Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))))))))
// [Knf] build_knf: Int(300)
// [Knf] build_knf: Let(("c_re", Double), Neg(Double(0.123), kind=Some(Double)), Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))))))))
// [Knf] build_knf: Neg(Double(0.123), kind=Some(Double))
// [Knf] build_knf: Double(0.123)
// [Knf] build_knf: Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))))))
// [Knf] build_knf: Double(0.745)
// [Knf] build_knf: LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))))))
// [Knf] build_knf: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))
// [Knf] build_knf: Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))]))))))
// [Knf] build_knf: Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))
// [Knf] build_knf: Var("it")
// [Knf] build_knf: Var("iter")
// [Knf] build_knf: Var("iter")
// [Knf] build_knf: If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: Var("limit_sq")
// [Knf] build_knf: Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))
// [Knf] build_knf: Var("zr2")
// [Knf] build_knf: Var("zi2")
// [Knf] build_knf: Var("it")
// [Knf] build_knf: Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double))
// [Knf] build_knf: Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double))
// [Knf] build_knf: Prim(Double(2), Var("zr"), Mul, kind=Some(Double))
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: Var("c_im")
// [Knf] build_knf: Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double))
// [Knf] build_knf: Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double))
// [Knf] build_knf: Var("zr2")
// [Knf] build_knf: Var("zi2")
// [Knf] build_knf: Var("c_re")
// [Knf] build_knf: App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("calc_pixel")
// [Knf] build_knf: Var("new_zr")
// [Knf] build_knf: Var("new_zi")
// [Knf] build_knf: Prim(Var("it"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("it")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))))
// [Knf] build_knf: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: If(LE(Int(48), Var("i")), Int(48), Var("i"))
// [Knf] build_knf: Int(48)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(48)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))))
// [Knf] build_knf: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])
// [Knf] build_knf: Var("main_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Var("y"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))
// [Knf] build_knf: Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double))
// [Knf] build_knf: Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double))
// [Knf] build_knf: Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double))
// [Knf] build_knf: Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double))
// [Knf] build_knf: Double(3)
// [Knf] build_knf: App(Var("float_of_int"), [Var("x")])
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("float_of_int"), [Var("w")])
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Double(1.5)
// [Knf] build_knf: Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))
// [Knf] build_knf: Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double))
// [Knf] build_knf: Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double))
// [Knf] build_knf: Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double))
// [Knf] build_knf: Double(3)
// [Knf] build_knf: App(Var("float_of_int"), [Var("y")])
// [Knf] build_knf: Var("y")
// [Knf] build_knf: App(Var("float_of_int"), [Var("h")])
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Double(1.5)
// [Knf] build_knf: Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))
// [Knf] build_knf: App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)])
// [Knf] build_knf: Var("calc_pixel")
// [Knf] build_knf: Var("cr")
// [Knf] build_knf: Var("ci")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))
// [Knf] build_knf: Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")]))
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Var("y"), Var("w"), Mul, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("clamp"), [Var("res")])
// [Knf] build_knf: Var("clamp")
// [Knf] build_knf: Var("res")
// [Knf] build_knf: App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])
// [Knf] build_knf: Var("main_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))
// [Knf] build_knf: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]))
// [Knf] build_knf: App(Var("print_char"), [Int(10)])
// [Knf] build_knf: Int(10)
// [Knf] build_knf: App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])
// [Knf] build_knf: Var("print_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Var("y"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))
// [Knf] build_knf: App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))])
// [Knf] build_knf: Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))
// [Knf] build_knf: Int(48)
// [Knf] build_knf: Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Var("y"), Var("w"), Mul, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])
// [Knf] build_knf: Var("print_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))
// [Knf] build_knf: App(Var("read_int"), [])
// [Knf] build_knf: Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit))))
// [Knf] build_knf: Prim(Var("h"), Int(2), Mul, kind=Some(Int))
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))
// [Knf] build_knf: Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0))
// [Knf] build_knf: Prim(Var("w"), Var("h"), Mul, kind=Some(Int))
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit))
// [Knf] build_knf: App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")])
// [Knf] build_knf: Var("main_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)
// [Knf] build_knf: App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")])
// [Knf] build_knf: Var("print_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$limit.1_0
// [Main]   .type T$limit.1_0, @function
// [Main] # leaf true
// [Main] T$limit.1_0:
// [Main] .T$limit.1_0_0:
// [Main]   li a0, 4611686018427387904
// [Main]   fmv.d.x fa0, a0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl print_loop68l2_14
// [Main]   .type print_loop68l2_14, @function
// [Main] # leaf false
// [Main] print_loop68l2_14:
// [Main] .print_loop68l2_14_20:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   mv s2, a2
// [Main]   mv s3, a3
// [Main]   mv s4, a4
// [Main] 
// [Main] .print_loop68l2_14_0:
// [Main]   beq s3, s1, .print_loop68l2_14_1
// [Main] 
// [Main] .print_loop68l2_14_2:
// [Main]   beq s2, s0, .print_loop68l2_14_3
// [Main] 
// [Main] .print_loop68l2_14_4:
// [Main]   mul a0, s3, s0
// [Main]   add a0, a0, s2
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s4, a0
// [Main]   lw a0, 0(a0)
// [Main]   addi a0, a0, 48
// [Main]   call minimbt_print_char
// [Main]   addi s2, s2, 1
// [Main]   beq s3, s1, .print_loop68l2_14_11
// [Main] 
// [Main] .print_loop68l2_14_12:
// [Main]   beq s2, s0, .print_loop68l2_14_13
// [Main] 
// [Main] .print_loop68l2_14_14:
// [Main]   mul a0, s3, s0
// [Main]   add a0, a0, s2
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s4, a0
// [Main]   lw a0, 0(a0)
// [Main]   addi a0, a0, 48
// [Main]   call minimbt_print_char
// [Main]   addi a0, s2, 1
// [Main]   mv s2, a0
// [Main]   j .print_loop68l2_14_0
// [Main] 
// [Main] .print_loop68l2_14_1:
// [Main]   mv a0, zero
// [Main] 
// [Main] .print_loop68l2_14_18:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main] .print_loop68l2_14_3:
// [Main]   li a0, 10
// [Main]   call minimbt_print_char
// [Main]   addi s3, s3, 1
// [Main]   beq s3, s1, .print_loop68l2_14_5
// [Main] 
// [Main] .print_loop68l2_14_6:
// [Main]   beq zero, s0, .print_loop68l2_14_7
// [Main] 
// [Main] .print_loop68l2_14_8:
// [Main]   mul a0, s3, s0
// [Main]   addi a0, a0, 0
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s4, a0
// [Main]   lw a0, 0(a0)
// [Main]   addi a0, a0, 48
// [Main]   call minimbt_print_char
// [Main]   li a0, 1
// [Main]   addi a0, a0, 0
// [Main]   mv s2, a0
// [Main]   j .print_loop68l2_14_0
// [Main] 
// [Main] .print_loop68l2_14_5:
// [Main]   mv a0, zero
// [Main] 
// [Main] .print_loop68l2_14_10:
// [Main] 
// [Main] .print_loop68l2_14_17:
// [Main]   j .print_loop68l2_14_18
// [Main] 
// [Main] .print_loop68l2_14_7:
// [Main]   li a0, 10
// [Main]   call minimbt_print_char
// [Main]   addi a0, s3, 1
// [Main]   mv s2, zero
// [Main]   mv s3, a0
// [Main]   j .print_loop68l2_14_0
// [Main] 
// [Main] .print_loop68l2_14_11:
// [Main]   mv a0, zero
// [Main] 
// [Main] .print_loop68l2_14_16:
// [Main]   j .print_loop68l2_14_17
// [Main] 
// [Main] .print_loop68l2_14_13:
// [Main]   li a0, 10
// [Main]   call minimbt_print_char
// [Main]   addi a0, s3, 1
// [Main]   mv s2, zero
// [Main]   mv s3, a0
// [Main]   j .print_loop68l2_14_0
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_4_6
// [Main]   .type T$_4_6, @function
// [Main] # leaf true
// [Main] T$_4_6:
// [Main] .T$_4_6_0:
// [Main]   li a0, 4593527504729830064
// [Main]   fmv.d.x fa0, a0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main94l3_15
// [Main]   .type main94l3_15, @function
// [Main] # leaf false
// [Main] main94l3_15:
// [Main] .main94l3_15_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   fmv.d fa0, fa1
// [Main]   fmv.d fa0, fa2
// [Main]   call minimbt_read_int
// [Main]   mv s2, a0
// [Main]   li a0, 2
// [Main]   mul s0, s2, a0
// [Main]   mul a0, s0, s2
// [Main]   slliw a1, a0, 2
// [Main]   sub s1, s11, a1
// [Main]   andi s11, s1, -8
// [Main]   mv a1, a0
// [Main]   fld fa0, c_im.6, t5
// [Main]   fld fa1, c_re.5, t5
// [Main]   lw a5, iter.3
// [Main]   fld fa2, limit_sq.2, t5
// [Main]   mv a0, s0
// [Main]   mv a1, s2
// [Main]   mv a2, zero
// [Main]   mv a3, zero
// [Main]   mv a4, s1
// [Main]   call main_loop30l1_13
// [Main]   beq zero, s2, .main94l3_15_1
// [Main] 
// [Main] .main94l3_15_2:
// [Main]   beq zero, s0, .main94l3_15_3
// [Main] 
// [Main] .main94l3_15_4:
// [Main]   mul a0, zero, s0
// [Main]   addi a0, a0, 0
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s1, a0
// [Main]   lw a0, 0(a0)
// [Main]   addi a0, a0, 48
// [Main]   call minimbt_print_char
// [Main]   li a0, 1
// [Main]   addi a2, a0, 0
// [Main]   mv a0, s0
// [Main]   mv a1, s2
// [Main]   mv a3, zero
// [Main]   mv a4, s1
// [Main]   call print_loop68l2_14
// [Main] 
// [Main] .main94l3_15_5:
// [Main] 
// [Main] .main94l3_15_6:
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .main94l3_15_1:
// [Main]   mv a0, zero
// [Main]   j .main94l3_15_6
// [Main] 
// [Main] .main94l3_15_3:
// [Main]   li a0, 10
// [Main]   call minimbt_print_char
// [Main]   li a0, 1
// [Main]   addi a3, a0, 0
// [Main]   mv a0, s0
// [Main]   mv a1, s2
// [Main]   mv a2, zero
// [Main]   mv a4, s1
// [Main]   call print_loop68l2_14
// [Main]   j .main94l3_15_5
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$c_im.6_10
// [Main]   .type T$c_im.6_10, @function
// [Main] # leaf true
// [Main] T$c_im.6_10:
// [Main] .T$c_im.6_10_0:
// [Main]   li a0, 4604885582990058455
// [Main]   fmv.d.x fa0, a0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main_loop30l1_13
// [Main]   .type main_loop30l1_13, @function
// [Main] # leaf false
// [Main] main_loop30l1_13:
// [Main] .main_loop30l1_13_20:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   mv s0, a0
// [Main]   mv s3, a1
// [Main]   mv s2, a2
// [Main]   mv s1, a3
// [Main]   mv s4, a4
// [Main]   mv a0, a5
// [Main] 
// [Main] .main_loop30l1_13_0:
// [Main]   beq s1, s3, .main_loop30l1_13_1
// [Main] 
// [Main] .main_loop30l1_13_2:
// [Main]   beq s2, s0, .main_loop30l1_13_3
// [Main] 
// [Main] .main_loop30l1_13_4:
// [Main]   fcvt.d.w fa0, s2
// [Main]   li a0, 4613937818241073152
// [Main]   fmv.d.x fa1, a0
// [Main]   fmul.d fa0, fa1, fa0
// [Main]   fcvt.d.w fa1, s0
// [Main]   fdiv.d fa0, fa0, fa1
// [Main]   li a0, 4609434218613702656
// [Main]   fmv.d.x fa1, a0
// [Main]   fsub.d fa0, fa0, fa1
// [Main]   fneg.d fa0, fa0
// [Main]   fcvt.d.w fa1, s1
// [Main]   li a0, 4613937818241073152
// [Main]   fmv.d.x fa2, a0
// [Main]   fmul.d fa1, fa2, fa1
// [Main]   fcvt.d.w fa2, s3
// [Main]   fdiv.d fa1, fa1, fa2
// [Main]   li a0, 4609434218613702656
// [Main]   fmv.d.x fa2, a0
// [Main]   fsub.d fa1, fa1, fa2
// [Main]   fmul.d fa2, fa0, fa0
// [Main]   fmul.d fa3, fa1, fa1
// [Main]   lw a0, iter.3
// [Main]   beq zero, a0, .main_loop30l1_13_5
// [Main] 
// [Main] .main_loop30l1_13_6:
// [Main]   fadd.d fa4, fa2, fa3
// [Main]   fld fa5, limit_sq.2, t5
// [Main]   fle.d a0, fa5, fa4
// [Main]   bne a0, zero, .main_loop30l1_13_7
// [Main] 
// [Main] .main_loop30l1_13_8:
// [Main]   li a0, 4611686018427387904
// [Main]   fmv.d.x fa4, a0
// [Main]   fmul.d fa0, fa4, fa0
// [Main]   fld fa4, c_im.6, t5
// [Main]   fmadd.d fa1, fa0, fa1, fa4
// [Main]   fsub.d fa0, fa2, fa3
// [Main]   fld fa3, c_re.5, t5
// [Main]   fadd.d fa0, fa0, fa3
// [Main]   li a0, 1
// [Main]   addi a0, a0, 0
// [Main]   lw a1, iter.3
// [Main]   fld fa5, limit_sq.2, t5
// [Main]   fmv.d fa2, fa4
// [Main]   fmv.d fa4, fa5
// [Main]   call calc_pixel7l0_12
// [Main] 
// [Main] .main_loop30l1_13_9:
// [Main]   mv a2, a0
// [Main] 
// [Main] .main_loop30l1_13_10:
// [Main]   mul a0, s1, s0
// [Main]   add a1, a0, s2
// [Main]   bge zero, a2, .main_loop30l1_13_11
// [Main] 
// [Main] .main_loop30l1_13_12:
// [Main]   li a0, 48
// [Main]   blt a2, a0, .main_loop30l1_13_14
// [Main] 
// [Main] .main_loop30l1_13_13:
// [Main]   li a0, 48
// [Main] 
// [Main] .main_loop30l1_13_15:
// [Main] 
// [Main] .main_loop30l1_13_16:
// [Main]   slliw a1, a1, 2
// [Main]   add a1, s4, a1
// [Main]   sw a0, 0(a1)
// [Main]   addi a1, s2, 1
// [Main]   fld fa0, c_im.6, t5
// [Main]   fld fa1, c_re.5, t5
// [Main]   lw a0, iter.3
// [Main]   fld fa2, limit_sq.2, t5
// [Main]   mv s2, a1
// [Main]   j .main_loop30l1_13_0
// [Main] 
// [Main] .main_loop30l1_13_1:
// [Main]   mv a0, zero
// [Main] 
// [Main] .main_loop30l1_13_18:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main] .main_loop30l1_13_3:
// [Main]   addi a1, s1, 1
// [Main]   fld fa0, c_im.6, t5
// [Main]   fld fa1, c_re.5, t5
// [Main]   lw a0, iter.3
// [Main]   fld fa2, limit_sq.2, t5
// [Main]   mv s2, zero
// [Main]   mv s1, a1
// [Main]   j .main_loop30l1_13_0
// [Main] 
// [Main] .main_loop30l1_13_5:
// [Main]   lw a0, iter.3
// [Main]   mv a2, a0
// [Main]   j .main_loop30l1_13_10
// [Main] 
// [Main] .main_loop30l1_13_7:
// [Main]   mv a0, zero
// [Main]   j .main_loop30l1_13_9
// [Main] 
// [Main] .main_loop30l1_13_11:
// [Main]   mv a0, zero
// [Main]   j .main_loop30l1_13_16
// [Main] 
// [Main] .main_loop30l1_13_14:
// [Main]   mv a0, a2
// [Main]   j .main_loop30l1_13_15
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$c_re.5_8
// [Main]   .type T$c_re.5_8, @function
// [Main] # leaf true
// [Main] T$c_re.5_8:
// [Main] .T$c_re.5_8_0:
// [Main]   fld fa0, _4, t5
// [Main]   fneg.d fa0, fa0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_20
// [Main]   .type T$start_20, @function
// [Main] # leaf false
// [Main] T$start_20:
// [Main] .T$start_20_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   fld fa0, c_im.6, t5
// [Main]   fld fa1, c_re.5, t5
// [Main]   lw a0, iter.3
// [Main]   fld fa2, limit_sq.2, t5
// [Main]   call main94l3_15
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl calc_pixel7l0_12
// [Main]   .type calc_pixel7l0_12, @function
// [Main] # leaf true
// [Main] calc_pixel7l0_12:
// [Main] .calc_pixel7l0_12_14:
// [Main]   fmv.d fa6, fa0
// [Main]   fmv.d fa0, fa1
// [Main]   fmv.d fa5, fa2
// [Main]   fmv.d fa2, fa3
// [Main]   fmv.d fa1, fa6
// [Main]   fmv.d fa3, fa5
// [Main] 
// [Main] .calc_pixel7l0_12_0:
// [Main]   fmul.d fa2, fa1, fa1
// [Main]   fmul.d fa3, fa0, fa0
// [Main]   lw a1, iter.3
// [Main]   beq a0, a1, .calc_pixel7l0_12_1
// [Main] 
// [Main] .calc_pixel7l0_12_2:
// [Main]   fadd.d fa4, fa2, fa3
// [Main]   fld fa5, limit_sq.2, t5
// [Main]   fle.d a1, fa5, fa4
// [Main]   bne a1, zero, .calc_pixel7l0_12_3
// [Main] 
// [Main] .calc_pixel7l0_12_4:
// [Main]   li a1, 4611686018427387904
// [Main]   fmv.d.x fa4, a1
// [Main]   fmul.d fa1, fa4, fa1
// [Main]   fld fa4, c_im.6, t5
// [Main]   fmadd.d fa4, fa1, fa0, fa4
// [Main]   fsub.d fa0, fa2, fa3
// [Main]   fld fa1, c_re.5, t5
// [Main]   fadd.d fa3, fa0, fa1
// [Main]   addi a0, a0, 1
// [Main]   fmul.d fa2, fa3, fa3
// [Main]   fmul.d fa1, fa4, fa4
// [Main]   lw a1, iter.3
// [Main]   beq a0, a1, .calc_pixel7l0_12_5
// [Main] 
// [Main] .calc_pixel7l0_12_6:
// [Main]   fadd.d fa0, fa2, fa1
// [Main]   fld fa5, limit_sq.2, t5
// [Main]   fle.d a1, fa5, fa0
// [Main]   bne a1, zero, .calc_pixel7l0_12_7
// [Main] 
// [Main] .calc_pixel7l0_12_8:
// [Main]   li a1, 4611686018427387904
// [Main]   fmv.d.x fa0, a1
// [Main]   fmul.d fa0, fa0, fa3
// [Main]   fld fa3, c_im.6, t5
// [Main]   fmadd.d fa0, fa0, fa4, fa3
// [Main]   fsub.d fa1, fa2, fa1
// [Main]   fld fa2, c_re.5, t5
// [Main]   fadd.d fa1, fa1, fa2
// [Main]   addi a0, a0, 1
// [Main]   lw a1, iter.3
// [Main]   fld fa4, limit_sq.2, t5
// [Main]   j .calc_pixel7l0_12_0
// [Main] 
// [Main] .calc_pixel7l0_12_1:
// [Main]   lw a0, iter.3
// [Main] 
// [Main] .calc_pixel7l0_12_12:
// [Main]   ret
// [Main] 
// [Main] .calc_pixel7l0_12_3:
// [Main] 
// [Main] .calc_pixel7l0_12_11:
// [Main]   j .calc_pixel7l0_12_12
// [Main] 
// [Main] .calc_pixel7l0_12_5:
// [Main]   lw a0, iter.3
// [Main] 
// [Main] .calc_pixel7l0_12_10:
// [Main]   j .calc_pixel7l0_12_11
// [Main] 
// [Main] .calc_pixel7l0_12_7:
// [Main] 
// [Main] .calc_pixel7l0_12_9:
// [Main]   j .calc_pixel7l0_12_10
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$iter.3_4
// [Main]   .type T$iter.3_4, @function
// [Main] # leaf true
// [Main] T$iter.3_4:
// [Main] .T$iter.3_4_0:
// [Main]   li a0, 300
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$limit_sq.2_2
// [Main]   .type T$limit_sq.2_2, @function
// [Main] # leaf true
// [Main] T$limit_sq.2_2:
// [Main] .T$limit_sq.2_2_0:
// [Main]   fld fa0, limit.1, t5
// [Main]   fmul.d fa0, fa0, fa0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$limit.1_0
// [Main]   la t5, limit.1
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$limit_sq.2_2
// [Main]   la t5, limit_sq.2
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$iter.3_4
// [Main]   la t5, iter.3
// [Main]   sw a0, 0(t5)
// [Main]   call T$_4_6
// [Main]   la t5, _4
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$c_re.5_8
// [Main]   la t5, c_re.5
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$c_im.6_10
// [Main]   la t5, c_im.6
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$start_20
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl iter.3
// [Main]   .type iter.3, @object
// [Main] iter.3:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl c_im.6
// [Main]   .type c_im.6, @object
// [Main] c_im.6:
// [Main]   .zero 8
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _4
// [Main]   .type _4, @object
// [Main] _4:
// [Main]   .zero 8
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl limit_sq.2
// [Main]   .type limit_sq.2, @object
// [Main] limit_sq.2:
// [Main]   .zero 8
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl limit.1
// [Main]   .type limit.1, @object
// [Main] limit.1:
// [Main]   .zero 8
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl c_re.5
// [Main]   .type c_re.5, @object
// [Main] c_re.5:
// [Main]   .zero 8
// [Main] 
// [Wasm] Lowering function T$_4_6
// [Wasm] Lowering control Return(args=[Double(val=0.123)])
// [Wasm] Lowered function T$_4_6 to wasm
// [Wasm] Lowering function calc_pixel7l0_12
// [Wasm] Lowering control Return(args=[BlockParam(bref=b12, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b12, bpref=$b.0) -> $b12.$b.0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b12, args=[Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b12, bpref=$b.0) -> $b12.$b.0
// [Wasm] Lowering control Jump(target=b12, args=[BlockParam(bref=b11, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Get Local name BlockParam(bref=b12, bpref=$b.0) -> $b12.$b.0
// [Wasm] Lowering control Jump(target=b11, args=[BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Lowering control Jump(target=b11, args=[BlockParam(bref=b10, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering control Jump(target=b10, args=[Insn(iref=%20)])
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Lowering control Jump(target=b10, args=[BlockParam(bref=b9, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Get Local name BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Lowering control Jump(target=b9, args=[Insn(iref=%15)])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=2), Insn(iref=%14)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%24), Insn(iref=%11)])
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::5)
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%25), Insn(iref=%26)])
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Insn(iref=%16), Insn(iref=%17)])
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::4)
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%28), Insn(iref=%29)])
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%15), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::1)
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%30), Insn(iref=%27), Insn(iref=%31), Insn(iref=%26), Insn(iref=%29), Insn(iref=%34), Insn(iref=%35)])
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%16), Insn(iref=%17)])
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::1)
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%22), Insn(iref=%21)])
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering control Branch(cond=Insn(iref=%23), t=b7, t_args=[], f=b8, f_args=[])
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=2), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%8), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::5)
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%9), Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::4)
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%12), Insn(iref=%13)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%14), Insn(iref=%14)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%11), Insn(iref=%11)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%15), Insn(iref=%18)])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering control Branch(cond=Insn(iref=%19), t=b5, t_args=[], f=b6, f_args=[])
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::1)
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%6), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Branch(cond=Insn(iref=%7), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.2), Insn(iref=%2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b13, args=[FnParam(fref=f12, fpref=$f.0), FnParam(fref=f12, fpref=$f.1), FnParam(fref=f12, fpref=$f.2), FnParam(fref=f12, fpref=$f.3), FnParam(fref=f12, fpref=$f.4), FnParam(fref=f12, fpref=$f.5), FnParam(fref=f12, fpref=$f.6)])
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.6) -> $$f.6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.6) -> $$f.6
// [Wasm] Local BlockParam(bref=b12, bpref=$b.0) -> $b12.$b.0
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Local BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Local Insn(iref=%27) -> $%27
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local Insn(iref=%25) -> $%25
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Local Insn(iref=%31) -> $%31
// [Wasm] Local Insn(iref=%35) -> $%35
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local Insn(iref=%24) -> $%24
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local Insn(iref=%29) -> $%29
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Insn(iref=%30) -> $%30
// [Wasm] Local Insn(iref=%34) -> $%34
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function calc_pixel7l0_12 to wasm
// [Wasm] Lowering function T$iter.3_4
// [Wasm] Lowering control Return(args=[Int32(val=300)])
// [Wasm] Lowered function T$iter.3_4 to wasm
// [Wasm] Lowering function T$c_re.5_8
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::3)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Double, op=Neg, args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Return(args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function T$c_re.5_8 to wasm
// [Wasm] Lowering function T$limit.1_0
// [Wasm] Lowering control Return(args=[Double(val=2)])
// [Wasm] Lowered function T$limit.1_0 to wasm
// [Wasm] Lowering function main_loop30l1_13
// [Wasm] Lowering control Return(args=[BlockParam(bref=b18, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b18, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.3), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::5)
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::4)
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::1)
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Int32(val=0), Insn(iref=%2), BlockParam(bref=b0, bpref=$b.4), Insn(iref=%3), Insn(iref=%4), Insn(iref=%5), Insn(iref=%6)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.7) -> $b0.$b.7
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.8) -> $b0.$b.8
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), offset=Insn(iref=%41), width=@32), val=BlockParam(bref=b16, bpref=$b.0))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.0) -> $b16.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::5)
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::4)
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::1)
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%45), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), Insn(iref=%46), Insn(iref=%47), Insn(iref=%48), Insn(iref=%49)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.7) -> $b0.$b.7
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.8) -> $b0.$b.8
// [Wasm] Lowering control Jump(target=b16, args=[Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.0) -> $b16.$b.0
// [Wasm] Lowering control Jump(target=b16, args=[BlockParam(bref=b15, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b15, bpref=$b.0) -> $b15.$b.0
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.0) -> $b16.$b.0
// [Wasm] Lowering control Jump(target=b15, args=[Int32(val=48)])
// [Wasm] Get Local name BlockParam(bref=b15, bpref=$b.0) -> $b15.$b.0
// [Wasm] Lowering control Jump(target=b15, args=[BlockParam(bref=b10, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Get Local name BlockParam(bref=b15, bpref=$b.0) -> $b15.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=48), BlockParam(bref=b10, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Lowering control Branch(cond=Insn(iref=%43), t=b13, t_args=[], f=b14, f_args=[])
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%40), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b10, bpref=$b.0), Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering control Branch(cond=Insn(iref=%42), t=b11, t_args=[], f=b12, f_args=[])
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering control Jump(target=b10, args=[Insn(iref=%23)])
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Lowering control Jump(target=b10, args=[BlockParam(bref=b9, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Get Local name BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Lowering control Jump(target=b9, args=[Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=2), Insn(iref=%13)])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%27), Insn(iref=%18)])
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::5)
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%28), Insn(iref=%29)])
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Insn(iref=%19), Insn(iref=%20)])
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::4)
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%31), Insn(iref=%32)])
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Get Local name Insn(iref=%33) -> $%33
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Int32(val=0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::1)
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering insn Call(ty=Int32, f=f12, args=[Insn(iref=%33), Insn(iref=%30), Insn(iref=%34), Insn(iref=%29), Insn(iref=%32), Insn(iref=%37), Insn(iref=%38)])
// [Wasm] Get Local name Insn(iref=%33) -> $%33
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Get Local name Insn(iref=%39) -> $%39
// [Wasm] Lowering control Jump(target=b9, args=[Insn(iref=%39)])
// [Wasm] Get Local name Insn(iref=%39) -> $%39
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%19), Insn(iref=%20)])
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::1)
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%25), Insn(iref=%24)])
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering control Branch(cond=Insn(iref=%26), t=b7, t_args=[], f=b8, f_args=[])
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=3), Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Double, op=Div, args=[Insn(iref=%9), Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Insn(iref=%11), Double(val=1.5)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Op(ty=Double, op=Neg, args=[Insn(iref=%12)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[BlockParam(bref=b0, bpref=$b.3)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=3), Insn(iref=%14)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Op(ty=Double, op=Div, args=[Insn(iref=%15), Insn(iref=%16)])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Insn(iref=%17), Double(val=1.5)])
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%13), Insn(iref=%13)])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%18), Insn(iref=%18)])
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Int32(val=0), Insn(iref=%21)])
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering control Branch(cond=Insn(iref=%22), t=b5, t_args=[], f=b6, f_args=[])
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b19, args=[FnParam(fref=f13, fpref=$f.0), FnParam(fref=f13, fpref=$f.1), FnParam(fref=f13, fpref=$f.2), FnParam(fref=f13, fpref=$f.3), FnParam(fref=f13, fpref=$f.4), FnParam(fref=f13, fpref=$f.5), FnParam(fref=f13, fpref=$f.6), FnParam(fref=f13, fpref=$f.7), FnParam(fref=f13, fpref=$f.8)])
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.6) -> $$f.6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.7) -> $$f.7
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.7) -> $b0.$b.7
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.8) -> $$f.8
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.8) -> $b0.$b.8
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.6) -> $$f.6
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.7) -> $$f.7
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.8) -> $$f.8
// [Wasm] Local BlockParam(bref=b0, bpref=$b.7) -> $b0.$b.7
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local Insn(iref=%41) -> $%41
// [Wasm] Local Insn(iref=%33) -> $%33
// [Wasm] Local BlockParam(bref=b15, bpref=$b.0) -> $b15.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Local BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local Insn(iref=%27) -> $%27
// [Wasm] Local Insn(iref=%25) -> $%25
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%39) -> $%39
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%49) -> $%49
// [Wasm] Local Insn(iref=%42) -> $%42
// [Wasm] Local Insn(iref=%32) -> $%32
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.8) -> $b0.$b.8
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Local Insn(iref=%31) -> $%31
// [Wasm] Local BlockParam(bref=b16, bpref=$b.0) -> $b16.$b.0
// [Wasm] Local Insn(iref=%46) -> $%46
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local Insn(iref=%38) -> $%38
// [Wasm] Local Insn(iref=%24) -> $%24
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%37) -> $%37
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local Insn(iref=%45) -> $%45
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%29) -> $%29
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%47) -> $%47
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%48) -> $%48
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Insn(iref=%43) -> $%43
// [Wasm] Local Insn(iref=%30) -> $%30
// [Wasm] Local Insn(iref=%34) -> $%34
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local Insn(iref=%40) -> $%40
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function main_loop30l1_13 to wasm
// [Wasm] Lowering function main94l3_15
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Lowering control Jump(target=b6, args=[Unit])
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Int32(val=10)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Int32(val=0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Call(ty=Unit, f=f14, args=[Insn(iref=%1), Insn(iref=%0), Int32(val=0), Insn(iref=%12), Mem(fref=f15, mref=m0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Mem(fref=f15, mref=m0) -> $f15.m0
// [Wasm] Lowering control Jump(target=b5, args=[Insn(iref=%13)])
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Int32(val=0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%14), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=Mem(fref=f15, mref=m0), offset=Insn(iref=%15), width=@32))
// [Wasm] Get Local name Mem(fref=f15, mref=m0) -> $f15.m0
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Int32(val=48), Insn(iref=%16)])
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Insn(iref=%17)])
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Int32(val=0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Call(ty=Unit, f=f14, args=[Insn(iref=%1), Insn(iref=%0), Insn(iref=%19), Int32(val=0), Mem(fref=f15, mref=m0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name Mem(fref=f15, mref=m0) -> $f15.m0
// [Wasm] Lowering control Jump(target=b5, args=[Insn(iref=%20)])
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Int32(val=0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Branch(cond=Insn(iref=%10), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_int", args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%0), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%1), Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Zero])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Mem(fref=f15, mref=m0) -> $f15.m0
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::5)
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::4)
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::1)
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Call(ty=Unit, f=f13, args=[Insn(iref=%1), Insn(iref=%0), Int32(val=0), Int32(val=0), Mem(fref=f15, mref=m0), Insn(iref=%4), Insn(iref=%5), Insn(iref=%6), Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Mem(fref=f15, mref=m0) -> $f15.m0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Int32(val=0), Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering control Branch(cond=Insn(iref=%9), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name FnParam(fref=f15, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f15, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f15, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f15, fpref=$f.3) -> $$f.3
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Mem(fref=f15, mref=m0) -> $f15.m0
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function main94l3_15 to wasm
// [Wasm] Lowering function T$c_im.6_10
// [Wasm] Lowering control Return(args=[Double(val=0.745)])
// [Wasm] Lowered function T$c_im.6_10 to wasm
// [Wasm] Lowering function T$limit_sq.2_2
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::0)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%0), Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function T$limit_sq.2_2 to wasm
// [Wasm] Lowering function print_loop68l2_14
// [Wasm] Lowering control Return(args=[BlockParam(bref=b18, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b18, args=[Unit])
// [Wasm] Lowering control Jump(target=b18, args=[BlockParam(bref=b17, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b17, args=[BlockParam(bref=b10, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b10, args=[Unit])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Int32(val=10)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%3), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Int32(val=0), Insn(iref=%7), BlockParam(bref=b0, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%3), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%9), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), offset=Insn(iref=%10), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Int32(val=48), Insn(iref=%11)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Insn(iref=%12)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Int32(val=0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%14), Insn(iref=%3), BlockParam(bref=b0, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Branch(cond=Insn(iref=%5), t=b7, t_args=[], f=b8, f_args=[])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Int32(val=10)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.3), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%3), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Branch(cond=Insn(iref=%4), t=b5, t_args=[], f=b6, f_args=[])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b17, args=[BlockParam(bref=b16, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b16, args=[Unit])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Int32(val=10)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.3), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Int32(val=0), Insn(iref=%25), BlockParam(bref=b0, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%27), Insn(iref=%21)])
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), offset=Insn(iref=%28), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Int32(val=48), Insn(iref=%29)])
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Insn(iref=%30)])
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%21), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%32), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%21), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering control Branch(cond=Insn(iref=%23), t=b13, t_args=[], f=b14, f_args=[])
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%16), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), offset=Insn(iref=%17), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Int32(val=48), Insn(iref=%18)])
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Insn(iref=%19)])
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering control Branch(cond=Insn(iref=%22), t=b11, t_args=[], f=b12, f_args=[])
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b19, args=[FnParam(fref=f14, fpref=$f.0), FnParam(fref=f14, fpref=$f.1), FnParam(fref=f14, fpref=$f.2), FnParam(fref=f14, fpref=$f.3), FnParam(fref=f14, fpref=$f.4)])
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.4) -> $$f.4
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local Insn(iref=%27) -> $%27
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local Insn(iref=%25) -> $%25
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%29) -> $%29
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%32) -> $%32
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%30) -> $%30
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function print_loop68l2_14 to wasm
// [Wasm] Lowering function T$start_20
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::5)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::4)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::1)
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Call(ty=Unit, f=f15, args=[Insn(iref=%0), Insn(iref=%1), Insn(iref=%2), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Return(args=[Insn(iref=%4)])
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function T$start_20 to wasm
// [KnfOpt] freq: {calc_pixel7: Many(2), clamp25: Once, main_loop30: Many(3), print_loop68: Many(3), main94: Once}
// [KnfOpt] Inline threshold 2 27
// [KnfOpt] Inline decision accepted
// [KnfOpt] Knf inline Some(calc_pixel7)
// [KnfOpt] Inline threshold 2 27
// [KnfOpt] Inline decision accepted
// [KnfOpt] Knf inline Some(calc_pixel7)
// [KnfOpt] Knf inline Some(clamp25)
// [KnfOpt] Inline threshold 3 31
// [KnfOpt] Inline decision accepted
// [KnfOpt] Knf inline Some(print_loop68)
// [KnfOpt] Inline threshold 3 31
// [KnfOpt] Inline decision accepted
// [KnfOpt] Knf inline Some(print_loop68)
// [KnfOpt] Inline threshold 3 31
// [KnfOpt] Inline decision accepted
// [KnfOpt] Knf inline Some(print_loop68)
// [KnfOpt] Numbers of let rec: 4 4 0
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %36: Call(ty=Int32, f=f12, args=[Insn(iref=%30), Insn(iref=%27), Insn(iref=%31), Insn(iref=%32), Insn(iref=%33), Insn(iref=%34), Insn(iref=%35)])
// [CoreOpt] eliminated tail rec call %50: Call(ty=Unit, f=f13, args=[FnParam(fref=f13, fpref=$f.0), FnParam(fref=f13, fpref=$f.1), Insn(iref=%45), FnParam(fref=f13, fpref=$f.3), FnParam(fref=f13, fpref=$f.4), Insn(iref=%46), Insn(iref=%47), Insn(iref=%48), Insn(iref=%49)])
// [CoreOpt] eliminated tail rec call %7: Call(ty=Unit, f=f13, args=[FnParam(fref=f13, fpref=$f.0), FnParam(fref=f13, fpref=$f.1), Int32(val=0), Insn(iref=%2), FnParam(fref=f13, fpref=$f.4), Insn(iref=%3), Insn(iref=%4), Insn(iref=%5), Insn(iref=%6)])
// [CoreOpt] eliminated tail rec call %15: Call(ty=Unit, f=f14, args=[FnParam(fref=f14, fpref=$f.0), FnParam(fref=f14, fpref=$f.1), Insn(iref=%14), Insn(iref=%3), FnParam(fref=f14, fpref=$f.4)])
// [CoreOpt] eliminated tail rec call %8: Call(ty=Unit, f=f14, args=[FnParam(fref=f14, fpref=$f.0), FnParam(fref=f14, fpref=$f.1), Int32(val=0), Insn(iref=%7), FnParam(fref=f14, fpref=$f.4)])
// [CoreOpt] eliminated tail rec call %26: Call(ty=Unit, f=f14, args=[FnParam(fref=f14, fpref=$f.0), FnParam(fref=f14, fpref=$f.1), Int32(val=0), Insn(iref=%25), FnParam(fref=f14, fpref=$f.4)])
// [CoreOpt] eliminated tail rec call %33: Call(ty=Unit, f=f14, args=[FnParam(fref=f14, fpref=$f.0), FnParam(fref=f14, fpref=$f.1), Insn(iref=%32), FnParam(fref=f14, fpref=$f.3), FnParam(fref=f14, fpref=$f.4)])
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f12: Once, f4: Once, f8: Once, f0: Once, f13: Once, f15: Once, f10: Once, f2: Once, f14: Multiple, f20: Once})
// [CoreOpt] LVN subst Insn(iref=%32) with Insn(iref=%26)
// [CoreOpt] LVN subst Insn(iref=%33) with Insn(iref=%29)
// [CoreOpt] LVN subst Insn(iref=%35) with Insn(iref=%29)
// [CoreOpt] LVN subst Insn(iref=%36) with Insn(iref=%32)
// [CoreOpt] LVN subst Insn(iref=%1) with Insn(iref=%0)
