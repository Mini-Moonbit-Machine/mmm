// [Asm] pre_assigned_registers: Self(fref=f6) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$_4_6"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   comment = "0:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$_4_6"];
// [Asm]   r0 [label="fv3 ← fa0", color=green];
// [Asm]   r1 [label="fa0", color=blue];
// [Asm]   comment = "0:fv3-> 1:fa0"
// [Asm]   comment = "fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 4593527504729830064 ->   li a0, 4593527504729830064
// [Asm] subst   fmv.d.x fv3, v2 ->   fmv.d.x fa0, a0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v19, FnParam(fref=f12, fpref=$f.2) -> v4, Insn(iref=%9) -> fv13, Insn(iref=%16) -> v20, Self(fref=f12) -> v0, Insn(iref=%8) -> fv12, Insn(iref=%10) -> fv14, Insn(iref=%14) -> fv18, Insn(iref=%5) -> fv9, Insn(iref=%0) -> fv5, Insn(iref=%4) -> v22, FnParam(fref=f12, fpref=$f.1) -> fv3, Insn(iref=%3) -> v8, Insn(iref=%13) -> fv17, Insn(iref=%7) -> v11, FnParam(fref=f12, fpref=$f.0) -> fv2, BlockParam(bref=b5, bpref=$b.0) -> v21, BlockParam(bref=b6, bpref=$b.0) -> v23, Insn(iref=%2) -> v7, Insn(iref=%1) -> fv6, Insn(iref=%11) -> fv15, Insn(iref=%6) -> fv10, Insn(iref=%12) -> fv16
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%8), FnParam(fref=f12, fpref=$f.1)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[FnParam(fref=f12, fpref=$f.2), Insn(iref=%2)])
// [Asm] skipping Op(ty=Double, op=Mul, args=[FnParam(fref=f12, fpref=$f.1), FnParam(fref=f12, fpref=$f.1)])
// [Asm] defs: [v23]
// [Asm] live_set: [v23]
// [Asm] move_origin: [v21]
// [Asm] defined: v23 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v21]
// [Asm] move_origin: [v4]
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v21]
// [Asm] move_origin: []
// [Asm] defs: [v32]
// [Asm] live_set: [fv5, v4, v32, fv2, fv3]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: [fv33]
// [Asm] live_set: [fv5, v4, fv2, fv3, fv33]
// [Asm] move_origin: []
// [Asm] defined: fv33 is F
// [Asm] defs: [fv12]
// [Asm] live_set: [fv5, v4, fv12, fv3]
// [Asm] move_origin: []
// [Asm] defined: fv12 is F
// [Asm] defs: [fv14]
// [Asm] live_set: [fv5, v4, fv12, fv14, fv3]
// [Asm] move_origin: []
// [Asm] defined: fv14 is F
// [Asm] defs: [fv15]
// [Asm] live_set: [fv5, v4, fv15, fv3]
// [Asm] move_origin: []
// [Asm] defined: fv15 is F
// [Asm] defs: [fv16]
// [Asm] live_set: [v4, fv15, fv16]
// [Asm] move_origin: []
// [Asm] defined: fv16 is F
// [Asm] defs: [fv17]
// [Asm] live_set: [v4, fv15, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv17 is F
// [Asm] defs: [fv18]
// [Asm] live_set: [v4, fv15, fv18]
// [Asm] move_origin: []
// [Asm] defined: fv18 is F
// [Asm] defs: [v19]
// [Asm] live_set: [v19, fv15, fv18]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v19, fv15, fv18]
// [Asm] move_origin: []
// [Asm] defs: [fa0]
// [Asm] live_set: [v19, fv15, fa0]
// [Asm] move_origin: [fv18]
// [Asm] defined: fa0 is F
// [Asm] defs: [fa1]
// [Asm] live_set: [v19, fa1, fa0]
// [Asm] move_origin: [fv15]
// [Asm] defined: fa1 is F
// [Asm] defs: [a0]
// [Asm] live_set: [fa1, a0, fa0]
// [Asm] move_origin: [v19]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v20]
// [Asm] live_set: [v20]
// [Asm] move_origin: [a0]
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v20]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v21]
// [Asm] move_origin: [v20]
// [Asm] defined: v21 is X
// [Asm] defs: [fv9]
// [Asm] live_set: [fv5, fv9, fv2, zero, v4, fv3]
// [Asm] move_origin: []
// [Asm] defined: fv9 is F
// [Asm] defs: [fv10]
// [Asm] live_set: [fv5, fv9, fv10, fv2, zero, v4, fv3]
// [Asm] move_origin: []
// [Asm] defined: fv10 is F
// [Asm] defs: [v11]
// [Asm] live_set: [fv5, v11, v4, fv2, fv3, zero]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [fv5, v4, fv2, fv3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [fa0, zero, a0, fa1]
// [Asm] move_origin: []
// [Asm] defs: [fv2]
// [Asm] live_set: [fv2, zero, a0, fa1]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fv2, fv3, zero, a0]
// [Asm] move_origin: [fa1]
// [Asm] defined: fv3 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v4, fv2, fv3, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: [fv5]
// [Asm] live_set: [fv5, v4, fv2, fv3, zero]
// [Asm] move_origin: []
// [Asm] defined: fv5 is F
// [Asm] defs: [v7]
// [Asm] live_set: [fv5, v4, fv2, fv3, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [fv5, v4, fv2, fv3, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v23]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v22]
// [Asm] live_set: [v22]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v23]
// [Asm] move_origin: [v22]
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [v23]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of calc_pixel7_12"];
// [Asm]   r0 [label="v23 ← a0", color=green];
// [Asm]   r20 [label="v11 ← a0", color=green];
// [Asm]   r3 [label="v4 ← a1", color=green];
// [Asm]   r9 [label="t3", color=blue];
// [Asm]   r6 [label="t0", color=blue];
// [Asm]   r13 [label="a3", color=blue];
// [Asm]   r4 [label="v19 ← a0", color=green];
// [Asm]   r1 [label="v21 ← a0", color=green];
// [Asm]   r11 [label="a1", color=blue];
// [Asm]   r7 [label="t1", color=blue];
// [Asm]   r10 [label="t4", color=blue];
// [Asm]   r22 [label="v22 ← a0", color=green];
// [Asm]   r14 [label="a4", color=blue];
// [Asm]   r8 [label="t2", color=blue];
// [Asm]   r5 [label="a0", color=blue];
// [Asm]   r15 [label="a5", color=blue];
// [Asm]   r2 [label="v32 ← a0", color=green];
// [Asm]   r16 [label="a6", color=blue];
// [Asm]   r18 [label="v20 ← a0", color=green];
// [Asm]   r19 [label="zero", color=blue];
// [Asm]   r21 [label="v7 ← a0", color=green];
// [Asm]   r17 [label="a7", color=blue];
// [Asm]   r12 [label="a2", color=blue];
// [Asm]   r3 -- r19;
// [Asm]   r5 -- r6;
// [Asm]   r5 -- r7;
// [Asm]   r5 -- r14;
// [Asm]   r19 -- r21;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r5 -- r17;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r20;
// [Asm]   r5 -- r15;
// [Asm]   r5 -- r13;
// [Asm]   r19 -- r20;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v23-> 1:v21-> 2:v32-> 3:v4-> 19:zero-> 20:v11-> 21:v7-> 4:v19-> 5:a0-> 6:t0-> 7:t1-> 8:t2-> 9:t3-> 10:t4-> 11:a1-> 12:a2-> 13:a3-> 14:a4-> 15:a5-> 16:a6-> 17:a7-> 18:v20-> 22:v22"
// [Asm]   comment = "v23<-a0;v11<-a0;v4<-a1;v19<-a0;v21<-a0;v22<-a0;v32<-a0;v20<-a0;v7<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of calc_pixel7_12"];
// [Asm]   r0 [label="fv5 ← fa0", color=green];
// [Asm]   r20 [label="ft8", color=blue];
// [Asm]   r23 [label="fa2", color=blue];
// [Asm]   r3 [label="fv33 ← fa3", color=green];
// [Asm]   r9 [label="fv18 ← fa0", color=green];
// [Asm]   r26 [label="fa5", color=blue];
// [Asm]   r27 [label="fa6", color=blue];
// [Asm]   r6 [label="fv15 ← fa2", color=green];
// [Asm]   r13 [label="ft1", color=blue];
// [Asm]   r4 [label="fv12 ← fa2", color=green];
// [Asm]   r29 [label="fv9 ← fa3", color=green];
// [Asm]   r1 [label="fv2 ← fa2", color=green];
// [Asm]   r28 [label="fa7", color=blue];
// [Asm]   r11 [label="fa1", color=blue];
// [Asm]   r7 [label="fv16 ← fa0", color=green];
// [Asm]   r10 [label="fa0", color=blue];
// [Asm]   r22 [label="ft10", color=blue];
// [Asm]   r14 [label="ft2", color=blue];
// [Asm]   r8 [label="fv17 ← fa1", color=green];
// [Asm]   r30 [label="fv10 ← fa4", color=green];
// [Asm]   r5 [label="fv14 ← fa3", color=green];
// [Asm]   r24 [label="fa3", color=blue];
// [Asm]   r15 [label="ft3", color=blue];
// [Asm]   r25 [label="fa4", color=blue];
// [Asm]   r2 [label="fv3 ← fa1", color=green];
// [Asm]   r16 [label="ft4", color=blue];
// [Asm]   r18 [label="ft6", color=blue];
// [Asm]   r19 [label="ft7", color=blue];
// [Asm]   r17 [label="ft5", color=blue];
// [Asm]   r21 [label="ft9", color=blue];
// [Asm]   r12 [label="ft0", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r2 -- r29;
// [Asm]   r2 -- r6;
// [Asm]   r4 -- r5;
// [Asm]   r1 -- r30;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r29;
// [Asm]   r6 -- r10;
// [Asm]   r29 -- r30;
// [Asm]   r0 -- r29;
// [Asm]   r10 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r11;
// [Asm]   r2 -- r30;
// [Asm]   r0 -- r4;
// [Asm]   r1 -- r3;
// [Asm]   r7 -- r8;
// [Asm]   r0 -- r30;
// [Asm]   r2 -- r3;
// [Asm]   r6 -- r8;
// [Asm]   r0 -- r6;
// [Asm]   comment = "0:fv5-> 1:fv2-> 2:fv3-> 3:fv33-> 29:fv9-> 30:fv10-> 4:fv12-> 5:fv14-> 6:fv15-> 7:fv16-> 8:fv17-> 9:fv18-> 10:fa0-> 11:fa1-> 12:ft0-> 13:ft1-> 14:ft2-> 15:ft3-> 16:ft4-> 17:ft5-> 18:ft6-> 19:ft7-> 20:ft8-> 21:ft9-> 22:ft10-> 23:fa2-> 24:fa3-> 25:fa4-> 26:fa5-> 27:fa6-> 28:fa7"
// [Asm]   comment = "fv5<-fa0;fv33<-fa3;fv18<-fa0;fv15<-fa2;fv12<-fa2;fv9<-fa3;fv2<-fa2;fv16<-fa0;fv17<-fa1;fv10<-fa4;fv14<-fa3;fv3<-fa1;"
// [Asm] }
// [Asm] 
// [Asm] subst   mv v21, v4 ->   mv a0, a1
// [Asm] subst   j .calc_pixel7_12_5 ->   j .calc_pixel7_12_5
// [Asm] subst   li v32, 4611686018427387904 ->   li a0, 4611686018427387904
// [Asm] subst   fmv.d.x fv33, v32 ->   fmv.d.x fa3, a0
// [Asm] subst   fmul.d fv12, fv33, fv2 ->   fmul.d fa2, fa3, fa2
// [Asm] subst   fld fv14, c_im.6, t5 ->   fld fa3, c_im.6, t5
// [Asm] subst   fmadd.d fv15, fv12, fv3, fv14 ->   fmadd.d fa2, fa2, fa1, fa3
// [Asm] subst   fnmsub.d fv16, fv3, fv3, fv5 ->   fnmsub.d fa0, fa1, fa1, fa0
// [Asm] subst   fld fv17, c_re.5, t5 ->   fld fa1, c_re.5, t5
// [Asm] subst   fadd.d fv18, fv16, fv17 ->   fadd.d fa0, fa0, fa1
// [Asm] subst   addi v19, v4, 1 ->   addi a0, a1, 1
// [Asm] subst   fmv.d fa1, fv15 ->   fmv.d fa1, fa2
// [Asm] subst   call calc_pixel7_12 ->   call calc_pixel7_12
// [Asm] subst   fmadd.d fv9, fv3, fv3, fv5 ->   fmadd.d fa3, fa1, fa1, fa0
// [Asm] subst   fld fv10, limit_sq.2, t5 ->   fld fa4, limit_sq.2, t5
// [Asm] subst   fle.d v11, fv10, fv9 ->   fle.d a0, fa4, fa3
// [Asm] subst   bne v11, zero, .calc_pixel7_12_3 ->   bne a0, zero, .calc_pixel7_12_3
// [Asm] subst   fmv.d fv2, fa0 ->   fmv.d fa2, fa0
// [Asm] subst   mv v4, a0 ->   mv a1, a0
// [Asm] subst   fmul.d fv5, fv2, fv2 ->   fmul.d fa0, fa2, fa2
// [Asm] subst   lw v7, iter.3 ->   lw a0, iter.3
// [Asm] subst   beq v4, v7, .calc_pixel7_12_1 ->   beq a1, a0, .calc_pixel7_12_1
// [Asm] subst   ret ->   ret
// [Asm] subst   lw v22, iter.3 ->   lw a0, iter.3
// [Asm] subst   j .calc_pixel7_12_6 ->   j .calc_pixel7_12_6
// [Asm] pre_assigned_registers: Self(fref=f4) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$iter.34"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   comment = "0:v2-> 1:a0"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$iter.34"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 300 ->   li a0, 300
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> fv3, Self(fref=f8) -> v0, Insn(iref=%0) -> fv2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [fv2]
// [Asm] live_set: [fv2]
// [Asm] move_origin: []
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$c_re.58"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$c_re.58"];
// [Asm]   r0 [label="fv2 ← fa0", color=green];
// [Asm]   r2 [label="fa0", color=blue];
// [Asm]   r1 [label="fv3 ← fa0", color=green];
// [Asm]   comment = "0:fv2-> 1:fv3-> 2:fa0"
// [Asm]   comment = "fv2<-fa0;fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   fld fv2, _4, t5 ->   fld fa0, _4, t5
// [Asm] subst   fneg.d fv3, fv2 ->   fneg.d fa0, fa0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v7, Insn(iref=%1) -> v4, Insn(iref=%3) -> v6, Mem(fref=f16, mref=m0) -> v2, Self(fref=f16) -> v0, Insn(iref=%5) -> v8, Insn(iref=%0) -> v3, Insn(iref=%2) -> v5
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, s11]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [zero, s11, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [zero, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [zero, s11, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v4]
// [Asm] live_set: [zero, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, zero, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v5, zero, v4, v12, v3]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v2, v5, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v5, zero, v4, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, zero, v4, a1, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v2, zero, a0, v4, a1, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v2, zero, a0, v4, a2, a1, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, zero, a0, v4, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, zero, a0, v4, a1, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v2, zero, a0, v4, a2, a1, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v2, zero, a0, v4, a2, a1, a3, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v2, zero, a0, a4, v4, a2, a1, a3, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a4 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v3, v4, zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v3, zero, a0, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0, v2]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, zero, a0, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [a2, a1, a3, zero, a0, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [a2, a1, a3, zero, a0, a4]
// [Asm] move_origin: [v2]
// [Asm] defined: a4 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main94_16"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r20 [label="v12 ← a1", color=green];
// [Asm]   r23 [label="v8 ← a0", color=green];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r9 [label="a2", color=blue];
// [Asm]   r6 [label="t3", color=blue];
// [Asm]   r13 [label="a6", color=blue];
// [Asm]   r4 [label="t1", color=blue];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r11 [label="a4", color=blue];
// [Asm]   r7 [label="t4", color=blue];
// [Asm]   r10 [label="a3", color=blue];
// [Asm]   r22 [label="v7 ← a0", color=green];
// [Asm]   r14 [label="a7", color=blue];
// [Asm]   r8 [label="a1", color=blue];
// [Asm]   r5 [label="t2", color=blue];
// [Asm]   r15 [label="v3 ← s0", color=green];
// [Asm]   r2 [label="a0", color=blue];
// [Asm]   r16 [label="v15 ← a0", color=green];
// [Asm]   r18 [label="v5 ← a0", color=green];
// [Asm]   r19 [label="v11 ← a1", color=green];
// [Asm]   r21 [label="v2 ← s2", color=green];
// [Asm]   r17 [label="v4 ← s1", color=green];
// [Asm]   r12 [label="a5", color=blue];
// [Asm]   r6 -- r21;
// [Asm]   r5 -- r21;
// [Asm]   r17 -- r21;
// [Asm]   r7 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r18 -- r21;
// [Asm]   r9 -- r17;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r5;
// [Asm]   r17 -- r19;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r9;
// [Asm]   r15 -- r18;
// [Asm]   r2 -- r6;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r17 -- r22;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r8 -- r21;
// [Asm]   r9 -- r10;
// [Asm]   r18 -- r20;
// [Asm]   r11 -- r15;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r12 -- r21;
// [Asm]   r1 -- r5;
// [Asm]   r21 -- r22;
// [Asm]   r13 -- r21;
// [Asm]   r14 -- r15;
// [Asm]   r17 -- r20;
// [Asm]   r10 -- r17;
// [Asm]   r17 -- r18;
// [Asm]   r3 -- r19;
// [Asm]   r0 -- r15;
// [Asm]   r13 -- r15;
// [Asm]   r6 -- r15;
// [Asm]   r14 -- r17;
// [Asm]   r11 -- r17;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r9 -- r15;
// [Asm]   r1 -- r23;
// [Asm]   r15 -- r22;
// [Asm]   r12 -- r15;
// [Asm]   r8 -- r9;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r22;
// [Asm]   r0 -- r21;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r2 -- r11;
// [Asm]   r7 -- r17;
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r15;
// [Asm]   r18 -- r19;
// [Asm]   r15 -- r17;
// [Asm]   r2 -- r14;
// [Asm]   r15 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r8 -- r15;
// [Asm]   r7 -- r15;
// [Asm]   r14 -- r21;
// [Asm]   r10 -- r15;
// [Asm]   r10 -- r11;
// [Asm]   r13 -- r17;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r17;
// [Asm]   r12 -- r17;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r15 -- r20;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r15 -- r19;
// [Asm]   r10 -- r21;
// [Asm]   r11 -- r21;
// [Asm]   r5 -- r15;
// [Asm]   r9 -- r21;
// [Asm]   comment = "0:t0-> 1:zero-> 2:a0-> 3:s11-> 15:v3-> 17:v4-> 4:t1-> 21:v2-> 5:t2-> 6:t3-> 7:t4-> 8:a1-> 9:a2-> 10:a3-> 11:a4-> 12:a5-> 13:a6-> 14:a7-> 18:v5-> 19:v11-> 20:v12-> 22:v7-> 16:v15-> 23:v8"
// [Asm]   comment = "v12<-a1;v8<-a0;v7<-a0;v3<-s0;v15<-a0;v5<-a0;v11<-a1;v2<-s2;v4<-s1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main94_16"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call minimbt_read_int ->   call minimbt_read_int
// [Asm] subst   mv v3, a0 ->   mv s0, a0
// [Asm] subst   li v15, 2 ->   li a0, 2
// [Asm] subst   mul v4, v3, v15 ->   mul s1, s0, a0
// [Asm] subst   mul v5, v4, v3 ->   mul a0, s1, s0
// [Asm] subst   slliw v11, v5, 2 ->   slliw a1, a0, 2
// [Asm] subst   sub v12, s11, v11 ->   sub a1, s11, a1
// [Asm] subst   andi v2, v12, -8 ->   andi s2, a1, -8
// [Asm] subst   mv s11, v2 ->   mv s11, s2
// [Asm] subst   mv a1, v5 ->   mv a1, a0
// [Asm] subst   mv a0, v2 ->   mv a0, s2
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   call memseti32 ->   call memseti32
// [Asm] subst   mv a0, v4 ->   mv a0, s1
// [Asm] subst   mv a1, v3 ->   mv a1, s0
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   mv a3, zero ->   mv a3, zero
// [Asm] subst   mv a4, v2 ->   mv a4, s2
// [Asm] subst   call main_loop30_14 ->   call main_loop30_14
// [Asm] subst   mv a0, v4 ->   mv a0, s1
// [Asm] subst   mv a1, v3 ->   mv a1, s0
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   mv a3, zero ->   mv a3, zero
// [Asm] subst   mv a4, v2 ->   mv a4, s2
// [Asm] subst   call print_loop68_15 ->   call print_loop68_15
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$limit.10"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   comment = "0:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$limit.10"];
// [Asm]   r0 [label="fv3 ← fa0", color=green];
// [Asm]   r1 [label="fa0", color=blue];
// [Asm]   comment = "0:fv3-> 1:fa0"
// [Asm]   comment = "fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 4611686018427387904 ->   li a0, 4611686018427387904
// [Asm] subst   fmv.d.x fv3, v2 ->   fmv.d.x fa0, a0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f13, fpref=$f.0) -> v2, Insn(iref=%1) -> v4, Self(fref=f13) -> v0, BlockParam(bref=b5, bpref=$b.0) -> v5, BlockParam(bref=b6, bpref=$b.0) -> v6, Insn(iref=%0) -> v3
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=48), FnParam(fref=f13, fpref=$f.0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f13, fpref=$f.0), Int32(val=0)])
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v2]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [zero]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [v7]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [v5]
// [Asm] defined: v6 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of clamp25_13"];
// [Asm]   r0 [label="v8 ← a0", color=green];
// [Asm]   r5 [label="v7 ← a0", color=green];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r4 [label="v5 ← a0", color=green];
// [Asm]   r1 [label="v2 ← a1", color=green];
// [Asm]   r3 [label="v6 ← a0", color=green];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r2;
// [Asm]   comment = "0:v8-> 1:v2-> 2:zero-> 3:v6-> 4:v5-> 5:v7-> 6:a0"
// [Asm]   comment = "v8<-a0;v7<-a0;v5<-a0;v2<-a1;v6<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of clamp25_13"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v8, 48 ->   li a0, 48
// [Asm] subst   blt v2, v8, .clamp25_13_4 ->   blt a1, a0, .clamp25_13_4
// [Asm] subst   mv v2, a0 ->   mv a1, a0
// [Asm] subst   bge zero, v2, .clamp25_13_1 ->   bge zero, a1, .clamp25_13_1
// [Asm] subst   mv v6, zero ->   mv a0, zero
// [Asm] subst   j .clamp25_13_6 ->   j .clamp25_13_6
// [Asm] subst   mv v5, v2 ->   mv a0, a1
// [Asm] subst   j .clamp25_13_5 ->   j .clamp25_13_5
// [Asm] subst   li v7, 48 ->   li a0, 48
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f15, fpref=$f.4) -> v6, FnParam(fref=f15, fpref=$f.2) -> v4, FnParam(fref=f15, fpref=$f.3) -> v5, Insn(iref=%9) -> v13, Insn(iref=%8) -> v12, Insn(iref=%10) -> v14, Insn(iref=%5) -> v9, Insn(iref=%0) -> v7, Insn(iref=%4) -> v18, FnParam(fref=f15, fpref=$f.1) -> v3, Insn(iref=%3) -> v17, FnParam(fref=f15, fpref=$f.0) -> v2, Insn(iref=%7) -> v11, Self(fref=f15) -> v0, BlockParam(bref=b5, bpref=$b.0) -> v19, BlockParam(bref=b6, bpref=$b.0) -> v20, Insn(iref=%2) -> v16, Insn(iref=%1) -> v8, Insn(iref=%11) -> v15, Insn(iref=%6) -> v10
// [Asm] skipping Op(ty=Bool, op=Eq, args=[FnParam(fref=f15, fpref=$f.2), FnParam(fref=f15, fpref=$f.0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[FnParam(fref=f15, fpref=$f.3), FnParam(fref=f15, fpref=$f.1)])
// [Asm] defs: [v20]
// [Asm] live_set: [v20]
// [Asm] move_origin: [v19]
// [Asm] defined: v20 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v20]
// [Asm] move_origin: [zero]
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v20]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v3, v5, v4, v6, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v2, v4, v5, v6, v10, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v29]
// [Asm] live_set: [v2, v4, v5, v6, v29, v3]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [v30]
// [Asm] live_set: [v2, v4, v5, v6, v30, v3]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v2, v11, v4, v5, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v2, v4, v6, v5, v12, v3]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v6, v5, v12, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v4, v6, v5, a0, v3]
// [Asm] move_origin: [v12]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, v4, v6, v5, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v13]
// [Asm] live_set: [v2, v4, v6, v5, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v6, v5, v3]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v2, v6, v5, v14, v3]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v6, v5, v14, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v6, v5, v14, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, v6, v5, v14, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, v6, v5, a0]
// [Asm] move_origin: [v14]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [a2, a1, v6, a3, a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [a2, a1, a3, a0, a4]
// [Asm] move_origin: [v6]
// [Asm] defined: a4 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v15]
// [Asm] live_set: [v15]
// [Asm] move_origin: [a0]
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v15]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v19]
// [Asm] move_origin: [v15]
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v4, v5, v6, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v6, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v23]
// [Asm] live_set: [v2, v6, v5, zero, v23, v3]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v6, v5, zero, a0, v3]
// [Asm] move_origin: [v23]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, v6, v5, zero, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v16]
// [Asm] live_set: [v2, v6, v5, zero, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v6, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v2, v6, v17, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v6, v17, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v6, v17, a0, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, v6, v17, a0, zero]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, v6, v17, a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [a2, a1, v6, a3, a0]
// [Asm] move_origin: [v17]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [a2, a1, a3, a0, a4]
// [Asm] move_origin: [v6]
// [Asm] defined: a4 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v18]
// [Asm] live_set: [v18]
// [Asm] move_origin: [a0]
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v18]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v19]
// [Asm] move_origin: [v18]
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v19]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v20]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, a0, a4, a2, a1, a3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, a4, a2, a1, a3, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, a4, a2, a3, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, zero, a4, v4, a3, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, zero, a4, v4, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, zero, v4, v6, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v4, v5, v6, zero, v2]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of print_loop68_15"];
// [Asm]   r0 [label="v20 ← a0", color=green];
// [Asm]   r33 [label="v18 ← a0", color=green];
// [Asm]   r9 [label="v30 ← a0", color=green];
// [Asm]   r26 [label="v14 ← a2", color=green];
// [Asm]   r6 [label="v2 ← s4", color=green];
// [Asm]   r13 [label="t0", color=blue];
// [Asm]   r4 [label="v4 ← s2", color=green];
// [Asm]   r29 [label="v23 ← a0", color=green];
// [Asm]   r7 [label="v10 ← a0", color=green];
// [Asm]   r10 [label="v11 ← a0", color=green];
// [Asm]   r8 [label="v29 ← a0", color=green];
// [Asm]   r5 [label="v6 ← s3", color=green];
// [Asm]   r32 [label="v17 ← a3", color=green];
// [Asm]   r24 [label="a7", color=blue];
// [Asm]   r15 [label="t2", color=blue];
// [Asm]   r31 [label="v16 ← a0", color=green];
// [Asm]   r17 [label="t4", color=blue];
// [Asm]   r12 [label="a0", color=blue];
// [Asm]   r20 [label="a3", color=blue];
// [Asm]   r23 [label="a6", color=blue];
// [Asm]   r3 [label="v5 ← s1", color=green];
// [Asm]   r27 [label="v15 ← a0", color=green];
// [Asm]   r1 [label="v9 ← a0", color=green];
// [Asm]   r28 [label="v19 ← a0", color=green];
// [Asm]   r11 [label="v12 ← a0", color=green];
// [Asm]   r22 [label="a5", color=blue];
// [Asm]   r14 [label="t1", color=blue];
// [Asm]   r30 [label="zero", color=blue];
// [Asm]   r25 [label="v13 ← a0", color=green];
// [Asm]   r2 [label="v3 ← s0", color=green];
// [Asm]   r16 [label="t3", color=blue];
// [Asm]   r18 [label="a1", color=blue];
// [Asm]   r19 [label="a2", color=blue];
// [Asm]   r21 [label="a4", color=blue];
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r21;
// [Asm]   r2 -- r32;
// [Asm]   r2 -- r31;
// [Asm]   r12 -- r32;
// [Asm]   r5 -- r21;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r5 -- r18;
// [Asm]   r30 -- r31;
// [Asm]   r2 -- r10;
// [Asm]   r6 -- r29;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r5 -- r29;
// [Asm]   r18 -- r21;
// [Asm]   r2 -- r16;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r4 -- r22;
// [Asm]   r19 -- r21;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r31;
// [Asm]   r12 -- r19;
// [Asm]   r3 -- r5;
// [Asm]   r20 -- r30;
// [Asm]   r14 -- r30;
// [Asm]   r5 -- r31;
// [Asm]   r4 -- r21;
// [Asm]   r3 -- r8;
// [Asm]   r12 -- r24;
// [Asm]   r6 -- r13;
// [Asm]   r2 -- r25;
// [Asm]   r13 -- r30;
// [Asm]   r2 -- r6;
// [Asm]   r18 -- r26;
// [Asm]   r3 -- r30;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r2 -- r12;
// [Asm]   r18 -- r30;
// [Asm]   r2 -- r8;
// [Asm]   r5 -- r32;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r6 -- r31;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r25;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r12 -- r23;
// [Asm]   r5 -- r14;
// [Asm]   r18 -- r20;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r2 -- r22;
// [Asm]   r12 -- r21;
// [Asm]   r1 -- r5;
// [Asm]   r6 -- r23;
// [Asm]   r2 -- r24;
// [Asm]   r4 -- r14;
// [Asm]   r15 -- r30;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r23;
// [Asm]   r6 -- r32;
// [Asm]   r6 -- r25;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r16 -- r30;
// [Asm]   r6 -- r11;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r24;
// [Asm]   r2 -- r26;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r4 -- r23;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r19 -- r30;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r23;
// [Asm]   r29 -- r30;
// [Asm]   r12 -- r15;
// [Asm]   r30 -- r32;
// [Asm]   r3 -- r12;
// [Asm]   r6 -- r30;
// [Asm]   r5 -- r13;
// [Asm]   r5 -- r19;
// [Asm]   r4 -- r20;
// [Asm]   r6 -- r16;
// [Asm]   r4 -- r30;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r5 -- r16;
// [Asm]   r5 -- r11;
// [Asm]   r6 -- r26;
// [Asm]   r6 -- r12;
// [Asm]   r6 -- r24;
// [Asm]   r6 -- r20;
// [Asm]   r24 -- r30;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r19;
// [Asm]   r18 -- r32;
// [Asm]   r12 -- r20;
// [Asm]   r2 -- r29;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r19 -- r32;
// [Asm]   r18 -- r19;
// [Asm]   r22 -- r30;
// [Asm]   r12 -- r13;
// [Asm]   r2 -- r14;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r21 -- r30;
// [Asm]   r23 -- r30;
// [Asm]   r12 -- r22;
// [Asm]   r3 -- r29;
// [Asm]   r3 -- r20;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r12 -- r30;
// [Asm]   r2 -- r30;
// [Asm]   r5 -- r25;
// [Asm]   r12 -- r14;
// [Asm]   r12 -- r16;
// [Asm]   r4 -- r17;
// [Asm]   r12 -- r17;
// [Asm]   r17 -- r30;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r5 -- r30;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r20 -- r21;
// [Asm]   r12 -- r18;
// [Asm]   r12 -- r26;
// [Asm]   r5 -- r15;
// [Asm]   r4 -- r19;
// [Asm]   r19 -- r20;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v20-> 1:v9-> 2:v3-> 3:v5-> 4:v4-> 5:v6-> 6:v2-> 7:v10-> 8:v29-> 9:v30-> 10:v11-> 11:v12-> 12:a0-> 13:t0-> 30:zero-> 14:t1-> 15:t2-> 16:t3-> 17:t4-> 18:a1-> 19:a2-> 20:a3-> 21:a4-> 22:a5-> 23:a6-> 24:a7-> 32:v17-> 26:v14-> 25:v13-> 29:v23-> 31:v16-> 27:v15-> 28:v19-> 33:v18"
// [Asm]   comment = "v20<-a0;v18<-a0;v30<-a0;v14<-a2;v2<-s4;v4<-s2;v23<-a0;v10<-a0;v11<-a0;v29<-a0;v6<-s3;v17<-a3;v16<-a0;v5<-s1;v15<-a0;v9<-a0;v19<-a0;v12<-a0;v13<-a0;v3<-s0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of print_loop68_15"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v2, a0 ->   mv s4, a0
// [Asm] subst   mv v3, a1 ->   mv s0, a1
// [Asm] subst   mv v4, a2 ->   mv s2, a2
// [Asm] subst   mv v5, a3 ->   mv s1, a3
// [Asm] subst   mv v6, a4 ->   mv s3, a4
// [Asm] subst   beq v5, v3, .print_loop68_15_1 ->   beq s1, s0, .print_loop68_15_1
// [Asm] subst   mv v20, zero ->   mv a0, zero
// [Asm] subst   j .print_loop68_15_6 ->   j .print_loop68_15_6
// [Asm] subst   mul v9, v5, v2 ->   mul a0, s1, s4
// [Asm] subst   add v10, v9, v4 ->   add a0, a0, s2
// [Asm] subst   slliw v29, v10, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v30, v6, v29 ->   add a0, s3, a0
// [Asm] subst   lw v11, 0(v30) ->   lw a0, 0(a0)
// [Asm] subst   addi v12, v11, 48 ->   addi a0, a0, 48
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   addi v14, v4, 1 ->   addi a2, s2, 1
// [Asm] subst   mv a0, v2 ->   mv a0, s4
// [Asm] subst   mv a1, v3 ->   mv a1, s0
// [Asm] subst   mv a3, v5 ->   mv a3, s1
// [Asm] subst   mv a4, v6 ->   mv a4, s3
// [Asm] subst   call print_loop68_15 ->   call print_loop68_15
// [Asm] subst   beq v4, v2, .print_loop68_15_3 ->   beq s2, s4, .print_loop68_15_3
// [Asm] subst   li v23, 10 ->   li a0, 10
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   addi v17, v5, 1 ->   addi a3, s1, 1
// [Asm] subst   mv a0, v2 ->   mv a0, s4
// [Asm] subst   mv a1, v3 ->   mv a1, s0
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   mv a4, v6 ->   mv a4, s3
// [Asm] subst   call print_loop68_15 ->   call print_loop68_15
// [Asm] subst   j .print_loop68_15_5 ->   j .print_loop68_15_5
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f10) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$c_im.610"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   comment = "0:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$c_im.610"];
// [Asm]   r0 [label="fv3 ← fa0", color=green];
// [Asm]   r1 [label="fa0", color=blue];
// [Asm]   comment = "0:fv3-> 1:fa0"
// [Asm]   comment = "fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 4604885582990058455 ->   li a0, 4604885582990058455
// [Asm] subst   fmv.d.x fv3, v2 ->   fmv.d.x fa0, a0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%1) -> fv3, Insn(iref=%0) -> fv2, Insn(iref=%2) -> fv4
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [fv2]
// [Asm] live_set: [fv2]
// [Asm] move_origin: []
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fv2, fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fv4]
// [Asm] live_set: [fv4]
// [Asm] move_origin: []
// [Asm] defined: fv4 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv4]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$limit_sq.22"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$limit_sq.22"];
// [Asm]   r0 [label="fv2 ← fa0", color=green];
// [Asm]   r2 [label="fv4 ← fa0", color=green];
// [Asm]   r1 [label="fv3 ← fa1", color=green];
// [Asm]   r3 [label="fa0", color=blue];
// [Asm]   r0 -- r1;
// [Asm]   comment = "0:fv2-> 1:fv3-> 2:fv4-> 3:fa0"
// [Asm]   comment = "fv2<-fa0;fv4<-fa0;fv3<-fa1;"
// [Asm] }
// [Asm] 
// [Asm] subst   fld fv2, limit.1, t5 ->   fld fa0, limit.1, t5
// [Asm] subst   fld fv3, limit.1, t5 ->   fld fa1, limit.1, t5
// [Asm] subst   fmul.d fv4, fv2, fv3 ->   fmul.d fa0, fa0, fa1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v20, FnParam(fref=f14, fpref=$f.2) -> v4, Insn(iref=%9) -> fv14, Insn(iref=%16) -> v21, Insn(iref=%8) -> fv13, FnParam(fref=f14, fpref=$f.1) -> v3, Insn(iref=%10) -> fv15, Insn(iref=%14) -> fv19, FnParam(fref=f14, fpref=$f.4) -> v6, FnParam(fref=f14, fpref=$f.0) -> v2, Insn(iref=%5) -> fv10, Insn(iref=%0) -> v7, Insn(iref=%19) -> v24, Insn(iref=%4) -> fv9, Insn(iref=%18) -> v23, Insn(iref=%3) -> v28, Insn(iref=%13) -> fv18, Insn(iref=%7) -> fv12, BlockParam(bref=b5, bpref=$b.0) -> v29, Self(fref=f14) -> v0, Insn(iref=%17) -> v22, BlockParam(bref=b6, bpref=$b.0) -> v30, Insn(iref=%2) -> v27, Insn(iref=%1) -> v8, Insn(iref=%20) -> v25, Insn(iref=%11) -> fv16, Insn(iref=%21) -> v26, Insn(iref=%6) -> fv11, Insn(iref=%12) -> fv17, FnParam(fref=f14, fpref=$f.3) -> v5
// [Asm] skipping Op(ty=Bool, op=Eq, args=[FnParam(fref=f14, fpref=$f.2), FnParam(fref=f14, fpref=$f.0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[FnParam(fref=f14, fpref=$f.3), FnParam(fref=f14, fpref=$f.1)])
// [Asm] defs: []
// [Asm] live_set: [zero, a0, a4, a2, a1, a3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, a4, a2, a1, a3, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, a4, a2, a3, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, zero, a4, v4, a3, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, zero, a4, v4, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, zero, v4, v6, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v4, v5, v6, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v30]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v30]
// [Asm] live_set: [v30]
// [Asm] move_origin: [zero]
// [Asm] defined: v30 is X
// [Asm] defs: []
// [Asm] live_set: [v30]
// [Asm] move_origin: []
// [Asm] defs: [v30]
// [Asm] live_set: [v30]
// [Asm] move_origin: [v29]
// [Asm] defined: v30 is X
// [Asm] defs: [fv9]
// [Asm] live_set: [v3, fv9, v5, zero, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: fv9 is F
// [Asm] defs: [v56]
// [Asm] live_set: [v3, fv9, v5, v56, zero, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v56 is X
// [Asm] defs: [fv57]
// [Asm] live_set: [v3, fv9, v5, zero, v4, v6, fv57, v2]
// [Asm] move_origin: []
// [Asm] defined: fv57 is F
// [Asm] defs: [fv10]
// [Asm] live_set: [v3, fv10, v5, zero, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: fv10 is F
// [Asm] defs: [fv11]
// [Asm] live_set: [v3, fv10, v5, zero, fv11, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: fv11 is F
// [Asm] defs: [fv12]
// [Asm] live_set: [v3, v5, zero, v4, fv12, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: fv12 is F
// [Asm] defs: [v51]
// [Asm] live_set: [v3, v51, v5, zero, v4, fv12, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v51 is X
// [Asm] defs: [fv52]
// [Asm] live_set: [v3, fv52, v5, zero, v4, fv12, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: fv52 is F
// [Asm] defs: [fv13]
// [Asm] live_set: [v3, v5, zero, fv13, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: fv13 is F
// [Asm] defs: [fv14]
// [Asm] live_set: [v3, v5, zero, v4, v6, fv14, v2]
// [Asm] move_origin: []
// [Asm] defined: fv14 is F
// [Asm] defs: [fv15]
// [Asm] live_set: [v3, v5, zero, v4, v6, fv14, fv15, v2]
// [Asm] move_origin: []
// [Asm] defined: fv15 is F
// [Asm] defs: [v46]
// [Asm] live_set: [v3, v5, v46, zero, v4, v6, fv14, fv15, v2]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: [fv47]
// [Asm] live_set: [v3, v5, zero, v4, v6, fv14, fv47, fv15, v2]
// [Asm] move_origin: []
// [Asm] defined: fv47 is F
// [Asm] defs: [fv16]
// [Asm] live_set: [v3, v5, zero, v4, v6, fv14, fv16, v2]
// [Asm] move_origin: []
// [Asm] defined: fv16 is F
// [Asm] defs: [fv17]
// [Asm] live_set: [v3, v5, zero, v4, v6, fv14, fv16, fv17, v2]
// [Asm] move_origin: []
// [Asm] defined: fv17 is F
// [Asm] defs: [fv18]
// [Asm] live_set: [v3, v5, zero, v4, v6, fv14, fv18, v2]
// [Asm] move_origin: []
// [Asm] defined: fv18 is F
// [Asm] defs: [v41]
// [Asm] live_set: [v3, v5, zero, v4, v41, v6, fv14, fv18, v2]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: [fv42]
// [Asm] live_set: [v3, v5, zero, fv42, v4, v6, fv14, fv18, v2]
// [Asm] move_origin: []
// [Asm] defined: fv42 is F
// [Asm] defs: [fv19]
// [Asm] live_set: [v3, v5, zero, fv19, v4, v6, fv14, v2]
// [Asm] move_origin: []
// [Asm] defined: fv19 is F
// [Asm] defs: []
// [Asm] live_set: [v3, v5, zero, fv19, v4, v6, fv14, v2]
// [Asm] move_origin: []
// [Asm] defs: [fa0]
// [Asm] live_set: [v3, v5, zero, fa0, fv19, v4, v6, v2]
// [Asm] move_origin: [fv14]
// [Asm] defined: fa0 is F
// [Asm] defs: [fa1]
// [Asm] live_set: [v3, v5, zero, fa0, v4, v6, fa1, v2]
// [Asm] move_origin: [fv19]
// [Asm] defined: fa1 is F
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v5, a0, fa0, v4, v6, fa1, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v3, v5, a0, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v20]
// [Asm] live_set: [v3, v5, v20, v4, v6, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v5, v20, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v3, v5, v21, v20, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v3, v5, v22, v20, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v5, v22, v20, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v5, a0, v22, v4, v6, v2]
// [Asm] move_origin: [v20]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v3, v5, a0, v22, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v23]
// [Asm] live_set: [v3, v5, v23, v22, v4, v6, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v5, v23, v22, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defs: [v35]
// [Asm] live_set: [v3, v5, v23, v35, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v3, v5, v23, v36, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v6, v5, v3]
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v2, v25, v6, v5, v3]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v25, v6, v5, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v25, v6, v5, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v25, a1, v6, v5, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, v6, v5, a0]
// [Asm] move_origin: [v25]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [a2, a1, v6, a3, a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [a2, a1, a3, a0, a4]
// [Asm] move_origin: [v6]
// [Asm] defined: a4 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v26]
// [Asm] live_set: [v26]
// [Asm] move_origin: [a0]
// [Asm] defined: v26 is X
// [Asm] defs: []
// [Asm] live_set: [v26]
// [Asm] move_origin: []
// [Asm] defs: [v29]
// [Asm] live_set: [v29]
// [Asm] move_origin: [v26]
// [Asm] defined: v29 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v2, v6, zero, v27, v3]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v6, zero, v27, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v6, a0, zero, v27]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, v6, a0, zero, v27]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, v6, a0, v27]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [a2, a1, v6, a3, a0]
// [Asm] move_origin: [v27]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [a2, a1, a3, a0, a4]
// [Asm] move_origin: [v6]
// [Asm] defined: a4 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v28]
// [Asm] live_set: [v28]
// [Asm] move_origin: [a0]
// [Asm] defined: v28 is X
// [Asm] defs: []
// [Asm] live_set: [v28]
// [Asm] move_origin: []
// [Asm] defs: [v29]
// [Asm] live_set: [v29]
// [Asm] move_origin: [v28]
// [Asm] defined: v29 is X
// [Asm] defs: []
// [Asm] live_set: [v29]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, v4, v5, v6, zero, v2]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main_loop30_14"];
// [Asm]   r0 [label="v2 ← s0", color=green];
// [Asm]   r33 [label="v27 ← a3", color=green];
// [Asm]   r9 [label="v6 ← s4", color=green];
// [Asm]   r26 [label="v22 ← s5", color=green];
// [Asm]   r6 [label="v3 ← s1", color=green];
// [Asm]   r13 [label="v51 ← a0", color=green];
// [Asm]   r4 [label="a1", color=blue];
// [Asm]   r29 [label="v36 ← a1", color=green];
// [Asm]   r7 [label="v4 ← s2", color=green];
// [Asm]   r10 [label="a0", color=blue];
// [Asm]   r8 [label="v5 ← s3", color=green];
// [Asm]   r5 [label="a3", color=blue];
// [Asm]   r15 [label="v41 ← a0", color=green];
// [Asm]   r32 [label="v29 ← a0", color=green];
// [Asm]   r24 [label="v20 ← a0", color=green];
// [Asm]   r31 [label="v26 ← a0", color=green];
// [Asm]   r17 [label="t1", color=blue];
// [Asm]   r12 [label="v56 ← a0", color=green];
// [Asm]   r20 [label="t4", color=blue];
// [Asm]   r23 [label="a7", color=blue];
// [Asm]   r3 [label="a2", color=blue];
// [Asm]   r27 [label="v23 ← a0", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r28 [label="v35 ← a1", color=green];
// [Asm]   r11 [label="v30 ← a0", color=green];
// [Asm]   r34 [label="v28 ← a0", color=green];
// [Asm]   r22 [label="a6", color=blue];
// [Asm]   r14 [label="v46 ← a0", color=green];
// [Asm]   r30 [label="v25 ← a2", color=green];
// [Asm]   r25 [label="v21 ← a1", color=green];
// [Asm]   r2 [label="a4", color=blue];
// [Asm]   r16 [label="t0", color=blue];
// [Asm]   r18 [label="t2", color=blue];
// [Asm]   r19 [label="t3", color=blue];
// [Asm]   r21 [label="a5", color=blue];
// [Asm]   r6 -- r21;
// [Asm]   r0 -- r13;
// [Asm]   r9 -- r25;
// [Asm]   r1 -- r12;
// [Asm]   r7 -- r21;
// [Asm]   r5 -- r8;
// [Asm]   r9 -- r27;
// [Asm]   r5 -- r10;
// [Asm]   r10 -- r26;
// [Asm]   r27 -- r29;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r7 -- r25;
// [Asm]   r0 -- r28;
// [Asm]   r1 -- r10;
// [Asm]   r0 -- r25;
// [Asm]   r10 -- r19;
// [Asm]   r2 -- r10;
// [Asm]   r6 -- r29;
// [Asm]   r3 -- r9;
// [Asm]   r9 -- r26;
// [Asm]   r0 -- r23;
// [Asm]   r0 -- r22;
// [Asm]   r27 -- r28;
// [Asm]   r9 -- r17;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r33;
// [Asm]   r3 -- r26;
// [Asm]   r0 -- r16;
// [Asm]   r7 -- r27;
// [Asm]   r3 -- r5;
// [Asm]   r9 -- r18;
// [Asm]   r8 -- r12;
// [Asm]   r0 -- r6;
// [Asm]   r9 -- r14;
// [Asm]   r3 -- r8;
// [Asm]   r8 -- r24;
// [Asm]   r6 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r26 -- r27;
// [Asm]   r4 -- r33;
// [Asm]   r2 -- r6;
// [Asm]   r10 -- r20;
// [Asm]   r5 -- r6;
// [Asm]   r18 -- r26;
// [Asm]   r0 -- r26;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r8 -- r16;
// [Asm]   r10 -- r18;
// [Asm]   r0 -- r2;
// [Asm]   r9 -- r28;
// [Asm]   r0 -- r9;
// [Asm]   r6 -- r18;
// [Asm]   r10 -- r33;
// [Asm]   r7 -- r10;
// [Asm]   r9 -- r23;
// [Asm]   r6 -- r10;
// [Asm]   r9 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r8 -- r23;
// [Asm]   r3 -- r10;
// [Asm]   r10 -- r22;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r33;
// [Asm]   r9 -- r20;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r10;
// [Asm]   r8 -- r29;
// [Asm]   r10 -- r30;
// [Asm]   r8 -- r22;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r8 -- r21;
// [Asm]   r9 -- r10;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r0 -- r4;
// [Asm]   r6 -- r23;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r24 -- r25;
// [Asm]   r4 -- r9;
// [Asm]   r8 -- r30;
// [Asm]   r0 -- r18;
// [Asm]   r10 -- r17;
// [Asm]   r6 -- r25;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r0 -- r15;
// [Asm]   r7 -- r29;
// [Asm]   r2 -- r26;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r9 -- r15;
// [Asm]   r20 -- r26;
// [Asm]   r0 -- r24;
// [Asm]   r6 -- r14;
// [Asm]   r7 -- r24;
// [Asm]   r8 -- r27;
// [Asm]   r9 -- r29;
// [Asm]   r8 -- r19;
// [Asm]   r8 -- r9;
// [Asm]   r6 -- r33;
// [Asm]   r7 -- r26;
// [Asm]   r17 -- r26;
// [Asm]   r6 -- r30;
// [Asm]   r7 -- r13;
// [Asm]   r0 -- r14;
// [Asm]   r7 -- r20;
// [Asm]   r0 -- r21;
// [Asm]   r1 -- r15;
// [Asm]   r22 -- r26;
// [Asm]   r1 -- r13;
// [Asm]   r9 -- r30;
// [Asm]   r6 -- r16;
// [Asm]   r4 -- r30;
// [Asm]   r6 -- r22;
// [Asm]   r16 -- r26;
// [Asm]   r19 -- r26;
// [Asm]   r7 -- r9;
// [Asm]   r8 -- r20;
// [Asm]   r6 -- r26;
// [Asm]   r8 -- r25;
// [Asm]   r6 -- r12;
// [Asm]   r0 -- r19;
// [Asm]   r6 -- r24;
// [Asm]   r24 -- r26;
// [Asm]   r6 -- r20;
// [Asm]   r10 -- r16;
// [Asm]   r7 -- r28;
// [Asm]   r6 -- r8;
// [Asm]   r7 -- r17;
// [Asm]   r8 -- r28;
// [Asm]   r9 -- r22;
// [Asm]   r23 -- r26;
// [Asm]   r6 -- r19;
// [Asm]   r6 -- r27;
// [Asm]   r7 -- r22;
// [Asm]   r7 -- r19;
// [Asm]   r0 -- r33;
// [Asm]   r8 -- r13;
// [Asm]   r5 -- r9;
// [Asm]   r5 -- r26;
// [Asm]   r0 -- r3;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r8;
// [Asm]   r9 -- r33;
// [Asm]   r6 -- r28;
// [Asm]   r7 -- r15;
// [Asm]   r9 -- r24;
// [Asm]   r8 -- r18;
// [Asm]   r10 -- r23;
// [Asm]   r0 -- r29;
// [Asm]   r0 -- r5;
// [Asm]   r6 -- r17;
// [Asm]   r21 -- r26;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r9 -- r16;
// [Asm]   r0 -- r12;
// [Asm]   r8 -- r26;
// [Asm]   r9 -- r19;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r7 -- r23;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r26;
// [Asm]   r0 -- r30;
// [Asm]   r7 -- r12;
// [Asm]   r9 -- r13;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r27;
// [Asm]   r0 -- r20;
// [Asm]   r2 -- r3;
// [Asm]   r7 -- r14;
// [Asm]   r10 -- r21;
// [Asm]   r9 -- r21;
// [Asm]   comment = "0:v2-> 1:zero-> 4:a1-> 6:v3-> 7:v4-> 8:v5-> 9:v6-> 10:a0-> 2:a4-> 3:a2-> 5:a3-> 26:v22-> 16:t0-> 17:t1-> 18:t2-> 19:t3-> 20:t4-> 21:a5-> 22:a6-> 23:a7-> 33:v27-> 12:v56-> 13:v51-> 14:v46-> 15:v41-> 24:v20-> 25:v21-> 27:v23-> 28:v35-> 29:v36-> 30:v25-> 11:v30-> 31:v26-> 32:v29-> 34:v28"
// [Asm]   comment = "v2<-s0;v27<-a3;v6<-s4;v22<-s5;v3<-s1;v51<-a0;v36<-a1;v4<-s2;v5<-s3;v41<-a0;v29<-a0;v20<-a0;v26<-a0;v56<-a0;v23<-a0;v35<-a1;v30<-a0;v28<-a0;v46<-a0;v25<-a2;v21<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main_loop30_14"];
// [Asm]   r0 [label="fv9 ← fa0", color=green];
// [Asm]   r33 [label="fa7", color=blue];
// [Asm]   r9 [label="fv47 ← fa2", color=green];
// [Asm]   r26 [label="ft9", color=blue];
// [Asm]   r6 [label="fv13 ← fa0", color=green];
// [Asm]   r13 [label="fv42 ← fa2", color=green];
// [Asm]   r4 [label="fv12 ← fa0", color=green];
// [Asm]   r29 [label="fa3", color=blue];
// [Asm]   r7 [label="fv14 ← fa0", color=green];
// [Asm]   r10 [label="fv16 ← fa1", color=green];
// [Asm]   r8 [label="fv15 ← fa1", color=green];
// [Asm]   r5 [label="fv52 ← fa1", color=green];
// [Asm]   r15 [label="fa0", color=blue];
// [Asm]   r32 [label="fa6", color=blue];
// [Asm]   r24 [label="ft7", color=blue];
// [Asm]   r31 [label="fa5", color=blue];
// [Asm]   r17 [label="ft0", color=blue];
// [Asm]   r12 [label="fv18 ← fa1", color=green];
// [Asm]   r20 [label="ft3", color=blue];
// [Asm]   r23 [label="ft6", color=blue];
// [Asm]   r3 [label="fv11 ← fa1", color=green];
// [Asm]   r27 [label="ft10", color=blue];
// [Asm]   r1 [label="fv57 ← fa1", color=green];
// [Asm]   r28 [label="fa2", color=blue];
// [Asm]   r11 [label="fv17 ← fa2", color=green];
// [Asm]   r22 [label="ft5", color=blue];
// [Asm]   r14 [label="fv19 ← fa1", color=green];
// [Asm]   r30 [label="fa4", color=blue];
// [Asm]   r25 [label="ft8", color=blue];
// [Asm]   r2 [label="fv10 ← fa0", color=green];
// [Asm]   r16 [label="fa1", color=blue];
// [Asm]   r18 [label="ft1", color=blue];
// [Asm]   r19 [label="ft2", color=blue];
// [Asm]   r21 [label="ft4", color=blue];
// [Asm]   r0 -- r1;
// [Asm]   r4 -- r5;
// [Asm]   r12 -- r13;
// [Asm]   r7 -- r9;
// [Asm]   r7 -- r8;
// [Asm]   r7 -- r12;
// [Asm]   r7 -- r10;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r7 -- r14;
// [Asm]   r14 -- r15;
// [Asm]   r10 -- r11;
// [Asm]   r8 -- r9;
// [Asm]   r7 -- r11;
// [Asm]   r7 -- r13;
// [Asm]   comment = "0:fv9-> 1:fv57-> 2:fv10-> 3:fv11-> 4:fv12-> 5:fv52-> 6:fv13-> 7:fv14-> 8:fv15-> 9:fv47-> 10:fv16-> 11:fv17-> 12:fv18-> 13:fv42-> 14:fv19-> 15:fa0-> 16:fa1-> 17:ft0-> 18:ft1-> 19:ft2-> 20:ft3-> 21:ft4-> 22:ft5-> 23:ft6-> 24:ft7-> 25:ft8-> 26:ft9-> 27:ft10-> 28:fa2-> 29:fa3-> 30:fa4-> 31:fa5-> 32:fa6-> 33:fa7"
// [Asm]   comment = "fv9<-fa0;fv47<-fa2;fv13<-fa0;fv42<-fa2;fv12<-fa0;fv14<-fa0;fv16<-fa1;fv15<-fa1;fv52<-fa1;fv18<-fa1;fv11<-fa1;fv57<-fa1;fv17<-fa2;fv19<-fa1;fv10<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   mv v3, a1 ->   mv s1, a1
// [Asm] subst   mv v4, a2 ->   mv s2, a2
// [Asm] subst   mv v5, a3 ->   mv s3, a3
// [Asm] subst   mv v6, a4 ->   mv s4, a4
// [Asm] subst   beq v5, v3, .main_loop30_14_1 ->   beq s3, s1, .main_loop30_14_1
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v30, zero ->   mv a0, zero
// [Asm] subst   j .main_loop30_14_6 ->   j .main_loop30_14_6
// [Asm] subst   fcvt.d.w fv9, v4 ->   fcvt.d.w fa0, s2
// [Asm] subst   li v56, 4613937818241073152 ->   li a0, 4613937818241073152
// [Asm] subst   fmv.d.x fv57, v56 ->   fmv.d.x fa1, a0
// [Asm] subst   fmul.d fv10, fv57, fv9 ->   fmul.d fa0, fa1, fa0
// [Asm] subst   fcvt.d.w fv11, v2 ->   fcvt.d.w fa1, s0
// [Asm] subst   fdiv.d fv12, fv10, fv11 ->   fdiv.d fa0, fa0, fa1
// [Asm] subst   li v51, 4609434218613702656 ->   li a0, 4609434218613702656
// [Asm] subst   fmv.d.x fv52, v51 ->   fmv.d.x fa1, a0
// [Asm] subst   fsub.d fv13, fv12, fv52 ->   fsub.d fa0, fa0, fa1
// [Asm] subst   fneg.d fv14, fv13 ->   fneg.d fa0, fa0
// [Asm] subst   fcvt.d.w fv15, v5 ->   fcvt.d.w fa1, s3
// [Asm] subst   li v46, 4613937818241073152 ->   li a0, 4613937818241073152
// [Asm] subst   fmv.d.x fv47, v46 ->   fmv.d.x fa2, a0
// [Asm] subst   fmul.d fv16, fv47, fv15 ->   fmul.d fa1, fa2, fa1
// [Asm] subst   fcvt.d.w fv17, v3 ->   fcvt.d.w fa2, s1
// [Asm] subst   fdiv.d fv18, fv16, fv17 ->   fdiv.d fa1, fa1, fa2
// [Asm] subst   li v41, 4609434218613702656 ->   li a0, 4609434218613702656
// [Asm] subst   fmv.d.x fv42, v41 ->   fmv.d.x fa2, a0
// [Asm] subst   fsub.d fv19, fv18, fv42 ->   fsub.d fa1, fa1, fa2
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   call calc_pixel7_12 ->   call calc_pixel7_12
// [Asm] subst   mul v21, v5, v2 ->   mul a1, s3, s0
// [Asm] subst   add v22, v21, v4 ->   add s5, a1, s2
// [Asm] subst   call clamp25_13 ->   call clamp25_13
// [Asm] subst   slliw v35, v22, 2 ->   slliw a1, s5, 2
// [Asm] subst   add v36, v6, v35 ->   add a1, s4, a1
// [Asm] subst   sw v23, 0(v36) ->   sw a0, 0(a1)
// [Asm] subst   addi v25, v4, 1 ->   addi a2, s2, 1
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   mv a1, v3 ->   mv a1, s1
// [Asm] subst   mv a3, v5 ->   mv a3, s3
// [Asm] subst   mv a4, v6 ->   mv a4, s4
// [Asm] subst   call main_loop30_14 ->   call main_loop30_14
// [Asm] subst   addi v27, v5, 1 ->   addi a3, s3, 1
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   mv a1, v3 ->   mv a1, s1
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   mv a4, v6 ->   mv a4, s4
// [Asm] subst   call main_loop30_14 ->   call main_loop30_14
// [Asm] subst   j .main_loop30_14_5 ->   j .main_loop30_14_5
// [Asm] subst   beq v4, v2, .main_loop30_14_3 ->   beq s2, s0, .main_loop30_14_3
// [Asm] pre_assigned_registers: Self(fref=f22) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_22"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_22"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main94_16 ->   call main94_16
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf true
// [Asm] T$c_re.58:
// [Asm] # block info: defs: [fv2, fv3, fa0], uses: [fv2, fv3, fa0], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$c_re.58_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   fld fv2, _4, t5  # live: [fv2]
// [Asm]   fneg.d fv3, fv2  # live: [fv3]
// [Asm] # control
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$iter.34:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$iter.34_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 300  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$limit_sq.22:
// [Asm] # block info: defs: [fv4, fv2, fv3, fa0], uses: [fv4, fv2, fv3, fa0], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$limit_sq.22_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   fld fv2, limit.1, t5  # live: [fv2]
// [Asm]   fld fv3, limit.1, t5  # live: [fv2, fv3]
// [Asm]   fmul.d fv4, fv2, fv3  # live: [fv4]
// [Asm] # control
// [Asm]   fmv.d fa0, fv4  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main_loop30_14:
// [Asm] # block info: defs: [v3, v4, v5, v6, v2], uses: [v5, a0, a4, a2, a1, a3, v3], upward_exposed: [a2, a1, a3, a0, a4], params_defs: []
// [Asm] # live_in: [a0, zero, a4, a2, a1, a3], live_out: [v2, v5, zero, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .main_loop30_14_0:
// [Asm]   # save_ctx1  # live: [zero, a0, a4, a2, a1, a3]
// [Asm]   mv v2, a0  # live: [zero, a4, a2, a1, a3, v2]
// [Asm]   mv v3, a1  # live: [v2, zero, a4, a2, a3, v3]
// [Asm]   mv v4, a2  # live: [v2, zero, a4, v4, a3, v3]
// [Asm]   mv v5, a3  # live: [v2, v5, zero, a4, v4, v3]
// [Asm]   mv v6, a4  # live: [v2, v5, zero, v4, v6, v3]
// [Asm] # control
// [Asm]   beq v5, v3, .main_loop30_14_1  # live: [v3, v4, v5, v6, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v4, v2], upward_exposed: [v4, v2], params_defs: []
// [Asm] # live_in: [v2, v5, zero, v4, v6, v3], live_out: [v2, v5, zero, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .main_loop30_14_2:
// [Asm] # control
// [Asm]   beq v4, v2, .main_loop30_14_3  # live: [v3, v4, v5, v6, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [v22, fv12, a1, fv47, fv15, fa1, v51, fa2, ft6, a4, fa6, v20, a6, ft10, ft5, ft4, ft9, fa4, ft2, a3, a7, fa7, fa3, fv11, ft3, fv42, t2, fv18, fv17, fv52, v25, fv10, t1, v26, fv19, v41, ft0, ft1, fv14, fv16, v29, ft7, v46, v21, a5, a0, v36, a2, fv57, ft8, fv9, t3, t0, fa5, v56, v23, fa0, fv13, v35, t4], uses: [v2, fv52, v25, fv10, v26, v22, fv19, fv12, v41, a1, fv14, fv47, fv15, fv16, fa1, v51, zero, v20, a4, v4, v6, v46, v5, v21, a0, v36, a2, a3, fv57, fv9, v56, fv11, fv42, v23, fa0, v35, fv13, fv18, fv17, v3], upward_exposed: [v2, v5, zero, v4, v6, v3], params_defs: []
// [Asm] # live_in: [v2, v5, zero, v4, v6, v3], live_out: [v29]
// [Asm] # block parameters: []
// [Asm] .main_loop30_14_4:
// [Asm]   fcvt.d.w fv9, v4  # live: [v3, fv9, v5, zero, v4, v6, v2]
// [Asm]   li v56, 4613937818241073152  # live: [v3, fv9, v5, v56, zero, v4, v6, v2]
// [Asm]   fmv.d.x fv57, v56  # live: [v3, fv9, v5, zero, v4, v6, fv57, v2]
// [Asm]   fmul.d fv10, fv57, fv9  # live: [v3, fv10, v5, zero, v4, v6, v2]
// [Asm]   fcvt.d.w fv11, v2  # live: [v3, fv10, v5, zero, fv11, v4, v6, v2]
// [Asm]   fdiv.d fv12, fv10, fv11  # live: [v3, v5, zero, v4, fv12, v6, v2]
// [Asm]   li v51, 4609434218613702656  # live: [v3, v51, v5, zero, v4, fv12, v6, v2]
// [Asm]   fmv.d.x fv52, v51  # live: [v3, fv52, v5, zero, v4, fv12, v6, v2]
// [Asm]   fsub.d fv13, fv12, fv52  # live: [v3, v5, zero, fv13, v4, v6, v2]
// [Asm]   fneg.d fv14, fv13  # live: [v3, v5, zero, v4, v6, fv14, v2]
// [Asm]   fcvt.d.w fv15, v5  # live: [v3, v5, zero, v4, v6, fv14, fv15, v2]
// [Asm]   li v46, 4613937818241073152  # live: [v3, v5, v46, zero, v4, v6, fv14, fv15, v2]
// [Asm]   fmv.d.x fv47, v46  # live: [v3, v5, zero, v4, v6, fv14, fv47, fv15, v2]
// [Asm]   fmul.d fv16, fv47, fv15  # live: [v3, v5, zero, v4, v6, fv14, fv16, v2]
// [Asm]   fcvt.d.w fv17, v3  # live: [v3, v5, zero, v4, v6, fv14, fv16, fv17, v2]
// [Asm]   fdiv.d fv18, fv16, fv17  # live: [v3, v5, zero, v4, v6, fv14, fv18, v2]
// [Asm]   li v41, 4609434218613702656  # live: [v3, v5, zero, v4, v41, v6, fv14, fv18, v2]
// [Asm]   fmv.d.x fv42, v41  # live: [v3, v5, zero, fv42, v4, v6, fv14, fv18, v2]
// [Asm]   fsub.d fv19, fv18, fv42  # live: [v3, v5, zero, fv19, v4, v6, fv14, v2]
// [Asm]   # save_ctx2  # live: [v3, v5, zero, fv19, v4, v6, fv14, v2]
// [Asm]   fmv.d fa0, fv14  # live: [v3, v5, zero, fa0, fv19, v4, v6, v2]
// [Asm]   fmv.d fa1, fv19  # live: [v3, v5, zero, fa0, v4, v6, fa1, v2]
// [Asm]   mv a0, zero  # live: [v3, v5, a0, fa0, v4, v6, fa1, v2]
// [Asm]   call calc_pixel7_12  # live: [v3, v5, a0, v4, v6, v2]
// [Asm]   mv v20, a0  # live: [v3, v5, v20, v4, v6, v2]
// [Asm]   # restore_ctx2  # live: [v3, v5, v20, v4, v6, v2]
// [Asm]   mul v21, v5, v2  # live: [v3, v5, v21, v20, v4, v6, v2]
// [Asm]   add v22, v21, v4  # live: [v3, v5, v22, v20, v4, v6, v2]
// [Asm]   # save_ctx2  # live: [v3, v5, v22, v20, v4, v6, v2]
// [Asm]   mv a0, v20  # live: [v3, v5, a0, v22, v4, v6, v2]
// [Asm]   call clamp25_13  # live: [v3, v5, a0, v22, v4, v6, v2]
// [Asm]   mv v23, a0  # live: [v3, v5, v23, v22, v4, v6, v2]
// [Asm]   # restore_ctx2  # live: [v3, v5, v23, v22, v4, v6, v2]
// [Asm]   slliw v35, v22, 2  # live: [v3, v5, v23, v35, v4, v6, v2]
// [Asm]   add v36, v6, v35  # live: [v3, v5, v23, v36, v4, v6, v2]
// [Asm]   sw v23, 0(v36)  # live: [v2, v4, v6, v5, v3]
// [Asm]   addi v25, v4, 1  # live: [v2, v25, v6, v5, v3]
// [Asm]   # save_ctx2  # live: [v2, v25, v6, v5, v3]
// [Asm]   mv a0, v2  # live: [v25, v6, v5, a0, v3]
// [Asm]   mv a1, v3  # live: [v25, a1, v6, v5, a0]
// [Asm]   mv a2, v25  # live: [a2, a1, v6, v5, a0]
// [Asm]   mv a3, v5  # live: [a2, a1, v6, a3, a0]
// [Asm]   mv a4, v6  # live: [a2, a1, a3, a0, a4]
// [Asm]   call main_loop30_14  # live: [a0]
// [Asm]   mv v26, a0  # live: [v26]
// [Asm]   # restore_ctx2  # live: [v26]
// [Asm] # control
// [Asm]   mv v29, v26  # live: [v29]
// [Asm] 
// [Asm] # block info: defs: [v30], uses: [v29], upward_exposed: [v29], params_defs: [v29]
// [Asm] # live_in: [v29], live_out: [v30]
// [Asm] # block parameters: [v29]
// [Asm] .main_loop30_14_5:
// [Asm] # control
// [Asm]   mv v30, v29  # live: [v30]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v30], upward_exposed: [v30], params_defs: [v30]
// [Asm] # live_in: [v30], live_out: []
// [Asm] # block parameters: [v30]
// [Asm] .main_loop30_14_6:
// [Asm] # control
// [Asm]   mv a0, v30  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v30], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v30]
// [Asm] # block parameters: []
// [Asm] .main_loop30_14_1:
// [Asm] # control
// [Asm]   mv v30, zero  # live: [v30]
// [Asm]   j .main_loop30_14_6  # live: [v30]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, v28, fa1, fa2, ft6, v29, a4, fa6, v27, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v2, v5, zero, a0, v27, a4, a2, v6, a1, a3, v28, v3], upward_exposed: [v3, v5, v6, zero, v2], params_defs: []
// [Asm] # live_in: [v2, v5, v6, zero, v3], live_out: [v29]
// [Asm] # block parameters: []
// [Asm] .main_loop30_14_3:
// [Asm]   addi v27, v5, 1  # live: [v2, v6, zero, v27, v3]
// [Asm]   # save_ctx2  # live: [v2, v6, zero, v27, v3]
// [Asm]   mv a0, v2  # live: [v3, v6, a0, zero, v27]
// [Asm]   mv a1, v3  # live: [a1, v6, a0, zero, v27]
// [Asm]   mv a2, zero  # live: [a2, a1, v6, a0, v27]
// [Asm]   mv a3, v27  # live: [a2, a1, v6, a3, a0]
// [Asm]   mv a4, v6  # live: [a2, a1, a3, a0, a4]
// [Asm]   call main_loop30_14  # live: [a0]
// [Asm]   mv v28, a0  # live: [v28]
// [Asm]   # restore_ctx2  # live: [v28]
// [Asm] # control
// [Asm]   mv v29, v28  # live: [v29]
// [Asm]   j .main_loop30_14_5  # live: [v29]
// [Asm] 
// [Asm] # leaf true
// [Asm] T$limit.10:
// [Asm] # block info: defs: [fa0, fv3, v2], uses: [fa0, fv3, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$limit.10_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 4611686018427387904  # live: [v2]
// [Asm]   fmv.d.x fv3, v2  # live: [fv3]
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$_4_6:
// [Asm] # block info: defs: [fa0, fv3, v2], uses: [fa0, fv3, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_4_6_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 4593527504729830064  # live: [v2]
// [Asm]   fmv.d.x fv3, v2  # live: [fv3]
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] print_loop68_15:
// [Asm] # block info: defs: [v3, v4, v5, v6, v2], uses: [v5, a0, a4, a2, a1, a3, v3], upward_exposed: [a2, a1, a3, a0, a4], params_defs: []
// [Asm] # live_in: [a0, zero, a4, a2, a1, a3], live_out: [v2, v5, zero, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .print_loop68_15_0:
// [Asm]   # save_ctx1  # live: [zero, a0, a4, a2, a1, a3]
// [Asm]   mv v2, a0  # live: [zero, a4, a2, a1, a3, v2]
// [Asm]   mv v3, a1  # live: [v2, zero, a4, a2, a3, v3]
// [Asm]   mv v4, a2  # live: [v2, zero, a4, v4, a3, v3]
// [Asm]   mv v5, a3  # live: [v2, v5, zero, a4, v4, v3]
// [Asm]   mv v6, a4  # live: [v2, v5, zero, v4, v6, v3]
// [Asm] # control
// [Asm]   beq v5, v3, .print_loop68_15_1  # live: [v3, v4, v5, v6, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v4, v2], upward_exposed: [v4, v2], params_defs: []
// [Asm] # live_in: [v2, v5, zero, v4, v6, v3], live_out: [v2, v5, zero, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .print_loop68_15_2:
// [Asm] # control
// [Asm]   beq v4, v2, .print_loop68_15_3  # live: [v3, v4, v5, v6, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v13, ft0, ft1, a1, v12, fa1, fa2, v29, ft6, a4, fa6, a6, v19, ft5, ft10, ft7, v11, ft4, v10, ft9, a5, a0, fa4, v30, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v2, v11, v5, v14, v10, a0, v30, a2, a1, v12, a3, v9, v29, a4, v4, v6, v15, v3], upward_exposed: [v3, v4, v5, v6, v2], params_defs: []
// [Asm] # live_in: [v2, v4, v5, v6, v3], live_out: [v19]
// [Asm] # block parameters: []
// [Asm] .print_loop68_15_4:
// [Asm]   mul v9, v5, v2  # live: [v3, v5, v4, v6, v9, v2]
// [Asm]   add v10, v9, v4  # live: [v2, v4, v5, v6, v10, v3]
// [Asm]   slliw v29, v10, 2  # live: [v2, v4, v5, v6, v29, v3]
// [Asm]   add v30, v6, v29  # live: [v2, v4, v5, v6, v30, v3]
// [Asm]   lw v11, 0(v30)  # live: [v2, v11, v4, v5, v6, v3]
// [Asm]   addi v12, v11, 48  # live: [v2, v4, v6, v5, v12, v3]
// [Asm]   # save_ctx2  # live: [v2, v4, v6, v5, v12, v3]
// [Asm]   mv a0, v12  # live: [v2, v4, v6, v5, a0, v3]
// [Asm]   call minimbt_print_char  # live: [v2, v4, v6, v5, a0, v3]
// [Asm]   mv v13, a0  # live: [v2, v4, v6, v5, v3]
// [Asm]   # restore_ctx2  # live: [v2, v4, v6, v5, v3]
// [Asm]   addi v14, v4, 1  # live: [v2, v6, v5, v14, v3]
// [Asm]   # save_ctx2  # live: [v2, v6, v5, v14, v3]
// [Asm]   mv a0, v2  # live: [v6, v5, v14, a0, v3]
// [Asm]   mv a1, v3  # live: [a1, v6, v5, v14, a0]
// [Asm]   mv a2, v14  # live: [a2, a1, v6, v5, a0]
// [Asm]   mv a3, v5  # live: [a2, a1, v6, a3, a0]
// [Asm]   mv a4, v6  # live: [a2, a1, a3, a0, a4]
// [Asm]   call print_loop68_15  # live: [a0]
// [Asm]   mv v15, a0  # live: [v15]
// [Asm]   # restore_ctx2  # live: [v15]
// [Asm] # control
// [Asm]   mv v19, v15  # live: [v19]
// [Asm] 
// [Asm] # block info: defs: [v20], uses: [v19], upward_exposed: [v19], params_defs: [v19]
// [Asm] # live_in: [v19], live_out: [v20]
// [Asm] # block parameters: [v19]
// [Asm] .print_loop68_15_5:
// [Asm] # control
// [Asm]   mv v20, v19  # live: [v20]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v20], upward_exposed: [v20], params_defs: [v20]
// [Asm] # live_in: [v20], live_out: []
// [Asm] # block parameters: [v20]
// [Asm] .print_loop68_15_6:
// [Asm] # control
// [Asm]   mv a0, v20  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v20], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v20]
// [Asm] # block parameters: []
// [Asm] .print_loop68_15_1:
// [Asm] # control
// [Asm]   mv v20, zero  # live: [v20]
// [Asm]   j .print_loop68_15_6  # live: [v20]
// [Asm] 
// [Asm] # block info: defs: [t1, v16, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, v19, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, v23, fa0, t4, t2], uses: [v2, v5, v18, a0, zero, v23, a4, a2, v17, v6, a1, a3, v3], upward_exposed: [v3, v5, v6, zero, v2], params_defs: []
// [Asm] # live_in: [v2, v5, v6, zero, v3], live_out: [v19]
// [Asm] # block parameters: []
// [Asm] .print_loop68_15_3:
// [Asm]   # save_ctx2  # live: [v2, v6, v5, zero, v3]
// [Asm]   li v23, 10  # live: [v2, v6, v5, zero, v23, v3]
// [Asm]   mv a0, v23  # live: [v2, v6, v5, zero, a0, v3]
// [Asm]   call minimbt_print_char  # live: [v2, v6, v5, zero, a0, v3]
// [Asm]   mv v16, a0  # live: [v2, v6, v5, zero, v3]
// [Asm]   # restore_ctx2  # live: [v2, v6, v5, zero, v3]
// [Asm]   addi v17, v5, 1  # live: [v2, v6, v17, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, v6, v17, zero, v3]
// [Asm]   mv a0, v2  # live: [v6, v17, a0, zero, v3]
// [Asm]   mv a1, v3  # live: [a1, v6, v17, a0, zero]
// [Asm]   mv a2, zero  # live: [a2, a1, v6, v17, a0]
// [Asm]   mv a3, v17  # live: [a2, a1, v6, a3, a0]
// [Asm]   mv a4, v6  # live: [a2, a1, a3, a0, a4]
// [Asm]   call print_loop68_15  # live: [a0]
// [Asm]   mv v18, a0  # live: [v18]
// [Asm]   # restore_ctx2  # live: [v18]
// [Asm] # control
// [Asm]   mv v19, v18  # live: [v19]
// [Asm]   j .print_loop68_15_5  # live: [v19]
// [Asm] 
// [Asm] # leaf true
// [Asm] T$c_im.610:
// [Asm] # block info: defs: [fa0, fv3, v2], uses: [fa0, fv3, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$c_im.610_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 4604885582990058455  # live: [v2]
// [Asm]   fmv.d.x fv3, v2  # live: [fv3]
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] clamp25_13:
// [Asm] # block info: defs: [v2], uses: [a0, zero, v2], upward_exposed: [a0, zero], params_defs: []
// [Asm] # live_in: [a0, zero], live_out: [zero, v2]
// [Asm] # block parameters: []
// [Asm] .clamp25_13_0:
// [Asm]   # save_ctx1  # live: [zero, a0]
// [Asm]   mv v2, a0  # live: [zero, v2]
// [Asm] # control
// [Asm]   bge zero, v2, .clamp25_13_1  # live: [zero, v2]
// [Asm] 
// [Asm] # block info: defs: [v8], uses: [v8, v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v2]
// [Asm] # block parameters: []
// [Asm] .clamp25_13_2:
// [Asm] # control
// [Asm]   li v8, 48  # live: [v8, v2]
// [Asm]   blt v2, v8, .clamp25_13_4  # live: [v2]
// [Asm] 
// [Asm] # block info: defs: [v5, v7], uses: [v7], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .clamp25_13_3:
// [Asm] # control
// [Asm]   li v7, 48  # live: [v7]
// [Asm]   mv v5, v7  # live: [v5]
// [Asm] 
// [Asm] # block info: defs: [v6], uses: [v5], upward_exposed: [v5], params_defs: [v5]
// [Asm] # live_in: [v5], live_out: [v6]
// [Asm] # block parameters: [v5]
// [Asm] .clamp25_13_5:
// [Asm] # control
// [Asm]   mv v6, v5  # live: [v6]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v6, a0], upward_exposed: [v6], params_defs: [v6]
// [Asm] # live_in: [v6], live_out: []
// [Asm] # block parameters: [v6]
// [Asm] .clamp25_13_6:
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v6], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v6]
// [Asm] # block parameters: []
// [Asm] .clamp25_13_1:
// [Asm] # control
// [Asm]   mv v6, zero  # live: [v6]
// [Asm]   j .clamp25_13_6  # live: [v6]
// [Asm] 
// [Asm] # block info: defs: [v5], uses: [v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .clamp25_13_4:
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v5]
// [Asm]   j .clamp25_13_5  # live: [v5]
// [Asm] 
// [Asm] # leaf false
// [Asm] calc_pixel7_12:
// [Asm] # block info: defs: [fv5, v4, fv2, fv3, v7], uses: [v7, v4, fv2, fa1, a0, fa0], upward_exposed: [fa1, a0, fa0], params_defs: []
// [Asm] # live_in: [fa0, fa1, a0, zero], live_out: [fv5, v4, fv2, fv3, zero]
// [Asm] # block parameters: []
// [Asm] .calc_pixel7_12_0:
// [Asm]   # save_ctx1  # live: [fa0, zero, a0, fa1]
// [Asm]   fmv.d fv2, fa0  # live: [fv2, zero, a0, fa1]
// [Asm]   fmv.d fv3, fa1  # live: [fv2, fv3, zero, a0]
// [Asm]   mv v4, a0  # live: [v4, fv2, fv3, zero]
// [Asm]   fmul.d fv5, fv2, fv2  # live: [fv5, v4, fv2, fv3, zero]
// [Asm]   lw v7, iter.3  # live: [fv5, v4, fv2, fv3, zero, v7]
// [Asm] # control
// [Asm]   beq v4, v7, .calc_pixel7_12_1  # live: [fv5, v4, fv2, fv3, zero]
// [Asm] 
// [Asm] # block info: defs: [fv9, v11, fv10], uses: [fv5, fv9, v11, fv10, fv3, zero], upward_exposed: [fv5, fv3, zero], params_defs: []
// [Asm] # live_in: [fv5, v4, fv2, fv3, zero], live_out: [fv5, v4, fv2, fv3]
// [Asm] # block parameters: []
// [Asm] .calc_pixel7_12_2:
// [Asm]   fmadd.d fv9, fv3, fv3, fv5  # live: [fv5, fv9, fv2, zero, v4, fv3]
// [Asm]   fld fv10, limit_sq.2, t5  # live: [fv5, fv9, fv10, fv2, zero, v4, fv3]
// [Asm]   fle.d v11, fv10, fv9  # live: [fv5, v11, v4, fv2, fv3, zero]
// [Asm] # control
// [Asm]   bne v11, zero, .calc_pixel7_12_3  # live: [fv5, v4, fv2, fv3]
// [Asm] 
// [Asm] # block info: defs: [t1, fv12, v32, ft0, ft1, a1, fv14, fv15, fv16, fa1, fa2, ft6, a4, fa6, v20, v19, a6, ft10, ft5, ft7, ft4, ft9, v21, a5, fa4, a0, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, fv33, t4, t2, fv18, fv17], uses: [a0, v32, fv12, fv14, fv16, fv15, fa1, fv5, fv2, v20, fv33, fa0, v19, v4, fv18, fv17, fv3], upward_exposed: [fv5, v4, fv2, fv3], params_defs: []
// [Asm] # live_in: [fv5, v4, fv2, fv3], live_out: [v21]
// [Asm] # block parameters: []
// [Asm] .calc_pixel7_12_4:
// [Asm]   li v32, 4611686018427387904  # live: [fv5, v4, v32, fv2, fv3]
// [Asm]   fmv.d.x fv33, v32  # live: [fv5, v4, fv2, fv3, fv33]
// [Asm]   fmul.d fv12, fv33, fv2  # live: [fv5, v4, fv12, fv3]
// [Asm]   fld fv14, c_im.6, t5  # live: [fv5, v4, fv12, fv14, fv3]
// [Asm]   fmadd.d fv15, fv12, fv3, fv14  # live: [fv5, v4, fv15, fv3]
// [Asm]   fnmsub.d fv16, fv3, fv3, fv5  # live: [v4, fv15, fv16]
// [Asm]   fld fv17, c_re.5, t5  # live: [v4, fv15, fv16, fv17]
// [Asm]   fadd.d fv18, fv16, fv17  # live: [v4, fv15, fv18]
// [Asm]   addi v19, v4, 1  # live: [v19, fv15, fv18]
// [Asm]   # save_ctx2  # live: [v19, fv15, fv18]
// [Asm]   fmv.d fa0, fv18  # live: [v19, fv15, fa0]
// [Asm]   fmv.d fa1, fv15  # live: [v19, fa1, fa0]
// [Asm]   mv a0, v19  # live: [fa1, a0, fa0]
// [Asm]   call calc_pixel7_12  # live: [a0]
// [Asm]   mv v20, a0  # live: [v20]
// [Asm]   # restore_ctx2  # live: [v20]
// [Asm] # control
// [Asm]   mv v21, v20  # live: [v21]
// [Asm] 
// [Asm] # block info: defs: [v23], uses: [v21], upward_exposed: [v21], params_defs: [v21]
// [Asm] # live_in: [v21], live_out: [v23]
// [Asm] # block parameters: [v21]
// [Asm] .calc_pixel7_12_5:
// [Asm] # control
// [Asm]   mv v23, v21  # live: [v23]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v23], upward_exposed: [v23], params_defs: [v23]
// [Asm] # live_in: [v23], live_out: []
// [Asm] # block parameters: [v23]
// [Asm] .calc_pixel7_12_6:
// [Asm] # control
// [Asm]   mv a0, v23  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v22, v23], uses: [v22], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v23]
// [Asm] # block parameters: []
// [Asm] .calc_pixel7_12_1:
// [Asm]   lw v22, iter.3  # live: [v22]
// [Asm] # control
// [Asm]   mv v23, v22  # live: [v23]
// [Asm]   j .calc_pixel7_12_6  # live: [v23]
// [Asm] 
// [Asm] # block info: defs: [v21], uses: [v4], upward_exposed: [v4], params_defs: []
// [Asm] # live_in: [v4], live_out: [v21]
// [Asm] # block parameters: []
// [Asm] .calc_pixel7_12_3:
// [Asm] # control
// [Asm]   mv v21, v4  # live: [v21]
// [Asm]   j .calc_pixel7_12_5  # live: [v21]
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_22:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_22_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main94_16  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0, fa0, sp, s0, ra, s11, t5], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$limit.10  # live: [s0, fa0]
// [Asm]   la t5, limit.1  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$limit_sq.22  # live: [s0, fa0]
// [Asm]   la t5, limit_sq.2  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$iter.34  # live: [s0, a0]
// [Asm]   la t5, iter.3  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$_4_6  # live: [s0, fa0]
// [Asm]   la t5, _4  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$c_re.58  # live: [s0, fa0]
// [Asm]   la t5, c_re.5  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$c_im.610  # live: [s0, fa0]
// [Asm]   la t5, c_im.6  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$start_22  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main94_16:
// [Asm] # block info: defs: [v2, t1, v7, ft0, ft1, a1, v12, s11, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, v4, ft5, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15, v3], uses: [v3, v11, v5, a0, a2, a1, s11, v12, a3, zero, a4, v4, v15, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main94_16_0:
// [Asm]   # save_ctx1  # live: [zero, s11]
// [Asm]   # save_ctx2  # live: [zero, s11]
// [Asm]   call minimbt_read_int  # live: [zero, a0, s11]
// [Asm]   mv v3, a0  # live: [zero, s11, v3]
// [Asm]   # restore_ctx2  # live: [zero, s11, v3]
// [Asm]   li v15, 2  # live: [zero, s11, v15, v3]
// [Asm]   mul v4, v3, v15  # live: [zero, v4, s11, v3]
// [Asm]   mul v5, v4, v3  # live: [v5, zero, v4, s11, v3]
// [Asm]   slliw v11, v5, 2  # live: [v11, v5, zero, v4, s11, v3]
// [Asm]   sub v12, s11, v11  # live: [v5, zero, v4, v12, v3]
// [Asm]   andi v2, v12, -8  # live: [v2, v5, zero, v4, v3]
// [Asm]   mv s11, v2  # live: [v2, v5, zero, v4, v3]
// [Asm]   mv a1, v5  # live: [v2, zero, v4, a1, v3]
// [Asm]   mv a0, v2  # live: [v2, zero, a0, v4, a1, v3]
// [Asm]   mv a2, zero  # live: [v2, zero, a0, v4, a2, a1, v3]
// [Asm]   call memseti32  # live: [v2, zero, v4, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, v4, v3]
// [Asm]   mv a0, v4  # live: [v2, zero, a0, v4, v3]
// [Asm]   mv a1, v3  # live: [v2, zero, a0, v4, a1, v3]
// [Asm]   mv a2, zero  # live: [v2, zero, a0, v4, a2, a1, v3]
// [Asm]   mv a3, zero  # live: [v2, zero, a0, v4, a2, a1, a3, v3]
// [Asm]   mv a4, v2  # live: [v2, zero, a0, a4, v4, a2, a1, a3, v3]
// [Asm]   call main_loop30_14  # live: [v3, v4, zero, a0, v2]
// [Asm]   mv v7, a0  # live: [v3, v4, zero, v2]
// [Asm]   # restore_ctx2  # live: [v3, v4, zero, v2]
// [Asm]   # save_ctx2  # live: [v3, v4, zero, v2]
// [Asm]   mv a0, v4  # live: [v3, zero, a0, v2]
// [Asm]   mv a1, v3  # live: [a1, zero, a0, v2]
// [Asm]   mv a2, zero  # live: [a2, a1, zero, a0, v2]
// [Asm]   mv a3, zero  # live: [a2, a1, a3, zero, a0, v2]
// [Asm]   mv a4, v2  # live: [a2, a1, a3, zero, a0, a4]
// [Asm]   call print_loop68_15  # live: [zero, a0]
// [Asm]   mv v8, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] iter.3:
// [Asm]   .zero 4
// [Asm] c_im.6:
// [Asm]   .zero 8
// [Asm] start:
// [Asm]   .zero 4
// [Asm] _4:
// [Asm]   .zero 8
// [Asm] limit_sq.2:
// [Asm]   .zero 8
// [Asm] limit.1:
// [Asm]   .zero 8
// [Asm] c_re.5:
// [Asm]   .zero 8
// [Asm] 
// [Knf] build_knf: Let(("limit", Double), Double(2), Let(("limit_sq", Double), Prim(Var("limit"), Var("limit"), Mul, kind=Some(Double)), Let(("iter", Int), Int(300), Let(("c_re", Double), Neg(Double(0.123), kind=Some(Double)), Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))))))))))
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Let(("limit_sq", Double), Prim(Var("limit"), Var("limit"), Mul, kind=Some(Double)), Let(("iter", Int), Int(300), Let(("c_re", Double), Neg(Double(0.123), kind=Some(Double)), Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))))))))))
// [Knf] build_knf: Prim(Var("limit"), Var("limit"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("limit")
// [Knf] build_knf: Var("limit")
// [Knf] build_knf: Let(("iter", Int), Int(300), Let(("c_re", Double), Neg(Double(0.123), kind=Some(Double)), Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))))))))
// [Knf] build_knf: Int(300)
// [Knf] build_knf: Let(("c_re", Double), Neg(Double(0.123), kind=Some(Double)), Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))))))))
// [Knf] build_knf: Neg(Double(0.123), kind=Some(Double))
// [Knf] build_knf: Double(0.123)
// [Knf] build_knf: Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))))))
// [Knf] build_knf: Double(0.745)
// [Knf] build_knf: LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))))))
// [Knf] build_knf: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))
// [Knf] build_knf: Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))]))))))
// [Knf] build_knf: Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))
// [Knf] build_knf: Var("it")
// [Knf] build_knf: Var("iter")
// [Knf] build_knf: Var("iter")
// [Knf] build_knf: If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: Var("limit_sq")
// [Knf] build_knf: Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))
// [Knf] build_knf: Var("zr2")
// [Knf] build_knf: Var("zi2")
// [Knf] build_knf: Var("it")
// [Knf] build_knf: Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double))
// [Knf] build_knf: Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double))
// [Knf] build_knf: Prim(Double(2), Var("zr"), Mul, kind=Some(Double))
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: Var("c_im")
// [Knf] build_knf: Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double))
// [Knf] build_knf: Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double))
// [Knf] build_knf: Var("zr2")
// [Knf] build_knf: Var("zi2")
// [Knf] build_knf: Var("c_re")
// [Knf] build_knf: App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("calc_pixel")
// [Knf] build_knf: Var("new_zr")
// [Knf] build_knf: Var("new_zi")
// [Knf] build_knf: Prim(Var("it"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("it")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))))
// [Knf] build_knf: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: If(LE(Int(48), Var("i")), Int(48), Var("i"))
// [Knf] build_knf: Int(48)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(48)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))))
// [Knf] build_knf: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])
// [Knf] build_knf: Var("main_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Var("y"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))
// [Knf] build_knf: Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double))
// [Knf] build_knf: Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double))
// [Knf] build_knf: Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double))
// [Knf] build_knf: Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double))
// [Knf] build_knf: Double(3)
// [Knf] build_knf: App(Var("float_of_int"), [Var("x")])
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("float_of_int"), [Var("w")])
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Double(1.5)
// [Knf] build_knf: Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))
// [Knf] build_knf: Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double))
// [Knf] build_knf: Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double))
// [Knf] build_knf: Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double))
// [Knf] build_knf: Double(3)
// [Knf] build_knf: App(Var("float_of_int"), [Var("y")])
// [Knf] build_knf: Var("y")
// [Knf] build_knf: App(Var("float_of_int"), [Var("h")])
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Double(1.5)
// [Knf] build_knf: Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))
// [Knf] build_knf: App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)])
// [Knf] build_knf: Var("calc_pixel")
// [Knf] build_knf: Var("cr")
// [Knf] build_knf: Var("ci")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))
// [Knf] build_knf: Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")]))
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Var("y"), Var("w"), Mul, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("clamp"), [Var("res")])
// [Knf] build_knf: Var("clamp")
// [Knf] build_knf: Var("res")
// [Knf] build_knf: App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])
// [Knf] build_knf: Var("main_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))
// [Knf] build_knf: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]))
// [Knf] build_knf: App(Var("print_char"), [Int(10)])
// [Knf] build_knf: Int(10)
// [Knf] build_knf: App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])
// [Knf] build_knf: Var("print_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Var("y"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))
// [Knf] build_knf: App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))])
// [Knf] build_knf: Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))
// [Knf] build_knf: Int(48)
// [Knf] build_knf: Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Var("y"), Var("w"), Mul, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])
// [Knf] build_knf: Var("print_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))
// [Knf] build_knf: App(Var("read_int"), [])
// [Knf] build_knf: Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit))))
// [Knf] build_knf: Prim(Var("h"), Int(2), Mul, kind=Some(Int))
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))
// [Knf] build_knf: Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0))
// [Knf] build_knf: Prim(Var("w"), Var("h"), Mul, kind=Some(Int))
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit))
// [Knf] build_knf: App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")])
// [Knf] build_knf: Var("main_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)
// [Knf] build_knf: App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")])
// [Knf] build_knf: Var("print_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memseti32
// [Main]   .type memseti32, @function
// [Main] memseti32:
// [Main]   blez a1, .memseti32_b1
// [Main]   slli a1, a1, 2
// [Main]   add a1, a1, a0
// [Main] .memseti32_b0:
// [Main]   sw a2, 0(a0)
// [Main]   addi a0, a0, 4
// [Main]   bne a0, a1, .memseti32_b0
// [Main] .memseti32_b1:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$c_re.58
// [Main]   .type T$c_re.58, @function
// [Main] # leaf true
// [Main] T$c_re.58:
// [Main] .T$c_re.58_0:
// [Main]   fld fa0, _4, t5
// [Main]   fneg.d fa0, fa0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$iter.34
// [Main]   .type T$iter.34, @function
// [Main] # leaf true
// [Main] T$iter.34:
// [Main] .T$iter.34_0:
// [Main]   li a0, 300
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$limit_sq.22
// [Main]   .type T$limit_sq.22, @function
// [Main] # leaf true
// [Main] T$limit_sq.22:
// [Main] .T$limit_sq.22_0:
// [Main]   fld fa0, limit.1, t5
// [Main]   fld fa1, limit.1, t5
// [Main]   fmul.d fa0, fa0, fa1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main_loop30_14
// [Main]   .type main_loop30_14, @function
// [Main] # leaf false
// [Main] main_loop30_14:
// [Main] .main_loop30_14_0:
// [Main]   addi sp, sp, -64
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   mv s2, a2
// [Main]   mv s3, a3
// [Main]   mv s4, a4
// [Main]   beq s3, s1, .main_loop30_14_1
// [Main] 
// [Main] .main_loop30_14_2:
// [Main]   beq s2, s0, .main_loop30_14_3
// [Main] 
// [Main] .main_loop30_14_4:
// [Main]   fcvt.d.w fa0, s2
// [Main]   li a0, 4613937818241073152
// [Main]   fmv.d.x fa1, a0
// [Main]   fmul.d fa0, fa1, fa0
// [Main]   fcvt.d.w fa1, s0
// [Main]   fdiv.d fa0, fa0, fa1
// [Main]   li a0, 4609434218613702656
// [Main]   fmv.d.x fa1, a0
// [Main]   fsub.d fa0, fa0, fa1
// [Main]   fneg.d fa0, fa0
// [Main]   fcvt.d.w fa1, s3
// [Main]   li a0, 4613937818241073152
// [Main]   fmv.d.x fa2, a0
// [Main]   fmul.d fa1, fa2, fa1
// [Main]   fcvt.d.w fa2, s1
// [Main]   fdiv.d fa1, fa1, fa2
// [Main]   li a0, 4609434218613702656
// [Main]   fmv.d.x fa2, a0
// [Main]   fsub.d fa1, fa1, fa2
// [Main]   mv a0, zero
// [Main]   call calc_pixel7_12
// [Main]   mul a1, s3, s0
// [Main]   add s5, a1, s2
// [Main]   call clamp25_13
// [Main]   slliw a1, s5, 2
// [Main]   add a1, s4, a1
// [Main]   sw a0, 0(a1)
// [Main]   addi a2, s2, 1
// [Main]   mv a0, s0
// [Main]   mv a1, s1
// [Main]   mv a3, s3
// [Main]   mv a4, s4
// [Main]   call main_loop30_14
// [Main] 
// [Main] .main_loop30_14_5:
// [Main] 
// [Main] .main_loop30_14_6:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   addi sp, sp, 64
// [Main]   ret
// [Main] 
// [Main] .main_loop30_14_1:
// [Main]   mv a0, zero
// [Main]   j .main_loop30_14_6
// [Main] 
// [Main] .main_loop30_14_3:
// [Main]   addi a3, s3, 1
// [Main]   mv a0, s0
// [Main]   mv a1, s1
// [Main]   mv a2, zero
// [Main]   mv a4, s4
// [Main]   call main_loop30_14
// [Main]   j .main_loop30_14_5
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$limit.10
// [Main]   .type T$limit.10, @function
// [Main] # leaf true
// [Main] T$limit.10:
// [Main] .T$limit.10_0:
// [Main]   li a0, 4611686018427387904
// [Main]   fmv.d.x fa0, a0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_4_6
// [Main]   .type T$_4_6, @function
// [Main] # leaf true
// [Main] T$_4_6:
// [Main] .T$_4_6_0:
// [Main]   li a0, 4593527504729830064
// [Main]   fmv.d.x fa0, a0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl print_loop68_15
// [Main]   .type print_loop68_15, @function
// [Main] # leaf false
// [Main] print_loop68_15:
// [Main] .print_loop68_15_0:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   mv s4, a0
// [Main]   mv s0, a1
// [Main]   mv s2, a2
// [Main]   mv s1, a3
// [Main]   mv s3, a4
// [Main]   beq s1, s0, .print_loop68_15_1
// [Main] 
// [Main] .print_loop68_15_2:
// [Main]   beq s2, s4, .print_loop68_15_3
// [Main] 
// [Main] .print_loop68_15_4:
// [Main]   mul a0, s1, s4
// [Main]   add a0, a0, s2
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s3, a0
// [Main]   lw a0, 0(a0)
// [Main]   addi a0, a0, 48
// [Main]   call minimbt_print_char
// [Main]   addi a2, s2, 1
// [Main]   mv a0, s4
// [Main]   mv a1, s0
// [Main]   mv a3, s1
// [Main]   mv a4, s3
// [Main]   call print_loop68_15
// [Main] 
// [Main] .print_loop68_15_5:
// [Main] 
// [Main] .print_loop68_15_6:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main] .print_loop68_15_1:
// [Main]   mv a0, zero
// [Main]   j .print_loop68_15_6
// [Main] 
// [Main] .print_loop68_15_3:
// [Main]   li a0, 10
// [Main]   call minimbt_print_char
// [Main]   addi a3, s1, 1
// [Main]   mv a0, s4
// [Main]   mv a1, s0
// [Main]   mv a2, zero
// [Main]   mv a4, s3
// [Main]   call print_loop68_15
// [Main]   j .print_loop68_15_5
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$c_im.610
// [Main]   .type T$c_im.610, @function
// [Main] # leaf true
// [Main] T$c_im.610:
// [Main] .T$c_im.610_0:
// [Main]   li a0, 4604885582990058455
// [Main]   fmv.d.x fa0, a0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl clamp25_13
// [Main]   .type clamp25_13, @function
// [Main] # leaf true
// [Main] clamp25_13:
// [Main] .clamp25_13_0:
// [Main]   mv a1, a0
// [Main]   bge zero, a1, .clamp25_13_1
// [Main] 
// [Main] .clamp25_13_2:
// [Main]   li a0, 48
// [Main]   blt a1, a0, .clamp25_13_4
// [Main] 
// [Main] .clamp25_13_3:
// [Main]   li a0, 48
// [Main] 
// [Main] .clamp25_13_5:
// [Main] 
// [Main] .clamp25_13_6:
// [Main]   ret
// [Main] 
// [Main] .clamp25_13_1:
// [Main]   mv a0, zero
// [Main]   j .clamp25_13_6
// [Main] 
// [Main] .clamp25_13_4:
// [Main]   mv a0, a1
// [Main]   j .clamp25_13_5
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl calc_pixel7_12
// [Main]   .type calc_pixel7_12, @function
// [Main] # leaf false
// [Main] calc_pixel7_12:
// [Main] .calc_pixel7_12_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   fmv.d fa2, fa0
// [Main]   mv a1, a0
// [Main]   fmul.d fa0, fa2, fa2
// [Main]   lw a0, iter.3
// [Main]   beq a1, a0, .calc_pixel7_12_1
// [Main] 
// [Main] .calc_pixel7_12_2:
// [Main]   fmadd.d fa3, fa1, fa1, fa0
// [Main]   fld fa4, limit_sq.2, t5
// [Main]   fle.d a0, fa4, fa3
// [Main]   bne a0, zero, .calc_pixel7_12_3
// [Main] 
// [Main] .calc_pixel7_12_4:
// [Main]   li a0, 4611686018427387904
// [Main]   fmv.d.x fa3, a0
// [Main]   fmul.d fa2, fa3, fa2
// [Main]   fld fa3, c_im.6, t5
// [Main]   fmadd.d fa2, fa2, fa1, fa3
// [Main]   fnmsub.d fa0, fa1, fa1, fa0
// [Main]   fld fa1, c_re.5, t5
// [Main]   fadd.d fa0, fa0, fa1
// [Main]   addi a0, a1, 1
// [Main]   fmv.d fa1, fa2
// [Main]   call calc_pixel7_12
// [Main] 
// [Main] .calc_pixel7_12_5:
// [Main] 
// [Main] .calc_pixel7_12_6:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .calc_pixel7_12_1:
// [Main]   lw a0, iter.3
// [Main]   j .calc_pixel7_12_6
// [Main] 
// [Main] .calc_pixel7_12_3:
// [Main]   mv a0, a1
// [Main]   j .calc_pixel7_12_5
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_22
// [Main]   .type T$start_22, @function
// [Main] # leaf false
// [Main] T$start_22:
// [Main] .T$start_22_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main94_16
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$limit.10
// [Main]   la t5, limit.1
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$limit_sq.22
// [Main]   la t5, limit_sq.2
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$iter.34
// [Main]   la t5, iter.3
// [Main]   sw a0, 0(t5)
// [Main]   call T$_4_6
// [Main]   la t5, _4
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$c_re.58
// [Main]   la t5, c_re.5
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$c_im.610
// [Main]   la t5, c_im.6
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$start_22
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main94_16
// [Main]   .type main94_16, @function
// [Main] # leaf false
// [Main] main94_16:
// [Main] .main94_16_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   call minimbt_read_int
// [Main]   mv s0, a0
// [Main]   li a0, 2
// [Main]   mul s1, s0, a0
// [Main]   mul a0, s1, s0
// [Main]   slliw a1, a0, 2
// [Main]   sub a1, s11, a1
// [Main]   andi s2, a1, -8
// [Main]   mv s11, s2
// [Main]   mv a1, a0
// [Main]   mv a0, s2
// [Main]   mv a2, zero
// [Main]   call memseti32
// [Main]   mv a0, s1
// [Main]   mv a1, s0
// [Main]   mv a2, zero
// [Main]   mv a3, zero
// [Main]   mv a4, s2
// [Main]   call main_loop30_14
// [Main]   mv a0, s1
// [Main]   mv a1, s0
// [Main]   mv a2, zero
// [Main]   mv a3, zero
// [Main]   mv a4, s2
// [Main]   call print_loop68_15
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl iter.3
// [Main]   .type iter.3, @object
// [Main] iter.3:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl c_im.6
// [Main]   .type c_im.6, @object
// [Main] c_im.6:
// [Main]   .zero 8
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _4
// [Main]   .type _4, @object
// [Main] _4:
// [Main]   .zero 8
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl limit_sq.2
// [Main]   .type limit_sq.2, @object
// [Main] limit_sq.2:
// [Main]   .zero 8
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl limit.1
// [Main]   .type limit.1, @object
// [Main] limit.1:
// [Main]   .zero 8
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl c_re.5
// [Main]   .type c_re.5, @object
// [Main] c_re.5:
// [Main]   .zero 8
// [Main] 
// [Parser] flags: []
