// [Asm] pre_assigned_registers: Self(fref=f6) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] subst   li v2, 4593527504729830064 ->   li a0, 4593527504729830064
// [Asm] subst   fmv.d.x fv3, v2 ->   fmv.d.x fa0, a0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v23, FnParam(fref=f12, fpref=$f.2) -> v4, Insn(iref=%9) -> fv19, Self(fref=f12) -> v0, Insn(iref=%8) -> fv18, Insn(iref=%10) -> fv6, BlockParam(bref=b0, bpref=$b.0) -> fv9, Insn(iref=%14) -> fv22, BlockParam(bref=b0, bpref=$b.1) -> fv10, BlockParam(bref=b0, bpref=$b.2) -> v11, Insn(iref=%5) -> fv16, Insn(iref=%0) -> fv12, Insn(iref=%4) -> v7, FnParam(fref=f12, fpref=$f.1) -> fv3, Insn(iref=%3) -> v15, Insn(iref=%13) -> fv5, Insn(iref=%7) -> v17, FnParam(fref=f12, fpref=$f.0) -> fv2, BlockParam(bref=b5, bpref=$b.0) -> v24, BlockParam(bref=b6, bpref=$b.0) -> v25, Insn(iref=%2) -> v14, Insn(iref=%1) -> fv13, Insn(iref=%11) -> fv20, Insn(iref=%6) -> fv8, Insn(iref=%12) -> fv21
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%8), BlockParam(bref=b0, bpref=$b.1)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.2), Insn(iref=%2)])
// [Asm] defs: []
// [Asm] live_set: [zero, a0, fa0, fa1]
// [Asm] move_origin: []
// [Asm] defs: [fv2]
// [Asm] live_set: [fv2, zero, a0, fa1]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fv2, zero, a0, fv3]
// [Asm] move_origin: [fa1]
// [Asm] defined: fv3 is F
// [Asm] defs: [v4]
// [Asm] live_set: [fv2, zero, v4, fv3]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: [fv5]
// [Asm] live_set: [fv5, fv2, zero, v4, fv3]
// [Asm] move_origin: []
// [Asm] defined: fv5 is F
// [Asm] defs: [fv6]
// [Asm] live_set: [fv5, fv2, zero, v4, fv6, fv3]
// [Asm] move_origin: []
// [Asm] defined: fv6 is F
// [Asm] defs: [v7]
// [Asm] live_set: [fv5, fv2, zero, v7, v4, fv6, fv3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [fv8]
// [Asm] live_set: [fv5, fv2, zero, fv8, v7, v4, fv6, fv3]
// [Asm] move_origin: []
// [Asm] defined: fv8 is F
// [Asm] defs: [fv9]
// [Asm] live_set: [fv9, fv5, zero, fv8, v7, v4, fv6, fv3]
// [Asm] move_origin: [fv2]
// [Asm] defined: fv9 is F
// [Asm] defs: [fv10]
// [Asm] live_set: [fv9, fv5, fv10, zero, fv8, v7, v4, fv6]
// [Asm] move_origin: [fv3]
// [Asm] defined: fv10 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v11, fv9, fv5, fv10, zero, fv8, v7, fv6]
// [Asm] move_origin: [v4]
// [Asm] defined: v11 is X
// [Asm] defs: [fv12]
// [Asm] live_set: [v11, fv9, fv5, fv10, zero, fv8, v7, fv12, fv6]
// [Asm] move_origin: []
// [Asm] defined: fv12 is F
// [Asm] defs: [fv13]
// [Asm] live_set: [v11, fv9, fv5, fv10, zero, fv13, fv8, v7, fv12, fv6]
// [Asm] move_origin: []
// [Asm] defined: fv13 is F
// [Asm] defs: [v14]
// [Asm] live_set: [v11, fv9, fv5, fv10, v14, zero, fv13, fv8, v7, fv12, fv6]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v11, fv9, fv5, fv10, zero, fv13, fv8, v7, fv12, fv6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v25]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v25]
// [Asm] move_origin: [v7]
// [Asm] defined: v25 is X
// [Asm] defs: []
// [Asm] live_set: [v25]
// [Asm] move_origin: []
// [Asm] defs: [v24]
// [Asm] live_set: [v24]
// [Asm] move_origin: [v11]
// [Asm] defined: v24 is X
// [Asm] defs: [v30]
// [Asm] live_set: [fv5, v11, fv9, fv10, zero, v30, fv8, v7, fv13, fv12, fv6]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: [fv31]
// [Asm] live_set: [fv5, v11, fv9, fv10, fv31, zero, fv8, v7, fv13, fv12, fv6]
// [Asm] move_origin: []
// [Asm] defined: fv31 is F
// [Asm] defs: [fv18]
// [Asm] live_set: [fv5, v11, fv10, zero, fv8, v7, fv13, fv12, fv6, fv18]
// [Asm] move_origin: []
// [Asm] defined: fv18 is F
// [Asm] defs: [fv20]
// [Asm] live_set: [fv5, v11, zero, fv8, v7, fv20, fv13, fv12, fv6]
// [Asm] move_origin: []
// [Asm] defined: fv20 is F
// [Asm] defs: [fv21]
// [Asm] live_set: [fv5, v11, zero, fv8, v7, fv20, fv6, fv21]
// [Asm] move_origin: []
// [Asm] defined: fv21 is F
// [Asm] defs: [fv22]
// [Asm] live_set: [fv5, fv22, v11, zero, fv8, v7, fv20, fv6]
// [Asm] move_origin: []
// [Asm] defined: fv22 is F
// [Asm] defs: [v23]
// [Asm] live_set: [fv5, fv22, zero, v23, fv8, v7, fv20, fv6]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [fv9]
// [Asm] live_set: [fv9, fv5, zero, v23, fv8, v7, fv20, fv6]
// [Asm] move_origin: [fv22]
// [Asm] defined: fv9 is F
// [Asm] defs: [fv10]
// [Asm] live_set: [fv9, fv5, fv10, zero, v23, fv8, v7, fv6]
// [Asm] move_origin: [fv20]
// [Asm] defined: fv10 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v11, fv9, fv5, fv10, zero, fv8, v7, fv6]
// [Asm] move_origin: [v23]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, fv9, fv5, fv10, zero, fv8, v7, fv6]
// [Asm] move_origin: []
// [Asm] defs: [fv16]
// [Asm] live_set: [v11, fv9, fv5, fv10, zero, fv13, fv8, v7, fv12, fv6, fv16]
// [Asm] move_origin: []
// [Asm] defined: fv16 is F
// [Asm] defs: [v17]
// [Asm] live_set: [v11, fv9, fv5, fv10, zero, fv13, fv8, v7, fv12, v17, fv6]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v11, fv9, fv5, fv10, zero, fv13, fv8, v7, fv12, fv6]
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v25]
// [Asm] move_origin: [v24]
// [Asm] defined: v25 is X
// [Asm] subst   fld fv5, c_re.5, t5 ->   fld fa2, c_re.5, t5
// [Asm] subst   fld fv6, c_im.6, t5 ->   fld fa3, c_im.6, t5
// [Asm] subst   lw v7, iter.3 ->   lw a1, iter.3
// [Asm] subst   fld fv8, limit_sq.2, t5 ->   fld fa4, limit_sq.2, t5
// [Asm] subst   fmul.d fv12, fv9, fv9 ->   fmul.d fa5, fa0, fa0
// [Asm] subst   fmul.d fv13, fv10, fv10 ->   fmul.d fa6, fa1, fa1
// [Asm] subst   lw v14, iter.3 ->   lw a2, iter.3
// [Asm] subst   beq v11, v14, .calc_pixel7.111_1 ->   beq a0, a2, .calc_pixel7.111_1
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v25, v7 ->   mv a0, a1
// [Asm] subst   j .calc_pixel7.111_6 ->   j .calc_pixel7.111_6
// [Asm] subst   li v30, 4611686018427387904 ->   li a2, 4611686018427387904
// [Asm] subst   fmv.d.x fv31, v30 ->   fmv.d.x fa7, a2
// [Asm] subst   fmul.d fv18, fv31, fv9 ->   fmul.d fa0, fa7, fa0
// [Asm] subst   fmadd.d fv20, fv18, fv10, fv6 ->   fmadd.d fa1, fa0, fa1, fa3
// [Asm] subst   fsub.d fv21, fv12, fv13 ->   fsub.d fa0, fa5, fa6
// [Asm] subst   fadd.d fv22, fv21, fv5 ->   fadd.d fa0, fa0, fa2
// [Asm] subst   addi v23, v11, 1 ->   addi a0, a0, 1
// [Asm] subst   j .calc_pixel7.111_0 ->   j .calc_pixel7.111_0
// [Asm] subst   fadd.d fv16, fv12, fv13 ->   fadd.d fa7, fa5, fa6
// [Asm] subst   fle.d v17, fv8, fv16 ->   fle.d a2, fa4, fa7
// [Asm] subst   bne v17, zero, .calc_pixel7.111_3 ->   bne a2, zero, .calc_pixel7.111_3
// [Asm] pre_assigned_registers: Self(fref=f4) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] subst   li v2, 300 ->   li a0, 300
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> fv3, Self(fref=f8) -> v0, Insn(iref=%0) -> fv2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [fv2]
// [Asm] live_set: [fv2]
// [Asm] move_origin: []
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] subst   fld fv2, _4, t5 ->   fld fa0, _4, t5
// [Asm] subst   fneg.d fv3, fv2 ->   fneg.d fa0, fa0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] subst   li v2, 4611686018427387904 ->   li a0, 4611686018427387904
// [Asm] subst   fmv.d.x fv3, v2 ->   fmv.d.x fa0, a0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: BlockParam(bref=b12, bpref=$b.0) -> v38, FnParam(fref=f13, fpref=$f.6) -> fv8, Insn(iref=%15) -> v29, BlockParam(bref=b0, bpref=$b.5) -> fv14, Insn(iref=%8) -> fv22, FnParam(fref=f13, fpref=$f.0) -> v2, BlockParam(bref=b10, bpref=$b.0) -> v33, FnParam(fref=f13, fpref=$f.3) -> v5, Insn(iref=%10) -> fv24, BlockParam(bref=b0, bpref=$b.4) -> v13, BlockParam(bref=b0, bpref=$b.3) -> v12, Insn(iref=%14) -> v28, FnParam(fref=f13, fpref=$f.5) -> fv7, Insn(iref=%4) -> fv18, Insn(iref=%1) -> v17, Insn(iref=%11) -> fv25, Self(fref=f13) -> v0, BlockParam(bref=b0, bpref=$b.6) -> fv15, FnParam(fref=f13, fpref=$f.2) -> v4, Insn(iref=%6) -> fv20, BlockParam(bref=b9, bpref=$b.0) -> v32, FnParam(fref=f13, fpref=$f.4) -> v6, Insn(iref=%9) -> fv23, Insn(iref=%16) -> v30, BlockParam(bref=b0, bpref=$b.0) -> v9, BlockParam(bref=b0, bpref=$b.1) -> v10, BlockParam(bref=b0, bpref=$b.2) -> v11, Insn(iref=%5) -> fv19, Insn(iref=%0) -> v16, Insn(iref=%19) -> v36, Insn(iref=%18) -> v35, Insn(iref=%13) -> v27, Insn(iref=%7) -> fv21, Insn(iref=%17) -> v31, Insn(iref=%2) -> v37, Insn(iref=%20) -> v34, FnParam(fref=f13, fpref=$f.1) -> v3, Insn(iref=%12) -> fv26
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%15), width=@32))
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=48), Insn(iref=%13)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%13), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.1)])
// [Asm] defs: [v33]
// [Asm] live_set: [v11, v10, v29, v13, zero, v12, fv14, fv15, v33, v9]
// [Asm] move_origin: [v32]
// [Asm] defined: v33 is X
// [Asm] defs: [v37]
// [Asm] live_set: [v10, zero, v13, v37, fv14, fv15, v9]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: []
// [Asm] live_set: [v10, zero, v13, v37, fv14, fv15, v9]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v10, zero, v13, v37, fv14, fv15, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v10, zero, v13, v37, fv14, fv15, v9]
// [Asm] move_origin: [zero]
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v10, zero, v13, v12, fv14, fv15, v9]
// [Asm] move_origin: [v37]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v13, v12, fv14, fv15, v9]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v13, v12, fv14, fv15, v9]
// [Asm] move_origin: [fv14]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v13, v12, fv14, fv15, v9]
// [Asm] move_origin: [fv15]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v13, v12, fv14, fv15, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, a0, a4, fa0, a2, a1, a3, fa1]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, a4, fa0, a2, a1, a3, fa1, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, a4, fa0, a2, a3, fa1, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, zero, a4, fa0, v4, a3, fa1, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, zero, a4, fa0, v4, fa1, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, zero, fa0, v4, v6, fa1, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [fv7]
// [Asm] live_set: [v2, v5, zero, v4, v6, fa1, fv7, v3]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv7 is F
// [Asm] defs: [fv8]
// [Asm] live_set: [v2, v5, zero, fv8, v4, v6, fv7, v3]
// [Asm] move_origin: [fa1]
// [Asm] defined: fv8 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, fv8, v4, v6, v9, fv7, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero, fv8, v4, v6, v9, fv7]
// [Asm] move_origin: [v3]
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, v10, zero, fv8, v6, v9, fv7]
// [Asm] move_origin: [v4]
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v10, zero, fv8, v6, v12, v9, fv7]
// [Asm] move_origin: [v5]
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v10, zero, v13, fv8, v12, v9, fv7]
// [Asm] move_origin: [v6]
// [Asm] defined: v13 is X
// [Asm] defs: [fv14]
// [Asm] live_set: [v11, v10, zero, v13, fv8, v12, fv14, v9]
// [Asm] move_origin: [fv7]
// [Asm] defined: fv14 is F
// [Asm] defs: [fv15]
// [Asm] live_set: [v11, v10, zero, v13, v12, fv14, fv15, v9]
// [Asm] move_origin: [fv8]
// [Asm] defined: fv15 is F
// [Asm] defs: [v41]
// [Asm] live_set: [v11, v10, v29, v13, zero, v41, v12, fv14, fv15, v9]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v11, v10, v29, v13, zero, v32, v12, fv14, fv15, v9]
// [Asm] move_origin: [v41]
// [Asm] defined: v32 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v11, v10, v29, v13, zero, v32, v12, fv14, fv15, v9]
// [Asm] move_origin: [v27]
// [Asm] defined: v32 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v29, v13, zero, v32, v12, fv14, fv15, v9]
// [Asm] move_origin: []
// [Asm] defs: [fv18]
// [Asm] live_set: [v11, v10, zero, v13, v12, fv14, fv15, fv18, v9]
// [Asm] move_origin: []
// [Asm] defined: fv18 is F
// [Asm] defs: [v59]
// [Asm] live_set: [v11, v10, zero, v13, v59, v12, fv14, fv15, fv18, v9]
// [Asm] move_origin: []
// [Asm] defined: v59 is X
// [Asm] defs: [fv60]
// [Asm] live_set: [v11, v10, zero, v13, fv60, v12, fv14, fv15, fv18, v9]
// [Asm] move_origin: []
// [Asm] defined: fv60 is F
// [Asm] defs: [fv19]
// [Asm] live_set: [v11, v10, zero, v13, fv19, v12, fv14, fv15, v9]
// [Asm] move_origin: []
// [Asm] defined: fv19 is F
// [Asm] defs: [fv20]
// [Asm] live_set: [v11, v10, zero, v13, fv20, v12, fv14, fv15, v9]
// [Asm] move_origin: []
// [Asm] defined: fv20 is F
// [Asm] defs: [v55]
// [Asm] live_set: [v11, v10, zero, v13, fv20, v12, fv14, fv15, v9, v55]
// [Asm] move_origin: []
// [Asm] defined: v55 is X
// [Asm] defs: [fv56]
// [Asm] live_set: [v11, v10, fv56, zero, v13, fv20, v12, fv14, fv15, v9]
// [Asm] move_origin: []
// [Asm] defined: fv56 is F
// [Asm] defs: [fv21]
// [Asm] live_set: [v11, v10, zero, v13, v12, fv14, fv15, v9, fv21]
// [Asm] move_origin: []
// [Asm] defined: fv21 is F
// [Asm] defs: [fv22]
// [Asm] live_set: [v11, fv22, v10, zero, v13, v12, fv14, fv15, v9]
// [Asm] move_origin: []
// [Asm] defined: fv22 is F
// [Asm] defs: [fv23]
// [Asm] live_set: [v11, fv22, fv23, v10, zero, v13, v12, fv14, fv15, v9]
// [Asm] move_origin: []
// [Asm] defined: fv23 is F
// [Asm] defs: [v50]
// [Asm] live_set: [v11, fv22, fv23, v10, zero, v13, v50, v12, fv14, fv15, v9]
// [Asm] move_origin: []
// [Asm] defined: v50 is X
// [Asm] defs: [fv51]
// [Asm] live_set: [v11, fv22, fv23, v10, zero, v13, v12, fv14, fv15, v9, fv51]
// [Asm] move_origin: []
// [Asm] defined: fv51 is F
// [Asm] defs: [fv24]
// [Asm] live_set: [v11, fv22, fv24, v10, zero, v13, v12, fv14, fv15, v9]
// [Asm] move_origin: []
// [Asm] defined: fv24 is F
// [Asm] defs: [fv25]
// [Asm] live_set: [v11, fv22, v10, zero, v13, fv25, v12, fv14, fv15, v9]
// [Asm] move_origin: []
// [Asm] defined: fv25 is F
// [Asm] defs: [v46]
// [Asm] live_set: [v11, fv22, v46, v10, zero, v13, fv25, v12, fv14, fv15, v9]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: [fv47]
// [Asm] live_set: [v11, fv22, v10, zero, v13, fv25, v12, fv14, fv47, fv15, v9]
// [Asm] move_origin: []
// [Asm] defined: fv47 is F
// [Asm] defs: [fv26]
// [Asm] live_set: [v11, fv22, v10, zero, v13, v12, fv14, fv15, v9, fv26]
// [Asm] move_origin: []
// [Asm] defined: fv26 is F
// [Asm] defs: []
// [Asm] live_set: [v11, fv22, v10, zero, v13, v12, fv14, fv15, v9, fv26]
// [Asm] move_origin: []
// [Asm] defs: [fa0]
// [Asm] live_set: [v11, v10, zero, v13, fa0, v12, fv14, fv15, v9, fv26]
// [Asm] move_origin: [fv22]
// [Asm] defined: fa0 is F
// [Asm] defs: [fa1]
// [Asm] live_set: [v11, v10, zero, v13, fa0, v12, fv14, fv15, v9, fa1]
// [Asm] move_origin: [fv26]
// [Asm] defined: fa1 is F
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v10, zero, v13, a0, fa0, v12, fv14, fv15, v9, fa1]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, zero, v13, a0, v12, fv14, fv15, v9]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v27]
// [Asm] live_set: [v11, v10, zero, v13, v27, v12, fv14, fv15, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v13, v27, v12, fv14, fv15, v9]
// [Asm] move_origin: []
// [Asm] defs: [v28]
// [Asm] live_set: [v11, v10, zero, v13, v27, v12, fv14, fv15, v28, v9]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: [v29]
// [Asm] live_set: [v11, v10, zero, v29, v13, v27, v12, fv14, fv15, v9]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v29, v13, v27, v12, fv14, fv15, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v12, fv14, fv15, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v12, fv14, fv15, v9]
// [Asm] move_origin: []
// [Asm] defs: [v38]
// [Asm] live_set: [v38]
// [Asm] move_origin: [zero]
// [Asm] defined: v38 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v38]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v33]
// [Asm] live_set: [v11, v10, v29, v13, zero, v12, fv14, fv15, v33, v9]
// [Asm] move_origin: [zero]
// [Asm] defined: v33 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v29, v13, zero, v12, fv14, fv15, v33, v9]
// [Asm] move_origin: []
// [Asm] defs: [v42]
// [Asm] live_set: [v11, v10, v13, v29, zero, v42, v27, v12, fv14, fv15, v9]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v29, zero, v27, v12, fv14, fv15, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v13, v12, fv14, fv15, v9]
// [Asm] move_origin: []
// [Asm] defs: [v36]
// [Asm] live_set: [v10, zero, v13, v36, v12, fv14, fv15, v9]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [v10, zero, v13, v36, v12, fv14, fv15, v9]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v10, zero, v13, v36, v12, fv14, fv15, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v10, zero, v13, v12, fv14, fv15, v9]
// [Asm] move_origin: [v36]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v13, v12, fv14, fv15, v9]
// [Asm] move_origin: [v12]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v13, v12, fv14, fv15, v9]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v13, v12, fv14, fv15, v9]
// [Asm] move_origin: [fv14]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v13, v12, fv14, fv15, v9]
// [Asm] move_origin: [fv15]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v13, v12, fv14, fv15, v9]
// [Asm] move_origin: []
// [Asm] subst   addi v37, v12, 1 ->   addi a0, s3, 1
// [Asm] subst   mv v11, zero ->   mv s0, zero
// [Asm] subst   mv v12, v37 ->   mv s3, a0
// [Asm] subst   j .main_loop30.112_0 ->   j .main_loop30.112_0
// [Asm] subst   mv v9, v2 ->   mv s4, a0
// [Asm] subst   mv v10, v3 ->   mv s1, a1
// [Asm] subst   mv v11, v4 ->   mv s0, a2
// [Asm] subst   mv v12, v5 ->   mv s3, a3
// [Asm] subst   mv v13, v6 ->   mv s2, a4
// [Asm] subst   fmv.d fv14, fv7 ->   fmv.d fs0, fa0
// [Asm] subst   fmv.d fv15, fv8 ->   fmv.d fs1, fa1
// [Asm] subst   li v41, 48 ->   li a0, 48
// [Asm] subst   j .main_loop30.112_9 ->   j .main_loop30.112_9
// [Asm] subst   fcvt.d.w fv18, v11 ->   fcvt.d.w fa0, s0
// [Asm] subst   li v59, 4613937818241073152 ->   li a0, 4613937818241073152
// [Asm] subst   fmv.d.x fv60, v59 ->   fmv.d.x fa1, a0
// [Asm] subst   fmul.d fv19, fv60, fv18 ->   fmul.d fa0, fa1, fa0
// [Asm] subst   fdiv.d fv20, fv19, fv14 ->   fdiv.d fa0, fa0, fs0
// [Asm] subst   li v55, 4609434218613702656 ->   li a0, 4609434218613702656
// [Asm] subst   fmv.d.x fv56, v55 ->   fmv.d.x fa1, a0
// [Asm] subst   fsub.d fv21, fv20, fv56 ->   fsub.d fa0, fa0, fa1
// [Asm] subst   fneg.d fv22, fv21 ->   fneg.d fa0, fa0
// [Asm] subst   fcvt.d.w fv23, v12 ->   fcvt.d.w fa1, s3
// [Asm] subst   li v50, 4613937818241073152 ->   li a0, 4613937818241073152
// [Asm] subst   fmv.d.x fv51, v50 ->   fmv.d.x fa2, a0
// [Asm] subst   fmul.d fv24, fv51, fv23 ->   fmul.d fa1, fa2, fa1
// [Asm] subst   fdiv.d fv25, fv24, fv15 ->   fdiv.d fa1, fa1, fs1
// [Asm] subst   li v46, 4609434218613702656 ->   li a0, 4609434218613702656
// [Asm] subst   fmv.d.x fv47, v46 ->   fmv.d.x fa2, a0
// [Asm] subst   fsub.d fv26, fv25, fv47 ->   fsub.d fa1, fa1, fa2
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   call calc_pixel7.111 ->   call calc_pixel7.111
// [Asm] subst   mul v28, v12, v9 ->   mul a1, s3, s4
// [Asm] subst   add v29, v28, v11 ->   add a1, a1, s0
// [Asm] subst   bge zero, v27, .main_loop30.112_5 ->   bge zero, a0, .main_loop30.112_5
// [Asm] subst   beq v11, v9, .main_loop30.112_3 ->   beq s0, s4, .main_loop30.112_3
// [Asm] subst   beq v12, v10, .main_loop30.112_1 ->   beq s3, s1, .main_loop30.112_1
// [Asm] subst   mv v38, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v33, zero ->   mv a0, zero
// [Asm] subst   j .main_loop30.112_10 ->   j .main_loop30.112_10
// [Asm] subst   li v42, 48 ->   li a2, 48
// [Asm] subst   blt v27, v42, .main_loop30.112_8 ->   blt a0, a2, .main_loop30.112_8
// [Asm] subst   th.surw v33, v13, v29, 2 ->   th.surw a0, s2, a1, 2
// [Asm] subst   addi v36, v11, 1 ->   addi a0, s0, 1
// [Asm] subst   mv v11, v36 ->   mv s0, a0
// [Asm] subst   j .main_loop30.112_0 ->   j .main_loop30.112_0
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v6, Mem(fref=f15, mref=m0) -> v2, Insn(iref=%7) -> v10, Self(fref=f15) -> v0, Insn(iref=%2) -> v5, Insn(iref=%1) -> v4, Insn(iref=%6) -> v9, Insn(iref=%5) -> fv8, Insn(iref=%0) -> v3, Insn(iref=%4) -> fv7
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, s11]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [zero, s11, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [zero, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v4]
// [Asm] live_set: [zero, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v5, zero, v4, s11, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v2, v5, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v5, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, zero, v4, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: a1 is X
// [Asm] defs: [fv7]
// [Asm] live_set: [v2, zero, v4, fv7, v3]
// [Asm] move_origin: []
// [Asm] defined: fv7 is F
// [Asm] defs: [fv8]
// [Asm] live_set: [v2, zero, fv8, v4, fv7, v3]
// [Asm] move_origin: []
// [Asm] defined: fv8 is F
// [Asm] defs: []
// [Asm] live_set: [v2, zero, fv8, v4, fv7, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, zero, a0, fv8, v4, fv7, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, zero, a0, fv8, v4, a1, fv7, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v2, zero, a0, fv8, a2, v4, a1, fv7, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v2, zero, a0, fv8, a2, v4, a1, a3, fv7, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v2, zero, a0, a4, fv8, a2, v4, a1, a3, fv7, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a4 is X
// [Asm] defs: [fa0]
// [Asm] live_set: [v2, zero, a0, a4, fa0, fv8, a2, v4, a1, a3, v3]
// [Asm] move_origin: [fv7]
// [Asm] defined: fa0 is F
// [Asm] defs: [fa1]
// [Asm] live_set: [v2, zero, a0, a4, fa0, v4, a2, a1, a3, fa1, v3]
// [Asm] move_origin: [fv8]
// [Asm] defined: fa1 is F
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v3, v4, zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v3, zero, a0, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0, v2]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, zero, a0, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [a2, a1, a3, zero, a0, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [a2, a1, a3, zero, a0, a4]
// [Asm] move_origin: [v2]
// [Asm] defined: a4 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v10]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] subst   call minimbt_read_int ->   call minimbt_read_int
// [Asm] subst   mv v3, a0 ->   mv s0, a0
// [Asm] subst   slli v4, v3, 1 ->   slli s1, s0, 1
// [Asm] subst   mul v5, v4, v3 ->   mul a0, s1, s0
// [Asm] subst   slliw v15, v5, 2 ->   slliw a1, a0, 2
// [Asm] subst   sub v2, s11, v15 ->   sub s2, s11, a1
// [Asm] subst   andi s11, v2, -8 ->   andi s11, s2, -8
// [Asm] subst   mv a1, v5 ->   mv a1, a0
// [Asm] subst   fcvt.d.w fv7, v4 ->   fcvt.d.w fa0, s1
// [Asm] subst   fcvt.d.w fv8, v3 ->   fcvt.d.w fa1, s0
// [Asm] subst   mv a0, v4 ->   mv a0, s1
// [Asm] subst   mv a1, v3 ->   mv a1, s0
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   mv a3, zero ->   mv a3, zero
// [Asm] subst   mv a4, v2 ->   mv a4, s2
// [Asm] subst   call main_loop30.112 ->   call main_loop30.112
// [Asm] subst   mv a0, v4 ->   mv a0, s1
// [Asm] subst   mv a1, v3 ->   mv a1, s0
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   mv a3, zero ->   mv a3, zero
// [Asm] subst   mv a4, v2 ->   mv a4, s2
// [Asm] subst   call print_loop68.113 ->   call print_loop68.113
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f10) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] subst   li v2, 4604885582990058455 ->   li a0, 4604885582990058455
// [Asm] subst   fmv.d.x fv3, v2 ->   fmv.d.x fa0, a0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%0) -> fv2, Insn(iref=%2) -> fv3
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [fv2]
// [Asm] live_set: [fv2]
// [Asm] move_origin: []
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] subst   fld fv2, limit.1, t5 ->   fld fa0, limit.1, t5
// [Asm] subst   fmul.d fv3, fv2, fv2 ->   fmul.d fa0, fa0, fa0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f14, fpref=$f.2) -> v4, Insn(iref=%9) -> v19, FnParam(fref=f14, fpref=$f.1) -> v3, Insn(iref=%8) -> v18, Insn(iref=%10) -> v20, BlockParam(bref=b0, bpref=$b.4) -> v11, BlockParam(bref=b0, bpref=$b.3) -> v10, BlockParam(bref=b0, bpref=$b.0) -> v7, BlockParam(bref=b0, bpref=$b.1) -> v8, FnParam(fref=f14, fpref=$f.4) -> v6, BlockParam(bref=b0, bpref=$b.2) -> v9, FnParam(fref=f14, fpref=$f.0) -> v2, Insn(iref=%5) -> v14, Insn(iref=%0) -> v12, Insn(iref=%3) -> v22, Insn(iref=%7) -> v17, Self(fref=f14) -> v0, BlockParam(bref=b6, bpref=$b.0) -> v23, Insn(iref=%2) -> v21, Insn(iref=%1) -> v13, Insn(iref=%11) -> v16, Insn(iref=%6) -> v15, FnParam(fref=f14, fpref=$f.3) -> v5
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%6), width=@32))
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.1)])
// [Asm] defs: []
// [Asm] live_set: [a2, a1, a3, zero, a0, a4]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, a3, zero, a4, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, a3, zero, a4, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, a3, zero, a4, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, zero, a4, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v4, v6, v5, zero, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v4, v6, v5, zero, v7]
// [Asm] move_origin: [v2]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v4, v6, v5, zero, v8]
// [Asm] move_origin: [v3]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v7, v6, v5, zero, v9, v8]
// [Asm] move_origin: [v4]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v7, v6, v10, zero, v9, v8]
// [Asm] move_origin: [v5]
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: [v6]
// [Asm] defined: v11 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v23]
// [Asm] move_origin: [zero]
// [Asm] defined: v23 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v11, v14, v10, zero, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v11, v10, zero, v7, v8, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v11, v10, zero, v7, v8, v17, v9]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v11, v10, v18, zero, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v18, zero, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v10, zero, a0, v7, v8, v9]
// [Asm] move_origin: [v18]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, zero, a0, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v19]
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defs: [v20]
// [Asm] live_set: [v11, v10, zero, v20, v7, v8]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v20, v7, v8]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v20, v7, v8]
// [Asm] move_origin: [v8]
// [Asm] defs: [v9]
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: [v20]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v23]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v7, v8]
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v11, v25, v10, zero, v7, v8]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v10, zero, a0, v7, v8]
// [Asm] move_origin: [v25]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, zero, a0, v7, v8]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v21]
// [Asm] live_set: [v11, v10, zero, v7, v8]
// [Asm] move_origin: [a0]
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v7, v8]
// [Asm] move_origin: []
// [Asm] defs: [v22]
// [Asm] live_set: [v11, zero, v22, v7, v8]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v11, zero, v22, v7, v8]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v11, zero, v22, v7, v8]
// [Asm] move_origin: [v8]
// [Asm] defs: [v9]
// [Asm] live_set: [v11, zero, v22, v7, v8, v9]
// [Asm] move_origin: [zero]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: [v22]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] subst   mv v7, v2 ->   mv s0, a0
// [Asm] subst   mv v8, v3 ->   mv s1, a1
// [Asm] subst   mv v9, v4 ->   mv s2, a2
// [Asm] subst   mv v10, v5 ->   mv s3, a3
// [Asm] subst   mv v11, v6 ->   mv s4, a4
// [Asm] subst   mv v23, zero ->   mv a0, zero
// [Asm] subst   mul v14, v10, v7 ->   mul a0, s3, s0
// [Asm] subst   add v15, v14, v9 ->   add a0, a0, s2
// [Asm] subst   th.lurw v17, v11, v15, 2 ->   th.lurw a0, s4, a0, 2
// [Asm] subst   addi v18, v17, 48 ->   addi a0, a0, 48
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   addi v20, v9, 1 ->   addi a0, s2, 1
// [Asm] subst   mv v9, v20 ->   mv s2, a0
// [Asm] subst   j .print_loop68.113_0 ->   j .print_loop68.113_0
// [Asm] subst   ret ->   ret
// [Asm] subst   beq v10, v8, .print_loop68.113_1 ->   beq s3, s1, .print_loop68.113_1
// [Asm] subst   li v25, 10 ->   li a0, 10
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   addi v22, v10, 1 ->   addi a0, s3, 1
// [Asm] subst   mv v9, zero ->   mv s2, zero
// [Asm] subst   mv v10, v22 ->   mv s3, a0
// [Asm] subst   j .print_loop68.113_0 ->   j .print_loop68.113_0
// [Asm] subst   beq v9, v7, .print_loop68.113_3 ->   beq s2, s0, .print_loop68.113_3
// [Asm] pre_assigned_registers: Self(fref=f20) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] subst   call main94.114 ->   call main94.114
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf true
// [Asm] T$iter.3:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$iter.3_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 300  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$c_re.5:
// [Asm] # block info: defs: [fv2, fv3, fa0], uses: [fv2, fv3, fa0], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$c_re.5_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   fld fv2, _4, t5  # live: [fv2]
// [Asm]   fneg.d fv3, fv2  # live: [fv3]
// [Asm] # control
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] calc_pixel7.111:
// [Asm] # block info: defs: [fv5, fv9, v11, fv10, fv2, v7, fv8, v4, fv6, fv3], uses: [fa0, v4, fv2, fa1, a0, fv3], upward_exposed: [fa1, a0, fa0], params_defs: []
// [Asm] # live_in: [fa0, fa1, a0, zero], live_out: [v11, fv9, fv5, fv10, zero, fv8, v7, fv6]
// [Asm] # block parameters: []
// [Asm] .calc_pixel7.111_8:
// [Asm]   # save_ctx1  # live: [zero, a0, fa0, fa1]
// [Asm]   fmv.d fv2, fa0  # live: [fv2, zero, a0, fa1]
// [Asm]   fmv.d fv3, fa1  # live: [fv2, zero, a0, fv3]
// [Asm]   mv v4, a0  # live: [fv2, zero, v4, fv3]
// [Asm]   fld fv5, c_re.5, t5  # live: [fv5, fv2, zero, v4, fv3]
// [Asm]   fld fv6, c_im.6, t5  # live: [fv5, fv2, zero, v4, fv6, fv3]
// [Asm]   lw v7, iter.3  # live: [fv5, fv2, zero, v7, v4, fv6, fv3]
// [Asm]   fld fv8, limit_sq.2, t5  # live: [fv5, fv2, zero, fv8, v7, v4, fv6, fv3]
// [Asm] # control
// [Asm]   fmv.d fv9, fv2  # live: [fv9, fv5, zero, fv8, v7, v4, fv6, fv3]
// [Asm]   fmv.d fv10, fv3  # live: [fv9, fv5, fv10, zero, fv8, v7, v4, fv6]
// [Asm]   mv v11, v4  # live: [v11, fv9, fv5, fv10, zero, fv8, v7, fv6]
// [Asm] 
// [Asm] # block info: defs: [fv12, v14, fv13], uses: [fv9, v11, fv10, v14], upward_exposed: [fv9, v11, fv10], params_defs: [fv9, v11, fv10]
// [Asm] # live_in: [v11, fv9, fv5, fv10, zero, v7, fv8, fv6], live_out: [v11, fv9, fv5, fv10, zero, fv13, fv8, v7, fv12, fv6]
// [Asm] # block parameters: [fv9, fv10, v11]
// [Asm] .calc_pixel7.111_0:
// [Asm]   fmul.d fv12, fv9, fv9  # live: [v11, fv9, fv5, fv10, zero, fv8, v7, fv12, fv6]
// [Asm]   fmul.d fv13, fv10, fv10  # live: [v11, fv9, fv5, fv10, zero, fv13, fv8, v7, fv12, fv6]
// [Asm]   lw v14, iter.3  # live: [v11, fv9, fv5, fv10, v14, zero, fv13, fv8, v7, fv12, fv6]
// [Asm] # control
// [Asm]   beq v11, v14, .calc_pixel7.111_1  # live: [v11, fv9, fv5, fv10, zero, fv13, fv8, v7, fv12, fv6]
// [Asm] 
// [Asm] # block info: defs: [v17, fv16], uses: [fv8, fv12, v17, fv16, zero, fv13], upward_exposed: [fv8, fv12, zero, fv13], params_defs: []
// [Asm] # live_in: [v11, fv9, fv5, fv10, zero, fv13, fv8, v7, fv12, fv6], live_out: [v11, fv9, fv5, fv10, zero, fv13, fv8, v7, fv12, fv6]
// [Asm] # block parameters: []
// [Asm] .calc_pixel7.111_2:
// [Asm]   fadd.d fv16, fv12, fv13  # live: [v11, fv9, fv5, fv10, zero, fv13, fv8, v7, fv12, fv6, fv16]
// [Asm]   fle.d v17, fv8, fv16  # live: [v11, fv9, fv5, fv10, zero, fv13, fv8, v7, fv12, v17, fv6]
// [Asm] # control
// [Asm]   bne v17, zero, .calc_pixel7.111_3  # live: [v11, fv9, fv5, fv10, zero, fv13, fv8, v7, fv12, fv6]
// [Asm] 
// [Asm] # block info: defs: [fv22, fv9, v11, fv10, fv31, v30, v23, fv20, fv18, fv21], uses: [v11, fv10, v30, fv20, fv12, fv6, fv9, fv5, fv22, fv31, v23, fv13, fv18, fv21], upward_exposed: [fv9, fv5, v11, fv10, fv13, fv12, fv6], params_defs: []
// [Asm] # live_in: [fv9, fv5, v11, fv10, zero, fv13, fv8, v7, fv12, fv6], live_out: [v11, fv9, fv5, fv10, zero, fv8, v7, fv6]
// [Asm] # block parameters: []
// [Asm] .calc_pixel7.111_4:
// [Asm]   li v30, 4611686018427387904  # live: [fv5, v11, fv9, fv10, zero, v30, fv8, v7, fv13, fv12, fv6]
// [Asm]   fmv.d.x fv31, v30  # live: [fv5, v11, fv9, fv10, fv31, zero, fv8, v7, fv13, fv12, fv6]
// [Asm]   fmul.d fv18, fv31, fv9  # live: [fv5, v11, fv10, zero, fv8, v7, fv13, fv12, fv6, fv18]
// [Asm]   fmadd.d fv20, fv18, fv10, fv6  # live: [fv5, v11, zero, fv8, v7, fv20, fv13, fv12, fv6]
// [Asm]   fsub.d fv21, fv12, fv13  # live: [fv5, v11, zero, fv8, v7, fv20, fv6, fv21]
// [Asm]   fadd.d fv22, fv21, fv5  # live: [fv5, fv22, v11, zero, fv8, v7, fv20, fv6]
// [Asm]   addi v23, v11, 1  # live: [fv5, fv22, zero, v23, fv8, v7, fv20, fv6]
// [Asm] # control
// [Asm]   fmv.d fv9, fv22  # live: [fv9, fv5, zero, v23, fv8, v7, fv20, fv6]
// [Asm]   fmv.d fv10, fv20  # live: [fv9, fv5, fv10, zero, v23, fv8, v7, fv6]
// [Asm]   mv v11, v23  # live: [v11, fv9, fv5, fv10, zero, fv8, v7, fv6]
// [Asm]   j .calc_pixel7.111_0  # live: [v11, fv9, fv5, fv10, zero, fv8, v7, fv6]
// [Asm] 
// [Asm] # block info: defs: [v24], uses: [v11], upward_exposed: [v11], params_defs: []
// [Asm] # live_in: [v11], live_out: [v24]
// [Asm] # block parameters: []
// [Asm] .calc_pixel7.111_3:
// [Asm] # control
// [Asm]   mv v24, v11  # live: [v24]
// [Asm] 
// [Asm] # block info: defs: [v25], uses: [v24], upward_exposed: [v24], params_defs: [v24]
// [Asm] # live_in: [v24], live_out: [v25]
// [Asm] # block parameters: [v24]
// [Asm] .calc_pixel7.111_5:
// [Asm] # control
// [Asm]   mv v25, v24  # live: [v25]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v25, a0], upward_exposed: [v25], params_defs: [v25]
// [Asm] # live_in: [v25], live_out: []
// [Asm] # block parameters: [v25]
// [Asm] .calc_pixel7.111_6:
// [Asm] # control
// [Asm]   mv a0, v25  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v25], uses: [v7], upward_exposed: [v7], params_defs: []
// [Asm] # live_in: [v7], live_out: [v25]
// [Asm] # block parameters: []
// [Asm] .calc_pixel7.111_1:
// [Asm] # control
// [Asm]   mv v25, v7  # live: [v25]
// [Asm]   j .calc_pixel7.111_6  # live: [v25]
// [Asm] 
// [Asm] # leaf true
// [Asm] T$limit.1:
// [Asm] # block info: defs: [fa0, fv3, v2], uses: [fa0, fv3, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$limit.1_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 4611686018427387904  # live: [v2]
// [Asm]   fmv.d.x fv3, v2  # live: [fv3]
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$_4:
// [Asm] # block info: defs: [fa0, fv3, v2], uses: [fa0, fv3, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_4_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 4593527504729830064  # live: [v2]
// [Asm]   fmv.d.x fv3, v2  # live: [fv3]
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$c_im.6:
// [Asm] # block info: defs: [fa0, fv3, v2], uses: [fa0, fv3, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$c_im.6_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 4604885582990058455  # live: [v2]
// [Asm]   fmv.d.x fv3, v2  # live: [fv3]
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main94.114:
// [Asm] # block info: defs: [v2, t1, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, ft7, ft4, v5, ft9, v10, a5, fa4, a0, fv8, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15, fv7, v3], uses: [v3, v5, a0, fv8, a2, a1, s11, a3, fa1, zero, a4, fa0, v4, v15, fv7, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main94.114_0:
// [Asm]   # save_ctx1  # live: [zero, s11]
// [Asm]   # save_ctx2  # live: [zero, s11]
// [Asm]   call minimbt_read_int  # live: [zero, a0, s11]
// [Asm]   mv v3, a0  # live: [zero, s11, v3]
// [Asm]   # restore_ctx2  # live: [zero, s11, v3]
// [Asm]   slli v4, v3, 1  # live: [zero, v4, s11, v3]
// [Asm]   mul v5, v4, v3  # live: [v5, zero, v4, s11, v3]
// [Asm]   slliw v15, v5, 2  # live: [v5, zero, v4, s11, v15, v3]
// [Asm]   sub v2, s11, v15  # live: [v2, v5, zero, v4, v3]
// [Asm]   andi s11, v2, -8  # live: [v2, v5, zero, v4, v3]
// [Asm]   mv a1, v5  # live: [v2, zero, v4, v3]
// [Asm]   fcvt.d.w fv7, v4  # live: [v2, zero, v4, fv7, v3]
// [Asm]   fcvt.d.w fv8, v3  # live: [v2, zero, fv8, v4, fv7, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, fv8, v4, fv7, v3]
// [Asm]   mv a0, v4  # live: [v2, zero, a0, fv8, v4, fv7, v3]
// [Asm]   mv a1, v3  # live: [v2, zero, a0, fv8, v4, a1, fv7, v3]
// [Asm]   mv a2, zero  # live: [v2, zero, a0, fv8, a2, v4, a1, fv7, v3]
// [Asm]   mv a3, zero  # live: [v2, zero, a0, fv8, a2, v4, a1, a3, fv7, v3]
// [Asm]   mv a4, v2  # live: [v2, zero, a0, a4, fv8, a2, v4, a1, a3, fv7, v3]
// [Asm]   fmv.d fa0, fv7  # live: [v2, zero, a0, a4, fa0, fv8, a2, v4, a1, a3, v3]
// [Asm]   fmv.d fa1, fv8  # live: [v2, zero, a0, a4, fa0, v4, a2, a1, a3, fa1, v3]
// [Asm]   call main_loop30.112  # live: [v3, v4, zero, a0, v2]
// [Asm]   mv v9, a0  # live: [v3, v4, zero, v2]
// [Asm]   # restore_ctx2  # live: [v3, v4, zero, v2]
// [Asm]   # save_ctx2  # live: [v3, v4, zero, v2]
// [Asm]   mv a0, v4  # live: [v3, zero, a0, v2]
// [Asm]   mv a1, v3  # live: [a1, zero, a0, v2]
// [Asm]   mv a2, zero  # live: [a2, a1, zero, a0, v2]
// [Asm]   mv a3, zero  # live: [a2, a1, a3, zero, a0, v2]
// [Asm]   mv a4, v2  # live: [a2, a1, a3, zero, a0, a4]
// [Asm]   call print_loop68.113  # live: [zero, a0]
// [Asm]   mv v10, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$limit_sq.2:
// [Asm] # block info: defs: [fv2, fv3, fa0], uses: [fv2, fv3, fa0], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$limit_sq.2_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   fld fv2, limit.1, t5  # live: [fv2]
// [Asm]   fmul.d fv3, fv2, fv2  # live: [fv3]
// [Asm] # control
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] print_loop68.113:
// [Asm] # block info: defs: [v2, v11, v5, v10, v7, v8, v4, v6, v9, v3], uses: [v3, v5, a0, a4, a2, v4, a1, v6, a3, v2], upward_exposed: [a2, a1, a3, a0, a4], params_defs: []
// [Asm] # live_in: [a0, zero, a4, a2, a1, a3], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: []
// [Asm] .print_loop68.113_8:
// [Asm]   # save_ctx1  # live: [a2, a1, a3, zero, a0, a4]
// [Asm]   mv v2, a0  # live: [a2, a1, a3, zero, a4, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, a3, zero, a4, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, a3, zero, a4, v3]
// [Asm]   mv v5, a3  # live: [v2, v4, v5, zero, a4, v3]
// [Asm]   mv v6, a4  # live: [v2, v4, v6, v5, zero, v3]
// [Asm] # control
// [Asm]   mv v7, v2  # live: [v3, v4, v6, v5, zero, v7]
// [Asm]   mv v8, v3  # live: [v7, v4, v6, v5, zero, v8]
// [Asm]   mv v9, v4  # live: [v7, v6, v5, zero, v9, v8]
// [Asm]   mv v10, v5  # live: [v7, v6, v10, zero, v9, v8]
// [Asm]   mv v11, v6  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v10, v8], upward_exposed: [v10, v8], params_defs: [v8, v11, v10, v9, v7]
// [Asm] # live_in: [v11, v10, zero, v7, v8, v9], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: [v7, v8, v9, v10, v11]
// [Asm] .print_loop68.113_0:
// [Asm] # control
// [Asm]   beq v10, v8, .print_loop68.113_1  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v9, v7], upward_exposed: [v9, v7], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v8, v7, v9], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: []
// [Asm] .print_loop68.113_2:
// [Asm] # control
// [Asm]   beq v9, v7, .print_loop68.113_3  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v20, v19, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, v9, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v15], uses: [v11, v14, v10, v18, a0, v20, v7, v8, v17, v15, v9], upward_exposed: [v8, v11, v10, v9, v7], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v7, v8, v9], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: []
// [Asm] .print_loop68.113_4:
// [Asm]   mul v14, v10, v7  # live: [v11, v14, v10, zero, v7, v8, v9]
// [Asm]   add v15, v14, v9  # live: [v11, v10, zero, v7, v8, v15, v9]
// [Asm]   th.lurw v17, v11, v15, 2  # live: [v11, v10, zero, v7, v8, v17, v9]
// [Asm]   addi v18, v17, 48  # live: [v11, v10, v18, zero, v7, v8, v9]
// [Asm]   # save_ctx2  # live: [v11, v10, v18, zero, v7, v8, v9]
// [Asm]   mv a0, v18  # live: [v11, v10, zero, a0, v7, v8, v9]
// [Asm]   call minimbt_print_char  # live: [v11, v10, zero, a0, v7, v8, v9]
// [Asm]   mv v19, a0  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   # restore_ctx2  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   addi v20, v9, 1  # live: [v11, v10, zero, v20, v7, v8]
// [Asm] # control
// [Asm]   mv v7, v7  # live: [v11, v10, zero, v20, v7, v8]
// [Asm]   mv v8, v8  # live: [v11, v10, zero, v20, v7, v8]
// [Asm]   mv v9, v20  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   mv v11, v11  # live: [v7, v11, v10, zero, v9, v8]
// [Asm]   j .print_loop68.113_0  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [v25, t1, v22, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, v21, v10, a5, a0, fa4, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v25, v11, v10, a0, zero, v22, v7, v8], upward_exposed: [v8, v11, v10, zero, v7], params_defs: []
// [Asm] # live_in: [v7, v11, v10, zero, v8], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: []
// [Asm] .print_loop68.113_3:
// [Asm]   # save_ctx2  # live: [v11, v10, zero, v7, v8]
// [Asm]   li v25, 10  # live: [v11, v25, v10, zero, v7, v8]
// [Asm]   mv a0, v25  # live: [v11, v10, zero, a0, v7, v8]
// [Asm]   call minimbt_print_char  # live: [v11, v10, zero, a0, v7, v8]
// [Asm]   mv v21, a0  # live: [v11, v10, zero, v7, v8]
// [Asm]   # restore_ctx2  # live: [v11, v10, zero, v7, v8]
// [Asm]   addi v22, v10, 1  # live: [v11, zero, v22, v7, v8]
// [Asm] # control
// [Asm]   mv v7, v7  # live: [v11, zero, v22, v7, v8]
// [Asm]   mv v8, v8  # live: [v11, zero, v22, v7, v8]
// [Asm]   mv v9, zero  # live: [v11, zero, v22, v7, v8, v9]
// [Asm]   mv v10, v22  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   mv v11, v11  # live: [v7, v11, v10, zero, v9, v8]
// [Asm]   j .print_loop68.113_0  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [v23], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v23]
// [Asm] # block parameters: []
// [Asm] .print_loop68.113_1:
// [Asm] # control
// [Asm]   mv v23, zero  # live: [v23]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v23], upward_exposed: [v23], params_defs: [v23]
// [Asm] # live_in: [v23], live_out: []
// [Asm] # block parameters: [v23]
// [Asm] .print_loop68.113_6:
// [Asm] # control
// [Asm]   mv a0, v23  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main94.114  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0, fa0, sp, s0, ra, s11, t5], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$limit.1  # live: [s0, fa0]
// [Asm]   la t5, limit.1  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$limit_sq.2  # live: [s0, fa0]
// [Asm]   la t5, limit_sq.2  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$iter.3  # live: [s0, a0]
// [Asm]   la t5, iter.3  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$_4  # live: [s0, fa0]
// [Asm]   la t5, _4  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$c_re.5  # live: [s0, fa0]
// [Asm]   la t5, c_re.5  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$c_im.6  # live: [s0, fa0]
// [Asm]   la t5, c_im.6  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main_loop30.112:
// [Asm] # block info: defs: [v3, v11, v5, v10, v13, fv8, v12, fv14, fv15, v9, v4, v6, fv7, v2], uses: [v2, v5, a0, fv8, a2, a1, a3, fa1, a4, fa0, v4, v6, fv7, v3], upward_exposed: [a0, a4, fa0, a2, a1, a3, fa1], params_defs: []
// [Asm] # live_in: [a0, zero, a4, fa0, a2, a1, a3, fa1], live_out: [v11, v10, v13, zero, v12, fv14, fv15, v9]
// [Asm] # block parameters: []
// [Asm] .main_loop30.112_14:
// [Asm]   # save_ctx1  # live: [zero, a0, a4, fa0, a2, a1, a3, fa1]
// [Asm]   mv v2, a0  # live: [zero, a4, fa0, a2, a1, a3, fa1, v2]
// [Asm]   mv v3, a1  # live: [v2, zero, a4, fa0, a2, a3, fa1, v3]
// [Asm]   mv v4, a2  # live: [v2, zero, a4, fa0, v4, a3, fa1, v3]
// [Asm]   mv v5, a3  # live: [v2, v5, zero, a4, fa0, v4, fa1, v3]
// [Asm]   mv v6, a4  # live: [v2, v5, zero, fa0, v4, v6, fa1, v3]
// [Asm]   fmv.d fv7, fa0  # live: [v2, v5, zero, v4, v6, fa1, fv7, v3]
// [Asm]   fmv.d fv8, fa1  # live: [v2, v5, zero, fv8, v4, v6, fv7, v3]
// [Asm] # control
// [Asm]   mv v9, v2  # live: [v5, zero, fv8, v4, v6, v9, fv7, v3]
// [Asm]   mv v10, v3  # live: [v5, v10, zero, fv8, v4, v6, v9, fv7]
// [Asm]   mv v11, v4  # live: [v11, v5, v10, zero, fv8, v6, v9, fv7]
// [Asm]   mv v12, v5  # live: [v11, v10, zero, fv8, v6, v12, v9, fv7]
// [Asm]   mv v13, v6  # live: [v11, v10, zero, v13, fv8, v12, v9, fv7]
// [Asm]   fmv.d fv14, fv7  # live: [v11, v10, zero, v13, fv8, v12, fv14, v9]
// [Asm]   fmv.d fv15, fv8  # live: [v11, v10, zero, v13, v12, fv14, fv15, v9]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v12, v10], upward_exposed: [v12, v10], params_defs: [v11, v10, v13, v12, fv14, fv15, v9]
// [Asm] # live_in: [v11, v10, v13, zero, v12, fv14, fv15, v9], live_out: [v11, v10, zero, v13, v12, fv14, fv15, v9]
// [Asm] # block parameters: [v9, v10, v11, v12, v13, fv14, fv15]
// [Asm] .main_loop30.112_0:
// [Asm] # control
// [Asm]   beq v12, v10, .main_loop30.112_1  # live: [v11, v10, v13, zero, v12, fv14, fv15, v9]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v11, v9], upward_exposed: [v11, v9], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v13, v12, fv14, fv15, v9], live_out: [v11, v10, zero, v13, v12, fv14, fv15, v9]
// [Asm] # block parameters: []
// [Asm] .main_loop30.112_2:
// [Asm] # control
// [Asm]   beq v11, v9, .main_loop30.112_3  # live: [v11, v10, v13, zero, v12, fv14, fv15, v9]
// [Asm] 
// [Asm] # block info: defs: [fv23, fv24, t1, fv20, fv19, ft0, ft1, a1, fv47, v28, fa1, fv22, fa2, fv25, ft6, v29, v50, fa6, v27, a4, fv60, a6, ft5, v59, ft10, fv21, ft7, ft4, v46, ft9, fv56, a5, a0, fa4, ft2, a2, a3, fv26, fv51, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, fv18, v55], uses: [fv23, fv24, fv20, fv19, fv14, v12, fv47, fv15, v28, fa1, fv22, fv25, zero, v50, v27, fv60, v59, fv21, v11, v46, fv56, a0, fv26, v9, fv51, fa0, fv18, v55], upward_exposed: [v11, zero, fv14, v12, fv15, v9], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v13, fv14, v12, fv15, v9], live_out: [v11, v10, zero, v29, v13, v27, v12, fv14, fv15, v9]
// [Asm] # block parameters: []
// [Asm] .main_loop30.112_4:
// [Asm]   fcvt.d.w fv18, v11  # live: [v11, v10, zero, v13, v12, fv14, fv15, fv18, v9]
// [Asm]   li v59, 4613937818241073152  # live: [v11, v10, zero, v13, v59, v12, fv14, fv15, fv18, v9]
// [Asm]   fmv.d.x fv60, v59  # live: [v11, v10, zero, v13, fv60, v12, fv14, fv15, fv18, v9]
// [Asm]   fmul.d fv19, fv60, fv18  # live: [v11, v10, zero, v13, fv19, v12, fv14, fv15, v9]
// [Asm]   fdiv.d fv20, fv19, fv14  # live: [v11, v10, zero, v13, fv20, v12, fv14, fv15, v9]
// [Asm]   li v55, 4609434218613702656  # live: [v11, v10, zero, v13, fv20, v12, fv14, fv15, v9, v55]
// [Asm]   fmv.d.x fv56, v55  # live: [v11, v10, fv56, zero, v13, fv20, v12, fv14, fv15, v9]
// [Asm]   fsub.d fv21, fv20, fv56  # live: [v11, v10, zero, v13, v12, fv14, fv15, v9, fv21]
// [Asm]   fneg.d fv22, fv21  # live: [v11, fv22, v10, zero, v13, v12, fv14, fv15, v9]
// [Asm]   fcvt.d.w fv23, v12  # live: [v11, fv22, fv23, v10, zero, v13, v12, fv14, fv15, v9]
// [Asm]   li v50, 4613937818241073152  # live: [v11, fv22, fv23, v10, zero, v13, v50, v12, fv14, fv15, v9]
// [Asm]   fmv.d.x fv51, v50  # live: [v11, fv22, fv23, v10, zero, v13, v12, fv14, fv15, v9, fv51]
// [Asm]   fmul.d fv24, fv51, fv23  # live: [v11, fv22, fv24, v10, zero, v13, v12, fv14, fv15, v9]
// [Asm]   fdiv.d fv25, fv24, fv15  # live: [v11, fv22, v10, zero, v13, fv25, v12, fv14, fv15, v9]
// [Asm]   li v46, 4609434218613702656  # live: [v11, fv22, v46, v10, zero, v13, fv25, v12, fv14, fv15, v9]
// [Asm]   fmv.d.x fv47, v46  # live: [v11, fv22, v10, zero, v13, fv25, v12, fv14, fv47, fv15, v9]
// [Asm]   fsub.d fv26, fv25, fv47  # live: [v11, fv22, v10, zero, v13, v12, fv14, fv15, v9, fv26]
// [Asm]   # save_ctx2  # live: [v11, fv22, v10, zero, v13, v12, fv14, fv15, v9, fv26]
// [Asm]   fmv.d fa0, fv22  # live: [v11, v10, zero, v13, fa0, v12, fv14, fv15, v9, fv26]
// [Asm]   fmv.d fa1, fv26  # live: [v11, v10, zero, v13, fa0, v12, fv14, fv15, v9, fa1]
// [Asm]   mv a0, zero  # live: [v11, v10, zero, v13, a0, fa0, v12, fv14, fv15, v9, fa1]
// [Asm]   call calc_pixel7.111  # live: [v11, v10, zero, v13, a0, v12, fv14, fv15, v9]
// [Asm]   mv v27, a0  # live: [v11, v10, zero, v13, v27, v12, fv14, fv15, v9]
// [Asm]   # restore_ctx2  # live: [v11, v10, zero, v13, v27, v12, fv14, fv15, v9]
// [Asm]   mul v28, v12, v9  # live: [v11, v10, zero, v13, v27, v12, fv14, fv15, v28, v9]
// [Asm]   add v29, v28, v11  # live: [v11, v10, zero, v29, v13, v27, v12, fv14, fv15, v9]
// [Asm] # control
// [Asm]   bge zero, v27, .main_loop30.112_5  # live: [v11, v10, zero, v29, v13, v27, v12, fv14, fv15, v9]
// [Asm] 
// [Asm] # block info: defs: [v42], uses: [v42, v27], upward_exposed: [v27], params_defs: []
// [Asm] # live_in: [v11, v10, v13, v29, zero, v27, v12, fv14, fv15, v9], live_out: [v11, v10, v13, v29, zero, v27, v12, fv14, fv15, v9]
// [Asm] # block parameters: []
// [Asm] .main_loop30.112_6:
// [Asm] # control
// [Asm]   li v42, 48  # live: [v11, v10, v13, v29, zero, v42, v27, v12, fv14, fv15, v9]
// [Asm]   blt v27, v42, .main_loop30.112_8  # live: [v11, v10, v13, v29, zero, v27, v12, fv14, fv15, v9]
// [Asm] 
// [Asm] # block info: defs: [v41, v32], uses: [v41], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v11, v10, v13, v29, zero, v12, fv14, fv15, v9], live_out: [v11, v10, v29, v13, zero, v32, v12, fv14, fv15, v9]
// [Asm] # block parameters: []
// [Asm] .main_loop30.112_7:
// [Asm] # control
// [Asm]   li v41, 48  # live: [v11, v10, v29, v13, zero, v41, v12, fv14, fv15, v9]
// [Asm]   mv v32, v41  # live: [v11, v10, v29, v13, zero, v32, v12, fv14, fv15, v9]
// [Asm] 
// [Asm] # block info: defs: [v33], uses: [v32], upward_exposed: [v32], params_defs: [v32]
// [Asm] # live_in: [v11, v10, v29, v13, zero, v32, v12, fv14, fv15, v9], live_out: [v11, v10, v29, v13, zero, v12, fv14, fv15, v33, v9]
// [Asm] # block parameters: [v32]
// [Asm] .main_loop30.112_9:
// [Asm] # control
// [Asm]   mv v33, v32  # live: [v11, v10, v29, v13, zero, v12, fv14, fv15, v33, v9]
// [Asm] 
// [Asm] # block info: defs: [v11, v36], uses: [v11, v10, v13, v29, v36, v12, fv14, fv15, v33, v9], upward_exposed: [v11, v10, v13, v29, v12, fv14, fv15, v33, v9], params_defs: [v33]
// [Asm] # live_in: [v11, v10, v13, v29, zero, v12, fv14, fv15, v33, v9], live_out: [v11, v10, v13, zero, v12, fv14, fv15, v9]
// [Asm] # block parameters: [v33]
// [Asm] .main_loop30.112_10:
// [Asm]   th.surw v33, v13, v29, 2  # live: [v11, v10, zero, v13, v12, fv14, fv15, v9]
// [Asm]   addi v36, v11, 1  # live: [v10, zero, v13, v36, v12, fv14, fv15, v9]
// [Asm] # control
// [Asm]   mv v9, v9  # live: [v10, zero, v13, v36, v12, fv14, fv15, v9]
// [Asm]   mv v10, v10  # live: [v10, zero, v13, v36, v12, fv14, fv15, v9]
// [Asm]   mv v11, v36  # live: [v11, v10, zero, v13, v12, fv14, fv15, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, zero, v13, v12, fv14, fv15, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, zero, v13, v12, fv14, fv15, v9]
// [Asm]   fmv.d fv14, fv14  # live: [v11, v10, zero, v13, v12, fv14, fv15, v9]
// [Asm]   fmv.d fv15, fv15  # live: [v11, v10, zero, v13, v12, fv14, fv15, v9]
// [Asm]   j .main_loop30.112_0  # live: [v11, v10, zero, v13, v12, fv14, fv15, v9]
// [Asm] 
// [Asm] # block info: defs: [v32], uses: [v27], upward_exposed: [v27], params_defs: []
// [Asm] # live_in: [v11, v10, v29, v13, zero, v27, v12, fv14, fv15, v9], live_out: [v11, v10, v29, v13, zero, v32, v12, fv14, fv15, v9]
// [Asm] # block parameters: []
// [Asm] .main_loop30.112_8:
// [Asm] # control
// [Asm]   mv v32, v27  # live: [v11, v10, v29, v13, zero, v32, v12, fv14, fv15, v9]
// [Asm]   j .main_loop30.112_9  # live: [v11, v10, v29, v13, zero, v32, v12, fv14, fv15, v9]
// [Asm] 
// [Asm] # block info: defs: [v33], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v29, v13, v12, fv14, fv15, v9], live_out: [v11, v10, v29, v13, zero, v12, fv14, fv15, v33, v9]
// [Asm] # block parameters: []
// [Asm] .main_loop30.112_5:
// [Asm] # control
// [Asm]   mv v33, zero  # live: [v11, v10, v29, v13, zero, v12, fv14, fv15, v33, v9]
// [Asm]   j .main_loop30.112_10  # live: [v11, v10, v29, v13, zero, v12, fv14, fv15, v33, v9]
// [Asm] 
// [Asm] # block info: defs: [v11, v37, v12], uses: [v10, zero, v13, v37, v12, fv14, fv15, v9], upward_exposed: [v10, zero, v13, v12, fv14, fv15, v9], params_defs: []
// [Asm] # live_in: [v10, v13, zero, v12, fv14, fv15, v9], live_out: [v11, v10, v13, zero, v12, fv14, fv15, v9]
// [Asm] # block parameters: []
// [Asm] .main_loop30.112_3:
// [Asm]   addi v37, v12, 1  # live: [v10, zero, v13, v37, fv14, fv15, v9]
// [Asm] # control
// [Asm]   mv v9, v9  # live: [v10, zero, v13, v37, fv14, fv15, v9]
// [Asm]   mv v10, v10  # live: [v10, zero, v13, v37, fv14, fv15, v9]
// [Asm]   mv v11, zero  # live: [v11, v10, zero, v13, v37, fv14, fv15, v9]
// [Asm]   mv v12, v37  # live: [v11, v10, zero, v13, v12, fv14, fv15, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, zero, v13, v12, fv14, fv15, v9]
// [Asm]   fmv.d fv14, fv14  # live: [v11, v10, zero, v13, v12, fv14, fv15, v9]
// [Asm]   fmv.d fv15, fv15  # live: [v11, v10, zero, v13, v12, fv14, fv15, v9]
// [Asm]   j .main_loop30.112_0  # live: [v11, v10, zero, v13, v12, fv14, fv15, v9]
// [Asm] 
// [Asm] # block info: defs: [v38], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v38]
// [Asm] # block parameters: []
// [Asm] .main_loop30.112_1:
// [Asm] # control
// [Asm]   mv v38, zero  # live: [v38]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v38, a0], upward_exposed: [v38], params_defs: [v38]
// [Asm] # live_in: [v38], live_out: []
// [Asm] # block parameters: [v38]
// [Asm] .main_loop30.112_12:
// [Asm] # control
// [Asm]   mv a0, v38  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] iter.3:
// [Asm]   .zero 4
// [Asm] c_im.6:
// [Asm]   .zero 8
// [Asm] start:
// [Asm]   .zero 4
// [Asm] _4:
// [Asm]   .zero 8
// [Asm] limit_sq.2:
// [Asm]   .zero 8
// [Asm] limit.1:
// [Asm]   .zero 8
// [Asm] c_re.5:
// [Asm]   .zero 8
// [Asm] 
// [Knf] build_knf: Let(("limit", Double), Double(2), Let(("limit_sq", Double), Prim(Var("limit"), Var("limit"), Mul, kind=Some(Double)), Let(("iter", Int), Int(300), Let(("c_re", Double), Neg(Double(0.123), kind=Some(Double)), Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))))))))))
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Let(("limit_sq", Double), Prim(Var("limit"), Var("limit"), Mul, kind=Some(Double)), Let(("iter", Int), Int(300), Let(("c_re", Double), Neg(Double(0.123), kind=Some(Double)), Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))))))))))
// [Knf] build_knf: Prim(Var("limit"), Var("limit"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("limit")
// [Knf] build_knf: Var("limit")
// [Knf] build_knf: Let(("iter", Int), Int(300), Let(("c_re", Double), Neg(Double(0.123), kind=Some(Double)), Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))))))))
// [Knf] build_knf: Int(300)
// [Knf] build_knf: Let(("c_re", Double), Neg(Double(0.123), kind=Some(Double)), Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))))))))
// [Knf] build_knf: Neg(Double(0.123), kind=Some(Double))
// [Knf] build_knf: Double(0.123)
// [Knf] build_knf: Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))))))
// [Knf] build_knf: Double(0.745)
// [Knf] build_knf: LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))))))
// [Knf] build_knf: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))
// [Knf] build_knf: Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))]))))))
// [Knf] build_knf: Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))
// [Knf] build_knf: Var("it")
// [Knf] build_knf: Var("iter")
// [Knf] build_knf: Var("iter")
// [Knf] build_knf: If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: Var("limit_sq")
// [Knf] build_knf: Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))
// [Knf] build_knf: Var("zr2")
// [Knf] build_knf: Var("zi2")
// [Knf] build_knf: Var("it")
// [Knf] build_knf: Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double))
// [Knf] build_knf: Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double))
// [Knf] build_knf: Prim(Double(2), Var("zr"), Mul, kind=Some(Double))
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: Var("c_im")
// [Knf] build_knf: Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double))
// [Knf] build_knf: Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double))
// [Knf] build_knf: Var("zr2")
// [Knf] build_knf: Var("zi2")
// [Knf] build_knf: Var("c_re")
// [Knf] build_knf: App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("calc_pixel")
// [Knf] build_knf: Var("new_zr")
// [Knf] build_knf: Var("new_zi")
// [Knf] build_knf: Prim(Var("it"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("it")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))))
// [Knf] build_knf: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: If(LE(Int(48), Var("i")), Int(48), Var("i"))
// [Knf] build_knf: Int(48)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(48)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))))
// [Knf] build_knf: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])
// [Knf] build_knf: Var("main_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Var("y"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))
// [Knf] build_knf: Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double))
// [Knf] build_knf: Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double))
// [Knf] build_knf: Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double))
// [Knf] build_knf: Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double))
// [Knf] build_knf: Double(3)
// [Knf] build_knf: App(Var("float_of_int"), [Var("x")])
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("float_of_int"), [Var("w")])
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Double(1.5)
// [Knf] build_knf: Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))
// [Knf] build_knf: Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double))
// [Knf] build_knf: Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double))
// [Knf] build_knf: Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double))
// [Knf] build_knf: Double(3)
// [Knf] build_knf: App(Var("float_of_int"), [Var("y")])
// [Knf] build_knf: Var("y")
// [Knf] build_knf: App(Var("float_of_int"), [Var("h")])
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Double(1.5)
// [Knf] build_knf: Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))
// [Knf] build_knf: App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)])
// [Knf] build_knf: Var("calc_pixel")
// [Knf] build_knf: Var("cr")
// [Knf] build_knf: Var("ci")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))
// [Knf] build_knf: Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")]))
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Var("y"), Var("w"), Mul, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("clamp"), [Var("res")])
// [Knf] build_knf: Var("clamp")
// [Knf] build_knf: Var("res")
// [Knf] build_knf: App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])
// [Knf] build_knf: Var("main_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))
// [Knf] build_knf: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]))
// [Knf] build_knf: App(Var("print_char"), [Int(10)])
// [Knf] build_knf: Int(10)
// [Knf] build_knf: App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])
// [Knf] build_knf: Var("print_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Var("y"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))
// [Knf] build_knf: App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))])
// [Knf] build_knf: Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))
// [Knf] build_knf: Int(48)
// [Knf] build_knf: Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Var("y"), Var("w"), Mul, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])
// [Knf] build_knf: Var("print_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))
// [Knf] build_knf: App(Var("read_int"), [])
// [Knf] build_knf: Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit))))
// [Knf] build_knf: Prim(Var("h"), Int(2), Mul, kind=Some(Int))
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))
// [Knf] build_knf: Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0))
// [Knf] build_knf: Prim(Var("w"), Var("h"), Mul, kind=Some(Int))
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit))
// [Knf] build_knf: App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")])
// [Knf] build_knf: Var("main_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)
// [Knf] build_knf: App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")])
// [Knf] build_knf: Var("print_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$iter.3
// [Main]   .type T$iter.3, @function
// [Main] # leaf true
// [Main] T$iter.3:
// [Main] .T$iter.3_0:
// [Main]   li a0, 300
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$c_re.5
// [Main]   .type T$c_re.5, @function
// [Main] # leaf true
// [Main] T$c_re.5:
// [Main] .T$c_re.5_0:
// [Main]   fld fa0, _4, t5
// [Main]   fneg.d fa0, fa0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl calc_pixel7.111
// [Main]   .type calc_pixel7.111, @function
// [Main] # leaf true
// [Main] calc_pixel7.111:
// [Main] .calc_pixel7.111_8:
// [Main]   fld fa2, c_re.5, t5
// [Main]   fld fa3, c_im.6, t5
// [Main]   lw a1, iter.3
// [Main]   fld fa4, limit_sq.2, t5
// [Main] 
// [Main] .calc_pixel7.111_0:
// [Main]   fmul.d fa5, fa0, fa0
// [Main]   fmul.d fa6, fa1, fa1
// [Main]   lw a2, iter.3
// [Main]   beq a0, a2, .calc_pixel7.111_1
// [Main] 
// [Main] .calc_pixel7.111_2:
// [Main]   fadd.d fa7, fa5, fa6
// [Main]   fle.d a2, fa4, fa7
// [Main]   bne a2, zero, .calc_pixel7.111_3
// [Main] 
// [Main] .calc_pixel7.111_4:
// [Main]   li a2, 4611686018427387904
// [Main]   fmv.d.x fa7, a2
// [Main]   fmul.d fa0, fa7, fa0
// [Main]   fmadd.d fa1, fa0, fa1, fa3
// [Main]   fsub.d fa0, fa5, fa6
// [Main]   fadd.d fa0, fa0, fa2
// [Main]   addi a0, a0, 1
// [Main]   j .calc_pixel7.111_0
// [Main] 
// [Main] .calc_pixel7.111_3:
// [Main] 
// [Main] .calc_pixel7.111_5:
// [Main] 
// [Main] .calc_pixel7.111_6:
// [Main]   ret
// [Main] 
// [Main] .calc_pixel7.111_1:
// [Main]   mv a0, a1
// [Main]   j .calc_pixel7.111_6
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$limit.1
// [Main]   .type T$limit.1, @function
// [Main] # leaf true
// [Main] T$limit.1:
// [Main] .T$limit.1_0:
// [Main]   li a0, 4611686018427387904
// [Main]   fmv.d.x fa0, a0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_4
// [Main]   .type T$_4, @function
// [Main] # leaf true
// [Main] T$_4:
// [Main] .T$_4_0:
// [Main]   li a0, 4593527504729830064
// [Main]   fmv.d.x fa0, a0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$c_im.6
// [Main]   .type T$c_im.6, @function
// [Main] # leaf true
// [Main] T$c_im.6:
// [Main] .T$c_im.6_0:
// [Main]   li a0, 4604885582990058455
// [Main]   fmv.d.x fa0, a0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main94.114
// [Main]   .type main94.114, @function
// [Main] # leaf false
// [Main] main94.114:
// [Main] .main94.114_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   call minimbt_read_int
// [Main]   mv s0, a0
// [Main]   slli s1, s0, 1
// [Main]   mul a0, s1, s0
// [Main]   slliw a1, a0, 2
// [Main]   sub s2, s11, a1
// [Main]   andi s11, s2, -8
// [Main]   mv a1, a0
// [Main]   fcvt.d.w fa0, s1
// [Main]   fcvt.d.w fa1, s0
// [Main]   mv a0, s1
// [Main]   mv a1, s0
// [Main]   mv a2, zero
// [Main]   mv a3, zero
// [Main]   mv a4, s2
// [Main]   call main_loop30.112
// [Main]   mv a0, s1
// [Main]   mv a1, s0
// [Main]   mv a2, zero
// [Main]   mv a3, zero
// [Main]   mv a4, s2
// [Main]   call print_loop68.113
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$limit_sq.2
// [Main]   .type T$limit_sq.2, @function
// [Main] # leaf true
// [Main] T$limit_sq.2:
// [Main] .T$limit_sq.2_0:
// [Main]   fld fa0, limit.1, t5
// [Main]   fmul.d fa0, fa0, fa0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl print_loop68.113
// [Main]   .type print_loop68.113, @function
// [Main] # leaf false
// [Main] print_loop68.113:
// [Main] .print_loop68.113_8:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   mv s2, a2
// [Main]   mv s3, a3
// [Main]   mv s4, a4
// [Main] 
// [Main] .print_loop68.113_0:
// [Main]   beq s3, s1, .print_loop68.113_1
// [Main] 
// [Main] .print_loop68.113_2:
// [Main]   beq s2, s0, .print_loop68.113_3
// [Main] 
// [Main] .print_loop68.113_4:
// [Main]   mul a0, s3, s0
// [Main]   add a0, a0, s2
// [Main]   th.lurw a0, s4, a0, 2
// [Main]   addi a0, a0, 48
// [Main]   call minimbt_print_char
// [Main]   addi a0, s2, 1
// [Main]   mv s2, a0
// [Main]   j .print_loop68.113_0
// [Main] 
// [Main] .print_loop68.113_3:
// [Main]   li a0, 10
// [Main]   call minimbt_print_char
// [Main]   addi a0, s3, 1
// [Main]   mv s2, zero
// [Main]   mv s3, a0
// [Main]   j .print_loop68.113_0
// [Main] 
// [Main] .print_loop68.113_1:
// [Main]   mv a0, zero
// [Main] 
// [Main] .print_loop68.113_6:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main94.114
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$limit.1
// [Main]   la t5, limit.1
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$limit_sq.2
// [Main]   la t5, limit_sq.2
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$iter.3
// [Main]   la t5, iter.3
// [Main]   sw a0, 0(t5)
// [Main]   call T$_4
// [Main]   la t5, _4
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$c_re.5
// [Main]   la t5, c_re.5
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$c_im.6
// [Main]   la t5, c_im.6
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main_loop30.112
// [Main]   .type main_loop30.112, @function
// [Main] # leaf false
// [Main] main_loop30.112:
// [Main] .main_loop30.112_14:
// [Main]   addi sp, sp, -64
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   fsd fs0, 48(sp)
// [Main]   fsd fs1, 56(sp)
// [Main]   mv s4, a0
// [Main]   mv s1, a1
// [Main]   mv s0, a2
// [Main]   mv s3, a3
// [Main]   mv s2, a4
// [Main]   fmv.d fs0, fa0
// [Main]   fmv.d fs1, fa1
// [Main] 
// [Main] .main_loop30.112_0:
// [Main]   beq s3, s1, .main_loop30.112_1
// [Main] 
// [Main] .main_loop30.112_2:
// [Main]   beq s0, s4, .main_loop30.112_3
// [Main] 
// [Main] .main_loop30.112_4:
// [Main]   fcvt.d.w fa0, s0
// [Main]   li a0, 4613937818241073152
// [Main]   fmv.d.x fa1, a0
// [Main]   fmul.d fa0, fa1, fa0
// [Main]   fdiv.d fa0, fa0, fs0
// [Main]   li a0, 4609434218613702656
// [Main]   fmv.d.x fa1, a0
// [Main]   fsub.d fa0, fa0, fa1
// [Main]   fneg.d fa0, fa0
// [Main]   fcvt.d.w fa1, s3
// [Main]   li a0, 4613937818241073152
// [Main]   fmv.d.x fa2, a0
// [Main]   fmul.d fa1, fa2, fa1
// [Main]   fdiv.d fa1, fa1, fs1
// [Main]   li a0, 4609434218613702656
// [Main]   fmv.d.x fa2, a0
// [Main]   fsub.d fa1, fa1, fa2
// [Main]   mv a0, zero
// [Main]   call calc_pixel7.111
// [Main]   mul a1, s3, s4
// [Main]   add a1, a1, s0
// [Main]   bge zero, a0, .main_loop30.112_5
// [Main] 
// [Main] .main_loop30.112_6:
// [Main]   li a2, 48
// [Main]   blt a0, a2, .main_loop30.112_8
// [Main] 
// [Main] .main_loop30.112_7:
// [Main]   li a0, 48
// [Main] 
// [Main] .main_loop30.112_9:
// [Main] 
// [Main] .main_loop30.112_10:
// [Main]   th.surw a0, s2, a1, 2
// [Main]   addi a0, s0, 1
// [Main]   mv s0, a0
// [Main]   j .main_loop30.112_0
// [Main] 
// [Main] .main_loop30.112_8:
// [Main]   j .main_loop30.112_9
// [Main] 
// [Main] .main_loop30.112_5:
// [Main]   mv a0, zero
// [Main]   j .main_loop30.112_10
// [Main] 
// [Main] .main_loop30.112_3:
// [Main]   addi a0, s3, 1
// [Main]   mv s0, zero
// [Main]   mv s3, a0
// [Main]   j .main_loop30.112_0
// [Main] 
// [Main] .main_loop30.112_1:
// [Main]   mv a0, zero
// [Main] 
// [Main] .main_loop30.112_12:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   fld fs0, 48(sp)
// [Main]   fld fs1, 56(sp)
// [Main]   addi sp, sp, 64
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl iter.3
// [Main]   .type iter.3, @object
// [Main] iter.3:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl c_im.6
// [Main]   .type c_im.6, @object
// [Main] c_im.6:
// [Main]   .zero 8
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _4
// [Main]   .type _4, @object
// [Main] _4:
// [Main]   .zero 8
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl limit_sq.2
// [Main]   .type limit_sq.2, @object
// [Main] limit_sq.2:
// [Main]   .zero 8
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl limit.1
// [Main]   .type limit.1, @object
// [Main] limit.1:
// [Main]   .zero 8
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl c_re.5
// [Main]   .type c_re.5, @object
// [Main] c_re.5:
// [Main]   .zero 8
// [Main] 
// [Wasm] Lowering function T$_4
// [Wasm] Lowering control Return(args=[Double(val=0.123)])
// [Wasm] Lowered function T$_4 to wasm
// [Wasm] Lowering function calc_pixel7.111
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=2), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%8), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%9), Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%12), Insn(iref=%13)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%14), Insn(iref=%11), Insn(iref=%15)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%6), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Branch(cond=Insn(iref=%7), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.2), Insn(iref=%2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::4)
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::5)
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::1)
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Jump(target=b7, args=[FnParam(fref=f12, fpref=$f.0), FnParam(fref=f12, fpref=$f.1), FnParam(fref=f12, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function calc_pixel7.111 to wasm
// [Wasm] Lowering function T$iter.3
// [Wasm] Lowering control Return(args=[Int32(val=300)])
// [Wasm] Lowered function T$iter.3 to wasm
// [Wasm] Lowering function T$c_re.5
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::3)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Double, op=Neg, args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Return(args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function T$c_re.5 to wasm
// [Wasm] Lowering function T$limit.1
// [Wasm] Lowering control Return(args=[Double(val=2)])
// [Wasm] Lowered function T$limit.1 to wasm
// [Wasm] Lowering function main_loop30.112
// [Wasm] Lowering control Return(args=[BlockParam(bref=b12, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b12, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.3), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Int32(val=0), Insn(iref=%2), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5), BlockParam(bref=b0, bpref=$b.6)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), offset=Insn(iref=%15), width=@32), val=BlockParam(bref=b10, bpref=$b.0))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%19), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5), BlockParam(bref=b0, bpref=$b.6)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Lowering control Jump(target=b10, args=[Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Lowering control Jump(target=b10, args=[BlockParam(bref=b9, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Get Local name BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Lowering control Jump(target=b9, args=[Int32(val=48)])
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Lowering control Jump(target=b9, args=[Insn(iref=%13)])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=48), Insn(iref=%13)])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering control Branch(cond=Insn(iref=%17), t=b7, t_args=[], f=b8, f_args=[])
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=3), Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Double, op=Div, args=[Insn(iref=%5), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Insn(iref=%6), Double(val=1.5)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Double, op=Neg, args=[Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[BlockParam(bref=b0, bpref=$b.3)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=3), Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Double, op=Div, args=[Insn(iref=%10), BlockParam(bref=b0, bpref=$b.6)])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Insn(iref=%11), Double(val=1.5)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Call(ty=Int32, f=f12, args=[Insn(iref=%8), Insn(iref=%12), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%14), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%13), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering control Branch(cond=Insn(iref=%16), t=b5, t_args=[], f=b6, f_args=[])
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b13, args=[FnParam(fref=f13, fpref=$f.0), FnParam(fref=f13, fpref=$f.1), FnParam(fref=f13, fpref=$f.2), FnParam(fref=f13, fpref=$f.3), FnParam(fref=f13, fpref=$f.4), FnParam(fref=f13, fpref=$f.5), FnParam(fref=f13, fpref=$f.6)])
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.6) -> $$f.6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.6) -> $$f.6
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function main_loop30.112 to wasm
// [Wasm] Lowering function main94.114
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_int", args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%0), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%1), Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Zero])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Mem(fref=f15, mref=m0) -> $f15.m0
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Call(ty=Unit, f=f13, args=[Insn(iref=%1), Insn(iref=%0), Int32(val=0), Int32(val=0), Mem(fref=f15, mref=m0), Insn(iref=%4), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Mem(fref=f15, mref=m0) -> $f15.m0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Call(ty=Unit, f=f14, args=[Insn(iref=%1), Insn(iref=%0), Int32(val=0), Int32(val=0), Mem(fref=f15, mref=m0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Mem(fref=f15, mref=m0) -> $f15.m0
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Mem(fref=f15, mref=m0) -> $f15.m0
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function main94.114 to wasm
// [Wasm] Lowering function T$c_im.6
// [Wasm] Lowering control Return(args=[Double(val=0.745)])
// [Wasm] Lowered function T$c_im.6 to wasm
// [Wasm] Lowering function T$limit_sq.2
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::0)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%0), Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function T$limit_sq.2 to wasm
// [Wasm] Lowering function print_loop68.113
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b6, args=[Unit])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Int32(val=10)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.3), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Int32(val=0), Insn(iref=%3), BlockParam(bref=b0, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%5), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), offset=Insn(iref=%6), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Int32(val=48), Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%10), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b7, args=[FnParam(fref=f14, fpref=$f.0), FnParam(fref=f14, fpref=$f.1), FnParam(fref=f14, fpref=$f.2), FnParam(fref=f14, fpref=$f.3), FnParam(fref=f14, fpref=$f.4)])
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.4) -> $$f.4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function print_loop68.113 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f15, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [KnfOpt] freq: {calc_pixel7: Many(2), clamp25: Once, main_loop30: Many(3), print_loop68: Many(3), main94: Once}
// [KnfOpt] Inline threshold 2 27
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 27
// [KnfOpt] Inline decision rejected
// [KnfOpt] Knf inline Some(clamp25)
// [KnfOpt] Inline threshold 3 31
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 3 31
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 3 31
// [KnfOpt] Inline decision rejected
// [KnfOpt] Numbers of let rec: 4 4 0
// [KnfOpt] hoist: _47
// [KnfOpt] hoist: _55
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %16: Call(ty=Int32, f=f12, args=[Insn(iref=%14), Insn(iref=%11), Insn(iref=%15)])
// [CoreOpt] eliminated tail rec call %20: Call(ty=Unit, f=f13, args=[FnParam(fref=f13, fpref=$f.0), FnParam(fref=f13, fpref=$f.1), Insn(iref=%19), FnParam(fref=f13, fpref=$f.3), FnParam(fref=f13, fpref=$f.4), FnParam(fref=f13, fpref=$f.5), FnParam(fref=f13, fpref=$f.6)])
// [CoreOpt] eliminated tail rec call %3: Call(ty=Unit, f=f13, args=[FnParam(fref=f13, fpref=$f.0), FnParam(fref=f13, fpref=$f.1), Int32(val=0), Insn(iref=%2), FnParam(fref=f13, fpref=$f.4), FnParam(fref=f13, fpref=$f.5), FnParam(fref=f13, fpref=$f.6)])
// [CoreOpt] eliminated tail rec call %11: Call(ty=Unit, f=f14, args=[FnParam(fref=f14, fpref=$f.0), FnParam(fref=f14, fpref=$f.1), Insn(iref=%10), FnParam(fref=f14, fpref=$f.3), FnParam(fref=f14, fpref=$f.4)])
// [CoreOpt] eliminated tail rec call %4: Call(ty=Unit, f=f14, args=[FnParam(fref=f14, fpref=$f.0), FnParam(fref=f14, fpref=$f.1), Int32(val=0), Insn(iref=%3), FnParam(fref=f14, fpref=$f.4)])
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f12: Once, f4: Once, f8: Once, f0: Once, f13: Once, f15: Once, f10: Once, f2: Once, f14: Once, f20: Once})
// [CoreOpt] LVN subst Insn(iref=%1) with Insn(iref=%0)
