// [Asm] pre_assigned_registers: Self(fref=f6) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$_4_6"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   comment = "0:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$_4_6"];
// [Asm]   r0 [label="fv3 ← fa0", color=green];
// [Asm]   r1 [label="fa0", color=blue];
// [Asm]   comment = "0:fv3-> 1:fa0"
// [Asm]   comment = "fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 4593527504729830064 ->   li a0, 4593527504729830064
// [Asm] subst   fmv.d.x fv3, v2 ->   fmv.d.x fa0, a0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v22, FnParam(fref=f12, fpref=$f.2) -> v4, Insn(iref=%9) -> fv16, Insn(iref=%8) -> fv15, Self(fref=f12) -> v0, Insn(iref=%10) -> fv17, BlockParam(bref=b0, bpref=$b.0) -> fv5, Insn(iref=%14) -> fv21, BlockParam(bref=b0, bpref=$b.1) -> fv6, BlockParam(bref=b0, bpref=$b.2) -> v7, Insn(iref=%5) -> fv12, Insn(iref=%0) -> fv8, Insn(iref=%4) -> v24, FnParam(fref=f12, fpref=$f.1) -> fv3, Insn(iref=%3) -> v11, Insn(iref=%13) -> fv20, Insn(iref=%7) -> v14, FnParam(fref=f12, fpref=$f.0) -> fv2, BlockParam(bref=b5, bpref=$b.0) -> v23, BlockParam(bref=b6, bpref=$b.0) -> v25, Insn(iref=%2) -> v10, Insn(iref=%1) -> fv9, Insn(iref=%11) -> fv18, Insn(iref=%6) -> fv13, Insn(iref=%12) -> fv19
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%8), BlockParam(bref=b0, bpref=$b.1)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.2), Insn(iref=%2)])
// [Asm] skipping Op(ty=Double, op=Mul, args=[BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.1)])
// [Asm] defs: [v25]
// [Asm] live_set: [v25]
// [Asm] move_origin: [v23]
// [Asm] defined: v25 is X
// [Asm] defs: []
// [Asm] live_set: [v25]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [fa0, zero, a0, fa1]
// [Asm] move_origin: []
// [Asm] defs: [fv2]
// [Asm] live_set: [fv2, zero, a0, fa1]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fv2, zero, fv3, a0]
// [Asm] move_origin: [fa1]
// [Asm] defined: fv3 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v4, fv2, zero, fv3]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: [fv5]
// [Asm] live_set: [fv5, v4, zero, fv3]
// [Asm] move_origin: [fv2]
// [Asm] defined: fv5 is F
// [Asm] defs: [fv6]
// [Asm] live_set: [fv5, v4, fv6, zero]
// [Asm] move_origin: [fv3]
// [Asm] defined: fv6 is F
// [Asm] defs: [v7]
// [Asm] live_set: [fv5, fv6, zero, v7]
// [Asm] move_origin: [v4]
// [Asm] defined: v7 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v23]
// [Asm] move_origin: [v7]
// [Asm] defined: v23 is X
// [Asm] defs: [v33]
// [Asm] live_set: [v7, fv5, fv6, zero, v33, fv8]
// [Asm] move_origin: []
// [Asm] defined: v33 is X
// [Asm] defs: [fv34]
// [Asm] live_set: [v7, fv5, fv6, zero, fv34, fv8]
// [Asm] move_origin: []
// [Asm] defined: fv34 is F
// [Asm] defs: [fv15]
// [Asm] live_set: [v7, fv6, fv15, zero, fv8]
// [Asm] move_origin: []
// [Asm] defined: fv15 is F
// [Asm] defs: [fv17]
// [Asm] live_set: [fv8, v7, fv6, fv15, zero, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv17 is F
// [Asm] defs: [fv18]
// [Asm] live_set: [fv8, fv18, fv6, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: fv18 is F
// [Asm] defs: [fv19]
// [Asm] live_set: [fv19, fv18, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: fv19 is F
// [Asm] defs: [fv20]
// [Asm] live_set: [fv20, fv19, fv18, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: fv20 is F
// [Asm] defs: [fv21]
// [Asm] live_set: [fv18, zero, fv21, v7]
// [Asm] move_origin: []
// [Asm] defined: fv21 is F
// [Asm] defs: [v22]
// [Asm] live_set: [fv18, zero, v22, fv21]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [fv5]
// [Asm] live_set: [fv5, fv18, zero, v22]
// [Asm] move_origin: [fv21]
// [Asm] defined: fv5 is F
// [Asm] defs: [fv6]
// [Asm] live_set: [fv5, fv6, zero, v22]
// [Asm] move_origin: [fv18]
// [Asm] defined: fv6 is F
// [Asm] defs: [v7]
// [Asm] live_set: [fv5, fv6, zero, v7]
// [Asm] move_origin: [v22]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [fv5, fv6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [fv12]
// [Asm] live_set: [fv5, zero, v7, fv8, fv12, fv6]
// [Asm] move_origin: []
// [Asm] defined: fv12 is F
// [Asm] defs: [fv13]
// [Asm] live_set: [fv5, zero, v7, fv8, fv13, fv12, fv6]
// [Asm] move_origin: []
// [Asm] defined: fv13 is F
// [Asm] defs: [v14]
// [Asm] live_set: [fv5, v14, zero, v7, fv8, fv6]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v7, fv5, fv6, zero, fv8]
// [Asm] move_origin: []
// [Asm] defs: [fv8]
// [Asm] live_set: [fv8, fv5, fv6, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: fv8 is F
// [Asm] defs: [v10]
// [Asm] live_set: [fv8, fv5, v10, fv6, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [fv8, fv5, fv6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v25]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v24]
// [Asm] live_set: [v24]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v25]
// [Asm] move_origin: [v24]
// [Asm] defined: v25 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of calc_pixel7_12"];
// [Asm]   r0 [label="v25 ← a0", color=green];
// [Asm]   r5 [label="v23 ← a0", color=green];
// [Asm]   r3 [label="v4 ← a0", color=green];
// [Asm]   r2 [label="a0", color=blue];
// [Asm]   r9 [label="v10 ← a1", color=green];
// [Asm]   r6 [label="v33 ← a1", color=green];
// [Asm]   r4 [label="v7 ← a0", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r7 [label="v22 ← a0", color=green];
// [Asm]   r10 [label="v24 ← a0", color=green];
// [Asm]   r8 [label="v14 ← a1", color=green];
// [Asm]   r1 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r4 -- r9;
// [Asm]   r4 -- r8;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r8;
// [Asm]   comment = "0:v25-> 1:zero-> 3:v4-> 4:v7-> 6:v33-> 8:v14-> 9:v10-> 7:v22-> 2:a0-> 5:v23-> 10:v24"
// [Asm]   comment = "v25<-a0;v23<-a0;v4<-a0;v10<-a1;v33<-a1;v7<-a0;v22<-a0;v24<-a0;v14<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of calc_pixel7_12"];
// [Asm]   r8 [label="fv17 ← fa3", color=green];
// [Asm]   r0 [label="fv2 ← fa0", color=green];
// [Asm]   r5 [label="fv8 ← fa2", color=green];
// [Asm]   r3 [label="fv5 ← fa0", color=green];
// [Asm]   r2 [label="fv3 ← fa1", color=green];
// [Asm]   r9 [label="fv18 ← fa3", color=green];
// [Asm]   r6 [label="fv34 ← fa3", color=green];
// [Asm]   r13 [label="fv12 ← fa3", color=green];
// [Asm]   r4 [label="fv6 ← fa1", color=green];
// [Asm]   r1 [label="fa1", color=blue];
// [Asm]   r11 [label="fv20 ← fa1", color=green];
// [Asm]   r7 [label="fv15 ← fa0", color=green];
// [Asm]   r10 [label="fv19 ← fa0", color=green];
// [Asm]   r12 [label="fv21 ← fa0", color=green];
// [Asm]   r14 [label="fv13 ← fa4", color=green];
// [Asm]   r4 -- r13;
// [Asm]   r9 -- r11;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r5 -- r9;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r13;
// [Asm]   r3 -- r6;
// [Asm]   r13 -- r14;
// [Asm]   r9 -- r12;
// [Asm]   r10 -- r11;
// [Asm]   r5 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r14;
// [Asm]   r4 -- r7;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r4 -- r6;
// [Asm]   r7 -- r8;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r9;
// [Asm]   comment = "0:fv2-> 1:fa1-> 2:fv3-> 3:fv5-> 4:fv6-> 5:fv8-> 6:fv34-> 9:fv18-> 13:fv12-> 14:fv13-> 7:fv15-> 8:fv17-> 10:fv19-> 11:fv20-> 12:fv21"
// [Asm]   comment = "fv17<-fa3;fv2<-fa0;fv8<-fa2;fv5<-fa0;fv3<-fa1;fv18<-fa3;fv34<-fa3;fv12<-fa3;fv6<-fa1;fv20<-fa1;fv15<-fa0;fv19<-fa0;fv21<-fa0;fv13<-fa4;"
// [Asm] }
// [Asm] 
// [Asm] subst   j .calc_pixel7_12_6 ->   j .calc_pixel7_12_6
// [Asm] subst   li v33, 4611686018427387904 ->   li a1, 4611686018427387904
// [Asm] subst   fmv.d.x fv34, v33 ->   fmv.d.x fa3, a1
// [Asm] subst   fmul.d fv15, fv34, fv5 ->   fmul.d fa0, fa3, fa0
// [Asm] subst   fld fv17, c_im.6, t5 ->   fld fa3, c_im.6, t5
// [Asm] subst   fmadd.d fv18, fv15, fv6, fv17 ->   fmadd.d fa3, fa0, fa1, fa3
// [Asm] subst   fnmsub.d fv19, fv6, fv6, fv8 ->   fnmsub.d fa0, fa1, fa1, fa2
// [Asm] subst   fld fv20, c_re.5, t5 ->   fld fa1, c_re.5, t5
// [Asm] subst   fadd.d fv21, fv19, fv20 ->   fadd.d fa0, fa0, fa1
// [Asm] subst   addi v22, v7, 1 ->   addi a0, a0, 1
// [Asm] subst   fmv.d fv6, fv18 ->   fmv.d fa1, fa3
// [Asm] subst   j .calc_pixel7_12_0 ->   j .calc_pixel7_12_0
// [Asm] subst   fmadd.d fv12, fv6, fv6, fv8 ->   fmadd.d fa3, fa1, fa1, fa2
// [Asm] subst   fld fv13, limit_sq.2, t5 ->   fld fa4, limit_sq.2, t5
// [Asm] subst   fle.d v14, fv13, fv12 ->   fle.d a1, fa4, fa3
// [Asm] subst   bne v14, zero, .calc_pixel7_12_3 ->   bne a1, zero, .calc_pixel7_12_3
// [Asm] subst   fmul.d fv8, fv5, fv5 ->   fmul.d fa2, fa0, fa0
// [Asm] subst   lw v10, iter.3 ->   lw a1, iter.3
// [Asm] subst   beq v7, v10, .calc_pixel7_12_1 ->   beq a0, a1, .calc_pixel7_12_1
// [Asm] subst   ret ->   ret
// [Asm] subst   lw v24, iter.3 ->   lw a0, iter.3
// [Asm] pre_assigned_registers: Self(fref=f4) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$iter.34"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   comment = "0:v2-> 1:a0"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$iter.34"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 300 ->   li a0, 300
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> fv3, Self(fref=f8) -> v0, Insn(iref=%0) -> fv2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [fv2]
// [Asm] live_set: [fv2]
// [Asm] move_origin: []
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$c_re.58"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$c_re.58"];
// [Asm]   r0 [label="fv2 ← fa0", color=green];
// [Asm]   r2 [label="fa0", color=blue];
// [Asm]   r1 [label="fv3 ← fa0", color=green];
// [Asm]   comment = "0:fv2-> 1:fv3-> 2:fa0"
// [Asm]   comment = "fv2<-fa0;fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   fld fv2, _4, t5 ->   fld fa0, _4, t5
// [Asm] subst   fneg.d fv3, fv2 ->   fneg.d fa0, fa0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v7, Insn(iref=%1) -> v4, Insn(iref=%3) -> v6, Mem(fref=f16, mref=m0) -> v2, Self(fref=f16) -> v0, Insn(iref=%5) -> v8, Insn(iref=%0) -> v3, Insn(iref=%2) -> v5
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, s11]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [zero, s11, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [zero, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [zero, s11, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v4]
// [Asm] live_set: [zero, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, zero, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v5, zero, v4, v12, v3]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v2, v5, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v5, zero, v4, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, zero, v4, a1, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v2, zero, a0, v4, a1, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v2, zero, a0, v4, a2, a1, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, zero, a0, v4, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, zero, a0, v4, a1, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v2, zero, a0, v4, a2, a1, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v2, zero, a0, v4, a2, a1, a3, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v2, zero, a0, a4, v4, a2, a1, a3, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a4 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v3, v4, zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v3, zero, a0, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0, v2]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, zero, a0, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [a2, a1, a3, zero, a0, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [a2, a1, a3, zero, a0, a4]
// [Asm] move_origin: [v2]
// [Asm] defined: a4 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main94_16"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r20 [label="v12 ← a1", color=green];
// [Asm]   r23 [label="v8 ← a0", color=green];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r9 [label="a2", color=blue];
// [Asm]   r6 [label="t3", color=blue];
// [Asm]   r13 [label="a6", color=blue];
// [Asm]   r4 [label="t1", color=blue];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r11 [label="a4", color=blue];
// [Asm]   r7 [label="t4", color=blue];
// [Asm]   r10 [label="a3", color=blue];
// [Asm]   r22 [label="v7 ← a0", color=green];
// [Asm]   r14 [label="a7", color=blue];
// [Asm]   r8 [label="a1", color=blue];
// [Asm]   r5 [label="t2", color=blue];
// [Asm]   r15 [label="v3 ← s0", color=green];
// [Asm]   r2 [label="a0", color=blue];
// [Asm]   r16 [label="v15 ← a0", color=green];
// [Asm]   r18 [label="v5 ← a0", color=green];
// [Asm]   r19 [label="v11 ← a1", color=green];
// [Asm]   r21 [label="v2 ← s2", color=green];
// [Asm]   r17 [label="v4 ← s1", color=green];
// [Asm]   r12 [label="a5", color=blue];
// [Asm]   r6 -- r21;
// [Asm]   r5 -- r21;
// [Asm]   r17 -- r21;
// [Asm]   r7 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r18 -- r21;
// [Asm]   r9 -- r17;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r5;
// [Asm]   r17 -- r19;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r9;
// [Asm]   r15 -- r18;
// [Asm]   r2 -- r6;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r17 -- r22;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r8 -- r21;
// [Asm]   r9 -- r10;
// [Asm]   r18 -- r20;
// [Asm]   r11 -- r15;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r12 -- r21;
// [Asm]   r1 -- r5;
// [Asm]   r21 -- r22;
// [Asm]   r13 -- r21;
// [Asm]   r14 -- r15;
// [Asm]   r17 -- r20;
// [Asm]   r10 -- r17;
// [Asm]   r17 -- r18;
// [Asm]   r3 -- r19;
// [Asm]   r0 -- r15;
// [Asm]   r13 -- r15;
// [Asm]   r6 -- r15;
// [Asm]   r14 -- r17;
// [Asm]   r11 -- r17;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r9 -- r15;
// [Asm]   r1 -- r23;
// [Asm]   r15 -- r22;
// [Asm]   r12 -- r15;
// [Asm]   r8 -- r9;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r22;
// [Asm]   r0 -- r21;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r2 -- r11;
// [Asm]   r7 -- r17;
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r15;
// [Asm]   r18 -- r19;
// [Asm]   r15 -- r17;
// [Asm]   r2 -- r14;
// [Asm]   r15 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r8 -- r15;
// [Asm]   r7 -- r15;
// [Asm]   r14 -- r21;
// [Asm]   r10 -- r15;
// [Asm]   r10 -- r11;
// [Asm]   r13 -- r17;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r17;
// [Asm]   r12 -- r17;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r15 -- r20;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r15 -- r19;
// [Asm]   r10 -- r21;
// [Asm]   r11 -- r21;
// [Asm]   r5 -- r15;
// [Asm]   r9 -- r21;
// [Asm]   comment = "0:t0-> 1:zero-> 2:a0-> 3:s11-> 15:v3-> 17:v4-> 4:t1-> 21:v2-> 5:t2-> 6:t3-> 7:t4-> 8:a1-> 9:a2-> 10:a3-> 11:a4-> 12:a5-> 13:a6-> 14:a7-> 18:v5-> 19:v11-> 20:v12-> 22:v7-> 16:v15-> 23:v8"
// [Asm]   comment = "v12<-a1;v8<-a0;v7<-a0;v3<-s0;v15<-a0;v5<-a0;v11<-a1;v2<-s2;v4<-s1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main94_16"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call minimbt_read_int ->   call minimbt_read_int
// [Asm] subst   mv v3, a0 ->   mv s0, a0
// [Asm] subst   li v15, 2 ->   li a0, 2
// [Asm] subst   mul v4, v3, v15 ->   mul s1, s0, a0
// [Asm] subst   mul v5, v4, v3 ->   mul a0, s1, s0
// [Asm] subst   slliw v11, v5, 2 ->   slliw a1, a0, 2
// [Asm] subst   sub v12, s11, v11 ->   sub a1, s11, a1
// [Asm] subst   andi v2, v12, -8 ->   andi s2, a1, -8
// [Asm] subst   mv s11, v2 ->   mv s11, s2
// [Asm] subst   mv a1, v5 ->   mv a1, a0
// [Asm] subst   mv a0, v2 ->   mv a0, s2
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   call memseti32 ->   call memseti32
// [Asm] subst   mv a0, v4 ->   mv a0, s1
// [Asm] subst   mv a1, v3 ->   mv a1, s0
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   mv a3, zero ->   mv a3, zero
// [Asm] subst   mv a4, v2 ->   mv a4, s2
// [Asm] subst   call main_loop30_14 ->   call main_loop30_14
// [Asm] subst   mv a0, v4 ->   mv a0, s1
// [Asm] subst   mv a1, v3 ->   mv a1, s0
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   mv a3, zero ->   mv a3, zero
// [Asm] subst   mv a4, v2 ->   mv a4, s2
// [Asm] subst   call print_loop68_15 ->   call print_loop68_15
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$limit.10"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   comment = "0:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$limit.10"];
// [Asm]   r0 [label="fv3 ← fa0", color=green];
// [Asm]   r1 [label="fa0", color=blue];
// [Asm]   comment = "0:fv3-> 1:fa0"
// [Asm]   comment = "fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 4611686018427387904 ->   li a0, 4611686018427387904
// [Asm] subst   fmv.d.x fv3, v2 ->   fmv.d.x fa0, a0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f13, fpref=$f.0) -> v2, Insn(iref=%1) -> v4, Self(fref=f13) -> v0, BlockParam(bref=b5, bpref=$b.0) -> v5, BlockParam(bref=b6, bpref=$b.0) -> v6, Insn(iref=%0) -> v3
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=48), FnParam(fref=f13, fpref=$f.0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f13, fpref=$f.0), Int32(val=0)])
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v2]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [zero]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [v7]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [v5]
// [Asm] defined: v6 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of clamp25_13"];
// [Asm]   r0 [label="v8 ← a0", color=green];
// [Asm]   r5 [label="v7 ← a0", color=green];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r4 [label="v5 ← a0", color=green];
// [Asm]   r1 [label="v2 ← a1", color=green];
// [Asm]   r3 [label="v6 ← a0", color=green];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r2;
// [Asm]   comment = "0:v8-> 1:v2-> 2:zero-> 3:v6-> 4:v5-> 5:v7-> 6:a0"
// [Asm]   comment = "v8<-a0;v7<-a0;v5<-a0;v2<-a1;v6<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of clamp25_13"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v8, 48 ->   li a0, 48
// [Asm] subst   blt v2, v8, .clamp25_13_4 ->   blt a1, a0, .clamp25_13_4
// [Asm] subst   mv v2, a0 ->   mv a1, a0
// [Asm] subst   bge zero, v2, .clamp25_13_1 ->   bge zero, a1, .clamp25_13_1
// [Asm] subst   mv v6, zero ->   mv a0, zero
// [Asm] subst   j .clamp25_13_6 ->   j .clamp25_13_6
// [Asm] subst   mv v5, v2 ->   mv a0, a1
// [Asm] subst   j .clamp25_13_5 ->   j .clamp25_13_5
// [Asm] subst   li v7, 48 ->   li a0, 48
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f15, fpref=$f.4) -> v6, FnParam(fref=f15, fpref=$f.2) -> v4, FnParam(fref=f15, fpref=$f.3) -> v5, Insn(iref=%9) -> v18, Insn(iref=%8) -> v17, Insn(iref=%10) -> v19, BlockParam(bref=b0, bpref=$b.4) -> v11, BlockParam(bref=b0, bpref=$b.3) -> v10, BlockParam(bref=b0, bpref=$b.0) -> v7, BlockParam(bref=b0, bpref=$b.1) -> v8, BlockParam(bref=b0, bpref=$b.2) -> v9, Insn(iref=%5) -> v14, Insn(iref=%0) -> v12, FnParam(fref=f15, fpref=$f.1) -> v3, Insn(iref=%3) -> v21, FnParam(fref=f15, fpref=$f.0) -> v2, Insn(iref=%7) -> v16, Self(fref=f15) -> v0, BlockParam(bref=b6, bpref=$b.0) -> v22, Insn(iref=%2) -> v20, Insn(iref=%1) -> v13, Insn(iref=%6) -> v15
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.1)])
// [Asm] defs: []
// [Asm] live_set: [a2, a1, a3, zero, a0, a4]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, a3, zero, a4, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, a3, zero, a4, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, a3, zero, a4, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, zero, a4, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v4, v6, v5, zero, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v4, v6, v5, zero, v7]
// [Asm] move_origin: [v2]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v4, v6, v5, zero, v8]
// [Asm] move_origin: [v3]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v7, v6, v5, zero, v9, v8]
// [Asm] move_origin: [v4]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v7, v6, v10, zero, v9, v8]
// [Asm] move_origin: [v5]
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: [v6]
// [Asm] defined: v11 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v22]
// [Asm] move_origin: [zero]
// [Asm] defined: v22 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v11, v14, v10, zero, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v11, v10, zero, v7, v8, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v29]
// [Asm] live_set: [v11, v10, zero, v29, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [v30]
// [Asm] live_set: [v11, v10, zero, v30, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v16, v10, zero, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v11, v10, zero, v7, v8, v17, v9]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v7, v8, v17, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v10, zero, a0, v7, v8, v9]
// [Asm] move_origin: [v17]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, zero, a0, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v18]
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v11, v10, zero, v7, v8, v19]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v7, v8, v19]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v7, v8, v19]
// [Asm] move_origin: [v8]
// [Asm] defs: [v9]
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: [v19]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v7, v8]
// [Asm] move_origin: []
// [Asm] defs: [v24]
// [Asm] live_set: [v11, v10, zero, v7, v8, v24]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v10, zero, a0, v7, v8]
// [Asm] move_origin: [v24]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, zero, a0, v7, v8]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v20]
// [Asm] live_set: [v11, v10, zero, v7, v8]
// [Asm] move_origin: [a0]
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v7, v8]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v11, v21, zero, v7, v8]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v21, zero, v7, v8]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v11, v21, zero, v7, v8]
// [Asm] move_origin: [v8]
// [Asm] defs: [v9]
// [Asm] live_set: [v11, v21, zero, v7, v8, v9]
// [Asm] move_origin: [zero]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: [v21]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v22]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of print_loop68_15"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r33 [label="v24 ← a0", color=green];
// [Asm]   r9 [label="v6 ← a4", color=green];
// [Asm]   r26 [label="t3", color=blue];
// [Asm]   r6 [label="v3 ← a1", color=green];
// [Asm]   r13 [label="v10 ← s3", color=green];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r29 [label="a6", color=blue];
// [Asm]   r35 [label="v21 ← a0", color=green];
// [Asm]   r7 [label="v4 ← a2", color=green];
// [Asm]   r10 [label="v7 ← s0", color=green];
// [Asm]   r8 [label="v5 ← a3", color=green];
// [Asm]   r5 [label="a4", color=blue];
// [Asm]   r15 [label="v22 ← a0", color=green];
// [Asm]   r24 [label="t1", color=blue];
// [Asm]   r32 [label="v19 ← a0", color=green];
// [Asm]   r31 [label="v18 ← a0", color=green];
// [Asm]   r17 [label="v15 ← a0", color=green];
// [Asm]   r12 [label="v9 ← s2", color=green];
// [Asm]   r20 [label="v16 ← a0", color=green];
// [Asm]   r23 [label="t0", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r27 [label="t4", color=blue];
// [Asm]   r1 [label="a2", color=blue];
// [Asm]   r28 [label="a5", color=blue];
// [Asm]   r11 [label="v8 ← s1", color=green];
// [Asm]   r34 [label="v20 ← a0", color=green];
// [Asm]   r22 [label="a0", color=blue];
// [Asm]   r14 [label="v11 ← s4", color=green];
// [Asm]   r30 [label="a7", color=blue];
// [Asm]   r25 [label="t2", color=blue];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="v14 ← a0", color=green];
// [Asm]   r18 [label="v29 ← a0", color=green];
// [Asm]   r19 [label="v30 ← a0", color=green];
// [Asm]   r21 [label="v17 ← a0", color=green];
// [Asm]   r12 -- r26;
// [Asm]   r4 -- r19;
// [Asm]   r5 -- r12;
// [Asm]   r10 -- r14;
// [Asm]   r12 -- r35;
// [Asm]   r12 -- r25;
// [Asm]   r12 -- r29;
// [Asm]   r14 -- r20;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r34;
// [Asm]   r11 -- r35;
// [Asm]   r14 -- r16;
// [Asm]   r14 -- r27;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r10;
// [Asm]   r10 -- r26;
// [Asm]   r13 -- r32;
// [Asm]   r11 -- r14;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r22;
// [Asm]   r1 -- r10;
// [Asm]   r10 -- r13;
// [Asm]   r10 -- r19;
// [Asm]   r2 -- r10;
// [Asm]   r11 -- r31;
// [Asm]   r11 -- r32;
// [Asm]   r3 -- r11;
// [Asm]   r13 -- r31;
// [Asm]   r4 -- r27;
// [Asm]   r13 -- r28;
// [Asm]   r11 -- r24;
// [Asm]   r11 -- r18;
// [Asm]   r4 -- r22;
// [Asm]   r12 -- r19;
// [Asm]   r4 -- r35;
// [Asm]   r11 -- r19;
// [Asm]   r4 -- r31;
// [Asm]   r14 -- r34;
// [Asm]   r8 -- r12;
// [Asm]   r0 -- r6;
// [Asm]   r14 -- r30;
// [Asm]   r4 -- r21;
// [Asm]   r12 -- r24;
// [Asm]   r14 -- r28;
// [Asm]   r14 -- r19;
// [Asm]   r22 -- r25;
// [Asm]   r4 -- r33;
// [Asm]   r13 -- r30;
// [Asm]   r10 -- r20;
// [Asm]   r5 -- r6;
// [Asm]   r13 -- r33;
// [Asm]   r3 -- r4;
// [Asm]   r11 -- r13;
// [Asm]   r12 -- r28;
// [Asm]   r10 -- r18;
// [Asm]   r0 -- r2;
// [Asm]   r10 -- r12;
// [Asm]   r0 -- r9;
// [Asm]   r3 -- r13;
// [Asm]   r10 -- r33;
// [Asm]   r7 -- r10;
// [Asm]   r4 -- r28;
// [Asm]   r6 -- r10;
// [Asm]   r9 -- r12;
// [Asm]   r2 -- r12;
// [Asm]   r22 -- r27;
// [Asm]   r3 -- r10;
// [Asm]   r10 -- r31;
// [Asm]   r4 -- r12;
// [Asm]   r10 -- r22;
// [Asm]   r4 -- r29;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r13 -- r18;
// [Asm]   r4 -- r25;
// [Asm]   r1 -- r11;
// [Asm]   r10 -- r30;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r12 -- r23;
// [Asm]   r5 -- r14;
// [Asm]   r13 -- r22;
// [Asm]   r14 -- r31;
// [Asm]   r8 -- r11;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r10 -- r25;
// [Asm]   r12 -- r21;
// [Asm]   r0 -- r4;
// [Asm]   r13 -- r21;
// [Asm]   r7 -- r8;
// [Asm]   r11 -- r30;
// [Asm]   r10 -- r35;
// [Asm]   r4 -- r14;
// [Asm]   r13 -- r29;
// [Asm]   r4 -- r9;
// [Asm]   r14 -- r22;
// [Asm]   r11 -- r25;
// [Asm]   r14 -- r32;
// [Asm]   r10 -- r17;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r13 -- r24;
// [Asm]   r4 -- r16;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r14 -- r18;
// [Asm]   r11 -- r20;
// [Asm]   r14 -- r17;
// [Asm]   r11 -- r17;
// [Asm]   r4 -- r23;
// [Asm]   r14 -- r26;
// [Asm]   r2 -- r4;
// [Asm]   r8 -- r9;
// [Asm]   r14 -- r23;
// [Asm]   r11 -- r16;
// [Asm]   r13 -- r26;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r22;
// [Asm]   r5 -- r13;
// [Asm]   r22 -- r29;
// [Asm]   r13 -- r16;
// [Asm]   r11 -- r12;
// [Asm]   r22 -- r26;
// [Asm]   r4 -- r20;
// [Asm]   r11 -- r23;
// [Asm]   r1 -- r13;
// [Asm]   r10 -- r29;
// [Asm]   r11 -- r22;
// [Asm]   r4 -- r30;
// [Asm]   r4 -- r18;
// [Asm]   r10 -- r27;
// [Asm]   r14 -- r29;
// [Asm]   r2 -- r11;
// [Asm]   r14 -- r24;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r11;
// [Asm]   r10 -- r34;
// [Asm]   r13 -- r25;
// [Asm]   r13 -- r20;
// [Asm]   r22 -- r24;
// [Asm]   r13 -- r19;
// [Asm]   r10 -- r16;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r8;
// [Asm]   r14 -- r35;
// [Asm]   r12 -- r20;
// [Asm]   r14 -- r33;
// [Asm]   r9 -- r11;
// [Asm]   r11 -- r33;
// [Asm]   r4 -- r11;
// [Asm]   r10 -- r28;
// [Asm]   r13 -- r34;
// [Asm]   r22 -- r30;
// [Asm]   r12 -- r13;
// [Asm]   r2 -- r14;
// [Asm]   r12 -- r31;
// [Asm]   r0 -- r3;
// [Asm]   r13 -- r23;
// [Asm]   r0 -- r8;
// [Asm]   r4 -- r32;
// [Asm]   r22 -- r28;
// [Asm]   r14 -- r25;
// [Asm]   r14 -- r21;
// [Asm]   r13 -- r14;
// [Asm]   r12 -- r22;
// [Asm]   r10 -- r23;
// [Asm]   r10 -- r11;
// [Asm]   r22 -- r23;
// [Asm]   r7 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r13 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r8 -- r10;
// [Asm]   r11 -- r34;
// [Asm]   r12 -- r30;
// [Asm]   r4 -- r7;
// [Asm]   r11 -- r26;
// [Asm]   r12 -- r14;
// [Asm]   r12 -- r16;
// [Asm]   r4 -- r17;
// [Asm]   r12 -- r27;
// [Asm]   r11 -- r27;
// [Asm]   r12 -- r17;
// [Asm]   r10 -- r32;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r26;
// [Asm]   r9 -- r13;
// [Asm]   r0 -- r7;
// [Asm]   r11 -- r28;
// [Asm]   r10 -- r24;
// [Asm]   r10 -- r21;
// [Asm]   r13 -- r27;
// [Asm]   r12 -- r18;
// [Asm]   r11 -- r21;
// [Asm]   r11 -- r29;
// [Asm]   comment = "0:v2-> 1:a2-> 4:zero-> 6:v3-> 3:a3-> 7:v4-> 10:v7-> 5:a4-> 8:v5-> 11:v8-> 9:v6-> 12:v9-> 13:v10-> 14:v11-> 22:a0-> 2:a1-> 23:t0-> 24:t1-> 25:t2-> 26:t3-> 27:t4-> 28:a5-> 29:a6-> 30:a7-> 16:v14-> 17:v15-> 18:v29-> 19:v30-> 20:v16-> 21:v17-> 31:v18-> 32:v19-> 33:v24-> 34:v20-> 35:v21-> 15:v22"
// [Asm]   comment = "v2<-a0;v24<-a0;v6<-a4;v3<-a1;v10<-s3;v21<-a0;v4<-a2;v7<-s0;v5<-a3;v22<-a0;v19<-a0;v18<-a0;v15<-a0;v9<-s2;v16<-a0;v8<-s1;v20<-a0;v11<-s4;v14<-a0;v29<-a0;v30<-a0;v17<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of print_loop68_15"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v7, v2 ->   mv s0, a0
// [Asm] subst   mv v8, v3 ->   mv s1, a1
// [Asm] subst   mv v9, v4 ->   mv s2, a2
// [Asm] subst   mv v10, v5 ->   mv s3, a3
// [Asm] subst   mv v11, v6 ->   mv s4, a4
// [Asm] subst   mv v22, zero ->   mv a0, zero
// [Asm] subst   mul v14, v10, v7 ->   mul a0, s3, s0
// [Asm] subst   add v15, v14, v9 ->   add a0, a0, s2
// [Asm] subst   slliw v29, v15, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v30, v11, v29 ->   add a0, s4, a0
// [Asm] subst   lw v16, 0(v30) ->   lw a0, 0(a0)
// [Asm] subst   addi v17, v16, 48 ->   addi a0, a0, 48
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   addi v19, v9, 1 ->   addi a0, s2, 1
// [Asm] subst   mv v9, v19 ->   mv s2, a0
// [Asm] subst   j .print_loop68_15_0 ->   j .print_loop68_15_0
// [Asm] subst   beq v9, v7, .print_loop68_15_3 ->   beq s2, s0, .print_loop68_15_3
// [Asm] subst   li v24, 10 ->   li a0, 10
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   addi v21, v10, 1 ->   addi a0, s3, 1
// [Asm] subst   mv v9, zero ->   mv s2, zero
// [Asm] subst   mv v10, v21 ->   mv s3, a0
// [Asm] subst   j .print_loop68_15_0 ->   j .print_loop68_15_0
// [Asm] subst   ret ->   ret
// [Asm] subst   beq v10, v8, .print_loop68_15_1 ->   beq s3, s1, .print_loop68_15_1
// [Asm] pre_assigned_registers: Self(fref=f10) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$c_im.610"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   comment = "0:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$c_im.610"];
// [Asm]   r0 [label="fv3 ← fa0", color=green];
// [Asm]   r1 [label="fa0", color=blue];
// [Asm]   comment = "0:fv3-> 1:fa0"
// [Asm]   comment = "fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 4604885582990058455 ->   li a0, 4604885582990058455
// [Asm] subst   fmv.d.x fv3, v2 ->   fmv.d.x fa0, a0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%1) -> fv3, Insn(iref=%0) -> fv2, Insn(iref=%2) -> fv4
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [fv2]
// [Asm] live_set: [fv2]
// [Asm] move_origin: []
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fv2, fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fv4]
// [Asm] live_set: [fv4]
// [Asm] move_origin: []
// [Asm] defined: fv4 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv4]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$limit_sq.22"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$limit_sq.22"];
// [Asm]   r0 [label="fv2 ← fa0", color=green];
// [Asm]   r2 [label="fv4 ← fa0", color=green];
// [Asm]   r1 [label="fv3 ← fa1", color=green];
// [Asm]   r3 [label="fa0", color=blue];
// [Asm]   r0 -- r1;
// [Asm]   comment = "0:fv2-> 1:fv3-> 2:fv4-> 3:fa0"
// [Asm]   comment = "fv2<-fa0;fv4<-fa0;fv3<-fa1;"
// [Asm] }
// [Asm] 
// [Asm] subst   fld fv2, limit.1, t5 ->   fld fa0, limit.1, t5
// [Asm] subst   fld fv3, limit.1, t5 ->   fld fa1, limit.1, t5
// [Asm] subst   fmul.d fv4, fv2, fv3 ->   fmul.d fa0, fa0, fa1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v25, FnParam(fref=f14, fpref=$f.2) -> v4, Insn(iref=%9) -> fv19, Insn(iref=%16) -> v26, Insn(iref=%8) -> fv18, FnParam(fref=f14, fpref=$f.1) -> v3, Insn(iref=%10) -> fv20, BlockParam(bref=b0, bpref=$b.4) -> v11, BlockParam(bref=b0, bpref=$b.3) -> v10, BlockParam(bref=b0, bpref=$b.0) -> v7, Insn(iref=%14) -> fv24, BlockParam(bref=b0, bpref=$b.1) -> v8, FnParam(fref=f14, fpref=$f.4) -> v6, BlockParam(bref=b0, bpref=$b.2) -> v9, FnParam(fref=f14, fpref=$f.0) -> v2, Insn(iref=%5) -> fv15, Insn(iref=%0) -> v12, Insn(iref=%19) -> v29, Insn(iref=%4) -> fv14, Insn(iref=%18) -> v28, Insn(iref=%13) -> fv23, Insn(iref=%7) -> fv17, Self(fref=f14) -> v0, Insn(iref=%17) -> v27, BlockParam(bref=b6, bpref=$b.0) -> v32, Insn(iref=%2) -> v31, Insn(iref=%1) -> v13, Insn(iref=%20) -> v30, Insn(iref=%11) -> fv21, Insn(iref=%6) -> fv16, Insn(iref=%12) -> fv22, FnParam(fref=f14, fpref=$f.3) -> v5
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.1)])
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, a3, zero, a0, a4]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, a3, zero, a4, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, a3, zero, a4, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, a3, zero, a4, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, zero, a4, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v4, v6, v5, zero, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v4, v6, v5, zero, v7]
// [Asm] move_origin: [v2]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v4, v6, v5, zero, v8]
// [Asm] move_origin: [v3]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v7, v6, v5, zero, v9, v8]
// [Asm] move_origin: [v4]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v7, v6, v10, zero, v9, v8]
// [Asm] move_origin: [v5]
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: [v6]
// [Asm] defined: v11 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v32]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v32]
// [Asm] live_set: [v32]
// [Asm] move_origin: [zero]
// [Asm] defined: v32 is X
// [Asm] defs: [fv14]
// [Asm] live_set: [v11, v10, zero, v7, v8, fv14, v9]
// [Asm] move_origin: []
// [Asm] defined: fv14 is F
// [Asm] defs: [v56]
// [Asm] live_set: [v11, v10, v56, zero, v7, v8, fv14, v9]
// [Asm] move_origin: []
// [Asm] defined: v56 is X
// [Asm] defs: [fv57]
// [Asm] live_set: [v11, v10, zero, v7, v8, fv14, v9, fv57]
// [Asm] move_origin: []
// [Asm] defined: fv57 is F
// [Asm] defs: [fv15]
// [Asm] live_set: [v11, v10, zero, v7, v8, fv15, v9]
// [Asm] move_origin: []
// [Asm] defined: fv15 is F
// [Asm] defs: [fv16]
// [Asm] live_set: [v11, v10, zero, v7, v8, fv15, fv16, v9]
// [Asm] move_origin: []
// [Asm] defined: fv16 is F
// [Asm] defs: [fv17]
// [Asm] live_set: [v11, v10, zero, v7, v8, v9, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv17 is F
// [Asm] defs: [v51]
// [Asm] live_set: [v11, v10, zero, v7, v8, v9, fv17, v51]
// [Asm] move_origin: []
// [Asm] defined: v51 is X
// [Asm] defs: [fv52]
// [Asm] live_set: [v11, fv52, v10, zero, v7, v8, v9, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv52 is F
// [Asm] defs: [fv18]
// [Asm] live_set: [v11, v10, zero, v7, v8, fv18, v9]
// [Asm] move_origin: []
// [Asm] defined: fv18 is F
// [Asm] defs: [fv19]
// [Asm] live_set: [v11, v10, zero, v7, v8, fv19, v9]
// [Asm] move_origin: []
// [Asm] defined: fv19 is F
// [Asm] defs: [fv20]
// [Asm] live_set: [v11, v10, zero, v7, v8, fv20, fv19, v9]
// [Asm] move_origin: []
// [Asm] defined: fv20 is F
// [Asm] defs: [v46]
// [Asm] live_set: [v11, v46, v10, zero, v7, v8, fv20, fv19, v9]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: [fv47]
// [Asm] live_set: [v11, v10, zero, v7, v8, fv20, fv19, fv47, v9]
// [Asm] move_origin: []
// [Asm] defined: fv47 is F
// [Asm] defs: [fv21]
// [Asm] live_set: [v11, v10, zero, v7, v8, fv19, v9, fv21]
// [Asm] move_origin: []
// [Asm] defined: fv21 is F
// [Asm] defs: [fv22]
// [Asm] live_set: [v11, fv22, v10, zero, v7, v8, fv19, v9, fv21]
// [Asm] move_origin: []
// [Asm] defined: fv22 is F
// [Asm] defs: [fv23]
// [Asm] live_set: [v11, fv23, v10, zero, v7, v8, fv19, v9]
// [Asm] move_origin: []
// [Asm] defined: fv23 is F
// [Asm] defs: [v41]
// [Asm] live_set: [v11, fv23, v10, zero, v7, v8, fv19, v41, v9]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: [fv42]
// [Asm] live_set: [v11, fv23, v10, zero, fv42, v7, v8, fv19, v9]
// [Asm] move_origin: []
// [Asm] defined: fv42 is F
// [Asm] defs: [fv24]
// [Asm] live_set: [v11, fv24, v10, zero, v7, v8, fv19, v9]
// [Asm] move_origin: []
// [Asm] defined: fv24 is F
// [Asm] defs: []
// [Asm] live_set: [v11, fv24, v10, zero, v7, v8, fv19, v9]
// [Asm] move_origin: []
// [Asm] defs: [fa0]
// [Asm] live_set: [v11, fv24, v10, zero, v7, v8, fa0, v9]
// [Asm] move_origin: [fv19]
// [Asm] defined: fa0 is F
// [Asm] defs: [fa1]
// [Asm] live_set: [v11, v10, zero, v7, v8, fa0, v9, fa1]
// [Asm] move_origin: [fv24]
// [Asm] defined: fa1 is F
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v10, zero, a0, v7, v8, fa0, v9, fa1]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, zero, a0, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v25]
// [Asm] live_set: [v11, v25, v10, zero, v7, v8, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v25 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v25, v10, zero, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defs: [v26]
// [Asm] live_set: [v11, v25, v10, zero, v26, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v11, v25, v10, zero, v27, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v25, v10, zero, v27, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v10, zero, a0, v27, v7, v8, v9]
// [Asm] move_origin: [v25]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, zero, a0, v27, v8, v7, v9]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v28]
// [Asm] live_set: [v11, v10, zero, v27, v7, v8, v28, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v28 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v27, v7, v8, v28, v9]
// [Asm] move_origin: []
// [Asm] defs: [v35]
// [Asm] live_set: [v11, v10, zero, v7, v8, v35, v28, v9]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v11, v10, zero, v7, v8, v36, v28, v9]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defs: [v30]
// [Asm] live_set: [v11, v10, zero, v30, v7, v8]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v30, v7, v8]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v30, v7, v8]
// [Asm] move_origin: [v8]
// [Asm] defs: [v9]
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: [v30]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: [v31]
// [Asm] live_set: [v11, zero, v7, v8, v31]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: []
// [Asm] live_set: [v11, zero, v7, v8, v31]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v11, zero, v7, v8, v31]
// [Asm] move_origin: [v8]
// [Asm] defs: [v9]
// [Asm] live_set: [v11, zero, v7, v8, v31, v9]
// [Asm] move_origin: [zero]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: [v31]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main_loop30_14"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r33 [label="v35 ← a1", color=green];
// [Asm]   r9 [label="v6 ← a4", color=green];
// [Asm]   r26 [label="a5", color=blue];
// [Asm]   r6 [label="v3 ← a1", color=green];
// [Asm]   r13 [label="v10 ← s3", color=green];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r29 [label="v25 ← a0", color=green];
// [Asm]   r35 [label="v30 ← a0", color=green];
// [Asm]   r7 [label="v4 ← a2", color=green];
// [Asm]   r10 [label="v7 ← s0", color=green];
// [Asm]   r8 [label="v5 ← a3", color=green];
// [Asm]   r5 [label="a4", color=blue];
// [Asm]   r36 [label="v31 ← a0", color=green];
// [Asm]   r32 [label="v28 ← a0", color=green];
// [Asm]   r24 [label="t3", color=blue];
// [Asm]   r15 [label="a0", color=blue];
// [Asm]   r31 [label="v27 ← s5", color=green];
// [Asm]   r17 [label="v56 ← a0", color=green];
// [Asm]   r12 [label="v9 ← s2", color=green];
// [Asm]   r20 [label="v41 ← a0", color=green];
// [Asm]   r23 [label="t2", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r27 [label="a6", color=blue];
// [Asm]   r1 [label="a2", color=blue];
// [Asm]   r28 [label="a7", color=blue];
// [Asm]   r11 [label="v8 ← s1", color=green];
// [Asm]   r34 [label="v36 ← a1", color=green];
// [Asm]   r22 [label="t1", color=blue];
// [Asm]   r14 [label="v11 ← s4", color=green];
// [Asm]   r30 [label="v26 ← a1", color=green];
// [Asm]   r25 [label="t4", color=blue];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="v32 ← a0", color=green];
// [Asm]   r18 [label="v51 ← a0", color=green];
// [Asm]   r19 [label="v46 ← a0", color=green];
// [Asm]   r21 [label="t0", color=blue];
// [Asm]   r12 -- r25;
// [Asm]   r2 -- r31;
// [Asm]   r12 -- r29;
// [Asm]   r12 -- r32;
// [Asm]   r3 -- r15;
// [Asm]   r4 -- r34;
// [Asm]   r11 -- r35;
// [Asm]   r5 -- r10;
// [Asm]   r13 -- r32;
// [Asm]   r11 -- r14;
// [Asm]   r15 -- r31;
// [Asm]   r3 -- r6;
// [Asm]   r3 -- r11;
// [Asm]   r13 -- r31;
// [Asm]   r11 -- r18;
// [Asm]   r3 -- r31;
// [Asm]   r15 -- r25;
// [Asm]   r11 -- r19;
// [Asm]   r4 -- r31;
// [Asm]   r14 -- r34;
// [Asm]   r8 -- r12;
// [Asm]   r0 -- r6;
// [Asm]   r5 -- r31;
// [Asm]   r13 -- r30;
// [Asm]   r5 -- r6;
// [Asm]   r13 -- r33;
// [Asm]   r11 -- r13;
// [Asm]   r10 -- r18;
// [Asm]   r10 -- r12;
// [Asm]   r0 -- r9;
// [Asm]   r10 -- r33;
// [Asm]   r9 -- r12;
// [Asm]   r2 -- r12;
// [Asm]   r10 -- r31;
// [Asm]   r10 -- r22;
// [Asm]   r4 -- r29;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r4 -- r25;
// [Asm]   r1 -- r11;
// [Asm]   r12 -- r23;
// [Asm]   r32 -- r34;
// [Asm]   r11 -- r15;
// [Asm]   r15 -- r23;
// [Asm]   r14 -- r36;
// [Asm]   r13 -- r35;
// [Asm]   r12 -- r21;
// [Asm]   r0 -- r4;
// [Asm]   r11 -- r36;
// [Asm]   r4 -- r14;
// [Asm]   r14 -- r15;
// [Asm]   r27 -- r31;
// [Asm]   r14 -- r32;
// [Asm]   r4 -- r13;
// [Asm]   r13 -- r15;
// [Asm]   r11 -- r20;
// [Asm]   r28 -- r31;
// [Asm]   r14 -- r26;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r29 -- r30;
// [Asm]   r12 -- r34;
// [Asm]   r8 -- r9;
// [Asm]   r11 -- r12;
// [Asm]   r11 -- r23;
// [Asm]   r1 -- r13;
// [Asm]   r10 -- r29;
// [Asm]   r11 -- r22;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r5 -- r11;
// [Asm]   r13 -- r19;
// [Asm]   r14 -- r35;
// [Asm]   r12 -- r20;
// [Asm]   r14 -- r33;
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r15;
// [Asm]   r12 -- r13;
// [Asm]   r12 -- r33;
// [Asm]   r2 -- r14;
// [Asm]   r32 -- r33;
// [Asm]   r13 -- r23;
// [Asm]   r0 -- r3;
// [Asm]   r4 -- r32;
// [Asm]   r14 -- r25;
// [Asm]   r14 -- r21;
// [Asm]   r10 -- r15;
// [Asm]   r13 -- r14;
// [Asm]   r12 -- r22;
// [Asm]   r10 -- r11;
// [Asm]   r25 -- r31;
// [Asm]   r0 -- r5;
// [Asm]   r13 -- r17;
// [Asm]   r4 -- r36;
// [Asm]   r8 -- r10;
// [Asm]   r15 -- r24;
// [Asm]   r11 -- r34;
// [Asm]   r4 -- r7;
// [Asm]   r10 -- r36;
// [Asm]   r12 -- r17;
// [Asm]   r26 -- r31;
// [Asm]   r10 -- r32;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r9 -- r13;
// [Asm]   r11 -- r28;
// [Asm]   r11 -- r29;
// [Asm]   r5 -- r12;
// [Asm]   r23 -- r31;
// [Asm]   r14 -- r20;
// [Asm]   r1 -- r12;
// [Asm]   r2 -- r15;
// [Asm]   r14 -- r27;
// [Asm]   r5 -- r8;
// [Asm]   r10 -- r26;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r10;
// [Asm]   r10 -- r13;
// [Asm]   r10 -- r19;
// [Asm]   r2 -- r10;
// [Asm]   r11 -- r31;
// [Asm]   r11 -- r32;
// [Asm]   r29 -- r31;
// [Asm]   r22 -- r31;
// [Asm]   r4 -- r27;
// [Asm]   r13 -- r28;
// [Asm]   r11 -- r24;
// [Asm]   r4 -- r22;
// [Asm]   r12 -- r19;
// [Asm]   r4 -- r35;
// [Asm]   r14 -- r30;
// [Asm]   r1 -- r31;
// [Asm]   r4 -- r21;
// [Asm]   r12 -- r24;
// [Asm]   r14 -- r28;
// [Asm]   r14 -- r19;
// [Asm]   r4 -- r33;
// [Asm]   r10 -- r20;
// [Asm]   r24 -- r31;
// [Asm]   r3 -- r4;
// [Asm]   r12 -- r28;
// [Asm]   r0 -- r2;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r10;
// [Asm]   r4 -- r28;
// [Asm]   r7 -- r10;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r13 -- r18;
// [Asm]   r10 -- r30;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r13 -- r22;
// [Asm]   r14 -- r31;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r10 -- r25;
// [Asm]   r1 -- r6;
// [Asm]   r13 -- r21;
// [Asm]   r7 -- r8;
// [Asm]   r11 -- r30;
// [Asm]   r15 -- r28;
// [Asm]   r10 -- r35;
// [Asm]   r13 -- r29;
// [Asm]   r14 -- r22;
// [Asm]   r4 -- r9;
// [Asm]   r11 -- r25;
// [Asm]   r10 -- r17;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r13 -- r24;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r14 -- r18;
// [Asm]   r14 -- r17;
// [Asm]   r11 -- r17;
// [Asm]   r15 -- r26;
// [Asm]   r15 -- r22;
// [Asm]   r12 -- r36;
// [Asm]   r12 -- r15;
// [Asm]   r14 -- r23;
// [Asm]   r13 -- r26;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r15;
// [Asm]   r4 -- r20;
// [Asm]   r4 -- r30;
// [Asm]   r10 -- r27;
// [Asm]   r14 -- r29;
// [Asm]   r14 -- r24;
// [Asm]   r7 -- r9;
// [Asm]   r10 -- r34;
// [Asm]   r15 -- r27;
// [Asm]   r13 -- r25;
// [Asm]   r13 -- r20;
// [Asm]   r6 -- r8;
// [Asm]   r11 -- r33;
// [Asm]   r4 -- r11;
// [Asm]   r10 -- r28;
// [Asm]   r13 -- r34;
// [Asm]   r21 -- r31;
// [Asm]   r15 -- r21;
// [Asm]   r12 -- r31;
// [Asm]   r0 -- r8;
// [Asm]   r10 -- r23;
// [Asm]   r7 -- r11;
// [Asm]   r3 -- r14;
// [Asm]   r12 -- r30;
// [Asm]   r11 -- r26;
// [Asm]   r12 -- r14;
// [Asm]   r4 -- r17;
// [Asm]   r12 -- r27;
// [Asm]   r31 -- r32;
// [Asm]   r11 -- r27;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r26;
// [Asm]   r0 -- r7;
// [Asm]   r10 -- r21;
// [Asm]   r10 -- r24;
// [Asm]   r13 -- r27;
// [Asm]   r12 -- r18;
// [Asm]   r11 -- r21;
// [Asm]   r12 -- r26;
// [Asm]   r5 -- r15;
// [Asm]   r4 -- r19;
// [Asm]   r10 -- r14;
// [Asm]   comment = "0:v2-> 1:a2-> 4:zero-> 6:v3-> 3:a3-> 7:v4-> 10:v7-> 5:a4-> 8:v5-> 11:v8-> 9:v6-> 12:v9-> 13:v10-> 14:v11-> 15:a0-> 31:v27-> 2:a1-> 21:t0-> 22:t1-> 23:t2-> 24:t3-> 25:t4-> 26:a5-> 27:a6-> 28:a7-> 29:v25-> 30:v26-> 32:v28-> 33:v35-> 34:v36-> 17:v56-> 18:v51-> 19:v46-> 20:v41-> 35:v30-> 36:v31-> 16:v32"
// [Asm]   comment = "v2<-a0;v35<-a1;v6<-a4;v3<-a1;v10<-s3;v25<-a0;v30<-a0;v4<-a2;v7<-s0;v5<-a3;v31<-a0;v28<-a0;v27<-s5;v56<-a0;v9<-s2;v41<-a0;v8<-s1;v36<-a1;v11<-s4;v26<-a1;v32<-a0;v51<-a0;v46<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main_loop30_14"];
// [Asm]   r0 [label="fv14 ← fa0", color=green];
// [Asm]   r33 [label="fa7", color=blue];
// [Asm]   r9 [label="fv47 ← fa2", color=green];
// [Asm]   r26 [label="ft9", color=blue];
// [Asm]   r6 [label="fv18 ← fa0", color=green];
// [Asm]   r13 [label="fv42 ← fa2", color=green];
// [Asm]   r4 [label="fv17 ← fa0", color=green];
// [Asm]   r29 [label="fa3", color=blue];
// [Asm]   r7 [label="fv19 ← fa0", color=green];
// [Asm]   r10 [label="fv21 ← fa1", color=green];
// [Asm]   r8 [label="fv20 ← fa1", color=green];
// [Asm]   r5 [label="fv52 ← fa1", color=green];
// [Asm]   r15 [label="fa0", color=blue];
// [Asm]   r32 [label="fa6", color=blue];
// [Asm]   r24 [label="ft7", color=blue];
// [Asm]   r31 [label="fa5", color=blue];
// [Asm]   r17 [label="ft0", color=blue];
// [Asm]   r12 [label="fv23 ← fa1", color=green];
// [Asm]   r20 [label="ft3", color=blue];
// [Asm]   r23 [label="ft6", color=blue];
// [Asm]   r3 [label="fv16 ← fa1", color=green];
// [Asm]   r27 [label="ft10", color=blue];
// [Asm]   r1 [label="fv57 ← fa1", color=green];
// [Asm]   r28 [label="fa2", color=blue];
// [Asm]   r11 [label="fv22 ← fa2", color=green];
// [Asm]   r22 [label="ft5", color=blue];
// [Asm]   r14 [label="fv24 ← fa1", color=green];
// [Asm]   r30 [label="fa4", color=blue];
// [Asm]   r25 [label="ft8", color=blue];
// [Asm]   r2 [label="fv15 ← fa0", color=green];
// [Asm]   r16 [label="fa1", color=blue];
// [Asm]   r18 [label="ft1", color=blue];
// [Asm]   r19 [label="ft2", color=blue];
// [Asm]   r21 [label="ft4", color=blue];
// [Asm]   r0 -- r1;
// [Asm]   r4 -- r5;
// [Asm]   r12 -- r13;
// [Asm]   r7 -- r9;
// [Asm]   r7 -- r8;
// [Asm]   r7 -- r12;
// [Asm]   r7 -- r10;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r7 -- r14;
// [Asm]   r14 -- r15;
// [Asm]   r10 -- r11;
// [Asm]   r8 -- r9;
// [Asm]   r7 -- r11;
// [Asm]   r7 -- r13;
// [Asm]   comment = "0:fv14-> 1:fv57-> 2:fv15-> 3:fv16-> 4:fv17-> 5:fv52-> 6:fv18-> 7:fv19-> 8:fv20-> 9:fv47-> 10:fv21-> 11:fv22-> 12:fv23-> 13:fv42-> 14:fv24-> 15:fa0-> 16:fa1-> 17:ft0-> 18:ft1-> 19:ft2-> 20:ft3-> 21:ft4-> 22:ft5-> 23:ft6-> 24:ft7-> 25:ft8-> 26:ft9-> 27:ft10-> 28:fa2-> 29:fa3-> 30:fa4-> 31:fa5-> 32:fa6-> 33:fa7"
// [Asm]   comment = "fv14<-fa0;fv47<-fa2;fv18<-fa0;fv42<-fa2;fv17<-fa0;fv19<-fa0;fv21<-fa1;fv20<-fa1;fv52<-fa1;fv23<-fa1;fv16<-fa1;fv57<-fa1;fv22<-fa2;fv24<-fa1;fv15<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   beq v10, v8, .main_loop30_14_1 ->   beq s3, s1, .main_loop30_14_1
// [Asm] subst   mv v7, v2 ->   mv s0, a0
// [Asm] subst   mv v8, v3 ->   mv s1, a1
// [Asm] subst   mv v9, v4 ->   mv s2, a2
// [Asm] subst   mv v10, v5 ->   mv s3, a3
// [Asm] subst   mv v11, v6 ->   mv s4, a4
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v32, zero ->   mv a0, zero
// [Asm] subst   fcvt.d.w fv14, v9 ->   fcvt.d.w fa0, s2
// [Asm] subst   li v56, 4613937818241073152 ->   li a0, 4613937818241073152
// [Asm] subst   fmv.d.x fv57, v56 ->   fmv.d.x fa1, a0
// [Asm] subst   fmul.d fv15, fv57, fv14 ->   fmul.d fa0, fa1, fa0
// [Asm] subst   fcvt.d.w fv16, v7 ->   fcvt.d.w fa1, s0
// [Asm] subst   fdiv.d fv17, fv15, fv16 ->   fdiv.d fa0, fa0, fa1
// [Asm] subst   li v51, 4609434218613702656 ->   li a0, 4609434218613702656
// [Asm] subst   fmv.d.x fv52, v51 ->   fmv.d.x fa1, a0
// [Asm] subst   fsub.d fv18, fv17, fv52 ->   fsub.d fa0, fa0, fa1
// [Asm] subst   fneg.d fv19, fv18 ->   fneg.d fa0, fa0
// [Asm] subst   fcvt.d.w fv20, v10 ->   fcvt.d.w fa1, s3
// [Asm] subst   li v46, 4613937818241073152 ->   li a0, 4613937818241073152
// [Asm] subst   fmv.d.x fv47, v46 ->   fmv.d.x fa2, a0
// [Asm] subst   fmul.d fv21, fv47, fv20 ->   fmul.d fa1, fa2, fa1
// [Asm] subst   fcvt.d.w fv22, v8 ->   fcvt.d.w fa2, s1
// [Asm] subst   fdiv.d fv23, fv21, fv22 ->   fdiv.d fa1, fa1, fa2
// [Asm] subst   li v41, 4609434218613702656 ->   li a0, 4609434218613702656
// [Asm] subst   fmv.d.x fv42, v41 ->   fmv.d.x fa2, a0
// [Asm] subst   fsub.d fv24, fv23, fv42 ->   fsub.d fa1, fa1, fa2
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   call calc_pixel7_12 ->   call calc_pixel7_12
// [Asm] subst   mul v26, v10, v7 ->   mul a1, s3, s0
// [Asm] subst   add v27, v26, v9 ->   add s5, a1, s2
// [Asm] subst   call clamp25_13 ->   call clamp25_13
// [Asm] subst   slliw v35, v27, 2 ->   slliw a1, s5, 2
// [Asm] subst   add v36, v11, v35 ->   add a1, s4, a1
// [Asm] subst   sw v28, 0(v36) ->   sw a0, 0(a1)
// [Asm] subst   addi v30, v9, 1 ->   addi a0, s2, 1
// [Asm] subst   mv v9, v30 ->   mv s2, a0
// [Asm] subst   j .main_loop30_14_0 ->   j .main_loop30_14_0
// [Asm] subst   addi v31, v10, 1 ->   addi a0, s3, 1
// [Asm] subst   mv v9, zero ->   mv s2, zero
// [Asm] subst   mv v10, v31 ->   mv s3, a0
// [Asm] subst   j .main_loop30_14_0 ->   j .main_loop30_14_0
// [Asm] subst   beq v9, v7, .main_loop30_14_3 ->   beq s2, s0, .main_loop30_14_3
// [Asm] pre_assigned_registers: Self(fref=f22) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_22"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_22"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main94_16 ->   call main94_16
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf true
// [Asm] T$c_re.58:
// [Asm] # block info: defs: [fv2, fv3, fa0], uses: [fv2, fv3, fa0], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$c_re.58_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   fld fv2, _4, t5  # live: [fv2]
// [Asm]   fneg.d fv3, fv2  # live: [fv3]
// [Asm] # control
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$iter.34:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$iter.34_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 300  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$limit_sq.22:
// [Asm] # block info: defs: [fv4, fv2, fv3, fa0], uses: [fv4, fv2, fv3, fa0], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$limit_sq.22_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   fld fv2, limit.1, t5  # live: [fv2]
// [Asm]   fld fv3, limit.1, t5  # live: [fv2, fv3]
// [Asm]   fmul.d fv4, fv2, fv3  # live: [fv4]
// [Asm] # control
// [Asm]   fmv.d fa0, fv4  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main_loop30_14:
// [Asm] # block info: defs: [v2, v11, v5, v10, v7, v8, v4, v6, v9, v3], uses: [v3, v5, a0, a4, a2, v4, a1, v6, a3, v2], upward_exposed: [a2, a1, a3, a0, a4], params_defs: []
// [Asm] # live_in: [a0, zero, a4, a2, a1, a3], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: []
// [Asm] .main_loop30_14_8:
// [Asm]   # save_ctx1  # live: [a2, a1, a3, zero, a0, a4]
// [Asm]   mv v2, a0  # live: [a2, a1, a3, zero, a4, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, a3, zero, a4, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, a3, zero, a4, v3]
// [Asm]   mv v5, a3  # live: [v2, v4, v5, zero, a4, v3]
// [Asm]   mv v6, a4  # live: [v2, v4, v6, v5, zero, v3]
// [Asm] # control
// [Asm]   mv v7, v2  # live: [v3, v4, v6, v5, zero, v7]
// [Asm]   mv v8, v3  # live: [v7, v4, v6, v5, zero, v8]
// [Asm]   mv v9, v4  # live: [v7, v6, v5, zero, v9, v8]
// [Asm]   mv v10, v5  # live: [v7, v6, v10, zero, v9, v8]
// [Asm]   mv v11, v6  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v10, v8], upward_exposed: [v10, v8], params_defs: [v8, v11, v10, v9, v7]
// [Asm] # live_in: [v11, v10, zero, v7, v8, v9], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: [v7, v8, v9, v10, v11]
// [Asm] .main_loop30_14_0:
// [Asm] # control
// [Asm]   beq v10, v8, .main_loop30_14_1  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v9, v7], upward_exposed: [v9, v7], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v8, v7, v9], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: []
// [Asm] .main_loop30_14_2:
// [Asm] # control
// [Asm]   beq v9, v7, .main_loop30_14_3  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [fv24, a1, fv47, fv15, v28, fa1, v51, fa2, ft6, a4, fa6, v27, a6, ft10, ft5, ft4, ft9, fa4, ft2, a3, a7, fa7, fa3, ft3, fv42, t2, fv18, fv17, fv52, v25, t1, fv23, v26, fv20, fv19, v41, ft0, ft1, fv14, fv16, fv22, fv21, ft7, v46, a5, a0, v30, v36, a2, fv57, v9, ft8, t3, t0, fa5, v56, fa0, v35, t4], uses: [fv52, v25, fv24, fv23, v26, v7, fv20, fv19, v41, fv14, fv47, fv16, fv15, v28, fa1, v51, fv22, zero, v27, v8, fv21, v11, v46, v10, a0, v30, v36, fv57, v9, v56, fv42, fa0, v35, fv18, fv17], upward_exposed: [v11, v10, zero, v8, v7, v9], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v7, v8, v9], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: []
// [Asm] .main_loop30_14_4:
// [Asm]   fcvt.d.w fv14, v9  # live: [v11, v10, zero, v7, v8, fv14, v9]
// [Asm]   li v56, 4613937818241073152  # live: [v11, v10, v56, zero, v7, v8, fv14, v9]
// [Asm]   fmv.d.x fv57, v56  # live: [v11, v10, zero, v7, v8, fv14, v9, fv57]
// [Asm]   fmul.d fv15, fv57, fv14  # live: [v11, v10, zero, v7, v8, fv15, v9]
// [Asm]   fcvt.d.w fv16, v7  # live: [v11, v10, zero, v7, v8, fv15, fv16, v9]
// [Asm]   fdiv.d fv17, fv15, fv16  # live: [v11, v10, zero, v7, v8, v9, fv17]
// [Asm]   li v51, 4609434218613702656  # live: [v11, v10, zero, v7, v8, v9, fv17, v51]
// [Asm]   fmv.d.x fv52, v51  # live: [v11, fv52, v10, zero, v7, v8, v9, fv17]
// [Asm]   fsub.d fv18, fv17, fv52  # live: [v11, v10, zero, v7, v8, fv18, v9]
// [Asm]   fneg.d fv19, fv18  # live: [v11, v10, zero, v7, v8, fv19, v9]
// [Asm]   fcvt.d.w fv20, v10  # live: [v11, v10, zero, v7, v8, fv20, fv19, v9]
// [Asm]   li v46, 4613937818241073152  # live: [v11, v46, v10, zero, v7, v8, fv20, fv19, v9]
// [Asm]   fmv.d.x fv47, v46  # live: [v11, v10, zero, v7, v8, fv20, fv19, fv47, v9]
// [Asm]   fmul.d fv21, fv47, fv20  # live: [v11, v10, zero, v7, v8, fv19, v9, fv21]
// [Asm]   fcvt.d.w fv22, v8  # live: [v11, fv22, v10, zero, v7, v8, fv19, v9, fv21]
// [Asm]   fdiv.d fv23, fv21, fv22  # live: [v11, fv23, v10, zero, v7, v8, fv19, v9]
// [Asm]   li v41, 4609434218613702656  # live: [v11, fv23, v10, zero, v7, v8, fv19, v41, v9]
// [Asm]   fmv.d.x fv42, v41  # live: [v11, fv23, v10, zero, fv42, v7, v8, fv19, v9]
// [Asm]   fsub.d fv24, fv23, fv42  # live: [v11, fv24, v10, zero, v7, v8, fv19, v9]
// [Asm]   # save_ctx2  # live: [v11, fv24, v10, zero, v7, v8, fv19, v9]
// [Asm]   fmv.d fa0, fv19  # live: [v11, fv24, v10, zero, v7, v8, fa0, v9]
// [Asm]   fmv.d fa1, fv24  # live: [v11, v10, zero, v7, v8, fa0, v9, fa1]
// [Asm]   mv a0, zero  # live: [v11, v10, zero, a0, v7, v8, fa0, v9, fa1]
// [Asm]   call calc_pixel7_12  # live: [v11, v10, zero, a0, v7, v8, v9]
// [Asm]   mv v25, a0  # live: [v11, v25, v10, zero, v7, v8, v9]
// [Asm]   # restore_ctx2  # live: [v11, v25, v10, zero, v7, v8, v9]
// [Asm]   mul v26, v10, v7  # live: [v11, v25, v10, zero, v26, v7, v8, v9]
// [Asm]   add v27, v26, v9  # live: [v11, v25, v10, zero, v27, v7, v8, v9]
// [Asm]   # save_ctx2  # live: [v11, v25, v10, zero, v27, v7, v8, v9]
// [Asm]   mv a0, v25  # live: [v11, v10, zero, a0, v27, v7, v8, v9]
// [Asm]   call clamp25_13  # live: [v11, v10, zero, a0, v27, v8, v7, v9]
// [Asm]   mv v28, a0  # live: [v11, v10, zero, v27, v7, v8, v28, v9]
// [Asm]   # restore_ctx2  # live: [v11, v10, zero, v27, v7, v8, v28, v9]
// [Asm]   slliw v35, v27, 2  # live: [v11, v10, zero, v7, v8, v35, v28, v9]
// [Asm]   add v36, v11, v35  # live: [v11, v10, zero, v7, v8, v36, v28, v9]
// [Asm]   sw v28, 0(v36)  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   addi v30, v9, 1  # live: [v11, v10, zero, v30, v7, v8]
// [Asm] # control
// [Asm]   mv v7, v7  # live: [v11, v10, zero, v30, v7, v8]
// [Asm]   mv v8, v8  # live: [v11, v10, zero, v30, v7, v8]
// [Asm]   mv v9, v30  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   mv v11, v11  # live: [v7, v11, v10, zero, v9, v8]
// [Asm]   j .main_loop30_14_0  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [v32], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v32]
// [Asm] # block parameters: []
// [Asm] .main_loop30_14_1:
// [Asm] # control
// [Asm]   mv v32, zero  # live: [v32]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v32, a0], upward_exposed: [v32], params_defs: [v32]
// [Asm] # live_in: [v32], live_out: []
// [Asm] # block parameters: [v32]
// [Asm] .main_loop30_14_6:
// [Asm] # control
// [Asm]   mv a0, v32  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v10, v31, v9], uses: [v8, v11, v10, v31, zero, v7], upward_exposed: [v8, v11, v10, zero, v7], params_defs: []
// [Asm] # live_in: [v7, v11, v10, zero, v8], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: []
// [Asm] .main_loop30_14_3:
// [Asm]   addi v31, v10, 1  # live: [v11, zero, v7, v8, v31]
// [Asm] # control
// [Asm]   mv v7, v7  # live: [v11, zero, v7, v8, v31]
// [Asm]   mv v8, v8  # live: [v11, zero, v7, v8, v31]
// [Asm]   mv v9, zero  # live: [v11, zero, v7, v8, v31, v9]
// [Asm]   mv v10, v31  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   mv v11, v11  # live: [v7, v11, v10, zero, v9, v8]
// [Asm]   j .main_loop30_14_0  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # leaf true
// [Asm] T$limit.10:
// [Asm] # block info: defs: [fa0, fv3, v2], uses: [fa0, fv3, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$limit.10_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 4611686018427387904  # live: [v2]
// [Asm]   fmv.d.x fv3, v2  # live: [fv3]
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$_4_6:
// [Asm] # block info: defs: [fa0, fv3, v2], uses: [fa0, fv3, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_4_6_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 4593527504729830064  # live: [v2]
// [Asm]   fmv.d.x fv3, v2  # live: [fv3]
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] print_loop68_15:
// [Asm] # block info: defs: [v2, v11, v5, v10, v7, v8, v4, v6, v9, v3], uses: [v3, v5, a0, a4, a2, v4, a1, v6, a3, v2], upward_exposed: [a2, a1, a3, a0, a4], params_defs: []
// [Asm] # live_in: [a0, zero, a4, a2, a1, a3], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: []
// [Asm] .print_loop68_15_8:
// [Asm]   # save_ctx1  # live: [a2, a1, a3, zero, a0, a4]
// [Asm]   mv v2, a0  # live: [a2, a1, a3, zero, a4, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, a3, zero, a4, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, a3, zero, a4, v3]
// [Asm]   mv v5, a3  # live: [v2, v4, v5, zero, a4, v3]
// [Asm]   mv v6, a4  # live: [v2, v4, v6, v5, zero, v3]
// [Asm] # control
// [Asm]   mv v7, v2  # live: [v3, v4, v6, v5, zero, v7]
// [Asm]   mv v8, v3  # live: [v7, v4, v6, v5, zero, v8]
// [Asm]   mv v9, v4  # live: [v7, v6, v5, zero, v9, v8]
// [Asm]   mv v10, v5  # live: [v7, v6, v10, zero, v9, v8]
// [Asm]   mv v11, v6  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v10, v8], upward_exposed: [v10, v8], params_defs: [v8, v11, v10, v9, v7]
// [Asm] # live_in: [v11, v10, zero, v7, v8, v9], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: [v7, v8, v9, v10, v11]
// [Asm] .print_loop68_15_0:
// [Asm] # control
// [Asm]   beq v10, v8, .print_loop68_15_1  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v9, v7], upward_exposed: [v9, v7], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v8, v7, v9], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: []
// [Asm] .print_loop68_15_2:
// [Asm] # control
// [Asm]   beq v9, v7, .print_loop68_15_3  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v16, ft0, ft1, a1, fa1, fa2, v29, ft6, a4, fa6, a6, v19, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, v30, ft2, a2, v17, a3, v9, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v15], uses: [v11, v14, v16, v10, a0, v30, v7, v17, v9, v29, v8, v19, v15], upward_exposed: [v8, v11, v10, v9, v7], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v7, v8, v9], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: []
// [Asm] .print_loop68_15_4:
// [Asm]   mul v14, v10, v7  # live: [v11, v14, v10, zero, v7, v8, v9]
// [Asm]   add v15, v14, v9  # live: [v11, v10, zero, v7, v8, v15, v9]
// [Asm]   slliw v29, v15, 2  # live: [v11, v10, zero, v29, v7, v8, v9]
// [Asm]   add v30, v11, v29  # live: [v11, v10, zero, v30, v7, v8, v9]
// [Asm]   lw v16, 0(v30)  # live: [v11, v16, v10, zero, v7, v8, v9]
// [Asm]   addi v17, v16, 48  # live: [v11, v10, zero, v7, v8, v17, v9]
// [Asm]   # save_ctx2  # live: [v11, v10, zero, v7, v8, v17, v9]
// [Asm]   mv a0, v17  # live: [v11, v10, zero, a0, v7, v8, v9]
// [Asm]   call minimbt_print_char  # live: [v11, v10, zero, a0, v7, v8, v9]
// [Asm]   mv v18, a0  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   # restore_ctx2  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   addi v19, v9, 1  # live: [v11, v10, zero, v7, v8, v19]
// [Asm] # control
// [Asm]   mv v7, v7  # live: [v11, v10, zero, v7, v8, v19]
// [Asm]   mv v8, v8  # live: [v11, v10, zero, v7, v8, v19]
// [Asm]   mv v9, v19  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   mv v11, v11  # live: [v7, v11, v10, zero, v9, v8]
// [Asm]   j .print_loop68_15_0  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [v22], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v22]
// [Asm] # block parameters: []
// [Asm] .print_loop68_15_1:
// [Asm] # control
// [Asm]   mv v22, zero  # live: [v22]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v22], upward_exposed: [v22], params_defs: [v22]
// [Asm] # live_in: [v22], live_out: []
// [Asm] # block parameters: [v22]
// [Asm] .print_loop68_15_6:
// [Asm] # control
// [Asm]   mv a0, v22  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v20, a6, ft10, ft5, ft7, ft4, ft9, v21, v10, a5, a0, fa4, ft2, a2, v24, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v11, v10, v21, a0, zero, v8, v7, v24], upward_exposed: [v8, v11, v10, zero, v7], params_defs: []
// [Asm] # live_in: [v7, v11, v10, zero, v8], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: []
// [Asm] .print_loop68_15_3:
// [Asm]   # save_ctx2  # live: [v11, v10, zero, v7, v8]
// [Asm]   li v24, 10  # live: [v11, v10, zero, v7, v8, v24]
// [Asm]   mv a0, v24  # live: [v11, v10, zero, a0, v7, v8]
// [Asm]   call minimbt_print_char  # live: [v11, v10, zero, a0, v7, v8]
// [Asm]   mv v20, a0  # live: [v11, v10, zero, v7, v8]
// [Asm]   # restore_ctx2  # live: [v11, v10, zero, v7, v8]
// [Asm]   addi v21, v10, 1  # live: [v11, v21, zero, v7, v8]
// [Asm] # control
// [Asm]   mv v7, v7  # live: [v11, v21, zero, v7, v8]
// [Asm]   mv v8, v8  # live: [v11, v21, zero, v7, v8]
// [Asm]   mv v9, zero  # live: [v11, v21, zero, v7, v8, v9]
// [Asm]   mv v10, v21  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   mv v11, v11  # live: [v7, v11, v10, zero, v9, v8]
// [Asm]   j .print_loop68_15_0  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # leaf true
// [Asm] T$c_im.610:
// [Asm] # block info: defs: [fa0, fv3, v2], uses: [fa0, fv3, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$c_im.610_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 4604885582990058455  # live: [v2]
// [Asm]   fmv.d.x fv3, v2  # live: [fv3]
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] clamp25_13:
// [Asm] # block info: defs: [v2], uses: [a0, zero, v2], upward_exposed: [a0, zero], params_defs: []
// [Asm] # live_in: [a0, zero], live_out: [zero, v2]
// [Asm] # block parameters: []
// [Asm] .clamp25_13_0:
// [Asm]   # save_ctx1  # live: [zero, a0]
// [Asm]   mv v2, a0  # live: [zero, v2]
// [Asm] # control
// [Asm]   bge zero, v2, .clamp25_13_1  # live: [zero, v2]
// [Asm] 
// [Asm] # block info: defs: [v8], uses: [v8, v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v2]
// [Asm] # block parameters: []
// [Asm] .clamp25_13_2:
// [Asm] # control
// [Asm]   li v8, 48  # live: [v8, v2]
// [Asm]   blt v2, v8, .clamp25_13_4  # live: [v2]
// [Asm] 
// [Asm] # block info: defs: [v5, v7], uses: [v7], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .clamp25_13_3:
// [Asm] # control
// [Asm]   li v7, 48  # live: [v7]
// [Asm]   mv v5, v7  # live: [v5]
// [Asm] 
// [Asm] # block info: defs: [v6], uses: [v5], upward_exposed: [v5], params_defs: [v5]
// [Asm] # live_in: [v5], live_out: [v6]
// [Asm] # block parameters: [v5]
// [Asm] .clamp25_13_5:
// [Asm] # control
// [Asm]   mv v6, v5  # live: [v6]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v6, a0], upward_exposed: [v6], params_defs: [v6]
// [Asm] # live_in: [v6], live_out: []
// [Asm] # block parameters: [v6]
// [Asm] .clamp25_13_6:
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v6], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v6]
// [Asm] # block parameters: []
// [Asm] .clamp25_13_1:
// [Asm] # control
// [Asm]   mv v6, zero  # live: [v6]
// [Asm]   j .clamp25_13_6  # live: [v6]
// [Asm] 
// [Asm] # block info: defs: [v5], uses: [v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .clamp25_13_4:
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v5]
// [Asm]   j .clamp25_13_5  # live: [v5]
// [Asm] 
// [Asm] # leaf true
// [Asm] calc_pixel7_12:
// [Asm] # block info: defs: [fv5, v4, fv2, fv6, fv3, v7], uses: [fa0, v4, fv2, fa1, a0, fv3], upward_exposed: [fa1, a0, fa0], params_defs: []
// [Asm] # live_in: [fa0, fa1, a0, zero], live_out: [fv5, fv6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .calc_pixel7_12_8:
// [Asm]   # save_ctx1  # live: [fa0, zero, a0, fa1]
// [Asm]   fmv.d fv2, fa0  # live: [fv2, zero, a0, fa1]
// [Asm]   fmv.d fv3, fa1  # live: [fv2, zero, fv3, a0]
// [Asm]   mv v4, a0  # live: [v4, fv2, zero, fv3]
// [Asm] # control
// [Asm]   fmv.d fv5, fv2  # live: [fv5, v4, zero, fv3]
// [Asm]   fmv.d fv6, fv3  # live: [fv5, v4, fv6, zero]
// [Asm]   mv v7, v4  # live: [fv5, fv6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v10, fv8], uses: [fv5, v10, v7], upward_exposed: [fv5, v7], params_defs: [fv5, fv6, v7]
// [Asm] # live_in: [fv5, fv6, zero, v7], live_out: [v7, fv5, fv6, zero, fv8]
// [Asm] # block parameters: [fv5, fv6, v7]
// [Asm] .calc_pixel7_12_0:
// [Asm]   fmul.d fv8, fv5, fv5  # live: [fv8, fv5, fv6, zero, v7]
// [Asm]   lw v10, iter.3  # live: [fv8, fv5, v10, fv6, zero, v7]
// [Asm] # control
// [Asm]   beq v7, v10, .calc_pixel7_12_1  # live: [fv8, fv5, fv6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [fv12, v14, fv13], uses: [fv13, fv12, v14, fv6, zero, fv8], upward_exposed: [fv6, zero, fv8], params_defs: []
// [Asm] # live_in: [v7, fv5, fv6, zero, fv8], live_out: [fv8, fv5, fv6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .calc_pixel7_12_2:
// [Asm]   fmadd.d fv12, fv6, fv6, fv8  # live: [fv5, zero, v7, fv8, fv12, fv6]
// [Asm]   fld fv13, limit_sq.2, t5  # live: [fv5, zero, v7, fv8, fv13, fv12, fv6]
// [Asm]   fle.d v14, fv13, fv12  # live: [fv5, v14, zero, v7, fv8, fv6]
// [Asm] # control
// [Asm]   bne v14, zero, .calc_pixel7_12_3  # live: [v7, fv5, fv6, zero, fv8]
// [Asm] 
// [Asm] # block info: defs: [fv17, fv21, fv5, fv34, v22, fv20, v7, fv19, fv15, fv18, fv6, v33], uses: [v33, fv21, fv5, fv34, v22, fv20, v7, fv8, fv19, fv15, fv6, fv18, fv17], upward_exposed: [v7, fv5, fv6, fv8], params_defs: []
// [Asm] # live_in: [fv8, fv5, fv6, zero, v7], live_out: [fv5, fv6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .calc_pixel7_12_4:
// [Asm]   li v33, 4611686018427387904  # live: [v7, fv5, fv6, zero, v33, fv8]
// [Asm]   fmv.d.x fv34, v33  # live: [v7, fv5, fv6, zero, fv34, fv8]
// [Asm]   fmul.d fv15, fv34, fv5  # live: [v7, fv6, fv15, zero, fv8]
// [Asm]   fld fv17, c_im.6, t5  # live: [fv8, v7, fv6, fv15, zero, fv17]
// [Asm]   fmadd.d fv18, fv15, fv6, fv17  # live: [fv8, fv18, fv6, zero, v7]
// [Asm]   fnmsub.d fv19, fv6, fv6, fv8  # live: [fv19, fv18, zero, v7]
// [Asm]   fld fv20, c_re.5, t5  # live: [fv20, fv19, fv18, zero, v7]
// [Asm]   fadd.d fv21, fv19, fv20  # live: [fv18, zero, fv21, v7]
// [Asm]   addi v22, v7, 1  # live: [fv18, zero, v22, fv21]
// [Asm] # control
// [Asm]   fmv.d fv5, fv21  # live: [fv5, fv18, zero, v22]
// [Asm]   fmv.d fv6, fv18  # live: [fv5, fv6, zero, v22]
// [Asm]   mv v7, v22  # live: [fv5, fv6, zero, v7]
// [Asm]   j .calc_pixel7_12_0  # live: [fv5, fv6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v25, v24], uses: [v24], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v25]
// [Asm] # block parameters: []
// [Asm] .calc_pixel7_12_1:
// [Asm]   lw v24, iter.3  # live: [v24]
// [Asm] # control
// [Asm]   mv v25, v24  # live: [v25]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v25, a0], upward_exposed: [v25], params_defs: [v25]
// [Asm] # live_in: [v25], live_out: []
// [Asm] # block parameters: [v25]
// [Asm] .calc_pixel7_12_6:
// [Asm] # control
// [Asm]   mv a0, v25  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v23], uses: [v7], upward_exposed: [v7], params_defs: []
// [Asm] # live_in: [v7], live_out: [v23]
// [Asm] # block parameters: []
// [Asm] .calc_pixel7_12_3:
// [Asm] # control
// [Asm]   mv v23, v7  # live: [v23]
// [Asm] 
// [Asm] # block info: defs: [v25], uses: [v23], upward_exposed: [v23], params_defs: [v23]
// [Asm] # live_in: [v23], live_out: [v25]
// [Asm] # block parameters: [v23]
// [Asm] .calc_pixel7_12_5:
// [Asm] # control
// [Asm]   mv v25, v23  # live: [v25]
// [Asm]   j .calc_pixel7_12_6  # live: [v25]
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_22:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_22_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main94_16  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0, fa0, sp, s0, ra, s11, t5], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$limit.10  # live: [s0, fa0]
// [Asm]   la t5, limit.1  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$limit_sq.22  # live: [s0, fa0]
// [Asm]   la t5, limit_sq.2  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$iter.34  # live: [s0, a0]
// [Asm]   la t5, iter.3  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$_4_6  # live: [s0, fa0]
// [Asm]   la t5, _4  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$c_re.58  # live: [s0, fa0]
// [Asm]   la t5, c_re.5  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$c_im.610  # live: [s0, fa0]
// [Asm]   la t5, c_im.6  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$start_22  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main94_16:
// [Asm] # block info: defs: [v2, t1, v7, ft0, ft1, a1, v12, s11, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, v4, ft5, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15, v3], uses: [v3, v11, v5, a0, a2, a1, s11, v12, a3, zero, a4, v4, v15, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main94_16_0:
// [Asm]   # save_ctx1  # live: [zero, s11]
// [Asm]   # save_ctx2  # live: [zero, s11]
// [Asm]   call minimbt_read_int  # live: [zero, a0, s11]
// [Asm]   mv v3, a0  # live: [zero, s11, v3]
// [Asm]   # restore_ctx2  # live: [zero, s11, v3]
// [Asm]   li v15, 2  # live: [zero, s11, v15, v3]
// [Asm]   mul v4, v3, v15  # live: [zero, v4, s11, v3]
// [Asm]   mul v5, v4, v3  # live: [v5, zero, v4, s11, v3]
// [Asm]   slliw v11, v5, 2  # live: [v11, v5, zero, v4, s11, v3]
// [Asm]   sub v12, s11, v11  # live: [v5, zero, v4, v12, v3]
// [Asm]   andi v2, v12, -8  # live: [v2, v5, zero, v4, v3]
// [Asm]   mv s11, v2  # live: [v2, v5, zero, v4, v3]
// [Asm]   mv a1, v5  # live: [v2, zero, v4, a1, v3]
// [Asm]   mv a0, v2  # live: [v2, zero, a0, v4, a1, v3]
// [Asm]   mv a2, zero  # live: [v2, zero, a0, v4, a2, a1, v3]
// [Asm]   call memseti32  # live: [v2, zero, v4, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, v4, v3]
// [Asm]   mv a0, v4  # live: [v2, zero, a0, v4, v3]
// [Asm]   mv a1, v3  # live: [v2, zero, a0, v4, a1, v3]
// [Asm]   mv a2, zero  # live: [v2, zero, a0, v4, a2, a1, v3]
// [Asm]   mv a3, zero  # live: [v2, zero, a0, v4, a2, a1, a3, v3]
// [Asm]   mv a4, v2  # live: [v2, zero, a0, a4, v4, a2, a1, a3, v3]
// [Asm]   call main_loop30_14  # live: [v3, v4, zero, a0, v2]
// [Asm]   mv v7, a0  # live: [v3, v4, zero, v2]
// [Asm]   # restore_ctx2  # live: [v3, v4, zero, v2]
// [Asm]   # save_ctx2  # live: [v3, v4, zero, v2]
// [Asm]   mv a0, v4  # live: [v3, zero, a0, v2]
// [Asm]   mv a1, v3  # live: [a1, zero, a0, v2]
// [Asm]   mv a2, zero  # live: [a2, a1, zero, a0, v2]
// [Asm]   mv a3, zero  # live: [a2, a1, a3, zero, a0, v2]
// [Asm]   mv a4, v2  # live: [a2, a1, a3, zero, a0, a4]
// [Asm]   call print_loop68_15  # live: [zero, a0]
// [Asm]   mv v8, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] iter.3:
// [Asm]   .zero 4
// [Asm] c_im.6:
// [Asm]   .zero 8
// [Asm] start:
// [Asm]   .zero 4
// [Asm] _4:
// [Asm]   .zero 8
// [Asm] limit_sq.2:
// [Asm]   .zero 8
// [Asm] limit.1:
// [Asm]   .zero 8
// [Asm] c_re.5:
// [Asm]   .zero 8
// [Asm] 
// [Knf] build_knf: Let(("limit", Double), Double(2), Let(("limit_sq", Double), Prim(Var("limit"), Var("limit"), Mul, kind=Some(Double)), Let(("iter", Int), Int(300), Let(("c_re", Double), Neg(Double(0.123), kind=Some(Double)), Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))))))))))
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Let(("limit_sq", Double), Prim(Var("limit"), Var("limit"), Mul, kind=Some(Double)), Let(("iter", Int), Int(300), Let(("c_re", Double), Neg(Double(0.123), kind=Some(Double)), Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))))))))))
// [Knf] build_knf: Prim(Var("limit"), Var("limit"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("limit")
// [Knf] build_knf: Var("limit")
// [Knf] build_knf: Let(("iter", Int), Int(300), Let(("c_re", Double), Neg(Double(0.123), kind=Some(Double)), Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))))))))
// [Knf] build_knf: Int(300)
// [Knf] build_knf: Let(("c_re", Double), Neg(Double(0.123), kind=Some(Double)), Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))))))))
// [Knf] build_knf: Neg(Double(0.123), kind=Some(Double))
// [Knf] build_knf: Double(0.123)
// [Knf] build_knf: Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))))))
// [Knf] build_knf: Double(0.745)
// [Knf] build_knf: LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))))))
// [Knf] build_knf: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))
// [Knf] build_knf: Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))]))))))
// [Knf] build_knf: Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))
// [Knf] build_knf: Var("it")
// [Knf] build_knf: Var("iter")
// [Knf] build_knf: Var("iter")
// [Knf] build_knf: If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: Var("limit_sq")
// [Knf] build_knf: Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))
// [Knf] build_knf: Var("zr2")
// [Knf] build_knf: Var("zi2")
// [Knf] build_knf: Var("it")
// [Knf] build_knf: Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double))
// [Knf] build_knf: Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double))
// [Knf] build_knf: Prim(Double(2), Var("zr"), Mul, kind=Some(Double))
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: Var("c_im")
// [Knf] build_knf: Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double))
// [Knf] build_knf: Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double))
// [Knf] build_knf: Var("zr2")
// [Knf] build_knf: Var("zi2")
// [Knf] build_knf: Var("c_re")
// [Knf] build_knf: App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("calc_pixel")
// [Knf] build_knf: Var("new_zr")
// [Knf] build_knf: Var("new_zi")
// [Knf] build_knf: Prim(Var("it"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("it")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))))
// [Knf] build_knf: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: If(LE(Int(48), Var("i")), Int(48), Var("i"))
// [Knf] build_knf: Int(48)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(48)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))))
// [Knf] build_knf: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])
// [Knf] build_knf: Var("main_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Var("y"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))
// [Knf] build_knf: Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double))
// [Knf] build_knf: Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double))
// [Knf] build_knf: Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double))
// [Knf] build_knf: Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double))
// [Knf] build_knf: Double(3)
// [Knf] build_knf: App(Var("float_of_int"), [Var("x")])
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("float_of_int"), [Var("w")])
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Double(1.5)
// [Knf] build_knf: Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))
// [Knf] build_knf: Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double))
// [Knf] build_knf: Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double))
// [Knf] build_knf: Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double))
// [Knf] build_knf: Double(3)
// [Knf] build_knf: App(Var("float_of_int"), [Var("y")])
// [Knf] build_knf: Var("y")
// [Knf] build_knf: App(Var("float_of_int"), [Var("h")])
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Double(1.5)
// [Knf] build_knf: Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))
// [Knf] build_knf: App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)])
// [Knf] build_knf: Var("calc_pixel")
// [Knf] build_knf: Var("cr")
// [Knf] build_knf: Var("ci")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))
// [Knf] build_knf: Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")]))
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Var("y"), Var("w"), Mul, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("clamp"), [Var("res")])
// [Knf] build_knf: Var("clamp")
// [Knf] build_knf: Var("res")
// [Knf] build_knf: App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])
// [Knf] build_knf: Var("main_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))
// [Knf] build_knf: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]))
// [Knf] build_knf: App(Var("print_char"), [Int(10)])
// [Knf] build_knf: Int(10)
// [Knf] build_knf: App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])
// [Knf] build_knf: Var("print_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Var("y"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))
// [Knf] build_knf: App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))])
// [Knf] build_knf: Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))
// [Knf] build_knf: Int(48)
// [Knf] build_knf: Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Var("y"), Var("w"), Mul, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])
// [Knf] build_knf: Var("print_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))
// [Knf] build_knf: App(Var("read_int"), [])
// [Knf] build_knf: Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit))))
// [Knf] build_knf: Prim(Var("h"), Int(2), Mul, kind=Some(Int))
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))
// [Knf] build_knf: Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0))
// [Knf] build_knf: Prim(Var("w"), Var("h"), Mul, kind=Some(Int))
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit))
// [Knf] build_knf: App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")])
// [Knf] build_knf: Var("main_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)
// [Knf] build_knf: App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")])
// [Knf] build_knf: Var("print_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memseti32
// [Main]   .type memseti32, @function
// [Main] memseti32:
// [Main]   blez a1, .memseti32_b1
// [Main]   slli a1, a1, 2
// [Main]   add a1, a1, a0
// [Main] .memseti32_b0:
// [Main]   sw a2, 0(a0)
// [Main]   addi a0, a0, 4
// [Main]   bne a0, a1, .memseti32_b0
// [Main] .memseti32_b1:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$c_re.58
// [Main]   .type T$c_re.58, @function
// [Main] # leaf true
// [Main] T$c_re.58:
// [Main] .T$c_re.58_0:
// [Main]   fld fa0, _4, t5
// [Main]   fneg.d fa0, fa0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$iter.34
// [Main]   .type T$iter.34, @function
// [Main] # leaf true
// [Main] T$iter.34:
// [Main] .T$iter.34_0:
// [Main]   li a0, 300
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$limit_sq.22
// [Main]   .type T$limit_sq.22, @function
// [Main] # leaf true
// [Main] T$limit_sq.22:
// [Main] .T$limit_sq.22_0:
// [Main]   fld fa0, limit.1, t5
// [Main]   fld fa1, limit.1, t5
// [Main]   fmul.d fa0, fa0, fa1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main_loop30_14
// [Main]   .type main_loop30_14, @function
// [Main] # leaf false
// [Main] main_loop30_14:
// [Main] .main_loop30_14_8:
// [Main]   addi sp, sp, -64
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   mv s2, a2
// [Main]   mv s3, a3
// [Main]   mv s4, a4
// [Main] 
// [Main] .main_loop30_14_0:
// [Main]   beq s3, s1, .main_loop30_14_1
// [Main] 
// [Main] .main_loop30_14_2:
// [Main]   beq s2, s0, .main_loop30_14_3
// [Main] 
// [Main] .main_loop30_14_4:
// [Main]   fcvt.d.w fa0, s2
// [Main]   li a0, 4613937818241073152
// [Main]   fmv.d.x fa1, a0
// [Main]   fmul.d fa0, fa1, fa0
// [Main]   fcvt.d.w fa1, s0
// [Main]   fdiv.d fa0, fa0, fa1
// [Main]   li a0, 4609434218613702656
// [Main]   fmv.d.x fa1, a0
// [Main]   fsub.d fa0, fa0, fa1
// [Main]   fneg.d fa0, fa0
// [Main]   fcvt.d.w fa1, s3
// [Main]   li a0, 4613937818241073152
// [Main]   fmv.d.x fa2, a0
// [Main]   fmul.d fa1, fa2, fa1
// [Main]   fcvt.d.w fa2, s1
// [Main]   fdiv.d fa1, fa1, fa2
// [Main]   li a0, 4609434218613702656
// [Main]   fmv.d.x fa2, a0
// [Main]   fsub.d fa1, fa1, fa2
// [Main]   mv a0, zero
// [Main]   call calc_pixel7_12
// [Main]   mul a1, s3, s0
// [Main]   add s5, a1, s2
// [Main]   call clamp25_13
// [Main]   slliw a1, s5, 2
// [Main]   add a1, s4, a1
// [Main]   sw a0, 0(a1)
// [Main]   addi a0, s2, 1
// [Main]   mv s2, a0
// [Main]   j .main_loop30_14_0
// [Main] 
// [Main] .main_loop30_14_1:
// [Main]   mv a0, zero
// [Main] 
// [Main] .main_loop30_14_6:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   addi sp, sp, 64
// [Main]   ret
// [Main] 
// [Main] .main_loop30_14_3:
// [Main]   addi a0, s3, 1
// [Main]   mv s2, zero
// [Main]   mv s3, a0
// [Main]   j .main_loop30_14_0
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$limit.10
// [Main]   .type T$limit.10, @function
// [Main] # leaf true
// [Main] T$limit.10:
// [Main] .T$limit.10_0:
// [Main]   li a0, 4611686018427387904
// [Main]   fmv.d.x fa0, a0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_4_6
// [Main]   .type T$_4_6, @function
// [Main] # leaf true
// [Main] T$_4_6:
// [Main] .T$_4_6_0:
// [Main]   li a0, 4593527504729830064
// [Main]   fmv.d.x fa0, a0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl print_loop68_15
// [Main]   .type print_loop68_15, @function
// [Main] # leaf false
// [Main] print_loop68_15:
// [Main] .print_loop68_15_8:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   mv s2, a2
// [Main]   mv s3, a3
// [Main]   mv s4, a4
// [Main] 
// [Main] .print_loop68_15_0:
// [Main]   beq s3, s1, .print_loop68_15_1
// [Main] 
// [Main] .print_loop68_15_2:
// [Main]   beq s2, s0, .print_loop68_15_3
// [Main] 
// [Main] .print_loop68_15_4:
// [Main]   mul a0, s3, s0
// [Main]   add a0, a0, s2
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s4, a0
// [Main]   lw a0, 0(a0)
// [Main]   addi a0, a0, 48
// [Main]   call minimbt_print_char
// [Main]   addi a0, s2, 1
// [Main]   mv s2, a0
// [Main]   j .print_loop68_15_0
// [Main] 
// [Main] .print_loop68_15_1:
// [Main]   mv a0, zero
// [Main] 
// [Main] .print_loop68_15_6:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main] .print_loop68_15_3:
// [Main]   li a0, 10
// [Main]   call minimbt_print_char
// [Main]   addi a0, s3, 1
// [Main]   mv s2, zero
// [Main]   mv s3, a0
// [Main]   j .print_loop68_15_0
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$c_im.610
// [Main]   .type T$c_im.610, @function
// [Main] # leaf true
// [Main] T$c_im.610:
// [Main] .T$c_im.610_0:
// [Main]   li a0, 4604885582990058455
// [Main]   fmv.d.x fa0, a0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl clamp25_13
// [Main]   .type clamp25_13, @function
// [Main] # leaf true
// [Main] clamp25_13:
// [Main] .clamp25_13_0:
// [Main]   mv a1, a0
// [Main]   bge zero, a1, .clamp25_13_1
// [Main] 
// [Main] .clamp25_13_2:
// [Main]   li a0, 48
// [Main]   blt a1, a0, .clamp25_13_4
// [Main] 
// [Main] .clamp25_13_3:
// [Main]   li a0, 48
// [Main] 
// [Main] .clamp25_13_5:
// [Main] 
// [Main] .clamp25_13_6:
// [Main]   ret
// [Main] 
// [Main] .clamp25_13_1:
// [Main]   mv a0, zero
// [Main]   j .clamp25_13_6
// [Main] 
// [Main] .clamp25_13_4:
// [Main]   mv a0, a1
// [Main]   j .clamp25_13_5
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl calc_pixel7_12
// [Main]   .type calc_pixel7_12, @function
// [Main] # leaf true
// [Main] calc_pixel7_12:
// [Main] .calc_pixel7_12_8:
// [Main] 
// [Main] .calc_pixel7_12_0:
// [Main]   fmul.d fa2, fa0, fa0
// [Main]   lw a1, iter.3
// [Main]   beq a0, a1, .calc_pixel7_12_1
// [Main] 
// [Main] .calc_pixel7_12_2:
// [Main]   fmadd.d fa3, fa1, fa1, fa2
// [Main]   fld fa4, limit_sq.2, t5
// [Main]   fle.d a1, fa4, fa3
// [Main]   bne a1, zero, .calc_pixel7_12_3
// [Main] 
// [Main] .calc_pixel7_12_4:
// [Main]   li a1, 4611686018427387904
// [Main]   fmv.d.x fa3, a1
// [Main]   fmul.d fa0, fa3, fa0
// [Main]   fld fa3, c_im.6, t5
// [Main]   fmadd.d fa3, fa0, fa1, fa3
// [Main]   fnmsub.d fa0, fa1, fa1, fa2
// [Main]   fld fa1, c_re.5, t5
// [Main]   fadd.d fa0, fa0, fa1
// [Main]   addi a0, a0, 1
// [Main]   fmv.d fa1, fa3
// [Main]   j .calc_pixel7_12_0
// [Main] 
// [Main] .calc_pixel7_12_1:
// [Main]   lw a0, iter.3
// [Main] 
// [Main] .calc_pixel7_12_6:
// [Main]   ret
// [Main] 
// [Main] .calc_pixel7_12_3:
// [Main] 
// [Main] .calc_pixel7_12_5:
// [Main]   j .calc_pixel7_12_6
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_22
// [Main]   .type T$start_22, @function
// [Main] # leaf false
// [Main] T$start_22:
// [Main] .T$start_22_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main94_16
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$limit.10
// [Main]   la t5, limit.1
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$limit_sq.22
// [Main]   la t5, limit_sq.2
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$iter.34
// [Main]   la t5, iter.3
// [Main]   sw a0, 0(t5)
// [Main]   call T$_4_6
// [Main]   la t5, _4
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$c_re.58
// [Main]   la t5, c_re.5
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$c_im.610
// [Main]   la t5, c_im.6
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$start_22
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main94_16
// [Main]   .type main94_16, @function
// [Main] # leaf false
// [Main] main94_16:
// [Main] .main94_16_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   call minimbt_read_int
// [Main]   mv s0, a0
// [Main]   li a0, 2
// [Main]   mul s1, s0, a0
// [Main]   mul a0, s1, s0
// [Main]   slliw a1, a0, 2
// [Main]   sub a1, s11, a1
// [Main]   andi s2, a1, -8
// [Main]   mv s11, s2
// [Main]   mv a1, a0
// [Main]   mv a0, s2
// [Main]   mv a2, zero
// [Main]   call memseti32
// [Main]   mv a0, s1
// [Main]   mv a1, s0
// [Main]   mv a2, zero
// [Main]   mv a3, zero
// [Main]   mv a4, s2
// [Main]   call main_loop30_14
// [Main]   mv a0, s1
// [Main]   mv a1, s0
// [Main]   mv a2, zero
// [Main]   mv a3, zero
// [Main]   mv a4, s2
// [Main]   call print_loop68_15
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl iter.3
// [Main]   .type iter.3, @object
// [Main] iter.3:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl c_im.6
// [Main]   .type c_im.6, @object
// [Main] c_im.6:
// [Main]   .zero 8
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _4
// [Main]   .type _4, @object
// [Main] _4:
// [Main]   .zero 8
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl limit_sq.2
// [Main]   .type limit_sq.2, @object
// [Main] limit_sq.2:
// [Main]   .zero 8
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl limit.1
// [Main]   .type limit.1, @object
// [Main] limit.1:
// [Main]   .zero 8
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl c_re.5
// [Main]   .type c_re.5, @object
// [Main] c_re.5:
// [Main]   .zero 8
// [Main] 
// [Wasm] Lowering function T$_4_6
// [Wasm] Lowering control Return(args=[Double(val=0.123)])
// [Wasm] Lowered function T$_4_6 to wasm
// [Wasm] Lowering function calc_pixel7_12
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b6, args=[Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=2), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%8), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::5)
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%9), Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::4)
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%12), Insn(iref=%13)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%14), Insn(iref=%11), Insn(iref=%15)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::1)
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%6), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Branch(cond=Insn(iref=%7), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.2), Insn(iref=%2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b7, args=[FnParam(fref=f12, fpref=$f.0), FnParam(fref=f12, fpref=$f.1), FnParam(fref=f12, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function calc_pixel7_12 to wasm
// [Wasm] Lowering function T$iter.34
// [Wasm] Lowering control Return(args=[Int32(val=300)])
// [Wasm] Lowered function T$iter.34 to wasm
// [Wasm] Lowering function T$c_re.58
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::3)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Double, op=Neg, args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Return(args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function T$c_re.58 to wasm
// [Wasm] Lowering function main94_16
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_int", args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%0), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%1), Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Mem(fref=f16, mref=m0) -> $f16.m0
// [Wasm] Lowering insn Call(ty=Unit, f=f14, args=[Insn(iref=%1), Insn(iref=%0), Int32(val=0), Int32(val=0), Mem(fref=f16, mref=m0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Mem(fref=f16, mref=m0) -> $f16.m0
// [Wasm] Lowering insn Call(ty=Unit, f=f15, args=[Insn(iref=%1), Insn(iref=%0), Int32(val=0), Int32(val=0), Mem(fref=f16, mref=m0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Mem(fref=f16, mref=m0) -> $f16.m0
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Mem(fref=f16, mref=m0) -> $f16.m0
// [Wasm] Lowered function main94_16 to wasm
// [Wasm] Lowering function T$limit.10
// [Wasm] Lowering control Return(args=[Double(val=2)])
// [Wasm] Lowered function T$limit.10 to wasm
// [Wasm] Lowering function clamp25_13
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[Int32(val=48)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[FnParam(fref=f13, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=48), FnParam(fref=f13, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FnParam(fref=f13, fpref=$f.0), Int32(val=0)])
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function clamp25_13 to wasm
// [Wasm] Lowering function print_loop68_15
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b6, args=[Unit])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Int32(val=10)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.3), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Int32(val=0), Insn(iref=%3), BlockParam(bref=b0, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%5), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), offset=Insn(iref=%6), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Int32(val=48), Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%10), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b7, args=[FnParam(fref=f15, fpref=$f.0), FnParam(fref=f15, fpref=$f.1), FnParam(fref=f15, fpref=$f.2), FnParam(fref=f15, fpref=$f.3), FnParam(fref=f15, fpref=$f.4)])
// [Wasm] Get Local name FnParam(fref=f15, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f15, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f15, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f15, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f15, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name FnParam(fref=f15, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f15, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f15, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f15, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f15, fpref=$f.4) -> $$f.4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function print_loop68_15 to wasm
// [Wasm] Lowering function T$c_im.610
// [Wasm] Lowering control Return(args=[Double(val=0.745)])
// [Wasm] Lowered function T$c_im.610 to wasm
// [Wasm] Lowering function T$limit_sq.22
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::0)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::0)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function T$limit_sq.22 to wasm
// [Wasm] Lowering function main_loop30_14
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b6, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.3), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Int32(val=0), Insn(iref=%2), BlockParam(bref=b0, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=3), Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Double, op=Div, args=[Insn(iref=%5), Insn(iref=%6)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Insn(iref=%7), Double(val=1.5)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Double, op=Neg, args=[Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[BlockParam(bref=b0, bpref=$b.3)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=3), Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Op(ty=Double, op=Div, args=[Insn(iref=%11), Insn(iref=%12)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Insn(iref=%13), Double(val=1.5)])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Call(ty=Int32, f=f12, args=[Insn(iref=%9), Insn(iref=%14), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%16), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Call(ty=Int32, f=f13, args=[Insn(iref=%15)])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), offset=Insn(iref=%17), width=@32), val=Insn(iref=%18))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%20), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b7, args=[FnParam(fref=f14, fpref=$f.0), FnParam(fref=f14, fpref=$f.1), FnParam(fref=f14, fpref=$f.2), FnParam(fref=f14, fpref=$f.3), FnParam(fref=f14, fpref=$f.4)])
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.4) -> $$f.4
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function main_loop30_14 to wasm
// [Wasm] Lowering function T$start_22
// [Wasm] Lowering insn Call(ty=Unit, f=f16, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start_22 to wasm
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %16: Call(ty=Int32, f=f12, args=[Insn(iref=%14), Insn(iref=%11), Insn(iref=%15)])
// [CoreOpt] eliminated tail rec call %11: Call(ty=Unit, f=f15, args=[FnParam(fref=f15, fpref=$f.0), FnParam(fref=f15, fpref=$f.1), Insn(iref=%10), FnParam(fref=f15, fpref=$f.3), FnParam(fref=f15, fpref=$f.4)])
// [CoreOpt] eliminated tail rec call %4: Call(ty=Unit, f=f15, args=[FnParam(fref=f15, fpref=$f.0), FnParam(fref=f15, fpref=$f.1), Int32(val=0), Insn(iref=%3), FnParam(fref=f15, fpref=$f.4)])
// [CoreOpt] eliminated tail rec call %21: Call(ty=Unit, f=f14, args=[FnParam(fref=f14, fpref=$f.0), FnParam(fref=f14, fpref=$f.1), Insn(iref=%20), FnParam(fref=f14, fpref=$f.3), FnParam(fref=f14, fpref=$f.4)])
// [CoreOpt] eliminated tail rec call %3: Call(ty=Unit, f=f14, args=[FnParam(fref=f14, fpref=$f.0), FnParam(fref=f14, fpref=$f.1), Int32(val=0), Insn(iref=%2), FnParam(fref=f14, fpref=$f.4)])
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f12: Once, f4: Once, f8: Once, f16: Once, f0: Once, f13: Once, f15: Once, f10: Once, f2: Once, f14: Once, f22: Once})
