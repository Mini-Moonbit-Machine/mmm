// [Asm] pre_assigned_registers: Self(fref=f6) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$_4"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   comment = "0:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$_4"];
// [Asm]   r0 [label="fv3 ← fa0", color=green];
// [Asm]   r1 [label="fa0", color=blue];
// [Asm]   comment = "0:fv3-> 1:fa0"
// [Asm]   comment = "fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 4593527504729830064 ->   li a0, 4593527504729830064
// [Asm] subst   fmv.d.x fv3, v2 ->   fmv.d.x fa0, a0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v30, FnParam(fref=f12, fpref=$f.5) -> v7, FnParam(fref=f12, fpref=$f.2) -> v4, BlockParam(bref=b0, bpref=$b.5) -> v14, Insn(iref=%8) -> fv23, Insn(iref=%10) -> fv25, BlockParam(bref=b0, bpref=$b.4) -> fv13, FnParam(fref=f12, fpref=$f.6) -> fv8, BlockParam(bref=b0, bpref=$b.3) -> fv12, Insn(iref=%14) -> fv29, Insn(iref=%4) -> v34, FnParam(fref=f12, fpref=$f.3) -> fv5, FnParam(fref=f12, fpref=$f.0) -> fv2, FnParam(fref=f12, fpref=$f.4) -> fv6, BlockParam(bref=b6, bpref=$b.0) -> v35, Insn(iref=%1) -> fv17, Insn(iref=%11) -> fv26, BlockParam(bref=b0, bpref=$b.6) -> fv15, Insn(iref=%6) -> fv21, Insn(iref=%9) -> fv24, Self(fref=f12) -> v0, BlockParam(bref=b0, bpref=$b.0) -> fv9, BlockParam(bref=b0, bpref=$b.1) -> fv10, BlockParam(bref=b0, bpref=$b.2) -> v11, Insn(iref=%5) -> fv20, Insn(iref=%0) -> fv16, Insn(iref=%19) -> fv32, FnParam(fref=f12, fpref=$f.1) -> fv3, Insn(iref=%3) -> v19, Insn(iref=%18) -> v31, Insn(iref=%13) -> fv28, Insn(iref=%7) -> v22, BlockParam(bref=b5, bpref=$b.0) -> v33, Insn(iref=%2) -> v18, Insn(iref=%12) -> fv27
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%8), BlockParam(bref=b0, bpref=$b.1)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.2), Insn(iref=%2)])
// [Asm] defs: [v34]
// [Asm] live_set: [v34]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v35]
// [Asm] move_origin: [v34]
// [Asm] defined: v35 is X
// [Asm] defs: [v45]
// [Asm] live_set: [v11, fv9, fv10, zero, v45, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defined: v45 is X
// [Asm] defs: [fv46]
// [Asm] live_set: [v11, fv9, fv46, fv10, zero, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv46 is F
// [Asm] defs: [fv23]
// [Asm] live_set: [v11, fv23, fv10, zero, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv23 is F
// [Asm] defs: [fv25]
// [Asm] live_set: [v11, fv23, fv10, zero, fv25, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv25 is F
// [Asm] defs: [fv26]
// [Asm] live_set: [v11, zero, fv25, fv16, fv26, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv26 is F
// [Asm] defs: [fv27]
// [Asm] live_set: [v11, zero, fv25, fv27, fv26]
// [Asm] move_origin: []
// [Asm] defined: fv27 is F
// [Asm] defs: [fv28]
// [Asm] live_set: [v11, fv28, zero, fv25, fv27, fv26]
// [Asm] move_origin: []
// [Asm] defined: fv28 is F
// [Asm] defs: [fv29]
// [Asm] live_set: [v11, fv28, zero, fv25, fv29, fv26]
// [Asm] move_origin: []
// [Asm] defined: fv29 is F
// [Asm] defs: [v30]
// [Asm] live_set: [fv28, zero, fv25, v30, fv29, fv26]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: [v31]
// [Asm] live_set: [fv28, zero, fv25, v30, fv29, v31, fv26]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: [fv32]
// [Asm] live_set: [fv28, fv32, zero, fv25, v30, fv29, v31, fv26]
// [Asm] move_origin: []
// [Asm] defined: fv32 is F
// [Asm] defs: [fv9]
// [Asm] live_set: [fv9, fv28, fv32, zero, fv25, v30, v31, fv26]
// [Asm] move_origin: [fv29]
// [Asm] defined: fv9 is F
// [Asm] defs: [fv10]
// [Asm] live_set: [fv9, fv10, fv28, fv32, zero, fv25, v30, v31]
// [Asm] move_origin: [fv26]
// [Asm] defined: fv10 is F
// [Asm] defs: [v11]
// [Asm] live_set: [fv9, v11, fv10, fv28, fv32, zero, fv25, v31]
// [Asm] move_origin: [v30]
// [Asm] defined: v11 is X
// [Asm] defs: [fv12]
// [Asm] live_set: [fv9, v11, fv10, fv28, fv32, zero, fv12, v31]
// [Asm] move_origin: [fv25]
// [Asm] defined: fv12 is F
// [Asm] defs: [fv13]
// [Asm] live_set: [fv9, v11, fv10, fv32, zero, fv13, fv12, v31]
// [Asm] move_origin: [fv28]
// [Asm] defined: fv13 is F
// [Asm] defs: [v14]
// [Asm] live_set: [fv9, v11, fv10, v14, fv32, zero, fv13, fv12]
// [Asm] move_origin: [v31]
// [Asm] defined: v14 is X
// [Asm] defs: [fv15]
// [Asm] live_set: [fv9, v11, fv10, v14, zero, fv13, fv12, fv15]
// [Asm] move_origin: [fv32]
// [Asm] defined: fv15 is F
// [Asm] defs: []
// [Asm] live_set: [fv9, v11, fv10, v14, zero, fv13, fv12, fv15]
// [Asm] move_origin: []
// [Asm] defs: [fv16]
// [Asm] live_set: [v11, fv9, fv10, zero, fv16]
// [Asm] move_origin: []
// [Asm] defined: fv16 is F
// [Asm] defs: [fv17]
// [Asm] live_set: [v11, fv9, fv10, zero, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv17 is F
// [Asm] defs: [v18]
// [Asm] live_set: [v11, fv9, fv10, v18, zero, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v11, fv9, fv10, fv16, zero, fv17]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [fa3, fa2, fa4, zero, a0, fa0, a1, fa1]
// [Asm] move_origin: []
// [Asm] defs: [fv2]
// [Asm] live_set: [fv2, fa3, fa2, fa4, zero, a0, a1, fa1]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fv2, fa3, fa2, fa4, zero, a0, a1, fv3]
// [Asm] move_origin: [fa1]
// [Asm] defined: fv3 is F
// [Asm] defs: [v4]
// [Asm] live_set: [fv2, fa3, fa2, fa4, zero, v4, a1, fv3]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: [fv5]
// [Asm] live_set: [fv5, fv2, fa3, zero, fa4, v4, a1, fv3]
// [Asm] move_origin: [fa2]
// [Asm] defined: fv5 is F
// [Asm] defs: [fv6]
// [Asm] live_set: [fv5, fv2, zero, fa4, v4, a1, fv6, fv3]
// [Asm] move_origin: [fa3]
// [Asm] defined: fv6 is F
// [Asm] defs: [v7]
// [Asm] live_set: [fv5, fv2, zero, fa4, v7, v4, fv6, fv3]
// [Asm] move_origin: [a1]
// [Asm] defined: v7 is X
// [Asm] defs: [fv8]
// [Asm] live_set: [fv5, fv2, zero, fv8, v7, v4, fv6, fv3]
// [Asm] move_origin: [fa4]
// [Asm] defined: fv8 is F
// [Asm] defs: [fv9]
// [Asm] live_set: [fv9, fv5, zero, fv8, v7, v4, fv6, fv3]
// [Asm] move_origin: [fv2]
// [Asm] defined: fv9 is F
// [Asm] defs: [fv10]
// [Asm] live_set: [fv9, fv5, fv10, zero, fv8, v7, v4, fv6]
// [Asm] move_origin: [fv3]
// [Asm] defined: fv10 is F
// [Asm] defs: [v11]
// [Asm] live_set: [fv9, v11, fv5, fv10, zero, fv8, v7, fv6]
// [Asm] move_origin: [v4]
// [Asm] defined: v11 is X
// [Asm] defs: [fv12]
// [Asm] live_set: [fv9, v11, fv10, zero, fv8, v7, fv12, fv6]
// [Asm] move_origin: [fv5]
// [Asm] defined: fv12 is F
// [Asm] defs: [fv13]
// [Asm] live_set: [fv9, v11, fv10, zero, fv13, fv8, v7, fv12]
// [Asm] move_origin: [fv6]
// [Asm] defined: fv13 is F
// [Asm] defs: [v14]
// [Asm] live_set: [fv9, v11, fv10, v14, zero, fv13, fv8, fv12]
// [Asm] move_origin: [v7]
// [Asm] defined: v14 is X
// [Asm] defs: [fv15]
// [Asm] live_set: [fv9, v11, fv10, v14, zero, fv13, fv12, fv15]
// [Asm] move_origin: [fv8]
// [Asm] defined: fv15 is F
// [Asm] defs: [fv20]
// [Asm] live_set: [v11, fv9, fv10, zero, fv20, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv20 is F
// [Asm] defs: [fv21]
// [Asm] live_set: [v11, fv9, fv10, zero, fv20, fv16, fv17, fv21]
// [Asm] move_origin: []
// [Asm] defined: fv21 is F
// [Asm] defs: [v22]
// [Asm] live_set: [v11, fv9, fv10, zero, v22, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v11, fv9, fv10, fv16, zero, fv17]
// [Asm] move_origin: []
// [Asm] defs: [v35]
// [Asm] live_set: [v35]
// [Asm] move_origin: [v33]
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [v35]
// [Asm] move_origin: []
// [Asm] defs: [v33]
// [Asm] live_set: [v33]
// [Asm] move_origin: [v11]
// [Asm] defined: v33 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v35]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of calc_pixel.92"];
// [Asm]   r8 [label="v18 ← a0", color=green];
// [Asm]   r0 [label="v34 ← a0", color=green];
// [Asm]   r5 [label="v30 ← a1", color=green];
// [Asm]   r3 [label="v11 ← a1", color=green];
// [Asm]   r2 [label="v45 ← a0", color=green];
// [Asm]   r9 [label="a0", color=blue];
// [Asm]   r6 [label="v31 ← a0", color=green];
// [Asm]   r13 [label="v22 ← a0", color=green];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r1 [label="v35 ← a0", color=green];
// [Asm]   r11 [label="v4 ← a2", color=green];
// [Asm]   r7 [label="v14 ← a0", color=green];
// [Asm]   r10 [label="a1", color=blue];
// [Asm]   r12 [label="v7 ← a0", color=green];
// [Asm]   r14 [label="v33 ← a0", color=green];
// [Asm]   r11 -- r12;
// [Asm]   r4 -- r13;
// [Asm]   r4 -- r7;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r8;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r7;
// [Asm]   r2 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r3 -- r13;
// [Asm]   r3 -- r6;
// [Asm]   r2 -- r3;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r12;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r12;
// [Asm]   comment = "0:v34-> 1:v35-> 2:v45-> 3:v11-> 4:zero-> 6:v31-> 5:v30-> 7:v14-> 8:v18-> 12:v7-> 11:v4-> 13:v22-> 10:a1-> 9:a0-> 14:v33"
// [Asm]   comment = "v18<-a0;v34<-a0;v30<-a1;v11<-a1;v45<-a0;v31<-a0;v22<-a0;v35<-a0;v4<-a2;v14<-a0;v7<-a0;v33<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of calc_pixel.92"];
// [Asm]   r0 [label="fv9 ← fa0", color=green];
// [Asm]   r20 [label="fv3 ← fa1", color=green];
// [Asm]   r23 [label="fv8 ← fa3", color=green];
// [Asm]   r3 [label="fv17 ← fa3", color=green];
// [Asm]   r9 [label="fv28 ← fa2", color=green];
// [Asm]   r6 [label="fv25 ← fa4", color=green];
// [Asm]   r13 [label="fv13 ← fa2", color=green];
// [Asm]   r4 [label="fv46 ← fa4", color=green];
// [Asm]   r1 [label="fv10 ← fa1", color=green];
// [Asm]   r11 [label="fv32 ← fa3", color=green];
// [Asm]   r7 [label="fv26 ← fa1", color=green];
// [Asm]   r10 [label="fv29 ← fa0", color=green];
// [Asm]   r22 [label="fv6 ← fa2", color=green];
// [Asm]   r14 [label="fv15 ← fa3", color=green];
// [Asm]   r8 [label="fv27 ← fa0", color=green];
// [Asm]   r5 [label="fv23 ← fa0", color=green];
// [Asm]   r15 [label="fv2 ← fa0", color=green];
// [Asm]   r24 [label="fv20 ← fa4", color=green];
// [Asm]   r25 [label="fv21 ← fa5", color=green];
// [Asm]   r2 [label="fv16 ← fa2", color=green];
// [Asm]   r16 [label="fa3", color=blue];
// [Asm]   r18 [label="fa4", color=blue];
// [Asm]   r19 [label="fa1", color=blue];
// [Asm]   r17 [label="fa2", color=blue];
// [Asm]   r21 [label="fv5 ← fa5", color=green];
// [Asm]   r12 [label="fv12 ← fa4", color=green];
// [Asm]   r0 -- r20;
// [Asm]   r20 -- r21;
// [Asm]   r17 -- r20;
// [Asm]   r1 -- r24;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r0 -- r13;
// [Asm]   r6 -- r11;
// [Asm]   r16 -- r20;
// [Asm]   r3 -- r25;
// [Asm]   r1 -- r12;
// [Asm]   r2 -- r4;
// [Asm]   r0 -- r24;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r23;
// [Asm]   r15 -- r22;
// [Asm]   r8 -- r9;
// [Asm]   r1 -- r22;
// [Asm]   r0 -- r14;
// [Asm]   r0 -- r25;
// [Asm]   r11 -- r12;
// [Asm]   r0 -- r21;
// [Asm]   r1 -- r13;
// [Asm]   r18 -- r21;
// [Asm]   r0 -- r23;
// [Asm]   r0 -- r22;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r18 -- r22;
// [Asm]   r7 -- r9;
// [Asm]   r3 -- r5;
// [Asm]   r21 -- r23;
// [Asm]   r6 -- r8;
// [Asm]   r0 -- r6;
// [Asm]   r20 -- r23;
// [Asm]   r1 -- r9;
// [Asm]   r15 -- r18;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r9 -- r11;
// [Asm]   r20 -- r22;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r12 -- r13;
// [Asm]   r15 -- r17;
// [Asm]   r11 -- r13;
// [Asm]   r0 -- r2;
// [Asm]   r15 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r1 -- r21;
// [Asm]   r13 -- r23;
// [Asm]   r0 -- r9;
// [Asm]   r7 -- r10;
// [Asm]   r6 -- r10;
// [Asm]   r13 -- r14;
// [Asm]   r9 -- r12;
// [Asm]   r12 -- r22;
// [Asm]   r22 -- r23;
// [Asm]   r10 -- r11;
// [Asm]   r7 -- r11;
// [Asm]   r1 -- r25;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r11;
// [Asm]   r9 -- r10;
// [Asm]   r12 -- r23;
// [Asm]   r18 -- r20;
// [Asm]   r15 -- r23;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r12 -- r14;
// [Asm]   r16 -- r21;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r21 -- r22;
// [Asm]   r2 -- r24;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r7 -- r8;
// [Asm]   r0 -- r7;
// [Asm]   r24 -- r25;
// [Asm]   r15 -- r16;
// [Asm]   r15 -- r20;
// [Asm]   r2 -- r3;
// [Asm]   r15 -- r19;
// [Asm]   comment = "0:fv9-> 1:fv10-> 2:fv16-> 3:fv17-> 4:fv46-> 6:fv25-> 5:fv23-> 7:fv26-> 9:fv28-> 11:fv32-> 10:fv29-> 12:fv12-> 13:fv13-> 14:fv15-> 23:fv8-> 22:fv6-> 21:fv5-> 20:fv3-> 15:fv2-> 18:fa4-> 24:fv20-> 25:fv21-> 8:fv27-> 16:fa3-> 17:fa2-> 19:fa1"
// [Asm]   comment = "fv9<-fa0;fv3<-fa1;fv8<-fa3;fv17<-fa3;fv28<-fa2;fv25<-fa4;fv13<-fa2;fv46<-fa4;fv10<-fa1;fv32<-fa3;fv26<-fa1;fv29<-fa0;fv6<-fa2;fv15<-fa3;fv27<-fa0;fv23<-fa0;fv2<-fa0;fv20<-fa4;fv21<-fa5;fv16<-fa2;fv5<-fa5;fv12<-fa4;"
// [Asm] }
// [Asm] 
// [Asm] subst   lw v34, iter.3 ->   lw a0, iter.3
// [Asm] subst   li v45, 4611686018427387904 ->   li a0, 4611686018427387904
// [Asm] subst   fmv.d.x fv46, v45 ->   fmv.d.x fa4, a0
// [Asm] subst   fmul.d fv23, fv46, fv9 ->   fmul.d fa0, fa4, fa0
// [Asm] subst   fld fv25, c_im.6, t5 ->   fld fa4, c_im.6, t5
// [Asm] subst   fmadd.d fv26, fv23, fv10, fv25 ->   fmadd.d fa1, fa0, fa1, fa4
// [Asm] subst   fsub.d fv27, fv16, fv17 ->   fsub.d fa0, fa2, fa3
// [Asm] subst   fld fv28, c_re.5, t5 ->   fld fa2, c_re.5, t5
// [Asm] subst   fadd.d fv29, fv27, fv28 ->   fadd.d fa0, fa0, fa2
// [Asm] subst   addi v30, v11, 1 ->   addi a1, a1, 1
// [Asm] subst   lw v31, iter.3 ->   lw a0, iter.3
// [Asm] subst   fld fv32, limit_sq.2, t5 ->   fld fa3, limit_sq.2, t5
// [Asm] subst   j .calc_pixel.92_0 ->   j .calc_pixel.92_0
// [Asm] subst   fmul.d fv16, fv9, fv9 ->   fmul.d fa2, fa0, fa0
// [Asm] subst   fmul.d fv17, fv10, fv10 ->   fmul.d fa3, fa1, fa1
// [Asm] subst   lw v18, iter.3 ->   lw a0, iter.3
// [Asm] subst   beq v11, v18, .calc_pixel.92_1 ->   beq a1, a0, .calc_pixel.92_1
// [Asm] subst   mv v4, a0 ->   mv a2, a0
// [Asm] subst   fmv.d fv5, fa2 ->   fmv.d fa5, fa2
// [Asm] subst   fmv.d fv6, fa3 ->   fmv.d fa2, fa3
// [Asm] subst   mv v7, a1 ->   mv a0, a1
// [Asm] subst   fmv.d fv8, fa4 ->   fmv.d fa3, fa4
// [Asm] subst   mv v11, v4 ->   mv a1, a2
// [Asm] subst   fmv.d fv12, fv5 ->   fmv.d fa4, fa5
// [Asm] subst   fadd.d fv20, fv16, fv17 ->   fadd.d fa4, fa2, fa3
// [Asm] subst   fld fv21, limit_sq.2, t5 ->   fld fa5, limit_sq.2, t5
// [Asm] subst   fle.d v22, fv21, fv20 ->   fle.d a0, fa5, fa4
// [Asm] subst   bne v22, zero, .calc_pixel.92_3 ->   bne a0, zero, .calc_pixel.92_3
// [Asm] subst   j .calc_pixel.92_6 ->   j .calc_pixel.92_6
// [Asm] subst   mv v33, v11 ->   mv a0, a1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f4) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$iter.3"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   comment = "0:v2-> 1:a0"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$iter.3"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 300 ->   li a0, 300
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> fv3, Self(fref=f8) -> v0, Insn(iref=%0) -> fv2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [fv2]
// [Asm] live_set: [fv2]
// [Asm] move_origin: []
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$c_re.5"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$c_re.5"];
// [Asm]   r0 [label="fv2 ← fa0", color=green];
// [Asm]   r2 [label="fa0", color=blue];
// [Asm]   r1 [label="fv3 ← fa0", color=green];
// [Asm]   comment = "0:fv2-> 1:fv3-> 2:fa0"
// [Asm]   comment = "fv2<-fa0;fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   fld fv2, _4, t5 ->   fld fa0, _4, t5
// [Asm] subst   fneg.d fv3, fv2 ->   fneg.d fa0, fa0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$limit.1"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   comment = "0:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$limit.1"];
// [Asm]   r0 [label="fv3 ← fa0", color=green];
// [Asm]   r1 [label="fa0", color=blue];
// [Asm]   comment = "0:fv3-> 1:fa0"
// [Asm]   comment = "fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 4611686018427387904 ->   li a0, 4611686018427387904
// [Asm] subst   fmv.d.x fv3, v2 ->   fmv.d.x fa0, a0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: BlockParam(bref=b0, bpref=$b.7) -> v20, Insn(iref=%15) -> fv33, Insn(iref=%41) -> v46, BlockParam(bref=b0, bpref=$b.10) -> fv23, Insn(iref=%33) -> v52, Insn(iref=%8) -> fv26, Insn(iref=%10) -> fv28, BlockParam(bref=b0, bpref=$b.4) -> v17, Insn(iref=%27) -> fv61, Insn(iref=%25) -> v59, Insn(iref=%4) -> fv67, Insn(iref=%42) -> fv47, FnParam(fref=f13, fpref=$f.10) -> fv12, BlockParam(bref=b0, bpref=$b.8) -> fv21, Insn(iref=%26) -> v60, Self(fref=f13) -> v0, BlockParam(bref=b0, bpref=$b.6) -> fv19, FnParam(fref=f13, fpref=$f.2) -> v4, FnParam(fref=f13, fpref=$f.9) -> fv11, Insn(iref=%38) -> fv57, Insn(iref=%16) -> fv34, BlockParam(bref=b0, bpref=$b.1) -> v14, Insn(iref=%5) -> v68, Insn(iref=%19) -> v37, Insn(iref=%13) -> fv31, FnParam(fref=f13, fpref=$f.7) -> v9, FnParam(fref=f13, fpref=$f.8) -> fv10, Insn(iref=%23) -> v41, Insn(iref=%48) -> v51, Insn(iref=%20) -> fv38, Insn(iref=%34) -> v53, Insn(iref=%36) -> fv55, BlockParam(bref=b12, bpref=$b.0) -> v70, FnParam(fref=f13, fpref=$f.6) -> fv8, BlockParam(bref=b0, bpref=$b.9) -> fv22, BlockParam(bref=b0, bpref=$b.5) -> fv18, FnParam(fref=f13, fpref=$f.0) -> v2, FnParam(fref=f13, fpref=$f.3) -> v5, BlockParam(bref=b0, bpref=$b.3) -> v16, Insn(iref=%14) -> fv32, FnParam(fref=f13, fpref=$f.5) -> fv7, Insn(iref=%44) -> v49, Insn(iref=%32) -> v43, Insn(iref=%1) -> v25, Insn(iref=%11) -> fv29, Insn(iref=%6) -> fv69, Insn(iref=%35) -> fv54, FnParam(fref=f13, fpref=$f.4) -> v6, Insn(iref=%46) -> v44, Insn(iref=%28) -> fv62, Insn(iref=%9) -> fv27, Insn(iref=%24) -> v42, Insn(iref=%37) -> v56, BlockParam(bref=b0, bpref=$b.0) -> v13, Insn(iref=%45) -> fv50, BlockParam(bref=b0, bpref=$b.2) -> v15, Insn(iref=%29) -> v63, Insn(iref=%47) -> v58, Insn(iref=%0) -> v24, Insn(iref=%18) -> fv36, Insn(iref=%3) -> fv66, Insn(iref=%22) -> v40, Insn(iref=%17) -> fv35, Insn(iref=%2) -> v65, Insn(iref=%43) -> fv48, Insn(iref=%30) -> fv64, Insn(iref=%21) -> v39, FnParam(fref=f13, fpref=$f.1) -> v3, Insn(iref=%40) -> v45, Insn(iref=%12) -> fv30
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%23), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%23), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%23), width=@32))
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=48), Insn(iref=%21)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%21), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.1)])
// [Asm] defs: [v96]
// [Asm] live_set: [fv22, fv23, v16, v14, v96, v13, zero, v17, v15, v39]
// [Asm] move_origin: []
// [Asm] defined: v96 is X
// [Asm] defs: [v97]
// [Asm] live_set: [fv22, fv23, v16, v14, v13, zero, v97, v17, v15, v39]
// [Asm] move_origin: []
// [Asm] defined: v97 is X
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v16, v14, v13, zero, v17, v15]
// [Asm] move_origin: []
// [Asm] defs: [v46]
// [Asm] live_set: [fv22, fv23, v16, v14, v46, v13, zero, v17]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: [fv47]
// [Asm] live_set: [fv22, fv23, v16, v14, v46, v13, zero, v17, fv47]
// [Asm] move_origin: []
// [Asm] defined: fv47 is F
// [Asm] defs: [fv48]
// [Asm] live_set: [fv22, fv23, v16, v14, v46, v13, zero, fv48, v17, fv47]
// [Asm] move_origin: []
// [Asm] defined: fv48 is F
// [Asm] defs: [v49]
// [Asm] live_set: [fv22, fv23, v16, v14, v46, v49, v13, zero, fv48, v17, fv47]
// [Asm] move_origin: []
// [Asm] defined: v49 is X
// [Asm] defs: [fv50]
// [Asm] live_set: [fv22, fv50, fv23, v16, v14, v46, v49, v13, zero, fv48, v17, fv47]
// [Asm] move_origin: []
// [Asm] defined: fv50 is F
// [Asm] defs: []
// [Asm] live_set: [fv22, fv50, fv23, v16, v14, v46, v49, v13, zero, fv48, v17, fv47]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [fv22, fv50, fv23, v16, v14, v46, v49, v13, zero, fv48, v17, fv47]
// [Asm] move_origin: [v14]
// [Asm] defs: [v15]
// [Asm] live_set: [fv22, fv50, fv23, v16, v14, v49, zero, v13, fv48, v17, v15, fv47]
// [Asm] move_origin: [v46]
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [fv22, fv50, fv23, v16, v14, v49, zero, v13, fv48, v17, v15, fv47]
// [Asm] move_origin: [v16]
// [Asm] defs: []
// [Asm] live_set: [fv22, fv50, fv23, v16, v14, v49, zero, v13, fv48, v17, v15, fv47]
// [Asm] move_origin: [v17]
// [Asm] defs: [fv18]
// [Asm] live_set: [fv22, fv50, fv23, v16, v14, v49, zero, v13, fv48, v17, v15, fv18]
// [Asm] move_origin: [fv47]
// [Asm] defined: fv18 is F
// [Asm] defs: [fv19]
// [Asm] live_set: [fv22, fv50, fv23, v16, v14, v49, zero, v13, fv19, v17, v15, fv18]
// [Asm] move_origin: [fv48]
// [Asm] defined: fv19 is F
// [Asm] defs: [v20]
// [Asm] live_set: [fv22, fv50, fv23, v16, v14, v13, zero, v20, fv19, v17, v15, fv18]
// [Asm] move_origin: [v49]
// [Asm] defined: v20 is X
// [Asm] defs: [fv21]
// [Asm] live_set: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm] move_origin: [fv50]
// [Asm] defined: fv21 is F
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm] move_origin: [fv22]
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm] move_origin: [fv23]
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v16, v14, zero, v13, v17, v15]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v70]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v81]
// [Asm] live_set: [fv22, fv23, v16, v14, zero, v13, v81, v17, v15]
// [Asm] move_origin: []
// [Asm] defined: v81 is X
// [Asm] defs: [v82]
// [Asm] live_set: [fv22, fv23, v16, v14, v82, zero, v13, v17, v15]
// [Asm] move_origin: []
// [Asm] defined: v82 is X
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v16, v14, zero, v13, v17, v15]
// [Asm] move_origin: []
// [Asm] defs: [v60]
// [Asm] live_set: [fv22, fv23, v16, v14, zero, v13, v17, v60]
// [Asm] move_origin: []
// [Asm] defined: v60 is X
// [Asm] defs: [fv61]
// [Asm] live_set: [fv22, fv23, v16, v14, zero, v13, fv61, v17, v60]
// [Asm] move_origin: []
// [Asm] defined: fv61 is F
// [Asm] defs: [fv62]
// [Asm] live_set: [fv22, fv23, v16, v14, fv62, zero, v13, fv61, v17, v60]
// [Asm] move_origin: []
// [Asm] defined: fv62 is F
// [Asm] defs: [v63]
// [Asm] live_set: [fv22, fv23, v63, v16, v14, fv62, zero, v13, fv61, v17, v60]
// [Asm] move_origin: []
// [Asm] defined: v63 is X
// [Asm] defs: [fv64]
// [Asm] live_set: [fv22, fv23, v63, v16, v14, fv62, zero, fv64, v13, fv61, v17, v60]
// [Asm] move_origin: []
// [Asm] defined: fv64 is F
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v63, v16, v14, fv62, zero, fv64, v13, fv61, v17, v60]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v63, v16, v14, fv62, zero, fv64, v13, fv61, v17, v60]
// [Asm] move_origin: [v14]
// [Asm] defs: [v15]
// [Asm] live_set: [fv22, fv23, v63, v16, v14, fv62, zero, fv64, v13, fv61, v17, v15]
// [Asm] move_origin: [v60]
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v63, v16, v14, fv62, zero, fv64, v13, fv61, v17, v15]
// [Asm] move_origin: [v16]
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v63, v16, v14, fv62, zero, fv64, v13, fv61, v17, v15]
// [Asm] move_origin: [v17]
// [Asm] defs: [fv18]
// [Asm] live_set: [fv22, fv23, v63, v16, v14, fv62, zero, fv64, v13, v17, v15, fv18]
// [Asm] move_origin: [fv61]
// [Asm] defined: fv18 is F
// [Asm] defs: [fv19]
// [Asm] live_set: [fv22, fv23, v63, v16, v14, v13, zero, fv64, fv19, v17, v15, fv18]
// [Asm] move_origin: [fv62]
// [Asm] defined: fv19 is F
// [Asm] defs: [v20]
// [Asm] live_set: [fv22, fv23, v14, v16, v13, zero, fv64, v20, fv19, v17, v15, fv18]
// [Asm] move_origin: [v63]
// [Asm] defined: v20 is X
// [Asm] defs: [fv21]
// [Asm] live_set: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm] move_origin: [fv64]
// [Asm] defined: fv21 is F
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm] move_origin: [fv22]
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm] move_origin: [fv23]
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm] move_origin: []
// [Asm] defs: [v98]
// [Asm] live_set: [fv22, fv23, v14, v16, v13, zero, v41, v17, v15, v39, v98]
// [Asm] move_origin: []
// [Asm] defined: v98 is X
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v14, v16, v13, zero, v41, v17, v15, v39]
// [Asm] move_origin: []
// [Asm] defs: [v88]
// [Asm] live_set: [fv22, fv23, v14, v16, zero, v13, v88, v41, v17, v15]
// [Asm] move_origin: []
// [Asm] defined: v88 is X
// [Asm] defs: [v89]
// [Asm] live_set: [fv22, fv23, v14, v16, zero, v13, v88, v17, v15, v89]
// [Asm] move_origin: []
// [Asm] defined: v89 is X
// [Asm] defs: [v90]
// [Asm] live_set: [fv22, fv23, v14, v16, zero, v13, v88, v90, v17, v15]
// [Asm] move_origin: []
// [Asm] defined: v90 is X
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v14, v16, zero, v13, v17, v15]
// [Asm] move_origin: []
// [Asm] defs: [v53]
// [Asm] live_set: [fv22, fv23, v14, v16, v53, zero, v13, v17]
// [Asm] move_origin: []
// [Asm] defined: v53 is X
// [Asm] defs: [fv54]
// [Asm] live_set: [fv22, fv23, v14, v16, v53, zero, v13, fv54, v17]
// [Asm] move_origin: []
// [Asm] defined: fv54 is F
// [Asm] defs: [fv55]
// [Asm] live_set: [fv22, fv23, v14, v16, v53, zero, v13, fv54, fv55, v17]
// [Asm] move_origin: []
// [Asm] defined: fv55 is F
// [Asm] defs: [v56]
// [Asm] live_set: [fv22, fv23, v14, v16, v56, v53, zero, v13, fv54, fv55, v17]
// [Asm] move_origin: []
// [Asm] defined: v56 is X
// [Asm] defs: [fv57]
// [Asm] live_set: [fv22, fv23, v14, v16, v56, v53, zero, v13, fv54, fv55, v17, fv57]
// [Asm] move_origin: []
// [Asm] defined: fv57 is F
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v14, v16, v56, v53, zero, v13, fv54, fv55, v17, fv57]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v14, v16, v56, v53, zero, v13, fv54, fv55, v17, fv57]
// [Asm] move_origin: [v14]
// [Asm] defs: [v15]
// [Asm] live_set: [fv22, fv23, v14, v16, v56, v13, zero, fv54, fv55, v17, v15, fv57]
// [Asm] move_origin: [v53]
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v14, v16, v56, v13, zero, fv54, fv55, v17, v15, fv57]
// [Asm] move_origin: [v16]
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v14, v16, v56, v13, zero, fv54, fv55, v17, v15, fv57]
// [Asm] move_origin: [v17]
// [Asm] defs: [fv18]
// [Asm] live_set: [fv22, fv23, v14, v16, v56, v13, zero, fv55, v17, v15, fv18, fv57]
// [Asm] move_origin: [fv54]
// [Asm] defined: fv18 is F
// [Asm] defs: [fv19]
// [Asm] live_set: [fv22, fv23, v14, v16, v56, v13, zero, fv19, v17, v15, fv18, fv57]
// [Asm] move_origin: [fv55]
// [Asm] defined: fv19 is F
// [Asm] defs: [v20]
// [Asm] live_set: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv57]
// [Asm] move_origin: [v56]
// [Asm] defined: v20 is X
// [Asm] defs: [fv21]
// [Asm] live_set: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm] move_origin: [fv57]
// [Asm] defined: fv21 is F
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm] move_origin: [fv22]
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm] move_origin: [fv23]
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [fa3, fa2, a5, zero, fa4, a0, a4, fa0, a2, a1, a3, fa1]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [fa3, fa2, a5, zero, fa4, a4, fa0, a2, a1, a3, fa1, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, fa3, fa2, a5, zero, fa4, a4, fa0, a2, a3, fa1, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, fa3, fa2, a5, zero, fa4, a4, fa0, v4, a3, fa1, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, fa3, fa2, a5, zero, fa4, a4, fa0, v4, fa1, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, fa3, fa2, a5, zero, fa4, fa0, v4, v6, fa1, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [fv7]
// [Asm] live_set: [v2, v5, fa3, fa2, a5, zero, fa4, v4, v6, fa1, fv7, v3]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv7 is F
// [Asm] defs: [fv8]
// [Asm] live_set: [v2, v5, fa3, fa2, a5, zero, fa4, fv8, v4, v6, fv7, v3]
// [Asm] move_origin: [fa1]
// [Asm] defined: fv8 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v2, v5, fa3, fa2, fa4, zero, fv8, v4, v6, v9, fv7, v3]
// [Asm] move_origin: [a5]
// [Asm] defined: v9 is X
// [Asm] defs: [fv10]
// [Asm] live_set: [v2, fv10, v5, fa3, zero, fa4, fv8, v4, v6, v9, fv7, v3]
// [Asm] move_origin: [fa2]
// [Asm] defined: fv10 is F
// [Asm] defs: [fv11]
// [Asm] live_set: [v2, fv10, v5, zero, fv11, fa4, fv8, v4, v6, v9, fv7, v3]
// [Asm] move_origin: [fa3]
// [Asm] defined: fv11 is F
// [Asm] defs: [fv12]
// [Asm] live_set: [v2, fv10, v5, zero, fv11, fv8, fv12, v4, v6, v9, fv7, v3]
// [Asm] move_origin: [fa4]
// [Asm] defined: fv12 is F
// [Asm] defs: [v13]
// [Asm] live_set: [fv10, v5, v13, zero, fv11, fv8, fv12, v4, v6, v9, fv7, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [fv10, v14, v5, v13, zero, fv11, fv8, fv12, v4, v6, v9, fv7]
// [Asm] move_origin: [v3]
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [fv10, v14, v5, v13, zero, fv11, fv8, fv12, v6, v15, v9, fv7]
// [Asm] move_origin: [v4]
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [fv10, v14, v16, v13, zero, fv11, fv8, fv12, v6, v15, v9, fv7]
// [Asm] move_origin: [v5]
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [fv10, v14, v16, v13, zero, fv11, fv8, fv12, v17, v15, v9, fv7]
// [Asm] move_origin: [v6]
// [Asm] defined: v17 is X
// [Asm] defs: [fv18]
// [Asm] live_set: [fv10, v14, v16, v13, zero, fv11, fv8, fv12, v17, v15, fv18, v9]
// [Asm] move_origin: [fv7]
// [Asm] defined: fv18 is F
// [Asm] defs: [fv19]
// [Asm] live_set: [fv10, v14, v16, v13, zero, fv11, fv19, fv12, v17, v15, fv18, v9]
// [Asm] move_origin: [fv8]
// [Asm] defined: fv19 is F
// [Asm] defs: [v20]
// [Asm] live_set: [fv10, v14, v16, v13, zero, fv11, v20, fv19, fv12, v17, v15, fv18]
// [Asm] move_origin: [v9]
// [Asm] defined: v20 is X
// [Asm] defs: [fv21]
// [Asm] live_set: [v14, v16, v13, zero, fv11, v20, fv19, fv12, v17, v15, fv18, fv21]
// [Asm] move_origin: [fv10]
// [Asm] defined: fv21 is F
// [Asm] defs: [fv22]
// [Asm] live_set: [fv22, v14, v16, v13, zero, v20, fv19, fv12, v17, v15, fv18, fv21]
// [Asm] move_origin: [fv11]
// [Asm] defined: fv22 is F
// [Asm] defs: [fv23]
// [Asm] live_set: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm] move_origin: [fv12]
// [Asm] defined: fv23 is F
// [Asm] defs: [v70]
// [Asm] live_set: [v70]
// [Asm] move_origin: [zero]
// [Asm] defined: v70 is X
// [Asm] defs: [v65]
// [Asm] live_set: [fv22, fv23, v14, v13, zero, v65, v17]
// [Asm] move_origin: []
// [Asm] defined: v65 is X
// [Asm] defs: [fv66]
// [Asm] live_set: [fv22, fv23, v14, fv66, v13, zero, v65, v17]
// [Asm] move_origin: []
// [Asm] defined: fv66 is F
// [Asm] defs: [fv67]
// [Asm] live_set: [fv22, fv23, v14, fv67, fv66, v13, zero, v65, v17]
// [Asm] move_origin: []
// [Asm] defined: fv67 is F
// [Asm] defs: [v68]
// [Asm] live_set: [fv22, fv23, v14, fv67, fv66, v68, v13, zero, v65, v17]
// [Asm] move_origin: []
// [Asm] defined: v68 is X
// [Asm] defs: [fv69]
// [Asm] live_set: [fv22, fv23, v14, fv69, fv67, fv66, v68, v13, zero, v65, v17]
// [Asm] move_origin: []
// [Asm] defined: fv69 is F
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v14, fv69, fv67, fv66, v68, v13, zero, v65, v17]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v14, fv69, fv67, fv66, v68, v13, zero, v65, v17]
// [Asm] move_origin: [v14]
// [Asm] defs: [v15]
// [Asm] live_set: [fv22, fv23, v14, fv69, fv67, fv66, v68, v13, zero, v65, v17, v15]
// [Asm] move_origin: [zero]
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [fv22, fv23, v14, v16, fv69, fv67, fv66, v68, v13, zero, v17, v15]
// [Asm] move_origin: [v65]
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v14, v16, fv69, fv67, fv66, v68, v13, zero, v17, v15]
// [Asm] move_origin: [v17]
// [Asm] defs: [fv18]
// [Asm] live_set: [fv22, fv23, v14, v16, fv69, fv67, zero, v68, v13, v17, v15, fv18]
// [Asm] move_origin: [fv66]
// [Asm] defined: fv18 is F
// [Asm] defs: [fv19]
// [Asm] live_set: [fv22, fv23, v14, v16, fv69, v13, zero, v68, fv19, v17, v15, fv18]
// [Asm] move_origin: [fv67]
// [Asm] defined: fv19 is F
// [Asm] defs: [v20]
// [Asm] live_set: [fv22, fv23, v14, v16, fv69, v13, zero, v20, fv19, v17, v15, fv18]
// [Asm] move_origin: [v68]
// [Asm] defined: v20 is X
// [Asm] defs: [fv21]
// [Asm] live_set: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm] move_origin: [fv69]
// [Asm] defined: fv21 is F
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm] move_origin: [fv22]
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm] move_origin: [fv23]
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v16, v14, v13, zero, v17, v15]
// [Asm] move_origin: []
// [Asm] defs: [fv26]
// [Asm] live_set: [fv23, v14, v16, v13, v17, fv26, fv22, zero, v15]
// [Asm] move_origin: []
// [Asm] defined: fv26 is F
// [Asm] defs: [v119]
// [Asm] live_set: [fv23, v14, v16, v13, v119, v17, fv26, fv22, zero, v15]
// [Asm] move_origin: []
// [Asm] defined: v119 is X
// [Asm] defs: [fv120]
// [Asm] live_set: [fv23, v14, v16, v13, v17, fv26, fv22, fv120, zero, v15]
// [Asm] move_origin: []
// [Asm] defined: fv120 is F
// [Asm] defs: [fv27]
// [Asm] live_set: [fv23, v14, v16, v13, v17, fv22, zero, fv27, v15]
// [Asm] move_origin: []
// [Asm] defined: fv27 is F
// [Asm] defs: [fv28]
// [Asm] live_set: [fv23, v14, v16, v13, v17, fv22, fv28, zero, v15]
// [Asm] move_origin: []
// [Asm] defined: fv28 is F
// [Asm] defs: [v115]
// [Asm] live_set: [fv23, v14, v16, v13, v17, fv22, v115, fv28, zero, v15]
// [Asm] move_origin: []
// [Asm] defined: v115 is X
// [Asm] defs: [fv116]
// [Asm] live_set: [fv23, v14, v16, v13, v17, fv22, fv28, zero, fv116, v15]
// [Asm] move_origin: []
// [Asm] defined: fv116 is F
// [Asm] defs: [fv29]
// [Asm] live_set: [fv23, v14, v16, v13, v17, fv22, zero, fv29, v15]
// [Asm] move_origin: []
// [Asm] defined: fv29 is F
// [Asm] defs: [fv30]
// [Asm] live_set: [fv23, v14, v16, v13, fv30, v17, fv22, zero, v15]
// [Asm] move_origin: []
// [Asm] defined: fv30 is F
// [Asm] defs: [fv31]
// [Asm] live_set: [fv23, v14, v16, v13, fv30, v17, fv22, fv31, zero, v15]
// [Asm] move_origin: []
// [Asm] defined: fv31 is F
// [Asm] defs: [v110]
// [Asm] live_set: [fv23, v14, v16, v13, v110, fv30, v17, fv22, fv31, zero, v15]
// [Asm] move_origin: []
// [Asm] defined: v110 is X
// [Asm] defs: [fv111]
// [Asm] live_set: [fv111, fv23, v14, v16, v13, fv30, v17, fv22, fv31, zero, v15]
// [Asm] move_origin: []
// [Asm] defined: fv111 is F
// [Asm] defs: [fv32]
// [Asm] live_set: [fv23, v14, v16, fv32, v13, fv30, v17, fv22, zero, v15]
// [Asm] move_origin: []
// [Asm] defined: fv32 is F
// [Asm] defs: [fv33]
// [Asm] live_set: [fv23, v14, v16, v13, fv30, v17, fv22, zero, fv33, v15]
// [Asm] move_origin: []
// [Asm] defined: fv33 is F
// [Asm] defs: [v106]
// [Asm] live_set: [fv23, v14, v16, v13, fv30, v17, fv22, v106, zero, fv33, v15]
// [Asm] move_origin: []
// [Asm] defined: v106 is X
// [Asm] defs: [fv107]
// [Asm] live_set: [fv23, v14, v16, v13, fv30, v17, fv107, fv22, zero, fv33, v15]
// [Asm] move_origin: []
// [Asm] defined: fv107 is F
// [Asm] defs: [fv34]
// [Asm] live_set: [fv23, v14, v16, v13, fv30, v17, fv22, zero, fv34, v15]
// [Asm] move_origin: []
// [Asm] defined: fv34 is F
// [Asm] defs: [fv35]
// [Asm] live_set: [fv23, v14, v16, v13, fv30, v17, fv35, fv22, zero, fv34, v15]
// [Asm] move_origin: []
// [Asm] defined: fv35 is F
// [Asm] defs: [fv36]
// [Asm] live_set: [fv23, v14, v16, v13, fv30, v17, fv35, fv22, zero, fv36, fv34, v15]
// [Asm] move_origin: []
// [Asm] defined: fv36 is F
// [Asm] defs: [v37]
// [Asm] live_set: [fv23, v14, v16, v13, fv30, v37, v17, fv35, fv22, zero, fv36, fv34, v15]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: [fv38]
// [Asm] live_set: [fv23, v14, v16, v13, fv30, v37, v17, fv35, fv38, fv22, zero, fv36, fv34, v15]
// [Asm] move_origin: []
// [Asm] defined: fv38 is F
// [Asm] defs: []
// [Asm] live_set: [fv23, v14, v16, v13, fv30, v37, v17, fv35, fv38, fv22, zero, fv36, fv34, v15]
// [Asm] move_origin: []
// [Asm] defs: [fa0]
// [Asm] live_set: [fv23, v14, v16, v13, v37, v17, fv35, fv38, fv22, zero, fv36, fv34, fa0, v15]
// [Asm] move_origin: [fv30]
// [Asm] defined: fa0 is F
// [Asm] defs: [fa1]
// [Asm] live_set: [fv23, v14, v16, v13, v37, v17, fv35, fa1, fv38, fv22, zero, fv36, fa0, v15]
// [Asm] move_origin: [fv34]
// [Asm] defined: fa1 is F
// [Asm] defs: [a0]
// [Asm] live_set: [fv23, v14, v16, v13, a0, v37, v17, fv35, fa1, fv38, fv22, zero, fv36, fa0, v15]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [fa2]
// [Asm] live_set: [fv23, v14, v16, v13, a0, v37, v17, fa1, fv38, fv22, fa2, zero, fv36, fa0, v15]
// [Asm] move_origin: [fv35]
// [Asm] defined: fa2 is F
// [Asm] defs: [fa3]
// [Asm] live_set: [fv23, v14, v16, v13, a0, v37, v17, fa1, fv38, fv22, fa2, fa3, zero, fa0, v15]
// [Asm] move_origin: [fv36]
// [Asm] defined: fa3 is F
// [Asm] defs: [a1]
// [Asm] live_set: [fv23, v14, v16, v13, a0, v17, a1, fa1, fv38, fv22, fa2, fa3, zero, fa0, v15]
// [Asm] move_origin: [v37]
// [Asm] defined: a1 is X
// [Asm] defs: [fa4]
// [Asm] live_set: [fv23, v14, v16, v13, fa4, a0, v17, a1, fa1, fv22, fa2, fa3, zero, fa0, v15]
// [Asm] move_origin: [fv38]
// [Asm] defined: fa4 is F
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [fv22, fv23, v14, v16, zero, v13, a0, v17, v15]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v39]
// [Asm] live_set: [fv22, fv23, v14, v16, zero, v13, v17, v15, v39]
// [Asm] move_origin: [a0]
// [Asm] defined: v39 is X
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v14, v16, zero, v13, v17, v15, v39]
// [Asm] move_origin: []
// [Asm] defs: [v40]
// [Asm] live_set: [fv22, fv23, v14, v16, zero, v13, v17, v15, v39, v40]
// [Asm] move_origin: []
// [Asm] defined: v40 is X
// [Asm] defs: [v41]
// [Asm] live_set: [fv22, fv23, v14, v16, zero, v13, v41, v17, v15, v39]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v14, v16, zero, v13, v41, v17, v15, v39]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main_loop.93"];
// [Asm]   r0 [label="v96 ← a0", color=green];
// [Asm]   r46 [label="t1", color=blue];
// [Asm]   r38 [label="v119 ← a0", color=green];
// [Asm]   r33 [label="v6 ← a4", color=green];
// [Asm]   r9 [label="v46 ← a1", color=green];
// [Asm]   r26 [label="a4", color=blue];
// [Asm]   r47 [label="t2", color=blue];
// [Asm]   r6 [label="v15 ← s4", color=green];
// [Asm]   r44 [label="a7", color=blue];
// [Asm]   r13 [label="v81 ← a0", color=green];
// [Asm]   r42 [label="v37 ← a1", color=green];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r29 [label="a3", color=blue];
// [Asm]   r35 [label="v70 ← a0", color=green];
// [Asm]   r7 [label="v39 ← a1", color=green];
// [Asm]   r10 [label="v49 ← a0", color=green];
// [Asm]   r8 [label="v97 ← a0", color=green];
// [Asm]   r5 [label="v17 ← s3", color=green];
// [Asm]   r36 [label="v65 ← a1", color=green];
// [Asm]   r24 [label="v2 ← a0", color=green];
// [Asm]   r15 [label="v60 ← a1", color=green];
// [Asm]   r32 [label="v5 ← a3", color=green];
// [Asm]   r49 [label="t4", color=blue];
// [Asm]   r43 [label="a6", color=blue];
// [Asm]   r31 [label="v4 ← a2", color=green];
// [Asm]   r39 [label="v115 ← a0", color=green];
// [Asm]   r17 [label="v98 ← a0", color=green];
// [Asm]   r48 [label="t3", color=blue];
// [Asm]   r12 [label="a0", color=blue];
// [Asm]   r37 [label="v68 ← a0", color=green];
// [Asm]   r20 [label="v89 ← a1", color=green];
// [Asm]   r23 [label="v56 ← a0", color=green];
// [Asm]   r3 [label="v13 ← s2", color=green];
// [Asm]   r27 [label="a2", color=blue];
// [Asm]   r40 [label="v110 ← a0", color=green];
// [Asm]   r1 [label="v16 ← s0", color=green];
// [Asm]   r41 [label="v106 ← a0", color=green];
// [Asm]   r28 [label="a1", color=blue];
// [Asm]   r11 [label="v20 ← a0", color=green];
// [Asm]   r34 [label="v9 ← a5", color=green];
// [Asm]   r22 [label="v53 ← a1", color=green];
// [Asm]   r14 [label="v82 ← a0", color=green];
// [Asm]   r50 [label="v40 ← a0", color=green];
// [Asm]   r30 [label="v3 ← a1", color=green];
// [Asm]   r45 [label="t0", color=blue];
// [Asm]   r25 [label="a5", color=blue];
// [Asm]   r2 [label="v14 ← s1", color=green];
// [Asm]   r16 [label="v63 ← a0", color=green];
// [Asm]   r18 [label="v41 ← a2", color=green];
// [Asm]   r19 [label="v88 ← a0", color=green];
// [Asm]   r21 [label="v90 ← a1", color=green];
// [Asm]   r3 -- r44;
// [Asm]   r2 -- r32;
// [Asm]   r12 -- r25;
// [Asm]   r2 -- r31;
// [Asm]   r2 -- r38;
// [Asm]   r12 -- r29;
// [Asm]   r6 -- r48;
// [Asm]   r5 -- r21;
// [Asm]   r1 -- r26;
// [Asm]   r4 -- r34;
// [Asm]   r3 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r2 -- r49;
// [Asm]   r3 -- r42;
// [Asm]   r5 -- r22;
// [Asm]   r2 -- r43;
// [Asm]   r4 -- r44;
// [Asm]   r5 -- r18;
// [Asm]   r1 -- r45;
// [Asm]   r3 -- r9;
// [Asm]   r5 -- r47;
// [Asm]   r3 -- r11;
// [Asm]   r4 -- r48;
// [Asm]   r5 -- r29;
// [Asm]   r3 -- r37;
// [Asm]   r2 -- r37;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r31;
// [Asm]   r30 -- r34;
// [Asm]   r2 -- r41;
// [Asm]   r2 -- r42;
// [Asm]   r3 -- r5;
// [Asm]   r1 -- r50;
// [Asm]   r4 -- r31;
// [Asm]   r2 -- r34;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r48;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r1 -- r48;
// [Asm]   r2 -- r48;
// [Asm]   r3 -- r39;
// [Asm]   r25 -- r32;
// [Asm]   r1 -- r40;
// [Asm]   r2 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r29;
// [Asm]   r3 -- r33;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r25;
// [Asm]   r12 -- r43;
// [Asm]   r3 -- r49;
// [Asm]   r32 -- r34;
// [Asm]   r2 -- r36;
// [Asm]   r1 -- r38;
// [Asm]   r1 -- r41;
// [Asm]   r6 -- r50;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r6 -- r23;
// [Asm]   r24 -- r25;
// [Asm]   r3 -- r46;
// [Asm]   r4 -- r14;
// [Asm]   r5 -- r36;
// [Asm]   r6 -- r25;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r3 -- r45;
// [Asm]   r3 -- r25;
// [Asm]   r2 -- r26;
// [Asm]   r1 -- r43;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r38;
// [Asm]   r6 -- r41;
// [Asm]   r1 -- r34;
// [Asm]   r1 -- r47;
// [Asm]   r29 -- r30;
// [Asm]   r30 -- r32;
// [Asm]   r6 -- r33;
// [Asm]   r1 -- r22;
// [Asm]   r2 -- r50;
// [Asm]   r5 -- r19;
// [Asm]   r6 -- r46;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r5 -- r11;
// [Asm]   r24 -- r28;
// [Asm]   r24 -- r29;
// [Asm]   r5 -- r38;
// [Asm]   r24 -- r26;
// [Asm]   r6 -- r20;
// [Asm]   r3 -- r22;
// [Asm]   r3 -- r50;
// [Asm]   r7 -- r17;
// [Asm]   r6 -- r19;
// [Asm]   r2 -- r44;
// [Asm]   r2 -- r40;
// [Asm]   r6 -- r27;
// [Asm]   r4 -- r15;
// [Asm]   r5 -- r28;
// [Asm]   r2 -- r14;
// [Asm]   r32 -- r33;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r9;
// [Asm]   r0 -- r3;
// [Asm]   r4 -- r32;
// [Asm]   r24 -- r34;
// [Asm]   r1 -- r29;
// [Asm]   r5 -- r45;
// [Asm]   r3 -- r29;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r25 -- r31;
// [Asm]   r1 -- r25;
// [Asm]   r4 -- r36;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r5 -- r39;
// [Asm]   r6 -- r39;
// [Asm]   r5 -- r25;
// [Asm]   r26 -- r31;
// [Asm]   r31 -- r33;
// [Asm]   r6 -- r38;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   r26 -- r32;
// [Asm]   r1 -- r42;
// [Asm]   r5 -- r12;
// [Asm]   r2 -- r20;
// [Asm]   r2 -- r39;
// [Asm]   r6 -- r21;
// [Asm]   r4 -- r38;
// [Asm]   r5 -- r41;
// [Asm]   r2 -- r45;
// [Asm]   r4 -- r41;
// [Asm]   r1 -- r12;
// [Asm]   r6 -- r36;
// [Asm]   r1 -- r37;
// [Asm]   r6 -- r47;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r43;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r30 -- r31;
// [Asm]   r2 -- r10;
// [Asm]   r24 -- r32;
// [Asm]   r6 -- r29;
// [Asm]   r3 -- r32;
// [Asm]   r5 -- r49;
// [Asm]   r5 -- r42;
// [Asm]   r29 -- r31;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r27;
// [Asm]   r19 -- r21;
// [Asm]   r4 -- r22;
// [Asm]   r4 -- r40;
// [Asm]   r4 -- r42;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r34;
// [Asm]   r27 -- r30;
// [Asm]   r1 -- r46;
// [Asm]   r4 -- r21;
// [Asm]   r6 -- r13;
// [Asm]   r12 -- r44;
// [Asm]   r4 -- r33;
// [Asm]   r2 -- r33;
// [Asm]   r24 -- r31;
// [Asm]   r3 -- r30;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r43;
// [Asm]   r12 -- r28;
// [Asm]   r0 -- r2;
// [Asm]   r12 -- r46;
// [Asm]   r1 -- r21;
// [Asm]   r2 -- r46;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r43;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r4 -- r28;
// [Asm]   r2 -- r47;
// [Asm]   r3 -- r40;
// [Asm]   r24 -- r27;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r4 -- r12;
// [Asm]   r3 -- r27;
// [Asm]   r6 -- r45;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r50;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r5 -- r50;
// [Asm]   r1 -- r49;
// [Asm]   r1 -- r44;
// [Asm]   r12 -- r47;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r31 -- r34;
// [Asm]   r7 -- r8;
// [Asm]   r4 -- r49;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r23;
// [Asm]   r6 -- r32;
// [Asm]   r30 -- r33;
// [Asm]   r5 -- r34;
// [Asm]   r36 -- r37;
// [Asm]   r6 -- r7;
// [Asm]   r25 -- r33;
// [Asm]   r12 -- r45;
// [Asm]   r17 -- r18;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r5 -- r20;
// [Asm]   r4 -- r37;
// [Asm]   r6 -- r49;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r23;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r48;
// [Asm]   r5 -- r23;
// [Asm]   r6 -- r44;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r15;
// [Asm]   r25 -- r30;
// [Asm]   r4 -- r20;
// [Asm]   r5 -- r44;
// [Asm]   r3 -- r47;
// [Asm]   r6 -- r16;
// [Asm]   r3 -- r28;
// [Asm]   r4 -- r30;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r26;
// [Asm]   r6 -- r12;
// [Asm]   r6 -- r40;
// [Asm]   r1 -- r28;
// [Asm]   r1 -- r39;
// [Asm]   r24 -- r30;
// [Asm]   r6 -- r8;
// [Asm]   r33 -- r34;
// [Asm]   r6 -- r34;
// [Asm]   r12 -- r42;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r6 -- r37;
// [Asm]   r4 -- r11;
// [Asm]   r4 -- r46;
// [Asm]   r18 -- r19;
// [Asm]   r4 -- r45;
// [Asm]   r5 -- r46;
// [Asm]   r5 -- r26;
// [Asm]   r5 -- r37;
// [Asm]   r6 -- r28;
// [Asm]   r12 -- r49;
// [Asm]   r26 -- r30;
// [Asm]   r6 -- r42;
// [Asm]   r22 -- r23;
// [Asm]   r2 -- r21;
// [Asm]   r3 -- r41;
// [Asm]   r6 -- r17;
// [Asm]   r4 -- r47;
// [Asm]   r3 -- r14;
// [Asm]   r4 -- r39;
// [Asm]   r3 -- r36;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r31 -- r32;
// [Asm]   r12 -- r27;
// [Asm]   r12 -- r48;
// [Asm]   r7 -- r50;
// [Asm]   r1 -- r14;
// [Asm]   r2 -- r19;
// [Asm]   r4 -- r26;
// [Asm]   r1 -- r3;
// [Asm]   r5 -- r43;
// [Asm]   r0 -- r7;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r24 -- r33;
// [Asm]   r5 -- r40;
// [Asm]   r12 -- r26;
// [Asm]   r4 -- r19;
// [Asm]   r5 -- r15;
// [Asm]   r19 -- r20;
// [Asm]   comment = "0:v96-> 1:v16-> 2:v14-> 3:v13-> 4:zero-> 5:v17-> 6:v15-> 7:v39-> 8:v97-> 17:v98-> 18:v41-> 19:v88-> 20:v89-> 21:v90-> 50:v40-> 10:v49-> 9:v46-> 11:v20-> 12:a0-> 25:a5-> 26:a4-> 27:a2-> 28:a1-> 29:a3-> 42:v37-> 43:a6-> 44:a7-> 45:t0-> 46:t1-> 47:t2-> 48:t3-> 49:t4-> 13:v81-> 14:v82-> 16:v63-> 15:v60-> 23:v56-> 22:v53-> 24:v2-> 30:v3-> 31:v4-> 32:v5-> 33:v6-> 34:v9-> 37:v68-> 36:v65-> 38:v119-> 39:v115-> 40:v110-> 41:v106-> 35:v70"
// [Asm]   comment = "v96<-a0;v119<-a0;v6<-a4;v46<-a1;v15<-s4;v81<-a0;v37<-a1;v70<-a0;v39<-a1;v49<-a0;v97<-a0;v17<-s3;v65<-a1;v2<-a0;v60<-a1;v5<-a3;v4<-a2;v115<-a0;v98<-a0;v68<-a0;v89<-a1;v56<-a0;v13<-s2;v110<-a0;v16<-s0;v106<-a0;v20<-a0;v9<-a5;v53<-a1;v82<-a0;v40<-a0;v3<-a1;v14<-s1;v63<-a0;v41<-a2;v88<-a0;v90<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main_loop.93"];
// [Asm]   r0 [label="fv22 ← fs0", color=green];
// [Asm]   r46 [label="ft3", color=blue];
// [Asm]   r38 [label="fv107 ← fa2", color=green];
// [Asm]   r33 [label="fv30 ← fa0", color=green];
// [Asm]   r9 [label="fv62 ← fa1", color=green];
// [Asm]   r26 [label="fv69 ← fa2", color=green];
// [Asm]   r47 [label="ft4", color=blue];
// [Asm]   r6 [label="fv19 ← fa1", color=green];
// [Asm]   r44 [label="ft1", color=blue];
// [Asm]   r13 [label="fv57 ← fa2", color=green];
// [Asm]   r42 [label="fv38 ← fa4", color=green];
// [Asm]   r53 [label="ft10", color=blue];
// [Asm]   r4 [label="fv50 ← fa2", color=green];
// [Asm]   r29 [label="fv27 ← fa0", color=green];
// [Asm]   r35 [label="fv111 ← fa2", color=green];
// [Asm]   r7 [label="fv21 ← fa2", color=green];
// [Asm]   r56 [label="fa7", color=blue];
// [Asm]   r10 [label="fv64 ← fa2", color=green];
// [Asm]   r8 [label="fv61 ← fa0", color=green];
// [Asm]   r5 [label="fv18 ← fa0", color=green];
// [Asm]   r54 [label="fa5", color=blue];
// [Asm]   r36 [label="fv32 ← fa1", color=green];
// [Asm]   r24 [label="fv66 ← fa0", color=green];
// [Asm]   r32 [label="fv29 ← fa0", color=green];
// [Asm]   r15 [label="fa2", color=blue];
// [Asm]   r49 [label="ft6", color=blue];
// [Asm]   r43 [label="ft0", color=blue];
// [Asm]   r31 [label="fv116 ← fa1", color=green];
// [Asm]   r39 [label="fv34 ← fa1", color=green];
// [Asm]   r17 [label="fa0", color=blue];
// [Asm]   r52 [label="ft9", color=blue];
// [Asm]   r12 [label="fv55 ← fa1", color=green];
// [Asm]   r48 [label="ft5", color=blue];
// [Asm]   r37 [label="fv33 ← fa1", color=green];
// [Asm]   r20 [label="fv8 ← fa1", color=green];
// [Asm]   r23 [label="fv12 ← fa3", color=green];
// [Asm]   r3 [label="fv48 ← fa1", color=green];
// [Asm]   r27 [label="fv26 ← fa0", color=green];
// [Asm]   r40 [label="fv35 ← fa2", color=green];
// [Asm]   r1 [label="fv23 ← fs1", color=green];
// [Asm]   r41 [label="fv36 ← fa3", color=green];
// [Asm]   r28 [label="fv120 ← fa1", color=green];
// [Asm]   r11 [label="fv54 ← fa0", color=green];
// [Asm]   r34 [label="fv31 ← fa1", color=green];
// [Asm]   r22 [label="fv11 ← fa5", color=green];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r50 [label="ft7", color=blue];
// [Asm]   r30 [label="fv28 ← fa0", color=green];
// [Asm]   r51 [label="ft8", color=blue];
// [Asm]   r45 [label="ft2", color=blue];
// [Asm]   r25 [label="fv67 ← fa1", color=green];
// [Asm]   r55 [label="fa6", color=blue];
// [Asm]   r2 [label="fv47 ← fa0", color=green];
// [Asm]   r16 [label="fa4", color=blue];
// [Asm]   r18 [label="fa1", color=blue];
// [Asm]   r19 [label="fv7 ← fa0", color=green];
// [Asm]   r21 [label="fv10 ← fa2", color=green];
// [Asm]   r1 -- r24;
// [Asm]   r19 -- r20;
// [Asm]   r1 -- r42;
// [Asm]   r5 -- r12;
// [Asm]   r6 -- r21;
// [Asm]   r17 -- r42;
// [Asm]   r33 -- r40;
// [Asm]   r0 -- r36;
// [Asm]   r0 -- r13;
// [Asm]   r15 -- r41;
// [Asm]   r5 -- r21;
// [Asm]   r16 -- r20;
// [Asm]   r14 -- r20;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r26;
// [Asm]   r0 -- r32;
// [Asm]   r0 -- r49;
// [Asm]   r1 -- r37;
// [Asm]   r0 -- r48;
// [Asm]   r1 -- r30;
// [Asm]   r14 -- r16;
// [Asm]   r17 -- r40;
// [Asm]   r39 -- r41;
// [Asm]   r5 -- r10;
// [Asm]   r37 -- r38;
// [Asm]   r1 -- r4;
// [Asm]   r18 -- r42;
// [Asm]   r5 -- r22;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r56;
// [Asm]   r1 -- r10;
// [Asm]   r0 -- r28;
// [Asm]   r1 -- r45;
// [Asm]   r0 -- r52;
// [Asm]   r30 -- r31;
// [Asm]   r0 -- r25;
// [Asm]   r17 -- r41;
// [Asm]   r15 -- r42;
// [Asm]   r39 -- r42;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r52;
// [Asm]   r0 -- r23;
// [Asm]   r27 -- r28;
// [Asm]   r19 -- r21;
// [Asm]   r1 -- r33;
// [Asm]   r1 -- r16;
// [Asm]   r0 -- r16;
// [Asm]   r3 -- r5;
// [Asm]   r17 -- r39;
// [Asm]   r16 -- r17;
// [Asm]   r1 -- r50;
// [Asm]   r1 -- r46;
// [Asm]   r0 -- r6;
// [Asm]   r20 -- r23;
// [Asm]   r1 -- r31;
// [Asm]   r33 -- r42;
// [Asm]   r6 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r14 -- r19;
// [Asm]   r15 -- r18;
// [Asm]   r20 -- r22;
// [Asm]   r5 -- r6;
// [Asm]   r0 -- r26;
// [Asm]   r0 -- r40;
// [Asm]   r3 -- r4;
// [Asm]   r1 -- r48;
// [Asm]   r11 -- r13;
// [Asm]   r0 -- r51;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r9;
// [Asm]   r6 -- r10;
// [Asm]   r19 -- r22;
// [Asm]   r1 -- r40;
// [Asm]   r1 -- r27;
// [Asm]   r1 -- r2;
// [Asm]   r0 -- r38;
// [Asm]   r41 -- r42;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r10;
// [Asm]   r1 -- r51;
// [Asm]   r0 -- r56;
// [Asm]   r0 -- r47;
// [Asm]   r1 -- r11;
// [Asm]   r5 -- r7;
// [Asm]   r39 -- r40;
// [Asm]   r9 -- r10;
// [Asm]   r1 -- r38;
// [Asm]   r1 -- r41;
// [Asm]   r0 -- r11;
// [Asm]   r1 -- r49;
// [Asm]   r16 -- r21;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r44;
// [Asm]   r1 -- r5;
// [Asm]   r21 -- r22;
// [Asm]   r0 -- r44;
// [Asm]   r6 -- r23;
// [Asm]   r0 -- r4;
// [Asm]   r1 -- r35;
// [Asm]   r24 -- r25;
// [Asm]   r14 -- r15;
// [Asm]   r16 -- r22;
// [Asm]   r40 -- r42;
// [Asm]   r0 -- r18;
// [Asm]   r6 -- r7;
// [Asm]   r17 -- r18;
// [Asm]   r0 -- r15;
// [Asm]   r4 -- r5;
// [Asm]   r34 -- r35;
// [Asm]   r14 -- r18;
// [Asm]   r1 -- r43;
// [Asm]   r14 -- r17;
// [Asm]   r1 -- r8;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r34;
// [Asm]   r0 -- r24;
// [Asm]   r1 -- r47;
// [Asm]   r5 -- r23;
// [Asm]   r1 -- r53;
// [Asm]   r1 -- r55;
// [Asm]   r14 -- r42;
// [Asm]   r8 -- r9;
// [Asm]   r0 -- r34;
// [Asm]   r0 -- r41;
// [Asm]   r5 -- r13;
// [Asm]   r16 -- r19;
// [Asm]   r1 -- r32;
// [Asm]   r0 -- r43;
// [Asm]   r0 -- r14;
// [Asm]   r33 -- r36;
// [Asm]   r11 -- r12;
// [Asm]   r1 -- r15;
// [Asm]   r18 -- r40;
// [Asm]   r1 -- r13;
// [Asm]   r25 -- r26;
// [Asm]   r33 -- r39;
// [Asm]   r33 -- r35;
// [Asm]   r6 -- r22;
// [Asm]   r0 -- r35;
// [Asm]   r6 -- r26;
// [Asm]   r24 -- r26;
// [Asm]   r16 -- r18;
// [Asm]   r1 -- r28;
// [Asm]   r1 -- r39;
// [Asm]   r21 -- r23;
// [Asm]   r0 -- r31;
// [Asm]   r33 -- r34;
// [Asm]   r0 -- r53;
// [Asm]   r0 -- r50;
// [Asm]   r7 -- r22;
// [Asm]   r18 -- r19;
// [Asm]   r0 -- r33;
// [Asm]   r0 -- r46;
// [Asm]   r12 -- r13;
// [Asm]   r0 -- r42;
// [Asm]   r19 -- r23;
// [Asm]   r15 -- r17;
// [Asm]   r0 -- r54;
// [Asm]   r5 -- r9;
// [Asm]   r5 -- r26;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r8;
// [Asm]   r14 -- r21;
// [Asm]   r1 -- r29;
// [Asm]   r0 -- r45;
// [Asm]   r33 -- r37;
// [Asm]   r0 -- r39;
// [Asm]   r0 -- r29;
// [Asm]   r0 -- r37;
// [Asm]   r22 -- r23;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r18 -- r41;
// [Asm]   r33 -- r41;
// [Asm]   r8 -- r10;
// [Asm]   r40 -- r41;
// [Asm]   r0 -- r12;
// [Asm]   r5 -- r25;
// [Asm]   r7 -- r23;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r36;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r30;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r55;
// [Asm]   r15 -- r20;
// [Asm]   r15 -- r16;
// [Asm]   r0 -- r27;
// [Asm]   r2 -- r3;
// [Asm]   r15 -- r19;
// [Asm]   r20 -- r21;
// [Asm]   r1 -- r54;
// [Asm]   r33 -- r38;
// [Asm]   comment = "0:fv22-> 1:fv23-> 2:fv47-> 3:fv48-> 4:fv50-> 5:fv18-> 6:fv19-> 7:fv21-> 10:fv64-> 9:fv62-> 8:fv61-> 13:fv57-> 12:fv55-> 11:fv54-> 23:fv12-> 22:fv11-> 21:fv10-> 16:fa4-> 20:fv8-> 14:fa3-> 19:fv7-> 15:fa2-> 18:fa1-> 17:fa0-> 42:fv38-> 41:fv36-> 40:fv35-> 39:fv34-> 33:fv30-> 26:fv69-> 25:fv67-> 24:fv66-> 34:fv31-> 35:fv111-> 36:fv32-> 37:fv33-> 38:fv107-> 27:fv26-> 28:fv120-> 29:fv27-> 30:fv28-> 31:fv116-> 32:fv29-> 43:ft0-> 44:ft1-> 45:ft2-> 46:ft3-> 47:ft4-> 48:ft5-> 49:ft6-> 50:ft7-> 51:ft8-> 52:ft9-> 53:ft10-> 54:fa5-> 55:fa6-> 56:fa7"
// [Asm]   comment = "fv22<-fs0;fv107<-fa2;fv30<-fa0;fv62<-fa1;fv69<-fa2;fv19<-fa1;fv57<-fa2;fv38<-fa4;fv50<-fa2;fv27<-fa0;fv111<-fa2;fv21<-fa2;fv64<-fa2;fv61<-fa0;fv18<-fa0;fv32<-fa1;fv66<-fa0;fv29<-fa0;fv116<-fa1;fv34<-fa1;fv55<-fa1;fv33<-fa1;fv8<-fa1;fv12<-fa3;fv48<-fa1;fv26<-fa0;fv35<-fa2;fv23<-fs1;fv36<-fa3;fv120<-fa1;fv54<-fa0;fv31<-fa1;fv11<-fa5;fv28<-fa0;fv67<-fa1;fv47<-fa0;fv7<-fa0;fv10<-fa2;"
// [Asm] }
// [Asm] 
// [Asm] subst   slliw v96, v41, 2 ->   slliw a0, a2, 2
// [Asm] subst   add v97, v17, v96 ->   add a0, s3, a0
// [Asm] subst   sw v39, 0(v97) ->   sw a1, 0(a0)
// [Asm] subst   addi v46, v15, 1 ->   addi a1, s4, 1
// [Asm] subst   fld fv47, c_im.6, t5 ->   fld fa0, c_im.6, t5
// [Asm] subst   fld fv48, c_re.5, t5 ->   fld fa1, c_re.5, t5
// [Asm] subst   lw v49, iter.3 ->   lw a0, iter.3
// [Asm] subst   fld fv50, limit_sq.2, t5 ->   fld fa2, limit_sq.2, t5
// [Asm] subst   mv v15, v46 ->   mv s4, a1
// [Asm] subst   j .main_loop.93_0 ->   j .main_loop.93_0
// [Asm] subst   beq v16, v14, .main_loop.93_1 ->   beq s0, s1, .main_loop.93_1
// [Asm] subst   ret ->   ret
// [Asm] subst   slliw v81, v41, 2 ->   slliw a0, a2, 2
// [Asm] subst   add v82, v17, v81 ->   add a0, s3, a0
// [Asm] subst   sw zero, 0(v82) ->   sw zero, 0(a0)
// [Asm] subst   addi v60, v15, 1 ->   addi a1, s4, 1
// [Asm] subst   fld fv61, c_im.6, t5 ->   fld fa0, c_im.6, t5
// [Asm] subst   fld fv62, c_re.5, t5 ->   fld fa1, c_re.5, t5
// [Asm] subst   lw v63, iter.3 ->   lw a0, iter.3
// [Asm] subst   fld fv64, limit_sq.2, t5 ->   fld fa2, limit_sq.2, t5
// [Asm] subst   mv v15, v60 ->   mv s4, a1
// [Asm] subst   j .main_loop.93_0 ->   j .main_loop.93_0
// [Asm] subst   li v98, 48 ->   li a0, 48
// [Asm] subst   blt v39, v98, .main_loop.93_8 ->   blt a1, a0, .main_loop.93_8
// [Asm] subst   li v88, 48 ->   li a0, 48
// [Asm] subst   slliw v89, v41, 2 ->   slliw a1, a2, 2
// [Asm] subst   add v90, v17, v89 ->   add a1, s3, a1
// [Asm] subst   sw v88, 0(v90) ->   sw a0, 0(a1)
// [Asm] subst   addi v53, v15, 1 ->   addi a1, s4, 1
// [Asm] subst   fld fv54, c_im.6, t5 ->   fld fa0, c_im.6, t5
// [Asm] subst   fld fv55, c_re.5, t5 ->   fld fa1, c_re.5, t5
// [Asm] subst   lw v56, iter.3 ->   lw a0, iter.3
// [Asm] subst   fld fv57, limit_sq.2, t5 ->   fld fa2, limit_sq.2, t5
// [Asm] subst   mv v15, v53 ->   mv s4, a1
// [Asm] subst   j .main_loop.93_0 ->   j .main_loop.93_0
// [Asm] subst   fmv.d fv11, fa3 ->   fmv.d fa5, fa3
// [Asm] subst   fmv.d fv12, fa4 ->   fmv.d fa3, fa4
// [Asm] subst   mv v13, v2 ->   mv s2, a0
// [Asm] subst   mv v14, v3 ->   mv s1, a1
// [Asm] subst   mv v15, v4 ->   mv s4, a2
// [Asm] subst   mv v16, v5 ->   mv s0, a3
// [Asm] subst   mv v17, v6 ->   mv s3, a4
// [Asm] subst   mv v20, v9 ->   mv a0, a5
// [Asm] subst   fmv.d fv22, fv11 ->   fmv.d fs0, fa5
// [Asm] subst   fmv.d fv23, fv12 ->   fmv.d fs1, fa3
// [Asm] subst   mv v70, zero ->   mv a0, zero
// [Asm] subst   addi v65, v16, 1 ->   addi a1, s0, 1
// [Asm] subst   fld fv66, c_im.6, t5 ->   fld fa0, c_im.6, t5
// [Asm] subst   fld fv67, c_re.5, t5 ->   fld fa1, c_re.5, t5
// [Asm] subst   lw v68, iter.3 ->   lw a0, iter.3
// [Asm] subst   fld fv69, limit_sq.2, t5 ->   fld fa2, limit_sq.2, t5
// [Asm] subst   mv v15, zero ->   mv s4, zero
// [Asm] subst   mv v16, v65 ->   mv s0, a1
// [Asm] subst   j .main_loop.93_0 ->   j .main_loop.93_0
// [Asm] subst   beq v15, v13, .main_loop.93_3 ->   beq s4, s2, .main_loop.93_3
// [Asm] subst   fcvt.d.w fv26, v15 ->   fcvt.d.w fa0, s4
// [Asm] subst   li v119, 4613937818241073152 ->   li a0, 4613937818241073152
// [Asm] subst   fmv.d.x fv120, v119 ->   fmv.d.x fa1, a0
// [Asm] subst   fmul.d fv27, fv120, fv26 ->   fmul.d fa0, fa1, fa0
// [Asm] subst   fdiv.d fv28, fv27, fv22 ->   fdiv.d fa0, fa0, fs0
// [Asm] subst   li v115, 4609434218613702656 ->   li a0, 4609434218613702656
// [Asm] subst   fmv.d.x fv116, v115 ->   fmv.d.x fa1, a0
// [Asm] subst   fsub.d fv29, fv28, fv116 ->   fsub.d fa0, fa0, fa1
// [Asm] subst   fneg.d fv30, fv29 ->   fneg.d fa0, fa0
// [Asm] subst   fcvt.d.w fv31, v16 ->   fcvt.d.w fa1, s0
// [Asm] subst   li v110, 4613937818241073152 ->   li a0, 4613937818241073152
// [Asm] subst   fmv.d.x fv111, v110 ->   fmv.d.x fa2, a0
// [Asm] subst   fmul.d fv32, fv111, fv31 ->   fmul.d fa1, fa2, fa1
// [Asm] subst   fdiv.d fv33, fv32, fv23 ->   fdiv.d fa1, fa1, fs1
// [Asm] subst   li v106, 4609434218613702656 ->   li a0, 4609434218613702656
// [Asm] subst   fmv.d.x fv107, v106 ->   fmv.d.x fa2, a0
// [Asm] subst   fsub.d fv34, fv33, fv107 ->   fsub.d fa1, fa1, fa2
// [Asm] subst   fld fv35, c_im.6, t5 ->   fld fa2, c_im.6, t5
// [Asm] subst   fld fv36, c_re.5, t5 ->   fld fa3, c_re.5, t5
// [Asm] subst   lw v37, iter.3 ->   lw a1, iter.3
// [Asm] subst   fld fv38, limit_sq.2, t5 ->   fld fa4, limit_sq.2, t5
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   call calc_pixel.92 ->   call calc_pixel.92
// [Asm] subst   mv v39, a0 ->   mv a1, a0
// [Asm] subst   mul v40, v16, v13 ->   mul a0, s0, s2
// [Asm] subst   add v41, v40, v15 ->   add a2, a0, s4
// [Asm] subst   bge zero, v39, .main_loop.93_5 ->   bge zero, a1, .main_loop.93_5
// [Asm] pre_assigned_registers: FnParam(fref=f15, fpref=$f.2) -> v4, FnParam(fref=f15, fpref=$f.3) -> fv5, Insn(iref=%9) -> fv16, Insn(iref=%8) -> v15, Insn(iref=%10) -> v17, Insn(iref=%5) -> fv12, Insn(iref=%0) -> v7, Insn(iref=%4) -> fv11, FnParam(fref=f15, fpref=$f.1) -> fv3, Insn(iref=%3) -> v10, FnParam(fref=f15, fpref=$f.0) -> fv2, Mem(fref=f15, mref=m0) -> v6, Insn(iref=%7) -> fv14, Self(fref=f15) -> v0, Insn(iref=%2) -> v9, Insn(iref=%1) -> v8, Insn(iref=%11) -> v18, Insn(iref=%6) -> fv13
// [Asm] defs: []
// [Asm] live_set: [a0, s11, fa1, fa2, zero, fa0]
// [Asm] move_origin: []
// [Asm] defs: [fv2]
// [Asm] live_set: [a0, s11, fa1, fa2, zero]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [a0, s11, fa2, zero]
// [Asm] move_origin: [fa1]
// [Asm] defined: fv3 is F
// [Asm] defs: [v4]
// [Asm] live_set: [s11, fa2, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: [fv5]
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: [fa2]
// [Asm] defined: fv5 is F
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0, s11, zero]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v7, s11, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v30]
// [Asm] live_set: [v30, v7, s11, zero]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v7, s11, v9, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v7, s11, v9, zero, v27, v8]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v7, v9, zero, v8, v6]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v7, v9, zero, v8, v6]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v7, zero, v8, v6]
// [Asm] move_origin: [v9]
// [Asm] defined: a1 is X
// [Asm] defs: [fv11]
// [Asm] live_set: [v7, zero, fv11, v8, v6]
// [Asm] move_origin: []
// [Asm] defined: fv11 is F
// [Asm] defs: [fv12]
// [Asm] live_set: [v7, fv12, zero, fv11, v8, v6]
// [Asm] move_origin: []
// [Asm] defined: fv12 is F
// [Asm] defs: [fv13]
// [Asm] live_set: [v7, fv12, zero, fv11, v8, fv13, v6]
// [Asm] move_origin: []
// [Asm] defined: fv13 is F
// [Asm] defs: [fv14]
// [Asm] live_set: [v7, fv12, fv14, zero, fv11, v8, fv13, v6]
// [Asm] move_origin: []
// [Asm] defined: fv14 is F
// [Asm] defs: [v15]
// [Asm] live_set: [v7, fv12, fv14, zero, fv11, v8, fv13, v6, v15]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [fv16]
// [Asm] live_set: [v7, fv12, fv14, fv16, zero, fv11, v8, fv13, v6, v15]
// [Asm] move_origin: []
// [Asm] defined: fv16 is F
// [Asm] defs: []
// [Asm] live_set: [v7, fv12, fv14, fv16, zero, fv11, v8, fv13, v6, v15]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v7, fv12, fv14, fv16, zero, fv11, v8, fv13, v6, v15]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a0, v7, fv12, a1, fv14, fv16, zero, fv11, v8, fv13, v6, v15]
// [Asm] move_origin: [v7]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a0, v7, a2, fv12, a1, fv14, fv16, zero, fv11, v8, fv13, v6, v15]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [a0, v7, a2, fv12, a1, a3, fv14, fv16, zero, fv11, v8, fv13, v6, v15]
// [Asm] move_origin: [zero]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [a0, v7, a2, fv12, a1, a3, fv14, fv16, zero, fv11, a4, v8, fv13, v6, v15]
// [Asm] move_origin: [v6]
// [Asm] defined: a4 is X
// [Asm] defs: [fa0]
// [Asm] live_set: [a0, v7, a2, fv12, a1, a3, fv14, fv16, zero, fv11, a4, v8, fa0, v6, v15]
// [Asm] move_origin: [fv13]
// [Asm] defined: fa0 is F
// [Asm] defs: [fa1]
// [Asm] live_set: [a0, v7, a2, fv12, a1, a3, fv16, fa1, zero, fv11, a4, v8, fa0, v6, v15]
// [Asm] move_origin: [fv14]
// [Asm] defined: fa1 is F
// [Asm] defs: [a5]
// [Asm] live_set: [a5, a0, v7, a2, fv12, a1, a3, fv16, fa1, zero, fv11, a4, v8, fa0, v6]
// [Asm] move_origin: [v15]
// [Asm] defined: a5 is X
// [Asm] defs: [fa2]
// [Asm] live_set: [a5, a0, v7, a2, fv12, a1, a3, fa1, fa2, zero, fv11, a4, v8, fa0, v6]
// [Asm] move_origin: [fv16]
// [Asm] defined: fa2 is F
// [Asm] defs: [fa3]
// [Asm] live_set: [a5, a0, v7, a2, fv12, a1, a3, fa1, fa2, fa3, zero, a4, fa0, v8, v6]
// [Asm] move_origin: [fv11]
// [Asm] defined: fa3 is F
// [Asm] defs: [fa4]
// [Asm] live_set: [a5, fa4, a0, v7, a2, a1, a3, fa1, fa2, fa3, zero, a4, fa0, v8, v6]
// [Asm] move_origin: [fv12]
// [Asm] defined: fa4 is F
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v8, v6, zero, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v17]
// [Asm] live_set: [v8, v6, zero, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v8, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v6, zero, a0, v7]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, v6, zero, a0]
// [Asm] move_origin: [v7]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, v6, zero, a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [a2, a1, v6, a3, zero, a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [a2, a1, a3, zero, a0, a4]
// [Asm] move_origin: [v6]
// [Asm] defined: a4 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v18]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.95"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="v27 ← a1", color=green];
// [Asm]   r23 [label="v17 ← a0", color=green];
// [Asm]   r3 [label="v4 ← a0", color=green];
// [Asm]   r9 [label="a6", color=blue];
// [Asm]   r6 [label="a3", color=blue];
// [Asm]   r13 [label="t2", color=blue];
// [Asm]   r4 [label="a1", color=blue];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r11 [label="t0", color=blue];
// [Asm]   r7 [label="a4", color=blue];
// [Asm]   r10 [label="a7", color=blue];
// [Asm]   r22 [label="v15 ← a5", color=green];
// [Asm]   r14 [label="t3", color=blue];
// [Asm]   r8 [label="a5", color=blue];
// [Asm]   r5 [label="a2", color=blue];
// [Asm]   r24 [label="v18 ← a0", color=green];
// [Asm]   r15 [label="t4", color=blue];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="v7 ← s0", color=green];
// [Asm]   r18 [label="v8 ← s1", color=green];
// [Asm]   r19 [label="v9 ← a0", color=green];
// [Asm]   r17 [label="v30 ← a0", color=green];
// [Asm]   r21 [label="v6 ← s2", color=green];
// [Asm]   r12 [label="t1", color=blue];
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r21;
// [Asm]   r0 -- r13;
// [Asm]   r5 -- r21;
// [Asm]   r16 -- r20;
// [Asm]   r7 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r2 -- r15;
// [Asm]   r14 -- r16;
// [Asm]   r5 -- r8;
// [Asm]   r1 -- r4;
// [Asm]   r5 -- r22;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r5 -- r18;
// [Asm]   r2 -- r10;
// [Asm]   r1 -- r17;
// [Asm]   r18 -- r21;
// [Asm]   r1 -- r20;
// [Asm]   r0 -- r22;
// [Asm]   r2 -- r16;
// [Asm]   r2 -- r7;
// [Asm]   r11 -- r18;
// [Asm]   r19 -- r21;
// [Asm]   r1 -- r16;
// [Asm]   r4 -- r22;
// [Asm]   r0 -- r16;
// [Asm]   r16 -- r17;
// [Asm]   r9 -- r18;
// [Asm]   r0 -- r6;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r9;
// [Asm]   r15 -- r18;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r8 -- r16;
// [Asm]   r10 -- r18;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r0 -- r9;
// [Asm]   r6 -- r18;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r10;
// [Asm]   r13 -- r18;
// [Asm]   r1 -- r11;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r8 -- r21;
// [Asm]   r18 -- r20;
// [Asm]   r0 -- r11;
// [Asm]   r16 -- r21;
// [Asm]   r1 -- r6;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r12 -- r21;
// [Asm]   r0 -- r4;
// [Asm]   r21 -- r22;
// [Asm]   r2 -- r24;
// [Asm]   r13 -- r21;
// [Asm]   r7 -- r8;
// [Asm]   r16 -- r23;
// [Asm]   r2 -- r23;
// [Asm]   r16 -- r22;
// [Asm]   r0 -- r18;
// [Asm]   r6 -- r7;
// [Asm]   r0 -- r15;
// [Asm]   r4 -- r16;
// [Asm]   r4 -- r5;
// [Asm]   r14 -- r18;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r11 -- r16;
// [Asm]   r16 -- r19;
// [Asm]   r0 -- r14;
// [Asm]   r13 -- r16;
// [Asm]   r0 -- r21;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r6 -- r16;
// [Asm]   r4 -- r18;
// [Asm]   r18 -- r22;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r5 -- r16;
// [Asm]   r16 -- r18;
// [Asm]   r10 -- r16;
// [Asm]   r21 -- r23;
// [Asm]   r6 -- r8;
// [Asm]   r7 -- r22;
// [Asm]   r18 -- r19;
// [Asm]   r2 -- r14;
// [Asm]   r15 -- r21;
// [Asm]   r0 -- r8;
// [Asm]   r14 -- r21;
// [Asm]   r8 -- r18;
// [Asm]   r0 -- r5;
// [Asm]   r2 -- r21;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r9 -- r16;
// [Asm]   r0 -- r12;
// [Asm]   r12 -- r16;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r6;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r10 -- r21;
// [Asm]   r11 -- r21;
// [Asm]   r12 -- r18;
// [Asm]   r9 -- r21;
// [Asm]   r19 -- r20;
// [Asm]   r18 -- r23;
// [Asm]   comment = "0:a0-> 1:s11-> 2:zero-> 4:a1-> 5:a2-> 6:a3-> 7:a4-> 8:a5-> 16:v7-> 18:v8-> 21:v6-> 22:v15-> 9:a6-> 10:a7-> 11:t0-> 12:t1-> 13:t2-> 14:t3-> 15:t4-> 19:v9-> 20:v27-> 23:v17-> 17:v30-> 3:v4-> 24:v18"
// [Asm]   comment = "v27<-a1;v17<-a0;v4<-a0;v15<-a5;v18<-a0;v7<-s0;v8<-s1;v9<-a0;v30<-a0;v6<-s2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.95"];
// [Asm]   r0 [label="fv2 ← fa0", color=green];
// [Asm]   r20 [label="fa6", color=blue];
// [Asm]   r23 [label="fv12 ← fa4", color=green];
// [Asm]   r3 [label="fv3 ← fa0", color=green];
// [Asm]   r9 [label="ft4", color=blue];
// [Asm]   r26 [label="fv16 ← fa2", color=green];
// [Asm]   r6 [label="ft1", color=blue];
// [Asm]   r13 [label="ft8", color=blue];
// [Asm]   r4 [label="fv5 ← fa0", color=green];
// [Asm]   r1 [label="fa1", color=blue];
// [Asm]   r11 [label="ft6", color=blue];
// [Asm]   r7 [label="ft2", color=blue];
// [Asm]   r10 [label="ft5", color=blue];
// [Asm]   r22 [label="fv11 ← fa3", color=green];
// [Asm]   r14 [label="ft9", color=blue];
// [Asm]   r8 [label="ft3", color=blue];
// [Asm]   r5 [label="ft0", color=blue];
// [Asm]   r24 [label="fv13 ← fa0", color=green];
// [Asm]   r15 [label="ft10", color=blue];
// [Asm]   r25 [label="fv14 ← fa1", color=green];
// [Asm]   r2 [label="fa2", color=blue];
// [Asm]   r16 [label="fa0", color=blue];
// [Asm]   r18 [label="fa4", color=blue];
// [Asm]   r19 [label="fa5", color=blue];
// [Asm]   r21 [label="fa7", color=blue];
// [Asm]   r17 [label="fa3", color=blue];
// [Asm]   r12 [label="ft7", color=blue];
// [Asm]   r22 -- r25;
// [Asm]   r17 -- r18;
// [Asm]   r23 -- r25;
// [Asm]   r16 -- r25;
// [Asm]   r17 -- r23;
// [Asm]   r1 -- r26;
// [Asm]   r0 -- r2;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r23;
// [Asm]   r22 -- r23;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r22;
// [Asm]   r1 -- r2;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r17;
// [Asm]   r22 -- r26;
// [Asm]   r23 -- r24;
// [Asm]   r25 -- r26;
// [Asm]   r1 -- r17;
// [Asm]   r2 -- r16;
// [Asm]   r16 -- r26;
// [Asm]   r1 -- r16;
// [Asm]   r2 -- r22;
// [Asm]   r24 -- r25;
// [Asm]   r2 -- r3;
// [Asm]   r16 -- r23;
// [Asm]   r24 -- r26;
// [Asm]   r22 -- r24;
// [Asm]   r16 -- r18;
// [Asm]   r2 -- r23;
// [Asm]   r16 -- r17;
// [Asm]   r16 -- r22;
// [Asm]   r23 -- r26;
// [Asm]   comment = "0:fv2-> 1:fa1-> 2:fa2-> 16:fa0-> 17:fa3-> 18:fa4-> 23:fv12-> 22:fv11-> 26:fv16-> 25:fv14-> 24:fv13-> 3:fv3-> 4:fv5-> 5:ft0-> 6:ft1-> 7:ft2-> 8:ft3-> 9:ft4-> 10:ft5-> 11:ft6-> 12:ft7-> 13:ft8-> 14:ft9-> 15:ft10-> 19:fa5-> 20:fa6-> 21:fa7"
// [Asm]   comment = "fv2<-fa0;fv12<-fa4;fv3<-fa0;fv16<-fa2;fv5<-fa0;fv11<-fa3;fv13<-fa0;fv14<-fa1;"
// [Asm] }
// [Asm] 
// [Asm] subst   fmv.d fv3, fa1 ->   fmv.d fa0, fa1
// [Asm] subst   fmv.d fv5, fa2 ->   fmv.d fa0, fa2
// [Asm] subst   call minimbt_read_int ->   call minimbt_read_int
// [Asm] subst   mv v7, a0 ->   mv s0, a0
// [Asm] subst   li v30, 2 ->   li a0, 2
// [Asm] subst   mul v8, v7, v30 ->   mul s1, s0, a0
// [Asm] subst   mul v9, v8, v7 ->   mul a0, s1, s0
// [Asm] subst   slliw v27, v9, 2 ->   slliw a1, a0, 2
// [Asm] subst   sub v6, s11, v27 ->   sub s2, s11, a1
// [Asm] subst   andi s11, v6, -8 ->   andi s11, s2, -8
// [Asm] subst   mv a1, v9 ->   mv a1, a0
// [Asm] subst   fcvt.d.w fv11, v8 ->   fcvt.d.w fa3, s1
// [Asm] subst   fcvt.d.w fv12, v7 ->   fcvt.d.w fa4, s0
// [Asm] subst   fld fv13, c_im.6, t5 ->   fld fa0, c_im.6, t5
// [Asm] subst   fld fv14, c_re.5, t5 ->   fld fa1, c_re.5, t5
// [Asm] subst   lw v15, iter.3 ->   lw a5, iter.3
// [Asm] subst   fld fv16, limit_sq.2, t5 ->   fld fa2, limit_sq.2, t5
// [Asm] subst   mv a0, v8 ->   mv a0, s1
// [Asm] subst   mv a1, v7 ->   mv a1, s0
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   mv a3, zero ->   mv a3, zero
// [Asm] subst   mv a4, v6 ->   mv a4, s2
// [Asm] subst   call main_loop.93 ->   call main_loop.93
// [Asm] subst   mv a0, v8 ->   mv a0, s1
// [Asm] subst   mv a1, v7 ->   mv a1, s0
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   mv a3, zero ->   mv a3, zero
// [Asm] subst   mv a4, v6 ->   mv a4, s2
// [Asm] subst   call print_loop.94 ->   call print_loop.94
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f10) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$c_im.6"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   comment = "0:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$c_im.6"];
// [Asm]   r0 [label="fv3 ← fa0", color=green];
// [Asm]   r1 [label="fa0", color=blue];
// [Asm]   comment = "0:fv3-> 1:fa0"
// [Asm]   comment = "fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 4604885582990058455 ->   li a0, 4604885582990058455
// [Asm] subst   fmv.d.x fv3, v2 ->   fmv.d.x fa0, a0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%0) -> fv2, Insn(iref=%2) -> fv3
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [fv2]
// [Asm] live_set: [fv2]
// [Asm] move_origin: []
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$limit_sq.2"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$limit_sq.2"];
// [Asm]   r0 [label="fv2 ← fa0", color=green];
// [Asm]   r2 [label="fa0", color=blue];
// [Asm]   r1 [label="fv3 ← fa0", color=green];
// [Asm]   comment = "0:fv2-> 1:fv3-> 2:fa0"
// [Asm]   comment = "fv2<-fa0;fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   fld fv2, limit.1, t5 ->   fld fa0, limit.1, t5
// [Asm] subst   fmul.d fv3, fv2, fv2 ->   fmul.d fa0, fa0, fa0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f14, fpref=$f.2) -> v4, Insn(iref=%9) -> v19, FnParam(fref=f14, fpref=$f.1) -> v3, Insn(iref=%8) -> v18, Insn(iref=%10) -> v20, BlockParam(bref=b0, bpref=$b.4) -> v11, BlockParam(bref=b0, bpref=$b.3) -> v10, BlockParam(bref=b0, bpref=$b.0) -> v7, BlockParam(bref=b0, bpref=$b.1) -> v8, FnParam(fref=f14, fpref=$f.4) -> v6, BlockParam(bref=b0, bpref=$b.2) -> v9, FnParam(fref=f14, fpref=$f.0) -> v2, Insn(iref=%5) -> v14, Insn(iref=%0) -> v12, Insn(iref=%3) -> v22, Insn(iref=%7) -> v17, Self(fref=f14) -> v0, BlockParam(bref=b6, bpref=$b.0) -> v23, Insn(iref=%2) -> v21, Insn(iref=%1) -> v13, Insn(iref=%11) -> v16, Insn(iref=%6) -> v15, FnParam(fref=f14, fpref=$f.3) -> v5
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%6), width=@32))
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.1)])
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, a3, zero, a0, a4]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, a3, zero, a4, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, a3, zero, a4, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, a3, zero, a4, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, zero, a4, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v4, v6, v5, zero, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v4, v6, v5, zero, v7]
// [Asm] move_origin: [v2]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v4, v6, v5, zero, v8]
// [Asm] move_origin: [v3]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v7, v6, v5, zero, v9, v8]
// [Asm] move_origin: [v4]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v7, v6, v10, zero, v9, v8]
// [Asm] move_origin: [v5]
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: [v6]
// [Asm] defined: v11 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v23]
// [Asm] move_origin: [zero]
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v7, v8]
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v11, v25, v10, zero, v7, v8]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v10, zero, a0, v7, v8]
// [Asm] move_origin: [v25]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, zero, a0, v7, v8]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v21]
// [Asm] live_set: [v11, v10, zero, v7, v8]
// [Asm] move_origin: [a0]
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v7, v8]
// [Asm] move_origin: []
// [Asm] defs: [v22]
// [Asm] live_set: [v11, zero, v22, v7, v8]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v11, zero, v22, v7, v8]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v11, zero, v22, v7, v8]
// [Asm] move_origin: [v8]
// [Asm] defs: [v9]
// [Asm] live_set: [v11, zero, v22, v7, v8, v9]
// [Asm] move_origin: [zero]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: [v22]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v11, v14, v10, zero, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v11, v10, zero, v7, v8, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v30]
// [Asm] live_set: [v11, v10, zero, v30, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v11, v10, zero, v7, v8, v31, v9]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v11, v10, zero, v7, v8, v17, v9]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v11, v10, v18, zero, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v18, zero, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v10, zero, a0, v7, v8, v9]
// [Asm] move_origin: [v18]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, zero, a0, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v19]
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defs: [v20]
// [Asm] live_set: [v11, v10, zero, v20, v7, v8]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v20, v7, v8]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v20, v7, v8]
// [Asm] move_origin: [v8]
// [Asm] defs: [v9]
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: [v20]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v23]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of print_loop.94"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r33 [label="v18 ← a0", color=green];
// [Asm]   r9 [label="v6 ← a4", color=green];
// [Asm]   r26 [label="v21 ← a0", color=green];
// [Asm]   r6 [label="v3 ← a1", color=green];
// [Asm]   r13 [label="v10 ← s3", color=green];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r29 [label="v15 ← a0", color=green];
// [Asm]   r35 [label="v20 ← a0", color=green];
// [Asm]   r7 [label="v4 ← a2", color=green];
// [Asm]   r10 [label="v7 ← s0", color=green];
// [Asm]   r8 [label="v5 ← a3", color=green];
// [Asm]   r5 [label="a4", color=blue];
// [Asm]   r15 [label="v23 ← a0", color=green];
// [Asm]   r24 [label="t3", color=blue];
// [Asm]   r32 [label="v17 ← a0", color=green];
// [Asm]   r31 [label="v31 ← a0", color=green];
// [Asm]   r17 [label="a0", color=blue];
// [Asm]   r12 [label="v9 ← s2", color=green];
// [Asm]   r20 [label="a7", color=blue];
// [Asm]   r23 [label="t2", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r27 [label="v22 ← a0", color=green];
// [Asm]   r1 [label="a2", color=blue];
// [Asm]   r28 [label="v14 ← a0", color=green];
// [Asm]   r11 [label="v8 ← s1", color=green];
// [Asm]   r34 [label="v19 ← a0", color=green];
// [Asm]   r22 [label="t1", color=blue];
// [Asm]   r14 [label="v11 ← s4", color=green];
// [Asm]   r30 [label="v30 ← a0", color=green];
// [Asm]   r25 [label="t4", color=blue];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="v25 ← a0", color=green];
// [Asm]   r18 [label="a5", color=blue];
// [Asm]   r19 [label="a6", color=blue];
// [Asm]   r21 [label="t0", color=blue];
// [Asm]   r10 -- r14;
// [Asm]   r12 -- r25;
// [Asm]   r12 -- r29;
// [Asm]   r12 -- r32;
// [Asm]   r14 -- r20;
// [Asm]   r17 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r34;
// [Asm]   r11 -- r35;
// [Asm]   r14 -- r16;
// [Asm]   r14 -- r27;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r10;
// [Asm]   r10 -- r26;
// [Asm]   r13 -- r32;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r11 -- r14;
// [Asm]   r5 -- r17;
// [Asm]   r1 -- r10;
// [Asm]   r10 -- r13;
// [Asm]   r2 -- r10;
// [Asm]   r10 -- r19;
// [Asm]   r11 -- r31;
// [Asm]   r11 -- r32;
// [Asm]   r3 -- r11;
// [Asm]   r13 -- r31;
// [Asm]   r1 -- r17;
// [Asm]   r4 -- r27;
// [Asm]   r13 -- r28;
// [Asm]   r11 -- r24;
// [Asm]   r11 -- r18;
// [Asm]   r4 -- r22;
// [Asm]   r12 -- r19;
// [Asm]   r4 -- r35;
// [Asm]   r17 -- r19;
// [Asm]   r11 -- r19;
// [Asm]   r14 -- r34;
// [Asm]   r4 -- r31;
// [Asm]   r8 -- r12;
// [Asm]   r14 -- r30;
// [Asm]   r0 -- r6;
// [Asm]   r4 -- r21;
// [Asm]   r12 -- r24;
// [Asm]   r14 -- r28;
// [Asm]   r14 -- r19;
// [Asm]   r4 -- r33;
// [Asm]   r10 -- r20;
// [Asm]   r13 -- r30;
// [Asm]   r5 -- r6;
// [Asm]   r13 -- r33;
// [Asm]   r3 -- r4;
// [Asm]   r11 -- r13;
// [Asm]   r12 -- r28;
// [Asm]   r10 -- r18;
// [Asm]   r0 -- r2;
// [Asm]   r10 -- r12;
// [Asm]   r0 -- r9;
// [Asm]   r3 -- r13;
// [Asm]   r10 -- r33;
// [Asm]   r6 -- r10;
// [Asm]   r4 -- r28;
// [Asm]   r7 -- r10;
// [Asm]   r9 -- r12;
// [Asm]   r17 -- r22;
// [Asm]   r2 -- r12;
// [Asm]   r3 -- r10;
// [Asm]   r10 -- r31;
// [Asm]   r4 -- r12;
// [Asm]   r10 -- r22;
// [Asm]   r4 -- r29;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r13 -- r18;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r25;
// [Asm]   r10 -- r30;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r12 -- r23;
// [Asm]   r5 -- r14;
// [Asm]   r14 -- r31;
// [Asm]   r13 -- r22;
// [Asm]   r8 -- r11;
// [Asm]   r13 -- r35;
// [Asm]   r1 -- r6;
// [Asm]   r10 -- r25;
// [Asm]   r3 -- r7;
// [Asm]   r12 -- r21;
// [Asm]   r0 -- r4;
// [Asm]   r13 -- r21;
// [Asm]   r7 -- r8;
// [Asm]   r11 -- r30;
// [Asm]   r10 -- r35;
// [Asm]   r4 -- r14;
// [Asm]   r13 -- r29;
// [Asm]   r14 -- r22;
// [Asm]   r4 -- r9;
// [Asm]   r11 -- r25;
// [Asm]   r17 -- r20;
// [Asm]   r14 -- r32;
// [Asm]   r10 -- r17;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r13 -- r24;
// [Asm]   r17 -- r18;
// [Asm]   r4 -- r16;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r14 -- r18;
// [Asm]   r11 -- r20;
// [Asm]   r14 -- r17;
// [Asm]   r11 -- r17;
// [Asm]   r4 -- r23;
// [Asm]   r14 -- r26;
// [Asm]   r2 -- r4;
// [Asm]   r12 -- r34;
// [Asm]   r8 -- r9;
// [Asm]   r14 -- r23;
// [Asm]   r11 -- r16;
// [Asm]   r13 -- r26;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r13 -- r16;
// [Asm]   r11 -- r12;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r20;
// [Asm]   r11 -- r23;
// [Asm]   r17 -- r24;
// [Asm]   r10 -- r29;
// [Asm]   r11 -- r22;
// [Asm]   r4 -- r30;
// [Asm]   r4 -- r18;
// [Asm]   r10 -- r27;
// [Asm]   r14 -- r29;
// [Asm]   r2 -- r11;
// [Asm]   r14 -- r24;
// [Asm]   r17 -- r25;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r11;
// [Asm]   r10 -- r34;
// [Asm]   r13 -- r25;
// [Asm]   r13 -- r20;
// [Asm]   r13 -- r19;
// [Asm]   r10 -- r16;
// [Asm]   r6 -- r8;
// [Asm]   r14 -- r35;
// [Asm]   r14 -- r33;
// [Asm]   r12 -- r20;
// [Asm]   r9 -- r11;
// [Asm]   r11 -- r33;
// [Asm]   r4 -- r11;
// [Asm]   r17 -- r23;
// [Asm]   r10 -- r28;
// [Asm]   r13 -- r34;
// [Asm]   r12 -- r13;
// [Asm]   r12 -- r33;
// [Asm]   r2 -- r14;
// [Asm]   r12 -- r31;
// [Asm]   r0 -- r3;
// [Asm]   r13 -- r23;
// [Asm]   r0 -- r8;
// [Asm]   r4 -- r32;
// [Asm]   r14 -- r25;
// [Asm]   r14 -- r21;
// [Asm]   r13 -- r14;
// [Asm]   r12 -- r22;
// [Asm]   r10 -- r23;
// [Asm]   r10 -- r11;
// [Asm]   r7 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r13 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r8 -- r10;
// [Asm]   r11 -- r34;
// [Asm]   r12 -- r30;
// [Asm]   r4 -- r7;
// [Asm]   r11 -- r26;
// [Asm]   r12 -- r14;
// [Asm]   r4 -- r17;
// [Asm]   r12 -- r27;
// [Asm]   r11 -- r27;
// [Asm]   r12 -- r17;
// [Asm]   r10 -- r32;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r26;
// [Asm]   r0 -- r7;
// [Asm]   r9 -- r13;
// [Asm]   r11 -- r28;
// [Asm]   r10 -- r21;
// [Asm]   r10 -- r24;
// [Asm]   r11 -- r21;
// [Asm]   r12 -- r18;
// [Asm]   r11 -- r29;
// [Asm]   r4 -- r19;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v2-> 1:a2-> 4:zero-> 6:v3-> 3:a3-> 7:v4-> 10:v7-> 5:a4-> 8:v5-> 11:v8-> 9:v6-> 12:v9-> 13:v10-> 14:v11-> 17:a0-> 2:a1-> 18:a5-> 19:a6-> 20:a7-> 21:t0-> 22:t1-> 23:t2-> 24:t3-> 25:t4-> 28:v14-> 29:v15-> 30:v30-> 31:v31-> 32:v17-> 33:v18-> 34:v19-> 16:v25-> 26:v21-> 27:v22-> 35:v20-> 15:v23"
// [Asm]   comment = "v2<-a0;v18<-a0;v6<-a4;v21<-a0;v3<-a1;v10<-s3;v15<-a0;v20<-a0;v4<-a2;v7<-s0;v5<-a3;v23<-a0;v17<-a0;v31<-a0;v9<-s2;v22<-a0;v14<-a0;v8<-s1;v19<-a0;v11<-s4;v30<-a0;v25<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of print_loop.94"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   beq v10, v8, .print_loop.94_1 ->   beq s3, s1, .print_loop.94_1
// [Asm] subst   mv v7, v2 ->   mv s0, a0
// [Asm] subst   mv v8, v3 ->   mv s1, a1
// [Asm] subst   mv v9, v4 ->   mv s2, a2
// [Asm] subst   mv v10, v5 ->   mv s3, a3
// [Asm] subst   mv v11, v6 ->   mv s4, a4
// [Asm] subst   mv v23, zero ->   mv a0, zero
// [Asm] subst   beq v9, v7, .print_loop.94_3 ->   beq s2, s0, .print_loop.94_3
// [Asm] subst   li v25, 10 ->   li a0, 10
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   addi v22, v10, 1 ->   addi a0, s3, 1
// [Asm] subst   mv v9, zero ->   mv s2, zero
// [Asm] subst   mv v10, v22 ->   mv s3, a0
// [Asm] subst   j .print_loop.94_0 ->   j .print_loop.94_0
// [Asm] subst   mul v14, v10, v7 ->   mul a0, s3, s0
// [Asm] subst   add v15, v14, v9 ->   add a0, a0, s2
// [Asm] subst   slliw v30, v15, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v31, v11, v30 ->   add a0, s4, a0
// [Asm] subst   lw v17, 0(v31) ->   lw a0, 0(a0)
// [Asm] subst   addi v18, v17, 48 ->   addi a0, a0, 48
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   addi v20, v9, 1 ->   addi a0, s2, 1
// [Asm] subst   mv v9, v20 ->   mv s2, a0
// [Asm] subst   j .print_loop.94_0 ->   j .print_loop.94_0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v6, Insn(iref=%1) -> fv3, Insn(iref=%3) -> fv5, Self(fref=f20) -> v0, Insn(iref=%0) -> fv2, Insn(iref=%2) -> v4
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [fv2]
// [Asm] live_set: [fv2]
// [Asm] move_origin: []
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fv2, fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v4, fv2, fv3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [fv5]
// [Asm] live_set: [fv5, v4, fv2, fv3]
// [Asm] move_origin: []
// [Asm] defined: fv5 is F
// [Asm] defs: []
// [Asm] live_set: [fv5, v4, fv2, fv3]
// [Asm] move_origin: []
// [Asm] defs: [fa0]
// [Asm] live_set: [fv5, v4, fv3, fa0]
// [Asm] move_origin: [fv2]
// [Asm] defined: fa0 is F
// [Asm] defs: [fa1]
// [Asm] live_set: [fv5, v4, fa1, fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa1 is F
// [Asm] defs: [a0]
// [Asm] live_set: [fv5, fa1, a0, fa0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [fa2]
// [Asm] live_set: [fa2, fa1, a0, fa0]
// [Asm] move_origin: [fv5]
// [Asm] defined: fa2 is F
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r8 [label="a7", color=blue];
// [Asm]   r0 [label="v4 ← a0", color=green];
// [Asm]   r5 [label="a4", color=blue];
// [Asm]   r3 [label="a2", color=blue];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r9 [label="t0", color=blue];
// [Asm]   r6 [label="a5", color=blue];
// [Asm]   r13 [label="t4", color=blue];
// [Asm]   r4 [label="a3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="t2", color=blue];
// [Asm]   r7 [label="a6", color=blue];
// [Asm]   r10 [label="t1", color=blue];
// [Asm]   r14 [label="v6 ← a0", color=green];
// [Asm]   r12 [label="t3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:v4-> 1:a0-> 2:a1-> 3:a2-> 4:a3-> 5:a4-> 6:a5-> 7:a6-> 8:a7-> 9:t0-> 10:t1-> 11:t2-> 12:t3-> 13:t4-> 14:v6"
// [Asm]   comment = "v4<-a0;v6<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="fv2 ← fa0", color=green];
// [Asm]   r20 [label="fa6", color=blue];
// [Asm]   r3 [label="fa0", color=blue];
// [Asm]   r9 [label="ft3", color=blue];
// [Asm]   r6 [label="ft0", color=blue];
// [Asm]   r13 [label="ft7", color=blue];
// [Asm]   r4 [label="fa1", color=blue];
// [Asm]   r1 [label="fv3 ← fa1", color=green];
// [Asm]   r11 [label="ft5", color=blue];
// [Asm]   r7 [label="ft1", color=blue];
// [Asm]   r10 [label="ft4", color=blue];
// [Asm]   r14 [label="ft8", color=blue];
// [Asm]   r8 [label="ft2", color=blue];
// [Asm]   r5 [label="fa2", color=blue];
// [Asm]   r15 [label="ft9", color=blue];
// [Asm]   r2 [label="fv5 ← fa2", color=green];
// [Asm]   r16 [label="ft10", color=blue];
// [Asm]   r18 [label="fa4", color=blue];
// [Asm]   r19 [label="fa5", color=blue];
// [Asm]   r21 [label="fa7", color=blue];
// [Asm]   r17 [label="fa3", color=blue];
// [Asm]   r12 [label="ft6", color=blue];
// [Asm]   r0 -- r2;
// [Asm]   r2 -- r4;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r1 -- r2;
// [Asm]   comment = "0:fv2-> 1:fv3-> 2:fv5-> 3:fa0-> 4:fa1-> 5:fa2-> 6:ft0-> 7:ft1-> 8:ft2-> 9:ft3-> 10:ft4-> 11:ft5-> 12:ft6-> 13:ft7-> 14:ft8-> 15:ft9-> 16:ft10-> 17:fa3-> 18:fa4-> 19:fa5-> 20:fa6-> 21:fa7"
// [Asm]   comment = "fv2<-fa0;fv3<-fa1;fv5<-fa2;"
// [Asm] }
// [Asm] 
// [Asm] subst   fld fv2, c_im.6, t5 ->   fld fa0, c_im.6, t5
// [Asm] subst   fld fv3, c_re.5, t5 ->   fld fa1, c_re.5, t5
// [Asm] subst   lw v4, iter.3 ->   lw a0, iter.3
// [Asm] subst   fld fv5, limit_sq.2, t5 ->   fld fa2, limit_sq.2, t5
// [Asm] subst   call main.95 ->   call main.95
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf true
// [Asm] T$iter.3:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$iter.3_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 300  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$c_re.5:
// [Asm] # block info: defs: [fv2, fv3, fa0], uses: [fv2, fv3, fa0], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$c_re.5_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   fld fv2, _4, t5  # live: [fv2]
// [Asm]   fneg.d fv3, fv2  # live: [fv3]
// [Asm] # control
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$limit.1:
// [Asm] # block info: defs: [fa0, fv3, v2], uses: [fa0, fv3, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$limit.1_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 4611686018427387904  # live: [v2]
// [Asm]   fmv.d.x fv3, v2  # live: [fv3]
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main.95:
// [Asm] # block info: defs: [t1, v7, ft0, ft1, fv12, a1, s11, fv14, fv16, fa1, fv5, fv2, fa2, ft6, a4, fa6, v27, v8, a6, ft10, v4, ft5, v6, fv3, ft7, ft4, ft9, a5, a0, fa4, v30, ft2, a2, v17, a3, v9, ft8, a7, t3, fa7, t0, fa5, v18, fa3, fv11, ft3, fv13, fa0, t4, t2, v15], uses: [a5, a0, fa4, v30, v7, fv12, a2, a1, fv14, s11, a3, fv16, fa1, v9, fa2, fa3, fv11, zero, v27, a4, v8, fa0, fv13, v6, v15], upward_exposed: [fa2, a0, zero, fa0, s11, fa1], params_defs: []
// [Asm] # live_in: [fa2, a0, zero, fa0, s11, fa1], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.95_0:
// [Asm]   # save_ctx1  # live: [a0, s11, fa1, fa2, zero, fa0]
// [Asm]   fmv.d fv2, fa0  # live: [a0, s11, fa1, fa2, zero]
// [Asm]   fmv.d fv3, fa1  # live: [a0, s11, fa2, zero]
// [Asm]   mv v4, a0  # live: [s11, fa2, zero]
// [Asm]   fmv.d fv5, fa2  # live: [s11, zero]
// [Asm]   # save_ctx2  # live: [s11, zero]
// [Asm]   call minimbt_read_int  # live: [a0, s11, zero]
// [Asm]   mv v7, a0  # live: [v7, s11, zero]
// [Asm]   # restore_ctx2  # live: [v7, s11, zero]
// [Asm]   li v30, 2  # live: [v30, v7, s11, zero]
// [Asm]   mul v8, v7, v30  # live: [v7, s11, zero, v8]
// [Asm]   mul v9, v8, v7  # live: [v7, s11, v9, zero, v8]
// [Asm]   slliw v27, v9, 2  # live: [v7, s11, v9, zero, v27, v8]
// [Asm]   sub v6, s11, v27  # live: [v7, v9, zero, v8, v6]
// [Asm]   andi s11, v6, -8  # live: [v7, v9, zero, v8, v6]
// [Asm]   mv a1, v9  # live: [v7, zero, v8, v6]
// [Asm]   fcvt.d.w fv11, v8  # live: [v7, zero, fv11, v8, v6]
// [Asm]   fcvt.d.w fv12, v7  # live: [v7, fv12, zero, fv11, v8, v6]
// [Asm]   fld fv13, c_im.6, t5  # live: [v7, fv12, zero, fv11, v8, fv13, v6]
// [Asm]   fld fv14, c_re.5, t5  # live: [v7, fv12, fv14, zero, fv11, v8, fv13, v6]
// [Asm]   lw v15, iter.3  # live: [v7, fv12, fv14, zero, fv11, v8, fv13, v6, v15]
// [Asm]   fld fv16, limit_sq.2, t5  # live: [v7, fv12, fv14, fv16, zero, fv11, v8, fv13, v6, v15]
// [Asm]   # save_ctx2  # live: [v7, fv12, fv14, fv16, zero, fv11, v8, fv13, v6, v15]
// [Asm]   mv a0, v8  # live: [a0, v7, fv12, fv14, fv16, zero, fv11, v8, fv13, v6, v15]
// [Asm]   mv a1, v7  # live: [a0, v7, fv12, a1, fv14, fv16, zero, fv11, v8, fv13, v6, v15]
// [Asm]   mv a2, zero  # live: [a0, v7, a2, fv12, a1, fv14, fv16, zero, fv11, v8, fv13, v6, v15]
// [Asm]   mv a3, zero  # live: [a0, v7, a2, fv12, a1, a3, fv14, fv16, zero, fv11, v8, fv13, v6, v15]
// [Asm]   mv a4, v6  # live: [a0, v7, a2, fv12, a1, a3, fv14, fv16, zero, fv11, a4, v8, fv13, v6, v15]
// [Asm]   fmv.d fa0, fv13  # live: [a0, v7, a2, fv12, a1, a3, fv14, fv16, zero, fv11, a4, v8, fa0, v6, v15]
// [Asm]   fmv.d fa1, fv14  # live: [a0, v7, a2, fv12, a1, a3, fv16, fa1, zero, fv11, a4, v8, fa0, v6, v15]
// [Asm]   mv a5, v15  # live: [a5, a0, v7, a2, fv12, a1, a3, fv16, fa1, zero, fv11, a4, v8, fa0, v6]
// [Asm]   fmv.d fa2, fv16  # live: [a5, a0, v7, a2, fv12, a1, a3, fa1, fa2, zero, fv11, a4, v8, fa0, v6]
// [Asm]   fmv.d fa3, fv11  # live: [a5, a0, v7, a2, fv12, a1, a3, fa1, fa2, fa3, zero, a4, fa0, v8, v6]
// [Asm]   fmv.d fa4, fv12  # live: [a5, fa4, a0, v7, a2, a1, a3, fa1, fa2, fa3, zero, a4, fa0, v8, v6]
// [Asm]   call main_loop.93  # live: [v8, v6, zero, a0, v7]
// [Asm]   mv v17, a0  # live: [v8, v6, zero, v7]
// [Asm]   # restore_ctx2  # live: [v8, v6, zero, v7]
// [Asm]   # save_ctx2  # live: [v8, v6, zero, v7]
// [Asm]   mv a0, v8  # live: [v6, zero, a0, v7]
// [Asm]   mv a1, v7  # live: [a1, v6, zero, a0]
// [Asm]   mv a2, zero  # live: [a2, a1, v6, zero, a0]
// [Asm]   mv a3, zero  # live: [a2, a1, v6, a3, zero, a0]
// [Asm]   mv a4, v6  # live: [a2, a1, a3, zero, a0, a4]
// [Asm]   call print_loop.94  # live: [zero, a0]
// [Asm]   mv v18, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$_4:
// [Asm] # block info: defs: [fa0, fv3, v2], uses: [fa0, fv3, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_4_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 4593527504729830064  # live: [v2]
// [Asm]   fmv.d.x fv3, v2  # live: [fv3]
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] calc_pixel.92:
// [Asm] # block info: defs: [v11, fv10, v14, v7, fv8, fv12, fv6, fv15, fv5, fv9, fv2, fv13, v4, fv3], uses: [a0, fa4, v7, fv8, a1, fv6, fa1, fv5, fv2, fa2, fa3, fa0, v4, fv3], upward_exposed: [fa2, fa3, a0, fa4, fa0, a1, fa1], params_defs: []
// [Asm] # live_in: [fa2, fa3, a0, fa4, zero, fa0, a1, fa1], live_out: [fv9, v11, fv10, v14, zero, fv13, fv12, fv15]
// [Asm] # block parameters: []
// [Asm] .calc_pixel.92_8:
// [Asm]   # save_ctx1  # live: [fa3, fa2, fa4, zero, a0, fa0, a1, fa1]
// [Asm]   fmv.d fv2, fa0  # live: [fv2, fa3, fa2, fa4, zero, a0, a1, fa1]
// [Asm]   fmv.d fv3, fa1  # live: [fv2, fa3, fa2, fa4, zero, a0, a1, fv3]
// [Asm]   mv v4, a0  # live: [fv2, fa3, fa2, fa4, zero, v4, a1, fv3]
// [Asm]   fmv.d fv5, fa2  # live: [fv5, fv2, fa3, zero, fa4, v4, a1, fv3]
// [Asm]   fmv.d fv6, fa3  # live: [fv5, fv2, zero, fa4, v4, a1, fv6, fv3]
// [Asm]   mv v7, a1  # live: [fv5, fv2, zero, fa4, v7, v4, fv6, fv3]
// [Asm]   fmv.d fv8, fa4  # live: [fv5, fv2, zero, fv8, v7, v4, fv6, fv3]
// [Asm] # control
// [Asm]   fmv.d fv9, fv2  # live: [fv9, fv5, zero, fv8, v7, v4, fv6, fv3]
// [Asm]   fmv.d fv10, fv3  # live: [fv9, fv5, fv10, zero, fv8, v7, v4, fv6]
// [Asm]   mv v11, v4  # live: [fv9, v11, fv5, fv10, zero, fv8, v7, fv6]
// [Asm]   fmv.d fv12, fv5  # live: [fv9, v11, fv10, zero, fv8, v7, fv12, fv6]
// [Asm]   fmv.d fv13, fv6  # live: [fv9, v11, fv10, zero, fv13, fv8, v7, fv12]
// [Asm]   mv v14, v7  # live: [fv9, v11, fv10, v14, zero, fv13, fv8, fv12]
// [Asm]   fmv.d fv15, fv8  # live: [fv9, v11, fv10, v14, zero, fv13, fv12, fv15]
// [Asm] 
// [Asm] # block info: defs: [v18, fv16, fv17], uses: [fv9, v11, fv10, v18], upward_exposed: [fv9, v11, fv10], params_defs: [fv9, v11, fv10, v14, fv13, fv12, fv15]
// [Asm] # live_in: [fv9, v11, fv10, v14, zero, fv13, fv12, fv15], live_out: [v11, fv9, fv10, zero, fv16, fv17]
// [Asm] # block parameters: [fv9, fv10, v11, fv12, fv13, v14, fv15]
// [Asm] .calc_pixel.92_0:
// [Asm]   fmul.d fv16, fv9, fv9  # live: [v11, fv9, fv10, zero, fv16]
// [Asm]   fmul.d fv17, fv10, fv10  # live: [v11, fv9, fv10, zero, fv16, fv17]
// [Asm]   lw v18, iter.3  # live: [v11, fv9, fv10, v18, zero, fv16, fv17]
// [Asm] # control
// [Asm]   beq v11, v18, .calc_pixel.92_1  # live: [v11, fv9, fv10, fv16, zero, fv17]
// [Asm] 
// [Asm] # block info: defs: [fv20, fv21, v22], uses: [fv21, fv20, fv16, fv17, zero, v22], upward_exposed: [fv16, fv17, zero], params_defs: []
// [Asm] # live_in: [v11, fv9, fv10, zero, fv16, fv17], live_out: [v11, fv9, fv10, zero, fv16, fv17]
// [Asm] # block parameters: []
// [Asm] .calc_pixel.92_2:
// [Asm]   fadd.d fv20, fv16, fv17  # live: [v11, fv9, fv10, zero, fv20, fv16, fv17]
// [Asm]   fld fv21, limit_sq.2, t5  # live: [v11, fv9, fv10, zero, fv20, fv16, fv17, fv21]
// [Asm]   fle.d v22, fv21, fv20  # live: [v11, fv9, fv10, zero, v22, fv16, fv17]
// [Asm] # control
// [Asm]   bne v22, zero, .calc_pixel.92_3  # live: [v11, fv9, fv10, fv16, zero, fv17]
// [Asm] 
// [Asm] # block info: defs: [v11, fv23, fv10, v14, fv32, v30, fv12, v31, fv15, fv26, fv9, fv46, fv28, fv25, v45, fv13, fv29, fv27], uses: [v11, fv23, fv10, fv32, v30, fv16, v31, fv26, fv9, fv46, fv28, fv25, v45, fv29, fv27, fv17], upward_exposed: [fv9, v11, fv10, fv16, fv17], params_defs: []
// [Asm] # live_in: [fv9, v11, fv10, zero, fv16, fv17], live_out: [fv9, v11, fv10, v14, zero, fv13, fv12, fv15]
// [Asm] # block parameters: []
// [Asm] .calc_pixel.92_4:
// [Asm]   li v45, 4611686018427387904  # live: [v11, fv9, fv10, zero, v45, fv16, fv17]
// [Asm]   fmv.d.x fv46, v45  # live: [v11, fv9, fv46, fv10, zero, fv16, fv17]
// [Asm]   fmul.d fv23, fv46, fv9  # live: [v11, fv23, fv10, zero, fv16, fv17]
// [Asm]   fld fv25, c_im.6, t5  # live: [v11, fv23, fv10, zero, fv25, fv16, fv17]
// [Asm]   fmadd.d fv26, fv23, fv10, fv25  # live: [v11, zero, fv25, fv16, fv26, fv17]
// [Asm]   fsub.d fv27, fv16, fv17  # live: [v11, zero, fv25, fv27, fv26]
// [Asm]   fld fv28, c_re.5, t5  # live: [v11, fv28, zero, fv25, fv27, fv26]
// [Asm]   fadd.d fv29, fv27, fv28  # live: [v11, fv28, zero, fv25, fv29, fv26]
// [Asm]   addi v30, v11, 1  # live: [fv28, zero, fv25, v30, fv29, fv26]
// [Asm]   lw v31, iter.3  # live: [fv28, zero, fv25, v30, fv29, v31, fv26]
// [Asm]   fld fv32, limit_sq.2, t5  # live: [fv28, fv32, zero, fv25, v30, fv29, v31, fv26]
// [Asm] # control
// [Asm]   fmv.d fv9, fv29  # live: [fv9, fv28, fv32, zero, fv25, v30, v31, fv26]
// [Asm]   fmv.d fv10, fv26  # live: [fv9, fv10, fv28, fv32, zero, fv25, v30, v31]
// [Asm]   mv v11, v30  # live: [fv9, v11, fv10, fv28, fv32, zero, fv25, v31]
// [Asm]   fmv.d fv12, fv25  # live: [fv9, v11, fv10, fv28, fv32, zero, fv12, v31]
// [Asm]   fmv.d fv13, fv28  # live: [fv9, v11, fv10, fv32, zero, fv13, fv12, v31]
// [Asm]   mv v14, v31  # live: [fv9, v11, fv10, v14, fv32, zero, fv13, fv12]
// [Asm]   fmv.d fv15, fv32  # live: [fv9, v11, fv10, v14, zero, fv13, fv12, fv15]
// [Asm]   j .calc_pixel.92_0  # live: [fv9, v11, fv10, v14, zero, fv13, fv12, fv15]
// [Asm] 
// [Asm] # block info: defs: [v34, v35], uses: [v34], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v35]
// [Asm] # block parameters: []
// [Asm] .calc_pixel.92_1:
// [Asm]   lw v34, iter.3  # live: [v34]
// [Asm] # control
// [Asm]   mv v35, v34  # live: [v35]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v35], upward_exposed: [v35], params_defs: [v35]
// [Asm] # live_in: [v35], live_out: []
// [Asm] # block parameters: [v35]
// [Asm] .calc_pixel.92_6:
// [Asm] # control
// [Asm]   mv a0, v35  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v33], uses: [v11], upward_exposed: [v11], params_defs: []
// [Asm] # live_in: [v11], live_out: [v33]
// [Asm] # block parameters: []
// [Asm] .calc_pixel.92_3:
// [Asm] # control
// [Asm]   mv v33, v11  # live: [v33]
// [Asm] 
// [Asm] # block info: defs: [v35], uses: [v33], upward_exposed: [v33], params_defs: [v33]
// [Asm] # live_in: [v33], live_out: [v35]
// [Asm] # block parameters: [v33]
// [Asm] .calc_pixel.92_5:
// [Asm] # control
// [Asm]   mv v35, v33  # live: [v35]
// [Asm]   j .calc_pixel.92_6  # live: [v35]
// [Asm] 
// [Asm] # leaf true
// [Asm] T$c_im.6:
// [Asm] # block info: defs: [fa0, fv3, v2], uses: [fa0, fv3, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$c_im.6_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 4604885582990058455  # live: [v2]
// [Asm]   fmv.d.x fv3, v2  # live: [fv3]
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$limit_sq.2:
// [Asm] # block info: defs: [fv2, fv3, fa0], uses: [fv2, fv3, fa0], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$limit_sq.2_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   fld fv2, limit.1, t5  # live: [fv2]
// [Asm]   fmul.d fv3, fv2, fv2  # live: [fv3]
// [Asm] # control
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fv5, fv2, fa2, ft6, a4, fa6, a6, v4, ft5, ft10, v6, fv3, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [fv5, fv2, fa2, a0, fa0, v4, v6, fv3, fa1], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   fld fv2, c_im.6, t5  # live: [fv2]
// [Asm]   fld fv3, c_re.5, t5  # live: [fv2, fv3]
// [Asm]   lw v4, iter.3  # live: [v4, fv2, fv3]
// [Asm]   fld fv5, limit_sq.2, t5  # live: [fv5, v4, fv2, fv3]
// [Asm]   # save_ctx2  # live: [fv5, v4, fv2, fv3]
// [Asm]   fmv.d fa0, fv2  # live: [fv5, v4, fv3, fa0]
// [Asm]   fmv.d fa1, fv3  # live: [fv5, v4, fa1, fa0]
// [Asm]   mv a0, v4  # live: [fv5, fa1, a0, fa0]
// [Asm]   fmv.d fa2, fv5  # live: [fa2, fa1, a0, fa0]
// [Asm]   call main.95  # live: [a0]
// [Asm]   mv v6, a0  # live: [v6]
// [Asm]   # restore_ctx2  # live: [v6]
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main_loop.93:
// [Asm] # block info: defs: [v3, v2, fv10, fv23, v16, v5, v14, v13, fv8, fv19, fv12, v17, v9, fv22, fv11, v20, v4, v6, v15, fv18, fv7, fv21], uses: [v2, fv10, v5, a5, a0, fa4, fv8, a2, fv12, a1, a3, fa1, v9, fa2, fa3, fv11, a4, fa0, v4, v6, fv7, v3], upward_exposed: [a5, fa2, fa3, a0, fa4, a4, fa0, a2, a1, a3, fa1], params_defs: []
// [Asm] # live_in: [a5, fa2, fa3, fa4, a0, zero, a4, fa0, a2, a1, a3, fa1], live_out: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm] # block parameters: []
// [Asm] .main_loop.93_14:
// [Asm]   # save_ctx1  # live: [fa3, fa2, a5, zero, fa4, a0, a4, fa0, a2, a1, a3, fa1]
// [Asm]   mv v2, a0  # live: [fa3, fa2, a5, zero, fa4, a4, fa0, a2, a1, a3, fa1, v2]
// [Asm]   mv v3, a1  # live: [v2, fa3, fa2, a5, zero, fa4, a4, fa0, a2, a3, fa1, v3]
// [Asm]   mv v4, a2  # live: [v2, fa3, fa2, a5, zero, fa4, a4, fa0, v4, a3, fa1, v3]
// [Asm]   mv v5, a3  # live: [v2, v5, fa3, fa2, a5, zero, fa4, a4, fa0, v4, fa1, v3]
// [Asm]   mv v6, a4  # live: [v2, v5, fa3, fa2, a5, zero, fa4, fa0, v4, v6, fa1, v3]
// [Asm]   fmv.d fv7, fa0  # live: [v2, v5, fa3, fa2, a5, zero, fa4, v4, v6, fa1, fv7, v3]
// [Asm]   fmv.d fv8, fa1  # live: [v2, v5, fa3, fa2, a5, zero, fa4, fv8, v4, v6, fv7, v3]
// [Asm]   mv v9, a5  # live: [v2, v5, fa3, fa2, fa4, zero, fv8, v4, v6, v9, fv7, v3]
// [Asm]   fmv.d fv10, fa2  # live: [v2, fv10, v5, fa3, zero, fa4, fv8, v4, v6, v9, fv7, v3]
// [Asm]   fmv.d fv11, fa3  # live: [v2, fv10, v5, zero, fv11, fa4, fv8, v4, v6, v9, fv7, v3]
// [Asm]   fmv.d fv12, fa4  # live: [v2, fv10, v5, zero, fv11, fv8, fv12, v4, v6, v9, fv7, v3]
// [Asm] # control
// [Asm]   mv v13, v2  # live: [fv10, v5, v13, zero, fv11, fv8, fv12, v4, v6, v9, fv7, v3]
// [Asm]   mv v14, v3  # live: [fv10, v14, v5, v13, zero, fv11, fv8, fv12, v4, v6, v9, fv7]
// [Asm]   mv v15, v4  # live: [fv10, v14, v5, v13, zero, fv11, fv8, fv12, v6, v15, v9, fv7]
// [Asm]   mv v16, v5  # live: [fv10, v14, v16, v13, zero, fv11, fv8, fv12, v6, v15, v9, fv7]
// [Asm]   mv v17, v6  # live: [fv10, v14, v16, v13, zero, fv11, fv8, fv12, v17, v15, v9, fv7]
// [Asm]   fmv.d fv18, fv7  # live: [fv10, v14, v16, v13, zero, fv11, fv8, fv12, v17, v15, fv18, v9]
// [Asm]   fmv.d fv19, fv8  # live: [fv10, v14, v16, v13, zero, fv11, fv19, fv12, v17, v15, fv18, v9]
// [Asm]   mv v20, v9  # live: [fv10, v14, v16, v13, zero, fv11, v20, fv19, fv12, v17, v15, fv18]
// [Asm]   fmv.d fv21, fv10  # live: [v14, v16, v13, zero, fv11, v20, fv19, fv12, v17, v15, fv18, fv21]
// [Asm]   fmv.d fv22, fv11  # live: [fv22, v14, v16, v13, zero, v20, fv19, fv12, v17, v15, fv18, fv21]
// [Asm]   fmv.d fv23, fv12  # live: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v16, v14], upward_exposed: [v16, v14], params_defs: [fv22, fv23, v14, v16, v13, v20, fv19, v17, v15, fv18, fv21]
// [Asm] # live_in: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21], live_out: [fv22, fv23, v16, v14, zero, v13, v17, v15]
// [Asm] # block parameters: [v13, v14, v15, v16, v17, fv18, fv19, v20, fv21, fv22, fv23]
// [Asm] .main_loop.93_0:
// [Asm] # control
// [Asm]   beq v16, v14, .main_loop.93_1  # live: [fv22, fv23, v16, v14, zero, v13, v17, v15]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v15, v13], upward_exposed: [v15, v13], params_defs: []
// [Asm] # live_in: [fv22, fv23, v16, v14, v13, zero, v17, v15], live_out: [fv22, fv23, v16, v14, v13, zero, v17, v15]
// [Asm] # block parameters: []
// [Asm] .main_loop.93_2:
// [Asm] # control
// [Asm]   beq v15, v13, .main_loop.93_3  # live: [fv22, fv23, v16, v14, v13, zero, v17, v15]
// [Asm] 
// [Asm] # block info: defs: [fv30, a1, fv35, fa1, fv38, fv120, fa2, ft6, a4, fa6, a6, ft10, ft5, fv27, ft4, ft9, fa4, v119, v110, ft2, v37, a3, a7, fa7, fv28, fa3, ft3, fv34, fv116, fv29, t2, v40, fv111, t1, ft0, ft1, v41, fv107, v115, v106, fv36, ft7, fv32, a5, a0, a2, fv26, v39, ft8, t3, t0, fa5, fv31, fv33, fa0, t4], uses: [fv111, fv23, v16, v13, fv30, fv107, a1, fv35, fa1, fv38, fv22, v115, v106, fv120, fa2, zero, fv36, fv27, fv32, fa4, a0, v110, v119, v37, fv26, v39, fv28, fv31, fa3, fv34, fv33, fa0, fv29, fv116, v15, v40], upward_exposed: [fv22, fv23, v16, zero, v13, v15], params_defs: []
// [Asm] # live_in: [fv22, fv23, v16, v14, zero, v13, v17, v15], live_out: [fv22, fv23, v14, v16, zero, v13, v41, v17, v15, v39]
// [Asm] # block parameters: []
// [Asm] .main_loop.93_4:
// [Asm]   fcvt.d.w fv26, v15  # live: [fv23, v14, v16, v13, v17, fv26, fv22, zero, v15]
// [Asm]   li v119, 4613937818241073152  # live: [fv23, v14, v16, v13, v119, v17, fv26, fv22, zero, v15]
// [Asm]   fmv.d.x fv120, v119  # live: [fv23, v14, v16, v13, v17, fv26, fv22, fv120, zero, v15]
// [Asm]   fmul.d fv27, fv120, fv26  # live: [fv23, v14, v16, v13, v17, fv22, zero, fv27, v15]
// [Asm]   fdiv.d fv28, fv27, fv22  # live: [fv23, v14, v16, v13, v17, fv22, fv28, zero, v15]
// [Asm]   li v115, 4609434218613702656  # live: [fv23, v14, v16, v13, v17, fv22, v115, fv28, zero, v15]
// [Asm]   fmv.d.x fv116, v115  # live: [fv23, v14, v16, v13, v17, fv22, fv28, zero, fv116, v15]
// [Asm]   fsub.d fv29, fv28, fv116  # live: [fv23, v14, v16, v13, v17, fv22, zero, fv29, v15]
// [Asm]   fneg.d fv30, fv29  # live: [fv23, v14, v16, v13, fv30, v17, fv22, zero, v15]
// [Asm]   fcvt.d.w fv31, v16  # live: [fv23, v14, v16, v13, fv30, v17, fv22, fv31, zero, v15]
// [Asm]   li v110, 4613937818241073152  # live: [fv23, v14, v16, v13, v110, fv30, v17, fv22, fv31, zero, v15]
// [Asm]   fmv.d.x fv111, v110  # live: [fv111, fv23, v14, v16, v13, fv30, v17, fv22, fv31, zero, v15]
// [Asm]   fmul.d fv32, fv111, fv31  # live: [fv23, v14, v16, fv32, v13, fv30, v17, fv22, zero, v15]
// [Asm]   fdiv.d fv33, fv32, fv23  # live: [fv23, v14, v16, v13, fv30, v17, fv22, zero, fv33, v15]
// [Asm]   li v106, 4609434218613702656  # live: [fv23, v14, v16, v13, fv30, v17, fv22, v106, zero, fv33, v15]
// [Asm]   fmv.d.x fv107, v106  # live: [fv23, v14, v16, v13, fv30, v17, fv107, fv22, zero, fv33, v15]
// [Asm]   fsub.d fv34, fv33, fv107  # live: [fv23, v14, v16, v13, fv30, v17, fv22, zero, fv34, v15]
// [Asm]   fld fv35, c_im.6, t5  # live: [fv23, v14, v16, v13, fv30, v17, fv35, fv22, zero, fv34, v15]
// [Asm]   fld fv36, c_re.5, t5  # live: [fv23, v14, v16, v13, fv30, v17, fv35, fv22, zero, fv36, fv34, v15]
// [Asm]   lw v37, iter.3  # live: [fv23, v14, v16, v13, fv30, v37, v17, fv35, fv22, zero, fv36, fv34, v15]
// [Asm]   fld fv38, limit_sq.2, t5  # live: [fv23, v14, v16, v13, fv30, v37, v17, fv35, fv38, fv22, zero, fv36, fv34, v15]
// [Asm]   # save_ctx2  # live: [fv23, v14, v16, v13, fv30, v37, v17, fv35, fv38, fv22, zero, fv36, fv34, v15]
// [Asm]   fmv.d fa0, fv30  # live: [fv23, v14, v16, v13, v37, v17, fv35, fv38, fv22, zero, fv36, fv34, fa0, v15]
// [Asm]   fmv.d fa1, fv34  # live: [fv23, v14, v16, v13, v37, v17, fv35, fa1, fv38, fv22, zero, fv36, fa0, v15]
// [Asm]   mv a0, zero  # live: [fv23, v14, v16, v13, a0, v37, v17, fv35, fa1, fv38, fv22, zero, fv36, fa0, v15]
// [Asm]   fmv.d fa2, fv35  # live: [fv23, v14, v16, v13, a0, v37, v17, fa1, fv38, fv22, fa2, zero, fv36, fa0, v15]
// [Asm]   fmv.d fa3, fv36  # live: [fv23, v14, v16, v13, a0, v37, v17, fa1, fv38, fv22, fa2, fa3, zero, fa0, v15]
// [Asm]   mv a1, v37  # live: [fv23, v14, v16, v13, a0, v17, a1, fa1, fv38, fv22, fa2, fa3, zero, fa0, v15]
// [Asm]   fmv.d fa4, fv38  # live: [fv23, v14, v16, v13, fa4, a0, v17, a1, fa1, fv22, fa2, fa3, zero, fa0, v15]
// [Asm]   call calc_pixel.92  # live: [fv22, fv23, v14, v16, zero, v13, a0, v17, v15]
// [Asm]   mv v39, a0  # live: [fv22, fv23, v14, v16, zero, v13, v17, v15, v39]
// [Asm]   # restore_ctx2  # live: [fv22, fv23, v14, v16, zero, v13, v17, v15, v39]
// [Asm]   mul v40, v16, v13  # live: [fv22, fv23, v14, v16, zero, v13, v17, v15, v39, v40]
// [Asm]   add v41, v40, v15  # live: [fv22, fv23, v14, v16, zero, v13, v41, v17, v15, v39]
// [Asm] # control
// [Asm]   bge zero, v39, .main_loop.93_5  # live: [fv22, fv23, v14, v16, zero, v13, v41, v17, v15, v39]
// [Asm] 
// [Asm] # block info: defs: [v98], uses: [v39, v98], upward_exposed: [v39], params_defs: []
// [Asm] # live_in: [fv22, fv23, v14, v16, v13, zero, v41, v17, v15, v39], live_out: [fv22, fv23, v14, v16, v13, zero, v41, v17, v15, v39]
// [Asm] # block parameters: []
// [Asm] .main_loop.93_6:
// [Asm] # control
// [Asm]   li v98, 48  # live: [fv22, fv23, v14, v16, v13, zero, v41, v17, v15, v39, v98]
// [Asm]   blt v39, v98, .main_loop.93_8  # live: [fv22, fv23, v14, v16, v13, zero, v41, v17, v15, v39]
// [Asm] 
// [Asm] # block info: defs: [fv21, v53, v56, v20, fv54, v88, fv19, fv55, v90, v15, fv18, fv57, v89], uses: [fv23, v14, v16, v53, v13, fv54, v88, v41, fv55, v17, fv57, fv22, v56, v90, v15, v89], upward_exposed: [fv22, fv23, v14, v16, v13, v41, v17, v15], params_defs: []
// [Asm] # live_in: [fv22, fv23, v16, v14, v13, zero, v41, v17, v15], live_out: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm] # block parameters: []
// [Asm] .main_loop.93_7:
// [Asm]   li v88, 48  # live: [fv22, fv23, v14, v16, zero, v13, v88, v41, v17, v15]
// [Asm]   slliw v89, v41, 2  # live: [fv22, fv23, v14, v16, zero, v13, v88, v17, v15, v89]
// [Asm]   add v90, v17, v89  # live: [fv22, fv23, v14, v16, zero, v13, v88, v90, v17, v15]
// [Asm]   sw v88, 0(v90)  # live: [fv22, fv23, v14, v16, zero, v13, v17, v15]
// [Asm]   addi v53, v15, 1  # live: [fv22, fv23, v14, v16, v53, zero, v13, v17]
// [Asm]   fld fv54, c_im.6, t5  # live: [fv22, fv23, v14, v16, v53, zero, v13, fv54, v17]
// [Asm]   fld fv55, c_re.5, t5  # live: [fv22, fv23, v14, v16, v53, zero, v13, fv54, fv55, v17]
// [Asm]   lw v56, iter.3  # live: [fv22, fv23, v14, v16, v56, v53, zero, v13, fv54, fv55, v17]
// [Asm]   fld fv57, limit_sq.2, t5  # live: [fv22, fv23, v14, v16, v56, v53, zero, v13, fv54, fv55, v17, fv57]
// [Asm] # control
// [Asm]   mv v13, v13  # live: [fv22, fv23, v14, v16, v56, v53, zero, v13, fv54, fv55, v17, fv57]
// [Asm]   mv v14, v14  # live: [fv22, fv23, v14, v16, v56, v53, zero, v13, fv54, fv55, v17, fv57]
// [Asm]   mv v15, v53  # live: [fv22, fv23, v14, v16, v56, v13, zero, fv54, fv55, v17, v15, fv57]
// [Asm]   mv v16, v16  # live: [fv22, fv23, v14, v16, v56, v13, zero, fv54, fv55, v17, v15, fv57]
// [Asm]   mv v17, v17  # live: [fv22, fv23, v14, v16, v56, v13, zero, fv54, fv55, v17, v15, fv57]
// [Asm]   fmv.d fv18, fv54  # live: [fv22, fv23, v14, v16, v56, v13, zero, fv55, v17, v15, fv18, fv57]
// [Asm]   fmv.d fv19, fv55  # live: [fv22, fv23, v14, v16, v56, v13, zero, fv19, v17, v15, fv18, fv57]
// [Asm]   mv v20, v56  # live: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv57]
// [Asm]   fmv.d fv21, fv57  # live: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm]   fmv.d fv22, fv22  # live: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm]   fmv.d fv23, fv23  # live: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm]   j .main_loop.93_0  # live: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm] 
// [Asm] # block info: defs: [v70], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v70]
// [Asm] # block parameters: []
// [Asm] .main_loop.93_1:
// [Asm] # control
// [Asm]   mv v70, zero  # live: [v70]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v70, a0], upward_exposed: [v70], params_defs: [v70]
// [Asm] # live_in: [v70], live_out: []
// [Asm] # block parameters: [v70]
// [Asm] .main_loop.93_12:
// [Asm] # control
// [Asm]   mv a0, v70  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [fv69, v16, fv67, fv66, v68, v20, fv19, v65, v15, fv18, fv21], uses: [fv22, fv23, v16, v14, fv69, fv67, fv66, v13, v68, zero, v65, v17], upward_exposed: [fv22, fv23, v16, v14, v13, zero, v17], params_defs: []
// [Asm] # live_in: [fv22, fv23, v16, v14, v13, zero, v17], live_out: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm] # block parameters: []
// [Asm] .main_loop.93_3:
// [Asm]   addi v65, v16, 1  # live: [fv22, fv23, v14, v13, zero, v65, v17]
// [Asm]   fld fv66, c_im.6, t5  # live: [fv22, fv23, v14, fv66, v13, zero, v65, v17]
// [Asm]   fld fv67, c_re.5, t5  # live: [fv22, fv23, v14, fv67, fv66, v13, zero, v65, v17]
// [Asm]   lw v68, iter.3  # live: [fv22, fv23, v14, fv67, fv66, v68, v13, zero, v65, v17]
// [Asm]   fld fv69, limit_sq.2, t5  # live: [fv22, fv23, v14, fv69, fv67, fv66, v68, v13, zero, v65, v17]
// [Asm] # control
// [Asm]   mv v13, v13  # live: [fv22, fv23, v14, fv69, fv67, fv66, v68, v13, zero, v65, v17]
// [Asm]   mv v14, v14  # live: [fv22, fv23, v14, fv69, fv67, fv66, v68, v13, zero, v65, v17]
// [Asm]   mv v15, zero  # live: [fv22, fv23, v14, fv69, fv67, fv66, v68, v13, zero, v65, v17, v15]
// [Asm]   mv v16, v65  # live: [fv22, fv23, v14, v16, fv69, fv67, fv66, v68, v13, zero, v17, v15]
// [Asm]   mv v17, v17  # live: [fv22, fv23, v14, v16, fv69, fv67, fv66, v68, v13, zero, v17, v15]
// [Asm]   fmv.d fv18, fv66  # live: [fv22, fv23, v14, v16, fv69, fv67, zero, v68, v13, v17, v15, fv18]
// [Asm]   fmv.d fv19, fv67  # live: [fv22, fv23, v14, v16, fv69, v13, zero, v68, fv19, v17, v15, fv18]
// [Asm]   mv v20, v68  # live: [fv22, fv23, v14, v16, fv69, v13, zero, v20, fv19, v17, v15, fv18]
// [Asm]   fmv.d fv21, fv69  # live: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm]   fmv.d fv22, fv22  # live: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm]   fmv.d fv23, fv23  # live: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm]   j .main_loop.93_0  # live: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm] 
// [Asm] # block info: defs: [v63, v82, fv62, fv61, fv64, v20, fv19, v81, v15, fv18, v60, fv21], uses: [fv23, v14, v16, v13, fv61, fv64, v41, v17, v60, fv22, v63, v82, fv62, zero, v81, v15], upward_exposed: [fv22, fv23, v14, v16, zero, v13, v41, v17, v15], params_defs: []
// [Asm] # live_in: [fv22, fv23, v14, v16, zero, v13, v41, v17, v15], live_out: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm] # block parameters: []
// [Asm] .main_loop.93_5:
// [Asm]   slliw v81, v41, 2  # live: [fv22, fv23, v16, v14, zero, v13, v81, v17, v15]
// [Asm]   add v82, v17, v81  # live: [fv22, fv23, v16, v14, v82, zero, v13, v17, v15]
// [Asm]   sw zero, 0(v82)  # live: [fv22, fv23, v16, v14, zero, v13, v17, v15]
// [Asm]   addi v60, v15, 1  # live: [fv22, fv23, v16, v14, zero, v13, v17, v60]
// [Asm]   fld fv61, c_im.6, t5  # live: [fv22, fv23, v16, v14, zero, v13, fv61, v17, v60]
// [Asm]   fld fv62, c_re.5, t5  # live: [fv22, fv23, v16, v14, fv62, zero, v13, fv61, v17, v60]
// [Asm]   lw v63, iter.3  # live: [fv22, fv23, v63, v16, v14, fv62, zero, v13, fv61, v17, v60]
// [Asm]   fld fv64, limit_sq.2, t5  # live: [fv22, fv23, v63, v16, v14, fv62, zero, fv64, v13, fv61, v17, v60]
// [Asm] # control
// [Asm]   mv v13, v13  # live: [fv22, fv23, v63, v16, v14, fv62, zero, fv64, v13, fv61, v17, v60]
// [Asm]   mv v14, v14  # live: [fv22, fv23, v63, v16, v14, fv62, zero, fv64, v13, fv61, v17, v60]
// [Asm]   mv v15, v60  # live: [fv22, fv23, v63, v16, v14, fv62, zero, fv64, v13, fv61, v17, v15]
// [Asm]   mv v16, v16  # live: [fv22, fv23, v63, v16, v14, fv62, zero, fv64, v13, fv61, v17, v15]
// [Asm]   mv v17, v17  # live: [fv22, fv23, v63, v16, v14, fv62, zero, fv64, v13, fv61, v17, v15]
// [Asm]   fmv.d fv18, fv61  # live: [fv22, fv23, v63, v16, v14, fv62, zero, fv64, v13, v17, v15, fv18]
// [Asm]   fmv.d fv19, fv62  # live: [fv22, fv23, v63, v16, v14, v13, zero, fv64, fv19, v17, v15, fv18]
// [Asm]   mv v20, v63  # live: [fv22, fv23, v14, v16, v13, zero, fv64, v20, fv19, v17, v15, fv18]
// [Asm]   fmv.d fv21, fv64  # live: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm]   fmv.d fv22, fv22  # live: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm]   fmv.d fv23, fv23  # live: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm]   j .main_loop.93_0  # live: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm] 
// [Asm] # block info: defs: [fv50, v46, v49, v96, v97, v20, fv48, fv19, fv47, v15, fv18, fv21], uses: [fv23, v14, v46, v16, v49, v13, fv48, v41, v17, fv47, v39, fv50, fv22, v96, v97, v15], upward_exposed: [fv22, fv23, v14, v16, v13, v41, v17, v15, v39], params_defs: []
// [Asm] # live_in: [fv22, fv23, v16, v14, v13, zero, v41, v17, v15, v39], live_out: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm] # block parameters: []
// [Asm] .main_loop.93_8:
// [Asm]   slliw v96, v41, 2  # live: [fv22, fv23, v16, v14, v96, v13, zero, v17, v15, v39]
// [Asm]   add v97, v17, v96  # live: [fv22, fv23, v16, v14, v13, zero, v97, v17, v15, v39]
// [Asm]   sw v39, 0(v97)  # live: [fv22, fv23, v16, v14, v13, zero, v17, v15]
// [Asm]   addi v46, v15, 1  # live: [fv22, fv23, v16, v14, v46, v13, zero, v17]
// [Asm]   fld fv47, c_im.6, t5  # live: [fv22, fv23, v16, v14, v46, v13, zero, v17, fv47]
// [Asm]   fld fv48, c_re.5, t5  # live: [fv22, fv23, v16, v14, v46, v13, zero, fv48, v17, fv47]
// [Asm]   lw v49, iter.3  # live: [fv22, fv23, v16, v14, v46, v49, v13, zero, fv48, v17, fv47]
// [Asm]   fld fv50, limit_sq.2, t5  # live: [fv22, fv50, fv23, v16, v14, v46, v49, v13, zero, fv48, v17, fv47]
// [Asm] # control
// [Asm]   mv v13, v13  # live: [fv22, fv50, fv23, v16, v14, v46, v49, v13, zero, fv48, v17, fv47]
// [Asm]   mv v14, v14  # live: [fv22, fv50, fv23, v16, v14, v46, v49, v13, zero, fv48, v17, fv47]
// [Asm]   mv v15, v46  # live: [fv22, fv50, fv23, v16, v14, v49, zero, v13, fv48, v17, v15, fv47]
// [Asm]   mv v16, v16  # live: [fv22, fv50, fv23, v16, v14, v49, zero, v13, fv48, v17, v15, fv47]
// [Asm]   mv v17, v17  # live: [fv22, fv50, fv23, v16, v14, v49, zero, v13, fv48, v17, v15, fv47]
// [Asm]   fmv.d fv18, fv47  # live: [fv22, fv50, fv23, v16, v14, v49, zero, v13, fv48, v17, v15, fv18]
// [Asm]   fmv.d fv19, fv48  # live: [fv22, fv50, fv23, v16, v14, v49, zero, v13, fv19, v17, v15, fv18]
// [Asm]   mv v20, v49  # live: [fv22, fv50, fv23, v16, v14, v13, zero, v20, fv19, v17, v15, fv18]
// [Asm]   fmv.d fv21, fv50  # live: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm]   fmv.d fv22, fv22  # live: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm]   fmv.d fv23, fv23  # live: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm]   j .main_loop.93_0  # live: [fv22, fv23, v14, v16, v13, zero, v20, fv19, v17, v15, fv18, fv21]
// [Asm] 
// [Asm] # leaf false
// [Asm] print_loop.94:
// [Asm] # block info: defs: [v2, v11, v5, v10, v7, v8, v4, v6, v9, v3], uses: [v3, v5, a0, a4, a2, v4, a1, v6, a3, v2], upward_exposed: [a2, a1, a3, a0, a4], params_defs: []
// [Asm] # live_in: [a0, zero, a4, a2, a1, a3], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: []
// [Asm] .print_loop.94_8:
// [Asm]   # save_ctx1  # live: [a2, a1, a3, zero, a0, a4]
// [Asm]   mv v2, a0  # live: [a2, a1, a3, zero, a4, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, a3, zero, a4, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, a3, zero, a4, v3]
// [Asm]   mv v5, a3  # live: [v2, v4, v5, zero, a4, v3]
// [Asm]   mv v6, a4  # live: [v2, v4, v6, v5, zero, v3]
// [Asm] # control
// [Asm]   mv v7, v2  # live: [v3, v4, v6, v5, zero, v7]
// [Asm]   mv v8, v3  # live: [v7, v4, v6, v5, zero, v8]
// [Asm]   mv v9, v4  # live: [v7, v6, v5, zero, v9, v8]
// [Asm]   mv v10, v5  # live: [v7, v6, v10, zero, v9, v8]
// [Asm]   mv v11, v6  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v10, v8], upward_exposed: [v10, v8], params_defs: [v8, v11, v10, v9, v7]
// [Asm] # live_in: [v11, v10, zero, v7, v8, v9], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: [v7, v8, v9, v10, v11]
// [Asm] .print_loop.94_0:
// [Asm] # control
// [Asm]   beq v10, v8, .print_loop.94_1  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v9, v7], upward_exposed: [v9, v7], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v8, v7, v9], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: []
// [Asm] .print_loop.94_2:
// [Asm] # control
// [Asm]   beq v9, v7, .print_loop.94_3  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v20, v19, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, v30, ft2, a2, v17, a3, v31, v9, ft8, a7, t3, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v15], uses: [v11, v14, v10, a0, v30, v7, v17, v31, v9, v18, v20, v8, v15], upward_exposed: [v8, v11, v10, v9, v7], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v7, v8, v9], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: []
// [Asm] .print_loop.94_4:
// [Asm]   mul v14, v10, v7  # live: [v11, v14, v10, zero, v7, v8, v9]
// [Asm]   add v15, v14, v9  # live: [v11, v10, zero, v7, v8, v15, v9]
// [Asm]   slliw v30, v15, 2  # live: [v11, v10, zero, v30, v7, v8, v9]
// [Asm]   add v31, v11, v30  # live: [v11, v10, zero, v7, v8, v31, v9]
// [Asm]   lw v17, 0(v31)  # live: [v11, v10, zero, v7, v8, v17, v9]
// [Asm]   addi v18, v17, 48  # live: [v11, v10, v18, zero, v7, v8, v9]
// [Asm]   # save_ctx2  # live: [v11, v10, v18, zero, v7, v8, v9]
// [Asm]   mv a0, v18  # live: [v11, v10, zero, a0, v7, v8, v9]
// [Asm]   call minimbt_print_char  # live: [v11, v10, zero, a0, v7, v8, v9]
// [Asm]   mv v19, a0  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   # restore_ctx2  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   addi v20, v9, 1  # live: [v11, v10, zero, v20, v7, v8]
// [Asm] # control
// [Asm]   mv v7, v7  # live: [v11, v10, zero, v20, v7, v8]
// [Asm]   mv v8, v8  # live: [v11, v10, zero, v20, v7, v8]
// [Asm]   mv v9, v20  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   mv v11, v11  # live: [v7, v11, v10, zero, v9, v8]
// [Asm]   j .print_loop.94_0  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [v23], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v23]
// [Asm] # block parameters: []
// [Asm] .print_loop.94_1:
// [Asm] # control
// [Asm]   mv v23, zero  # live: [v23]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v23], upward_exposed: [v23], params_defs: [v23]
// [Asm] # live_in: [v23], live_out: []
// [Asm] # block parameters: [v23]
// [Asm] .print_loop.94_6:
// [Asm] # control
// [Asm]   mv a0, v23  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v25, t1, v22, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, v21, v10, a5, a0, fa4, ft2, a2, a3, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v25, v11, v10, a0, zero, v22, v7, v8], upward_exposed: [v8, v11, v10, zero, v7], params_defs: []
// [Asm] # live_in: [v7, v11, v10, zero, v8], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: []
// [Asm] .print_loop.94_3:
// [Asm]   # save_ctx2  # live: [v11, v10, zero, v7, v8]
// [Asm]   li v25, 10  # live: [v11, v25, v10, zero, v7, v8]
// [Asm]   mv a0, v25  # live: [v11, v10, zero, a0, v7, v8]
// [Asm]   call minimbt_print_char  # live: [v11, v10, zero, a0, v7, v8]
// [Asm]   mv v21, a0  # live: [v11, v10, zero, v7, v8]
// [Asm]   # restore_ctx2  # live: [v11, v10, zero, v7, v8]
// [Asm]   addi v22, v10, 1  # live: [v11, zero, v22, v7, v8]
// [Asm] # control
// [Asm]   mv v7, v7  # live: [v11, zero, v22, v7, v8]
// [Asm]   mv v8, v8  # live: [v11, zero, v22, v7, v8]
// [Asm]   mv v9, zero  # live: [v11, zero, v22, v7, v8, v9]
// [Asm]   mv v10, v22  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   mv v11, v11  # live: [v7, v11, v10, zero, v9, v8]
// [Asm]   j .print_loop.94_0  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0, fa0, sp, s0, ra, s11, t5], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$limit.1  # live: [s0, fa0]
// [Asm]   la t5, limit.1  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$limit_sq.2  # live: [s0, fa0]
// [Asm]   la t5, limit_sq.2  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$iter.3  # live: [s0, a0]
// [Asm]   la t5, iter.3  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$_4  # live: [s0, fa0]
// [Asm]   la t5, _4  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$c_re.5  # live: [s0, fa0]
// [Asm]   la t5, c_re.5  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$c_im.6  # live: [s0, fa0]
// [Asm]   la t5, c_im.6  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] iter.3:
// [Asm]   .zero 4
// [Asm] c_im.6:
// [Asm]   .zero 8
// [Asm] start:
// [Asm]   .zero 4
// [Asm] _4:
// [Asm]   .zero 8
// [Asm] limit_sq.2:
// [Asm]   .zero 8
// [Asm] limit.1:
// [Asm]   .zero 8
// [Asm] c_re.5:
// [Asm]   .zero 8
// [Asm] 
// [Knf] build_knf: Let(("limit", Double), Double(2), Let(("limit_sq", Double), Prim(Var("limit"), Var("limit"), Mul, kind=Some(Double)), Let(("iter", Int), Int(300), Let(("c_re", Double), Neg(Double(0.123), kind=Some(Double)), Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))))))))))
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Let(("limit_sq", Double), Prim(Var("limit"), Var("limit"), Mul, kind=Some(Double)), Let(("iter", Int), Int(300), Let(("c_re", Double), Neg(Double(0.123), kind=Some(Double)), Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))))))))))
// [Knf] build_knf: Prim(Var("limit"), Var("limit"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("limit")
// [Knf] build_knf: Var("limit")
// [Knf] build_knf: Let(("iter", Int), Int(300), Let(("c_re", Double), Neg(Double(0.123), kind=Some(Double)), Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))))))))
// [Knf] build_knf: Int(300)
// [Knf] build_knf: Let(("c_re", Double), Neg(Double(0.123), kind=Some(Double)), Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))))))))
// [Knf] build_knf: Neg(Double(0.123), kind=Some(Double))
// [Knf] build_knf: Double(0.123)
// [Knf] build_knf: Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))))))
// [Knf] build_knf: Double(0.745)
// [Knf] build_knf: LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))))))
// [Knf] build_knf: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))
// [Knf] build_knf: Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))]))))))
// [Knf] build_knf: Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))
// [Knf] build_knf: Var("it")
// [Knf] build_knf: Var("iter")
// [Knf] build_knf: Var("iter")
// [Knf] build_knf: If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: Var("limit_sq")
// [Knf] build_knf: Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))
// [Knf] build_knf: Var("zr2")
// [Knf] build_knf: Var("zi2")
// [Knf] build_knf: Var("it")
// [Knf] build_knf: Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double))
// [Knf] build_knf: Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double))
// [Knf] build_knf: Prim(Double(2), Var("zr"), Mul, kind=Some(Double))
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: Var("c_im")
// [Knf] build_knf: Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double))
// [Knf] build_knf: Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double))
// [Knf] build_knf: Var("zr2")
// [Knf] build_knf: Var("zi2")
// [Knf] build_knf: Var("c_re")
// [Knf] build_knf: App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("calc_pixel")
// [Knf] build_knf: Var("new_zr")
// [Knf] build_knf: Var("new_zi")
// [Knf] build_knf: Prim(Var("it"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("it")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))))
// [Knf] build_knf: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: If(LE(Int(48), Var("i")), Int(48), Var("i"))
// [Knf] build_knf: Int(48)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(48)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))))
// [Knf] build_knf: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])
// [Knf] build_knf: Var("main_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Var("y"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))
// [Knf] build_knf: Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double))
// [Knf] build_knf: Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double))
// [Knf] build_knf: Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double))
// [Knf] build_knf: Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double))
// [Knf] build_knf: Double(3)
// [Knf] build_knf: App(Var("float_of_int"), [Var("x")])
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("float_of_int"), [Var("w")])
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Double(1.5)
// [Knf] build_knf: Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))
// [Knf] build_knf: Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double))
// [Knf] build_knf: Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double))
// [Knf] build_knf: Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double))
// [Knf] build_knf: Double(3)
// [Knf] build_knf: App(Var("float_of_int"), [Var("y")])
// [Knf] build_knf: Var("y")
// [Knf] build_knf: App(Var("float_of_int"), [Var("h")])
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Double(1.5)
// [Knf] build_knf: Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))
// [Knf] build_knf: App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)])
// [Knf] build_knf: Var("calc_pixel")
// [Knf] build_knf: Var("cr")
// [Knf] build_knf: Var("ci")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))
// [Knf] build_knf: Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")]))
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Var("y"), Var("w"), Mul, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("clamp"), [Var("res")])
// [Knf] build_knf: Var("clamp")
// [Knf] build_knf: Var("res")
// [Knf] build_knf: App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])
// [Knf] build_knf: Var("main_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))
// [Knf] build_knf: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]))
// [Knf] build_knf: App(Var("print_char"), [Int(10)])
// [Knf] build_knf: Int(10)
// [Knf] build_knf: App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])
// [Knf] build_knf: Var("print_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Var("y"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))
// [Knf] build_knf: App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))])
// [Knf] build_knf: Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))
// [Knf] build_knf: Int(48)
// [Knf] build_knf: Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Var("y"), Var("w"), Mul, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])
// [Knf] build_knf: Var("print_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))
// [Knf] build_knf: App(Var("read_int"), [])
// [Knf] build_knf: Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit))))
// [Knf] build_knf: Prim(Var("h"), Int(2), Mul, kind=Some(Int))
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))
// [Knf] build_knf: Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0))
// [Knf] build_knf: Prim(Var("w"), Var("h"), Mul, kind=Some(Int))
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit))
// [Knf] build_knf: App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")])
// [Knf] build_knf: Var("main_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)
// [Knf] build_knf: App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")])
// [Knf] build_knf: Var("print_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Core] b0 control: Panic -> Return(args=[Double(val=2)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%2)])
// [Core] b0 control: Panic -> Return(args=[Int32(val=300)])
// [Core] b0 control: Panic -> Return(args=[Double(val=0.123)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%1)])
// [Core] b0 control: Panic -> Return(args=[Double(val=0.745)])
// [Core] b3 control: Panic -> Jump(target=b5, args=[FnParam(fref=f12, fpref=$f.2)])
// [Core] b4 control: Panic -> Jump(target=b5, args=[Insn(iref=%20)])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%7), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b1 control: Panic -> Jump(target=b6, args=[Insn(iref=%4)])
// [Core] b5 control: Panic -> Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b6 control: Panic -> Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Core] b7 control: Panic -> Jump(target=b9, args=[Insn(iref=%39)])
// [Core] b8 control: Panic -> Jump(target=b9, args=[Insn(iref=%46)])
// [Core] b6 control: Panic -> Branch(cond=Insn(iref=%32), t=b7, t_args=[], f=b8, f_args=[])
// [Core] b5 control: Panic -> Jump(target=b10, args=[Insn(iref=%31)])
// [Core] b9 control: Panic -> Jump(target=b10, args=[BlockParam(bref=b9, bpref=$b.0)])
// [Core] b4 control: Panic -> Branch(cond=Insn(iref=%24), t=b5, t_args=[], f=b6, f_args=[])
// [Core] b3 control: Panic -> Jump(target=b11, args=[Insn(iref=%7)])
// [Core] b10 control: Panic -> Jump(target=b11, args=[BlockParam(bref=b10, bpref=$b.0)])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b1 control: Panic -> Jump(target=b12, args=[Unit])
// [Core] b11 control: Panic -> Jump(target=b12, args=[BlockParam(bref=b11, bpref=$b.0)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b12 control: Panic -> Return(args=[BlockParam(bref=b12, bpref=$b.0)])
// [Core] b3 control: Panic -> Jump(target=b5, args=[Insn(iref=%4)])
// [Core] b4 control: Panic -> Jump(target=b5, args=[Insn(iref=%11)])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b1 control: Panic -> Jump(target=b6, args=[Unit])
// [Core] b5 control: Panic -> Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b6 control: Panic -> Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Core] b0 control: Panic -> Return(args=[Unit])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%4)])
// [Main] beta reduce _54 = res.51
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$iter.3
// [Main]   .type T$iter.3, @function
// [Main] # leaf true
// [Main] T$iter.3:
// [Main] .T$iter.3_0:
// [Main]   li a0, 300
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$c_re.5
// [Main]   .type T$c_re.5, @function
// [Main] # leaf true
// [Main] T$c_re.5:
// [Main] .T$c_re.5_0:
// [Main]   fld fa0, _4, t5
// [Main]   fneg.d fa0, fa0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$limit.1
// [Main]   .type T$limit.1, @function
// [Main] # leaf true
// [Main] T$limit.1:
// [Main] .T$limit.1_0:
// [Main]   li a0, 4611686018427387904
// [Main]   fmv.d.x fa0, a0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.95
// [Main]   .type main.95, @function
// [Main] # leaf false
// [Main] main.95:
// [Main] .main.95_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   fmv.d fa0, fa1
// [Main]   fmv.d fa0, fa2
// [Main]   call minimbt_read_int
// [Main]   mv s0, a0
// [Main]   li a0, 2
// [Main]   mul s1, s0, a0
// [Main]   mul a0, s1, s0
// [Main]   slliw a1, a0, 2
// [Main]   sub s2, s11, a1
// [Main]   andi s11, s2, -8
// [Main]   mv a1, a0
// [Main]   fcvt.d.w fa3, s1
// [Main]   fcvt.d.w fa4, s0
// [Main]   fld fa0, c_im.6, t5
// [Main]   fld fa1, c_re.5, t5
// [Main]   lw a5, iter.3
// [Main]   fld fa2, limit_sq.2, t5
// [Main]   mv a0, s1
// [Main]   mv a1, s0
// [Main]   mv a2, zero
// [Main]   mv a3, zero
// [Main]   mv a4, s2
// [Main]   call main_loop.93
// [Main]   mv a0, s1
// [Main]   mv a1, s0
// [Main]   mv a2, zero
// [Main]   mv a3, zero
// [Main]   mv a4, s2
// [Main]   call print_loop.94
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_4
// [Main]   .type T$_4, @function
// [Main] # leaf true
// [Main] T$_4:
// [Main] .T$_4_0:
// [Main]   li a0, 4593527504729830064
// [Main]   fmv.d.x fa0, a0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl calc_pixel.92
// [Main]   .type calc_pixel.92, @function
// [Main] # leaf true
// [Main] calc_pixel.92:
// [Main] .calc_pixel.92_8:
// [Main]   mv a2, a0
// [Main]   fmv.d fa5, fa2
// [Main]   fmv.d fa2, fa3
// [Main]   mv a0, a1
// [Main]   fmv.d fa3, fa4
// [Main]   mv a1, a2
// [Main]   fmv.d fa4, fa5
// [Main] 
// [Main] .calc_pixel.92_0:
// [Main]   fmul.d fa2, fa0, fa0
// [Main]   fmul.d fa3, fa1, fa1
// [Main]   lw a0, iter.3
// [Main]   beq a1, a0, .calc_pixel.92_1
// [Main] 
// [Main] .calc_pixel.92_2:
// [Main]   fadd.d fa4, fa2, fa3
// [Main]   fld fa5, limit_sq.2, t5
// [Main]   fle.d a0, fa5, fa4
// [Main]   bne a0, zero, .calc_pixel.92_3
// [Main] 
// [Main] .calc_pixel.92_4:
// [Main]   li a0, 4611686018427387904
// [Main]   fmv.d.x fa4, a0
// [Main]   fmul.d fa0, fa4, fa0
// [Main]   fld fa4, c_im.6, t5
// [Main]   fmadd.d fa1, fa0, fa1, fa4
// [Main]   fsub.d fa0, fa2, fa3
// [Main]   fld fa2, c_re.5, t5
// [Main]   fadd.d fa0, fa0, fa2
// [Main]   addi a1, a1, 1
// [Main]   lw a0, iter.3
// [Main]   fld fa3, limit_sq.2, t5
// [Main]   j .calc_pixel.92_0
// [Main] 
// [Main] .calc_pixel.92_1:
// [Main]   lw a0, iter.3
// [Main] 
// [Main] .calc_pixel.92_6:
// [Main]   ret
// [Main] 
// [Main] .calc_pixel.92_3:
// [Main]   mv a0, a1
// [Main] 
// [Main] .calc_pixel.92_5:
// [Main]   j .calc_pixel.92_6
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$c_im.6
// [Main]   .type T$c_im.6, @function
// [Main] # leaf true
// [Main] T$c_im.6:
// [Main] .T$c_im.6_0:
// [Main]   li a0, 4604885582990058455
// [Main]   fmv.d.x fa0, a0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$limit_sq.2
// [Main]   .type T$limit_sq.2, @function
// [Main] # leaf true
// [Main] T$limit_sq.2:
// [Main] .T$limit_sq.2_0:
// [Main]   fld fa0, limit.1, t5
// [Main]   fmul.d fa0, fa0, fa0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   fld fa0, c_im.6, t5
// [Main]   fld fa1, c_re.5, t5
// [Main]   lw a0, iter.3
// [Main]   fld fa2, limit_sq.2, t5
// [Main]   call main.95
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main_loop.93
// [Main]   .type main_loop.93, @function
// [Main] # leaf false
// [Main] main_loop.93:
// [Main] .main_loop.93_14:
// [Main]   addi sp, sp, -64
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   fsd fs0, 48(sp)
// [Main]   fsd fs1, 56(sp)
// [Main]   fmv.d fa5, fa3
// [Main]   fmv.d fa3, fa4
// [Main]   mv s2, a0
// [Main]   mv s1, a1
// [Main]   mv s4, a2
// [Main]   mv s0, a3
// [Main]   mv s3, a4
// [Main]   mv a0, a5
// [Main]   fmv.d fs0, fa5
// [Main]   fmv.d fs1, fa3
// [Main] 
// [Main] .main_loop.93_0:
// [Main]   beq s0, s1, .main_loop.93_1
// [Main] 
// [Main] .main_loop.93_2:
// [Main]   beq s4, s2, .main_loop.93_3
// [Main] 
// [Main] .main_loop.93_4:
// [Main]   fcvt.d.w fa0, s4
// [Main]   li a0, 4613937818241073152
// [Main]   fmv.d.x fa1, a0
// [Main]   fmul.d fa0, fa1, fa0
// [Main]   fdiv.d fa0, fa0, fs0
// [Main]   li a0, 4609434218613702656
// [Main]   fmv.d.x fa1, a0
// [Main]   fsub.d fa0, fa0, fa1
// [Main]   fneg.d fa0, fa0
// [Main]   fcvt.d.w fa1, s0
// [Main]   li a0, 4613937818241073152
// [Main]   fmv.d.x fa2, a0
// [Main]   fmul.d fa1, fa2, fa1
// [Main]   fdiv.d fa1, fa1, fs1
// [Main]   li a0, 4609434218613702656
// [Main]   fmv.d.x fa2, a0
// [Main]   fsub.d fa1, fa1, fa2
// [Main]   fld fa2, c_im.6, t5
// [Main]   fld fa3, c_re.5, t5
// [Main]   lw a1, iter.3
// [Main]   fld fa4, limit_sq.2, t5
// [Main]   mv a0, zero
// [Main]   call calc_pixel.92
// [Main]   mv a1, a0
// [Main]   mul a0, s0, s2
// [Main]   add a2, a0, s4
// [Main]   bge zero, a1, .main_loop.93_5
// [Main] 
// [Main] .main_loop.93_6:
// [Main]   li a0, 48
// [Main]   blt a1, a0, .main_loop.93_8
// [Main] 
// [Main] .main_loop.93_7:
// [Main]   li a0, 48
// [Main]   slliw a1, a2, 2
// [Main]   add a1, s3, a1
// [Main]   sw a0, 0(a1)
// [Main]   addi a1, s4, 1
// [Main]   fld fa0, c_im.6, t5
// [Main]   fld fa1, c_re.5, t5
// [Main]   lw a0, iter.3
// [Main]   fld fa2, limit_sq.2, t5
// [Main]   mv s4, a1
// [Main]   j .main_loop.93_0
// [Main] 
// [Main] .main_loop.93_1:
// [Main]   mv a0, zero
// [Main] 
// [Main] .main_loop.93_12:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   fld fs0, 48(sp)
// [Main]   fld fs1, 56(sp)
// [Main]   addi sp, sp, 64
// [Main]   ret
// [Main] 
// [Main] .main_loop.93_3:
// [Main]   addi a1, s0, 1
// [Main]   fld fa0, c_im.6, t5
// [Main]   fld fa1, c_re.5, t5
// [Main]   lw a0, iter.3
// [Main]   fld fa2, limit_sq.2, t5
// [Main]   mv s4, zero
// [Main]   mv s0, a1
// [Main]   j .main_loop.93_0
// [Main] 
// [Main] .main_loop.93_5:
// [Main]   slliw a0, a2, 2
// [Main]   add a0, s3, a0
// [Main]   sw zero, 0(a0)
// [Main]   addi a1, s4, 1
// [Main]   fld fa0, c_im.6, t5
// [Main]   fld fa1, c_re.5, t5
// [Main]   lw a0, iter.3
// [Main]   fld fa2, limit_sq.2, t5
// [Main]   mv s4, a1
// [Main]   j .main_loop.93_0
// [Main] 
// [Main] .main_loop.93_8:
// [Main]   slliw a0, a2, 2
// [Main]   add a0, s3, a0
// [Main]   sw a1, 0(a0)
// [Main]   addi a1, s4, 1
// [Main]   fld fa0, c_im.6, t5
// [Main]   fld fa1, c_re.5, t5
// [Main]   lw a0, iter.3
// [Main]   fld fa2, limit_sq.2, t5
// [Main]   mv s4, a1
// [Main]   j .main_loop.93_0
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl print_loop.94
// [Main]   .type print_loop.94, @function
// [Main] # leaf false
// [Main] print_loop.94:
// [Main] .print_loop.94_8:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   mv s2, a2
// [Main]   mv s3, a3
// [Main]   mv s4, a4
// [Main] 
// [Main] .print_loop.94_0:
// [Main]   beq s3, s1, .print_loop.94_1
// [Main] 
// [Main] .print_loop.94_2:
// [Main]   beq s2, s0, .print_loop.94_3
// [Main] 
// [Main] .print_loop.94_4:
// [Main]   mul a0, s3, s0
// [Main]   add a0, a0, s2
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s4, a0
// [Main]   lw a0, 0(a0)
// [Main]   addi a0, a0, 48
// [Main]   call minimbt_print_char
// [Main]   addi a0, s2, 1
// [Main]   mv s2, a0
// [Main]   j .print_loop.94_0
// [Main] 
// [Main] .print_loop.94_1:
// [Main]   mv a0, zero
// [Main] 
// [Main] .print_loop.94_6:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main] .print_loop.94_3:
// [Main]   li a0, 10
// [Main]   call minimbt_print_char
// [Main]   addi a0, s3, 1
// [Main]   mv s2, zero
// [Main]   mv s3, a0
// [Main]   j .print_loop.94_0
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$limit.1
// [Main]   la t5, limit.1
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$limit_sq.2
// [Main]   la t5, limit_sq.2
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$iter.3
// [Main]   la t5, iter.3
// [Main]   sw a0, 0(t5)
// [Main]   call T$_4
// [Main]   la t5, _4
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$c_re.5
// [Main]   la t5, c_re.5
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$c_im.6
// [Main]   la t5, c_im.6
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl iter.3
// [Main]   .type iter.3, @object
// [Main] iter.3:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl c_im.6
// [Main]   .type c_im.6, @object
// [Main] c_im.6:
// [Main]   .zero 8
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _4
// [Main]   .type _4, @object
// [Main] _4:
// [Main]   .zero 8
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl limit_sq.2
// [Main]   .type limit_sq.2, @object
// [Main] limit_sq.2:
// [Main]   .zero 8
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl limit.1
// [Main]   .type limit.1, @object
// [Main] limit.1:
// [Main]   .zero 8
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl c_re.5
// [Main]   .type c_re.5, @object
// [Main] c_re.5:
// [Main]   .zero 8
// [Main] 
// [Wasm] Lowering function T$_4
// [Wasm] Lowering control Return(args=[Double(val=0.123)])
// [Wasm] Lowered function T$_4 to wasm
// [Wasm] Lowering function calc_pixel.92
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b6, args=[Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=2), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%8), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::5)
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%9), Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::4)
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%12), Insn(iref=%13)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::1)
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%14), Insn(iref=%11), Insn(iref=%15), Insn(iref=%10), Insn(iref=%13), Insn(iref=%18), Insn(iref=%19)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::1)
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%6), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Branch(cond=Insn(iref=%7), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.2), Insn(iref=%2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b7, args=[FnParam(fref=f12, fpref=$f.0), FnParam(fref=f12, fpref=$f.1), FnParam(fref=f12, fpref=$f.2), FnParam(fref=f12, fpref=$f.3), FnParam(fref=f12, fpref=$f.4), FnParam(fref=f12, fpref=$f.5), FnParam(fref=f12, fpref=$f.6)])
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.6) -> $$f.6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.6) -> $$f.6
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function calc_pixel.92 to wasm
// [Wasm] Lowering function T$iter.3
// [Wasm] Lowering control Return(args=[Int32(val=300)])
// [Wasm] Lowered function T$iter.3 to wasm
// [Wasm] Lowering function T$c_re.5
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::3)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Double, op=Neg, args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Return(args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function T$c_re.5 to wasm
// [Wasm] Lowering function T$limit.1
// [Wasm] Lowering control Return(args=[Double(val=2)])
// [Wasm] Lowered function T$limit.1 to wasm
// [Wasm] Lowering function main_loop.93
// [Wasm] Lowering control Return(args=[BlockParam(bref=b12, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b12, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.3), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::5)
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::4)
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::1)
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Int32(val=0), Insn(iref=%2), BlockParam(bref=b0, bpref=$b.4), Insn(iref=%3), Insn(iref=%4), Insn(iref=%5), Insn(iref=%6), BlockParam(bref=b0, bpref=$b.9), BlockParam(bref=b0, bpref=$b.10)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.7) -> $b0.$b.7
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.8) -> $b0.$b.8
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.9) -> $b0.$b.9
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.9) -> $b0.$b.9
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.10) -> $b0.$b.10
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.10) -> $b0.$b.10
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), offset=Insn(iref=%23), width=@32), val=Int32(val=0))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::5)
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::4)
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::1)
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%26), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), Insn(iref=%27), Insn(iref=%28), Insn(iref=%29), Insn(iref=%30), BlockParam(bref=b0, bpref=$b.9), BlockParam(bref=b0, bpref=$b.10)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.7) -> $b0.$b.7
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.8) -> $b0.$b.8
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.9) -> $b0.$b.9
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.9) -> $b0.$b.9
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.10) -> $b0.$b.10
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.10) -> $b0.$b.10
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), offset=Insn(iref=%23), width=@32), val=Int32(val=48))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::5)
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::4)
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::1)
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%34), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), Insn(iref=%35), Insn(iref=%36), Insn(iref=%37), Insn(iref=%38), BlockParam(bref=b0, bpref=$b.9), BlockParam(bref=b0, bpref=$b.10)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.7) -> $b0.$b.7
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.8) -> $b0.$b.8
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.9) -> $b0.$b.9
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.9) -> $b0.$b.9
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.10) -> $b0.$b.10
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.10) -> $b0.$b.10
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), offset=Insn(iref=%23), width=@32), val=Insn(iref=%21))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::5)
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::4)
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%44) -> $%44
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::1)
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%41), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), Insn(iref=%42), Insn(iref=%43), Insn(iref=%44), Insn(iref=%45), BlockParam(bref=b0, bpref=$b.9), BlockParam(bref=b0, bpref=$b.10)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name Insn(iref=%44) -> $%44
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.7) -> $b0.$b.7
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.8) -> $b0.$b.8
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.9) -> $b0.$b.9
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.9) -> $b0.$b.9
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.10) -> $b0.$b.10
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.10) -> $b0.$b.10
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=48), Insn(iref=%21)])
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering control Branch(cond=Insn(iref=%32), t=b7, t_args=[], f=b8, f_args=[])
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=3), Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Double, op=Div, args=[Insn(iref=%9), BlockParam(bref=b0, bpref=$b.9)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.9) -> $b0.$b.9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Insn(iref=%10), Double(val=1.5)])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Double, op=Neg, args=[Insn(iref=%11)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[BlockParam(bref=b0, bpref=$b.3)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=3), Insn(iref=%13)])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Op(ty=Double, op=Div, args=[Insn(iref=%14), BlockParam(bref=b0, bpref=$b.10)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.10) -> $b0.$b.10
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Insn(iref=%15), Double(val=1.5)])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::5)
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::4)
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::1)
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Call(ty=Int32, f=f12, args=[Insn(iref=%12), Insn(iref=%16), Int32(val=0), Insn(iref=%17), Insn(iref=%18), Insn(iref=%19), Insn(iref=%20)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%22), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%21), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering control Branch(cond=Insn(iref=%24), t=b5, t_args=[], f=b6, f_args=[])
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b13, args=[FnParam(fref=f13, fpref=$f.0), FnParam(fref=f13, fpref=$f.1), FnParam(fref=f13, fpref=$f.2), FnParam(fref=f13, fpref=$f.3), FnParam(fref=f13, fpref=$f.4), FnParam(fref=f13, fpref=$f.5), FnParam(fref=f13, fpref=$f.6), FnParam(fref=f13, fpref=$f.7), FnParam(fref=f13, fpref=$f.8), FnParam(fref=f13, fpref=$f.9), FnParam(fref=f13, fpref=$f.10)])
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.6) -> $$f.6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.7) -> $$f.7
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.7) -> $b0.$b.7
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.8) -> $$f.8
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.8) -> $b0.$b.8
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.9) -> $$f.9
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.9) -> $b0.$b.9
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.10) -> $$f.10
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.10) -> $b0.$b.10
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.6) -> $$f.6
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.7) -> $$f.7
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.8) -> $$f.8
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.9) -> $$f.9
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.10) -> $$f.10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.7) -> $b0.$b.7
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local Insn(iref=%41) -> $%41
// [Wasm] Local BlockParam(bref=b0, bpref=$b.10) -> $b0.$b.10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.9) -> $b0.$b.9
// [Wasm] Local BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local Insn(iref=%27) -> $%27
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%42) -> $%42
// [Wasm] Local Insn(iref=%44) -> $%44
// [Wasm] Local Insn(iref=%32) -> $%32
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.8) -> $b0.$b.8
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%35) -> $%35
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local Insn(iref=%38) -> $%38
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%24) -> $%24
// [Wasm] Local Insn(iref=%37) -> $%37
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local Insn(iref=%45) -> $%45
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%29) -> $%29
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Insn(iref=%43) -> $%43
// [Wasm] Local Insn(iref=%30) -> $%30
// [Wasm] Local Insn(iref=%34) -> $%34
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local Insn(iref=%36) -> $%36
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function main_loop.93 to wasm
// [Wasm] Lowering function main.95
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_int", args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%0), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%1), Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Zero])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Mem(fref=f15, mref=m0) -> $f15.m0
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::5)
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::4)
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::1)
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Call(ty=Unit, f=f13, args=[Insn(iref=%1), Insn(iref=%0), Int32(val=0), Int32(val=0), Mem(fref=f15, mref=m0), Insn(iref=%6), Insn(iref=%7), Insn(iref=%8), Insn(iref=%9), Insn(iref=%4), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Mem(fref=f15, mref=m0) -> $f15.m0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Call(ty=Unit, f=f14, args=[Insn(iref=%1), Insn(iref=%0), Int32(val=0), Int32(val=0), Mem(fref=f15, mref=m0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Mem(fref=f15, mref=m0) -> $f15.m0
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Get Local name FnParam(fref=f15, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f15, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f15, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f15, fpref=$f.3) -> $$f.3
// [Wasm] Local Mem(fref=f15, mref=m0) -> $f15.m0
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function main.95 to wasm
// [Wasm] Lowering function T$c_im.6
// [Wasm] Lowering control Return(args=[Double(val=0.745)])
// [Wasm] Lowered function T$c_im.6 to wasm
// [Wasm] Lowering function T$limit_sq.2
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::0)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%0), Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function T$limit_sq.2 to wasm
// [Wasm] Lowering function print_loop.94
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b6, args=[Unit])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Int32(val=10)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.3), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Int32(val=0), Insn(iref=%3), BlockParam(bref=b0, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%5), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), offset=Insn(iref=%6), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Int32(val=48), Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%10), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b7, args=[FnParam(fref=f14, fpref=$f.0), FnParam(fref=f14, fpref=$f.1), FnParam(fref=f14, fpref=$f.2), FnParam(fref=f14, fpref=$f.3), FnParam(fref=f14, fpref=$f.4)])
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.4) -> $$f.4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function print_loop.94 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::5)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::4)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::1)
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Call(ty=Unit, f=f15, args=[Insn(iref=%0), Insn(iref=%1), Insn(iref=%2), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Return(args=[Insn(iref=%4)])
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function T$start to wasm
// [KnfOpt] func_tre: calc_pixel.7 true
// [KnfOpt] func_tre: clamp.22 false
// [KnfOpt] func_tre: main_loop.26 true
// [KnfOpt] func_tre: print_loop.58 true
// [KnfOpt] func_tre: main.77 false
// [KnfOpt] freq: {calc_pixel.7: Many(2), clamp.22: Once, main_loop.26: Many(3), print_loop.58: Many(3), main.77: Once}
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision calc_pixel.7 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision calc_pixel.7 rejected
// [KnfOpt] Inline threshold 9
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision clamp.22 accepted
// [KnfOpt] Knf inline Some(clamp) let _54: Int = Unit
// [KnfOpt] let _55: Unit = Put ret.31[_53] = _54
// [KnfOpt] let _56: Int = Int(1)
// [KnfOpt] let _57: Int = Add(x.29, _56)
// [KnfOpt] Apply(main_loop.26, [w.27, h.28, _57, y.30, ret.31, ])
// [KnfOpt] Inline threshold 31
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision print_loop.58 rejected
// [KnfOpt] Inline threshold 31
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision print_loop.58 rejected
// [KnfOpt] Inline threshold 31
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision print_loop.58 rejected
// [KnfOpt] Numbers of let rec: 4 4 0
// [KnfOpt] hoist: _38
// [KnfOpt] hoist: _46
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %20: Call(ty=Int32, f=f12, args=[Insn(iref=%14), Insn(iref=%11), Insn(iref=%15), Insn(iref=%16), Insn(iref=%17), Insn(iref=%18), Insn(iref=%19)])
// [CoreOpt] eliminated tail rec call %7: Call(ty=Unit, f=f13, args=[FnParam(fref=f13, fpref=$f.0), FnParam(fref=f13, fpref=$f.1), Int32(val=0), Insn(iref=%2), FnParam(fref=f13, fpref=$f.4), Insn(iref=%3), Insn(iref=%4), Insn(iref=%5), Insn(iref=%6), FnParam(fref=f13, fpref=$f.9), FnParam(fref=f13, fpref=$f.10)])
// [CoreOpt] eliminated tail rec call %31: Call(ty=Unit, f=f13, args=[FnParam(fref=f13, fpref=$f.0), FnParam(fref=f13, fpref=$f.1), Insn(iref=%26), FnParam(fref=f13, fpref=$f.3), FnParam(fref=f13, fpref=$f.4), Insn(iref=%27), Insn(iref=%28), Insn(iref=%29), Insn(iref=%30), FnParam(fref=f13, fpref=$f.9), FnParam(fref=f13, fpref=$f.10)])
// [CoreOpt] eliminated tail rec call %46: Call(ty=Unit, f=f13, args=[FnParam(fref=f13, fpref=$f.0), FnParam(fref=f13, fpref=$f.1), Insn(iref=%41), FnParam(fref=f13, fpref=$f.3), FnParam(fref=f13, fpref=$f.4), Insn(iref=%42), Insn(iref=%43), Insn(iref=%44), Insn(iref=%45), FnParam(fref=f13, fpref=$f.9), FnParam(fref=f13, fpref=$f.10)])
// [CoreOpt] eliminated tail rec call %39: Call(ty=Unit, f=f13, args=[FnParam(fref=f13, fpref=$f.0), FnParam(fref=f13, fpref=$f.1), Insn(iref=%34), FnParam(fref=f13, fpref=$f.3), FnParam(fref=f13, fpref=$f.4), Insn(iref=%35), Insn(iref=%36), Insn(iref=%37), Insn(iref=%38), FnParam(fref=f13, fpref=$f.9), FnParam(fref=f13, fpref=$f.10)])
// [CoreOpt] eliminated tail rec call %11: Call(ty=Unit, f=f14, args=[FnParam(fref=f14, fpref=$f.0), FnParam(fref=f14, fpref=$f.1), Insn(iref=%10), FnParam(fref=f14, fpref=$f.3), FnParam(fref=f14, fpref=$f.4)])
// [CoreOpt] eliminated tail rec call %4: Call(ty=Unit, f=f14, args=[FnParam(fref=f14, fpref=$f.0), FnParam(fref=f14, fpref=$f.1), Int32(val=0), Insn(iref=%3), FnParam(fref=f14, fpref=$f.4)])
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f12: Once, f4: Once, f8: Once, f0: Once, f13: Once, f15: Once, f10: Once, f2: Once, f14: Once, f20: Once})
// [CoreOpt] LVN subst Insn(iref=%16) with Insn(iref=%10)
// [CoreOpt] LVN subst Insn(iref=%17) with Insn(iref=%13)
// [CoreOpt] LVN subst Insn(iref=%1) with Insn(iref=%0)
