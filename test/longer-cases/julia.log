// [Asm] pre_assigned_registers: Self(fref=f6) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$_4_6"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   comment = "0:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$_4_6"];
// [Asm]   r0 [label="fv3 ← fa0", color=green];
// [Asm]   r1 [label="fa0", color=blue];
// [Asm]   comment = "0:fv3-> 1:fa0"
// [Asm]   comment = "fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 4593527504729830064 ->   li a0, 4593527504729830064
// [Asm] subst   fmv.d.x fv3, v2 ->   fmv.d.x fa0, a0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v30, FnParam(fref=f12, fpref=$f.5) -> v7, FnParam(fref=f12, fpref=$f.2) -> v4, BlockParam(bref=b0, bpref=$b.5) -> v14, Insn(iref=%8) -> fv23, Insn(iref=%10) -> fv25, BlockParam(bref=b0, bpref=$b.4) -> fv13, FnParam(fref=f12, fpref=$f.6) -> fv8, BlockParam(bref=b0, bpref=$b.3) -> fv12, Insn(iref=%14) -> fv29, Insn(iref=%4) -> v34, FnParam(fref=f12, fpref=$f.3) -> fv5, FnParam(fref=f12, fpref=$f.0) -> fv2, FnParam(fref=f12, fpref=$f.4) -> fv6, BlockParam(bref=b6, bpref=$b.0) -> v35, Insn(iref=%1) -> fv17, Insn(iref=%11) -> fv26, BlockParam(bref=b0, bpref=$b.6) -> fv15, Insn(iref=%6) -> fv21, Insn(iref=%9) -> fv24, Self(fref=f12) -> v0, BlockParam(bref=b0, bpref=$b.0) -> fv9, BlockParam(bref=b0, bpref=$b.1) -> fv10, BlockParam(bref=b0, bpref=$b.2) -> v11, Insn(iref=%5) -> fv20, Insn(iref=%0) -> fv16, Insn(iref=%19) -> fv32, FnParam(fref=f12, fpref=$f.1) -> fv3, Insn(iref=%3) -> v19, Insn(iref=%18) -> v31, Insn(iref=%13) -> fv28, Insn(iref=%7) -> v22, BlockParam(bref=b5, bpref=$b.0) -> v33, Insn(iref=%2) -> v18, Insn(iref=%12) -> fv27
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%8), BlockParam(bref=b0, bpref=$b.1)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.2), Insn(iref=%2)])
// [Asm] defs: [v33]
// [Asm] live_set: [v33]
// [Asm] move_origin: [v11]
// [Asm] defined: v33 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v35]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v35]
// [Asm] live_set: [v35]
// [Asm] move_origin: [v33]
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [v35]
// [Asm] move_origin: []
// [Asm] defs: [fv16]
// [Asm] live_set: [v11, fv9, fv10, zero, fv16]
// [Asm] move_origin: []
// [Asm] defined: fv16 is F
// [Asm] defs: [fv17]
// [Asm] live_set: [v11, fv9, fv10, zero, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv17 is F
// [Asm] defs: [v18]
// [Asm] live_set: [v11, fv9, fv10, v18, zero, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v11, fv9, fv10, fv16, zero, fv17]
// [Asm] move_origin: []
// [Asm] defs: [v34]
// [Asm] live_set: [v34]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v35]
// [Asm] move_origin: [v34]
// [Asm] defined: v35 is X
// [Asm] defs: [fv20]
// [Asm] live_set: [v11, fv9, fv10, zero, fv20, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv20 is F
// [Asm] defs: [fv21]
// [Asm] live_set: [v11, fv9, fv10, zero, fv20, fv16, fv17, fv21]
// [Asm] move_origin: []
// [Asm] defined: fv21 is F
// [Asm] defs: [v22]
// [Asm] live_set: [v11, fv9, fv10, zero, v22, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v11, fv9, fv10, fv16, zero, fv17]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [fa3, fa2, fa4, zero, a0, fa0, a1, fa1]
// [Asm] move_origin: []
// [Asm] defs: [fv2]
// [Asm] live_set: [fv2, fa3, fa2, fa4, zero, a0, a1, fa1]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fv2, fa3, fa2, fa4, zero, a0, a1, fv3]
// [Asm] move_origin: [fa1]
// [Asm] defined: fv3 is F
// [Asm] defs: [v4]
// [Asm] live_set: [fv2, fa3, fa2, fa4, zero, v4, a1, fv3]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: [fv5]
// [Asm] live_set: [fv5, fv2, fa3, zero, fa4, v4, a1, fv3]
// [Asm] move_origin: [fa2]
// [Asm] defined: fv5 is F
// [Asm] defs: [fv6]
// [Asm] live_set: [fv5, fv2, zero, fa4, v4, a1, fv6, fv3]
// [Asm] move_origin: [fa3]
// [Asm] defined: fv6 is F
// [Asm] defs: [v7]
// [Asm] live_set: [fv5, fv2, zero, fa4, v7, v4, fv6, fv3]
// [Asm] move_origin: [a1]
// [Asm] defined: v7 is X
// [Asm] defs: [fv8]
// [Asm] live_set: [fv5, fv2, zero, fv8, v7, v4, fv6, fv3]
// [Asm] move_origin: [fa4]
// [Asm] defined: fv8 is F
// [Asm] defs: [fv9]
// [Asm] live_set: [fv9, fv5, zero, fv8, v7, v4, fv6, fv3]
// [Asm] move_origin: [fv2]
// [Asm] defined: fv9 is F
// [Asm] defs: [fv10]
// [Asm] live_set: [fv9, fv5, fv10, zero, fv8, v7, v4, fv6]
// [Asm] move_origin: [fv3]
// [Asm] defined: fv10 is F
// [Asm] defs: [v11]
// [Asm] live_set: [fv9, v11, fv5, fv10, zero, fv8, v7, fv6]
// [Asm] move_origin: [v4]
// [Asm] defined: v11 is X
// [Asm] defs: [fv12]
// [Asm] live_set: [fv9, v11, fv10, zero, fv8, v7, fv12, fv6]
// [Asm] move_origin: [fv5]
// [Asm] defined: fv12 is F
// [Asm] defs: [fv13]
// [Asm] live_set: [fv9, v11, fv10, zero, fv13, fv8, v7, fv12]
// [Asm] move_origin: [fv6]
// [Asm] defined: fv13 is F
// [Asm] defs: [v14]
// [Asm] live_set: [fv9, v11, fv10, v14, zero, fv13, fv8, fv12]
// [Asm] move_origin: [v7]
// [Asm] defined: v14 is X
// [Asm] defs: [fv15]
// [Asm] live_set: [fv9, v11, fv10, v14, zero, fv13, fv12, fv15]
// [Asm] move_origin: [fv8]
// [Asm] defined: fv15 is F
// [Asm] defs: [v45]
// [Asm] live_set: [v11, fv9, fv10, zero, v45, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defined: v45 is X
// [Asm] defs: [fv46]
// [Asm] live_set: [v11, fv9, fv46, fv10, zero, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv46 is F
// [Asm] defs: [fv23]
// [Asm] live_set: [v11, fv23, fv10, zero, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv23 is F
// [Asm] defs: [fv25]
// [Asm] live_set: [v11, fv23, fv10, zero, fv25, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv25 is F
// [Asm] defs: [fv26]
// [Asm] live_set: [v11, zero, fv25, fv16, fv26, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv26 is F
// [Asm] defs: [fv27]
// [Asm] live_set: [v11, zero, fv25, fv27, fv26]
// [Asm] move_origin: []
// [Asm] defined: fv27 is F
// [Asm] defs: [fv28]
// [Asm] live_set: [v11, fv28, zero, fv25, fv27, fv26]
// [Asm] move_origin: []
// [Asm] defined: fv28 is F
// [Asm] defs: [fv29]
// [Asm] live_set: [v11, fv28, zero, fv25, fv29, fv26]
// [Asm] move_origin: []
// [Asm] defined: fv29 is F
// [Asm] defs: [v30]
// [Asm] live_set: [fv28, zero, fv25, v30, fv29, fv26]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: [v31]
// [Asm] live_set: [fv28, zero, fv25, v30, fv29, v31, fv26]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: [fv32]
// [Asm] live_set: [fv28, fv32, zero, fv25, v30, fv29, v31, fv26]
// [Asm] move_origin: []
// [Asm] defined: fv32 is F
// [Asm] defs: [fv9]
// [Asm] live_set: [fv9, fv28, fv32, zero, fv25, v30, v31, fv26]
// [Asm] move_origin: [fv29]
// [Asm] defined: fv9 is F
// [Asm] defs: [fv10]
// [Asm] live_set: [fv9, fv10, fv28, fv32, zero, fv25, v30, v31]
// [Asm] move_origin: [fv26]
// [Asm] defined: fv10 is F
// [Asm] defs: [v11]
// [Asm] live_set: [fv9, v11, fv10, fv28, fv32, zero, fv25, v31]
// [Asm] move_origin: [v30]
// [Asm] defined: v11 is X
// [Asm] defs: [fv12]
// [Asm] live_set: [fv9, v11, fv10, fv28, fv32, zero, fv12, v31]
// [Asm] move_origin: [fv25]
// [Asm] defined: fv12 is F
// [Asm] defs: [fv13]
// [Asm] live_set: [fv9, v11, fv10, fv32, zero, fv13, fv12, v31]
// [Asm] move_origin: [fv28]
// [Asm] defined: fv13 is F
// [Asm] defs: [v14]
// [Asm] live_set: [fv9, v11, fv10, v14, fv32, zero, fv13, fv12]
// [Asm] move_origin: [v31]
// [Asm] defined: v14 is X
// [Asm] defs: [fv15]
// [Asm] live_set: [fv9, v11, fv10, v14, zero, fv13, fv12, fv15]
// [Asm] move_origin: [fv32]
// [Asm] defined: fv15 is F
// [Asm] defs: []
// [Asm] live_set: [fv9, v11, fv10, v14, zero, fv13, fv12, fv15]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of calc_pixel7l0_12"];
// [Asm]   r8 [label="a1", color=blue];
// [Asm]   r0 [label="v33 ← a0", color=green];
// [Asm]   r5 [label="v18 ← a1", color=green];
// [Asm]   r3 [label="v11 ← a0", color=green];
// [Asm]   r2 [label="v35 ← a0", color=green];
// [Asm]   r9 [label="v4 ← a0", color=green];
// [Asm]   r6 [label="v34 ← a0", color=green];
// [Asm]   r13 [label="v30 ← a0", color=green];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="v14 ← a1", color=green];
// [Asm]   r7 [label="v22 ← a1", color=green];
// [Asm]   r10 [label="v7 ← a1", color=green];
// [Asm]   r12 [label="v45 ← a1", color=green];
// [Asm]   r14 [label="v31 ← a1", color=green];
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r14;
// [Asm]   r4 -- r7;
// [Asm]   r3 -- r11;
// [Asm]   r4 -- r11;
// [Asm]   r9 -- r10;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r7;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r14;
// [Asm]   r3 -- r5;
// [Asm]   r13 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r8 -- r9;
// [Asm]   r3 -- r10;
// [Asm]   r3 -- r12;
// [Asm]   r4 -- r12;
// [Asm]   comment = "0:v33-> 1:a0-> 2:v35-> 3:v11-> 4:zero-> 5:v18-> 7:v22-> 10:v7-> 9:v4-> 11:v14-> 12:v45-> 14:v31-> 13:v30-> 8:a1-> 6:v34"
// [Asm]   comment = "v33<-a0;v18<-a1;v11<-a0;v35<-a0;v4<-a0;v34<-a0;v30<-a0;v14<-a1;v22<-a1;v7<-a1;v45<-a1;v31<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of calc_pixel7l0_12"];
// [Asm]   r0 [label="fv16 ← fa0", color=green];
// [Asm]   r20 [label="fv25 ← fa4", color=green];
// [Asm]   r23 [label="fv28 ← fa0", color=green];
// [Asm]   r3 [label="fv17 ← fa3", color=green];
// [Asm]   r9 [label="fa4", color=blue];
// [Asm]   r6 [label="fv2 ← fa7", color=green];
// [Asm]   r13 [label="fv6 ← fa0", color=green];
// [Asm]   r4 [label="fv20 ← fa4", color=green];
// [Asm]   r1 [label="fv9 ← fa1", color=green];
// [Asm]   r11 [label="fv3 ← fa6", color=green];
// [Asm]   r7 [label="fa3", color=blue];
// [Asm]   r10 [label="fa1", color=blue];
// [Asm]   r22 [label="fv27 ← fa1", color=green];
// [Asm]   r14 [label="fv8 ← fa3", color=green];
// [Asm]   r8 [label="fa2", color=blue];
// [Asm]   r5 [label="fv21 ← fa5", color=green];
// [Asm]   r24 [label="fv29 ← fa1", color=green];
// [Asm]   r15 [label="fv12 ← fa4", color=green];
// [Asm]   r25 [label="fv32 ← fa3", color=green];
// [Asm]   r2 [label="fv10 ← fa2", color=green];
// [Asm]   r16 [label="fv13 ← fa0", color=green];
// [Asm]   r18 [label="fv46 ← fa4", color=green];
// [Asm]   r19 [label="fv23 ← fa1", color=green];
// [Asm]   r21 [label="fv26 ← fa2", color=green];
// [Asm]   r17 [label="fv15 ← fa3", color=green];
// [Asm]   r12 [label="fv5 ← fa5", color=green];
// [Asm]   r2 -- r20;
// [Asm]   r21 -- r24;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r3 -- r19;
// [Asm]   r6 -- r11;
// [Asm]   r20 -- r24;
// [Asm]   r16 -- r25;
// [Asm]   r13 -- r15;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r15;
// [Asm]   r14 -- r16;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r11 -- r14;
// [Asm]   r1 -- r4;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r23;
// [Asm]   r1 -- r18;
// [Asm]   r11 -- r12;
// [Asm]   r0 -- r21;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r18;
// [Asm]   r6 -- r12;
// [Asm]   r0 -- r19;
// [Asm]   r15 -- r25;
// [Asm]   r3 -- r5;
// [Asm]   r20 -- r25;
// [Asm]   r16 -- r17;
// [Asm]   r21 -- r23;
// [Asm]   r6 -- r8;
// [Asm]   r20 -- r23;
// [Asm]   r6 -- r13;
// [Asm]   r2 -- r25;
// [Asm]   r9 -- r11;
// [Asm]   r20 -- r22;
// [Asm]   r23 -- r25;
// [Asm]   r3 -- r4;
// [Asm]   r12 -- r13;
// [Asm]   r15 -- r17;
// [Asm]   r11 -- r13;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r1 -- r21;
// [Asm]   r6 -- r10;
// [Asm]   r21 -- r25;
// [Asm]   r13 -- r14;
// [Asm]   r9 -- r12;
// [Asm]   r2 -- r12;
// [Asm]   r22 -- r23;
// [Asm]   r7 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r2 -- r17;
// [Asm]   r23 -- r24;
// [Asm]   r1 -- r11;
// [Asm]   r15 -- r23;
// [Asm]   r8 -- r11;
// [Asm]   r12 -- r14;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r21 -- r22;
// [Asm]   r1 -- r14;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r7 -- r12;
// [Asm]   r9 -- r13;
// [Asm]   r24 -- r25;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r0 -- r20;
// [Asm]   r20 -- r21;
// [Asm]   r14 -- r15;
// [Asm]   r2 -- r23;
// [Asm]   r19 -- r20;
// [Asm]   r0 -- r18;
// [Asm]   comment = "0:fv16-> 1:fv9-> 2:fv10-> 3:fv17-> 4:fv20-> 5:fv21-> 18:fv46-> 20:fv25-> 19:fv23-> 21:fv26-> 23:fv28-> 25:fv32-> 15:fv12-> 16:fv13-> 14:fv8-> 13:fv6-> 12:fv5-> 11:fv3-> 6:fv2-> 9:fa4-> 17:fv15-> 24:fv29-> 7:fa3-> 22:fv27-> 8:fa2-> 10:fa1"
// [Asm]   comment = "fv16<-fa0;fv25<-fa4;fv28<-fa0;fv17<-fa3;fv2<-fa7;fv6<-fa0;fv20<-fa4;fv9<-fa1;fv3<-fa6;fv27<-fa1;fv8<-fa3;fv21<-fa5;fv29<-fa1;fv12<-fa4;fv32<-fa3;fv10<-fa2;fv13<-fa0;fv46<-fa4;fv23<-fa1;fv26<-fa2;fv15<-fa3;fv5<-fa5;"
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   j .calc_pixel7l0_12_6 ->   j .calc_pixel7l0_12_6
// [Asm] subst   fmul.d fv16, fv9, fv9 ->   fmul.d fa0, fa1, fa1
// [Asm] subst   fmul.d fv17, fv10, fv10 ->   fmul.d fa3, fa2, fa2
// [Asm] subst   lw v18, iter.3 ->   lw a1, iter.3
// [Asm] subst   beq v11, v18, .calc_pixel7l0_12_1 ->   beq a0, a1, .calc_pixel7l0_12_1
// [Asm] subst   lw v34, iter.3 ->   lw a0, iter.3
// [Asm] subst   fadd.d fv20, fv16, fv17 ->   fadd.d fa4, fa0, fa3
// [Asm] subst   fld fv21, limit_sq.2, t5 ->   fld fa5, limit_sq.2, t5
// [Asm] subst   fle.d v22, fv21, fv20 ->   fle.d a1, fa5, fa4
// [Asm] subst   bne v22, zero, .calc_pixel7l0_12_3 ->   bne a1, zero, .calc_pixel7l0_12_3
// [Asm] subst   fmv.d fv2, fa0 ->   fmv.d fa7, fa0
// [Asm] subst   fmv.d fv3, fa1 ->   fmv.d fa6, fa1
// [Asm] subst   fmv.d fv5, fa2 ->   fmv.d fa5, fa2
// [Asm] subst   fmv.d fv6, fa3 ->   fmv.d fa0, fa3
// [Asm] subst   fmv.d fv8, fa4 ->   fmv.d fa3, fa4
// [Asm] subst   fmv.d fv9, fv2 ->   fmv.d fa1, fa7
// [Asm] subst   fmv.d fv10, fv3 ->   fmv.d fa2, fa6
// [Asm] subst   fmv.d fv12, fv5 ->   fmv.d fa4, fa5
// [Asm] subst   li v45, 4611686018427387904 ->   li a1, 4611686018427387904
// [Asm] subst   fmv.d.x fv46, v45 ->   fmv.d.x fa4, a1
// [Asm] subst   fmul.d fv23, fv46, fv9 ->   fmul.d fa1, fa4, fa1
// [Asm] subst   fld fv25, c_im.6, t5 ->   fld fa4, c_im.6, t5
// [Asm] subst   fmadd.d fv26, fv23, fv10, fv25 ->   fmadd.d fa2, fa1, fa2, fa4
// [Asm] subst   fsub.d fv27, fv16, fv17 ->   fsub.d fa1, fa0, fa3
// [Asm] subst   fld fv28, c_re.5, t5 ->   fld fa0, c_re.5, t5
// [Asm] subst   fadd.d fv29, fv27, fv28 ->   fadd.d fa1, fa1, fa0
// [Asm] subst   addi v30, v11, 1 ->   addi a0, a0, 1
// [Asm] subst   lw v31, iter.3 ->   lw a1, iter.3
// [Asm] subst   fld fv32, limit_sq.2, t5 ->   fld fa3, limit_sq.2, t5
// [Asm] subst   j .calc_pixel7l0_12_0 ->   j .calc_pixel7l0_12_0
// [Asm] pre_assigned_registers: Self(fref=f4) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$iter.3_4"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   comment = "0:v2-> 1:a0"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$iter.3_4"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 300 ->   li a0, 300
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> fv3, Self(fref=f8) -> v0, Insn(iref=%0) -> fv2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [fv2]
// [Asm] live_set: [fv2]
// [Asm] move_origin: []
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$c_re.5_8"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$c_re.5_8"];
// [Asm]   r0 [label="fv2 ← fa0", color=green];
// [Asm]   r2 [label="fa0", color=blue];
// [Asm]   r1 [label="fv3 ← fa0", color=green];
// [Asm]   comment = "0:fv2-> 1:fv3-> 2:fa0"
// [Asm]   comment = "fv2<-fa0;fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   fld fv2, _4, t5 ->   fld fa0, _4, t5
// [Asm] subst   fneg.d fv3, fv2 ->   fneg.d fa0, fa0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$limit.1_0"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   comment = "0:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$limit.1_0"];
// [Asm]   r0 [label="fv3 ← fa0", color=green];
// [Asm]   r1 [label="fa0", color=blue];
// [Asm]   comment = "0:fv3-> 1:fa0"
// [Asm]   comment = "fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 4611686018427387904 ->   li a0, 4611686018427387904
// [Asm] subst   fmv.d.x fv3, v2 ->   fmv.d.x fa0, a0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: BlockParam(bref=b12, bpref=$b.0) -> v56, BlockParam(bref=b0, bpref=$b.7) -> v18, FnParam(fref=f13, fpref=$f.6) -> fv8, Insn(iref=%15) -> fv29, Insn(iref=%33) -> fv50, BlockParam(bref=b0, bpref=$b.5) -> fv16, Insn(iref=%8) -> fv22, FnParam(fref=f13, fpref=$f.0) -> v2, BlockParam(bref=b10, bpref=$b.0) -> v43, FnParam(fref=f13, fpref=$f.3) -> v5, Insn(iref=%10) -> fv24, BlockParam(bref=b0, bpref=$b.4) -> v15, Insn(iref=%27) -> v41, BlockParam(bref=b0, bpref=$b.3) -> v14, Insn(iref=%14) -> fv28, Insn(iref=%25) -> v39, FnParam(fref=f13, fpref=$f.5) -> fv7, Insn(iref=%4) -> fv53, Insn(iref=%32) -> v49, Insn(iref=%1) -> v21, BlockParam(bref=b0, bpref=$b.8) -> fv19, Insn(iref=%11) -> fv25, Insn(iref=%26) -> v40, Self(fref=f13) -> v0, BlockParam(bref=b0, bpref=$b.6) -> fv17, FnParam(fref=f13, fpref=$f.2) -> v4, Insn(iref=%6) -> fv55, BlockParam(bref=b9, bpref=$b.0) -> v42, Insn(iref=%31) -> fv48, FnParam(fref=f13, fpref=$f.4) -> v6, Insn(iref=%28) -> v45, Insn(iref=%9) -> fv23, Insn(iref=%16) -> fv30, Insn(iref=%24) -> v38, BlockParam(bref=b0, bpref=$b.0) -> v11, BlockParam(bref=b0, bpref=$b.1) -> v12, BlockParam(bref=b0, bpref=$b.2) -> v13, Insn(iref=%29) -> v46, Insn(iref=%5) -> v54, Insn(iref=%0) -> v20, Insn(iref=%19) -> fv33, Insn(iref=%18) -> fv32, Insn(iref=%3) -> fv52, Insn(iref=%13) -> fv27, FnParam(fref=f13, fpref=$f.7) -> v9, Insn(iref=%22) -> fv36, FnParam(fref=f13, fpref=$f.8) -> fv10, Insn(iref=%17) -> fv31, Insn(iref=%23) -> v37, Insn(iref=%2) -> v51, Insn(iref=%20) -> fv34, Insn(iref=%30) -> fv47, Insn(iref=%21) -> v35, Insn(iref=%34) -> v44, FnParam(fref=f13, fpref=$f.1) -> v3, Insn(iref=%12) -> fv26
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%25), width=@32))
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=48), Insn(iref=%23)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%23), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.1)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v56]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v56]
// [Asm] live_set: [v56]
// [Asm] move_origin: [zero]
// [Asm] defined: v56 is X
// [Asm] defs: [v43]
// [Asm] live_set: [v11, v14, v13, zero, v43, v15, v12, v39]
// [Asm] move_origin: [v42]
// [Asm] defined: v43 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12, v15, zero, v13]
// [Asm] move_origin: []
// [Asm] defs: [fv22]
// [Asm] live_set: [v11, fv22, v14, v13, zero, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv22 is F
// [Asm] defs: [v92]
// [Asm] live_set: [v11, fv22, v14, v13, zero, v92, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: v92 is X
// [Asm] defs: [fv93]
// [Asm] live_set: [v11, fv22, v14, v13, zero, v15, v12, fv93]
// [Asm] move_origin: []
// [Asm] defined: fv93 is F
// [Asm] defs: [fv23]
// [Asm] live_set: [v11, fv23, v14, v13, zero, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv23 is F
// [Asm] defs: [fv24]
// [Asm] live_set: [v11, fv23, fv24, v14, v13, zero, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv24 is F
// [Asm] defs: [fv25]
// [Asm] live_set: [v11, v14, v13, zero, fv25, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv25 is F
// [Asm] defs: [v87]
// [Asm] live_set: [v11, v14, v87, v13, zero, fv25, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: v87 is X
// [Asm] defs: [fv88]
// [Asm] live_set: [v11, v14, v13, zero, fv25, v15, v12, fv88]
// [Asm] move_origin: []
// [Asm] defined: fv88 is F
// [Asm] defs: [fv26]
// [Asm] live_set: [v11, v14, v13, zero, v15, v12, fv26]
// [Asm] move_origin: []
// [Asm] defined: fv26 is F
// [Asm] defs: [fv27]
// [Asm] live_set: [v11, v14, v13, zero, fv27, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv27 is F
// [Asm] defs: [fv28]
// [Asm] live_set: [v11, v14, fv28, v13, zero, fv27, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv28 is F
// [Asm] defs: [v82]
// [Asm] live_set: [v11, v14, fv28, v82, v13, zero, fv27, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: v82 is X
// [Asm] defs: [fv83]
// [Asm] live_set: [v11, v14, fv28, v13, zero, fv27, v15, v12, fv83]
// [Asm] move_origin: []
// [Asm] defined: fv83 is F
// [Asm] defs: [fv29]
// [Asm] live_set: [v11, v14, v13, zero, fv29, fv27, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv29 is F
// [Asm] defs: [fv30]
// [Asm] live_set: [v11, v14, v13, zero, fv30, fv29, fv27, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv30 is F
// [Asm] defs: [fv31]
// [Asm] live_set: [v11, v14, fv31, v13, zero, fv27, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv31 is F
// [Asm] defs: [v77]
// [Asm] live_set: [v11, v14, fv31, v13, zero, v77, fv27, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: v77 is X
// [Asm] defs: [fv78]
// [Asm] live_set: [v11, v14, fv78, fv31, v13, zero, fv27, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv78 is F
// [Asm] defs: [fv32]
// [Asm] live_set: [v11, v14, fv32, v13, zero, fv27, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv32 is F
// [Asm] defs: [fv33]
// [Asm] live_set: [v11, v14, fv32, v13, zero, fv33, fv27, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv33 is F
// [Asm] defs: [fv34]
// [Asm] live_set: [v11, v14, fv32, v13, zero, fv34, fv33, fv27, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv34 is F
// [Asm] defs: [v35]
// [Asm] live_set: [v11, v14, fv32, v13, zero, fv34, v35, fv33, fv27, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: [fv36]
// [Asm] live_set: [v11, v14, fv32, v13, zero, fv36, fv34, v35, fv33, fv27, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv36 is F
// [Asm] defs: []
// [Asm] live_set: [v11, v14, fv32, v13, zero, fv36, fv34, v35, fv33, fv27, v15, v12]
// [Asm] move_origin: []
// [Asm] defs: [fa0]
// [Asm] live_set: [v11, v14, fv32, v13, zero, fv36, fv34, v35, fa0, fv33, v12, v15]
// [Asm] move_origin: [fv27]
// [Asm] defined: fa0 is F
// [Asm] defs: [fa1]
// [Asm] live_set: [v11, v14, v13, zero, fv36, fv34, v35, fa0, fv33, v12, v15, fa1]
// [Asm] move_origin: [fv32]
// [Asm] defined: fa1 is F
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v14, v13, zero, a0, fv36, fv34, v35, fa0, fv33, v12, v15, fa1]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [fa2]
// [Asm] live_set: [v11, v14, fa2, v13, zero, a0, fv36, fv34, v35, fa0, v15, v12, fa1]
// [Asm] move_origin: [fv33]
// [Asm] defined: fa2 is F
// [Asm] defs: [fa3]
// [Asm] live_set: [v11, v14, fa2, fa3, v13, zero, a0, fv36, fa0, v35, v12, v15, fa1]
// [Asm] move_origin: [fv34]
// [Asm] defined: fa3 is F
// [Asm] defs: [a1]
// [Asm] live_set: [v11, v14, fa2, fa3, v13, zero, a0, fv36, fa0, a1, v15, v12, fa1]
// [Asm] move_origin: [v35]
// [Asm] defined: a1 is X
// [Asm] defs: [fa4]
// [Asm] live_set: [v11, v14, fa2, fa3, v13, zero, fa4, a0, fa0, a1, v12, v15, fa1]
// [Asm] move_origin: [fv36]
// [Asm] defined: fa4 is F
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v14, zero, v13, a0, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v37]
// [Asm] live_set: [v11, v14, zero, v13, v37, v15, v12]
// [Asm] move_origin: [a0]
// [Asm] defined: v37 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, zero, v13, v37, v15, v12]
// [Asm] move_origin: []
// [Asm] defs: [v38]
// [Asm] live_set: [v11, v14, zero, v13, v37, v38, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: v38 is X
// [Asm] defs: [v39]
// [Asm] live_set: [v11, v14, zero, v13, v37, v15, v12, v39]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, zero, v13, v37, v15, v12, v39]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [fa2, a5, zero, a0, a4, fa0, a2, a1, a3, fa1]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [fa2, a5, zero, a4, fa0, a2, a1, a3, fa1, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, fa2, a5, zero, a4, fa0, a2, a3, fa1, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, fa2, a5, zero, a4, fa0, v4, a3, fa1, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, fa2, a5, zero, a4, fa0, v4, fa1, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, fa2, a5, zero, fa0, v4, v6, fa1, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [fv7]
// [Asm] live_set: [v2, v5, fa2, a5, zero, v4, v6, fa1, fv7, v3]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv7 is F
// [Asm] defs: [fv8]
// [Asm] live_set: [v2, v5, fa2, a5, zero, fv8, v4, v6, fv7, v3]
// [Asm] move_origin: [fa1]
// [Asm] defined: fv8 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v2, v5, fa2, zero, fv8, v4, v6, v9, fv7, v3]
// [Asm] move_origin: [a5]
// [Asm] defined: v9 is X
// [Asm] defs: [fv10]
// [Asm] live_set: [v2, fv10, v5, zero, fv8, v4, v6, v9, fv7, v3]
// [Asm] move_origin: [fa2]
// [Asm] defined: fv10 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v11, fv10, v5, zero, fv8, v4, v6, v9, fv7, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, fv10, v5, zero, fv8, v4, v6, v12, v9, fv7]
// [Asm] move_origin: [v3]
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v11, fv10, v5, v13, zero, fv8, v6, v12, v9, fv7]
// [Asm] move_origin: [v4]
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v11, fv10, v14, v13, zero, fv8, v6, v12, v9, fv7]
// [Asm] move_origin: [v5]
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v11, fv10, v14, v13, zero, fv8, v12, v15, v9, fv7]
// [Asm] move_origin: [v6]
// [Asm] defined: v15 is X
// [Asm] defs: [fv16]
// [Asm] live_set: [v11, fv10, v14, v13, zero, fv8, v12, v15, fv16, v9]
// [Asm] move_origin: [fv7]
// [Asm] defined: fv16 is F
// [Asm] defs: [fv17]
// [Asm] live_set: [v11, fv10, v14, v13, zero, v12, v15, fv16, fv17, v9]
// [Asm] move_origin: [fv8]
// [Asm] defined: fv17 is F
// [Asm] defs: [v18]
// [Asm] live_set: [v11, fv10, v14, v18, v13, zero, v12, v15, fv16, fv17]
// [Asm] move_origin: [v9]
// [Asm] defined: v18 is X
// [Asm] defs: [fv19]
// [Asm] live_set: [v11, v14, v18, v13, zero, fv19, v12, v15, fv16, fv17]
// [Asm] move_origin: [fv10]
// [Asm] defined: fv19 is F
// [Asm] defs: [v69]
// [Asm] live_set: [v11, v14, v69, v13, zero, v37, v15, v12, v39]
// [Asm] move_origin: []
// [Asm] defined: v69 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v13, zero, v37, v15, v12, v39]
// [Asm] move_origin: []
// [Asm] defs: [v67]
// [Asm] live_set: [v11, v14, zero, v13, v67, v43, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v67 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, zero, v13, v12, v15]
// [Asm] move_origin: []
// [Asm] defs: [v46]
// [Asm] live_set: [v11, v14, v46, zero, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: [fv47]
// [Asm] live_set: [v11, v14, v46, zero, v12, v15, fv47]
// [Asm] move_origin: []
// [Asm] defined: fv47 is F
// [Asm] defs: [fv48]
// [Asm] live_set: [v11, v14, v46, zero, fv48, v12, v15, fv47]
// [Asm] move_origin: []
// [Asm] defined: fv48 is F
// [Asm] defs: [v49]
// [Asm] live_set: [v11, v14, v46, v49, zero, fv48, v12, v15, fv47]
// [Asm] move_origin: []
// [Asm] defined: v49 is X
// [Asm] defs: [fv50]
// [Asm] live_set: [v11, fv50, v14, v46, v49, zero, fv48, v12, v15, fv47]
// [Asm] move_origin: []
// [Asm] defined: fv50 is F
// [Asm] defs: []
// [Asm] live_set: [v11, fv50, v14, v46, v49, zero, fv48, v12, v15, fv47]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, fv50, v14, v46, v49, zero, fv48, v12, v15, fv47]
// [Asm] move_origin: [v12]
// [Asm] defs: [v13]
// [Asm] live_set: [v11, fv50, v14, v49, v13, zero, fv48, v12, v15, fv47]
// [Asm] move_origin: [v46]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v11, fv50, v14, v49, v13, zero, fv48, v12, v15, fv47]
// [Asm] move_origin: [v14]
// [Asm] defs: []
// [Asm] live_set: [v11, fv50, v14, v49, v13, zero, fv48, v12, v15, fv47]
// [Asm] move_origin: [v15]
// [Asm] defs: [fv16]
// [Asm] live_set: [v11, fv50, v14, v49, v13, zero, fv48, v12, v15, fv16]
// [Asm] move_origin: [fv47]
// [Asm] defined: fv16 is F
// [Asm] defs: [fv17]
// [Asm] live_set: [v11, fv50, v14, v49, v13, zero, v12, v15, fv16, fv17]
// [Asm] move_origin: [fv48]
// [Asm] defined: fv17 is F
// [Asm] defs: [v18]
// [Asm] live_set: [v11, fv50, v14, v18, v13, zero, v12, v15, fv16, fv17]
// [Asm] move_origin: [v49]
// [Asm] defined: v18 is X
// [Asm] defs: [fv19]
// [Asm] live_set: [v11, v14, v18, v13, zero, fv19, v12, v15, fv16, fv17]
// [Asm] move_origin: [fv50]
// [Asm] defined: fv19 is F
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v18, v13, zero, fv19, v12, v15, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defs: [v43]
// [Asm] live_set: [v11, v14, v13, zero, v43, v15, v12, v39]
// [Asm] move_origin: [zero]
// [Asm] defined: v43 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v13, zero, v43, v15, v12, v39]
// [Asm] move_origin: []
// [Asm] defs: [v42]
// [Asm] live_set: [v11, v14, v42, v13, zero, v15, v12, v39]
// [Asm] move_origin: [v37]
// [Asm] defined: v42 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v42, v13, zero, v15, v12, v39]
// [Asm] move_origin: []
// [Asm] defs: [v51]
// [Asm] live_set: [v11, zero, v12, v15, v51]
// [Asm] move_origin: []
// [Asm] defined: v51 is X
// [Asm] defs: [fv52]
// [Asm] live_set: [v11, fv52, zero, v12, v15, v51]
// [Asm] move_origin: []
// [Asm] defined: fv52 is F
// [Asm] defs: [fv53]
// [Asm] live_set: [v11, fv52, zero, fv53, v12, v15, v51]
// [Asm] move_origin: []
// [Asm] defined: fv53 is F
// [Asm] defs: [v54]
// [Asm] live_set: [v11, fv52, zero, fv53, v12, v15, v54, v51]
// [Asm] move_origin: []
// [Asm] defined: v54 is X
// [Asm] defs: [fv55]
// [Asm] live_set: [v11, fv52, zero, fv55, fv53, v12, v15, v54, v51]
// [Asm] move_origin: []
// [Asm] defined: fv55 is F
// [Asm] defs: []
// [Asm] live_set: [v11, fv52, zero, fv55, fv53, v12, v15, v54, v51]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, fv52, zero, fv55, fv53, v12, v15, v54, v51]
// [Asm] move_origin: [v12]
// [Asm] defs: [v13]
// [Asm] live_set: [v11, fv52, v13, zero, fv55, fv53, v12, v15, v54, v51]
// [Asm] move_origin: [zero]
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v11, fv52, v14, v13, zero, fv55, fv53, v12, v15, v54]
// [Asm] move_origin: [v51]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v11, fv52, v14, v13, zero, fv55, fv53, v12, v15, v54]
// [Asm] move_origin: [v15]
// [Asm] defs: [fv16]
// [Asm] live_set: [v11, v14, v13, zero, fv55, fv53, v12, v15, fv16, v54]
// [Asm] move_origin: [fv52]
// [Asm] defined: fv16 is F
// [Asm] defs: [fv17]
// [Asm] live_set: [v11, v14, v13, zero, fv55, v12, v15, fv16, fv17, v54]
// [Asm] move_origin: [fv53]
// [Asm] defined: fv17 is F
// [Asm] defs: [v18]
// [Asm] live_set: [v11, v14, v18, v13, zero, fv55, v12, v15, fv16, fv17]
// [Asm] move_origin: [v54]
// [Asm] defined: v18 is X
// [Asm] defs: [fv19]
// [Asm] live_set: [v11, v14, v18, v13, zero, fv19, v12, v15, fv16, fv17]
// [Asm] move_origin: [fv55]
// [Asm] defined: fv19 is F
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v18, v13, zero, fv19, v12, v15, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defs: [v68]
// [Asm] live_set: [v11, v14, v13, zero, v68, v15, v12, v39]
// [Asm] move_origin: []
// [Asm] defined: v68 is X
// [Asm] defs: [v42]
// [Asm] live_set: [v11, v14, v42, v13, zero, v15, v12, v39]
// [Asm] move_origin: [v68]
// [Asm] defined: v42 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12, v15, zero, v13]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main_loop30l1_13"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r38 [label="v46 ← a1", color=green];
// [Asm]   r33 [label="v6 ← a4", color=green];
// [Asm]   r9 [label="v39 ← a1", color=green];
// [Asm]   r26 [label="a7", color=blue];
// [Asm]   r6 [label="zero", color=blue];
// [Asm]   r13 [label="v77 ← a0", color=green];
// [Asm]   r42 [label="v54 ← a0", color=green];
// [Asm]   r4 [label="v14 ← s1", color=green];
// [Asm]   r29 [label="v2 ← a0", color=green];
// [Asm]   r35 [label="v18 ← a0", color=green];
// [Asm]   r7 [label="v15 ← s3", color=green];
// [Asm]   r10 [label="v92 ← a0", color=green];
// [Asm]   r8 [label="v12 ← s4", color=green];
// [Asm]   r5 [label="v13 ← s2", color=green];
// [Asm]   r36 [label="v69 ← a2", color=green];
// [Asm]   r24 [label="a5", color=blue];
// [Asm]   r32 [label="v5 ← a3", color=green];
// [Asm]   r15 [label="a1", color=blue];
// [Asm]   r43 [label="v68 ← a0", color=green];
// [Asm]   r31 [label="v4 ← a2", color=green];
// [Asm]   r39 [label="v49 ← a0", color=green];
// [Asm]   r17 [label="t1", color=blue];
// [Asm]   r12 [label="v82 ← a0", color=green];
// [Asm]   r37 [label="v67 ← a1", color=green];
// [Asm]   r20 [label="t4", color=blue];
// [Asm]   r23 [label="a4", color=blue];
// [Asm]   r3 [label="v11 ← s0", color=green];
// [Asm]   r27 [label="v37 ← a0", color=green];
// [Asm]   r1 [label="v56 ← a0", color=green];
// [Asm]   r40 [label="v42 ← a0", color=green];
// [Asm]   r41 [label="v51 ← a1", color=green];
// [Asm]   r28 [label="v38 ← a1", color=green];
// [Asm]   r11 [label="v87 ← a0", color=green];
// [Asm]   r34 [label="v9 ← a5", color=green];
// [Asm]   r22 [label="a3", color=blue];
// [Asm]   r14 [label="v35 ← a1", color=green];
// [Asm]   r30 [label="v3 ← a1", color=green];
// [Asm]   r25 [label="a6", color=blue];
// [Asm]   r2 [label="v43 ← a0", color=green];
// [Asm]   r16 [label="t0", color=blue];
// [Asm]   r18 [label="t2", color=blue];
// [Asm]   r19 [label="t3", color=blue];
// [Asm]   r21 [label="a2", color=blue];
// [Asm]   r8 -- r31;
// [Asm]   r5 -- r21;
// [Asm]   r5 -- r33;
// [Asm]   r3 -- r15;
// [Asm]   r4 -- r34;
// [Asm]   r6 -- r35;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r8 -- r36;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r27 -- r36;
// [Asm]   r3 -- r42;
// [Asm]   r5 -- r22;
// [Asm]   r7 -- r25;
// [Asm]   r5 -- r18;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r0 -- r23;
// [Asm]   r3 -- r37;
// [Asm]   r27 -- r28;
// [Asm]   r2 -- r37;
// [Asm]   r2 -- r7;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r31;
// [Asm]   r0 -- r16;
// [Asm]   r7 -- r27;
// [Asm]   r30 -- r34;
// [Asm]   r7 -- r35;
// [Asm]   r3 -- r5;
// [Asm]   r8 -- r12;
// [Asm]   r0 -- r6;
// [Asm]   r8 -- r24;
// [Asm]   r3 -- r8;
// [Asm]   r8 -- r34;
// [Asm]   r5 -- r35;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r0 -- r26;
// [Asm]   r8 -- r16;
// [Asm]   r3 -- r39;
// [Asm]   r29 -- r33;
// [Asm]   r7 -- r38;
// [Asm]   r8 -- r23;
// [Asm]   r5 -- r32;
// [Asm]   r41 -- r42;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r33;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r25;
// [Asm]   r32 -- r34;
// [Asm]   r3 -- r35;
// [Asm]   r8 -- r32;
// [Asm]   r0 -- r4;
// [Asm]   r6 -- r23;
// [Asm]   r7 -- r42;
// [Asm]   r4 -- r14;
// [Asm]   r5 -- r36;
// [Asm]   r0 -- r18;
// [Asm]   r6 -- r25;
// [Asm]   r23 -- r29;
// [Asm]   r4 -- r13;
// [Asm]   r0 -- r15;
// [Asm]   r3 -- r19;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r38;
// [Asm]   r6 -- r41;
// [Asm]   r7 -- r24;
// [Asm]   r8 -- r27;
// [Asm]   r29 -- r30;
// [Asm]   r9 -- r40;
// [Asm]   r21 -- r29;
// [Asm]   r30 -- r32;
// [Asm]   r8 -- r9;
// [Asm]   r6 -- r33;
// [Asm]   r6 -- r30;
// [Asm]   r7 -- r20;
// [Asm]   r0 -- r14;
// [Asm]   r5 -- r19;
// [Asm]   r4 -- r18;
// [Asm]   r6 -- r22;
// [Asm]   r5 -- r11;
// [Asm]   r8 -- r20;
// [Asm]   r8 -- r42;
// [Asm]   r24 -- r29;
// [Asm]   r8 -- r25;
// [Asm]   r0 -- r19;
// [Asm]   r6 -- r20;
// [Asm]   r3 -- r22;
// [Asm]   r7 -- r17;
// [Asm]   r8 -- r41;
// [Asm]   r6 -- r19;
// [Asm]   r6 -- r27;
// [Asm]   r7 -- r22;
// [Asm]   r4 -- r15;
// [Asm]   r7 -- r19;
// [Asm]   r5 -- r28;
// [Asm]   r32 -- r33;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r9;
// [Asm]   r21 -- r30;
// [Asm]   r0 -- r3;
// [Asm]   r23 -- r30;
// [Asm]   r8 -- r15;
// [Asm]   r7 -- r15;
// [Asm]   r8 -- r18;
// [Asm]   r8 -- r35;
// [Asm]   r9 -- r36;
// [Asm]   r7 -- r36;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r4 -- r36;
// [Asm]   r7 -- r41;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r6 -- r39;
// [Asm]   r5 -- r39;
// [Asm]   r8 -- r26;
// [Asm]   r5 -- r25;
// [Asm]   r7 -- r16;
// [Asm]   r31 -- r33;
// [Asm]   r6 -- r38;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r7 -- r12;
// [Asm]   r0 -- r20;
// [Asm]   r7 -- r14;
// [Asm]   r3 -- r23;
// [Asm]   r5 -- r12;
// [Asm]   r6 -- r21;
// [Asm]   r4 -- r38;
// [Asm]   r23 -- r31;
// [Asm]   r5 -- r41;
// [Asm]   r7 -- r21;
// [Asm]   r6 -- r36;
// [Asm]   r9 -- r27;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r43;
// [Asm]   r7 -- r40;
// [Asm]   r0 -- r17;
// [Asm]   r0 -- r25;
// [Asm]   r30 -- r31;
// [Asm]   r6 -- r29;
// [Asm]   r24 -- r32;
// [Asm]   r3 -- r32;
// [Asm]   r29 -- r31;
// [Asm]   r5 -- r42;
// [Asm]   r22 -- r31;
// [Asm]   r0 -- r22;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r4 -- r22;
// [Asm]   r4 -- r40;
// [Asm]   r3 -- r18;
// [Asm]   r4 -- r42;
// [Asm]   r3 -- r34;
// [Asm]   r4 -- r35;
// [Asm]   r4 -- r21;
// [Asm]   r6 -- r13;
// [Asm]   r7 -- r34;
// [Asm]   r4 -- r33;
// [Asm]   r24 -- r31;
// [Asm]   r3 -- r30;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r43;
// [Asm]   r8 -- r37;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r43;
// [Asm]   r6 -- r10;
// [Asm]   r4 -- r28;
// [Asm]   r7 -- r10;
// [Asm]   r3 -- r40;
// [Asm]   r23 -- r32;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r6 -- r31;
// [Asm]   r3 -- r27;
// [Asm]   r8 -- r39;
// [Asm]   r8 -- r22;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r8 -- r21;
// [Asm]   r5 -- r14;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r31 -- r34;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r4 -- r9;
// [Asm]   r6 -- r32;
// [Asm]   r30 -- r33;
// [Asm]   r5 -- r34;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r24;
// [Asm]   r29 -- r32;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r15 -- r29;
// [Asm]   r5 -- r20;
// [Asm]   r4 -- r37;
// [Asm]   r0 -- r24;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r23;
// [Asm]   r8 -- r19;
// [Asm]   r7 -- r26;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r22 -- r29;
// [Asm]   r7 -- r13;
// [Asm]   r0 -- r21;
// [Asm]   r8 -- r43;
// [Asm]   r4 -- r20;
// [Asm]   r6 -- r16;
// [Asm]   r3 -- r28;
// [Asm]   r8 -- r38;
// [Asm]   r8 -- r33;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r26;
// [Asm]   r6 -- r12;
// [Asm]   r6 -- r40;
// [Asm]   r6 -- r24;
// [Asm]   r7 -- r28;
// [Asm]   r24 -- r30;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r34;
// [Asm]   r33 -- r34;
// [Asm]   r8 -- r28;
// [Asm]   r7 -- r37;
// [Asm]   r6 -- r37;
// [Asm]   r4 -- r11;
// [Asm]   r22 -- r30;
// [Asm]   r8 -- r13;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r0 -- r8;
// [Asm]   r5 -- r37;
// [Asm]   r6 -- r28;
// [Asm]   r8 -- r40;
// [Asm]   r9 -- r43;
// [Asm]   r6 -- r42;
// [Asm]   r7 -- r11;
// [Asm]   r3 -- r41;
// [Asm]   r6 -- r17;
// [Asm]   r7 -- r39;
// [Asm]   r3 -- r14;
// [Asm]   r7 -- r43;
// [Asm]   r29 -- r34;
// [Asm]   r4 -- r39;
// [Asm]   r3 -- r36;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r31 -- r32;
// [Asm]   r38 -- r39;
// [Asm]   r7 -- r23;
// [Asm]   r4 -- r26;
// [Asm]   r0 -- r7;
// [Asm]   r5 -- r43;
// [Asm]   r2 -- r3;
// [Asm]   r24 -- r33;
// [Asm]   r5 -- r40;
// [Asm]   r5 -- r15;
// [Asm]   r4 -- r19;
// [Asm]   comment = "0:a0-> 3:v11-> 4:v14-> 5:v13-> 6:zero-> 7:v15-> 8:v12-> 14:v35-> 15:a1-> 16:t0-> 17:t1-> 18:t2-> 19:t3-> 20:t4-> 21:a2-> 22:a3-> 23:a4-> 24:a5-> 25:a6-> 26:a7-> 2:v43-> 9:v39-> 27:v37-> 36:v69-> 28:v38-> 37:v67-> 40:v42-> 43:v68-> 10:v92-> 11:v87-> 12:v82-> 13:v77-> 29:v2-> 30:v3-> 31:v4-> 32:v5-> 33:v6-> 34:v9-> 35:v18-> 39:v49-> 38:v46-> 42:v54-> 41:v51-> 1:v56"
// [Asm]   comment = "v46<-a1;v6<-a4;v39<-a1;v77<-a0;v54<-a0;v14<-s1;v2<-a0;v18<-a0;v15<-s3;v92<-a0;v12<-s4;v13<-s2;v69<-a2;v5<-a3;v68<-a0;v4<-a2;v49<-a0;v82<-a0;v67<-a1;v11<-s0;v37<-a0;v56<-a0;v42<-a0;v51<-a1;v38<-a1;v87<-a0;v9<-a5;v35<-a1;v3<-a1;v43<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main_loop30l1_13"];
// [Asm]   r0 [label="fv22 ← fa0", color=green];
// [Asm]   r46 [label="fv52 ← fa0", color=green];
// [Asm]   r38 [label="fv8 ← fa1", color=green];
// [Asm]   r33 [label="ft10", color=blue];
// [Asm]   r9 [label="fv83 ← fa2", color=green];
// [Asm]   r26 [label="ft3", color=blue];
// [Asm]   r47 [label="fv53 ← fa1", color=green];
// [Asm]   r6 [label="fv26 ← fa0", color=green];
// [Asm]   r44 [label="fv48 ← fa1", color=green];
// [Asm]   r13 [label="fv78 ← fa2", color=green];
// [Asm]   r42 [label="fv19 ← fa2", color=green];
// [Asm]   r4 [label="fv25 ← fa0", color=green];
// [Asm]   r29 [label="ft6", color=blue];
// [Asm]   r35 [label="fa6", color=blue];
// [Asm]   r7 [label="fv27 ← fa0", color=green];
// [Asm]   r10 [label="fv29 ← fa1", color=green];
// [Asm]   r8 [label="fv28 ← fa1", color=green];
// [Asm]   r5 [label="fv88 ← fa1", color=green];
// [Asm]   r36 [label="fa7", color=blue];
// [Asm]   r15 [label="fv33 ← fa2", color=green];
// [Asm]   r24 [label="ft1", color=blue];
// [Asm]   r32 [label="ft9", color=blue];
// [Asm]   r43 [label="fv47 ← fa0", color=green];
// [Asm]   r31 [label="ft8", color=blue];
// [Asm]   r39 [label="fv10 ← fa2", color=green];
// [Asm]   r17 [label="fv36 ← fa4", color=green];
// [Asm]   r48 [label="fv55 ← fa2", color=green];
// [Asm]   r12 [label="fv31 ← fa1", color=green];
// [Asm]   r37 [label="fv7 ← fa0", color=green];
// [Asm]   r20 [label="fa2", color=blue];
// [Asm]   r23 [label="ft0", color=blue];
// [Asm]   r3 [label="fv24 ← fa1", color=green];
// [Asm]   r27 [label="ft4", color=blue];
// [Asm]   r1 [label="fv93 ← fa1", color=green];
// [Asm]   r40 [label="fv16 ← fa0", color=green];
// [Asm]   r41 [label="fv17 ← fa1", color=green];
// [Asm]   r28 [label="ft5", color=blue];
// [Asm]   r11 [label="fv30 ← fa2", color=green];
// [Asm]   r34 [label="fa5", color=blue];
// [Asm]   r22 [label="fa4", color=blue];
// [Asm]   r14 [label="fv32 ← fa1", color=green];
// [Asm]   r30 [label="ft7", color=blue];
// [Asm]   r45 [label="fv50 ← fa2", color=green];
// [Asm]   r25 [label="ft2", color=blue];
// [Asm]   r2 [label="fv23 ← fa0", color=green];
// [Asm]   r16 [label="fv34 ← fa3", color=green];
// [Asm]   r18 [label="fa0", color=blue];
// [Asm]   r19 [label="fa1", color=blue];
// [Asm]   r21 [label="fa3", color=blue];
// [Asm]   r37 -- r39;
// [Asm]   r41 -- r45;
// [Asm]   r17 -- r18;
// [Asm]   r16 -- r20;
// [Asm]   r17 -- r21;
// [Asm]   r4 -- r5;
// [Asm]   r14 -- r18;
// [Asm]   r40 -- r45;
// [Asm]   r14 -- r17;
// [Asm]   r14 -- r16;
// [Asm]   r39 -- r41;
// [Asm]   r37 -- r38;
// [Asm]   r47 -- r48;
// [Asm]   r8 -- r9;
// [Asm]   r20 -- r37;
// [Asm]   r41 -- r48;
// [Asm]   r46 -- r47;
// [Asm]   r40 -- r44;
// [Asm]   r7 -- r13;
// [Asm]   r16 -- r19;
// [Asm]   r44 -- r45;
// [Asm]   r18 -- r21;
// [Asm]   r18 -- r22;
// [Asm]   r19 -- r21;
// [Asm]   r7 -- r9;
// [Asm]   r43 -- r45;
// [Asm]   r19 -- r37;
// [Asm]   r16 -- r18;
// [Asm]   r17 -- r19;
// [Asm]   r16 -- r17;
// [Asm]   r46 -- r48;
// [Asm]   r7 -- r17;
// [Asm]   r20 -- r38;
// [Asm]   r15 -- r18;
// [Asm]   r20 -- r22;
// [Asm]   r18 -- r19;
// [Asm]   r12 -- r13;
// [Asm]   r15 -- r17;
// [Asm]   r7 -- r15;
// [Asm]   r38 -- r40;
// [Asm]   r40 -- r47;
// [Asm]   r7 -- r10;
// [Asm]   r19 -- r22;
// [Asm]   r10 -- r11;
// [Asm]   r7 -- r11;
// [Asm]   r41 -- r42;
// [Asm]   r0 -- r1;
// [Asm]   r40 -- r48;
// [Asm]   r40 -- r41;
// [Asm]   r39 -- r40;
// [Asm]   r18 -- r20;
// [Asm]   r7 -- r16;
// [Asm]   r38 -- r39;
// [Asm]   r21 -- r22;
// [Asm]   r7 -- r8;
// [Asm]   r43 -- r44;
// [Asm]   r7 -- r12;
// [Asm]   r15 -- r16;
// [Asm]   r15 -- r19;
// [Asm]   r2 -- r3;
// [Asm]   r7 -- r14;
// [Asm]   r20 -- r21;
// [Asm]   r14 -- r15;
// [Asm]   r40 -- r42;
// [Asm]   r17 -- r20;
// [Asm]   r19 -- r20;
// [Asm]   comment = "0:fv22-> 1:fv93-> 2:fv23-> 3:fv24-> 4:fv25-> 5:fv88-> 6:fv26-> 7:fv27-> 8:fv28-> 9:fv83-> 10:fv29-> 11:fv30-> 12:fv31-> 13:fv78-> 14:fv32-> 15:fv33-> 16:fv34-> 17:fv36-> 18:fa0-> 19:fa1-> 20:fa2-> 21:fa3-> 22:fa4-> 37:fv7-> 38:fv8-> 39:fv10-> 40:fv16-> 41:fv17-> 42:fv19-> 45:fv50-> 44:fv48-> 43:fv47-> 48:fv55-> 47:fv53-> 46:fv52-> 23:ft0-> 24:ft1-> 25:ft2-> 26:ft3-> 27:ft4-> 28:ft5-> 29:ft6-> 30:ft7-> 31:ft8-> 32:ft9-> 33:ft10-> 34:fa5-> 35:fa6-> 36:fa7"
// [Asm]   comment = "fv22<-fa0;fv52<-fa0;fv8<-fa1;fv83<-fa2;fv53<-fa1;fv26<-fa0;fv48<-fa1;fv78<-fa2;fv19<-fa2;fv25<-fa0;fv27<-fa0;fv29<-fa1;fv28<-fa1;fv88<-fa1;fv33<-fa2;fv47<-fa0;fv10<-fa2;fv36<-fa4;fv55<-fa2;fv31<-fa1;fv7<-fa0;fv24<-fa1;fv93<-fa1;fv16<-fa0;fv17<-fa1;fv30<-fa2;fv32<-fa1;fv50<-fa2;fv23<-fa0;fv34<-fa3;"
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v56, zero ->   mv a0, zero
// [Asm] subst   beq v13, v11, .main_loop30l1_13_3 ->   beq s2, s0, .main_loop30l1_13_3
// [Asm] subst   fcvt.d.w fv22, v13 ->   fcvt.d.w fa0, s2
// [Asm] subst   li v92, 4613937818241073152 ->   li a0, 4613937818241073152
// [Asm] subst   fmv.d.x fv93, v92 ->   fmv.d.x fa1, a0
// [Asm] subst   fmul.d fv23, fv93, fv22 ->   fmul.d fa0, fa1, fa0
// [Asm] subst   fcvt.d.w fv24, v11 ->   fcvt.d.w fa1, s0
// [Asm] subst   fdiv.d fv25, fv23, fv24 ->   fdiv.d fa0, fa0, fa1
// [Asm] subst   li v87, 4609434218613702656 ->   li a0, 4609434218613702656
// [Asm] subst   fmv.d.x fv88, v87 ->   fmv.d.x fa1, a0
// [Asm] subst   fsub.d fv26, fv25, fv88 ->   fsub.d fa0, fa0, fa1
// [Asm] subst   fneg.d fv27, fv26 ->   fneg.d fa0, fa0
// [Asm] subst   fcvt.d.w fv28, v14 ->   fcvt.d.w fa1, s1
// [Asm] subst   li v82, 4613937818241073152 ->   li a0, 4613937818241073152
// [Asm] subst   fmv.d.x fv83, v82 ->   fmv.d.x fa2, a0
// [Asm] subst   fmul.d fv29, fv83, fv28 ->   fmul.d fa1, fa2, fa1
// [Asm] subst   fcvt.d.w fv30, v12 ->   fcvt.d.w fa2, s4
// [Asm] subst   fdiv.d fv31, fv29, fv30 ->   fdiv.d fa1, fa1, fa2
// [Asm] subst   li v77, 4609434218613702656 ->   li a0, 4609434218613702656
// [Asm] subst   fmv.d.x fv78, v77 ->   fmv.d.x fa2, a0
// [Asm] subst   fsub.d fv32, fv31, fv78 ->   fsub.d fa1, fa1, fa2
// [Asm] subst   fld fv33, c_im.6, t5 ->   fld fa2, c_im.6, t5
// [Asm] subst   fld fv34, c_re.5, t5 ->   fld fa3, c_re.5, t5
// [Asm] subst   lw v35, iter.3 ->   lw a1, iter.3
// [Asm] subst   fld fv36, limit_sq.2, t5 ->   fld fa4, limit_sq.2, t5
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   call calc_pixel7l0_12 ->   call calc_pixel7l0_12
// [Asm] subst   mul v38, v14, v11 ->   mul a1, s1, s0
// [Asm] subst   add v39, v38, v13 ->   add a1, a1, s2
// [Asm] subst   bge zero, v37, .main_loop30l1_13_5 ->   bge zero, a0, .main_loop30l1_13_5
// [Asm] subst   mv v11, v2 ->   mv s0, a0
// [Asm] subst   mv v12, v3 ->   mv s4, a1
// [Asm] subst   mv v13, v4 ->   mv s2, a2
// [Asm] subst   mv v14, v5 ->   mv s1, a3
// [Asm] subst   mv v15, v6 ->   mv s3, a4
// [Asm] subst   mv v18, v9 ->   mv a0, a5
// [Asm] subst   li v69, 48 ->   li a2, 48
// [Asm] subst   blt v37, v69, .main_loop30l1_13_8 ->   blt a0, a2, .main_loop30l1_13_8
// [Asm] subst   th.addsl v67, v15, v39, 2 ->   th.addsl a1, s3, a1, 2
// [Asm] subst   sw v43, 0(v67) ->   sw a0, 0(a1)
// [Asm] subst   addi v46, v13, 1 ->   addi a1, s2, 1
// [Asm] subst   fld fv47, c_im.6, t5 ->   fld fa0, c_im.6, t5
// [Asm] subst   fld fv48, c_re.5, t5 ->   fld fa1, c_re.5, t5
// [Asm] subst   lw v49, iter.3 ->   lw a0, iter.3
// [Asm] subst   fld fv50, limit_sq.2, t5 ->   fld fa2, limit_sq.2, t5
// [Asm] subst   mv v13, v46 ->   mv s2, a1
// [Asm] subst   j .main_loop30l1_13_0 ->   j .main_loop30l1_13_0
// [Asm] subst   mv v43, zero ->   mv a0, zero
// [Asm] subst   j .main_loop30l1_13_10 ->   j .main_loop30l1_13_10
// [Asm] subst   j .main_loop30l1_13_9 ->   j .main_loop30l1_13_9
// [Asm] subst   addi v51, v14, 1 ->   addi a1, s1, 1
// [Asm] subst   fld fv52, c_im.6, t5 ->   fld fa0, c_im.6, t5
// [Asm] subst   fld fv53, c_re.5, t5 ->   fld fa1, c_re.5, t5
// [Asm] subst   lw v54, iter.3 ->   lw a0, iter.3
// [Asm] subst   fld fv55, limit_sq.2, t5 ->   fld fa2, limit_sq.2, t5
// [Asm] subst   mv v13, zero ->   mv s2, zero
// [Asm] subst   mv v14, v51 ->   mv s1, a1
// [Asm] subst   j .main_loop30l1_13_0 ->   j .main_loop30l1_13_0
// [Asm] subst   li v68, 48 ->   li a0, 48
// [Asm] subst   beq v14, v12, .main_loop30l1_13_1 ->   beq s1, s4, .main_loop30l1_13_1
// [Asm] pre_assigned_registers: FnParam(fref=f15, fpref=$f.1) -> fv3, Insn(iref=%3) -> v10, FnParam(fref=f15, fpref=$f.0) -> fv2, Mem(fref=f15, mref=m0) -> v6, FnParam(fref=f15, fpref=$f.2) -> v4, FnParam(fref=f15, fpref=$f.3) -> fv5, Insn(iref=%7) -> fv14, Self(fref=f15) -> v0, Insn(iref=%2) -> v9, Insn(iref=%9) -> v16, Insn(iref=%8) -> v15, Insn(iref=%1) -> v8, Insn(iref=%6) -> v13, Insn(iref=%5) -> fv12, Insn(iref=%0) -> v7, Insn(iref=%4) -> fv11
// [Asm] defs: []
// [Asm] live_set: [fa2, zero, a0, fa0, s11, fa1]
// [Asm] move_origin: []
// [Asm] defs: [fv2]
// [Asm] live_set: [fa2, zero, a0, s11, fa1]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fa2, zero, a0, s11]
// [Asm] move_origin: [fa1]
// [Asm] defined: fv3 is F
// [Asm] defs: [v4]
// [Asm] live_set: [fa2, zero, s11]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: [fv5]
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: [fa2]
// [Asm] defined: fv5 is F
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, s11]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [zero, v7, s11]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v7, s11]
// [Asm] move_origin: []
// [Asm] defs: [v26]
// [Asm] live_set: [zero, v26, v7, s11]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [v8]
// [Asm] live_set: [zero, v7, v8, s11]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [zero, v7, v8, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v23]
// [Asm] live_set: [zero, v23, v7, v8, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v6]
// [Asm] live_set: [zero, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, v7, v8, v6]
// [Asm] move_origin: [v9]
// [Asm] defined: a1 is X
// [Asm] defs: [fv11]
// [Asm] live_set: [zero, fv11, v7, v8, v6]
// [Asm] move_origin: []
// [Asm] defined: fv11 is F
// [Asm] defs: [fv12]
// [Asm] live_set: [zero, fv11, v7, v8, fv12, v6]
// [Asm] move_origin: []
// [Asm] defined: fv12 is F
// [Asm] defs: [v13]
// [Asm] live_set: [zero, v13, fv11, v7, v8, fv12, v6]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [fv14]
// [Asm] live_set: [zero, v13, fv11, v7, v8, fv12, v6, fv14]
// [Asm] move_origin: []
// [Asm] defined: fv14 is F
// [Asm] defs: []
// [Asm] live_set: [zero, v13, fv11, v7, v8, fv12, v6, fv14]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, zero, v13, fv11, v7, v8, fv12, v6, fv14]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a0, zero, v13, fv11, v7, v8, fv12, v6, a1, fv14]
// [Asm] move_origin: [v7]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a0, zero, v13, fv11, v7, v8, fv12, a2, v6, a1, fv14]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [a3, a0, zero, v13, fv11, v7, v8, fv12, a2, v6, a1, fv14]
// [Asm] move_origin: [zero]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [fv14, a3, a0, zero, v13, fv11, a4, v7, v8, fv12, a2, v6, a1]
// [Asm] move_origin: [v6]
// [Asm] defined: a4 is X
// [Asm] defs: [fa0]
// [Asm] live_set: [a3, fv14, a0, zero, v13, a4, v8, fa0, v7, a2, fv12, a1, v6]
// [Asm] move_origin: [fv11]
// [Asm] defined: fa0 is F
// [Asm] defs: [fa1]
// [Asm] live_set: [a3, fa1, a0, zero, v13, a4, v8, fa0, v7, a2, v6, a1, fv14]
// [Asm] move_origin: [fv12]
// [Asm] defined: fa1 is F
// [Asm] defs: [a5]
// [Asm] live_set: [fa1, a5, a0, zero, a4, v7, v8, fa0, a2, a1, v6, a3, fv14]
// [Asm] move_origin: [v13]
// [Asm] defined: a5 is X
// [Asm] defs: [fa2]
// [Asm] live_set: [fa1, fa2, a5, a0, zero, a4, v7, v8, fa0, a2, a1, v6, a3]
// [Asm] move_origin: [fv14]
// [Asm] defined: fa2 is F
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v8, v6, zero, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v15]
// [Asm] live_set: [v8, v6, zero, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v8, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v6, zero, a0, v7]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, v6, zero, a0]
// [Asm] move_origin: [v7]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, v6, zero, a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [a2, a1, v6, a3, zero, a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [a2, a1, a3, zero, a0, a4]
// [Asm] move_origin: [v6]
// [Asm] defined: a4 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v16]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main94l3_15"];
// [Asm]   r0 [label="zero", color=blue];
// [Asm]   r20 [label="v23 ← a1", color=green];
// [Asm]   r23 [label="v15 ← a0", color=green];
// [Asm]   r3 [label="v4 ← a0", color=green];
// [Asm]   r9 [label="a1", color=blue];
// [Asm]   r6 [label="t2", color=blue];
// [Asm]   r13 [label="a5", color=blue];
// [Asm]   r4 [label="t0", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a3", color=blue];
// [Asm]   r7 [label="t3", color=blue];
// [Asm]   r10 [label="a2", color=blue];
// [Asm]   r22 [label="v13 ← a5", color=green];
// [Asm]   r14 [label="a6", color=blue];
// [Asm]   r8 [label="t4", color=blue];
// [Asm]   r5 [label="t1", color=blue];
// [Asm]   r24 [label="v16 ← a0", color=green];
// [Asm]   r15 [label="a7", color=blue];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r16 [label="v7 ← s0", color=green];
// [Asm]   r18 [label="v8 ← s1", color=green];
// [Asm]   r19 [label="v9 ← a0", color=green];
// [Asm]   r21 [label="v6 ← s2", color=green];
// [Asm]   r17 [label="v26 ← a0", color=green];
// [Asm]   r12 [label="a4", color=blue];
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r21;
// [Asm]   r0 -- r13;
// [Asm]   r5 -- r21;
// [Asm]   r16 -- r20;
// [Asm]   r1 -- r12;
// [Asm]   r7 -- r21;
// [Asm]   r2 -- r15;
// [Asm]   r14 -- r16;
// [Asm]   r1 -- r4;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r10;
// [Asm]   r5 -- r18;
// [Asm]   r10 -- r13;
// [Asm]   r2 -- r10;
// [Asm]   r18 -- r21;
// [Asm]   r0 -- r23;
// [Asm]   r0 -- r22;
// [Asm]   r2 -- r16;
// [Asm]   r2 -- r7;
// [Asm]   r11 -- r18;
// [Asm]   r19 -- r21;
// [Asm]   r1 -- r16;
// [Asm]   r0 -- r16;
// [Asm]   r16 -- r17;
// [Asm]   r9 -- r18;
// [Asm]   r0 -- r6;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r9;
// [Asm]   r15 -- r18;
// [Asm]   r2 -- r6;
// [Asm]   r8 -- r16;
// [Asm]   r11 -- r13;
// [Asm]   r10 -- r18;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r10 -- r12;
// [Asm]   r0 -- r9;
// [Asm]   r6 -- r18;
// [Asm]   r9 -- r12;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r1 -- r2;
// [Asm]   r10 -- r22;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r10;
// [Asm]   r13 -- r18;
// [Asm]   r1 -- r11;
// [Asm]   r8 -- r21;
// [Asm]   r9 -- r10;
// [Asm]   r18 -- r20;
// [Asm]   r0 -- r11;
// [Asm]   r16 -- r21;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r12 -- r21;
// [Asm]   r0 -- r4;
// [Asm]   r21 -- r22;
// [Asm]   r13 -- r21;
// [Asm]   r16 -- r23;
// [Asm]   r16 -- r22;
// [Asm]   r0 -- r18;
// [Asm]   r0 -- r15;
// [Asm]   r4 -- r16;
// [Asm]   r14 -- r18;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r0 -- r24;
// [Asm]   r11 -- r16;
// [Asm]   r1 -- r22;
// [Asm]   r16 -- r19;
// [Asm]   r0 -- r14;
// [Asm]   r13 -- r16;
// [Asm]   r11 -- r12;
// [Asm]   r0 -- r21;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r6 -- r16;
// [Asm]   r11 -- r22;
// [Asm]   r4 -- r18;
// [Asm]   r18 -- r22;
// [Asm]   r2 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r0 -- r19;
// [Asm]   r16 -- r18;
// [Asm]   r10 -- r16;
// [Asm]   r21 -- r23;
// [Asm]   r9 -- r22;
// [Asm]   r9 -- r11;
// [Asm]   r18 -- r19;
// [Asm]   r12 -- r13;
// [Asm]   r2 -- r14;
// [Asm]   r15 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r8;
// [Asm]   r14 -- r21;
// [Asm]   r12 -- r22;
// [Asm]   r8 -- r18;
// [Asm]   r10 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r2 -- r21;
// [Asm]   r2 -- r17;
// [Asm]   r9 -- r16;
// [Asm]   r0 -- r12;
// [Asm]   r12 -- r16;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r14;
// [Asm]   r2 -- r19;
// [Asm]   r9 -- r13;
// [Asm]   r0 -- r7;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r0 -- r20;
// [Asm]   r10 -- r21;
// [Asm]   r11 -- r21;
// [Asm]   r12 -- r18;
// [Asm]   r19 -- r20;
// [Asm]   r9 -- r21;
// [Asm]   r18 -- r23;
// [Asm]   comment = "0:zero-> 1:a0-> 2:s11-> 4:t0-> 16:v7-> 18:v8-> 21:v6-> 5:t1-> 6:t2-> 7:t3-> 8:t4-> 9:a1-> 10:a2-> 11:a3-> 12:a4-> 13:a5-> 22:v13-> 14:a6-> 15:a7-> 19:v9-> 20:v23-> 23:v15-> 17:v26-> 3:v4-> 24:v16"
// [Asm]   comment = "v23<-a1;v15<-a0;v4<-a0;v13<-a5;v16<-a0;v7<-s0;v8<-s1;v9<-a0;v6<-s2;v26<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main94l3_15"];
// [Asm]   r0 [label="fv2 ← fa0", color=green];
// [Asm]   r20 [label="fa6", color=blue];
// [Asm]   r23 [label="fv12 ← fa1", color=green];
// [Asm]   r3 [label="fv3 ← fa0", color=green];
// [Asm]   r9 [label="ft4", color=blue];
// [Asm]   r6 [label="ft1", color=blue];
// [Asm]   r13 [label="ft8", color=blue];
// [Asm]   r4 [label="fv5 ← fa0", color=green];
// [Asm]   r1 [label="fa2", color=blue];
// [Asm]   r11 [label="ft6", color=blue];
// [Asm]   r7 [label="ft2", color=blue];
// [Asm]   r10 [label="ft5", color=blue];
// [Asm]   r22 [label="fv11 ← fa0", color=green];
// [Asm]   r14 [label="ft9", color=blue];
// [Asm]   r8 [label="ft3", color=blue];
// [Asm]   r5 [label="ft0", color=blue];
// [Asm]   r15 [label="ft10", color=blue];
// [Asm]   r24 [label="fv14 ← fa2", color=green];
// [Asm]   r2 [label="fa1", color=blue];
// [Asm]   r16 [label="fa0", color=blue];
// [Asm]   r18 [label="fa4", color=blue];
// [Asm]   r19 [label="fa5", color=blue];
// [Asm]   r21 [label="fa7", color=blue];
// [Asm]   r17 [label="fa3", color=blue];
// [Asm]   r12 [label="ft7", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r24;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r16 -- r24;
// [Asm]   r23 -- r24;
// [Asm]   r16 -- r23;
// [Asm]   r22 -- r24;
// [Asm]   r22 -- r23;
// [Asm]   r2 -- r16;
// [Asm]   r1 -- r16;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:fv2-> 1:fa2-> 2:fa1-> 16:fa0-> 24:fv14-> 23:fv12-> 22:fv11-> 3:fv3-> 4:fv5-> 5:ft0-> 6:ft1-> 7:ft2-> 8:ft3-> 9:ft4-> 10:ft5-> 11:ft6-> 12:ft7-> 13:ft8-> 14:ft9-> 15:ft10-> 17:fa3-> 18:fa4-> 19:fa5-> 20:fa6-> 21:fa7"
// [Asm]   comment = "fv2<-fa0;fv12<-fa1;fv3<-fa0;fv5<-fa0;fv11<-fa0;fv14<-fa2;"
// [Asm] }
// [Asm] 
// [Asm] subst   fmv.d fv3, fa1 ->   fmv.d fa0, fa1
// [Asm] subst   fmv.d fv5, fa2 ->   fmv.d fa0, fa2
// [Asm] subst   call minimbt_read_int ->   call minimbt_read_int
// [Asm] subst   mv v7, a0 ->   mv s0, a0
// [Asm] subst   li v26, 2 ->   li a0, 2
// [Asm] subst   mul v8, v7, v26 ->   mul s1, s0, a0
// [Asm] subst   mul v9, v8, v7 ->   mul a0, s1, s0
// [Asm] subst   slliw v23, v9, 2 ->   slliw a1, a0, 2
// [Asm] subst   sub v6, s11, v23 ->   sub s2, s11, a1
// [Asm] subst   andi s11, v6, -8 ->   andi s11, s2, -8
// [Asm] subst   mv a1, v9 ->   mv a1, a0
// [Asm] subst   fld fv11, c_im.6, t5 ->   fld fa0, c_im.6, t5
// [Asm] subst   fld fv12, c_re.5, t5 ->   fld fa1, c_re.5, t5
// [Asm] subst   lw v13, iter.3 ->   lw a5, iter.3
// [Asm] subst   fld fv14, limit_sq.2, t5 ->   fld fa2, limit_sq.2, t5
// [Asm] subst   mv a0, v8 ->   mv a0, s1
// [Asm] subst   mv a1, v7 ->   mv a1, s0
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   mv a3, zero ->   mv a3, zero
// [Asm] subst   mv a4, v6 ->   mv a4, s2
// [Asm] subst   call main_loop30l1_13 ->   call main_loop30l1_13
// [Asm] subst   mv a0, v8 ->   mv a0, s1
// [Asm] subst   mv a1, v7 ->   mv a1, s0
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   mv a3, zero ->   mv a3, zero
// [Asm] subst   mv a4, v6 ->   mv a4, s2
// [Asm] subst   call print_loop68l2_14 ->   call print_loop68l2_14
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f10) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$c_im.6_10"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   comment = "0:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$c_im.6_10"];
// [Asm]   r0 [label="fv3 ← fa0", color=green];
// [Asm]   r1 [label="fa0", color=blue];
// [Asm]   comment = "0:fv3-> 1:fa0"
// [Asm]   comment = "fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 4604885582990058455 ->   li a0, 4604885582990058455
// [Asm] subst   fmv.d.x fv3, v2 ->   fmv.d.x fa0, a0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%0) -> fv2, Insn(iref=%2) -> fv3
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [fv2]
// [Asm] live_set: [fv2]
// [Asm] move_origin: []
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$limit_sq.2_2"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$limit_sq.2_2"];
// [Asm]   r0 [label="fv2 ← fa0", color=green];
// [Asm]   r2 [label="fa0", color=blue];
// [Asm]   r1 [label="fv3 ← fa0", color=green];
// [Asm]   comment = "0:fv2-> 1:fv3-> 2:fa0"
// [Asm]   comment = "fv2<-fa0;fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   fld fv2, limit.1, t5 ->   fld fa0, limit.1, t5
// [Asm] subst   fmul.d fv3, fv2, fv2 ->   fmul.d fa0, fa0, fa0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f14, fpref=$f.2) -> v4, Insn(iref=%9) -> v19, FnParam(fref=f14, fpref=$f.1) -> v3, Insn(iref=%8) -> v18, Insn(iref=%10) -> v20, BlockParam(bref=b0, bpref=$b.4) -> v11, BlockParam(bref=b0, bpref=$b.3) -> v10, BlockParam(bref=b0, bpref=$b.0) -> v7, BlockParam(bref=b0, bpref=$b.1) -> v8, FnParam(fref=f14, fpref=$f.4) -> v6, BlockParam(bref=b0, bpref=$b.2) -> v9, FnParam(fref=f14, fpref=$f.0) -> v2, Insn(iref=%5) -> v14, Insn(iref=%0) -> v12, Insn(iref=%3) -> v22, Insn(iref=%7) -> v17, Self(fref=f14) -> v0, BlockParam(bref=b6, bpref=$b.0) -> v23, Insn(iref=%2) -> v21, Insn(iref=%1) -> v13, Insn(iref=%11) -> v16, Insn(iref=%6) -> v15, FnParam(fref=f14, fpref=$f.3) -> v5
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%6), width=@32))
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.1)])
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v7, v8]
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v11, v25, v10, zero, v7, v8]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v10, zero, a0, v7, v8]
// [Asm] move_origin: [v25]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, zero, a0, v7, v8]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v21]
// [Asm] live_set: [v11, v10, zero, v7, v8]
// [Asm] move_origin: [a0]
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v7, v8]
// [Asm] move_origin: []
// [Asm] defs: [v22]
// [Asm] live_set: [v11, zero, v22, v7, v8]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v11, zero, v22, v7, v8]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v11, zero, v22, v7, v8]
// [Asm] move_origin: [v8]
// [Asm] defs: [v9]
// [Asm] live_set: [v11, zero, v22, v7, v8, v9]
// [Asm] move_origin: [zero]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: [v22]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v11, v14, v10, zero, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v11, v10, zero, v7, v8, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v30]
// [Asm] live_set: [v11, v10, zero, v30, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v11, v10, zero, v7, v8, v17, v9]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v11, v10, v18, zero, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v18, zero, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v10, zero, a0, v7, v8, v9]
// [Asm] move_origin: [v18]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, zero, a0, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v19]
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defs: [v20]
// [Asm] live_set: [v11, v10, zero, v20, v7, v8]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v20, v7, v8]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v20, v7, v8]
// [Asm] move_origin: [v8]
// [Asm] defs: [v9]
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: [v20]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v23]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v23]
// [Asm] live_set: [v23]
// [Asm] move_origin: [zero]
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, a3, zero, a0, a4]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, a3, zero, a4, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, a3, zero, a4, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, a3, zero, a4, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, zero, a4, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v4, v6, v5, zero, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v4, v6, v5, zero, v7]
// [Asm] move_origin: [v2]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v4, v6, v5, zero, v8]
// [Asm] move_origin: [v3]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v7, v6, v5, zero, v9, v8]
// [Asm] move_origin: [v4]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v7, v6, v10, zero, v9, v8]
// [Asm] move_origin: [v5]
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: [v6]
// [Asm] defined: v11 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of print_loop68l2_14"];
// [Asm]   r0 [label="v25 ← a0", color=green];
// [Asm]   r33 [label="v5 ← a3", color=green];
// [Asm]   r9 [label="t2", color=blue];
// [Asm]   r26 [label="v18 ← a0", color=green];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r13 [label="a2", color=blue];
// [Asm]   r4 [label="v7 ← s2", color=green];
// [Asm]   r29 [label="v23 ← a0", color=green];
// [Asm]   r7 [label="t0", color=blue];
// [Asm]   r10 [label="t3", color=blue];
// [Asm]   r8 [label="t1", color=blue];
// [Asm]   r5 [label="v8 ← s3", color=green];
// [Asm]   r15 [label="a4", color=blue];
// [Asm]   r24 [label="v30 ← a0", color=green];
// [Asm]   r32 [label="v4 ← a2", color=green];
// [Asm]   r31 [label="v3 ← a1", color=green];
// [Asm]   r17 [label="a6", color=blue];
// [Asm]   r12 [label="a1", color=blue];
// [Asm]   r20 [label="v22 ← a0", color=green];
// [Asm]   r23 [label="v15 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r27 [label="v19 ← a0", color=green];
// [Asm]   r1 [label="v11 ← s0", color=green];
// [Asm]   r28 [label="v20 ← a0", color=green];
// [Asm]   r11 [label="t4", color=blue];
// [Asm]   r34 [label="v6 ← a4", color=green];
// [Asm]   r22 [label="v14 ← a0", color=green];
// [Asm]   r14 [label="a3", color=blue];
// [Asm]   r30 [label="v2 ← a0", color=green];
// [Asm]   r25 [label="v17 ← a0", color=green];
// [Asm]   r2 [label="v10 ← s1", color=green];
// [Asm]   r16 [label="a5", color=blue];
// [Asm]   r18 [label="a7", color=blue];
// [Asm]   r19 [label="v21 ← a0", color=green];
// [Asm]   r21 [label="v9 ← s4", color=green];
// [Asm]   r1 -- r24;
// [Asm]   r5 -- r12;
// [Asm]   r21 -- r24;
// [Asm]   r6 -- r21;
// [Asm]   r5 -- r21;
// [Asm]   r17 -- r21;
// [Asm]   r5 -- r33;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r26;
// [Asm]   r7 -- r21;
// [Asm]   r3 -- r15;
// [Asm]   r4 -- r34;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r15 -- r31;
// [Asm]   r1 -- r4;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r5 -- r18;
// [Asm]   r30 -- r31;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r32;
// [Asm]   r3 -- r11;
// [Asm]   r13 -- r31;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r18 -- r21;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r31;
// [Asm]   r30 -- r34;
// [Asm]   r3 -- r34;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r31;
// [Asm]   r2 -- r34;
// [Asm]   r14 -- r30;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r6 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r4 -- r33;
// [Asm]   r2 -- r6;
// [Asm]   r13 -- r30;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r30;
// [Asm]   r3 -- r4;
// [Asm]   r21 -- r33;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r21 -- r27;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r4 -- r28;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r5 -- r32;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r33;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r27;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r25;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r8 -- r21;
// [Asm]   r32 -- r34;
// [Asm]   r5 -- r14;
// [Asm]   r14 -- r31;
// [Asm]   r16 -- r21;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r12 -- r21;
// [Asm]   r1 -- r5;
// [Asm]   r21 -- r22;
// [Asm]   r2 -- r24;
// [Asm]   r31 -- r34;
// [Asm]   r0 -- r4;
// [Asm]   r13 -- r21;
// [Asm]   r4 -- r14;
// [Asm]   r15 -- r30;
// [Asm]   r2 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r30 -- r33;
// [Asm]   r5 -- r34;
// [Asm]   r14 -- r32;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r24;
// [Asm]   r2 -- r26;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r23;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r23;
// [Asm]   r30 -- r32;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r22;
// [Asm]   r5 -- r19;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r20;
// [Asm]   r21 -- r34;
// [Asm]   r6 -- r16;
// [Asm]   r3 -- r28;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r12;
// [Asm]   r1 -- r28;
// [Asm]   r15 -- r32;
// [Asm]   r21 -- r23;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r8;
// [Asm]   r33 -- r34;
// [Asm]   r2 -- r28;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r5 -- r28;
// [Asm]   r2 -- r14;
// [Asm]   r32 -- r33;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r15 -- r21;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r9;
// [Asm]   r0 -- r3;
// [Asm]   r4 -- r32;
// [Asm]   r14 -- r21;
// [Asm]   r21 -- r25;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r21 -- r26;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r12 -- r30;
// [Asm]   r15 -- r33;
// [Asm]   r5 -- r25;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r31 -- r32;
// [Asm]   r31 -- r33;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r10;
// [Asm]   r2 -- r19;
// [Asm]   r4 -- r26;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r3;
// [Asm]   r20 -- r21;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   r10 -- r21;
// [Asm]   r11 -- r21;
// [Asm]   r4 -- r19;
// [Asm]   r5 -- r15;
// [Asm]   r9 -- r21;
// [Asm]   comment = "0:v25-> 1:v11-> 2:v10-> 3:zero-> 4:v7-> 5:v8-> 6:a0-> 7:t0-> 21:v9-> 8:t1-> 9:t2-> 10:t3-> 11:t4-> 12:a1-> 13:a2-> 14:a3-> 15:a4-> 16:a5-> 17:a6-> 18:a7-> 22:v14-> 23:v15-> 24:v30-> 25:v17-> 26:v18-> 27:v19-> 19:v21-> 20:v22-> 28:v20-> 30:v2-> 31:v3-> 32:v4-> 33:v5-> 34:v6-> 29:v23"
// [Asm]   comment = "v25<-a0;v5<-a3;v18<-a0;v7<-s2;v23<-a0;v8<-s3;v30<-a0;v4<-a2;v3<-a1;v22<-a0;v15<-a0;v19<-a0;v11<-s0;v20<-a0;v6<-a4;v14<-a0;v2<-a0;v17<-a0;v10<-s1;v21<-a0;v9<-s4;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of print_loop68l2_14"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   beq v9, v7, .print_loop68l2_14_3 ->   beq s4, s2, .print_loop68l2_14_3
// [Asm] subst   li v25, 10 ->   li a0, 10
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   addi v22, v10, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v9, zero ->   mv s4, zero
// [Asm] subst   mv v10, v22 ->   mv s1, a0
// [Asm] subst   j .print_loop68l2_14_0 ->   j .print_loop68l2_14_0
// [Asm] subst   mul v14, v10, v7 ->   mul a0, s1, s2
// [Asm] subst   add v15, v14, v9 ->   add a0, a0, s4
// [Asm] subst   th.addsl v30, v11, v15, 2 ->   th.addsl a0, s0, a0, 2
// [Asm] subst   lw v17, 0(v30) ->   lw a0, 0(a0)
// [Asm] subst   addi v18, v17, 48 ->   addi a0, a0, 48
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   addi v20, v9, 1 ->   addi a0, s4, 1
// [Asm] subst   mv v9, v20 ->   mv s4, a0
// [Asm] subst   j .print_loop68l2_14_0 ->   j .print_loop68l2_14_0
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v23, zero ->   mv a0, zero
// [Asm] subst   beq v10, v8, .print_loop68l2_14_1 ->   beq s1, s3, .print_loop68l2_14_1
// [Asm] subst   mv v7, v2 ->   mv s2, a0
// [Asm] subst   mv v8, v3 ->   mv s3, a1
// [Asm] subst   mv v9, v4 ->   mv s4, a2
// [Asm] subst   mv v10, v5 ->   mv s1, a3
// [Asm] subst   mv v11, v6 ->   mv s0, a4
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v6, Insn(iref=%1) -> fv3, Insn(iref=%3) -> fv5, Self(fref=f20) -> v0, Insn(iref=%0) -> fv2, Insn(iref=%2) -> v4
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [fv2]
// [Asm] live_set: [fv2]
// [Asm] move_origin: []
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fv2, fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v4, fv2, fv3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [fv5]
// [Asm] live_set: [fv5, v4, fv2, fv3]
// [Asm] move_origin: []
// [Asm] defined: fv5 is F
// [Asm] defs: []
// [Asm] live_set: [fv5, v4, fv2, fv3]
// [Asm] move_origin: []
// [Asm] defs: [fa0]
// [Asm] live_set: [fv5, v4, fv3, fa0]
// [Asm] move_origin: [fv2]
// [Asm] defined: fa0 is F
// [Asm] defs: [fa1]
// [Asm] live_set: [fv5, v4, fa1, fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa1 is F
// [Asm] defs: [a0]
// [Asm] live_set: [fv5, fa1, a0, fa0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [fa2]
// [Asm] live_set: [fa2, fa1, a0, fa0]
// [Asm] move_origin: [fv5]
// [Asm] defined: fa2 is F
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_20"];
// [Asm]   r8 [label="a2", color=blue];
// [Asm]   r0 [label="v4 ← a0", color=green];
// [Asm]   r5 [label="t3", color=blue];
// [Asm]   r3 [label="t1", color=blue];
// [Asm]   r2 [label="t0", color=blue];
// [Asm]   r9 [label="a3", color=blue];
// [Asm]   r6 [label="t4", color=blue];
// [Asm]   r13 [label="a7", color=blue];
// [Asm]   r4 [label="t2", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a5", color=blue];
// [Asm]   r7 [label="a1", color=blue];
// [Asm]   r10 [label="a4", color=blue];
// [Asm]   r14 [label="v6 ← a0", color=green];
// [Asm]   r12 [label="a6", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:v4-> 1:a0-> 2:t0-> 3:t1-> 4:t2-> 5:t3-> 6:t4-> 7:a1-> 8:a2-> 9:a3-> 10:a4-> 11:a5-> 12:a6-> 13:a7-> 14:v6"
// [Asm]   comment = "v4<-a0;v6<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_20"];
// [Asm]   r0 [label="fv2 ← fa0", color=green];
// [Asm]   r20 [label="fa6", color=blue];
// [Asm]   r3 [label="fa0", color=blue];
// [Asm]   r9 [label="ft3", color=blue];
// [Asm]   r6 [label="ft0", color=blue];
// [Asm]   r13 [label="ft7", color=blue];
// [Asm]   r4 [label="fa1", color=blue];
// [Asm]   r1 [label="fv3 ← fa1", color=green];
// [Asm]   r11 [label="ft5", color=blue];
// [Asm]   r7 [label="ft1", color=blue];
// [Asm]   r10 [label="ft4", color=blue];
// [Asm]   r14 [label="ft8", color=blue];
// [Asm]   r8 [label="ft2", color=blue];
// [Asm]   r5 [label="fa2", color=blue];
// [Asm]   r15 [label="ft9", color=blue];
// [Asm]   r2 [label="fv5 ← fa2", color=green];
// [Asm]   r16 [label="ft10", color=blue];
// [Asm]   r18 [label="fa4", color=blue];
// [Asm]   r19 [label="fa5", color=blue];
// [Asm]   r21 [label="fa7", color=blue];
// [Asm]   r17 [label="fa3", color=blue];
// [Asm]   r12 [label="ft6", color=blue];
// [Asm]   r0 -- r2;
// [Asm]   r2 -- r4;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r1 -- r2;
// [Asm]   comment = "0:fv2-> 1:fv3-> 2:fv5-> 3:fa0-> 4:fa1-> 5:fa2-> 6:ft0-> 7:ft1-> 8:ft2-> 9:ft3-> 10:ft4-> 11:ft5-> 12:ft6-> 13:ft7-> 14:ft8-> 15:ft9-> 16:ft10-> 17:fa3-> 18:fa4-> 19:fa5-> 20:fa6-> 21:fa7"
// [Asm]   comment = "fv2<-fa0;fv3<-fa1;fv5<-fa2;"
// [Asm] }
// [Asm] 
// [Asm] subst   fld fv2, c_im.6, t5 ->   fld fa0, c_im.6, t5
// [Asm] subst   fld fv3, c_re.5, t5 ->   fld fa1, c_re.5, t5
// [Asm] subst   lw v4, iter.3 ->   lw a0, iter.3
// [Asm] subst   fld fv5, limit_sq.2, t5 ->   fld fa2, limit_sq.2, t5
// [Asm] subst   call main94l3_15 ->   call main94l3_15
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf true
// [Asm] T$limit.1_0:
// [Asm] # block info: defs: [fa0, fv3, v2], uses: [fa0, fv3, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$limit.1_0_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 4611686018427387904  # live: [v2]
// [Asm]   fmv.d.x fv3, v2  # live: [fv3]
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] print_loop68l2_14:
// [Asm] # block info: defs: [v2, v11, v5, v10, v7, v8, v4, v6, v9, v3], uses: [v3, v5, a0, a4, a2, v4, a1, v6, a3, v2], upward_exposed: [a2, a1, a3, a0, a4], params_defs: []
// [Asm] # live_in: [a0, zero, a4, a2, a1, a3], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: []
// [Asm] .print_loop68l2_14_8:
// [Asm]   # save_ctx1  # live: [a2, a1, a3, zero, a0, a4]
// [Asm]   mv v2, a0  # live: [a2, a1, a3, zero, a4, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, a3, zero, a4, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, a3, zero, a4, v3]
// [Asm]   mv v5, a3  # live: [v2, v4, v5, zero, a4, v3]
// [Asm]   mv v6, a4  # live: [v2, v4, v6, v5, zero, v3]
// [Asm] # control
// [Asm]   mv v7, v2  # live: [v3, v4, v6, v5, zero, v7]
// [Asm]   mv v8, v3  # live: [v7, v4, v6, v5, zero, v8]
// [Asm]   mv v9, v4  # live: [v7, v6, v5, zero, v9, v8]
// [Asm]   mv v10, v5  # live: [v7, v6, v10, zero, v9, v8]
// [Asm]   mv v11, v6  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v10, v8], upward_exposed: [v10, v8], params_defs: [v8, v11, v10, v9, v7]
// [Asm] # live_in: [v11, v10, zero, v7, v8, v9], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: [v7, v8, v9, v10, v11]
// [Asm] .print_loop68l2_14_0:
// [Asm] # control
// [Asm]   beq v10, v8, .print_loop68l2_14_1  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v9, v7], upward_exposed: [v9, v7], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v8, v7, v9], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: []
// [Asm] .print_loop68l2_14_2:
// [Asm] # control
// [Asm]   beq v9, v7, .print_loop68l2_14_3  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v20, v19, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, v30, ft2, a2, v17, a3, v9, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v15], uses: [v11, v14, v10, v18, a0, v30, v20, v8, v7, v17, v15, v9], upward_exposed: [v8, v11, v10, v9, v7], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v7, v8, v9], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: []
// [Asm] .print_loop68l2_14_4:
// [Asm]   mul v14, v10, v7  # live: [v11, v14, v10, zero, v7, v8, v9]
// [Asm]   add v15, v14, v9  # live: [v11, v10, zero, v7, v8, v15, v9]
// [Asm]   th.addsl v30, v11, v15, 2  # live: [v11, v10, zero, v30, v7, v8, v9]
// [Asm]   lw v17, 0(v30)  # live: [v11, v10, zero, v7, v8, v17, v9]
// [Asm]   addi v18, v17, 48  # live: [v11, v10, v18, zero, v7, v8, v9]
// [Asm]   # save_ctx2  # live: [v11, v10, v18, zero, v7, v8, v9]
// [Asm]   mv a0, v18  # live: [v11, v10, zero, a0, v7, v8, v9]
// [Asm]   call minimbt_print_char  # live: [v11, v10, zero, a0, v7, v8, v9]
// [Asm]   mv v19, a0  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   # restore_ctx2  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   addi v20, v9, 1  # live: [v11, v10, zero, v20, v7, v8]
// [Asm] # control
// [Asm]   mv v7, v7  # live: [v11, v10, zero, v20, v7, v8]
// [Asm]   mv v8, v8  # live: [v11, v10, zero, v20, v7, v8]
// [Asm]   mv v9, v20  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   mv v11, v11  # live: [v7, v11, v10, zero, v9, v8]
// [Asm]   j .print_loop68l2_14_0  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [v23], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v23]
// [Asm] # block parameters: []
// [Asm] .print_loop68l2_14_1:
// [Asm] # control
// [Asm]   mv v23, zero  # live: [v23]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v23], upward_exposed: [v23], params_defs: [v23]
// [Asm] # live_in: [v23], live_out: []
// [Asm] # block parameters: [v23]
// [Asm] .print_loop68l2_14_6:
// [Asm] # control
// [Asm]   mv a0, v23  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v25, t1, v22, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, v21, v10, a5, a0, fa4, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v25, v11, v10, a0, zero, v22, v7, v8], upward_exposed: [v8, v11, v10, zero, v7], params_defs: []
// [Asm] # live_in: [v7, v11, v10, zero, v8], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: []
// [Asm] .print_loop68l2_14_3:
// [Asm]   # save_ctx2  # live: [v11, v10, zero, v7, v8]
// [Asm]   li v25, 10  # live: [v11, v25, v10, zero, v7, v8]
// [Asm]   mv a0, v25  # live: [v11, v10, zero, a0, v7, v8]
// [Asm]   call minimbt_print_char  # live: [v11, v10, zero, a0, v7, v8]
// [Asm]   mv v21, a0  # live: [v11, v10, zero, v7, v8]
// [Asm]   # restore_ctx2  # live: [v11, v10, zero, v7, v8]
// [Asm]   addi v22, v10, 1  # live: [v11, zero, v22, v7, v8]
// [Asm] # control
// [Asm]   mv v7, v7  # live: [v11, zero, v22, v7, v8]
// [Asm]   mv v8, v8  # live: [v11, zero, v22, v7, v8]
// [Asm]   mv v9, zero  # live: [v11, zero, v22, v7, v8, v9]
// [Asm]   mv v10, v22  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   mv v11, v11  # live: [v7, v11, v10, zero, v9, v8]
// [Asm]   j .print_loop68l2_14_0  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # leaf true
// [Asm] T$_4_6:
// [Asm] # block info: defs: [fa0, fv3, v2], uses: [fa0, fv3, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_4_6_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 4593527504729830064  # live: [v2]
// [Asm]   fmv.d.x fv3, v2  # live: [fv3]
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main94l3_15:
// [Asm] # block info: defs: [t1, v16, v26, v13, v7, ft0, ft1, fv12, a1, s11, fv14, fa1, fv5, fv2, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, v6, fv3, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, fv11, v23, ft3, fa0, t4, t2, v15], uses: [a5, a0, v26, v13, v7, fv12, a2, a1, fv14, s11, a3, v9, fa1, fa2, zero, fv11, v23, a4, v8, fa0, v6], upward_exposed: [fa2, a0, zero, fa0, s11, fa1], params_defs: []
// [Asm] # live_in: [fa2, a0, zero, fa0, s11, fa1], live_out: []
// [Asm] # block parameters: []
// [Asm] .main94l3_15_0:
// [Asm]   # save_ctx1  # live: [fa2, zero, a0, fa0, s11, fa1]
// [Asm]   fmv.d fv2, fa0  # live: [fa2, zero, a0, s11, fa1]
// [Asm]   fmv.d fv3, fa1  # live: [fa2, zero, a0, s11]
// [Asm]   mv v4, a0  # live: [fa2, zero, s11]
// [Asm]   fmv.d fv5, fa2  # live: [zero, s11]
// [Asm]   # save_ctx2  # live: [zero, s11]
// [Asm]   call minimbt_read_int  # live: [zero, a0, s11]
// [Asm]   mv v7, a0  # live: [zero, v7, s11]
// [Asm]   # restore_ctx2  # live: [zero, v7, s11]
// [Asm]   li v26, 2  # live: [zero, v26, v7, s11]
// [Asm]   mul v8, v7, v26  # live: [zero, v7, v8, s11]
// [Asm]   mul v9, v8, v7  # live: [zero, v7, v8, s11, v9]
// [Asm]   slliw v23, v9, 2  # live: [zero, v23, v7, v8, s11, v9]
// [Asm]   sub v6, s11, v23  # live: [zero, v7, v8, v6, v9]
// [Asm]   andi s11, v6, -8  # live: [zero, v7, v8, v6, v9]
// [Asm]   mv a1, v9  # live: [zero, v7, v8, v6]
// [Asm]   fld fv11, c_im.6, t5  # live: [zero, fv11, v7, v8, v6]
// [Asm]   fld fv12, c_re.5, t5  # live: [zero, fv11, v7, v8, fv12, v6]
// [Asm]   lw v13, iter.3  # live: [zero, v13, fv11, v7, v8, fv12, v6]
// [Asm]   fld fv14, limit_sq.2, t5  # live: [zero, v13, fv11, v7, v8, fv12, v6, fv14]
// [Asm]   # save_ctx2  # live: [zero, v13, fv11, v7, v8, fv12, v6, fv14]
// [Asm]   mv a0, v8  # live: [a0, zero, v13, fv11, v7, v8, fv12, v6, fv14]
// [Asm]   mv a1, v7  # live: [a0, zero, v13, fv11, v7, v8, fv12, v6, a1, fv14]
// [Asm]   mv a2, zero  # live: [a0, zero, v13, fv11, v7, v8, fv12, a2, v6, a1, fv14]
// [Asm]   mv a3, zero  # live: [a3, a0, zero, v13, fv11, v7, v8, fv12, a2, v6, a1, fv14]
// [Asm]   mv a4, v6  # live: [fv14, a3, a0, zero, v13, fv11, a4, v7, v8, fv12, a2, v6, a1]
// [Asm]   fmv.d fa0, fv11  # live: [a3, fv14, a0, zero, v13, a4, v8, fa0, v7, a2, fv12, a1, v6]
// [Asm]   fmv.d fa1, fv12  # live: [a3, fa1, a0, zero, v13, a4, v8, fa0, v7, a2, v6, a1, fv14]
// [Asm]   mv a5, v13  # live: [fa1, a5, a0, zero, a4, v7, v8, fa0, a2, a1, v6, a3, fv14]
// [Asm]   fmv.d fa2, fv14  # live: [fa1, fa2, a5, a0, zero, a4, v7, v8, fa0, a2, a1, v6, a3]
// [Asm]   call main_loop30l1_13  # live: [v8, v6, zero, a0, v7]
// [Asm]   mv v15, a0  # live: [v8, v6, zero, v7]
// [Asm]   # restore_ctx2  # live: [v8, v6, zero, v7]
// [Asm]   # save_ctx2  # live: [v8, v6, zero, v7]
// [Asm]   mv a0, v8  # live: [v6, zero, a0, v7]
// [Asm]   mv a1, v7  # live: [a1, v6, zero, a0]
// [Asm]   mv a2, zero  # live: [a2, a1, v6, zero, a0]
// [Asm]   mv a3, zero  # live: [a2, a1, v6, a3, zero, a0]
// [Asm]   mv a4, v6  # live: [a2, a1, a3, zero, a0, a4]
// [Asm]   call print_loop68l2_14  # live: [zero, a0]
// [Asm]   mv v16, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$c_im.6_10:
// [Asm] # block info: defs: [fa0, fv3, v2], uses: [fa0, fv3, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$c_im.6_10_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 4604885582990058455  # live: [v2]
// [Asm]   fmv.d.x fv3, v2  # live: [fv3]
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main_loop30l1_13:
// [Asm] # block info: defs: [v3, v11, fv10, v14, v5, v13, fv8, fv19, v12, fv16, v9, v18, v4, v6, v15, fv17, fv7, v2], uses: [v2, fv10, v5, a5, a0, fv8, a2, a1, a3, fa1, v9, fa2, a4, fa0, v4, v6, fv7, v3], upward_exposed: [a5, fa2, a0, a4, fa0, a2, a1, a3, fa1], params_defs: []
// [Asm] # live_in: [a5, fa2, a0, zero, a4, fa0, a2, a1, a3, fa1], live_out: [v11, v14, v18, v13, zero, fv19, v12, v15, fv16, fv17]
// [Asm] # block parameters: []
// [Asm] .main_loop30l1_13_14:
// [Asm]   # save_ctx1  # live: [fa2, a5, zero, a0, a4, fa0, a2, a1, a3, fa1]
// [Asm]   mv v2, a0  # live: [fa2, a5, zero, a4, fa0, a2, a1, a3, fa1, v2]
// [Asm]   mv v3, a1  # live: [v2, fa2, a5, zero, a4, fa0, a2, a3, fa1, v3]
// [Asm]   mv v4, a2  # live: [v2, fa2, a5, zero, a4, fa0, v4, a3, fa1, v3]
// [Asm]   mv v5, a3  # live: [v2, v5, fa2, a5, zero, a4, fa0, v4, fa1, v3]
// [Asm]   mv v6, a4  # live: [v2, v5, fa2, a5, zero, fa0, v4, v6, fa1, v3]
// [Asm]   fmv.d fv7, fa0  # live: [v2, v5, fa2, a5, zero, v4, v6, fa1, fv7, v3]
// [Asm]   fmv.d fv8, fa1  # live: [v2, v5, fa2, a5, zero, fv8, v4, v6, fv7, v3]
// [Asm]   mv v9, a5  # live: [v2, v5, fa2, zero, fv8, v4, v6, v9, fv7, v3]
// [Asm]   fmv.d fv10, fa2  # live: [v2, fv10, v5, zero, fv8, v4, v6, v9, fv7, v3]
// [Asm] # control
// [Asm]   mv v11, v2  # live: [v11, fv10, v5, zero, fv8, v4, v6, v9, fv7, v3]
// [Asm]   mv v12, v3  # live: [v11, fv10, v5, zero, fv8, v4, v6, v12, v9, fv7]
// [Asm]   mv v13, v4  # live: [v11, fv10, v5, v13, zero, fv8, v6, v12, v9, fv7]
// [Asm]   mv v14, v5  # live: [v11, fv10, v14, v13, zero, fv8, v6, v12, v9, fv7]
// [Asm]   mv v15, v6  # live: [v11, fv10, v14, v13, zero, fv8, v12, v15, v9, fv7]
// [Asm]   fmv.d fv16, fv7  # live: [v11, fv10, v14, v13, zero, fv8, v12, v15, fv16, v9]
// [Asm]   fmv.d fv17, fv8  # live: [v11, fv10, v14, v13, zero, v12, v15, fv16, fv17, v9]
// [Asm]   mv v18, v9  # live: [v11, fv10, v14, v18, v13, zero, v12, v15, fv16, fv17]
// [Asm]   fmv.d fv19, fv10  # live: [v11, v14, v18, v13, zero, fv19, v12, v15, fv16, fv17]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v14, v12], upward_exposed: [v14, v12], params_defs: [v11, v14, v18, v13, fv19, v12, v15, fv16, fv17]
// [Asm] # live_in: [v11, v14, v18, v13, zero, fv19, v12, v15, fv16, fv17], live_out: [v11, v14, zero, v13, v12, v15]
// [Asm] # block parameters: [v11, v12, v13, v14, v15, fv16, fv17, v18, fv19]
// [Asm] .main_loop30l1_13_0:
// [Asm] # control
// [Asm]   beq v14, v12, .main_loop30l1_13_1  # live: [v11, v14, v12, v15, zero, v13]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v11, v13], upward_exposed: [v11, v13], params_defs: []
// [Asm] # live_in: [v11, v14, v13, zero, v12, v15], live_out: [v11, v14, zero, v13, v12, v15]
// [Asm] # block parameters: []
// [Asm] .main_loop30l1_13_2:
// [Asm] # control
// [Asm]   beq v13, v11, .main_loop30l1_13_3  # live: [v11, v14, v12, v15, zero, v13]
// [Asm] 
// [Asm] # block info: defs: [fv24, fv30, a1, fa1, v82, fa2, fv25, ft6, a4, fa6, a6, ft10, ft5, fv27, fv83, ft4, v87, fv78, ft9, fa4, ft2, v92, v37, a3, a7, fa7, fv28, fa3, fv34, ft3, fv29, t2, fv88, fv23, t1, ft0, ft1, fv93, fv22, fv36, ft7, fv32, a5, a0, a2, fv26, v39, ft8, t3, t0, fa5, fv31, v77, fv33, fa0, v35, t4, v38], uses: [fv23, fv24, v14, v13, fv30, a1, v12, fa1, fv93, fv22, v82, fa2, fv25, zero, fv36, fv27, fv83, v11, v87, fv78, fv32, fa4, a0, v92, v37, fv26, fv28, fv31, fa3, v77, fv34, fv33, v35, fa0, fv29, v38, fv88], upward_exposed: [v11, v14, v12, v13, zero], params_defs: []
// [Asm] # live_in: [v11, v14, v13, zero, v12, v15], live_out: [v11, v14, zero, v13, v37, v15, v12, v39]
// [Asm] # block parameters: []
// [Asm] .main_loop30l1_13_4:
// [Asm]   fcvt.d.w fv22, v13  # live: [v11, fv22, v14, v13, zero, v15, v12]
// [Asm]   li v92, 4613937818241073152  # live: [v11, fv22, v14, v13, zero, v92, v15, v12]
// [Asm]   fmv.d.x fv93, v92  # live: [v11, fv22, v14, v13, zero, v15, v12, fv93]
// [Asm]   fmul.d fv23, fv93, fv22  # live: [v11, fv23, v14, v13, zero, v15, v12]
// [Asm]   fcvt.d.w fv24, v11  # live: [v11, fv23, fv24, v14, v13, zero, v15, v12]
// [Asm]   fdiv.d fv25, fv23, fv24  # live: [v11, v14, v13, zero, fv25, v15, v12]
// [Asm]   li v87, 4609434218613702656  # live: [v11, v14, v87, v13, zero, fv25, v15, v12]
// [Asm]   fmv.d.x fv88, v87  # live: [v11, v14, v13, zero, fv25, v15, v12, fv88]
// [Asm]   fsub.d fv26, fv25, fv88  # live: [v11, v14, v13, zero, v15, v12, fv26]
// [Asm]   fneg.d fv27, fv26  # live: [v11, v14, v13, zero, fv27, v15, v12]
// [Asm]   fcvt.d.w fv28, v14  # live: [v11, v14, fv28, v13, zero, fv27, v15, v12]
// [Asm]   li v82, 4613937818241073152  # live: [v11, v14, fv28, v82, v13, zero, fv27, v15, v12]
// [Asm]   fmv.d.x fv83, v82  # live: [v11, v14, fv28, v13, zero, fv27, v15, v12, fv83]
// [Asm]   fmul.d fv29, fv83, fv28  # live: [v11, v14, v13, zero, fv29, fv27, v15, v12]
// [Asm]   fcvt.d.w fv30, v12  # live: [v11, v14, v13, zero, fv30, fv29, fv27, v15, v12]
// [Asm]   fdiv.d fv31, fv29, fv30  # live: [v11, v14, fv31, v13, zero, fv27, v15, v12]
// [Asm]   li v77, 4609434218613702656  # live: [v11, v14, fv31, v13, zero, v77, fv27, v15, v12]
// [Asm]   fmv.d.x fv78, v77  # live: [v11, v14, fv78, fv31, v13, zero, fv27, v15, v12]
// [Asm]   fsub.d fv32, fv31, fv78  # live: [v11, v14, fv32, v13, zero, fv27, v15, v12]
// [Asm]   fld fv33, c_im.6, t5  # live: [v11, v14, fv32, v13, zero, fv33, fv27, v15, v12]
// [Asm]   fld fv34, c_re.5, t5  # live: [v11, v14, fv32, v13, zero, fv34, fv33, fv27, v15, v12]
// [Asm]   lw v35, iter.3  # live: [v11, v14, fv32, v13, zero, fv34, v35, fv33, fv27, v15, v12]
// [Asm]   fld fv36, limit_sq.2, t5  # live: [v11, v14, fv32, v13, zero, fv36, fv34, v35, fv33, fv27, v15, v12]
// [Asm]   # save_ctx2  # live: [v11, v14, fv32, v13, zero, fv36, fv34, v35, fv33, fv27, v15, v12]
// [Asm]   fmv.d fa0, fv27  # live: [v11, v14, fv32, v13, zero, fv36, fv34, v35, fa0, fv33, v12, v15]
// [Asm]   fmv.d fa1, fv32  # live: [v11, v14, v13, zero, fv36, fv34, v35, fa0, fv33, v12, v15, fa1]
// [Asm]   mv a0, zero  # live: [v11, v14, v13, zero, a0, fv36, fv34, v35, fa0, fv33, v12, v15, fa1]
// [Asm]   fmv.d fa2, fv33  # live: [v11, v14, fa2, v13, zero, a0, fv36, fv34, v35, fa0, v15, v12, fa1]
// [Asm]   fmv.d fa3, fv34  # live: [v11, v14, fa2, fa3, v13, zero, a0, fv36, fa0, v35, v12, v15, fa1]
// [Asm]   mv a1, v35  # live: [v11, v14, fa2, fa3, v13, zero, a0, fv36, fa0, a1, v15, v12, fa1]
// [Asm]   fmv.d fa4, fv36  # live: [v11, v14, fa2, fa3, v13, zero, fa4, a0, fa0, a1, v12, v15, fa1]
// [Asm]   call calc_pixel7l0_12  # live: [v11, v14, zero, v13, a0, v15, v12]
// [Asm]   mv v37, a0  # live: [v11, v14, zero, v13, v37, v15, v12]
// [Asm]   # restore_ctx2  # live: [v11, v14, zero, v13, v37, v15, v12]
// [Asm]   mul v38, v14, v11  # live: [v11, v14, zero, v13, v37, v38, v15, v12]
// [Asm]   add v39, v38, v13  # live: [v11, v14, zero, v13, v37, v15, v12, v39]
// [Asm] # control
// [Asm]   bge zero, v37, .main_loop30l1_13_5  # live: [v11, v14, zero, v13, v37, v15, v12, v39]
// [Asm] 
// [Asm] # block info: defs: [v69], uses: [v37, v69], upward_exposed: [v37], params_defs: []
// [Asm] # live_in: [v11, v14, v13, zero, v37, v15, v12, v39], live_out: [v11, v14, v13, zero, v37, v15, v12, v39]
// [Asm] # block parameters: []
// [Asm] .main_loop30l1_13_6:
// [Asm] # control
// [Asm]   li v69, 48  # live: [v11, v14, v69, v13, zero, v37, v15, v12, v39]
// [Asm]   blt v37, v69, .main_loop30l1_13_8  # live: [v11, v14, v13, zero, v37, v15, v12, v39]
// [Asm] 
// [Asm] # block info: defs: [v68, v42], uses: [v68], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v11, v14, v13, zero, v15, v12, v39], live_out: [v11, v14, v42, v13, zero, v15, v12, v39]
// [Asm] # block parameters: []
// [Asm] .main_loop30l1_13_7:
// [Asm] # control
// [Asm]   li v68, 48  # live: [v11, v14, v13, zero, v68, v15, v12, v39]
// [Asm]   mv v42, v68  # live: [v11, v14, v42, v13, zero, v15, v12, v39]
// [Asm] 
// [Asm] # block info: defs: [v43], uses: [v42], upward_exposed: [v42], params_defs: [v42]
// [Asm] # live_in: [v11, v14, v42, v13, zero, v15, v12, v39], live_out: [v11, v14, v13, zero, v43, v15, v12, v39]
// [Asm] # block parameters: [v42]
// [Asm] .main_loop30l1_13_9:
// [Asm] # control
// [Asm]   mv v43, v42  # live: [v11, v14, v13, zero, v43, v15, v12, v39]
// [Asm] 
// [Asm] # block info: defs: [fv50, v46, v49, v18, v13, v67, fv48, fv19, fv47, fv16, fv17], uses: [v11, fv50, v46, v14, v49, v13, v67, fv48, v43, v15, v12, fv47, v39], upward_exposed: [v11, v14, v13, v43, v15, v12, v39], params_defs: [v43]
// [Asm] # live_in: [v11, v14, v13, zero, v43, v15, v12, v39], live_out: [v11, v14, v18, v13, zero, fv19, v12, v15, fv16, fv17]
// [Asm] # block parameters: [v43]
// [Asm] .main_loop30l1_13_10:
// [Asm]   th.addsl v67, v15, v39, 2  # live: [v11, v14, zero, v13, v67, v43, v12, v15]
// [Asm]   sw v43, 0(v67)  # live: [v11, v14, zero, v13, v12, v15]
// [Asm]   addi v46, v13, 1  # live: [v11, v14, v46, zero, v12, v15]
// [Asm]   fld fv47, c_im.6, t5  # live: [v11, v14, v46, zero, v12, v15, fv47]
// [Asm]   fld fv48, c_re.5, t5  # live: [v11, v14, v46, zero, fv48, v12, v15, fv47]
// [Asm]   lw v49, iter.3  # live: [v11, v14, v46, v49, zero, fv48, v12, v15, fv47]
// [Asm]   fld fv50, limit_sq.2, t5  # live: [v11, fv50, v14, v46, v49, zero, fv48, v12, v15, fv47]
// [Asm] # control
// [Asm]   mv v11, v11  # live: [v11, fv50, v14, v46, v49, zero, fv48, v12, v15, fv47]
// [Asm]   mv v12, v12  # live: [v11, fv50, v14, v46, v49, zero, fv48, v12, v15, fv47]
// [Asm]   mv v13, v46  # live: [v11, fv50, v14, v49, v13, zero, fv48, v12, v15, fv47]
// [Asm]   mv v14, v14  # live: [v11, fv50, v14, v49, v13, zero, fv48, v12, v15, fv47]
// [Asm]   mv v15, v15  # live: [v11, fv50, v14, v49, v13, zero, fv48, v12, v15, fv47]
// [Asm]   fmv.d fv16, fv47  # live: [v11, fv50, v14, v49, v13, zero, fv48, v12, v15, fv16]
// [Asm]   fmv.d fv17, fv48  # live: [v11, fv50, v14, v49, v13, zero, v12, v15, fv16, fv17]
// [Asm]   mv v18, v49  # live: [v11, fv50, v14, v18, v13, zero, v12, v15, fv16, fv17]
// [Asm]   fmv.d fv19, fv50  # live: [v11, v14, v18, v13, zero, fv19, v12, v15, fv16, fv17]
// [Asm]   j .main_loop30l1_13_0  # live: [v11, v14, v18, v13, zero, fv19, v12, v15, fv16, fv17]
// [Asm] 
// [Asm] # block info: defs: [v56], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v56]
// [Asm] # block parameters: []
// [Asm] .main_loop30l1_13_1:
// [Asm] # control
// [Asm]   mv v56, zero  # live: [v56]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v56, a0], upward_exposed: [v56], params_defs: [v56]
// [Asm] # live_in: [v56], live_out: []
// [Asm] # block parameters: [v56]
// [Asm] .main_loop30l1_13_12:
// [Asm] # control
// [Asm]   mv a0, v56  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [fv52, v14, v18, v13, fv19, fv55, fv53, fv16, v54, fv17, v51], uses: [v11, fv52, v14, zero, fv55, fv53, v12, v15, v54, v51], upward_exposed: [v11, v14, v12, v15, zero], params_defs: []
// [Asm] # live_in: [v11, v14, v12, v15, zero], live_out: [v11, v14, v18, v13, zero, fv19, v12, v15, fv16, fv17]
// [Asm] # block parameters: []
// [Asm] .main_loop30l1_13_3:
// [Asm]   addi v51, v14, 1  # live: [v11, zero, v12, v15, v51]
// [Asm]   fld fv52, c_im.6, t5  # live: [v11, fv52, zero, v12, v15, v51]
// [Asm]   fld fv53, c_re.5, t5  # live: [v11, fv52, zero, fv53, v12, v15, v51]
// [Asm]   lw v54, iter.3  # live: [v11, fv52, zero, fv53, v12, v15, v54, v51]
// [Asm]   fld fv55, limit_sq.2, t5  # live: [v11, fv52, zero, fv55, fv53, v12, v15, v54, v51]
// [Asm] # control
// [Asm]   mv v11, v11  # live: [v11, fv52, zero, fv55, fv53, v12, v15, v54, v51]
// [Asm]   mv v12, v12  # live: [v11, fv52, zero, fv55, fv53, v12, v15, v54, v51]
// [Asm]   mv v13, zero  # live: [v11, fv52, v13, zero, fv55, fv53, v12, v15, v54, v51]
// [Asm]   mv v14, v51  # live: [v11, fv52, v14, v13, zero, fv55, fv53, v12, v15, v54]
// [Asm]   mv v15, v15  # live: [v11, fv52, v14, v13, zero, fv55, fv53, v12, v15, v54]
// [Asm]   fmv.d fv16, fv52  # live: [v11, v14, v13, zero, fv55, fv53, v12, v15, fv16, v54]
// [Asm]   fmv.d fv17, fv53  # live: [v11, v14, v13, zero, fv55, v12, v15, fv16, fv17, v54]
// [Asm]   mv v18, v54  # live: [v11, v14, v18, v13, zero, fv55, v12, v15, fv16, fv17]
// [Asm]   fmv.d fv19, fv55  # live: [v11, v14, v18, v13, zero, fv19, v12, v15, fv16, fv17]
// [Asm]   j .main_loop30l1_13_0  # live: [v11, v14, v18, v13, zero, fv19, v12, v15, fv16, fv17]
// [Asm] 
// [Asm] # block info: defs: [v43], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v11, v14, zero, v13, v15, v12, v39], live_out: [v11, v14, v13, zero, v43, v15, v12, v39]
// [Asm] # block parameters: []
// [Asm] .main_loop30l1_13_5:
// [Asm] # control
// [Asm]   mv v43, zero  # live: [v11, v14, v13, zero, v43, v15, v12, v39]
// [Asm]   j .main_loop30l1_13_10  # live: [v11, v14, v13, zero, v43, v15, v12, v39]
// [Asm] 
// [Asm] # block info: defs: [v42], uses: [v37], upward_exposed: [v37], params_defs: []
// [Asm] # live_in: [v11, v14, v13, zero, v37, v15, v12, v39], live_out: [v11, v14, v42, v13, zero, v15, v12, v39]
// [Asm] # block parameters: []
// [Asm] .main_loop30l1_13_8:
// [Asm] # control
// [Asm]   mv v42, v37  # live: [v11, v14, v42, v13, zero, v15, v12, v39]
// [Asm]   j .main_loop30l1_13_9  # live: [v11, v14, v42, v13, zero, v15, v12, v39]
// [Asm] 
// [Asm] # leaf true
// [Asm] T$c_re.5_8:
// [Asm] # block info: defs: [fv2, fv3, fa0], uses: [fv2, fv3, fa0], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$c_re.5_8_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   fld fv2, _4, t5  # live: [fv2]
// [Asm]   fneg.d fv3, fv2  # live: [fv3]
// [Asm] # control
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_20:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fv5, fv2, fa2, ft6, a4, fa6, a6, v4, ft5, ft10, v6, fv3, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [fv5, fv2, fa2, a0, fa0, v4, v6, fv3, fa1], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_20_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   fld fv2, c_im.6, t5  # live: [fv2]
// [Asm]   fld fv3, c_re.5, t5  # live: [fv2, fv3]
// [Asm]   lw v4, iter.3  # live: [v4, fv2, fv3]
// [Asm]   fld fv5, limit_sq.2, t5  # live: [fv5, v4, fv2, fv3]
// [Asm]   # save_ctx2  # live: [fv5, v4, fv2, fv3]
// [Asm]   fmv.d fa0, fv2  # live: [fv5, v4, fv3, fa0]
// [Asm]   fmv.d fa1, fv3  # live: [fv5, v4, fa1, fa0]
// [Asm]   mv a0, v4  # live: [fv5, fa1, a0, fa0]
// [Asm]   fmv.d fa2, fv5  # live: [fa2, fa1, a0, fa0]
// [Asm]   call main94l3_15  # live: [a0]
// [Asm]   mv v6, a0  # live: [v6]
// [Asm]   # restore_ctx2  # live: [v6]
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] calc_pixel7l0_12:
// [Asm] # block info: defs: [v11, fv10, v14, v7, fv8, fv12, fv6, fv15, fv5, fv9, fv2, fv13, v4, fv3], uses: [a0, fa4, v7, fv8, a1, fv6, fa1, fv5, fv2, fa2, fa3, fa0, v4, fv3], upward_exposed: [fa2, fa3, a0, fa4, fa0, a1, fa1], params_defs: []
// [Asm] # live_in: [fa2, fa3, a0, fa4, zero, fa0, a1, fa1], live_out: [fv9, v11, fv10, v14, zero, fv13, fv12, fv15]
// [Asm] # block parameters: []
// [Asm] .calc_pixel7l0_12_8:
// [Asm]   # save_ctx1  # live: [fa3, fa2, fa4, zero, a0, fa0, a1, fa1]
// [Asm]   fmv.d fv2, fa0  # live: [fv2, fa3, fa2, fa4, zero, a0, a1, fa1]
// [Asm]   fmv.d fv3, fa1  # live: [fv2, fa3, fa2, fa4, zero, a0, a1, fv3]
// [Asm]   mv v4, a0  # live: [fv2, fa3, fa2, fa4, zero, v4, a1, fv3]
// [Asm]   fmv.d fv5, fa2  # live: [fv5, fv2, fa3, zero, fa4, v4, a1, fv3]
// [Asm]   fmv.d fv6, fa3  # live: [fv5, fv2, zero, fa4, v4, a1, fv6, fv3]
// [Asm]   mv v7, a1  # live: [fv5, fv2, zero, fa4, v7, v4, fv6, fv3]
// [Asm]   fmv.d fv8, fa4  # live: [fv5, fv2, zero, fv8, v7, v4, fv6, fv3]
// [Asm] # control
// [Asm]   fmv.d fv9, fv2  # live: [fv9, fv5, zero, fv8, v7, v4, fv6, fv3]
// [Asm]   fmv.d fv10, fv3  # live: [fv9, fv5, fv10, zero, fv8, v7, v4, fv6]
// [Asm]   mv v11, v4  # live: [fv9, v11, fv5, fv10, zero, fv8, v7, fv6]
// [Asm]   fmv.d fv12, fv5  # live: [fv9, v11, fv10, zero, fv8, v7, fv12, fv6]
// [Asm]   fmv.d fv13, fv6  # live: [fv9, v11, fv10, zero, fv13, fv8, v7, fv12]
// [Asm]   mv v14, v7  # live: [fv9, v11, fv10, v14, zero, fv13, fv8, fv12]
// [Asm]   fmv.d fv15, fv8  # live: [fv9, v11, fv10, v14, zero, fv13, fv12, fv15]
// [Asm] 
// [Asm] # block info: defs: [v18, fv16, fv17], uses: [fv9, v11, fv10, v18], upward_exposed: [fv9, v11, fv10], params_defs: [fv9, v11, fv10, v14, fv13, fv12, fv15]
// [Asm] # live_in: [fv9, v11, fv10, v14, zero, fv13, fv12, fv15], live_out: [v11, fv9, fv10, zero, fv16, fv17]
// [Asm] # block parameters: [fv9, fv10, v11, fv12, fv13, v14, fv15]
// [Asm] .calc_pixel7l0_12_0:
// [Asm]   fmul.d fv16, fv9, fv9  # live: [v11, fv9, fv10, zero, fv16]
// [Asm]   fmul.d fv17, fv10, fv10  # live: [v11, fv9, fv10, zero, fv16, fv17]
// [Asm]   lw v18, iter.3  # live: [v11, fv9, fv10, v18, zero, fv16, fv17]
// [Asm] # control
// [Asm]   beq v11, v18, .calc_pixel7l0_12_1  # live: [v11, fv9, fv10, fv16, zero, fv17]
// [Asm] 
// [Asm] # block info: defs: [fv20, fv21, v22], uses: [fv21, fv20, fv16, fv17, zero, v22], upward_exposed: [fv16, fv17, zero], params_defs: []
// [Asm] # live_in: [v11, fv9, fv10, zero, fv16, fv17], live_out: [v11, fv9, fv10, zero, fv16, fv17]
// [Asm] # block parameters: []
// [Asm] .calc_pixel7l0_12_2:
// [Asm]   fadd.d fv20, fv16, fv17  # live: [v11, fv9, fv10, zero, fv20, fv16, fv17]
// [Asm]   fld fv21, limit_sq.2, t5  # live: [v11, fv9, fv10, zero, fv20, fv16, fv17, fv21]
// [Asm]   fle.d v22, fv21, fv20  # live: [v11, fv9, fv10, zero, v22, fv16, fv17]
// [Asm] # control
// [Asm]   bne v22, zero, .calc_pixel7l0_12_3  # live: [v11, fv9, fv10, fv16, zero, fv17]
// [Asm] 
// [Asm] # block info: defs: [v11, fv23, fv10, v14, fv32, v30, fv12, v31, fv15, fv26, fv9, fv46, fv28, fv25, v45, fv13, fv29, fv27], uses: [v11, fv23, fv10, fv32, v30, fv16, v31, fv26, fv9, fv46, fv28, fv25, v45, fv29, fv27, fv17], upward_exposed: [fv9, v11, fv10, fv16, fv17], params_defs: []
// [Asm] # live_in: [fv9, v11, fv10, zero, fv16, fv17], live_out: [fv9, v11, fv10, v14, zero, fv13, fv12, fv15]
// [Asm] # block parameters: []
// [Asm] .calc_pixel7l0_12_4:
// [Asm]   li v45, 4611686018427387904  # live: [v11, fv9, fv10, zero, v45, fv16, fv17]
// [Asm]   fmv.d.x fv46, v45  # live: [v11, fv9, fv46, fv10, zero, fv16, fv17]
// [Asm]   fmul.d fv23, fv46, fv9  # live: [v11, fv23, fv10, zero, fv16, fv17]
// [Asm]   fld fv25, c_im.6, t5  # live: [v11, fv23, fv10, zero, fv25, fv16, fv17]
// [Asm]   fmadd.d fv26, fv23, fv10, fv25  # live: [v11, zero, fv25, fv16, fv26, fv17]
// [Asm]   fsub.d fv27, fv16, fv17  # live: [v11, zero, fv25, fv27, fv26]
// [Asm]   fld fv28, c_re.5, t5  # live: [v11, fv28, zero, fv25, fv27, fv26]
// [Asm]   fadd.d fv29, fv27, fv28  # live: [v11, fv28, zero, fv25, fv29, fv26]
// [Asm]   addi v30, v11, 1  # live: [fv28, zero, fv25, v30, fv29, fv26]
// [Asm]   lw v31, iter.3  # live: [fv28, zero, fv25, v30, fv29, v31, fv26]
// [Asm]   fld fv32, limit_sq.2, t5  # live: [fv28, fv32, zero, fv25, v30, fv29, v31, fv26]
// [Asm] # control
// [Asm]   fmv.d fv9, fv29  # live: [fv9, fv28, fv32, zero, fv25, v30, v31, fv26]
// [Asm]   fmv.d fv10, fv26  # live: [fv9, fv10, fv28, fv32, zero, fv25, v30, v31]
// [Asm]   mv v11, v30  # live: [fv9, v11, fv10, fv28, fv32, zero, fv25, v31]
// [Asm]   fmv.d fv12, fv25  # live: [fv9, v11, fv10, fv28, fv32, zero, fv12, v31]
// [Asm]   fmv.d fv13, fv28  # live: [fv9, v11, fv10, fv32, zero, fv13, fv12, v31]
// [Asm]   mv v14, v31  # live: [fv9, v11, fv10, v14, fv32, zero, fv13, fv12]
// [Asm]   fmv.d fv15, fv32  # live: [fv9, v11, fv10, v14, zero, fv13, fv12, fv15]
// [Asm]   j .calc_pixel7l0_12_0  # live: [fv9, v11, fv10, v14, zero, fv13, fv12, fv15]
// [Asm] 
// [Asm] # block info: defs: [v34, v35], uses: [v34], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v35]
// [Asm] # block parameters: []
// [Asm] .calc_pixel7l0_12_1:
// [Asm]   lw v34, iter.3  # live: [v34]
// [Asm] # control
// [Asm]   mv v35, v34  # live: [v35]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v35], upward_exposed: [v35], params_defs: [v35]
// [Asm] # live_in: [v35], live_out: []
// [Asm] # block parameters: [v35]
// [Asm] .calc_pixel7l0_12_6:
// [Asm] # control
// [Asm]   mv a0, v35  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v33], uses: [v11], upward_exposed: [v11], params_defs: []
// [Asm] # live_in: [v11], live_out: [v33]
// [Asm] # block parameters: []
// [Asm] .calc_pixel7l0_12_3:
// [Asm] # control
// [Asm]   mv v33, v11  # live: [v33]
// [Asm] 
// [Asm] # block info: defs: [v35], uses: [v33], upward_exposed: [v33], params_defs: [v33]
// [Asm] # live_in: [v33], live_out: [v35]
// [Asm] # block parameters: [v33]
// [Asm] .calc_pixel7l0_12_5:
// [Asm] # control
// [Asm]   mv v35, v33  # live: [v35]
// [Asm]   j .calc_pixel7l0_12_6  # live: [v35]
// [Asm] 
// [Asm] # leaf true
// [Asm] T$iter.3_4:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$iter.3_4_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 300  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$limit_sq.2_2:
// [Asm] # block info: defs: [fv2, fv3, fa0], uses: [fv2, fv3, fa0], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$limit_sq.2_2_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   fld fv2, limit.1, t5  # live: [fv2]
// [Asm]   fmul.d fv3, fv2, fv2  # live: [fv3]
// [Asm] # control
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0, fa0, sp, s0, ra, s11, t5], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$limit.1_0  # live: [s0, fa0]
// [Asm]   la t5, limit.1  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$limit_sq.2_2  # live: [s0, fa0]
// [Asm]   la t5, limit_sq.2  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$iter.3_4  # live: [s0, a0]
// [Asm]   la t5, iter.3  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$_4_6  # live: [s0, fa0]
// [Asm]   la t5, _4  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$c_re.5_8  # live: [s0, fa0]
// [Asm]   la t5, c_re.5  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$c_im.6_10  # live: [s0, fa0]
// [Asm]   la t5, c_im.6  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$start_20  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] iter.3:
// [Asm]   .zero 4
// [Asm] c_im.6:
// [Asm]   .zero 8
// [Asm] start:
// [Asm]   .zero 4
// [Asm] _4:
// [Asm]   .zero 8
// [Asm] limit_sq.2:
// [Asm]   .zero 8
// [Asm] limit.1:
// [Asm]   .zero 8
// [Asm] c_re.5:
// [Asm]   .zero 8
// [Asm] 
// [Knf] build_knf: Let(("limit", Double), Double(2), Let(("limit_sq", Double), Prim(Var("limit"), Var("limit"), Mul, kind=Some(Double)), Let(("iter", Int), Int(300), Let(("c_re", Double), Neg(Double(0.123), kind=Some(Double)), Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))))))))))
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Let(("limit_sq", Double), Prim(Var("limit"), Var("limit"), Mul, kind=Some(Double)), Let(("iter", Int), Int(300), Let(("c_re", Double), Neg(Double(0.123), kind=Some(Double)), Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))))))))))
// [Knf] build_knf: Prim(Var("limit"), Var("limit"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("limit")
// [Knf] build_knf: Var("limit")
// [Knf] build_knf: Let(("iter", Int), Int(300), Let(("c_re", Double), Neg(Double(0.123), kind=Some(Double)), Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))))))))
// [Knf] build_knf: Int(300)
// [Knf] build_knf: Let(("c_re", Double), Neg(Double(0.123), kind=Some(Double)), Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))))))))
// [Knf] build_knf: Neg(Double(0.123), kind=Some(Double))
// [Knf] build_knf: Double(0.123)
// [Knf] build_knf: Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))))))
// [Knf] build_knf: Double(0.745)
// [Knf] build_knf: LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))))))
// [Knf] build_knf: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))
// [Knf] build_knf: Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))]))))))
// [Knf] build_knf: Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))
// [Knf] build_knf: Var("it")
// [Knf] build_knf: Var("iter")
// [Knf] build_knf: Var("iter")
// [Knf] build_knf: If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: Var("limit_sq")
// [Knf] build_knf: Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))
// [Knf] build_knf: Var("zr2")
// [Knf] build_knf: Var("zi2")
// [Knf] build_knf: Var("it")
// [Knf] build_knf: Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double))
// [Knf] build_knf: Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double))
// [Knf] build_knf: Prim(Double(2), Var("zr"), Mul, kind=Some(Double))
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: Var("c_im")
// [Knf] build_knf: Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double))
// [Knf] build_knf: Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double))
// [Knf] build_knf: Var("zr2")
// [Knf] build_knf: Var("zi2")
// [Knf] build_knf: Var("c_re")
// [Knf] build_knf: App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("calc_pixel")
// [Knf] build_knf: Var("new_zr")
// [Knf] build_knf: Var("new_zi")
// [Knf] build_knf: Prim(Var("it"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("it")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))))
// [Knf] build_knf: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: If(LE(Int(48), Var("i")), Int(48), Var("i"))
// [Knf] build_knf: Int(48)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(48)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))))
// [Knf] build_knf: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])
// [Knf] build_knf: Var("main_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Var("y"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))
// [Knf] build_knf: Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double))
// [Knf] build_knf: Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double))
// [Knf] build_knf: Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double))
// [Knf] build_knf: Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double))
// [Knf] build_knf: Double(3)
// [Knf] build_knf: App(Var("float_of_int"), [Var("x")])
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("float_of_int"), [Var("w")])
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Double(1.5)
// [Knf] build_knf: Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))
// [Knf] build_knf: Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double))
// [Knf] build_knf: Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double))
// [Knf] build_knf: Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double))
// [Knf] build_knf: Double(3)
// [Knf] build_knf: App(Var("float_of_int"), [Var("y")])
// [Knf] build_knf: Var("y")
// [Knf] build_knf: App(Var("float_of_int"), [Var("h")])
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Double(1.5)
// [Knf] build_knf: Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))
// [Knf] build_knf: App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)])
// [Knf] build_knf: Var("calc_pixel")
// [Knf] build_knf: Var("cr")
// [Knf] build_knf: Var("ci")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))
// [Knf] build_knf: Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")]))
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Var("y"), Var("w"), Mul, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("clamp"), [Var("res")])
// [Knf] build_knf: Var("clamp")
// [Knf] build_knf: Var("res")
// [Knf] build_knf: App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])
// [Knf] build_knf: Var("main_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))
// [Knf] build_knf: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]))
// [Knf] build_knf: App(Var("print_char"), [Int(10)])
// [Knf] build_knf: Int(10)
// [Knf] build_knf: App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])
// [Knf] build_knf: Var("print_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Var("y"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))
// [Knf] build_knf: App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))])
// [Knf] build_knf: Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))
// [Knf] build_knf: Int(48)
// [Knf] build_knf: Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Var("y"), Var("w"), Mul, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])
// [Knf] build_knf: Var("print_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))
// [Knf] build_knf: App(Var("read_int"), [])
// [Knf] build_knf: Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit))))
// [Knf] build_knf: Prim(Var("h"), Int(2), Mul, kind=Some(Int))
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))
// [Knf] build_knf: Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0))
// [Knf] build_knf: Prim(Var("w"), Var("h"), Mul, kind=Some(Int))
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit))
// [Knf] build_knf: App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")])
// [Knf] build_knf: Var("main_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)
// [Knf] build_knf: App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")])
// [Knf] build_knf: Var("print_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .option arch, +xtheadba
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$limit.1_0
// [Main]   .type T$limit.1_0, @function
// [Main] # leaf true
// [Main] T$limit.1_0:
// [Main] .T$limit.1_0_0:
// [Main]   li a0, 4611686018427387904
// [Main]   fmv.d.x fa0, a0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl print_loop68l2_14
// [Main]   .type print_loop68l2_14, @function
// [Main] # leaf false
// [Main] print_loop68l2_14:
// [Main] .print_loop68l2_14_8:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   mv s2, a0
// [Main]   mv s3, a1
// [Main]   mv s4, a2
// [Main]   mv s1, a3
// [Main]   mv s0, a4
// [Main] 
// [Main] .print_loop68l2_14_0:
// [Main]   beq s1, s3, .print_loop68l2_14_1
// [Main] 
// [Main] .print_loop68l2_14_2:
// [Main]   beq s4, s2, .print_loop68l2_14_3
// [Main] 
// [Main] .print_loop68l2_14_4:
// [Main]   mul a0, s1, s2
// [Main]   add a0, a0, s4
// [Main]   th.addsl a0, s0, a0, 2
// [Main]   lw a0, 0(a0)
// [Main]   addi a0, a0, 48
// [Main]   call minimbt_print_char
// [Main]   addi a0, s4, 1
// [Main]   mv s4, a0
// [Main]   j .print_loop68l2_14_0
// [Main] 
// [Main] .print_loop68l2_14_1:
// [Main]   mv a0, zero
// [Main] 
// [Main] .print_loop68l2_14_6:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main] .print_loop68l2_14_3:
// [Main]   li a0, 10
// [Main]   call minimbt_print_char
// [Main]   addi a0, s1, 1
// [Main]   mv s4, zero
// [Main]   mv s1, a0
// [Main]   j .print_loop68l2_14_0
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_4_6
// [Main]   .type T$_4_6, @function
// [Main] # leaf true
// [Main] T$_4_6:
// [Main] .T$_4_6_0:
// [Main]   li a0, 4593527504729830064
// [Main]   fmv.d.x fa0, a0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main94l3_15
// [Main]   .type main94l3_15, @function
// [Main] # leaf false
// [Main] main94l3_15:
// [Main] .main94l3_15_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   fmv.d fa0, fa1
// [Main]   fmv.d fa0, fa2
// [Main]   call minimbt_read_int
// [Main]   mv s0, a0
// [Main]   li a0, 2
// [Main]   mul s1, s0, a0
// [Main]   mul a0, s1, s0
// [Main]   slliw a1, a0, 2
// [Main]   sub s2, s11, a1
// [Main]   andi s11, s2, -8
// [Main]   mv a1, a0
// [Main]   fld fa0, c_im.6, t5
// [Main]   fld fa1, c_re.5, t5
// [Main]   lw a5, iter.3
// [Main]   fld fa2, limit_sq.2, t5
// [Main]   mv a0, s1
// [Main]   mv a1, s0
// [Main]   mv a2, zero
// [Main]   mv a3, zero
// [Main]   mv a4, s2
// [Main]   call main_loop30l1_13
// [Main]   mv a0, s1
// [Main]   mv a1, s0
// [Main]   mv a2, zero
// [Main]   mv a3, zero
// [Main]   mv a4, s2
// [Main]   call print_loop68l2_14
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$c_im.6_10
// [Main]   .type T$c_im.6_10, @function
// [Main] # leaf true
// [Main] T$c_im.6_10:
// [Main] .T$c_im.6_10_0:
// [Main]   li a0, 4604885582990058455
// [Main]   fmv.d.x fa0, a0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main_loop30l1_13
// [Main]   .type main_loop30l1_13, @function
// [Main] # leaf false
// [Main] main_loop30l1_13:
// [Main] .main_loop30l1_13_14:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   mv s0, a0
// [Main]   mv s4, a1
// [Main]   mv s2, a2
// [Main]   mv s1, a3
// [Main]   mv s3, a4
// [Main]   mv a0, a5
// [Main] 
// [Main] .main_loop30l1_13_0:
// [Main]   beq s1, s4, .main_loop30l1_13_1
// [Main] 
// [Main] .main_loop30l1_13_2:
// [Main]   beq s2, s0, .main_loop30l1_13_3
// [Main] 
// [Main] .main_loop30l1_13_4:
// [Main]   fcvt.d.w fa0, s2
// [Main]   li a0, 4613937818241073152
// [Main]   fmv.d.x fa1, a0
// [Main]   fmul.d fa0, fa1, fa0
// [Main]   fcvt.d.w fa1, s0
// [Main]   fdiv.d fa0, fa0, fa1
// [Main]   li a0, 4609434218613702656
// [Main]   fmv.d.x fa1, a0
// [Main]   fsub.d fa0, fa0, fa1
// [Main]   fneg.d fa0, fa0
// [Main]   fcvt.d.w fa1, s1
// [Main]   li a0, 4613937818241073152
// [Main]   fmv.d.x fa2, a0
// [Main]   fmul.d fa1, fa2, fa1
// [Main]   fcvt.d.w fa2, s4
// [Main]   fdiv.d fa1, fa1, fa2
// [Main]   li a0, 4609434218613702656
// [Main]   fmv.d.x fa2, a0
// [Main]   fsub.d fa1, fa1, fa2
// [Main]   fld fa2, c_im.6, t5
// [Main]   fld fa3, c_re.5, t5
// [Main]   lw a1, iter.3
// [Main]   fld fa4, limit_sq.2, t5
// [Main]   mv a0, zero
// [Main]   call calc_pixel7l0_12
// [Main]   mul a1, s1, s0
// [Main]   add a1, a1, s2
// [Main]   bge zero, a0, .main_loop30l1_13_5
// [Main] 
// [Main] .main_loop30l1_13_6:
// [Main]   li a2, 48
// [Main]   blt a0, a2, .main_loop30l1_13_8
// [Main] 
// [Main] .main_loop30l1_13_7:
// [Main]   li a0, 48
// [Main] 
// [Main] .main_loop30l1_13_9:
// [Main] 
// [Main] .main_loop30l1_13_10:
// [Main]   th.addsl a1, s3, a1, 2
// [Main]   sw a0, 0(a1)
// [Main]   addi a1, s2, 1
// [Main]   fld fa0, c_im.6, t5
// [Main]   fld fa1, c_re.5, t5
// [Main]   lw a0, iter.3
// [Main]   fld fa2, limit_sq.2, t5
// [Main]   mv s2, a1
// [Main]   j .main_loop30l1_13_0
// [Main] 
// [Main] .main_loop30l1_13_1:
// [Main]   mv a0, zero
// [Main] 
// [Main] .main_loop30l1_13_12:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main] .main_loop30l1_13_3:
// [Main]   addi a1, s1, 1
// [Main]   fld fa0, c_im.6, t5
// [Main]   fld fa1, c_re.5, t5
// [Main]   lw a0, iter.3
// [Main]   fld fa2, limit_sq.2, t5
// [Main]   mv s2, zero
// [Main]   mv s1, a1
// [Main]   j .main_loop30l1_13_0
// [Main] 
// [Main] .main_loop30l1_13_5:
// [Main]   mv a0, zero
// [Main]   j .main_loop30l1_13_10
// [Main] 
// [Main] .main_loop30l1_13_8:
// [Main]   j .main_loop30l1_13_9
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$c_re.5_8
// [Main]   .type T$c_re.5_8, @function
// [Main] # leaf true
// [Main] T$c_re.5_8:
// [Main] .T$c_re.5_8_0:
// [Main]   fld fa0, _4, t5
// [Main]   fneg.d fa0, fa0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_20
// [Main]   .type T$start_20, @function
// [Main] # leaf false
// [Main] T$start_20:
// [Main] .T$start_20_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   fld fa0, c_im.6, t5
// [Main]   fld fa1, c_re.5, t5
// [Main]   lw a0, iter.3
// [Main]   fld fa2, limit_sq.2, t5
// [Main]   call main94l3_15
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl calc_pixel7l0_12
// [Main]   .type calc_pixel7l0_12, @function
// [Main] # leaf true
// [Main] calc_pixel7l0_12:
// [Main] .calc_pixel7l0_12_8:
// [Main]   fmv.d fa7, fa0
// [Main]   fmv.d fa6, fa1
// [Main]   fmv.d fa5, fa2
// [Main]   fmv.d fa0, fa3
// [Main]   fmv.d fa3, fa4
// [Main]   fmv.d fa1, fa7
// [Main]   fmv.d fa2, fa6
// [Main]   fmv.d fa4, fa5
// [Main] 
// [Main] .calc_pixel7l0_12_0:
// [Main]   fmul.d fa0, fa1, fa1
// [Main]   fmul.d fa3, fa2, fa2
// [Main]   lw a1, iter.3
// [Main]   beq a0, a1, .calc_pixel7l0_12_1
// [Main] 
// [Main] .calc_pixel7l0_12_2:
// [Main]   fadd.d fa4, fa0, fa3
// [Main]   fld fa5, limit_sq.2, t5
// [Main]   fle.d a1, fa5, fa4
// [Main]   bne a1, zero, .calc_pixel7l0_12_3
// [Main] 
// [Main] .calc_pixel7l0_12_4:
// [Main]   li a1, 4611686018427387904
// [Main]   fmv.d.x fa4, a1
// [Main]   fmul.d fa1, fa4, fa1
// [Main]   fld fa4, c_im.6, t5
// [Main]   fmadd.d fa2, fa1, fa2, fa4
// [Main]   fsub.d fa1, fa0, fa3
// [Main]   fld fa0, c_re.5, t5
// [Main]   fadd.d fa1, fa1, fa0
// [Main]   addi a0, a0, 1
// [Main]   lw a1, iter.3
// [Main]   fld fa3, limit_sq.2, t5
// [Main]   j .calc_pixel7l0_12_0
// [Main] 
// [Main] .calc_pixel7l0_12_1:
// [Main]   lw a0, iter.3
// [Main] 
// [Main] .calc_pixel7l0_12_6:
// [Main]   ret
// [Main] 
// [Main] .calc_pixel7l0_12_3:
// [Main] 
// [Main] .calc_pixel7l0_12_5:
// [Main]   j .calc_pixel7l0_12_6
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$iter.3_4
// [Main]   .type T$iter.3_4, @function
// [Main] # leaf true
// [Main] T$iter.3_4:
// [Main] .T$iter.3_4_0:
// [Main]   li a0, 300
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$limit_sq.2_2
// [Main]   .type T$limit_sq.2_2, @function
// [Main] # leaf true
// [Main] T$limit_sq.2_2:
// [Main] .T$limit_sq.2_2_0:
// [Main]   fld fa0, limit.1, t5
// [Main]   fmul.d fa0, fa0, fa0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$limit.1_0
// [Main]   la t5, limit.1
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$limit_sq.2_2
// [Main]   la t5, limit_sq.2
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$iter.3_4
// [Main]   la t5, iter.3
// [Main]   sw a0, 0(t5)
// [Main]   call T$_4_6
// [Main]   la t5, _4
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$c_re.5_8
// [Main]   la t5, c_re.5
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$c_im.6_10
// [Main]   la t5, c_im.6
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$start_20
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl iter.3
// [Main]   .type iter.3, @object
// [Main] iter.3:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl c_im.6
// [Main]   .type c_im.6, @object
// [Main] c_im.6:
// [Main]   .zero 8
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _4
// [Main]   .type _4, @object
// [Main] _4:
// [Main]   .zero 8
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl limit_sq.2
// [Main]   .type limit_sq.2, @object
// [Main] limit_sq.2:
// [Main]   .zero 8
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl limit.1
// [Main]   .type limit.1, @object
// [Main] limit.1:
// [Main]   .zero 8
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl c_re.5
// [Main]   .type c_re.5, @object
// [Main] c_re.5:
// [Main]   .zero 8
// [Main] 
// [Wasm] Lowering function T$_4_6
// [Wasm] Lowering control Return(args=[Double(val=0.123)])
// [Wasm] Lowered function T$_4_6 to wasm
// [Wasm] Lowering function calc_pixel7l0_12
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b6, args=[Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=2), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%8), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::5)
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%9), Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::4)
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%12), Insn(iref=%13)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::1)
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%14), Insn(iref=%11), Insn(iref=%15), Insn(iref=%10), Insn(iref=%13), Insn(iref=%18), Insn(iref=%19)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::1)
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%6), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Branch(cond=Insn(iref=%7), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.2), Insn(iref=%2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b7, args=[FnParam(fref=f12, fpref=$f.0), FnParam(fref=f12, fpref=$f.1), FnParam(fref=f12, fpref=$f.2), FnParam(fref=f12, fpref=$f.3), FnParam(fref=f12, fpref=$f.4), FnParam(fref=f12, fpref=$f.5), FnParam(fref=f12, fpref=$f.6)])
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.6) -> $$f.6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.6) -> $$f.6
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function calc_pixel7l0_12 to wasm
// [Wasm] Lowering function T$iter.3_4
// [Wasm] Lowering control Return(args=[Int32(val=300)])
// [Wasm] Lowered function T$iter.3_4 to wasm
// [Wasm] Lowering function T$c_re.5_8
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::3)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Double, op=Neg, args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Return(args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function T$c_re.5_8 to wasm
// [Wasm] Lowering function T$limit.1_0
// [Wasm] Lowering control Return(args=[Double(val=2)])
// [Wasm] Lowered function T$limit.1_0 to wasm
// [Wasm] Lowering function main_loop30l1_13
// [Wasm] Lowering control Return(args=[BlockParam(bref=b12, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b12, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.3), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::5)
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::4)
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::1)
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Int32(val=0), Insn(iref=%2), BlockParam(bref=b0, bpref=$b.4), Insn(iref=%3), Insn(iref=%4), Insn(iref=%5), Insn(iref=%6)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.7) -> $b0.$b.7
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.8) -> $b0.$b.8
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), offset=Insn(iref=%25), width=@32), val=BlockParam(bref=b10, bpref=$b.0))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Get Local name BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::5)
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::4)
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::1)
// [Wasm] Get Local name Insn(iref=%33) -> $%33
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%29), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), Insn(iref=%30), Insn(iref=%31), Insn(iref=%32), Insn(iref=%33)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.7) -> $b0.$b.7
// [Wasm] Get Local name Insn(iref=%33) -> $%33
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.8) -> $b0.$b.8
// [Wasm] Lowering control Jump(target=b10, args=[Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Lowering control Jump(target=b10, args=[BlockParam(bref=b9, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Get Local name BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Lowering control Jump(target=b9, args=[Int32(val=48)])
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Lowering control Jump(target=b9, args=[Insn(iref=%23)])
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=48), Insn(iref=%23)])
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Lowering control Branch(cond=Insn(iref=%27), t=b7, t_args=[], f=b8, f_args=[])
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=3), Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Double, op=Div, args=[Insn(iref=%9), Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Insn(iref=%11), Double(val=1.5)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Op(ty=Double, op=Neg, args=[Insn(iref=%12)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[BlockParam(bref=b0, bpref=$b.3)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=3), Insn(iref=%14)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Op(ty=Double, op=Div, args=[Insn(iref=%15), Insn(iref=%16)])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Insn(iref=%17), Double(val=1.5)])
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::5)
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::4)
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::1)
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Call(ty=Int32, f=f12, args=[Insn(iref=%13), Insn(iref=%18), Int32(val=0), Insn(iref=%19), Insn(iref=%20), Insn(iref=%21), Insn(iref=%22)])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%24), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%23), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering control Branch(cond=Insn(iref=%26), t=b5, t_args=[], f=b6, f_args=[])
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b13, args=[FnParam(fref=f13, fpref=$f.0), FnParam(fref=f13, fpref=$f.1), FnParam(fref=f13, fpref=$f.2), FnParam(fref=f13, fpref=$f.3), FnParam(fref=f13, fpref=$f.4), FnParam(fref=f13, fpref=$f.5), FnParam(fref=f13, fpref=$f.6), FnParam(fref=f13, fpref=$f.7), FnParam(fref=f13, fpref=$f.8)])
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.6) -> $$f.6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.7) -> $$f.7
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.7) -> $b0.$b.7
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.8) -> $$f.8
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.8) -> $b0.$b.8
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.6) -> $$f.6
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.7) -> $$f.7
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.8) -> $$f.8
// [Wasm] Local BlockParam(bref=b0, bpref=$b.7) -> $b0.$b.7
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local Insn(iref=%33) -> $%33
// [Wasm] Local BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Local BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local Insn(iref=%27) -> $%27
// [Wasm] Local Insn(iref=%25) -> $%25
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%32) -> $%32
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.8) -> $b0.$b.8
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%31) -> $%31
// [Wasm] Local BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%24) -> $%24
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local Insn(iref=%29) -> $%29
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Insn(iref=%30) -> $%30
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function main_loop30l1_13 to wasm
// [Wasm] Lowering function main94l3_15
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_int", args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%0), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%1), Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Zero])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Mem(fref=f15, mref=m0) -> $f15.m0
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::5)
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::4)
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::1)
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Call(ty=Unit, f=f13, args=[Insn(iref=%1), Insn(iref=%0), Int32(val=0), Int32(val=0), Mem(fref=f15, mref=m0), Insn(iref=%4), Insn(iref=%5), Insn(iref=%6), Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Mem(fref=f15, mref=m0) -> $f15.m0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Call(ty=Unit, f=f14, args=[Insn(iref=%1), Insn(iref=%0), Int32(val=0), Int32(val=0), Mem(fref=f15, mref=m0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Mem(fref=f15, mref=m0) -> $f15.m0
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Get Local name FnParam(fref=f15, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f15, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f15, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f15, fpref=$f.3) -> $$f.3
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Mem(fref=f15, mref=m0) -> $f15.m0
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function main94l3_15 to wasm
// [Wasm] Lowering function T$c_im.6_10
// [Wasm] Lowering control Return(args=[Double(val=0.745)])
// [Wasm] Lowered function T$c_im.6_10 to wasm
// [Wasm] Lowering function T$limit_sq.2_2
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::0)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%0), Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function T$limit_sq.2_2 to wasm
// [Wasm] Lowering function print_loop68l2_14
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b6, args=[Unit])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Int32(val=10)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.3), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Int32(val=0), Insn(iref=%3), BlockParam(bref=b0, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%5), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), offset=Insn(iref=%6), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Int32(val=48), Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%10), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b7, args=[FnParam(fref=f14, fpref=$f.0), FnParam(fref=f14, fpref=$f.1), FnParam(fref=f14, fpref=$f.2), FnParam(fref=f14, fpref=$f.3), FnParam(fref=f14, fpref=$f.4)])
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.4) -> $$f.4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function print_loop68l2_14 to wasm
// [Wasm] Lowering function T$start_20
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::5)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::4)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::1)
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Call(ty=Unit, f=f15, args=[Insn(iref=%0), Insn(iref=%1), Insn(iref=%2), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Return(args=[Insn(iref=%4)])
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function T$start_20 to wasm
// [KnfOpt] freq: {calc_pixel7: Many(2), clamp25: Once, main_loop30: Many(3), print_loop68: Many(3), main94: Once}
// [KnfOpt] Inline threshold 2 27
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 27
// [KnfOpt] Inline decision rejected
// [KnfOpt] Knf inline Some(clamp25)
// [KnfOpt] Inline threshold 3 31
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 3 31
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 3 31
// [KnfOpt] Inline decision rejected
// [KnfOpt] Numbers of let rec: 4 4 0
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %20: Call(ty=Int32, f=f12, args=[Insn(iref=%14), Insn(iref=%11), Insn(iref=%15), Insn(iref=%16), Insn(iref=%17), Insn(iref=%18), Insn(iref=%19)])
// [CoreOpt] eliminated tail rec call %34: Call(ty=Unit, f=f13, args=[FnParam(fref=f13, fpref=$f.0), FnParam(fref=f13, fpref=$f.1), Insn(iref=%29), FnParam(fref=f13, fpref=$f.3), FnParam(fref=f13, fpref=$f.4), Insn(iref=%30), Insn(iref=%31), Insn(iref=%32), Insn(iref=%33)])
// [CoreOpt] eliminated tail rec call %7: Call(ty=Unit, f=f13, args=[FnParam(fref=f13, fpref=$f.0), FnParam(fref=f13, fpref=$f.1), Int32(val=0), Insn(iref=%2), FnParam(fref=f13, fpref=$f.4), Insn(iref=%3), Insn(iref=%4), Insn(iref=%5), Insn(iref=%6)])
// [CoreOpt] eliminated tail rec call %11: Call(ty=Unit, f=f14, args=[FnParam(fref=f14, fpref=$f.0), FnParam(fref=f14, fpref=$f.1), Insn(iref=%10), FnParam(fref=f14, fpref=$f.3), FnParam(fref=f14, fpref=$f.4)])
// [CoreOpt] eliminated tail rec call %4: Call(ty=Unit, f=f14, args=[FnParam(fref=f14, fpref=$f.0), FnParam(fref=f14, fpref=$f.1), Int32(val=0), Insn(iref=%3), FnParam(fref=f14, fpref=$f.4)])
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f12: Once, f4: Once, f8: Once, f0: Once, f13: Once, f15: Once, f10: Once, f2: Once, f14: Once, f20: Once})
// [CoreOpt] LVN subst Insn(iref=%16) with Insn(iref=%10)
// [CoreOpt] LVN subst Insn(iref=%17) with Insn(iref=%13)
// [CoreOpt] LVN subst Insn(iref=%1) with Insn(iref=%0)
