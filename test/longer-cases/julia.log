// [Knf] build_knf: Let(("limit", Double), Double(2), Let(("limit_sq", Double), Prim(Var("limit"), Var("limit"), Mul, kind=Some(Double)), Let(("iter", Int), Int(300), Let(("c_re", Double), Neg(Double(0.123), kind=Some(Double)), Let(("c_im", Double), Double(0.745), LetRec({tyvars: [], name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Double), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Double), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Double), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Double), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({tyvars: [], name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({tyvars: [], name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Double), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Double), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Int), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Unit), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({tyvars: [], name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Unit), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Unit), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({tyvars: [], name: ("main", Unit), args: [], body: Let(("h", Int), App(Var("read_int"), []), Let(("w", Int), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Array(Int)), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Unit), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Unit), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))))))))))
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Let(("limit_sq", Double), Prim(Var("limit"), Var("limit"), Mul, kind=Some(Double)), Let(("iter", Int), Int(300), Let(("c_re", Double), Neg(Double(0.123), kind=Some(Double)), Let(("c_im", Double), Double(0.745), LetRec({tyvars: [], name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Double), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Double), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Double), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Double), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({tyvars: [], name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({tyvars: [], name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Double), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Double), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Int), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Unit), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({tyvars: [], name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Unit), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Unit), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({tyvars: [], name: ("main", Unit), args: [], body: Let(("h", Int), App(Var("read_int"), []), Let(("w", Int), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Array(Int)), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Unit), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Unit), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))))))))))
// [Knf] build_knf: Prim(Var("limit"), Var("limit"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("limit")
// [Knf] build_knf: Var("limit")
// [Knf] build_knf: Let(("iter", Int), Int(300), Let(("c_re", Double), Neg(Double(0.123), kind=Some(Double)), Let(("c_im", Double), Double(0.745), LetRec({tyvars: [], name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Double), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Double), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Double), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Double), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({tyvars: [], name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({tyvars: [], name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Double), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Double), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Int), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Unit), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({tyvars: [], name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Unit), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Unit), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({tyvars: [], name: ("main", Unit), args: [], body: Let(("h", Int), App(Var("read_int"), []), Let(("w", Int), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Array(Int)), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Unit), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Unit), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))))))))
// [Knf] build_knf: Int(300)
// [Knf] build_knf: Let(("c_re", Double), Neg(Double(0.123), kind=Some(Double)), Let(("c_im", Double), Double(0.745), LetRec({tyvars: [], name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Double), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Double), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Double), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Double), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({tyvars: [], name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({tyvars: [], name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Double), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Double), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Int), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Unit), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({tyvars: [], name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Unit), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Unit), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({tyvars: [], name: ("main", Unit), args: [], body: Let(("h", Int), App(Var("read_int"), []), Let(("w", Int), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Array(Int)), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Unit), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Unit), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))))))))
// [Knf] build_knf: Neg(Double(0.123), kind=Some(Double))
// [Knf] build_knf: Double(0.123)
// [Knf] build_knf: Let(("c_im", Double), Double(0.745), LetRec({tyvars: [], name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Double), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Double), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Double), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Double), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({tyvars: [], name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({tyvars: [], name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Double), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Double), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Int), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Unit), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({tyvars: [], name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Unit), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Unit), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({tyvars: [], name: ("main", Unit), args: [], body: Let(("h", Int), App(Var("read_int"), []), Let(("w", Int), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Array(Int)), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Unit), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Unit), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))))))
// [Knf] build_knf: Double(0.745)
// [Knf] build_knf: LetRec({tyvars: [], name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Double), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Double), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Double), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Double), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({tyvars: [], name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({tyvars: [], name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Double), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Double), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Int), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Unit), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({tyvars: [], name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Unit), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Unit), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({tyvars: [], name: ("main", Unit), args: [], body: Let(("h", Int), App(Var("read_int"), []), Let(("w", Int), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Array(Int)), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Unit), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Unit), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))))))
// [Knf] build_knf: Let(("zr2", Double), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Double), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Double), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Double), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))
// [Knf] build_knf: Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Let(("zi2", Double), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Double), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Double), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))]))))))
// [Knf] build_knf: Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Double), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Double), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))
// [Knf] build_knf: Var("it")
// [Knf] build_knf: Var("iter")
// [Knf] build_knf: Var("iter")
// [Knf] build_knf: If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Double), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Double), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: Var("limit_sq")
// [Knf] build_knf: Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))
// [Knf] build_knf: Var("zr2")
// [Knf] build_knf: Var("zi2")
// [Knf] build_knf: Var("it")
// [Knf] build_knf: Let(("new_zi", Double), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Double), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double))
// [Knf] build_knf: Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double))
// [Knf] build_knf: Prim(Double(2), Var("zr"), Mul, kind=Some(Double))
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: Var("c_im")
// [Knf] build_knf: Let(("new_zr", Double), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double))
// [Knf] build_knf: Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double))
// [Knf] build_knf: Var("zr2")
// [Knf] build_knf: Var("zi2")
// [Knf] build_knf: Var("c_re")
// [Knf] build_knf: App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("calc_pixel")
// [Knf] build_knf: Var("new_zr")
// [Knf] build_knf: Var("new_zi")
// [Knf] build_knf: Prim(Var("it"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("it")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({tyvars: [], name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({tyvars: [], name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Double), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Double), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Int), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Unit), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({tyvars: [], name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Unit), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Unit), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({tyvars: [], name: ("main", Unit), args: [], body: Let(("h", Int), App(Var("read_int"), []), Let(("w", Int), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Array(Int)), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Unit), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Unit), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))))
// [Knf] build_knf: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: If(LE(Int(48), Var("i")), Int(48), Var("i"))
// [Knf] build_knf: Int(48)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(48)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: LetRec({tyvars: [], name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Double), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Double), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Int), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Unit), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({tyvars: [], name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Unit), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Unit), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({tyvars: [], name: ("main", Unit), args: [], body: Let(("h", Int), App(Var("read_int"), []), Let(("w", Int), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Array(Int)), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Unit), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Unit), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))))
// [Knf] build_knf: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Double), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Double), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Int), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Unit), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Double), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Double), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Int), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Unit), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])
// [Knf] build_knf: Var("main_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Var("y"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Let(("cr", Double), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Double), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Int), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Unit), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))
// [Knf] build_knf: Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double))
// [Knf] build_knf: Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double))
// [Knf] build_knf: Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double))
// [Knf] build_knf: Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double))
// [Knf] build_knf: Double(3)
// [Knf] build_knf: App(Var("float_of_int"), [Var("x")])
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("float_of_int"), [Var("w")])
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Double(1.5)
// [Knf] build_knf: Let(("ci", Double), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Int), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Unit), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))
// [Knf] build_knf: Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double))
// [Knf] build_knf: Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double))
// [Knf] build_knf: Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double))
// [Knf] build_knf: Double(3)
// [Knf] build_knf: App(Var("float_of_int"), [Var("y")])
// [Knf] build_knf: Var("y")
// [Knf] build_knf: App(Var("float_of_int"), [Var("h")])
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Double(1.5)
// [Knf] build_knf: Let(("res", Int), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Unit), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))
// [Knf] build_knf: App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)])
// [Knf] build_knf: Var("calc_pixel")
// [Knf] build_knf: Var("cr")
// [Knf] build_knf: Var("ci")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Unit), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))
// [Knf] build_knf: Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")]))
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Var("y"), Var("w"), Mul, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("clamp"), [Var("res")])
// [Knf] build_knf: Var("clamp")
// [Knf] build_knf: Var("res")
// [Knf] build_knf: App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])
// [Knf] build_knf: Var("main_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: LetRec({tyvars: [], name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Unit), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Unit), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({tyvars: [], name: ("main", Unit), args: [], body: Let(("h", Int), App(Var("read_int"), []), Let(("w", Int), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Array(Int)), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Unit), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Unit), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))
// [Knf] build_knf: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Unit), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Unit), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("x"), Var("w")), Let(("_", Unit), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Unit), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Let(("_", Unit), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]))
// [Knf] build_knf: App(Var("print_char"), [Int(10)])
// [Knf] build_knf: Int(10)
// [Knf] build_knf: App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])
// [Knf] build_knf: Var("print_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Var("y"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Let(("_", Unit), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))
// [Knf] build_knf: App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))])
// [Knf] build_knf: Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))
// [Knf] build_knf: Int(48)
// [Knf] build_knf: Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Var("y"), Var("w"), Mul, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])
// [Knf] build_knf: Var("print_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: LetRec({tyvars: [], name: ("main", Unit), args: [], body: Let(("h", Int), App(Var("read_int"), []), Let(("w", Int), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Array(Int)), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Unit), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Unit), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("h", Int), App(Var("read_int"), []), Let(("w", Int), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Array(Int)), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Unit), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Unit), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))
// [Knf] build_knf: App(Var("read_int"), [])
// [Knf] build_knf: Let(("w", Int), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Array(Int)), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Unit), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Unit), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit))))
// [Knf] build_knf: Prim(Var("h"), Int(2), Mul, kind=Some(Int))
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("ret", Array(Int)), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Unit), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Unit), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))
// [Knf] build_knf: Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0))
// [Knf] build_knf: Prim(Var("w"), Var("h"), Mul, kind=Some(Int))
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Unit), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Unit), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit))
// [Knf] build_knf: App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")])
// [Knf] build_knf: Var("main_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Let(("_", Unit), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)
// [Knf] build_knf: App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")])
// [Knf] build_knf: Var("print_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] function thunk_main(k) {
// [Main]   const limit_1 = 2;
// [Main]   const limit_sq_2 = limit_1 * limit_1;
// [Main]   const iter_3 = 300;
// [Main]   const _4 = 0.123;
// [Main]   const c_re_5 = -_4;
// [Main]   const c_im_6 = 0.745;
// [Main]   function calc_pixel_7(zr_9, zi_11, it_13, k) {
// [Main]     const zr2_14 = zr_9 * zr_9;
// [Main]     const zi2_15 = zi_11 * zi_11;
// [Main]     if (it_13 === iter_3) {
// [Main]       return k(iter_3)
// [Main]     } else {
// [Main]       const _16 = zr2_14 + zi2_15;
// [Main]       if (limit_sq_2 <= _16) {
// [Main]         return k(it_13)
// [Main]       } else {
// [Main]         const _17 = 2;
// [Main]         const _18 = _17 * zr_9;
// [Main]         const _19 = _18 * zi_11;
// [Main]         const new_zi_20 = _19 + c_im_6;
// [Main]         const _21 = zr2_14 - zi2_15;
// [Main]         const new_zr_22 = _21 + c_re_5;
// [Main]         const _23 = 1;
// [Main]         const _24 = it_13 + _23;
// [Main]         return $thunk(() => calc_pixel_7(new_zr_22, new_zi_20, _24, k))
// [Main]       }
// [Main]     }
// [Main]   }
// [Main]   function clamp_25(i_27, k) {
// [Main]     const _28 = 0;
// [Main]     if (i_27 <= _28) {
// [Main]       return k(0)
// [Main]     } else {
// [Main]       const _29 = 48;
// [Main]       if (_29 <= i_27) {
// [Main]         return k(48)
// [Main]       } else {
// [Main]         return k(i_27)
// [Main]       }
// [Main]     }
// [Main]   }
// [Main]   function main_loop_30(w_32, h_34, x_36, y_38, ret_40, k) {
// [Main]     if (y_38 === h_34) {
// [Main]       return k(null)
// [Main]     } else {
// [Main]       if (x_36 === w_32) {
// [Main]         const _41 = 0;
// [Main]         const _42 = 1;
// [Main]         const _43 = y_38 + _42;
// [Main]         return $thunk(() => main_loop_30(w_32, h_34, _41, _43, ret_40, k))
// [Main]       } else {
// [Main]         const _44 = 3;
// [Main]         const _45 = minimbt_float_of_int($force(x_36));
// [Main]         const _46 = _44 * _45;
// [Main]         const _47 = minimbt_float_of_int($force(w_32));
// [Main]         const _48 = _46 / _47;
// [Main]         const _49 = 1.5;
// [Main]         const _50 = _48 - _49;
// [Main]         const cr_51 = -_50;
// [Main]         const _52 = 3;
// [Main]         const _53 = minimbt_float_of_int($force(y_38));
// [Main]         const _54 = _52 * _53;
// [Main]         const _55 = minimbt_float_of_int($force(h_34));
// [Main]         const _56 = _54 / _55;
// [Main]         const _57 = 1.5;
// [Main]         const ci_58 = _56 - _57;
// [Main]         const _59 = 0;
// [Main]         return $thunk(() => calc_pixel_7(cr_51, ci_58, _59, function (res_60) {
// [Main]           const _61 = y_38 * w_32;
// [Main]           const _62 = _61 + x_36;
// [Main]           return $thunk(() => clamp_25(res_60, function (_63) {
// [Main]             const _65 = ret_40[_62] = _63;
// [Main]             const _66 = 1;
// [Main]             const _67 = x_36 + _66;
// [Main]             return $thunk(() => main_loop_30(w_32, h_34, _67, y_38, ret_40, k))
// [Main]           }
// [Main]           ))
// [Main]         }
// [Main]         ))
// [Main]       }
// [Main]     }
// [Main]   }
// [Main]   function print_loop_68(w_70, h_72, x_74, y_76, ret_78, k) {
// [Main]     if (y_76 === h_72) {
// [Main]       return k(null)
// [Main]     } else {
// [Main]       if (x_74 === w_70) {
// [Main]         const _79 = 10;
// [Main]         const _81 = minimbt_print_char($force(_79));
// [Main]         const _82 = 0;
// [Main]         const _83 = 1;
// [Main]         const _84 = y_76 + _83;
// [Main]         return $thunk(() => print_loop_68(w_70, h_72, _82, _84, ret_78, k))
// [Main]       } else {
// [Main]         const _85 = 48;
// [Main]         const _86 = y_76 * w_70;
// [Main]         const _87 = _86 + x_74;
// [Main]         const _88 = ret_78[_87];
// [Main]         const _89 = _85 + _88;
// [Main]         const _91 = minimbt_print_char($force(_89));
// [Main]         const _92 = 1;
// [Main]         const _93 = x_74 + _92;
// [Main]         return $thunk(() => print_loop_68(w_70, h_72, _93, y_76, ret_78, k))
// [Main]       }
// [Main]     }
// [Main]   }
// [Main]   function main_94(k) {
// [Main]     const h_95 = minimbt_read_int();
// [Main]     const _96 = 2;
// [Main]     const w_97 = h_95 * _96;
// [Main]     const _98 = w_97 * h_95;
// [Main]     const _99 = 0;
// [Main]     const ret_100 = minimbt_create_array($force(_98), $force(_99));
// [Main]     const _101 = 0;
// [Main]     const _102 = 0;
// [Main]     return $thunk(() => main_loop_30(w_97, h_95, _101, _102, ret_100, function (_104) {
// [Main]       const _105 = 0;
// [Main]       const _106 = 0;
// [Main]       return $thunk(() => print_loop_68(w_97, h_95, _105, _106, ret_100, function (_108) {
// [Main]         return $thunk(() => $thunk(() => k(null)))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main_94(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: Let(("limit", Double), Double(2), Let(("limit_sq", Double), Prim(Var("limit"), Var("limit"), Mul, kind=None), Let(("iter", Int), Int(300), Let(("c_re", Double), Neg(Double(0.123), kind=None), Let(("c_im", Double), Double(0.745), LetRec({tyvars: [], name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: None})), Prim(Var("zr"), Var("zr"), Mul, kind=None), Let(("zi2", Var({val: None})), Prim(Var("zi"), Var("zi"), Mul, kind=None), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=None)), Var("it"), Let(("new_zi", Var({val: None})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=None), Var("zi"), Mul, kind=None), Var("c_im"), Add, kind=None), Let(("new_zr", Var({val: None})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=None), Var("c_re"), Add, kind=None), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=None)])))))))}, LetRec({tyvars: [], name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({tyvars: [], name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=None), Var("ret")]), Let(("cr", Var({val: None})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=None), App(Var("float_of_int"), [Var("w")]), Div, kind=None), Double(1.5), Sub, kind=None), kind=None), Let(("ci", Var({val: None})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=None), App(Var("float_of_int"), [Var("h")]), Div, kind=None), Double(1.5), Sub, kind=None), Let(("res", Var({val: None})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: None})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=None), Var("x"), Add, kind=None), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=None), Var("y"), Var("ret")])))))))}, LetRec({tyvars: [], name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: None})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=None), Var("ret")])), Let(("_", Var({val: None})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=None), Var("x"), Add, kind=None)), Add, kind=None)]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=None), Var("y"), Var("ret")]))))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("h", Var({val: None})), App(Var("read_int"), []), Let(("w", Var({val: None})), Prim(Var("h"), Int(2), Mul, kind=None), Let(("ret", Var({val: None})), Array(Prim(Var("w"), Var("h"), Mul, kind=None), Int(0)), Let(("_", Var({val: None})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: None})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, Unit)))))))))) against Unit
// [Typer] check: Double(2) against Double
// [Typer] check: Let(("limit_sq", Double), Prim(Var("limit"), Var("limit"), Mul, kind=None), Let(("iter", Int), Int(300), Let(("c_re", Double), Neg(Double(0.123), kind=None), Let(("c_im", Double), Double(0.745), LetRec({tyvars: [], name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: None})), Prim(Var("zr"), Var("zr"), Mul, kind=None), Let(("zi2", Var({val: None})), Prim(Var("zi"), Var("zi"), Mul, kind=None), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=None)), Var("it"), Let(("new_zi", Var({val: None})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=None), Var("zi"), Mul, kind=None), Var("c_im"), Add, kind=None), Let(("new_zr", Var({val: None})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=None), Var("c_re"), Add, kind=None), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=None)])))))))}, LetRec({tyvars: [], name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({tyvars: [], name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=None), Var("ret")]), Let(("cr", Var({val: None})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=None), App(Var("float_of_int"), [Var("w")]), Div, kind=None), Double(1.5), Sub, kind=None), kind=None), Let(("ci", Var({val: None})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=None), App(Var("float_of_int"), [Var("h")]), Div, kind=None), Double(1.5), Sub, kind=None), Let(("res", Var({val: None})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: None})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=None), Var("x"), Add, kind=None), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=None), Var("y"), Var("ret")])))))))}, LetRec({tyvars: [], name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: None})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=None), Var("ret")])), Let(("_", Var({val: None})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=None), Var("x"), Add, kind=None)), Add, kind=None)]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=None), Var("y"), Var("ret")]))))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("h", Var({val: None})), App(Var("read_int"), []), Let(("w", Var({val: None})), Prim(Var("h"), Int(2), Mul, kind=None), Let(("ret", Var({val: None})), Array(Prim(Var("w"), Var("h"), Mul, kind=None), Int(0)), Let(("_", Var({val: None})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: None})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, Unit))))))))) against Unit
// [Typer] check: Prim(Var("limit"), Var("limit"), Mul, kind=None) against Double
// [Typer] check: Var("limit") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("limit") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Let(("iter", Int), Int(300), Let(("c_re", Double), Neg(Double(0.123), kind=None), Let(("c_im", Double), Double(0.745), LetRec({tyvars: [], name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: None})), Prim(Var("zr"), Var("zr"), Mul, kind=None), Let(("zi2", Var({val: None})), Prim(Var("zi"), Var("zi"), Mul, kind=None), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=None)), Var("it"), Let(("new_zi", Var({val: None})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=None), Var("zi"), Mul, kind=None), Var("c_im"), Add, kind=None), Let(("new_zr", Var({val: None})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=None), Var("c_re"), Add, kind=None), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=None)])))))))}, LetRec({tyvars: [], name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({tyvars: [], name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=None), Var("ret")]), Let(("cr", Var({val: None})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=None), App(Var("float_of_int"), [Var("w")]), Div, kind=None), Double(1.5), Sub, kind=None), kind=None), Let(("ci", Var({val: None})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=None), App(Var("float_of_int"), [Var("h")]), Div, kind=None), Double(1.5), Sub, kind=None), Let(("res", Var({val: None})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: None})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=None), Var("x"), Add, kind=None), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=None), Var("y"), Var("ret")])))))))}, LetRec({tyvars: [], name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: None})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=None), Var("ret")])), Let(("_", Var({val: None})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=None), Var("x"), Add, kind=None)), Add, kind=None)]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=None), Var("y"), Var("ret")]))))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("h", Var({val: None})), App(Var("read_int"), []), Let(("w", Var({val: None})), Prim(Var("h"), Int(2), Mul, kind=None), Let(("ret", Var({val: None})), Array(Prim(Var("w"), Var("h"), Mul, kind=None), Int(0)), Let(("_", Var({val: None})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: None})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, Unit)))))))) against Unit
// [Typer] check: Int(300) against Int
// [Typer] check: Let(("c_re", Double), Neg(Double(0.123), kind=None), Let(("c_im", Double), Double(0.745), LetRec({tyvars: [], name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: None})), Prim(Var("zr"), Var("zr"), Mul, kind=None), Let(("zi2", Var({val: None})), Prim(Var("zi"), Var("zi"), Mul, kind=None), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=None)), Var("it"), Let(("new_zi", Var({val: None})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=None), Var("zi"), Mul, kind=None), Var("c_im"), Add, kind=None), Let(("new_zr", Var({val: None})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=None), Var("c_re"), Add, kind=None), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=None)])))))))}, LetRec({tyvars: [], name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({tyvars: [], name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=None), Var("ret")]), Let(("cr", Var({val: None})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=None), App(Var("float_of_int"), [Var("w")]), Div, kind=None), Double(1.5), Sub, kind=None), kind=None), Let(("ci", Var({val: None})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=None), App(Var("float_of_int"), [Var("h")]), Div, kind=None), Double(1.5), Sub, kind=None), Let(("res", Var({val: None})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: None})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=None), Var("x"), Add, kind=None), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=None), Var("y"), Var("ret")])))))))}, LetRec({tyvars: [], name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: None})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=None), Var("ret")])), Let(("_", Var({val: None})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=None), Var("x"), Add, kind=None)), Add, kind=None)]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=None), Var("y"), Var("ret")]))))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("h", Var({val: None})), App(Var("read_int"), []), Let(("w", Var({val: None})), Prim(Var("h"), Int(2), Mul, kind=None), Let(("ret", Var({val: None})), Array(Prim(Var("w"), Var("h"), Mul, kind=None), Int(0)), Let(("_", Var({val: None})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: None})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, Unit))))))) against Unit
// [Typer] check: Neg(Double(0.123), kind=None) against Double
// [Typer] check: Double(0.123) against Double
// [Typer] check: Let(("c_im", Double), Double(0.745), LetRec({tyvars: [], name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: None})), Prim(Var("zr"), Var("zr"), Mul, kind=None), Let(("zi2", Var({val: None})), Prim(Var("zi"), Var("zi"), Mul, kind=None), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=None)), Var("it"), Let(("new_zi", Var({val: None})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=None), Var("zi"), Mul, kind=None), Var("c_im"), Add, kind=None), Let(("new_zr", Var({val: None})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=None), Var("c_re"), Add, kind=None), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=None)])))))))}, LetRec({tyvars: [], name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({tyvars: [], name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=None), Var("ret")]), Let(("cr", Var({val: None})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=None), App(Var("float_of_int"), [Var("w")]), Div, kind=None), Double(1.5), Sub, kind=None), kind=None), Let(("ci", Var({val: None})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=None), App(Var("float_of_int"), [Var("h")]), Div, kind=None), Double(1.5), Sub, kind=None), Let(("res", Var({val: None})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: None})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=None), Var("x"), Add, kind=None), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=None), Var("y"), Var("ret")])))))))}, LetRec({tyvars: [], name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: None})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=None), Var("ret")])), Let(("_", Var({val: None})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=None), Var("x"), Add, kind=None)), Add, kind=None)]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=None), Var("y"), Var("ret")]))))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("h", Var({val: None})), App(Var("read_int"), []), Let(("w", Var({val: None})), Prim(Var("h"), Int(2), Mul, kind=None), Let(("ret", Var({val: None})), Array(Prim(Var("w"), Var("h"), Mul, kind=None), Int(0)), Let(("_", Var({val: None})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: None})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, Unit)))))) against Unit
// [Typer] check: Double(0.745) against Double
// [Typer] check: LetRec({tyvars: [], name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: None})), Prim(Var("zr"), Var("zr"), Mul, kind=None), Let(("zi2", Var({val: None})), Prim(Var("zi"), Var("zi"), Mul, kind=None), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=None)), Var("it"), Let(("new_zi", Var({val: None})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=None), Var("zi"), Mul, kind=None), Var("c_im"), Add, kind=None), Let(("new_zr", Var({val: None})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=None), Var("c_re"), Add, kind=None), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=None)])))))))}, LetRec({tyvars: [], name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({tyvars: [], name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=None), Var("ret")]), Let(("cr", Var({val: None})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=None), App(Var("float_of_int"), [Var("w")]), Div, kind=None), Double(1.5), Sub, kind=None), kind=None), Let(("ci", Var({val: None})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=None), App(Var("float_of_int"), [Var("h")]), Div, kind=None), Double(1.5), Sub, kind=None), Let(("res", Var({val: None})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: None})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=None), Var("x"), Add, kind=None), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=None), Var("y"), Var("ret")])))))))}, LetRec({tyvars: [], name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: None})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=None), Var("ret")])), Let(("_", Var({val: None})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=None), Var("x"), Add, kind=None)), Add, kind=None)]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=None), Var("y"), Var("ret")]))))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("h", Var({val: None})), App(Var("read_int"), []), Let(("w", Var({val: None})), Prim(Var("h"), Int(2), Mul, kind=None), Let(("ret", Var({val: None})), Array(Prim(Var("w"), Var("h"), Mul, kind=None), Int(0)), Let(("_", Var({val: None})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: None})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, Unit))))) against Unit
// [Typer] typevars: []
// [Typer] check: Let(("zr2", Var({val: None})), Prim(Var("zr"), Var("zr"), Mul, kind=None), Let(("zi2", Var({val: None})), Prim(Var("zi"), Var("zi"), Mul, kind=None), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=None)), Var("it"), Let(("new_zi", Var({val: None})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=None), Var("zi"), Mul, kind=None), Var("c_im"), Add, kind=None), Let(("new_zr", Var({val: None})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=None), Var("c_re"), Add, kind=None), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=None)]))))))) against Int
// [Typer] infer: Prim(Var("zr"), Var("zr"), Mul, kind=None)
// [Typer] infer: Var("zr")
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] infer: Var("zr")
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] unify: Var({val: None}) and Double
// [Typer] union: Var({val: None}) and Double
// [Typer] check: Let(("zi2", Var({val: None})), Prim(Var("zi"), Var("zi"), Mul, kind=None), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=None)), Var("it"), Let(("new_zi", Var({val: None})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=None), Var("zi"), Mul, kind=None), Var("c_im"), Add, kind=None), Let(("new_zr", Var({val: None})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=None), Var("c_re"), Add, kind=None), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=None)])))))) against Int
// [Typer] infer: Prim(Var("zi"), Var("zi"), Mul, kind=None)
// [Typer] infer: Var("zi")
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] infer: Var("zi")
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] unify: Var({val: None}) and Double
// [Typer] union: Var({val: None}) and Double
// [Typer] check: If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=None)), Var("it"), Let(("new_zi", Var({val: None})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=None), Var("zi"), Mul, kind=None), Var("c_im"), Add, kind=None), Let(("new_zr", Var({val: None})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=None), Var("c_re"), Add, kind=None), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=None)]))))) against Int
// [Typer] check: Eq(Var("it"), Var("iter")) against Bool
// [Typer] infer: Var("it")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("iter")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("iter") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=None)), Var("it"), Let(("new_zi", Var({val: None})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=None), Var("zi"), Mul, kind=None), Var("c_im"), Add, kind=None), Let(("new_zr", Var({val: None})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=None), Var("c_re"), Add, kind=None), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=None)])))) against Int
// [Typer] check: LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=None)) against Bool
// [Typer] infer: Var("limit_sq")
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] infer: Prim(Var("zr2"), Var("zi2"), Add, kind=None)
// [Typer] infer: Var("zr2")
// [Typer] inst: TypeScheme(([], Var({val: Some(Double)})))
// [Typer] inst result: Double
// [Typer] infer: Var("zi2")
// [Typer] inst: TypeScheme(([], Var({val: Some(Double)})))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] unify: Double and Double
// [Typer] check: Var("it") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Let(("new_zi", Var({val: None})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=None), Var("zi"), Mul, kind=None), Var("c_im"), Add, kind=None), Let(("new_zr", Var({val: None})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=None), Var("c_re"), Add, kind=None), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=None)]))) against Int
// [Typer] infer: Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=None), Var("zi"), Mul, kind=None), Var("c_im"), Add, kind=None)
// [Typer] infer: Prim(Prim(Double(2), Var("zr"), Mul, kind=None), Var("zi"), Mul, kind=None)
// [Typer] infer: Prim(Double(2), Var("zr"), Mul, kind=None)
// [Typer] infer: Double(2)
// [Typer] infer: Var("zr")
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] infer: Var("zi")
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] infer: Var("c_im")
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] unify: Var({val: None}) and Double
// [Typer] union: Var({val: None}) and Double
// [Typer] check: Let(("new_zr", Var({val: None})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=None), Var("c_re"), Add, kind=None), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=None)])) against Int
// [Typer] infer: Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=None), Var("c_re"), Add, kind=None)
// [Typer] infer: Prim(Var("zr2"), Var("zi2"), Sub, kind=None)
// [Typer] infer: Var("zr2")
// [Typer] inst: TypeScheme(([], Var({val: Some(Double)})))
// [Typer] inst result: Double
// [Typer] infer: Var("zi2")
// [Typer] inst: TypeScheme(([], Var({val: Some(Double)})))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] infer: Var("c_re")
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] unify: Var({val: None}) and Double
// [Typer] union: Var({val: None}) and Double
// [Typer] check: App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=None)]) against Int
// [Typer] infer: Var("new_zr")
// [Typer] inst: TypeScheme(([], Var({val: Some(Double)})))
// [Typer] inst result: Double
// [Typer] infer: Var("new_zi")
// [Typer] inst: TypeScheme(([], Var({val: Some(Double)})))
// [Typer] inst result: Double
// [Typer] infer: Prim(Var("it"), Int(1), Add, kind=None)
// [Typer] infer: Var("it")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("calc_pixel") against Fun([Double, Double, Int], Int)
// [Typer] inst: TypeScheme(([], Fun([Double, Double, Int], Int)))
// [Typer] inst result: Fun([Double, Double, Int], Int)
// [Typer] unify: Fun([Double, Double, Int], Int) and Fun([Double, Double, Int], Int)
// [Typer] unify: Double and Double
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({tyvars: [], name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=None), Var("ret")]), Let(("cr", Var({val: None})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=None), App(Var("float_of_int"), [Var("w")]), Div, kind=None), Double(1.5), Sub, kind=None), kind=None), Let(("ci", Var({val: None})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=None), App(Var("float_of_int"), [Var("h")]), Div, kind=None), Double(1.5), Sub, kind=None), Let(("res", Var({val: None})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: None})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=None), Var("x"), Add, kind=None), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=None), Var("y"), Var("ret")])))))))}, LetRec({tyvars: [], name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: None})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=None), Var("ret")])), Let(("_", Var({val: None})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=None), Var("x"), Add, kind=None)), Add, kind=None)]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=None), Var("y"), Var("ret")]))))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("h", Var({val: None})), App(Var("read_int"), []), Let(("w", Var({val: None})), Prim(Var("h"), Int(2), Mul, kind=None), Let(("ret", Var({val: None})), Array(Prim(Var("w"), Var("h"), Mul, kind=None), Int(0)), Let(("_", Var({val: None})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: None})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, Unit)))) against Unit
// [Typer] typevars: []
// [Typer] check: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i"))) against Int
// [Typer] check: LE(Var("i"), Int(0)) against Bool
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(0)
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] check: If(LE(Int(48), Var("i")), Int(48), Var("i")) against Int
// [Typer] check: LE(Int(48), Var("i")) against Bool
// [Typer] infer: Int(48)
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(48) against Int
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=None), Var("ret")]), Let(("cr", Var({val: None})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=None), App(Var("float_of_int"), [Var("w")]), Div, kind=None), Double(1.5), Sub, kind=None), kind=None), Let(("ci", Var({val: None})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=None), App(Var("float_of_int"), [Var("h")]), Div, kind=None), Double(1.5), Sub, kind=None), Let(("res", Var({val: None})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: None})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=None), Var("x"), Add, kind=None), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=None), Var("y"), Var("ret")])))))))}, LetRec({tyvars: [], name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: None})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=None), Var("ret")])), Let(("_", Var({val: None})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=None), Var("x"), Add, kind=None)), Add, kind=None)]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=None), Var("y"), Var("ret")]))))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("h", Var({val: None})), App(Var("read_int"), []), Let(("w", Var({val: None})), Prim(Var("h"), Int(2), Mul, kind=None), Let(("ret", Var({val: None})), Array(Prim(Var("w"), Var("h"), Mul, kind=None), Int(0)), Let(("_", Var({val: None})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: None})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, Unit))) against Unit
// [Typer] typevars: []
// [Typer] check: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=None), Var("ret")]), Let(("cr", Var({val: None})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=None), App(Var("float_of_int"), [Var("w")]), Div, kind=None), Double(1.5), Sub, kind=None), kind=None), Let(("ci", Var({val: None})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=None), App(Var("float_of_int"), [Var("h")]), Div, kind=None), Double(1.5), Sub, kind=None), Let(("res", Var({val: None})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: None})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=None), Var("x"), Add, kind=None), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=None), Var("y"), Var("ret")]))))))) against Unit
// [Typer] check: Eq(Var("y"), Var("h")) against Bool
// [Typer] infer: Var("y")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("h")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Unit against Unit
// [Typer] check: If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=None), Var("ret")]), Let(("cr", Var({val: None})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=None), App(Var("float_of_int"), [Var("w")]), Div, kind=None), Double(1.5), Sub, kind=None), kind=None), Let(("ci", Var({val: None})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=None), App(Var("float_of_int"), [Var("h")]), Div, kind=None), Double(1.5), Sub, kind=None), Let(("res", Var({val: None})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: None})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=None), Var("x"), Add, kind=None), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=None), Var("y"), Var("ret")])))))) against Unit
// [Typer] check: Eq(Var("x"), Var("w")) against Bool
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("w")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=None), Var("ret")]) against Unit
// [Typer] infer: Var("w")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("h")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(0)
// [Typer] infer: Prim(Var("y"), Int(1), Add, kind=None)
// [Typer] infer: Var("y")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] infer: Var("ret")
// [Typer] inst: TypeScheme(([], Array(Int)))
// [Typer] inst result: Array(Int)
// [Typer] check: Var("main_loop") against Fun([Int, Int, Int, Int, Array(Int)], Unit)
// [Typer] inst: TypeScheme(([], Fun([Int, Int, Int, Int, Array(Int)], Unit)))
// [Typer] inst result: Fun([Int, Int, Int, Int, Array(Int)], Unit)
// [Typer] unify: Fun([Int, Int, Int, Int, Array(Int)], Unit) and Fun([Int, Int, Int, Int, Array(Int)], Unit)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Array(Int) and Array(Int)
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: Let(("cr", Var({val: None})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=None), App(Var("float_of_int"), [Var("w")]), Div, kind=None), Double(1.5), Sub, kind=None), kind=None), Let(("ci", Var({val: None})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=None), App(Var("float_of_int"), [Var("h")]), Div, kind=None), Double(1.5), Sub, kind=None), Let(("res", Var({val: None})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: None})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=None), Var("x"), Add, kind=None), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=None), Var("y"), Var("ret")]))))) against Unit
// [Typer] infer: Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=None), App(Var("float_of_int"), [Var("w")]), Div, kind=None), Double(1.5), Sub, kind=None), kind=None)
// [Typer] infer: Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=None), App(Var("float_of_int"), [Var("w")]), Div, kind=None), Double(1.5), Sub, kind=None)
// [Typer] infer: Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=None), App(Var("float_of_int"), [Var("w")]), Div, kind=None)
// [Typer] infer: Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=None)
// [Typer] infer: Double(3)
// [Typer] infer: App(Var("float_of_int"), [Var("x")])
// [Typer] infer: Var("float_of_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Double)))
// [Typer] inst result: Fun([Int], Double)
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Double and Double
// [Typer] infer: App(Var("float_of_int"), [Var("w")])
// [Typer] infer: Var("float_of_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Double)))
// [Typer] inst result: Fun([Int], Double)
// [Typer] check: Var("w") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Double and Double
// [Typer] infer: Double(1.5)
// [Typer] unify: Double and Double
// [Typer] unify: Var({val: None}) and Double
// [Typer] union: Var({val: None}) and Double
// [Typer] check: Let(("ci", Var({val: None})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=None), App(Var("float_of_int"), [Var("h")]), Div, kind=None), Double(1.5), Sub, kind=None), Let(("res", Var({val: None})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: None})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=None), Var("x"), Add, kind=None), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=None), Var("y"), Var("ret")])))) against Unit
// [Typer] infer: Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=None), App(Var("float_of_int"), [Var("h")]), Div, kind=None), Double(1.5), Sub, kind=None)
// [Typer] infer: Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=None), App(Var("float_of_int"), [Var("h")]), Div, kind=None)
// [Typer] infer: Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=None)
// [Typer] infer: Double(3)
// [Typer] infer: App(Var("float_of_int"), [Var("y")])
// [Typer] infer: Var("float_of_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Double)))
// [Typer] inst result: Fun([Int], Double)
// [Typer] check: Var("y") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Double and Double
// [Typer] infer: App(Var("float_of_int"), [Var("h")])
// [Typer] infer: Var("float_of_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Double)))
// [Typer] inst result: Fun([Int], Double)
// [Typer] check: Var("h") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Double and Double
// [Typer] infer: Double(1.5)
// [Typer] unify: Double and Double
// [Typer] unify: Var({val: None}) and Double
// [Typer] union: Var({val: None}) and Double
// [Typer] check: Let(("res", Var({val: None})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: None})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=None), Var("x"), Add, kind=None), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=None), Var("y"), Var("ret")]))) against Unit
// [Typer] infer: App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)])
// [Typer] infer: Var("calc_pixel")
// [Typer] inst: TypeScheme(([], Fun([Double, Double, Int], Int)))
// [Typer] inst result: Fun([Double, Double, Int], Int)
// [Typer] check: Var("cr") against Double
// [Typer] inst: TypeScheme(([], Var({val: Some(Double)})))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Var("ci") against Double
// [Typer] inst: TypeScheme(([], Var({val: Some(Double)})))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: Int(0) against Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("_", Var({val: None})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=None), Var("x"), Add, kind=None), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=None), Var("y"), Var("ret")])) against Unit
// [Typer] infer: Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=None), Var("x"), Add, kind=None), App(Var("clamp"), [Var("res")]))
// [Typer] infer: App(Var("clamp"), [Var("res")])
// [Typer] infer: Var("clamp")
// [Typer] inst: TypeScheme(([], Fun([Int], Int)))
// [Typer] inst result: Fun([Int], Int)
// [Typer] check: Var("res") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("ret") against Array(Int)
// [Typer] inst: TypeScheme(([], Array(Int)))
// [Typer] inst result: Array(Int)
// [Typer] unify: Array(Int) and Array(Int)
// [Typer] unify: Int and Int
// [Typer] check: Prim(Prim(Var("y"), Var("w"), Mul, kind=None), Var("x"), Add, kind=None) against Int
// [Typer] check: Prim(Var("y"), Var("w"), Mul, kind=None) against Int
// [Typer] check: Var("y") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("w") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] check: App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=None), Var("y"), Var("ret")]) against Unit
// [Typer] infer: Var("w")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("h")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Prim(Var("x"), Int(1), Add, kind=None)
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] infer: Var("y")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("ret")
// [Typer] inst: TypeScheme(([], Array(Int)))
// [Typer] inst result: Array(Int)
// [Typer] check: Var("main_loop") against Fun([Int, Int, Int, Int, Array(Int)], Unit)
// [Typer] inst: TypeScheme(([], Fun([Int, Int, Int, Int, Array(Int)], Unit)))
// [Typer] inst result: Fun([Int, Int, Int, Int, Array(Int)], Unit)
// [Typer] unify: Fun([Int, Int, Int, Int, Array(Int)], Unit) and Fun([Int, Int, Int, Int, Array(Int)], Unit)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Array(Int) and Array(Int)
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: LetRec({tyvars: [], name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: None})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=None), Var("ret")])), Let(("_", Var({val: None})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=None), Var("x"), Add, kind=None)), Add, kind=None)]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=None), Var("y"), Var("ret")]))))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("h", Var({val: None})), App(Var("read_int"), []), Let(("w", Var({val: None})), Prim(Var("h"), Int(2), Mul, kind=None), Let(("ret", Var({val: None})), Array(Prim(Var("w"), Var("h"), Mul, kind=None), Int(0)), Let(("_", Var({val: None})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: None})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: None})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=None), Var("ret")])), Let(("_", Var({val: None})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=None), Var("x"), Add, kind=None)), Add, kind=None)]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=None), Var("y"), Var("ret")])))) against Unit
// [Typer] check: Eq(Var("y"), Var("h")) against Bool
// [Typer] infer: Var("y")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("h")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Unit against Unit
// [Typer] check: If(Eq(Var("x"), Var("w")), Let(("_", Var({val: None})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=None), Var("ret")])), Let(("_", Var({val: None})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=None), Var("x"), Add, kind=None)), Add, kind=None)]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=None), Var("y"), Var("ret")]))) against Unit
// [Typer] check: Eq(Var("x"), Var("w")) against Bool
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("w")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Let(("_", Var({val: None})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=None), Var("ret")])) against Unit
// [Typer] infer: App(Var("print_char"), [Int(10)])
// [Typer] infer: Var("print_char")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: Int(10) against Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] check: App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=None), Var("ret")]) against Unit
// [Typer] infer: Var("w")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("h")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(0)
// [Typer] infer: Prim(Var("y"), Int(1), Add, kind=None)
// [Typer] infer: Var("y")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] infer: Var("ret")
// [Typer] inst: TypeScheme(([], Array(Int)))
// [Typer] inst result: Array(Int)
// [Typer] check: Var("print_loop") against Fun([Int, Int, Int, Int, Array(Int)], Unit)
// [Typer] inst: TypeScheme(([], Fun([Int, Int, Int, Int, Array(Int)], Unit)))
// [Typer] inst result: Fun([Int, Int, Int, Int, Array(Int)], Unit)
// [Typer] unify: Fun([Int, Int, Int, Int, Array(Int)], Unit) and Fun([Int, Int, Int, Int, Array(Int)], Unit)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Array(Int) and Array(Int)
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: Let(("_", Var({val: None})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=None), Var("x"), Add, kind=None)), Add, kind=None)]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=None), Var("y"), Var("ret")])) against Unit
// [Typer] infer: App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=None), Var("x"), Add, kind=None)), Add, kind=None)])
// [Typer] infer: Var("print_char")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=None), Var("x"), Add, kind=None)), Add, kind=None) against Int
// [Typer] check: Int(48) against Int
// [Typer] check: Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=None), Var("x"), Add, kind=None)) against Int
// [Typer] check: Var("ret") against Array(Int)
// [Typer] inst: TypeScheme(([], Array(Int)))
// [Typer] inst result: Array(Int)
// [Typer] unify: Array(Int) and Array(Int)
// [Typer] unify: Int and Int
// [Typer] check: Prim(Prim(Var("y"), Var("w"), Mul, kind=None), Var("x"), Add, kind=None) against Int
// [Typer] check: Prim(Var("y"), Var("w"), Mul, kind=None) against Int
// [Typer] check: Var("y") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("w") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] check: App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=None), Var("y"), Var("ret")]) against Unit
// [Typer] infer: Var("w")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("h")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Prim(Var("x"), Int(1), Add, kind=None)
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] infer: Var("y")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("ret")
// [Typer] inst: TypeScheme(([], Array(Int)))
// [Typer] inst result: Array(Int)
// [Typer] check: Var("print_loop") against Fun([Int, Int, Int, Int, Array(Int)], Unit)
// [Typer] inst: TypeScheme(([], Fun([Int, Int, Int, Int, Array(Int)], Unit)))
// [Typer] inst result: Fun([Int, Int, Int, Int, Array(Int)], Unit)
// [Typer] unify: Fun([Int, Int, Int, Int, Array(Int)], Unit) and Fun([Int, Int, Int, Int, Array(Int)], Unit)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Array(Int) and Array(Int)
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("h", Var({val: None})), App(Var("read_int"), []), Let(("w", Var({val: None})), Prim(Var("h"), Int(2), Mul, kind=None), Let(("ret", Var({val: None})), Array(Prim(Var("w"), Var("h"), Mul, kind=None), Int(0)), Let(("_", Var({val: None})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: None})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("h", Var({val: None})), App(Var("read_int"), []), Let(("w", Var({val: None})), Prim(Var("h"), Int(2), Mul, kind=None), Let(("ret", Var({val: None})), Array(Prim(Var("w"), Var("h"), Mul, kind=None), Int(0)), Let(("_", Var({val: None})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: None})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))
// [Typer] infer: App(Var("read_int"), [])
// [Typer] infer: Var("read_int")
// [Typer] inst: TypeScheme(([], Fun([], Int)))
// [Typer] inst result: Fun([], Int)
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] infer: Let(("w", Var({val: None})), Prim(Var("h"), Int(2), Mul, kind=None), Let(("ret", Var({val: None})), Array(Prim(Var("w"), Var("h"), Mul, kind=None), Int(0)), Let(("_", Var({val: None})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: None})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit))))
// [Typer] infer: Prim(Var("h"), Int(2), Mul, kind=None)
// [Typer] infer: Var("h")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Int(2)
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] infer: Let(("ret", Var({val: None})), Array(Prim(Var("w"), Var("h"), Mul, kind=None), Int(0)), Let(("_", Var({val: None})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: None})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))
// [Typer] infer: Array(Prim(Var("w"), Var("h"), Mul, kind=None), Int(0))
// [Typer] infer: Int(0)
// [Typer] check: Prim(Var("w"), Var("h"), Mul, kind=None) against Int
// [Typer] check: Var("w") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("h") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Array(Int)
// [Typer] union: Var({val: None}) and Array(Int)
// [Typer] infer: Let(("_", Var({val: None})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: None})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit))
// [Typer] infer: App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")])
// [Typer] infer: Var("main_loop")
// [Typer] inst: TypeScheme(([], Fun([Int, Int, Int, Int, Array(Int)], Unit)))
// [Typer] inst result: Fun([Int, Int, Int, Int, Array(Int)], Unit)
// [Typer] check: Var("w") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("h") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] check: Int(0) against Int
// [Typer] check: Var("ret") against Array(Int)
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Int))})))
// [Typer] inst result: Array(Int)
// [Typer] unify: Array(Int) and Array(Int)
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)
// [Typer] infer: App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")])
// [Typer] infer: Var("print_loop")
// [Typer] inst: TypeScheme(([], Fun([Int, Int, Int, Int, Array(Int)], Unit)))
// [Typer] inst result: Fun([Int, Int, Int, Int, Array(Int)], Unit)
// [Typer] check: Var("w") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("h") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] check: Int(0) against Int
// [Typer] check: Var("ret") against Array(Int)
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Int))})))
// [Typer] inst result: Array(Int)
// [Typer] unify: Array(Int) and Array(Int)
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Unit
// [Typer] unify: Unit and Var({val: None})
// [Typer] union: Unit and Var({val: None})
// [Typer] check: Unit against Unit
// [Parser] flags: []
