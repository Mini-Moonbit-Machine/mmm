// [Asm] pre_assigned_registers: Self(fref=f6) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$_4"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   comment = "0:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$_4"];
// [Asm]   r0 [label="fv3 ← fa0", color=green];
// [Asm]   r1 [label="fa0", color=blue];
// [Asm]   comment = "0:fv3-> 1:fa0"
// [Asm]   comment = "fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 4593527504729830064 ->   li a0, 4593527504729830064
// [Asm] subst   fmv.d.x fv3, v2 ->   fmv.d.x fa0, a0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%15) -> fv33, Insn(iref=%41) -> v56, Insn(iref=%33) -> v38, BlockParam(bref=b28, bpref=$b.0) -> v77, Insn(iref=%8) -> fv23, Insn(iref=%10) -> fv25, Insn(iref=%27) -> v72, Insn(iref=%25) -> v65, Insn(iref=%39) -> v50, Insn(iref=%4) -> fv19, Insn(iref=%56) -> v51, Insn(iref=%49) -> fv44, FnParam(fref=f12, fpref=$f.3) -> v5, Insn(iref=%42) -> v52, FnParam(fref=f12, fpref=$f.0) -> v2, FnParam(fref=f12, fpref=$f.4) -> v6, Insn(iref=%26) -> v71, Insn(iref=%31) -> fv36, Insn(iref=%38) -> v59, Insn(iref=%16) -> v34, Self(fref=f12) -> v0, BlockParam(bref=b2, bpref=$b.1) -> v12, Insn(iref=%53) -> v57, Insn(iref=%54) -> v73, BlockParam(bref=b2, bpref=$b.2) -> v13, Insn(iref=%5) -> fv20, Insn(iref=%19) -> v61, FnParam(fref=f12, fpref=$f.1) -> v3, Insn(iref=%13) -> fv28, Insn(iref=%7) -> fv22, Insn(iref=%55) -> v54, BlockParam(bref=b8, bpref=$b.1) -> fv30, Insn(iref=%48) -> fv43, Insn(iref=%23) -> v75, Insn(iref=%20) -> v62, BlockParam(bref=b2, bpref=$b.3) -> v14, Insn(iref=%34) -> v47, Insn(iref=%36) -> v49, BlockParam(bref=b2, bpref=$b.0) -> v11, FnParam(fref=f12, fpref=$f.5) -> fv7, BlockParam(bref=b2, bpref=$b.4) -> v15, FnParam(fref=f12, fpref=$f.2) -> v4, FnParam(fref=f12, fpref=$f.6) -> fv8, FnParam(fref=f12, fpref=$f.7) -> v9, Insn(iref=%50) -> fv45, Insn(iref=%14) -> fv32, Insn(iref=%51) -> v46, Insn(iref=%52) -> v70, Insn(iref=%44) -> fv39, Insn(iref=%32) -> fv37, Insn(iref=%1) -> v17, Insn(iref=%11) -> fv26, BlockParam(bref=b8, bpref=$b.2) -> v31, Insn(iref=%57) -> v67, Insn(iref=%6) -> fv21, Insn(iref=%35) -> v48, FnParam(fref=f12, fpref=$f.8) -> fv10, Insn(iref=%46) -> fv41, Insn(iref=%28) -> v66, Insn(iref=%9) -> fv24, Insn(iref=%24) -> v64, Insn(iref=%37) -> v58, Insn(iref=%45) -> fv40, Insn(iref=%29) -> v68, BlockParam(bref=b8, bpref=$b.0) -> fv29, Insn(iref=%47) -> fv42, Insn(iref=%0) -> v16, Insn(iref=%3) -> fv18, Insn(iref=%18) -> v60, Insn(iref=%22) -> v74, Insn(iref=%17) -> v35, Insn(iref=%2) -> v76, Insn(iref=%43) -> v53, Insn(iref=%30) -> v69, Insn(iref=%21) -> v63, Insn(iref=%40) -> v55, Insn(iref=%12) -> fv27
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%19), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%19), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%19), width=@32))
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=48), Insn(iref=%24)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%20), Int32(val=0)])
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%35), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%35), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%35), width=@32))
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=48), BlockParam(bref=b8, bpref=$b.2)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b8, bpref=$b.2), Int32(val=0)])
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%44), BlockParam(bref=b8, bpref=$b.1)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b8, bpref=$b.2), Insn(iref=%16)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b2, bpref=$b.2), BlockParam(bref=b2, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.1)])
// [Asm] defs: [v96]
// [Asm] live_set: [v11, v14, v96, zero, v13, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v96 is X
// [Asm] defs: [v97]
// [Asm] live_set: [v11, v14, zero, v13, v97, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v97 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, zero, v13, v12, v15]
// [Asm] move_origin: []
// [Asm] defs: [v59]
// [Asm] live_set: [v11, v14, zero, v59, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v59 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, zero, v59, v12, v15]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, zero, v59, v12, v15]
// [Asm] move_origin: [v12]
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v14, v13, zero, v12, v15]
// [Asm] move_origin: [v59]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v13, zero, v12, v15]
// [Asm] move_origin: [v14]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12, v15, v13, zero]
// [Asm] move_origin: [v15]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12, v15, v13, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12, v15, zero, v13]
// [Asm] move_origin: []
// [Asm] defs: [v114]
// [Asm] live_set: [v11, v14, fv32, v13, zero, fv33, fv30, fv29, v114, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defined: v114 is X
// [Asm] defs: [fv115]
// [Asm] live_set: [v11, v14, fv32, v13, zero, fv115, fv33, fv30, fv29, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defined: fv115 is F
// [Asm] defs: [fv39]
// [Asm] live_set: [v11, v14, fv32, v13, zero, fv39, fv30, fv33, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defined: fv39 is F
// [Asm] defs: [fv41]
// [Asm] live_set: [v11, v14, fv32, v13, zero, fv39, fv41, fv30, fv33, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defined: fv41 is F
// [Asm] defs: [fv42]
// [Asm] live_set: [v11, v14, fv32, v13, zero, fv42, fv33, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defined: fv42 is F
// [Asm] defs: [fv43]
// [Asm] live_set: [v11, v14, v13, zero, fv42, fv43, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defined: fv43 is F
// [Asm] defs: [fv44]
// [Asm] live_set: [v11, v14, v13, zero, fv42, fv43, v15, v12, v31, fv44]
// [Asm] move_origin: []
// [Asm] defined: fv44 is F
// [Asm] defs: [fv45]
// [Asm] live_set: [v11, v14, fv45, v13, zero, fv42, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defined: fv45 is F
// [Asm] defs: [v46]
// [Asm] live_set: [v11, v14, v46, fv45, v13, zero, fv42, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: [fv29]
// [Asm] live_set: [v11, v14, v46, v13, zero, fv42, fv29, v15, v12]
// [Asm] move_origin: [fv45]
// [Asm] defined: fv29 is F
// [Asm] defs: [fv30]
// [Asm] live_set: [v11, v14, v46, v13, zero, fv30, fv29, v15, v12]
// [Asm] move_origin: [fv42]
// [Asm] defined: fv30 is F
// [Asm] defs: [v31]
// [Asm] live_set: [v11, v14, v13, zero, fv30, fv29, v15, v12, v31]
// [Asm] move_origin: [v46]
// [Asm] defined: v31 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v13, zero, fv30, fv29, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12, v15, zero, v13]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v77]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v76]
// [Asm] live_set: [v11, zero, v12, v15, v76]
// [Asm] move_origin: []
// [Asm] defined: v76 is X
// [Asm] defs: []
// [Asm] live_set: [v11, zero, v12, v15, v76]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, zero, v12, v15, v76]
// [Asm] move_origin: [v12]
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v13, zero, v12, v15, v76]
// [Asm] move_origin: [zero]
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v11, v14, v13, zero, v12, v15]
// [Asm] move_origin: [v76]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12, v15, v13, zero]
// [Asm] move_origin: [v15]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12, v15, v13, zero]
// [Asm] move_origin: []
// [Asm] defs: [v47]
// [Asm] live_set: [v11, v14, v13, zero, v47, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: [v48]
// [Asm] live_set: [v11, v14, v48, v13, zero, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defined: v48 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v48, v13, zero, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defs: [v80]
// [Asm] live_set: [v11, v14, zero, v13, v80, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v80 is X
// [Asm] defs: [v81]
// [Asm] live_set: [v11, v14, zero, v13, v81, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v81 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, zero, v13, v12, v15]
// [Asm] move_origin: []
// [Asm] defs: [v75]
// [Asm] live_set: [v11, v14, v75, zero, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v75 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v75, zero, v12, v15]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v75, zero, v12, v15]
// [Asm] move_origin: [v12]
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v14, v13, zero, v12, v15]
// [Asm] move_origin: [v75]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v13, zero, v12, v15]
// [Asm] move_origin: [v14]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12, v15, v13, zero]
// [Asm] move_origin: [v15]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12, v15, v13, zero]
// [Asm] move_origin: []
// [Asm] defs: [v105]
// [Asm] live_set: [v11, v14, v48, v13, zero, v105, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defined: v105 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v48, v13, zero, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defs: [v77]
// [Asm] live_set: [v77]
// [Asm] move_origin: [zero]
// [Asm] defined: v77 is X
// [Asm] defs: [v64]
// [Asm] live_set: [v11, v14, v13, zero, v61, v15, v12, v64]
// [Asm] move_origin: []
// [Asm] defined: v64 is X
// [Asm] defs: [v90]
// [Asm] live_set: [v11, v14, v13, zero, v90, v61, v15, v12, v64]
// [Asm] move_origin: []
// [Asm] defined: v90 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v13, zero, v61, v15, v12]
// [Asm] move_origin: []
// [Asm] defs: [v60]
// [Asm] live_set: [v11, v14, v13, zero, v15, v12, v60]
// [Asm] move_origin: []
// [Asm] defined: v60 is X
// [Asm] defs: [v61]
// [Asm] live_set: [v11, v14, v13, zero, v61, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: v61 is X
// [Asm] defs: [v62]
// [Asm] live_set: [v11, v62, v14, v13, zero, v61, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: v62 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v13, zero, v61, v15, v12]
// [Asm] move_origin: []
// [Asm] defs: [fv18]
// [Asm] live_set: [v11, v14, v13, zero, v15, v12, fv18]
// [Asm] move_origin: []
// [Asm] defined: fv18 is F
// [Asm] defs: [v138]
// [Asm] live_set: [v11, v14, v13, zero, v15, v12, fv18, v138]
// [Asm] move_origin: []
// [Asm] defined: v138 is X
// [Asm] defs: [fv139]
// [Asm] live_set: [v11, v14, fv139, v13, zero, v15, v12, fv18]
// [Asm] move_origin: []
// [Asm] defined: fv139 is F
// [Asm] defs: [fv19]
// [Asm] live_set: [v11, v14, v13, zero, fv19, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv19 is F
// [Asm] defs: [fv20]
// [Asm] live_set: [v11, v14, v13, zero, fv20, fv19, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv20 is F
// [Asm] defs: [fv21]
// [Asm] live_set: [v11, v14, v13, zero, v15, v12, fv21]
// [Asm] move_origin: []
// [Asm] defined: fv21 is F
// [Asm] defs: [v133]
// [Asm] live_set: [v11, v14, v13, zero, v133, v15, v12, fv21]
// [Asm] move_origin: []
// [Asm] defined: v133 is X
// [Asm] defs: [fv134]
// [Asm] live_set: [v11, v14, v13, zero, fv134, v15, v12, fv21]
// [Asm] move_origin: []
// [Asm] defined: fv134 is F
// [Asm] defs: [fv22]
// [Asm] live_set: [v11, fv22, v14, v13, zero, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv22 is F
// [Asm] defs: [fv23]
// [Asm] live_set: [v11, fv23, v14, v13, zero, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv23 is F
// [Asm] defs: [fv24]
// [Asm] live_set: [v11, fv23, fv24, v14, v13, zero, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv24 is F
// [Asm] defs: [v128]
// [Asm] live_set: [v11, fv23, fv24, v14, v13, zero, v15, v12, v128]
// [Asm] move_origin: []
// [Asm] defined: v128 is X
// [Asm] defs: [fv129]
// [Asm] live_set: [v11, fv129, fv23, fv24, v14, v13, zero, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv129 is F
// [Asm] defs: [fv25]
// [Asm] live_set: [v11, fv23, v14, v13, zero, fv25, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv25 is F
// [Asm] defs: [fv26]
// [Asm] live_set: [v11, fv23, v14, v13, zero, fv25, v15, v12, fv26]
// [Asm] move_origin: []
// [Asm] defined: fv26 is F
// [Asm] defs: [fv27]
// [Asm] live_set: [v11, fv23, v14, v13, zero, fv27, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv27 is F
// [Asm] defs: [v123]
// [Asm] live_set: [v11, fv23, v14, v13, zero, v123, fv27, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: v123 is X
// [Asm] defs: [fv124]
// [Asm] live_set: [v11, fv23, v14, v13, zero, fv124, fv27, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv124 is F
// [Asm] defs: [fv28]
// [Asm] live_set: [v11, fv23, v14, fv28, v13, zero, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv28 is F
// [Asm] defs: [fv29]
// [Asm] live_set: [v11, v14, fv28, v13, zero, fv29, v15, v12]
// [Asm] move_origin: [fv23]
// [Asm] defined: fv29 is F
// [Asm] defs: [fv30]
// [Asm] live_set: [v11, v14, v13, zero, fv30, fv29, v15, v12]
// [Asm] move_origin: [fv28]
// [Asm] defined: fv30 is F
// [Asm] defs: [v31]
// [Asm] live_set: [v11, v14, v13, zero, fv30, fv29, v15, v12, v31]
// [Asm] move_origin: [zero]
// [Asm] defined: v31 is X
// [Asm] defs: [fv36]
// [Asm] live_set: [v11, v14, fv32, v13, zero, fv36, fv33, fv30, fv29, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defined: fv36 is F
// [Asm] defs: [fv37]
// [Asm] live_set: [v11, fv37, v14, fv32, v13, zero, fv36, fv33, fv30, fv29, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defined: fv37 is F
// [Asm] defs: [v38]
// [Asm] live_set: [v11, v14, fv32, v13, zero, fv30, fv33, fv29, v38, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defined: v38 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, fv32, v13, zero, fv30, fv33, fv29, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defs: [fv32]
// [Asm] live_set: [v11, v14, fv32, v13, zero, fv30, fv29, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defined: fv32 is F
// [Asm] defs: [fv33]
// [Asm] live_set: [v11, v14, fv32, v13, zero, fv33, fv30, fv29, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defined: fv33 is F
// [Asm] defs: [v34]
// [Asm] live_set: [v11, v14, fv32, v13, zero, fv33, fv30, fv29, v15, v12, v31, v34]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, fv32, v13, zero, fv33, fv30, fv29, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defs: [v103]
// [Asm] live_set: [v11, v14, zero, v13, v103, v12, v15, v31]
// [Asm] move_origin: []
// [Asm] defined: v103 is X
// [Asm] defs: [v104]
// [Asm] live_set: [v11, v14, zero, v13, v104, v12, v15, v31]
// [Asm] move_origin: []
// [Asm] defined: v104 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, zero, v13, v12, v15]
// [Asm] move_origin: []
// [Asm] defs: [v53]
// [Asm] live_set: [v11, v14, v53, zero, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v53 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v53, zero, v12, v15]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v53, zero, v12, v15]
// [Asm] move_origin: [v12]
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v14, v13, zero, v12, v15]
// [Asm] move_origin: [v53]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v13, zero, v12, v15]
// [Asm] move_origin: [v14]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12, v15, v13, zero]
// [Asm] move_origin: [v15]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12, v15, v13, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [fa2, a5, zero, a0, a4, fa0, a2, a1, a3, fa1]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [fa2, a5, zero, a4, fa0, a2, a1, a3, fa1, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, fa2, a5, zero, a4, fa0, a2, a3, fa1, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, fa2, a5, zero, a4, fa0, v4, a3, fa1, v2]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v5, fa2, a5, zero, a4, fa0, v4, fa1, v2]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v3, v5, fa2, a5, zero, fa0, v4, v6, fa1, v2]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [fv7]
// [Asm] live_set: [v3, v5, fa2, a5, zero, v4, v6, fa1, v2]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv7 is F
// [Asm] defs: [fv8]
// [Asm] live_set: [v3, v5, fa2, a5, zero, v4, v6, v2]
// [Asm] move_origin: [fa1]
// [Asm] defined: fv8 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v3, v5, fa2, zero, v4, v6, v2]
// [Asm] move_origin: [a5]
// [Asm] defined: v9 is X
// [Asm] defs: [fv10]
// [Asm] live_set: [v2, v4, v6, v5, zero, v3]
// [Asm] move_origin: [fa2]
// [Asm] defined: fv10 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v4, v6, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v4, v6, v5, v12, zero]
// [Asm] move_origin: [v3]
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v6, v5, v12, v13, zero]
// [Asm] move_origin: [v4]
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v11, v14, v6, v12, v13, zero]
// [Asm] move_origin: [v5]
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v11, v14, v12, v15, v13, zero]
// [Asm] move_origin: [v6]
// [Asm] defined: v15 is X
// [Asm] defs: [v66]
// [Asm] live_set: [v11, v66, v14, zero, v13, v12, v15, v61]
// [Asm] move_origin: []
// [Asm] defined: v66 is X
// [Asm] defs: [v87]
// [Asm] live_set: [v11, v66, v14, v87, zero, v13, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v87 is X
// [Asm] defs: [v88]
// [Asm] live_set: [v11, v66, v14, zero, v13, v88, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v88 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, zero, v13, v12, v15]
// [Asm] move_origin: []
// [Asm] defs: [v69]
// [Asm] live_set: [v11, v14, v69, zero, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v69 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v69, zero, v12, v15]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v69, zero, v12, v15]
// [Asm] move_origin: [v12]
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v14, v13, zero, v12, v15]
// [Asm] move_origin: [v69]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v13, zero, v12, v15]
// [Asm] move_origin: [v14]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12, v15, v13, zero]
// [Asm] move_origin: [v15]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12, v15, v13, zero]
// [Asm] move_origin: []
// [Asm] defs: [v99]
// [Asm] live_set: [v11, v14, v48, v99, zero, v13, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v99 is X
// [Asm] defs: [v100]
// [Asm] live_set: [v11, v14, v99, zero, v13, v12, v15, v100]
// [Asm] move_origin: []
// [Asm] defined: v100 is X
// [Asm] defs: [v101]
// [Asm] live_set: [v11, v14, v99, zero, v13, v12, v15, v101]
// [Asm] move_origin: []
// [Asm] defined: v101 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, zero, v13, v12, v15]
// [Asm] move_origin: []
// [Asm] defs: [v56]
// [Asm] live_set: [v11, v14, v56, zero, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v56 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v56, zero, v12, v15]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v56, zero, v12, v15]
// [Asm] move_origin: [v12]
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v14, v13, zero, v12, v15]
// [Asm] move_origin: [v56]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v13, zero, v12, v15]
// [Asm] move_origin: [v14]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12, v15, v13, zero]
// [Asm] move_origin: [v15]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12, v15, v13, zero]
// [Asm] move_origin: []
// [Asm] defs: [v83]
// [Asm] live_set: [v11, v14, zero, v13, v12, v15, v83, v61]
// [Asm] move_origin: []
// [Asm] defined: v83 is X
// [Asm] defs: [v84]
// [Asm] live_set: [v11, v14, zero, v13, v84, v12, v15, v83]
// [Asm] move_origin: []
// [Asm] defined: v84 is X
// [Asm] defs: [v85]
// [Asm] live_set: [v11, v14, zero, v13, v85, v12, v15, v83]
// [Asm] move_origin: []
// [Asm] defined: v85 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, zero, v13, v12, v15]
// [Asm] move_origin: []
// [Asm] defs: [v72]
// [Asm] live_set: [v11, v72, v14, zero, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v72 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v72, v14, zero, v12, v15]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v72, v14, zero, v12, v15]
// [Asm] move_origin: [v12]
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v14, v13, zero, v12, v15]
// [Asm] move_origin: [v72]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v13, zero, v12, v15]
// [Asm] move_origin: [v14]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12, v15, v13, zero]
// [Asm] move_origin: [v15]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12, v15, v13, zero]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main_loop.177"];
// [Asm]   r0 [label="v96 ← a0", color=green];
// [Asm]   r46 [label="v66 ← a0", color=green];
// [Asm]   r38 [label="a2", color=blue];
// [Asm]   r33 [label="v104 ← a0", color=green];
// [Asm]   r9 [label="v114 ← a0", color=green];
// [Asm]   r26 [label="v138 ← a0", color=green];
// [Asm]   r47 [label="v87 ← a6", color=green];
// [Asm]   r6 [label="v15 ← a5", color=green];
// [Asm]   r44 [label="v6 ← a0", color=green];
// [Asm]   r13 [label="v76 ← a0", color=green];
// [Asm]   r53 [label="v56 ← a0", color=green];
// [Asm]   r42 [label="v4 ← a6", color=green];
// [Asm]   r4 [label="v13 ← a3", color=green];
// [Asm]   r29 [label="v123 ← a0", color=green];
// [Asm]   r35 [label="v2 ← t0", color=green];
// [Asm]   r7 [label="v97 ← a0", color=green];
// [Asm]   r56 [label="v85 ← a6", color=green];
// [Asm]   r10 [label="v31 ← a6", color=green];
// [Asm]   r8 [label="v59 ← a0", color=green];
// [Asm]   r5 [label="v12 ← a4", color=green];
// [Asm]   r54 [label="v83 ← a0", color=green];
// [Asm]   r36 [label="a5", color=blue];
// [Asm]   r24 [label="v60 ← a0", color=green];
// [Asm]   r15 [label="v48 ← a0", color=green];
// [Asm]   r32 [label="v103 ← a0", color=green];
// [Asm]   r49 [label="v69 ← a0", color=green];
// [Asm]   r57 [label="v72 ← a0", color=green];
// [Asm]   r43 [label="v5 ← a2", color=green];
// [Asm]   r31 [label="v34 ← a0", color=green];
// [Asm]   r39 [label="a1", color=blue];
// [Asm]   r17 [label="v81 ← a0", color=green];
// [Asm]   r52 [label="v101 ← a0", color=green];
// [Asm]   r48 [label="v88 ← a6", color=green];
// [Asm]   r12 [label="a0", color=blue];
// [Asm]   r37 [label="a4", color=blue];
// [Asm]   r20 [label="v77 ← a0", color=green];
// [Asm]   r23 [label="v90 ← a7", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r27 [label="v133 ← a0", color=green];
// [Asm]   r1 [label="v11 ← a1", color=green];
// [Asm]   r40 [label="a3", color=blue];
// [Asm]   r28 [label="v128 ← a0", color=green];
// [Asm]   r41 [label="v3 ← a7", color=green];
// [Asm]   r11 [label="v46 ← a0", color=green];
// [Asm]   r34 [label="v53 ← a0", color=green];
// [Asm]   r22 [label="v61 ← a6", color=green];
// [Asm]   r14 [label="v47 ← a0", color=green];
// [Asm]   r50 [label="v99 ← a6", color=green];
// [Asm]   r30 [label="v38 ← a0", color=green];
// [Asm]   r51 [label="v100 ← a0", color=green];
// [Asm]   r45 [label="v9 ← a1", color=green];
// [Asm]   r25 [label="v62 ← a0", color=green];
// [Asm]   r2 [label="v14 ← a2", color=green];
// [Asm]   r55 [label="v84 ← a6", color=green];
// [Asm]   r16 [label="v80 ← a0", color=green];
// [Asm]   r18 [label="v75 ← a0", color=green];
// [Asm]   r19 [label="v105 ← a7", color=green];
// [Asm]   r21 [label="v64 ← a0", color=green];
// [Asm]   r2 -- r32;
// [Asm]   r2 -- r31;
// [Asm]   r3 -- r52;
// [Asm]   r6 -- r48;
// [Asm]   r5 -- r21;
// [Asm]   r5 -- r33;
// [Asm]   r1 -- r26;
// [Asm]   r15 -- r50;
// [Asm]   r3 -- r15;
// [Asm]   r1 -- r30;
// [Asm]   r3 -- r16;
// [Asm]   r4 -- r51;
// [Asm]   r1 -- r57;
// [Asm]   r3 -- r53;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r2 -- r49;
// [Asm]   r3 -- r42;
// [Asm]   r5 -- r22;
// [Asm]   r35 -- r42;
// [Asm]   r5 -- r18;
// [Asm]   r4 -- r44;
// [Asm]   r3 -- r9;
// [Asm]   r5 -- r47;
// [Asm]   r3 -- r11;
// [Asm]   r4 -- r48;
// [Asm]   r5 -- r29;
// [Asm]   r1 -- r52;
// [Asm]   r2 -- r51;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r31;
// [Asm]   r3 -- r5;
// [Asm]   r1 -- r50;
// [Asm]   r4 -- r31;
// [Asm]   r2 -- r34;
// [Asm]   r5 -- r31;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r48;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r22 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r5 -- r57;
// [Asm]   r1 -- r48;
// [Asm]   r2 -- r48;
// [Asm]   r10 -- r33;
// [Asm]   r35 -- r38;
// [Asm]   r5 -- r32;
// [Asm]   r5 -- r54;
// [Asm]   r10 -- r31;
// [Asm]   r41 -- r42;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r29;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r33;
// [Asm]   r4 -- r56;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r51;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r25;
// [Asm]   r5 -- r55;
// [Asm]   r3 -- r49;
// [Asm]   r35 -- r37;
// [Asm]   r5 -- r51;
// [Asm]   r6 -- r50;
// [Asm]   r1 -- r41;
// [Asm]   r6 -- r55;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r35;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r6 -- r23;
// [Asm]   r6 -- r56;
// [Asm]   r3 -- r46;
// [Asm]   r4 -- r14;
// [Asm]   r40 -- r42;
// [Asm]   r6 -- r25;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r3 -- r45;
// [Asm]   r3 -- r25;
// [Asm]   r2 -- r26;
// [Asm]   r1 -- r43;
// [Asm]   r37 -- r43;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r34;
// [Asm]   r1 -- r47;
// [Asm]   r1 -- r55;
// [Asm]   r6 -- r33;
// [Asm]   r42 -- r44;
// [Asm]   r6 -- r30;
// [Asm]   r1 -- r22;
// [Asm]   r2 -- r52;
// [Asm]   r2 -- r50;
// [Asm]   r5 -- r19;
// [Asm]   r6 -- r46;
// [Asm]   r6 -- r53;
// [Asm]   r1 -- r13;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r43 -- r45;
// [Asm]   r5 -- r11;
// [Asm]   r35 -- r41;
// [Asm]   r21 -- r23;
// [Asm]   r3 -- r22;
// [Asm]   r3 -- r50;
// [Asm]   r6 -- r19;
// [Asm]   r2 -- r44;
// [Asm]   r3 -- r57;
// [Asm]   r6 -- r27;
// [Asm]   r4 -- r15;
// [Asm]   r35 -- r43;
// [Asm]   r4 -- r55;
// [Asm]   r5 -- r28;
// [Asm]   r38 -- r41;
// [Asm]   r2 -- r14;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r41 -- r44;
// [Asm]   r4 -- r32;
// [Asm]   r1 -- r29;
// [Asm]   r6 -- r57;
// [Asm]   r10 -- r15;
// [Asm]   r3 -- r29;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r5 -- r56;
// [Asm]   r41 -- r43;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r30;
// [Asm]   r5 -- r25;
// [Asm]   r35 -- r45;
// [Asm]   r2 -- r9;
// [Asm]   r10 -- r32;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r43 -- r44;
// [Asm]   r54 -- r56;
// [Asm]   r15 -- r19;
// [Asm]   r3 -- r23;
// [Asm]   r1 -- r54;
// [Asm]   r2 -- r27;
// [Asm]   r1 -- r24;
// [Asm]   r1 -- r42;
// [Asm]   r6 -- r52;
// [Asm]   r6 -- r21;
// [Asm]   r41 -- r45;
// [Asm]   r6 -- r47;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r43;
// [Asm]   r1 -- r4;
// [Asm]   r22 -- r54;
// [Asm]   r3 -- r56;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r56;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r4 -- r54;
// [Asm]   r2 -- r10;
// [Asm]   r10 -- r19;
// [Asm]   r6 -- r29;
// [Asm]   r3 -- r32;
// [Asm]   r5 -- r49;
// [Asm]   r6 -- r54;
// [Asm]   r5 -- r42;
// [Asm]   r44 -- r45;
// [Asm]   r1 -- r17;
// [Asm]   r2 -- r16;
// [Asm]   r42 -- r43;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r51;
// [Asm]   r3 -- r34;
// [Asm]   r46 -- r48;
// [Asm]   r37 -- r42;
// [Asm]   r1 -- r46;
// [Asm]   r1 -- r31;
// [Asm]   r35 -- r39;
// [Asm]   r4 -- r21;
// [Asm]   r6 -- r13;
// [Asm]   r42 -- r45;
// [Asm]   r2 -- r54;
// [Asm]   r4 -- r33;
// [Asm]   r2 -- r33;
// [Asm]   r3 -- r30;
// [Asm]   r50 -- r51;
// [Asm]   r3 -- r4;
// [Asm]   r54 -- r55;
// [Asm]   r35 -- r44;
// [Asm]   r4 -- r43;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r2 -- r46;
// [Asm]   r5 -- r53;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r4 -- r28;
// [Asm]   r6 -- r10;
// [Asm]   r2 -- r47;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r50 -- r52;
// [Asm]   r1 -- r27;
// [Asm]   r36 -- r42;
// [Asm]   r6 -- r31;
// [Asm]   r3 -- r27;
// [Asm]   r10 -- r30;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r50;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r5 -- r50;
// [Asm]   r1 -- r49;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r44;
// [Asm]   r1 -- r6;
// [Asm]   r21 -- r22;
// [Asm]   r2 -- r24;
// [Asm]   r22 -- r46;
// [Asm]   r2 -- r23;
// [Asm]   r36 -- r41;
// [Asm]   r4 -- r9;
// [Asm]   r6 -- r32;
// [Asm]   r5 -- r34;
// [Asm]   r2 -- r53;
// [Asm]   r35 -- r36;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r36 -- r44;
// [Asm]   r2 -- r18;
// [Asm]   r6 -- r49;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r23;
// [Asm]   r5 -- r23;
// [Asm]   r5 -- r48;
// [Asm]   r1 -- r53;
// [Asm]   r46 -- r47;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r32;
// [Asm]   r6 -- r51;
// [Asm]   r5 -- r52;
// [Asm]   r1 -- r15;
// [Asm]   r5 -- r44;
// [Asm]   r3 -- r47;
// [Asm]   r6 -- r16;
// [Asm]   r3 -- r28;
// [Asm]   r4 -- r30;
// [Asm]   r2 -- r55;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r26;
// [Asm]   r6 -- r24;
// [Asm]   r1 -- r28;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r34;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r2 -- r57;
// [Asm]   r4 -- r11;
// [Asm]   r4 -- r46;
// [Asm]   r5 -- r46;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r2 -- r56;
// [Asm]   r6 -- r28;
// [Asm]   r22 -- r23;
// [Asm]   r3 -- r55;
// [Asm]   r2 -- r21;
// [Asm]   r3 -- r41;
// [Asm]   r35 -- r40;
// [Asm]   r6 -- r17;
// [Asm]   r4 -- r47;
// [Asm]   r3 -- r14;
// [Asm]   r40 -- r41;
// [Asm]   r36 -- r43;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r3 -- r54;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r26;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r5 -- r43;
// [Asm]   r5 -- r30;
// [Asm]   r2 -- r3;
// [Asm]   r37 -- r41;
// [Asm]   r4 -- r52;
// [Asm]   r5 -- r15;
// [Asm]   r4 -- r19;
// [Asm]   r3 -- r44;
// [Asm]   r10 -- r14;
// [Asm]   comment = "0:v96-> 1:v11-> 2:v14-> 3:zero-> 4:v13-> 5:v12-> 6:v15-> 7:v97-> 9:v114-> 10:v31-> 14:v47-> 15:v48-> 19:v105-> 30:v38-> 31:v34-> 32:v103-> 33:v104-> 50:v99-> 51:v100-> 52:v101-> 11:v46-> 16:v80-> 17:v81-> 21:v64-> 22:v61-> 23:v90-> 25:v62-> 46:v66-> 47:v87-> 48:v88-> 54:v83-> 55:v84-> 56:v85-> 24:v60-> 26:v138-> 27:v133-> 28:v128-> 29:v123-> 8:v59-> 13:v76-> 18:v75-> 34:v53-> 44:v6-> 43:v5-> 42:v4-> 41:v3-> 35:v2-> 45:v9-> 36:a5-> 49:v69-> 53:v56-> 57:v72-> 37:a4-> 40:a3-> 38:a2-> 39:a1-> 12:a0-> 20:v77"
// [Asm]   comment = "v96<-a0;v66<-a0;v104<-a0;v114<-a0;v138<-a0;v87<-a6;v15<-a5;v6<-a0;v76<-a0;v56<-a0;v4<-a6;v13<-a3;v123<-a0;v2<-t0;v97<-a0;v85<-a6;v31<-a6;v59<-a0;v12<-a4;v83<-a0;v60<-a0;v48<-a0;v103<-a0;v69<-a0;v72<-a0;v5<-a2;v34<-a0;v81<-a0;v101<-a0;v88<-a6;v77<-a0;v90<-a7;v133<-a0;v11<-a1;v128<-a0;v3<-a7;v46<-a0;v53<-a0;v61<-a6;v47<-a0;v99<-a6;v38<-a0;v100<-a0;v9<-a1;v62<-a0;v14<-a2;v84<-a6;v80<-a0;v75<-a0;v105<-a7;v64<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main_loop.177"];
// [Asm]   r0 [label="fv32 ← fa0", color=green];
// [Asm]   r33 [label="fv10 ← fa0", color=green];
// [Asm]   r9 [label="fv44 ← fa1", color=green];
// [Asm]   r26 [label="fv36 ← fa4", color=green];
// [Asm]   r6 [label="fv41 ← fa4", color=green];
// [Asm]   r13 [label="fv19 ← fa0", color=green];
// [Asm]   r4 [label="fv115 ← fa4", color=green];
// [Asm]   r29 [label="fa0", color=blue];
// [Asm]   r7 [label="fv42 ← fa2", color=green];
// [Asm]   r10 [label="fv45 ← fa0", color=green];
// [Asm]   r8 [label="fv43 ← fa0", color=green];
// [Asm]   r5 [label="fv39 ← fa3", color=green];
// [Asm]   r32 [label="fv8 ← fa0", color=green];
// [Asm]   r15 [label="fv21 ← fa0", color=green];
// [Asm]   r24 [label="fv124 ← fa2", color=green];
// [Asm]   r31 [label="fv7 ← fa0", color=green];
// [Asm]   r17 [label="fv22 ← fa0", color=green];
// [Asm]   r12 [label="fv139 ← fa1", color=green];
// [Asm]   r20 [label="fv129 ← fa2", color=green];
// [Asm]   r23 [label="fv27 ← fa0", color=green];
// [Asm]   r3 [label="fv29 ← fa3", color=green];
// [Asm]   r27 [label="fv37 ← fa5", color=green];
// [Asm]   r1 [label="fv33 ← fa1", color=green];
// [Asm]   r28 [label="fa2", color=blue];
// [Asm]   r11 [label="fv18 ← fa0", color=green];
// [Asm]   r22 [label="fv26 ← fa2", color=green];
// [Asm]   r14 [label="fv20 ← fa1", color=green];
// [Asm]   r30 [label="fa1", color=blue];
// [Asm]   r25 [label="fv28 ← fa0", color=green];
// [Asm]   r2 [label="fv30 ← fa2", color=green];
// [Asm]   r16 [label="fv134 ← fa1", color=green];
// [Asm]   r18 [label="fv23 ← fa1", color=green];
// [Asm]   r19 [label="fv24 ← fa0", color=green];
// [Asm]   r21 [label="fv25 ← fa0", color=green];
// [Asm]   r26 -- r27;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r0 -- r26;
// [Asm]   r3 -- r4;
// [Asm]   r18 -- r19;
// [Asm]   r3 -- r25;
// [Asm]   r1 -- r26;
// [Asm]   r2 -- r26;
// [Asm]   r28 -- r32;
// [Asm]   r28 -- r31;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r4;
// [Asm]   r7 -- r10;
// [Asm]   r13 -- r14;
// [Asm]   r1 -- r7;
// [Asm]   r8 -- r9;
// [Asm]   r18 -- r25;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r27;
// [Asm]   r1 -- r2;
// [Asm]   r30 -- r31;
// [Asm]   r2 -- r5;
// [Asm]   r11 -- r12;
// [Asm]   r3 -- r27;
// [Asm]   r0 -- r1;
// [Asm]   r23 -- r24;
// [Asm]   r18 -- r21;
// [Asm]   r18 -- r20;
// [Asm]   r18 -- r22;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r3 -- r26;
// [Asm]   r0 -- r4;
// [Asm]   r21 -- r22;
// [Asm]   r7 -- r9;
// [Asm]   r7 -- r8;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r27;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r2 -- r27;
// [Asm]   r0 -- r6;
// [Asm]   r19 -- r20;
// [Asm]   r18 -- r23;
// [Asm]   r18 -- r24;
// [Asm]   comment = "0:fv32-> 1:fv33-> 2:fv30-> 3:fv29-> 4:fv115-> 26:fv36-> 27:fv37-> 5:fv39-> 6:fv41-> 7:fv42-> 8:fv43-> 9:fv44-> 10:fv45-> 25:fv28-> 18:fv23-> 19:fv24-> 20:fv129-> 21:fv25-> 22:fv26-> 23:fv27-> 24:fv124-> 11:fv18-> 12:fv139-> 13:fv19-> 14:fv20-> 15:fv21-> 16:fv134-> 17:fv22-> 28:fa2-> 31:fv7-> 30:fa1-> 32:fv8-> 29:fa0-> 33:fv10"
// [Asm]   comment = "fv32<-fa0;fv10<-fa0;fv44<-fa1;fv36<-fa4;fv41<-fa4;fv19<-fa0;fv115<-fa4;fv42<-fa2;fv45<-fa0;fv43<-fa0;fv39<-fa3;fv8<-fa0;fv21<-fa0;fv124<-fa2;fv7<-fa0;fv22<-fa0;fv139<-fa1;fv129<-fa2;fv27<-fa0;fv29<-fa3;fv37<-fa5;fv33<-fa1;fv18<-fa0;fv26<-fa2;fv20<-fa1;fv28<-fa0;fv30<-fa2;fv134<-fa1;fv23<-fa1;fv24<-fa0;fv25<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   slliw v96, v48, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v97, v15, v96 ->   add a0, a5, a0
// [Asm] subst   sw zero, 0(v97) ->   sw zero, 0(a0)
// [Asm] subst   addi v59, v13, 1 ->   addi a0, a3, 1
// [Asm] subst   mv v13, v59 ->   mv a3, a0
// [Asm] subst   j .main_loop.177_2 ->   j .main_loop.177_2
// [Asm] subst   beq v13, v11, .main_loop.177_5 ->   beq a3, a1, .main_loop.177_5
// [Asm] subst   li v114, 4611686018427387904 ->   li a0, 4611686018427387904
// [Asm] subst   fmv.d.x fv115, v114 ->   fmv.d.x fa4, a0
// [Asm] subst   fmul.d fv39, fv115, fv29 ->   fmul.d fa3, fa4, fa3
// [Asm] subst   fld fv41, c_im.6, t5 ->   fld fa4, c_im.6, t5
// [Asm] subst   fmadd.d fv42, fv39, fv30, fv41 ->   fmadd.d fa2, fa3, fa2, fa4
// [Asm] subst   fsub.d fv43, fv32, fv33 ->   fsub.d fa0, fa0, fa1
// [Asm] subst   fld fv44, c_re.5, t5 ->   fld fa1, c_re.5, t5
// [Asm] subst   fadd.d fv45, fv43, fv44 ->   fadd.d fa0, fa0, fa1
// [Asm] subst   addi v46, v31, 1 ->   addi a0, a6, 1
// [Asm] subst   fmv.d fv29, fv45 ->   fmv.d fa3, fa0
// [Asm] subst   mv v31, v46 ->   mv a6, a0
// [Asm] subst   j .main_loop.177_8 ->   j .main_loop.177_8
// [Asm] subst   beq v14, v12, .main_loop.177_3 ->   beq a2, a4, .main_loop.177_3
// [Asm] subst   ret ->   ret
// [Asm] subst   addi v76, v14, 1 ->   addi a0, a2, 1
// [Asm] subst   mv v13, zero ->   mv a3, zero
// [Asm] subst   mv v14, v76 ->   mv a2, a0
// [Asm] subst   j .main_loop.177_2 ->   j .main_loop.177_2
// [Asm] subst   mul v47, v14, v11 ->   mul a0, a2, a1
// [Asm] subst   add v48, v47, v13 ->   add a0, a0, a3
// [Asm] subst   bge zero, v31, .main_loop.177_19 ->   bge zero, a6, .main_loop.177_19
// [Asm] subst   slliw v80, v61, 2 ->   slliw a0, a6, 2
// [Asm] subst   add v81, v15, v80 ->   add a0, a5, a0
// [Asm] subst   sw zero, 0(v81) ->   sw zero, 0(a0)
// [Asm] subst   addi v75, v13, 1 ->   addi a0, a3, 1
// [Asm] subst   mv v13, v75 ->   mv a3, a0
// [Asm] subst   j .main_loop.177_2 ->   j .main_loop.177_2
// [Asm] subst   li v105, 48 ->   li a7, 48
// [Asm] subst   blt v31, v105, .main_loop.177_22 ->   blt a6, a7, .main_loop.177_22
// [Asm] subst   mv v77, zero ->   mv a0, zero
// [Asm] subst   lw v64, iter.3 ->   lw a0, iter.3
// [Asm] subst   li v90, 48 ->   li a7, 48
// [Asm] subst   bge v64, v90, .main_loop.177_13 ->   bge a0, a7, .main_loop.177_13
// [Asm] subst   mul v60, v14, v11 ->   mul a0, a2, a1
// [Asm] subst   add v61, v60, v13 ->   add a6, a0, a3
// [Asm] subst   lw v62, iter.3 ->   lw a0, iter.3
// [Asm] subst   bge zero, v62, .main_loop.177_11 ->   bge zero, a0, .main_loop.177_11
// [Asm] subst   fcvt.d.w fv18, v13 ->   fcvt.d.w fa0, a3
// [Asm] subst   li v138, 4613937818241073152 ->   li a0, 4613937818241073152
// [Asm] subst   fmv.d.x fv139, v138 ->   fmv.d.x fa1, a0
// [Asm] subst   fmul.d fv19, fv139, fv18 ->   fmul.d fa0, fa1, fa0
// [Asm] subst   fcvt.d.w fv20, v11 ->   fcvt.d.w fa1, a1
// [Asm] subst   fdiv.d fv21, fv19, fv20 ->   fdiv.d fa0, fa0, fa1
// [Asm] subst   li v133, 4609434218613702656 ->   li a0, 4609434218613702656
// [Asm] subst   fmv.d.x fv134, v133 ->   fmv.d.x fa1, a0
// [Asm] subst   fsub.d fv22, fv21, fv134 ->   fsub.d fa0, fa0, fa1
// [Asm] subst   fneg.d fv23, fv22 ->   fneg.d fa1, fa0
// [Asm] subst   fcvt.d.w fv24, v14 ->   fcvt.d.w fa0, a2
// [Asm] subst   li v128, 4613937818241073152 ->   li a0, 4613937818241073152
// [Asm] subst   fmv.d.x fv129, v128 ->   fmv.d.x fa2, a0
// [Asm] subst   fmul.d fv25, fv129, fv24 ->   fmul.d fa0, fa2, fa0
// [Asm] subst   fcvt.d.w fv26, v12 ->   fcvt.d.w fa2, a4
// [Asm] subst   fdiv.d fv27, fv25, fv26 ->   fdiv.d fa0, fa0, fa2
// [Asm] subst   li v123, 4609434218613702656 ->   li a0, 4609434218613702656
// [Asm] subst   fmv.d.x fv124, v123 ->   fmv.d.x fa2, a0
// [Asm] subst   fsub.d fv28, fv27, fv124 ->   fsub.d fa0, fa0, fa2
// [Asm] subst   fmv.d fv29, fv23 ->   fmv.d fa3, fa1
// [Asm] subst   fmv.d fv30, fv28 ->   fmv.d fa2, fa0
// [Asm] subst   mv v31, zero ->   mv a6, zero
// [Asm] subst   fadd.d fv36, fv32, fv33 ->   fadd.d fa4, fa0, fa1
// [Asm] subst   fld fv37, limit_sq.2, t5 ->   fld fa5, limit_sq.2, t5
// [Asm] subst   fle.d v38, fv37, fv36 ->   fle.d a0, fa5, fa4
// [Asm] subst   beq v38, zero, .main_loop.177_18 ->   beq a0, zero, .main_loop.177_18
// [Asm] subst   fmul.d fv32, fv29, fv29 ->   fmul.d fa0, fa3, fa3
// [Asm] subst   fmul.d fv33, fv30, fv30 ->   fmul.d fa1, fa2, fa2
// [Asm] subst   lw v34, iter.3 ->   lw a0, iter.3
// [Asm] subst   bne v31, v34, .main_loop.177_10 ->   bne a6, a0, .main_loop.177_10
// [Asm] subst   slliw v103, v48, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v104, v15, v103 ->   add a0, a5, a0
// [Asm] subst   sw v31, 0(v104) ->   sw a6, 0(a0)
// [Asm] subst   addi v53, v13, 1 ->   addi a0, a3, 1
// [Asm] subst   mv v13, v53 ->   mv a3, a0
// [Asm] subst   j .main_loop.177_2 ->   j .main_loop.177_2
// [Asm] subst   mv v2, a0 ->   mv t0, a0
// [Asm] subst   mv v3, a1 ->   mv a7, a1
// [Asm] subst   mv v4, a2 ->   mv a6, a2
// [Asm] subst   mv v5, a3 ->   mv a2, a3
// [Asm] subst   mv v6, a4 ->   mv a0, a4
// [Asm] subst   fmv.d fv8, fa1 ->   fmv.d fa0, fa1
// [Asm] subst   mv v9, a5 ->   mv a1, a5
// [Asm] subst   fmv.d fv10, fa2 ->   fmv.d fa0, fa2
// [Asm] subst   mv v11, v2 ->   mv a1, t0
// [Asm] subst   mv v12, v3 ->   mv a4, a7
// [Asm] subst   mv v13, v4 ->   mv a3, a6
// [Asm] subst   mv v15, v6 ->   mv a5, a0
// [Asm] subst   lw v66, iter.3 ->   lw a0, iter.3
// [Asm] subst   slliw v87, v61, 2 ->   slliw a6, a6, 2
// [Asm] subst   add v88, v15, v87 ->   add a6, a5, a6
// [Asm] subst   sw v66, 0(v88) ->   sw a0, 0(a6)
// [Asm] subst   addi v69, v13, 1 ->   addi a0, a3, 1
// [Asm] subst   mv v13, v69 ->   mv a3, a0
// [Asm] subst   j .main_loop.177_2 ->   j .main_loop.177_2
// [Asm] subst   li v99, 48 ->   li a6, 48
// [Asm] subst   slliw v100, v48, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v101, v15, v100 ->   add a0, a5, a0
// [Asm] subst   sw v99, 0(v101) ->   sw a6, 0(a0)
// [Asm] subst   addi v56, v13, 1 ->   addi a0, a3, 1
// [Asm] subst   mv v13, v56 ->   mv a3, a0
// [Asm] subst   j .main_loop.177_2 ->   j .main_loop.177_2
// [Asm] subst   li v83, 48 ->   li a0, 48
// [Asm] subst   slliw v84, v61, 2 ->   slliw a6, a6, 2
// [Asm] subst   add v85, v15, v84 ->   add a6, a5, a6
// [Asm] subst   sw v83, 0(v85) ->   sw a0, 0(a6)
// [Asm] subst   addi v72, v13, 1 ->   addi a0, a3, 1
// [Asm] subst   mv v13, v72 ->   mv a3, a0
// [Asm] subst   j .main_loop.177_2 ->   j .main_loop.177_2
// [Asm] pre_assigned_registers: Self(fref=f4) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$iter.3"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   comment = "0:v2-> 1:a0"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$iter.3"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 300 ->   li a0, 300
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> fv3, Self(fref=f8) -> v0, Insn(iref=%0) -> fv2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [fv2]
// [Asm] live_set: [fv2]
// [Asm] move_origin: []
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$c_re.5"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$c_re.5"];
// [Asm]   r0 [label="fv2 ← fa0", color=green];
// [Asm]   r2 [label="fa0", color=blue];
// [Asm]   r1 [label="fv3 ← fa0", color=green];
// [Asm]   comment = "0:fv2-> 1:fv3-> 2:fa0"
// [Asm]   comment = "fv2<-fa0;fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   fld fv2, _4, t5 ->   fld fa0, _4, t5
// [Asm] subst   fneg.d fv3, fv2 ->   fneg.d fa0, fa0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$limit.1"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   comment = "0:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$limit.1"];
// [Asm]   r0 [label="fv3 ← fa0", color=green];
// [Asm]   r1 [label="fa0", color=blue];
// [Asm]   comment = "0:fv3-> 1:fa0"
// [Asm]   comment = "fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 4611686018427387904 ->   li a0, 4611686018427387904
// [Asm] subst   fmv.d.x fv3, v2 ->   fmv.d.x fa0, a0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: BlockParam(bref=b2, bpref=$b.0) -> v7, BlockParam(bref=b2, bpref=$b.4) -> v11, Insn(iref=%9) -> v20, FnParam(fref=f13, fpref=$f.0) -> v2, BlockParam(bref=b2, bpref=$b.1) -> v8, Insn(iref=%8) -> v19, Insn(iref=%10) -> v16, FnParam(fref=f13, fpref=$f.3) -> v5, BlockParam(bref=b2, bpref=$b.2) -> v9, BlockParam(bref=b8, bpref=$b.0) -> v23, Insn(iref=%5) -> v15, Insn(iref=%0) -> v12, Insn(iref=%4) -> v14, Insn(iref=%3) -> v22, Insn(iref=%7) -> v18, Insn(iref=%2) -> v21, Insn(iref=%1) -> v13, BlockParam(bref=b2, bpref=$b.3) -> v10, Self(fref=f13) -> v0, FnParam(fref=f13, fpref=$f.2) -> v4, FnParam(fref=f13, fpref=$f.1) -> v3, Insn(iref=%6) -> v17, FnParam(fref=f13, fpref=$f.4) -> v6
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%5), width=@32))
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b2, bpref=$b.2), BlockParam(bref=b2, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.1)])
// [Asm] defs: [v23]
// [Asm] live_set: [v23]
// [Asm] move_origin: [zero]
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [a2, a1, a3, zero, a0, a4]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, a3, zero, a4, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, a3, zero, a4, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, a3, zero, a4, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, zero, a4, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v4, v6, v5, zero, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v4, v6, v5, zero, v7]
// [Asm] move_origin: [v2]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v4, v6, v5, zero, v8]
// [Asm] move_origin: [v3]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v7, v6, v5, zero, v9, v8]
// [Asm] move_origin: [v4]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v7, v6, v10, zero, v9, v8]
// [Asm] move_origin: [v5]
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: [v6]
// [Asm] defined: v11 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v11, v14, v10, zero, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v11, v10, zero, v7, v8, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v30]
// [Asm] live_set: [v11, v10, zero, v30, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v11, v10, zero, v7, v8, v31, v9]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v11, v10, zero, v7, v8, v17, v9]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v11, v10, v18, zero, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v18, zero, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v10, zero, a0, v7, v8, v9]
// [Asm] move_origin: [v18]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, zero, a0, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v19]
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defs: [v20]
// [Asm] live_set: [v11, v10, zero, v20, v7, v8]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v20, v7, v8]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v20, v7, v8]
// [Asm] move_origin: [v8]
// [Asm] defs: [v9]
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: [v20]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v23]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v7, v8]
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v11, v25, v10, zero, v7, v8]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v10, zero, a0, v7, v8]
// [Asm] move_origin: [v25]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, zero, a0, v7, v8]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v21]
// [Asm] live_set: [v11, v10, zero, v7, v8]
// [Asm] move_origin: [a0]
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v7, v8]
// [Asm] move_origin: []
// [Asm] defs: [v22]
// [Asm] live_set: [v11, zero, v22, v7, v8]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v11, zero, v22, v7, v8]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v11, zero, v22, v7, v8]
// [Asm] move_origin: [v8]
// [Asm] defs: [v9]
// [Asm] live_set: [v11, zero, v22, v7, v8, v9]
// [Asm] move_origin: [zero]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: [v22]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of print_loop.178"];
// [Asm]   r0 [label="v23 ← a0", color=green];
// [Asm]   r33 [label="v25 ← a0", color=green];
// [Asm]   r9 [label="v5 ← a3", color=green];
// [Asm]   r26 [label="t0", color=blue];
// [Asm]   r6 [label="a4", color=blue];
// [Asm]   r13 [label="v9 ← s2", color=green];
// [Asm]   r4 [label="a3", color=blue];
// [Asm]   r29 [label="t3", color=blue];
// [Asm]   r35 [label="v22 ← a0", color=green];
// [Asm]   r7 [label="v3 ← a1", color=green];
// [Asm]   r10 [label="v6 ← a4", color=green];
// [Asm]   r8 [label="v4 ← a2", color=green];
// [Asm]   r5 [label="zero", color=blue];
// [Asm]   r24 [label="a6", color=blue];
// [Asm]   r15 [label="v11 ← s4", color=green];
// [Asm]   r32 [label="v20 ← a0", color=green];
// [Asm]   r31 [label="v19 ← a0", color=green];
// [Asm]   r17 [label="v15 ← a0", color=green];
// [Asm]   r12 [label="v8 ← s1", color=green];
// [Asm]   r20 [label="v17 ← a0", color=green];
// [Asm]   r23 [label="a5", color=blue];
// [Asm]   r3 [label="a1", color=blue];
// [Asm]   r27 [label="t1", color=blue];
// [Asm]   r1 [label="v2 ← a0", color=green];
// [Asm]   r28 [label="t2", color=blue];
// [Asm]   r11 [label="v7 ← s0", color=green];
// [Asm]   r34 [label="v21 ← a0", color=green];
// [Asm]   r22 [label="a0", color=blue];
// [Asm]   r14 [label="v10 ← s3", color=green];
// [Asm]   r30 [label="t4", color=blue];
// [Asm]   r25 [label="a7", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r16 [label="v14 ← a0", color=green];
// [Asm]   r18 [label="v30 ← a0", color=green];
// [Asm]   r19 [label="v31 ← a0", color=green];
// [Asm]   r21 [label="v18 ← a0", color=green];
// [Asm]   r10 -- r14;
// [Asm]   r12 -- r35;
// [Asm]   r12 -- r25;
// [Asm]   r12 -- r29;
// [Asm]   r12 -- r32;
// [Asm]   r5 -- r21;
// [Asm]   r14 -- r20;
// [Asm]   r5 -- r33;
// [Asm]   r3 -- r15;
// [Asm]   r11 -- r35;
// [Asm]   r14 -- r16;
// [Asm]   r2 -- r15;
// [Asm]   r14 -- r27;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r10;
// [Asm]   r1 -- r4;
// [Asm]   r11 -- r14;
// [Asm]   r15 -- r31;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r10;
// [Asm]   r5 -- r18;
// [Asm]   r10 -- r13;
// [Asm]   r11 -- r31;
// [Asm]   r11 -- r32;
// [Asm]   r3 -- r11;
// [Asm]   r13 -- r31;
// [Asm]   r5 -- r29;
// [Asm]   r13 -- r28;
// [Asm]   r11 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r11 -- r18;
// [Asm]   r4 -- r22;
// [Asm]   r15 -- r25;
// [Asm]   r12 -- r19;
// [Asm]   r3 -- r5;
// [Asm]   r11 -- r19;
// [Asm]   r14 -- r34;
// [Asm]   r8 -- r12;
// [Asm]   r14 -- r30;
// [Asm]   r5 -- r31;
// [Asm]   r12 -- r24;
// [Asm]   r6 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r14 -- r28;
// [Asm]   r14 -- r19;
// [Asm]   r15 -- r18;
// [Asm]   r22 -- r25;
// [Asm]   r5 -- r35;
// [Asm]   r13 -- r30;
// [Asm]   r5 -- r6;
// [Asm]   r11 -- r13;
// [Asm]   r12 -- r28;
// [Asm]   r10 -- r12;
// [Asm]   r3 -- r13;
// [Asm]   r7 -- r10;
// [Asm]   r9 -- r12;
// [Asm]   r2 -- r12;
// [Asm]   r22 -- r27;
// [Asm]   r5 -- r32;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r13 -- r18;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r12 -- r23;
// [Asm]   r11 -- r15;
// [Asm]   r15 -- r23;
// [Asm]   r5 -- r14;
// [Asm]   r13 -- r22;
// [Asm]   r14 -- r31;
// [Asm]   r8 -- r11;
// [Asm]   r13 -- r35;
// [Asm]   r1 -- r6;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r12 -- r21;
// [Asm]   r13 -- r21;
// [Asm]   r7 -- r8;
// [Asm]   r15 -- r28;
// [Asm]   r11 -- r30;
// [Asm]   r4 -- r14;
// [Asm]   r13 -- r29;
// [Asm]   r15 -- r30;
// [Asm]   r14 -- r15;
// [Asm]   r14 -- r22;
// [Asm]   r5 -- r34;
// [Asm]   r11 -- r25;
// [Asm]   r14 -- r32;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r13 -- r24;
// [Asm]   r6 -- r11;
// [Asm]   r13 -- r15;
// [Asm]   r4 -- r5;
// [Asm]   r14 -- r18;
// [Asm]   r11 -- r20;
// [Asm]   r14 -- r17;
// [Asm]   r6 -- r15;
// [Asm]   r11 -- r17;
// [Asm]   r15 -- r29;
// [Asm]   r14 -- r26;
// [Asm]   r1 -- r8;
// [Asm]   r5 -- r20;
// [Asm]   r15 -- r26;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r23;
// [Asm]   r15 -- r22;
// [Asm]   r12 -- r34;
// [Asm]   r12 -- r15;
// [Asm]   r14 -- r23;
// [Asm]   r8 -- r9;
// [Asm]   r13 -- r26;
// [Asm]   r11 -- r16;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r15 -- r35;
// [Asm]   r22 -- r29;
// [Asm]   r13 -- r16;
// [Asm]   r11 -- r12;
// [Asm]   r5 -- r19;
// [Asm]   r22 -- r26;
// [Asm]   r11 -- r23;
// [Asm]   r11 -- r22;
// [Asm]   r14 -- r29;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r14 -- r24;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r12;
// [Asm]   r15 -- r27;
// [Asm]   r13 -- r25;
// [Asm]   r13 -- r20;
// [Asm]   r22 -- r24;
// [Asm]   r13 -- r19;
// [Asm]   r15 -- r32;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r8;
// [Asm]   r12 -- r20;
// [Asm]   r14 -- r33;
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r15;
// [Asm]   r11 -- r33;
// [Asm]   r4 -- r11;
// [Asm]   r22 -- r30;
// [Asm]   r12 -- r13;
// [Asm]   r15 -- r17;
// [Asm]   r5 -- r28;
// [Asm]   r12 -- r33;
// [Asm]   r2 -- r14;
// [Asm]   r15 -- r21;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r12 -- r31;
// [Asm]   r5 -- r9;
// [Asm]   r13 -- r23;
// [Asm]   r14 -- r25;
// [Asm]   r22 -- r28;
// [Asm]   r14 -- r21;
// [Asm]   r13 -- r14;
// [Asm]   r12 -- r22;
// [Asm]   r10 -- r11;
// [Asm]   r22 -- r23;
// [Asm]   r7 -- r11;
// [Asm]   r13 -- r17;
// [Asm]   r15 -- r34;
// [Asm]   r3 -- r14;
// [Asm]   r8 -- r10;
// [Asm]   r15 -- r24;
// [Asm]   r11 -- r34;
// [Asm]   r12 -- r30;
// [Asm]   r4 -- r7;
// [Asm]   r11 -- r26;
// [Asm]   r15 -- r33;
// [Asm]   r5 -- r25;
// [Asm]   r12 -- r14;
// [Asm]   r12 -- r16;
// [Asm]   r5 -- r27;
// [Asm]   r12 -- r27;
// [Asm]   r11 -- r27;
// [Asm]   r12 -- r17;
// [Asm]   r1 -- r3;
// [Asm]   r9 -- r13;
// [Asm]   r15 -- r16;
// [Asm]   r15 -- r20;
// [Asm]   r5 -- r30;
// [Asm]   r11 -- r28;
// [Asm]   r15 -- r19;
// [Asm]   r13 -- r27;
// [Asm]   r12 -- r18;
// [Asm]   r11 -- r21;
// [Asm]   r12 -- r26;
// [Asm]   r11 -- r29;
// [Asm]   r5 -- r15;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v23-> 1:v2-> 2:a2-> 5:zero-> 7:v3-> 4:a3-> 8:v4-> 11:v7-> 6:a4-> 9:v5-> 12:v8-> 10:v6-> 13:v9-> 14:v10-> 15:v11-> 22:a0-> 3:a1-> 23:a5-> 24:a6-> 25:a7-> 26:t0-> 27:t1-> 28:t2-> 29:t3-> 30:t4-> 16:v14-> 17:v15-> 18:v30-> 19:v31-> 20:v17-> 21:v18-> 31:v19-> 32:v20-> 33:v25-> 34:v21-> 35:v22"
// [Asm]   comment = "v23<-a0;v25<-a0;v5<-a3;v9<-s2;v22<-a0;v3<-a1;v6<-a4;v4<-a2;v11<-s4;v20<-a0;v19<-a0;v15<-a0;v8<-s1;v17<-a0;v2<-a0;v7<-s0;v21<-a0;v10<-s3;v14<-a0;v30<-a0;v31<-a0;v18<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of print_loop.178"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v23, zero ->   mv a0, zero
// [Asm] subst   mv v7, v2 ->   mv s0, a0
// [Asm] subst   mv v8, v3 ->   mv s1, a1
// [Asm] subst   mv v9, v4 ->   mv s2, a2
// [Asm] subst   mv v10, v5 ->   mv s3, a3
// [Asm] subst   mv v11, v6 ->   mv s4, a4
// [Asm] subst   mul v14, v10, v7 ->   mul a0, s3, s0
// [Asm] subst   add v15, v14, v9 ->   add a0, a0, s2
// [Asm] subst   slliw v30, v15, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v31, v11, v30 ->   add a0, s4, a0
// [Asm] subst   lw v17, 0(v31) ->   lw a0, 0(a0)
// [Asm] subst   addi v18, v17, 48 ->   addi a0, a0, 48
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   addi v20, v9, 1 ->   addi a0, s2, 1
// [Asm] subst   mv v9, v20 ->   mv s2, a0
// [Asm] subst   j .print_loop.178_2 ->   j .print_loop.178_2
// [Asm] subst   beq v9, v7, .print_loop.178_5 ->   beq s2, s0, .print_loop.178_5
// [Asm] subst   ret ->   ret
// [Asm] subst   li v25, 10 ->   li a0, 10
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   addi v22, v10, 1 ->   addi a0, s3, 1
// [Asm] subst   mv v9, zero ->   mv s2, zero
// [Asm] subst   mv v10, v22 ->   mv s3, a0
// [Asm] subst   j .print_loop.178_2 ->   j .print_loop.178_2
// [Asm] subst   beq v10, v8, .print_loop.178_3 ->   beq s3, s1, .print_loop.178_3
// [Asm] pre_assigned_registers: Self(fref=f10) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$c_im.6"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   comment = "0:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$c_im.6"];
// [Asm]   r0 [label="fv3 ← fa0", color=green];
// [Asm]   r1 [label="fa0", color=blue];
// [Asm]   comment = "0:fv3-> 1:fa0"
// [Asm]   comment = "fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 4604885582990058455 ->   li a0, 4604885582990058455
// [Asm] subst   fmv.d.x fv3, v2 ->   fmv.d.x fa0, a0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%0) -> fv2, Insn(iref=%2) -> fv3
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [fv2]
// [Asm] live_set: [fv2]
// [Asm] move_origin: []
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$limit_sq.2"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$limit_sq.2"];
// [Asm]   r0 [label="fv2 ← fa0", color=green];
// [Asm]   r2 [label="fa0", color=blue];
// [Asm]   r1 [label="fv3 ← fa0", color=green];
// [Asm]   comment = "0:fv2-> 1:fv3-> 2:fa0"
// [Asm]   comment = "fv2<-fa0;fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   fld fv2, limit.1, t5 ->   fld fa0, limit.1, t5
// [Asm] subst   fmul.d fv3, fv2, fv2 ->   fmul.d fa0, fa0, fa0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v6, Insn(iref=%1) -> fv3, Insn(iref=%3) -> fv5, Self(fref=f18) -> v0, Insn(iref=%0) -> fv2, Insn(iref=%2) -> v4
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [fv2]
// [Asm] live_set: [fv2]
// [Asm] move_origin: []
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fv2, fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v4, fv2, fv3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [fv5]
// [Asm] live_set: [fv5, v4, fv2, fv3]
// [Asm] move_origin: []
// [Asm] defined: fv5 is F
// [Asm] defs: []
// [Asm] live_set: [fv5, v4, fv2, fv3]
// [Asm] move_origin: []
// [Asm] defs: [fa0]
// [Asm] live_set: [fv5, v4, fv3, fa0]
// [Asm] move_origin: [fv2]
// [Asm] defined: fa0 is F
// [Asm] defs: [fa1]
// [Asm] live_set: [fv5, v4, fa1, fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa1 is F
// [Asm] defs: [a0]
// [Asm] live_set: [fv5, fa1, a0, fa0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [fa2]
// [Asm] live_set: [fa2, fa1, a0, fa0]
// [Asm] move_origin: [fv5]
// [Asm] defined: fa2 is F
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r8 [label="a7", color=blue];
// [Asm]   r0 [label="v4 ← a0", color=green];
// [Asm]   r5 [label="a4", color=blue];
// [Asm]   r3 [label="a2", color=blue];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r9 [label="t0", color=blue];
// [Asm]   r6 [label="a5", color=blue];
// [Asm]   r13 [label="t4", color=blue];
// [Asm]   r4 [label="a3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="t2", color=blue];
// [Asm]   r7 [label="a6", color=blue];
// [Asm]   r10 [label="t1", color=blue];
// [Asm]   r14 [label="v6 ← a0", color=green];
// [Asm]   r12 [label="t3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:v4-> 1:a0-> 2:a1-> 3:a2-> 4:a3-> 5:a4-> 6:a5-> 7:a6-> 8:a7-> 9:t0-> 10:t1-> 11:t2-> 12:t3-> 13:t4-> 14:v6"
// [Asm]   comment = "v4<-a0;v6<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="fv2 ← fa0", color=green];
// [Asm]   r20 [label="fa6", color=blue];
// [Asm]   r3 [label="fa0", color=blue];
// [Asm]   r9 [label="ft3", color=blue];
// [Asm]   r6 [label="ft0", color=blue];
// [Asm]   r13 [label="ft7", color=blue];
// [Asm]   r4 [label="fa1", color=blue];
// [Asm]   r1 [label="fv3 ← fa1", color=green];
// [Asm]   r11 [label="ft5", color=blue];
// [Asm]   r7 [label="ft1", color=blue];
// [Asm]   r10 [label="ft4", color=blue];
// [Asm]   r14 [label="ft8", color=blue];
// [Asm]   r8 [label="ft2", color=blue];
// [Asm]   r5 [label="fa2", color=blue];
// [Asm]   r15 [label="ft9", color=blue];
// [Asm]   r2 [label="fv5 ← fa2", color=green];
// [Asm]   r16 [label="ft10", color=blue];
// [Asm]   r18 [label="fa4", color=blue];
// [Asm]   r19 [label="fa5", color=blue];
// [Asm]   r21 [label="fa7", color=blue];
// [Asm]   r17 [label="fa3", color=blue];
// [Asm]   r12 [label="ft6", color=blue];
// [Asm]   r0 -- r2;
// [Asm]   r2 -- r4;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r1 -- r2;
// [Asm]   comment = "0:fv2-> 1:fv3-> 2:fv5-> 3:fa0-> 4:fa1-> 5:fa2-> 6:ft0-> 7:ft1-> 8:ft2-> 9:ft3-> 10:ft4-> 11:ft5-> 12:ft6-> 13:ft7-> 14:ft8-> 15:ft9-> 16:ft10-> 17:fa3-> 18:fa4-> 19:fa5-> 20:fa6-> 21:fa7"
// [Asm]   comment = "fv2<-fa0;fv3<-fa1;fv5<-fa2;"
// [Asm] }
// [Asm] 
// [Asm] subst   fld fv2, c_im.6, t5 ->   fld fa0, c_im.6, t5
// [Asm] subst   fld fv3, c_re.5, t5 ->   fld fa1, c_re.5, t5
// [Asm] subst   lw v4, iter.3 ->   lw a0, iter.3
// [Asm] subst   fld fv5, limit_sq.2, t5 ->   fld fa2, limit_sq.2, t5
// [Asm] subst   call main.179 ->   call main.179
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%4) -> fv11, Insn(iref=%3) -> v10, FnParam(fref=f14, fpref=$f.2) -> v4, Mem(fref=f14, mref=m0) -> v6, Insn(iref=%7) -> fv14, Self(fref=f14) -> v0, Insn(iref=%2) -> v9, Insn(iref=%9) -> v16, Insn(iref=%1) -> v8, Insn(iref=%8) -> v15, FnParam(fref=f14, fpref=$f.1) -> fv3, Insn(iref=%6) -> v13, FnParam(fref=f14, fpref=$f.0) -> fv2, Insn(iref=%5) -> fv12, Insn(iref=%0) -> v7, FnParam(fref=f14, fpref=$f.3) -> fv5
// [Asm] defs: []
// [Asm] live_set: [fa2, zero, a0, fa0, s11, fa1]
// [Asm] move_origin: []
// [Asm] defs: [fv2]
// [Asm] live_set: [fa2, zero, a0, s11, fa1]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fa2, zero, a0, s11]
// [Asm] move_origin: [fa1]
// [Asm] defined: fv3 is F
// [Asm] defs: [v4]
// [Asm] live_set: [fa2, zero, s11]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: [fv5]
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: [fa2]
// [Asm] defined: fv5 is F
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, s11]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [zero, v7, s11]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v7, s11]
// [Asm] move_origin: []
// [Asm] defs: [v26]
// [Asm] live_set: [zero, v26, v7, s11]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [v8]
// [Asm] live_set: [zero, v7, v8, s11]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [zero, v7, v8, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v23]
// [Asm] live_set: [zero, v23, v7, v8, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v6]
// [Asm] live_set: [zero, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, v7, v8, v6]
// [Asm] move_origin: [v9]
// [Asm] defined: a1 is X
// [Asm] defs: [fv11]
// [Asm] live_set: [zero, fv11, v7, v8, v6]
// [Asm] move_origin: []
// [Asm] defined: fv11 is F
// [Asm] defs: [fv12]
// [Asm] live_set: [zero, fv11, v7, v8, fv12, v6]
// [Asm] move_origin: []
// [Asm] defined: fv12 is F
// [Asm] defs: [v13]
// [Asm] live_set: [zero, v13, fv11, v7, v8, fv12, v6]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [fv14]
// [Asm] live_set: [zero, v13, fv11, v7, v8, fv12, v6, fv14]
// [Asm] move_origin: []
// [Asm] defined: fv14 is F
// [Asm] defs: []
// [Asm] live_set: [zero, v13, fv11, v7, v8, fv12, v6, fv14]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, zero, v13, fv11, v7, v8, fv12, v6, fv14]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a0, zero, v13, fv11, v7, v8, fv12, v6, a1, fv14]
// [Asm] move_origin: [v7]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a0, zero, v13, fv11, v7, v8, fv12, a2, v6, a1, fv14]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [a3, a0, zero, v13, fv11, v7, v8, fv12, a2, v6, a1, fv14]
// [Asm] move_origin: [zero]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [fv14, a3, a0, zero, v13, fv11, a4, v7, v8, fv12, a2, v6, a1]
// [Asm] move_origin: [v6]
// [Asm] defined: a4 is X
// [Asm] defs: [fa0]
// [Asm] live_set: [a3, fv14, a0, zero, v13, a4, v8, fa0, v7, a2, fv12, a1, v6]
// [Asm] move_origin: [fv11]
// [Asm] defined: fa0 is F
// [Asm] defs: [fa1]
// [Asm] live_set: [a3, fa1, a0, zero, v13, a4, v8, fa0, v7, a2, v6, a1, fv14]
// [Asm] move_origin: [fv12]
// [Asm] defined: fa1 is F
// [Asm] defs: [a5]
// [Asm] live_set: [fa1, a5, a0, zero, a4, v7, v8, fa0, a2, a1, v6, a3, fv14]
// [Asm] move_origin: [v13]
// [Asm] defined: a5 is X
// [Asm] defs: [fa2]
// [Asm] live_set: [fa1, fa2, a5, a0, zero, a4, v7, v8, fa0, a2, a1, v6, a3]
// [Asm] move_origin: [fv14]
// [Asm] defined: fa2 is F
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v8, v6, zero, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v15]
// [Asm] live_set: [v8, v6, zero, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v8, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v6, zero, a0, v7]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, v6, zero, a0]
// [Asm] move_origin: [v7]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, v6, zero, a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [a2, a1, v6, a3, zero, a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [a2, a1, a3, zero, a0, a4]
// [Asm] move_origin: [v6]
// [Asm] defined: a4 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v16]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.179"];
// [Asm]   r0 [label="zero", color=blue];
// [Asm]   r20 [label="v23 ← a1", color=green];
// [Asm]   r23 [label="v15 ← a0", color=green];
// [Asm]   r3 [label="v4 ← a0", color=green];
// [Asm]   r9 [label="a6", color=blue];
// [Asm]   r6 [label="a3", color=blue];
// [Asm]   r13 [label="t2", color=blue];
// [Asm]   r4 [label="a1", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="t0", color=blue];
// [Asm]   r7 [label="a4", color=blue];
// [Asm]   r10 [label="a7", color=blue];
// [Asm]   r22 [label="v13 ← a5", color=green];
// [Asm]   r14 [label="t3", color=blue];
// [Asm]   r8 [label="a5", color=blue];
// [Asm]   r5 [label="a2", color=blue];
// [Asm]   r24 [label="v16 ← a0", color=green];
// [Asm]   r15 [label="t4", color=blue];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r16 [label="v7 ← s0", color=green];
// [Asm]   r18 [label="v8 ← s1", color=green];
// [Asm]   r19 [label="v9 ← a0", color=green];
// [Asm]   r21 [label="v6 ← s2", color=green];
// [Asm]   r17 [label="v26 ← a0", color=green];
// [Asm]   r12 [label="t1", color=blue];
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r21;
// [Asm]   r0 -- r13;
// [Asm]   r5 -- r21;
// [Asm]   r16 -- r20;
// [Asm]   r1 -- r12;
// [Asm]   r7 -- r21;
// [Asm]   r2 -- r15;
// [Asm]   r14 -- r16;
// [Asm]   r5 -- r8;
// [Asm]   r1 -- r4;
// [Asm]   r5 -- r22;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r10;
// [Asm]   r5 -- r18;
// [Asm]   r2 -- r10;
// [Asm]   r18 -- r21;
// [Asm]   r0 -- r23;
// [Asm]   r0 -- r22;
// [Asm]   r2 -- r16;
// [Asm]   r2 -- r7;
// [Asm]   r11 -- r18;
// [Asm]   r4 -- r22;
// [Asm]   r19 -- r21;
// [Asm]   r1 -- r16;
// [Asm]   r0 -- r16;
// [Asm]   r16 -- r17;
// [Asm]   r9 -- r18;
// [Asm]   r0 -- r6;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r9;
// [Asm]   r15 -- r18;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r8 -- r16;
// [Asm]   r10 -- r18;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r0 -- r9;
// [Asm]   r6 -- r18;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r10;
// [Asm]   r13 -- r18;
// [Asm]   r1 -- r11;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r8 -- r21;
// [Asm]   r18 -- r20;
// [Asm]   r0 -- r11;
// [Asm]   r16 -- r21;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r12 -- r21;
// [Asm]   r0 -- r4;
// [Asm]   r21 -- r22;
// [Asm]   r13 -- r21;
// [Asm]   r7 -- r8;
// [Asm]   r16 -- r23;
// [Asm]   r16 -- r22;
// [Asm]   r0 -- r18;
// [Asm]   r6 -- r7;
// [Asm]   r0 -- r15;
// [Asm]   r4 -- r16;
// [Asm]   r4 -- r5;
// [Asm]   r14 -- r18;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r0 -- r24;
// [Asm]   r11 -- r16;
// [Asm]   r1 -- r22;
// [Asm]   r16 -- r19;
// [Asm]   r0 -- r14;
// [Asm]   r13 -- r16;
// [Asm]   r0 -- r21;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r6 -- r16;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r18 -- r22;
// [Asm]   r6 -- r22;
// [Asm]   r5 -- r16;
// [Asm]   r0 -- r19;
// [Asm]   r16 -- r18;
// [Asm]   r10 -- r16;
// [Asm]   r21 -- r23;
// [Asm]   r6 -- r8;
// [Asm]   r7 -- r22;
// [Asm]   r18 -- r19;
// [Asm]   r2 -- r14;
// [Asm]   r15 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r8;
// [Asm]   r14 -- r21;
// [Asm]   r8 -- r18;
// [Asm]   r0 -- r5;
// [Asm]   r2 -- r21;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r9 -- r16;
// [Asm]   r0 -- r12;
// [Asm]   r12 -- r16;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r6;
// [Asm]   r2 -- r19;
// [Asm]   r0 -- r7;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r0 -- r20;
// [Asm]   r10 -- r21;
// [Asm]   r11 -- r21;
// [Asm]   r12 -- r18;
// [Asm]   r9 -- r21;
// [Asm]   r19 -- r20;
// [Asm]   r18 -- r23;
// [Asm]   comment = "0:zero-> 1:a0-> 2:s11-> 4:a1-> 5:a2-> 6:a3-> 7:a4-> 8:a5-> 16:v7-> 18:v8-> 21:v6-> 22:v13-> 9:a6-> 10:a7-> 11:t0-> 12:t1-> 13:t2-> 14:t3-> 15:t4-> 19:v9-> 20:v23-> 23:v15-> 17:v26-> 3:v4-> 24:v16"
// [Asm]   comment = "v23<-a1;v15<-a0;v4<-a0;v13<-a5;v16<-a0;v7<-s0;v8<-s1;v9<-a0;v6<-s2;v26<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.179"];
// [Asm]   r0 [label="fv2 ← fa0", color=green];
// [Asm]   r20 [label="fa6", color=blue];
// [Asm]   r23 [label="fv12 ← fa1", color=green];
// [Asm]   r3 [label="fv3 ← fa0", color=green];
// [Asm]   r9 [label="ft4", color=blue];
// [Asm]   r6 [label="ft1", color=blue];
// [Asm]   r13 [label="ft8", color=blue];
// [Asm]   r4 [label="fv5 ← fa0", color=green];
// [Asm]   r1 [label="fa2", color=blue];
// [Asm]   r11 [label="ft6", color=blue];
// [Asm]   r7 [label="ft2", color=blue];
// [Asm]   r10 [label="ft5", color=blue];
// [Asm]   r22 [label="fv11 ← fa0", color=green];
// [Asm]   r14 [label="ft9", color=blue];
// [Asm]   r8 [label="ft3", color=blue];
// [Asm]   r5 [label="ft0", color=blue];
// [Asm]   r15 [label="ft10", color=blue];
// [Asm]   r24 [label="fv14 ← fa2", color=green];
// [Asm]   r2 [label="fa1", color=blue];
// [Asm]   r16 [label="fa0", color=blue];
// [Asm]   r18 [label="fa4", color=blue];
// [Asm]   r19 [label="fa5", color=blue];
// [Asm]   r21 [label="fa7", color=blue];
// [Asm]   r17 [label="fa3", color=blue];
// [Asm]   r12 [label="ft7", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r24;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r16 -- r24;
// [Asm]   r23 -- r24;
// [Asm]   r16 -- r23;
// [Asm]   r22 -- r24;
// [Asm]   r22 -- r23;
// [Asm]   r2 -- r16;
// [Asm]   r1 -- r16;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:fv2-> 1:fa2-> 2:fa1-> 16:fa0-> 24:fv14-> 23:fv12-> 22:fv11-> 3:fv3-> 4:fv5-> 5:ft0-> 6:ft1-> 7:ft2-> 8:ft3-> 9:ft4-> 10:ft5-> 11:ft6-> 12:ft7-> 13:ft8-> 14:ft9-> 15:ft10-> 17:fa3-> 18:fa4-> 19:fa5-> 20:fa6-> 21:fa7"
// [Asm]   comment = "fv2<-fa0;fv12<-fa1;fv3<-fa0;fv5<-fa0;fv11<-fa0;fv14<-fa2;"
// [Asm] }
// [Asm] 
// [Asm] subst   fmv.d fv3, fa1 ->   fmv.d fa0, fa1
// [Asm] subst   fmv.d fv5, fa2 ->   fmv.d fa0, fa2
// [Asm] subst   call minimbt_read_int ->   call minimbt_read_int
// [Asm] subst   mv v7, a0 ->   mv s0, a0
// [Asm] subst   li v26, 2 ->   li a0, 2
// [Asm] subst   mul v8, v7, v26 ->   mul s1, s0, a0
// [Asm] subst   mul v9, v8, v7 ->   mul a0, s1, s0
// [Asm] subst   slliw v23, v9, 2 ->   slliw a1, a0, 2
// [Asm] subst   sub v6, s11, v23 ->   sub s2, s11, a1
// [Asm] subst   andi s11, v6, -8 ->   andi s11, s2, -8
// [Asm] subst   mv a1, v9 ->   mv a1, a0
// [Asm] subst   fld fv11, c_im.6, t5 ->   fld fa0, c_im.6, t5
// [Asm] subst   fld fv12, c_re.5, t5 ->   fld fa1, c_re.5, t5
// [Asm] subst   lw v13, iter.3 ->   lw a5, iter.3
// [Asm] subst   fld fv14, limit_sq.2, t5 ->   fld fa2, limit_sq.2, t5
// [Asm] subst   mv a0, v8 ->   mv a0, s1
// [Asm] subst   mv a1, v7 ->   mv a1, s0
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   mv a3, zero ->   mv a3, zero
// [Asm] subst   mv a4, v6 ->   mv a4, s2
// [Asm] subst   call main_loop.177 ->   call main_loop.177
// [Asm] subst   mv a0, v8 ->   mv a0, s1
// [Asm] subst   mv a1, v7 ->   mv a1, s0
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   mv a3, zero ->   mv a3, zero
// [Asm] subst   mv a4, v6 ->   mv a4, s2
// [Asm] subst   call print_loop.178 ->   call print_loop.178
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf true
// [Asm] T$iter.3:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$iter.3_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 300  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$c_re.5:
// [Asm] # block info: defs: [fv2, fv3, fa0], uses: [fv2, fv3, fa0], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$c_re.5_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   fld fv2, _4, t5  # live: [fv2]
// [Asm]   fneg.d fv3, fv2  # live: [fv3]
// [Asm] # control
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$limit.1:
// [Asm] # block info: defs: [fa0, fv3, v2], uses: [fa0, fv3, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$limit.1_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 4611686018427387904  # live: [v2]
// [Asm]   fmv.d.x fv3, v2  # live: [fv3]
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$_4:
// [Asm] # block info: defs: [fa0, fv3, v2], uses: [fa0, fv3, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_4_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 4593527504729830064  # live: [v2]
// [Asm]   fmv.d.x fv3, v2  # live: [fv3]
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$c_im.6:
// [Asm] # block info: defs: [fa0, fv3, v2], uses: [fa0, fv3, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$c_im.6_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 4604885582990058455  # live: [v2]
// [Asm]   fmv.d.x fv3, v2  # live: [fv3]
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$limit_sq.2:
// [Asm] # block info: defs: [fv2, fv3, fa0], uses: [fv2, fv3, fa0], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$limit_sq.2_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   fld fv2, limit.1, t5  # live: [fv2]
// [Asm]   fmul.d fv3, fv2, fv2  # live: [fv3]
// [Asm] # control
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] main_loop.177:
// [Asm] # block info: defs: [v3, v11, fv10, v14, v5, v13, fv8, v12, v9, v4, v6, v15, fv7, v2], uses: [v2, v5, a5, a0, a2, a1, a3, fa1, fa2, a4, fa0, v4, v6, v3], upward_exposed: [a5, fa2, a0, a4, fa0, a2, a1, a3, fa1], params_defs: []
// [Asm] # live_in: [a5, fa2, a0, zero, a4, fa0, a2, a1, a3, fa1], live_out: [v11, v14, v13, zero, v12, v15]
// [Asm] # block parameters: []
// [Asm] .main_loop.177_0:
// [Asm]   # save_ctx1  # live: [fa2, a5, zero, a0, a4, fa0, a2, a1, a3, fa1]
// [Asm]   mv v2, a0  # live: [fa2, a5, zero, a4, fa0, a2, a1, a3, fa1, v2]
// [Asm]   mv v3, a1  # live: [v3, fa2, a5, zero, a4, fa0, a2, a3, fa1, v2]
// [Asm]   mv v4, a2  # live: [v3, fa2, a5, zero, a4, fa0, v4, a3, fa1, v2]
// [Asm]   mv v5, a3  # live: [v3, v5, fa2, a5, zero, a4, fa0, v4, fa1, v2]
// [Asm]   mv v6, a4  # live: [v3, v5, fa2, a5, zero, fa0, v4, v6, fa1, v2]
// [Asm]   fmv.d fv7, fa0  # live: [v3, v5, fa2, a5, zero, v4, v6, fa1, v2]
// [Asm]   fmv.d fv8, fa1  # live: [v3, v5, fa2, a5, zero, v4, v6, v2]
// [Asm]   mv v9, a5  # live: [v3, v5, fa2, zero, v4, v6, v2]
// [Asm]   fmv.d fv10, fa2  # live: [v2, v4, v6, v5, zero, v3]
// [Asm] # control
// [Asm]   mv v11, v2  # live: [v11, v4, v6, v5, zero, v3]
// [Asm]   mv v12, v3  # live: [v11, v4, v6, v5, v12, zero]
// [Asm]   mv v13, v4  # live: [v11, v6, v5, v12, v13, zero]
// [Asm]   mv v14, v5  # live: [v11, v14, v6, v12, v13, zero]
// [Asm]   mv v15, v6  # live: [v11, v14, v12, v15, v13, zero]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v14, v12], upward_exposed: [v14, v12], params_defs: [v11, v14, v12, v15, v13]
// [Asm] # live_in: [v11, v14, v13, zero, v12, v15], live_out: [v11, v14, zero, v13, v12, v15]
// [Asm] # block parameters: [v11, v12, v13, v14, v15]
// [Asm] .main_loop.177_2:
// [Asm] # control
// [Asm]   beq v14, v12, .main_loop.177_3  # live: [v11, v14, v12, v15, zero, v13]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v11, v13], upward_exposed: [v11, v13], params_defs: []
// [Asm] # live_in: [v11, v14, v13, zero, v12, v15], live_out: [v11, v14, zero, v13, v12, v15]
// [Asm] # block parameters: []
// [Asm] .main_loop.177_4:
// [Asm] # control
// [Asm]   beq v13, v11, .main_loop.177_5  # live: [v11, v14, v12, v15, zero, v13]
// [Asm] 
// [Asm] # block info: defs: [fv129, fv24, fv23, v133, fv134, v123, fv20, fv30, fv19, v31, fv26, v138, fv22, fv28, fv139, fv25, fv29, fv124, fv27, v128, fv18, fv21], uses: [v11, fv129, fv24, fv23, v14, v13, v133, fv134, v123, fv20, fv19, v12, fv26, v138, fv22, fv28, fv139, fv25, zero, fv124, fv27, v128, fv18, fv21], upward_exposed: [v11, v14, v12, v13, zero], params_defs: []
// [Asm] # live_in: [v11, v14, v13, zero, v12, v15], live_out: [v11, v14, v13, zero, fv30, fv29, v15, v12, v31]
// [Asm] # block parameters: []
// [Asm] .main_loop.177_6:
// [Asm]   fcvt.d.w fv18, v13  # live: [v11, v14, v13, zero, v15, v12, fv18]
// [Asm]   li v138, 4613937818241073152  # live: [v11, v14, v13, zero, v15, v12, fv18, v138]
// [Asm]   fmv.d.x fv139, v138  # live: [v11, v14, fv139, v13, zero, v15, v12, fv18]
// [Asm]   fmul.d fv19, fv139, fv18  # live: [v11, v14, v13, zero, fv19, v15, v12]
// [Asm]   fcvt.d.w fv20, v11  # live: [v11, v14, v13, zero, fv20, fv19, v15, v12]
// [Asm]   fdiv.d fv21, fv19, fv20  # live: [v11, v14, v13, zero, v15, v12, fv21]
// [Asm]   li v133, 4609434218613702656  # live: [v11, v14, v13, zero, v133, v15, v12, fv21]
// [Asm]   fmv.d.x fv134, v133  # live: [v11, v14, v13, zero, fv134, v15, v12, fv21]
// [Asm]   fsub.d fv22, fv21, fv134  # live: [v11, fv22, v14, v13, zero, v15, v12]
// [Asm]   fneg.d fv23, fv22  # live: [v11, fv23, v14, v13, zero, v15, v12]
// [Asm]   fcvt.d.w fv24, v14  # live: [v11, fv23, fv24, v14, v13, zero, v15, v12]
// [Asm]   li v128, 4613937818241073152  # live: [v11, fv23, fv24, v14, v13, zero, v15, v12, v128]
// [Asm]   fmv.d.x fv129, v128  # live: [v11, fv129, fv23, fv24, v14, v13, zero, v15, v12]
// [Asm]   fmul.d fv25, fv129, fv24  # live: [v11, fv23, v14, v13, zero, fv25, v15, v12]
// [Asm]   fcvt.d.w fv26, v12  # live: [v11, fv23, v14, v13, zero, fv25, v15, v12, fv26]
// [Asm]   fdiv.d fv27, fv25, fv26  # live: [v11, fv23, v14, v13, zero, fv27, v15, v12]
// [Asm]   li v123, 4609434218613702656  # live: [v11, fv23, v14, v13, zero, v123, fv27, v15, v12]
// [Asm]   fmv.d.x fv124, v123  # live: [v11, fv23, v14, v13, zero, fv124, fv27, v15, v12]
// [Asm]   fsub.d fv28, fv27, fv124  # live: [v11, fv23, v14, fv28, v13, zero, v15, v12]
// [Asm] # control
// [Asm]   fmv.d fv29, fv23  # live: [v11, v14, fv28, v13, zero, fv29, v15, v12]
// [Asm]   fmv.d fv30, fv28  # live: [v11, v14, v13, zero, fv30, fv29, v15, v12]
// [Asm]   mv v31, zero  # live: [v11, v14, v13, zero, fv30, fv29, v15, v12, v31]
// [Asm] 
// [Asm] # block info: defs: [fv32, v34, fv33], uses: [fv29, v31, v34, fv30], upward_exposed: [fv29, v31, fv30], params_defs: [fv29, v31, fv30]
// [Asm] # live_in: [v11, v14, v13, zero, fv30, fv29, v15, v12, v31], live_out: [v11, v14, fv32, v13, zero, fv33, fv30, fv29, v15, v12, v31]
// [Asm] # block parameters: [fv29, fv30, v31]
// [Asm] .main_loop.177_8:
// [Asm]   fmul.d fv32, fv29, fv29  # live: [v11, v14, fv32, v13, zero, fv30, fv29, v15, v12, v31]
// [Asm]   fmul.d fv33, fv30, fv30  # live: [v11, v14, fv32, v13, zero, fv33, fv30, fv29, v15, v12, v31]
// [Asm]   lw v34, iter.3  # live: [v11, v14, fv32, v13, zero, fv33, fv30, fv29, v15, v12, v31, v34]
// [Asm] # control
// [Asm]   bne v31, v34, .main_loop.177_10  # live: [v11, v14, fv32, v13, zero, fv33, fv30, fv29, v15, v12, v31]
// [Asm] 
// [Asm] # block info: defs: [v62, v61, v60], uses: [v11, v62, v14, v13, zero, v60], upward_exposed: [v11, v14, v13, zero], params_defs: []
// [Asm] # live_in: [v11, v14, v13, zero, v15, v12], live_out: [v11, v14, v13, zero, v61, v15, v12]
// [Asm] # block parameters: []
// [Asm] .main_loop.177_9:
// [Asm]   mul v60, v14, v11  # live: [v11, v14, v13, zero, v15, v12, v60]
// [Asm]   add v61, v60, v13  # live: [v11, v14, v13, zero, v61, v15, v12]
// [Asm]   lw v62, iter.3  # live: [v11, v62, v14, v13, zero, v61, v15, v12]
// [Asm] # control
// [Asm]   bge zero, v62, .main_loop.177_11  # live: [v11, v14, v13, zero, v61, v15, v12]
// [Asm] 
// [Asm] # block info: defs: [v90, v64], uses: [v90, v64], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v11, v14, v13, zero, v61, v15, v12], live_out: [v11, v14, v13, zero, v61, v15, v12]
// [Asm] # block parameters: []
// [Asm] .main_loop.177_12:
// [Asm]   lw v64, iter.3  # live: [v11, v14, v13, zero, v61, v15, v12, v64]
// [Asm] # control
// [Asm]   li v90, 48  # live: [v11, v14, v13, zero, v90, v61, v15, v12, v64]
// [Asm]   bge v64, v90, .main_loop.177_13  # live: [v11, v14, v13, zero, v61, v15, v12]
// [Asm] 
// [Asm] # block info: defs: [v66, v88, v87, v69, v13], uses: [v66, v11, v87, v69, v14, v13, v88, v61, v15, v12], upward_exposed: [v11, v14, v13, v61, v15, v12], params_defs: []
// [Asm] # live_in: [v11, v14, v13, zero, v61, v15, v12], live_out: [v11, v14, v13, zero, v12, v15]
// [Asm] # block parameters: []
// [Asm] .main_loop.177_14:
// [Asm]   lw v66, iter.3  # live: [v11, v66, v14, zero, v13, v12, v15, v61]
// [Asm]   slliw v87, v61, 2  # live: [v11, v66, v14, v87, zero, v13, v12, v15]
// [Asm]   add v88, v15, v87  # live: [v11, v66, v14, zero, v13, v88, v12, v15]
// [Asm]   sw v66, 0(v88)  # live: [v11, v14, zero, v13, v12, v15]
// [Asm]   addi v69, v13, 1  # live: [v11, v14, v69, zero, v12, v15]
// [Asm] # control
// [Asm]   mv v11, v11  # live: [v11, v14, v69, zero, v12, v15]
// [Asm]   mv v12, v12  # live: [v11, v14, v69, zero, v12, v15]
// [Asm]   mv v13, v69  # live: [v11, v14, v13, zero, v12, v15]
// [Asm]   mv v14, v14  # live: [v11, v14, v13, zero, v12, v15]
// [Asm]   mv v15, v15  # live: [v11, v14, v12, v15, v13, zero]
// [Asm]   j .main_loop.177_2  # live: [v11, v14, v12, v15, v13, zero]
// [Asm] 
// [Asm] # block info: defs: [v77], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v77]
// [Asm] # block parameters: []
// [Asm] .main_loop.177_3:
// [Asm] # control
// [Asm]   mv v77, zero  # live: [v77]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v77], upward_exposed: [v77], params_defs: [v77]
// [Asm] # live_in: [v77], live_out: []
// [Asm] # block parameters: [v77]
// [Asm] .main_loop.177_28:
// [Asm] # control
// [Asm]   mv a0, v77  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v14, v13, v76], uses: [v11, v14, v12, v15, zero, v76], upward_exposed: [v11, v14, v12, v15, zero], params_defs: []
// [Asm] # live_in: [v11, v14, v12, v15, zero], live_out: [v11, v14, v13, zero, v12, v15]
// [Asm] # block parameters: []
// [Asm] .main_loop.177_5:
// [Asm]   addi v76, v14, 1  # live: [v11, zero, v12, v15, v76]
// [Asm] # control
// [Asm]   mv v11, v11  # live: [v11, zero, v12, v15, v76]
// [Asm]   mv v12, v12  # live: [v11, zero, v12, v15, v76]
// [Asm]   mv v13, zero  # live: [v11, v13, zero, v12, v15, v76]
// [Asm]   mv v14, v76  # live: [v11, v14, v13, zero, v12, v15]
// [Asm]   mv v15, v15  # live: [v11, v14, v12, v15, v13, zero]
// [Asm]   j .main_loop.177_2  # live: [v11, v14, v12, v15, v13, zero]
// [Asm] 
// [Asm] # block info: defs: [fv37, v38, fv36], uses: [fv37, v38, fv32, fv36, zero, fv33], upward_exposed: [fv32, zero, fv33], params_defs: []
// [Asm] # live_in: [v11, v14, fv32, zero, v13, fv33, fv30, fv29, v15, v12, v31], live_out: [v11, v14, fv32, v13, zero, fv30, fv33, fv29, v15, v12, v31]
// [Asm] # block parameters: []
// [Asm] .main_loop.177_10:
// [Asm]   fadd.d fv36, fv32, fv33  # live: [v11, v14, fv32, v13, zero, fv36, fv33, fv30, fv29, v15, v12, v31]
// [Asm]   fld fv37, limit_sq.2, t5  # live: [v11, fv37, v14, fv32, v13, zero, fv36, fv33, fv30, fv29, v15, v12, v31]
// [Asm]   fle.d v38, fv37, fv36  # live: [v11, v14, fv32, v13, zero, fv30, fv33, fv29, v38, v15, v12, v31]
// [Asm] # control
// [Asm]   beq v38, zero, .main_loop.177_18  # live: [v11, v14, fv32, v13, zero, fv30, fv33, fv29, v15, v12, v31]
// [Asm] 
// [Asm] # block info: defs: [v47, v48], uses: [v11, v47, v14, v31, v13, zero], upward_exposed: [v11, v14, v31, v13, zero], params_defs: []
// [Asm] # live_in: [v11, v14, v13, zero, v15, v12, v31], live_out: [v11, v14, v48, v13, zero, v15, v12, v31]
// [Asm] # block parameters: []
// [Asm] .main_loop.177_17:
// [Asm]   mul v47, v14, v11  # live: [v11, v14, v13, zero, v47, v15, v12, v31]
// [Asm]   add v48, v47, v13  # live: [v11, v14, v48, v13, zero, v15, v12, v31]
// [Asm] # control
// [Asm]   bge zero, v31, .main_loop.177_19  # live: [v11, v14, v48, v13, zero, v15, v12, v31]
// [Asm] 
// [Asm] # block info: defs: [v105], uses: [v105, v31], upward_exposed: [v31], params_defs: []
// [Asm] # live_in: [v11, v14, v48, v13, zero, v15, v12, v31], live_out: [v11, v14, v48, v13, zero, v15, v12, v31]
// [Asm] # block parameters: []
// [Asm] .main_loop.177_20:
// [Asm] # control
// [Asm]   li v105, 48  # live: [v11, v14, v48, v13, zero, v105, v15, v12, v31]
// [Asm]   blt v31, v105, .main_loop.177_22  # live: [v11, v14, v48, v13, zero, v15, v12, v31]
// [Asm] 
// [Asm] # block info: defs: [v56, v99, v100, v13, v101], uses: [v11, v14, v48, v56, v99, v13, v15, v12, v100, v101], upward_exposed: [v11, v14, v48, v13, v15, v12], params_defs: []
// [Asm] # live_in: [v11, v14, v48, v13, zero, v15, v12], live_out: [v11, v14, v13, zero, v12, v15]
// [Asm] # block parameters: []
// [Asm] .main_loop.177_21:
// [Asm]   li v99, 48  # live: [v11, v14, v48, v99, zero, v13, v12, v15]
// [Asm]   slliw v100, v48, 2  # live: [v11, v14, v99, zero, v13, v12, v15, v100]
// [Asm]   add v101, v15, v100  # live: [v11, v14, v99, zero, v13, v12, v15, v101]
// [Asm]   sw v99, 0(v101)  # live: [v11, v14, zero, v13, v12, v15]
// [Asm]   addi v56, v13, 1  # live: [v11, v14, v56, zero, v12, v15]
// [Asm] # control
// [Asm]   mv v11, v11  # live: [v11, v14, v56, zero, v12, v15]
// [Asm]   mv v12, v12  # live: [v11, v14, v56, zero, v12, v15]
// [Asm]   mv v13, v56  # live: [v11, v14, v13, zero, v12, v15]
// [Asm]   mv v14, v14  # live: [v11, v14, v13, zero, v12, v15]
// [Asm]   mv v15, v15  # live: [v11, v14, v12, v15, v13, zero]
// [Asm]   j .main_loop.177_2  # live: [v11, v14, v12, v15, v13, zero]
// [Asm] 
// [Asm] # block info: defs: [fv45, v46, fv115, fv39, fv43, fv42, fv41, fv30, fv29, v114, fv44, v31], uses: [fv45, v46, fv32, fv39, fv30, v114, v31, fv115, fv41, fv43, fv42, fv33, fv29, fv44], upward_exposed: [fv33, fv29, fv32, v31, fv30], params_defs: []
// [Asm] # live_in: [v11, v14, fv32, v13, zero, fv30, fv33, fv29, v15, v12, v31], live_out: [v11, v14, v13, zero, fv30, fv29, v15, v12, v31]
// [Asm] # block parameters: []
// [Asm] .main_loop.177_18:
// [Asm]   li v114, 4611686018427387904  # live: [v11, v14, fv32, v13, zero, fv33, fv30, fv29, v114, v15, v12, v31]
// [Asm]   fmv.d.x fv115, v114  # live: [v11, v14, fv32, v13, zero, fv115, fv33, fv30, fv29, v15, v12, v31]
// [Asm]   fmul.d fv39, fv115, fv29  # live: [v11, v14, fv32, v13, zero, fv39, fv30, fv33, v15, v12, v31]
// [Asm]   fld fv41, c_im.6, t5  # live: [v11, v14, fv32, v13, zero, fv39, fv41, fv30, fv33, v15, v12, v31]
// [Asm]   fmadd.d fv42, fv39, fv30, fv41  # live: [v11, v14, fv32, v13, zero, fv42, fv33, v15, v12, v31]
// [Asm]   fsub.d fv43, fv32, fv33  # live: [v11, v14, v13, zero, fv42, fv43, v15, v12, v31]
// [Asm]   fld fv44, c_re.5, t5  # live: [v11, v14, v13, zero, fv42, fv43, v15, v12, v31, fv44]
// [Asm]   fadd.d fv45, fv43, fv44  # live: [v11, v14, fv45, v13, zero, fv42, v15, v12, v31]
// [Asm]   addi v46, v31, 1  # live: [v11, v14, v46, fv45, v13, zero, fv42, v15, v12]
// [Asm] # control
// [Asm]   fmv.d fv29, fv45  # live: [v11, v14, v46, v13, zero, fv42, fv29, v15, v12]
// [Asm]   fmv.d fv30, fv42  # live: [v11, v14, v46, v13, zero, fv30, fv29, v15, v12]
// [Asm]   mv v31, v46  # live: [v11, v14, v13, zero, fv30, fv29, v15, v12, v31]
// [Asm]   j .main_loop.177_8  # live: [v11, v14, v13, zero, fv30, fv29, v15, v12, v31]
// [Asm] 
// [Asm] # block info: defs: [v59, v96, v97, v13], uses: [v11, v14, v48, v96, v13, zero, v97, v59, v15, v12], upward_exposed: [v11, v14, v48, v13, zero, v15, v12], params_defs: []
// [Asm] # live_in: [v11, v14, v48, v13, zero, v15, v12], live_out: [v11, v14, v13, zero, v12, v15]
// [Asm] # block parameters: []
// [Asm] .main_loop.177_19:
// [Asm]   slliw v96, v48, 2  # live: [v11, v14, v96, zero, v13, v12, v15]
// [Asm]   add v97, v15, v96  # live: [v11, v14, zero, v13, v97, v12, v15]
// [Asm]   sw zero, 0(v97)  # live: [v11, v14, zero, v13, v12, v15]
// [Asm]   addi v59, v13, 1  # live: [v11, v14, zero, v59, v12, v15]
// [Asm] # control
// [Asm]   mv v11, v11  # live: [v11, v14, zero, v59, v12, v15]
// [Asm]   mv v12, v12  # live: [v11, v14, zero, v59, v12, v15]
// [Asm]   mv v13, v59  # live: [v11, v14, v13, zero, v12, v15]
// [Asm]   mv v14, v14  # live: [v11, v14, v13, zero, v12, v15]
// [Asm]   mv v15, v15  # live: [v11, v14, v12, v15, v13, zero]
// [Asm]   j .main_loop.177_2  # live: [v11, v14, v12, v15, v13, zero]
// [Asm] 
// [Asm] # block info: defs: [v103, v104, v53, v13], uses: [v11, v14, v48, v53, v13, v103, v104, v15, v12, v31], upward_exposed: [v11, v14, v48, v13, v15, v12, v31], params_defs: []
// [Asm] # live_in: [v11, v14, v48, v13, zero, v15, v12, v31], live_out: [v11, v14, v13, zero, v12, v15]
// [Asm] # block parameters: []
// [Asm] .main_loop.177_22:
// [Asm]   slliw v103, v48, 2  # live: [v11, v14, zero, v13, v103, v12, v15, v31]
// [Asm]   add v104, v15, v103  # live: [v11, v14, zero, v13, v104, v12, v15, v31]
// [Asm]   sw v31, 0(v104)  # live: [v11, v14, zero, v13, v12, v15]
// [Asm]   addi v53, v13, 1  # live: [v11, v14, v53, zero, v12, v15]
// [Asm] # control
// [Asm]   mv v11, v11  # live: [v11, v14, v53, zero, v12, v15]
// [Asm]   mv v12, v12  # live: [v11, v14, v53, zero, v12, v15]
// [Asm]   mv v13, v53  # live: [v11, v14, v13, zero, v12, v15]
// [Asm]   mv v14, v14  # live: [v11, v14, v13, zero, v12, v15]
// [Asm]   mv v15, v15  # live: [v11, v14, v12, v15, v13, zero]
// [Asm]   j .main_loop.177_2  # live: [v11, v14, v12, v15, v13, zero]
// [Asm] 
// [Asm] # block info: defs: [v80, v81, v75, v13], uses: [v11, v14, v75, zero, v13, v80, v81, v61, v15, v12], upward_exposed: [v11, v14, v13, zero, v61, v15, v12], params_defs: []
// [Asm] # live_in: [v11, v14, v13, zero, v61, v15, v12], live_out: [v11, v14, v13, zero, v12, v15]
// [Asm] # block parameters: []
// [Asm] .main_loop.177_11:
// [Asm]   slliw v80, v61, 2  # live: [v11, v14, zero, v13, v80, v12, v15]
// [Asm]   add v81, v15, v80  # live: [v11, v14, zero, v13, v81, v12, v15]
// [Asm]   sw zero, 0(v81)  # live: [v11, v14, zero, v13, v12, v15]
// [Asm]   addi v75, v13, 1  # live: [v11, v14, v75, zero, v12, v15]
// [Asm] # control
// [Asm]   mv v11, v11  # live: [v11, v14, v75, zero, v12, v15]
// [Asm]   mv v12, v12  # live: [v11, v14, v75, zero, v12, v15]
// [Asm]   mv v13, v75  # live: [v11, v14, v13, zero, v12, v15]
// [Asm]   mv v14, v14  # live: [v11, v14, v13, zero, v12, v15]
// [Asm]   mv v15, v15  # live: [v11, v14, v12, v15, v13, zero]
// [Asm]   j .main_loop.177_2  # live: [v11, v14, v12, v15, v13, zero]
// [Asm] 
// [Asm] # block info: defs: [v84, v72, v83, v13, v85], uses: [v11, v72, v14, v13, v85, v84, v61, v15, v83, v12], upward_exposed: [v11, v14, v13, v61, v15, v12], params_defs: []
// [Asm] # live_in: [v11, v14, v13, zero, v61, v15, v12], live_out: [v11, v14, v13, zero, v12, v15]
// [Asm] # block parameters: []
// [Asm] .main_loop.177_13:
// [Asm]   li v83, 48  # live: [v11, v14, zero, v13, v12, v15, v83, v61]
// [Asm]   slliw v84, v61, 2  # live: [v11, v14, zero, v13, v84, v12, v15, v83]
// [Asm]   add v85, v15, v84  # live: [v11, v14, zero, v13, v85, v12, v15, v83]
// [Asm]   sw v83, 0(v85)  # live: [v11, v14, zero, v13, v12, v15]
// [Asm]   addi v72, v13, 1  # live: [v11, v72, v14, zero, v12, v15]
// [Asm] # control
// [Asm]   mv v11, v11  # live: [v11, v72, v14, zero, v12, v15]
// [Asm]   mv v12, v12  # live: [v11, v72, v14, zero, v12, v15]
// [Asm]   mv v13, v72  # live: [v11, v14, v13, zero, v12, v15]
// [Asm]   mv v14, v14  # live: [v11, v14, v13, zero, v12, v15]
// [Asm]   mv v15, v15  # live: [v11, v14, v12, v15, v13, zero]
// [Asm]   j .main_loop.177_2  # live: [v11, v14, v12, v15, v13, zero]
// [Asm] 
// [Asm] # leaf false
// [Asm] print_loop.178:
// [Asm] # block info: defs: [v2, v11, v5, v10, v7, v8, v4, v6, v9, v3], uses: [v3, v5, a0, a4, a2, v4, a1, v6, a3, v2], upward_exposed: [a2, a1, a3, a0, a4], params_defs: []
// [Asm] # live_in: [a0, zero, a4, a2, a1, a3], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: []
// [Asm] .print_loop.178_0:
// [Asm]   # save_ctx1  # live: [a2, a1, a3, zero, a0, a4]
// [Asm]   mv v2, a0  # live: [a2, a1, a3, zero, a4, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, a3, zero, a4, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, a3, zero, a4, v3]
// [Asm]   mv v5, a3  # live: [v2, v4, v5, zero, a4, v3]
// [Asm]   mv v6, a4  # live: [v2, v4, v6, v5, zero, v3]
// [Asm] # control
// [Asm]   mv v7, v2  # live: [v3, v4, v6, v5, zero, v7]
// [Asm]   mv v8, v3  # live: [v7, v4, v6, v5, zero, v8]
// [Asm]   mv v9, v4  # live: [v7, v6, v5, zero, v9, v8]
// [Asm]   mv v10, v5  # live: [v7, v6, v10, zero, v9, v8]
// [Asm]   mv v11, v6  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v10, v8], upward_exposed: [v10, v8], params_defs: [v8, v11, v10, v9, v7]
// [Asm] # live_in: [v11, v10, zero, v7, v8, v9], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: [v7, v8, v9, v10, v11]
// [Asm] .print_loop.178_2:
// [Asm] # control
// [Asm]   beq v10, v8, .print_loop.178_3  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v9, v7], upward_exposed: [v9, v7], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v8, v7, v9], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: []
// [Asm] .print_loop.178_4:
// [Asm] # control
// [Asm]   beq v9, v7, .print_loop.178_5  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v20, v19, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, v30, ft2, a2, v17, a3, v31, v9, ft8, a7, t3, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v15], uses: [v11, v14, v10, a0, v30, v7, v17, v31, v9, v18, v20, v8, v15], upward_exposed: [v8, v11, v10, v9, v7], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v7, v8, v9], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: []
// [Asm] .print_loop.178_6:
// [Asm]   mul v14, v10, v7  # live: [v11, v14, v10, zero, v7, v8, v9]
// [Asm]   add v15, v14, v9  # live: [v11, v10, zero, v7, v8, v15, v9]
// [Asm]   slliw v30, v15, 2  # live: [v11, v10, zero, v30, v7, v8, v9]
// [Asm]   add v31, v11, v30  # live: [v11, v10, zero, v7, v8, v31, v9]
// [Asm]   lw v17, 0(v31)  # live: [v11, v10, zero, v7, v8, v17, v9]
// [Asm]   addi v18, v17, 48  # live: [v11, v10, v18, zero, v7, v8, v9]
// [Asm]   # save_ctx2  # live: [v11, v10, v18, zero, v7, v8, v9]
// [Asm]   mv a0, v18  # live: [v11, v10, zero, a0, v7, v8, v9]
// [Asm]   call minimbt_print_char  # live: [v11, v10, zero, a0, v7, v8, v9]
// [Asm]   mv v19, a0  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   # restore_ctx2  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   addi v20, v9, 1  # live: [v11, v10, zero, v20, v7, v8]
// [Asm] # control
// [Asm]   mv v7, v7  # live: [v11, v10, zero, v20, v7, v8]
// [Asm]   mv v8, v8  # live: [v11, v10, zero, v20, v7, v8]
// [Asm]   mv v9, v20  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   mv v11, v11  # live: [v7, v11, v10, zero, v9, v8]
// [Asm]   j .print_loop.178_2  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [v23], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v23]
// [Asm] # block parameters: []
// [Asm] .print_loop.178_3:
// [Asm] # control
// [Asm]   mv v23, zero  # live: [v23]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v23], upward_exposed: [v23], params_defs: [v23]
// [Asm] # live_in: [v23], live_out: []
// [Asm] # block parameters: [v23]
// [Asm] .print_loop.178_8:
// [Asm] # control
// [Asm]   mv a0, v23  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v25, t1, v22, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, v21, v10, a5, a0, fa4, ft2, a2, a3, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v25, v11, v10, a0, zero, v22, v7, v8], upward_exposed: [v8, v11, v10, zero, v7], params_defs: []
// [Asm] # live_in: [v7, v11, v10, zero, v8], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: []
// [Asm] .print_loop.178_5:
// [Asm]   # save_ctx2  # live: [v11, v10, zero, v7, v8]
// [Asm]   li v25, 10  # live: [v11, v25, v10, zero, v7, v8]
// [Asm]   mv a0, v25  # live: [v11, v10, zero, a0, v7, v8]
// [Asm]   call minimbt_print_char  # live: [v11, v10, zero, a0, v7, v8]
// [Asm]   mv v21, a0  # live: [v11, v10, zero, v7, v8]
// [Asm]   # restore_ctx2  # live: [v11, v10, zero, v7, v8]
// [Asm]   addi v22, v10, 1  # live: [v11, zero, v22, v7, v8]
// [Asm] # control
// [Asm]   mv v7, v7  # live: [v11, zero, v22, v7, v8]
// [Asm]   mv v8, v8  # live: [v11, zero, v22, v7, v8]
// [Asm]   mv v9, zero  # live: [v11, zero, v22, v7, v8, v9]
// [Asm]   mv v10, v22  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   mv v11, v11  # live: [v7, v11, v10, zero, v9, v8]
// [Asm]   j .print_loop.178_2  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # leaf false
// [Asm] main.179:
// [Asm] # block info: defs: [t1, v16, v26, v13, v7, ft0, ft1, fv12, a1, s11, fv14, fa1, fv5, fv2, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, v6, fv3, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, a7, t3, fa7, t0, fa5, fa3, fv11, v23, ft3, fa0, t4, t2, v15], uses: [a5, a0, v26, v13, v7, fv12, a2, a1, fv14, s11, a3, v9, fa1, fa2, zero, fv11, v23, a4, v8, fa0, v6], upward_exposed: [fa2, a0, zero, fa0, s11, fa1], params_defs: []
// [Asm] # live_in: [fa2, a0, zero, fa0, s11, fa1], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.179_0:
// [Asm]   # save_ctx1  # live: [fa2, zero, a0, fa0, s11, fa1]
// [Asm]   fmv.d fv2, fa0  # live: [fa2, zero, a0, s11, fa1]
// [Asm]   fmv.d fv3, fa1  # live: [fa2, zero, a0, s11]
// [Asm]   mv v4, a0  # live: [fa2, zero, s11]
// [Asm]   fmv.d fv5, fa2  # live: [zero, s11]
// [Asm]   # save_ctx2  # live: [zero, s11]
// [Asm]   call minimbt_read_int  # live: [zero, a0, s11]
// [Asm]   mv v7, a0  # live: [zero, v7, s11]
// [Asm]   # restore_ctx2  # live: [zero, v7, s11]
// [Asm]   li v26, 2  # live: [zero, v26, v7, s11]
// [Asm]   mul v8, v7, v26  # live: [zero, v7, v8, s11]
// [Asm]   mul v9, v8, v7  # live: [zero, v7, v8, s11, v9]
// [Asm]   slliw v23, v9, 2  # live: [zero, v23, v7, v8, s11, v9]
// [Asm]   sub v6, s11, v23  # live: [zero, v7, v8, v6, v9]
// [Asm]   andi s11, v6, -8  # live: [zero, v7, v8, v6, v9]
// [Asm]   mv a1, v9  # live: [zero, v7, v8, v6]
// [Asm]   fld fv11, c_im.6, t5  # live: [zero, fv11, v7, v8, v6]
// [Asm]   fld fv12, c_re.5, t5  # live: [zero, fv11, v7, v8, fv12, v6]
// [Asm]   lw v13, iter.3  # live: [zero, v13, fv11, v7, v8, fv12, v6]
// [Asm]   fld fv14, limit_sq.2, t5  # live: [zero, v13, fv11, v7, v8, fv12, v6, fv14]
// [Asm]   # save_ctx2  # live: [zero, v13, fv11, v7, v8, fv12, v6, fv14]
// [Asm]   mv a0, v8  # live: [a0, zero, v13, fv11, v7, v8, fv12, v6, fv14]
// [Asm]   mv a1, v7  # live: [a0, zero, v13, fv11, v7, v8, fv12, v6, a1, fv14]
// [Asm]   mv a2, zero  # live: [a0, zero, v13, fv11, v7, v8, fv12, a2, v6, a1, fv14]
// [Asm]   mv a3, zero  # live: [a3, a0, zero, v13, fv11, v7, v8, fv12, a2, v6, a1, fv14]
// [Asm]   mv a4, v6  # live: [fv14, a3, a0, zero, v13, fv11, a4, v7, v8, fv12, a2, v6, a1]
// [Asm]   fmv.d fa0, fv11  # live: [a3, fv14, a0, zero, v13, a4, v8, fa0, v7, a2, fv12, a1, v6]
// [Asm]   fmv.d fa1, fv12  # live: [a3, fa1, a0, zero, v13, a4, v8, fa0, v7, a2, v6, a1, fv14]
// [Asm]   mv a5, v13  # live: [fa1, a5, a0, zero, a4, v7, v8, fa0, a2, a1, v6, a3, fv14]
// [Asm]   fmv.d fa2, fv14  # live: [fa1, fa2, a5, a0, zero, a4, v7, v8, fa0, a2, a1, v6, a3]
// [Asm]   call main_loop.177  # live: [v8, v6, zero, a0, v7]
// [Asm]   mv v15, a0  # live: [v8, v6, zero, v7]
// [Asm]   # restore_ctx2  # live: [v8, v6, zero, v7]
// [Asm]   # save_ctx2  # live: [v8, v6, zero, v7]
// [Asm]   mv a0, v8  # live: [v6, zero, a0, v7]
// [Asm]   mv a1, v7  # live: [a1, v6, zero, a0]
// [Asm]   mv a2, zero  # live: [a2, a1, v6, zero, a0]
// [Asm]   mv a3, zero  # live: [a2, a1, v6, a3, zero, a0]
// [Asm]   mv a4, v6  # live: [a2, a1, a3, zero, a0, a4]
// [Asm]   call print_loop.178  # live: [zero, a0]
// [Asm]   mv v16, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fv5, fv2, fa2, ft6, a4, fa6, a6, v4, ft5, ft10, v6, fv3, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [fv5, fv2, fa2, a0, fa0, v4, v6, fv3, fa1], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   fld fv2, c_im.6, t5  # live: [fv2]
// [Asm]   fld fv3, c_re.5, t5  # live: [fv2, fv3]
// [Asm]   lw v4, iter.3  # live: [v4, fv2, fv3]
// [Asm]   fld fv5, limit_sq.2, t5  # live: [fv5, v4, fv2, fv3]
// [Asm]   # save_ctx2  # live: [fv5, v4, fv2, fv3]
// [Asm]   fmv.d fa0, fv2  # live: [fv5, v4, fv3, fa0]
// [Asm]   fmv.d fa1, fv3  # live: [fv5, v4, fa1, fa0]
// [Asm]   mv a0, v4  # live: [fv5, fa1, a0, fa0]
// [Asm]   fmv.d fa2, fv5  # live: [fa2, fa1, a0, fa0]
// [Asm]   call main.179  # live: [a0]
// [Asm]   mv v6, a0  # live: [v6]
// [Asm]   # restore_ctx2  # live: [v6]
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0, fa0, sp, s0, ra, s11, t5], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$limit.1  # live: [s0, fa0]
// [Asm]   la t5, limit.1  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$limit_sq.2  # live: [s0, fa0]
// [Asm]   la t5, limit_sq.2  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$iter.3  # live: [s0, a0]
// [Asm]   la t5, iter.3  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$_4  # live: [s0, fa0]
// [Asm]   la t5, _4  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$c_re.5  # live: [s0, fa0]
// [Asm]   la t5, c_re.5  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$c_im.6  # live: [s0, fa0]
// [Asm]   la t5, c_im.6  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] iter.3:
// [Asm]   .zero 4
// [Asm] c_im.6:
// [Asm]   .zero 8
// [Asm] start:
// [Asm]   .zero 4
// [Asm] _4:
// [Asm]   .zero 8
// [Asm] limit_sq.2:
// [Asm]   .zero 8
// [Asm] limit.1:
// [Asm]   .zero 8
// [Asm] c_re.5:
// [Asm]   .zero 8
// [Asm] 
// [Knf] build_knf: Let(("limit", Double), Double(2), Let(("limit_sq", Double), Prim(Var("limit"), Var("limit"), Mul, kind=Some(Double)), Let(("iter", Int), Int(300), Let(("c_re", Double), Neg(Double(0.123), kind=Some(Double)), Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))))))))))
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Let(("limit_sq", Double), Prim(Var("limit"), Var("limit"), Mul, kind=Some(Double)), Let(("iter", Int), Int(300), Let(("c_re", Double), Neg(Double(0.123), kind=Some(Double)), Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))))))))))
// [Knf] build_knf: Prim(Var("limit"), Var("limit"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("limit")
// [Knf] build_knf: Var("limit")
// [Knf] build_knf: Let(("iter", Int), Int(300), Let(("c_re", Double), Neg(Double(0.123), kind=Some(Double)), Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))))))))
// [Knf] build_knf: Int(300)
// [Knf] build_knf: Let(("c_re", Double), Neg(Double(0.123), kind=Some(Double)), Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))))))))
// [Knf] build_knf: Neg(Double(0.123), kind=Some(Double))
// [Knf] build_knf: Double(0.123)
// [Knf] build_knf: Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))))))
// [Knf] build_knf: Double(0.745)
// [Knf] build_knf: LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))))))
// [Knf] build_knf: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))
// [Knf] build_knf: Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))]))))))
// [Knf] build_knf: Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))
// [Knf] build_knf: Var("it")
// [Knf] build_knf: Var("iter")
// [Knf] build_knf: Var("iter")
// [Knf] build_knf: If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: Var("limit_sq")
// [Knf] build_knf: Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))
// [Knf] build_knf: Var("zr2")
// [Knf] build_knf: Var("zi2")
// [Knf] build_knf: Var("it")
// [Knf] build_knf: Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double))
// [Knf] build_knf: Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double))
// [Knf] build_knf: Prim(Double(2), Var("zr"), Mul, kind=Some(Double))
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: Var("c_im")
// [Knf] build_knf: Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double))
// [Knf] build_knf: Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double))
// [Knf] build_knf: Var("zr2")
// [Knf] build_knf: Var("zi2")
// [Knf] build_knf: Var("c_re")
// [Knf] build_knf: App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("calc_pixel")
// [Knf] build_knf: Var("new_zr")
// [Knf] build_knf: Var("new_zi")
// [Knf] build_knf: Prim(Var("it"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("it")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))))
// [Knf] build_knf: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: If(LE(Int(48), Var("i")), Int(48), Var("i"))
// [Knf] build_knf: Int(48)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(48)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))))
// [Knf] build_knf: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])
// [Knf] build_knf: Var("main_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Var("y"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))
// [Knf] build_knf: Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double))
// [Knf] build_knf: Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double))
// [Knf] build_knf: Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double))
// [Knf] build_knf: Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double))
// [Knf] build_knf: Double(3)
// [Knf] build_knf: App(Var("float_of_int"), [Var("x")])
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("float_of_int"), [Var("w")])
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Double(1.5)
// [Knf] build_knf: Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))
// [Knf] build_knf: Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double))
// [Knf] build_knf: Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double))
// [Knf] build_knf: Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double))
// [Knf] build_knf: Double(3)
// [Knf] build_knf: App(Var("float_of_int"), [Var("y")])
// [Knf] build_knf: Var("y")
// [Knf] build_knf: App(Var("float_of_int"), [Var("h")])
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Double(1.5)
// [Knf] build_knf: Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))
// [Knf] build_knf: App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)])
// [Knf] build_knf: Var("calc_pixel")
// [Knf] build_knf: Var("cr")
// [Knf] build_knf: Var("ci")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))
// [Knf] build_knf: Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")]))
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Var("y"), Var("w"), Mul, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("clamp"), [Var("res")])
// [Knf] build_knf: Var("clamp")
// [Knf] build_knf: Var("res")
// [Knf] build_knf: App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])
// [Knf] build_knf: Var("main_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))
// [Knf] build_knf: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]))
// [Knf] build_knf: App(Var("print_char"), [Int(10)])
// [Knf] build_knf: Int(10)
// [Knf] build_knf: App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])
// [Knf] build_knf: Var("print_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Var("y"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))
// [Knf] build_knf: App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))])
// [Knf] build_knf: Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))
// [Knf] build_knf: Int(48)
// [Knf] build_knf: Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Var("y"), Var("w"), Mul, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])
// [Knf] build_knf: Var("print_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))
// [Knf] build_knf: App(Var("read_int"), [])
// [Knf] build_knf: Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit))))
// [Knf] build_knf: Prim(Var("h"), Int(2), Mul, kind=Some(Int))
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))
// [Knf] build_knf: Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0))
// [Knf] build_knf: Prim(Var("w"), Var("h"), Mul, kind=Some(Int))
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit))
// [Knf] build_knf: App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")])
// [Knf] build_knf: Var("main_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)
// [Knf] build_knf: App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")])
// [Knf] build_knf: Var("print_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Core] b0 control: Panic -> Return(args=[Double(val=2)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%2)])
// [Core] b0 control: Panic -> Return(args=[Int32(val=300)])
// [Core] b0 control: Panic -> Return(args=[Double(val=0.123)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%1)])
// [Core] b0 control: Panic -> Return(args=[Double(val=0.745)])
// [Core] b13 control: Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Insn(iref=%27), BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.4)]) already set
// [Core] b14 control: Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Insn(iref=%30), BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.4)]) already set
// [Core] b12 control: Panic -> Branch(cond=Insn(iref=%25), t=b13, t_args=[], f=b14, f_args=[])
// [Core] b11 control: Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Insn(iref=%23), BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.4)]) already set
// [Core] b15 control: Panic -> Jump(target=b16, args=[BlockParam(bref=b15, bpref=$b.0)])
// [Core] b9 control: Panic -> Branch(cond=Insn(iref=%21), t=b11, t_args=[], f=b12, f_args=[])
// [Core] b21 control: Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Insn(iref=%41), BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.4)]) already set
// [Core] b22 control: Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Insn(iref=%43), BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.4)]) already set
// [Core] b20 control: Panic -> Branch(cond=Insn(iref=%39), t=b21, t_args=[], f=b22, f_args=[])
// [Core] b19 control: Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Insn(iref=%38), BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.4)]) already set
// [Core] b23 control: Panic -> Jump(target=b24, args=[BlockParam(bref=b23, bpref=$b.0)])
// [Core] b17 control: Panic -> Branch(cond=Insn(iref=%36), t=b19, t_args=[], f=b20, f_args=[])
// [Core] b24 control: Panic -> Jump(target=b25, args=[BlockParam(bref=b24, bpref=$b.0)])
// [Core] b18 control: Jump(target=b8, args=[Insn(iref=%50), Insn(iref=%47), Insn(iref=%51)]) already set
// [Core] b10 control: Panic -> Branch(cond=Insn(iref=%33), t=b17, t_args=[], f=b18, f_args=[])
// [Core] b16 control: Panic -> Jump(target=b26, args=[BlockParam(bref=b16, bpref=$b.0)])
// [Core] b25 control: Panic -> Jump(target=b26, args=[BlockParam(bref=b25, bpref=$b.0)])
// [Core] b8 control: Panic -> Branch(cond=Insn(iref=%17), t=b9, t_args=[], f=b10, f_args=[])
// [Core] b26 control: Panic -> Return(args=[BlockParam(bref=b26, bpref=$b.0)])
// [Core] b5 control: Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Int32(val=0), Insn(iref=%2), BlockParam(bref=b2, bpref=$b.4)]) already set
// [Core] b6 control: Jump(target=b7, args=[Insn(iref=%8), Insn(iref=%13), Int32(val=0)]) already set
// [Core] b4 control: Panic -> Branch(cond=Insn(iref=%1), t=b5, t_args=[], f=b6, f_args=[])
// [Core] b3 control: Panic -> Jump(target=b28, args=[Unit])
// [Core] b27 control: Panic -> Jump(target=b28, args=[BlockParam(bref=b27, bpref=$b.0)])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b28 control: Panic -> Return(args=[BlockParam(bref=b28, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[FnParam(fref=f12, fpref=$f.0), FnParam(fref=f12, fpref=$f.1), FnParam(fref=f12, fpref=$f.2), FnParam(fref=f12, fpref=$f.3), FnParam(fref=f12, fpref=$f.4)]) already set
// [Core] b5 control: Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Int32(val=0), Insn(iref=%3), BlockParam(bref=b2, bpref=$b.4)]) already set
// [Core] b6 control: Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Insn(iref=%9), BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.4)]) already set
// [Core] b4 control: Panic -> Branch(cond=Insn(iref=%1), t=b5, t_args=[], f=b6, f_args=[])
// [Core] b3 control: Panic -> Jump(target=b8, args=[Unit])
// [Core] b7 control: Panic -> Jump(target=b8, args=[BlockParam(bref=b7, bpref=$b.0)])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b8 control: Panic -> Return(args=[BlockParam(bref=b8, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[FnParam(fref=f13, fpref=$f.0), FnParam(fref=f13, fpref=$f.1), FnParam(fref=f13, fpref=$f.2), FnParam(fref=f13, fpref=$f.3), FnParam(fref=f13, fpref=$f.4)]) already set
// [Core] b0 control: Panic -> Return(args=[Unit])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%4)])
// [Main] beta reduce res.130 = iter.3
// [Main] beta reduce _133 = iter.3
// [Main] beta reduce res.130 = it.161
// [Main] beta reduce _133 = it.161
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$iter.3
// [Main]   .type T$iter.3, @function
// [Main] # leaf true
// [Main] T$iter.3:
// [Main] .T$iter.3_0:
// [Main]   li a0, 300
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$c_re.5
// [Main]   .type T$c_re.5, @function
// [Main] # leaf true
// [Main] T$c_re.5:
// [Main] .T$c_re.5_0:
// [Main]   fld fa0, _4, t5
// [Main]   fneg.d fa0, fa0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$limit.1
// [Main]   .type T$limit.1, @function
// [Main] # leaf true
// [Main] T$limit.1:
// [Main] .T$limit.1_0:
// [Main]   li a0, 4611686018427387904
// [Main]   fmv.d.x fa0, a0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_4
// [Main]   .type T$_4, @function
// [Main] # leaf true
// [Main] T$_4:
// [Main] .T$_4_0:
// [Main]   li a0, 4593527504729830064
// [Main]   fmv.d.x fa0, a0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$c_im.6
// [Main]   .type T$c_im.6, @function
// [Main] # leaf true
// [Main] T$c_im.6:
// [Main] .T$c_im.6_0:
// [Main]   li a0, 4604885582990058455
// [Main]   fmv.d.x fa0, a0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$limit_sq.2
// [Main]   .type T$limit_sq.2, @function
// [Main] # leaf true
// [Main] T$limit_sq.2:
// [Main] .T$limit_sq.2_0:
// [Main]   fld fa0, limit.1, t5
// [Main]   fmul.d fa0, fa0, fa0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main_loop.177
// [Main]   .type main_loop.177, @function
// [Main] # leaf true
// [Main] main_loop.177:
// [Main] .main_loop.177_0:
// [Main]   mv t0, a0
// [Main]   mv a7, a1
// [Main]   mv a6, a2
// [Main]   mv a2, a3
// [Main]   mv a0, a4
// [Main]   fmv.d fa0, fa1
// [Main]   mv a1, a5
// [Main]   fmv.d fa0, fa2
// [Main]   mv a1, t0
// [Main]   mv a4, a7
// [Main]   mv a3, a6
// [Main]   mv a5, a0
// [Main] 
// [Main] .main_loop.177_2:
// [Main]   beq a2, a4, .main_loop.177_3
// [Main] 
// [Main] .main_loop.177_4:
// [Main]   beq a3, a1, .main_loop.177_5
// [Main] 
// [Main] .main_loop.177_6:
// [Main]   fcvt.d.w fa0, a3
// [Main]   li a0, 4613937818241073152
// [Main]   fmv.d.x fa1, a0
// [Main]   fmul.d fa0, fa1, fa0
// [Main]   fcvt.d.w fa1, a1
// [Main]   fdiv.d fa0, fa0, fa1
// [Main]   li a0, 4609434218613702656
// [Main]   fmv.d.x fa1, a0
// [Main]   fsub.d fa0, fa0, fa1
// [Main]   fneg.d fa1, fa0
// [Main]   fcvt.d.w fa0, a2
// [Main]   li a0, 4613937818241073152
// [Main]   fmv.d.x fa2, a0
// [Main]   fmul.d fa0, fa2, fa0
// [Main]   fcvt.d.w fa2, a4
// [Main]   fdiv.d fa0, fa0, fa2
// [Main]   li a0, 4609434218613702656
// [Main]   fmv.d.x fa2, a0
// [Main]   fsub.d fa0, fa0, fa2
// [Main]   fmv.d fa3, fa1
// [Main]   fmv.d fa2, fa0
// [Main]   mv a6, zero
// [Main] 
// [Main] .main_loop.177_8:
// [Main]   fmul.d fa0, fa3, fa3
// [Main]   fmul.d fa1, fa2, fa2
// [Main]   lw a0, iter.3
// [Main]   bne a6, a0, .main_loop.177_10
// [Main] 
// [Main] .main_loop.177_9:
// [Main]   mul a0, a2, a1
// [Main]   add a6, a0, a3
// [Main]   lw a0, iter.3
// [Main]   bge zero, a0, .main_loop.177_11
// [Main] 
// [Main] .main_loop.177_12:
// [Main]   lw a0, iter.3
// [Main]   li a7, 48
// [Main]   bge a0, a7, .main_loop.177_13
// [Main] 
// [Main] .main_loop.177_14:
// [Main]   lw a0, iter.3
// [Main]   slliw a6, a6, 2
// [Main]   add a6, a5, a6
// [Main]   sw a0, 0(a6)
// [Main]   addi a0, a3, 1
// [Main]   mv a3, a0
// [Main]   j .main_loop.177_2
// [Main] 
// [Main] .main_loop.177_3:
// [Main]   mv a0, zero
// [Main] 
// [Main] .main_loop.177_28:
// [Main]   ret
// [Main] 
// [Main] .main_loop.177_5:
// [Main]   addi a0, a2, 1
// [Main]   mv a3, zero
// [Main]   mv a2, a0
// [Main]   j .main_loop.177_2
// [Main] 
// [Main] .main_loop.177_10:
// [Main]   fadd.d fa4, fa0, fa1
// [Main]   fld fa5, limit_sq.2, t5
// [Main]   fle.d a0, fa5, fa4
// [Main]   beq a0, zero, .main_loop.177_18
// [Main] 
// [Main] .main_loop.177_17:
// [Main]   mul a0, a2, a1
// [Main]   add a0, a0, a3
// [Main]   bge zero, a6, .main_loop.177_19
// [Main] 
// [Main] .main_loop.177_20:
// [Main]   li a7, 48
// [Main]   blt a6, a7, .main_loop.177_22
// [Main] 
// [Main] .main_loop.177_21:
// [Main]   li a6, 48
// [Main]   slliw a0, a0, 2
// [Main]   add a0, a5, a0
// [Main]   sw a6, 0(a0)
// [Main]   addi a0, a3, 1
// [Main]   mv a3, a0
// [Main]   j .main_loop.177_2
// [Main] 
// [Main] .main_loop.177_18:
// [Main]   li a0, 4611686018427387904
// [Main]   fmv.d.x fa4, a0
// [Main]   fmul.d fa3, fa4, fa3
// [Main]   fld fa4, c_im.6, t5
// [Main]   fmadd.d fa2, fa3, fa2, fa4
// [Main]   fsub.d fa0, fa0, fa1
// [Main]   fld fa1, c_re.5, t5
// [Main]   fadd.d fa0, fa0, fa1
// [Main]   addi a0, a6, 1
// [Main]   fmv.d fa3, fa0
// [Main]   mv a6, a0
// [Main]   j .main_loop.177_8
// [Main] 
// [Main] .main_loop.177_19:
// [Main]   slliw a0, a0, 2
// [Main]   add a0, a5, a0
// [Main]   sw zero, 0(a0)
// [Main]   addi a0, a3, 1
// [Main]   mv a3, a0
// [Main]   j .main_loop.177_2
// [Main] 
// [Main] .main_loop.177_22:
// [Main]   slliw a0, a0, 2
// [Main]   add a0, a5, a0
// [Main]   sw a6, 0(a0)
// [Main]   addi a0, a3, 1
// [Main]   mv a3, a0
// [Main]   j .main_loop.177_2
// [Main] 
// [Main] .main_loop.177_11:
// [Main]   slliw a0, a6, 2
// [Main]   add a0, a5, a0
// [Main]   sw zero, 0(a0)
// [Main]   addi a0, a3, 1
// [Main]   mv a3, a0
// [Main]   j .main_loop.177_2
// [Main] 
// [Main] .main_loop.177_13:
// [Main]   li a0, 48
// [Main]   slliw a6, a6, 2
// [Main]   add a6, a5, a6
// [Main]   sw a0, 0(a6)
// [Main]   addi a0, a3, 1
// [Main]   mv a3, a0
// [Main]   j .main_loop.177_2
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl print_loop.178
// [Main]   .type print_loop.178, @function
// [Main] # leaf false
// [Main] print_loop.178:
// [Main] .print_loop.178_0:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   mv s2, a2
// [Main]   mv s3, a3
// [Main]   mv s4, a4
// [Main] 
// [Main] .print_loop.178_2:
// [Main]   beq s3, s1, .print_loop.178_3
// [Main] 
// [Main] .print_loop.178_4:
// [Main]   beq s2, s0, .print_loop.178_5
// [Main] 
// [Main] .print_loop.178_6:
// [Main]   mul a0, s3, s0
// [Main]   add a0, a0, s2
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s4, a0
// [Main]   lw a0, 0(a0)
// [Main]   addi a0, a0, 48
// [Main]   call minimbt_print_char
// [Main]   addi a0, s2, 1
// [Main]   mv s2, a0
// [Main]   j .print_loop.178_2
// [Main] 
// [Main] .print_loop.178_3:
// [Main]   mv a0, zero
// [Main] 
// [Main] .print_loop.178_8:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main] .print_loop.178_5:
// [Main]   li a0, 10
// [Main]   call minimbt_print_char
// [Main]   addi a0, s3, 1
// [Main]   mv s2, zero
// [Main]   mv s3, a0
// [Main]   j .print_loop.178_2
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.179
// [Main]   .type main.179, @function
// [Main] # leaf false
// [Main] main.179:
// [Main] .main.179_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   fmv.d fa0, fa1
// [Main]   fmv.d fa0, fa2
// [Main]   call minimbt_read_int
// [Main]   mv s0, a0
// [Main]   li a0, 2
// [Main]   mul s1, s0, a0
// [Main]   mul a0, s1, s0
// [Main]   slliw a1, a0, 2
// [Main]   sub s2, s11, a1
// [Main]   andi s11, s2, -8
// [Main]   mv a1, a0
// [Main]   fld fa0, c_im.6, t5
// [Main]   fld fa1, c_re.5, t5
// [Main]   lw a5, iter.3
// [Main]   fld fa2, limit_sq.2, t5
// [Main]   mv a0, s1
// [Main]   mv a1, s0
// [Main]   mv a2, zero
// [Main]   mv a3, zero
// [Main]   mv a4, s2
// [Main]   call main_loop.177
// [Main]   mv a0, s1
// [Main]   mv a1, s0
// [Main]   mv a2, zero
// [Main]   mv a3, zero
// [Main]   mv a4, s2
// [Main]   call print_loop.178
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   fld fa0, c_im.6, t5
// [Main]   fld fa1, c_re.5, t5
// [Main]   lw a0, iter.3
// [Main]   fld fa2, limit_sq.2, t5
// [Main]   call main.179
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$limit.1
// [Main]   la t5, limit.1
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$limit_sq.2
// [Main]   la t5, limit_sq.2
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$iter.3
// [Main]   la t5, iter.3
// [Main]   sw a0, 0(t5)
// [Main]   call T$_4
// [Main]   la t5, _4
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$c_re.5
// [Main]   la t5, c_re.5
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$c_im.6
// [Main]   la t5, c_im.6
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl iter.3
// [Main]   .type iter.3, @object
// [Main] iter.3:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl c_im.6
// [Main]   .type c_im.6, @object
// [Main] c_im.6:
// [Main]   .zero 8
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _4
// [Main]   .type _4, @object
// [Main] _4:
// [Main]   .zero 8
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl limit_sq.2
// [Main]   .type limit_sq.2, @object
// [Main] limit_sq.2:
// [Main]   .zero 8
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl limit.1
// [Main]   .type limit.1, @object
// [Main] limit.1:
// [Main]   .zero 8
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl c_re.5
// [Main]   .type c_re.5, @object
// [Main] c_re.5:
// [Main]   .zero 8
// [Main] 
// [Wasm] Lowering function T$_4
// [Wasm] Lowering control Return(args=[Double(val=0.123)])
// [Wasm] Lowered function T$_4 to wasm
// [Wasm] Lowering function main_loop.177
// [Wasm] Lowering control Return(args=[BlockParam(bref=b28, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b28, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.3), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Int32(val=0), Insn(iref=%2), BlockParam(bref=b2, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b2, bpref=$b.4), offset=Insn(iref=%19), width=@32), val=Int32(val=0))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering control Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Insn(iref=%23), BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b2, bpref=$b.4), offset=Insn(iref=%19), width=@32), val=Int32(val=48))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Lowering control Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Insn(iref=%27), BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b2, bpref=$b.4), offset=Insn(iref=%19), width=@32), val=Insn(iref=%28))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering control Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Insn(iref=%30), BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=48), Insn(iref=%24)])
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering control Branch(cond=Insn(iref=%25), t=b13, t_args=[], f=b14, f_args=[])
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%18), BlockParam(bref=b2, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%20), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering control Branch(cond=Insn(iref=%21), t=b11, t_args=[], f=b12, f_args=[])
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b2, bpref=$b.4), offset=Insn(iref=%35), width=@32), val=Int32(val=0))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering control Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Insn(iref=%38), BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b2, bpref=$b.4), offset=Insn(iref=%35), width=@32), val=Int32(val=48))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Lowering control Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Insn(iref=%41), BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b2, bpref=$b.4), offset=Insn(iref=%35), width=@32), val=BlockParam(bref=b8, bpref=$b.2))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.2) -> $b8.$b.2
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Lowering control Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Insn(iref=%43), BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=48), BlockParam(bref=b8, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.2) -> $b8.$b.2
// [Wasm] Get Local name Insn(iref=%39) -> $%39
// [Wasm] Lowering control Branch(cond=Insn(iref=%39), t=b21, t_args=[], f=b22, f_args=[])
// [Wasm] Get Local name Insn(iref=%39) -> $%39
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%34), BlockParam(bref=b2, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b8, bpref=$b.2), Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.2) -> $b8.$b.2
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering control Branch(cond=Insn(iref=%36), t=b19, t_args=[], f=b20, f_args=[])
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=2), BlockParam(bref=b8, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.0) -> $b8.$b.0
// [Wasm] Get Local name Insn(iref=%44) -> $%44
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%44), BlockParam(bref=b8, bpref=$b.1)])
// [Wasm] Get Local name Insn(iref=%44) -> $%44
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.1) -> $b8.$b.1
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::5)
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%45), Insn(iref=%46)])
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Insn(iref=%14), Insn(iref=%15)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::4)
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%48), Insn(iref=%49)])
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Get Local name Insn(iref=%50) -> $%50
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b8, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.2) -> $b8.$b.2
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Lowering control Jump(target=b8, args=[Insn(iref=%50), Insn(iref=%47), Insn(iref=%51)])
// [Wasm] Get Local name Insn(iref=%50) -> $%50
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.0) -> $b8.$b.0
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.1) -> $b8.$b.1
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.2) -> $b8.$b.2
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%14), Insn(iref=%15)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::1)
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%32), Insn(iref=%31)])
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Get Local name Insn(iref=%33) -> $%33
// [Wasm] Lowering control Branch(cond=Insn(iref=%33), t=b17, t_args=[], f=b18, f_args=[])
// [Wasm] Get Local name Insn(iref=%33) -> $%33
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[BlockParam(bref=b8, bpref=$b.0), BlockParam(bref=b8, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.0) -> $b8.$b.0
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.0) -> $b8.$b.0
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[BlockParam(bref=b8, bpref=$b.1), BlockParam(bref=b8, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.1) -> $b8.$b.1
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.1) -> $b8.$b.1
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b8, bpref=$b.2), Insn(iref=%16)])
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.2) -> $b8.$b.2
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering control Branch(cond=Insn(iref=%17), t=b9, t_args=[], f=b10, f_args=[])
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[BlockParam(bref=b2, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=3), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Double, op=Div, args=[Insn(iref=%4), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Insn(iref=%6), Double(val=1.5)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Double, op=Neg, args=[Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[BlockParam(bref=b2, bpref=$b.3)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=3), Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[BlockParam(bref=b2, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Double, op=Div, args=[Insn(iref=%10), Insn(iref=%11)])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Insn(iref=%12), Double(val=1.5)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering control Jump(target=b7, args=[Insn(iref=%8), Insn(iref=%13), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.0) -> $b8.$b.0
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.1) -> $b8.$b.1
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.2) -> $b8.$b.2
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b2, bpref=$b.2), BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b5, t_args=[], f=b6, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b1, args=[FnParam(fref=f12, fpref=$f.0), FnParam(fref=f12, fpref=$f.1), FnParam(fref=f12, fpref=$f.2), FnParam(fref=f12, fpref=$f.3), FnParam(fref=f12, fpref=$f.4)])
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.6) -> $$f.6
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.7) -> $$f.7
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.8) -> $$f.8
// [Wasm] Local BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local Insn(iref=%41) -> $%41
// [Wasm] Local BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Local Insn(iref=%33) -> $%33
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%27) -> $%27
// [Wasm] Local Insn(iref=%50) -> $%50
// [Wasm] Local Insn(iref=%25) -> $%25
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%39) -> $%39
// [Wasm] Local Insn(iref=%51) -> $%51
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%49) -> $%49
// [Wasm] Local Insn(iref=%44) -> $%44
// [Wasm] Local Insn(iref=%32) -> $%32
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local BlockParam(bref=b8, bpref=$b.2) -> $b8.$b.2
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%35) -> $%35
// [Wasm] Local Insn(iref=%31) -> $%31
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local Insn(iref=%38) -> $%38
// [Wasm] Local Insn(iref=%46) -> $%46
// [Wasm] Local Insn(iref=%24) -> $%24
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Local Insn(iref=%45) -> $%45
// [Wasm] Local BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Local BlockParam(bref=b8, bpref=$b.0) -> $b8.$b.0
// [Wasm] Local Insn(iref=%47) -> $%47
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local BlockParam(bref=b8, bpref=$b.1) -> $b8.$b.1
// [Wasm] Local Insn(iref=%48) -> $%48
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Local Insn(iref=%43) -> $%43
// [Wasm] Local Insn(iref=%30) -> $%30
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local Insn(iref=%34) -> $%34
// [Wasm] Local Insn(iref=%36) -> $%36
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function main_loop.177 to wasm
// [Wasm] Lowering function T$iter.3
// [Wasm] Lowering control Return(args=[Int32(val=300)])
// [Wasm] Lowered function T$iter.3 to wasm
// [Wasm] Lowering function T$c_re.5
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::3)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Double, op=Neg, args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Return(args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function T$c_re.5 to wasm
// [Wasm] Lowering function T$limit.1
// [Wasm] Lowering control Return(args=[Double(val=2)])
// [Wasm] Lowered function T$limit.1 to wasm
// [Wasm] Lowering function print_loop.178
// [Wasm] Lowering control Return(args=[BlockParam(bref=b8, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b8, args=[Unit])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Int32(val=10)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.3), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Int32(val=0), Insn(iref=%3), BlockParam(bref=b2, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%4), BlockParam(bref=b2, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b2, bpref=$b.4), offset=Insn(iref=%5), width=@32))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Int32(val=48), Insn(iref=%6)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering control Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Insn(iref=%9), BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b2, bpref=$b.2), BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b5, t_args=[], f=b6, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b1, args=[FnParam(fref=f13, fpref=$f.0), FnParam(fref=f13, fpref=$f.1), FnParam(fref=f13, fpref=$f.2), FnParam(fref=f13, fpref=$f.3), FnParam(fref=f13, fpref=$f.4)])
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.4) -> $$f.4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function print_loop.178 to wasm
// [Wasm] Lowering function T$c_im.6
// [Wasm] Lowering control Return(args=[Double(val=0.745)])
// [Wasm] Lowered function T$c_im.6 to wasm
// [Wasm] Lowering function T$limit_sq.2
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::0)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%0), Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function T$limit_sq.2 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::5)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::4)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::1)
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Call(ty=Unit, f=f14, args=[Insn(iref=%0), Insn(iref=%1), Insn(iref=%2), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Return(args=[Insn(iref=%4)])
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function T$start to wasm
// [Wasm] Lowering function main.179
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_int", args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%0), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%1), Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Zero])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Mem(fref=f14, mref=m0) -> $f14.m0
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::5)
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::4)
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::1)
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Call(ty=Unit, f=f12, args=[Insn(iref=%1), Insn(iref=%0), Int32(val=0), Int32(val=0), Mem(fref=f14, mref=m0), Insn(iref=%4), Insn(iref=%5), Insn(iref=%6), Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Mem(fref=f14, mref=m0) -> $f14.m0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Call(ty=Unit, f=f13, args=[Insn(iref=%1), Insn(iref=%0), Int32(val=0), Int32(val=0), Mem(fref=f14, mref=m0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Mem(fref=f14, mref=m0) -> $f14.m0
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.3) -> $$f.3
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Mem(fref=f14, mref=m0) -> $f14.m0
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function main.179 to wasm
// [KnfOpt] func_tre: calc_pixel.7 true
// [KnfOpt] func_tre: clamp.22 false
// [KnfOpt] func_tre: main_loop.26 true
// [KnfOpt] func_tre: print_loop.58 true
// [KnfOpt] func_tre: main.77 false
// [KnfOpt] freq: {calc_pixel.7: Once, calc_pixel.90: Many(2), clamp.22: Once, main_loop.26: Once, main_loop.105: Many(3), print_loop.58: Once, print_loop.137: Many(3), main.77: Once}
// [KnfOpt] Inline threshold 29
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision calc_pixel.7 accepted
// [KnfOpt] Inline threshold 9
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision clamp.22 accepted
// [KnfOpt] Knf inline Some(clamp) let _133: Int = Unit
// [KnfOpt] let _134: Unit = Put ret.110[_132] = _133
// [KnfOpt] let _135: Int = Int(1)
// [KnfOpt] let _136: Int = Add(x.108, _135)
// [KnfOpt] Jump(main_loop.105, [w.106, h.107, _136, y.109, ret.110, ])
// [KnfOpt] Knf inline Some(calc_pixel) let res.130: Int = Unit
// [KnfOpt] let _131: Int = Mul(y.109, w.106)
// [KnfOpt] let _132: Int = Add(_131, x.108)
// [KnfOpt] let _156: Int = Int(0)
// [KnfOpt] if (res.130 <= _156) then {
// [KnfOpt]   let _133: Int = Int(0)
// [KnfOpt]   let _134: Unit = Put ret.110[_132] = _133
// [KnfOpt]   let _135: Int = Int(1)
// [KnfOpt]   let _136: Int = Add(x.108, _135)
// [KnfOpt]   Jump(main_loop.105, [w.106, h.107, _136, y.109, ret.110, ])
// [KnfOpt] } else {
// [KnfOpt]   let _157: Int = Int(48)
// [KnfOpt]   if (_157 <= res.130) then {
// [KnfOpt]     let _133: Int = Int(48)
// [KnfOpt]     let _134: Unit = Put ret.110[_132] = _133
// [KnfOpt]     let _135: Int = Int(1)
// [KnfOpt]     let _136: Int = Add(x.108, _135)
// [KnfOpt]     Jump(main_loop.105, [w.106, h.107, _136, y.109, ret.110, ])
// [KnfOpt]   } else {
// [KnfOpt]     let _133: Int = Var(res.130)
// [KnfOpt]     let _134: Unit = Put ret.110[_132] = _133
// [KnfOpt]     let _135: Int = Int(1)
// [KnfOpt]     let _136: Int = Add(x.108, _135)
// [KnfOpt]     Jump(main_loop.105, [w.106, h.107, _136, y.109, ret.110, ])
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Inline threshold 9
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision clamp.22 accepted
// [KnfOpt] Knf inline Some(clamp) let _133: Int = Unit
// [KnfOpt] let _134: Unit = Put ret.110[_132] = _133
// [KnfOpt] let _135: Int = Int(1)
// [KnfOpt] let _136: Int = Add(x.108, _135)
// [KnfOpt] Jump(main_loop.105, [w.106, h.107, _136, y.109, ret.110, ])
// [KnfOpt] Inline threshold 9
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision clamp.22 accepted
// [KnfOpt] Knf inline Some(clamp) let _133: Int = Unit
// [KnfOpt] let _134: Unit = Put ret.110[_132] = _133
// [KnfOpt] let _135: Int = Int(1)
// [KnfOpt] let _136: Int = Add(x.108, _135)
// [KnfOpt] Jump(main_loop.105, [w.106, h.107, _136, y.109, ret.110, ])
// [KnfOpt] Inline threshold 33
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision print_loop.58 rejected
// [KnfOpt] Numbers of let rec: 3 3 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f12: Once, f4: Once, f8: Once, f0: Once, f13: Once, f10: Once, f2: Once, f18: Once, f14: Once})
// [CoreOpt] LVN subst Insn(iref=%1) with Insn(iref=%0)
