// [Asm] pre_assigned_registers: Self(fref=f6) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$_4"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   comment = "0:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$_4"];
// [Asm]   r0 [label="fv3 ← fa0", color=green];
// [Asm]   r1 [label="fa0", color=blue];
// [Asm]   comment = "0:fv3-> 1:fa0"
// [Asm]   comment = "fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 4593527504729830064 ->   li a0, 4593527504729830064
// [Asm] subst   fmv.d.x fv3, v2 ->   fmv.d.x fa0, a0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%15) -> fv33, Insn(iref=%41) -> v54, Insn(iref=%33) -> v38, BlockParam(bref=b28, bpref=$b.0) -> v71, Insn(iref=%8) -> fv23, Insn(iref=%10) -> fv25, Insn(iref=%27) -> v67, Insn(iref=%25) -> v62, Insn(iref=%39) -> v50, Insn(iref=%4) -> fv19, Insn(iref=%49) -> fv44, FnParam(fref=f12, fpref=$f.3) -> v5, Insn(iref=%42) -> v51, FnParam(fref=f12, fpref=$f.0) -> v2, FnParam(fref=f12, fpref=$f.4) -> v6, Insn(iref=%26) -> v66, Insn(iref=%31) -> fv36, Insn(iref=%38) -> v56, Insn(iref=%16) -> v34, Self(fref=f12) -> v0, BlockParam(bref=b2, bpref=$b.1) -> v12, BlockParam(bref=b2, bpref=$b.2) -> v13, Insn(iref=%5) -> fv20, Insn(iref=%19) -> v58, FnParam(fref=f12, fpref=$f.1) -> v3, Insn(iref=%13) -> fv28, Insn(iref=%7) -> fv22, BlockParam(bref=b8, bpref=$b.1) -> fv30, Insn(iref=%48) -> fv43, Insn(iref=%23) -> v69, Insn(iref=%20) -> v59, BlockParam(bref=b2, bpref=$b.3) -> v14, Insn(iref=%34) -> v47, Insn(iref=%36) -> v49, BlockParam(bref=b2, bpref=$b.0) -> v11, FnParam(fref=f12, fpref=$f.5) -> fv7, BlockParam(bref=b2, bpref=$b.4) -> v15, FnParam(fref=f12, fpref=$f.2) -> v4, FnParam(fref=f12, fpref=$f.6) -> fv8, FnParam(fref=f12, fpref=$f.7) -> v9, Insn(iref=%50) -> fv45, Insn(iref=%14) -> fv32, Insn(iref=%51) -> v46, Insn(iref=%44) -> fv39, Insn(iref=%32) -> fv37, Insn(iref=%1) -> v17, Insn(iref=%11) -> fv26, BlockParam(bref=b8, bpref=$b.2) -> v31, Insn(iref=%6) -> fv21, Insn(iref=%35) -> v48, FnParam(fref=f12, fpref=$f.8) -> fv10, Insn(iref=%46) -> fv41, Insn(iref=%28) -> v63, Insn(iref=%9) -> fv24, Insn(iref=%24) -> v61, Insn(iref=%37) -> v55, Insn(iref=%45) -> fv40, Insn(iref=%29) -> v64, BlockParam(bref=b8, bpref=$b.0) -> fv29, Insn(iref=%47) -> fv42, Insn(iref=%0) -> v16, Insn(iref=%3) -> fv18, Insn(iref=%18) -> v57, Insn(iref=%22) -> v68, Insn(iref=%17) -> v35, Insn(iref=%2) -> v70, Insn(iref=%43) -> v52, Insn(iref=%30) -> v65, Insn(iref=%21) -> v60, Insn(iref=%40) -> v53, Insn(iref=%12) -> fv27
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=48), Insn(iref=%24)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%20), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=48), BlockParam(bref=b8, bpref=$b.2)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b8, bpref=$b.2), Int32(val=0)])
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%44), BlockParam(bref=b8, bpref=$b.1)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b8, bpref=$b.2), Insn(iref=%16)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b2, bpref=$b.2), BlockParam(bref=b2, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.1)])
// [Asm] defs: [v57]
// [Asm] live_set: [v11, v14, zero, v13, v15, v12, v57]
// [Asm] move_origin: []
// [Asm] defined: v57 is X
// [Asm] defs: [v58]
// [Asm] live_set: [v11, v58, v14, zero, v13, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: v58 is X
// [Asm] defs: [v59]
// [Asm] live_set: [v11, v58, v14, zero, v13, v59, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: v59 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v14, zero, v13, v15, v12]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12, v15, zero, v13]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12, v15, zero, v13]
// [Asm] move_origin: []
// [Asm] defs: [v71]
// [Asm] live_set: [v71]
// [Asm] move_origin: [zero]
// [Asm] defined: v71 is X
// [Asm] defs: [v90]
// [Asm] live_set: [v11, v14, zero, v13, v90, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v90 is X
// [Asm] defs: [v91]
// [Asm] live_set: [v11, v14, v91, zero, v13, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v91 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, zero, v13, v12, v15]
// [Asm] move_origin: []
// [Asm] defs: [v56]
// [Asm] live_set: [v11, v14, v56, zero, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v56 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v56, zero, v12, v15]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v56, zero, v12, v15]
// [Asm] move_origin: [v12]
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v14, v13, zero, v12, v15]
// [Asm] move_origin: [v56]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v13, zero, v12, v15]
// [Asm] move_origin: [v14]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12, v15, v13, zero]
// [Asm] move_origin: [v15]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12, v15, v13, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v71]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [fv18]
// [Asm] live_set: [v11, v14, v13, zero, v15, v12, fv18]
// [Asm] move_origin: []
// [Asm] defined: fv18 is F
// [Asm] defs: [v132]
// [Asm] live_set: [v11, v14, v13, zero, v15, v12, fv18, v132]
// [Asm] move_origin: []
// [Asm] defined: v132 is X
// [Asm] defs: [fv133]
// [Asm] live_set: [v11, v14, v13, zero, v15, v12, fv18, fv133]
// [Asm] move_origin: []
// [Asm] defined: fv133 is F
// [Asm] defs: [fv19]
// [Asm] live_set: [v11, v14, v13, zero, fv19, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv19 is F
// [Asm] defs: [fv20]
// [Asm] live_set: [v11, v14, v13, zero, fv20, fv19, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv20 is F
// [Asm] defs: [fv21]
// [Asm] live_set: [v11, v14, v13, zero, v15, v12, fv21]
// [Asm] move_origin: []
// [Asm] defined: fv21 is F
// [Asm] defs: [v127]
// [Asm] live_set: [v11, v14, v127, v13, zero, v15, v12, fv21]
// [Asm] move_origin: []
// [Asm] defined: v127 is X
// [Asm] defs: [fv128]
// [Asm] live_set: [v11, fv128, v14, v13, zero, v15, v12, fv21]
// [Asm] move_origin: []
// [Asm] defined: fv128 is F
// [Asm] defs: [fv22]
// [Asm] live_set: [v11, fv22, v14, v13, zero, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv22 is F
// [Asm] defs: [fv23]
// [Asm] live_set: [v11, fv23, v14, v13, zero, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv23 is F
// [Asm] defs: [fv24]
// [Asm] live_set: [v11, fv23, fv24, v14, v13, zero, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv24 is F
// [Asm] defs: [v122]
// [Asm] live_set: [v11, fv23, fv24, v14, v13, zero, v15, v12, v122]
// [Asm] move_origin: []
// [Asm] defined: v122 is X
// [Asm] defs: [fv123]
// [Asm] live_set: [v11, fv23, fv24, v14, v13, zero, fv123, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv123 is F
// [Asm] defs: [fv25]
// [Asm] live_set: [v11, fv23, v14, v13, zero, fv25, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv25 is F
// [Asm] defs: [fv26]
// [Asm] live_set: [v11, fv23, v14, v13, zero, fv25, v15, v12, fv26]
// [Asm] move_origin: []
// [Asm] defined: fv26 is F
// [Asm] defs: [fv27]
// [Asm] live_set: [v11, fv23, v14, v13, zero, fv27, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv27 is F
// [Asm] defs: [v117]
// [Asm] live_set: [v11, fv23, v14, v13, zero, fv27, v15, v12, v117]
// [Asm] move_origin: []
// [Asm] defined: v117 is X
// [Asm] defs: [fv118]
// [Asm] live_set: [v11, fv23, v14, v13, zero, fv27, v15, v12, fv118]
// [Asm] move_origin: []
// [Asm] defined: fv118 is F
// [Asm] defs: [fv28]
// [Asm] live_set: [v11, fv23, v14, fv28, v13, zero, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: fv28 is F
// [Asm] defs: [fv29]
// [Asm] live_set: [v11, v14, fv28, v13, zero, fv29, v15, v12]
// [Asm] move_origin: [fv23]
// [Asm] defined: fv29 is F
// [Asm] defs: [fv30]
// [Asm] live_set: [v11, v14, v13, zero, fv30, fv29, v15, v12]
// [Asm] move_origin: [fv28]
// [Asm] defined: fv30 is F
// [Asm] defs: [v31]
// [Asm] live_set: [v11, v14, v13, zero, fv30, fv29, v15, v12, v31]
// [Asm] move_origin: [zero]
// [Asm] defined: v31 is X
// [Asm] defs: [v93]
// [Asm] live_set: [v11, v14, v48, zero, v13, v12, v15, v93]
// [Asm] move_origin: []
// [Asm] defined: v93 is X
// [Asm] defs: [v94]
// [Asm] live_set: [v11, v94, v14, zero, v13, v12, v15, v93]
// [Asm] move_origin: []
// [Asm] defined: v94 is X
// [Asm] defs: [v95]
// [Asm] live_set: [v11, v14, zero, v13, v95, v12, v15, v93]
// [Asm] move_origin: []
// [Asm] defined: v95 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, zero, v13, v12, v15]
// [Asm] move_origin: []
// [Asm] defs: [v54]
// [Asm] live_set: [v11, v14, zero, v12, v15, v54]
// [Asm] move_origin: []
// [Asm] defined: v54 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, zero, v12, v15, v54]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, zero, v12, v15, v54]
// [Asm] move_origin: [v12]
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v14, v13, zero, v12, v15]
// [Asm] move_origin: [v54]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v13, zero, v12, v15]
// [Asm] move_origin: [v14]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12, v15, v13, zero]
// [Asm] move_origin: [v15]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12, v15, v13, zero]
// [Asm] move_origin: []
// [Asm] defs: [v70]
// [Asm] live_set: [v11, zero, v70, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v70 is X
// [Asm] defs: []
// [Asm] live_set: [v11, zero, v70, v12, v15]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, zero, v70, v12, v15]
// [Asm] move_origin: [v12]
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v13, zero, v70, v12, v15]
// [Asm] move_origin: [zero]
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v11, v14, v13, zero, v12, v15]
// [Asm] move_origin: [v70]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12, v15, v13, zero]
// [Asm] move_origin: [v15]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12, v15, v13, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [fa2, a5, zero, a0, a4, fa0, a2, a1, a3, fa1]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [fa2, a5, zero, a4, fa0, a2, a1, a3, fa1, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, fa2, a5, zero, a4, fa0, a2, a3, fa1, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, fa2, a5, zero, a4, fa0, v4, a3, fa1, v2]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v5, fa2, a5, zero, a4, fa0, v4, fa1, v2]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v3, v5, fa2, a5, zero, fa0, v4, v6, fa1, v2]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [fv7]
// [Asm] live_set: [v3, v5, fa2, a5, zero, v4, v6, fa1, v2]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv7 is F
// [Asm] defs: [fv8]
// [Asm] live_set: [v3, v5, fa2, a5, zero, v4, v6, v2]
// [Asm] move_origin: [fa1]
// [Asm] defined: fv8 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v3, v5, fa2, zero, v4, v6, v2]
// [Asm] move_origin: [a5]
// [Asm] defined: v9 is X
// [Asm] defs: [fv10]
// [Asm] live_set: [v2, v4, v6, v5, zero, v3]
// [Asm] move_origin: [fa2]
// [Asm] defined: fv10 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v4, v6, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v4, v6, v5, v12, zero]
// [Asm] move_origin: [v3]
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v6, v5, v12, v13, zero]
// [Asm] move_origin: [v4]
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v11, v14, v6, v12, v13, zero]
// [Asm] move_origin: [v5]
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v11, v14, v12, v15, v13, zero]
// [Asm] move_origin: [v6]
// [Asm] defined: v15 is X
// [Asm] defs: [v77]
// [Asm] live_set: [v11, v14, v58, zero, v13, v77, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v77 is X
// [Asm] defs: [v78]
// [Asm] live_set: [v11, v14, zero, v13, v77, v78, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v78 is X
// [Asm] defs: [v79]
// [Asm] live_set: [v11, v14, zero, v13, v79, v77, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v79 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, zero, v13, v12, v15]
// [Asm] move_origin: []
// [Asm] defs: [v67]
// [Asm] live_set: [v11, v14, zero, v67, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v67 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, zero, v67, v12, v15]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, zero, v67, v12, v15]
// [Asm] move_origin: [v12]
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v14, v13, zero, v12, v15]
// [Asm] move_origin: [v67]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v13, zero, v12, v15]
// [Asm] move_origin: [v14]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12, v15, v13, zero]
// [Asm] move_origin: [v15]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12, v15, v13, zero]
// [Asm] move_origin: []
// [Asm] defs: [v63]
// [Asm] live_set: [v11, v63, v14, v58, zero, v13, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v63 is X
// [Asm] defs: [v81]
// [Asm] live_set: [v11, v63, v14, zero, v13, v81, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v81 is X
// [Asm] defs: [v82]
// [Asm] live_set: [v11, v63, v14, v82, zero, v13, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v82 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, zero, v13, v12, v15]
// [Asm] move_origin: []
// [Asm] defs: [v65]
// [Asm] live_set: [v11, v14, zero, v65, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v65 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, zero, v65, v12, v15]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, zero, v65, v12, v15]
// [Asm] move_origin: [v12]
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v14, v13, zero, v12, v15]
// [Asm] move_origin: [v65]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v13, zero, v12, v15]
// [Asm] move_origin: [v14]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12, v15, v13, zero]
// [Asm] move_origin: [v15]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12, v15, v13, zero]
// [Asm] move_origin: []
// [Asm] defs: [v108]
// [Asm] live_set: [v11, v14, fv32, v13, zero, fv30, fv33, fv29, v108, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defined: v108 is X
// [Asm] defs: [fv109]
// [Asm] live_set: [v11, v14, fv32, v13, zero, fv30, fv33, fv29, fv109, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defined: fv109 is F
// [Asm] defs: [fv39]
// [Asm] live_set: [v11, v14, fv32, v13, zero, fv39, fv30, fv33, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defined: fv39 is F
// [Asm] defs: [fv41]
// [Asm] live_set: [v11, v14, fv32, v13, zero, fv39, fv41, fv30, fv33, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defined: fv41 is F
// [Asm] defs: [fv42]
// [Asm] live_set: [v11, v14, fv32, v13, zero, fv42, fv33, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defined: fv42 is F
// [Asm] defs: [fv43]
// [Asm] live_set: [v11, v14, v13, zero, fv42, fv43, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defined: fv43 is F
// [Asm] defs: [fv44]
// [Asm] live_set: [v11, v14, v13, zero, fv42, fv43, v15, v12, v31, fv44]
// [Asm] move_origin: []
// [Asm] defined: fv44 is F
// [Asm] defs: [fv45]
// [Asm] live_set: [v11, v14, fv45, v13, zero, fv42, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defined: fv45 is F
// [Asm] defs: [v46]
// [Asm] live_set: [v11, v14, v46, fv45, v13, zero, fv42, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: [fv29]
// [Asm] live_set: [v11, v14, v46, v13, zero, fv42, fv29, v15, v12]
// [Asm] move_origin: [fv45]
// [Asm] defined: fv29 is F
// [Asm] defs: [fv30]
// [Asm] live_set: [v11, v14, v46, v13, zero, fv30, fv29, v15, v12]
// [Asm] move_origin: [fv42]
// [Asm] defined: fv30 is F
// [Asm] defs: [v31]
// [Asm] live_set: [v11, v14, v13, zero, fv30, fv29, v15, v12, v31]
// [Asm] move_origin: [v46]
// [Asm] defined: v31 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v13, zero, fv30, fv29, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defs: [v74]
// [Asm] live_set: [v11, v14, zero, v13, v74, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v74 is X
// [Asm] defs: [v75]
// [Asm] live_set: [v11, v14, v75, zero, v13, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v75 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, zero, v13, v12, v15]
// [Asm] move_origin: []
// [Asm] defs: [v69]
// [Asm] live_set: [v11, v14, v69, zero, v12, v15]
// [Asm] move_origin: []
// [Asm] defined: v69 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v69, zero, v12, v15]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v69, zero, v12, v15]
// [Asm] move_origin: [v12]
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v14, v13, zero, v12, v15]
// [Asm] move_origin: [v69]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v13, zero, v12, v15]
// [Asm] move_origin: [v14]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12, v15, v13, zero]
// [Asm] move_origin: [v15]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12, v15, v13, zero]
// [Asm] move_origin: []
// [Asm] defs: [fv32]
// [Asm] live_set: [v11, v14, fv32, v13, zero, fv30, fv29, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defined: fv32 is F
// [Asm] defs: [fv33]
// [Asm] live_set: [v11, v14, fv32, v13, zero, fv33, fv30, fv29, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defined: fv33 is F
// [Asm] defs: [v34]
// [Asm] live_set: [v11, v14, fv32, v13, zero, fv33, fv30, fv29, v15, v12, v31, v34]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, fv32, v13, zero, fv33, fv30, fv29, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defs: [v61]
// [Asm] live_set: [v11, v58, v14, v13, zero, v12, v15, v61]
// [Asm] move_origin: []
// [Asm] defined: v61 is X
// [Asm] defs: [v84]
// [Asm] live_set: [v11, v58, v14, v13, zero, v84, v12, v15, v61]
// [Asm] move_origin: []
// [Asm] defined: v84 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v14, v13, zero, v12, v15]
// [Asm] move_origin: []
// [Asm] defs: [v99]
// [Asm] live_set: [v11, v14, v48, v99, v13, zero, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defined: v99 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v48, v13, zero, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defs: [v47]
// [Asm] live_set: [v11, v14, v13, zero, v47, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: [v48]
// [Asm] live_set: [v11, v14, v48, v13, zero, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defined: v48 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v48, v13, zero, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defs: [fv36]
// [Asm] live_set: [v11, v14, fv32, v13, zero, fv36, fv33, fv30, fv29, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defined: fv36 is F
// [Asm] defs: [fv37]
// [Asm] live_set: [v11, fv37, v14, fv32, v13, zero, fv36, fv33, fv30, fv29, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defined: fv37 is F
// [Asm] defs: [v38]
// [Asm] live_set: [v11, v14, fv32, v13, zero, fv30, fv33, fv29, v38, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defined: v38 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, fv32, v13, zero, fv30, fv33, fv29, v15, v12, v31]
// [Asm] move_origin: []
// [Asm] defs: [v97]
// [Asm] live_set: [v11, v14, zero, v13, v97, v12, v15, v31]
// [Asm] move_origin: []
// [Asm] defined: v97 is X
// [Asm] defs: [v98]
// [Asm] live_set: [v11, v14, zero, v13, v12, v15, v31, v98]
// [Asm] move_origin: []
// [Asm] defined: v98 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, zero, v13, v12, v15]
// [Asm] move_origin: []
// [Asm] defs: [v52]
// [Asm] live_set: [v11, v14, zero, v12, v15, v52]
// [Asm] move_origin: []
// [Asm] defined: v52 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, zero, v12, v15, v52]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, zero, v12, v15, v52]
// [Asm] move_origin: [v12]
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v14, v13, zero, v12, v15]
// [Asm] move_origin: [v52]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v13, zero, v12, v15]
// [Asm] move_origin: [v14]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12, v15, v13, zero]
// [Asm] move_origin: [v15]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12, v15, v13, zero]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main_loop.196"];
// [Asm]   r0 [label="v57 ← a0", color=green];
// [Asm]   r46 [label="v74 ← a0", color=green];
// [Asm]   r38 [label="v79 ← a0", color=green];
// [Asm]   r33 [label="v5 ← a2", color=green];
// [Asm]   r9 [label="v71 ← a0", color=green];
// [Asm]   r26 [label="a5", color=blue];
// [Asm]   r47 [label="v75 ← a0", color=green];
// [Asm]   r6 [label="v12 ← a5", color=green];
// [Asm]   r44 [label="v108 ← a6", color=green];
// [Asm]   r13 [label="a0", color=blue];
// [Asm]   r53 [label="v47 ← a6", color=green];
// [Asm]   r42 [label="v82 ← a0", color=green];
// [Asm]   r4 [label="v13 ← a3", color=green];
// [Asm]   r29 [label="a1", color=blue];
// [Asm]   r35 [label="v9 ← a1", color=green];
// [Asm]   r56 [label="v98 ← a6", color=green];
// [Asm]   r7 [label="v58 ← a0", color=green];
// [Asm]   r10 [label="v90 ← a0", color=green];
// [Asm]   r8 [label="v59 ← a6", color=green];
// [Asm]   r5 [label="v15 ← a4", color=green];
// [Asm]   r36 [label="v77 ← a6", color=green];
// [Asm]   r54 [label="v38 ← a6", color=green];
// [Asm]   r15 [label="v127 ← a0", color=green];
// [Asm]   r32 [label="v4 ← a6", color=green];
// [Asm]   r24 [label="v70 ← a0", color=green];
// [Asm]   r49 [label="v34 ← a6", color=green];
// [Asm]   r57 [label="v52 ← a0", color=green];
// [Asm]   r43 [label="v65 ← a0", color=green];
// [Asm]   r31 [label="v3 ← a7", color=green];
// [Asm]   r39 [label="v67 ← a0", color=green];
// [Asm]   r17 [label="v117 ← a0", color=green];
// [Asm]   r52 [label="v99 ← a7", color=green];
// [Asm]   r12 [label="v56 ← a0", color=green];
// [Asm]   r48 [label="v69 ← a0", color=green];
// [Asm]   r37 [label="v78 ← a0", color=green];
// [Asm]   r20 [label="v48 ← a6", color=green];
// [Asm]   r23 [label="v54 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r27 [label="a4", color=blue];
// [Asm]   r1 [label="v11 ← a1", color=green];
// [Asm]   r40 [label="v63 ← a6", color=green];
// [Asm]   r41 [label="v81 ← a0", color=green];
// [Asm]   r28 [label="a2", color=blue];
// [Asm]   r11 [label="v91 ← a0", color=green];
// [Asm]   r34 [label="v6 ← a0", color=green];
// [Asm]   r22 [label="v95 ← a6", color=green];
// [Asm]   r14 [label="v132 ← a0", color=green];
// [Asm]   r50 [label="v61 ← a6", color=green];
// [Asm]   r30 [label="a3", color=blue];
// [Asm]   r51 [label="v84 ← a7", color=green];
// [Asm]   r45 [label="v46 ← a0", color=green];
// [Asm]   r25 [label="v2 ← t0", color=green];
// [Asm]   r55 [label="v97 ← a6", color=green];
// [Asm]   r2 [label="v14 ← a2", color=green];
// [Asm]   r16 [label="v122 ← a0", color=green];
// [Asm]   r18 [label="v31 ← a0", color=green];
// [Asm]   r19 [label="v93 ← a0", color=green];
// [Asm]   r21 [label="v94 ← a6", color=green];
// [Asm]   r4 -- r53;
// [Asm]   r7 -- r51;
// [Asm]   r18 -- r49;
// [Asm]   r2 -- r38;
// [Asm]   r3 -- r52;
// [Asm]   r6 -- r48;
// [Asm]   r5 -- r21;
// [Asm]   r3 -- r15;
// [Asm]   r4 -- r34;
// [Asm]   r3 -- r16;
// [Asm]   r4 -- r51;
// [Asm]   r1 -- r57;
// [Asm]   r3 -- r53;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r2 -- r49;
// [Asm]   r3 -- r42;
// [Asm]   r5 -- r22;
// [Asm]   r2 -- r43;
// [Asm]   r5 -- r18;
// [Asm]   r4 -- r44;
// [Asm]   r1 -- r45;
// [Asm]   r5 -- r47;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r52;
// [Asm]   r3 -- r37;
// [Asm]   r2 -- r51;
// [Asm]   r2 -- r37;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r3 -- r31;
// [Asm]   r2 -- r41;
// [Asm]   r2 -- r42;
// [Asm]   r3 -- r5;
// [Asm]   r18 -- r44;
// [Asm]   r1 -- r50;
// [Asm]   r2 -- r34;
// [Asm]   r0 -- r6;
// [Asm]   r31 -- r35;
// [Asm]   r3 -- r48;
// [Asm]   r3 -- r8;
// [Asm]   r18 -- r56;
// [Asm]   r32 -- r35;
// [Asm]   r2 -- r6;
// [Asm]   r25 -- r29;
// [Asm]   r5 -- r6;
// [Asm]   r5 -- r57;
// [Asm]   r1 -- r48;
// [Asm]   r2 -- r48;
// [Asm]   r3 -- r39;
// [Asm]   r25 -- r32;
// [Asm]   r19 -- r22;
// [Asm]   r1 -- r40;
// [Asm]   r18 -- r54;
// [Asm]   r2 -- r12;
// [Asm]   r5 -- r54;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r33;
// [Asm]   r4 -- r56;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r51;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r5 -- r55;
// [Asm]   r3 -- r49;
// [Asm]   r2 -- r36;
// [Asm]   r5 -- r51;
// [Asm]   r32 -- r34;
// [Asm]   r18 -- r20;
// [Asm]   r1 -- r38;
// [Asm]   r1 -- r41;
// [Asm]   r6 -- r50;
// [Asm]   r6 -- r55;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r35;
// [Asm]   r1 -- r5;
// [Asm]   r6 -- r23;
// [Asm]   r0 -- r4;
// [Asm]   r6 -- r56;
// [Asm]   r4 -- r14;
// [Asm]   r3 -- r46;
// [Asm]   r5 -- r36;
// [Asm]   r40 -- r42;
// [Asm]   r27 -- r31;
// [Asm]   r26 -- r34;
// [Asm]   r3 -- r19;
// [Asm]   r3 -- r45;
// [Asm]   r3 -- r25;
// [Asm]   r34 -- r35;
// [Asm]   r1 -- r43;
// [Asm]   r28 -- r31;
// [Asm]   r1 -- r8;
// [Asm]   r3 -- r38;
// [Asm]   r6 -- r41;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r34;
// [Asm]   r1 -- r47;
// [Asm]   r1 -- r55;
// [Asm]   r30 -- r32;
// [Asm]   r6 -- r33;
// [Asm]   r1 -- r22;
// [Asm]   r20 -- r52;
// [Asm]   r2 -- r52;
// [Asm]   r2 -- r50;
// [Asm]   r5 -- r19;
// [Asm]   r6 -- r46;
// [Asm]   r6 -- r53;
// [Asm]   r33 -- r35;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r38;
// [Asm]   r6 -- r20;
// [Asm]   r3 -- r22;
// [Asm]   r3 -- r50;
// [Asm]   r6 -- r19;
// [Asm]   r2 -- r44;
// [Asm]   r3 -- r57;
// [Asm]   r2 -- r40;
// [Asm]   r18 -- r53;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r55;
// [Asm]   r2 -- r14;
// [Asm]   r32 -- r33;
// [Asm]   r3 -- r21;
// [Asm]   r25 -- r35;
// [Asm]   r0 -- r3;
// [Asm]   r6 -- r57;
// [Asm]   r25 -- r34;
// [Asm]   r5 -- r45;
// [Asm]   r7 -- r36;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r25 -- r31;
// [Asm]   r5 -- r56;
// [Asm]   r4 -- r36;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r6 -- r39;
// [Asm]   r5 -- r39;
// [Asm]   r27 -- r33;
// [Asm]   r26 -- r31;
// [Asm]   r31 -- r33;
// [Asm]   r6 -- r38;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r3 -- r23;
// [Asm]   r1 -- r54;
// [Asm]   r26 -- r32;
// [Asm]   r1 -- r42;
// [Asm]   r1 -- r24;
// [Asm]   r6 -- r52;
// [Asm]   r5 -- r12;
// [Asm]   r2 -- r39;
// [Asm]   r36 -- r38;
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r21;
// [Asm]   r26 -- r33;
// [Asm]   r4 -- r38;
// [Asm]   r25 -- r28;
// [Asm]   r5 -- r41;
// [Asm]   r2 -- r45;
// [Asm]   r4 -- r41;
// [Asm]   r1 -- r12;
// [Asm]   r6 -- r36;
// [Asm]   r1 -- r37;
// [Asm]   r6 -- r47;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r43;
// [Asm]   r7 -- r40;
// [Asm]   r18 -- r55;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r56;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r56;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r4 -- r54;
// [Asm]   r30 -- r31;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r32;
// [Asm]   r27 -- r32;
// [Asm]   r5 -- r49;
// [Asm]   r6 -- r54;
// [Asm]   r5 -- r42;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r3 -- r24;
// [Asm]   r19 -- r21;
// [Asm]   r4 -- r22;
// [Asm]   r4 -- r40;
// [Asm]   r4 -- r42;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r51;
// [Asm]   r3 -- r34;
// [Asm]   r1 -- r46;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r31;
// [Asm]   r2 -- r54;
// [Asm]   r4 -- r33;
// [Asm]   r50 -- r51;
// [Asm]   r18 -- r52;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r2 -- r46;
// [Asm]   r5 -- r53;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r43;
// [Asm]   r6 -- r10;
// [Asm]   r2 -- r47;
// [Asm]   r3 -- r40;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r5 -- r7;
// [Asm]   r6 -- r45;
// [Asm]   r4 -- r50;
// [Asm]   r4 -- r8;
// [Asm]   r5 -- r14;
// [Asm]   r5 -- r50;
// [Asm]   r1 -- r49;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r44;
// [Asm]   r31 -- r34;
// [Asm]   r7 -- r8;
// [Asm]   r4 -- r49;
// [Asm]   r2 -- r23;
// [Asm]   r6 -- r32;
// [Asm]   r2 -- r53;
// [Asm]   r36 -- r37;
// [Asm]   r6 -- r7;
// [Asm]   r25 -- r33;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r5 -- r20;
// [Asm]   r4 -- r37;
// [Asm]   r2 -- r18;
// [Asm]   r6 -- r49;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r23;
// [Asm]   r5 -- r48;
// [Asm]   r5 -- r23;
// [Asm]   r1 -- r53;
// [Asm]   r6 -- r44;
// [Asm]   r25 -- r27;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r32;
// [Asm]   r6 -- r51;
// [Asm]   r5 -- r52;
// [Asm]   r1 -- r15;
// [Asm]   r25 -- r30;
// [Asm]   r4 -- r20;
// [Asm]   r3 -- r47;
// [Asm]   r5 -- r44;
// [Asm]   r6 -- r16;
// [Asm]   r25 -- r26;
// [Asm]   r2 -- r55;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r12;
// [Asm]   r6 -- r40;
// [Asm]   r6 -- r24;
// [Asm]   r1 -- r39;
// [Asm]   r6 -- r8;
// [Asm]   r33 -- r34;
// [Asm]   r6 -- r34;
// [Asm]   r6 -- r37;
// [Asm]   r2 -- r57;
// [Asm]   r4 -- r46;
// [Asm]   r4 -- r11;
// [Asm]   r4 -- r45;
// [Asm]   r5 -- r46;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r37;
// [Asm]   r2 -- r56;
// [Asm]   r6 -- r42;
// [Asm]   r3 -- r55;
// [Asm]   r2 -- r21;
// [Asm]   r3 -- r41;
// [Asm]   r6 -- r17;
// [Asm]   r4 -- r47;
// [Asm]   r3 -- r14;
// [Asm]   r40 -- r41;
// [Asm]   r3 -- r36;
// [Asm]   r4 -- r17;
// [Asm]   r31 -- r32;
// [Asm]   r7 -- r50;
// [Asm]   r3 -- r54;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r36;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r5 -- r43;
// [Asm]   r2 -- r3;
// [Asm]   r4 -- r52;
// [Asm]   r5 -- r40;
// [Asm]   r5 -- r15;
// [Asm]   r4 -- r19;
// [Asm]   r19 -- r20;
// [Asm]   r3 -- r44;
// [Asm]   comment = "0:v57-> 1:v11-> 2:v14-> 3:zero-> 4:v13-> 5:v15-> 6:v12-> 7:v58-> 8:v59-> 36:v77-> 37:v78-> 38:v79-> 40:v63-> 41:v81-> 42:v82-> 50:v61-> 51:v84-> 10:v90-> 11:v91-> 14:v132-> 15:v127-> 16:v122-> 17:v117-> 18:v31-> 20:v48-> 52:v99-> 19:v93-> 21:v94-> 22:v95-> 44:v108-> 49:v34-> 53:v47-> 54:v38-> 55:v97-> 56:v98-> 45:v46-> 46:v74-> 47:v75-> 12:v56-> 23:v54-> 24:v70-> 34:v6-> 33:v5-> 32:v4-> 31:v3-> 25:v2-> 35:v9-> 26:a5-> 39:v67-> 43:v65-> 48:v69-> 57:v52-> 27:a4-> 30:a3-> 28:a2-> 29:a1-> 9:v71-> 13:a0"
// [Asm]   comment = "v57<-a0;v74<-a0;v79<-a0;v5<-a2;v71<-a0;v75<-a0;v12<-a5;v108<-a6;v47<-a6;v82<-a0;v13<-a3;v9<-a1;v98<-a6;v58<-a0;v90<-a0;v59<-a6;v15<-a4;v77<-a6;v38<-a6;v127<-a0;v4<-a6;v70<-a0;v34<-a6;v52<-a0;v65<-a0;v3<-a7;v67<-a0;v117<-a0;v99<-a7;v56<-a0;v69<-a0;v78<-a0;v48<-a6;v54<-a0;v11<-a1;v63<-a6;v81<-a0;v91<-a0;v6<-a0;v95<-a6;v132<-a0;v61<-a6;v84<-a7;v46<-a0;v2<-t0;v97<-a6;v14<-a2;v122<-a0;v31<-a0;v93<-a0;v94<-a6;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main_loop.196"];
// [Asm]   r0 [label="fv18 ← fa0", color=green];
// [Asm]   r33 [label="fv37 ← fa5", color=green];
// [Asm]   r9 [label="fv123 ← fa2", color=green];
// [Asm]   r26 [label="fv39 ← fa0", color=green];
// [Asm]   r6 [label="fv22 ← fa0", color=green];
// [Asm]   r13 [label="fv118 ← fa2", color=green];
// [Asm]   r4 [label="fv21 ← fa0", color=green];
// [Asm]   r29 [label="fv43 ← fa0", color=green];
// [Asm]   r7 [label="fv23 ← fa0", color=green];
// [Asm]   r10 [label="fv25 ← fa1", color=green];
// [Asm]   r8 [label="fv24 ← fa1", color=green];
// [Asm]   r5 [label="fv128 ← fa1", color=green];
// [Asm]   r24 [label="fv33 ← fa3", color=green];
// [Asm]   r15 [label="fv29 ← fa0", color=green];
// [Asm]   r32 [label="fv36 ← fa4", color=green];
// [Asm]   r31 [label="fv45 ← fa0", color=green];
// [Asm]   r17 [label="fa2", color=blue];
// [Asm]   r12 [label="fv27 ← fa1", color=green];
// [Asm]   r20 [label="fv7 ← fa0", color=green];
// [Asm]   r23 [label="fv32 ← fa2", color=green];
// [Asm]   r3 [label="fv20 ← fa1", color=green];
// [Asm]   r27 [label="fv41 ← fa4", color=green];
// [Asm]   r1 [label="fv133 ← fa1", color=green];
// [Asm]   r28 [label="fv42 ← fa1", color=green];
// [Asm]   r11 [label="fv26 ← fa2", color=green];
// [Asm]   r22 [label="fv10 ← fa0", color=green];
// [Asm]   r14 [label="fv28 ← fa1", color=green];
// [Asm]   r30 [label="fv44 ← fa2", color=green];
// [Asm]   r25 [label="fv109 ← fa4", color=green];
// [Asm]   r2 [label="fv19 ← fa0", color=green];
// [Asm]   r16 [label="fv30 ← fa1", color=green];
// [Asm]   r18 [label="fa0", color=blue];
// [Asm]   r19 [label="fa1", color=blue];
// [Asm]   r21 [label="fv8 ← fa0", color=green];
// [Asm]   r15 -- r32;
// [Asm]   r24 -- r33;
// [Asm]   r17 -- r20;
// [Asm]   r19 -- r20;
// [Asm]   r23 -- r26;
// [Asm]   r26 -- r27;
// [Asm]   r23 -- r33;
// [Asm]   r17 -- r21;
// [Asm]   r23 -- r25;
// [Asm]   r16 -- r25;
// [Asm]   r4 -- r5;
// [Asm]   r12 -- r13;
// [Asm]   r28 -- r31;
// [Asm]   r32 -- r33;
// [Asm]   r16 -- r33;
// [Asm]   r7 -- r10;
// [Asm]   r23 -- r28;
// [Asm]   r29 -- r30;
// [Asm]   r16 -- r32;
// [Asm]   r23 -- r32;
// [Asm]   r10 -- r11;
// [Asm]   r24 -- r27;
// [Asm]   r8 -- r9;
// [Asm]   r7 -- r11;
// [Asm]   r28 -- r30;
// [Asm]   r7 -- r13;
// [Asm]   r28 -- r29;
// [Asm]   r24 -- r32;
// [Asm]   r0 -- r1;
// [Asm]   r15 -- r24;
// [Asm]   r23 -- r24;
// [Asm]   r15 -- r33;
// [Asm]   r15 -- r23;
// [Asm]   r16 -- r26;
// [Asm]   r23 -- r27;
// [Asm]   r7 -- r9;
// [Asm]   r7 -- r8;
// [Asm]   r24 -- r28;
// [Asm]   r24 -- r25;
// [Asm]   r7 -- r12;
// [Asm]   r15 -- r28;
// [Asm]   r16 -- r24;
// [Asm]   r15 -- r16;
// [Asm]   r15 -- r25;
// [Asm]   r16 -- r23;
// [Asm]   r2 -- r3;
// [Asm]   r7 -- r14;
// [Asm]   r24 -- r26;
// [Asm]   r14 -- r15;
// [Asm]   r16 -- r27;
// [Asm]   comment = "0:fv18-> 1:fv133-> 2:fv19-> 3:fv20-> 4:fv21-> 5:fv128-> 6:fv22-> 7:fv23-> 8:fv24-> 9:fv123-> 10:fv25-> 11:fv26-> 12:fv27-> 13:fv118-> 14:fv28-> 15:fv29-> 16:fv30-> 23:fv32-> 24:fv33-> 25:fv109-> 32:fv36-> 33:fv37-> 26:fv39-> 27:fv41-> 28:fv42-> 29:fv43-> 30:fv44-> 31:fv45-> 17:fa2-> 20:fv7-> 19:fa1-> 21:fv8-> 18:fa0-> 22:fv10"
// [Asm]   comment = "fv18<-fa0;fv37<-fa5;fv123<-fa2;fv39<-fa0;fv22<-fa0;fv118<-fa2;fv21<-fa0;fv43<-fa0;fv23<-fa0;fv25<-fa1;fv24<-fa1;fv128<-fa1;fv33<-fa3;fv29<-fa0;fv36<-fa4;fv45<-fa0;fv27<-fa1;fv7<-fa0;fv32<-fa2;fv20<-fa1;fv41<-fa4;fv133<-fa1;fv42<-fa1;fv26<-fa2;fv10<-fa0;fv28<-fa1;fv44<-fa2;fv109<-fa4;fv19<-fa0;fv30<-fa1;fv8<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   mul v57, v14, v11 ->   mul a0, a2, a1
// [Asm] subst   add v58, v57, v13 ->   add a0, a0, a3
// [Asm] subst   lw v59, iter.3 ->   lw a6, iter.3
// [Asm] subst   bge zero, v59, .main_loop.196_11 ->   bge zero, a6, .main_loop.196_11
// [Asm] subst   beq v13, v11, .main_loop.196_5 ->   beq a3, a1, .main_loop.196_5
// [Asm] subst   beq v14, v12, .main_loop.196_3 ->   beq a2, a5, .main_loop.196_3
// [Asm] subst   mv v71, zero ->   mv a0, zero
// [Asm] subst   slliw v90, v48, 2 ->   slliw a0, a6, 2
// [Asm] subst   add v91, v15, v90 ->   add a0, a4, a0
// [Asm] subst   sw zero, 0(v91) ->   sw zero, 0(a0)
// [Asm] subst   addi v56, v13, 1 ->   addi a0, a3, 1
// [Asm] subst   mv v13, v56 ->   mv a3, a0
// [Asm] subst   j .main_loop.196_2 ->   j .main_loop.196_2
// [Asm] subst   ret ->   ret
// [Asm] subst   fcvt.d.w fv18, v13 ->   fcvt.d.w fa0, a3
// [Asm] subst   li v132, 4613937818241073152 ->   li a0, 4613937818241073152
// [Asm] subst   fmv.d.x fv133, v132 ->   fmv.d.x fa1, a0
// [Asm] subst   fmul.d fv19, fv133, fv18 ->   fmul.d fa0, fa1, fa0
// [Asm] subst   fcvt.d.w fv20, v11 ->   fcvt.d.w fa1, a1
// [Asm] subst   fdiv.d fv21, fv19, fv20 ->   fdiv.d fa0, fa0, fa1
// [Asm] subst   li v127, 4609434218613702656 ->   li a0, 4609434218613702656
// [Asm] subst   fmv.d.x fv128, v127 ->   fmv.d.x fa1, a0
// [Asm] subst   fsub.d fv22, fv21, fv128 ->   fsub.d fa0, fa0, fa1
// [Asm] subst   fneg.d fv23, fv22 ->   fneg.d fa0, fa0
// [Asm] subst   fcvt.d.w fv24, v14 ->   fcvt.d.w fa1, a2
// [Asm] subst   li v122, 4613937818241073152 ->   li a0, 4613937818241073152
// [Asm] subst   fmv.d.x fv123, v122 ->   fmv.d.x fa2, a0
// [Asm] subst   fmul.d fv25, fv123, fv24 ->   fmul.d fa1, fa2, fa1
// [Asm] subst   fcvt.d.w fv26, v12 ->   fcvt.d.w fa2, a5
// [Asm] subst   fdiv.d fv27, fv25, fv26 ->   fdiv.d fa1, fa1, fa2
// [Asm] subst   li v117, 4609434218613702656 ->   li a0, 4609434218613702656
// [Asm] subst   fmv.d.x fv118, v117 ->   fmv.d.x fa2, a0
// [Asm] subst   fsub.d fv28, fv27, fv118 ->   fsub.d fa1, fa1, fa2
// [Asm] subst   mv v31, zero ->   mv a0, zero
// [Asm] subst   li v93, 48 ->   li a0, 48
// [Asm] subst   slliw v94, v48, 2 ->   slliw a6, a6, 2
// [Asm] subst   add v95, v15, v94 ->   add a6, a4, a6
// [Asm] subst   sw v93, 0(v95) ->   sw a0, 0(a6)
// [Asm] subst   addi v54, v13, 1 ->   addi a0, a3, 1
// [Asm] subst   mv v13, v54 ->   mv a3, a0
// [Asm] subst   j .main_loop.196_2 ->   j .main_loop.196_2
// [Asm] subst   addi v70, v14, 1 ->   addi a0, a2, 1
// [Asm] subst   mv v13, zero ->   mv a3, zero
// [Asm] subst   mv v14, v70 ->   mv a2, a0
// [Asm] subst   j .main_loop.196_2 ->   j .main_loop.196_2
// [Asm] subst   mv v2, a0 ->   mv t0, a0
// [Asm] subst   mv v3, a1 ->   mv a7, a1
// [Asm] subst   mv v4, a2 ->   mv a6, a2
// [Asm] subst   mv v5, a3 ->   mv a2, a3
// [Asm] subst   mv v6, a4 ->   mv a0, a4
// [Asm] subst   fmv.d fv8, fa1 ->   fmv.d fa0, fa1
// [Asm] subst   mv v9, a5 ->   mv a1, a5
// [Asm] subst   fmv.d fv10, fa2 ->   fmv.d fa0, fa2
// [Asm] subst   mv v11, v2 ->   mv a1, t0
// [Asm] subst   mv v12, v3 ->   mv a5, a7
// [Asm] subst   mv v13, v4 ->   mv a3, a6
// [Asm] subst   mv v15, v6 ->   mv a4, a0
// [Asm] subst   li v77, 48 ->   li a6, 48
// [Asm] subst   slliw v78, v58, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v79, v15, v78 ->   add a0, a4, a0
// [Asm] subst   sw v77, 0(v79) ->   sw a6, 0(a0)
// [Asm] subst   addi v67, v13, 1 ->   addi a0, a3, 1
// [Asm] subst   mv v13, v67 ->   mv a3, a0
// [Asm] subst   j .main_loop.196_2 ->   j .main_loop.196_2
// [Asm] subst   lw v63, iter.3 ->   lw a6, iter.3
// [Asm] subst   slliw v81, v58, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v82, v15, v81 ->   add a0, a4, a0
// [Asm] subst   sw v63, 0(v82) ->   sw a6, 0(a0)
// [Asm] subst   addi v65, v13, 1 ->   addi a0, a3, 1
// [Asm] subst   mv v13, v65 ->   mv a3, a0
// [Asm] subst   j .main_loop.196_2 ->   j .main_loop.196_2
// [Asm] subst   li v108, 4611686018427387904 ->   li a6, 4611686018427387904
// [Asm] subst   fmv.d.x fv109, v108 ->   fmv.d.x fa4, a6
// [Asm] subst   fmul.d fv39, fv109, fv29 ->   fmul.d fa0, fa4, fa0
// [Asm] subst   fld fv41, c_im.6, t5 ->   fld fa4, c_im.6, t5
// [Asm] subst   fmadd.d fv42, fv39, fv30, fv41 ->   fmadd.d fa1, fa0, fa1, fa4
// [Asm] subst   fsub.d fv43, fv32, fv33 ->   fsub.d fa0, fa2, fa3
// [Asm] subst   fld fv44, c_re.5, t5 ->   fld fa2, c_re.5, t5
// [Asm] subst   fadd.d fv45, fv43, fv44 ->   fadd.d fa0, fa0, fa2
// [Asm] subst   addi v46, v31, 1 ->   addi a0, a0, 1
// [Asm] subst   j .main_loop.196_8 ->   j .main_loop.196_8
// [Asm] subst   slliw v74, v58, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v75, v15, v74 ->   add a0, a4, a0
// [Asm] subst   sw zero, 0(v75) ->   sw zero, 0(a0)
// [Asm] subst   addi v69, v13, 1 ->   addi a0, a3, 1
// [Asm] subst   mv v13, v69 ->   mv a3, a0
// [Asm] subst   j .main_loop.196_2 ->   j .main_loop.196_2
// [Asm] subst   fmul.d fv32, fv29, fv29 ->   fmul.d fa2, fa0, fa0
// [Asm] subst   fmul.d fv33, fv30, fv30 ->   fmul.d fa3, fa1, fa1
// [Asm] subst   lw v34, iter.3 ->   lw a6, iter.3
// [Asm] subst   bne v31, v34, .main_loop.196_10 ->   bne a0, a6, .main_loop.196_10
// [Asm] subst   lw v61, iter.3 ->   lw a6, iter.3
// [Asm] subst   li v84, 48 ->   li a7, 48
// [Asm] subst   bge v61, v84, .main_loop.196_13 ->   bge a6, a7, .main_loop.196_13
// [Asm] subst   li v99, 48 ->   li a7, 48
// [Asm] subst   blt v31, v99, .main_loop.196_22 ->   blt a0, a7, .main_loop.196_22
// [Asm] subst   mul v47, v14, v11 ->   mul a6, a2, a1
// [Asm] subst   add v48, v47, v13 ->   add a6, a6, a3
// [Asm] subst   bge zero, v31, .main_loop.196_19 ->   bge zero, a0, .main_loop.196_19
// [Asm] subst   fadd.d fv36, fv32, fv33 ->   fadd.d fa4, fa2, fa3
// [Asm] subst   fld fv37, limit_sq.2, t5 ->   fld fa5, limit_sq.2, t5
// [Asm] subst   fle.d v38, fv37, fv36 ->   fle.d a6, fa5, fa4
// [Asm] subst   beq v38, zero, .main_loop.196_18 ->   beq a6, zero, .main_loop.196_18
// [Asm] subst   slliw v97, v48, 2 ->   slliw a6, a6, 2
// [Asm] subst   add v98, v15, v97 ->   add a6, a4, a6
// [Asm] subst   sw v31, 0(v98) ->   sw a0, 0(a6)
// [Asm] subst   addi v52, v13, 1 ->   addi a0, a3, 1
// [Asm] subst   mv v13, v52 ->   mv a3, a0
// [Asm] subst   j .main_loop.196_2 ->   j .main_loop.196_2
// [Asm] pre_assigned_registers: Self(fref=f4) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$iter.3"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   comment = "0:v2-> 1:a0"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$iter.3"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 300 ->   li a0, 300
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> fv3, Self(fref=f8) -> v0, Insn(iref=%0) -> fv2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [fv2]
// [Asm] live_set: [fv2]
// [Asm] move_origin: []
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$c_re.5"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$c_re.5"];
// [Asm]   r0 [label="fv2 ← fa0", color=green];
// [Asm]   r2 [label="fa0", color=blue];
// [Asm]   r1 [label="fv3 ← fa0", color=green];
// [Asm]   comment = "0:fv2-> 1:fv3-> 2:fa0"
// [Asm]   comment = "fv2<-fa0;fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   fld fv2, _4, t5 ->   fld fa0, _4, t5
// [Asm] subst   fneg.d fv3, fv2 ->   fneg.d fa0, fa0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v6, Insn(iref=%1) -> fv3, Insn(iref=%3) -> fv5, Self(fref=f16) -> v0, Insn(iref=%0) -> fv2, Insn(iref=%2) -> v4
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [fv2]
// [Asm] live_set: [fv2]
// [Asm] move_origin: []
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fv2, fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v4, fv2, fv3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [fv5]
// [Asm] live_set: [fv5, v4, fv2, fv3]
// [Asm] move_origin: []
// [Asm] defined: fv5 is F
// [Asm] defs: []
// [Asm] live_set: [fv5, v4, fv2, fv3]
// [Asm] move_origin: []
// [Asm] defs: [fa0]
// [Asm] live_set: [fv5, v4, fv3, fa0]
// [Asm] move_origin: [fv2]
// [Asm] defined: fa0 is F
// [Asm] defs: [fa1]
// [Asm] live_set: [fv5, v4, fa1, fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa1 is F
// [Asm] defs: [a0]
// [Asm] live_set: [fv5, fa1, a0, fa0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [fa2]
// [Asm] live_set: [fa2, fa1, a0, fa0]
// [Asm] move_origin: [fv5]
// [Asm] defined: fa2 is F
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r8 [label="a7", color=blue];
// [Asm]   r0 [label="v4 ← a0", color=green];
// [Asm]   r5 [label="a4", color=blue];
// [Asm]   r3 [label="a2", color=blue];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r9 [label="t0", color=blue];
// [Asm]   r6 [label="a5", color=blue];
// [Asm]   r13 [label="t4", color=blue];
// [Asm]   r4 [label="a3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="t2", color=blue];
// [Asm]   r7 [label="a6", color=blue];
// [Asm]   r10 [label="t1", color=blue];
// [Asm]   r14 [label="v6 ← a0", color=green];
// [Asm]   r12 [label="t3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:v4-> 1:a0-> 2:a1-> 3:a2-> 4:a3-> 5:a4-> 6:a5-> 7:a6-> 8:a7-> 9:t0-> 10:t1-> 11:t2-> 12:t3-> 13:t4-> 14:v6"
// [Asm]   comment = "v4<-a0;v6<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="fv2 ← fa0", color=green];
// [Asm]   r20 [label="fa6", color=blue];
// [Asm]   r3 [label="fa0", color=blue];
// [Asm]   r9 [label="ft3", color=blue];
// [Asm]   r6 [label="ft0", color=blue];
// [Asm]   r13 [label="ft7", color=blue];
// [Asm]   r4 [label="fa1", color=blue];
// [Asm]   r1 [label="fv3 ← fa1", color=green];
// [Asm]   r11 [label="ft5", color=blue];
// [Asm]   r7 [label="ft1", color=blue];
// [Asm]   r10 [label="ft4", color=blue];
// [Asm]   r14 [label="ft8", color=blue];
// [Asm]   r8 [label="ft2", color=blue];
// [Asm]   r5 [label="fa2", color=blue];
// [Asm]   r15 [label="ft9", color=blue];
// [Asm]   r2 [label="fv5 ← fa2", color=green];
// [Asm]   r16 [label="ft10", color=blue];
// [Asm]   r18 [label="fa4", color=blue];
// [Asm]   r19 [label="fa5", color=blue];
// [Asm]   r21 [label="fa7", color=blue];
// [Asm]   r17 [label="fa3", color=blue];
// [Asm]   r12 [label="ft6", color=blue];
// [Asm]   r0 -- r2;
// [Asm]   r2 -- r4;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r1 -- r2;
// [Asm]   comment = "0:fv2-> 1:fv3-> 2:fv5-> 3:fa0-> 4:fa1-> 5:fa2-> 6:ft0-> 7:ft1-> 8:ft2-> 9:ft3-> 10:ft4-> 11:ft5-> 12:ft6-> 13:ft7-> 14:ft8-> 15:ft9-> 16:ft10-> 17:fa3-> 18:fa4-> 19:fa5-> 20:fa6-> 21:fa7"
// [Asm]   comment = "fv2<-fa0;fv3<-fa1;fv5<-fa2;"
// [Asm] }
// [Asm] 
// [Asm] subst   fld fv2, c_im.6, t5 ->   fld fa0, c_im.6, t5
// [Asm] subst   fld fv3, c_re.5, t5 ->   fld fa1, c_re.5, t5
// [Asm] subst   lw v4, iter.3 ->   lw a0, iter.3
// [Asm] subst   fld fv5, limit_sq.2, t5 ->   fld fa2, limit_sq.2, t5
// [Asm] subst   call main.197 ->   call main.197
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$limit.1"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   comment = "0:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$limit.1"];
// [Asm]   r0 [label="fv3 ← fa0", color=green];
// [Asm]   r1 [label="fa0", color=blue];
// [Asm]   comment = "0:fv3-> 1:fa0"
// [Asm]   comment = "fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 4611686018427387904 ->   li a0, 4611686018427387904
// [Asm] subst   fmv.d.x fv3, v2 ->   fmv.d.x fa0, a0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: BlockParam(bref=b2, bpref=$b.0) -> v16, Insn(iref=%15) -> v25, BlockParam(bref=b2, bpref=$b.4) -> v20, Insn(iref=%9) -> v21, Insn(iref=%16) -> v26, Insn(iref=%8) -> v15, BlockParam(bref=b2, bpref=$b.1) -> v17, FnParam(fref=f13, fpref=$f.0) -> fv2, Insn(iref=%10) -> v22, FnParam(fref=f13, fpref=$f.3) -> fv5, Insn(iref=%14) -> v24, BlockParam(bref=b2, bpref=$b.2) -> v18, BlockParam(bref=b8, bpref=$b.0) -> v31, Insn(iref=%5) -> fv12, Insn(iref=%0) -> v7, Insn(iref=%4) -> fv11, Insn(iref=%3) -> v10, Insn(iref=%18) -> v28, Insn(iref=%13) -> v23, Insn(iref=%7) -> fv14, Insn(iref=%17) -> v27, Insn(iref=%2) -> v9, Insn(iref=%1) -> v8, Mem(fref=f13, mref=m0) -> v6, Insn(iref=%11) -> v29, BlockParam(bref=b2, bpref=$b.3) -> v19, Self(fref=f13) -> v0, FnParam(fref=f13, fpref=$f.2) -> v4, FnParam(fref=f13, fpref=$f.1) -> fv3, Insn(iref=%6) -> v13, Insn(iref=%12) -> v30
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b2, bpref=$b.2), BlockParam(bref=b2, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.1)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v31]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [fa2, zero, a0, fa0, s11, fa1]
// [Asm] move_origin: []
// [Asm] defs: [fv2]
// [Asm] live_set: [fa2, zero, a0, s11, fa1]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fa2, zero, a0, s11]
// [Asm] move_origin: [fa1]
// [Asm] defined: fv3 is F
// [Asm] defs: [v4]
// [Asm] live_set: [fa2, zero, s11]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: [fv5]
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: [fa2]
// [Asm] defined: fv5 is F
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, s11]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [zero, v7, s11]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v7, s11]
// [Asm] move_origin: []
// [Asm] defs: [v51]
// [Asm] live_set: [zero, v7, s11, v51]
// [Asm] move_origin: []
// [Asm] defined: v51 is X
// [Asm] defs: [v8]
// [Asm] live_set: [zero, v7, v8, s11]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [zero, v7, v8, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v48]
// [Asm] live_set: [v48, zero, v7, v8, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: v48 is X
// [Asm] defs: [v6]
// [Asm] live_set: [zero, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, v7, v8, v6]
// [Asm] move_origin: [v9]
// [Asm] defined: a1 is X
// [Asm] defs: [fv11]
// [Asm] live_set: [zero, fv11, v7, v8, v6]
// [Asm] move_origin: []
// [Asm] defined: fv11 is F
// [Asm] defs: [fv12]
// [Asm] live_set: [zero, fv11, v7, v8, fv12, v6]
// [Asm] move_origin: []
// [Asm] defined: fv12 is F
// [Asm] defs: [v13]
// [Asm] live_set: [zero, v13, fv11, v7, v8, fv12, v6]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [fv14]
// [Asm] live_set: [zero, v13, fv11, v7, v8, fv12, v6, fv14]
// [Asm] move_origin: []
// [Asm] defined: fv14 is F
// [Asm] defs: []
// [Asm] live_set: [zero, v13, fv11, v7, v8, fv12, v6, fv14]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, zero, v13, fv11, v7, v8, fv12, v6, fv14]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a0, zero, v13, fv11, v7, v8, fv12, v6, a1, fv14]
// [Asm] move_origin: [v7]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a0, zero, v13, fv11, v7, v8, fv12, a2, v6, a1, fv14]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [a3, a0, zero, v13, fv11, v7, v8, fv12, a2, v6, a1, fv14]
// [Asm] move_origin: [zero]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [fv14, a3, a0, zero, v13, fv11, a4, v7, v8, fv12, a2, v6, a1]
// [Asm] move_origin: [v6]
// [Asm] defined: a4 is X
// [Asm] defs: [fa0]
// [Asm] live_set: [a3, fv14, a0, zero, v13, a4, v8, fa0, v7, a2, fv12, a1, v6]
// [Asm] move_origin: [fv11]
// [Asm] defined: fa0 is F
// [Asm] defs: [fa1]
// [Asm] live_set: [a3, fa1, a0, zero, v13, a4, v8, fa0, v7, a2, v6, a1, fv14]
// [Asm] move_origin: [fv12]
// [Asm] defined: fa1 is F
// [Asm] defs: [a5]
// [Asm] live_set: [fa1, a5, a0, zero, a4, v7, v8, fa0, a2, a1, v6, a3, fv14]
// [Asm] move_origin: [v13]
// [Asm] defined: a5 is X
// [Asm] defs: [fa2]
// [Asm] live_set: [fa1, fa2, a5, a0, zero, a4, v7, v8, fa0, a2, a1, v6, a3]
// [Asm] move_origin: [fv14]
// [Asm] defined: fa2 is F
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v8, v6, zero, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v15]
// [Asm] live_set: [v8, v6, zero, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v16, v6, zero, v7]
// [Asm] move_origin: [v8]
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v16, v17, v6, zero]
// [Asm] move_origin: [v7]
// [Asm] defined: v17 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v16, v17, v6, v18, zero]
// [Asm] move_origin: [zero]
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v19, v16, v17, v6, v18, zero]
// [Asm] move_origin: [zero]
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v19, v16, v17, v18, zero, v20]
// [Asm] move_origin: [v6]
// [Asm] defined: v20 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v31]
// [Asm] move_origin: [zero]
// [Asm] defined: v31 is X
// [Asm] defs: []
// [Asm] live_set: [v19, v16, v17, v18, zero, v20]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v16, zero, v20, v19, v17]
// [Asm] move_origin: []
// [Asm] defs: [v33]
// [Asm] live_set: [v16, zero, v20, v19, v17, v33]
// [Asm] move_origin: []
// [Asm] defined: v33 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v16, zero, a0, v20, v19, v17]
// [Asm] move_origin: [v33]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v16, zero, a0, v20, v19, v17]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v29]
// [Asm] live_set: [v16, zero, v20, v19, v17]
// [Asm] move_origin: [a0]
// [Asm] defined: v29 is X
// [Asm] defs: []
// [Asm] live_set: [v16, zero, v20, v19, v17]
// [Asm] move_origin: []
// [Asm] defs: [v30]
// [Asm] live_set: [v16, zero, v20, v30, v17]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: []
// [Asm] live_set: [v16, zero, v20, v30, v17]
// [Asm] move_origin: [v16]
// [Asm] defs: []
// [Asm] live_set: [v16, zero, v20, v30, v17]
// [Asm] move_origin: [v17]
// [Asm] defs: [v18]
// [Asm] live_set: [v16, v18, zero, v20, v30, v17]
// [Asm] move_origin: [zero]
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v16, v18, zero, v20, v19, v17]
// [Asm] move_origin: [v30]
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v19, v16, v17, v18, zero, v20]
// [Asm] move_origin: [v20]
// [Asm] defs: []
// [Asm] live_set: [v19, v16, v17, v18, zero, v20]
// [Asm] move_origin: []
// [Asm] defs: [v23]
// [Asm] live_set: [v16, v18, zero, v20, v23, v19, v17]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v16, v18, zero, v20, v19, v17, v24]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v38]
// [Asm] live_set: [v16, v18, zero, v20, v19, v38, v17]
// [Asm] move_origin: []
// [Asm] defined: v38 is X
// [Asm] defs: [v39]
// [Asm] live_set: [v16, v18, zero, v20, v19, v17, v39]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v16, v18, zero, v20, v19, v17]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v16, v18, zero, v26, v20, v19, v17]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v18, zero, v26, v20, v19, v17]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v16, v18, zero, a0, v20, v19, v17]
// [Asm] move_origin: [v26]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v16, v18, zero, a0, v20, v19, v17]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v27]
// [Asm] live_set: [v16, v18, zero, v20, v19, v17]
// [Asm] move_origin: [a0]
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v18, zero, v20, v19, v17]
// [Asm] move_origin: []
// [Asm] defs: [v28]
// [Asm] live_set: [v16, zero, v20, v19, v17, v28]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: []
// [Asm] live_set: [v16, zero, v20, v19, v17, v28]
// [Asm] move_origin: [v16]
// [Asm] defs: []
// [Asm] live_set: [v16, zero, v20, v19, v17, v28]
// [Asm] move_origin: [v17]
// [Asm] defs: [v18]
// [Asm] live_set: [v16, v18, zero, v20, v19, v17]
// [Asm] move_origin: [v28]
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v18, zero, v20, v19, v17]
// [Asm] move_origin: [v19]
// [Asm] defs: []
// [Asm] live_set: [v19, v16, v17, v18, zero, v20]
// [Asm] move_origin: [v20]
// [Asm] defs: []
// [Asm] live_set: [v19, v16, v17, v18, zero, v20]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v19, v16, v17, v18, zero, v20]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.197"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r38 [label="v26 ← a0", color=green];
// [Asm]   r33 [label="v23 ← a0", color=green];
// [Asm]   r9 [label="a6", color=blue];
// [Asm]   r26 [label="v18 ← s3", color=green];
// [Asm]   r6 [label="a3", color=blue];
// [Asm]   r13 [label="t2", color=blue];
// [Asm]   r4 [label="a1", color=blue];
// [Asm]   r29 [label="v31 ← a0", color=green];
// [Asm]   r35 [label="v38 ← a0", color=green];
// [Asm]   r7 [label="a4", color=blue];
// [Asm]   r10 [label="a7", color=blue];
// [Asm]   r8 [label="a5", color=blue];
// [Asm]   r5 [label="a2", color=blue];
// [Asm]   r36 [label="v39 ← a0", color=green];
// [Asm]   r32 [label="v30 ← a0", color=green];
// [Asm]   r24 [label="v16 ← s1", color=green];
// [Asm]   r15 [label="t4", color=blue];
// [Asm]   r31 [label="v29 ← a0", color=green];
// [Asm]   r39 [label="v27 ← a0", color=green];
// [Asm]   r17 [label="v51 ← a0", color=green];
// [Asm]   r12 [label="t1", color=blue];
// [Asm]   r37 [label="v25 ← a0", color=green];
// [Asm]   r20 [label="v48 ← a1", color=green];
// [Asm]   r23 [label="v15 ← a0", color=green];
// [Asm]   r3 [label="v4 ← a0", color=green];
// [Asm]   r27 [label="v19 ← s4", color=green];
// [Asm]   r40 [label="v28 ← a0", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r28 [label="v20 ← s2", color=green];
// [Asm]   r11 [label="t0", color=blue];
// [Asm]   r34 [label="v24 ← a0", color=green];
// [Asm]   r22 [label="v13 ← a5", color=green];
// [Asm]   r14 [label="t3", color=blue];
// [Asm]   r30 [label="v33 ← a0", color=green];
// [Asm]   r25 [label="v17 ← s0", color=green];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r16 [label="v7 ← s0", color=green];
// [Asm]   r18 [label="v8 ← s1", color=green];
// [Asm]   r19 [label="v9 ← a0", color=green];
// [Asm]   r21 [label="v6 ← s2", color=green];
// [Asm]   r12 -- r18;
// [Asm]   r12 -- r26;
// [Asm]   r19 -- r20;
// [Asm]   r21 -- r24;
// [Asm]   r12 -- r25;
// [Asm]   r5 -- r21;
// [Asm]   r16 -- r20;
// [Asm]   r26 -- r39;
// [Asm]   r1 -- r26;
// [Asm]   r28 -- r32;
// [Asm]   r1 -- r30;
// [Asm]   r24 -- r40;
// [Asm]   r27 -- r36;
// [Asm]   r5 -- r22;
// [Asm]   r7 -- r25;
// [Asm]   r5 -- r18;
// [Asm]   r28 -- r30;
// [Asm]   r0 -- r28;
// [Asm]   r9 -- r26;
// [Asm]   r18 -- r21;
// [Asm]   r27 -- r28;
// [Asm]   r11 -- r18;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r27 -- r34;
// [Asm]   r0 -- r16;
// [Asm]   r7 -- r27;
// [Asm]   r15 -- r25;
// [Asm]   r0 -- r6;
// [Asm]   r8 -- r24;
// [Asm]   r28 -- r39;
// [Asm]   r1 -- r9;
// [Asm]   r26 -- r28;
// [Asm]   r26 -- r27;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r0 -- r26;
// [Asm]   r8 -- r16;
// [Asm]   r10 -- r18;
// [Asm]   r0 -- r9;
// [Asm]   r25 -- r32;
// [Asm]   r1 -- r40;
// [Asm]   r2 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r28 -- r33;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r10;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r25;
// [Asm]   r18 -- r20;
// [Asm]   r1 -- r38;
// [Asm]   r16 -- r21;
// [Asm]   r27 -- r35;
// [Asm]   r12 -- r21;
// [Asm]   r1 -- r5;
// [Asm]   r25 -- r37;
// [Asm]   r1 -- r35;
// [Asm]   r0 -- r4;
// [Asm]   r28 -- r38;
// [Asm]   r24 -- r25;
// [Asm]   r16 -- r24;
// [Asm]   r27 -- r31;
// [Asm]   r0 -- r18;
// [Asm]   r6 -- r25;
// [Asm]   r26 -- r34;
// [Asm]   r26 -- r38;
// [Asm]   r0 -- r15;
// [Asm]   r27 -- r40;
// [Asm]   r28 -- r31;
// [Asm]   r1 -- r8;
// [Asm]   r14 -- r26;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r34;
// [Asm]   r7 -- r24;
// [Asm]   r8 -- r27;
// [Asm]   r11 -- r16;
// [Asm]   r1 -- r22;
// [Asm]   r0 -- r14;
// [Asm]   r13 -- r16;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r18;
// [Asm]   r6 -- r22;
// [Asm]   r2 -- r11;
// [Asm]   r28 -- r36;
// [Asm]   r8 -- r25;
// [Asm]   r24 -- r28;
// [Asm]   r24 -- r26;
// [Asm]   r16 -- r18;
// [Asm]   r10 -- r16;
// [Asm]   r21 -- r23;
// [Asm]   r6 -- r27;
// [Asm]   r7 -- r22;
// [Asm]   r27 -- r38;
// [Asm]   r5 -- r28;
// [Asm]   r2 -- r14;
// [Asm]   r25 -- r35;
// [Asm]   r14 -- r25;
// [Asm]   r14 -- r21;
// [Asm]   r24 -- r34;
// [Asm]   r9 -- r24;
// [Asm]   r25 -- r34;
// [Asm]   r8 -- r18;
// [Asm]   r0 -- r5;
// [Asm]   r25 -- r31;
// [Asm]   r1 -- r25;
// [Asm]   r2 -- r17;
// [Asm]   r15 -- r24;
// [Asm]   r4 -- r7;
// [Asm]   r5 -- r25;
// [Asm]   r27 -- r33;
// [Asm]   r8 -- r26;
// [Asm]   r12 -- r16;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r11 -- r28;
// [Asm]   r26 -- r32;
// [Asm]   r1 -- r24;
// [Asm]   r9 -- r21;
// [Asm]   r18 -- r23;
// [Asm]   r28 -- r34;
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r21;
// [Asm]   r24 -- r39;
// [Asm]   r26 -- r33;
// [Asm]   r25 -- r28;
// [Asm]   r0 -- r13;
// [Asm]   r9 -- r25;
// [Asm]   r1 -- r12;
// [Asm]   r7 -- r21;
// [Asm]   r1 -- r37;
// [Asm]   r2 -- r15;
// [Asm]   r14 -- r16;
// [Asm]   r14 -- r27;
// [Asm]   r5 -- r8;
// [Asm]   r9 -- r27;
// [Asm]   r10 -- r26;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r0 -- r25;
// [Asm]   r2 -- r10;
// [Asm]   r24 -- r32;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r0 -- r22;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r27;
// [Asm]   r13 -- r28;
// [Asm]   r11 -- r24;
// [Asm]   r19 -- r21;
// [Asm]   r4 -- r22;
// [Asm]   r27 -- r39;
// [Asm]   r16 -- r17;
// [Asm]   r27 -- r30;
// [Asm]   r9 -- r18;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r31;
// [Asm]   r12 -- r24;
// [Asm]   r14 -- r28;
// [Asm]   r25 -- r39;
// [Asm]   r15 -- r18;
// [Asm]   r24 -- r31;
// [Asm]   r25 -- r38;
// [Asm]   r12 -- r28;
// [Asm]   r0 -- r2;
// [Asm]   r9 -- r28;
// [Asm]   r1 -- r21;
// [Asm]   r21 -- r27;
// [Asm]   r24 -- r36;
// [Asm]   r6 -- r18;
// [Asm]   r4 -- r28;
// [Asm]   r2 -- r8;
// [Asm]   r24 -- r27;
// [Asm]   r1 -- r27;
// [Asm]   r13 -- r18;
// [Asm]   r5 -- r7;
// [Asm]   r8 -- r21;
// [Asm]   r4 -- r8;
// [Asm]   r0 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r10 -- r25;
// [Asm]   r21 -- r22;
// [Asm]   r13 -- r21;
// [Asm]   r7 -- r8;
// [Asm]   r15 -- r28;
// [Asm]   r24 -- r37;
// [Asm]   r16 -- r23;
// [Asm]   r16 -- r22;
// [Asm]   r27 -- r37;
// [Asm]   r11 -- r25;
// [Asm]   r6 -- r7;
// [Asm]   r25 -- r33;
// [Asm]   r13 -- r24;
// [Asm]   r28 -- r40;
// [Asm]   r4 -- r16;
// [Asm]   r25 -- r36;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r14 -- r18;
// [Asm]   r15 -- r26;
// [Asm]   r2 -- r18;
// [Asm]   r0 -- r24;
// [Asm]   r28 -- r37;
// [Asm]   r1 -- r23;
// [Asm]   r25 -- r27;
// [Asm]   r26 -- r36;
// [Asm]   r13 -- r26;
// [Asm]   r7 -- r26;
// [Asm]   r16 -- r19;
// [Asm]   r1 -- r32;
// [Asm]   r0 -- r21;
// [Asm]   r1 -- r15;
// [Asm]   r25 -- r30;
// [Asm]   r6 -- r16;
// [Asm]   r25 -- r26;
// [Asm]   r10 -- r27;
// [Asm]   r18 -- r22;
// [Asm]   r14 -- r24;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r26;
// [Asm]   r15 -- r27;
// [Asm]   r13 -- r25;
// [Asm]   r6 -- r24;
// [Asm]   r24 -- r38;
// [Asm]   r1 -- r28;
// [Asm]   r24 -- r30;
// [Asm]   r7 -- r28;
// [Asm]   r1 -- r39;
// [Asm]   r6 -- r8;
// [Asm]   r8 -- r28;
// [Asm]   r26 -- r35;
// [Asm]   r10 -- r28;
// [Asm]   r18 -- r19;
// [Asm]   r15 -- r21;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r0 -- r8;
// [Asm]   r6 -- r28;
// [Asm]   r21 -- r25;
// [Asm]   r24 -- r35;
// [Asm]   r28 -- r35;
// [Asm]   r2 -- r21;
// [Asm]   r21 -- r26;
// [Asm]   r11 -- r26;
// [Asm]   r9 -- r16;
// [Asm]   r0 -- r12;
// [Asm]   r26 -- r37;
// [Asm]   r5 -- r27;
// [Asm]   r12 -- r27;
// [Asm]   r11 -- r27;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r36;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r4 -- r26;
// [Asm]   r0 -- r7;
// [Asm]   r15 -- r16;
// [Asm]   r0 -- r27;
// [Asm]   r2 -- r3;
// [Asm]   r10 -- r24;
// [Asm]   r10 -- r21;
// [Asm]   r25 -- r40;
// [Asm]   r24 -- r33;
// [Asm]   r13 -- r27;
// [Asm]   r11 -- r21;
// [Asm]   comment = "0:a0-> 1:zero-> 2:s11-> 4:a1-> 5:a2-> 6:a3-> 7:a4-> 8:a5-> 16:v7-> 18:v8-> 21:v6-> 22:v13-> 24:v16-> 25:v17-> 26:v18-> 27:v19-> 28:v20-> 9:a6-> 10:a7-> 11:t0-> 12:t1-> 13:t2-> 14:t3-> 15:t4-> 33:v23-> 34:v24-> 35:v38-> 36:v39-> 37:v25-> 38:v26-> 39:v27-> 19:v9-> 20:v48-> 30:v33-> 31:v29-> 32:v30-> 40:v28-> 23:v15-> 17:v51-> 3:v4-> 29:v31"
// [Asm]   comment = "v26<-a0;v23<-a0;v18<-s3;v31<-a0;v38<-a0;v39<-a0;v30<-a0;v16<-s1;v29<-a0;v27<-a0;v51<-a0;v25<-a0;v48<-a1;v15<-a0;v4<-a0;v19<-s4;v28<-a0;v20<-s2;v24<-a0;v13<-a5;v33<-a0;v17<-s0;v7<-s0;v8<-s1;v9<-a0;v6<-s2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.197"];
// [Asm]   r0 [label="fv2 ← fa0", color=green];
// [Asm]   r20 [label="fa6", color=blue];
// [Asm]   r23 [label="fv12 ← fa1", color=green];
// [Asm]   r3 [label="fv3 ← fa0", color=green];
// [Asm]   r9 [label="ft4", color=blue];
// [Asm]   r6 [label="ft1", color=blue];
// [Asm]   r13 [label="ft8", color=blue];
// [Asm]   r4 [label="fv5 ← fa0", color=green];
// [Asm]   r1 [label="fa2", color=blue];
// [Asm]   r11 [label="ft6", color=blue];
// [Asm]   r7 [label="ft2", color=blue];
// [Asm]   r10 [label="ft5", color=blue];
// [Asm]   r22 [label="fv11 ← fa0", color=green];
// [Asm]   r14 [label="ft9", color=blue];
// [Asm]   r8 [label="ft3", color=blue];
// [Asm]   r5 [label="ft0", color=blue];
// [Asm]   r15 [label="ft10", color=blue];
// [Asm]   r24 [label="fv14 ← fa2", color=green];
// [Asm]   r2 [label="fa1", color=blue];
// [Asm]   r16 [label="fa0", color=blue];
// [Asm]   r18 [label="fa4", color=blue];
// [Asm]   r19 [label="fa5", color=blue];
// [Asm]   r21 [label="fa7", color=blue];
// [Asm]   r17 [label="fa3", color=blue];
// [Asm]   r12 [label="ft7", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r24;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r16 -- r24;
// [Asm]   r23 -- r24;
// [Asm]   r16 -- r23;
// [Asm]   r22 -- r24;
// [Asm]   r22 -- r23;
// [Asm]   r2 -- r16;
// [Asm]   r1 -- r16;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:fv2-> 1:fa2-> 2:fa1-> 16:fa0-> 24:fv14-> 23:fv12-> 22:fv11-> 3:fv3-> 4:fv5-> 5:ft0-> 6:ft1-> 7:ft2-> 8:ft3-> 9:ft4-> 10:ft5-> 11:ft6-> 12:ft7-> 13:ft8-> 14:ft9-> 15:ft10-> 17:fa3-> 18:fa4-> 19:fa5-> 20:fa6-> 21:fa7"
// [Asm]   comment = "fv2<-fa0;fv12<-fa1;fv3<-fa0;fv5<-fa0;fv11<-fa0;fv14<-fa2;"
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   fmv.d fv3, fa1 ->   fmv.d fa0, fa1
// [Asm] subst   fmv.d fv5, fa2 ->   fmv.d fa0, fa2
// [Asm] subst   call minimbt_read_int ->   call minimbt_read_int
// [Asm] subst   mv v7, a0 ->   mv s0, a0
// [Asm] subst   li v51, 2 ->   li a0, 2
// [Asm] subst   mul v8, v7, v51 ->   mul s1, s0, a0
// [Asm] subst   mul v9, v8, v7 ->   mul a0, s1, s0
// [Asm] subst   slliw v48, v9, 2 ->   slliw a1, a0, 2
// [Asm] subst   sub v6, s11, v48 ->   sub s2, s11, a1
// [Asm] subst   andi s11, v6, -8 ->   andi s11, s2, -8
// [Asm] subst   mv a1, v9 ->   mv a1, a0
// [Asm] subst   fld fv11, c_im.6, t5 ->   fld fa0, c_im.6, t5
// [Asm] subst   fld fv12, c_re.5, t5 ->   fld fa1, c_re.5, t5
// [Asm] subst   lw v13, iter.3 ->   lw a5, iter.3
// [Asm] subst   fld fv14, limit_sq.2, t5 ->   fld fa2, limit_sq.2, t5
// [Asm] subst   mv a0, v8 ->   mv a0, s1
// [Asm] subst   mv a1, v7 ->   mv a1, s0
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   mv a3, zero ->   mv a3, zero
// [Asm] subst   mv a4, v6 ->   mv a4, s2
// [Asm] subst   call main_loop.196 ->   call main_loop.196
// [Asm] subst   mv v18, zero ->   mv s3, zero
// [Asm] subst   mv v19, zero ->   mv s4, zero
// [Asm] subst   mv v31, zero ->   mv a0, zero
// [Asm] subst   beq v19, v17, .main.197_3 ->   beq s4, s0, .main.197_3
// [Asm] subst   li v33, 10 ->   li a0, 10
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   addi v30, v19, 1 ->   addi a0, s4, 1
// [Asm] subst   mv v18, zero ->   mv s3, zero
// [Asm] subst   mv v19, v30 ->   mv s4, a0
// [Asm] subst   j .main.197_2 ->   j .main.197_2
// [Asm] subst   mul v23, v19, v16 ->   mul a0, s4, s1
// [Asm] subst   add v24, v23, v18 ->   add a0, a0, s3
// [Asm] subst   slliw v38, v24, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v39, v20, v38 ->   add a0, s2, a0
// [Asm] subst   lw v25, 0(v39) ->   lw a0, 0(a0)
// [Asm] subst   addi v26, v25, 48 ->   addi a0, a0, 48
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   addi v28, v18, 1 ->   addi a0, s3, 1
// [Asm] subst   mv v18, v28 ->   mv s3, a0
// [Asm] subst   j .main.197_2 ->   j .main.197_2
// [Asm] subst   beq v18, v16, .main.197_5 ->   beq s3, s1, .main.197_5
// [Asm] pre_assigned_registers: Self(fref=f10) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$c_im.6"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   comment = "0:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$c_im.6"];
// [Asm]   r0 [label="fv3 ← fa0", color=green];
// [Asm]   r1 [label="fa0", color=blue];
// [Asm]   comment = "0:fv3-> 1:fa0"
// [Asm]   comment = "fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 4604885582990058455 ->   li a0, 4604885582990058455
// [Asm] subst   fmv.d.x fv3, v2 ->   fmv.d.x fa0, a0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%0) -> fv2, Insn(iref=%2) -> fv3
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [fv2]
// [Asm] live_set: [fv2]
// [Asm] move_origin: []
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$limit_sq.2"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$limit_sq.2"];
// [Asm]   r0 [label="fv2 ← fa0", color=green];
// [Asm]   r2 [label="fa0", color=blue];
// [Asm]   r1 [label="fv3 ← fa0", color=green];
// [Asm]   comment = "0:fv2-> 1:fv3-> 2:fa0"
// [Asm]   comment = "fv2<-fa0;fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   fld fv2, limit.1, t5 ->   fld fa0, limit.1, t5
// [Asm] subst   fmul.d fv3, fv2, fv2 ->   fmul.d fa0, fa0, fa0
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf true
// [Asm] T$iter.3:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$iter.3_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 300  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$c_re.5:
// [Asm] # block info: defs: [fv2, fv3, fa0], uses: [fv2, fv3, fa0], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$c_re.5_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   fld fv2, _4, t5  # live: [fv2]
// [Asm]   fneg.d fv3, fv2  # live: [fv3]
// [Asm] # control
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$limit.1:
// [Asm] # block info: defs: [fa0, fv3, v2], uses: [fa0, fv3, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$limit.1_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 4611686018427387904  # live: [v2]
// [Asm]   fmv.d.x fv3, v2  # live: [fv3]
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$_4:
// [Asm] # block info: defs: [fa0, fv3, v2], uses: [fa0, fv3, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_4_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 4593527504729830064  # live: [v2]
// [Asm]   fmv.d.x fv3, v2  # live: [fv3]
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$c_im.6:
// [Asm] # block info: defs: [fa0, fv3, v2], uses: [fa0, fv3, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$c_im.6_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 4604885582990058455  # live: [v2]
// [Asm]   fmv.d.x fv3, v2  # live: [fv3]
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main.197:
// [Asm] # block info: defs: [fv12, a1, s11, fa1, v51, fv2, fa2, ft6, a4, fa6, v20, a6, ft5, ft10, v6, fv3, ft4, ft9, fa4, ft2, v17, a3, a7, fa7, v48, fa3, fv11, ft3, t2, t1, v16, v13, v7, ft0, ft1, fv14, fv5, v8, v19, v4, ft7, a5, a0, a2, v9, ft8, t3, t0, fa5, v18, fa0, t4, v15], uses: [a5, a0, v13, v7, fv12, a2, a1, fv14, s11, a3, fa1, v9, v51, v48, fa2, zero, fv11, a4, v8, fa0, v6], upward_exposed: [fa2, a0, zero, fa0, s11, fa1], params_defs: []
// [Asm] # live_in: [fa2, a0, zero, fa0, s11, fa1], live_out: [v16, v18, zero, v20, v19, v17]
// [Asm] # block parameters: []
// [Asm] .main.197_0:
// [Asm]   # save_ctx1  # live: [fa2, zero, a0, fa0, s11, fa1]
// [Asm]   fmv.d fv2, fa0  # live: [fa2, zero, a0, s11, fa1]
// [Asm]   fmv.d fv3, fa1  # live: [fa2, zero, a0, s11]
// [Asm]   mv v4, a0  # live: [fa2, zero, s11]
// [Asm]   fmv.d fv5, fa2  # live: [zero, s11]
// [Asm]   # save_ctx2  # live: [zero, s11]
// [Asm]   call minimbt_read_int  # live: [zero, a0, s11]
// [Asm]   mv v7, a0  # live: [zero, v7, s11]
// [Asm]   # restore_ctx2  # live: [zero, v7, s11]
// [Asm]   li v51, 2  # live: [zero, v7, s11, v51]
// [Asm]   mul v8, v7, v51  # live: [zero, v7, v8, s11]
// [Asm]   mul v9, v8, v7  # live: [zero, v7, v8, s11, v9]
// [Asm]   slliw v48, v9, 2  # live: [v48, zero, v7, v8, s11, v9]
// [Asm]   sub v6, s11, v48  # live: [zero, v7, v8, v6, v9]
// [Asm]   andi s11, v6, -8  # live: [zero, v7, v8, v6, v9]
// [Asm]   mv a1, v9  # live: [zero, v7, v8, v6]
// [Asm]   fld fv11, c_im.6, t5  # live: [zero, fv11, v7, v8, v6]
// [Asm]   fld fv12, c_re.5, t5  # live: [zero, fv11, v7, v8, fv12, v6]
// [Asm]   lw v13, iter.3  # live: [zero, v13, fv11, v7, v8, fv12, v6]
// [Asm]   fld fv14, limit_sq.2, t5  # live: [zero, v13, fv11, v7, v8, fv12, v6, fv14]
// [Asm]   # save_ctx2  # live: [zero, v13, fv11, v7, v8, fv12, v6, fv14]
// [Asm]   mv a0, v8  # live: [a0, zero, v13, fv11, v7, v8, fv12, v6, fv14]
// [Asm]   mv a1, v7  # live: [a0, zero, v13, fv11, v7, v8, fv12, v6, a1, fv14]
// [Asm]   mv a2, zero  # live: [a0, zero, v13, fv11, v7, v8, fv12, a2, v6, a1, fv14]
// [Asm]   mv a3, zero  # live: [a3, a0, zero, v13, fv11, v7, v8, fv12, a2, v6, a1, fv14]
// [Asm]   mv a4, v6  # live: [fv14, a3, a0, zero, v13, fv11, a4, v7, v8, fv12, a2, v6, a1]
// [Asm]   fmv.d fa0, fv11  # live: [a3, fv14, a0, zero, v13, a4, v8, fa0, v7, a2, fv12, a1, v6]
// [Asm]   fmv.d fa1, fv12  # live: [a3, fa1, a0, zero, v13, a4, v8, fa0, v7, a2, v6, a1, fv14]
// [Asm]   mv a5, v13  # live: [fa1, a5, a0, zero, a4, v7, v8, fa0, a2, a1, v6, a3, fv14]
// [Asm]   fmv.d fa2, fv14  # live: [fa1, fa2, a5, a0, zero, a4, v7, v8, fa0, a2, a1, v6, a3]
// [Asm]   call main_loop.196  # live: [v8, v6, zero, a0, v7]
// [Asm]   mv v15, a0  # live: [v8, v6, zero, v7]
// [Asm]   # restore_ctx2  # live: [v8, v6, zero, v7]
// [Asm] # control
// [Asm]   mv v16, v8  # live: [v16, v6, zero, v7]
// [Asm]   mv v17, v7  # live: [v16, v17, v6, zero]
// [Asm]   mv v18, zero  # live: [v16, v17, v6, v18, zero]
// [Asm]   mv v19, zero  # live: [v19, v16, v17, v6, v18, zero]
// [Asm]   mv v20, v6  # live: [v19, v16, v17, v18, zero, v20]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v19, v17], upward_exposed: [v19, v17], params_defs: [v19, v16, v17, v18, v20]
// [Asm] # live_in: [v16, v18, zero, v20, v19, v17], live_out: [v16, v18, zero, v20, v19, v17]
// [Asm] # block parameters: [v16, v17, v18, v19, v20]
// [Asm] .main.197_2:
// [Asm] # control
// [Asm]   beq v19, v17, .main.197_3  # live: [v19, v16, v17, v18, zero, v20]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v16, v18], upward_exposed: [v16, v18], params_defs: []
// [Asm] # live_in: [v16, v18, zero, v20, v19, v17], live_out: [v16, v18, zero, v20, v19, v17]
// [Asm] # block parameters: []
// [Asm] .main.197_4:
// [Asm] # control
// [Asm]   beq v18, v16, .main.197_5  # live: [v19, v16, v17, v18, zero, v20]
// [Asm] 
// [Asm] # block info: defs: [v25, t1, v26, ft0, ft1, a1, v28, fa1, fa2, ft6, a4, fa6, v27, a6, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v24, v39, ft8, a7, t3, fa7, t0, fa5, v18, fa3, ft3, v23, fa0, v38, t4, t2], uses: [v25, v16, v26, a0, v17, v24, v28, v39, v18, v20, v23, v19, v38], upward_exposed: [v19, v16, v17, v18, v20], params_defs: []
// [Asm] # live_in: [v16, v18, zero, v20, v19, v17], live_out: [v16, v18, zero, v20, v19, v17]
// [Asm] # block parameters: []
// [Asm] .main.197_6:
// [Asm]   mul v23, v19, v16  # live: [v16, v18, zero, v20, v23, v19, v17]
// [Asm]   add v24, v23, v18  # live: [v16, v18, zero, v20, v19, v17, v24]
// [Asm]   slliw v38, v24, 2  # live: [v16, v18, zero, v20, v19, v38, v17]
// [Asm]   add v39, v20, v38  # live: [v16, v18, zero, v20, v19, v17, v39]
// [Asm]   lw v25, 0(v39)  # live: [v25, v16, v18, zero, v20, v19, v17]
// [Asm]   addi v26, v25, 48  # live: [v16, v18, zero, v26, v20, v19, v17]
// [Asm]   # save_ctx2  # live: [v16, v18, zero, v26, v20, v19, v17]
// [Asm]   mv a0, v26  # live: [v16, v18, zero, a0, v20, v19, v17]
// [Asm]   call minimbt_print_char  # live: [v16, v18, zero, a0, v20, v19, v17]
// [Asm]   mv v27, a0  # live: [v16, v18, zero, v20, v19, v17]
// [Asm]   # restore_ctx2  # live: [v16, v18, zero, v20, v19, v17]
// [Asm]   addi v28, v18, 1  # live: [v16, zero, v20, v19, v17, v28]
// [Asm] # control
// [Asm]   mv v16, v16  # live: [v16, zero, v20, v19, v17, v28]
// [Asm]   mv v17, v17  # live: [v16, zero, v20, v19, v17, v28]
// [Asm]   mv v18, v28  # live: [v16, v18, zero, v20, v19, v17]
// [Asm]   mv v19, v19  # live: [v16, v18, zero, v20, v19, v17]
// [Asm]   mv v20, v20  # live: [v19, v16, v17, v18, zero, v20]
// [Asm]   j .main.197_2  # live: [v19, v16, v17, v18, zero, v20]
// [Asm] 
// [Asm] # block info: defs: [v31], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v31]
// [Asm] # block parameters: []
// [Asm] .main.197_3:
// [Asm] # control
// [Asm]   mv v31, zero  # live: [v31]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v31, a0], upward_exposed: [v31], params_defs: [v31]
// [Asm] # live_in: [v31], live_out: []
// [Asm] # block parameters: [v31]
// [Asm] .main.197_8:
// [Asm] # control
// [Asm]   mv a0, v31  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, v33, fa1, fa2, ft6, v29, fa6, a4, a6, v19, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, v30, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v16, a0, zero, v30, v20, v19, v17, v33], upward_exposed: [v19, v16, v17, zero, v20], params_defs: []
// [Asm] # live_in: [v19, v16, v17, zero, v20], live_out: [v16, v18, zero, v20, v19, v17]
// [Asm] # block parameters: []
// [Asm] .main.197_5:
// [Asm]   # save_ctx2  # live: [v16, zero, v20, v19, v17]
// [Asm]   li v33, 10  # live: [v16, zero, v20, v19, v17, v33]
// [Asm]   mv a0, v33  # live: [v16, zero, a0, v20, v19, v17]
// [Asm]   call minimbt_print_char  # live: [v16, zero, a0, v20, v19, v17]
// [Asm]   mv v29, a0  # live: [v16, zero, v20, v19, v17]
// [Asm]   # restore_ctx2  # live: [v16, zero, v20, v19, v17]
// [Asm]   addi v30, v19, 1  # live: [v16, zero, v20, v30, v17]
// [Asm] # control
// [Asm]   mv v16, v16  # live: [v16, zero, v20, v30, v17]
// [Asm]   mv v17, v17  # live: [v16, zero, v20, v30, v17]
// [Asm]   mv v18, zero  # live: [v16, v18, zero, v20, v30, v17]
// [Asm]   mv v19, v30  # live: [v16, v18, zero, v20, v19, v17]
// [Asm]   mv v20, v20  # live: [v19, v16, v17, v18, zero, v20]
// [Asm]   j .main.197_2  # live: [v19, v16, v17, v18, zero, v20]
// [Asm] 
// [Asm] # leaf true
// [Asm] T$limit_sq.2:
// [Asm] # block info: defs: [fv2, fv3, fa0], uses: [fv2, fv3, fa0], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$limit_sq.2_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   fld fv2, limit.1, t5  # live: [fv2]
// [Asm]   fmul.d fv3, fv2, fv2  # live: [fv3]
// [Asm] # control
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] main_loop.196:
// [Asm] # block info: defs: [v3, v11, fv10, v14, v5, v13, fv8, v12, v9, v4, v6, v15, fv7, v2], uses: [v2, v5, a5, a0, a2, a1, a3, fa1, fa2, a4, fa0, v4, v6, v3], upward_exposed: [a5, fa2, a0, a4, fa0, a2, a1, a3, fa1], params_defs: []
// [Asm] # live_in: [a5, fa2, a0, zero, a4, fa0, a2, a1, a3, fa1], live_out: [v11, v14, v13, zero, v12, v15]
// [Asm] # block parameters: []
// [Asm] .main_loop.196_0:
// [Asm]   # save_ctx1  # live: [fa2, a5, zero, a0, a4, fa0, a2, a1, a3, fa1]
// [Asm]   mv v2, a0  # live: [fa2, a5, zero, a4, fa0, a2, a1, a3, fa1, v2]
// [Asm]   mv v3, a1  # live: [v3, fa2, a5, zero, a4, fa0, a2, a3, fa1, v2]
// [Asm]   mv v4, a2  # live: [v3, fa2, a5, zero, a4, fa0, v4, a3, fa1, v2]
// [Asm]   mv v5, a3  # live: [v3, v5, fa2, a5, zero, a4, fa0, v4, fa1, v2]
// [Asm]   mv v6, a4  # live: [v3, v5, fa2, a5, zero, fa0, v4, v6, fa1, v2]
// [Asm]   fmv.d fv7, fa0  # live: [v3, v5, fa2, a5, zero, v4, v6, fa1, v2]
// [Asm]   fmv.d fv8, fa1  # live: [v3, v5, fa2, a5, zero, v4, v6, v2]
// [Asm]   mv v9, a5  # live: [v3, v5, fa2, zero, v4, v6, v2]
// [Asm]   fmv.d fv10, fa2  # live: [v2, v4, v6, v5, zero, v3]
// [Asm] # control
// [Asm]   mv v11, v2  # live: [v11, v4, v6, v5, zero, v3]
// [Asm]   mv v12, v3  # live: [v11, v4, v6, v5, v12, zero]
// [Asm]   mv v13, v4  # live: [v11, v6, v5, v12, v13, zero]
// [Asm]   mv v14, v5  # live: [v11, v14, v6, v12, v13, zero]
// [Asm]   mv v15, v6  # live: [v11, v14, v12, v15, v13, zero]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v14, v12], upward_exposed: [v14, v12], params_defs: [v11, v14, v12, v15, v13]
// [Asm] # live_in: [v11, v14, v13, zero, v12, v15], live_out: [v11, v14, zero, v13, v12, v15]
// [Asm] # block parameters: [v11, v12, v13, v14, v15]
// [Asm] .main_loop.196_2:
// [Asm] # control
// [Asm]   beq v14, v12, .main_loop.196_3  # live: [v11, v14, v12, v15, zero, v13]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v11, v13], upward_exposed: [v11, v13], params_defs: []
// [Asm] # live_in: [v11, v14, v13, zero, v12, v15], live_out: [v11, v14, zero, v13, v12, v15]
// [Asm] # block parameters: []
// [Asm] .main_loop.196_4:
// [Asm] # control
// [Asm]   beq v13, v11, .main_loop.196_5  # live: [v11, v14, v12, v15, zero, v13]
// [Asm] 
// [Asm] # block info: defs: [v132, fv23, fv24, v127, fv20, fv30, fv19, v31, fv133, fv26, fv118, fv22, fv128, fv28, fv25, fv29, fv123, fv27, v117, fv18, fv21, v122], uses: [v132, v11, fv24, fv23, v14, v127, v13, fv20, fv19, v12, fv133, fv26, fv118, fv22, fv128, fv28, fv25, zero, fv123, fv27, v117, fv18, fv21, v122], upward_exposed: [v11, v14, v12, v13, zero], params_defs: []
// [Asm] # live_in: [v11, v14, v13, zero, v12, v15], live_out: [v11, v14, v13, zero, fv30, fv29, v15, v12, v31]
// [Asm] # block parameters: []
// [Asm] .main_loop.196_6:
// [Asm]   fcvt.d.w fv18, v13  # live: [v11, v14, v13, zero, v15, v12, fv18]
// [Asm]   li v132, 4613937818241073152  # live: [v11, v14, v13, zero, v15, v12, fv18, v132]
// [Asm]   fmv.d.x fv133, v132  # live: [v11, v14, v13, zero, v15, v12, fv18, fv133]
// [Asm]   fmul.d fv19, fv133, fv18  # live: [v11, v14, v13, zero, fv19, v15, v12]
// [Asm]   fcvt.d.w fv20, v11  # live: [v11, v14, v13, zero, fv20, fv19, v15, v12]
// [Asm]   fdiv.d fv21, fv19, fv20  # live: [v11, v14, v13, zero, v15, v12, fv21]
// [Asm]   li v127, 4609434218613702656  # live: [v11, v14, v127, v13, zero, v15, v12, fv21]
// [Asm]   fmv.d.x fv128, v127  # live: [v11, fv128, v14, v13, zero, v15, v12, fv21]
// [Asm]   fsub.d fv22, fv21, fv128  # live: [v11, fv22, v14, v13, zero, v15, v12]
// [Asm]   fneg.d fv23, fv22  # live: [v11, fv23, v14, v13, zero, v15, v12]
// [Asm]   fcvt.d.w fv24, v14  # live: [v11, fv23, fv24, v14, v13, zero, v15, v12]
// [Asm]   li v122, 4613937818241073152  # live: [v11, fv23, fv24, v14, v13, zero, v15, v12, v122]
// [Asm]   fmv.d.x fv123, v122  # live: [v11, fv23, fv24, v14, v13, zero, fv123, v15, v12]
// [Asm]   fmul.d fv25, fv123, fv24  # live: [v11, fv23, v14, v13, zero, fv25, v15, v12]
// [Asm]   fcvt.d.w fv26, v12  # live: [v11, fv23, v14, v13, zero, fv25, v15, v12, fv26]
// [Asm]   fdiv.d fv27, fv25, fv26  # live: [v11, fv23, v14, v13, zero, fv27, v15, v12]
// [Asm]   li v117, 4609434218613702656  # live: [v11, fv23, v14, v13, zero, fv27, v15, v12, v117]
// [Asm]   fmv.d.x fv118, v117  # live: [v11, fv23, v14, v13, zero, fv27, v15, v12, fv118]
// [Asm]   fsub.d fv28, fv27, fv118  # live: [v11, fv23, v14, fv28, v13, zero, v15, v12]
// [Asm] # control
// [Asm]   fmv.d fv29, fv23  # live: [v11, v14, fv28, v13, zero, fv29, v15, v12]
// [Asm]   fmv.d fv30, fv28  # live: [v11, v14, v13, zero, fv30, fv29, v15, v12]
// [Asm]   mv v31, zero  # live: [v11, v14, v13, zero, fv30, fv29, v15, v12, v31]
// [Asm] 
// [Asm] # block info: defs: [fv32, v34, fv33], uses: [fv29, v31, v34, fv30], upward_exposed: [fv29, v31, fv30], params_defs: [fv29, v31, fv30]
// [Asm] # live_in: [v11, v14, v13, zero, fv30, fv29, v15, v12, v31], live_out: [v11, v14, fv32, v13, zero, fv33, fv30, fv29, v15, v12, v31]
// [Asm] # block parameters: [fv29, fv30, v31]
// [Asm] .main_loop.196_8:
// [Asm]   fmul.d fv32, fv29, fv29  # live: [v11, v14, fv32, v13, zero, fv30, fv29, v15, v12, v31]
// [Asm]   fmul.d fv33, fv30, fv30  # live: [v11, v14, fv32, v13, zero, fv33, fv30, fv29, v15, v12, v31]
// [Asm]   lw v34, iter.3  # live: [v11, v14, fv32, v13, zero, fv33, fv30, fv29, v15, v12, v31, v34]
// [Asm] # control
// [Asm]   bne v31, v34, .main_loop.196_10  # live: [v11, v14, fv32, v13, zero, fv33, fv30, fv29, v15, v12, v31]
// [Asm] 
// [Asm] # block info: defs: [v59, v58, v57], uses: [v11, v59, v14, v57, v13, zero], upward_exposed: [v11, v14, v13, zero], params_defs: []
// [Asm] # live_in: [v11, v14, v13, zero, v15, v12], live_out: [v11, v58, v14, zero, v13, v15, v12]
// [Asm] # block parameters: []
// [Asm] .main_loop.196_9:
// [Asm]   mul v57, v14, v11  # live: [v11, v14, zero, v13, v15, v12, v57]
// [Asm]   add v58, v57, v13  # live: [v11, v58, v14, zero, v13, v15, v12]
// [Asm]   lw v59, iter.3  # live: [v11, v58, v14, zero, v13, v59, v15, v12]
// [Asm] # control
// [Asm]   bge zero, v59, .main_loop.196_11  # live: [v11, v58, v14, zero, v13, v15, v12]
// [Asm] 
// [Asm] # block info: defs: [v84, v61], uses: [v84, v61], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v11, v58, v14, v13, zero, v12, v15], live_out: [v11, v58, v14, v13, zero, v12, v15]
// [Asm] # block parameters: []
// [Asm] .main_loop.196_12:
// [Asm]   lw v61, iter.3  # live: [v11, v58, v14, v13, zero, v12, v15, v61]
// [Asm] # control
// [Asm]   li v84, 48  # live: [v11, v58, v14, v13, zero, v84, v12, v15, v61]
// [Asm]   bge v61, v84, .main_loop.196_13  # live: [v11, v58, v14, v13, zero, v12, v15]
// [Asm] 
// [Asm] # block info: defs: [v63, v81, v65, v82, v13], uses: [v11, v63, v58, v82, v14, v13, v81, v65, v15, v12], upward_exposed: [v11, v58, v14, v13, v12, v15], params_defs: []
// [Asm] # live_in: [v11, v58, v14, v13, zero, v12, v15], live_out: [v11, v14, v13, zero, v12, v15]
// [Asm] # block parameters: []
// [Asm] .main_loop.196_14:
// [Asm]   lw v63, iter.3  # live: [v11, v63, v14, v58, zero, v13, v12, v15]
// [Asm]   slliw v81, v58, 2  # live: [v11, v63, v14, zero, v13, v81, v12, v15]
// [Asm]   add v82, v15, v81  # live: [v11, v63, v14, v82, zero, v13, v12, v15]
// [Asm]   sw v63, 0(v82)  # live: [v11, v14, zero, v13, v12, v15]
// [Asm]   addi v65, v13, 1  # live: [v11, v14, zero, v65, v12, v15]
// [Asm] # control
// [Asm]   mv v11, v11  # live: [v11, v14, zero, v65, v12, v15]
// [Asm]   mv v12, v12  # live: [v11, v14, zero, v65, v12, v15]
// [Asm]   mv v13, v65  # live: [v11, v14, v13, zero, v12, v15]
// [Asm]   mv v14, v14  # live: [v11, v14, v13, zero, v12, v15]
// [Asm]   mv v15, v15  # live: [v11, v14, v12, v15, v13, zero]
// [Asm]   j .main_loop.196_2  # live: [v11, v14, v12, v15, v13, zero]
// [Asm] 
// [Asm] # block info: defs: [v71], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v71]
// [Asm] # block parameters: []
// [Asm] .main_loop.196_3:
// [Asm] # control
// [Asm]   mv v71, zero  # live: [v71]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v71, a0], upward_exposed: [v71], params_defs: [v71]
// [Asm] # live_in: [v71], live_out: []
// [Asm] # block parameters: [v71]
// [Asm] .main_loop.196_28:
// [Asm] # control
// [Asm]   mv a0, v71  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v70, v14, v13], uses: [v11, v14, v70, v12, v15, zero], upward_exposed: [v11, v14, v12, v15, zero], params_defs: []
// [Asm] # live_in: [v11, v14, v12, v15, zero], live_out: [v11, v14, v13, zero, v12, v15]
// [Asm] # block parameters: []
// [Asm] .main_loop.196_5:
// [Asm]   addi v70, v14, 1  # live: [v11, zero, v70, v12, v15]
// [Asm] # control
// [Asm]   mv v11, v11  # live: [v11, zero, v70, v12, v15]
// [Asm]   mv v12, v12  # live: [v11, zero, v70, v12, v15]
// [Asm]   mv v13, zero  # live: [v11, v13, zero, v70, v12, v15]
// [Asm]   mv v14, v70  # live: [v11, v14, v13, zero, v12, v15]
// [Asm]   mv v15, v15  # live: [v11, v14, v12, v15, v13, zero]
// [Asm]   j .main_loop.196_2  # live: [v11, v14, v12, v15, v13, zero]
// [Asm] 
// [Asm] # block info: defs: [fv37, v38, fv36], uses: [fv37, v38, fv32, fv36, zero, fv33], upward_exposed: [fv32, zero, fv33], params_defs: []
// [Asm] # live_in: [v11, v14, fv32, zero, v13, fv33, fv30, fv29, v15, v12, v31], live_out: [v11, v14, fv32, v13, zero, fv30, fv33, fv29, v15, v12, v31]
// [Asm] # block parameters: []
// [Asm] .main_loop.196_10:
// [Asm]   fadd.d fv36, fv32, fv33  # live: [v11, v14, fv32, v13, zero, fv36, fv33, fv30, fv29, v15, v12, v31]
// [Asm]   fld fv37, limit_sq.2, t5  # live: [v11, fv37, v14, fv32, v13, zero, fv36, fv33, fv30, fv29, v15, v12, v31]
// [Asm]   fle.d v38, fv37, fv36  # live: [v11, v14, fv32, v13, zero, fv30, fv33, fv29, v38, v15, v12, v31]
// [Asm] # control
// [Asm]   beq v38, zero, .main_loop.196_18  # live: [v11, v14, fv32, v13, zero, fv30, fv33, fv29, v15, v12, v31]
// [Asm] 
// [Asm] # block info: defs: [v47, v48], uses: [v11, v47, v14, v31, v13, zero], upward_exposed: [v11, v14, v31, v13, zero], params_defs: []
// [Asm] # live_in: [v11, v14, v13, zero, v15, v12, v31], live_out: [v11, v14, v48, v13, zero, v15, v12, v31]
// [Asm] # block parameters: []
// [Asm] .main_loop.196_17:
// [Asm]   mul v47, v14, v11  # live: [v11, v14, v13, zero, v47, v15, v12, v31]
// [Asm]   add v48, v47, v13  # live: [v11, v14, v48, v13, zero, v15, v12, v31]
// [Asm] # control
// [Asm]   bge zero, v31, .main_loop.196_19  # live: [v11, v14, v48, v13, zero, v15, v12, v31]
// [Asm] 
// [Asm] # block info: defs: [v99], uses: [v31, v99], upward_exposed: [v31], params_defs: []
// [Asm] # live_in: [v11, v14, v48, v13, zero, v15, v12, v31], live_out: [v11, v14, v48, v13, zero, v15, v12, v31]
// [Asm] # block parameters: []
// [Asm] .main_loop.196_20:
// [Asm] # control
// [Asm]   li v99, 48  # live: [v11, v14, v48, v99, v13, zero, v15, v12, v31]
// [Asm]   blt v31, v99, .main_loop.196_22  # live: [v11, v14, v48, v13, zero, v15, v12, v31]
// [Asm] 
// [Asm] # block info: defs: [v95, v94, v54, v13, v93], uses: [v11, v94, v14, v48, v13, v95, v15, v12, v54, v93], upward_exposed: [v11, v14, v48, v13, v15, v12], params_defs: []
// [Asm] # live_in: [v11, v14, v48, v13, zero, v15, v12], live_out: [v11, v14, v13, zero, v12, v15]
// [Asm] # block parameters: []
// [Asm] .main_loop.196_21:
// [Asm]   li v93, 48  # live: [v11, v14, v48, zero, v13, v12, v15, v93]
// [Asm]   slliw v94, v48, 2  # live: [v11, v94, v14, zero, v13, v12, v15, v93]
// [Asm]   add v95, v15, v94  # live: [v11, v14, zero, v13, v95, v12, v15, v93]
// [Asm]   sw v93, 0(v95)  # live: [v11, v14, zero, v13, v12, v15]
// [Asm]   addi v54, v13, 1  # live: [v11, v14, zero, v12, v15, v54]
// [Asm] # control
// [Asm]   mv v11, v11  # live: [v11, v14, zero, v12, v15, v54]
// [Asm]   mv v12, v12  # live: [v11, v14, zero, v12, v15, v54]
// [Asm]   mv v13, v54  # live: [v11, v14, v13, zero, v12, v15]
// [Asm]   mv v14, v14  # live: [v11, v14, v13, zero, v12, v15]
// [Asm]   mv v15, v15  # live: [v11, v14, v12, v15, v13, zero]
// [Asm]   j .main_loop.196_2  # live: [v11, v14, v12, v15, v13, zero]
// [Asm] 
// [Asm] # block info: defs: [fv45, v46, fv39, fv43, fv41, fv42, fv30, fv29, fv109, v108, fv44, v31], uses: [fv45, v46, fv32, fv39, fv30, v108, v31, fv41, fv43, fv42, fv33, fv29, fv109, fv44], upward_exposed: [fv33, fv29, fv32, v31, fv30], params_defs: []
// [Asm] # live_in: [v11, v14, fv32, v13, zero, fv30, fv33, fv29, v15, v12, v31], live_out: [v11, v14, v13, zero, fv30, fv29, v15, v12, v31]
// [Asm] # block parameters: []
// [Asm] .main_loop.196_18:
// [Asm]   li v108, 4611686018427387904  # live: [v11, v14, fv32, v13, zero, fv30, fv33, fv29, v108, v15, v12, v31]
// [Asm]   fmv.d.x fv109, v108  # live: [v11, v14, fv32, v13, zero, fv30, fv33, fv29, fv109, v15, v12, v31]
// [Asm]   fmul.d fv39, fv109, fv29  # live: [v11, v14, fv32, v13, zero, fv39, fv30, fv33, v15, v12, v31]
// [Asm]   fld fv41, c_im.6, t5  # live: [v11, v14, fv32, v13, zero, fv39, fv41, fv30, fv33, v15, v12, v31]
// [Asm]   fmadd.d fv42, fv39, fv30, fv41  # live: [v11, v14, fv32, v13, zero, fv42, fv33, v15, v12, v31]
// [Asm]   fsub.d fv43, fv32, fv33  # live: [v11, v14, v13, zero, fv42, fv43, v15, v12, v31]
// [Asm]   fld fv44, c_re.5, t5  # live: [v11, v14, v13, zero, fv42, fv43, v15, v12, v31, fv44]
// [Asm]   fadd.d fv45, fv43, fv44  # live: [v11, v14, fv45, v13, zero, fv42, v15, v12, v31]
// [Asm]   addi v46, v31, 1  # live: [v11, v14, v46, fv45, v13, zero, fv42, v15, v12]
// [Asm] # control
// [Asm]   fmv.d fv29, fv45  # live: [v11, v14, v46, v13, zero, fv42, fv29, v15, v12]
// [Asm]   fmv.d fv30, fv42  # live: [v11, v14, v46, v13, zero, fv30, fv29, v15, v12]
// [Asm]   mv v31, v46  # live: [v11, v14, v13, zero, fv30, fv29, v15, v12, v31]
// [Asm]   j .main_loop.196_8  # live: [v11, v14, v13, zero, fv30, fv29, v15, v12, v31]
// [Asm] 
// [Asm] # block info: defs: [v90, v91, v56, v13], uses: [v11, v91, v14, v56, v48, v13, zero, v90, v15, v12], upward_exposed: [v11, v14, v48, v13, zero, v15, v12], params_defs: []
// [Asm] # live_in: [v11, v14, v48, v13, zero, v15, v12], live_out: [v11, v14, v13, zero, v12, v15]
// [Asm] # block parameters: []
// [Asm] .main_loop.196_19:
// [Asm]   slliw v90, v48, 2  # live: [v11, v14, zero, v13, v90, v12, v15]
// [Asm]   add v91, v15, v90  # live: [v11, v14, v91, zero, v13, v12, v15]
// [Asm]   sw zero, 0(v91)  # live: [v11, v14, zero, v13, v12, v15]
// [Asm]   addi v56, v13, 1  # live: [v11, v14, v56, zero, v12, v15]
// [Asm] # control
// [Asm]   mv v11, v11  # live: [v11, v14, v56, zero, v12, v15]
// [Asm]   mv v12, v12  # live: [v11, v14, v56, zero, v12, v15]
// [Asm]   mv v13, v56  # live: [v11, v14, v13, zero, v12, v15]
// [Asm]   mv v14, v14  # live: [v11, v14, v13, zero, v12, v15]
// [Asm]   mv v15, v15  # live: [v11, v14, v12, v15, v13, zero]
// [Asm]   j .main_loop.196_2  # live: [v11, v14, v12, v15, v13, zero]
// [Asm] 
// [Asm] # block info: defs: [v52, v97, v13, v98], uses: [v11, v14, v48, v97, v13, v15, v12, v52, v31, v98], upward_exposed: [v11, v14, v48, v13, v15, v12, v31], params_defs: []
// [Asm] # live_in: [v11, v14, v48, v13, zero, v15, v12, v31], live_out: [v11, v14, v13, zero, v12, v15]
// [Asm] # block parameters: []
// [Asm] .main_loop.196_22:
// [Asm]   slliw v97, v48, 2  # live: [v11, v14, zero, v13, v97, v12, v15, v31]
// [Asm]   add v98, v15, v97  # live: [v11, v14, zero, v13, v12, v15, v31, v98]
// [Asm]   sw v31, 0(v98)  # live: [v11, v14, zero, v13, v12, v15]
// [Asm]   addi v52, v13, 1  # live: [v11, v14, zero, v12, v15, v52]
// [Asm] # control
// [Asm]   mv v11, v11  # live: [v11, v14, zero, v12, v15, v52]
// [Asm]   mv v12, v12  # live: [v11, v14, zero, v12, v15, v52]
// [Asm]   mv v13, v52  # live: [v11, v14, v13, zero, v12, v15]
// [Asm]   mv v14, v14  # live: [v11, v14, v13, zero, v12, v15]
// [Asm]   mv v15, v15  # live: [v11, v14, v12, v15, v13, zero]
// [Asm]   j .main_loop.196_2  # live: [v11, v14, v12, v15, v13, zero]
// [Asm] 
// [Asm] # block info: defs: [v74, v69, v75, v13], uses: [v11, v58, v69, v14, v75, v13, zero, v74, v15, v12], upward_exposed: [v11, v58, v14, zero, v13, v15, v12], params_defs: []
// [Asm] # live_in: [v11, v58, v14, zero, v13, v15, v12], live_out: [v11, v14, v13, zero, v12, v15]
// [Asm] # block parameters: []
// [Asm] .main_loop.196_11:
// [Asm]   slliw v74, v58, 2  # live: [v11, v14, zero, v13, v74, v12, v15]
// [Asm]   add v75, v15, v74  # live: [v11, v14, v75, zero, v13, v12, v15]
// [Asm]   sw zero, 0(v75)  # live: [v11, v14, zero, v13, v12, v15]
// [Asm]   addi v69, v13, 1  # live: [v11, v14, v69, zero, v12, v15]
// [Asm] # control
// [Asm]   mv v11, v11  # live: [v11, v14, v69, zero, v12, v15]
// [Asm]   mv v12, v12  # live: [v11, v14, v69, zero, v12, v15]
// [Asm]   mv v13, v69  # live: [v11, v14, v13, zero, v12, v15]
// [Asm]   mv v14, v14  # live: [v11, v14, v13, zero, v12, v15]
// [Asm]   mv v15, v15  # live: [v11, v14, v12, v15, v13, zero]
// [Asm]   j .main_loop.196_2  # live: [v11, v14, v12, v15, v13, zero]
// [Asm] 
// [Asm] # block info: defs: [v67, v77, v79, v13, v78], uses: [v11, v58, v14, v79, v13, v78, v77, v67, v15, v12], upward_exposed: [v11, v58, v14, v13, v12, v15], params_defs: []
// [Asm] # live_in: [v11, v58, v14, v13, zero, v12, v15], live_out: [v11, v14, v13, zero, v12, v15]
// [Asm] # block parameters: []
// [Asm] .main_loop.196_13:
// [Asm]   li v77, 48  # live: [v11, v14, v58, zero, v13, v77, v12, v15]
// [Asm]   slliw v78, v58, 2  # live: [v11, v14, zero, v13, v77, v78, v12, v15]
// [Asm]   add v79, v15, v78  # live: [v11, v14, zero, v13, v79, v77, v12, v15]
// [Asm]   sw v77, 0(v79)  # live: [v11, v14, zero, v13, v12, v15]
// [Asm]   addi v67, v13, 1  # live: [v11, v14, zero, v67, v12, v15]
// [Asm] # control
// [Asm]   mv v11, v11  # live: [v11, v14, zero, v67, v12, v15]
// [Asm]   mv v12, v12  # live: [v11, v14, zero, v67, v12, v15]
// [Asm]   mv v13, v67  # live: [v11, v14, v13, zero, v12, v15]
// [Asm]   mv v14, v14  # live: [v11, v14, v13, zero, v12, v15]
// [Asm]   mv v15, v15  # live: [v11, v14, v12, v15, v13, zero]
// [Asm]   j .main_loop.196_2  # live: [v11, v14, v12, v15, v13, zero]
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fv5, fv2, fa2, ft6, a4, fa6, a6, v4, ft5, ft10, v6, fv3, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [fv5, fv2, fa2, a0, fa0, v4, v6, fv3, fa1], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   fld fv2, c_im.6, t5  # live: [fv2]
// [Asm]   fld fv3, c_re.5, t5  # live: [fv2, fv3]
// [Asm]   lw v4, iter.3  # live: [v4, fv2, fv3]
// [Asm]   fld fv5, limit_sq.2, t5  # live: [fv5, v4, fv2, fv3]
// [Asm]   # save_ctx2  # live: [fv5, v4, fv2, fv3]
// [Asm]   fmv.d fa0, fv2  # live: [fv5, v4, fv3, fa0]
// [Asm]   fmv.d fa1, fv3  # live: [fv5, v4, fa1, fa0]
// [Asm]   mv a0, v4  # live: [fv5, fa1, a0, fa0]
// [Asm]   fmv.d fa2, fv5  # live: [fa2, fa1, a0, fa0]
// [Asm]   call main.197  # live: [a0]
// [Asm]   mv v6, a0  # live: [v6]
// [Asm]   # restore_ctx2  # live: [v6]
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0, fa0, sp, s0, ra, s11, t5], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$limit.1  # live: [s0, fa0]
// [Asm]   la t5, limit.1  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$limit_sq.2  # live: [s0, fa0]
// [Asm]   la t5, limit_sq.2  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$iter.3  # live: [s0, a0]
// [Asm]   la t5, iter.3  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$_4  # live: [s0, fa0]
// [Asm]   la t5, _4  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$c_re.5  # live: [s0, fa0]
// [Asm]   la t5, c_re.5  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$c_im.6  # live: [s0, fa0]
// [Asm]   la t5, c_im.6  # live: [s0, t5, fa0]
// [Asm]   fsd fa0, 0(t5)  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] iter.3:
// [Asm]   .zero 4
// [Asm] c_im.6:
// [Asm]   .zero 8
// [Asm] start:
// [Asm]   .zero 4
// [Asm] _4:
// [Asm]   .zero 8
// [Asm] limit_sq.2:
// [Asm]   .zero 8
// [Asm] limit.1:
// [Asm]   .zero 8
// [Asm] c_re.5:
// [Asm]   .zero 8
// [Asm] 
// [Knf] build_knf: Let(("limit", Double), Double(2), Let(("limit_sq", Double), Prim(Var("limit"), Var("limit"), Mul, kind=Some(Double)), Let(("iter", Int), Int(300), Let(("c_re", Double), Neg(Double(0.123), kind=Some(Double)), Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))))))))))
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Let(("limit_sq", Double), Prim(Var("limit"), Var("limit"), Mul, kind=Some(Double)), Let(("iter", Int), Int(300), Let(("c_re", Double), Neg(Double(0.123), kind=Some(Double)), Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))))))))))
// [Knf] build_knf: Prim(Var("limit"), Var("limit"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("limit")
// [Knf] build_knf: Var("limit")
// [Knf] build_knf: Let(("iter", Int), Int(300), Let(("c_re", Double), Neg(Double(0.123), kind=Some(Double)), Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))))))))
// [Knf] build_knf: Int(300)
// [Knf] build_knf: Let(("c_re", Double), Neg(Double(0.123), kind=Some(Double)), Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))))))))
// [Knf] build_knf: Neg(Double(0.123), kind=Some(Double))
// [Knf] build_knf: Double(0.123)
// [Knf] build_knf: Let(("c_im", Double), Double(0.745), LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))))))
// [Knf] build_knf: Double(0.745)
// [Knf] build_knf: LetRec({name: ("calc_pixel", Int), args: [("zr", Double), ("zi", Double), ("it", Int)], body: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))}, LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))))))
// [Knf] build_knf: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))))
// [Knf] build_knf: Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))]))))))
// [Knf] build_knf: Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: If(Eq(Var("it"), Var("iter")), Var("iter"), If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))))
// [Knf] build_knf: Var("it")
// [Knf] build_knf: Var("iter")
// [Knf] build_knf: Var("iter")
// [Knf] build_knf: If(LE(Var("limit_sq"), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), Var("it"), Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: Var("limit_sq")
// [Knf] build_knf: Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))
// [Knf] build_knf: Var("zr2")
// [Knf] build_knf: Var("zi2")
// [Knf] build_knf: Var("it")
// [Knf] build_knf: Let(("new_zi", Var({val: Some(Double)})), Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double)), Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Prim(Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double)), Var("c_im"), Add, kind=Some(Double))
// [Knf] build_knf: Prim(Prim(Double(2), Var("zr"), Mul, kind=Some(Double)), Var("zi"), Mul, kind=Some(Double))
// [Knf] build_knf: Prim(Double(2), Var("zr"), Mul, kind=Some(Double))
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: Var("c_im")
// [Knf] build_knf: Let(("new_zr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double)), App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("c_re"), Add, kind=Some(Double))
// [Knf] build_knf: Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double))
// [Knf] build_knf: Var("zr2")
// [Knf] build_knf: Var("zi2")
// [Knf] build_knf: Var("c_re")
// [Knf] build_knf: App(Var("calc_pixel"), [Var("new_zr"), Var("new_zi"), Prim(Var("it"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("calc_pixel")
// [Knf] build_knf: Var("new_zr")
// [Knf] build_knf: Var("new_zi")
// [Knf] build_knf: Prim(Var("it"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("it")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("clamp", Int), args: [("i", Int)], body: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))}, LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))))
// [Knf] build_knf: If(LE(Var("i"), Int(0)), Int(0), If(LE(Int(48), Var("i")), Int(48), Var("i")))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: If(LE(Int(48), Var("i")), Int(48), Var("i"))
// [Knf] build_knf: Int(48)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(48)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: LetRec({name: ("main_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))}, LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))))
// [Knf] build_knf: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("x"), Var("w")), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]), Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])
// [Knf] build_knf: Var("main_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Var("y"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Let(("cr", Var({val: Some(Double)})), Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))))
// [Knf] build_knf: Neg(Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), kind=Some(Double))
// [Knf] build_knf: Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double))
// [Knf] build_knf: Prim(Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double))
// [Knf] build_knf: Prim(Double(3), App(Var("float_of_int"), [Var("x")]), Mul, kind=Some(Double))
// [Knf] build_knf: Double(3)
// [Knf] build_knf: App(Var("float_of_int"), [Var("x")])
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("float_of_int"), [Var("w")])
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Double(1.5)
// [Knf] build_knf: Let(("ci", Var({val: Some(Double)})), Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))
// [Knf] build_knf: Prim(Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double))
// [Knf] build_knf: Prim(Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double)), App(Var("float_of_int"), [Var("h")]), Div, kind=Some(Double))
// [Knf] build_knf: Prim(Double(3), App(Var("float_of_int"), [Var("y")]), Mul, kind=Some(Double))
// [Knf] build_knf: Double(3)
// [Knf] build_knf: App(Var("float_of_int"), [Var("y")])
// [Knf] build_knf: Var("y")
// [Knf] build_knf: App(Var("float_of_int"), [Var("h")])
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Double(1.5)
// [Knf] build_knf: Let(("res", Var({val: Some(Int)})), App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))
// [Knf] build_knf: App(Var("calc_pixel"), [Var("cr"), Var("ci"), Int(0)])
// [Knf] build_knf: Var("calc_pixel")
// [Knf] build_knf: Var("cr")
// [Knf] build_knf: Var("ci")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")])), App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))
// [Knf] build_knf: Put(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), App(Var("clamp"), [Var("res")]))
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Var("y"), Var("w"), Mul, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("clamp"), [Var("res")])
// [Knf] build_knf: Var("clamp")
// [Knf] build_knf: Var("res")
// [Knf] build_knf: App(Var("main_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])
// [Knf] build_knf: Var("main_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: LetRec({name: ("print_loop", Unit), args: [("w", Int), ("h", Int), ("x", Int), ("y", Int), ("ret", Array(Int))], body: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), [])))
// [Knf] build_knf: If(Eq(Var("y"), Var("h")), Unit, If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("x"), Var("w")), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")]))
// [Knf] build_knf: App(Var("print_char"), [Int(10)])
// [Knf] build_knf: Int(10)
// [Knf] build_knf: App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Prim(Var("y"), Int(1), Add, kind=Some(Int)), Var("ret")])
// [Knf] build_knf: Var("print_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Var("y"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))]), App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")]))
// [Knf] build_knf: App(Var("print_char"), [Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))])
// [Knf] build_knf: Prim(Int(48), Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))), Add, kind=Some(Int))
// [Knf] build_knf: Int(48)
// [Knf] build_knf: Get(Var("ret"), Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Prim(Prim(Var("y"), Var("w"), Mul, kind=Some(Int)), Var("x"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Var("y"), Var("w"), Mul, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("print_loop"), [Var("w"), Var("h"), Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y"), Var("ret")])
// [Knf] build_knf: Var("print_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("h", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))))
// [Knf] build_knf: App(Var("read_int"), [])
// [Knf] build_knf: Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Int(2), Mul, kind=Some(Int)), Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit))))
// [Knf] build_knf: Prim(Var("h"), Int(2), Mul, kind=Some(Int))
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("ret", Var({val: Some(Array(Int))})), Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)))
// [Knf] build_knf: Array(Prim(Var("w"), Var("h"), Mul, kind=Some(Int)), Int(0))
// [Knf] build_knf: Prim(Var("w"), Var("h"), Mul, kind=Some(Int))
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit))
// [Knf] build_knf: App(Var("main_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")])
// [Knf] build_knf: Var("main_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")]), Unit)
// [Knf] build_knf: App(Var("print_loop"), [Var("w"), Var("h"), Int(0), Int(0), Var("ret")])
// [Knf] build_knf: Var("print_loop")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("ret")
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Core] b0 control: Panic -> Return(args=[Double(val=2)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%2)])
// [Core] b0 control: Panic -> Return(args=[Int32(val=300)])
// [Core] b0 control: Panic -> Return(args=[Double(val=0.123)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%1)])
// [Core] b0 control: Panic -> Return(args=[Double(val=0.745)])
// [Core] b13 control: Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Insn(iref=%27), BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.4)]) already set
// [Core] b14 control: Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Insn(iref=%30), BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.4)]) already set
// [Core] b12 control: Panic -> Branch(cond=Insn(iref=%25), t=b13, t_args=[], f=b14, f_args=[])
// [Core] b11 control: Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Insn(iref=%23), BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.4)]) already set
// [Core] b15 control: Panic -> Jump(target=b16, args=[BlockParam(bref=b15, bpref=$b.0)])
// [Core] b9 control: Panic -> Branch(cond=Insn(iref=%21), t=b11, t_args=[], f=b12, f_args=[])
// [Core] b21 control: Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Insn(iref=%41), BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.4)]) already set
// [Core] b22 control: Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Insn(iref=%43), BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.4)]) already set
// [Core] b20 control: Panic -> Branch(cond=Insn(iref=%39), t=b21, t_args=[], f=b22, f_args=[])
// [Core] b19 control: Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Insn(iref=%38), BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.4)]) already set
// [Core] b23 control: Panic -> Jump(target=b24, args=[BlockParam(bref=b23, bpref=$b.0)])
// [Core] b17 control: Panic -> Branch(cond=Insn(iref=%36), t=b19, t_args=[], f=b20, f_args=[])
// [Core] b24 control: Panic -> Jump(target=b25, args=[BlockParam(bref=b24, bpref=$b.0)])
// [Core] b18 control: Jump(target=b8, args=[Insn(iref=%50), Insn(iref=%47), Insn(iref=%51)]) already set
// [Core] b10 control: Panic -> Branch(cond=Insn(iref=%33), t=b17, t_args=[], f=b18, f_args=[])
// [Core] b16 control: Panic -> Jump(target=b26, args=[BlockParam(bref=b16, bpref=$b.0)])
// [Core] b25 control: Panic -> Jump(target=b26, args=[BlockParam(bref=b25, bpref=$b.0)])
// [Core] b8 control: Panic -> Branch(cond=Insn(iref=%17), t=b9, t_args=[], f=b10, f_args=[])
// [Core] b26 control: Panic -> Return(args=[BlockParam(bref=b26, bpref=$b.0)])
// [Core] b5 control: Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Int32(val=0), Insn(iref=%2), BlockParam(bref=b2, bpref=$b.4)]) already set
// [Core] b6 control: Jump(target=b7, args=[Insn(iref=%8), Insn(iref=%13), Int32(val=0)]) already set
// [Core] b4 control: Panic -> Branch(cond=Insn(iref=%1), t=b5, t_args=[], f=b6, f_args=[])
// [Core] b3 control: Panic -> Jump(target=b28, args=[Unit])
// [Core] b27 control: Panic -> Jump(target=b28, args=[BlockParam(bref=b27, bpref=$b.0)])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b28 control: Panic -> Return(args=[BlockParam(bref=b28, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[FnParam(fref=f12, fpref=$f.0), FnParam(fref=f12, fpref=$f.1), FnParam(fref=f12, fpref=$f.2), FnParam(fref=f12, fpref=$f.3), FnParam(fref=f12, fpref=$f.4)]) already set
// [Core] b5 control: Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Int32(val=0), Insn(iref=%12), BlockParam(bref=b2, bpref=$b.4)]) already set
// [Core] b6 control: Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Insn(iref=%18), BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.4)]) already set
// [Core] b4 control: Panic -> Branch(cond=Insn(iref=%10), t=b5, t_args=[], f=b6, f_args=[])
// [Core] b3 control: Panic -> Jump(target=b8, args=[Unit])
// [Core] b7 control: Panic -> Jump(target=b8, args=[BlockParam(bref=b7, bpref=$b.0)])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%9), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b8 control: Panic -> Return(args=[BlockParam(bref=b8, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[Insn(iref=%1), Insn(iref=%0), Int32(val=0), Int32(val=0), Mem(fref=f13, mref=m0)]) already set
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%4)])
// [Main] beta reduce res.130 = iter.3
// [Main] beta reduce _133 = iter.3
// [Main] beta reduce res.130 = it.161
// [Main] beta reduce _133 = it.161
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$iter.3
// [Main]   .type T$iter.3, @function
// [Main] # leaf true
// [Main] T$iter.3:
// [Main] .T$iter.3_0:
// [Main]   li a0, 300
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$c_re.5
// [Main]   .type T$c_re.5, @function
// [Main] # leaf true
// [Main] T$c_re.5:
// [Main] .T$c_re.5_0:
// [Main]   fld fa0, _4, t5
// [Main]   fneg.d fa0, fa0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$limit.1
// [Main]   .type T$limit.1, @function
// [Main] # leaf true
// [Main] T$limit.1:
// [Main] .T$limit.1_0:
// [Main]   li a0, 4611686018427387904
// [Main]   fmv.d.x fa0, a0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_4
// [Main]   .type T$_4, @function
// [Main] # leaf true
// [Main] T$_4:
// [Main] .T$_4_0:
// [Main]   li a0, 4593527504729830064
// [Main]   fmv.d.x fa0, a0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$c_im.6
// [Main]   .type T$c_im.6, @function
// [Main] # leaf true
// [Main] T$c_im.6:
// [Main] .T$c_im.6_0:
// [Main]   li a0, 4604885582990058455
// [Main]   fmv.d.x fa0, a0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.197
// [Main]   .type main.197, @function
// [Main] # leaf false
// [Main] main.197:
// [Main] .main.197_0:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   fmv.d fa0, fa1
// [Main]   fmv.d fa0, fa2
// [Main]   call minimbt_read_int
// [Main]   mv s0, a0
// [Main]   li a0, 2
// [Main]   mul s1, s0, a0
// [Main]   mul a0, s1, s0
// [Main]   slliw a1, a0, 2
// [Main]   sub s2, s11, a1
// [Main]   andi s11, s2, -8
// [Main]   mv a1, a0
// [Main]   fld fa0, c_im.6, t5
// [Main]   fld fa1, c_re.5, t5
// [Main]   lw a5, iter.3
// [Main]   fld fa2, limit_sq.2, t5
// [Main]   mv a0, s1
// [Main]   mv a1, s0
// [Main]   mv a2, zero
// [Main]   mv a3, zero
// [Main]   mv a4, s2
// [Main]   call main_loop.196
// [Main]   mv s3, zero
// [Main]   mv s4, zero
// [Main] 
// [Main] .main.197_2:
// [Main]   beq s4, s0, .main.197_3
// [Main] 
// [Main] .main.197_4:
// [Main]   beq s3, s1, .main.197_5
// [Main] 
// [Main] .main.197_6:
// [Main]   mul a0, s4, s1
// [Main]   add a0, a0, s3
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s2, a0
// [Main]   lw a0, 0(a0)
// [Main]   addi a0, a0, 48
// [Main]   call minimbt_print_char
// [Main]   addi a0, s3, 1
// [Main]   mv s3, a0
// [Main]   j .main.197_2
// [Main] 
// [Main] .main.197_3:
// [Main]   mv a0, zero
// [Main] 
// [Main] .main.197_8:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main] .main.197_5:
// [Main]   li a0, 10
// [Main]   call minimbt_print_char
// [Main]   addi a0, s4, 1
// [Main]   mv s3, zero
// [Main]   mv s4, a0
// [Main]   j .main.197_2
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$limit_sq.2
// [Main]   .type T$limit_sq.2, @function
// [Main] # leaf true
// [Main] T$limit_sq.2:
// [Main] .T$limit_sq.2_0:
// [Main]   fld fa0, limit.1, t5
// [Main]   fmul.d fa0, fa0, fa0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main_loop.196
// [Main]   .type main_loop.196, @function
// [Main] # leaf true
// [Main] main_loop.196:
// [Main] .main_loop.196_0:
// [Main]   mv t0, a0
// [Main]   mv a7, a1
// [Main]   mv a6, a2
// [Main]   mv a2, a3
// [Main]   mv a0, a4
// [Main]   fmv.d fa0, fa1
// [Main]   mv a1, a5
// [Main]   fmv.d fa0, fa2
// [Main]   mv a1, t0
// [Main]   mv a5, a7
// [Main]   mv a3, a6
// [Main]   mv a4, a0
// [Main] 
// [Main] .main_loop.196_2:
// [Main]   beq a2, a5, .main_loop.196_3
// [Main] 
// [Main] .main_loop.196_4:
// [Main]   beq a3, a1, .main_loop.196_5
// [Main] 
// [Main] .main_loop.196_6:
// [Main]   fcvt.d.w fa0, a3
// [Main]   li a0, 4613937818241073152
// [Main]   fmv.d.x fa1, a0
// [Main]   fmul.d fa0, fa1, fa0
// [Main]   fcvt.d.w fa1, a1
// [Main]   fdiv.d fa0, fa0, fa1
// [Main]   li a0, 4609434218613702656
// [Main]   fmv.d.x fa1, a0
// [Main]   fsub.d fa0, fa0, fa1
// [Main]   fneg.d fa0, fa0
// [Main]   fcvt.d.w fa1, a2
// [Main]   li a0, 4613937818241073152
// [Main]   fmv.d.x fa2, a0
// [Main]   fmul.d fa1, fa2, fa1
// [Main]   fcvt.d.w fa2, a5
// [Main]   fdiv.d fa1, fa1, fa2
// [Main]   li a0, 4609434218613702656
// [Main]   fmv.d.x fa2, a0
// [Main]   fsub.d fa1, fa1, fa2
// [Main]   mv a0, zero
// [Main] 
// [Main] .main_loop.196_8:
// [Main]   fmul.d fa2, fa0, fa0
// [Main]   fmul.d fa3, fa1, fa1
// [Main]   lw a6, iter.3
// [Main]   bne a0, a6, .main_loop.196_10
// [Main] 
// [Main] .main_loop.196_9:
// [Main]   mul a0, a2, a1
// [Main]   add a0, a0, a3
// [Main]   lw a6, iter.3
// [Main]   bge zero, a6, .main_loop.196_11
// [Main] 
// [Main] .main_loop.196_12:
// [Main]   lw a6, iter.3
// [Main]   li a7, 48
// [Main]   bge a6, a7, .main_loop.196_13
// [Main] 
// [Main] .main_loop.196_14:
// [Main]   lw a6, iter.3
// [Main]   slliw a0, a0, 2
// [Main]   add a0, a4, a0
// [Main]   sw a6, 0(a0)
// [Main]   addi a0, a3, 1
// [Main]   mv a3, a0
// [Main]   j .main_loop.196_2
// [Main] 
// [Main] .main_loop.196_3:
// [Main]   mv a0, zero
// [Main] 
// [Main] .main_loop.196_28:
// [Main]   ret
// [Main] 
// [Main] .main_loop.196_5:
// [Main]   addi a0, a2, 1
// [Main]   mv a3, zero
// [Main]   mv a2, a0
// [Main]   j .main_loop.196_2
// [Main] 
// [Main] .main_loop.196_10:
// [Main]   fadd.d fa4, fa2, fa3
// [Main]   fld fa5, limit_sq.2, t5
// [Main]   fle.d a6, fa5, fa4
// [Main]   beq a6, zero, .main_loop.196_18
// [Main] 
// [Main] .main_loop.196_17:
// [Main]   mul a6, a2, a1
// [Main]   add a6, a6, a3
// [Main]   bge zero, a0, .main_loop.196_19
// [Main] 
// [Main] .main_loop.196_20:
// [Main]   li a7, 48
// [Main]   blt a0, a7, .main_loop.196_22
// [Main] 
// [Main] .main_loop.196_21:
// [Main]   li a0, 48
// [Main]   slliw a6, a6, 2
// [Main]   add a6, a4, a6
// [Main]   sw a0, 0(a6)
// [Main]   addi a0, a3, 1
// [Main]   mv a3, a0
// [Main]   j .main_loop.196_2
// [Main] 
// [Main] .main_loop.196_18:
// [Main]   li a6, 4611686018427387904
// [Main]   fmv.d.x fa4, a6
// [Main]   fmul.d fa0, fa4, fa0
// [Main]   fld fa4, c_im.6, t5
// [Main]   fmadd.d fa1, fa0, fa1, fa4
// [Main]   fsub.d fa0, fa2, fa3
// [Main]   fld fa2, c_re.5, t5
// [Main]   fadd.d fa0, fa0, fa2
// [Main]   addi a0, a0, 1
// [Main]   j .main_loop.196_8
// [Main] 
// [Main] .main_loop.196_19:
// [Main]   slliw a0, a6, 2
// [Main]   add a0, a4, a0
// [Main]   sw zero, 0(a0)
// [Main]   addi a0, a3, 1
// [Main]   mv a3, a0
// [Main]   j .main_loop.196_2
// [Main] 
// [Main] .main_loop.196_22:
// [Main]   slliw a6, a6, 2
// [Main]   add a6, a4, a6
// [Main]   sw a0, 0(a6)
// [Main]   addi a0, a3, 1
// [Main]   mv a3, a0
// [Main]   j .main_loop.196_2
// [Main] 
// [Main] .main_loop.196_11:
// [Main]   slliw a0, a0, 2
// [Main]   add a0, a4, a0
// [Main]   sw zero, 0(a0)
// [Main]   addi a0, a3, 1
// [Main]   mv a3, a0
// [Main]   j .main_loop.196_2
// [Main] 
// [Main] .main_loop.196_13:
// [Main]   li a6, 48
// [Main]   slliw a0, a0, 2
// [Main]   add a0, a4, a0
// [Main]   sw a6, 0(a0)
// [Main]   addi a0, a3, 1
// [Main]   mv a3, a0
// [Main]   j .main_loop.196_2
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   fld fa0, c_im.6, t5
// [Main]   fld fa1, c_re.5, t5
// [Main]   lw a0, iter.3
// [Main]   fld fa2, limit_sq.2, t5
// [Main]   call main.197
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$limit.1
// [Main]   la t5, limit.1
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$limit_sq.2
// [Main]   la t5, limit_sq.2
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$iter.3
// [Main]   la t5, iter.3
// [Main]   sw a0, 0(t5)
// [Main]   call T$_4
// [Main]   la t5, _4
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$c_re.5
// [Main]   la t5, c_re.5
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$c_im.6
// [Main]   la t5, c_im.6
// [Main]   fsd fa0, 0(t5)
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl iter.3
// [Main]   .type iter.3, @object
// [Main] iter.3:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl c_im.6
// [Main]   .type c_im.6, @object
// [Main] c_im.6:
// [Main]   .zero 8
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _4
// [Main]   .type _4, @object
// [Main] _4:
// [Main]   .zero 8
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl limit_sq.2
// [Main]   .type limit_sq.2, @object
// [Main] limit_sq.2:
// [Main]   .zero 8
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl limit.1
// [Main]   .type limit.1, @object
// [Main] limit.1:
// [Main]   .zero 8
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl c_re.5
// [Main]   .type c_re.5, @object
// [Main] c_re.5:
// [Main]   .zero 8
// [Main] 
// [Wasm] Lowering function T$_4
// [Wasm] Lowering control Return(args=[Double(val=0.123)])
// [Wasm] Lowered function T$_4 to wasm
// [Wasm] Lowering function main_loop.196
// [Wasm] Lowering control Return(args=[BlockParam(bref=b28, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b28, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.3), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Int32(val=0), Insn(iref=%2), BlockParam(bref=b2, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b2, bpref=$b.4), offset=Insn(iref=%19), width=@32), val=Int32(val=0))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering control Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Insn(iref=%23), BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b2, bpref=$b.4), offset=Insn(iref=%19), width=@32), val=Int32(val=48))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Lowering control Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Insn(iref=%27), BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b2, bpref=$b.4), offset=Insn(iref=%19), width=@32), val=Insn(iref=%28))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering control Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Insn(iref=%30), BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=48), Insn(iref=%24)])
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering control Branch(cond=Insn(iref=%25), t=b13, t_args=[], f=b14, f_args=[])
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%18), BlockParam(bref=b2, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%20), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering control Branch(cond=Insn(iref=%21), t=b11, t_args=[], f=b12, f_args=[])
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b2, bpref=$b.4), offset=Insn(iref=%35), width=@32), val=Int32(val=0))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering control Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Insn(iref=%38), BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b2, bpref=$b.4), offset=Insn(iref=%35), width=@32), val=Int32(val=48))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Lowering control Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Insn(iref=%41), BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b2, bpref=$b.4), offset=Insn(iref=%35), width=@32), val=BlockParam(bref=b8, bpref=$b.2))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.2) -> $b8.$b.2
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Lowering control Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Insn(iref=%43), BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=48), BlockParam(bref=b8, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.2) -> $b8.$b.2
// [Wasm] Get Local name Insn(iref=%39) -> $%39
// [Wasm] Lowering control Branch(cond=Insn(iref=%39), t=b21, t_args=[], f=b22, f_args=[])
// [Wasm] Get Local name Insn(iref=%39) -> $%39
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%34), BlockParam(bref=b2, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b8, bpref=$b.2), Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.2) -> $b8.$b.2
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering control Branch(cond=Insn(iref=%36), t=b19, t_args=[], f=b20, f_args=[])
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=2), BlockParam(bref=b8, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.0) -> $b8.$b.0
// [Wasm] Get Local name Insn(iref=%44) -> $%44
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%44), BlockParam(bref=b8, bpref=$b.1)])
// [Wasm] Get Local name Insn(iref=%44) -> $%44
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.1) -> $b8.$b.1
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::5)
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%45), Insn(iref=%46)])
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Insn(iref=%14), Insn(iref=%15)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::4)
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%48), Insn(iref=%49)])
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Get Local name Insn(iref=%50) -> $%50
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b8, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.2) -> $b8.$b.2
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Lowering control Jump(target=b8, args=[Insn(iref=%50), Insn(iref=%47), Insn(iref=%51)])
// [Wasm] Get Local name Insn(iref=%50) -> $%50
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.0) -> $b8.$b.0
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.1) -> $b8.$b.1
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.2) -> $b8.$b.2
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%14), Insn(iref=%15)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::1)
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%32), Insn(iref=%31)])
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Get Local name Insn(iref=%33) -> $%33
// [Wasm] Lowering control Branch(cond=Insn(iref=%33), t=b17, t_args=[], f=b18, f_args=[])
// [Wasm] Get Local name Insn(iref=%33) -> $%33
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[BlockParam(bref=b8, bpref=$b.0), BlockParam(bref=b8, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.0) -> $b8.$b.0
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.0) -> $b8.$b.0
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[BlockParam(bref=b8, bpref=$b.1), BlockParam(bref=b8, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.1) -> $b8.$b.1
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.1) -> $b8.$b.1
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b8, bpref=$b.2), Insn(iref=%16)])
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.2) -> $b8.$b.2
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering control Branch(cond=Insn(iref=%17), t=b9, t_args=[], f=b10, f_args=[])
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[BlockParam(bref=b2, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=3), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Double, op=Div, args=[Insn(iref=%4), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Insn(iref=%6), Double(val=1.5)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Double, op=Neg, args=[Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[BlockParam(bref=b2, bpref=$b.3)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=3), Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[BlockParam(bref=b2, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Double, op=Div, args=[Insn(iref=%10), Insn(iref=%11)])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Insn(iref=%12), Double(val=1.5)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering control Jump(target=b7, args=[Insn(iref=%8), Insn(iref=%13), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.0) -> $b8.$b.0
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.1) -> $b8.$b.1
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.2) -> $b8.$b.2
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b2, bpref=$b.2), BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b5, t_args=[], f=b6, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b1, args=[FnParam(fref=f12, fpref=$f.0), FnParam(fref=f12, fpref=$f.1), FnParam(fref=f12, fpref=$f.2), FnParam(fref=f12, fpref=$f.3), FnParam(fref=f12, fpref=$f.4)])
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.6) -> $$f.6
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.7) -> $$f.7
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.8) -> $$f.8
// [Wasm] Local BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local Insn(iref=%41) -> $%41
// [Wasm] Local BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Local Insn(iref=%33) -> $%33
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%27) -> $%27
// [Wasm] Local Insn(iref=%50) -> $%50
// [Wasm] Local Insn(iref=%25) -> $%25
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%39) -> $%39
// [Wasm] Local Insn(iref=%51) -> $%51
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%49) -> $%49
// [Wasm] Local Insn(iref=%44) -> $%44
// [Wasm] Local Insn(iref=%32) -> $%32
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local BlockParam(bref=b8, bpref=$b.2) -> $b8.$b.2
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%35) -> $%35
// [Wasm] Local Insn(iref=%31) -> $%31
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local Insn(iref=%38) -> $%38
// [Wasm] Local Insn(iref=%46) -> $%46
// [Wasm] Local Insn(iref=%24) -> $%24
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Local Insn(iref=%45) -> $%45
// [Wasm] Local BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Local BlockParam(bref=b8, bpref=$b.0) -> $b8.$b.0
// [Wasm] Local Insn(iref=%47) -> $%47
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local BlockParam(bref=b8, bpref=$b.1) -> $b8.$b.1
// [Wasm] Local Insn(iref=%48) -> $%48
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Local Insn(iref=%43) -> $%43
// [Wasm] Local Insn(iref=%30) -> $%30
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local Insn(iref=%34) -> $%34
// [Wasm] Local Insn(iref=%36) -> $%36
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function main_loop.196 to wasm
// [Wasm] Lowering function T$iter.3
// [Wasm] Lowering control Return(args=[Int32(val=300)])
// [Wasm] Lowered function T$iter.3 to wasm
// [Wasm] Lowering function T$c_re.5
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::3)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Double, op=Neg, args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Return(args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function T$c_re.5 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::5)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::4)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::1)
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Call(ty=Unit, f=f13, args=[Insn(iref=%0), Insn(iref=%1), Insn(iref=%2), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Return(args=[Insn(iref=%4)])
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function T$start to wasm
// [Wasm] Lowering function T$limit.1
// [Wasm] Lowering control Return(args=[Double(val=2)])
// [Wasm] Lowered function T$limit.1 to wasm
// [Wasm] Lowering function main.197
// [Wasm] Lowering control Return(args=[BlockParam(bref=b8, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b8, args=[Unit])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Int32(val=10)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.3), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering control Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Int32(val=0), Insn(iref=%12), BlockParam(bref=b2, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%13), BlockParam(bref=b2, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b2, bpref=$b.4), offset=Insn(iref=%14), width=@32))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Int32(val=48), Insn(iref=%15)])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Insn(iref=%16)])
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering control Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Insn(iref=%18), BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b2, bpref=$b.2), BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Branch(cond=Insn(iref=%10), t=b5, t_args=[], f=b6, f_args=[])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering control Branch(cond=Insn(iref=%9), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_int", args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%0), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%1), Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Zero])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Mem(fref=f13, mref=m0) -> $f13.m0
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::5)
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::4)
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::1)
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Call(ty=Unit, f=f12, args=[Insn(iref=%1), Insn(iref=%0), Int32(val=0), Int32(val=0), Mem(fref=f13, mref=m0), Insn(iref=%4), Insn(iref=%5), Insn(iref=%6), Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Mem(fref=f13, mref=m0) -> $f13.m0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Jump(target=b1, args=[Insn(iref=%1), Insn(iref=%0), Int32(val=0), Int32(val=0), Mem(fref=f13, mref=m0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name Mem(fref=f13, mref=m0) -> $f13.m0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.3) -> $$f.3
// [Wasm] Local BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Mem(fref=f13, mref=m0) -> $f13.m0
// [Wasm] Local BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function main.197 to wasm
// [Wasm] Lowering function T$c_im.6
// [Wasm] Lowering control Return(args=[Double(val=0.745)])
// [Wasm] Lowered function T$c_im.6 to wasm
// [Wasm] Lowering function T$limit_sq.2
// [Wasm] Lowering insn LoadSymbol(ty=Double, sref=::0)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%0), Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function T$limit_sq.2 to wasm
// [KnfOpt] func_tre: calc_pixel.7 true
// [KnfOpt] func_tre: clamp.22 false
// [KnfOpt] func_tre: main_loop.26 true
// [KnfOpt] func_tre: print_loop.58 true
// [KnfOpt] func_tre: main.77 false
// [KnfOpt] freq: {calc_pixel.7: Once, calc_pixel.90: Many(2), clamp.22: Once, main_loop.26: Once, main_loop.105: Many(3), print_loop.58: Once, print_loop.137: Many(3), main.77: Once}
// [KnfOpt] Knf inline Some(clamp) let _133: Int = Unit
// [KnfOpt] let _134: Unit = Put ret.110[_132] = _133
// [KnfOpt] let _135: Int = Int(1)
// [KnfOpt] let _136: Int = Add(x.108, _135)
// [KnfOpt] Jump(main_loop.105, [w.106, h.107, _136, y.109, ret.110, ])
// [KnfOpt] Knf inline Some(calc_pixel) let res.130: Int = Unit
// [KnfOpt] let _131: Int = Mul(y.109, w.106)
// [KnfOpt] let _132: Int = Add(_131, x.108)
// [KnfOpt] let _156: Int = Int(0)
// [KnfOpt] if (res.130 <= _156) then {
// [KnfOpt]   let _133: Int = Int(0)
// [KnfOpt]   let _134: Unit = Put ret.110[_132] = _133
// [KnfOpt]   let _135: Int = Int(1)
// [KnfOpt]   let _136: Int = Add(x.108, _135)
// [KnfOpt]   Jump(main_loop.105, [w.106, h.107, _136, y.109, ret.110, ])
// [KnfOpt] } else {
// [KnfOpt]   let _157: Int = Int(48)
// [KnfOpt]   if (_157 <= res.130) then {
// [KnfOpt]     let _133: Int = Int(48)
// [KnfOpt]     let _134: Unit = Put ret.110[_132] = _133
// [KnfOpt]     let _135: Int = Int(1)
// [KnfOpt]     let _136: Int = Add(x.108, _135)
// [KnfOpt]     Jump(main_loop.105, [w.106, h.107, _136, y.109, ret.110, ])
// [KnfOpt]   } else {
// [KnfOpt]     let _133: Int = Var(res.130)
// [KnfOpt]     let _134: Unit = Put ret.110[_132] = _133
// [KnfOpt]     let _135: Int = Int(1)
// [KnfOpt]     let _136: Int = Add(x.108, _135)
// [KnfOpt]     Jump(main_loop.105, [w.106, h.107, _136, y.109, ret.110, ])
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Knf inline Some(clamp) let _133: Int = Unit
// [KnfOpt] let _134: Unit = Put ret.110[_132] = _133
// [KnfOpt] let _135: Int = Int(1)
// [KnfOpt] let _136: Int = Add(x.108, _135)
// [KnfOpt] Jump(main_loop.105, [w.106, h.107, _136, y.109, ret.110, ])
// [KnfOpt] Knf inline Some(clamp) let _133: Int = Unit
// [KnfOpt] let _134: Unit = Put ret.110[_132] = _133
// [KnfOpt] let _135: Int = Int(1)
// [KnfOpt] let _136: Int = Add(x.108, _135)
// [KnfOpt] Jump(main_loop.105, [w.106, h.107, _136, y.109, ret.110, ])
// [KnfOpt] Knf inline Some(print_loop) let _89: Unit = Unit
// [KnfOpt] Unit
// [KnfOpt] freq: {main_loop.26: Once, main_loop.105: Many(8), calc_pixel.158: Many(2), main.77: Once, print_loop.177: Many(3)}
// [KnfOpt] Numbers of let rec: 2 2 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f12: Once, f4: Once, f8: Once, f16: Once, f0: Once, f13: Once, f10: Once, f2: Once})
// [CoreOpt] LVN subst Insn(iref=%1) with Insn(iref=%0)
