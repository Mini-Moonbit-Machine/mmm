# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn fill_buffer.83 #f1 : fn(array[int32], int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f0(0, 12345, $f1, $f0)
    return %0
  }
}
.fn aux.89 #f5 : fn(int32, int32, array[int32]) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (int32, int32, array[int32]) {
    let %0: bool = eq($b0.0, $b0.1)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3(())
  }
  .bb #b2 () {
    let %1: int32 = load int32 offset($b0.2, $b0.0 * @32)
    let %2: unit = ext_call minimbt_print_int(%1)
    let %3: unit = ext_call minimbt_print_char(32)
    let %4: int32 = add($b0.0, 1)
    jump b0(%4, $b0.1, $b0.2)
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1, $f2)
  }
}
.fn aux.84 #f0 : fn(int32, int32, int32, array[int32]) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (int32, int32, int32, array[int32]) {
    let %0: bool = eq($b0.0, $b0.2)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3(())
  }
  .bb #b2 () {
    let %1: int32 = mul($b0.1, 75)
    let %2: int32 = add(%1, 74)
    let %3: int32 = div(%2, 65537)
    let %4: int32 = mul(%3, 65537)
    let %5: int32 = sub(%2, %4)
    let _ = store int32 offset($b0.3, $b0.0 * @32) <- %5
    let %7: int32 = add($b0.0, 1)
    jump b0(%7, %5, $b0.2, $b0.3)
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1, $f2, $f3)
  }
}
.fn main.90 #f7 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap(100)> <- [..] = 0
    let %1: unit = call f1(f7.m0, 100)
    let %2: unit = call f4(f7.m0, 100)
    let %3: unit = call f6(f7.m0, 100)
    return %3
  }
}
.fn print_array.88 #f6 : fn(array[int32], int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f5(0, $f1, $f0)
    return %0
  }
}
.fn aux.87 #f3 : fn(int32, int32, array[int32]) -> unit
.freevars ()
.entry b8 {
  .bb #b0 (int32, int32, array[int32]) {
    let %0: bool = eq($b0.0, $b0.1)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b6(())
  }
  .bb #b2 () {
    let %1: unit = call f2($b0.2, $b0.0)
    let %2: int32 = add($b0.0, 1)
    let %3: bool = eq(%2, $b0.1)
    br %3 b3() b4()
  }
  .bb #b3 () {
    jump b5(())
  }
  .bb #b4 () {
    let %4: unit = call f2($b0.2, %2)
    let %5: int32 = add(%2, 1)
    jump b0(%5, $b0.1, $b0.2)
  }
  .bb #b5 (unit) {
    jump b6($b5.0)
  }
  .bb #b6 (unit) {
    return $b6.0
  }
  .loop #b7 pre #Some(b8) header #b0 {
    .block #b6
    .block #b4
    .block #b1
    .block #b5
    .block #b2
    .block #b3
  }
  .bb #b8 () {
    jump b7($f0, $f1, $f2)
  }
}
.fn T$start #f16 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f7()
    return %0
  }
}
.fn isort.85 #f4 : fn(array[int32], int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = eq(1, $f1)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3(())
  }
  .bb #b2 () {
    let %1: unit = call f2($f0, 1)
    let %2: int32 = add(1, 1)
    let %3: unit = call f3(%2, $f1, $f0)
    jump b3(%3)
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn insert.86 #f2 : fn(array[int32], int32) -> unit
.freevars ()
.entry b8 {
  .bb #b0 (array[int32], int32) {
    let %0: bool = eq($b0.1, 0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b6(())
  }
  .bb #b2 () {
    let %1: int32 = sub($b0.1, 1)
    let %2: int32 = load int32 offset($b0.0, %1 * @32)
    let %3: int32 = load int32 offset($b0.0, $b0.1 * @32)
    let %4: bool = le(%2, %3)
    br %4 b3() b4()
  }
  .bb #b3 () {
    jump b5(())
  }
  .bb #b4 () {
    let %5: int32 = load int32 offset($b0.0, $b0.1 * @32)
    let %6: int32 = sub($b0.1, 1)
    let %7: int32 = load int32 offset($b0.0, %6 * @32)
    let _ = store int32 offset($b0.0, $b0.1 * @32) <- %7
    let _ = store int32 offset($b0.0, %6 * @32) <- %5
    jump b0($b0.0, %6)
  }
  .bb #b5 (unit) {
    jump b6($b5.0)
  }
  .bb #b6 (unit) {
    return $b6.0
  }
  .loop #b7 pre #Some(b8) header #b0 {
    .block #b6
    .block #b4
    .block #b1
    .block #b5
    .block #b2
    .block #b3
  }
  .bb #b8 () {
    jump b7($f0, $f1)
  }
}
.thunk ::0 start
