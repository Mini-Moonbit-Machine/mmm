# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn main85.147 #f4 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap(100)> <- [..] = 0
    let %1: unit = call f0(0, 12345, 100, f4.m0)
    let %2: unit = call f2(1, 100, f4.m0)
    let %3: unit = call f3(0, 100, f4.m0)
    return %3
  }
}
.fn aux60.150 #f2 : fn(int32, int32, array[int32]) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (int32, int32, array[int32]) {
    let %0: bool = eq($b0.0, $b0.1)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3(())
  }
  .bb #b2 () {
    jump b15()
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1, $f2)
  }
  .bb #b6 (unit) {
    let %2: int32 = add($b0.0, 1)
    jump b0(%2, $b0.1, $b0.2)
  }
  .bb #b7 (array[int32], int32) {
    let %3: bool = eq($b7.1, 0)
    br %3 b8() b9()
  }
  .bb #b8 () {
    jump b13(())
  }
  .bb #b9 () {
    let %4: int32 = sub($b7.1, 1)
    let %16: ptr = compute_address unit offset(0, %4 * @32)
    let %5: int32 = load int32 raw($b7.0, %16)
    let %15: ptr = compute_address unit offset(0, $b7.1 * @32)
    let %6: int32 = load int32 raw($b7.0, %15)
    let %7: bool = le(%5, %6)
    br %7 b10() b11()
  }
  .bb #b10 () {
    jump b12(())
  }
  .bb #b11 () {
    let %26: ptr = compute_address unit offset(0, $b7.1 * @32)
    let %8: int32 = load int32 raw($b7.0, %26)
    let %9: int32 = sub($b7.1, 1)
    let %25: ptr = compute_address unit offset(0, %9 * @32)
    let %10: int32 = load int32 raw($b7.0, %25)
    let %23: ptr = compute_address unit offset(0, $b7.1 * @32)
    let _ = store int32 raw($b7.0, %23) <- %10
    let %20: ptr = compute_address unit offset(0, %9 * @32)
    let _ = store int32 raw($b7.0, %20) <- %8
    jump b7($b7.0, %9)
  }
  .bb #b12 (unit) {
    jump b13($b12.0)
  }
  .bb #b13 (unit) {
    jump b6($b13.0)
  }
  .loop #b14 pre #Some(b15) header #b7 {
    .block #b13
    .block #b11
    .block #b8
    .block #b12
    .block #b9
    .block #b10
  }
  .bb #b15 () {
    jump b14($b0.2, $b0.0)
  }
}
.fn aux19.148 #f0 : fn(int32, int32, int32, array[int32]) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (int32, int32, int32, array[int32]) {
    let %0: bool = eq($b0.0, $b0.2)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3(())
  }
  .bb #b2 () {
    let %1: int32 = mul($b0.1, 75)
    let %2: int32 = add(%1, 74)
    let %3: int32 = div(%2, 65537)
    let %4: int32 = mul(%3, 65537)
    let %5: int32 = sub(%2, %4)
    let %8: ptr = compute_address unit offset(0, $b0.0 * @32)
    let _ = store int32 raw($b0.3, %8) <- %5
    let %7: int32 = add($b0.0, 1)
    jump b0(%7, %5, $b0.2, $b0.3)
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1, $f2, $f3)
  }
}
.fn aux73.151 #f3 : fn(int32, int32, array[int32]) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (int32, int32, array[int32]) {
    let %0: bool = eq($b0.0, $b0.1)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3(())
  }
  .bb #b2 () {
    let %5: ptr = compute_address unit offset(0, $b0.0 * @32)
    let %1: int32 = load int32 raw($b0.2, %5)
    let %2: unit = ext_call minimbt_print_int(%1)
    let %3: unit = ext_call minimbt_print_char(32)
    let %4: int32 = add($b0.0, 1)
    jump b0(%4, $b0.1, $b0.2)
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1, $f2)
  }
}
.fn T$start #f10 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f4()
    return %0
  }
}
.thunk ::0 start

