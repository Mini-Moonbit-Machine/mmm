let limit.1: Double = Double(2)
let limit_sq.2: Double = Double(4)
let _4: Double = Double(0.123)
let c_re.5: Double = Double(-0.123)
let c_im.6: Double = Double(0.745)
let rec calc_pixel.112: Int = (zr.9: Double, zi.11: Double, it.13: Int) {
  let zr2.14: Double = FMul(zr.9, zr.9)
  let zi2.15: Double = FMul(zi.11, zi.11)
  let _111: Int = Int(300)
  if (it.13 == _111) then {
    Int(300)
  } else {
    let _16: Double = FAdd(zr2.14, zi2.15)
    if (limit_sq.2 <= _16) then {
      Var(it.13)
    } else {
      let _17: Double = Double(2)
      let _18: Double = FMul(_17, zr.9)
      let _19: Double = FMul(_18, zi.11)
      let new_zi.20: Double = FAdd(_19, c_im.6)
      let _21: Double = FSub(zr2.14, zi2.15)
      let new_zr.22: Double = FAdd(_21, c_re.5)
      let _23: Int = Int(1)
      let _24: Int = Add(it.13, _23)
      Apply(calc_pixel.112, [new_zr.22, new_zi.20, _24, ])
    }
  }
}
let rec main_loop.113: Unit = (w.32: Int, h.34: Int, x.36: Int, y.38: Int, ret.40: Array(Int)) {
  if (y.38 == h.34) then {
    Unit
  } else {
    if (x.36 == w.32) then {
      let _41: Int = Int(0)
      let _42: Int = Int(1)
      let _43: Int = Add(y.38, _42)
      Apply(main_loop.113, [w.32, h.34, _41, _43, ret.40, ])
    } else {
      let _44: Double = Double(3)
      let _45: Double = ExtApply(minimbt_float_of_int, [x.36, ])
      let _46: Double = FMul(_44, _45)
      let _47: Double = ExtApply(minimbt_float_of_int, [w.32, ])
      let _48: Double = FDiv(_46, _47)
      let _49: Double = Double(1.5)
      let _50: Double = FSub(_48, _49)
      let cr.51: Double = FNeg(_50)
      let _52: Double = Double(3)
      let _53: Double = ExtApply(minimbt_float_of_int, [y.38, ])
      let _54: Double = FMul(_52, _53)
      let _55: Double = ExtApply(minimbt_float_of_int, [h.34, ])
      let _56: Double = FDiv(_54, _55)
      let _57: Double = Double(1.5)
      let ci.58: Double = FSub(_56, _57)
      let _59: Int = Int(0)
      let res.60: Int = Apply(calc_pixel.112, [cr.51, ci.58, _59, ])
      let _61: Int = Mul(y.38, w.32)
      let _62: Int = Add(_61, x.36)
      let _109: Int = Int(0)
      let _63: Int = if (res.60 <= _109) then {
        Int(0)
      } else {
        let _110: Int = Int(48)
        if (_110 <= res.60) then {
          Int(48)
        } else {
          Var(res.60)
        }
      }
      let _65: Unit = Put ret.40[_62] = _63
      let _66: Int = Int(1)
      let _67: Int = Add(x.36, _66)
      Apply(main_loop.113, [w.32, h.34, _67, y.38, ret.40, ])
    }
  }
}
let rec print_loop.114: Unit = (w.70: Int, h.72: Int, x.74: Int, y.76: Int, ret.78: Array(Int)) {
  if (y.76 == h.72) then {
    Unit
  } else {
    if (x.74 == w.70) then {
      let _79: Int = Int(10)
      let _81: Unit = ExtApply(minimbt_print_char, [_79, ])
      let _82: Int = Int(0)
      let _83: Int = Int(1)
      let _84: Int = Add(y.76, _83)
      Apply(print_loop.114, [w.70, h.72, _82, _84, ret.78, ])
    } else {
      let _85: Int = Int(48)
      let _86: Int = Mul(y.76, w.70)
      let _87: Int = Add(_86, x.74)
      let _88: Int = Get ret.78[_87]
      let _89: Int = Add(_85, _88)
      let _91: Unit = ExtApply(minimbt_print_char, [_89, ])
      let _92: Int = Int(1)
      let _93: Int = Add(x.74, _92)
      Apply(print_loop.114, [w.70, h.72, _93, y.76, ret.78, ])
    }
  }
}
let rec main.115: Var({val: Some(Unit)}) = () {
  let h.95: Int = ExtApply(minimbt_read_int, [])
  let _96: Int = Int(2)
  let w.97: Int = Mul(h.95, _96)
  let _98: Int = Mul(w.97, h.95)
  let _99: Int = Int(0)
  let ret.100: Array(Int) = ExtApply(minimbt_create_array, [_98, _99, ])
  let _101: Int = Int(0)
  let _102: Int = Int(0)
  let _104: Unit = Apply(main_loop.113, [w.97, h.95, _101, _102, ret.100, ])
  let _105: Int = Int(0)
  let _106: Int = Int(0)
  let _108: Unit = Apply(print_loop.114, [w.97, h.95, _105, _106, ret.100, ])
  Unit
}
Apply(main.115, [])
