let rec random.1: Int = (state.3: Int) {
  let _4: Int = Int(75)
  let _5: Int = Mul(state.3, _4)
  let _6: Int = Int(74)
  Add(_5, _6)
}
let rec modulo.7: Int = (x.9: Int, y.11: Int) {
  let q.12: Int = Div(x.9, y.11)
  let _13: Int = Mul(q.12, y.11)
  Sub(x.9, _13)
}
let rec fill_buffer.14: Unit = (arr.16: Array(Int), n.18: Int) {
  let rec aux.19: Unit = (i.21: Int, state.23: Int) {
    if (i.21 == n.18) then {
      Unit
    } else {
      let new_state.24: Int = Apply(random.1, [state.23, ])
      let _25: Int = Int(65537)
      let res.26: Int = Apply(modulo.7, [new_state.24, _25, ])
      let _28: Unit = Put arr.16[i.21] = res.26
      let _29: Int = Int(1)
      let _30: Int = Add(i.21, _29)
      Apply(aux.19, [_30, res.26, ])
    }
  }
  let _31: Int = Int(0)
  let _32: Int = Int(12345)
  Apply(aux.19, [_31, _32, ])
}
let rec isort.33: Unit = (arr.35: Array(Int), n.37: Int) {
  let rec insert.38: Unit = (arr.40: Array(Int), i.42: Int) {
    let _43: Int = Int(0)
    if (i.42 == _43) then {
      Unit
    } else {
      let _44: Int = Int(1)
      let _45: Int = Sub(i.42, _44)
      let _46: Int = Get arr.40[_45]
      let _47: Int = Get arr.40[i.42]
      if (_46 <= _47) then {
        Unit
      } else {
        let tmp.48: Int = Get arr.40[i.42]
        let _49: Int = Int(1)
        let _50: Int = Sub(i.42, _49)
        let _51: Int = Get arr.40[_50]
        let _53: Unit = Put arr.40[i.42] = _51
        let _54: Int = Int(1)
        let _55: Int = Sub(i.42, _54)
        let _57: Unit = Put arr.40[_55] = tmp.48
        let _58: Int = Int(1)
        let _59: Int = Sub(i.42, _58)
        Apply(insert.38, [arr.40, _59, ])
      }
    }
  }
  let rec aux.60: Unit = (i.62: Int) {
    if (i.62 == n.37) then {
      Unit
    } else {
      let _64: Unit = Apply(insert.38, [arr.35, i.62, ])
      let _65: Int = Int(1)
      let _66: Int = Add(i.62, _65)
      Apply(aux.60, [_66, ])
    }
  }
  let _67: Int = Int(1)
  Apply(aux.60, [_67, ])
}
let rec print_array.68: Unit = (arr.70: Array(Int), n.72: Int) {
  let rec aux.73: Unit = (i.75: Int) {
    if (i.75 == n.72) then {
      Unit
    } else {
      let _76: Int = Get arr.70[i.75]
      let _78: Unit = ExtApply(minimbt_print_int, [_76, ])
      let _79: Int = Int(32)
      let _81: Unit = ExtApply(minimbt_print_char, [_79, ])
      let _82: Int = Int(1)
      let _83: Int = Add(i.75, _82)
      Apply(aux.73, [_83, ])
    }
  }
  let _84: Int = Int(0)
  Apply(aux.73, [_84, ])
}
let rec main.85: Unit = () {
  let n.86: Int = Int(100)
  let _87: Int = Int(0)
  let arr.88: Array(Int) = ExtApply(minimbt_create_array, [n.86, _87, ])
  let _90: Unit = Apply(fill_buffer.14, [arr.88, n.86, ])
  let _92: Unit = Apply(isort.33, [arr.88, n.86, ])
  Apply(print_array.68, [arr.88, n.86, ])
}
Apply(main.85, [])
