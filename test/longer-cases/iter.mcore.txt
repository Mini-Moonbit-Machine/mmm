  .p2align 4
  .bss
  .type large_heap, @object
large_heap:
  .zero 1610612736
large_heap_end:

  .p2align 4
  .bss
  .type large_stack, @object
large_stack:
  .zero 268435456
large_stack_end:

__begin_text:
  .p2align 2
  .text
  .globl do.54
  .type do.54, @function
# leaf false
do.54:
.do.54_5:
  addi sp, sp, -32
  sd ra, 0(sp)
  sd s0, 8(sp)
  sd s1, 16(sp)
  mv s0, a0
  mv s1, a1

.do.54_0:
  addi a0, s11, -16
  andi s11, a0, -8
  la a1, yield.55
  sd a1, 0(a0)
  sd s0, 8(a0)
  mv s10, s1
  ld a1, 0(s1)
  jalr a1
  li a1, 1
  bne a0, a1, .do.54_2

.do.54_1:
  j .do.54_0

.do.54_2:
  mv a0, zero

.do.54_3:
  ld ra, 0(sp)
  ld s0, 8(sp)
  ld s1, 16(sp)
  addi sp, sp, 32
  ret

  .p2align 2
  .text
  .globl yield.53
  .type yield.53, @function
# leaf false
yield.53:
.yield.53_0:
  addi sp, sp, -16
  sd ra, 0(sp)
  mv s10, a1
  ld a1, 0(a1)
  jalr a1
  li a0, 1
  ld ra, 0(sp)
  addi sp, sp, 16
  ret

  .p2align 2
  .text
  .globl print.58
  .type print.58, @function
# leaf false
print.58:
.print.58_0:
  addi sp, sp, -16
  sd ra, 0(sp)
  mv a1, s10
  call print.57
  ld ra, 0(sp)
  addi sp, sp, 16
  ret

  .p2align 2
  .text
  .globl each.52
  .type each.52, @function
# leaf false
each.52:
.each.52_0:
  addi sp, sp, -16
  sd ra, 0(sp)
  mv a2, a0
  mv a0, a1
  mv a1, a2
  call do.54
  ld ra, 0(sp)
  addi sp, sp, 16
  ret

  .p2align 2
  .text
  .globl yield.55
  .type yield.55, @function
# leaf false
yield.55:
.yield.55_0:
  addi sp, sp, -16
  sd ra, 0(sp)
  mv a1, s10
  ld a1, 8(a1)
  call yield.53
  ld ra, 0(sp)
  addi sp, sp, 16
  ret

  .p2align 2
  .text
  .globl do.51
  .type do.51, @function
# leaf false
do.51:
.do.51_0:
  addi sp, sp, -16
  sd ra, 0(sp)
  mv a1, s10
  ld a2, 8(a1)
  lw a3, 16(a1)
  mv a1, a2
  mv a2, a3
  call do.49
  ld ra, 0(sp)
  addi sp, sp, 16
  ret

  .p2align 2
  .text
  .globl main.56
  .type main.56, @function
# leaf false
main.56:
.main.56_0:
  addi sp, sp, -16
  sd ra, 0(sp)
  addi a0, s11, -20
  andi s11, a0, -8
  li a1, 1
  sw a1, 0(a0)
  sw a1, 4(a0)
  sw a1, 8(a0)
  sw a1, 12(a0)
  sw a1, 16(a0)
  li a1, 1
  sw a1, 0(a0)
  li a1, 2
  sw a1, 4(a0)
  li a1, 3
  sw a1, 8(a0)
  li a1, 4
  sw a1, 12(a0)
  li a1, 5
  sw a1, 16(a0)
  li a1, 5
  call iter.48
  addi a1, s11, -8
  andi s11, a1, -8
  la a2, print.58
  sd a2, 0(a1)
  call each.52
  ld ra, 0(sp)
  addi sp, sp, 16
  ret

  .p2align 2
  .text
  .globl do.49
  .type do.49, @function
# leaf false
do.49:
.do.49_0:
  addi sp, sp, -16
  sd ra, 0(sp)
  mv a3, a0
  mv a0, zero
  call next.50
  ld ra, 0(sp)
  addi sp, sp, 16
  ret

  .p2align 2
  .text
  .globl iter.48
  .type iter.48, @function
# leaf true
iter.48:
.iter.48_0:
  addi a2, s11, -24
  andi s11, a2, -8
  la a3, do.51
  sd a3, 0(a2)
  sd a0, 8(a2)
  sd a1, 16(a2)
  mv a0, a2
  ret

  .p2align 2
  .text
  .globl print.57
  .type print.57, @function
# leaf false
print.57:
.print.57_0:
  addi sp, sp, -16
  sd ra, 0(sp)
  call minimbt_print_int
  ld ra, 0(sp)
  addi sp, sp, 16
  ret

  .p2align 2
  .text
  .globl next.50
  .type next.50, @function
# leaf false
next.50:
.next.50_8:
  addi sp, sp, -48
  sd ra, 0(sp)
  sd s0, 8(sp)
  sd s1, 16(sp)
  sd s2, 24(sp)
  sd s3, 32(sp)
  mv s0, a0
  mv s1, a1
  mv s2, a2
  mv s3, a3

.next.50_0:
  addi a0, s2, -1
  blt a0, s0, .next.50_2

.next.50_1:
  slliw a0, s0, 2
  add a0, s1, a0
  lw a0, 0(a0)
  mv s10, s3
  ld a1, 0(s3)
  jalr a1
  li a1, 1
  bne a0, a1, .next.50_4

.next.50_3:
  addi a0, s0, 1
  mv s0, a0
  j .next.50_0

.next.50_2:
  mv a0, zero

.next.50_6:
  ld ra, 0(sp)
  ld s0, 8(sp)
  ld s1, 16(sp)
  ld s2, 24(sp)
  ld s3, 32(sp)
  addi sp, sp, 48
  ret

.next.50_4:
  mv a0, zero

.next.50_5:
  j .next.50_6

  .p2align 2
  .text
  .globl T$start
  .type T$start, @function
# leaf false
T$start:
.T$start_0:
  addi sp, sp, -16
  sd ra, 0(sp)
  call main.56
  ld ra, 0(sp)
  addi sp, sp, 16
  ret

  .p2align 2
  .text
  .globl minimbt_main
  .type minimbt_main, @function
# leaf false
minimbt_main:
.minimbt_main_b0:
  addi sp, sp, -32
  sd ra, 0(sp)
  sd s0, 8(sp)
  sd s11, 16(sp)
  la s11, large_heap_end
  mv s0, sp
  la sp, large_stack_end
  call T$start
  mv sp, s0
  ld ra, 0(sp)
  ld s0, 8(sp)
  ld s11, 16(sp)
  addi sp, sp, 32
  ret

__end_text:
  .p2align 2
  .bss
  .globl start
  .type start, @object
start:
  .zero 4
