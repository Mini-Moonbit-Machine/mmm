let rec fannkuch: (n: Int) -> Tuple([Int, Int]) {
  let rec gen_perm1: (len: Int) -> Array(Int) {
    let arr: Array(Int) = Array::make(Var("len"), Int(0))
    let rec init_arr: (i: Int) -> Unit {
      if (LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int)))) then {
        let _: Unit = Put Var("arr")[Var("i")] = Var("i")
        Apply(Var("init_arr"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), ])
      } else {
        Unit
      }
    }
    let _: Unit = Apply(Var("init_arr"), [Int(0), ])
    Var(arr)
  }
  let perm1: Array(Int) = Apply(Var("gen_perm1"), [Var("n"), ])
  let perm: Array(Int) = Array::make(Var("n"), Int(0))
  let count: Array(Int) = Array::make(Var("n"), Int(0))
  let flips: Array(Int) = Array::make(Int(1), Int(0))
  let max_flips: Array(Int) = Array::make(Int(1), Int(0))
  let check_sum: Array(Int) = Array::make(Int(1), Int(0))
  let nperm: Array(Int) = Array::make(Int(1), Int(0))
  let r: Array(Int) = Array::make(Int(1), Var("n"))
  let rec compute: (r: Array(Int)) -> Unit {
    if (LE(Int(1), Get(Var("r"), Int(0)))) then {
      let rec copy_perm: (i: Int) -> Unit {
        if (LE(Var("i"), Prim(Var("n"), Int(1), Sub, kind=Some(Int)))) then {
          let _: Unit = Put Var("perm")[Var("i")] = Get(Var("perm1"), Var("i"))
          Apply(Var("copy_perm"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), ])
        } else {
          Unit
        }
      }
      let _: Unit = Apply(Var("copy_perm"), [Int(0), ])
      let rec init_count: () -> Unit {
        let _: Unit = if (Not(Eq(Get(Var("r"), Int(0)), Int(1)))) then {
          let _: Unit = Put Var("count")[Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))] = Get(Var("r"), Int(0))
          let _: Unit = Put Var("r")[Int(0)] = Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int))
          Apply(Var("init_count"), [])
        } else {
          Unit
        }
        Unit
      }
      let _: Unit = Apply(Var("init_count"), [])
      let _: Unit = Put Var("flips")[Int(0)] = Int(0)
      let k: Array(Int) = Array::make(Int(1), Get(Var("perm"), Int(0)))
      let rec do_flip: (k: Array(Int)) -> Unit {
        if (Not(Eq(Get(Var("k"), Int(0)), Int(0)))) then {
          let t: Array(Int) = Array::make(Int(1), Int(0))
          let rec flip_loop: (i: Int) -> Unit {
            if (LE(Var("i"), Prim(Get(Var("k"), Int(0)), Int(2), Div, kind=Some(Int)))) then {
              let _: Unit = Put Var("t")[Int(0)] = Get(Var("perm"), Var("i"))
              let _: Unit = Put Var("perm")[Var("i")] = Get(Var("perm"), Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int)))
              let _: Unit = Put Var("perm")[Prim(Get(Var("k"), Int(0)), Var("i"), Sub, kind=Some(Int))] = Get(Var("t"), Int(0))
              Apply(Var("flip_loop"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), ])
            } else {
              Unit
            }
          }
          let _: Unit = Apply(Var("flip_loop"), [Int(0), ])
          let _: Unit = Put Var("k")[Int(0)] = Get(Var("perm"), Int(0))
          let _: Unit = Put Var("flips")[Int(0)] = Prim(Get(Var("flips"), Int(0)), Int(1), Add, kind=Some(Int))
          Apply(Var("do_flip"), [Var("k"), ])
        } else {
          Unit
        }
      }
      let _: Unit = Apply(Var("do_flip"), [Var("k"), ])
      let _: Unit = if (LE(Get(Var("max_flips"), Int(0)), Get(Var("flips"), Int(0)))) then {
        Put Var("max_flips")[Int(0)] = Get(Var("flips"), Int(0))
      } else {
        Unit
      }
      let _: Unit = Put Var("check_sum")[Int(0)] = Prim(Get(Var("check_sum"), Int(0)), Prim(Get(Var("flips"), Int(0)), Prim(Int(1), Prim(Prim(Get(Var("nperm"), Int(0)), Prim(Prim(Get(Var("nperm"), Int(0)), Int(2), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Sub, kind=Some(Int)), Mul, kind=Some(Int)), Add, kind=Some(Int))
      let go: Array(Bool) = Array::make(Int(1), Bool(true))
      let t: Array(Int) = Array::make(Int(1), Int(0))
      let rec go_loop: () -> Unit {
        if (Get(Var("go"), Int(0))) then {
          let _: Unit = if (Eq(Get(Var("r"), Int(0)), Var("n"))) then {
            let _: Unit = Put Var("go")[Int(0)] = Bool(false)
            let _: Unit = Put Var("r")[Int(0)] = Int(0)
            Unit
          } else {
            let _: Unit = Put Var("t")[Int(0)] = Get(Var("perm1"), Int(0))
            let rec move_perm1_forward: (i: Int) -> Unit {
              if (LE(Var("i"), Prim(Get(Var("r"), Int(0)), Int(1), Sub, kind=Some(Int)))) then {
                let _: Unit = Put Var("perm1")[Var("i")] = Get(Var("perm1"), Prim(Var("i"), Int(1), Add, kind=Some(Int)))
                let _: Unit = Apply(Var("move_perm1_forward"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), ])
                Unit
              } else {
                Unit
              }
            }
            let _: Unit = Apply(Var("move_perm1_forward"), [Int(0), ])
            let _: Unit = Put Var("perm1")[Get(Var("r"), Int(0))] = Get(Var("t"), Int(0))
            let _: Unit = Put Var("count")[Get(Var("r"), Int(0))] = Prim(Get(Var("count"), Get(Var("r"), Int(0))), Int(1), Sub, kind=Some(Int))
            let _: Unit = if (LE(Int(1), Get(Var("count"), Get(Var("r"), Int(0))))) then {
              Put Var("go")[Int(0)] = Bool(false)
            } else {
              Put Var("r")[Int(0)] = Prim(Get(Var("r"), Int(0)), Int(1), Add, kind=Some(Int))
            }
            Unit
          }
          Apply(Var("go_loop"), [])
        } else {
          Unit
        }
      }
      let _: Unit = Apply(Var("go_loop"), [])
      let _: Unit = Put Var("nperm")[Int(0)] = Prim(Get(Var("nperm"), Int(0)), Int(1), Add, kind=Some(Int))
      Apply(Var("compute"), [Var("r"), ])
    } else {
      Unit
    }
  }
  let _: Unit = Apply(Var("compute"), [Var("r"), ])
  Tuple([Get(Var("max_flips"), Int(0)), Get(Var("check_sum"), Int(0)), ])
}
let rec main: () -> Unit {
  let (max_flips: Int, check_sum: Int) = App(Var("fannkuch"), [Int(9)])
  let _: Unit = Apply(Var("print_int"), [Var("check_sum"), ])
  Apply(Var("print_int"), [Var("max_flips"), ])
}
Unit
