let rec read_ch_until_newline_or_eof.245: Int = () {
  let c.2: Int = ExtApply(minimbt_read_char, [])
  let _3: Int = Int(10)
  if (c.2 == _3) then {
    Int(-1)
  } else {
    let _4: Int = Int(13)
    if (c.2 == _4) then {
      Int(-1)
    } else {
      Var(c.2)
    }
  }
}
let rec skip.248: Var({val: Some(Int)}) = (pc.145: Var({val: Some(Int)}), level.146: Int, i.125: Var({val: Some(Int)}), prog.123: Array(Int)) {
  if (i.125 <= pc.145) then {
    Var(pc.145)
  } else {
    let i.147: Int = Get prog.123[pc.145]
    let _148: Int = Int(91)
    if (i.147 == _148) then {
      let _149: Int = Int(1)
      let _150: Int = Add(pc.145, _149)
      let _151: Int = Int(1)
      let _152: Int = Add(level.146, _151)
      Apply(skip.248, [_150, _152, i.125, prog.123, ])
    } else {
      let _153: Int = Int(93)
      if (i.147 == _153) then {
        let _154: Int = Int(0)
        if (level.146 == _154) then {
          Var(pc.145)
        } else {
          let _155: Int = Int(1)
          let _156: Int = Add(pc.145, _155)
          let _157: Int = Int(1)
          let _158: Int = Sub(level.146, _157)
          Apply(skip.248, [_156, _158, i.125, prog.123, ])
        }
      } else {
        let _159: Int = Int(1)
        let _160: Int = Add(pc.145, _159)
        Apply(skip.248, [_160, level.146, i.125, prog.123, ])
      }
    }
  }
}
let rec lp.250: Var({val: Some(Unit)}) = (i.125: Var({val: Some(Int)}), pc.162: Var({val: Some(Int)}), ptr.135: Array(Int), prog.123: Array(Int), cells.140: Array(Int), next_pc.143: Array(Int)) {
  let _222: Int = Int(0)
  let _223: Int = Get ptr.135[_222]
  let _224: Int = Get cells.140[_223]
  let _225: Int = Int(0)
  if (_224 == _225) then {
    let _226: Int = Int(0)
    let _227: Int = Int(1)
    let _228: Int = Add(pc.162, _227)
    let _229: Int = Int(0)
    let _230: Var({val: Some(Int)}) = Apply(skip.248, [_228, _229, i.125, prog.123, ])
    let _231: Unit = Put next_pc.143[_226] = _230
    Unit
  } else {
    let _232: Int = Int(0)
    let _233: Int = Int(1)
    let _234: Int = Add(pc.162, _233)
    let _235: Var({val: Some(Int)}) = Apply(aux.249, [_234, i.125, ptr.135, prog.123, cells.140, next_pc.143, ])
    let _236: Unit = Put next_pc.143[_232] = _235
    Apply(lp.250, [i.125, pc.162, ptr.135, prog.123, cells.140, next_pc.143, ])
  }
}
let rec aux.249: Var({val: Some(Int)}) = (pc.162: Var({val: Some(Int)}), i.125: Var({val: Some(Int)}), ptr.135: Array(Int), prog.123: Array(Int), cells.140: Array(Int), next_pc.143: Array(Int)) {
  if (i.125 <= pc.162) then {
    Var(pc.162)
  } else {
    let i.163: Int = Get prog.123[pc.162]
    let _164: Int = Int(62)
    if (i.163 == _164) then {
      let _165: Int = Int(0)
      let _166: Int = Int(0)
      let _167: Int = Get ptr.135[_166]
      let _168: Int = Int(1)
      let _169: Int = Add(_167, _168)
      let _170: Unit = Put ptr.135[_165] = _169
      let _171: Int = Int(1)
      let _172: Int = Add(pc.162, _171)
      Apply(aux.249, [_172, i.125, ptr.135, prog.123, cells.140, next_pc.143, ])
    } else {
      let _173: Int = Int(60)
      if (i.163 == _173) then {
        let _174: Int = Int(0)
        let _175: Int = Int(0)
        let _176: Int = Get ptr.135[_175]
        let _177: Int = Int(1)
        let _178: Int = Sub(_176, _177)
        let _179: Unit = Put ptr.135[_174] = _178
        let _180: Int = Int(1)
        let _181: Int = Add(pc.162, _180)
        Apply(aux.249, [_181, i.125, ptr.135, prog.123, cells.140, next_pc.143, ])
      } else {
        let _182: Int = Int(43)
        if (i.163 == _182) then {
          let _183: Int = Int(0)
          let _184: Int = Get ptr.135[_183]
          let _185: Int = Int(0)
          let _186: Int = Get ptr.135[_185]
          let _187: Int = Get cells.140[_186]
          let _188: Int = Int(1)
          let _189: Int = Add(_187, _188)
          let _190: Unit = Put cells.140[_184] = _189
          let _191: Int = Int(1)
          let _192: Int = Add(pc.162, _191)
          Apply(aux.249, [_192, i.125, ptr.135, prog.123, cells.140, next_pc.143, ])
        } else {
          let _193: Int = Int(45)
          if (i.163 == _193) then {
            let _194: Int = Int(0)
            let _195: Int = Get ptr.135[_194]
            let _196: Int = Int(0)
            let _197: Int = Get ptr.135[_196]
            let _198: Int = Get cells.140[_197]
            let _199: Int = Int(1)
            let _200: Int = Sub(_198, _199)
            let _201: Unit = Put cells.140[_195] = _200
            let _202: Int = Int(1)
            let _203: Int = Add(pc.162, _202)
            Apply(aux.249, [_203, i.125, ptr.135, prog.123, cells.140, next_pc.143, ])
          } else {
            let _204: Int = Int(46)
            if (i.163 == _204) then {
              let _205: Int = Int(0)
              let _206: Int = Get ptr.135[_205]
              let _207: Int = Get cells.140[_206]
              let _208: Unit = ExtApply(minimbt_print_char, [_207, ])
              let _209: Int = Int(1)
              let _210: Int = Add(pc.162, _209)
              Apply(aux.249, [_210, i.125, ptr.135, prog.123, cells.140, next_pc.143, ])
            } else {
              let _211: Int = Int(44)
              if (i.163 == _211) then {
                let _212: Int = Int(0)
                let _213: Int = Get ptr.135[_212]
                let _214: Int = Apply(read_ch_until_newline_or_eof.245, [])
                let _215: Unit = Put cells.140[_213] = _214
                let _216: Int = Int(1)
                let _217: Int = Add(pc.162, _216)
                Apply(aux.249, [_217, i.125, ptr.135, prog.123, cells.140, next_pc.143, ])
              } else {
                let _218: Int = Int(91)
                if (i.163 == _218) then {
                  let _219: Int = Int(0)
                  let _220: Unit = Put next_pc.143[_219] = pc.162
                  let _237: Var({val: Some(Unit)}) = Apply(lp.250, [i.125, pc.162, ptr.135, prog.123, cells.140, next_pc.143, ])
                  let _238: Int = Int(0)
                  let _239: Int = Get next_pc.143[_238]
                  let _240: Int = Int(1)
                  let _241: Int = Add(_239, _240)
                  Apply(aux.249, [_241, i.125, ptr.135, prog.123, cells.140, next_pc.143, ])
                } else {
                  let _242: Int = Int(93)
                  if (i.163 == _242) then {
                    Var(pc.162)
                  } else {
                    Var(pc.162)
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
let rec read_prog.247: Var({val: Some(Unit)}) = (i.125: Var({val: Some(Int)}), prog.123: Array(Int)) {
  let x.126: Int = Apply(read_ch_until_newline_or_eof.245, [])
  let _127: Int = Int(-1)
  if (x.126 == _127) then {
    let _133: Int = Int(1)
    let _134: Int = Int(0)
    let ptr.135: Array(Int) = ExtApply(minimbt_create_array, [_133, _134, ])
    let _136: Int = Int(1024)
    let _137: Int = Int(1024)
    let _138: Int = Mul(_136, _137)
    let _139: Int = Int(0)
    let cells.140: Array(Int) = ExtApply(minimbt_create_array, [_138, _139, ])
    let _141: Int = Int(1)
    let _142: Int = Int(0)
    let next_pc.143: Array(Int) = ExtApply(minimbt_create_array, [_141, _142, ])
    let _243: Int = Int(0)
    let _244: Var({val: Some(Int)}) = Apply(aux.249, [_243, i.125, ptr.135, prog.123, cells.140, next_pc.143, ])
    Unit
  } else {
    let _128: Unit = Put prog.123[i.125] = x.126
    let _129: Int = Int(1)
    let _130: Int = Add(i.125, _129)
    Apply(read_prog.247, [_130, prog.123, ])
  }
}
let rec main.246: Var({val: Some(Unit)}) = () {
  let len.121: Int = Int(1024)
  let _122: Int = Int(0)
  let prog.123: Array(Int) = ExtApply(minimbt_create_array, [len.121, _122, ])
  let _131: Int = Int(0)
  let _132: Var({val: Some(Unit)}) = Apply(read_prog.247, [_131, prog.123, ])
  Unit
}
Apply(main.246, [])