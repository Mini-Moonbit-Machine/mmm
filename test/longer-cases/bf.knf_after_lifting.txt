let rec read_ch_until_newline_or_eof1l0: Int = () {
  let c.2: Int = ExtApply(minimbt_read_char, [])
  let _3: Int = Int(10)
  if (c.2 == _3) then {
    Int(-1)
  } else {
    let _4: Int = Int(13)
    if (c.2 == _4) then {
      Int(-1)
    } else {
      Var(c.2)
    }
  }
}
let rec skip21l2: Var({val: Some(Int)}) = (pc22.23: Var({val: Some(Int)}), level24.25: Int, len6.7: Int, prog8.9: Array(Int)) {
  if (len6.7 <= pc22.23) then {
    Var(pc22.23)
  } else {
    let i.26: Int = Get prog8.9[pc22.23]
    let _27: Int = Int(91)
    if (i.26 == _27) then {
      let _28: Int = Int(1)
      let _29: Int = Add(pc22.23, _28)
      let _30: Int = Int(1)
      let _31: Int = Add(level24.25, _30)
      Apply(skip21l2, [_29, _31, len6.7, prog8.9, ])
    } else {
      let _32: Int = Int(93)
      if (i.26 == _32) then {
        let _33: Int = Int(0)
        if (level24.25 == _33) then {
          Var(pc22.23)
        } else {
          let _34: Int = Int(1)
          let _35: Int = Add(pc22.23, _34)
          let _36: Int = Int(1)
          let _37: Int = Sub(level24.25, _36)
          Apply(skip21l2, [_35, _37, len6.7, prog8.9, ])
        }
      } else {
        let _38: Int = Int(1)
        let _39: Int = Add(pc22.23, _38)
        Apply(skip21l2, [_39, level24.25, len6.7, prog8.9, ])
      }
    }
  }
}
let rec lp108l4: Var({val: Some(Unit)}) = (ptr.12: Array(Int), len6.7: Int, pc41.42: Var({val: Some(Int)}), cells.17: Array(Int), prog8.9: Array(Int), next_pc.20: Array(Int)) {
  let _109: Int = Int(0)
  let _110: Int = Get ptr.12[_109]
  let _111: Int = Get cells.17[_110]
  let _112: Int = Int(0)
  if (_111 == _112) then {
    let _113: Int = Int(0)
    let _114: Int = Int(1)
    let _115: Int = Add(pc41.42, _114)
    let _116: Int = Int(0)
    let _117: Var({val: Some(Int)}) = Apply(skip21l2, [_115, _116, len6.7, prog8.9, ])
    let _119: Unit = Put next_pc.20[_113] = _117
    Unit
  } else {
    let _120: Int = Int(0)
    let _121: Int = Int(1)
    let _122: Int = Add(pc41.42, _121)
    let _123: Var({val: Some(Int)}) = Apply(aux40l3, [_122, ptr.12, len6.7, cells.17, prog8.9, next_pc.20, ])
    let _125: Unit = Put next_pc.20[_120] = _123
    let _155: Int = Int(0)
    let _156: Int = Get ptr.12[_155]
    let _157: Int = Get cells.17[_156]
    let _158: Int = Int(0)
    if (_157 == _158) then {
      let _159: Int = Int(0)
      let _160: Int = Int(1)
      let _161: Int = Add(pc41.42, _160)
      let _162: Int = Int(0)
      let _163: Var({val: Some(Int)}) = Apply(skip21l2, [_161, _162, len6.7, prog8.9, ])
      let _164: Unit = Put next_pc.20[_159] = _163
      Unit
    } else {
      let _165: Int = Int(0)
      let _166: Int = Int(1)
      let _167: Int = Add(pc41.42, _166)
      let _168: Var({val: Some(Int)}) = Apply(aux40l3, [_167, ptr.12, len6.7, cells.17, prog8.9, next_pc.20, ])
      let _169: Unit = Put next_pc.20[_165] = _168
      Apply(lp108l4, [ptr.12, len6.7, pc41.42, cells.17, prog8.9, next_pc.20, ])
    }
  }
}
let rec aux40l3: Var({val: Some(Int)}) = (pc41.42: Var({val: Some(Int)}), ptr.12: Array(Int), len6.7: Int, cells.17: Array(Int), prog8.9: Array(Int), next_pc.20: Array(Int)) {
  if (len6.7 <= pc41.42) then {
    Var(pc41.42)
  } else {
    let i.43: Int = Get prog8.9[pc41.42]
    let _44: Int = Int(62)
    if (i.43 == _44) then {
      let _45: Int = Int(0)
      let _46: Int = Int(0)
      let _47: Int = Get ptr.12[_46]
      let _48: Int = Int(1)
      let _49: Int = Add(_47, _48)
      let _51: Unit = Put ptr.12[_45] = _49
      let _52: Int = Int(1)
      let _53: Int = Add(pc41.42, _52)
      Apply(aux40l3, [_53, ptr.12, len6.7, cells.17, prog8.9, next_pc.20, ])
    } else {
      let _54: Int = Int(60)
      if (i.43 == _54) then {
        let _55: Int = Int(0)
        let _56: Int = Int(0)
        let _57: Int = Get ptr.12[_56]
        let _58: Int = Int(1)
        let _59: Int = Sub(_57, _58)
        let _61: Unit = Put ptr.12[_55] = _59
        let _62: Int = Int(1)
        let _63: Int = Add(pc41.42, _62)
        Apply(aux40l3, [_63, ptr.12, len6.7, cells.17, prog8.9, next_pc.20, ])
      } else {
        let _64: Int = Int(43)
        if (i.43 == _64) then {
          let _65: Int = Int(0)
          let _66: Int = Get ptr.12[_65]
          let _67: Int = Int(0)
          let _68: Int = Get ptr.12[_67]
          let _69: Int = Get cells.17[_68]
          let _70: Int = Int(1)
          let _71: Int = Add(_69, _70)
          let _73: Unit = Put cells.17[_66] = _71
          let _74: Int = Int(1)
          let _75: Int = Add(pc41.42, _74)
          Apply(aux40l3, [_75, ptr.12, len6.7, cells.17, prog8.9, next_pc.20, ])
        } else {
          let _76: Int = Int(45)
          if (i.43 == _76) then {
            let _77: Int = Int(0)
            let _78: Int = Get ptr.12[_77]
            let _79: Int = Int(0)
            let _80: Int = Get ptr.12[_79]
            let _81: Int = Get cells.17[_80]
            let _82: Int = Int(1)
            let _83: Int = Sub(_81, _82)
            let _85: Unit = Put cells.17[_78] = _83
            let _86: Int = Int(1)
            let _87: Int = Add(pc41.42, _86)
            Apply(aux40l3, [_87, ptr.12, len6.7, cells.17, prog8.9, next_pc.20, ])
          } else {
            let _88: Int = Int(46)
            if (i.43 == _88) then {
              let _89: Int = Int(0)
              let _90: Int = Get ptr.12[_89]
              let _91: Int = Get cells.17[_90]
              let _93: Unit = ExtApply(minimbt_print_char, [_91, ])
              let _94: Int = Int(1)
              let _95: Int = Add(pc41.42, _94)
              Apply(aux40l3, [_95, ptr.12, len6.7, cells.17, prog8.9, next_pc.20, ])
            } else {
              let _96: Int = Int(44)
              if (i.43 == _96) then {
                let _97: Int = Int(0)
                let _98: Int = Get ptr.12[_97]
                let c.152: Int = ExtApply(minimbt_read_char, [])
                let _153: Int = Int(10)
                let _99: Int = if (c.152 == _153) then {
                  Int(-1)
                } else {
                  let _154: Int = Int(13)
                  if (c.152 == _154) then {
                    Int(-1)
                  } else {
                    Var(c.152)
                  }
                }
                let _101: Unit = Put cells.17[_98] = _99
                let _102: Int = Int(1)
                let _103: Int = Add(pc41.42, _102)
                Apply(aux40l3, [_103, ptr.12, len6.7, cells.17, prog8.9, next_pc.20, ])
              } else {
                let _104: Int = Int(91)
                if (i.43 == _104) then {
                  let _105: Int = Int(0)
                  let _107: Unit = Put next_pc.20[_105] = pc41.42
                  let _170: Int = Int(0)
                  let _171: Int = Get ptr.12[_170]
                  let _172: Int = Get cells.17[_171]
                  let _173: Int = Int(0)
                  let _127: Var({val: Some(Unit)}) = if (_172 == _173) then {
                    let _174: Int = Int(0)
                    let _175: Int = Int(1)
                    let _176: Int = Add(pc41.42, _175)
                    let _177: Int = Int(0)
                    let _178: Var({val: Some(Int)}) = Apply(skip21l2, [_176, _177, len6.7, prog8.9, ])
                    let _179: Unit = Put next_pc.20[_174] = _178
                    Unit
                  } else {
                    let _180: Int = Int(0)
                    let _181: Int = Int(1)
                    let _182: Int = Add(pc41.42, _181)
                    let _183: Var({val: Some(Int)}) = Apply(aux40l3, [_182, ptr.12, len6.7, cells.17, prog8.9, next_pc.20, ])
                    let _184: Unit = Put next_pc.20[_180] = _183
                    Apply(lp108l4, [ptr.12, len6.7, pc41.42, cells.17, prog8.9, next_pc.20, ])
                  }
                  let _128: Int = Int(0)
                  let _129: Int = Get next_pc.20[_128]
                  let _130: Int = Int(1)
                  let _131: Int = Add(_129, _130)
                  Apply(aux40l3, [_131, ptr.12, len6.7, cells.17, prog8.9, next_pc.20, ])
                } else {
                  let _132: Int = Int(93)
                  if (i.43 == _132) then {
                    Var(pc41.42)
                  } else {
                    Var(pc41.42)
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
let rec bf5l1: Unit = (len6.7: Int, prog8.9: Array(Int)) {
  let _10: Int = Int(1)
  let _11: Int = Int(0)
  let ptr.12: Array(Int) = ExtApply(minimbt_create_array, [_10, _11, ])
  let _13: Int = Int(1024)
  let _14: Int = Int(1024)
  let _15: Int = Mul(_13, _14)
  let _16: Int = Int(0)
  let cells.17: Array(Int) = ExtApply(minimbt_create_array, [_15, _16, ])
  let _18: Int = Int(1)
  let _19: Int = Int(0)
  let next_pc.20: Array(Int) = ExtApply(minimbt_create_array, [_18, _19, ])
  let _133: Int = Int(0)
  let _135: Var({val: Some(Int)}) = Apply(aux40l3, [_133, ptr.12, len6.7, cells.17, prog8.9, next_pc.20, ])
  Unit
}
let rec skip21.199l4: Var({val: Some(Int)}) = (pc22.200: Var({val: Some(Int)}), level24.201: Int, i141.142: Var({val: Some(Int)}), prog.139: Array(Int)) {
  if (i141.142 <= pc22.200) then {
    Var(pc22.200)
  } else {
    let i.202: Int = Get prog.139[pc22.200]
    let _203: Int = Int(91)
    if (i.202 == _203) then {
      let _204: Int = Int(1)
      let _205: Int = Add(pc22.200, _204)
      let _206: Int = Int(1)
      let _207: Int = Add(level24.201, _206)
      Apply(skip21.199l4, [_205, _207, i141.142, prog.139, ])
    } else {
      let _208: Int = Int(93)
      if (i.202 == _208) then {
        let _209: Int = Int(0)
        if (level24.201 == _209) then {
          Var(pc22.200)
        } else {
          let _210: Int = Int(1)
          let _211: Int = Add(pc22.200, _210)
          let _212: Int = Int(1)
          let _213: Int = Sub(level24.201, _212)
          Apply(skip21.199l4, [_211, _213, i141.142, prog.139, ])
        }
      } else {
        let _214: Int = Int(1)
        let _215: Int = Add(pc22.200, _214)
        Apply(skip21.199l4, [_215, level24.201, i141.142, prog.139, ])
      }
    }
  }
}
let rec lp108.276l6: Var({val: Some(Unit)}) = (ptr.190: Array(Int), i141.142: Var({val: Some(Int)}), pc41.217: Var({val: Some(Int)}), prog.139: Array(Int), cells.195: Array(Int), next_pc.198: Array(Int)) {
  let _277: Int = Int(0)
  let _278: Int = Get ptr.190[_277]
  let _279: Int = Get cells.195[_278]
  let _280: Int = Int(0)
  if (_279 == _280) then {
    let _281: Int = Int(0)
    let _282: Int = Int(1)
    let _283: Int = Add(pc41.217, _282)
    let _284: Int = Int(0)
    let _285: Var({val: Some(Int)}) = Apply(skip21.199l4, [_283, _284, i141.142, prog.139, ])
    let _286: Unit = Put next_pc.198[_281] = _285
    Unit
  } else {
    let _287: Int = Int(0)
    let _288: Int = Int(1)
    let _289: Int = Add(pc41.217, _288)
    let _290: Var({val: Some(Int)}) = Apply(aux40.216l5, [_289, ptr.190, i141.142, prog.139, cells.195, next_pc.198, ])
    let _291: Unit = Put next_pc.198[_287] = _290
    Apply(lp108.276l6, [ptr.190, i141.142, pc41.217, prog.139, cells.195, next_pc.198, ])
  }
}
let rec aux40.216l5: Var({val: Some(Int)}) = (pc41.217: Var({val: Some(Int)}), ptr.190: Array(Int), i141.142: Var({val: Some(Int)}), prog.139: Array(Int), cells.195: Array(Int), next_pc.198: Array(Int)) {
  if (i141.142 <= pc41.217) then {
    Var(pc41.217)
  } else {
    let i.218: Int = Get prog.139[pc41.217]
    let _219: Int = Int(62)
    if (i.218 == _219) then {
      let _220: Int = Int(0)
      let _221: Int = Int(0)
      let _222: Int = Get ptr.190[_221]
      let _223: Int = Int(1)
      let _224: Int = Add(_222, _223)
      let _225: Unit = Put ptr.190[_220] = _224
      let _226: Int = Int(1)
      let _227: Int = Add(pc41.217, _226)
      Apply(aux40.216l5, [_227, ptr.190, i141.142, prog.139, cells.195, next_pc.198, ])
    } else {
      let _228: Int = Int(60)
      if (i.218 == _228) then {
        let _229: Int = Int(0)
        let _230: Int = Int(0)
        let _231: Int = Get ptr.190[_230]
        let _232: Int = Int(1)
        let _233: Int = Sub(_231, _232)
        let _234: Unit = Put ptr.190[_229] = _233
        let _235: Int = Int(1)
        let _236: Int = Add(pc41.217, _235)
        Apply(aux40.216l5, [_236, ptr.190, i141.142, prog.139, cells.195, next_pc.198, ])
      } else {
        let _237: Int = Int(43)
        if (i.218 == _237) then {
          let _238: Int = Int(0)
          let _239: Int = Get ptr.190[_238]
          let _240: Int = Int(0)
          let _241: Int = Get ptr.190[_240]
          let _242: Int = Get cells.195[_241]
          let _243: Int = Int(1)
          let _244: Int = Add(_242, _243)
          let _245: Unit = Put cells.195[_239] = _244
          let _246: Int = Int(1)
          let _247: Int = Add(pc41.217, _246)
          Apply(aux40.216l5, [_247, ptr.190, i141.142, prog.139, cells.195, next_pc.198, ])
        } else {
          let _248: Int = Int(45)
          if (i.218 == _248) then {
            let _249: Int = Int(0)
            let _250: Int = Get ptr.190[_249]
            let _251: Int = Int(0)
            let _252: Int = Get ptr.190[_251]
            let _253: Int = Get cells.195[_252]
            let _254: Int = Int(1)
            let _255: Int = Sub(_253, _254)
            let _256: Unit = Put cells.195[_250] = _255
            let _257: Int = Int(1)
            let _258: Int = Add(pc41.217, _257)
            Apply(aux40.216l5, [_258, ptr.190, i141.142, prog.139, cells.195, next_pc.198, ])
          } else {
            let _259: Int = Int(46)
            if (i.218 == _259) then {
              let _260: Int = Int(0)
              let _261: Int = Get ptr.190[_260]
              let _262: Int = Get cells.195[_261]
              let _263: Unit = ExtApply(minimbt_print_char, [_262, ])
              let _264: Int = Int(1)
              let _265: Int = Add(pc41.217, _264)
              Apply(aux40.216l5, [_265, ptr.190, i141.142, prog.139, cells.195, next_pc.198, ])
            } else {
              let _266: Int = Int(44)
              if (i.218 == _266) then {
                let _267: Int = Int(0)
                let _268: Int = Get ptr.190[_267]
                let _269: Int = Apply(read_ch_until_newline_or_eof1l0, [])
                let _270: Unit = Put cells.195[_268] = _269
                let _271: Int = Int(1)
                let _272: Int = Add(pc41.217, _271)
                Apply(aux40.216l5, [_272, ptr.190, i141.142, prog.139, cells.195, next_pc.198, ])
              } else {
                let _273: Int = Int(91)
                if (i.218 == _273) then {
                  let _274: Int = Int(0)
                  let _275: Unit = Put next_pc.198[_274] = pc41.217
                  let _292: Var({val: Some(Unit)}) = Apply(lp108.276l6, [ptr.190, i141.142, pc41.217, prog.139, cells.195, next_pc.198, ])
                  let _293: Int = Int(0)
                  let _294: Int = Get next_pc.198[_293]
                  let _295: Int = Int(1)
                  let _296: Int = Add(_294, _295)
                  Apply(aux40.216l5, [_296, ptr.190, i141.142, prog.139, cells.195, next_pc.198, ])
                } else {
                  let _297: Int = Int(93)
                  if (i.218 == _297) then {
                    Var(pc41.217)
                  } else {
                    Var(pc41.217)
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
let rec read_prog140l3: Var({val: Some(Unit)}) = (i141.142: Var({val: Some(Int)}), prog.139: Array(Int)) {
  let c.185: Int = ExtApply(minimbt_read_char, [])
  let _186: Int = Int(10)
  let x.143: Int = if (c.185 == _186) then {
    Int(-1)
  } else {
    let _187: Int = Int(13)
    if (c.185 == _187) then {
      Int(-1)
    } else {
      Var(c.185)
    }
  }
  let _144: Int = Int(-1)
  if (x.143 == _144) then {
    let _188: Int = Int(1)
    let _189: Int = Int(0)
    let ptr.190: Array(Int) = ExtApply(minimbt_create_array, [_188, _189, ])
    let _191: Int = Int(1024)
    let _192: Int = Int(1024)
    let _193: Int = Mul(_191, _192)
    let _194: Int = Int(0)
    let cells.195: Array(Int) = ExtApply(minimbt_create_array, [_193, _194, ])
    let _196: Int = Int(1)
    let _197: Int = Int(0)
    let next_pc.198: Array(Int) = ExtApply(minimbt_create_array, [_196, _197, ])
    let _298: Int = Int(0)
    let _299: Var({val: Some(Int)}) = Apply(aux40.216l5, [_298, ptr.190, i141.142, prog.139, cells.195, next_pc.198, ])
    Unit
  } else {
    let _146: Unit = Put prog.139[i141.142] = x.143
    let _147: Int = Int(1)
    let _148: Int = Add(i141.142, _147)
    let x.300: Int = Apply(read_ch_until_newline_or_eof1l0, [])
    let _301: Int = Int(-1)
    if (x.300 == _301) then {
      Apply(bf5l1, [_148, prog.139, ])
    } else {
      let _302: Unit = Put prog.139[_148] = x.300
      let _303: Int = Int(1)
      let _304: Int = Add(_148, _303)
      Apply(read_prog140l3, [_304, prog.139, ])
    }
  }
}
let rec main136l2: Var({val: Some(Unit)}) = () {
  let len.137: Int = Int(1024)
  let _138: Int = Int(0)
  let prog.139: Array(Int) = ExtApply(minimbt_create_array, [len.137, _138, ])
  let _149: Int = Int(0)
  let x.305: Int = Apply(read_ch_until_newline_or_eof1l0, [])
  let _306: Int = Int(-1)
  let _151: Var({val: Some(Unit)}) = if (x.305 == _306) then {
    Apply(bf5l1, [_149, prog.139, ])
  } else {
    let _307: Unit = Put prog.139[_149] = x.305
    let _308: Int = Int(1)
    let _309: Int = Add(_149, _308)
    Apply(read_prog140l3, [_309, prog.139, ])
  }
  Unit
}
Apply(main136l2, [])