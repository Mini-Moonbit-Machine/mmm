let rec main.223: Var({val: Some(Unit)}) = () {
  let _224: Int = Int(9)
  let rec gen_perm1.2333: Array(Int) = (len.2334: Int) {
    let _2335: Int = Int(0)
    let arr.2336: Array(Int) = ExtApply(minimbt_create_array, [len.2334, _2335, ])
    let rec init_arr.2337: Unit = (i.2338: Int) {
      let join init_arr.2339: Unit = (i.2340: Int) {
        let _2341: Int = Int(1)
        let _2342: Int = Sub(len.2334, _2341)
        if (i.2340 <= _2342) then {
          let _2343: Unit = Put arr.2336[i.2340] = i.2340
          let _2344: Int = Int(1)
          let _2345: Int = Add(i.2340, _2344)
          Jump(init_arr.2339, [_2345, ])
        } else {
          Unit
        }
      }
      Jump(init_arr.2339, [i.2338, ])
    }
    let _2346: Int = Int(0)
    let _2347: Unit = Apply(init_arr.2337, [_2346, ])
    Var(arr.2336)
  }
  let perm1.2348: Array(Int) = Apply(gen_perm1.2333, [_224, ])
  let _2349: Int = Int(0)
  let perm.2350: Array(Int) = ExtApply(minimbt_create_array, [_224, _2349, ])
  let _2351: Int = Int(0)
  let count.2352: Array(Int) = ExtApply(minimbt_create_array, [_224, _2351, ])
  let _2353: Int = Int(1)
  let _2354: Int = Int(0)
  let flips.2355: Array(Int) = ExtApply(minimbt_create_array, [_2353, _2354, ])
  let _2356: Int = Int(1)
  let _2357: Int = Int(0)
  let max_flips.2358: Array(Int) = ExtApply(minimbt_create_array, [_2356, _2357, ])
  let _2359: Int = Int(1)
  let _2360: Int = Int(0)
  let check_sum.2361: Array(Int) = ExtApply(minimbt_create_array, [_2359, _2360, ])
  let _2362: Int = Int(1)
  let _2363: Int = Int(0)
  let nperm.2364: Array(Int) = ExtApply(minimbt_create_array, [_2362, _2363, ])
  let _2365: Int = Int(1)
  let r.2366: Array(Int) = ExtApply(minimbt_create_array, [_2365, _224, ])
  let rec compute.2367: Unit = (r.2368: Array(Int)) {
    let join compute.2369: Unit = (r.2370: Array(Int)) {
      let _2371: Int = Int(1)
      let _2372: Int = Int(0)
      let _2373: Int = Get r.2370[_2372]
      if (_2371 <= _2373) then {
        let rec copy_perm.2374: Unit = (i.2375: Int) {
          let join copy_perm.2376: Unit = (i.2377: Int) {
            let _2378: Int = Int(1)
            let _2379: Int = Sub(_224, _2378)
            if (i.2377 <= _2379) then {
              let _2380: Int = Get perm1.2348[i.2377]
              let _2381: Unit = Put perm.2350[i.2377] = _2380
              let _2382: Int = Int(1)
              let _2383: Int = Add(i.2377, _2382)
              Jump(copy_perm.2376, [_2383, ])
            } else {
              Unit
            }
          }
          Jump(copy_perm.2376, [i.2375, ])
        }
        let _2384: Int = Int(0)
        let _2385: Unit = Apply(copy_perm.2374, [_2384, ])
        let rec init_count.2386: Unit = () {
          let _2387: Int = Int(0)
          let _2388: Int = Get r.2370[_2387]
          let _2389: Int = Int(1)
          if (_2388 == _2389) then {
            let _2390: Unit = Unit
            Unit
          } else {
            let _2391: Int = Int(0)
            let _2392: Int = Get r.2370[_2391]
            let _2393: Int = Int(1)
            let _2394: Int = Sub(_2392, _2393)
            let _2395: Int = Int(0)
            let _2396: Int = Get r.2370[_2395]
            let _2397: Unit = Put count.2352[_2394] = _2396
            let _2398: Int = Int(0)
            let _2399: Int = Int(0)
            let _2400: Int = Get r.2370[_2399]
            let _2401: Int = Int(1)
            let _2402: Int = Sub(_2400, _2401)
            let _2403: Unit = Put r.2370[_2398] = _2402
            let _2390: Unit = Apply(init_count.2386, [])
            Unit
          }
        }
        let _2404: Unit = Apply(init_count.2386, [])
        let _2405: Int = Int(0)
        let _2406: Int = Int(0)
        let _2407: Unit = Put flips.2355[_2405] = _2406
        let _2408: Int = Int(1)
        let _2409: Int = Int(0)
        let _2410: Int = Get perm.2350[_2409]
        let k.2411: Array(Int) = ExtApply(minimbt_create_array, [_2408, _2410, ])
        let rec do_flip.2412: Unit = (k.2413: Array(Int)) {
          let join do_flip.2414: Unit = (k.2415: Array(Int)) {
            let _2416: Int = Int(0)
            let _2417: Int = Get k.2415[_2416]
            let _2418: Int = Int(0)
            if (_2417 == _2418) then {
              Unit
            } else {
              let _2419: Int = Int(1)
              let _2420: Int = Int(0)
              let t.2421: Array(Int) = ExtApply(minimbt_create_array, [_2419, _2420, ])
              let rec flip_loop.2422: Unit = (i.2423: Int) {
                let join flip_loop.2424: Unit = (i.2425: Int) {
                  let _2426: Int = Int(0)
                  let _2427: Int = Get k.2415[_2426]
                  let _2428: Int = Int(2)
                  let _2429: Int = Div(_2427, _2428)
                  if (i.2425 <= _2429) then {
                    let _2430: Int = Int(0)
                    let _2431: Int = Get perm.2350[i.2425]
                    let _2432: Unit = Put t.2421[_2430] = _2431
                    let _2433: Int = Int(0)
                    let _2434: Int = Get k.2415[_2433]
                    let _2435: Int = Sub(_2434, i.2425)
                    let _2436: Int = Get perm.2350[_2435]
                    let _2437: Unit = Put perm.2350[i.2425] = _2436
                    let _2438: Int = Int(0)
                    let _2439: Int = Get k.2415[_2438]
                    let _2440: Int = Sub(_2439, i.2425)
                    let _2441: Int = Int(0)
                    let _2442: Int = Get t.2421[_2441]
                    let _2443: Unit = Put perm.2350[_2440] = _2442
                    let _2444: Int = Int(1)
                    let _2445: Int = Add(i.2425, _2444)
                    Jump(flip_loop.2424, [_2445, ])
                  } else {
                    Unit
                  }
                }
                Jump(flip_loop.2424, [i.2423, ])
              }
              let _2446: Int = Int(0)
              let _2447: Unit = Apply(flip_loop.2422, [_2446, ])
              let _2448: Int = Int(0)
              let _2449: Int = Int(0)
              let _2450: Int = Get perm.2350[_2449]
              let _2451: Unit = Put k.2415[_2448] = _2450
              let _2452: Int = Int(0)
              let _2453: Int = Int(0)
              let _2454: Int = Get flips.2355[_2453]
              let _2455: Int = Int(1)
              let _2456: Int = Add(_2454, _2455)
              let _2457: Unit = Put flips.2355[_2452] = _2456
              Jump(do_flip.2414, [k.2415, ])
            }
          }
          Jump(do_flip.2414, [k.2413, ])
        }
        let _2458: Unit = Apply(do_flip.2412, [k.2411, ])
        let _2459: Int = Int(0)
        let _2460: Int = Get max_flips.2358[_2459]
        let _2461: Int = Int(0)
        let _2462: Int = Get flips.2355[_2461]
        if (_2460 <= _2462) then {
          let _2464: Int = Int(0)
          let _2465: Int = Int(0)
          let _2466: Int = Get flips.2355[_2465]
          let _2463: Unit = Put max_flips.2358[_2464] = _2466
          let _2467: Int = Int(0)
          let _2468: Int = Int(0)
          let _2469: Int = Get check_sum.2361[_2468]
          let _2470: Int = Int(0)
          let _2471: Int = Get flips.2355[_2470]
          let _2472: Int = Int(1)
          let _2473: Int = Int(0)
          let _2474: Int = Get nperm.2364[_2473]
          let _2475: Int = Int(0)
          let _2476: Int = Get nperm.2364[_2475]
          let _2477: Int = Int(2)
          let _2478: Int = Div(_2476, _2477)
          let _2479: Int = Int(2)
          let _2480: Int = Mul(_2478, _2479)
          let _2481: Int = Sub(_2474, _2480)
          let _2482: Int = Int(2)
          let _2483: Int = Mul(_2481, _2482)
          let _2484: Int = Sub(_2472, _2483)
          let _2485: Int = Mul(_2471, _2484)
          let _2486: Int = Add(_2469, _2485)
          let _2487: Unit = Put check_sum.2361[_2467] = _2486
          let _2488: Int = Int(1)
          let _2489: Bool = Bool(true)
          let go.2490: Array(Bool) = ExtApply(minimbt_create_array, [_2488, _2489, ])
          let _2491: Int = Int(1)
          let _2492: Int = Int(0)
          let t.2493: Array(Int) = ExtApply(minimbt_create_array, [_2491, _2492, ])
          let rec go_loop.2494: Unit = () {
            let join go_loop.2495: Unit = () {
              let _2496: Int = Int(0)
              let _2497: Bool = Get go.2490[_2496]
              let _2498: Bool = Bool(true)
              if (_2497 == _2498) then {
                let _2499: Int = Int(0)
                let _2500: Int = Get r.2370[_2499]
                if (_2500 == _224) then {
                  let _2502: Int = Int(0)
                  let _2503: Bool = Bool(false)
                  let _2504: Unit = Put go.2490[_2502] = _2503
                  let _2505: Int = Int(0)
                  let _2506: Int = Int(0)
                  let _2507: Unit = Put r.2370[_2505] = _2506
                  let _2501: Unit = Unit
                  Jump(go_loop.2495, [])
                } else {
                  let _2508: Int = Int(0)
                  let _2509: Int = Int(0)
                  let _2510: Int = Get perm1.2348[_2509]
                  let _2511: Unit = Put t.2493[_2508] = _2510
                  let rec move_perm1_forward.2512: Unit = (i.2513: Int) {
                    let _2514: Int = Int(0)
                    let _2515: Int = Get r.2370[_2514]
                    let _2516: Int = Int(1)
                    let _2517: Int = Sub(_2515, _2516)
                    if (i.2513 <= _2517) then {
                      let _2518: Int = Int(1)
                      let _2519: Int = Add(i.2513, _2518)
                      let _2520: Int = Get perm1.2348[_2519]
                      let _2521: Unit = Put perm1.2348[i.2513] = _2520
                      let _2522: Int = Int(1)
                      let _2523: Int = Add(i.2513, _2522)
                      let _2524: Unit = Apply(move_perm1_forward.2512, [_2523, ])
                      Unit
                    } else {
                      Unit
                    }
                  }
                  let _2525: Int = Int(0)
                  let _2526: Unit = Apply(move_perm1_forward.2512, [_2525, ])
                  let _2527: Int = Int(0)
                  let _2528: Int = Get r.2370[_2527]
                  let _2529: Int = Int(0)
                  let _2530: Int = Get t.2493[_2529]
                  let _2531: Unit = Put perm1.2348[_2528] = _2530
                  let _2532: Int = Int(0)
                  let _2533: Int = Get r.2370[_2532]
                  let _2534: Int = Int(0)
                  let _2535: Int = Get r.2370[_2534]
                  let _2536: Int = Get count.2352[_2535]
                  let _2537: Int = Int(1)
                  let _2538: Int = Sub(_2536, _2537)
                  let _2539: Unit = Put count.2352[_2533] = _2538
                  let _2540: Int = Int(1)
                  let _2541: Int = Int(0)
                  let _2542: Int = Get r.2370[_2541]
                  let _2543: Int = Get count.2352[_2542]
                  if (_2540 <= _2543) then {
                    let _2545: Int = Int(0)
                    let _2546: Bool = Bool(false)
                    let _2544: Unit = Put go.2490[_2545] = _2546
                    let _2501: Unit = Unit
                    Jump(go_loop.2495, [])
                  } else {
                    let _2547: Int = Int(0)
                    let _2548: Int = Int(0)
                    let _2549: Int = Get r.2370[_2548]
                    let _2550: Int = Int(1)
                    let _2551: Int = Add(_2549, _2550)
                    let _2544: Unit = Put r.2370[_2547] = _2551
                    let _2501: Unit = Unit
                    Jump(go_loop.2495, [])
                  }
                }
              } else {
                Unit
              }
            }
            Jump(go_loop.2495, [])
          }
          let _2552: Unit = Apply(go_loop.2494, [])
          let _2553: Int = Int(0)
          let _2554: Int = Int(0)
          let _2555: Int = Get nperm.2364[_2554]
          let _2556: Int = Int(1)
          let _2557: Int = Add(_2555, _2556)
          let _2558: Unit = Put nperm.2364[_2553] = _2557
          Jump(compute.2369, [r.2370, ])
        } else {
          let _2463: Unit = Unit
          let _2559: Int = Int(0)
          let _2560: Int = Int(0)
          let _2561: Int = Get check_sum.2361[_2560]
          let _2562: Int = Int(0)
          let _2563: Int = Get flips.2355[_2562]
          let _2564: Int = Int(1)
          let _2565: Int = Int(0)
          let _2566: Int = Get nperm.2364[_2565]
          let _2567: Int = Int(0)
          let _2568: Int = Get nperm.2364[_2567]
          let _2569: Int = Int(2)
          let _2570: Int = Div(_2568, _2569)
          let _2571: Int = Int(2)
          let _2572: Int = Mul(_2570, _2571)
          let _2573: Int = Sub(_2566, _2572)
          let _2574: Int = Int(2)
          let _2575: Int = Mul(_2573, _2574)
          let _2576: Int = Sub(_2564, _2575)
          let _2577: Int = Mul(_2563, _2576)
          let _2578: Int = Add(_2561, _2577)
          let _2579: Unit = Put check_sum.2361[_2559] = _2578
          let _2580: Int = Int(1)
          let _2581: Bool = Bool(true)
          let go.2582: Array(Bool) = ExtApply(minimbt_create_array, [_2580, _2581, ])
          let _2583: Int = Int(1)
          let _2584: Int = Int(0)
          let t.2585: Array(Int) = ExtApply(minimbt_create_array, [_2583, _2584, ])
          let rec go_loop.2586: Unit = () {
            let join go_loop.2587: Unit = () {
              let _2588: Int = Int(0)
              let _2589: Bool = Get go.2582[_2588]
              let _2590: Bool = Bool(true)
              if (_2589 == _2590) then {
                let _2591: Int = Int(0)
                let _2592: Int = Get r.2370[_2591]
                if (_2592 == _224) then {
                  let _2594: Int = Int(0)
                  let _2595: Bool = Bool(false)
                  let _2596: Unit = Put go.2582[_2594] = _2595
                  let _2597: Int = Int(0)
                  let _2598: Int = Int(0)
                  let _2599: Unit = Put r.2370[_2597] = _2598
                  let _2593: Unit = Unit
                  Jump(go_loop.2587, [])
                } else {
                  let _2600: Int = Int(0)
                  let _2601: Int = Int(0)
                  let _2602: Int = Get perm1.2348[_2601]
                  let _2603: Unit = Put t.2585[_2600] = _2602
                  let rec move_perm1_forward.2604: Unit = (i.2605: Int) {
                    let _2606: Int = Int(0)
                    let _2607: Int = Get r.2370[_2606]
                    let _2608: Int = Int(1)
                    let _2609: Int = Sub(_2607, _2608)
                    if (i.2605 <= _2609) then {
                      let _2610: Int = Int(1)
                      let _2611: Int = Add(i.2605, _2610)
                      let _2612: Int = Get perm1.2348[_2611]
                      let _2613: Unit = Put perm1.2348[i.2605] = _2612
                      let _2614: Int = Int(1)
                      let _2615: Int = Add(i.2605, _2614)
                      let _2616: Unit = Apply(move_perm1_forward.2604, [_2615, ])
                      Unit
                    } else {
                      Unit
                    }
                  }
                  let _2617: Int = Int(0)
                  let _2618: Unit = Apply(move_perm1_forward.2604, [_2617, ])
                  let _2619: Int = Int(0)
                  let _2620: Int = Get r.2370[_2619]
                  let _2621: Int = Int(0)
                  let _2622: Int = Get t.2585[_2621]
                  let _2623: Unit = Put perm1.2348[_2620] = _2622
                  let _2624: Int = Int(0)
                  let _2625: Int = Get r.2370[_2624]
                  let _2626: Int = Int(0)
                  let _2627: Int = Get r.2370[_2626]
                  let _2628: Int = Get count.2352[_2627]
                  let _2629: Int = Int(1)
                  let _2630: Int = Sub(_2628, _2629)
                  let _2631: Unit = Put count.2352[_2625] = _2630
                  let _2632: Int = Int(1)
                  let _2633: Int = Int(0)
                  let _2634: Int = Get r.2370[_2633]
                  let _2635: Int = Get count.2352[_2634]
                  if (_2632 <= _2635) then {
                    let _2637: Int = Int(0)
                    let _2638: Bool = Bool(false)
                    let _2636: Unit = Put go.2582[_2637] = _2638
                    let _2593: Unit = Unit
                    Jump(go_loop.2587, [])
                  } else {
                    let _2639: Int = Int(0)
                    let _2640: Int = Int(0)
                    let _2641: Int = Get r.2370[_2640]
                    let _2642: Int = Int(1)
                    let _2643: Int = Add(_2641, _2642)
                    let _2636: Unit = Put r.2370[_2639] = _2643
                    let _2593: Unit = Unit
                    Jump(go_loop.2587, [])
                  }
                }
              } else {
                Unit
              }
            }
            Jump(go_loop.2587, [])
          }
          let _2644: Unit = Apply(go_loop.2586, [])
          let _2645: Int = Int(0)
          let _2646: Int = Int(0)
          let _2647: Int = Get nperm.2364[_2646]
          let _2648: Int = Int(1)
          let _2649: Int = Add(_2647, _2648)
          let _2650: Unit = Put nperm.2364[_2645] = _2649
          Jump(compute.2369, [r.2370, ])
        }
      } else {
        Unit
      }
    }
    Jump(compute.2369, [r.2368, ])
  }
  let _2651: Unit = Apply(compute.2367, [r.2366, ])
  let _2652: Int = Int(0)
  let _2653: Int = Get max_flips.2358[_2652]
  let _2654: Int = Int(0)
  let _2655: Int = Get check_sum.2361[_2654]
  let _225: Tuple([Int, Int]) = Tuple([_2653, _2655, ])
  let (max_flips.226: Var({val: Some(Int)}), check_sum.227: Var({val: Some(Int)})) = _225
  let _228: Unit = ExtApply(minimbt_print_int, [check_sum.227, ])
  ExtApply(minimbt_print_int, [max_flips.226, ])
}
Apply(main.223, [])