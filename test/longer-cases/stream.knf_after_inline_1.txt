let rec main.87: Var({val: Some(Unit)}) = () {
  let _88: Int = Int(0)
  let _89: Int = Int(100)
  let _3852: Int = Int(1)
  let state.3853: Array(Int) = ExtApply(minimbt_create_array, [_3852, _88, ])
  let rec aux.3854: Tuple([Int, Int]) = (u.3855: Var({val: Some(Unit)})) {
    let _3856: Int = Int(0)
    let val.3857: Int = Get state.3853[_3856]
    if (val.3857 == _89) then {
      let _3858: Int = Int(0)
      let _3859: Int = Int(0)
      Tuple([_3858, _3859, ])
    } else {
      let _3860: Int = Int(0)
      let _3861: Int = Int(1)
      let _3862: Int = Add(val.3857, _3861)
      let _3863: Unit = Put state.3853[_3860] = _3862
      let _3864: Int = Int(1)
      Tuple([_3864, val.3857, ])
    }
  }
  let _91: Int = Int(0)
  let _92: Int = Int(1000)
  let _5714: Int = Int(1)
  let state.5715: Array(Int) = ExtApply(minimbt_create_array, [_5714, _91, ])
  let rec aux.5716: Tuple([Int, Int]) = (u.5717: Var({val: Some(Unit)})) {
    let _5718: Int = Int(0)
    let val.5719: Int = Get state.5715[_5718]
    if (val.5719 == _92) then {
      let _5720: Int = Int(0)
      let _5721: Int = Int(0)
      Tuple([_5720, _5721, ])
    } else {
      let _5722: Int = Int(0)
      let _5723: Int = Int(1)
      let _5724: Int = Add(val.5719, _5723)
      let _5725: Unit = Put state.5715[_5722] = _5724
      let _5726: Int = Int(1)
      Tuple([_5726, val.5719, ])
    }
  }
  let rec aux.6647: Tuple([Int, Int]) = (u.6648: Var({val: Some(Unit)})) {
    let _6649: Unit = Unit
    let _7585: Int = Int(0)
    let val.7586: Int = Get state.3853[_7585]
    if (val.7586 == _89) then {
      let _7587: Int = Int(0)
      let _7588: Int = Int(0)
      let _6650: Tuple([Int, Int]) = Tuple([_7587, _7588, ])
      let (ok.6651: Var({val: Some(Int)}), val.6652: Var({val: Some(Int)})) = _6650
      let _6653: Int = Int(0)
      if (ok.6651 == _6653) then {
        let _6654: Unit = Unit
        let _7589: Int = Int(0)
        let val.7590: Int = Get state.5715[_7589]
        if (val.7590 == _92) then {
          let _7591: Int = Int(0)
          let _7592: Int = Int(0)
          Tuple([_7591, _7592, ])
        } else {
          let _7593: Int = Int(0)
          let _7594: Int = Int(1)
          let _7595: Int = Add(val.7590, _7594)
          let _7596: Unit = Put state.5715[_7593] = _7595
          let _7597: Int = Int(1)
          Tuple([_7597, val.7590, ])
        }
      } else {
        let _6655: Int = Int(1)
        Tuple([_6655, val.6652, ])
      }
    } else {
      let _7598: Int = Int(0)
      let _7599: Int = Int(1)
      let _7600: Int = Add(val.7586, _7599)
      let _7601: Unit = Put state.3853[_7598] = _7600
      let _7602: Int = Int(1)
      let _6650: Tuple([Int, Int]) = Tuple([_7602, val.7586, ])
      let (ok.6651: Var({val: Some(Int)}), val.6652: Var({val: Some(Int)})) = _6650
      let _6653: Int = Int(0)
      if (ok.6651 == _6653) then {
        let _6654: Unit = Unit
        let _7603: Int = Int(0)
        let val.7604: Int = Get state.5715[_7603]
        if (val.7604 == _92) then {
          let _7605: Int = Int(0)
          let _7606: Int = Int(0)
          Tuple([_7605, _7606, ])
        } else {
          let _7607: Int = Int(0)
          let _7608: Int = Int(1)
          let _7609: Int = Add(val.7604, _7608)
          let _7610: Unit = Put state.5715[_7607] = _7609
          let _7611: Int = Int(1)
          Tuple([_7611, val.7604, ])
        }
      } else {
        let _6655: Int = Int(1)
        Tuple([_6655, val.6652, ])
      }
    }
  }
  let _95: Int = Int(1)
  let rec aux.7115: Int = (y.7116: Int) {
    Add(_95, y.7116)
  }
  let rec aux.7341: Tuple([Int, Int]) = (u.7342: Var({val: Some(Unit)})) {
    let _7343: Unit = Unit
    let _7612: Unit = Unit
    let _7613: Tuple([Int, Int]) = Apply(aux.3854, [_7612, ])
    let (ok.7614: Var({val: Some(Int)}), val.7615: Var({val: Some(Int)})) = _7613
    let _7616: Int = Int(0)
    if (ok.7614 == _7616) then {
      let _7617: Unit = Unit
      let _7344: Tuple([Int, Int]) = Apply(aux.5716, [_7617, ])
      let (ok.7345: Var({val: Some(Int)}), val.7346: Var({val: Some(Int)})) = _7344
      let _7347: Int = Int(0)
      if (ok.7345 == _7347) then {
        let _7348: Int = Int(0)
        let _7349: Int = Int(0)
        Tuple([_7348, _7349, ])
      } else {
        let _7350: Int = Int(1)
        let _7351: Int = Add(_95, val.7346)
        Tuple([_7350, _7351, ])
      }
    } else {
      let _7618: Int = Int(1)
      let _7344: Tuple([Int, Int]) = Tuple([_7618, val.7615, ])
      let (ok.7345: Var({val: Some(Int)}), val.7346: Var({val: Some(Int)})) = _7344
      let _7347: Int = Int(0)
      if (ok.7345 == _7347) then {
        let _7348: Int = Int(0)
        let _7349: Int = Int(0)
        Tuple([_7348, _7349, ])
      } else {
        let _7350: Int = Int(1)
        let _7351: Int = Add(_95, val.7346)
        Tuple([_7350, _7351, ])
      }
    }
  }
  let _98: Int = Int(50)
  let rec aux.7463: Int = (y.7464: Int) {
    if (_98 <= y.7464) then {
      Int(0)
    } else {
      Int(1)
    }
  }
  let _101: Int = Int(1200)
  let rec aux.7557: Tuple([Int, Int]) = (u.7558: Var({val: Some(Unit)})) {
    let join aux.7559: Tuple([Int, Int]) = (u.7560: Var({val: Some(Unit)})) {
      let _7561: Unit = Unit
      let join aux.7628: Tuple([Int, Int]) = (u.7629: Var({val: Some(Unit)})) {
        let _7630: Unit = Unit
        let _7631: Tuple([Int, Int]) = Apply(aux.7341, [_7630, ])
        let (ok.7632: Var({val: Some(Int)}), val.7633: Var({val: Some(Int)})) = _7631
        let _7634: Int = Int(0)
        if (ok.7632 == _7634) then {
          let _7635: Int = Int(0)
          let _7636: Int = Int(0)
          let _7562: Tuple([Int, Int]) = Tuple([_7635, _7636, ])
          let (ok.7563: Var({val: Some(Int)}), val.7564: Var({val: Some(Int)})) = _7562
          let _7565: Int = Int(0)
          if (ok.7563 == _7565) then {
            let _7566: Int = Int(0)
            let _7567: Int = Int(0)
            Tuple([_7566, _7567, ])
          } else {
            if (val.7564 <= _101) then {
              let r.7568: Int = Int(0)
              let _7569: Int = Int(0)
              if (r.7568 == _7569) then {
                let _7570: Int = Int(1)
                Tuple([_7570, val.7564, ])
              } else {
                let _7571: Unit = Unit
                Jump(aux.7559, [_7571, ])
              }
            } else {
              let r.7568: Int = Int(1)
              let _7569: Int = Int(0)
              if (r.7568 == _7569) then {
                let _7570: Int = Int(1)
                Tuple([_7570, val.7564, ])
              } else {
                let _7571: Unit = Unit
                Jump(aux.7559, [_7571, ])
              }
            }
          }
        } else {
          let r.7637: Int = Apply(aux.7463, [val.7633, ])
          let _7638: Int = Int(0)
          if (r.7637 == _7638) then {
            let _7639: Int = Int(1)
            let _7562: Tuple([Int, Int]) = Tuple([_7639, val.7633, ])
            let (ok.7563: Var({val: Some(Int)}), val.7564: Var({val: Some(Int)})) = _7562
            let _7565: Int = Int(0)
            if (ok.7563 == _7565) then {
              let _7566: Int = Int(0)
              let _7567: Int = Int(0)
              Tuple([_7566, _7567, ])
            } else {
              if (val.7564 <= _101) then {
                let r.7568: Int = Int(0)
                let _7569: Int = Int(0)
                if (r.7568 == _7569) then {
                  let _7570: Int = Int(1)
                  Tuple([_7570, val.7564, ])
                } else {
                  let _7571: Unit = Unit
                  Jump(aux.7559, [_7571, ])
                }
              } else {
                let r.7568: Int = Int(1)
                let _7569: Int = Int(0)
                if (r.7568 == _7569) then {
                  let _7570: Int = Int(1)
                  Tuple([_7570, val.7564, ])
                } else {
                  let _7571: Unit = Unit
                  Jump(aux.7559, [_7571, ])
                }
              }
            }
          } else {
            let _7640: Unit = Unit
            Jump(aux.7628, [_7640, ])
          }
        }
      }
      Jump(aux.7628, [_7561, ])
    }
    Jump(aux.7559, [u.7558, ])
  }
  let rec add.7572: Int = (x.7573: Int, y.7574: Int) {
    Add(x.7573, y.7574)
  }
  let _7575: Int = Int(0)
  let join fold.7641: Int = (stream.7642: Fun([Unit], Tuple([Int, Int])), f.7643: Fun([Int, Int], Int), acc.7644: Int) {
    let _7645: Unit = Unit
    let _7646: Tuple([Int, Int]) = Apply(stream.7642, [_7645, ])
    let (ok.7647: Var({val: Some(Int)}), val.7648: Var({val: Some(Int)})) = _7646
    let _7649: Int = Int(0)
    if (ok.7647 == _7649) then {
      let sum.104: Int = Var(acc.7644)
      let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
      let _106: Int = Int(10)
      let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
      Unit
    } else {
      let _7650: Int = Apply(f.7643, [acc.7644, val.7648, ])
      Jump(fold.7641, [stream.7642, f.7643, _7650, ])
    }
  }
  Jump(fold.7641, [aux.7557, add.7572, _7575, ])
}
Apply(main.87, [])