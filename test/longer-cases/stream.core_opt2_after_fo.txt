# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn main.6916 #f11 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m1: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m2: closure(unit) -> (int32, int32) heap(8)> <- [0] = f24, [1] = 100, [2] = 1000, [3] = 1, [4] = 50, [5] = 1200, [6] = f11.m0, [7] = f11.m1
    let _ = alloc <m3: closure(int32, int32) -> int32 heap(1)> <- [0] = f26
    let %4: int32 = call f0(f11.m2, f11.m3, 0)
    let %5: unit = ext_call minimbt_print_int(%4)
    let %6: unit = ext_call minimbt_print_char(10)
    return ()
  }
}
.fn add.6928 #f26 : closure(int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f10($f0, $f1)
    return %0
  }
}
.fn aux.6925 #f9 : fn(unit, int32, int32, int32, int32, int32, array[int32], array[int32]) -> (int32, int32)
.freevars ()
.entry b8 {
  .bb #b0 (unit, int32, int32, int32, int32, int32, array[int32], array[int32]) {
    jump b19()
  }
  .bb #b1 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b6(f9.m0)
  }
  .bb #b2 () {
    jump b22()
  }
  .bb #b3 () {
    let _ = alloc <m1: (int32, int32) heap(2)> <- [0] = 1, [1] = %2
    jump b5(f9.m1)
  }
  .bb #b4 () {
    jump b0((), $b0.1, $b0.2, $b0.3, $b0.4, $b0.5, $b0.6, $b0.7)
  }
  .bb #b5 ((int32, int32)) {
    jump b6($b5.0)
  }
  .bb #b6 ((int32, int32)) {
    return $b6.0
  }
  .loop #b7 pre #Some(b8) header #b0 {
    .block #b6
    .block #b4
    .block #b1
    .block #b5
    .block #b2
    .block #b3
  }
  .bb #b8 () {
    jump b7($f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7)
  }
  .bb #b9 ((int32, int32)) {
    let %1: int32 = load int32 field($b9.0, 0 * @(@32, @(@32, @32)))
    let %2: int32 = load int32 field($b9.0, 1 * @(@32, @(@32, @32)))
    let %3: bool = eq(%1, 0)
    br %3 b1() b2()
  }
  .bb #b10 (int32) {
    let %6: bool = eq($b10.0, 0)
    br %6 b3() b4()
  }
  .bb #b11 (unit, int32, int32, int32, int32, array[int32], array[int32]) {
    let %8: (int32, int32) = call f5((), $b11.1, $b11.2, $b11.3, $b11.5, $b11.6)
    jump b20(%8)
  }
  .bb #b12 () {
    let _ = alloc <m11: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b17(f9.m11)
  }
  .bb #b13 () {
    let %13: int32 = call f6(%10, $b11.4)
    jump b21(%13)
  }
  .bb #b14 () {
    let _ = alloc <m12: (int32, int32) heap(2)> <- [0] = 1, [1] = %10
    jump b16(f9.m12)
  }
  .bb #b15 () {
    jump b11((), $b11.1, $b11.2, $b11.3, $b11.4, $b11.5, $b11.6)
  }
  .bb #b16 ((int32, int32)) {
    jump b17($b16.0)
  }
  .bb #b17 ((int32, int32)) {
    jump b9($b17.0)
  }
  .loop #b18 pre #Some(b19) header #b11 {
    .block #b17
    .block #b15
    .block #b12
    .block #b16
    .block #b13
    .block #b14
  }
  .bb #b19 () {
    jump b18((), $b0.1, $b0.2, $b0.3, $b0.4, $b0.6, $b0.7)
  }
  .bb #b20 ((int32, int32)) {
    let %9: int32 = load int32 field($b20.0, 0 * @(@32, @(@32, @32)))
    let %10: int32 = load int32 field($b20.0, 1 * @(@32, @(@32, @32)))
    let %11: bool = eq(%9, 0)
    br %11 b12() b13()
  }
  .bb #b21 (int32) {
    let %14: bool = eq($b21.0, 0)
    br %14 b14() b15()
  }
  .bb #b22 () {
    let %16: bool = le(%2, $b0.5)
    br %16 b23() b24()
  }
  .bb #b23 () {
    jump b25(0)
  }
  .bb #b24 () {
    jump b25(1)
  }
  .bb #b25 (int32) {
    jump b10($b25.0)
  }
}
.fn aux.6922 #f6 : fn(int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le($f1, $f0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3(0)
  }
  .bb #b2 () {
    jump b3(1)
  }
  .bb #b3 (int32) {
    return $b3.0
  }
}
.fn add.6926 #f10 : fn(int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add($f0, $f1)
    return %0
  }
}
.fn aux.6927 #f24 : closure(unit) -> (int32, int32)
.freevars (int32, int32, int32, int32, int32, array[int32], array[int32])
.entry b0 {
  .bb #b0 () {
    let %0: (int32, int32) = call f9($f0, ^1, ^2, ^3, ^4, ^5, ^6, ^7)
    return %0
  }
}
.fn aux.6918 #f2 : fn(unit, int32, array[int32]) -> (int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 field($f2, 0 * @32)
    let %1: bool = eq(%0, $f1)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b3(f2.m0)
  }
  .bb #b2 () {
    let %3: int32 = add(%0, 1)
    let _ = store int32 field($f2, 0 * @32) <- %3
    let _ = alloc <m1: (int32, int32) heap(2)> <- [0] = 1, [1] = %0
    jump b3(f2.m1)
  }
  .bb #b3 ((int32, int32)) {
    return $b3.0
  }
}
.fn aux.6921 #f5 : fn(unit, int32, int32, int32, array[int32], array[int32]) -> (int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b8()
  }
  .bb #b1 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b3(f5.m0)
  }
  .bb #b2 () {
    jump b7()
  }
  .bb #b3 ((int32, int32)) {
    return $b3.0
  }
  .bb #b4 ((int32, int32)) {
    let %1: int32 = load int32 field($b4.0, 0 * @(@32, @(@32, @32)))
    let %2: int32 = load int32 field($b4.0, 1 * @(@32, @(@32, @32)))
    let %3: bool = eq(%1, 0)
    br %3 b1() b2()
  }
  .bb #b5 (int32) {
    let _ = alloc <m1: (int32, int32) heap(2)> <- [0] = 1, [1] = $b5.0
    jump b3(f5.m1)
  }
  .bb #b7 () {
    let %7: int32 = add($f3, %2)
    jump b5(%7)
  }
  .bb #b8 () {
    let %8: (int32, int32) = call f1((), $f1, $f4)
    jump b12(%8)
  }
  .bb #b9 () {
    let %12: (int32, int32) = call f2((), $f2, $f5)
    jump b11(%12)
  }
  .bb #b10 () {
    let _ = alloc <m8: (int32, int32) heap(2)> <- [0] = 1, [1] = %10
    jump b11(f5.m8)
  }
  .bb #b11 ((int32, int32)) {
    jump b4($b11.0)
  }
  .bb #b12 ((int32, int32)) {
    let %9: int32 = load int32 field($b12.0, 0 * @(@32, @(@32, @32)))
    let %10: int32 = load int32 field($b12.0, 1 * @(@32, @(@32, @32)))
    let %11: bool = eq(%9, 0)
    br %11 b9() b10()
  }
}
.fn T$start #f28 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f11()
    return %0
  }
}
.fn aux.6917 #f1 : fn(unit, int32, array[int32]) -> (int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 field($f2, 0 * @32)
    let %1: bool = eq(%0, $f1)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b3(f1.m0)
  }
  .bb #b2 () {
    let %3: int32 = add(%0, 1)
    let _ = store int32 field($f2, 0 * @32) <- %3
    let _ = alloc <m1: (int32, int32) heap(2)> <- [0] = 1, [1] = %0
    jump b3(f1.m1)
  }
  .bb #b3 ((int32, int32)) {
    return $b3.0
  }
}
.fn fold.6915 #f0 : fn(closure(unit) -> (int32, int32), closure(int32, int32) -> int32, int32) -> int32
.freevars ()
.entry b8 {
  .bb #b0 (closure(unit) -> (int32, int32), closure(int32, int32) -> int32, int32) {
    let %0: (int32, int32) = apply $b0.0(())
    let %1: int32 = load int32 field(%0, 0 * @(@32, @(@32, @32)))
    let %2: int32 = load int32 field(%0, 1 * @(@32, @(@32, @32)))
    let %3: bool = eq(%1, 0)
    br %3 b1() b2()
  }
  .bb #b1 () {
    jump b6($b0.2)
  }
  .bb #b2 () {
    let %4: int32 = apply $b0.1($b0.2, %2)
    let %5: (int32, int32) = apply $b0.0(())
    let %6: int32 = load int32 field(%5, 0 * @(@32, @(@32, @32)))
    let %7: int32 = load int32 field(%5, 1 * @(@32, @(@32, @32)))
    let %8: bool = eq(%6, 0)
    br %8 b3() b4()
  }
  .bb #b3 () {
    jump b5(%4)
  }
  .bb #b4 () {
    let %9: int32 = apply $b0.1(%4, %7)
    jump b0($b0.0, $b0.1, %9)
  }
  .bb #b5 (int32) {
    jump b6($b5.0)
  }
  .bb #b6 (int32) {
    return $b6.0
  }
  .loop #b7 pre #Some(b8) header #b0 {
    .block #b6
    .block #b4
    .block #b1
    .block #b5
    .block #b2
    .block #b3
  }
  .bb #b8 () {
    jump b7($f0, $f1, $f2)
  }
}
.thunk ::0 start
