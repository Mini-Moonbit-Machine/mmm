# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn main75.145 #f5 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = ext_call minimbt_read_int()
    let _ = alloc <m0: array[int32] heap(%0)> <- [..] = 0
    let %2: unit = call f3(0, f5.m0, %0)
    let %3: int32 = sub(%0, 1)
    let %4: unit = call f2(f5.m0, 0, %3)
    let %5: unit = call f4(0, f5.m0, %0)
    return %5
  }
}
.fn input79.146 #f3 : fn(int32, array[int32], int32) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (int32, array[int32], int32) {
    let %0: int32 = sub($b0.2, 1)
    let %1: bool = le($b0.0, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = ext_call minimbt_read_int()
    let %5: ptr = compute_address unit offset(0, $b0.0 * @32)
    let _ = store int32 raw($b0.1, %5) <- %2
    let %4: int32 = add($b0.0, 1)
    jump b0(%4, $b0.1, $b0.2)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1, $f2)
  }
}
.fn T$start #f12 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f5()
    return %0
  }
}
.fn output97.147 #f4 : fn(int32, array[int32], int32) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (int32, array[int32], int32) {
    let %0: int32 = sub($b0.2, 1)
    let %1: bool = le($b0.0, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %6: ptr = compute_address unit offset(0, $b0.0 * @32)
    let %2: int32 = load int32 raw($b0.1, %6)
    let %3: unit = ext_call minimbt_print_int(%2)
    let %4: unit = ext_call minimbt_print_endline()
    let %5: int32 = add($b0.0, 1)
    jump b0(%5, $b0.1, $b0.2)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1, $f2)
  }
}
.fn quicksort59.143 #f2 : fn(array[int32], int32, int32) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (array[int32], int32, int32) {
    let %0: int32 = sub($b0.2, 1)
    let %1: bool = le($b0.1, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %43: ptr = compute_address unit offset(0, $b0.2 * @32)
    let %2: int32 = load int32 raw($b0.0, %43)
    let %3: int32 = sub($b0.1, 1)
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = %3
    jump b27()
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1, $f2)
  }
  .bb #b6 (unit) {
    let %6: int32 = load int32 field(f2.m0, 0 * @32)
    let %7: int32 = add(%6, 1)
    let _ = store int32 field(f2.m0, 0 * @32) <- %7
    let %9: int32 = load int32 field(f2.m0, 0 * @32)
    jump b15()
  }
  .bb #b7 (unit) {
    let %11: int32 = load int32 field(f2.m0, 0 * @32)
    let %12: int32 = sub(%11, 1)
    let %13: unit = call f2($b0.0, $b0.1, %12)
    let %14: int32 = add(%11, 1)
    jump b0($b0.0, %14, $b0.2)
  }
  .bb #b15 () {
    let %42: ptr = compute_address unit offset(0, %9 * @32)
    let %15: int32 = load int32 raw($b0.0, %42)
    let %41: ptr = compute_address unit offset(0, $b0.2 * @32)
    let %16: int32 = load int32 raw($b0.0, %41)
    let _ = store int32 raw($b0.0, %42) <- %16
    let _ = store int32 raw($b0.0, %41) <- %15
    jump b7(())
  }
  .bb #b19 (int32, array[int32], array[int32], int32, int32) {
    let %19: int32 = sub($b19.4, 1)
    let %20: bool = le($b19.0, %19)
    br %20 b20() b21()
  }
  .bb #b20 () {
    let %44: ptr = compute_address unit offset(0, $b19.0 * @32)
    let %21: int32 = load int32 raw($b19.2, %44)
    let %22: bool = le(%21, $b19.3)
    br %22 b22() b23()
  }
  .bb #b21 () {
    jump b25(())
  }
  .bb #b22 () {
    let %23: int32 = load int32 field($b19.1, 0 * @32)
    let %24: int32 = add(%23, 1)
    let _ = store int32 field($b19.1, 0 * @32) <- %24
    let %26: int32 = load int32 field($b19.1, 0 * @32)
    jump b29()
  }
  .bb #b23 () {
    jump b24(())
  }
  .bb #b24 (unit) {
    let %28: int32 = add($b19.0, 1)
    jump b19(%28, $b19.1, $b19.2, $b19.3, $b19.4)
  }
  .bb #b25 (unit) {
    jump b6($b25.0)
  }
  .loop #b26 pre #Some(b27) header #b19 {
    .block #b25
    .block #b23
    .block #b20
    .block #b24
    .block #b21
    .block #b22
  }
  .bb #b27 () {
    jump b26($b0.1, f2.m0, $b0.0, %2, $b0.2)
  }
  .bb #b29 () {
    let %54: ptr = compute_address unit offset(0, %26 * @32)
    let %29: int32 = load int32 raw($b19.2, %54)
    let %53: ptr = compute_address unit offset(0, $b19.0 * @32)
    let %30: int32 = load int32 raw($b19.2, %53)
    let _ = store int32 raw($b19.2, %54) <- %30
    let _ = store int32 raw($b19.2, %53) <- %29
    jump b24(())
  }
}
.thunk ::0 start

