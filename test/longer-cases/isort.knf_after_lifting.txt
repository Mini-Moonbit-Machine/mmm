let rec aux.90: Unit = (i.15: Int, state.16: Int, n.13: Int, arr.12: Array(Int)) {
  if (i.15 == n.13) then {
    Unit
  } else {
    let _72: Int = Int(75)
    let _73: Int = Mul(state.16, _72)
    let _74: Int = Int(74)
    let new_state.17: Int = Add(_73, _74)
    let _18: Int = Int(65537)
    let q.75: Int = Div(new_state.17, _18)
    let _76: Int = Mul(q.75, _18)
    let res.19: Int = Sub(new_state.17, _76)
    let _20: Unit = Put arr.12[i.15] = res.19
    let _21: Int = Int(1)
    let _22: Int = Add(i.15, _21)
    Apply(aux.90, [_22, res.19, n.13, arr.12, ])
  }
}
let rec fill_buffer.89: Unit = (arr.12: Array(Int), n.13: Int) {
  let _23: Int = Int(0)
  let _24: Int = Int(12345)
  Apply(aux.90, [_23, _24, n.13, arr.12, ])
}
let rec insert.92: Unit = (arr.29: Array(Int), i.30: Int) {
  let _31: Int = Int(0)
  if (i.30 == _31) then {
    Unit
  } else {
    let _32: Int = Int(1)
    let _33: Int = Sub(i.30, _32)
    let _34: Int = Get arr.29[_33]
    let _35: Int = Get arr.29[i.30]
    if (_34 <= _35) then {
      Unit
    } else {
      let tmp.36: Int = Get arr.29[i.30]
      let _37: Int = Int(1)
      let _38: Int = Sub(i.30, _37)
      let _39: Int = Get arr.29[_38]
      let _40: Unit = Put arr.29[i.30] = _39
      let _41: Int = Int(1)
      let _42: Int = Sub(i.30, _41)
      let _43: Unit = Put arr.29[_42] = tmp.36
      let _44: Int = Int(1)
      let _45: Int = Sub(i.30, _44)
      Apply(insert.92, [arr.29, _45, ])
    }
  }
}
let rec aux.93: Unit = (i.47: Int, n.27: Int, arr.26: Array(Int)) {
  if (i.47 == n.27) then {
    Unit
  } else {
    let _48: Unit = Apply(insert.92, [arr.26, i.47, ])
    let _49: Int = Int(1)
    let _50: Int = Add(i.47, _49)
    if (_50 == n.27) then {
      Unit
    } else {
      let _77: Unit = Apply(insert.92, [arr.26, _50, ])
      let _78: Int = Int(1)
      let _79: Int = Add(_50, _78)
      Apply(aux.93, [_79, n.27, arr.26, ])
    }
  }
}
let rec isort.91: Unit = (arr.26: Array(Int), n.27: Int) {
  let _51: Int = Int(1)
  Apply(aux.93, [_51, n.27, arr.26, ])
}
let rec aux.95: Unit = (i.81: Int, n.65: Int, arr.67: Array(Int)) {
  if (i.81 == n.65) then {
    Unit
  } else {
    let _82: Int = Get arr.67[i.81]
    let _83: Unit = ExtApply(minimbt_print_int, [_82, ])
    let _84: Int = Int(32)
    let _85: Unit = ExtApply(minimbt_print_char, [_84, ])
    let _86: Int = Int(1)
    let _87: Int = Add(i.81, _86)
    Apply(aux.95, [_87, n.65, arr.67, ])
  }
}
let rec main.94: Var({val: Some(Unit)}) = () {
  let n.65: Int = Int(100)
  let _66: Int = Int(0)
  let arr.67: Array(Int) = ExtApply(minimbt_create_array, [n.65, _66, ])
  let _68: Unit = Apply(fill_buffer.89, [arr.67, n.65, ])
  let _69: Unit = Apply(isort.91, [arr.67, n.65, ])
  let _88: Int = Int(0)
  Apply(aux.95, [_88, n.65, arr.67, ])
}
Apply(main.94, [])