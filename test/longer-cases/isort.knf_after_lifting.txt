let rec random.125: Int = (state.2: Int) {
  let _3: Int = Int(75)
  let _4: Int = Mul(state.2, _3)
  let _5: Int = Int(74)
  Add(_4, _5)
}
let rec modulo.126: Int = (x.7: Int, y.8: Int) {
  let q.9: Int = Div(x.7, y.8)
  let _10: Int = Mul(q.9, y.8)
  Sub(x.7, _10)
}
let rec aux.128: Unit = (i.82: Int, state.83: Int, n.65: Int, arr.67: Array(Int)) {
  if (i.82 == n.65) then {
    Unit
  } else {
    let new_state.84: Int = Apply(random.125, [state.83, ])
    let _85: Int = Int(65537)
    let res.86: Int = Apply(modulo.126, [new_state.84, _85, ])
    let _87: Unit = Put arr.67[i.82] = res.86
    let _88: Int = Int(1)
    let _89: Int = Add(i.82, _88)
    Apply(aux.128, [_89, res.86, n.65, arr.67, ])
  }
}
let rec insert.129: Unit = (arr.93: Array(Int), i.94: Int) {
  let _95: Int = Int(0)
  if (i.94 == _95) then {
    Unit
  } else {
    let _96: Int = Int(1)
    let _97: Int = Sub(i.94, _96)
    let _98: Int = Get arr.93[_97]
    let _99: Int = Get arr.93[i.94]
    if (_98 <= _99) then {
      Unit
    } else {
      let tmp.100: Int = Get arr.93[i.94]
      let _101: Int = Int(1)
      let _102: Int = Sub(i.94, _101)
      let _103: Int = Get arr.93[_102]
      let _104: Unit = Put arr.93[i.94] = _103
      let _105: Int = Int(1)
      let _106: Int = Sub(i.94, _105)
      let _107: Unit = Put arr.93[_106] = tmp.100
      let _108: Int = Int(1)
      let _109: Int = Sub(i.94, _108)
      Apply(insert.129, [arr.93, _109, ])
    }
  }
}
let rec aux.130: Unit = (i.111: Int, n.65: Int, arr.67: Array(Int)) {
  if (i.111 == n.65) then {
    Unit
  } else {
    let _112: Unit = Apply(insert.129, [arr.67, i.111, ])
    let _113: Int = Int(1)
    let _114: Int = Add(i.111, _113)
    Apply(aux.130, [_114, n.65, arr.67, ])
  }
}
let rec aux.131: Unit = (i.117: Int, n.65: Int, arr.67: Array(Int)) {
  if (i.117 == n.65) then {
    Unit
  } else {
    let _118: Int = Get arr.67[i.117]
    let _119: Unit = ExtApply(minimbt_print_int, [_118, ])
    let _120: Int = Int(32)
    let _121: Unit = ExtApply(minimbt_print_char, [_120, ])
    let _122: Int = Int(1)
    let _123: Int = Add(i.117, _122)
    Apply(aux.131, [_123, n.65, arr.67, ])
  }
}
let rec main.127: Var({val: Some(Unit)}) = () {
  let n.65: Int = Int(100)
  let _66: Int = Int(0)
  let arr.67: Array(Int) = ExtApply(minimbt_create_array, [n.65, _66, ])
  let _90: Int = Int(0)
  let _91: Int = Int(12345)
  let _68: Unit = Apply(aux.128, [_90, _91, n.65, arr.67, ])
  let _115: Int = Int(1)
  let _69: Unit = Apply(aux.130, [_115, n.65, arr.67, ])
  let _124: Int = Int(0)
  Apply(aux.131, [_124, n.65, arr.67, ])
}
Apply(main.127, [])