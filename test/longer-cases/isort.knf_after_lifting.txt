let rec random1l0: Int = (state2.3: Int) {
  let _4: Int = Int(75)
  let _5: Int = Mul(state2.3, _4)
  let _6: Int = Int(74)
  Add(_5, _6)
}
let rec modulo7l1: Int = (x8.9: Int, y10.11: Int) {
  let q.12: Int = Div(x8.9, y10.11)
  let _13: Int = Mul(q.12, y10.11)
  Sub(x8.9, _13)
}
let rec aux19.128l3: Unit = (i20.129: Int, state22.130: Int, n.86: Int, arr.88: Array(Int)) {
  if (i20.129 == n.86) then {
    Unit
  } else {
    let new_state.131: Int = Apply(random1l0, [state22.130, ])
    let _132: Int = Int(65537)
    let res.133: Int = Apply(modulo7l1, [new_state.131, _132, ])
    let _134: Unit = Put arr.88[i20.129] = res.133
    let _135: Int = Int(1)
    let _136: Int = Add(i20.129, _135)
    Apply(aux19.128l3, [_136, res.133, n.86, arr.88, ])
  }
}
let rec insert38.139l3: Unit = (arr39.140: Array(Int), i41.141: Int) {
  let _142: Int = Int(0)
  if (i41.141 == _142) then {
    Unit
  } else {
    let _143: Int = Int(1)
    let _144: Int = Sub(i41.141, _143)
    let _145: Int = Get arr39.140[_144]
    let _146: Int = Get arr39.140[i41.141]
    if (_145 <= _146) then {
      Unit
    } else {
      let tmp.147: Int = Get arr39.140[i41.141]
      let _148: Int = Int(1)
      let _149: Int = Sub(i41.141, _148)
      let _150: Int = Get arr39.140[_149]
      let _151: Unit = Put arr39.140[i41.141] = _150
      let _152: Int = Int(1)
      let _153: Int = Sub(i41.141, _152)
      let _154: Unit = Put arr39.140[_153] = tmp.147
      let _155: Int = Int(1)
      let _156: Int = Sub(i41.141, _155)
      Apply(insert38.139l3, [arr39.140, _156, ])
    }
  }
}
let rec aux60.157l4: Unit = (i61.158: Int, n.86: Int, arr.88: Array(Int)) {
  if (i61.158 == n.86) then {
    Unit
  } else {
    let _159: Unit = Apply(insert38.139l3, [arr.88, i61.158, ])
    let _160: Int = Int(1)
    let _161: Int = Add(i61.158, _160)
    Apply(aux60.157l4, [_161, n.86, arr.88, ])
  }
}
let rec aux73.163l3: Unit = (i74.164: Int, n.86: Int, arr.88: Array(Int)) {
  if (i74.164 == n.86) then {
    Unit
  } else {
    let _165: Int = Get arr.88[i74.164]
    let _166: Unit = ExtApply(minimbt_print_int, [_165, ])
    let _167: Int = Int(32)
    let _168: Unit = ExtApply(minimbt_print_char, [_167, ])
    let _169: Int = Int(1)
    let _170: Int = Add(i74.164, _169)
    Apply(aux73.163l3, [_170, n.86, arr.88, ])
  }
}
let rec main85l2: Var({val: Some(Unit)}) = () {
  let n.86: Int = Int(100)
  let _87: Int = Int(0)
  let arr.88: Array(Int) = ExtApply(minimbt_create_array, [n.86, _87, ])
  let _137: Int = Int(0)
  let _138: Int = Int(12345)
  let _90: Unit = Apply(aux19.128l3, [_137, _138, n.86, arr.88, ])
  let _162: Int = Int(1)
  let _92: Unit = Apply(aux60.157l4, [_162, n.86, arr.88, ])
  let _171: Int = Int(0)
  Apply(aux73.163l3, [_171, n.86, arr.88, ])
}
Apply(main85l2, [])