let rec swap.142: Unit = (arr.3: Array(Int), i.5: Int, j.7: Int) {
  let tmp.8: Int = Get arr.3[i.5]
  let _9: Int = Get arr.3[j.7]
  let _11: Unit = Put arr.3[i.5] = _9
  let _13: Unit = Put arr.3[j.7] = tmp.8
  Unit
}
let rec l.144: Unit = (j.116: Int, i.114: Array(Int), arr.61: Array(Int), high.65: Int, pivot.110: Int) {
  let _117: Int = Int(1)
  let _118: Int = Sub(high.65, _117)
  if (j.116 <= _118) then {
    let _119: Int = Get arr.61[j.116]
    let _120: Unit = if (_119 <= pivot.110) then {
      let _121: Int = Int(0)
      let _122: Int = Int(0)
      let _123: Int = Get i.114[_122]
      let _124: Int = Int(1)
      let _125: Int = Add(_123, _124)
      let _126: Unit = Put i.114[_121] = _125
      let _127: Int = Int(0)
      let _128: Int = Get i.114[_127]
      Apply(swap.142, [arr.61, _128, j.116, ])
    } else {
      Unit
    }
    let _129: Int = Int(1)
    let _130: Int = Add(j.116, _129)
    Apply(l.144, [_130, i.114, arr.61, high.65, pivot.110, ])
  } else {
    Unit
  }
}
let rec quicksort.143: Unit = (arr.61: Array(Int), low.63: Int, high.65: Int) {
  let _66: Int = Int(1)
  let _67: Int = Sub(high.65, _66)
  if (low.63 <= _67) then {
    let pivot.110: Int = Get arr.61[high.65]
    let _111: Int = Int(1)
    let _112: Int = Int(1)
    let _113: Int = Sub(low.63, _112)
    let i.114: Array(Int) = ExtApply(minimbt_create_array, [_111, _113, ])
    let _131: Unit = Apply(l.144, [low.63, i.114, arr.61, high.65, pivot.110, ])
    let _132: Int = Int(0)
    let _133: Int = Int(0)
    let _134: Int = Get i.114[_133]
    let _135: Int = Int(1)
    let _136: Int = Add(_134, _135)
    let _137: Unit = Put i.114[_132] = _136
    let _138: Int = Int(0)
    let _139: Int = Get i.114[_138]
    let _140: Unit = Apply(swap.142, [arr.61, _139, high.65, ])
    let _141: Int = Int(0)
    let pi.68: Int = Get i.114[_141]
    let _69: Int = Int(1)
    let _70: Int = Sub(pi.68, _69)
    let _72: Unit = Apply(quicksort.143, [arr.61, low.63, _70, ])
    let _73: Int = Int(1)
    let _74: Int = Add(pi.68, _73)
    Apply(quicksort.143, [arr.61, _74, high.65, ])
  } else {
    Unit
  }
}
let rec input.146: Unit = (i.81: Int, arr.78: Array(Int), len.76: Int) {
  let _82: Int = Int(1)
  let _83: Int = Sub(len.76, _82)
  if (i.81 <= _83) then {
    let _84: Int = ExtApply(minimbt_read_int, [])
    let _86: Unit = Put arr.78[i.81] = _84
    let _87: Int = Int(1)
    let _88: Int = Add(i.81, _87)
    Apply(input.146, [_88, arr.78, len.76, ])
  } else {
    Unit
  }
}
let rec output.147: Unit = (i.99: Int, arr.78: Array(Int), len.76: Int) {
  let _100: Int = Int(1)
  let _101: Int = Sub(len.76, _100)
  if (i.99 <= _101) then {
    let _102: Int = Get arr.78[i.99]
    let _104: Unit = ExtApply(minimbt_print_int, [_102, ])
    let _106: Unit = ExtApply(minimbt_print_endline, [])
    let _107: Int = Int(1)
    let _108: Int = Add(i.99, _107)
    Apply(output.147, [_108, arr.78, len.76, ])
  } else {
    Unit
  }
}
let rec main.145: Unit = () {
  let len.76: Int = ExtApply(minimbt_read_int, [])
  let _77: Int = Int(0)
  let arr.78: Array(Int) = ExtApply(minimbt_create_array, [len.76, _77, ])
  let _89: Int = Int(0)
  let _91: Unit = Apply(input.146, [_89, arr.78, len.76, ])
  let _92: Int = Int(0)
  let _93: Int = Int(1)
  let _94: Int = Sub(len.76, _93)
  let _96: Unit = Apply(quicksort.143, [arr.78, _92, _94, ])
  let _109: Int = Int(0)
  Apply(output.147, [_109, arr.78, len.76, ])
}
Apply(main.145, [])
