# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn add.75 #f23 : closure(int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add($f0, $f1)
    return %0
  }
}
.fn aux.4 #f10 : closure(unit) -> (int32, int32)
.freevars (closure(unit) -> (int32, int32), closure(int32) -> int32)
.entry b0 {
  .bb #b0 () {
    let %0: (int32, int32) = apply ^1(())
    let %1: int32 = load int32 field(%0, 0 * @(@32, @(@32, @32)))
    let %2: int32 = load int32 field(%0, 1 * @(@32, @(@32, @32)))
    let %3: bool = eq(%1, 0)
    br %3 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b3(f10.m0)
  }
  .bb #b2 () {
    let %5: int32 = apply ^2(%2)
    let _ = alloc <m1: (int32, int32) heap(2)> <- [0] = 1, [1] = %5
    jump b3(f10.m1)
  }
  .bb #b3 ((int32, int32)) {
    return $b3.0
  }
}
.fn filter.15 #f1 : fn(closure(unit) -> (int32, int32), closure(int32) -> int32) -> closure(unit) -> (int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure(unit) -> (int32, int32) heap(3)> <- [0] = f13, [1] = $f0, [2] = $f1
    return f1.m0
  }
}
.fn aux.34 #f16 : closure(unit) -> (int32, int32)
.freevars (closure(unit) -> (int32, int32), closure(unit) -> (int32, int32))
.entry b0 {
  .bb #b0 () {
    let %0: (int32, int32) = apply ^1(())
    let %1: int32 = load int32 field(%0, 0 * @(@32, @(@32, @32)))
    let %2: int32 = load int32 field(%0, 1 * @(@32, @(@32, @32)))
    let %3: bool = eq(%1, 0)
    br %3 b1() b2()
  }
  .bb #b1 () {
    let %4: (int32, int32) = apply ^2(())
    jump b3(%4)
  }
  .bb #b2 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 1, [1] = %2
    jump b3(f16.m0)
  }
  .bb #b3 ((int32, int32)) {
    return $b3.0
  }
}
.fn sum.73 #f5 : fn(closure(unit) -> (int32, int32)) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure(int32, int32) -> int32 heap(1)> <- [0] = f23
    let %1: int32 = call f4($f0, f5.m0, 0)
    return %1
  }
}
.fn main.87 #f8 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: closure(unit) -> (int32, int32) = call f3(0, 100)
    let %1: closure(unit) -> (int32, int32) = call f3(0, 1000)
    let %2: closure(unit) -> (int32, int32) = call f2(%0, %1)
    let _ = alloc <m0: closure(int32) -> int32 heap(2)> <- [0] = f32, [1] = 1
    let %4: closure(unit) -> (int32, int32) = call f0(%2, f8.m0)
    let %5: closure(int32) -> int32 = call f6(50)
    let %6: closure(unit) -> (int32, int32) = call f1(%4, %5)
    let %7: closure(int32) -> int32 = call f7(1200)
    let %8: closure(unit) -> (int32, int32) = call f1(%6, %7)
    let %9: int32 = call f5(%8)
    let %10: unit = ext_call minimbt_print_int(%9)
    let %11: unit = ext_call minimbt_print_char(10)
    return ()
  }
}
.fn map.1 #f0 : fn(closure(unit) -> (int32, int32), closure(int32) -> int32) -> closure(unit) -> (int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure(unit) -> (int32, int32) heap(3)> <- [0] = f10, [1] = $f0, [2] = $f1
    return f0.m0
  }
}
.fn concat.31 #f2 : fn(closure(unit) -> (int32, int32), closure(unit) -> (int32, int32)) -> closure(unit) -> (int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure(unit) -> (int32, int32) heap(3)> <- [0] = f16, [1] = $f0, [2] = $f1
    return f2.m0
  }
}
.fn aux.108 #f32 : closure(int32) -> int32
.freevars (int32)
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add(^1, $f0)
    return %0
  }
}
.fn aux.81 #f26 : closure(int32) -> int32
.freevars (int32)
.entry b0 {
  .bb #b0 () {
    let %0: bool = le(^1, $f0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3(0)
  }
  .bb #b2 () {
    jump b3(1)
  }
  .bb #b3 (int32) {
    return $b3.0
  }
}
.fn range.43 #f3 : fn(int32, int32) -> closure(unit) -> (int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = $f0
    let _ = alloc <m1: closure(unit) -> (int32, int32) heap(3)> <- [0] = f19, [1] = f3.m0, [2] = $f1
    return f3.m1
  }
}
.fn fold.63 #f4 : fn(closure(unit) -> (int32, int32), closure(int32, int32) -> int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: (int32, int32) = apply $f0(())
    let %1: int32 = load int32 field(%0, 0 * @(@32, @(@32, @32)))
    let %2: int32 = load int32 field(%0, 1 * @(@32, @(@32, @32)))
    let %3: bool = eq(%1, 0)
    br %3 b1() b2()
  }
  .bb #b1 () {
    jump b3($f2)
  }
  .bb #b2 () {
    let %4: int32 = apply $f1($f2, %2)
    let %5: int32 = call f4($f0, $f1, %4)
    jump b3(%5)
  }
  .bb #b3 (int32) {
    return $b3.0
  }
}
.fn aux.48 #f19 : closure(unit) -> (int32, int32)
.freevars (array[int32], int32)
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 offset(^1, 0 * @32)
    let %1: bool = eq(%0, ^2)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b3(f19.m0)
  }
  .bb #b2 () {
    let %3: int32 = add(%0, 1)
    let _ = store int32 offset(^1, 0 * @32) <- %3
    let _ = alloc <m1: (int32, int32) heap(2)> <- [0] = 1, [1] = %0
    jump b3(f19.m1)
  }
  .bb #b3 ((int32, int32)) {
    return $b3.0
  }
}
.fn le.83 #f7 : fn(int32) -> closure(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure(int32) -> int32 heap(2)> <- [0] = f29, [1] = $f0
    return f7.m0
  }
}
.fn gt.79 #f6 : fn(int32) -> closure(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure(int32) -> int32 heap(2)> <- [0] = f26, [1] = $f0
    return f6.m0
  }
}
.fn T$start #f34 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f8()
    return %0
  }
}
.fn aux.18 #f13 : closure(unit) -> (int32, int32)
.freevars (closure(unit) -> (int32, int32), closure(int32) -> int32)
.entry b0 {
  .bb #b0 () {
    let %0: (int32, int32) = apply ^1(())
    let %1: int32 = load int32 field(%0, 0 * @(@32, @(@32, @32)))
    let %2: int32 = load int32 field(%0, 1 * @(@32, @(@32, @32)))
    let %3: bool = eq(%1, 0)
    br %3 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b6(f13.m0)
  }
  .bb #b2 () {
    let %5: int32 = apply ^2(%2)
    let %6: bool = eq(%5, 0)
    br %6 b3() b4()
  }
  .bb #b3 () {
    let _ = alloc <m1: (int32, int32) heap(2)> <- [0] = 1, [1] = %2
    jump b5(f13.m1)
  }
  .bb #b4 () {
    let %8: (int32, int32) = apply self(())
    jump b5(%8)
  }
  .bb #b5 ((int32, int32)) {
    jump b6($b5.0)
  }
  .bb #b6 ((int32, int32)) {
    return $b6.0
  }
}
.fn aux.85 #f29 : closure(int32) -> int32
.freevars (int32)
.entry b0 {
  .bb #b0 () {
    let %0: bool = le($f0, ^1)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3(0)
  }
  .bb #b2 () {
    jump b3(1)
  }
  .bb #b3 (int32) {
    return $b3.0
  }
}
.thunk ::0 start
