# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn aux.7660 #f18 : closure(unit) -> (int32, int32)
.freevars (int32, int32, int32, int32, int32, array[int32], array[int32])
.entry b0 {
  .bb #b0 () {
    let %0: (int32, int32) = call f6($f0, ^1, ^2, ^3, ^4, ^5, ^6, ^7)
    return %0
  }
}
.fn aux.7654 #f2 : fn(unit, int32, int32, array[int32], array[int32]) -> (int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 offset($f3, 0 * @32)
    let %1: bool = eq(%0, $f1)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    let %3: int32 = load int32 field(f2.m0, 0 * @(@32, @(@32, @32)))
    let %4: int32 = load int32 field(f2.m0, 1 * @(@32, @(@32, @32)))
    let %5: bool = eq(%3, 0)
    br %5 b3() b4()
  }
  .bb #b2 () {
    let %13: int32 = add(%0, 1)
    let _ = store int32 offset($f3, 0 * @32) <- %13
    let _ = alloc <m4: (int32, int32) heap(2)> <- [0] = 1, [1] = %0
    let %16: int32 = load int32 field(f2.m4, 0 * @(@32, @(@32, @32)))
    let %17: int32 = load int32 field(f2.m4, 1 * @(@32, @(@32, @32)))
    let %18: bool = eq(%16, 0)
    br %18 b9() b10()
  }
  .bb #b3 () {
    let %6: int32 = load int32 offset($f4, 0 * @32)
    let %7: bool = eq(%6, $f2)
    br %7 b5() b6()
  }
  .bb #b4 () {
    let _ = alloc <m3: (int32, int32) heap(2)> <- [0] = 1, [1] = %4
    jump b8(f2.m3)
  }
  .bb #b5 () {
    let _ = alloc <m1: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b7(f2.m1)
  }
  .bb #b6 () {
    let %9: int32 = add(%6, 1)
    let _ = store int32 offset($f4, 0 * @32) <- %9
    let _ = alloc <m2: (int32, int32) heap(2)> <- [0] = 1, [1] = %6
    jump b7(f2.m2)
  }
  .bb #b7 ((int32, int32)) {
    jump b8($b7.0)
  }
  .bb #b8 ((int32, int32)) {
    jump b15($b8.0)
  }
  .bb #b9 () {
    let %19: int32 = load int32 offset($f4, 0 * @32)
    let %20: bool = eq(%19, $f2)
    br %20 b11() b12()
  }
  .bb #b10 () {
    let _ = alloc <m7: (int32, int32) heap(2)> <- [0] = 1, [1] = %17
    jump b14(f2.m7)
  }
  .bb #b11 () {
    let _ = alloc <m5: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b13(f2.m5)
  }
  .bb #b12 () {
    let %22: int32 = add(%19, 1)
    let _ = store int32 offset($f4, 0 * @32) <- %22
    let _ = alloc <m6: (int32, int32) heap(2)> <- [0] = 1, [1] = %19
    jump b13(f2.m6)
  }
  .bb #b13 ((int32, int32)) {
    jump b14($b13.0)
  }
  .bb #b14 ((int32, int32)) {
    jump b15($b14.0)
  }
  .bb #b15 ((int32, int32)) {
    return $b15.0
  }
}
.fn aux.7656 #f4 : fn(unit, int32, int32, int32, array[int32], array[int32]) -> (int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: (int32, int32) = call f0((), $f1, $f4)
    let %1: int32 = load int32 field(%0, 0 * @(@32, @(@32, @32)))
    let %2: int32 = load int32 field(%0, 1 * @(@32, @(@32, @32)))
    let %3: bool = eq(%1, 0)
    br %3 b1() b2()
  }
  .bb #b1 () {
    let %4: (int32, int32) = call f1((), $f2, $f5)
    let %5: int32 = load int32 field(%4, 0 * @(@32, @(@32, @32)))
    let %6: int32 = load int32 field(%4, 1 * @(@32, @(@32, @32)))
    let %7: bool = eq(%5, 0)
    br %7 b3() b4()
  }
  .bb #b2 () {
    let _ = alloc <m2: (int32, int32) heap(2)> <- [0] = 1, [1] = %2
    let %12: int32 = load int32 field(f4.m2, 0 * @(@32, @(@32, @32)))
    let %13: int32 = load int32 field(f4.m2, 1 * @(@32, @(@32, @32)))
    let %14: bool = eq(%12, 0)
    br %14 b6() b7()
  }
  .bb #b3 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b5(f4.m0)
  }
  .bb #b4 () {
    let %9: int32 = add($f3, %6)
    let _ = alloc <m1: (int32, int32) heap(2)> <- [0] = 1, [1] = %9
    jump b5(f4.m1)
  }
  .bb #b5 ((int32, int32)) {
    jump b9($b5.0)
  }
  .bb #b6 () {
    let _ = alloc <m3: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b8(f4.m3)
  }
  .bb #b7 () {
    let %16: int32 = add($f3, %13)
    let _ = alloc <m4: (int32, int32) heap(2)> <- [0] = 1, [1] = %16
    jump b8(f4.m4)
  }
  .bb #b8 ((int32, int32)) {
    jump b9($b8.0)
  }
  .bb #b9 ((int32, int32)) {
    return $b9.0
  }
}
.fn add.7661 #f20 : closure(int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f7($f0, $f1)
    return %0
  }
}
.fn aux.7658 #f6 : fn(unit, int32, int32, int32, int32, int32, array[int32], array[int32]) -> (int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1($f0)
  }
  .loop #b1 pre #Some(b0) header #b2 {
  }
  .bb #b2 (unit) {
    jump b3(())
  }
  .loop #b3 pre #Some(b2) header #b4 {
    .block #b5
    .block #b6
    .block #b7
    .block #b8
    .block #b9
    .block #b10
    .block #b11
    .block #b12
    .block #b13
    .block #b14
    .block #b15
    .block #b16
    .block #b17
    .block #b18
    .block #b19
    .block #b20
    .block #b21
    .block #b22
    .block #b23
    .block #b24
    .block #b25
    .block #b26
    .block #b27
    .block #b28
    .block #b29
    .block #b30
    .block #b31
    .block #b32
    .block #b33
    .block #b34
  }
  .bb #b4 (unit) {
    let %0: (int32, int32) = call f4((), $f1, $f2, $f3, $f6, $f7)
    let %1: int32 = load int32 field(%0, 0 * @(@32, @(@32, @32)))
    let %2: int32 = load int32 field(%0, 1 * @(@32, @(@32, @32)))
    let %3: bool = eq(%1, 0)
    br %3 b5() b6()
  }
  .bb #b5 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    let %5: int32 = load int32 field(f6.m0, 0 * @(@32, @(@32, @32)))
    let %6: int32 = load int32 field(f6.m0, 1 * @(@32, @(@32, @32)))
    let %7: bool = eq(%5, 0)
    br %7 b7() b8()
  }
  .bb #b6 () {
    let %14: int32 = call f5(%2, $f4)
    let %15: bool = eq(%14, 0)
    br %15 b19() b20()
  }
  .bb #b7 () {
    let _ = alloc <m1: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b18(f6.m1)
  }
  .bb #b8 () {
    let %9: bool = le(%6, $f5)
    br %9 b9() b10()
  }
  .bb #b9 () {
    let %10: bool = eq(0, 0)
    br %10 b11() b12()
  }
  .bb #b10 () {
    let %12: bool = eq(1, 0)
    br %12 b14() b15()
  }
  .bb #b11 () {
    let _ = alloc <m2: (int32, int32) heap(2)> <- [0] = 1, [1] = %6
    jump b13(f6.m2)
  }
  .bb #b12 () {
    jump b2(())
  }
  .bb #b13 ((int32, int32)) {
    jump b17($b13.0)
  }
  .bb #b14 () {
    let _ = alloc <m3: (int32, int32) heap(2)> <- [0] = 1, [1] = %6
    jump b16(f6.m3)
  }
  .bb #b15 () {
    jump b2(())
  }
  .bb #b16 ((int32, int32)) {
    jump b17($b16.0)
  }
  .bb #b17 ((int32, int32)) {
    jump b18($b17.0)
  }
  .bb #b18 ((int32, int32)) {
    jump b34($b18.0)
  }
  .bb #b19 () {
    let _ = alloc <m4: (int32, int32) heap(2)> <- [0] = 1, [1] = %2
    let %17: int32 = load int32 field(f6.m4, 0 * @(@32, @(@32, @32)))
    let %18: int32 = load int32 field(f6.m4, 1 * @(@32, @(@32, @32)))
    let %19: bool = eq(%17, 0)
    br %19 b21() b22()
  }
  .bb #b20 () {
    jump b4(())
  }
  .bb #b21 () {
    let _ = alloc <m5: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b32(f6.m5)
  }
  .bb #b22 () {
    let %21: bool = le(%18, $f5)
    br %21 b23() b24()
  }
  .bb #b23 () {
    let %22: bool = eq(0, 0)
    br %22 b25() b26()
  }
  .bb #b24 () {
    let %24: bool = eq(1, 0)
    br %24 b28() b29()
  }
  .bb #b25 () {
    let _ = alloc <m6: (int32, int32) heap(2)> <- [0] = 1, [1] = %18
    jump b27(f6.m6)
  }
  .bb #b26 () {
    jump b2(())
  }
  .bb #b27 ((int32, int32)) {
    jump b31($b27.0)
  }
  .bb #b28 () {
    let _ = alloc <m7: (int32, int32) heap(2)> <- [0] = 1, [1] = %18
    jump b30(f6.m7)
  }
  .bb #b29 () {
    jump b2(())
  }
  .bb #b30 ((int32, int32)) {
    jump b31($b30.0)
  }
  .bb #b31 ((int32, int32)) {
    jump b32($b31.0)
  }
  .bb #b32 ((int32, int32)) {
    jump b33($b32.0)
  }
  .bb #b33 ((int32, int32)) {
    jump b34($b33.0)
  }
  .bb #b34 ((int32, int32)) {
    return $b34.0
  }
}
.fn aux.7657 #f5 : fn(int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le($f1, $f0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3(0)
  }
  .bb #b2 () {
    jump b3(1)
  }
  .bb #b3 (int32) {
    return $b3.0
  }
}
.fn aux.7653 #f1 : fn(unit, int32, array[int32]) -> (int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 offset($f2, 0 * @32)
    let %1: bool = eq(%0, $f1)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b3(f1.m0)
  }
  .bb #b2 () {
    let %3: int32 = add(%0, 1)
    let _ = store int32 offset($f2, 0 * @32) <- %3
    let _ = alloc <m1: (int32, int32) heap(2)> <- [0] = 1, [1] = %0
    jump b3(f1.m1)
  }
  .bb #b3 ((int32, int32)) {
    return $b3.0
  }
}
.fn aux.7655 #f3 : fn(int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add($f1, $f0)
    return %0
  }
}
.fn aux.7652 #f0 : fn(unit, int32, array[int32]) -> (int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 offset($f2, 0 * @32)
    let %1: bool = eq(%0, $f1)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b3(f0.m0)
  }
  .bb #b2 () {
    let %3: int32 = add(%0, 1)
    let _ = store int32 offset($f2, 0 * @32) <- %3
    let _ = alloc <m1: (int32, int32) heap(2)> <- [0] = 1, [1] = %0
    jump b3(f0.m1)
  }
  .bb #b3 ((int32, int32)) {
    return $b3.0
  }
}
.fn T$start #f22 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f8()
    return %0
  }
}
.fn main.7651 #f8 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m1: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m2: closure(unit) -> (int32, int32) heap(8)> <- [0] = f18, [1] = 100, [2] = 1000, [3] = 1, [4] = 50, [5] = 1200, [6] = f8.m0, [7] = f8.m1
    let _ = alloc <m3: closure(int32, int32) -> int32 heap(1)> <- [0] = f20
    jump b1(f8.m2, f8.m3, 0)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
  }
  .bb #b2 (closure(unit) -> (int32, int32), closure(int32, int32) -> int32, int32) {
    let %2: (int32, int32) = apply $b2.0(())
    let %3: int32 = load int32 field(%2, 0 * @(@32, @(@32, @32)))
    let %4: int32 = load int32 field(%2, 1 * @(@32, @(@32, @32)))
    let %5: bool = eq(%3, 0)
    br %5 b3() b4()
  }
  .bb #b3 () {
    let %6: unit = ext_call minimbt_print_int($b2.2)
    let %7: unit = ext_call minimbt_print_char(10)
    jump b5(())
  }
  .bb #b4 () {
    let %8: int32 = apply $b2.1($b2.2, %4)
    jump b2($b2.0, $b2.1, %8)
  }
  .bb #b5 (unit) {
    return $b5.0
  }
}
.fn add.7659 #f7 : fn(int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add($f0, $f1)
    return %0
  }
}
.thunk ::0 start
