# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn main120l9_17 #f17 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: closure(unit) -> (int32, int32) = call f7(0, 100)
    let %1: closure(unit) -> (int32, int32) = call f7(0, 1000)
    let %2: closure(unit) -> (int32, int32) = call f5(%0, %1)
    let %3: closure(int32) -> int32 = call f9(1)
    let %4: closure(unit) -> (int32, int32) = call f1(%2, %3)
    let %5: closure(int32) -> int32 = call f14(50)
    let %6: closure(unit) -> (int32, int32) = call f3(%4, %5)
    let %7: closure(int32) -> int32 = call f16(1200)
    let %8: closure(unit) -> (int32, int32) = call f3(%6, %7)
    let %9: int32 = call f12(%8)
    let %10: unit = ext_call minimbt_print_int(%9)
    let %11: unit = ext_call minimbt_print_char(10)
    return ()
  }
}
.fn sum99l6_12 #f12 : fn(closure(unit) -> (int32, int32)) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure(int32, int32) -> int32 heap(1)> <- [0] = f41
    let %1: int32 = call f10($f0, f12.m0, 0)
    return %1
  }
}
.fn filter20l1_3 #f3 : fn(closure(unit) -> (int32, int32), closure(int32) -> int32) -> closure(unit) -> (int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure(unit) -> (int32, int32) heap(3)> <- [0] = f24, [1] = $f1, [2] = $f0
    return f3.m0
  }
}
.fn aux6l1c0_20 #f20 : closure(unit) -> (int32, int32)
.freevars (closure(int32) -> int32, closure(unit) -> (int32, int32))
.entry b0 {
  .bb #b0 () {
    let %0: (int32, int32) = call f0($f0, ^1, ^2)
    return %0
  }
}
.fn add102l7_11 #f11 : fn(int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add($f0, $f1)
    return %0
  }
}
.fn map1l0_1 #f1 : fn(closure(unit) -> (int32, int32), closure(int32) -> int32) -> closure(unit) -> (int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure(unit) -> (int32, int32) heap(3)> <- [0] = f20, [1] = $f1, [2] = $f0
    return f1.m0
  }
}
.fn gt108l7_14 #f14 : fn(int32) -> closure(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure(int32) -> int32 heap(2)> <- [0] = f45, [1] = $f0
    return f14.m0
  }
}
.fn aux6l1_0 #f0 : fn(unit, closure(int32) -> int32, closure(unit) -> (int32, int32)) -> (int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: (int32, int32) = apply $f2(())
    let %1: int32 = load int32 field(%0, 0 * @(@32, @(@32, @32)))
    let %2: int32 = load int32 field(%0, 1 * @(@32, @(@32, @32)))
    let %3: bool = eq(%1, 0)
    br %3 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b3(f0.m0)
  }
  .bb #b2 () {
    let %5: int32 = apply $f1(%2)
    let _ = alloc <m1: (int32, int32) heap(2)> <- [0] = 1, [1] = %5
    jump b3(f0.m1)
  }
  .bb #b3 ((int32, int32)) {
    return $b3.0
  }
}
.fn aux117l9c0_49 #f49 : closure(int32) -> int32
.freevars (int32)
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f15($f0, ^1)
    return %0
  }
}
.fn add102l7c0_41 #f41 : closure(int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f11($f0, $f1)
    return %0
  }
}
.fn aux46l3c0_28 #f28 : closure(unit) -> (int32, int32)
.freevars (closure(unit) -> (int32, int32), closure(unit) -> (int32, int32))
.entry b0 {
  .bb #b0 () {
    let %0: (int32, int32) = call f4($f0, ^1, ^2)
    return %0
  }
}
.fn addx78l4_9 #f9 : fn(int32) -> closure(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure(int32) -> int32 heap(2)> <- [0] = f36, [1] = $f0
    return f9.m0
  }
}
.fn aux111l8c0_45 #f45 : closure(int32) -> int32
.freevars (int32)
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f13($f0, ^1)
    return %0
  }
}
.fn aux65l4_6 #f6 : fn(unit, int32, array[int32]) -> (int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 offset($f2, 0 * @32)
    let %1: bool = eq(%0, $f1)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b3(f6.m0)
  }
  .bb #b2 () {
    let %3: int32 = add(%0, 1)
    let _ = store int32 offset($f2, 0 * @32) <- %3
    let _ = alloc <m1: (int32, int32) heap(2)> <- [0] = 1, [1] = %0
    jump b3(f6.m1)
  }
  .bb #b3 ((int32, int32)) {
    return $b3.0
  }
}
.fn T$start_52 #f52 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f17()
    return %0
  }
}
.fn range58l3_7 #f7 : fn(int32, int32) -> closure(unit) -> (int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = $f0
    let _ = alloc <m1: closure(unit) -> (int32, int32) heap(3)> <- [0] = f32, [1] = $f1, [2] = f7.m0
    return f7.m1
  }
}
.fn aux81l5_8 #f8 : fn(int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add($f1, $f0)
    return %0
  }
}
.fn fold84l5_10 #f10 : fn(closure(unit) -> (int32, int32), closure(int32, int32) -> int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: (int32, int32) = apply $f0(())
    let %1: int32 = load int32 field(%0, 0 * @(@32, @(@32, @32)))
    let %2: int32 = load int32 field(%0, 1 * @(@32, @(@32, @32)))
    let %3: bool = eq(%1, 0)
    br %3 b1() b2()
  }
  .bb #b1 () {
    jump b3($f2)
  }
  .bb #b2 () {
    let %4: int32 = apply $f1($f2, %2)
    let %5: int32 = call f10($f0, $f1, %4)
    jump b3(%5)
  }
  .bb #b3 (int32) {
    return $b3.0
  }
}
.fn aux81l5c0_36 #f36 : closure(int32) -> int32
.freevars (int32)
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f8($f0, ^1)
    return %0
  }
}
.fn aux46l3_4 #f4 : fn(unit, closure(unit) -> (int32, int32), closure(unit) -> (int32, int32)) -> (int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: (int32, int32) = apply $f1(())
    let %1: int32 = load int32 field(%0, 0 * @(@32, @(@32, @32)))
    let %2: int32 = load int32 field(%0, 1 * @(@32, @(@32, @32)))
    let %3: bool = eq(%1, 0)
    br %3 b1() b2()
  }
  .bb #b1 () {
    let %4: (int32, int32) = apply $f2(())
    jump b3(%4)
  }
  .bb #b2 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 1, [1] = %2
    jump b3(f4.m0)
  }
  .bb #b3 ((int32, int32)) {
    return $b3.0
  }
}
.fn aux65l4c0_32 #f32 : closure(unit) -> (int32, int32)
.freevars (int32, array[int32])
.entry b0 {
  .bb #b0 () {
    let %0: (int32, int32) = call f6($f0, ^1, ^2)
    return %0
  }
}
.fn aux117l9_15 #f15 : fn(int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le($f0, $f1)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3(0)
  }
  .bb #b2 () {
    jump b3(1)
  }
  .bb #b3 (int32) {
    return $b3.0
  }
}
.fn concat41l2_5 #f5 : fn(closure(unit) -> (int32, int32), closure(unit) -> (int32, int32)) -> closure(unit) -> (int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure(unit) -> (int32, int32) heap(3)> <- [0] = f28, [1] = $f0, [2] = $f1
    return f5.m0
  }
}
.fn aux25l2c0_24 #f24 : closure(unit) -> (int32, int32)
.freevars (closure(int32) -> int32, closure(unit) -> (int32, int32))
.entry b0 {
  .bb #b0 () {
    let %0: (int32, int32) = call f2($f0, ^1, ^2)
    return %0
  }
}
.fn le114l8_16 #f16 : fn(int32) -> closure(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure(int32) -> int32 heap(2)> <- [0] = f49, [1] = $f0
    return f16.m0
  }
}
.fn aux25l2_2 #f2 : fn(unit, closure(int32) -> int32, closure(unit) -> (int32, int32)) -> (int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: (int32, int32) = apply $f2(())
    let %1: int32 = load int32 field(%0, 0 * @(@32, @(@32, @32)))
    let %2: int32 = load int32 field(%0, 1 * @(@32, @(@32, @32)))
    let %3: bool = eq(%1, 0)
    br %3 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b6(f2.m0)
  }
  .bb #b2 () {
    let %5: int32 = apply $f1(%2)
    let %6: bool = eq(%5, 0)
    br %6 b3() b4()
  }
  .bb #b3 () {
    let _ = alloc <m1: (int32, int32) heap(2)> <- [0] = 1, [1] = %2
    jump b5(f2.m1)
  }
  .bb #b4 () {
    let %8: (int32, int32) = call f2((), $f1, $f2)
    jump b5(%8)
  }
  .bb #b5 ((int32, int32)) {
    jump b6($b5.0)
  }
  .bb #b6 ((int32, int32)) {
    return $b6.0
  }
}
.fn aux111l8_13 #f13 : fn(int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le($f1, $f0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3(0)
  }
  .bb #b2 () {
    jump b3(1)
  }
  .bb #b3 (int32) {
    return $b3.0
  }
}
.thunk ::0 start
