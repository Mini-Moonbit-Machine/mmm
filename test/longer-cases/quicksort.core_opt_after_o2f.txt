# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn input79l4_4 #f4 : fn(int32, array[int32], int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = sub($f2, 1)
    let %1: bool = le($f0, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = ext_call minimbt_read_int()
    let _ = store int32 offset($f1, $f0) <- %2
    let %4: int32 = add($f0, 1)
    let %5: unit = call f4(%4, $f1, $f2)
    jump b3(%5)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn partition14l1_2 #f2 : fn(array[int32], int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 offset($f0, $f2)
    let %1: int32 = sub($f1, 1)
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = %1
    let %3: unit = call f1($f1, f2.m0, $f0, %0, $f2)
    let %4: int32 = load int32 field(f2.m0, 0)
    let %5: int32 = add(%4, 1)
    let _ = store int32 field(f2.m0, 0) <- %5
    let %7: int32 = load int32 field(f2.m0, 0)
    let %8: unit = call f0($f0, %7, $f2)
    let %9: int32 = load int32 field(f2.m0, 0)
    return %9
  }
}
.fn quicksort59l2_3 #f3 : fn(array[int32], int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = sub($f2, 1)
    let %1: bool = le($f1, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = call f2($f0, $f1, $f2)
    let %3: int32 = sub(%2, 1)
    let %4: unit = call f3($f0, $f1, %3)
    let %5: int32 = add(%2, 1)
    let %6: unit = call f3($f0, %5, $f2)
    jump b3(%6)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn l26l2_1 #f1 : fn(int32, array[int32], array[int32], int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = sub($f4, 1)
    let %1: bool = le($f0, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = load int32 offset($f2, $f0)
    let %3: bool = le(%2, $f3)
    br %3 b3() b4()
  }
  .bb #b2 () {
    jump b6(())
  }
  .bb #b3 () {
    let %4: int32 = load int32 field($f1, 0)
    let %5: int32 = add(%4, 1)
    let _ = store int32 field($f1, 0) <- %5
    let %7: int32 = load int32 field($f1, 0)
    let %8: unit = call f0($f2, %7, $f0)
    jump b5(%8)
  }
  .bb #b4 () {
    jump b5(())
  }
  .bb #b5 (unit) {
    let %9: int32 = add($f0, 1)
    let %10: unit = call f1(%9, $f1, $f2, $f3, $f4)
    jump b6(%10)
  }
  .bb #b6 (unit) {
    return $b6.0
  }
}
.fn output97l5_5 #f5 : fn(int32, array[int32], int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = sub($f2, 1)
    let %1: bool = le($f0, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = load int32 offset($f1, $f0)
    let %3: unit = ext_call minimbt_print_int(%2)
    let %4: unit = ext_call minimbt_print_endline()
    let %5: int32 = add($f0, 1)
    let %6: unit = call f5(%5, $f1, $f2)
    jump b3(%6)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn swap1l0_0 #f0 : fn(array[int32], int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 offset($f0, $f1)
    let %1: int32 = load int32 offset($f0, $f2)
    let _ = store int32 offset($f0, $f1) <- %1
    let _ = store int32 offset($f0, $f2) <- %0
    return ()
  }
}
.fn main75l3_6 #f6 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = ext_call minimbt_read_int()
    let _ = alloc <m0: array[int32] heap(%0)> <- [..] = 0
    let %2: unit = call f4(0, f6.m0, %0)
    let %3: int32 = sub(%0, 1)
    let %4: unit = call f3(f6.m0, 0, %3)
    let %5: unit = call f5(0, f6.m0, %0)
    return %5
  }
}
.fn T$start_14 #f14 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f6()
    return %0
  }
}
.thunk ::0 start
