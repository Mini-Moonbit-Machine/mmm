# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn insertion_sort30_2 #f2 : fn(array[int32], int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure(int32) -> unit heap(3)> <- [0] = f11, [1] = $f1, [2] = $f0
    let _ = alloc <m1: closure(int32) -> unit heap(3)> <- [0] = f13, [1] = $f2, [2] = f2.m0
    let %2: int32 = add($f1, 1)
    let %3: unit = apply f2.m1(%2)
    return %3
  }
}
.fn g37_11 #f11 : closure(int32) -> unit
.freevars (int32, array[int32])
.entry b8 {
  .bb #b0 (int32) {
    let %0: int32 = add(1, ^1)
    let %1: bool = le(%0, $b0.0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = load int32 offset(^2, $b0.0 * @32)
    let %3: int32 = sub($b0.0, 1)
    let %4: int32 = load int32 offset(^2, %3 * @32)
    let %5: int32 = sub(%4, 1)
    let %6: bool = le(%2, %5)
    br %6 b3() b4()
  }
  .bb #b2 () {
    jump b6(())
  }
  .bb #b3 () {
    let %7: int32 = sub($b0.0, 1)
    let %8: unit = call f0(^2, $b0.0, %7)
    let %9: int32 = sub($b0.0, 1)
    jump b0(%9)
  }
  .bb #b4 () {
    jump b5(())
  }
  .bb #b5 (unit) {
    jump b6($b5.0)
  }
  .bb #b6 (unit) {
    return $b6.0
  }
  .loop #b7 header #b0 {
    .block #b6
    .block #b4
    .block #b1
    .block #b5
    .block #b2
    .block #b3
  }
  .bb #b8 () {
    jump b7($f0)
  }
}
.fn choose_pivot129_4 #f4 : fn(array[int32], int32, int32) -> (int32, bool)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = 0
    let %1: int32 = sub($f2, $f1)
    let %2: int32 = div(%1, 4)
    let %3: int32 = mul(%2, 2)
    let %4: int32 = add($f1, %3)
    let %5: bool = le(8, %1)
    br %5 b1() b2()
  }
  .bb #b1 () {
    let %6: int32 = div(%1, 4)
    let %7: int32 = mul(%6, 1)
    let %8: int32 = add($f1, %7)
    let %9: int32 = div(%1, 4)
    let %10: int32 = mul(%9, 3)
    let %11: int32 = add($f1, %10)
    let _ = alloc <m1: closure(int32, int32) -> unit heap(3)> <- [0] = f19, [1] = $f0, [2] = f4.m0
    let _ = alloc <m2: closure(int32, int32, int32) -> unit heap(2)> <- [0] = f21, [1] = f4.m1
    let %14: int32 = sub(%1, 1)
    let %15: bool = le(50, %14)
    br %15 b3() b4()
  }
  .bb #b2 () {
    jump b6(())
  }
  .bb #b3 () {
    let %16: int32 = sub(%8, 1)
    let %17: int32 = add(%8, 1)
    let %18: unit = apply f4.m2(%16, %8, %17)
    let %19: int32 = sub(%4, 1)
    let %20: int32 = add(%4, 1)
    let %21: unit = apply f4.m2(%19, %4, %20)
    let %22: int32 = sub(%11, 1)
    let %23: int32 = add(%11, 1)
    let %24: unit = apply f4.m2(%22, %11, %23)
    jump b5(%24)
  }
  .bb #b4 () {
    jump b5(())
  }
  .bb #b5 (unit) {
    let %25: unit = apply f4.m2(%8, %4, %11)
    jump b6(%25)
  }
  .bb #b6 (unit) {
    let %26: int32 = load int32 field(f4.m0, 0 * @32)
    let %27: bool = eq(%26, 0)
    br %27 b7() b8()
  }
  .bb #b7 () {
    jump b9(true)
  }
  .bb #b8 () {
    jump b9(false)
  }
  .bb #b9 (bool) {
    let _ = alloc <m3: (int32, bool) heap(2)> <- [0] = %4, [1] = $b9.0
    return f4.m3
  }
}
.fn quick_sort210_5 #f5 : fn(array[int32], int32, int32) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (array[int32], int32, int32) {
    let %0: int32 = sub($b0.2, $b0.1)
    let %1: bool = le(%0, 16)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: unit = call f2($b0.0, $b0.1, $b0.2)
    jump b3(%2)
  }
  .bb #b2 () {
    let %3: (int32, bool) = call f4($b0.0, $b0.1, $b0.2)
    jump b6(%3)
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1, $f2)
  }
  .bb #b6 ((int32, bool)) {
    let %4: int32 = load int32 field($b6.0, 0 * @(@32, @(@32, @32)))
    let %5: bool = load bool field($b6.0, 1 * @(@32, @(@32, @32)))
    let %6: (int32, bool) = call f3($b0.0, %4, $b0.1, $b0.2)
    jump b7(%6)
  }
  .bb #b7 ((int32, bool)) {
    let %7: int32 = load int32 field($b7.0, 0 * @(@32, @(@32, @32)))
    let %8: bool = load bool field($b7.0, 1 * @(@32, @(@32, @32)))
    let %9: unit = call f5($b0.0, $b0.1, %7)
    let %10: int32 = add(%7, 1)
    jump b0($b0.0, %10, $b0.2)
  }
}
.fn main239_7 #f7 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = ext_call minimbt_read_int()
    let _ = alloc <m0: array[int32] heap(%0)> <- [..] = 0
    let _ = alloc <m1: closure(int32) -> unit heap(3)> <- [0] = f26, [1] = %0, [2] = f7.m0
    let %3: unit = apply f7.m1(0)
    let %4: unit = call f6(f7.m0, %0)
    let %5: unit = call f1(f7.m0, 0, %0)
    return %5
  }
}
.fn output14_1 #f1 : fn(array[int32], int32, int32) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (array[int32], int32, int32) {
    let %0: int32 = sub($b0.2, 1)
    let %1: bool = le($b0.1, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = load int32 offset($b0.0, $b0.1 * @32)
    let %3: unit = ext_call minimbt_print_int(%2)
    let %4: unit = ext_call minimbt_print_endline()
    let %5: int32 = add($b0.1, 1)
    jump b0($b0.0, %5, $b0.2)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1, $f2)
  }
}
.fn sort_3173_21 #f21 : closure(int32, int32, int32) -> unit
.freevars (closure(int32, int32) -> unit)
.entry b0 {
  .bb #b0 () {
    let %0: unit = apply ^1($f0, $f1)
    let %1: unit = apply ^1($f1, $f2)
    let %2: unit = apply ^1($f0, $f1)
    return %2
  }
}
.fn input243_26 #f26 : closure(int32) -> unit
.freevars (int32, array[int32])
.entry b5 {
  .bb #b0 (int32) {
    let %0: int32 = sub(^1, 1)
    let %1: bool = le($b0.0, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = ext_call minimbt_read_int()
    let _ = store int32 offset(^2, $b0.0 * @32) <- %2
    let %4: int32 = add($b0.0, 1)
    jump b0(%4)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0)
  }
}
.fn sort233_6 #f6 : fn(array[int32], int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f5($f0, 0, $f1)
    return %0
  }
}
.fn sort_2157_19 #f19 : closure(int32, int32) -> unit
.freevars (array[int32], array[int32])
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 offset(^1, $f1 * @32)
    let %1: int32 = load int32 offset(^1, $f0 * @32)
    let %2: int32 = sub(%1, 1)
    let %3: bool = le(%0, %2)
    br %3 b1() b2()
  }
  .bb #b1 () {
    let %4: unit = call f0(^1, $f0, $f1)
    let %5: int32 = load int32 field(^2, 0 * @32)
    let %6: int32 = add(%5, 1)
    let _ = store int32 field(^2, 0 * @32) <- %6
    jump b3(())
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn swap1_0 #f0 : fn(array[int32], int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 offset($f0, $f1 * @32)
    let %1: int32 = load int32 offset($f0, $f2 * @32)
    let _ = store int32 offset($f0, $f1 * @32) <- %1
    let _ = store int32 offset($f0, $f2 * @32) <- %0
    return ()
  }
}
.fn f54_13 #f13 : closure(int32) -> unit
.freevars (int32, closure(int32) -> unit)
.entry b5 {
  .bb #b0 (int32) {
    let %0: int32 = sub(^1, 1)
    let %1: bool = le($b0.0, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: unit = apply ^2($b0.0)
    let %3: int32 = add($b0.0, 1)
    jump b0(%3)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0)
  }
}
.fn T$start_28 #f28 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f7()
    return %0
  }
}
.fn aux86_16 #f16 : closure(int32) -> unit
.freevars (int32, array[int32], int32, array[int32], array[int32])
.entry b11 {
  .bb #b0 (int32) {
    let %0: int32 = sub(^1, 2)
    let %1: bool = le($b0.0, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = load int32 offset(^2, $b0.0 * @32)
    let %3: int32 = sub(^3, 1)
    let %4: bool = le(%2, %3)
    br %4 b3() b4()
  }
  .bb #b2 () {
    jump b9(())
  }
  .bb #b3 () {
    let %5: int32 = load int32 field(^4, 0 * @32)
    let %6: bool = eq(%5, $b0.0)
    br %6 b5() b6()
  }
  .bb #b4 () {
    jump b8(())
  }
  .bb #b5 () {
    jump b7(())
  }
  .bb #b6 () {
    let %7: int32 = load int32 field(^4, 0 * @32)
    let %8: unit = call f0(^2, %7, $b0.0)
    let _ = store int32 field(^5, 0 * @32) <- 0
    jump b7(())
  }
  .bb #b7 (unit) {
    let %10: int32 = load int32 field(^4, 0 * @32)
    let %11: int32 = add(%10, 1)
    let _ = store int32 field(^4, 0 * @32) <- %11
    jump b8(())
  }
  .bb #b8 (unit) {
    let %13: int32 = add($b0.0, 1)
    jump b0(%13)
  }
  .bb #b9 (unit) {
    return $b9.0
  }
  .loop #b10 header #b0 {
    .block #b6
    .block #b4
    .block #b8
    .block #b9
    .block #b1
    .block #b5
    .block #b2
    .block #b3
    .block #b7
  }
  .bb #b11 () {
    jump b10($f0)
  }
}
.fn partition65_3 #f3 : fn(array[int32], int32, int32, int32) -> (int32, bool)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = sub($f3, 1)
    let %1: unit = call f0($f0, $f1, %0)
    let %2: int32 = sub($f3, 1)
    let %3: int32 = load int32 offset($f0, %2 * @32)
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = $f2
    let _ = alloc <m1: array[int32] heap(1)> <- [..] = 1
    let _ = alloc <m2: closure(int32) -> unit heap(6)> <- [0] = f16, [1] = $f3, [2] = $f0, [3] = %3, [4] = f3.m0, [5] = f3.m1
    let %7: unit = apply f3.m2($f2)
    let %8: int32 = load int32 field(f3.m0, 0 * @32)
    let %9: int32 = sub($f3, 1)
    let %10: unit = call f0($f0, %8, %9)
    let %11: int32 = load int32 field(f3.m0, 0 * @32)
    let %12: int32 = load int32 field(f3.m1, 0 * @32)
    let %13: bool = eq(%12, 1)
    br %13 b1() b2()
  }
  .bb #b1 () {
    jump b3(true)
  }
  .bb #b2 () {
    jump b3(false)
  }
  .bb #b3 (bool) {
    let _ = alloc <m3: (int32, bool) heap(2)> <- [0] = %11, [1] = $b3.0
    return f3.m3
  }
}
.thunk ::0 start
