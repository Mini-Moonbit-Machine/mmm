let rec random.1: Int = (state.2: Int) {
  let _3: Int = Int(75)
  let _4: Int = Mul(state.2, _3)
  let _5: Int = Int(74)
  Add(_4, _5)
}
let rec modulo.6: Int = (x.7: Int, y.8: Int) {
  let q.9: Int = Div(x.7, y.8)
  let _10: Int = Mul(q.9, y.8)
  Sub(x.7, _10)
}
let rec fill_buffer.11: Unit = (arr.12: Array(Int), n.13: Int) {
  let _23: Int = Int(0)
  let _24: Int = Int(12345)
  let join aux.117: Unit = (i.118: Int, state.119: Int) {
    if (i.118 == n.13) then {
      Unit
    } else {
      let new_state.120: Int = Apply(random.1, [state.119, ])
      let _121: Int = Int(65537)
      let res.122: Int = Apply(modulo.6, [new_state.120, _121, ])
      let _123: Unit = Put arr.12[i.118] = res.122
      let _124: Int = Int(1)
      let _125: Int = Add(i.118, _124)
      Jump(aux.117, [_125, res.122, ])
    }
  }
  Jump(aux.117, [_23, _24, ])
}
let rec isort.25: Unit = (arr.26: Array(Int), n.27: Int) {
  let rec insert.28: Unit = (arr.29: Array(Int), i.30: Int) {
    let join insert.79: Unit = (arr.80: Array(Int), i.81: Int) {
      let _82: Int = Int(0)
      if (i.81 == _82) then {
        Unit
      } else {
        let _83: Int = Int(1)
        let _84: Int = Sub(i.81, _83)
        let _85: Int = Get arr.80[_84]
        let _86: Int = Get arr.80[i.81]
        if (_85 <= _86) then {
          Unit
        } else {
          let tmp.87: Int = Get arr.80[i.81]
          let _88: Int = Int(1)
          let _89: Int = Sub(i.81, _88)
          let _90: Int = Get arr.80[_89]
          let _91: Unit = Put arr.80[i.81] = _90
          let _92: Int = Int(1)
          let _93: Int = Sub(i.81, _92)
          let _94: Unit = Put arr.80[_93] = tmp.87
          let _95: Int = Int(1)
          let _96: Int = Sub(i.81, _95)
          Jump(insert.79, [arr.80, _96, ])
        }
      }
    }
    Jump(insert.79, [arr.29, i.30, ])
  }
  let _51: Int = Int(1)
  let join aux.126: Unit = (i.127: Int) {
    if (i.127 == n.27) then {
      Unit
    } else {
      let _128: Unit = Apply(insert.28, [arr.26, i.127, ])
      let _129: Int = Int(1)
      let _130: Int = Add(i.127, _129)
      Jump(aux.126, [_130, ])
    }
  }
  Jump(aux.126, [_51, ])
}
let rec print_array.52: Unit = (arr.53: Array(Int), n.54: Int) {
  let _63: Int = Int(0)
  let join aux.131: Unit = (i.132: Int) {
    if (i.132 == n.54) then {
      Unit
    } else {
      let _133: Int = Get arr.53[i.132]
      let _134: Unit = ExtApply(minimbt_print_int, [_133, ])
      let _135: Int = Int(32)
      let _136: Unit = ExtApply(minimbt_print_char, [_135, ])
      let _137: Int = Int(1)
      let _138: Int = Add(i.132, _137)
      Jump(aux.131, [_138, ])
    }
  }
  Jump(aux.131, [_63, ])
}
let rec main.64: Var({val: Some(Unit)}) = () {
  let n.65: Int = Int(100)
  let _66: Int = Int(0)
  let arr.67: Array(Int) = ExtApply(minimbt_create_array, [n.65, _66, ])
  let _68: Unit = Apply(fill_buffer.11, [arr.67, n.65, ])
  let _69: Unit = Apply(isort.25, [arr.67, n.65, ])
  Apply(print_array.52, [arr.67, n.65, ])
}
Apply(main.64, [])