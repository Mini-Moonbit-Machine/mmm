let rec random.1: Int = (state.2: Int) {
  let _3: Int = Int(75)
  let _4: Int = Mul(state.2, _3)
  let _5: Int = Int(74)
  Add(_4, _5)
}
let rec modulo.6: Int = (x.7: Int, y.8: Int) {
  let q.9: Int = Div(x.7, y.8)
  let _10: Int = Mul(q.9, y.8)
  Sub(x.7, _10)
}
let rec main.64: Var({val: Some(Unit)}) = () {
  let n.65: Int = Int(100)
  let _66: Int = Int(0)
  let arr.67: Array(Int) = ExtApply(minimbt_create_array, [n.65, _66, ])
  let rec aux.208: Unit = (i.209: Int, state.210: Int) {
    let join aux.211: Unit = (i.212: Int, state.213: Int) {
      if (i.212 == n.65) then {
        Unit
      } else {
        let new_state.214: Int = Apply(random.1, [state.213, ])
        let _215: Int = Int(65537)
        let res.216: Int = Apply(modulo.6, [new_state.214, _215, ])
        let _217: Unit = Put arr.67[i.212] = res.216
        let _218: Int = Int(1)
        let _219: Int = Add(i.212, _218)
        Jump(aux.211, [_219, res.216, ])
      }
    }
    Jump(aux.211, [i.209, state.210, ])
  }
  let _220: Int = Int(0)
  let _221: Int = Int(12345)
  let _68: Unit = Apply(aux.208, [_220, _221, ])
  let rec insert.233: Unit = (arr.234: Array(Int), i.235: Int) {
    let join insert.236: Unit = (arr.237: Array(Int), i.238: Int) {
      let _239: Int = Int(0)
      if (i.238 == _239) then {
        Unit
      } else {
        let _240: Int = Int(1)
        let _241: Int = Sub(i.238, _240)
        let _242: Int = Get arr.237[_241]
        let _243: Int = Get arr.237[i.238]
        if (_242 <= _243) then {
          Unit
        } else {
          let tmp.244: Int = Get arr.237[i.238]
          let _245: Int = Int(1)
          let _246: Int = Sub(i.238, _245)
          let _247: Int = Get arr.237[_246]
          let _248: Unit = Put arr.237[i.238] = _247
          let _249: Int = Int(1)
          let _250: Int = Sub(i.238, _249)
          let _251: Unit = Put arr.237[_250] = tmp.244
          let _252: Int = Int(1)
          let _253: Int = Sub(i.238, _252)
          Jump(insert.236, [arr.237, _253, ])
        }
      }
    }
    Jump(insert.236, [arr.234, i.235, ])
  }
  let rec aux.254: Unit = (i.255: Int) {
    let join aux.256: Unit = (i.257: Int) {
      if (i.257 == n.65) then {
        Unit
      } else {
        let _258: Unit = Apply(insert.233, [arr.67, i.257, ])
        let _259: Int = Int(1)
        let _260: Int = Add(i.257, _259)
        Jump(aux.256, [_260, ])
      }
    }
    Jump(aux.256, [i.255, ])
  }
  let _261: Int = Int(1)
  let _69: Unit = Apply(aux.254, [_261, ])
  let rec aux.262: Unit = (i.263: Int) {
    let join aux.264: Unit = (i.265: Int) {
      if (i.265 == n.65) then {
        Unit
      } else {
        let _266: Int = Get arr.67[i.265]
        let _267: Unit = ExtApply(minimbt_print_int, [_266, ])
        let _268: Int = Int(32)
        let _269: Unit = ExtApply(minimbt_print_char, [_268, ])
        let _270: Int = Int(1)
        let _271: Int = Add(i.265, _270)
        Jump(aux.264, [_271, ])
      }
    }
    Jump(aux.264, [i.263, ])
  }
  let _272: Int = Int(0)
  Apply(aux.262, [_272, ])
}
Apply(main.64, [])