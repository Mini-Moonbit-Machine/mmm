let rec init_arr.514: Unit = (i.299: Int, arr.297: Array[Int]) {
  let _300: Int = Int(1)
  let _301: Int = Int(8)
  if (i.299 <= _301) then {
    let _302: Unit = Put arr.297[i.299] = i.299
    let _303: Int = Int(1)
    let _304: Int = Add(i.299, _303)
    Apply(init_arr.514, [_304, arr.297, ])
  } else {
    Unit
  }
}
let rec copy_perm.516: Unit = (i.331: Int, arr.297: Array[Int], perm.308: Array[Int]) {
  let _332: Int = Int(1)
  let _333: Int = Int(8)
  if (i.331 <= _333) then {
    let _334: Int = Get arr.297[i.331]
    let _335: Unit = Put perm.308[i.331] = _334
    let _336: Int = Int(1)
    let _337: Int = Add(i.331, _336)
    Apply(copy_perm.516, [_337, arr.297, perm.308, ])
  } else {
    Unit
  }
}
let rec init_count.517: Unit = (r.326: Array[Int], count.310: Array[Int]) {
  let _341: Int = Int(0)
  let _342: Int = Get r.326[_341]
  let _343: Int = Int(1)
  let _344: Unit = if (_342 == _343) then {
    Unit
  } else {
    let _345: Int = Int(0)
    let _346: Int = Get r.326[_345]
    let _347: Int = Int(1)
    let _348: Int = Sub(_346, _347)
    let _349: Int = Int(0)
    let _350: Int = Get r.326[_349]
    let _351: Unit = Put count.310[_348] = _350
    let _352: Int = Int(0)
    let _353: Int = Int(0)
    let _354: Int = Get r.326[_353]
    let _355: Int = Int(1)
    let _356: Int = Sub(_354, _355)
    let _357: Unit = Put r.326[_352] = _356
    Apply(init_count.517, [r.326, count.310, ])
  }
  Unit
}
let rec flip_loop.519: Unit = (i.375: Int, k.367: Array[Int], t.373: Array[Int], perm.308: Array[Int]) {
  let _376: Int = Int(0)
  let _377: Int = Get k.367[_376]
  let _378: Int = Int(2)
  let _379: Int = Div(_377, _378)
  if (i.375 <= _379) then {
    let _380: Int = Int(0)
    let _381: Int = Get perm.308[i.375]
    let _382: Unit = Put t.373[_380] = _381
    let _383: Int = Int(0)
    let _384: Int = Get k.367[_383]
    let _385: Int = Sub(_384, i.375)
    let _386: Int = Get perm.308[_385]
    let _387: Unit = Put perm.308[i.375] = _386
    let _388: Int = Int(0)
    let _389: Int = Get k.367[_388]
    let _390: Int = Sub(_389, i.375)
    let _391: Int = Int(0)
    let _392: Int = Get t.373[_391]
    let _393: Unit = Put perm.308[_390] = _392
    let _394: Int = Int(1)
    let _395: Int = Add(i.375, _394)
    Apply(flip_loop.519, [_395, k.367, t.373, perm.308, ])
  } else {
    Unit
  }
}
let rec do_flip.518: Unit = (k.367: Array[Int], perm.308: Array[Int], flips.313: Array[Int]) {
  let _368: Int = Int(0)
  let _369: Int = Get k.367[_368]
  let _370: Int = Int(0)
  if (_369 == _370) then {
    Unit
  } else {
    let _371: Int = Int(1)
    let _372: Int = Int(0)
    let t.373: Array[Int] = ExtApply(minimbt_create_array, [_371, _372, ])
    let _396: Int = Int(0)
    let _397: Unit = Apply(flip_loop.519, [_396, k.367, t.373, perm.308, ])
    let _398: Int = Int(0)
    let _399: Int = Int(0)
    let _400: Int = Get perm.308[_399]
    let _401: Unit = Put k.367[_398] = _400
    let _402: Int = Int(0)
    let _403: Int = Int(0)
    let _404: Int = Get flips.313[_403]
    let _405: Int = Int(1)
    let _406: Int = Add(_404, _405)
    let _407: Unit = Put flips.313[_402] = _406
    Apply(do_flip.518, [k.367, perm.308, flips.313, ])
  }
}
let rec move_perm1_forward.521: Unit = (i.462: Int, r.326: Array[Int], arr.297: Array[Int]) {
  let _463: Int = Int(0)
  let _464: Int = Get r.326[_463]
  let _465: Int = Int(1)
  let _466: Int = Sub(_464, _465)
  if (i.462 <= _466) then {
    let _467: Int = Int(1)
    let _468: Int = Add(i.462, _467)
    let _469: Int = Get arr.297[_468]
    let _470: Unit = Put arr.297[i.462] = _469
    let _471: Int = Int(1)
    let _472: Int = Add(i.462, _471)
    let _473: Unit = Apply(move_perm1_forward.521, [_472, r.326, arr.297, ])
    Unit
  } else {
    Unit
  }
}
let rec go_loop.520: Unit = (_263: Int, r.326: Array[Int], t.443: Array[Int], go.440: Array[Bool], arr.297: Array[Int], count.310: Array[Int]) {
  let _445: Int = Int(0)
  let _446: Bool = Get go.440[_445]
  let _447: Bool = Bool(true)
  if (_446 == _447) then {
    let _448: Int = Int(0)
    let _449: Int = Get r.326[_448]
    let _450: Unit = if (_449 == _263) then {
      let _451: Int = Int(0)
      let _452: Bool = Bool(false)
      let _453: Unit = Put go.440[_451] = _452
      let _454: Int = Int(0)
      let _455: Int = Int(0)
      let _456: Unit = Put r.326[_454] = _455
      Unit
    } else {
      let _457: Int = Int(0)
      let _458: Int = Int(0)
      let _459: Int = Get arr.297[_458]
      let _460: Unit = Put t.443[_457] = _459
      let _474: Int = Int(0)
      let _475: Unit = Apply(move_perm1_forward.521, [_474, r.326, arr.297, ])
      let _476: Int = Int(0)
      let _477: Int = Get r.326[_476]
      let _478: Int = Int(0)
      let _479: Int = Get t.443[_478]
      let _480: Unit = Put arr.297[_477] = _479
      let _481: Int = Int(0)
      let _482: Int = Get r.326[_481]
      let _483: Int = Int(0)
      let _484: Int = Get r.326[_483]
      let _485: Int = Get count.310[_484]
      let _486: Int = Int(1)
      let _487: Int = Sub(_485, _486)
      let _488: Unit = Put count.310[_482] = _487
      let _489: Int = Int(1)
      let _490: Int = Int(0)
      let _491: Int = Get r.326[_490]
      let _492: Int = Get count.310[_491]
      let _493: Unit = if (_489 <= _492) then {
        let _494: Int = Int(0)
        let _495: Bool = Bool(false)
        Put go.440[_494] = _495
      } else {
        let _496: Int = Int(0)
        let _497: Int = Int(0)
        let _498: Int = Get r.326[_497]
        let _499: Int = Int(1)
        let _500: Int = Add(_498, _499)
        Put r.326[_496] = _500
      }
      Unit
    }
    Apply(go_loop.520, [_263, r.326, t.443, go.440, arr.297, count.310, ])
  } else {
    Unit
  }
}
let rec compute.515: Unit = (r.326: Array[Int], _263: Int, arr.297: Array[Int], perm.308: Array[Int], count.310: Array[Int], flips.313: Array[Int], nperm.322: Array[Int], check_sum.319: Array[Int], max_flips.316: Array[Int]) {
  let _327: Int = Int(1)
  let _328: Int = Int(0)
  let _329: Int = Get r.326[_328]
  if (_327 <= _329) then {
    let _338: Int = Int(0)
    let _339: Unit = Apply(copy_perm.516, [_338, arr.297, perm.308, ])
    let _358: Unit = Apply(init_count.517, [r.326, count.310, ])
    let _359: Int = Int(0)
    let _360: Int = Int(0)
    let _361: Unit = Put flips.313[_359] = _360
    let _362: Int = Int(1)
    let _363: Int = Int(0)
    let _364: Int = Get perm.308[_363]
    let k.365: Array[Int] = ExtApply(minimbt_create_array, [_362, _364, ])
    let _408: Unit = Apply(do_flip.518, [k.365, perm.308, flips.313, ])
    let _409: Int = Int(0)
    let _410: Int = Get max_flips.316[_409]
    let _411: Int = Int(0)
    let _412: Int = Get flips.313[_411]
    let _413: Unit = if (_410 <= _412) then {
      let _414: Int = Int(0)
      let _415: Int = Int(0)
      let _416: Int = Get flips.313[_415]
      Put max_flips.316[_414] = _416
    } else {
      Unit
    }
    let _417: Int = Int(0)
    let _418: Int = Int(0)
    let _419: Int = Get check_sum.319[_418]
    let _420: Int = Int(0)
    let _421: Int = Get flips.313[_420]
    let _422: Int = Int(1)
    let _423: Int = Int(0)
    let _424: Int = Get nperm.322[_423]
    let _425: Int = Int(0)
    let _426: Int = Get nperm.322[_425]
    let _427: Int = Int(2)
    let _428: Int = Div(_426, _427)
    let _429: Int = Int(2)
    let _430: Int = Mul(_428, _429)
    let _431: Int = Sub(_424, _430)
    let _432: Int = Int(2)
    let _433: Int = Mul(_431, _432)
    let _434: Int = Sub(_422, _433)
    let _435: Int = Mul(_421, _434)
    let _436: Int = Add(_419, _435)
    let _437: Unit = Put check_sum.319[_417] = _436
    let _438: Int = Int(1)
    let _439: Bool = Bool(true)
    let go.440: Array[Bool] = ExtApply(minimbt_create_array, [_438, _439, ])
    let _441: Int = Int(1)
    let _442: Int = Int(0)
    let t.443: Array[Int] = ExtApply(minimbt_create_array, [_441, _442, ])
    let _501: Unit = Apply(go_loop.520, [_263, r.326, t.443, go.440, arr.297, count.310, ])
    let _502: Int = Int(0)
    let _503: Int = Int(0)
    let _504: Int = Get nperm.322[_503]
    let _505: Int = Int(1)
    let _506: Int = Add(_504, _505)
    let _507: Unit = Put nperm.322[_502] = _506
    Apply(compute.515, [r.326, _263, arr.297, perm.308, count.310, flips.313, nperm.322, check_sum.319, max_flips.316, ])
  } else {
    Unit
  }
}
let rec main.513: Unit = () {
  let _263: Int = Int(9)
  let _296: Int = Int(0)
  let arr.297: Array[Int] = ExtApply(minimbt_create_array, [_263, _296, ])
  let _305: Int = Int(0)
  let _306: Unit = Apply(init_arr.514, [_305, arr.297, ])
  let _307: Int = Int(0)
  let perm.308: Array[Int] = ExtApply(minimbt_create_array, [_263, _307, ])
  let _309: Int = Int(0)
  let count.310: Array[Int] = ExtApply(minimbt_create_array, [_263, _309, ])
  let _311: Int = Int(1)
  let _312: Int = Int(0)
  let flips.313: Array[Int] = ExtApply(minimbt_create_array, [_311, _312, ])
  let _314: Int = Int(1)
  let _315: Int = Int(0)
  let max_flips.316: Array[Int] = ExtApply(minimbt_create_array, [_314, _315, ])
  let _317: Int = Int(1)
  let _318: Int = Int(0)
  let check_sum.319: Array[Int] = ExtApply(minimbt_create_array, [_317, _318, ])
  let _320: Int = Int(1)
  let _321: Int = Int(0)
  let nperm.322: Array[Int] = ExtApply(minimbt_create_array, [_320, _321, ])
  let _323: Int = Int(1)
  let r.324: Array[Int] = ExtApply(minimbt_create_array, [_323, _263, ])
  let _508: Unit = Apply(compute.515, [r.324, _263, arr.297, perm.308, count.310, flips.313, nperm.322, check_sum.319, max_flips.316, ])
  let _509: Int = Int(0)
  let _510: Int = Get max_flips.316[_509]
  let _511: Int = Int(0)
  let _512: Int = Get check_sum.319[_511]
  let _264: (Int, Int) = UnboxedTuple([_510, _512, ])
  let unboxed (max_flips.266: Int, check_sum.268: Int) = _264
  let _270: Unit = ExtApply(minimbt_print_int, [check_sum.268, ])
  ExtApply(minimbt_print_int, [max_flips.266, ])
}
Apply(main.513, [])
