# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn main33.91 #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap(5)> <- [..] = 1
    let _ = store int32 field(f2.m0, 0 * @32) <- 1
    let _ = store int32 field(f2.m0, 1 * @32) <- 2
    let _ = store int32 field(f2.m0, 2 * @32) <- 3
    let _ = store int32 field(f2.m0, 3 * @32) <- 4
    let _ = store int32 field(f2.m0, 4 * @32) <- 5
    let %6: unit = call f1(5, f2.m0)
    return %6
  }
}
.fn do30.92 #f1 : fn(int32, array[int32]) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (int32, array[int32]) {
    let %0: bool = call f0(0, $b0.0, $b0.1)
    let %1: bool = eq(%0, true)
    br %1 b1() b2()
  }
  .bb #b1 () {
    jump b0($b0.0, $b0.1)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1)
  }
}
.fn T$start #f6 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f2()
    return %0
  }
}
.fn next9.93 #f0 : fn(int32, int32, array[int32]) -> bool
.freevars ()
.entry b8 {
  .bb #b0 (int32, int32, array[int32]) {
    let %0: int32 = sub($b0.1, 1)
    let %1: bool = le($b0.0, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = load int32 offset($b0.2, $b0.0 * @32)
    let %3: unit = ext_call minimbt_print_int(%2)
    let %4: bool = eq(true, true)
    br %4 b3() b4()
  }
  .bb #b2 () {
    jump b6(false)
  }
  .bb #b3 () {
    let %5: int32 = add($b0.0, 1)
    jump b0(%5, $b0.1, $b0.2)
  }
  .bb #b4 () {
    jump b5(false)
  }
  .bb #b5 (bool) {
    jump b6($b5.0)
  }
  .bb #b6 (bool) {
    return $b6.0
  }
  .loop #b7 pre #Some(b8) header #b0 {
    .block #b6
    .block #b4
    .block #b1
    .block #b5
    .block #b2
    .block #b3
  }
  .bb #b8 () {
    jump b7($f0, $f1, $f2)
  }
}
.thunk ::0 start

