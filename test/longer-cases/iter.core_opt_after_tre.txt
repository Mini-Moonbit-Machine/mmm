# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn print.81 #f2 : fn(int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = ext_call minimbt_print_int($f0)
    return %0
  }
}
.fn yield.85 #f13 : closure(int32) -> bool
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = call f3($f0)
    return %0
  }
}
.fn next.80 #f0 : fn(int32, int32, array[int32], closure(int32) -> bool) -> bool
.freevars ()
.entry b8 {
  .bb #b0 (int32, int32, array[int32], closure(int32) -> bool) {
    let %0: int32 = sub($b0.1, 1)
    let %1: bool = le($b0.0, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = load int32 offset($b0.2, $b0.0 * @32)
    let %3: bool = apply $b0.3(%2)
    let %4: bool = eq(%3, true)
    br %4 b3() b4()
  }
  .bb #b2 () {
    jump b6(false)
  }
  .bb #b3 () {
    let %5: int32 = add($b0.0, 1)
    jump b0(%5, $b0.1, $b0.2, $b0.3)
  }
  .bb #b4 () {
    jump b5(false)
  }
  .bb #b5 (bool) {
    jump b6($b5.0)
  }
  .bb #b6 (bool) {
    return $b6.0
  }
  .loop #b7 pre #Some(b8) header #b0 {
    .block #b6
    .block #b4
    .block #b1
    .block #b5
    .block #b2
    .block #b3
  }
  .bb #b8 () {
    jump b7($f0, $f1, $f2, $f3)
  }
}
.fn do.79 #f1 : fn(closure(int32) -> bool, int32, array[int32]) -> bool
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = call f0(0, $f1, $f2, $f0)
    return %0
  }
}
.fn main.78 #f5 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap(5)> <- [..] = 1
    let _ = store int32 field(f5.m0, 0 * @32) <- 1
    let _ = store int32 field(f5.m0, 1 * @32) <- 2
    let _ = store int32 field(f5.m0, 2 * @32) <- 3
    let _ = store int32 field(f5.m0, 3 * @32) <- 4
    let _ = store int32 field(f5.m0, 4 * @32) <- 5
    let %6: unit = call f4(5, f5.m0)
    return %6
  }
}
.fn yield.84 #f11 : closure(int32) -> bool
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = call f3($f0)
    return %0
  }
}
.fn do.83 #f4 : fn(int32, array[int32]) -> unit
.freevars ()
.entry b8 {
  .bb #b0 (int32, array[int32]) {
    let _ = alloc <m0: closure(int32) -> bool heap(1)> <- [0] = f11
    let %1: bool = call f1(f4.m0, $b0.0, $b0.1)
    let %2: bool = eq(%1, true)
    br %2 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m1: closure(int32) -> bool heap(1)> <- [0] = f13
    let %4: bool = call f1(f4.m1, $b0.0, $b0.1)
    let %5: bool = eq(%4, true)
    br %5 b3() b4()
  }
  .bb #b2 () {
    jump b6(())
  }
  .bb #b3 () {
    jump b0($b0.0, $b0.1)
  }
  .bb #b4 () {
    jump b5(())
  }
  .bb #b5 (unit) {
    jump b6($b5.0)
  }
  .bb #b6 (unit) {
    return $b6.0
  }
  .loop #b7 pre #Some(b8) header #b0 {
    .block #b6
    .block #b4
    .block #b1
    .block #b5
    .block #b2
    .block #b3
  }
  .bb #b8 () {
    jump b7($f0, $f1)
  }
}
.fn T$start #f16 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f5()
    return %0
  }
}
.fn yield.82 #f3 : fn(int32) -> bool
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f2($f0)
    return true
  }
}
.thunk ::0 start
