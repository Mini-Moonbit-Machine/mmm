let rec mem_fib.15: Int = (f.17: Fun([Int], Int), n.19: Int) {
  let _20: Int = Int(1)
  if (n.19 <= _20) then {
    Var(n.19)
  } else {
    let _21: Int = Int(1)
    let _22: Int = Sub(n.19, _21)
    let _23: Int = Apply(f.17, [_22, ])
    let _24: Int = Int(2)
    let _25: Int = Sub(n.19, _24)
    let _26: Int = Apply(f.17, [_25, ])
    Add(_23, _26)
  }
}
let rec main.33: Var({val: Some(Unit)}) = () {
  let n.34: Int = ExtApply(minimbt_read_int, [])
  let _47: Int = Int(1)
  let _48: Int = Add(n.34, _47)
  let _56: Int = Int(-1919810)
  let cache.50: Array(Int) = ExtApply(minimbt_create_array, [_48, _56, ])
  let rec memed.51: Int = (n.52: Int) {
    let _53: Int = Get cache.50[n.52]
    let _57: Int = Int(-1919810)
    if (_53 == _57) then {
      let res.54: Int = Apply(mem_fib.15, [memed.51, n.52, ])
      let _55: Unit = Put cache.50[n.52] = res.54
      Var(res.54)
    } else {
      Get cache.50[n.52]
    }
  }
  let _35: Int = Apply(memed.51, [n.34, ])
  let _37: Unit = ExtApply(minimbt_print_int, [_35, ])
  let _38: Int = Int(10)
  let _40: Unit = ExtApply(minimbt_print_char, [_38, ])
  Unit
}
Apply(main.33, [])
