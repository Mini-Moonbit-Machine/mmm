let unmem_magic: Int = Neg(Int(1919810))
let rec mem: (func: ((Int) -> Int, Int) -> Int, max_n: Int) -> (Int) -> Int {
  let cache: Var(None) = Array::make(Var("max_n"), Var("unmem_magic"))
  let rec memed: (n: Int) -> Int {
    if (Eq(Get(Var("cache"), Var("n")), Var("unmem_magic"))) then {
      let res: Var(None) = Apply(Var("func"), [Var("memed"), Var("n"), ])
      let _: Var(None) = Put Var("cache")[Var("n")] = Var("res")
      Var(res)
    } else {
      Get Var("cache")[Var("n")]
    }
  }
  Var(memed)
}
let rec mem_fib: (f: (Int) -> Int, n: Int) -> Int {
  if (LE(Var("n"), Int(1))) then {
    Var(n)
  } else {
    App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=None)]) + App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=None)])
  }
}
let rec fib: (n: Int) -> Int {
  let f: Var(None) = Apply(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=None), ])
  Apply(Var("f"), [Var("n"), ])
}
let rec main: () -> Var(None) {
  let n: Var(None) = Apply(Var("read_int"), [])
  let _: Var(None) = Apply(Var("print_int"), [App(Var("fib"), [Var("n")]), ])
  let _: Var(None) = Apply(Var("print_char"), [Int(10), ])
  Unit
}
Unit
