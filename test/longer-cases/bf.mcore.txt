  .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
  .p2align 4
  .bss
  .type large_heap, @object
large_heap:
  .zero 1610612736
large_heap_end:

  .p2align 4
  .bss
  .type large_stack, @object
large_stack:
  .zero 268435456
large_stack_end:

__begin_text:
  .p2align 2
  .text
  .globl read_prog140.266
  .type read_prog140.266, @function
# leaf false
read_prog140.266:
.read_prog140.266_5:
  addi sp, sp, -32
  sd ra, 0(sp)
  sd s0, 8(sp)
  sd s1, 16(sp)
  mv s1, a0
  mv s0, a1

.read_prog140.266_0:
  call read_ch_until_newline_or_eof1.264
  li a1, -1
  bne a0, a1, .read_prog140.266_2

.read_prog140.266_1:
  addi a2, s11, -4
  andi s11, a2, -8
  sw zero, 0(a2)
  li a0, 1024
  mul a0, a0, a0
  slliw a1, a0, 2
  sub a4, s11, a1
  andi s11, a4, -8
  mv a1, a0
  addi a5, s11, -4
  andi s11, a5, -8
  sw zero, 0(a5)
  mv a0, zero
  mv a1, a2
  mv a2, s1
  mv a3, s0
  call aux40.268
  mv a0, zero

.read_prog140.266_3:
  ld ra, 0(sp)
  ld s0, 8(sp)
  ld s1, 16(sp)
  addi sp, sp, 32
  ret

.read_prog140.266_2:
  th.addsl a1, s0, s1, 2
  sw a0, 0(a1)
  addi a0, s1, 1
  mv s1, a0
  j .read_prog140.266_0

  .p2align 2
  .text
  .globl aux40.268
  .type aux40.268, @function
# leaf false
aux40.268:
.aux40.268_29:
  addi sp, sp, -64
  sd ra, 0(sp)
  sd s0, 8(sp)
  sd s1, 16(sp)
  sd s2, 24(sp)
  sd s3, 32(sp)
  sd s4, 40(sp)
  sd s5, 48(sp)
  sd s6, 56(sp)
  mv s5, a0
  mv s4, a1
  mv s1, a2
  mv s0, a3
  mv s3, a4
  mv s2, a5

.aux40.268_0:
  bge s5, s1, .aux40.268_1

.aux40.268_2:
  th.lurd a1, s0, s5, 2
  li a0, 62
  beq a1, a0, .aux40.268_3

.aux40.268_4:
  li a0, 60
  beq a1, a0, .aux40.268_5

.aux40.268_6:
  li a0, 43
  beq a1, a0, .aux40.268_7

.aux40.268_8:
  li a0, 45
  beq a1, a0, .aux40.268_9

.aux40.268_10:
  li a0, 46
  beq a1, a0, .aux40.268_11

.aux40.268_12:
  li a0, 44
  beq a1, a0, .aux40.268_13

.aux40.268_14:
  li a0, 91
  beq a1, a0, .aux40.268_15

.aux40.268_16:
  li a0, 93
  bne a1, a0, .aux40.268_18

.aux40.268_17:
  mv a0, s5

.aux40.268_19:

.aux40.268_20:

.aux40.268_21:

.aux40.268_22:

.aux40.268_23:

.aux40.268_24:

.aux40.268_25:

.aux40.268_26:

.aux40.268_27:
  ld ra, 0(sp)
  ld s0, 8(sp)
  ld s1, 16(sp)
  ld s2, 24(sp)
  ld s3, 32(sp)
  ld s4, 40(sp)
  ld s5, 48(sp)
  ld s6, 56(sp)
  addi sp, sp, 64
  ret

.aux40.268_1:
  mv a0, s5
  j .aux40.268_27

.aux40.268_3:
  lw a0, 0(s4)
  addi a0, a0, 1
  sw a0, 0(s4)
  addi a0, s5, 1
  mv s5, a0
  j .aux40.268_0

.aux40.268_5:
  lw a0, 0(s4)
  addi a0, a0, -1
  sw a0, 0(s4)
  addi a0, s5, 1
  mv s5, a0
  j .aux40.268_0

.aux40.268_7:
  lw a0, 0(s4)
  th.lurd a1, s3, a0, 2
  addi a1, a1, 1
  th.addsl a0, s3, a0, 2
  sw a1, 0(a0)
  addi a0, s5, 1
  mv s5, a0
  j .aux40.268_0

.aux40.268_9:
  lw a0, 0(s4)
  th.lurd a1, s3, a0, 2
  addi a1, a1, -1
  th.addsl a0, s3, a0, 2
  sw a1, 0(a0)
  addi a0, s5, 1
  mv s5, a0
  j .aux40.268_0

.aux40.268_11:
  lw a0, 0(s4)
  th.lurd a0, s3, a0, 2
  call minimbt_print_char
  addi a0, s5, 1
  mv s5, a0
  j .aux40.268_0

.aux40.268_13:
  lw s6, 0(s4)
  call read_ch_until_newline_or_eof1.264
  th.addsl a1, s3, s6, 2
  sw a0, 0(a1)
  addi a0, s5, 1
  mv s5, a0
  j .aux40.268_0

.aux40.268_15:
  sw s5, 0(s2)

.aux40.268_54:

.aux40.268_49:
  lw a0, 0(s4)
  th.lurd a0, s3, a0, 2
  beq a0, zero, .aux40.268_50

.aux40.268_51:
  addi a0, s5, 1
  mv a1, s4
  mv a2, s1
  mv a3, s0
  mv a4, s3
  mv a5, s2
  call aux40.268
  sw a0, 0(s2)
  j .aux40.268_49

.aux40.268_50:
  addi a0, s5, 1

.aux40.268_72:
  mv a1, zero
  mv a2, s1
  mv a3, s0

.aux40.268_58:
  bge a0, a2, .aux40.268_59

.aux40.268_60:
  th.lurd a5, a3, a0, 2
  li a4, 91
  beq a5, a4, .aux40.268_61

.aux40.268_62:
  li a4, 93
  bne a5, a4, .aux40.268_64

.aux40.268_63:
  beq a1, zero, .aux40.268_65

.aux40.268_66:
  addi a0, a0, 1
  addi a1, a1, -1
  j .aux40.268_58

.aux40.268_59:

.aux40.268_70:

.aux40.268_55:
  sw a0, 0(s2)
  mv a0, zero

.aux40.268_52:

.aux40.268_30:
  lw a0, 0(s2)
  addi a0, a0, 1
  mv s5, a0
  j .aux40.268_0

.aux40.268_61:
  addi a0, a0, 1
  addi a1, a1, 1
  j .aux40.268_58

.aux40.268_64:
  addi a0, a0, 1
  j .aux40.268_58

.aux40.268_65:

.aux40.268_67:

.aux40.268_68:

.aux40.268_69:
  j .aux40.268_70

.aux40.268_18:
  mv a0, s5
  j .aux40.268_19

  .p2align 2
  .text
  .globl main136.265
  .type main136.265, @function
# leaf false
main136.265:
.main136.265_0:
  addi sp, sp, -16
  sd ra, 0(sp)
  li a0, 4096
  sub a2, s11, a0
  andi s11, a2, -8
  li a0, 1024
  mv a1, a0
  mv a0, zero
  mv a1, a2
  call read_prog140.266
  mv a0, zero
  ld ra, 0(sp)
  addi sp, sp, 16
  ret

  .p2align 2
  .text
  .globl T$start
  .type T$start, @function
# leaf false
T$start:
.T$start_0:
  addi sp, sp, -16
  sd ra, 0(sp)
  call main136.265
  ld ra, 0(sp)
  addi sp, sp, 16
  ret

  .p2align 2
  .text
  .globl minimbt_main
  .type minimbt_main, @function
# leaf false
minimbt_main:
.minimbt_main_b0:
  addi sp, sp, -32
  sd ra, 0(sp)
  sd s0, 8(sp)
  sd s11, 16(sp)
  la s11, large_heap_end
  mv s0, sp
  la sp, large_stack_end
  call T$start
  mv sp, s0
  ld ra, 0(sp)
  ld s0, 8(sp)
  ld s11, 16(sp)
  addi sp, sp, 32
  ret

  .p2align 2
  .text
  .globl read_ch_until_newline_or_eof1.264
  .type read_ch_until_newline_or_eof1.264, @function
# leaf false
read_ch_until_newline_or_eof1.264:
.read_ch_until_newline_or_eof1.264_0:
  addi sp, sp, -16
  sd ra, 0(sp)
  call minimbt_read_char
  li a1, 10
  beq a0, a1, .read_ch_until_newline_or_eof1.264_1

.read_ch_until_newline_or_eof1.264_2:
  li a1, 13
  bne a0, a1, .read_ch_until_newline_or_eof1.264_4

.read_ch_until_newline_or_eof1.264_3:
  li a0, -1

.read_ch_until_newline_or_eof1.264_5:

.read_ch_until_newline_or_eof1.264_6:
  ld ra, 0(sp)
  addi sp, sp, 16
  ret

.read_ch_until_newline_or_eof1.264_1:
  li a0, -1
  j .read_ch_until_newline_or_eof1.264_6

.read_ch_until_newline_or_eof1.264_4:
  j .read_ch_until_newline_or_eof1.264_5

__end_text:
  .p2align 2
  .bss
  .globl start
  .type start, @object
start:
  .zero 4
