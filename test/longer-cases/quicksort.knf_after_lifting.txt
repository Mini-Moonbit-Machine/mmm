let rec l.165: Var({val: Some(Unit)}) = (j.19: Var({val: Some(Int)}), i.17: Array(Int), arr.10: Array(Int), high.12: Int, pivot.13: Int) {
  let join l.85: Var({val: Some(Unit)}) = (j.86: Var({val: Some(Int)})) {
    let _87: Int = Int(1)
    let _88: Int = Sub(high.12, _87)
    if (j.86 <= _88) then {
      let _89: Int = Get arr.10[j.86]
      if (_89 <= pivot.13) then {
        let _91: Int = Int(0)
        let _92: Int = Int(0)
        let _93: Int = Get i.17[_92]
        let _94: Int = Int(1)
        let _95: Int = Add(_93, _94)
        let _96: Unit = Put i.17[_91] = _95
        let _97: Int = Int(0)
        let _98: Int = Get i.17[_97]
        let tmp.130: Int = Get arr.10[_98]
        let _131: Int = Get arr.10[j.86]
        let _132: Unit = Put arr.10[_98] = _131
        let _133: Unit = Put arr.10[j.86] = tmp.130
        let _90: Unit = Unit
        let _99: Int = Int(1)
        let _100: Int = Add(j.86, _99)
        Jump(l.85, [_100, ])
      } else {
        let _90: Unit = Unit
        let _99: Int = Int(1)
        let _100: Int = Add(j.86, _99)
        Jump(l.85, [_100, ])
      }
    } else {
      Unit
    }
  }
  Jump(l.85, [j.19, ])
}
let rec partition.164: Int = (arr.10: Array(Int), low.11: Int, high.12: Int) {
  let pivot.13: Int = Get arr.10[high.12]
  let _14: Int = Int(1)
  let _15: Int = Int(1)
  let _16: Int = Sub(low.11, _15)
  let i.17: Array(Int) = ExtApply(minimbt_create_array, [_14, _16, ])
  let _34: Var({val: Some(Unit)}) = Apply(l.165, [low.11, i.17, arr.10, high.12, pivot.13, ])
  let _35: Int = Int(0)
  let _36: Int = Int(0)
  let _37: Int = Get i.17[_36]
  let _38: Int = Int(1)
  let _39: Int = Add(_37, _38)
  let _40: Unit = Put i.17[_35] = _39
  let _41: Int = Int(0)
  let _42: Int = Get i.17[_41]
  let tmp.134: Int = Get arr.10[_42]
  let _135: Int = Get arr.10[high.12]
  let _136: Unit = Put arr.10[_42] = _135
  let _137: Unit = Put arr.10[high.12] = tmp.134
  let _43: Unit = Unit
  let _44: Int = Int(0)
  Get i.17[_44]
}
let rec quicksort.166: Unit = (arr.46: Array(Int), low.47: Int, high.48: Int) {
  let join quicksort.101: Unit = (arr.102: Array(Int), low.103: Int, high.104: Int) {
    let _105: Int = Int(1)
    let _106: Int = Sub(high.104, _105)
    if (low.103 <= _106) then {
      let pi.107: Int = Apply(partition.164, [arr.102, low.103, high.104, ])
      let _108: Int = Int(1)
      let _109: Int = Sub(pi.107, _108)
      let _110: Unit = Apply(quicksort.166, [arr.102, low.103, _109, ])
      let _111: Int = Int(1)
      let _112: Int = Add(pi.107, _111)
      Jump(quicksort.101, [arr.102, _112, high.104, ])
    } else {
      Unit
    }
  }
  Jump(quicksort.101, [arr.46, low.47, high.48, ])
}
let rec main.167: Var({val: Some(Unit)}) = () {
  let len.58: Int = ExtApply(minimbt_read_int, [])
  let _59: Int = Int(0)
  let arr.60: Array(Int) = ExtApply(minimbt_create_array, [len.58, _59, ])
  let _69: Int = Int(0)
  let join input.147: Var({val: Some(Unit)}) = (i.148: Int) {
    let _149: Int = Int(1)
    let _150: Int = Sub(len.58, _149)
    if (i.148 <= _150) then {
      let _151: Int = ExtApply(minimbt_read_int, [])
      let _152: Unit = Put arr.60[i.148] = _151
      let _153: Int = Int(1)
      let _154: Int = Add(i.148, _153)
      Jump(input.147, [_154, ])
    } else {
      let _70: Var({val: Some(Unit)}) = Unit
      let _71: Int = Int(0)
      let _72: Int = Int(1)
      let _73: Int = Sub(len.58, _72)
      let _74: Unit = Apply(quicksort.166, [arr.60, _71, _73, ])
      let _84: Int = Int(0)
      let join output.155: Var({val: Some(Unit)}) = (i.156: Int) {
        let _157: Int = Int(1)
        let _158: Int = Sub(len.58, _157)
        if (i.156 <= _158) then {
          let _159: Int = Get arr.60[i.156]
          let _160: Unit = ExtApply(minimbt_print_int, [_159, ])
          let _161: Unit = ExtApply(minimbt_print_endline, [])
          let _162: Int = Int(1)
          let _163: Int = Add(i.156, _162)
          Jump(output.155, [_163, ])
        } else {
          Unit
        }
      }
      Jump(output.155, [_84, ])
    }
  }
  Jump(input.147, [_69, ])
}
Apply(main.167, [])