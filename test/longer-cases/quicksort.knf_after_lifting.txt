let rec swap.125: Unit = (arr.2: Array(Int), i.3: Int, j.4: Int) {
  let tmp.5: Int = Get arr.2[i.3]
  let _6: Int = Get arr.2[j.4]
  let _7: Unit = Put arr.2[i.3] = _6
  let _8: Unit = Put arr.2[j.4] = tmp.5
  Unit
}
let rec l.127: Var({val: Some(Unit)}) = (j.99: Var({val: Some(Int)}), i.97: Array(Int), arr.46: Array(Int), high.48: Int, pivot.93: Int) {
  let _100: Int = Int(1)
  let _101: Int = Sub(high.48, _100)
  if (j.99 <= _101) then {
    let _102: Int = Get arr.46[j.99]
    let _103: Unit = if (_102 <= pivot.93) then {
      let _104: Int = Int(0)
      let _105: Int = Int(0)
      let _106: Int = Get i.97[_105]
      let _107: Int = Int(1)
      let _108: Int = Add(_106, _107)
      let _109: Unit = Put i.97[_104] = _108
      let _110: Int = Int(0)
      let _111: Int = Get i.97[_110]
      Apply(swap.125, [arr.46, _111, j.99, ])
    } else {
      Unit
    }
    let _112: Int = Int(1)
    let _113: Int = Add(j.99, _112)
    Apply(l.127, [_113, i.97, arr.46, high.48, pivot.93, ])
  } else {
    Unit
  }
}
let rec quicksort.126: Unit = (arr.46: Array(Int), low.47: Int, high.48: Int) {
  let _49: Int = Int(1)
  let _50: Int = Sub(high.48, _49)
  if (low.47 <= _50) then {
    let pivot.93: Int = Get arr.46[high.48]
    let _94: Int = Int(1)
    let _95: Int = Int(1)
    let _96: Int = Sub(low.47, _95)
    let i.97: Array(Int) = ExtApply(minimbt_create_array, [_94, _96, ])
    let _114: Var({val: Some(Unit)}) = Apply(l.127, [low.47, i.97, arr.46, high.48, pivot.93, ])
    let _115: Int = Int(0)
    let _116: Int = Int(0)
    let _117: Int = Get i.97[_116]
    let _118: Int = Int(1)
    let _119: Int = Add(_117, _118)
    let _120: Unit = Put i.97[_115] = _119
    let _121: Int = Int(0)
    let _122: Int = Get i.97[_121]
    let _123: Unit = Apply(swap.125, [arr.46, _122, high.48, ])
    let _124: Int = Int(0)
    let pi.51: Int = Get i.97[_124]
    let _52: Int = Int(1)
    let _53: Int = Sub(pi.51, _52)
    let _54: Unit = Apply(quicksort.126, [arr.46, low.47, _53, ])
    let _55: Int = Int(1)
    let _56: Int = Add(pi.51, _55)
    Apply(quicksort.126, [arr.46, _56, high.48, ])
  } else {
    Unit
  }
}
let rec input.129: Var({val: Some(Unit)}) = (i.62: Int, arr.60: Array(Int), len.58: Int) {
  let _63: Int = Int(1)
  let _64: Int = Sub(len.58, _63)
  if (i.62 <= _64) then {
    let _65: Int = ExtApply(minimbt_read_int, [])
    let _66: Unit = Put arr.60[i.62] = _65
    let _67: Int = Int(1)
    let _68: Int = Add(i.62, _67)
    Apply(input.129, [_68, arr.60, len.58, ])
  } else {
    Unit
  }
}
let rec output.130: Var({val: Some(Unit)}) = (i.76: Int, arr.60: Array(Int), len.58: Int) {
  let _77: Int = Int(1)
  let _78: Int = Sub(len.58, _77)
  if (i.76 <= _78) then {
    let _79: Int = Get arr.60[i.76]
    let _80: Unit = ExtApply(minimbt_print_int, [_79, ])
    let _81: Unit = ExtApply(minimbt_print_endline, [])
    let _82: Int = Int(1)
    let _83: Int = Add(i.76, _82)
    Apply(output.130, [_83, arr.60, len.58, ])
  } else {
    Unit
  }
}
let rec main.128: Var({val: Some(Unit)}) = () {
  let len.58: Int = ExtApply(minimbt_read_int, [])
  let _59: Int = Int(0)
  let arr.60: Array(Int) = ExtApply(minimbt_create_array, [len.58, _59, ])
  let _69: Int = Int(0)
  let _70: Var({val: Some(Unit)}) = Apply(input.129, [_69, arr.60, len.58, ])
  let _71: Int = Int(0)
  let _72: Int = Int(1)
  let _73: Int = Sub(len.58, _72)
  let _74: Unit = Apply(quicksort.126, [arr.60, _71, _73, ])
  let _84: Int = Int(0)
  Apply(output.130, [_84, arr.60, len.58, ])
}
Apply(main.128, [])