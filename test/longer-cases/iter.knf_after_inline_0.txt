let rec main.25: Var({val: Some(Unit)}) = () {
  let _26: Int = Int(5)
  let _27: Int = Int(1)
  let arr.28: Array(Int) = ExtApply(minimbt_create_array, [_26, _27, ])
  let _29: Int = Int(0)
  let _30: Int = Int(1)
  let _31: Unit = Put arr.28[_29] = _30
  let _32: Int = Int(1)
  let _33: Int = Int(2)
  let _34: Unit = Put arr.28[_32] = _33
  let _35: Int = Int(2)
  let _36: Int = Int(3)
  let _37: Unit = Put arr.28[_35] = _36
  let _38: Int = Int(3)
  let _39: Int = Int(4)
  let _40: Unit = Put arr.28[_38] = _39
  let _41: Int = Int(4)
  let _42: Int = Int(5)
  let _43: Unit = Put arr.28[_41] = _42
  let _44: Int = Int(5)
  let rec do.82: Bool = (yield.83: Var({val: Some(Fun([Int], Bool))})) {
    let _95: Int = Int(0)
    let join next.96: Bool = (i.97: Var({val: Some(Int)})) {
      let _98: Int = Int(1)
      let _99: Int = Sub(_44, _98)
      if (i.97 <= _99) then {
        let _100: Int = Get arr.28[i.97]
        let _101: Bool = Apply(yield.83, [_100, ])
        let _102: Bool = Bool(true)
        if (_101 == _102) then {
          let _103: Int = Int(1)
          let _104: Int = Add(i.97, _103)
          Jump(next.96, [_104, ])
        } else {
          Bool(false)
        }
      } else {
        Bool(false)
      }
    }
    Jump(next.96, [_95, ])
  }
  let f.45: Fun([Fun([Int], Bool)], Bool) = Var(do.82)
  let rec print.46: Unit = (x.47: Var({val: Some(Int)})) {
    ExtApply(minimbt_print_int, [x.47, ])
  }
  let rec yield.105: Bool = (x.106: Var({val: Some(Int)})) {
    let _107: Unit = Apply(print.46, [x.106, ])
    Bool(true)
  }
  let join do.112: Var({val: Some(Unit)}) = () {
    let _113: Bool = Apply(f.45, [yield.105, ])
    let _114: Bool = Bool(true)
    if (_113 == _114) then {
      Jump(do.112, [])
    } else {
      Unit
    }
  }
  Jump(do.112, [])
}
Apply(main.25, [])