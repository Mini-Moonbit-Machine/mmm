let rec main33: Var({val: Some(Unit)}) = () {
  let _34: Int = Int(5)
  let _35: Int = Int(1)
  let arr.36: Array(Int) = ExtApply(minimbt_create_array, [_34, _35, ])
  let _37: Int = Int(0)
  let _38: Int = Int(1)
  let _40: Unit = Put arr.36[_37] = _38
  let _41: Int = Int(1)
  let _42: Int = Int(2)
  let _44: Unit = Put arr.36[_41] = _42
  let _45: Int = Int(2)
  let _46: Int = Int(3)
  let _48: Unit = Put arr.36[_45] = _46
  let _49: Int = Int(3)
  let _50: Int = Int(4)
  let _52: Unit = Put arr.36[_49] = _50
  let _53: Int = Int(4)
  let _54: Int = Int(5)
  let _56: Unit = Put arr.36[_53] = _54
  let _57: Int = Int(5)
  let f.58: Fun([Fun([Int], Bool)], Bool) = 
    let rec do6.80: Bool = (yield7.81: Var({val: Some(Fun([Int], Bool))})) {
      let rec next9.82: Bool = (i10.83: Var({val: Some(Int)})) {
        let _84: Int = Int(1)
        let _85: Int = Sub(_57, _84)
        if (i10.83 <= _85) then {
          let _86: Int = Get arr.36[i10.83]
          let _87: Bool = Apply(yield7.81, [_86, ])
          let _88: Bool = Bool(true)
          if (_87 == _88) then {
            let _89: Int = Int(1)
            let _90: Int = Add(i10.83, _89)
            Apply(next9.82, [_90, ])
          } else {
            Bool(false)
          }
        } else {
          Bool(false)
        }
      }
      let _91: Int = Int(0)
      Apply(next9.82, [_91, ])
    }
    Var(do6.80)
  let rec print59: Unit = (x60.61: Var({val: Some(Int)})) {
    ExtApply(minimbt_print_int, [x60.61, ])
  }
  let rec yield25.92: Bool = (x26.93: Var({val: Some(Int)})) {
    let _94: Unit = Apply(print59, [x26.93, ])
    Bool(true)
  }
  let rec do30.95: Var({val: Some(Unit)}) = () {
    let _96: Bool = Apply(f.58, [yield25.92, ])
    let _97: Bool = Bool(true)
    if (_96 == _97) then {
      Apply(do30.95, [])
    } else {
      Unit
    }
  }
  Apply(do30.95, [])
}
Apply(main33, [])