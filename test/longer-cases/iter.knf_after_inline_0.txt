let rec main.25: Var({val: Some(Unit)}) = () {
  let _26: Int = Int(5)
  let _27: Int = Int(1)
  let arr.28: Array(Int) = ExtApply(minimbt_create_array, [_26, _27, ])
  let _29: Int = Int(0)
  let _30: Int = Int(1)
  let _31: Unit = Put arr.28[_29] = _30
  let _32: Int = Int(1)
  let _33: Int = Int(2)
  let _34: Unit = Put arr.28[_32] = _33
  let _35: Int = Int(2)
  let _36: Int = Int(3)
  let _37: Unit = Put arr.28[_35] = _36
  let _38: Int = Int(3)
  let _39: Int = Int(4)
  let _40: Unit = Put arr.28[_38] = _39
  let _41: Int = Int(4)
  let _42: Int = Int(5)
  let _43: Unit = Put arr.28[_41] = _42
  let _44: Int = Int(5)
  let rec do.79: Bool = (yield.80: Var({val: Some(Fun([Int], Bool))})) {
    let rec next.81: Bool = (i.82: Var({val: Some(Int)})) {
      let join next.83: Bool = (i.84: Var({val: Some(Int)})) {
        let _85: Int = Int(1)
        let _86: Int = Sub(_44, _85)
        if (i.84 <= _86) then {
          let _87: Int = Get arr.28[i.84]
          let _88: Bool = Apply(yield.80, [_87, ])
          let _89: Bool = Bool(true)
          if (_88 == _89) then {
            let _90: Int = Int(1)
            let _91: Int = Add(i.84, _90)
            Jump(next.83, [_91, ])
          } else {
            Bool(false)
          }
        } else {
          Bool(false)
        }
      }
      Jump(next.83, [i.82, ])
    }
    let _92: Int = Int(0)
    Apply(next.81, [_92, ])
  }
  let f.45: Fun([Fun([Int], Bool)], Bool) = Var(do.79)
  let rec print.46: Unit = (x.47: Var({val: Some(Int)})) {
    ExtApply(minimbt_print_int, [x.47, ])
  }
  let rec yield.93: Bool = (x.94: Var({val: Some(Int)})) {
    let _95: Unit = Apply(print.46, [x.94, ])
    Bool(true)
  }
  let rec do.96: Var({val: Some(Unit)}) = () {
    let join do.97: Var({val: Some(Unit)}) = () {
      let _98: Bool = Apply(f.45, [yield.93, ])
      let _99: Bool = Bool(true)
      if (_98 == _99) then {
        Jump(do.97, [])
      } else {
        Unit
      }
    }
    Jump(do.97, [])
  }
  Apply(do.96, [])
}
Apply(main.25, [])