let rec main.25: Var({val: Some(Unit)}) = () {
  let _26: Int = Int(5)
  let _27: Int = Int(1)
  let arr.28: Array(Int) = ExtApply(minimbt_create_array, [_26, _27, ])
  let _29: Int = Int(0)
  let _30: Int = Int(1)
  let _31: Unit = Put arr.28[_29] = _30
  let _32: Int = Int(1)
  let _33: Int = Int(2)
  let _34: Unit = Put arr.28[_32] = _33
  let _35: Int = Int(2)
  let _36: Int = Int(3)
  let _37: Unit = Put arr.28[_35] = _36
  let _38: Int = Int(3)
  let _39: Int = Int(4)
  let _40: Unit = Put arr.28[_38] = _39
  let _41: Int = Int(4)
  let _42: Int = Int(5)
  let _43: Unit = Put arr.28[_41] = _42
  let _44: Int = Int(5)
  let f.45: Fun([Fun([Int], Bool)], Bool) = 
    let rec do.52: Bool = (yield.53: Var({val: Some(Fun([Int], Bool))})) {
      let rec next.54: Bool = (i.55: Var({val: Some(Int)})) {
        let _56: Int = Int(1)
        let _57: Int = Sub(_44, _56)
        if (i.55 <= _57) then {
          let _58: Int = Get arr.28[i.55]
          let _59: Bool = Apply(yield.53, [_58, ])
          let _60: Bool = Bool(true)
          if (_59 == _60) then {
            let _61: Int = Int(1)
            let _62: Int = Add(i.55, _61)
            Apply(next.54, [_62, ])
          } else {
            Bool(false)
          }
        } else {
          Bool(false)
        }
      }
      let _63: Int = Int(0)
      Apply(next.54, [_63, ])
    }
    Var(do.52)
  let rec print.46: Unit = (x.47: Var({val: Some(Int)})) {
    ExtApply(minimbt_print_int, [x.47, ])
  }
  let rec yield.64: Bool = (x.65: Var({val: Some(Int)})) {
    let _66: Unit = Apply(print.46, [x.65, ])
    Bool(true)
  }
  let rec do.67: Var({val: Some(Unit)}) = () {
    let _68: Bool = Apply(f.45, [yield.64, ])
    let _69: Bool = Bool(true)
    if (_68 == _69) then {
      Apply(do.67, [])
    } else {
      Unit
    }
  }
  Apply(do.67, [])
}
Apply(main.25, [])