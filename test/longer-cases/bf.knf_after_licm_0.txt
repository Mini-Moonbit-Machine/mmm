let rec read_ch_until_newline_or_eof1.252: Int = () {
  let c.2: Int = ExtApply(minimbt_read_char, [])
  let _3: Int = Int(10)
  if (c.2 == _3) then {
    Int(-1)
  } else {
    let _4: Int = Int(13)
    if (c.2 == _4) then {
      Int(-1)
    } else {
      Var(c.2)
    }
  }
}
let move_left.5: Int = Int(60)
let move_right.6: Int = Int(62)
let increase.7: Int = Int(43)
let decrease.8: Int = Int(45)
let print.9: Int = Int(46)
let read.10: Int = Int(44)
let loop_start.11: Int = Int(91)
let loop_end.12: Int = Int(93)
let rec skip29.255: Var({val: Some(Int)}) = (pc30.162: Var({val: Some(Int)}), level32.163: Int, i139.140: Var({val: Some(Int)}), prog.137: Array(Int)) {
  if (i139.140 <= pc30.162) then {
    Var(pc30.162)
  } else {
    let i.164: Int = Get prog.137[pc30.162]
    if (i.164 == loop_start.11) then {
      let _165: Int = Int(1)
      let _166: Int = Add(pc30.162, _165)
      let _167: Int = Int(1)
      let _168: Int = Add(level32.163, _167)
      Apply(skip29.255, [_166, _168, i139.140, prog.137, ])
    } else {
      if (i.164 == loop_end.12) then {
        let _169: Int = Int(0)
        if (level32.163 == _169) then {
          Var(pc30.162)
        } else {
          let _170: Int = Int(1)
          let _171: Int = Add(pc30.162, _170)
          let _172: Int = Int(1)
          let _173: Int = Sub(level32.163, _172)
          Apply(skip29.255, [_171, _173, i139.140, prog.137, ])
        }
      } else {
        let _174: Int = Int(1)
        let _175: Int = Add(pc30.162, _174)
        Apply(skip29.255, [_175, level32.163, i139.140, prog.137, ])
      }
    }
  }
}
let rec lp107.257: Var({val: Some(Unit)}) = (ptr.152: Array(Int), i139.140: Var({val: Some(Int)}), pc47.177: Var({val: Some(Int)}), prog.137: Array(Int), cells.157: Array(Int), next_pc.160: Array(Int)) {
  let _230: Int = Int(0)
  let _231: Int = Get ptr.152[_230]
  let _232: Int = Get cells.157[_231]
  let _233: Int = Int(0)
  if (_232 == _233) then {
    let _234: Int = Int(0)
    let _235: Int = Int(1)
    let _236: Int = Add(pc47.177, _235)
    let _237: Int = Int(0)
    let _238: Var({val: Some(Int)}) = Apply(skip29.255, [_236, _237, i139.140, prog.137, ])
    let _239: Unit = Put next_pc.160[_234] = _238
    Unit
  } else {
    let _240: Int = Int(0)
    let _241: Int = Int(1)
    let _242: Int = Add(pc47.177, _241)
    let _243: Var({val: Some(Int)}) = Apply(aux46.256, [_242, ptr.152, i139.140, prog.137, cells.157, next_pc.160, ])
    let _244: Unit = Put next_pc.160[_240] = _243
    Apply(lp107.257, [ptr.152, i139.140, pc47.177, prog.137, cells.157, next_pc.160, ])
  }
}
let rec aux46.256: Var({val: Some(Int)}) = (pc47.177: Var({val: Some(Int)}), ptr.152: Array(Int), i139.140: Var({val: Some(Int)}), prog.137: Array(Int), cells.157: Array(Int), next_pc.160: Array(Int)) {
  if (i139.140 <= pc47.177) then {
    Var(pc47.177)
  } else {
    let i.178: Int = Get prog.137[pc47.177]
    if (i.178 == move_right.6) then {
      let _179: Int = Int(0)
      let _180: Int = Int(0)
      let _181: Int = Get ptr.152[_180]
      let _182: Int = Int(1)
      let _183: Int = Add(_181, _182)
      let _184: Unit = Put ptr.152[_179] = _183
      let _185: Int = Int(1)
      let _186: Int = Add(pc47.177, _185)
      Apply(aux46.256, [_186, ptr.152, i139.140, prog.137, cells.157, next_pc.160, ])
    } else {
      if (i.178 == move_left.5) then {
        let _187: Int = Int(0)
        let _188: Int = Int(0)
        let _189: Int = Get ptr.152[_188]
        let _190: Int = Int(1)
        let _191: Int = Sub(_189, _190)
        let _192: Unit = Put ptr.152[_187] = _191
        let _193: Int = Int(1)
        let _194: Int = Add(pc47.177, _193)
        Apply(aux46.256, [_194, ptr.152, i139.140, prog.137, cells.157, next_pc.160, ])
      } else {
        if (i.178 == increase.7) then {
          let _195: Int = Int(0)
          let _196: Int = Get ptr.152[_195]
          let _197: Int = Int(0)
          let _198: Int = Get ptr.152[_197]
          let _199: Int = Get cells.157[_198]
          let _200: Int = Int(1)
          let _201: Int = Add(_199, _200)
          let _202: Unit = Put cells.157[_196] = _201
          let _203: Int = Int(1)
          let _204: Int = Add(pc47.177, _203)
          Apply(aux46.256, [_204, ptr.152, i139.140, prog.137, cells.157, next_pc.160, ])
        } else {
          if (i.178 == decrease.8) then {
            let _205: Int = Int(0)
            let _206: Int = Get ptr.152[_205]
            let _207: Int = Int(0)
            let _208: Int = Get ptr.152[_207]
            let _209: Int = Get cells.157[_208]
            let _210: Int = Int(1)
            let _211: Int = Sub(_209, _210)
            let _212: Unit = Put cells.157[_206] = _211
            let _213: Int = Int(1)
            let _214: Int = Add(pc47.177, _213)
            Apply(aux46.256, [_214, ptr.152, i139.140, prog.137, cells.157, next_pc.160, ])
          } else {
            if (i.178 == print.9) then {
              let _215: Int = Int(0)
              let _216: Int = Get ptr.152[_215]
              let _217: Int = Get cells.157[_216]
              let _218: Unit = ExtApply(minimbt_print_char, [_217, ])
              let _219: Int = Int(1)
              let _220: Int = Add(pc47.177, _219)
              Apply(aux46.256, [_220, ptr.152, i139.140, prog.137, cells.157, next_pc.160, ])
            } else {
              if (i.178 == read.10) then {
                let _221: Int = Int(0)
                let _222: Int = Get ptr.152[_221]
                let _223: Int = Apply(read_ch_until_newline_or_eof1.252, [])
                let _224: Unit = Put cells.157[_222] = _223
                let _225: Int = Int(1)
                let _226: Int = Add(pc47.177, _225)
                Apply(aux46.256, [_226, ptr.152, i139.140, prog.137, cells.157, next_pc.160, ])
              } else {
                if (i.178 == loop_start.11) then {
                  let _227: Int = Int(0)
                  let _228: Unit = Put next_pc.160[_227] = pc47.177
                  let _245: Var({val: Some(Unit)}) = Apply(lp107.257, [ptr.152, i139.140, pc47.177, prog.137, cells.157, next_pc.160, ])
                  let _246: Int = Int(0)
                  let _247: Int = Get next_pc.160[_246]
                  let _248: Int = Int(1)
                  let _249: Int = Add(_247, _248)
                  Apply(aux46.256, [_249, ptr.152, i139.140, prog.137, cells.157, next_pc.160, ])
                } else {
                  if (i.178 == loop_end.12) then {
                    Var(pc47.177)
                  } else {
                    Var(pc47.177)
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
let rec read_prog138.254: Var({val: Some(Unit)}) = (i139.140: Var({val: Some(Int)}), prog.137: Array(Int)) {
  let x.141: Int = Apply(read_ch_until_newline_or_eof1.252, [])
  let _142: Int = Int(-1)
  if (x.141 == _142) then {
    let _150: Int = Int(1)
    let _151: Int = Int(0)
    let ptr.152: Array(Int) = ExtApply(minimbt_create_array, [_150, _151, ])
    let _153: Int = Int(1024)
    let _154: Int = Int(1024)
    let _155: Int = Mul(_153, _154)
    let _156: Int = Int(0)
    let cells.157: Array(Int) = ExtApply(minimbt_create_array, [_155, _156, ])
    let _158: Int = Int(1)
    let _159: Int = Int(0)
    let next_pc.160: Array(Int) = ExtApply(minimbt_create_array, [_158, _159, ])
    let _250: Int = Int(0)
    let _251: Var({val: Some(Int)}) = Apply(aux46.256, [_250, ptr.152, i139.140, prog.137, cells.157, next_pc.160, ])
    Unit
  } else {
    let _144: Unit = Put prog.137[i139.140] = x.141
    let _145: Int = Int(1)
    let _146: Int = Add(i139.140, _145)
    Apply(read_prog138.254, [_146, prog.137, ])
  }
}
let rec main134.253: Var({val: Some(Unit)}) = () {
  let len.135: Int = Int(1024)
  let _136: Int = Int(0)
  let prog.137: Array(Int) = ExtApply(minimbt_create_array, [len.135, _136, ])
  let _147: Int = Int(0)
  let _149: Var({val: Some(Unit)}) = Apply(read_prog138.254, [_147, prog.137, ])
  Unit
}
Apply(main134.253, [])
