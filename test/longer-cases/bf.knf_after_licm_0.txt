let rec read_ch_until_newline_or_eof1l0: Int = () {
  let c.2: Int = ExtApply(minimbt_read_char, [])
  let _3: Int = Int(10)
  if (c.2 == _3) then {
    Int(-1)
  } else {
    let _4: Int = Int(13)
    if (c.2 == _4) then {
      Int(-1)
    } else {
      Var(c.2)
    }
  }
}
let rec skip21l2: Var({val: Some(Int)}) = (pc22.23: Var({val: Some(Int)}), level24.25: Int, len6.7: Int, prog8.9: Array(Int)) {
  if (len6.7 <= pc22.23) then {
    Var(pc22.23)
  } else {
    let i.26: Int = Get prog8.9[pc22.23]
    let _27: Int = Int(91)
    if (i.26 == _27) then {
      let _28: Int = Int(1)
      let _29: Int = Add(pc22.23, _28)
      let _30: Int = Int(1)
      let _31: Int = Add(level24.25, _30)
      Apply(skip21l2, [_29, _31, len6.7, prog8.9, ])
    } else {
      let _32: Int = Int(93)
      if (i.26 == _32) then {
        let _33: Int = Int(0)
        if (level24.25 == _33) then {
          Var(pc22.23)
        } else {
          let _34: Int = Int(1)
          let _35: Int = Add(pc22.23, _34)
          let _36: Int = Int(1)
          let _37: Int = Sub(level24.25, _36)
          Apply(skip21l2, [_35, _37, len6.7, prog8.9, ])
        }
      } else {
        let _38: Int = Int(1)
        let _39: Int = Add(pc22.23, _38)
        Apply(skip21l2, [_39, level24.25, len6.7, prog8.9, ])
      }
    }
  }
}
let rec lp108l4: Var({val: Some(Unit)}) = (ptr.12: Array(Int), len6.7: Int, pc41.42: Var({val: Some(Int)}), cells.17: Array(Int), prog8.9: Array(Int), next_pc.20: Array(Int)) {
  let _109: Int = Int(0)
  let _110: Int = Get ptr.12[_109]
  let _111: Int = Get cells.17[_110]
  let _112: Int = Int(0)
  if (_111 == _112) then {
    let _113: Int = Int(0)
    let _114: Int = Int(1)
    let _115: Int = Add(pc41.42, _114)
    let _116: Int = Int(0)
    let _117: Var({val: Some(Int)}) = Apply(skip21l2, [_115, _116, len6.7, prog8.9, ])
    let _119: Unit = Put next_pc.20[_113] = _117
    Unit
  } else {
    let _120: Int = Int(0)
    let _121: Int = Int(1)
    let _122: Int = Add(pc41.42, _121)
    let _123: Var({val: Some(Int)}) = Apply(aux40l3, [_122, ptr.12, len6.7, cells.17, prog8.9, next_pc.20, ])
    let _125: Unit = Put next_pc.20[_120] = _123
    Apply(lp108l4, [ptr.12, len6.7, pc41.42, cells.17, prog8.9, next_pc.20, ])
  }
}
let rec aux40l3: Var({val: Some(Int)}) = (pc41.42: Var({val: Some(Int)}), ptr.12: Array(Int), len6.7: Int, cells.17: Array(Int), prog8.9: Array(Int), next_pc.20: Array(Int)) {
  if (len6.7 <= pc41.42) then {
    Var(pc41.42)
  } else {
    let i.43: Int = Get prog8.9[pc41.42]
    let _44: Int = Int(62)
    if (i.43 == _44) then {
      let _45: Int = Int(0)
      let _46: Int = Int(0)
      let _47: Int = Get ptr.12[_46]
      let _48: Int = Int(1)
      let _49: Int = Add(_47, _48)
      let _51: Unit = Put ptr.12[_45] = _49
      let _52: Int = Int(1)
      let _53: Int = Add(pc41.42, _52)
      Apply(aux40l3, [_53, ptr.12, len6.7, cells.17, prog8.9, next_pc.20, ])
    } else {
      let _54: Int = Int(60)
      if (i.43 == _54) then {
        let _55: Int = Int(0)
        let _56: Int = Int(0)
        let _57: Int = Get ptr.12[_56]
        let _58: Int = Int(1)
        let _59: Int = Sub(_57, _58)
        let _61: Unit = Put ptr.12[_55] = _59
        let _62: Int = Int(1)
        let _63: Int = Add(pc41.42, _62)
        Apply(aux40l3, [_63, ptr.12, len6.7, cells.17, prog8.9, next_pc.20, ])
      } else {
        let _64: Int = Int(43)
        if (i.43 == _64) then {
          let _65: Int = Int(0)
          let _66: Int = Get ptr.12[_65]
          let _67: Int = Int(0)
          let _68: Int = Get ptr.12[_67]
          let _69: Int = Get cells.17[_68]
          let _70: Int = Int(1)
          let _71: Int = Add(_69, _70)
          let _73: Unit = Put cells.17[_66] = _71
          let _74: Int = Int(1)
          let _75: Int = Add(pc41.42, _74)
          Apply(aux40l3, [_75, ptr.12, len6.7, cells.17, prog8.9, next_pc.20, ])
        } else {
          let _76: Int = Int(45)
          if (i.43 == _76) then {
            let _77: Int = Int(0)
            let _78: Int = Get ptr.12[_77]
            let _79: Int = Int(0)
            let _80: Int = Get ptr.12[_79]
            let _81: Int = Get cells.17[_80]
            let _82: Int = Int(1)
            let _83: Int = Sub(_81, _82)
            let _85: Unit = Put cells.17[_78] = _83
            let _86: Int = Int(1)
            let _87: Int = Add(pc41.42, _86)
            Apply(aux40l3, [_87, ptr.12, len6.7, cells.17, prog8.9, next_pc.20, ])
          } else {
            let _88: Int = Int(46)
            if (i.43 == _88) then {
              let _89: Int = Int(0)
              let _90: Int = Get ptr.12[_89]
              let _91: Int = Get cells.17[_90]
              let _93: Unit = ExtApply(minimbt_print_char, [_91, ])
              let _94: Int = Int(1)
              let _95: Int = Add(pc41.42, _94)
              Apply(aux40l3, [_95, ptr.12, len6.7, cells.17, prog8.9, next_pc.20, ])
            } else {
              let _96: Int = Int(44)
              if (i.43 == _96) then {
                let _97: Int = Int(0)
                let _98: Int = Get ptr.12[_97]
                let c.152: Int = ExtApply(minimbt_read_char, [])
                let _153: Int = Int(10)
                let _99: Int = if (c.152 == _153) then {
                  Int(-1)
                } else {
                  let _154: Int = Int(13)
                  if (c.152 == _154) then {
                    Int(-1)
                  } else {
                    Var(c.152)
                  }
                }
                let _101: Unit = Put cells.17[_98] = _99
                let _102: Int = Int(1)
                let _103: Int = Add(pc41.42, _102)
                Apply(aux40l3, [_103, ptr.12, len6.7, cells.17, prog8.9, next_pc.20, ])
              } else {
                let _104: Int = Int(91)
                if (i.43 == _104) then {
                  let _105: Int = Int(0)
                  let _107: Unit = Put next_pc.20[_105] = pc41.42
                  let _127: Var({val: Some(Unit)}) = Apply(lp108l4, [ptr.12, len6.7, pc41.42, cells.17, prog8.9, next_pc.20, ])
                  let _128: Int = Int(0)
                  let _129: Int = Get next_pc.20[_128]
                  let _130: Int = Int(1)
                  let _131: Int = Add(_129, _130)
                  Apply(aux40l3, [_131, ptr.12, len6.7, cells.17, prog8.9, next_pc.20, ])
                } else {
                  let _132: Int = Int(93)
                  if (i.43 == _132) then {
                    Var(pc41.42)
                  } else {
                    Var(pc41.42)
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
let rec bf5l1: Unit = (len6.7: Int, prog8.9: Array(Int)) {
  let _10: Int = Int(1)
  let _11: Int = Int(0)
  let ptr.12: Array(Int) = ExtApply(minimbt_create_array, [_10, _11, ])
  let _13: Int = Int(1024)
  let _14: Int = Int(1024)
  let _15: Int = Mul(_13, _14)
  let _16: Int = Int(0)
  let cells.17: Array(Int) = ExtApply(minimbt_create_array, [_15, _16, ])
  let _18: Int = Int(1)
  let _19: Int = Int(0)
  let next_pc.20: Array(Int) = ExtApply(minimbt_create_array, [_18, _19, ])
  let _133: Int = Int(0)
  let _135: Var({val: Some(Int)}) = Apply(aux40l3, [_133, ptr.12, len6.7, cells.17, prog8.9, next_pc.20, ])
  Unit
}
let rec skip21.169l4: Var({val: Some(Int)}) = (pc22.170: Var({val: Some(Int)}), level24.171: Int, i141.142: Var({val: Some(Int)}), prog.139: Array(Int)) {
  if (i141.142 <= pc22.170) then {
    Var(pc22.170)
  } else {
    let i.172: Int = Get prog.139[pc22.170]
    let _173: Int = Int(91)
    if (i.172 == _173) then {
      let _174: Int = Int(1)
      let _175: Int = Add(pc22.170, _174)
      let _176: Int = Int(1)
      let _177: Int = Add(level24.171, _176)
      Apply(skip21.169l4, [_175, _177, i141.142, prog.139, ])
    } else {
      let _178: Int = Int(93)
      if (i.172 == _178) then {
        let _179: Int = Int(0)
        if (level24.171 == _179) then {
          Var(pc22.170)
        } else {
          let _180: Int = Int(1)
          let _181: Int = Add(pc22.170, _180)
          let _182: Int = Int(1)
          let _183: Int = Sub(level24.171, _182)
          Apply(skip21.169l4, [_181, _183, i141.142, prog.139, ])
        }
      } else {
        let _184: Int = Int(1)
        let _185: Int = Add(pc22.170, _184)
        Apply(skip21.169l4, [_185, level24.171, i141.142, prog.139, ])
      }
    }
  }
}
let rec lp108.246l6: Var({val: Some(Unit)}) = (ptr.160: Array(Int), i141.142: Var({val: Some(Int)}), pc41.187: Var({val: Some(Int)}), prog.139: Array(Int), cells.165: Array(Int), next_pc.168: Array(Int)) {
  let _247: Int = Int(0)
  let _248: Int = Get ptr.160[_247]
  let _249: Int = Get cells.165[_248]
  let _250: Int = Int(0)
  if (_249 == _250) then {
    let _251: Int = Int(0)
    let _252: Int = Int(1)
    let _253: Int = Add(pc41.187, _252)
    let _254: Int = Int(0)
    let _255: Var({val: Some(Int)}) = Apply(skip21.169l4, [_253, _254, i141.142, prog.139, ])
    let _256: Unit = Put next_pc.168[_251] = _255
    Unit
  } else {
    let _257: Int = Int(0)
    let _258: Int = Int(1)
    let _259: Int = Add(pc41.187, _258)
    let _260: Var({val: Some(Int)}) = Apply(aux40.186l5, [_259, ptr.160, i141.142, prog.139, cells.165, next_pc.168, ])
    let _261: Unit = Put next_pc.168[_257] = _260
    Apply(lp108.246l6, [ptr.160, i141.142, pc41.187, prog.139, cells.165, next_pc.168, ])
  }
}
let rec aux40.186l5: Var({val: Some(Int)}) = (pc41.187: Var({val: Some(Int)}), ptr.160: Array(Int), i141.142: Var({val: Some(Int)}), prog.139: Array(Int), cells.165: Array(Int), next_pc.168: Array(Int)) {
  if (i141.142 <= pc41.187) then {
    Var(pc41.187)
  } else {
    let i.188: Int = Get prog.139[pc41.187]
    let _189: Int = Int(62)
    if (i.188 == _189) then {
      let _190: Int = Int(0)
      let _191: Int = Int(0)
      let _192: Int = Get ptr.160[_191]
      let _193: Int = Int(1)
      let _194: Int = Add(_192, _193)
      let _195: Unit = Put ptr.160[_190] = _194
      let _196: Int = Int(1)
      let _197: Int = Add(pc41.187, _196)
      Apply(aux40.186l5, [_197, ptr.160, i141.142, prog.139, cells.165, next_pc.168, ])
    } else {
      let _198: Int = Int(60)
      if (i.188 == _198) then {
        let _199: Int = Int(0)
        let _200: Int = Int(0)
        let _201: Int = Get ptr.160[_200]
        let _202: Int = Int(1)
        let _203: Int = Sub(_201, _202)
        let _204: Unit = Put ptr.160[_199] = _203
        let _205: Int = Int(1)
        let _206: Int = Add(pc41.187, _205)
        Apply(aux40.186l5, [_206, ptr.160, i141.142, prog.139, cells.165, next_pc.168, ])
      } else {
        let _207: Int = Int(43)
        if (i.188 == _207) then {
          let _208: Int = Int(0)
          let _209: Int = Get ptr.160[_208]
          let _210: Int = Int(0)
          let _211: Int = Get ptr.160[_210]
          let _212: Int = Get cells.165[_211]
          let _213: Int = Int(1)
          let _214: Int = Add(_212, _213)
          let _215: Unit = Put cells.165[_209] = _214
          let _216: Int = Int(1)
          let _217: Int = Add(pc41.187, _216)
          Apply(aux40.186l5, [_217, ptr.160, i141.142, prog.139, cells.165, next_pc.168, ])
        } else {
          let _218: Int = Int(45)
          if (i.188 == _218) then {
            let _219: Int = Int(0)
            let _220: Int = Get ptr.160[_219]
            let _221: Int = Int(0)
            let _222: Int = Get ptr.160[_221]
            let _223: Int = Get cells.165[_222]
            let _224: Int = Int(1)
            let _225: Int = Sub(_223, _224)
            let _226: Unit = Put cells.165[_220] = _225
            let _227: Int = Int(1)
            let _228: Int = Add(pc41.187, _227)
            Apply(aux40.186l5, [_228, ptr.160, i141.142, prog.139, cells.165, next_pc.168, ])
          } else {
            let _229: Int = Int(46)
            if (i.188 == _229) then {
              let _230: Int = Int(0)
              let _231: Int = Get ptr.160[_230]
              let _232: Int = Get cells.165[_231]
              let _233: Unit = ExtApply(minimbt_print_char, [_232, ])
              let _234: Int = Int(1)
              let _235: Int = Add(pc41.187, _234)
              Apply(aux40.186l5, [_235, ptr.160, i141.142, prog.139, cells.165, next_pc.168, ])
            } else {
              let _236: Int = Int(44)
              if (i.188 == _236) then {
                let _237: Int = Int(0)
                let _238: Int = Get ptr.160[_237]
                let _239: Int = Apply(read_ch_until_newline_or_eof1l0, [])
                let _240: Unit = Put cells.165[_238] = _239
                let _241: Int = Int(1)
                let _242: Int = Add(pc41.187, _241)
                Apply(aux40.186l5, [_242, ptr.160, i141.142, prog.139, cells.165, next_pc.168, ])
              } else {
                let _243: Int = Int(91)
                if (i.188 == _243) then {
                  let _244: Int = Int(0)
                  let _245: Unit = Put next_pc.168[_244] = pc41.187
                  let _262: Var({val: Some(Unit)}) = Apply(lp108.246l6, [ptr.160, i141.142, pc41.187, prog.139, cells.165, next_pc.168, ])
                  let _263: Int = Int(0)
                  let _264: Int = Get next_pc.168[_263]
                  let _265: Int = Int(1)
                  let _266: Int = Add(_264, _265)
                  Apply(aux40.186l5, [_266, ptr.160, i141.142, prog.139, cells.165, next_pc.168, ])
                } else {
                  let _267: Int = Int(93)
                  if (i.188 == _267) then {
                    Var(pc41.187)
                  } else {
                    Var(pc41.187)
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
let rec read_prog140l3: Var({val: Some(Unit)}) = (i141.142: Var({val: Some(Int)}), prog.139: Array(Int)) {
  let c.155: Int = ExtApply(minimbt_read_char, [])
  let _156: Int = Int(10)
  let x.143: Int = if (c.155 == _156) then {
    Int(-1)
  } else {
    let _157: Int = Int(13)
    if (c.155 == _157) then {
      Int(-1)
    } else {
      Var(c.155)
    }
  }
  let _144: Int = Int(-1)
  if (x.143 == _144) then {
    let _158: Int = Int(1)
    let _159: Int = Int(0)
    let ptr.160: Array(Int) = ExtApply(minimbt_create_array, [_158, _159, ])
    let _161: Int = Int(1024)
    let _162: Int = Int(1024)
    let _163: Int = Mul(_161, _162)
    let _164: Int = Int(0)
    let cells.165: Array(Int) = ExtApply(minimbt_create_array, [_163, _164, ])
    let _166: Int = Int(1)
    let _167: Int = Int(0)
    let next_pc.168: Array(Int) = ExtApply(minimbt_create_array, [_166, _167, ])
    let _268: Int = Int(0)
    let _269: Var({val: Some(Int)}) = Apply(aux40.186l5, [_268, ptr.160, i141.142, prog.139, cells.165, next_pc.168, ])
    Unit
  } else {
    let _146: Unit = Put prog.139[i141.142] = x.143
    let _147: Int = Int(1)
    let _148: Int = Add(i141.142, _147)
    let x.270: Int = Apply(read_ch_until_newline_or_eof1l0, [])
    let _271: Int = Int(-1)
    if (x.270 == _271) then {
      Apply(bf5l1, [_148, prog.139, ])
    } else {
      let _272: Unit = Put prog.139[_148] = x.270
      let _273: Int = Int(1)
      let _274: Int = Add(_148, _273)
      Apply(read_prog140l3, [_274, prog.139, ])
    }
  }
}
let rec main136l2: Var({val: Some(Unit)}) = () {
  let len.137: Int = Int(1024)
  let _138: Int = Int(0)
  let prog.139: Array(Int) = ExtApply(minimbt_create_array, [len.137, _138, ])
  let _149: Int = Int(0)
  let x.275: Int = Apply(read_ch_until_newline_or_eof1l0, [])
  let _276: Int = Int(-1)
  let _151: Var({val: Some(Unit)}) = if (x.275 == _276) then {
    Apply(bf5l1, [_149, prog.139, ])
  } else {
    let _277: Unit = Put prog.139[_149] = x.275
    let _278: Int = Int(1)
    let _279: Int = Add(_149, _278)
    Apply(read_prog140l3, [_279, prog.139, ])
  }
  Unit
}
Apply(main136l2, [])