let rec read_ch_until_newline_or_eof.1: Int = () {
  let c.2: Int = ExtApply(minimbt_read_char, [])
  let _3: Int = Int(10)
  if (c.2 == _3) then {
    Int(-1)
  } else {
    let _4: Int = Int(13)
    if (c.2 == _4) then {
      Int(-1)
    } else {
      Var(c.2)
    }
  }
}
let rec bf.5: Unit = (len.6: Int, prog.7: Array(Int)) {
  let _8: Int = Int(1)
  let _9: Int = Int(0)
  let ptr.10: Array(Int) = ExtApply(minimbt_create_array, [_8, _9, ])
  let _11: Int = Int(1024)
  let _12: Int = Int(1024)
  let _13: Int = Mul(_11, _12)
  let _14: Int = Int(0)
  let cells.15: Array(Int) = ExtApply(minimbt_create_array, [_13, _14, ])
  let _16: Int = Int(1)
  let _17: Int = Int(0)
  let next_pc.18: Array(Int) = ExtApply(minimbt_create_array, [_16, _17, ])
  let rec skip.19: Var({val: Some(Int)}) = (pc.20: Var({val: Some(Int)}), level.21: Int) {
    if (len.6 <= pc.20) then {
      Var(pc.20)
    } else {
      let i.22: Int = Get prog.7[pc.20]
      let _23: Int = Int(91)
      if (i.22 == _23) then {
        let _24: Int = Int(1)
        let _25: Int = Add(pc.20, _24)
        let _26: Int = Int(1)
        let _27: Int = Add(level.21, _26)
        Apply(skip.19, [_25, _27, ])
      } else {
        let _28: Int = Int(93)
        if (i.22 == _28) then {
          let _29: Int = Int(0)
          if (level.21 == _29) then {
            Var(pc.20)
          } else {
            let _30: Int = Int(1)
            let _31: Int = Add(pc.20, _30)
            let _32: Int = Int(1)
            let _33: Int = Sub(level.21, _32)
            Apply(skip.19, [_31, _33, ])
          }
        } else {
          let _34: Int = Int(1)
          let _35: Int = Add(pc.20, _34)
          Apply(skip.19, [_35, level.21, ])
        }
      }
    }
  }
  let rec aux.36: Var({val: Some(Int)}) = (pc.37: Var({val: Some(Int)})) {
    if (len.6 <= pc.37) then {
      Var(pc.37)
    } else {
      let i.38: Int = Get prog.7[pc.37]
      let _39: Int = Int(62)
      if (i.38 == _39) then {
        let _40: Int = Int(0)
        let _41: Int = Int(0)
        let _42: Int = Get ptr.10[_41]
        let _43: Int = Int(1)
        let _44: Int = Add(_42, _43)
        let _45: Unit = Put ptr.10[_40] = _44
        let _46: Int = Int(1)
        let _47: Int = Add(pc.37, _46)
        Apply(aux.36, [_47, ])
      } else {
        let _48: Int = Int(60)
        if (i.38 == _48) then {
          let _49: Int = Int(0)
          let _50: Int = Int(0)
          let _51: Int = Get ptr.10[_50]
          let _52: Int = Int(1)
          let _53: Int = Sub(_51, _52)
          let _54: Unit = Put ptr.10[_49] = _53
          let _55: Int = Int(1)
          let _56: Int = Add(pc.37, _55)
          Apply(aux.36, [_56, ])
        } else {
          let _57: Int = Int(43)
          if (i.38 == _57) then {
            let _58: Int = Int(0)
            let _59: Int = Get ptr.10[_58]
            let _60: Int = Int(0)
            let _61: Int = Get ptr.10[_60]
            let _62: Int = Get cells.15[_61]
            let _63: Int = Int(1)
            let _64: Int = Add(_62, _63)
            let _65: Unit = Put cells.15[_59] = _64
            let _66: Int = Int(1)
            let _67: Int = Add(pc.37, _66)
            Apply(aux.36, [_67, ])
          } else {
            let _68: Int = Int(45)
            if (i.38 == _68) then {
              let _69: Int = Int(0)
              let _70: Int = Get ptr.10[_69]
              let _71: Int = Int(0)
              let _72: Int = Get ptr.10[_71]
              let _73: Int = Get cells.15[_72]
              let _74: Int = Int(1)
              let _75: Int = Sub(_73, _74)
              let _76: Unit = Put cells.15[_70] = _75
              let _77: Int = Int(1)
              let _78: Int = Add(pc.37, _77)
              Apply(aux.36, [_78, ])
            } else {
              let _79: Int = Int(46)
              if (i.38 == _79) then {
                let _80: Int = Int(0)
                let _81: Int = Get ptr.10[_80]
                let _82: Int = Get cells.15[_81]
                let _83: Unit = ExtApply(minimbt_print_char, [_82, ])
                let _84: Int = Int(1)
                let _85: Int = Add(pc.37, _84)
                Apply(aux.36, [_85, ])
              } else {
                let _86: Int = Int(44)
                if (i.38 == _86) then {
                  let _87: Int = Int(0)
                  let _88: Int = Get ptr.10[_87]
                  let _89: Int = Apply(read_ch_until_newline_or_eof.1, [])
                  let _90: Unit = Put cells.15[_88] = _89
                  let _91: Int = Int(1)
                  let _92: Int = Add(pc.37, _91)
                  Apply(aux.36, [_92, ])
                } else {
                  let _93: Int = Int(91)
                  if (i.38 == _93) then {
                    let _94: Int = Int(0)
                    let _95: Unit = Put next_pc.18[_94] = pc.37
                    let rec lp.96: Var({val: Some(Unit)}) = () {
                      let _97: Int = Int(0)
                      let _98: Int = Get ptr.10[_97]
                      let _99: Int = Get cells.15[_98]
                      let _100: Int = Int(0)
                      if (_99 == _100) then {
                        let _101: Int = Int(0)
                        let _102: Int = Int(1)
                        let _103: Int = Add(pc.37, _102)
                        let _104: Int = Int(0)
                        let _105: Var({val: Some(Int)}) = Apply(skip.19, [_103, _104, ])
                        let _106: Unit = Put next_pc.18[_101] = _105
                        Unit
                      } else {
                        let _107: Int = Int(0)
                        let _108: Int = Int(1)
                        let _109: Int = Add(pc.37, _108)
                        let _110: Var({val: Some(Int)}) = Apply(aux.36, [_109, ])
                        let _111: Unit = Put next_pc.18[_107] = _110
                        Apply(lp.96, [])
                      }
                    }
                    let _112: Var({val: Some(Unit)}) = Apply(lp.96, [])
                    let _113: Int = Int(0)
                    let _114: Int = Get next_pc.18[_113]
                    let _115: Int = Int(1)
                    let _116: Int = Add(_114, _115)
                    Apply(aux.36, [_116, ])
                  } else {
                    let _117: Int = Int(93)
                    if (i.38 == _117) then {
                      Var(pc.37)
                    } else {
                      Var(pc.37)
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  let _118: Int = Int(0)
  let _119: Var({val: Some(Int)}) = Apply(aux.36, [_118, ])
  Unit
}
let rec main.120: Var({val: Some(Unit)}) = () {
  let len.121: Int = Int(1024)
  let _122: Int = Int(0)
  let prog.123: Array(Int) = ExtApply(minimbt_create_array, [len.121, _122, ])
  let rec read_prog.124: Var({val: Some(Unit)}) = (i.125: Var({val: Some(Int)})) {
    let x.126: Int = Apply(read_ch_until_newline_or_eof.1, [])
    let _127: Int = Int(-1)
    if (x.126 == _127) then {
      Apply(bf.5, [i.125, prog.123, ])
    } else {
      let _128: Unit = Put prog.123[i.125] = x.126
      let _129: Int = Int(1)
      let _130: Int = Add(i.125, _129)
      Apply(read_prog.124, [_130, ])
    }
  }
  let _131: Int = Int(0)
  let _132: Var({val: Some(Unit)}) = Apply(read_prog.124, [_131, ])
  Unit
}
Apply(main.120, [])