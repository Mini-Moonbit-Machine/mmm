# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn main33 #f3 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = ext_call minimbt_read_int()
    let %1: int32 = add(%0, 1)
    let %2: int32 = load_symbol ::0
    let _ = alloc <m0: array[int32] heap(%1)> <- [..] = %2
    let _ = alloc <m1: closure(int32) -> int32 heap(2)> <- [0] = f6, [1] = f3.m0
    let %5: int32 = apply f3.m1(%0)
    let %6: unit = ext_call minimbt_print_int(%5)
    let %7: unit = ext_call minimbt_print_char(10)
    return ()
  }
}
.fn mem_fib15 #f2 : fn(closure(int32) -> int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le($f1, 1)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3($f1)
  }
  .bb #b2 () {
    let %1: int32 = sub($f1, 1)
    let %2: int32 = apply $f0(%1)
    let %3: int32 = sub($f1, 2)
    let %4: int32 = apply $f0(%3)
    let %5: int32 = add(%2, %4)
    jump b3(%5)
  }
  .bb #b3 (int32) {
    return $b3.0
  }
}
.fn T$start #f8 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f3()
    return %0
  }
}
.fn T$unmem_magic.1 #f0 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return -1919810
  }
}
.fn memed8.51 #f6 : closure(int32) -> int32
.freevars (array[int32])
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 offset(^1, $f0 * @32)
    let %1: int32 = load_symbol ::0
    let %2: bool = eq(%0, %1)
    br %2 b1() b2()
  }
  .bb #b1 () {
    let %3: int32 = call f2(self, $f0)
    let _ = store int32 offset(^1, $f0 * @32) <- %3
    jump b3(%3)
  }
  .bb #b2 () {
    let %5: int32 = load int32 offset(^1, $f0 * @32)
    jump b3(%5)
  }
  .bb #b3 (int32) {
    return $b3.0
  }
}
.thunk ::0 unmem_magic.1
.thunk ::1 start
