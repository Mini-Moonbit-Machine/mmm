# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn main262.513 #f8 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap(9)> <- [..] = 0
    let %1: unit = call f0(0, 9, f8.m0)
    let _ = alloc <m1: array[int32] heap(9)> <- [..] = 0
    let _ = alloc <m2: array[int32] heap(9)> <- [..] = 0
    let _ = alloc <m3: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m4: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m5: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m6: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m7: array[int32] heap(1)> <- [..] = 9
    let %9: unit = call f7(f8.m7, 9, f8.m0, f8.m1, f8.m2, f8.m3, f8.m6, f8.m5, f8.m4)
    let %10: int32 = load int32 field(f8.m4, 0 * @32)
    let %11: int32 = load int32 field(f8.m5, 0 * @32)
    let _ = alloc <m8: (int32, int32) heap(2)> <- [0] = %10, [1] = %11
    let %13: int32 = load int32 field(f8.m8, 0 * @(@32, @(@32, @32)))
    let %14: int32 = load int32 field(f8.m8, 1 * @(@32, @(@32, @32)))
    let %15: unit = ext_call minimbt_print_int(%14)
    let %16: unit = ext_call minimbt_print_int(%13)
    return %16
  }
}
.fn init_count59.517 #f2 : fn(array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 field($f0, 0 * @32)
    let %1: bool = eq(%0, 1)
    br %1 b3(()) b2()
  }
  .bb #b2 () {
    let %2: int32 = load int32 field($f0, 0 * @32)
    let %3: int32 = sub(%2, 1)
    let %10: ptr = compute_address unit offset(0, %3 * @32)
    let _ = store int32 raw($f1, %10) <- %2
    let %6: int32 = load int32 field($f0, 0 * @32)
    let %7: int32 = sub(%6, 1)
    let _ = store int32 field($f0, 0 * @32) <- %7
    let %9: unit = call f2($f0, $f1)
    jump b3(%9)
  }
  .bb #b3 (unit) {
    return ()
  }
}
.fn compute40.515 #f7 : fn(array[int32], int32, array[int32], array[int32], array[int32], array[int32], array[int32], array[int32], array[int32]) -> unit
.freevars ()
.entry b8 {
  .bb #b0 (array[int32], int32, array[int32], array[int32], array[int32], array[int32], array[int32], array[int32], array[int32]) {
    let %0: int32 = load int32 field($b0.0, 0 * @32)
    let %1: bool = le(1, %0)
    br %1 b1() b6(())
  }
  .bb #b1 () {
    jump b59()
  }
  .bb #b3 () {
    let %11: int32 = load int32 field($b0.5, 0 * @32)
    let _ = store int32 field($b0.8, 0 * @32) <- %11
    jump b5(())
  }
  .bb #b5 (unit) {
    let %13: int32 = load int32 field($b0.7, 0 * @32)
    let %14: int32 = load int32 field($b0.5, 0 * @32)
    let %15: int32 = load int32 field($b0.6, 0 * @32)
    let %17: int32 = div(%15, 2)
    let %18: int32 = mul(%17, 2)
    let %19: int32 = sub(%15, %18)
    let %20: int32 = mul(%19, 2)
    let %21: int32 = sub(1, %20)
    let %22: int32 = mul(%14, %21)
    let %23: int32 = add(%13, %22)
    let _ = store int32 field($b0.7, 0 * @32) <- %23
    let _ = alloc <m1: array[int32] heap(1)> <- [..] = true
    let _ = alloc <m2: array[int32] heap(1)> <- [..] = 0
    jump b71()
  }
  .bb #b6 (unit) {
    return $b6.0
  }
  .loop #b7 pre #Some(b8) header #b0 {
    .block #b6
    .block #b1
    .block #b5
    .block #b3
  }
  .bb #b8 () {
    jump b7($f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8)
  }
  .bb #b9 (unit) {
    let %3: unit = call f2($b0.0, $b0.4)
    let _ = store int32 field($b0.5, 0 * @32) <- 0
    let %5: int32 = load int32 field($b0.3, 0 * @32)
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = %5
    jump b36()
  }
  .bb #b10 (unit) {
    let %28: int32 = load int32 field($b0.6, 0 * @32)
    let %29: int32 = add(%28, 1)
    let _ = store int32 field($b0.6, 0 * @32) <- %29
    jump b0($b0.0, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5, $b0.6, $b0.7, $b0.8)
  }
  .bb #b11 (unit) {
    let %8: int32 = load int32 field($b0.8, 0 * @32)
    let %9: int32 = load int32 field($b0.5, 0 * @32)
    let %10: bool = le(%8, %9)
    br %10 b3() b5(())
  }
  .bb #b31 (array[int32], array[int32], array[int32]) {
    let %31: int32 = load int32 field($b31.0, 0 * @32)
    let %32: bool = eq(%31, 0)
    br %32 b34(()) b33()
  }
  .bb #b33 () {
    let _ = alloc <m31: array[int32] heap(1)> <- [..] = 0
    jump b45()
  }
  .bb #b34 (unit) {
    jump b11($b34.0)
  }
  .loop #b35 pre #Some(b36) header #b31 {
    .block #b33
    .block #b34
  }
  .bb #b36 () {
    jump b35(f7.m0, $b0.3, $b0.5)
  }
  .bb #b37 (unit) {
    let %35: int32 = load int32 field($b31.1, 0 * @32)
    let _ = store int32 field($b31.0, 0 * @32) <- %35
    let %37: int32 = load int32 field($b31.2, 0 * @32)
    let %38: int32 = add(%37, 1)
    let _ = store int32 field($b31.2, 0 * @32) <- %38
    jump b31($b31.0, $b31.1, $b31.2)
  }
  .bb #b40 (int32, array[int32], array[int32], array[int32]) {
    let %40: int32 = load int32 field($b40.2, 0 * @32)
    let %41: int32 = div(%40, 2)
    let %42: bool = le($b40.0, %41)
    br %42 b41() b43(())
  }
  .bb #b41 () {
    let %92: ptr = compute_address unit offset(0, $b40.0 * @32)
    let %43: int32 = load int32 raw($b40.3, %92)
    let _ = store int32 field($b40.1, 0 * @32) <- %43
    let %45: int32 = load int32 field($b40.2, 0 * @32)
    let %46: int32 = sub(%45, $b40.0)
    let %91: ptr = compute_address unit offset(0, %46 * @32)
    let %47: int32 = load int32 raw($b40.3, %91)
    let %89: ptr = compute_address unit offset(0, $b40.0 * @32)
    let _ = store int32 raw($b40.3, %89) <- %47
    let %49: int32 = load int32 field($b40.2, 0 * @32)
    let %50: int32 = sub(%49, $b40.0)
    let %51: int32 = load int32 field($b40.1, 0 * @32)
    let %86: ptr = compute_address unit offset(0, %50 * @32)
    let _ = store int32 raw($b40.3, %86) <- %51
    let %53: int32 = add($b40.0, 1)
    jump b40(%53, $b40.1, $b40.2, $b40.3)
  }
  .bb #b43 (unit) {
    jump b37($b43.0)
  }
  .loop #b44 pre #Some(b45) header #b40 {
    .block #b41
    .block #b43
  }
  .bb #b45 () {
    jump b44(0, f7.m31, $b31.0, $b31.1)
  }
  .bb #b54 (int32, int32, array[int32], array[int32]) {
    let %54: int32 = sub($b54.1, 1)
    let %55: bool = le($b54.0, %54)
    br %55 b55() b57(())
  }
  .bb #b55 () {
    let %105: ptr = compute_address unit offset(0, $b54.0 * @32)
    let %56: int32 = load int32 raw($b54.2, %105)
    let %104: ptr = compute_address unit offset(0, $b54.0 * @32)
    let _ = store int32 raw($b54.3, %104) <- %56
    let %58: int32 = add($b54.0, 1)
    jump b54(%58, $b54.1, $b54.2, $b54.3)
  }
  .bb #b57 (unit) {
    jump b9($b57.0)
  }
  .loop #b58 pre #Some(b59) header #b54 {
    .block #b55
    .block #b57
  }
  .bb #b59 () {
    jump b58(0, $b0.1, $b0.2, $b0.3)
  }
  .bb #b60 (int32, array[int32], array[bool], array[int32], array[int32], array[int32]) {
    let %59: bool = load bool field($b60.2, 0 * @32)
    let %60: bool = eq(%59, true)
    br %60 b61() b69(())
  }
  .bb #b61 () {
    let %61: int32 = load int32 field($b60.4, 0 * @32)
    let %62: bool = eq(%61, $b60.0)
    br %62 b63() b64()
  }
  .bb #b63 () {
    let _ = store bool field($b60.2, 0 * @32) <- false
    let _ = store int32 field($b60.4, 0 * @32) <- 0
    jump b68(())
  }
  .bb #b64 () {
    let %65: int32 = load int32 field($b60.3, 0 * @32)
    let _ = store int32 field($b60.1, 0 * @32) <- %65
    let %67: unit = call f5(0, $b60.3, $b60.4)
    let %68: int32 = load int32 field($b60.4, 0 * @32)
    let %69: int32 = load int32 field($b60.1, 0 * @32)
    let %102: ptr = compute_address unit offset(0, %68 * @32)
    let _ = store int32 raw($b60.3, %102) <- %69
    let %71: int32 = load int32 field($b60.4, 0 * @32)
    let %101: ptr = compute_address unit offset(0, %71 * @32)
    let %73: int32 = load int32 raw($b60.5, %101)
    let %74: int32 = sub(%73, 1)
    let %99: ptr = compute_address unit offset(0, %71 * @32)
    let _ = store int32 raw($b60.5, %99) <- %74
    let %76: int32 = load int32 field($b60.4, 0 * @32)
    let %96: ptr = compute_address unit offset(0, %76 * @32)
    let %77: int32 = load int32 raw($b60.5, %96)
    let %78: bool = le(1, %77)
    br %78 b65() b66()
  }
  .bb #b65 () {
    let _ = store bool field($b60.2, 0 * @32) <- false
    jump b67(())
  }
  .bb #b66 () {
    let %80: int32 = load int32 field($b60.4, 0 * @32)
    let %81: int32 = add(%80, 1)
    let _ = store int32 field($b60.4, 0 * @32) <- %81
    jump b67(())
  }
  .bb #b67 (unit) {
    jump b68(())
  }
  .bb #b68 (unit) {
    jump b60($b60.0, $b60.1, $b60.2, $b60.3, $b60.4, $b60.5)
  }
  .bb #b69 (unit) {
    jump b10($b69.0)
  }
  .loop #b70 pre #Some(b71) header #b60 {
    .block #b66
    .block #b64
    .block #b68
    .block #b69
    .block #b61
    .block #b65
    .block #b63
    .block #b67
  }
  .bb #b71 () {
    jump b70($b0.1, f7.m2, f7.m1, $b0.2, $b0.0, $b0.4)
  }
}
.fn move_perm1_forward197.521 #f5 : fn(int32, array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 field($f2, 0 * @32)
    let %1: int32 = sub(%0, 1)
    let %2: bool = le($f0, %1)
    br %2 b1() b3(())
  }
  .bb #b1 () {
    let %3: int32 = add($f0, 1)
    let %10: ptr = compute_address unit offset(0, %3 * @32)
    let %4: int32 = load int32 raw($f1, %10)
    let %9: ptr = compute_address unit offset(0, $f0 * @32)
    let _ = store int32 raw($f1, %9) <- %4
    let %7: unit = call f5(%3, $f1, $f2)
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn T$start #f18 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f8()
    return %0
  }
}
.fn init_arr9.514 #f0 : fn(int32, int32, array[int32]) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (int32, int32, array[int32]) {
    let %0: int32 = sub($b0.1, 1)
    let %1: bool = le($b0.0, %0)
    br %1 b1() b3(())
  }
  .bb #b1 () {
    let %4: ptr = compute_address unit offset(0, $b0.0 * @32)
    let _ = store int32 raw($b0.2, %4) <- $b0.0
    let %3: int32 = add($b0.0, 1)
    jump b0(%3, $b0.1, $b0.2)
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1, $f2)
  }
}
.thunk ::0 start

