let rec read_ch_until_newline_or_eof: () -> Int {
  let c: Var(None) = Apply(Var("read_char"), [])
  if (Eq(Var("c"), Int(10))) then {
    Neg(Int(1))
  } else {
    if (Eq(Var("c"), Int(13))) then {
      Neg(Int(1))
    } else {
      Var(c)
    }
  }
}
let move_left: Int = Int(60)
let move_right: Int = Int(62)
let increase: Int = Int(43)
let decrease: Int = Int(45)
let print: Int = Int(46)
let read: Int = Int(44)
let loop_start: Int = Int(91)
let loop_end: Int = Int(93)
let rec bf: (len: Int, prog: Array[Int]) -> Unit {
  let ptr: Var(None) = Array::make(Int(1), Int(0))
  let cells: Var(None) = Array::make(Prim(Int(1024), Int(1024), Mul, kind=None), Int(0))
  let next_pc: Var(None) = Array::make(Int(1), Int(0))
  let rec skip: (pc: Var(None), level: Int) -> Var(None) {
    if (LE(Var("len"), Var("pc"))) then {
      Var(pc)
    } else {
      let i: Var(None) = Get Var("prog")[Var("pc")]
      if (Eq(Var("i"), Var("loop_start"))) then {
        Apply(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=None), Prim(Var("level"), Int(1), Add, kind=None), ])
      } else {
        if (Eq(Var("i"), Var("loop_end"))) then {
          if (Eq(Var("level"), Int(0))) then {
            Var(pc)
          } else {
            Apply(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=None), Prim(Var("level"), Int(1), Sub, kind=None), ])
          }
        } else {
          Apply(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=None), Var("level"), ])
        }
      }
    }
  }
  let rec aux: (pc: Var(None)) -> Var(None) {
    if (LE(Var("len"), Var("pc"))) then {
      Var(pc)
    } else {
      let i: Var(None) = Get Var("prog")[Var("pc")]
      if (Eq(Var("i"), Var("move_right"))) then {
        let _: Var(None) = Put Var("ptr")[Int(0)] = Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=None)
        Apply(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=None), ])
      } else {
        if (Eq(Var("i"), Var("move_left"))) then {
          let _: Var(None) = Put Var("ptr")[Int(0)] = Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=None)
          Apply(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=None), ])
        } else {
          if (Eq(Var("i"), Var("increase"))) then {
            let _: Var(None) = Put Var("cells")[Get(Var("ptr"), Int(0))] = Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=None)
            Apply(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=None), ])
          } else {
            if (Eq(Var("i"), Var("decrease"))) then {
              let _: Var(None) = Put Var("cells")[Get(Var("ptr"), Int(0))] = Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=None)
              Apply(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=None), ])
            } else {
              if (Eq(Var("i"), Var("print"))) then {
                let _: Var(None) = Apply(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0))), ])
                Apply(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=None), ])
              } else {
                if (Eq(Var("i"), Var("read"))) then {
                  let _: Var(None) = Put Var("cells")[Get(Var("ptr"), Int(0))] = App(Var("read_ch_until_newline_or_eof"), targs=None, [])
                  Apply(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=None), ])
                } else {
                  if (Eq(Var("i"), Var("loop_start"))) then {
                    let _: Var(None) = Put Var("next_pc")[Int(0)] = Var("pc")
                    let rec lp: () -> Var(None) {
                      if (Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0))) then {
                        let _: Var(None) = Put Var("next_pc")[Int(0)] = App(Var("skip"), targs=None, [Prim(Var("pc"), Int(1), Add, kind=None), Int(0)])
                        Unit
                      } else {
                        let _: Var(None) = Put Var("next_pc")[Int(0)] = App(Var("aux"), targs=None, [Prim(Var("pc"), Int(1), Add, kind=None)])
                        Apply(Var("lp"), [])
                      }
                    }
                    let _: Var(None) = Apply(Var("lp"), [])
                    Apply(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=None), ])
                  } else {
                    if (Eq(Var("i"), Var("loop_end"))) then {
                      Var(pc)
                    } else {
                      Var(pc)
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  let _: Var(None) = Apply(Var("aux"), [Int(0), ])
  Unit
}
let rec main: () -> Var(None) {
  let len: Var(None) = Int(1024)
  let prog: Var(None) = Array::make(Var("len"), Int(0))
  let rec read_prog: (i: Var(None)) -> Var(None) {
    let x: Var(None) = Apply(Var("read_ch_until_newline_or_eof"), [])
    if (Eq(Var("x"), Neg(Int(1), kind=None))) then {
      Apply(Var("bf"), [Var("i"), Var("prog"), ])
    } else {
      let _: Var(None) = Put Var("prog")[Var("i")] = Var("x")
      Apply(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=None), ])
    }
  }
  let _: Var(None) = Apply(Var("read_prog"), [Int(0), ])
  Unit
}
Unit
