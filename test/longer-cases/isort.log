// [Asm] pre_assigned_registers: Insn(iref=%1) -> v5, FnParam(fref=f1, fpref=$f.1) -> v3, Self(fref=f1) -> v0, FnParam(fref=f1, fpref=$f.0) -> v2, Insn(iref=%0) -> v4, Insn(iref=%2) -> v6
// [Asm] defs: []
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of modulo.368"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r5 [label="v6 ← a0", color=green];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r4 [label="v5 ← a1", color=green];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r3 [label="v4 ← a2", color=green];
// [Asm]   r2 [label="v3 ← a1", color=green];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r3;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:v2-> 1:a1-> 2:v3-> 3:v4-> 4:v5-> 5:v6-> 6:a0"
// [Asm]   comment = "v2<-a0;v6<-a0;v5<-a1;v4<-a2;v3<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of modulo.368"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   div v4, v2, v3 ->   div a2, a0, a1
// [Asm] subst   mul v5, v4, v3 ->   mul a1, a2, a1
// [Asm] subst   sub v6, v2, v5 ->   sub a0, a0, a1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f8) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main.369 ->   call main.369
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: BlockParam(bref=b2, bpref=$b.0) -> v4, BlockParam(bref=b7, bpref=$b.0) -> v16, Self(fref=f2) -> v0, BlockParam(bref=b2, bpref=$b.1) -> v5, Insn(iref=%8) -> v14, Insn(iref=%10) -> v15, BlockParam(bref=b8, bpref=$b.0) -> v17, Insn(iref=%5) -> v11, Insn(iref=%0) -> v6, Insn(iref=%4) -> v10, Insn(iref=%3) -> v9, Insn(iref=%7) -> v13, Insn(iref=%2) -> v8, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%1) -> v7, Insn(iref=%6) -> v12, FnParam(fref=f2, fpref=$f.0) -> v2
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%2), Insn(iref=%3)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b2, bpref=$b.1), Int32(val=0)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v17]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v17]
// [Asm] move_origin: [zero]
// [Asm] defined: v17 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v16]
// [Asm] move_origin: [zero]
// [Asm] defined: v16 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v4, v5, zero, v26]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v4, v5, zero, v27]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v4, v5, zero]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v4, v5, v12, zero]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v11, v4, v5, v12, zero, v22]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v11, v4, v5, v12, zero, v23]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v4, v5, v12, zero, v13]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v11, v4, v12, zero, v13, v20]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v11, v4, v12, v21, zero, v13]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v4, v12, zero]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v11, v4, v12, v18, zero]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v11, v19, v4, v12, zero]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v12, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, v12, zero]
// [Asm] move_origin: [v4]
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: [v12]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v4, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v4, v32, v5, zero]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: [v33]
// [Asm] live_set: [v4, v5, zero, v33]
// [Asm] move_origin: []
// [Asm] defined: v33 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v4, v5, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v29]
// [Asm] live_set: [v4, v5, zero, v29, v8]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [v30]
// [Asm] live_set: [v4, v5, zero, v30, v8]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v4, v5, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v17]
// [Asm] move_origin: [v16]
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v17]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: [v3]
// [Asm] defined: v5 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of insert.370"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="v8 ← a0", color=green];
// [Asm]   r23 [label="v9 ← a3", color=green];
// [Asm]   r3 [label="v26 ← a0", color=green];
// [Asm]   r9 [label="v12 ← a3", color=green];
// [Asm]   r26 [label="v3 ← a0", color=green];
// [Asm]   r6 [label="zero", color=blue];
// [Asm]   r13 [label="v20 ← a2", color=green];
// [Asm]   r4 [label="v4 ← a1", color=green];
// [Asm]   r1 [label="v17 ← a0", color=green];
// [Asm]   r11 [label="v23 ← a4", color=green];
// [Asm]   r7 [label="v27 ← a0", color=green];
// [Asm]   r10 [label="v22 ← a4", color=green];
// [Asm]   r22 [label="v30 ← a3", color=green];
// [Asm]   r14 [label="v21 ← a2", color=green];
// [Asm]   r8 [label="v11 ← a0", color=green];
// [Asm]   r5 [label="v5 ← a2", color=green];
// [Asm]   r24 [label="v2 ← a2", color=green];
// [Asm]   r15 [label="v18 ← a2", color=green];
// [Asm]   r25 [label="a1", color=blue];
// [Asm]   r2 [label="v16 ← a0", color=green];
// [Asm]   r16 [label="v19 ← a2", color=green];
// [Asm]   r18 [label="v32 ← a0", color=green];
// [Asm]   r19 [label="v33 ← a0", color=green];
// [Asm]   r17 [label="v7 ← a0", color=green];
// [Asm]   r21 [label="v29 ← a3", color=green];
// [Asm]   r12 [label="v13 ← a4", color=green];
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r21;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r4 -- r16;
// [Asm]   r5 -- r21;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r4 -- r23;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r20;
// [Asm]   r9 -- r15;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r23;
// [Asm]   r5 -- r22;
// [Asm]   r8 -- r9;
// [Asm]   r5 -- r18;
// [Asm]   r5 -- r19;
// [Asm]   r4 -- r20;
// [Asm]   r6 -- r16;
// [Asm]   r4 -- r18;
// [Asm]   r6 -- r22;
// [Asm]   r4 -- r22;
// [Asm]   r5 -- r11;
// [Asm]   r6 -- r26;
// [Asm]   r6 -- r12;
// [Asm]   r3 -- r5;
// [Asm]   r6 -- r24;
// [Asm]   r24 -- r26;
// [Asm]   r6 -- r20;
// [Asm]   r8 -- r12;
// [Asm]   r6 -- r8;
// [Asm]   r9 -- r14;
// [Asm]   r4 -- r21;
// [Asm]   r20 -- r23;
// [Asm]   r6 -- r13;
// [Asm]   r6 -- r19;
// [Asm]   r9 -- r11;
// [Asm]   r20 -- r22;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r8 -- r16;
// [Asm]   r12 -- r13;
// [Asm]   r8 -- r13;
// [Asm]   r5 -- r9;
// [Asm]   r8 -- r15;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r9 -- r12;
// [Asm]   r4 -- r12;
// [Asm]   r6 -- r17;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r16;
// [Asm]   r9 -- r10;
// [Asm]   r8 -- r11;
// [Asm]   r12 -- r14;
// [Asm]   r4 -- r17;
// [Asm]   r6 -- r23;
// [Asm]   r4 -- r10;
// [Asm]   r8 -- r14;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r26;
// [Asm]   r9 -- r13;
// [Asm]   r24 -- r25;
// [Asm]   r4 -- r14;
// [Asm]   r20 -- r21;
// [Asm]   r4 -- r9;
// [Asm]   r4 -- r19;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:a0-> 1:v17-> 2:v16-> 3:v26-> 4:v4-> 5:v5-> 6:zero-> 7:v27-> 8:v11-> 9:v12-> 10:v22-> 11:v23-> 12:v13-> 13:v20-> 14:v21-> 15:v18-> 16:v19-> 17:v7-> 18:v32-> 19:v33-> 20:v8-> 21:v29-> 22:v30-> 23:v9-> 26:v3-> 24:v2-> 25:a1"
// [Asm]   comment = "v8<-a0;v9<-a3;v26<-a0;v12<-a3;v3<-a0;v20<-a2;v4<-a1;v17<-a0;v23<-a4;v27<-a0;v22<-a4;v30<-a3;v21<-a2;v11<-a0;v5<-a2;v2<-a2;v18<-a2;v16<-a0;v19<-a2;v32<-a0;v33<-a0;v7<-a0;v29<-a3;v13<-a4;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of insert.370"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v17, zero ->   mv a0, zero
// [Asm] subst   mv v16, zero ->   mv a0, zero
// [Asm] subst   slliw v26, v5, 2 ->   slliw a0, a2, 2
// [Asm] subst   add v27, v4, v26 ->   add a0, a1, a0
// [Asm] subst   lw v11, 0(v27) ->   lw a0, 0(a0)
// [Asm] subst   addi v12, v5, -1 ->   addi a3, a2, -1
// [Asm] subst   slliw v22, v12, 2 ->   slliw a4, a3, 2
// [Asm] subst   add v23, v4, v22 ->   add a4, a1, a4
// [Asm] subst   lw v13, 0(v23) ->   lw a4, 0(a4)
// [Asm] subst   slliw v20, v5, 2 ->   slliw a2, a2, 2
// [Asm] subst   add v21, v4, v20 ->   add a2, a1, a2
// [Asm] subst   sw v13, 0(v21) ->   sw a4, 0(a2)
// [Asm] subst   slliw v18, v12, 2 ->   slliw a2, a3, 2
// [Asm] subst   add v19, v4, v18 ->   add a2, a1, a2
// [Asm] subst   sw v11, 0(v19) ->   sw a0, 0(a2)
// [Asm] subst   mv v5, v12 ->   mv a2, a3
// [Asm] subst   j .insert.370_2 ->   j .insert.370_2
// [Asm] subst   addi v7, v5, -1 ->   addi a0, a2, -1
// [Asm] subst   slliw v32, v7, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v33, v4, v32 ->   add a0, a1, a0
// [Asm] subst   lw v8, 0(v33) ->   lw a0, 0(a0)
// [Asm] subst   slliw v29, v5, 2 ->   slliw a3, a2, 2
// [Asm] subst   add v30, v4, v29 ->   add a3, a1, a3
// [Asm] subst   lw v9, 0(v30) ->   lw a3, 0(a3)
// [Asm] subst   bge v9, v8, .insert.370_5 ->   bge a3, a0, .insert.370_5
// [Asm] subst   beq v5, zero, .insert.370_3 ->   beq a2, zero, .insert.370_3
// [Asm] subst   j .insert.370_8 ->   j .insert.370_8
// [Asm] subst   mv v2, a0 ->   mv a2, a0
// [Asm] subst   mv v3, a1 ->   mv a0, a1
// [Asm] subst   mv v4, v2 ->   mv a1, a2
// [Asm] subst   mv v5, v3 ->   mv a2, a0
// [Asm] pre_assigned_registers: BlockParam(bref=b2, bpref=$b.0) -> v4, Mem(fref=f3, mref=m0) -> v2, Insn(iref=%9) -> v14, Insn(iref=%8) -> v13, BlockParam(bref=b2, bpref=$b.1) -> v5, BlockParam(bref=b10, bpref=$b.0) -> v15, Insn(iref=%10) -> v7, Insn(iref=%5) -> v18, Insn(iref=%0) -> v3, Self(fref=f3) -> v0, Insn(iref=%4) -> v17, BlockParam(bref=b13, bpref=$b.0) -> v21, Insn(iref=%3) -> v16, Insn(iref=%13) -> v10, Insn(iref=%7) -> v20, BlockParam(bref=b6, bpref=$b.0) -> v11, Insn(iref=%2) -> v12, Insn(iref=%1) -> v6, Insn(iref=%11) -> v8, Insn(iref=%6) -> v19, Insn(iref=%12) -> v9
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b10, bpref=$b.0), Int32(val=100)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b6, bpref=$b.0), Int32(val=100)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=100)])
// [Asm] defs: [v32]
// [Asm] live_set: [v11, v32, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: []
// [Asm] live_set: [v11, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v21]
// [Asm] move_origin: [zero]
// [Asm] defined: v21 is X
// [Asm] defs: [v40]
// [Asm] live_set: [v40, v4, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v40 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v43]
// [Asm] live_set: [v43, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v43 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: [v43]
// [Asm] defined: a1 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, zero, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: v4 is X
// [Asm] defs: [v41]
// [Asm] live_set: [v4, v41, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v2]
// [Asm] move_origin: [v41]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v11, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, zero, a0, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v11, a1, zero, a0, v2]
// [Asm] move_origin: [v11]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v13]
// [Asm] live_set: [v11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v11, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, zero, v2]
// [Asm] move_origin: [v14]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v29]
// [Asm] live_set: [v15, zero, v29, v2]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: []
// [Asm] live_set: [v15, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v15, zero, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: v15 is X
// [Asm] defs: [v33]
// [Asm] live_set: [zero, v33, v2]
// [Asm] move_origin: []
// [Asm] defined: v33 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, zero, v2]
// [Asm] move_origin: [v33]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, zero, a0, v2]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v7, v4, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v7, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, zero, a0, v2]
// [Asm] move_origin: [v7]
// [Asm] defined: a0 is X
// [Asm] defs: [v37]
// [Asm] live_set: [v4, v37, zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, zero, a0, v2]
// [Asm] move_origin: [v37]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v4, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v35]
// [Asm] live_set: [v8, v35, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v8, v36, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v8, v10, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v8, v4, zero, v2]
// [Asm] move_origin: [v10]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v2]
// [Asm] move_origin: [v8]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v21]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v26]
// [Asm] live_set: [v15, zero, v26, v2]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v15, zero, v27, v2]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v17, v15, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v17, v15, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v15, zero, a0, v2]
// [Asm] move_origin: [v17]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v15, zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v18]
// [Asm] live_set: [v15, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v15, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v15, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v23]
// [Asm] live_set: [v15, zero, v23, v2]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v15, zero, a0, v2]
// [Asm] move_origin: [v23]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v15, zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v19]
// [Asm] live_set: [v15, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v15, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v20]
// [Asm] live_set: [zero, v20, v2]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v15, zero, v2]
// [Asm] move_origin: [v20]
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v15, zero, v2]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.369"];
// [Asm]   r0 [label="v32 ← a0", color=green];
// [Asm]   r38 [label="v18 ← a0", color=green];
// [Asm]   r33 [label="v36 ← a1", color=green];
// [Asm]   r9 [label="v43 ← a0", color=green];
// [Asm]   r26 [label="v29 ← a0", color=green];
// [Asm]   r6 [label="v4 ← s0", color=green];
// [Asm]   r13 [label="a2", color=blue];
// [Asm]   r4 [label="v21 ← a0", color=green];
// [Asm]   r29 [label="v7 ← a0", color=green];
// [Asm]   r35 [label="v26 ← a0", color=green];
// [Asm]   r7 [label="v5 ← a1", color=green];
// [Asm]   r10 [label="a1", color=blue];
// [Asm]   r8 [label="s11", color=blue];
// [Asm]   r5 [label="v40 ← a0", color=green];
// [Asm]   r36 [label="v27 ← a0", color=green];
// [Asm]   r32 [label="v35 ← a1", color=green];
// [Asm]   r15 [label="a4", color=blue];
// [Asm]   r24 [label="v13 ← a0", color=green];
// [Asm]   r31 [label="v8 ← a0", color=green];
// [Asm]   r39 [label="v23 ← a0", color=green];
// [Asm]   r17 [label="a6", color=blue];
// [Asm]   r12 [label="a0", color=blue];
// [Asm]   r37 [label="v17 ← a0", color=green];
// [Asm]   r20 [label="t1", color=blue];
// [Asm]   r23 [label="t4", color=blue];
// [Asm]   r3 [label="v2 ← s1", color=green];
// [Asm]   r27 [label="v15 ← s0", color=green];
// [Asm]   r1 [label="v11 ← s0", color=green];
// [Asm]   r40 [label="v19 ← a0", color=green];
// [Asm]   r41 [label="v20 ← a0", color=green];
// [Asm]   r28 [label="v33 ← a0", color=green];
// [Asm]   r11 [label="v41 ← a0", color=green];
// [Asm]   r34 [label="v10 ← a1", color=green];
// [Asm]   r22 [label="t3", color=blue];
// [Asm]   r14 [label="a3", color=blue];
// [Asm]   r30 [label="v37 ← a1", color=green];
// [Asm]   r25 [label="v14 ← a0", color=green];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="a5", color=blue];
// [Asm]   r18 [label="a7", color=blue];
// [Asm]   r19 [label="t0", color=blue];
// [Asm]   r21 [label="t2", color=blue];
// [Asm]   r2 -- r39;
// [Asm]   r6 -- r21;
// [Asm]   r2 -- r32;
// [Asm]   r2 -- r31;
// [Asm]   r2 -- r38;
// [Asm]   r1 -- r12;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r14 -- r27;
// [Asm]   r3 -- r16;
// [Asm]   r3 -- r6;
// [Asm]   r27 -- r36;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r6 -- r29;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r32;
// [Asm]   r3 -- r11;
// [Asm]   r18 -- r27;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r3 -- r37;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r37;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r27 -- r39;
// [Asm]   r3 -- r31;
// [Asm]   r3 -- r34;
// [Asm]   r2 -- r41;
// [Asm]   r3 -- r5;
// [Asm]   r12 -- r19;
// [Asm]   r2 -- r34;
// [Asm]   r3 -- r8;
// [Asm]   r6 -- r13;
// [Asm]   r2 -- r25;
// [Asm]   r26 -- r27;
// [Asm]   r2 -- r33;
// [Asm]   r2 -- r6;
// [Asm]   r3 -- r30;
// [Asm]   r5 -- r6;
// [Asm]   r19 -- r27;
// [Asm]   r3 -- r39;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r10 -- r12;
// [Asm]   r3 -- r13;
// [Asm]   r21 -- r27;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r3 -- r40;
// [Asm]   r2 -- r12;
// [Asm]   r22 -- r27;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r20 -- r27;
// [Asm]   r6 -- r31;
// [Asm]   r3 -- r33;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r27;
// [Asm]   r3 -- r17;
// [Asm]   r5 -- r7;
// [Asm]   r12 -- r23;
// [Asm]   r2 -- r36;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r7;
// [Asm]   r27 -- r35;
// [Asm]   r3 -- r35;
// [Asm]   r12 -- r21;
// [Asm]   r31 -- r34;
// [Asm]   r2 -- r24;
// [Asm]   r6 -- r23;
// [Asm]   r17 -- r27;
// [Asm]   r2 -- r23;
// [Asm]   r6 -- r32;
// [Asm]   r27 -- r37;
// [Asm]   r16 -- r27;
// [Asm]   r6 -- r7;
// [Asm]   r3 -- r19;
// [Asm]   r27 -- r40;
// [Asm]   r6 -- r11;
// [Asm]   r3 -- r25;
// [Asm]   r2 -- r26;
// [Asm]   r6 -- r15;
// [Asm]   r3 -- r38;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r23;
// [Asm]   r6 -- r14;
// [Asm]   r12 -- r15;
// [Asm]   r6 -- r33;
// [Asm]   r3 -- r12;
// [Asm]   r6 -- r30;
// [Asm]   r1 -- r22;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r6 -- r16;
// [Asm]   r3 -- r28;
// [Asm]   r10 -- r27;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r23 -- r27;
// [Asm]   r6 -- r12;
// [Asm]   r15 -- r27;
// [Asm]   r6 -- r20;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r19;
// [Asm]   r2 -- r40;
// [Asm]   r12 -- r20;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r27 -- r38;
// [Asm]   r12 -- r13;
// [Asm]   r2 -- r14;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r12 -- r22;
// [Asm]   r3 -- r29;
// [Asm]   r3 -- r20;
// [Asm]   r2 -- r21;
// [Asm]   r3 -- r41;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r12 -- r30;
// [Asm]   r2 -- r30;
// [Asm]   r3 -- r36;
// [Asm]   r12 -- r14;
// [Asm]   r12 -- r16;
// [Asm]   r31 -- r32;
// [Asm]   r12 -- r27;
// [Asm]   r31 -- r33;
// [Asm]   r12 -- r17;
// [Asm]   r2 -- r35;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   r13 -- r27;
// [Asm]   r12 -- r18;
// [Asm]   r1 -- r24;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:v32-> 1:v11-> 2:zero-> 3:v2-> 10:a1-> 12:a0-> 6:v4-> 13:a2-> 14:a3-> 27:v15-> 15:a4-> 16:a5-> 17:a6-> 18:a7-> 19:t0-> 20:t1-> 21:t2-> 22:t3-> 23:t4-> 30:v37-> 5:v40-> 7:v5-> 11:v41-> 24:v13-> 26:v29-> 29:v7-> 31:v8-> 32:v35-> 33:v36-> 34:v10-> 35:v26-> 36:v27-> 37:v17-> 38:v18-> 39:v23-> 40:v19-> 8:s11-> 9:v43-> 25:v14-> 28:v33-> 41:v20-> 4:v21"
// [Asm]   comment = "v32<-a0;v18<-a0;v36<-a1;v43<-a0;v29<-a0;v4<-s0;v21<-a0;v7<-a0;v26<-a0;v5<-a1;v40<-a0;v27<-a0;v35<-a1;v13<-a0;v8<-a0;v23<-a0;v17<-a0;v2<-s1;v15<-s0;v11<-s0;v19<-a0;v20<-a0;v33<-a0;v41<-a0;v10<-a1;v37<-a1;v14<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.369"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v32, 100 ->   li a0, 100
// [Asm] subst   beq v11, v32, .main.369_7 ->   beq s0, a0, .main.369_7
// [Asm] subst   mv v21, zero ->   mv a0, zero
// [Asm] subst   li v40, 100 ->   li a0, 100
// [Asm] subst   beq v4, v40, .main.369_3 ->   beq s0, a0, .main.369_3
// [Asm] subst   addi v2, s11, -400 ->   addi s1, s11, -400
// [Asm] subst   andi s11, v2, -8 ->   andi s11, s1, -8
// [Asm] subst   li v43, 100 ->   li a0, 100
// [Asm] subst   mv a1, v43 ->   mv a1, a0
// [Asm] subst   mv v4, zero ->   mv s0, zero
// [Asm] subst   li v41, 12345 ->   li a0, 12345
// [Asm] subst   mv v5, v41 ->   mv a1, a0
// [Asm] subst   mv a0, v2 ->   mv a0, s1
// [Asm] subst   mv a1, v11 ->   mv a1, s0
// [Asm] subst   call insert.370 ->   call insert.370
// [Asm] subst   addi v14, v11, 1 ->   addi a0, s0, 1
// [Asm] subst   mv v11, v14 ->   mv s0, a0
// [Asm] subst   j .main.369_6 ->   j .main.369_6
// [Asm] subst   li v29, 100 ->   li a0, 100
// [Asm] subst   beq v15, v29, .main.369_11 ->   beq s0, a0, .main.369_11
// [Asm] subst   mv v15, zero ->   mv s0, zero
// [Asm] subst   li v33, 1 ->   li a0, 1
// [Asm] subst   mv v11, v33 ->   mv s0, a0
// [Asm] subst   mv a0, v5 ->   mv a0, a1
// [Asm] subst   call random.367 ->   call random.367
// [Asm] subst   li v37, 65537 ->   li a1, 65537
// [Asm] subst   call modulo.368 ->   call modulo.368
// [Asm] subst   slliw v35, v4, 2 ->   slliw a1, s0, 2
// [Asm] subst   add v36, v2, v35 ->   add a1, s1, a1
// [Asm] subst   sw v8, 0(v36) ->   sw a0, 0(a1)
// [Asm] subst   addi v10, v4, 1 ->   addi a1, s0, 1
// [Asm] subst   mv v4, v10 ->   mv s0, a1
// [Asm] subst   mv v5, v8 ->   mv a1, a0
// [Asm] subst   j .main.369_2 ->   j .main.369_2
// [Asm] subst   ret ->   ret
// [Asm] subst   slliw v26, v15, 2 ->   slliw a0, s0, 2
// [Asm] subst   add v27, v2, v26 ->   add a0, s1, a0
// [Asm] subst   lw v17, 0(v27) ->   lw a0, 0(a0)
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v23, 32 ->   li a0, 32
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   addi v20, v15, 1 ->   addi a0, s0, 1
// [Asm] subst   mv v15, v20 ->   mv s0, a0
// [Asm] subst   j .main.369_10 ->   j .main.369_10
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v4, Self(fref=f0) -> v0, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%0) -> v3
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of random.367"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a0", color=blue];
// [Asm]   r1 [label="v6 ← a1", color=green];
// [Asm]   r3 [label="v4 ← a0", color=green];
// [Asm]   r2 [label="v3 ← a0", color=green];
// [Asm]   r0 -- r1;
// [Asm]   comment = "0:v2-> 1:v6-> 2:v3-> 3:v4-> 4:a0"
// [Asm]   comment = "v2<-a0;v6<-a1;v4<-a0;v3<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of random.367"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v6, 75 ->   li a1, 75
// [Asm] subst   mul v3, v2, v6 ->   mul a0, a0, a1
// [Asm] subst   addi v4, v3, 74 ->   addi a0, a0, 74
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf true
// [Asm] modulo.368:
// [Asm] # block info: defs: [v3, v4, v5, v6, a0, v2], uses: [v2, v5, a0, v4, a1, v6, v3], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .modulo.368_0:
// [Asm]   # save_ctx1  # live: [a1, a0]
// [Asm]   mv v2, a0  # live: [a1, v2]
// [Asm]   mv v3, a1  # live: [v3, v2]
// [Asm]   div v4, v2, v3  # live: [v3, v4, v2]
// [Asm]   mul v5, v4, v3  # live: [v5, v2]
// [Asm]   sub v6, v2, v5  # live: [v6]
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main.369  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main.369:
// [Asm] # block info: defs: [v5, v4, v41, a1, v43, s11, v2], uses: [v41, v43, s11, zero, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: [v4, v5, zero, v2]
// [Asm] # block parameters: []
// [Asm] .main.369_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   addi v2, s11, -400  # live: [zero, v2]
// [Asm]   andi s11, v2, -8  # live: [zero, v2]
// [Asm]   li v43, 100  # live: [v43, zero, v2]
// [Asm]   mv a1, v43  # live: [zero, v2]
// [Asm] # control
// [Asm]   mv v4, zero  # live: [v4, zero, v2]
// [Asm]   li v41, 12345  # live: [v4, v41, zero, v2]
// [Asm]   mv v5, v41  # live: [v4, v5, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [v40], uses: [v4, v40], upward_exposed: [v4], params_defs: [v4, v5]
// [Asm] # live_in: [v4, v5, zero, v2], live_out: [v4, v5, zero, v2]
// [Asm] # block parameters: [v4, v5]
// [Asm] .main.369_2:
// [Asm] # control
// [Asm]   li v40, 100  # live: [v40, v4, v5, zero, v2]
// [Asm]   beq v4, v40, .main.369_3  # live: [v4, v5, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [t1, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, v4, ft7, ft4, v5, ft9, v10, a5, fa4, a0, v36, ft2, v37, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, v35, t4, t2], uses: [v5, v10, a0, v7, v35, v8, v36, v37, v4, a1, v2], upward_exposed: [v4, v5, v2], params_defs: []
// [Asm] # live_in: [v4, v5, zero, v2], live_out: [v4, v5, zero, v2]
// [Asm] # block parameters: []
// [Asm] .main.369_4:
// [Asm]   # save_ctx2  # live: [v4, v5, zero, v2]
// [Asm]   mv a0, v5  # live: [v4, zero, a0, v2]
// [Asm]   call random.367  # live: [v4, zero, a0, v2]
// [Asm]   mv v7, a0  # live: [v7, v4, zero, v2]
// [Asm]   # restore_ctx2  # live: [v7, v4, zero, v2]
// [Asm]   # save_ctx2  # live: [v7, v4, zero, v2]
// [Asm]   mv a0, v7  # live: [v4, zero, a0, v2]
// [Asm]   li v37, 65537  # live: [v4, v37, zero, a0, v2]
// [Asm]   mv a1, v37  # live: [v4, a1, zero, a0, v2]
// [Asm]   call modulo.368  # live: [v4, zero, a0, v2]
// [Asm]   mv v8, a0  # live: [v8, v4, zero, v2]
// [Asm]   # restore_ctx2  # live: [v8, v4, zero, v2]
// [Asm]   slliw v35, v4, 2  # live: [v8, v35, v4, zero, v2]
// [Asm]   add v36, v2, v35  # live: [v8, v36, v4, zero, v2]
// [Asm]   sw v8, 0(v36)  # live: [v8, v4, zero, v2]
// [Asm]   addi v10, v4, 1  # live: [v8, v10, zero, v2]
// [Asm] # control
// [Asm]   mv v4, v10  # live: [v8, v4, zero, v2]
// [Asm]   mv v5, v8  # live: [v4, v5, zero, v2]
// [Asm]   j .main.369_2  # live: [v4, v5, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [v11, v33], uses: [v33], upward_exposed: [], params_defs: []
// [Asm] # live_in: [zero, v2], live_out: [v11, zero, v2]
// [Asm] # block parameters: []
// [Asm] .main.369_3:
// [Asm] # control
// [Asm]   li v33, 1  # live: [zero, v33, v2]
// [Asm]   mv v11, v33  # live: [v11, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [v32], uses: [v11, v32], upward_exposed: [v11], params_defs: [v11]
// [Asm] # live_in: [v11, zero, v2], live_out: [v11, zero, v2]
// [Asm] # block parameters: [v11]
// [Asm] .main.369_6:
// [Asm] # control
// [Asm]   li v32, 100  # live: [v11, v32, zero, v2]
// [Asm]   beq v11, v32, .main.369_7  # live: [v11, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v13, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v11, a1, v14, a0, v2], upward_exposed: [v11, v2], params_defs: []
// [Asm] # live_in: [v11, zero, v2], live_out: [v11, zero, v2]
// [Asm] # block parameters: []
// [Asm] .main.369_8:
// [Asm]   # save_ctx2  # live: [v11, zero, v2]
// [Asm]   mv a0, v2  # live: [v11, zero, a0, v2]
// [Asm]   mv a1, v11  # live: [v11, a1, zero, a0, v2]
// [Asm]   call insert.370  # live: [v11, zero, a0, v2]
// [Asm]   mv v13, a0  # live: [v11, zero, v2]
// [Asm]   # restore_ctx2  # live: [v11, zero, v2]
// [Asm]   addi v14, v11, 1  # live: [v14, zero, v2]
// [Asm] # control
// [Asm]   mv v11, v14  # live: [v11, zero, v2]
// [Asm]   j .main.369_6  # live: [v11, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [v15], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero, v2], live_out: [v15, zero, v2]
// [Asm] # block parameters: []
// [Asm] .main.369_7:
// [Asm] # control
// [Asm]   mv v15, zero  # live: [v15, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [v29], uses: [v15, v29], upward_exposed: [v15], params_defs: [v15]
// [Asm] # live_in: [v15, zero, v2], live_out: [v15, zero, v2]
// [Asm] # block parameters: [v15]
// [Asm] .main.369_10:
// [Asm] # control
// [Asm]   li v29, 100  # live: [v15, zero, v29, v2]
// [Asm]   beq v15, v29, .main.369_11  # live: [v15, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [t1, v26, ft0, ft1, a1, fa1, fa2, ft6, v27, a4, fa6, v20, v19, a6, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, ft8, a7, t3, fa7, t0, fa5, v18, fa3, ft3, v23, fa0, t4, t2, v15], uses: [v26, a0, v27, v23, v20, v17, v15, v2], upward_exposed: [v15, v2], params_defs: []
// [Asm] # live_in: [v15, zero, v2], live_out: [v15, zero, v2]
// [Asm] # block parameters: []
// [Asm] .main.369_12:
// [Asm]   slliw v26, v15, 2  # live: [v15, zero, v26, v2]
// [Asm]   add v27, v2, v26  # live: [v15, zero, v27, v2]
// [Asm]   lw v17, 0(v27)  # live: [v17, v15, zero, v2]
// [Asm]   # save_ctx2  # live: [v17, v15, zero, v2]
// [Asm]   mv a0, v17  # live: [v15, zero, a0, v2]
// [Asm]   call minimbt_print_int  # live: [v15, zero, a0, v2]
// [Asm]   mv v18, a0  # live: [v15, zero, v2]
// [Asm]   # restore_ctx2  # live: [v15, zero, v2]
// [Asm]   # save_ctx2  # live: [v15, zero, v2]
// [Asm]   li v23, 32  # live: [v15, zero, v23, v2]
// [Asm]   mv a0, v23  # live: [v15, zero, a0, v2]
// [Asm]   call minimbt_print_char  # live: [v15, zero, a0, v2]
// [Asm]   mv v19, a0  # live: [v15, zero, v2]
// [Asm]   # restore_ctx2  # live: [v15, zero, v2]
// [Asm]   addi v20, v15, 1  # live: [zero, v20, v2]
// [Asm] # control
// [Asm]   mv v15, v20  # live: [v15, zero, v2]
// [Asm]   j .main.369_10  # live: [v15, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [v21], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v21]
// [Asm] # block parameters: []
// [Asm] .main.369_11:
// [Asm] # control
// [Asm]   mv v21, zero  # live: [v21]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v21, a0], upward_exposed: [v21], params_defs: [v21]
// [Asm] # live_in: [v21], live_out: []
// [Asm] # block parameters: [v21]
// [Asm] .main.369_13:
// [Asm] # control
// [Asm]   mv a0, v21  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] random.367:
// [Asm] # block info: defs: [v3, v4, v6, a0, v2], uses: [v3, v4, v6, a0, v2], upward_exposed: [a0], params_defs: []
// [Asm] # live_in: [a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .random.367_0:
// [Asm]   # save_ctx1  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   li v6, 75  # live: [v6, v2]
// [Asm]   mul v3, v2, v6  # live: [v3]
// [Asm]   addi v4, v3, 74  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] insert.370:
// [Asm] # block info: defs: [v3, v4, v5, v2], uses: [v3, a1, a0, v2], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, a0, zero], live_out: [v4, v5, zero]
// [Asm] # block parameters: []
// [Asm] .insert.370_0:
// [Asm]   # save_ctx1  # live: [a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, zero, v3]
// [Asm] # control
// [Asm]   mv v4, v2  # live: [v4, zero, v3]
// [Asm]   mv v5, v3  # live: [v4, v5, zero]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v5, zero], upward_exposed: [v5, zero], params_defs: [v4, v5]
// [Asm] # live_in: [v4, v5, zero], live_out: [v4, v5, zero]
// [Asm] # block parameters: [v4, v5]
// [Asm] .insert.370_2:
// [Asm] # control
// [Asm]   beq v5, zero, .insert.370_3  # live: [v4, v5, zero]
// [Asm] 
// [Asm] # block info: defs: [v29, v30, v8, v7, v32, v33, v9], uses: [v5, v29, v30, v7, v8, v4, v32, v33, v9], upward_exposed: [v4, v5], params_defs: []
// [Asm] # live_in: [v4, v5, zero], live_out: [v4, v5, zero]
// [Asm] # block parameters: []
// [Asm] .insert.370_4:
// [Asm]   addi v7, v5, -1  # live: [v4, v5, zero, v7]
// [Asm]   slliw v32, v7, 2  # live: [v4, v32, v5, zero]
// [Asm]   add v33, v4, v32  # live: [v4, v5, zero, v33]
// [Asm]   lw v8, 0(v33)  # live: [v4, v5, zero, v8]
// [Asm]   slliw v29, v5, 2  # live: [v4, v5, zero, v29, v8]
// [Asm]   add v30, v4, v29  # live: [v4, v5, zero, v30, v8]
// [Asm]   lw v9, 0(v30)  # live: [v4, v5, zero, v9, v8]
// [Asm] # control
// [Asm]   bge v9, v8, .insert.370_5  # live: [v4, v5, zero]
// [Asm] 
// [Asm] # block info: defs: [v11, v5, v21, v18, v26, v13, v27, v22, v23, v20, v19, v12], uses: [v11, v5, v21, v26, v13, v22, v12, v18, v23, v20, v27, v19, v4], upward_exposed: [v4, v5], params_defs: []
// [Asm] # live_in: [v4, v5, zero], live_out: [v4, v5, zero]
// [Asm] # block parameters: []
// [Asm] .insert.370_6:
// [Asm]   slliw v26, v5, 2  # live: [v4, v5, zero, v26]
// [Asm]   add v27, v4, v26  # live: [v4, v5, zero, v27]
// [Asm]   lw v11, 0(v27)  # live: [v11, v4, v5, zero]
// [Asm]   addi v12, v5, -1  # live: [v11, v4, v5, v12, zero]
// [Asm]   slliw v22, v12, 2  # live: [v11, v4, v5, v12, zero, v22]
// [Asm]   add v23, v4, v22  # live: [v11, v4, v5, v12, zero, v23]
// [Asm]   lw v13, 0(v23)  # live: [v11, v4, v5, v12, zero, v13]
// [Asm]   slliw v20, v5, 2  # live: [v11, v4, v12, zero, v13, v20]
// [Asm]   add v21, v4, v20  # live: [v11, v4, v12, v21, zero, v13]
// [Asm]   sw v13, 0(v21)  # live: [v11, v4, v12, zero]
// [Asm]   slliw v18, v12, 2  # live: [v11, v4, v12, v18, zero]
// [Asm]   add v19, v4, v18  # live: [v11, v19, v4, v12, zero]
// [Asm]   sw v11, 0(v19)  # live: [v4, v12, zero]
// [Asm] # control
// [Asm]   mv v4, v4  # live: [v4, v12, zero]
// [Asm]   mv v5, v12  # live: [v4, v5, zero]
// [Asm]   j .insert.370_2  # live: [v4, v5, zero]
// [Asm] 
// [Asm] # block info: defs: [v17], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v17]
// [Asm] # block parameters: []
// [Asm] .insert.370_3:
// [Asm] # control
// [Asm]   mv v17, zero  # live: [v17]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v17, a0], upward_exposed: [v17], params_defs: [v17]
// [Asm] # live_in: [v17], live_out: []
// [Asm] # block parameters: [v17]
// [Asm] .insert.370_8:
// [Asm] # control
// [Asm]   mv a0, v17  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v16], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v16]
// [Asm] # block parameters: []
// [Asm] .insert.370_5:
// [Asm] # control
// [Asm]   mv v16, zero  # live: [v16]
// [Asm] 
// [Asm] # block info: defs: [v17], uses: [v16], upward_exposed: [v16], params_defs: [v16]
// [Asm] # live_in: [v16], live_out: [v17]
// [Asm] # block parameters: [v16]
// [Asm] .insert.370_7:
// [Asm] # control
// [Asm]   mv v17, v16  # live: [v17]
// [Asm]   j .insert.370_8  # live: [v17]
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("random", Int), args: [("state", Int)], body: Prim(Prim(Var("state"), Int(75), Mul, kind=Some(Int)), Int(74), Add, kind=Some(Int))}, LetRec({name: ("modulo", Int), args: [("x", Int), ("y", Int)], body: Let(("q", Var({val: Some(Int)})), Prim(Var("x"), Var("y"), Div, kind=Some(Int)), Prim(Var("x"), Prim(Var("q"), Var("y"), Mul, kind=Some(Int)), Sub, kind=Some(Int)))}, LetRec({name: ("fill_buffer", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("aux", Unit), args: [("i", Int), ("state", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("new_state", Var({val: Some(Int)})), App(Var("random"), [Var("state")]), Let(("res", Var({val: Some(Int)})), App(Var("modulo"), [Var("new_state"), Int(65537)]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res")])))))}, App(Var("aux"), [Int(0), Int(12345)]))}, LetRec({name: ("isort", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("insert", Unit), args: [("arr", Array(Int)), ("i", Int)], body: If(Eq(Var("i"), Int(0)), Unit, If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))))))}, LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("insert"), [Var("arr"), Var("i")]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))}, App(Var("aux"), [Int(1)])))}, LetRec({name: ("print_array", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(32)]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, App(Var("aux"), [Int(0)]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), Int(100), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("fill_buffer"), [Var("arr"), Var("n")]), Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")])))))}, App(Var("main"), [])))))))
// [Knf] build_knf: Prim(Prim(Var("state"), Int(75), Mul, kind=Some(Int)), Int(74), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Var("state"), Int(75), Mul, kind=Some(Int))
// [Knf] build_knf: Var("state")
// [Knf] build_knf: Int(75)
// [Knf] build_knf: Int(74)
// [Knf] build_knf: LetRec({name: ("modulo", Int), args: [("x", Int), ("y", Int)], body: Let(("q", Var({val: Some(Int)})), Prim(Var("x"), Var("y"), Div, kind=Some(Int)), Prim(Var("x"), Prim(Var("q"), Var("y"), Mul, kind=Some(Int)), Sub, kind=Some(Int)))}, LetRec({name: ("fill_buffer", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("aux", Unit), args: [("i", Int), ("state", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("new_state", Var({val: Some(Int)})), App(Var("random"), [Var("state")]), Let(("res", Var({val: Some(Int)})), App(Var("modulo"), [Var("new_state"), Int(65537)]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res")])))))}, App(Var("aux"), [Int(0), Int(12345)]))}, LetRec({name: ("isort", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("insert", Unit), args: [("arr", Array(Int)), ("i", Int)], body: If(Eq(Var("i"), Int(0)), Unit, If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))))))}, LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("insert"), [Var("arr"), Var("i")]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))}, App(Var("aux"), [Int(1)])))}, LetRec({name: ("print_array", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(32)]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, App(Var("aux"), [Int(0)]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), Int(100), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("fill_buffer"), [Var("arr"), Var("n")]), Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")])))))}, App(Var("main"), []))))))
// [Knf] build_knf: Let(("q", Var({val: Some(Int)})), Prim(Var("x"), Var("y"), Div, kind=Some(Int)), Prim(Var("x"), Prim(Var("q"), Var("y"), Mul, kind=Some(Int)), Sub, kind=Some(Int)))
// [Knf] build_knf: Prim(Var("x"), Var("y"), Div, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Prim(Var("x"), Prim(Var("q"), Var("y"), Mul, kind=Some(Int)), Sub, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Prim(Var("q"), Var("y"), Mul, kind=Some(Int))
// [Knf] build_knf: Var("q")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: LetRec({name: ("fill_buffer", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("aux", Unit), args: [("i", Int), ("state", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("new_state", Var({val: Some(Int)})), App(Var("random"), [Var("state")]), Let(("res", Var({val: Some(Int)})), App(Var("modulo"), [Var("new_state"), Int(65537)]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res")])))))}, App(Var("aux"), [Int(0), Int(12345)]))}, LetRec({name: ("isort", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("insert", Unit), args: [("arr", Array(Int)), ("i", Int)], body: If(Eq(Var("i"), Int(0)), Unit, If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))))))}, LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("insert"), [Var("arr"), Var("i")]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))}, App(Var("aux"), [Int(1)])))}, LetRec({name: ("print_array", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(32)]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, App(Var("aux"), [Int(0)]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), Int(100), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("fill_buffer"), [Var("arr"), Var("n")]), Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")])))))}, App(Var("main"), [])))))
// [Knf] build_knf: LetRec({name: ("aux", Unit), args: [("i", Int), ("state", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("new_state", Var({val: Some(Int)})), App(Var("random"), [Var("state")]), Let(("res", Var({val: Some(Int)})), App(Var("modulo"), [Var("new_state"), Int(65537)]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res")])))))}, App(Var("aux"), [Int(0), Int(12345)]))
// [Knf] build_knf: If(Eq(Var("i"), Var("n")), Unit, Let(("new_state", Var({val: Some(Int)})), App(Var("random"), [Var("state")]), Let(("res", Var({val: Some(Int)})), App(Var("modulo"), [Var("new_state"), Int(65537)]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res")])))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("new_state", Var({val: Some(Int)})), App(Var("random"), [Var("state")]), Let(("res", Var({val: Some(Int)})), App(Var("modulo"), [Var("new_state"), Int(65537)]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res")]))))
// [Knf] build_knf: App(Var("random"), [Var("state")])
// [Knf] build_knf: Var("random")
// [Knf] build_knf: Var("state")
// [Knf] build_knf: Let(("res", Var({val: Some(Int)})), App(Var("modulo"), [Var("new_state"), Int(65537)]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res")])))
// [Knf] build_knf: App(Var("modulo"), [Var("new_state"), Int(65537)])
// [Knf] build_knf: Var("modulo")
// [Knf] build_knf: Var("new_state")
// [Knf] build_knf: Int(65537)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res")]))
// [Knf] build_knf: Put(Var("arr"), Var("i"), Var("res"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("res")
// [Knf] build_knf: App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res")])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("res")
// [Knf] build_knf: App(Var("aux"), [Int(0), Int(12345)])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(12345)
// [Knf] build_knf: LetRec({name: ("isort", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("insert", Unit), args: [("arr", Array(Int)), ("i", Int)], body: If(Eq(Var("i"), Int(0)), Unit, If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))))))}, LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("insert"), [Var("arr"), Var("i")]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))}, App(Var("aux"), [Int(1)])))}, LetRec({name: ("print_array", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(32)]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, App(Var("aux"), [Int(0)]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), Int(100), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("fill_buffer"), [Var("arr"), Var("n")]), Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")])))))}, App(Var("main"), []))))
// [Knf] build_knf: LetRec({name: ("insert", Unit), args: [("arr", Array(Int)), ("i", Int)], body: If(Eq(Var("i"), Int(0)), Unit, If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))))))}, LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("insert"), [Var("arr"), Var("i")]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))}, App(Var("aux"), [Int(1)])))
// [Knf] build_knf: If(Eq(Var("i"), Int(0)), Unit, If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))])))))
// [Knf] build_knf: Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Get(Var("arr"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))))
// [Knf] build_knf: Get(Var("arr"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))])))
// [Knf] build_knf: Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("tmp")
// [Knf] build_knf: App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("insert")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("insert"), [Var("arr"), Var("i")]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))}, App(Var("aux"), [Int(1)]))
// [Knf] build_knf: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("insert"), [Var("arr"), Var("i")]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("insert"), [Var("arr"), Var("i")]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("insert"), [Var("arr"), Var("i")])
// [Knf] build_knf: Var("insert")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Int(1)])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("print_array", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(32)]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, App(Var("aux"), [Int(0)]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), Int(100), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("fill_buffer"), [Var("arr"), Var("n")]), Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")])))))}, App(Var("main"), [])))
// [Knf] build_knf: LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(32)]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, App(Var("aux"), [Int(0)]))
// [Knf] build_knf: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(32)]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(32)]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: App(Var("print_int"), [Get(Var("arr"), Var("i"))])
// [Knf] build_knf: Get(Var("arr"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(32)]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("print_char"), [Int(32)])
// [Knf] build_knf: Int(32)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Int(0)])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), Int(100), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("fill_buffer"), [Var("arr"), Var("n")]), Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")])))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("n", Var({val: Some(Int)})), Int(100), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("fill_buffer"), [Var("arr"), Var("n")]), Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")])))))
// [Knf] build_knf: Int(100)
// [Knf] build_knf: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("fill_buffer"), [Var("arr"), Var("n")]), Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")]))))
// [Knf] build_knf: Array(Var("n"), Int(0))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("fill_buffer"), [Var("arr"), Var("n")]), Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")])))
// [Knf] build_knf: App(Var("fill_buffer"), [Var("arr"), Var("n")])
// [Knf] build_knf: Var("fill_buffer")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")]))
// [Knf] build_knf: App(Var("isort"), [Var("arr"), Var("n")])
// [Knf] build_knf: Var("isort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: App(Var("print_array"), [Var("arr"), Var("n")])
// [Knf] build_knf: Var("print_array")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%1)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%2)])
// [Core] b5 control: Panic -> Jump(target=b7, args=[Unit])
// [Core] b6 control: Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), Insn(iref=%11)]) already set
// [Core] b4 control: Panic -> Branch(cond=Insn(iref=%4), t=b5, t_args=[], f=b6, f_args=[])
// [Core] b3 control: Panic -> Jump(target=b8, args=[Unit])
// [Core] b7 control: Panic -> Jump(target=b8, args=[BlockParam(bref=b7, bpref=$b.0)])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b8 control: Panic -> Return(args=[BlockParam(bref=b8, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[FnParam(fref=f2, fpref=$f.0), FnParam(fref=f2, fpref=$f.1)]) already set
// [Core] b11 control: Panic -> Jump(target=b13, args=[Unit])
// [Core] b12 control: Jump(target=b10, args=[Insn(iref=%7)]) already set
// [Core] b10 control: Panic -> Branch(cond=Insn(iref=%3), t=b11, t_args=[], f=b12, f_args=[])
// [Core] b13 control: Panic -> Return(args=[BlockParam(bref=b13, bpref=$b.0)])
// [Core] b7 control: Jump(target=b9, args=[Int32(val=0)]) already set
// [Core] b8 control: Jump(target=b6, args=[Insn(iref=%9)]) already set
// [Core] b6 control: Panic -> Branch(cond=Insn(iref=%2), t=b7, t_args=[], f=b8, f_args=[])
// [Core] b14 control: Panic -> Return(args=[BlockParam(bref=b14, bpref=$b.0)])
// [Core] b3 control: Jump(target=b5, args=[Int32(val=1)]) already set
// [Core] b4 control: Jump(target=b2, args=[Insn(iref=%13), Insn(iref=%11)]) already set
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b15 control: Panic -> Return(args=[BlockParam(bref=b15, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[Int32(val=0), Int32(val=12345)]) already set
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl modulo.368
// [Main]   .type modulo.368, @function
// [Main] # leaf true
// [Main] modulo.368:
// [Main] .modulo.368_0:
// [Main]   div a2, a0, a1
// [Main]   mul a1, a2, a1
// [Main]   sub a0, a0, a1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main.369
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.369
// [Main]   .type main.369, @function
// [Main] # leaf false
// [Main] main.369:
// [Main] .main.369_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   addi s1, s11, -400
// [Main]   andi s11, s1, -8
// [Main]   li a0, 100
// [Main]   mv a1, a0
// [Main]   mv s0, zero
// [Main]   li a0, 12345
// [Main]   mv a1, a0
// [Main] 
// [Main] .main.369_2:
// [Main]   li a0, 100
// [Main]   beq s0, a0, .main.369_3
// [Main] 
// [Main] .main.369_4:
// [Main]   mv a0, a1
// [Main]   call random.367
// [Main]   li a1, 65537
// [Main]   call modulo.368
// [Main]   slliw a1, s0, 2
// [Main]   add a1, s1, a1
// [Main]   sw a0, 0(a1)
// [Main]   addi a1, s0, 1
// [Main]   mv s0, a1
// [Main]   mv a1, a0
// [Main]   j .main.369_2
// [Main] 
// [Main] .main.369_3:
// [Main]   li a0, 1
// [Main]   mv s0, a0
// [Main] 
// [Main] .main.369_6:
// [Main]   li a0, 100
// [Main]   beq s0, a0, .main.369_7
// [Main] 
// [Main] .main.369_8:
// [Main]   mv a0, s1
// [Main]   mv a1, s0
// [Main]   call insert.370
// [Main]   addi a0, s0, 1
// [Main]   mv s0, a0
// [Main]   j .main.369_6
// [Main] 
// [Main] .main.369_7:
// [Main]   mv s0, zero
// [Main] 
// [Main] .main.369_10:
// [Main]   li a0, 100
// [Main]   beq s0, a0, .main.369_11
// [Main] 
// [Main] .main.369_12:
// [Main]   slliw a0, s0, 2
// [Main]   add a0, s1, a0
// [Main]   lw a0, 0(a0)
// [Main]   call minimbt_print_int
// [Main]   li a0, 32
// [Main]   call minimbt_print_char
// [Main]   addi a0, s0, 1
// [Main]   mv s0, a0
// [Main]   j .main.369_10
// [Main] 
// [Main] .main.369_11:
// [Main]   mv a0, zero
// [Main] 
// [Main] .main.369_13:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl random.367
// [Main]   .type random.367, @function
// [Main] # leaf true
// [Main] random.367:
// [Main] .random.367_0:
// [Main]   li a1, 75
// [Main]   mul a0, a0, a1
// [Main]   addi a0, a0, 74
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl insert.370
// [Main]   .type insert.370, @function
// [Main] # leaf true
// [Main] insert.370:
// [Main] .insert.370_0:
// [Main]   mv a2, a0
// [Main]   mv a0, a1
// [Main]   mv a1, a2
// [Main]   mv a2, a0
// [Main] 
// [Main] .insert.370_2:
// [Main]   beq a2, zero, .insert.370_3
// [Main] 
// [Main] .insert.370_4:
// [Main]   addi a0, a2, -1
// [Main]   slliw a0, a0, 2
// [Main]   add a0, a1, a0
// [Main]   lw a0, 0(a0)
// [Main]   slliw a3, a2, 2
// [Main]   add a3, a1, a3
// [Main]   lw a3, 0(a3)
// [Main]   bge a3, a0, .insert.370_5
// [Main] 
// [Main] .insert.370_6:
// [Main]   slliw a0, a2, 2
// [Main]   add a0, a1, a0
// [Main]   lw a0, 0(a0)
// [Main]   addi a3, a2, -1
// [Main]   slliw a4, a3, 2
// [Main]   add a4, a1, a4
// [Main]   lw a4, 0(a4)
// [Main]   slliw a2, a2, 2
// [Main]   add a2, a1, a2
// [Main]   sw a4, 0(a2)
// [Main]   slliw a2, a3, 2
// [Main]   add a2, a1, a2
// [Main]   sw a0, 0(a2)
// [Main]   mv a2, a3
// [Main]   j .insert.370_2
// [Main] 
// [Main] .insert.370_3:
// [Main]   mv a0, zero
// [Main] 
// [Main] .insert.370_8:
// [Main]   ret
// [Main] 
// [Main] .insert.370_5:
// [Main]   mv a0, zero
// [Main] 
// [Main] .insert.370_7:
// [Main]   j .insert.370_8
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function modulo.368
// [Wasm] Lowering insn Op(ty=Int32, op=Div, args=[FnParam(fref=f1, fpref=$f.0), FnParam(fref=f1, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%0), FnParam(fref=f1, fpref=$f.1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f1, fpref=$f.0), Insn(iref=%1)])
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function modulo.368 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f3, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [Wasm] Lowering function insert.370
// [Wasm] Lowering control Return(args=[BlockParam(bref=b8, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b8, args=[Unit])
// [Wasm] Lowering control Jump(target=b8, args=[BlockParam(bref=b7, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b7, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b2, bpref=$b.0), offset=BlockParam(bref=b2, bpref=$b.1), width=@32))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b2, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b2, bpref=$b.0), offset=Insn(iref=%6), width=@32))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b2, bpref=$b.0), offset=BlockParam(bref=b2, bpref=$b.1), width=@32), val=Insn(iref=%7))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b2, bpref=$b.0), offset=Insn(iref=%6), width=@32), val=Insn(iref=%5))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), Insn(iref=%6)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b2, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b2, bpref=$b.0), offset=Insn(iref=%1), width=@32))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b2, bpref=$b.0), offset=BlockParam(bref=b2, bpref=$b.1), width=@32))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%2), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Branch(cond=Insn(iref=%4), t=b5, t_args=[], f=b6, f_args=[])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b2, bpref=$b.1), Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b1, args=[FnParam(fref=f2, fpref=$f.0), FnParam(fref=f2, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function insert.370 to wasm
// [Wasm] Lowering function main.369
// [Wasm] Lowering control Return(args=[BlockParam(bref=b13, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b13, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=Mem(fref=f3, mref=m0), offset=BlockParam(bref=b10, bpref=$b.0), width=@32))
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Int32(val=32)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b10, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Jump(target=b10, args=[Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b10, bpref=$b.0), Int32(val=100)])
// [Wasm] Get Local name BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b11, t_args=[], f=b12, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b9, args=[Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Lowering insn Call(ty=Unit, f=f2, args=[Mem(fref=f3, mref=m0), BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b6, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering control Jump(target=b6, args=[Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b6, bpref=$b.0), Int32(val=100)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b7, t_args=[], f=b8, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Jump(target=b5, args=[Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering insn Call(ty=Int32, f=f0, args=[BlockParam(bref=b2, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Call(ty=Int32, f=f1, args=[Insn(iref=%10), Int32(val=65537)])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=Mem(fref=f3, mref=m0), offset=BlockParam(bref=b2, bpref=$b.0), width=@32), val=Insn(iref=%11))
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering control Jump(target=b2, args=[Insn(iref=%13), Insn(iref=%11)])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=100)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Lowering control Jump(target=b1, args=[Int32(val=0), Int32(val=12345)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Local BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function main.369 to wasm
// [Wasm] Lowering function random.367
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[FnParam(fref=f0, fpref=$f.0), Int32(val=75)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Int32(val=74)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Return(args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function random.367 to wasm
// [KnfOpt] func_tre: random.1 false
// [KnfOpt] func_tre: modulo.6 false
// [KnfOpt] func_tre: fill_buffer.11 false
// [KnfOpt] func_tre: aux.14 true
// [KnfOpt] func_tre: isort.25 false
// [KnfOpt] func_tre: insert.28 true
// [KnfOpt] func_tre: aux.46 true
// [KnfOpt] func_tre: print_array.52 false
// [KnfOpt] func_tre: aux.55 true
// [KnfOpt] func_tre: main.64 false
// [KnfOpt] freq: {random.1: Once, modulo.6: Once, fill_buffer.11: Once, aux.14: Once, aux.70: Many(2), isort.25: Once, insert.28: Once, insert.79: Many(2), aux.46: Once, aux.97: Many(2), print_array.52: Once, aux.55: Once, aux.102: Many(2), main.64: Once}
// [KnfOpt] Knf inline Some(modulo) let res.75: Int = Unit
// [KnfOpt] let _76: Unit = Put arr.12[i.71] = res.75
// [KnfOpt] let _77: Int = Int(1)
// [KnfOpt] let _78: Int = Add(i.71, _77)
// [KnfOpt] Jump(aux.70, [_78, res.75, ])
// [KnfOpt] Knf inline Some(random) let new_state.73: Int = Unit
// [KnfOpt] let _74: Int = Int(65537)
// [KnfOpt] let q.110: Int = Div(new_state.73, _74)
// [KnfOpt] let _111: Int = Mul(q.110, _74)
// [KnfOpt] let res.75: Int = Sub(new_state.73, _111)
// [KnfOpt] let _76: Unit = Put arr.12[i.71] = res.75
// [KnfOpt] let _77: Int = Int(1)
// [KnfOpt] let _78: Int = Add(i.71, _77)
// [KnfOpt] Jump(aux.70, [_78, res.75, ])
// [KnfOpt] Knf inline Some(modulo) let res.75: Int = Unit
// [KnfOpt] let _76: Unit = Put arr.12[i.71] = res.75
// [KnfOpt] let _77: Int = Int(1)
// [KnfOpt] let _78: Int = Add(i.71, _77)
// [KnfOpt] Jump(aux.70, [_78, res.75, ])
// [KnfOpt] Knf inline Some(aux) Unit
// [KnfOpt] Knf inline Some(insert) let _99: Unit = Unit
// [KnfOpt] let _100: Int = Int(1)
// [KnfOpt] let _101: Int = Add(i.98, _100)
// [KnfOpt] Jump(aux.97, [_101, ])
// [KnfOpt] Knf inline Some(aux) Unit
// [KnfOpt] Knf inline Some(aux) Unit
// [KnfOpt] Knf inline Some(print_array) Unit
// [KnfOpt] Knf inline Some(isort) let _69: Unit = Unit
// [KnfOpt] let rec aux.157: Unit = (i.158: Int) {
// [KnfOpt]   let join aux.159: Unit = (i.160: Int) {
// [KnfOpt]     if (i.160 == n.65) then {
// [KnfOpt]       Unit
// [KnfOpt]     } else {
// [KnfOpt]       let _161: Int = Get arr.67[i.160]
// [KnfOpt]       let _162: Unit = ExtApply(minimbt_print_int, [_161, ])
// [KnfOpt]       let _163: Int = Int(32)
// [KnfOpt]       let _164: Unit = ExtApply(minimbt_print_char, [_163, ])
// [KnfOpt]       let _165: Int = Int(1)
// [KnfOpt]       let _166: Int = Add(i.160, _165)
// [KnfOpt]       Jump(aux.159, [_166, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(aux.159, [i.158, ])
// [KnfOpt] }
// [KnfOpt] let _167: Int = Int(0)
// [KnfOpt] Apply(aux.157, [_167, ])
// [KnfOpt] Knf inline Some(print_array) Unit
// [KnfOpt] Knf inline Some(fill_buffer) let _68: Unit = Unit
// [KnfOpt] let rec insert.168: Unit = (arr.169: Array(Int), i.170: Int) {
// [KnfOpt]   let join insert.171: Unit = (arr.172: Array(Int), i.173: Int) {
// [KnfOpt]     let _174: Int = Int(0)
// [KnfOpt]     if (i.173 == _174) then {
// [KnfOpt]       Unit
// [KnfOpt]     } else {
// [KnfOpt]       let _175: Int = Int(1)
// [KnfOpt]       let _176: Int = Sub(i.173, _175)
// [KnfOpt]       let _177: Int = Get arr.172[_176]
// [KnfOpt]       let _178: Int = Get arr.172[i.173]
// [KnfOpt]       if (_177 <= _178) then {
// [KnfOpt]         Unit
// [KnfOpt]       } else {
// [KnfOpt]         let tmp.179: Int = Get arr.172[i.173]
// [KnfOpt]         let _180: Int = Int(1)
// [KnfOpt]         let _181: Int = Sub(i.173, _180)
// [KnfOpt]         let _182: Int = Get arr.172[_181]
// [KnfOpt]         let _183: Unit = Put arr.172[i.173] = _182
// [KnfOpt]         let _184: Int = Int(1)
// [KnfOpt]         let _185: Int = Sub(i.173, _184)
// [KnfOpt]         let _186: Unit = Put arr.172[_185] = tmp.179
// [KnfOpt]         let _187: Int = Int(1)
// [KnfOpt]         let _188: Int = Sub(i.173, _187)
// [KnfOpt]         Jump(insert.171, [arr.172, _188, ])
// [KnfOpt]       }
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(insert.171, [arr.169, i.170, ])
// [KnfOpt] }
// [KnfOpt] let rec aux.189: Unit = (i.190: Int) {
// [KnfOpt]   let join aux.191: Unit = (i.192: Int) {
// [KnfOpt]     if (i.192 == n.65) then {
// [KnfOpt]       Unit
// [KnfOpt]     } else {
// [KnfOpt]       let _193: Unit = Apply(insert.168, [arr.67, i.192, ])
// [KnfOpt]       let _194: Int = Int(1)
// [KnfOpt]       let _195: Int = Add(i.192, _194)
// [KnfOpt]       Jump(aux.191, [_195, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(aux.191, [i.190, ])
// [KnfOpt] }
// [KnfOpt] let _196: Int = Int(1)
// [KnfOpt] let _69: Unit = Apply(aux.189, [_196, ])
// [KnfOpt] let rec aux.197: Unit = (i.198: Int) {
// [KnfOpt]   let join aux.199: Unit = (i.200: Int) {
// [KnfOpt]     if (i.200 == n.65) then {
// [KnfOpt]       Unit
// [KnfOpt]     } else {
// [KnfOpt]       let _201: Int = Get arr.67[i.200]
// [KnfOpt]       let _202: Unit = ExtApply(minimbt_print_int, [_201, ])
// [KnfOpt]       let _203: Int = Int(32)
// [KnfOpt]       let _204: Unit = ExtApply(minimbt_print_char, [_203, ])
// [KnfOpt]       let _205: Int = Int(1)
// [KnfOpt]       let _206: Int = Add(i.200, _205)
// [KnfOpt]       Jump(aux.199, [_206, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(aux.199, [i.198, ])
// [KnfOpt] }
// [KnfOpt] let _207: Int = Int(0)
// [KnfOpt] Apply(aux.197, [_207, ])
// [KnfOpt] Knf inline Some(print_array) Unit
// [KnfOpt] Knf inline Some(isort) let _69: Unit = Unit
// [KnfOpt] let rec aux.222: Unit = (i.223: Int) {
// [KnfOpt]   let join aux.224: Unit = (i.225: Int) {
// [KnfOpt]     if (i.225 == n.65) then {
// [KnfOpt]       Unit
// [KnfOpt]     } else {
// [KnfOpt]       let _226: Int = Get arr.67[i.225]
// [KnfOpt]       let _227: Unit = ExtApply(minimbt_print_int, [_226, ])
// [KnfOpt]       let _228: Int = Int(32)
// [KnfOpt]       let _229: Unit = ExtApply(minimbt_print_char, [_228, ])
// [KnfOpt]       let _230: Int = Int(1)
// [KnfOpt]       let _231: Int = Add(i.225, _230)
// [KnfOpt]       Jump(aux.224, [_231, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(aux.224, [i.223, ])
// [KnfOpt] }
// [KnfOpt] let _232: Int = Int(0)
// [KnfOpt] Apply(aux.222, [_232, ])
// [KnfOpt] Knf inline Some(print_array) Unit
// [KnfOpt] freq: {random.1: Once, modulo.6: Once, main.64: Once, aux.208: Once, aux.211: Many(2), insert.233: Once, insert.236: Many(2), aux.254: Once, aux.256: Many(2), aux.262: Once, aux.264: Many(2)}
// [KnfOpt] Knf inline Some(modulo) let res.216: Int = Unit
// [KnfOpt] let _217: Unit = Put arr.67[i.212] = res.216
// [KnfOpt] let _218: Int = Int(1)
// [KnfOpt] let _219: Int = Add(i.212, _218)
// [KnfOpt] Jump(aux.211, [_219, res.216, ])
// [KnfOpt] Knf inline Some(random) let new_state.214: Int = Unit
// [KnfOpt] let _215: Int = Int(65537)
// [KnfOpt] let q.273: Int = Div(new_state.214, _215)
// [KnfOpt] let _274: Int = Mul(q.273, _215)
// [KnfOpt] let res.216: Int = Sub(new_state.214, _274)
// [KnfOpt] let _217: Unit = Put arr.67[i.212] = res.216
// [KnfOpt] let _218: Int = Int(1)
// [KnfOpt] let _219: Int = Add(i.212, _218)
// [KnfOpt] Jump(aux.211, [_219, res.216, ])
// [KnfOpt] Knf inline Some(modulo) let res.216: Int = Unit
// [KnfOpt] let _217: Unit = Put arr.67[i.212] = res.216
// [KnfOpt] let _218: Int = Int(1)
// [KnfOpt] let _219: Int = Add(i.212, _218)
// [KnfOpt] Jump(aux.211, [_219, res.216, ])
// [KnfOpt] Knf inline Some(insert) let _258: Unit = Unit
// [KnfOpt] let _259: Int = Int(1)
// [KnfOpt] let _260: Int = Add(i.257, _259)
// [KnfOpt] Jump(aux.256, [_260, ])
// [KnfOpt] Knf inline Some(aux) Unit
// [KnfOpt] Knf inline Some(aux) let _69: Unit = Unit
// [KnfOpt] let rec aux.262: Unit = (i.263: Int) {
// [KnfOpt]   let join aux.264: Unit = (i.265: Int) {
// [KnfOpt]     if (i.265 == n.65) then {
// [KnfOpt]       Unit
// [KnfOpt]     } else {
// [KnfOpt]       let _266: Int = Get arr.67[i.265]
// [KnfOpt]       let _267: Unit = ExtApply(minimbt_print_int, [_266, ])
// [KnfOpt]       let _268: Int = Int(32)
// [KnfOpt]       let _269: Unit = ExtApply(minimbt_print_char, [_268, ])
// [KnfOpt]       let _270: Int = Int(1)
// [KnfOpt]       let _271: Int = Add(i.265, _270)
// [KnfOpt]       Jump(aux.264, [_271, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(aux.264, [i.263, ])
// [KnfOpt] }
// [KnfOpt] let _272: Int = Int(0)
// [KnfOpt] let join aux.298: Unit = (i.299: Int) {
// [KnfOpt]   if (i.299 == n.65) then {
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _300: Int = Get arr.67[i.299]
// [KnfOpt]     let _301: Unit = ExtApply(minimbt_print_int, [_300, ])
// [KnfOpt]     let _302: Int = Int(32)
// [KnfOpt]     let _303: Unit = ExtApply(minimbt_print_char, [_302, ])
// [KnfOpt]     let _304: Int = Int(1)
// [KnfOpt]     let _305: Int = Add(i.299, _304)
// [KnfOpt]     Jump(aux.298, [_305, ])
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Jump(aux.298, [_272, ])
// [KnfOpt] Knf inline Some(aux) Unit
// [KnfOpt] Knf inline Some(aux) let _68: Unit = Unit
// [KnfOpt] let rec insert.233: Unit = (arr.234: Array(Int), i.235: Int) {
// [KnfOpt]   let join insert.236: Unit = (arr.237: Array(Int), i.238: Int) {
// [KnfOpt]     let _239: Int = Int(0)
// [KnfOpt]     if (i.238 == _239) then {
// [KnfOpt]       Unit
// [KnfOpt]     } else {
// [KnfOpt]       let _240: Int = Int(1)
// [KnfOpt]       let _241: Int = Sub(i.238, _240)
// [KnfOpt]       let _242: Int = Get arr.237[_241]
// [KnfOpt]       let _243: Int = Get arr.237[i.238]
// [KnfOpt]       if (_242 <= _243) then {
// [KnfOpt]         Unit
// [KnfOpt]       } else {
// [KnfOpt]         let tmp.244: Int = Get arr.237[i.238]
// [KnfOpt]         let _245: Int = Int(1)
// [KnfOpt]         let _246: Int = Sub(i.238, _245)
// [KnfOpt]         let _247: Int = Get arr.237[_246]
// [KnfOpt]         let _248: Unit = Put arr.237[i.238] = _247
// [KnfOpt]         let _249: Int = Int(1)
// [KnfOpt]         let _250: Int = Sub(i.238, _249)
// [KnfOpt]         let _251: Unit = Put arr.237[_250] = tmp.244
// [KnfOpt]         let _252: Int = Int(1)
// [KnfOpt]         let _253: Int = Sub(i.238, _252)
// [KnfOpt]         Jump(insert.236, [arr.237, _253, ])
// [KnfOpt]       }
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(insert.236, [arr.234, i.235, ])
// [KnfOpt] }
// [KnfOpt] let rec aux.254: Unit = (i.255: Int) {
// [KnfOpt]   let join aux.256: Unit = (i.257: Int) {
// [KnfOpt]     if (i.257 == n.65) then {
// [KnfOpt]       Unit
// [KnfOpt]     } else {
// [KnfOpt]       let join insert.280: Unit = (arr.281: Array(Int), i.282: Int) {
// [KnfOpt]         let _283: Int = Int(0)
// [KnfOpt]         if (i.282 == _283) then {
// [KnfOpt]           let _258: Unit = Unit
// [KnfOpt]           let _259: Int = Int(1)
// [KnfOpt]           let _260: Int = Add(i.257, _259)
// [KnfOpt]           Jump(aux.256, [_260, ])
// [KnfOpt]         } else {
// [KnfOpt]           let _284: Int = Int(1)
// [KnfOpt]           let _285: Int = Sub(i.282, _284)
// [KnfOpt]           let _286: Int = Get arr.281[_285]
// [KnfOpt]           let _287: Int = Get arr.281[i.282]
// [KnfOpt]           if (_286 <= _287) then {
// [KnfOpt]             let _258: Unit = Unit
// [KnfOpt]             let _259: Int = Int(1)
// [KnfOpt]             let _260: Int = Add(i.257, _259)
// [KnfOpt]             Jump(aux.256, [_260, ])
// [KnfOpt]           } else {
// [KnfOpt]             let tmp.288: Int = Get arr.281[i.282]
// [KnfOpt]             let _289: Int = Int(1)
// [KnfOpt]             let _290: Int = Sub(i.282, _289)
// [KnfOpt]             let _291: Int = Get arr.281[_290]
// [KnfOpt]             let _292: Unit = Put arr.281[i.282] = _291
// [KnfOpt]             let _293: Int = Int(1)
// [KnfOpt]             let _294: Int = Sub(i.282, _293)
// [KnfOpt]             let _295: Unit = Put arr.281[_294] = tmp.288
// [KnfOpt]             let _296: Int = Int(1)
// [KnfOpt]             let _297: Int = Sub(i.282, _296)
// [KnfOpt]             Jump(insert.280, [arr.281, _297, ])
// [KnfOpt]           }
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]       Jump(insert.280, [arr.67, i.257, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(aux.256, [i.255, ])
// [KnfOpt] }
// [KnfOpt] let _261: Int = Int(1)
// [KnfOpt] let join aux.306: Unit = (i.307: Int) {
// [KnfOpt]   if (i.307 == n.65) then {
// [KnfOpt]     let _69: Unit = Unit
// [KnfOpt]     let rec aux.262: Unit = (i.263: Int) {
// [KnfOpt]       let join aux.264: Unit = (i.265: Int) {
// [KnfOpt]         if (i.265 == n.65) then {
// [KnfOpt]           Unit
// [KnfOpt]         } else {
// [KnfOpt]           let _266: Int = Get arr.67[i.265]
// [KnfOpt]           let _267: Unit = ExtApply(minimbt_print_int, [_266, ])
// [KnfOpt]           let _268: Int = Int(32)
// [KnfOpt]           let _269: Unit = ExtApply(minimbt_print_char, [_268, ])
// [KnfOpt]           let _270: Int = Int(1)
// [KnfOpt]           let _271: Int = Add(i.265, _270)
// [KnfOpt]           Jump(aux.264, [_271, ])
// [KnfOpt]         }
// [KnfOpt]       }
// [KnfOpt]       Jump(aux.264, [i.263, ])
// [KnfOpt]     }
// [KnfOpt]     let _272: Int = Int(0)
// [KnfOpt]     let join aux.308: Unit = (i.309: Int) {
// [KnfOpt]       if (i.309 == n.65) then {
// [KnfOpt]         Unit
// [KnfOpt]       } else {
// [KnfOpt]         let _310: Int = Get arr.67[i.309]
// [KnfOpt]         let _311: Unit = ExtApply(minimbt_print_int, [_310, ])
// [KnfOpt]         let _312: Int = Int(32)
// [KnfOpt]         let _313: Unit = ExtApply(minimbt_print_char, [_312, ])
// [KnfOpt]         let _314: Int = Int(1)
// [KnfOpt]         let _315: Int = Add(i.309, _314)
// [KnfOpt]         Jump(aux.308, [_315, ])
// [KnfOpt]       }
// [KnfOpt]     }
// [KnfOpt]     Jump(aux.308, [_272, ])
// [KnfOpt]   } else {
// [KnfOpt]     let _316: Unit = Apply(insert.233, [arr.67, i.307, ])
// [KnfOpt]     let _317: Int = Int(1)
// [KnfOpt]     let _318: Int = Add(i.307, _317)
// [KnfOpt]     Jump(aux.306, [_318, ])
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Jump(aux.306, [_261, ])
// [KnfOpt] Knf inline Some(insert) let _258: Unit = Unit
// [KnfOpt] let _259: Int = Int(1)
// [KnfOpt] let _260: Int = Add(i.257, _259)
// [KnfOpt] Jump(aux.256, [_260, ])
// [KnfOpt] Knf inline Some(aux) Unit
// [KnfOpt] Knf inline Some(aux) let _69: Unit = Unit
// [KnfOpt] let rec aux.262: Unit = (i.263: Int) {
// [KnfOpt]   let join aux.264: Unit = (i.265: Int) {
// [KnfOpt]     if (i.265 == n.65) then {
// [KnfOpt]       Unit
// [KnfOpt]     } else {
// [KnfOpt]       let _266: Int = Get arr.67[i.265]
// [KnfOpt]       let _267: Unit = ExtApply(minimbt_print_int, [_266, ])
// [KnfOpt]       let _268: Int = Int(32)
// [KnfOpt]       let _269: Unit = ExtApply(minimbt_print_char, [_268, ])
// [KnfOpt]       let _270: Int = Int(1)
// [KnfOpt]       let _271: Int = Add(i.265, _270)
// [KnfOpt]       Jump(aux.264, [_271, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(aux.264, [i.263, ])
// [KnfOpt] }
// [KnfOpt] let _272: Int = Int(0)
// [KnfOpt] let join aux.340: Unit = (i.341: Int) {
// [KnfOpt]   if (i.341 == n.65) then {
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _342: Int = Get arr.67[i.341]
// [KnfOpt]     let _343: Unit = ExtApply(minimbt_print_int, [_342, ])
// [KnfOpt]     let _344: Int = Int(32)
// [KnfOpt]     let _345: Unit = ExtApply(minimbt_print_char, [_344, ])
// [KnfOpt]     let _346: Int = Int(1)
// [KnfOpt]     let _347: Int = Add(i.341, _346)
// [KnfOpt]     Jump(aux.340, [_347, ])
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Jump(aux.340, [_272, ])
// [KnfOpt] Knf inline Some(aux) Unit
// [KnfOpt] Numbers of let rec: 4 4 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f1: Once, f8: Once, f2: Once, f3: Once, f0: Once})
// [CoreOpt] LVN subst Insn(iref=%9) with Insn(iref=%6)
// [CoreOpt] LVN subst Insn(iref=%11) with Insn(iref=%6)
