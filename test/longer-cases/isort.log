// [Asm] pre_assigned_registers: Insn(iref=%2) -> v5, Insn(iref=%1) -> v4, Insn(iref=%3) -> v6, Self(fref=f6) -> v0, Mem(fref=f6, mref=m0) -> v2, Insn(iref=%0) -> v3
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v16, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: [v16]
// [Asm] defined: a1 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v12, zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0, v2]
// [Asm] move_origin: [v12]
// [Asm] defined: a1 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v2, a1, zero, a0, v13]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, zero, a0, v2]
// [Asm] move_origin: [v13]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [a2, a1, a3, zero, a0, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a3 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [zero, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v2]
// [Asm] move_origin: [v9]
// [Asm] defined: a0 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v10, zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0, v2]
// [Asm] move_origin: [v10]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, zero, a0, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v7, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0, v2]
// [Asm] move_origin: [v7]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.127"];
// [Asm]   r0 [label="v2 ← s0", color=green];
// [Asm]   r20 [label="v9 ← a0", color=green];
// [Asm]   r23 [label="v7 ← a1", color=green];
// [Asm]   r3 [label="v16 ← a0", color=green];
// [Asm]   r9 [label="a3", color=blue];
// [Asm]   r6 [label="v12 ← a1", color=green];
// [Asm]   r13 [label="a7", color=blue];
// [Asm]   r4 [label="a1", color=blue];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r11 [label="a5", color=blue];
// [Asm]   r7 [label="v13 ← a2", color=green];
// [Asm]   r10 [label="a4", color=blue];
// [Asm]   r22 [label="v5 ← a0", color=green];
// [Asm]   r14 [label="t0", color=blue];
// [Asm]   r8 [label="a2", color=blue];
// [Asm]   r5 [label="a0", color=blue];
// [Asm]   r15 [label="t1", color=blue];
// [Asm]   r24 [label="v6 ← a0", color=green];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r16 [label="t2", color=blue];
// [Asm]   r18 [label="t4", color=blue];
// [Asm]   r19 [label="v4 ← a0", color=green];
// [Asm]   r17 [label="t3", color=blue];
// [Asm]   r21 [label="v10 ← a1", color=green];
// [Asm]   r12 [label="a6", color=blue];
// [Asm]   r0 -- r15;
// [Asm]   r0 -- r13;
// [Asm]   r5 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r5;
// [Asm]   r1 -- r8;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r10;
// [Asm]   r1 -- r4;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r23;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r8 -- r9;
// [Asm]   r1 -- r18;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r22;
// [Asm]   r1 -- r10;
// [Asm]   r5 -- r18;
// [Asm]   r0 -- r14;
// [Asm]   r0 -- r21;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r0 -- r23;
// [Asm]   r0 -- r22;
// [Asm]   r1 -- r16;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r0 -- r16;
// [Asm]   r0 -- r19;
// [Asm]   r0 -- r6;
// [Asm]   r1 -- r9;
// [Asm]   r5 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r9;
// [Asm]   r0 -- r3;
// [Asm]   r1 -- r21;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r2;
// [Asm]   r0 -- r1;
// [Asm]   r4 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r1 -- r11;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r0 -- r12;
// [Asm]   r5 -- r14;
// [Asm]   r0 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r20;
// [Asm]   r4 -- r9;
// [Asm]   r5 -- r15;
// [Asm]   r0 -- r18;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v2-> 1:zero-> 2:s11-> 3:v16-> 4:a1-> 5:a0-> 7:v13-> 8:a2-> 9:a3-> 6:v12-> 10:a4-> 11:a5-> 12:a6-> 13:a7-> 14:t0-> 15:t1-> 16:t2-> 17:t3-> 18:t4-> 21:v10-> 19:v4-> 20:v9-> 22:v5-> 23:v7-> 24:v6"
// [Asm]   comment = "v2<-s0;v9<-a0;v7<-a1;v16<-a0;v12<-a1;v13<-a2;v5<-a0;v6<-a0;v4<-a0;v10<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.127"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v2, s11, -400 ->   addi s0, s11, -400
// [Asm] subst   andi s11, v2, -8 ->   andi s11, s0, -8
// [Asm] subst   li v16, 100 ->   li a0, 100
// [Asm] subst   mv a1, v16 ->   mv a1, a0
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   li v12, 12345 ->   li a1, 12345
// [Asm] subst   li v13, 100 ->   li a2, 100
// [Asm] subst   mv a3, v2 ->   mv a3, s0
// [Asm] subst   call aux.128 ->   call aux.128
// [Asm] subst   li v9, 1 ->   li a0, 1
// [Asm] subst   li v10, 100 ->   li a1, 100
// [Asm] subst   mv a2, v2 ->   mv a2, s0
// [Asm] subst   call aux.130 ->   call aux.130
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   li v7, 100 ->   li a1, 100
// [Asm] subst   mv a2, v2 ->   mv a2, s0
// [Asm] subst   call aux.131 ->   call aux.131
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: BlockParam(bref=b12, bpref=$b.0) -> v21, FnParam(fref=f4, fpref=$f.0) -> v2, BlockParam(bref=b7, bpref=$b.1) -> v10, BlockParam(bref=b7, bpref=$b.0) -> v9, BlockParam(bref=b3, bpref=$b.0) -> v25, Insn(iref=%9) -> v17, Insn(iref=%8) -> v16, Insn(iref=%10) -> v18, BlockParam(bref=b0, bpref=$b.0) -> v5, BlockParam(bref=b0, bpref=$b.1) -> v6, BlockParam(bref=b0, bpref=$b.2) -> v7, FnParam(fref=f4, fpref=$f.1) -> v3, Insn(iref=%5) -> v13, Insn(iref=%0) -> v8, Insn(iref=%4) -> v12, BlockParam(bref=b13, bpref=$b.0) -> v22, Insn(iref=%3) -> v11, Insn(iref=%13) -> v20, Insn(iref=%7) -> v15, BlockParam(bref=b6, bpref=$b.0) -> v23, FnParam(fref=f4, fpref=$f.2) -> v4, Insn(iref=%2) -> v24, Insn(iref=%11) -> v19, Self(fref=f4) -> v0, Insn(iref=%6) -> v14
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%5), Insn(iref=%6)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b7, bpref=$b.1), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1)])
// [Asm] defs: [v23]
// [Asm] live_set: [v5, v6, zero, v23, v7]
// [Asm] move_origin: [v22]
// [Asm] defined: v23 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v5, v6, zero, v22, v7]
// [Asm] move_origin: [zero]
// [Asm] defined: v22 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v25]
// [Asm] move_origin: [zero]
// [Asm] defined: v25 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v5, v6, zero, v22, v7]
// [Asm] move_origin: [v21]
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v22, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move_origin: [v3]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v4]
// [Asm] defined: v7 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v5, v10, zero, v7, v6, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v41]
// [Asm] live_set: [v5, v10, zero, v7, v41, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: [v42]
// [Asm] live_set: [v5, v10, zero, v42, v7, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v5, v10, zero, v13, v7, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v38]
// [Asm] live_set: [v5, v10, zero, v13, v7, v38, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v38 is X
// [Asm] defs: [v39]
// [Asm] live_set: [v5, v10, zero, v13, v7, v6, v9, v39]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v5, v14, v10, zero, v13, v7, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v10, zero, v9, v7]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v5, v6, v21, zero, v7]
// [Asm] move_origin: [zero]
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v10, zero, v9, v7]
// [Asm] move_origin: []
// [Asm] defs: [v35]
// [Asm] live_set: [v5, v10, zero, v7, v35, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v5, v10, zero, v7, v36, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v5, v16, v10, zero, v7, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v5, v16, v10, zero, v7, v6, v17, v9]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v5, v16, v10, zero, v7, v6, v17, v31, v9]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v5, v16, v10, zero, v7, v32, v6, v17, v9]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v5, v16, v18, v10, zero, v7, v6, v17, v9]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v29]
// [Asm] live_set: [v5, v16, v18, zero, v29, v7, v6, v17, v9]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [v30]
// [Asm] live_set: [v5, v16, v18, zero, v30, v7, v6, v17, v9]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v16, zero, v7, v6, v17, v9]
// [Asm] move_origin: []
// [Asm] defs: [v27]
// [Asm] live_set: [v5, v16, zero, v27, v7, v6, v17, v9]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v5, v16, zero, v7, v6, v17, v28, v9]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v6, v17, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v17, zero, v9, v7]
// [Asm] move_origin: [v9]
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v6, v10, zero, v9, v7]
// [Asm] move_origin: [v17]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v10, zero, v9, v7]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v5, v6, zero, v9, v7]
// [Asm] move_origin: [v7]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v6, v10, zero, v9, v7]
// [Asm] move_origin: [v5]
// [Asm] defined: v10 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v25]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v24]
// [Asm] live_set: [v6, v24, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v24]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v6]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux.130"];
// [Asm]   r0 [label="v23 ← a0", color=green];
// [Asm]   r33 [label="a0", color=blue];
// [Asm]   r9 [label="a1", color=blue];
// [Asm]   r26 [label="v31 ← a6", color=green];
// [Asm]   r6 [label="v25 ← a0", color=green];
// [Asm]   r13 [label="v10 ← a4", color=green];
// [Asm]   r4 [label="v7 ← a3", color=green];
// [Asm]   r29 [label="v29 ← a4", color=green];
// [Asm]   r7 [label="v2 ← a4", color=green];
// [Asm]   r10 [label="v3 ← a3", color=green];
// [Asm]   r8 [label="a2", color=blue];
// [Asm]   r5 [label="v22 ← a0", color=green];
// [Asm]   r32 [label="v28 ← a4", color=green];
// [Asm]   r15 [label="v41 ← a0", color=green];
// [Asm]   r24 [label="v16 ← a0", color=green];
// [Asm]   r31 [label="v27 ← a4", color=green];
// [Asm]   r17 [label="v13 ← a0", color=green];
// [Asm]   r12 [label="v12 ← a0", color=green];
// [Asm]   r20 [label="v14 ← a5", color=green];
// [Asm]   r23 [label="v36 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r27 [label="v32 ← a6", color=green];
// [Asm]   r1 [label="v5 ← a1", color=green];
// [Asm]   r28 [label="v18 ← a6", color=green];
// [Asm]   r11 [label="v4 ← a0", color=green];
// [Asm]   r34 [label="v24 ← a0", color=green];
// [Asm]   r22 [label="v35 ← a0", color=green];
// [Asm]   r14 [label="v9 ← a3", color=green];
// [Asm]   r30 [label="v30 ← a4", color=green];
// [Asm]   r25 [label="v17 ← a5", color=green];
// [Asm]   r2 [label="v6 ← a2", color=green];
// [Asm]   r16 [label="v42 ← a0", color=green];
// [Asm]   r18 [label="v38 ← a5", color=green];
// [Asm]   r19 [label="v39 ← a5", color=green];
// [Asm]   r21 [label="v21 ← a0", color=green];
// [Asm]   r2 -- r32;
// [Asm]   r2 -- r31;
// [Asm]   r25 -- r28;
// [Asm]   r14 -- r20;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r4 -- r34;
// [Asm]   r14 -- r16;
// [Asm]   r2 -- r15;
// [Asm]   r14 -- r27;
// [Asm]   r1 -- r30;
// [Asm]   r3 -- r16;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r28 -- r30;
// [Asm]   r24 -- r32;
// [Asm]   r3 -- r32;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r13 -- r28;
// [Asm]   r4 -- r22;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r31;
// [Asm]   r3 -- r34;
// [Asm]   r3 -- r5;
// [Asm]   r17 -- r19;
// [Asm]   r4 -- r31;
// [Asm]   r2 -- r34;
// [Asm]   r14 -- r30;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r31;
// [Asm]   r14 -- r28;
// [Asm]   r14 -- r19;
// [Asm]   r2 -- r25;
// [Asm]   r24 -- r31;
// [Asm]   r25 -- r29;
// [Asm]   r3 -- r30;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r25 -- r32;
// [Asm]   r3 -- r13;
// [Asm]   r7 -- r10;
// [Asm]   r4 -- r28;
// [Asm]   r2 -- r12;
// [Asm]   r24 -- r27;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r4 -- r29;
// [Asm]   r28 -- r29;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r27;
// [Asm]   r2 -- r13;
// [Asm]   r13 -- r18;
// [Asm]   r4 -- r25;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r13 -- r22;
// [Asm]   r14 -- r31;
// [Asm]   r3 -- r7;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r24;
// [Asm]   r7 -- r8;
// [Asm]   r24 -- r25;
// [Asm]   r14 -- r15;
// [Asm]   r14 -- r22;
// [Asm]   r2 -- r23;
// [Asm]   r17 -- r20;
// [Asm]   r14 -- r32;
// [Asm]   r4 -- r13;
// [Asm]   r13 -- r24;
// [Asm]   r17 -- r18;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r13 -- r15;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r26;
// [Asm]   r14 -- r18;
// [Asm]   r14 -- r17;
// [Asm]   r4 -- r23;
// [Asm]   r14 -- r26;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r23;
// [Asm]   r14 -- r23;
// [Asm]   r25 -- r27;
// [Asm]   r13 -- r26;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r22;
// [Asm]   r1 -- r32;
// [Asm]   r13 -- r16;
// [Asm]   r1 -- r15;
// [Asm]   r25 -- r30;
// [Asm]   r4 -- r20;
// [Asm]   r1 -- r13;
// [Asm]   r25 -- r26;
// [Asm]   r3 -- r28;
// [Asm]   r4 -- r30;
// [Asm]   r4 -- r18;
// [Asm]   r14 -- r29;
// [Asm]   r14 -- r24;
// [Asm]   r2 -- r11;
// [Asm]   r7 -- r9;
// [Asm]   r24 -- r28;
// [Asm]   r24 -- r29;
// [Asm]   r13 -- r25;
// [Asm]   r13 -- r20;
// [Asm]   r24 -- r26;
// [Asm]   r13 -- r19;
// [Asm]   r1 -- r28;
// [Asm]   r24 -- r30;
// [Asm]   r3 -- r22;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r4 -- r15;
// [Asm]   r12 -- r13;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r3;
// [Asm]   r13 -- r23;
// [Asm]   r4 -- r32;
// [Asm]   r14 -- r25;
// [Asm]   r1 -- r29;
// [Asm]   r13 -- r14;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r29;
// [Asm]   r3 -- r20;
// [Asm]   r7 -- r11;
// [Asm]   r25 -- r31;
// [Asm]   r1 -- r25;
// [Asm]   r13 -- r17;
// [Asm]   r2 -- r21;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r8 -- r10;
// [Asm]   r2 -- r30;
// [Asm]   r12 -- r14;
// [Asm]   r4 -- r17;
// [Asm]   r1 -- r14;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r4 -- r26;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   r13 -- r27;
// [Asm]   r4 -- r19;
// [Asm]   r1 -- r24;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:v23-> 1:v5-> 2:v6-> 3:zero-> 4:v7-> 5:v22-> 12:v12-> 13:v10-> 14:v9-> 15:v41-> 16:v42-> 17:v13-> 18:v38-> 19:v39-> 20:v14-> 22:v35-> 23:v36-> 24:v16-> 25:v17-> 26:v31-> 27:v32-> 28:v18-> 29:v29-> 30:v30-> 31:v27-> 32:v28-> 11:v4-> 10:v3-> 7:v2-> 21:v21-> 34:v24-> 8:a2-> 9:a1-> 6:v25-> 33:a0"
// [Asm]   comment = "v23<-a0;v31<-a6;v25<-a0;v10<-a4;v7<-a3;v29<-a4;v2<-a4;v3<-a3;v22<-a0;v28<-a4;v41<-a0;v16<-a0;v27<-a4;v13<-a0;v12<-a0;v14<-a5;v36<-a0;v32<-a6;v5<-a1;v18<-a6;v4<-a0;v24<-a0;v35<-a0;v9<-a3;v30<-a4;v17<-a5;v6<-a2;v42<-a0;v38<-a5;v39<-a5;v21<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux.130"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v22, zero ->   mv a0, zero
// [Asm] subst   mv v25, zero ->   mv a0, zero
// [Asm] subst   j .aux.130_13 ->   j .aux.130_13
// [Asm] subst   mv v2, a0 ->   mv a4, a0
// [Asm] subst   mv v3, a1 ->   mv a3, a1
// [Asm] subst   mv v4, a2 ->   mv a0, a2
// [Asm] subst   mv v5, v2 ->   mv a1, a4
// [Asm] subst   mv v6, v3 ->   mv a2, a3
// [Asm] subst   mv v7, v4 ->   mv a3, a0
// [Asm] subst   addi v12, v10, -1 ->   addi a0, a4, -1
// [Asm] subst   slliw v41, v12, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v42, v9, v41 ->   add a0, a3, a0
// [Asm] subst   lw v13, 0(v42) ->   lw a0, 0(a0)
// [Asm] subst   slliw v38, v10, 2 ->   slliw a5, a4, 2
// [Asm] subst   add v39, v9, v38 ->   add a5, a3, a5
// [Asm] subst   lw v14, 0(v39) ->   lw a5, 0(a5)
// [Asm] subst   bge v14, v13, .aux.130_10 ->   bge a5, a0, .aux.130_10
// [Asm] subst   mv v21, zero ->   mv a0, zero
// [Asm] subst   beq v10, zero, .aux.130_8 ->   beq a4, zero, .aux.130_8
// [Asm] subst   slliw v35, v10, 2 ->   slliw a0, a4, 2
// [Asm] subst   add v36, v9, v35 ->   add a0, a3, a0
// [Asm] subst   lw v16, 0(v36) ->   lw a0, 0(a0)
// [Asm] subst   addi v17, v10, -1 ->   addi a5, a4, -1
// [Asm] subst   slliw v31, v17, 2 ->   slliw a6, a5, 2
// [Asm] subst   add v32, v9, v31 ->   add a6, a3, a6
// [Asm] subst   lw v18, 0(v32) ->   lw a6, 0(a6)
// [Asm] subst   slliw v29, v10, 2 ->   slliw a4, a4, 2
// [Asm] subst   add v30, v9, v29 ->   add a4, a3, a4
// [Asm] subst   sw v18, 0(v30) ->   sw a6, 0(a4)
// [Asm] subst   slliw v27, v17, 2 ->   slliw a4, a5, 2
// [Asm] subst   add v28, v9, v27 ->   add a4, a3, a4
// [Asm] subst   sw v16, 0(v28) ->   sw a0, 0(a4)
// [Asm] subst   mv v10, v17 ->   mv a4, a5
// [Asm] subst   j .aux.130_7 ->   j .aux.130_7
// [Asm] subst   mv v10, v5 ->   mv a4, a1
// [Asm] subst   ret ->   ret
// [Asm] subst   bne v5, v6, .aux.130_2 ->   bne a1, a2, .aux.130_2
// [Asm] subst   addi v24, v5, 1 ->   addi a0, a1, 1
// [Asm] subst   mv v5, v24 ->   mv a1, a0
// [Asm] subst   j .aux.130_0 ->   j .aux.130_0
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v12, Insn(iref=%3) -> v11, FnParam(fref=f5, fpref=$f.0) -> v2, Self(fref=f5) -> v0, FnParam(fref=f5, fpref=$f.2) -> v4, BlockParam(bref=b3, bpref=$b.0) -> v13, Insn(iref=%2) -> v10, Insn(iref=%1) -> v9, BlockParam(bref=b0, bpref=$b.0) -> v5, BlockParam(bref=b0, bpref=$b.1) -> v6, BlockParam(bref=b0, bpref=$b.2) -> v7, Insn(iref=%0) -> v8, FnParam(fref=f5, fpref=$f.1) -> v3
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v13]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move_origin: [zero]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move_origin: [v3]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v4]
// [Asm] defined: v7 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v6, v5, v18, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v19, v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v6, v5, zero, v9, v7]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v9, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v6, v5, zero, a0, v7]
// [Asm] move_origin: [v9]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, v5, zero, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v10]
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v6, v5, v15, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v6, v5, zero, a0, v7]
// [Asm] move_origin: [v15]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, v5, zero, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v6, v12, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v12]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v6]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux.131"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="t1", color=blue];
// [Asm]   r23 [label="t4", color=blue];
// [Asm]   r3 [label="a2", color=blue];
// [Asm]   r9 [label="v6 ← s1", color=green];
// [Asm]   r26 [label="v11 ← a0", color=green];
// [Asm]   r27 [label="v12 ← a0", color=green];
// [Asm]   r6 [label="v3 ← a1", color=green];
// [Asm]   r13 [label="v9 ← a0", color=green];
// [Asm]   r4 [label="a1", color=blue];
// [Asm]   r1 [label="v13 ← a0", color=green];
// [Asm]   r11 [label="v18 ← a0", color=green];
// [Asm]   r7 [label="v4 ← a2", color=green];
// [Asm]   r10 [label="v7 ← s2", color=green];
// [Asm]   r22 [label="t3", color=blue];
// [Asm]   r14 [label="a3", color=blue];
// [Asm]   r8 [label="v5 ← s0", color=green];
// [Asm]   r5 [label="zero", color=blue];
// [Asm]   r15 [label="a4", color=blue];
// [Asm]   r24 [label="v10 ← a0", color=green];
// [Asm]   r25 [label="v15 ← a0", color=green];
// [Asm]   r2 [label="v2 ← a0", color=green];
// [Asm]   r16 [label="a5", color=blue];
// [Asm]   r18 [label="a7", color=blue];
// [Asm]   r19 [label="t0", color=blue];
// [Asm]   r21 [label="t2", color=blue];
// [Asm]   r17 [label="a6", color=blue];
// [Asm]   r12 [label="v19 ← a0", color=green];
// [Asm]   r5 -- r21;
// [Asm]   r9 -- r25;
// [Asm]   r5 -- r8;
// [Asm]   r9 -- r27;
// [Asm]   r5 -- r10;
// [Asm]   r10 -- r26;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r0 -- r17;
// [Asm]   r5 -- r18;
// [Asm]   r10 -- r13;
// [Asm]   r10 -- r19;
// [Asm]   r3 -- r9;
// [Asm]   r9 -- r26;
// [Asm]   r0 -- r23;
// [Asm]   r0 -- r22;
// [Asm]   r9 -- r17;
// [Asm]   r2 -- r7;
// [Asm]   r0 -- r16;
// [Asm]   r3 -- r5;
// [Asm]   r9 -- r18;
// [Asm]   r8 -- r12;
// [Asm]   r9 -- r14;
// [Asm]   r3 -- r8;
// [Asm]   r8 -- r24;
// [Asm]   r2 -- r6;
// [Asm]   r10 -- r20;
// [Asm]   r5 -- r6;
// [Asm]   r8 -- r17;
// [Asm]   r8 -- r16;
// [Asm]   r10 -- r18;
// [Asm]   r10 -- r12;
// [Asm]   r0 -- r9;
// [Asm]   r9 -- r23;
// [Asm]   r9 -- r12;
// [Asm]   r8 -- r23;
// [Asm]   r3 -- r10;
// [Asm]   r10 -- r22;
// [Asm]   r2 -- r5;
// [Asm]   r9 -- r20;
// [Asm]   r0 -- r10;
// [Asm]   r5 -- r7;
// [Asm]   r8 -- r22;
// [Asm]   r8 -- r21;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r8 -- r11;
// [Asm]   r10 -- r25;
// [Asm]   r0 -- r4;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r4 -- r9;
// [Asm]   r10 -- r17;
// [Asm]   r0 -- r18;
// [Asm]   r6 -- r7;
// [Asm]   r0 -- r15;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r20;
// [Asm]   r9 -- r15;
// [Asm]   r5 -- r23;
// [Asm]   r8 -- r19;
// [Asm]   r8 -- r9;
// [Asm]   r5 -- r13;
// [Asm]   r0 -- r14;
// [Asm]   r5 -- r19;
// [Asm]   r0 -- r21;
// [Asm]   r10 -- r27;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r8 -- r20;
// [Asm]   r8 -- r25;
// [Asm]   r0 -- r19;
// [Asm]   r10 -- r16;
// [Asm]   r6 -- r8;
// [Asm]   r9 -- r22;
// [Asm]   r9 -- r11;
// [Asm]   r8 -- r13;
// [Asm]   r5 -- r9;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r8;
// [Asm]   r10 -- r15;
// [Asm]   r9 -- r24;
// [Asm]   r8 -- r18;
// [Asm]   r10 -- r23;
// [Asm]   r10 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r8 -- r10;
// [Asm]   r9 -- r16;
// [Asm]   r5 -- r25;
// [Asm]   r8 -- r26;
// [Asm]   r5 -- r27;
// [Asm]   r9 -- r19;
// [Asm]   r4 -- r10;
// [Asm]   r9 -- r13;
// [Asm]   r0 -- r20;
// [Asm]   r2 -- r3;
// [Asm]   r10 -- r21;
// [Asm]   r10 -- r24;
// [Asm]   r5 -- r15;
// [Asm]   r9 -- r21;
// [Asm]   r10 -- r14;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:a0-> 3:a2-> 5:zero-> 8:v5-> 9:v6-> 10:v7-> 4:a1-> 14:a3-> 15:a4-> 16:a5-> 17:a6-> 18:a7-> 19:t0-> 20:t1-> 21:t2-> 22:t3-> 23:t4-> 11:v18-> 12:v19-> 13:v9-> 24:v10-> 25:v15-> 26:v11-> 2:v2-> 6:v3-> 7:v4-> 27:v12-> 1:v13"
// [Asm]   comment = "v6<-s1;v11<-a0;v12<-a0;v3<-a1;v9<-a0;v13<-a0;v18<-a0;v4<-a2;v7<-s2;v5<-s0;v10<-a0;v15<-a0;v2<-a0;v19<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux.131"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v13, zero ->   mv a0, zero
// [Asm] subst   mv v5, v2 ->   mv s0, a0
// [Asm] subst   mv v6, v3 ->   mv s1, a1
// [Asm] subst   mv v7, v4 ->   mv s2, a2
// [Asm] subst   slliw v18, v5, 2 ->   slliw a0, s0, 2
// [Asm] subst   add v19, v7, v18 ->   add a0, s2, a0
// [Asm] subst   lw v9, 0(v19) ->   lw a0, 0(a0)
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v15, 32 ->   li a0, 32
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   addi v12, v5, 1 ->   addi a0, s0, 1
// [Asm] subst   mv v5, v12 ->   mv s0, a0
// [Asm] subst   j .aux.131_0 ->   j .aux.131_0
// [Asm] subst   beq v5, v6, .aux.131_1 ->   beq s0, s1, .aux.131_1
// [Asm] pre_assigned_registers: BlockParam(bref=b7, bpref=$b.0) -> v17, BlockParam(bref=b3, bpref=$b.0) -> v20, Insn(iref=%9) -> v12, Self(fref=f2) -> v0, Insn(iref=%8) -> v11, BlockParam(bref=b0, bpref=$b.3) -> v9, BlockParam(bref=b0, bpref=$b.0) -> v6, BlockParam(bref=b0, bpref=$b.1) -> v7, BlockParam(bref=b0, bpref=$b.2) -> v8, Insn(iref=%5) -> v14, Insn(iref=%0) -> v10, Insn(iref=%4) -> v19, Insn(iref=%3) -> v18, Insn(iref=%7) -> v16, BlockParam(bref=b6, bpref=$b.0) -> v13, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%6) -> v15, FnParam(fref=f2, fpref=$f.0) -> v2, FnParam(fref=f2, fpref=$f.2) -> v4, FnParam(fref=f2, fpref=$f.3) -> v5
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.2)])
// [Asm] defs: [v22]
// [Asm] live_set: [v8, v17, v6, v9, zero, v22]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v8, v17, v6, v9, zero, v23]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [v17, v6, v9, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v19, v17, v9, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6, v17, v9, zero, v8]
// [Asm] move_origin: [v19]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v17]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v8]
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v27]
// [Asm] live_set: [zero, v13, v27, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v14, zero, v13, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v14, zero, v13, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v8, v6, v15, v9, zero, v13]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v6, v16, v9, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v17, v6, v9, zero, v8]
// [Asm] move_origin: [v16]
// [Asm] defined: v17 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v20]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v20]
// [Asm] live_set: [v20]
// [Asm] move_origin: [zero]
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [a2, a1, a3, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, a3, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, a3, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, a3, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, zero, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v4, v6, v5, zero, v7]
// [Asm] move_origin: [v3]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v6, v5, zero, v8]
// [Asm] move_origin: [v4]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v5]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: [v30]
// [Asm] live_set: [v7, v8, v6, v9, zero, v30]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v6, v9, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v6, v12, v9, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v8, v6, v13, v9, zero]
// [Asm] move_origin: [v12]
// [Asm] defined: v13 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux.128"];
// [Asm]   r0 [label="v22 ← a0", color=green];
// [Asm]   r20 [label="a3", color=blue];
// [Asm]   r23 [label="v5 ← a2", color=green];
// [Asm]   r3 [label="v6 ← a3", color=green];
// [Asm]   r9 [label="v27 ← a0", color=green];
// [Asm]   r26 [label="v12 ← a0", color=green];
// [Asm]   r6 [label="v23 ← a0", color=green];
// [Asm]   r13 [label="v15 ← a0", color=green];
// [Asm]   r4 [label="v9 ← a4", color=green];
// [Asm]   r1 [label="v8 ← a1", color=green];
// [Asm]   r11 [label="v14 ← a0", color=green];
// [Asm]   r7 [label="v19 ← a0", color=green];
// [Asm]   r10 [label="v13 ← a2", color=green];
// [Asm]   r22 [label="v4 ← a1", color=green];
// [Asm]   r14 [label="v16 ← a0", color=green];
// [Asm]   r8 [label="v7 ← a0", color=green];
// [Asm]   r5 [label="zero", color=blue];
// [Asm]   r24 [label="v30 ← a2", color=green];
// [Asm]   r15 [label="a0", color=blue];
// [Asm]   r25 [label="v11 ← a0", color=green];
// [Asm]   r2 [label="v17 ← a2", color=green];
// [Asm]   r16 [label="v20 ← a0", color=green];
// [Asm]   r18 [label="a2", color=blue];
// [Asm]   r19 [label="a1", color=blue];
// [Asm]   r17 [label="v2 ← a4", color=green];
// [Asm]   r21 [label="v3 ← a0", color=green];
// [Asm]   r12 [label="v25 ← a5", color=green];
// [Asm]   r4 -- r13;
// [Asm]   r17 -- r18;
// [Asm]   r5 -- r21;
// [Asm]   r17 -- r21;
// [Asm]   r3 -- r25;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r24;
// [Asm]   r1 -- r26;
// [Asm]   r4 -- r5;
// [Asm]   r1 -- r8;
// [Asm]   r5 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r23;
// [Asm]   r1 -- r4;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r23;
// [Asm]   r5 -- r22;
// [Asm]   r1 -- r7;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r10;
// [Asm]   r10 -- r13;
// [Asm]   r3 -- r9;
// [Asm]   r11 -- r12;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r13;
// [Asm]   r18 -- r21;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r3 -- r26;
// [Asm]   r5 -- r11;
// [Asm]   r3 -- r5;
// [Asm]   r17 -- r19;
// [Asm]   r21 -- r23;
// [Asm]   r3 -- r22;
// [Asm]   r3 -- r8;
// [Asm]   r8 -- r24;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r20 -- r22;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r11;
// [Asm]   r17 -- r23;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r10 -- r12;
// [Asm]   r0 -- r3;
// [Asm]   r3 -- r13;
// [Asm]   r17 -- r22;
// [Asm]   r10 -- r11;
// [Asm]   r22 -- r23;
// [Asm]   r8 -- r23;
// [Asm]   r0 -- r5;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r25;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r14;
// [Asm]   r0 -- r1;
// [Asm]   r4 -- r7;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r25;
// [Asm]   r8 -- r22;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r5 -- r25;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r21 -- r22;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r26;
// [Asm]   r1 -- r3;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r20 -- r21;
// [Asm]   r3 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r17 -- r20;
// [Asm]   r1 -- r24;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v22-> 1:v8-> 2:v17-> 3:v6-> 4:v9-> 5:zero-> 6:v23-> 7:v19-> 8:v7-> 24:v30-> 9:v27-> 10:v13-> 11:v14-> 12:v25-> 13:v15-> 14:v16-> 23:v5-> 22:v4-> 21:v3-> 17:v2-> 25:v11-> 26:v12-> 20:a3-> 18:a2-> 19:a1-> 15:a0-> 16:v20"
// [Asm]   comment = "v22<-a0;v5<-a2;v6<-a3;v27<-a0;v12<-a0;v23<-a0;v15<-a0;v9<-a4;v8<-a1;v14<-a0;v19<-a0;v13<-a2;v4<-a1;v16<-a0;v7<-a0;v30<-a2;v11<-a0;v17<-a2;v20<-a0;v2<-a4;v3<-a0;v25<-a5;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux.128"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   slliw v22, v6, 2 ->   slliw a0, a3, 2
// [Asm] subst   add v23, v9, v22 ->   add a0, a4, a0
// [Asm] subst   sw v17, 0(v23) ->   sw a2, 0(a0)
// [Asm] subst   addi v19, v6, 1 ->   addi a0, a3, 1
// [Asm] subst   mv v6, v19 ->   mv a3, a0
// [Asm] subst   mv v7, v17 ->   mv a0, a2
// [Asm] subst   j .aux.128_0 ->   j .aux.128_0
// [Asm] subst   li v27, 65537 ->   li a0, 65537
// [Asm] subst   div v14, v13, v27 ->   div a0, a2, a0
// [Asm] subst   li v25, 65537 ->   li a5, 65537
// [Asm] subst   mul v15, v14, v25 ->   mul a0, a0, a5
// [Asm] subst   sub v16, v13, v15 ->   sub a0, a2, a0
// [Asm] subst   mv v17, v16 ->   mv a2, a0
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v20, zero ->   mv a0, zero
// [Asm] subst   mv v2, a0 ->   mv a4, a0
// [Asm] subst   mv v3, a1 ->   mv a0, a1
// [Asm] subst   mv v4, a2 ->   mv a1, a2
// [Asm] subst   mv v5, a3 ->   mv a2, a3
// [Asm] subst   mv v6, v2 ->   mv a3, a4
// [Asm] subst   mv v9, v5 ->   mv a4, a2
// [Asm] subst   bne v6, v8, .aux.128_2 ->   bne a3, a1, .aux.128_2
// [Asm] subst   li v30, 75 ->   li a2, 75
// [Asm] subst   mul v11, v7, v30 ->   mul a0, a0, a2
// [Asm] subst   addi v12, v11, 74 ->   addi a0, a0, 74
// [Asm] subst   mv v13, v12 ->   mv a2, a0
// [Asm] pre_assigned_registers: Self(fref=f14) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main.127 ->   call main.127
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf true
// [Asm] aux.130:
// [Asm] # block info: defs: [v3, v7, v4, v6, v5, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .aux.130_5:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm]   mv v6, v3  # live: [v4, v5, v6, zero]
// [Asm]   mv v7, v4  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v5, v6], upward_exposed: [v5, v6], params_defs: [v5, v6, v7]
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: [v5, v6, v7]
// [Asm] .aux.130_0:
// [Asm] # control
// [Asm]   bne v5, v6, .aux.130_2  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v25], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v25]
// [Asm] # block parameters: []
// [Asm] .aux.130_1:
// [Asm] # control
// [Asm]   mv v25, zero  # live: [v25]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v25, a0], upward_exposed: [v25], params_defs: [v25]
// [Asm] # live_in: [v25], live_out: []
// [Asm] # block parameters: [v25]
// [Asm] .aux.130_3:
// [Asm] # control
// [Asm]   mv a0, v25  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [], uses: [], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .aux.130_2:
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v10, v9], uses: [v5, v7], upward_exposed: [v5, v7], params_defs: []
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v10, zero, v7, v6, v9]
// [Asm] # block parameters: []
// [Asm] .aux.130_15:
// [Asm] # control
// [Asm]   mv v9, v7  # live: [v5, v6, zero, v9, v7]
// [Asm]   mv v10, v5  # live: [v5, v6, v10, zero, v9, v7]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v10, zero], upward_exposed: [v10, zero], params_defs: [v10, v9]
// [Asm] # live_in: [v5, v10, zero, v7, v6, v9], live_out: [v5, v10, zero, v7, v6, v9]
// [Asm] # block parameters: [v9, v10]
// [Asm] .aux.130_7:
// [Asm] # control
// [Asm]   beq v10, zero, .aux.130_8  # live: [v5, v6, v10, zero, v9, v7]
// [Asm] 
// [Asm] # block info: defs: [v14, v42, v13, v41, v38, v12, v39], uses: [v14, v10, v42, v13, v41, v38, v12, v9, v39], upward_exposed: [v10, v9], params_defs: []
// [Asm] # live_in: [v5, v10, zero, v7, v6, v9], live_out: [v5, v10, zero, v7, v6, v9]
// [Asm] # block parameters: []
// [Asm] .aux.130_9:
// [Asm]   addi v12, v10, -1  # live: [v5, v10, zero, v7, v6, v12, v9]
// [Asm]   slliw v41, v12, 2  # live: [v5, v10, zero, v7, v41, v6, v9]
// [Asm]   add v42, v9, v41  # live: [v5, v10, zero, v42, v7, v6, v9]
// [Asm]   lw v13, 0(v42)  # live: [v5, v10, zero, v13, v7, v6, v9]
// [Asm]   slliw v38, v10, 2  # live: [v5, v10, zero, v13, v7, v38, v6, v9]
// [Asm]   add v39, v9, v38  # live: [v5, v10, zero, v13, v7, v6, v9, v39]
// [Asm]   lw v14, 0(v39)  # live: [v5, v14, v10, zero, v13, v7, v6, v9]
// [Asm] # control
// [Asm]   bge v14, v13, .aux.130_10  # live: [v5, v6, v10, zero, v9, v7]
// [Asm] 
// [Asm] # block info: defs: [v16, v18, v10, v29, v30, v27, v35, v36, v32, v17, v31, v28], uses: [v16, v10, v30, v36, v32, v17, v31, v28, v9, v18, v29, v27, v35], upward_exposed: [v10, v9], params_defs: []
// [Asm] # live_in: [v5, v10, zero, v7, v6, v9], live_out: [v5, v10, zero, v7, v6, v9]
// [Asm] # block parameters: []
// [Asm] .aux.130_11:
// [Asm]   slliw v35, v10, 2  # live: [v5, v10, zero, v7, v35, v6, v9]
// [Asm]   add v36, v9, v35  # live: [v5, v10, zero, v7, v36, v6, v9]
// [Asm]   lw v16, 0(v36)  # live: [v5, v16, v10, zero, v7, v6, v9]
// [Asm]   addi v17, v10, -1  # live: [v5, v16, v10, zero, v7, v6, v17, v9]
// [Asm]   slliw v31, v17, 2  # live: [v5, v16, v10, zero, v7, v6, v17, v31, v9]
// [Asm]   add v32, v9, v31  # live: [v5, v16, v10, zero, v7, v32, v6, v17, v9]
// [Asm]   lw v18, 0(v32)  # live: [v5, v16, v18, v10, zero, v7, v6, v17, v9]
// [Asm]   slliw v29, v10, 2  # live: [v5, v16, v18, zero, v29, v7, v6, v17, v9]
// [Asm]   add v30, v9, v29  # live: [v5, v16, v18, zero, v30, v7, v6, v17, v9]
// [Asm]   sw v18, 0(v30)  # live: [v5, v16, zero, v7, v6, v17, v9]
// [Asm]   slliw v27, v17, 2  # live: [v5, v16, zero, v27, v7, v6, v17, v9]
// [Asm]   add v28, v9, v27  # live: [v5, v16, zero, v7, v6, v17, v28, v9]
// [Asm]   sw v16, 0(v28)  # live: [v5, zero, v7, v6, v17, v9]
// [Asm] # control
// [Asm]   mv v9, v9  # live: [v5, v6, v17, zero, v9, v7]
// [Asm]   mv v10, v17  # live: [v5, v6, v10, zero, v9, v7]
// [Asm]   j .aux.130_7  # live: [v5, v6, v10, zero, v9, v7]
// [Asm] 
// [Asm] # block info: defs: [v22], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v6, zero, v22, v7]
// [Asm] # block parameters: []
// [Asm] .aux.130_8:
// [Asm] # control
// [Asm]   mv v22, zero  # live: [v5, v6, zero, v22, v7]
// [Asm] 
// [Asm] # block info: defs: [v23], uses: [v22], upward_exposed: [v22], params_defs: [v22]
// [Asm] # live_in: [v5, v6, zero, v22, v7], live_out: [v5, v6, zero, v23, v7]
// [Asm] # block parameters: [v22]
// [Asm] .aux.130_13:
// [Asm] # control
// [Asm]   mv v23, v22  # live: [v5, v6, zero, v23, v7]
// [Asm] 
// [Asm] # block info: defs: [v5, v24], uses: [v5, v6, v24, v7], upward_exposed: [v5, v6, v7], params_defs: [v23]
// [Asm] # live_in: [v5, v6, zero, v23, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: [v23]
// [Asm] .aux.130_6:
// [Asm]   addi v24, v5, 1  # live: [v6, v24, zero, v7]
// [Asm] # control
// [Asm]   mv v5, v24  # live: [v5, v6, zero, v7]
// [Asm]   mv v6, v6  # live: [v5, v6, zero, v7]
// [Asm]   mv v7, v7  # live: [v5, v6, zero, v7]
// [Asm]   j .aux.130_0  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v21], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v6, v21, zero, v7]
// [Asm] # block parameters: []
// [Asm] .aux.130_10:
// [Asm] # control
// [Asm]   mv v21, zero  # live: [v5, v6, v21, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v22], uses: [v21], upward_exposed: [v21], params_defs: [v21]
// [Asm] # live_in: [v5, v6, v21, zero, v7], live_out: [v5, v6, zero, v22, v7]
// [Asm] # block parameters: [v21]
// [Asm] .aux.130_12:
// [Asm] # control
// [Asm]   mv v22, v21  # live: [v5, v6, zero, v22, v7]
// [Asm]   j .aux.130_13  # live: [v5, v6, zero, v22, v7]
// [Asm] 
// [Asm] # leaf false
// [Asm] main.127:
// [Asm] # block info: defs: [t1, v16, v13, v7, ft0, ft1, a1, s11, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, v6, ft7, ft4, v5, ft9, v10, a5, fa4, a0, ft2, a2, a3, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v16, v10, v13, a0, v7, a2, a1, s11, v12, a3, v9, zero, v6, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.127_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   addi v2, s11, -400  # live: [zero, v2]
// [Asm]   andi s11, v2, -8  # live: [zero, v2]
// [Asm]   li v16, 100  # live: [v16, zero, v2]
// [Asm]   mv a1, v16  # live: [zero, v2]
// [Asm]   # save_ctx2  # live: [zero, v2]
// [Asm]   mv a0, zero  # live: [zero, a0, v2]
// [Asm]   li v12, 12345  # live: [v12, zero, a0, v2]
// [Asm]   mv a1, v12  # live: [a1, zero, a0, v2]
// [Asm]   li v13, 100  # live: [v2, a1, zero, a0, v13]
// [Asm]   mv a2, v13  # live: [a2, a1, zero, a0, v2]
// [Asm]   mv a3, v2  # live: [a2, a1, a3, zero, a0, v2]
// [Asm]   call aux.128  # live: [zero, a0, v2]
// [Asm]   mv v4, a0  # live: [zero, v2]
// [Asm]   # restore_ctx2  # live: [zero, v2]
// [Asm]   # save_ctx2  # live: [zero, v2]
// [Asm]   li v9, 1  # live: [zero, v9, v2]
// [Asm]   mv a0, v9  # live: [zero, a0, v2]
// [Asm]   li v10, 100  # live: [v10, zero, a0, v2]
// [Asm]   mv a1, v10  # live: [a1, zero, a0, v2]
// [Asm]   mv a2, v2  # live: [a2, a1, zero, a0, v2]
// [Asm]   call aux.130  # live: [zero, a0, v2]
// [Asm]   mv v5, a0  # live: [zero, v2]
// [Asm]   # restore_ctx2  # live: [zero, v2]
// [Asm]   # save_ctx2  # live: [zero, v2]
// [Asm]   mv a0, zero  # live: [a0, v2]
// [Asm]   li v7, 100  # live: [v7, a0, v2]
// [Asm]   mv a1, v7  # live: [a1, a0, v2]
// [Asm]   mv a2, v2  # live: [a2, a1, a0]
// [Asm]   call aux.131  # live: [a0]
// [Asm]   mv v6, a0  # live: [v6]
// [Asm]   # restore_ctx2  # live: [v6]
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] aux.128:
// [Asm] # block info: defs: [v2, v5, v7, v8, v4, v6, v9, v3], uses: [v2, v5, a0, a2, v4, a1, a3, v3], upward_exposed: [a2, a1, a3, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a3, a0, zero], live_out: [v8, v6, v9, zero, v7]
// [Asm] # block parameters: []
// [Asm] .aux.128_5:
// [Asm]   # save_ctx1  # live: [a2, a1, a3, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, a3, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, a3, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, a3, zero, v3]
// [Asm]   mv v5, a3  # live: [v2, v4, v5, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v2  # live: [v4, v6, v5, zero, v3]
// [Asm]   mv v7, v3  # live: [v4, v6, v5, zero, v7]
// [Asm]   mv v8, v4  # live: [v7, v6, v5, zero, v8]
// [Asm]   mv v9, v5  # live: [v7, v6, v9, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v6, v8], upward_exposed: [v6, v8], params_defs: [v8, v6, v9, v7]
// [Asm] # live_in: [v7, v6, v9, zero, v8], live_out: [v8, v6, zero, v9, v7]
// [Asm] # block parameters: [v6, v7, v8, v9]
// [Asm] .aux.128_0:
// [Asm] # control
// [Asm]   bne v6, v8, .aux.128_2  # live: [v7, v6, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [v20], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v20]
// [Asm] # block parameters: []
// [Asm] .aux.128_1:
// [Asm] # control
// [Asm]   mv v20, zero  # live: [v20]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v20], upward_exposed: [v20], params_defs: [v20]
// [Asm] # live_in: [v20], live_out: []
// [Asm] # block parameters: [v20]
// [Asm] .aux.128_3:
// [Asm] # control
// [Asm]   mv a0, v20  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [], uses: [], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v8, v6, v9, zero, v7], live_out: [v8, v6, v9, zero, v7]
// [Asm] # block parameters: []
// [Asm] .aux.128_2:
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v11, v12, v13, v30], uses: [v11, v12, v30, v7], upward_exposed: [v7], params_defs: []
// [Asm] # live_in: [v8, v6, v9, zero, v7], live_out: [v8, v6, v13, v9, zero]
// [Asm] # block parameters: []
// [Asm] .aux.128_9:
// [Asm]   li v30, 75  # live: [v7, v8, v6, v9, zero, v30]
// [Asm]   mul v11, v7, v30  # live: [v11, v6, v9, zero, v8]
// [Asm]   addi v12, v11, 74  # live: [v6, v12, v9, zero, v8]
// [Asm] # control
// [Asm]   mv v13, v12  # live: [v8, v6, v13, v9, zero]
// [Asm] 
// [Asm] # block info: defs: [], uses: [], upward_exposed: [], params_defs: [v13]
// [Asm] # live_in: [v8, v6, v13, v9, zero], live_out: [v8, v6, v13, v9, zero]
// [Asm] # block parameters: [v13]
// [Asm] .aux.128_6:
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v25, v14, v16, v17, v15, v27], uses: [v25, v14, v16, v15, v13, v27], upward_exposed: [v13], params_defs: []
// [Asm] # live_in: [v8, v6, v13, v9, zero], live_out: [v17, v6, v9, zero, v8]
// [Asm] # block parameters: []
// [Asm] .aux.128_8:
// [Asm]   li v27, 65537  # live: [zero, v13, v27, v8, v6, v9]
// [Asm]   div v14, v13, v27  # live: [v14, zero, v13, v8, v6, v9]
// [Asm]   li v25, 65537  # live: [v25, v14, zero, v13, v8, v6, v9]
// [Asm]   mul v15, v14, v25  # live: [v8, v6, v15, v9, zero, v13]
// [Asm]   sub v16, v13, v15  # live: [v6, v16, v9, zero, v8]
// [Asm] # control
// [Asm]   mv v17, v16  # live: [v17, v6, v9, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v7, v19, v6, v22, v23], uses: [v22, v23, v8, v19, v6, v17, v9], upward_exposed: [v6, v17, v9, v8], params_defs: [v17]
// [Asm] # live_in: [v17, v6, v9, zero, v8], live_out: [v8, v6, v9, zero, v7]
// [Asm] # block parameters: [v17]
// [Asm] .aux.128_7:
// [Asm]   slliw v22, v6, 2  # live: [v8, v17, v6, v9, zero, v22]
// [Asm]   add v23, v9, v22  # live: [v8, v17, v6, v9, zero, v23]
// [Asm]   sw v17, 0(v23)  # live: [v17, v6, v9, zero, v8]
// [Asm]   addi v19, v6, 1  # live: [v19, v17, v9, zero, v8]
// [Asm] # control
// [Asm]   mv v6, v19  # live: [v6, v17, v9, zero, v8]
// [Asm]   mv v7, v17  # live: [v7, v6, v9, zero, v8]
// [Asm]   mv v8, v8  # live: [v7, v6, v9, zero, v8]
// [Asm]   mv v9, v9  # live: [v7, v6, v9, zero, v8]
// [Asm]   j .aux.128_0  # live: [v7, v6, v9, zero, v8]
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main.127  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] aux.131:
// [Asm] # block info: defs: [v3, v7, v4, v6, v5, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .aux.131_5:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm]   mv v6, v3  # live: [v4, v5, v6, zero]
// [Asm]   mv v7, v4  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v5, v6], upward_exposed: [v5, v6], params_defs: [v5, v6, v7]
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: [v5, v6, v7]
// [Asm] .aux.131_0:
// [Asm] # control
// [Asm]   beq v5, v6, .aux.131_1  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, v19, a6, ft5, ft10, ft7, v11, ft4, v5, ft9, v10, a5, fa4, a0, ft2, a2, a3, v9, ft8, a7, t3, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v15], uses: [v5, v18, a0, v7, v19, v6, v15, v12, v9], upward_exposed: [v5, v6, v7], params_defs: []
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .aux.131_2:
// [Asm]   slliw v18, v5, 2  # live: [v6, v5, v18, zero, v7]
// [Asm]   add v19, v7, v18  # live: [v19, v6, v5, zero, v7]
// [Asm]   lw v9, 0(v19)  # live: [v6, v5, zero, v9, v7]
// [Asm]   # save_ctx2  # live: [v6, v5, zero, v9, v7]
// [Asm]   mv a0, v9  # live: [v6, v5, zero, a0, v7]
// [Asm]   call minimbt_print_int  # live: [v6, v5, zero, a0, v7]
// [Asm]   mv v10, a0  # live: [v6, v5, zero, v7]
// [Asm]   # restore_ctx2  # live: [v6, v5, zero, v7]
// [Asm]   # save_ctx2  # live: [v6, v5, zero, v7]
// [Asm]   li v15, 32  # live: [v6, v5, v15, zero, v7]
// [Asm]   mv a0, v15  # live: [v6, v5, zero, a0, v7]
// [Asm]   call minimbt_print_char  # live: [v6, v5, zero, a0, v7]
// [Asm]   mv v11, a0  # live: [v6, v5, zero, v7]
// [Asm]   # restore_ctx2  # live: [v6, v5, zero, v7]
// [Asm]   addi v12, v5, 1  # live: [v6, v12, zero, v7]
// [Asm] # control
// [Asm]   mv v5, v12  # live: [v5, v6, zero, v7]
// [Asm]   mv v6, v6  # live: [v5, v6, zero, v7]
// [Asm]   mv v7, v7  # live: [v5, v6, zero, v7]
// [Asm]   j .aux.131_0  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v13], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v13]
// [Asm] # block parameters: []
// [Asm] .aux.131_1:
// [Asm] # control
// [Asm]   mv v13, zero  # live: [v13]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v13, a0], upward_exposed: [v13], params_defs: [v13]
// [Asm] # live_in: [v13], live_out: []
// [Asm] # block parameters: [v13]
// [Asm] .aux.131_3:
// [Asm] # control
// [Asm]   mv a0, v13  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("random", Int), args: [("state", Int)], body: Prim(Prim(Var("state"), Int(75), Mul, kind=Some(Int)), Int(74), Add, kind=Some(Int))}, LetRec({name: ("modulo", Int), args: [("x", Int), ("y", Int)], body: Let(("q", Var({val: Some(Int)})), Prim(Var("x"), Var("y"), Div, kind=Some(Int)), Prim(Var("x"), Prim(Var("q"), Var("y"), Mul, kind=Some(Int)), Sub, kind=Some(Int)))}, LetRec({name: ("fill_buffer", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("aux", Unit), args: [("i", Int), ("state", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("new_state", Var({val: Some(Int)})), App(Var("random"), [Var("state")]), Let(("res", Var({val: Some(Int)})), App(Var("modulo"), [Var("new_state"), Int(65537)]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res")])))))}, App(Var("aux"), [Int(0), Int(12345)]))}, LetRec({name: ("isort", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("insert", Unit), args: [("arr", Array(Int)), ("i", Int)], body: If(Eq(Var("i"), Int(0)), Unit, If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))))))}, LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("insert"), [Var("arr"), Var("i")]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))}, App(Var("aux"), [Int(1)])))}, LetRec({name: ("print_array", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(32)]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, App(Var("aux"), [Int(0)]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), Int(100), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("fill_buffer"), [Var("arr"), Var("n")]), Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")])))))}, App(Var("main"), [])))))))
// [Knf] build_knf: Prim(Prim(Var("state"), Int(75), Mul, kind=Some(Int)), Int(74), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Var("state"), Int(75), Mul, kind=Some(Int))
// [Knf] build_knf: Var("state")
// [Knf] build_knf: Int(75)
// [Knf] build_knf: Int(74)
// [Knf] build_knf: LetRec({name: ("modulo", Int), args: [("x", Int), ("y", Int)], body: Let(("q", Var({val: Some(Int)})), Prim(Var("x"), Var("y"), Div, kind=Some(Int)), Prim(Var("x"), Prim(Var("q"), Var("y"), Mul, kind=Some(Int)), Sub, kind=Some(Int)))}, LetRec({name: ("fill_buffer", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("aux", Unit), args: [("i", Int), ("state", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("new_state", Var({val: Some(Int)})), App(Var("random"), [Var("state")]), Let(("res", Var({val: Some(Int)})), App(Var("modulo"), [Var("new_state"), Int(65537)]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res")])))))}, App(Var("aux"), [Int(0), Int(12345)]))}, LetRec({name: ("isort", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("insert", Unit), args: [("arr", Array(Int)), ("i", Int)], body: If(Eq(Var("i"), Int(0)), Unit, If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))))))}, LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("insert"), [Var("arr"), Var("i")]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))}, App(Var("aux"), [Int(1)])))}, LetRec({name: ("print_array", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(32)]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, App(Var("aux"), [Int(0)]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), Int(100), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("fill_buffer"), [Var("arr"), Var("n")]), Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")])))))}, App(Var("main"), []))))))
// [Knf] build_knf: Let(("q", Var({val: Some(Int)})), Prim(Var("x"), Var("y"), Div, kind=Some(Int)), Prim(Var("x"), Prim(Var("q"), Var("y"), Mul, kind=Some(Int)), Sub, kind=Some(Int)))
// [Knf] build_knf: Prim(Var("x"), Var("y"), Div, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Prim(Var("x"), Prim(Var("q"), Var("y"), Mul, kind=Some(Int)), Sub, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Prim(Var("q"), Var("y"), Mul, kind=Some(Int))
// [Knf] build_knf: Var("q")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: LetRec({name: ("fill_buffer", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("aux", Unit), args: [("i", Int), ("state", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("new_state", Var({val: Some(Int)})), App(Var("random"), [Var("state")]), Let(("res", Var({val: Some(Int)})), App(Var("modulo"), [Var("new_state"), Int(65537)]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res")])))))}, App(Var("aux"), [Int(0), Int(12345)]))}, LetRec({name: ("isort", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("insert", Unit), args: [("arr", Array(Int)), ("i", Int)], body: If(Eq(Var("i"), Int(0)), Unit, If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))))))}, LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("insert"), [Var("arr"), Var("i")]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))}, App(Var("aux"), [Int(1)])))}, LetRec({name: ("print_array", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(32)]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, App(Var("aux"), [Int(0)]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), Int(100), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("fill_buffer"), [Var("arr"), Var("n")]), Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")])))))}, App(Var("main"), [])))))
// [Knf] build_knf: LetRec({name: ("aux", Unit), args: [("i", Int), ("state", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("new_state", Var({val: Some(Int)})), App(Var("random"), [Var("state")]), Let(("res", Var({val: Some(Int)})), App(Var("modulo"), [Var("new_state"), Int(65537)]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res")])))))}, App(Var("aux"), [Int(0), Int(12345)]))
// [Knf] build_knf: If(Eq(Var("i"), Var("n")), Unit, Let(("new_state", Var({val: Some(Int)})), App(Var("random"), [Var("state")]), Let(("res", Var({val: Some(Int)})), App(Var("modulo"), [Var("new_state"), Int(65537)]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res")])))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("new_state", Var({val: Some(Int)})), App(Var("random"), [Var("state")]), Let(("res", Var({val: Some(Int)})), App(Var("modulo"), [Var("new_state"), Int(65537)]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res")]))))
// [Knf] build_knf: App(Var("random"), [Var("state")])
// [Knf] build_knf: Var("random")
// [Knf] build_knf: Var("state")
// [Knf] build_knf: Let(("res", Var({val: Some(Int)})), App(Var("modulo"), [Var("new_state"), Int(65537)]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res")])))
// [Knf] build_knf: App(Var("modulo"), [Var("new_state"), Int(65537)])
// [Knf] build_knf: Var("modulo")
// [Knf] build_knf: Var("new_state")
// [Knf] build_knf: Int(65537)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res")]))
// [Knf] build_knf: Put(Var("arr"), Var("i"), Var("res"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("res")
// [Knf] build_knf: App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res")])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("res")
// [Knf] build_knf: App(Var("aux"), [Int(0), Int(12345)])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(12345)
// [Knf] build_knf: LetRec({name: ("isort", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("insert", Unit), args: [("arr", Array(Int)), ("i", Int)], body: If(Eq(Var("i"), Int(0)), Unit, If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))))))}, LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("insert"), [Var("arr"), Var("i")]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))}, App(Var("aux"), [Int(1)])))}, LetRec({name: ("print_array", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(32)]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, App(Var("aux"), [Int(0)]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), Int(100), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("fill_buffer"), [Var("arr"), Var("n")]), Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")])))))}, App(Var("main"), []))))
// [Knf] build_knf: LetRec({name: ("insert", Unit), args: [("arr", Array(Int)), ("i", Int)], body: If(Eq(Var("i"), Int(0)), Unit, If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))))))}, LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("insert"), [Var("arr"), Var("i")]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))}, App(Var("aux"), [Int(1)])))
// [Knf] build_knf: If(Eq(Var("i"), Int(0)), Unit, If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))])))))
// [Knf] build_knf: Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Get(Var("arr"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))))
// [Knf] build_knf: Get(Var("arr"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))])))
// [Knf] build_knf: Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("tmp")
// [Knf] build_knf: App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("insert")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("insert"), [Var("arr"), Var("i")]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))}, App(Var("aux"), [Int(1)]))
// [Knf] build_knf: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("insert"), [Var("arr"), Var("i")]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("insert"), [Var("arr"), Var("i")]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("insert"), [Var("arr"), Var("i")])
// [Knf] build_knf: Var("insert")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Int(1)])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("print_array", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(32)]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, App(Var("aux"), [Int(0)]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), Int(100), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("fill_buffer"), [Var("arr"), Var("n")]), Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")])))))}, App(Var("main"), [])))
// [Knf] build_knf: LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(32)]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, App(Var("aux"), [Int(0)]))
// [Knf] build_knf: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(32)]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(32)]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: App(Var("print_int"), [Get(Var("arr"), Var("i"))])
// [Knf] build_knf: Get(Var("arr"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(32)]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("print_char"), [Int(32)])
// [Knf] build_knf: Int(32)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Int(0)])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), Int(100), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("fill_buffer"), [Var("arr"), Var("n")]), Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")])))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("n", Var({val: Some(Int)})), Int(100), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("fill_buffer"), [Var("arr"), Var("n")]), Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")])))))
// [Knf] build_knf: Int(100)
// [Knf] build_knf: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("fill_buffer"), [Var("arr"), Var("n")]), Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")]))))
// [Knf] build_knf: Array(Var("n"), Int(0))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("fill_buffer"), [Var("arr"), Var("n")]), Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")])))
// [Knf] build_knf: App(Var("fill_buffer"), [Var("arr"), Var("n")])
// [Knf] build_knf: Var("fill_buffer")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")]))
// [Knf] build_knf: App(Var("isort"), [Var("arr"), Var("n")])
// [Knf] build_knf: Var("isort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: App(Var("print_array"), [Var("arr"), Var("n")])
// [Knf] build_knf: Var("print_array")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux.130
// [Main]   .type aux.130, @function
// [Main] # leaf true
// [Main] aux.130:
// [Main] .aux.130_5:
// [Main]   mv a4, a0
// [Main]   mv a3, a1
// [Main]   mv a0, a2
// [Main]   mv a1, a4
// [Main]   mv a2, a3
// [Main]   mv a3, a0
// [Main] 
// [Main] .aux.130_0:
// [Main]   bne a1, a2, .aux.130_2
// [Main] 
// [Main] .aux.130_1:
// [Main]   mv a0, zero
// [Main] 
// [Main] .aux.130_3:
// [Main]   ret
// [Main] 
// [Main] .aux.130_2:
// [Main] 
// [Main] .aux.130_15:
// [Main]   mv a4, a1
// [Main] 
// [Main] .aux.130_7:
// [Main]   beq a4, zero, .aux.130_8
// [Main] 
// [Main] .aux.130_9:
// [Main]   addi a0, a4, -1
// [Main]   slliw a0, a0, 2
// [Main]   add a0, a3, a0
// [Main]   lw a0, 0(a0)
// [Main]   slliw a5, a4, 2
// [Main]   add a5, a3, a5
// [Main]   lw a5, 0(a5)
// [Main]   bge a5, a0, .aux.130_10
// [Main] 
// [Main] .aux.130_11:
// [Main]   slliw a0, a4, 2
// [Main]   add a0, a3, a0
// [Main]   lw a0, 0(a0)
// [Main]   addi a5, a4, -1
// [Main]   slliw a6, a5, 2
// [Main]   add a6, a3, a6
// [Main]   lw a6, 0(a6)
// [Main]   slliw a4, a4, 2
// [Main]   add a4, a3, a4
// [Main]   sw a6, 0(a4)
// [Main]   slliw a4, a5, 2
// [Main]   add a4, a3, a4
// [Main]   sw a0, 0(a4)
// [Main]   mv a4, a5
// [Main]   j .aux.130_7
// [Main] 
// [Main] .aux.130_8:
// [Main]   mv a0, zero
// [Main] 
// [Main] .aux.130_13:
// [Main] 
// [Main] .aux.130_6:
// [Main]   addi a0, a1, 1
// [Main]   mv a1, a0
// [Main]   j .aux.130_0
// [Main] 
// [Main] .aux.130_10:
// [Main]   mv a0, zero
// [Main] 
// [Main] .aux.130_12:
// [Main]   j .aux.130_13
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.127
// [Main]   .type main.127, @function
// [Main] # leaf false
// [Main] main.127:
// [Main] .main.127_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   addi s0, s11, -400
// [Main]   andi s11, s0, -8
// [Main]   li a0, 100
// [Main]   mv a1, a0
// [Main]   mv a0, zero
// [Main]   li a1, 12345
// [Main]   li a2, 100
// [Main]   mv a3, s0
// [Main]   call aux.128
// [Main]   li a0, 1
// [Main]   li a1, 100
// [Main]   mv a2, s0
// [Main]   call aux.130
// [Main]   mv a0, zero
// [Main]   li a1, 100
// [Main]   mv a2, s0
// [Main]   call aux.131
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux.128
// [Main]   .type aux.128, @function
// [Main] # leaf true
// [Main] aux.128:
// [Main] .aux.128_5:
// [Main]   mv a4, a0
// [Main]   mv a0, a1
// [Main]   mv a1, a2
// [Main]   mv a2, a3
// [Main]   mv a3, a4
// [Main]   mv a4, a2
// [Main] 
// [Main] .aux.128_0:
// [Main]   bne a3, a1, .aux.128_2
// [Main] 
// [Main] .aux.128_1:
// [Main]   mv a0, zero
// [Main] 
// [Main] .aux.128_3:
// [Main]   ret
// [Main] 
// [Main] .aux.128_2:
// [Main] 
// [Main] .aux.128_9:
// [Main]   li a2, 75
// [Main]   mul a0, a0, a2
// [Main]   addi a0, a0, 74
// [Main]   mv a2, a0
// [Main] 
// [Main] .aux.128_6:
// [Main] 
// [Main] .aux.128_8:
// [Main]   li a0, 65537
// [Main]   div a0, a2, a0
// [Main]   li a5, 65537
// [Main]   mul a0, a0, a5
// [Main]   sub a0, a2, a0
// [Main]   mv a2, a0
// [Main] 
// [Main] .aux.128_7:
// [Main]   slliw a0, a3, 2
// [Main]   add a0, a4, a0
// [Main]   sw a2, 0(a0)
// [Main]   addi a0, a3, 1
// [Main]   mv a3, a0
// [Main]   mv a0, a2
// [Main]   j .aux.128_0
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main.127
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux.131
// [Main]   .type aux.131, @function
// [Main] # leaf false
// [Main] aux.131:
// [Main] .aux.131_5:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   mv s2, a2
// [Main] 
// [Main] .aux.131_0:
// [Main]   beq s0, s1, .aux.131_1
// [Main] 
// [Main] .aux.131_2:
// [Main]   slliw a0, s0, 2
// [Main]   add a0, s2, a0
// [Main]   lw a0, 0(a0)
// [Main]   call minimbt_print_int
// [Main]   li a0, 32
// [Main]   call minimbt_print_char
// [Main]   addi a0, s0, 1
// [Main]   mv s0, a0
// [Main]   j .aux.131_0
// [Main] 
// [Main] .aux.131_1:
// [Main]   mv a0, zero
// [Main] 
// [Main] .aux.131_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function main.127
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f6, mref=m0) -> $f6.m0
// [Wasm] Lowering insn Call(ty=Unit, f=f2, args=[Int32(val=0), Int32(val=12345), Int32(val=100), Mem(fref=f6, mref=m0)])
// [Wasm] Get Local name Mem(fref=f6, mref=m0) -> $f6.m0
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[Int32(val=1), Int32(val=100), Mem(fref=f6, mref=m0)])
// [Wasm] Get Local name Mem(fref=f6, mref=m0) -> $f6.m0
// [Wasm] Lowering insn Call(ty=Unit, f=f5, args=[Int32(val=0), Int32(val=100), Mem(fref=f6, mref=m0)])
// [Wasm] Get Local name Mem(fref=f6, mref=m0) -> $f6.m0
// [Wasm] Lowering control Return(args=[Insn(iref=%3)])
// [Wasm] Local Mem(fref=f6, mref=m0) -> $f6.m0
// [Wasm] Lowered function main.127 to wasm
// [Wasm] Lowering function aux.130
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%2), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b13, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b13, args=[Unit])
// [Wasm] Lowering control Jump(target=b13, args=[BlockParam(bref=b12, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b12, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b7, bpref=$b.0), offset=BlockParam(bref=b7, bpref=$b.1), width=@32))
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b7, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b7, bpref=$b.0), offset=Insn(iref=%9), width=@32))
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b7, bpref=$b.0), offset=BlockParam(bref=b7, bpref=$b.1), width=@32), val=Insn(iref=%10))
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b7, bpref=$b.0), offset=Insn(iref=%9), width=@32), val=Insn(iref=%8))
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering control Jump(target=b7, args=[BlockParam(bref=b7, bpref=$b.0), Insn(iref=%9)])
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b7, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b7, bpref=$b.0), offset=Insn(iref=%4), width=@32))
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b7, bpref=$b.0), offset=BlockParam(bref=b7, bpref=$b.1), width=@32))
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%5), Insn(iref=%6)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Branch(cond=Insn(iref=%7), t=b10, t_args=[], f=b11, f_args=[])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b7, bpref=$b.1), Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b8, t_args=[], f=b9, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b14, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Lowering control Jump(target=b15, args=[])
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f4, fpref=$f.0), FnParam(fref=f4, fpref=$f.1), FnParam(fref=f4, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Local BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function aux.130 to wasm
// [Wasm] Lowering function aux.131
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.2), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Int32(val=32)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%4), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f5, fpref=$f.0), FnParam(fref=f5, fpref=$f.1), FnParam(fref=f5, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function aux.131 to wasm
// [Wasm] Lowering function aux.128
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.3), offset=BlockParam(bref=b0, bpref=$b.0), width=@32), val=BlockParam(bref=b7, bpref=$b.0))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%4), BlockParam(bref=b7, bpref=$b.0), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Lowering insn Op(ty=Int32, op=Div, args=[BlockParam(bref=b6, bpref=$b.0), Int32(val=65537)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%5), Int32(val=65537)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b6, bpref=$b.0), Insn(iref=%6)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Jump(target=b7, args=[Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Lowering control Jump(target=b8, args=[])
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[BlockParam(bref=b0, bpref=$b.1), Int32(val=75)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%8), Int32(val=74)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering control Jump(target=b6, args=[Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b9, args=[])
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f2, fpref=$f.0), FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.2), FnParam(fref=f2, fpref=$f.3)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.3) -> $$f.3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function aux.128 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f6, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [KnfOpt] freq: {random.1: Once, modulo.6: Once, fill_buffer.11: Once, aux.14: Many(2), isort.25: Once, insert.28: Many(2), aux.46: Many(2), print_array.52: Once, aux.55: Many(2), main.64: Once}
// [KnfOpt] Knf inline Some(random)
// [KnfOpt] Knf inline Some(modulo)
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision aux.14 rejected
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision aux.14 rejected
// [KnfOpt] Inline threshold 2 35
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision insert.28 rejected
// [KnfOpt] Inline threshold 2 35
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision insert.28 rejected
// [KnfOpt] Inline threshold 2 9
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision aux.46 accepted
// [KnfOpt] Knf inline Some(aux)
// [KnfOpt] Inline threshold 2 9
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision aux.46 accepted
// [KnfOpt] Knf inline Some(aux)
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision aux.55 rejected
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision aux.55 rejected
// [KnfOpt] Knf inline Some(fill_buffer)
// [KnfOpt] Knf inline Some(isort)
// [KnfOpt] Knf inline Some(print_array)
// [KnfOpt] Numbers of let rec: 7 7 0
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %3: Call(ty=Unit, f=f4, args=[Insn(iref=%2), FnParam(fref=f4, fpref=$f.1), FnParam(fref=f4, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %5: Call(ty=Unit, f=f5, args=[Insn(iref=%4), FnParam(fref=f5, fpref=$f.1), FnParam(fref=f5, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %5: Call(ty=Unit, f=f2, args=[Insn(iref=%4), Insn(iref=%2), FnParam(fref=f2, fpref=$f.2), FnParam(fref=f2, fpref=$f.3)])
// [CoreOpt] eliminated tail rec call %12: Call(ty=Unit, f=f3, args=[FnParam(fref=f3, fpref=$f.0), Insn(iref=%11)])
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f4: Once, f1: Once, f5: Once, f2: Once, f3: Once, f14: Once, f0: Once})
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b7, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b7, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b7, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b7, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b7, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b7, bpref=$b.0)
// [CoreOpt] aux.130 is inlining Call(ty=Unit, f=f3, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0)])
// [CoreOpt] shifted callee .fn insert.129 #f3 : fn(array[int32], int32) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b15 {
// [CoreOpt]   .bb #b7 (array[int32], int32) {
// [CoreOpt]     let %3: bool = eq($b7.1, 0)
// [CoreOpt]     br %3 b8() b9()
// [CoreOpt]   }
// [CoreOpt]   .bb #b8 () {
// [CoreOpt]     jump b13(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b9 () {
// [CoreOpt]     let %4: int32 = sub($b7.1, 1)
// [CoreOpt]     let %5: int32 = load int32 offset($b7.0, %4 * @32)
// [CoreOpt]     let %6: int32 = load int32 offset($b7.0, $b7.1 * @32)
// [CoreOpt]     let %7: bool = le(%5, %6)
// [CoreOpt]     br %7 b10() b11()
// [CoreOpt]   }
// [CoreOpt]   .bb #b10 () {
// [CoreOpt]     jump b12(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b11 () {
// [CoreOpt]     let %8: int32 = load int32 offset($b7.0, $b7.1 * @32)
// [CoreOpt]     let %9: int32 = sub($b7.1, 1)
// [CoreOpt]     let %10: int32 = load int32 offset($b7.0, %9 * @32)
// [CoreOpt]     let _ = store int32 offset($b7.0, $b7.1 * @32) <- %10
// [CoreOpt]     let %12: int32 = sub($b7.1, 1)
// [CoreOpt]     let _ = store int32 offset($b7.0, %12 * @32) <- %8
// [CoreOpt]     let %14: int32 = sub($b7.1, 1)
// [CoreOpt]     jump b7($b7.0, %14)
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 (unit) {
// [CoreOpt]     jump b13($b12.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b13 (unit) {
// [CoreOpt]     return $b13.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b14 pre #Some(b15) header #b7 {
// [CoreOpt]     .block #b13
// [CoreOpt]     .block #b11
// [CoreOpt]     .block #b8
// [CoreOpt]     .block #b12
// [CoreOpt]     .block #b9
// [CoreOpt]     .block #b10
// [CoreOpt]   }
// [CoreOpt]   .bb #b15 () {
// [CoreOpt]     jump b14($f0, $f1)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] aux.128 is inlining Call(ty=Int32, f=f1, args=[BlockParam(bref=b6, bpref=$b.0), Int32(val=65537)])
// [CoreOpt] shifted callee .fn modulo.126 #f1 : fn(int32, int32) -> int32
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b8 {
// [CoreOpt]   .bb #b8 () {
// [CoreOpt]     let %5: int32 = div($f0, $f1)
// [CoreOpt]     let %6: int32 = mul(%5, $f1)
// [CoreOpt]     let %7: int32 = sub($f0, %6)
// [CoreOpt]     return %7
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] aux.128 is inlining Call(ty=Int32, f=f0, args=[BlockParam(bref=b0, bpref=$b.1)])
// [CoreOpt] shifted callee .fn random.125 #f0 : fn(int32) -> int32
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b9 {
// [CoreOpt]   .bb #b9 () {
// [CoreOpt]     let %8: int32 = mul($f0, 75)
// [CoreOpt]     let %9: int32 = add(%8, 74)
// [CoreOpt]     return %9
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f1
// [CoreOpt] Remove dead function: f3
// [CoreOpt] Remove dead function: f0
// [CoreOpt] LVN subst Insn(iref=%12) with Insn(iref=%9)
// [CoreOpt] LVN subst Insn(iref=%14) with Insn(iref=%9)
