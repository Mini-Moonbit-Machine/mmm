// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v4, Insn(iref=%3) -> v6, Self(fref=f4) -> v0, Mem(fref=f4, mref=m0) -> v2, Insn(iref=%0) -> v3, Insn(iref=%2) -> v5
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v2]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v2]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] skip edge 3 -> 2
// [Asm] defs: [v12]
// [Asm] live_set: [v12, zero, a0, v2]
// [Asm] defined: v12 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0, v2]
// [Asm] move: a1 <- v12
// [Asm] defined: a1 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v2, a1, zero, a0, v13]
// [Asm] defined: v13 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, zero, a0, v2]
// [Asm] move: a2 <- v13
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [a2, a1, a3, zero, a0, v2]
// [Asm] move: a3 <- v2
// [Asm] defined: a3 is X
// [Asm] skip edge 8 -> 1
// [Asm] defs: [t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7, ft0, ft1, ft2, ft3]
// [Asm] live_set: [zero, a0, v2]
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defs: [v4]
// [Asm] live_set: [zero, v2]
// [Asm] move: v4 <- a0
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] defs: [v9]
// [Asm] live_set: [zero, v9, v2]
// [Asm] defined: v9 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v2]
// [Asm] move: a0 <- v9
// [Asm] defined: a0 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v10, zero, a0, v2]
// [Asm] defined: v10 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0, v2]
// [Asm] move: a1 <- v10
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, zero, a0, v2]
// [Asm] move: a2 <- v2
// [Asm] defined: a2 is X
// [Asm] skip edge 7 -> 1
// [Asm] defs: [t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7, ft0, ft1, ft2, ft3]
// [Asm] live_set: [zero, a0, v2]
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defs: [v5]
// [Asm] live_set: [zero, v2]
// [Asm] move: v5 <- a0
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v2]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v7, a0, v2]
// [Asm] defined: v7 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0, v2]
// [Asm] move: a1 <- v7
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0]
// [Asm] move: a2 <- v2
// [Asm] defined: a2 is X
// [Asm] defs: [t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7, ft0, ft1, ft2, ft3]
// [Asm] live_set: [a0]
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move: v6 <- a0
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v6
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main.147") clobbered_x: @hashset.of([a2, s0, a1, a0])
// [Asm] Label("main.147") clobbered_f: @hashset.of([])
// [Asm] subst   addi v2, s11, -400 ->   addi s0, s11, -400
// [Asm] subst   andi s11, v2, -8 ->   andi s11, s0, -8
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   li v12, 12345 ->   li a1, 12345
// [Asm] subst   li v13, 100 ->   li a2, 100
// [Asm] subst   mv a3, v2 ->   mv a3, s0
// [Asm] subst   call aux.148 ->   call aux.148
// [Asm] subst   li v9, 1 ->   li a0, 1
// [Asm] subst   li v10, 100 ->   li a1, 100
// [Asm] subst   mv a2, v2 ->   mv a2, s0
// [Asm] subst   call aux.150 ->   call aux.150
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   li v7, 100 ->   li a1, 100
// [Asm] subst   mv a2, v2 ->   mv a2, s0
// [Asm] subst   call aux.151 ->   call aux.151
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f10) -> v0, Insn(iref=%0) -> v2
// [Asm] LoweringOrder: [5, 0, 2, 15, 7, 9, 11, 10, 12, 8, 13, 6, 1, 3]
// [Asm] LoweringOrder: [[4], [1, 2], [15], [14], [8, 9], [10, 11], [7], [12], [13], [13], [6], [0], [3], []]
// [Asm] LoweringOrder: HashMap::of([(b6, 3), (b12, 3), (b8, 4), (b9, 1), (b0, 0), (b13, 3), (b15, 1), (b1, 0), (b11, 1), (b10, 3), (b5, 0), (b2, 1), (b3, 0), (b7, 1)])
// [Asm] LoweringOrder: [b5, b0, b1, b3, b2, b15, b7, b9, b11, b10, b12, b13, b6, b8]
// [Asm] LoweringOrder: HashMap::of([(b6, 3), (b12, 1), (b8, 0), (b9, 3), (b0, 1), (b13, 2), (b15, 1), (b1, 2), (b11, 4), (b10, 0), (b5, 0), (b2, 0), (b3, 3), (b7, 2)])
// [Asm] pre_assigned_registers: BlockParam(bref=b12, bpref=$b.0) -> v25, Insn(iref=%15) -> v15, BlockParam(bref=b7, bpref=$b.1) -> v10, BlockParam(bref=b7, bpref=$b.0) -> v9, BlockParam(bref=b3, bpref=$b.0) -> v29, Insn(iref=%16) -> v13, Insn(iref=%9) -> v20, Insn(iref=%8) -> v19, Self(fref=f2) -> v0, Insn(iref=%10) -> v22, BlockParam(bref=b0, bpref=$b.0) -> v5, Insn(iref=%25) -> v21, BlockParam(bref=b0, bpref=$b.1) -> v6, BlockParam(bref=b0, bpref=$b.2) -> v7, Insn(iref=%5) -> v14, Insn(iref=%0) -> v8, Insn(iref=%4) -> v12, BlockParam(bref=b13, bpref=$b.0) -> v26, Insn(iref=%3) -> v11, Insn(iref=%13) -> v24, Insn(iref=%7) -> v17, BlockParam(bref=b6, bpref=$b.0) -> v27, Insn(iref=%2) -> v28, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%26) -> v18, Insn(iref=%11) -> v23, Insn(iref=%6) -> v16, FnParam(fref=f2, fpref=$f.0) -> v2, FnParam(fref=f2, fpref=$f.2) -> v4
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: [0]
// [Asm] critical edges for b6: []
// [Asm] critical color seq for b6: []
// [Asm] succs: [6]
// [Asm] critical edges for b13: []
// [Asm] critical color seq for b13: []
// [Asm] succs: [13]
// [Asm] critical edges for b8: []
// [Asm] critical color seq for b8: []
// [Asm] succs: [13]
// [Asm] critical edges for b12: []
// [Asm] critical color seq for b12: []
// [Asm] succs: [12]
// [Asm] critical edges for b10: []
// [Asm] critical color seq for b10: []
// [Asm] succs: [7]
// [Asm] critical edges for b11: []
// [Asm] critical color seq for b11: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%9), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b7, bpref=$b.1), width=@32))
// [Asm] succs: [10, 11]
// [Asm] critical edges for b9: []
// [Asm] critical color seq for b9: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%5), Insn(iref=%6)])
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b7, bpref=$b.1), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%4), width=@32))
// [Asm] succs: [8, 9]
// [Asm] critical edges for b7: []
// [Asm] critical color seq for b7: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b7, bpref=$b.1), Int32(val=0)])
// [Asm] succs: [14]
// [Asm] critical edges for b15: []
// [Asm] critical color seq for b15: []
// [Asm] succs: [15]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1)])
// [Asm] succs: [4]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] defs: [v28]
// [Asm] live_set: [v6, v28, zero, v7]
// [Asm] defined: v28 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move: v5 <- v28
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move: v6 <- v6
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move: v7 <- v7
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v29
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v27]
// [Asm] live_set: [v5, v6, zero, v27, v7]
// [Asm] move: v27 <- v26
// [Asm] defined: v27 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v5, v6, v26, zero, v7]
// [Asm] move: v26 <- zero
// [Asm] defined: v26 is X
// [Asm] skip edge 7 -> 3
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v26, zero, v7]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v10, zero, v9, v7]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move: v4 <- a2
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move: v5 <- v2
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move: v6 <- v3
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move: v7 <- v4
// [Asm] defined: v7 is X
// [Asm] defs: [v29]
// [Asm] live_set: [v29]
// [Asm] move: v29 <- zero
// [Asm] defined: v29 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v5, v10, zero, v7, v19, v6, v9]
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v5, v10, zero, v20, v7, v19, v6, v9]
// [Asm] defined: v20 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v5, v10, zero, v20, v22, v7, v19, v6, v9]
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v20, v7, v19, v6, v9]
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v20, v7, v6, v9]
// [Asm] defs: []
// [Asm] live_set: [v7, v5, v6, zero, v9, v20]
// [Asm] move: v9 <- v9
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v6, v10, zero, v9, v7]
// [Asm] move: v10 <- v20
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v10, zero, v9, v7]
// [Asm] defs: [v26]
// [Asm] live_set: [v5, v6, v26, zero, v7]
// [Asm] move: v26 <- v25
// [Asm] defined: v26 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v5, v6, zero, v9, v7]
// [Asm] move: v9 <- v7
// [Asm] defined: v9 is X
// [Asm] skip edge 15 -> 4
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v6, v10, zero, v9, v7]
// [Asm] move: v10 <- v5
// [Asm] defined: v10 is X
// [Asm] skip edge 9 -> 0
// [Asm] defs: [v12]
// [Asm] live_set: [v5, v10, zero, v7, v6, v12, v9]
// [Asm] defined: v12 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v5, v14, v10, zero, v7, v6, v9]
// [Asm] defined: v14 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v5, v16, v14, v10, zero, v7, v6, v9]
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v10, zero, v9, v7]
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v5, v6, zero, v7]
// [Asm] move: v25 <- zero
// [Asm] defined: v25 is X
// [Asm] skip edge 19 -> 3
// [Asm] Label("aux.150") clobbered_x: @hashset.of([a5, a0, a4, a6, a2, a1, a3])
// [Asm] Label("aux.150") clobbered_f: @hashset.of([])
// [Asm] subst   addi v28, v5, 1 ->   addi a0, a0, 1
// [Asm] subst   j .aux.150_0 ->   j .aux.150_0
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v26, zero ->   mv a3, zero
// [Asm] subst   j .aux.150_13 ->   j .aux.150_13
// [Asm] subst   beq v10, zero, .aux.150_8 ->   beq a3, zero, .aux.150_8
// [Asm] subst   bne v5, v6, .aux.150_2 ->   bne a0, a1, .aux.150_2
// [Asm] subst   mv v29, zero ->   mv a0, zero
// [Asm] subst   th.lurw v19, v9, v10, 2 ->   th.lurw a4, a2, a3, 2
// [Asm] subst   addi v20, v10, -1 ->   addi a5, a3, -1
// [Asm] subst   th.lurw v22, v9, v20, 2 ->   th.lurw a6, a2, a5, 2
// [Asm] subst   th.surw v22, v9, v10, 2 ->   th.surw a6, a2, a3, 2
// [Asm] subst   th.surw v19, v9, v20, 2 ->   th.surw a4, a2, a5, 2
// [Asm] subst   mv v10, v20 ->   mv a3, a5
// [Asm] subst   j .aux.150_7 ->   j .aux.150_7
// [Asm] subst   mv v10, v5 ->   mv a3, a0
// [Asm] subst   addi v12, v10, -1 ->   addi a4, a3, -1
// [Asm] subst   th.lurw v14, v9, v12, 2 ->   th.lurw a4, a2, a4, 2
// [Asm] subst   th.lurw v16, v9, v10, 2 ->   th.lurw a5, a2, a3, 2
// [Asm] subst   bge v16, v14, .aux.150_10 ->   bge a5, a4, .aux.150_10
// [Asm] subst   mv v25, zero ->   mv a3, zero
// [Asm] LoweringOrder: [5, 0, 2, 1, 3]
// [Asm] LoweringOrder: [[4], [1, 2], [0], [3], []]
// [Asm] LoweringOrder: HashMap::of([(b1, 1), (b5, 0), (b2, 0), (b3, 1), (b0, 0)])
// [Asm] LoweringOrder: [b5, b0, b2, b1, b3]
// [Asm] LoweringOrder: HashMap::of([(b1, 0), (b5, 0), (b2, 2), (b3, 1), (b0, 1)])
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v13, FnParam(fref=f3, fpref=$f.2) -> v4, Insn(iref=%3) -> v12, FnParam(fref=f3, fpref=$f.1) -> v3, BlockParam(bref=b3, bpref=$b.0) -> v14, Insn(iref=%2) -> v11, Insn(iref=%1) -> v10, BlockParam(bref=b0, bpref=$b.0) -> v5, BlockParam(bref=b0, bpref=$b.1) -> v6, FnParam(fref=f3, fpref=$f.0) -> v2, BlockParam(bref=b0, bpref=$b.2) -> v7, Insn(iref=%5) -> v9, Self(fref=f3) -> v0, Insn(iref=%0) -> v8
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: [0]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1)])
// [Asm] succs: [4]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] defs: [v10]
// [Asm] live_set: [v6, v5, v10, zero, v7]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, v10, zero, v7]
// [Asm] defs: [a0]
// [Asm] live_set: [v6, v5, zero, a0, v7]
// [Asm] move: a0 <- v10
// [Asm] defined: a0 is X
// [Asm] defs: [t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7, ft0, ft1, ft2, ft3]
// [Asm] live_set: [v6, v5, zero, a0, v7]
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move: v11 <- a0
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] defs: [v16]
// [Asm] live_set: [v6, v5, v16, zero, v7]
// [Asm] defined: v16 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v6, v5, zero, a0, v7]
// [Asm] move: a0 <- v16
// [Asm] defined: a0 is X
// [Asm] defs: [t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7, ft0, ft1, ft2, ft3]
// [Asm] live_set: [v6, v5, zero, a0, v7]
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defs: [v12]
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move: v12 <- a0
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] defs: [v13]
// [Asm] live_set: [v6, zero, v13, v7]
// [Asm] defined: v13 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move: v5 <- v13
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move: v6 <- v6
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move: v7 <- v7
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move: v4 <- a2
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move: v5 <- v2
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move: v6 <- v3
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move: v7 <- v4
// [Asm] defined: v7 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move: v14 <- zero
// [Asm] defined: v14 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v14
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("aux.151") clobbered_x: @hashset.of([s2, a2, s0, a1, a0, s1])
// [Asm] Label("aux.151") clobbered_f: @hashset.of([])
// [Asm] subst   beq v5, v6, .aux.151_1 ->   beq s0, s1, .aux.151_1
// [Asm] subst   th.lurw v10, v7, v5, 2 ->   th.lurw a0, s2, s0, 2
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v16, 32 ->   li a0, 32
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   addi v13, v5, 1 ->   addi a0, s0, 1
// [Asm] subst   mv v5, v13 ->   mv s0, a0
// [Asm] subst   j .aux.151_0 ->   j .aux.151_0
// [Asm] subst   mv v5, v2 ->   mv s0, a0
// [Asm] subst   mv v6, v3 ->   mv s1, a1
// [Asm] subst   mv v7, v4 ->   mv s2, a2
// [Asm] subst   mv v14, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [5, 0, 2, 1, 3]
// [Asm] LoweringOrder: [[4], [1, 2], [0], [3], []]
// [Asm] LoweringOrder: HashMap::of([(b1, 1), (b5, 0), (b2, 0), (b3, 1), (b0, 0)])
// [Asm] LoweringOrder: [b5, b0, b2, b1, b3]
// [Asm] LoweringOrder: HashMap::of([(b1, 0), (b5, 0), (b2, 2), (b3, 1), (b0, 1)])
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v19, Insn(iref=%8) -> v16, FnParam(fref=f0, fpref=$f.3) -> v5, BlockParam(bref=b0, bpref=$b.3) -> v9, BlockParam(bref=b0, bpref=$b.0) -> v6, BlockParam(bref=b0, bpref=$b.1) -> v7, BlockParam(bref=b0, bpref=$b.2) -> v8, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%5) -> v15, Insn(iref=%0) -> v10, Insn(iref=%4) -> v14, Insn(iref=%3) -> v13, FnParam(fref=f0, fpref=$f.1) -> v3, FnParam(fref=f0, fpref=$f.2) -> v4, Insn(iref=%7) -> v18, Insn(iref=%2) -> v12, Insn(iref=%1) -> v11, Insn(iref=%6) -> v17
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: [0]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Asm] skipping Op(ty=Int32, op=Mul, args=[Insn(iref=%3), Int32(val=65537)])
// [Asm] skipping Op(ty=Int32, op=Div, args=[Insn(iref=%2), Int32(val=65537)])
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.2)])
// [Asm] succs: [4]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] defs: [v24]
// [Asm] live_set: [v7, v6, v24, v9, zero, v8]
// [Asm] defined: v24 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v6, v9, zero, v8]
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v6, v12, v9, zero, v8]
// [Asm] defined: v12 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v6, v12, v21, v9, zero, v8]
// [Asm] defined: v21 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v6, v15, v9, zero, v8]
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v15, v9, zero, v8]
// [Asm] defs: [v18]
// [Asm] live_set: [v15, v18, v9, zero, v8]
// [Asm] defined: v18 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6, v15, v9, zero, v8]
// [Asm] move: v6 <- v18
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v8, v6, v9, zero, v7]
// [Asm] move: v7 <- v15
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v6, v9, zero, v7]
// [Asm] move: v8 <- v8
// [Asm] defs: []
// [Asm] live_set: [v8, v6, v9, zero, v7]
// [Asm] move: v9 <- v9
// [Asm] defs: []
// [Asm] live_set: [v8, v6, v9, zero, v7]
// [Asm] defs: [v19]
// [Asm] live_set: [v19]
// [Asm] move: v19 <- zero
// [Asm] defined: v19 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v19
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, a3, zero, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, a3, zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, a3, zero, v3]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, a3, zero, v3]
// [Asm] move: v4 <- a2
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, zero, v3]
// [Asm] move: v5 <- a3
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, v5, zero, v3]
// [Asm] move: v6 <- v2
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v4, v6, v5, zero, v7]
// [Asm] move: v7 <- v3
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v6, v5, zero, v8]
// [Asm] move: v8 <- v4
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move: v9 <- v5
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v6, zero, v9, v7]
// [Asm] Label("aux.148") clobbered_x: @hashset.of([a2, a1, a3, a0, a4])
// [Asm] Label("aux.148") clobbered_f: @hashset.of([])
// [Asm] subst   li v24, 75 ->   li a0, 75
// [Asm] subst   mul v11, v7, v24 ->   mul a0, a1, a0
// [Asm] subst   addi v12, v11, 74 ->   addi a0, a0, 74
// [Asm] subst   li v21, 65537 ->   li a1, 65537
// [Asm] subst   rem v15, v12, v21 ->   rem a0, a0, a1
// [Asm] subst   th.surw v15, v9, v6, 2 ->   th.surw a0, a3, a2, 2
// [Asm] subst   addi v18, v6, 1 ->   addi a1, a2, 1
// [Asm] subst   mv v6, v18 ->   mv a2, a1
// [Asm] subst   mv v7, v15 ->   mv a1, a0
// [Asm] subst   j .aux.148_0 ->   j .aux.148_0
// [Asm] subst   mv v19, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v2, a0 ->   mv a4, a0
// [Asm] subst   mv v4, a2 ->   mv a0, a2
// [Asm] subst   mv v6, v2 ->   mv a2, a4
// [Asm] subst   mv v8, v4 ->   mv a4, a0
// [Asm] subst   beq v6, v8, .aux.148_1 ->   beq a2, a4, .aux.148_1
// [Asm] before colored: # leaf true
// [Asm] aux.148:
// [Asm] # block info: defs: [v2, v5, v7, v8, v4, v6, v9, v3], uses: [v2, v5, a0, a2, v4, a1, a3, v3], upward_exposed: [a2, a1, a3, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a3, a0, zero], live_out: [v8, v6, v9, zero, v7]
// [Asm] # block parameters: []
// [Asm] .aux.148_5:
// [Asm]   # save_ctx1  # live: [a2, a1, a3, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, a3, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, a3, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, a3, zero, v3]
// [Asm]   mv v5, a3  # live: [v2, v4, v5, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v2  # live: [v4, v6, v5, zero, v3]
// [Asm]   mv v7, v3  # live: [v4, v6, v5, zero, v7]
// [Asm]   mv v8, v4  # live: [v7, v6, v5, zero, v8]
// [Asm]   mv v9, v5  # live: [v7, v6, v9, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v6, v8], upward_exposed: [v6, v8], params_defs: [v8, v6, v9, v7]
// [Asm] # live_in: [v7, v6, v9, zero, v8], live_out: [v8, v6, zero, v9, v7]
// [Asm] # block parameters: [v6, v7, v8, v9]
// [Asm] .aux.148_0:
// [Asm] # control
// [Asm]   beq v6, v8, .aux.148_1  # live: [v8, v6, zero, v9, v7]
// [Asm] 
// [Asm] # block info: defs: [v11, v21, v18, v7, v6, v24, v12, v15], uses: [v11, v21, v18, v7, v8, v6, v24, v12, v15, v9], upward_exposed: [v8, v6, v9, v7], params_defs: []
// [Asm] # live_in: [v7, v6, v9, zero, v8], live_out: [v8, v6, v9, zero, v7]
// [Asm] # block parameters: []
// [Asm] .aux.148_2:
// [Asm]   li v24, 75  # live: [v7, v6, v24, v9, zero, v8]
// [Asm]   mul v11, v7, v24  # live: [v11, v6, v9, zero, v8]
// [Asm]   addi v12, v11, 74  # live: [v6, v12, v9, zero, v8]
// [Asm]   li v21, 65537  # live: [v6, v12, v21, v9, zero, v8]
// [Asm]   rem v15, v12, v21  # live: [v6, v15, v9, zero, v8]
// [Asm]   th.surw v15, v9, v6, 2  # live: [v6, v15, v9, zero, v8]
// [Asm]   addi v18, v6, 1  # live: [v15, v18, v9, zero, v8]
// [Asm] # control
// [Asm]   mv v6, v18  # live: [v6, v15, v9, zero, v8]
// [Asm]   mv v7, v15  # live: [v8, v6, v9, zero, v7]
// [Asm]   mv v8, v8  # live: [v8, v6, v9, zero, v7]
// [Asm]   mv v9, v9  # live: [v8, v6, v9, zero, v7]
// [Asm]   j .aux.148_0  # live: [v8, v6, v9, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v19], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v19]
// [Asm] # block parameters: []
// [Asm] .aux.148_1:
// [Asm] # control
// [Asm]   mv v19, zero  # live: [v19]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v19, a0], upward_exposed: [v19], params_defs: [v19]
// [Asm] # live_in: [v19], live_out: []
// [Asm] # block parameters: [v19]
// [Asm] .aux.148_3:
// [Asm] # control
// [Asm]   mv a0, v19  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main.147:
// [Asm] # block info: defs: [t1, v13, v7, ft0, ft1, a1, s11, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, v6, ft7, ft4, v5, ft9, v10, a5, fa4, a0, ft2, a2, a3, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v10, v13, a0, v7, a2, a1, v12, a3, s11, v9, zero, v6, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.147_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   addi v2, s11, -400  # live: [zero, v2]
// [Asm]   andi s11, v2, -8  # live: [zero, v2]
// [Asm]   # save_ctx2  # live: [zero, v2]
// [Asm]   mv a0, zero  # live: [zero, a0, v2]
// [Asm]   li v12, 12345  # live: [v12, zero, a0, v2]
// [Asm]   mv a1, v12  # live: [a1, zero, a0, v2]
// [Asm]   li v13, 100  # live: [v2, a1, zero, a0, v13]
// [Asm]   mv a2, v13  # live: [a2, a1, zero, a0, v2]
// [Asm]   mv a3, v2  # live: [a2, a1, a3, zero, a0, v2]
// [Asm]   call aux.148  # live: [zero, a0, v2]
// [Asm]   mv v4, a0  # live: [zero, v2]
// [Asm]   # restore_ctx2  # live: [zero, v2]
// [Asm]   # save_ctx2  # live: [zero, v2]
// [Asm]   li v9, 1  # live: [zero, v9, v2]
// [Asm]   mv a0, v9  # live: [zero, a0, v2]
// [Asm]   li v10, 100  # live: [v10, zero, a0, v2]
// [Asm]   mv a1, v10  # live: [a1, zero, a0, v2]
// [Asm]   mv a2, v2  # live: [a2, a1, zero, a0, v2]
// [Asm]   call aux.150  # live: [zero, a0, v2]
// [Asm]   mv v5, a0  # live: [zero, v2]
// [Asm]   # restore_ctx2  # live: [zero, v2]
// [Asm]   # save_ctx2  # live: [zero, v2]
// [Asm]   mv a0, zero  # live: [a0, v2]
// [Asm]   li v7, 100  # live: [v7, a0, v2]
// [Asm]   mv a1, v7  # live: [a1, a0, v2]
// [Asm]   mv a2, v2  # live: [a2, a1, a0]
// [Asm]   call aux.151  # live: [a0]
// [Asm]   mv v6, a0  # live: [v6]
// [Asm]   # restore_ctx2  # live: [v6]
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call main.147  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] aux.151:
// [Asm] # block info: defs: [v3, v7, v4, v6, v5, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .aux.151_5:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm]   mv v6, v3  # live: [v4, v5, v6, zero]
// [Asm]   mv v7, v4  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v5, v6], upward_exposed: [v5, v6], params_defs: [v5, v6, v7]
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: [v5, v6, v7]
// [Asm] .aux.151_0:
// [Asm] # control
// [Asm]   beq v5, v6, .aux.151_1  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, v16, v13, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, v5, v10, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v5, v16, v10, a0, v13, v7, v6], upward_exposed: [v5, v6, v7], params_defs: []
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .aux.151_2:
// [Asm]   th.lurw v10, v7, v5, 2  # live: [v6, v5, v10, zero, v7]
// [Asm]   # save_ctx2  # live: [v6, v5, v10, zero, v7]
// [Asm]   mv a0, v10  # live: [v6, v5, zero, a0, v7]
// [Asm]   call minimbt_print_int  # live: [v6, v5, zero, a0, v7]
// [Asm]   mv v11, a0  # live: [v6, v5, zero, v7]
// [Asm]   # restore_ctx2  # live: [v6, v5, zero, v7]
// [Asm]   # save_ctx2  # live: [v6, v5, zero, v7]
// [Asm]   li v16, 32  # live: [v6, v5, v16, zero, v7]
// [Asm]   mv a0, v16  # live: [v6, v5, zero, a0, v7]
// [Asm]   call minimbt_print_char  # live: [v6, v5, zero, a0, v7]
// [Asm]   mv v12, a0  # live: [v6, v5, zero, v7]
// [Asm]   # restore_ctx2  # live: [v6, v5, zero, v7]
// [Asm]   addi v13, v5, 1  # live: [v6, zero, v13, v7]
// [Asm] # control
// [Asm]   mv v5, v13  # live: [v5, v6, zero, v7]
// [Asm]   mv v6, v6  # live: [v5, v6, zero, v7]
// [Asm]   mv v7, v7  # live: [v5, v6, zero, v7]
// [Asm]   j .aux.151_0  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v14], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v14]
// [Asm] # block parameters: []
// [Asm] .aux.151_1:
// [Asm] # control
// [Asm]   mv v14, zero  # live: [v14]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v14, a0], upward_exposed: [v14], params_defs: [v14]
// [Asm] # live_in: [v14], live_out: []
// [Asm] # block parameters: [v14]
// [Asm] .aux.151_3:
// [Asm] # control
// [Asm]   mv a0, v14  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] aux.150:
// [Asm] # block info: defs: [v3, v7, v4, v6, v5, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .aux.150_5:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm]   mv v6, v3  # live: [v4, v5, v6, zero]
// [Asm]   mv v7, v4  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v5, v6], upward_exposed: [v5, v6], params_defs: [v5, v6, v7]
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: [v5, v6, v7]
// [Asm] .aux.150_0:
// [Asm] # control
// [Asm]   bne v5, v6, .aux.150_2  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v29], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v29]
// [Asm] # block parameters: []
// [Asm] .aux.150_1:
// [Asm] # control
// [Asm]   mv v29, zero  # live: [v29]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v29, a0], upward_exposed: [v29], params_defs: [v29]
// [Asm] # live_in: [v29], live_out: []
// [Asm] # block parameters: [v29]
// [Asm] .aux.150_3:
// [Asm] # control
// [Asm]   mv a0, v29  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [], uses: [], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .aux.150_2:
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v10, v9], uses: [v5, v7], upward_exposed: [v5, v7], params_defs: []
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v10, zero, v7, v6, v9]
// [Asm] # block parameters: []
// [Asm] .aux.150_15:
// [Asm] # control
// [Asm]   mv v9, v7  # live: [v5, v6, zero, v9, v7]
// [Asm]   mv v10, v5  # live: [v5, v6, v10, zero, v9, v7]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v10, zero], upward_exposed: [v10, zero], params_defs: [v10, v9]
// [Asm] # live_in: [v5, v10, zero, v7, v6, v9], live_out: [v5, v10, zero, v7, v6, v9]
// [Asm] # block parameters: [v9, v10]
// [Asm] .aux.150_7:
// [Asm] # control
// [Asm]   beq v10, zero, .aux.150_8  # live: [v5, v6, v10, zero, v9, v7]
// [Asm] 
// [Asm] # block info: defs: [v14, v16, v12], uses: [v16, v14, v12, v10, v9], upward_exposed: [v10, v9], params_defs: []
// [Asm] # live_in: [v5, v10, zero, v7, v6, v9], live_out: [v5, v10, zero, v7, v6, v9]
// [Asm] # block parameters: []
// [Asm] .aux.150_9:
// [Asm]   addi v12, v10, -1  # live: [v5, v10, zero, v7, v6, v12, v9]
// [Asm]   th.lurw v14, v9, v12, 2  # live: [v5, v14, v10, zero, v7, v6, v9]
// [Asm]   th.lurw v16, v9, v10, 2  # live: [v5, v16, v14, v10, zero, v7, v6, v9]
// [Asm] # control
// [Asm]   bge v16, v14, .aux.150_10  # live: [v5, v6, v10, zero, v9, v7]
// [Asm] 
// [Asm] # block info: defs: [v19, v10, v20, v22], uses: [v19, v10, v9, v20, v22], upward_exposed: [v10, v9], params_defs: []
// [Asm] # live_in: [v5, v10, zero, v7, v6, v9], live_out: [v5, v10, zero, v7, v6, v9]
// [Asm] # block parameters: []
// [Asm] .aux.150_11:
// [Asm]   th.lurw v19, v9, v10, 2  # live: [v5, v10, zero, v7, v19, v6, v9]
// [Asm]   addi v20, v10, -1  # live: [v5, v10, zero, v20, v7, v19, v6, v9]
// [Asm]   th.lurw v22, v9, v20, 2  # live: [v5, v10, zero, v20, v22, v7, v19, v6, v9]
// [Asm]   th.surw v22, v9, v10, 2  # live: [v5, zero, v20, v7, v19, v6, v9]
// [Asm]   th.surw v19, v9, v20, 2  # live: [v5, zero, v20, v7, v6, v9]
// [Asm] # control
// [Asm]   mv v9, v9  # live: [v7, v5, v6, zero, v9, v20]
// [Asm]   mv v10, v20  # live: [v5, v6, v10, zero, v9, v7]
// [Asm]   j .aux.150_7  # live: [v5, v6, v10, zero, v9, v7]
// [Asm] 
// [Asm] # block info: defs: [v25], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v25, v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .aux.150_10:
// [Asm] # control
// [Asm]   mv v25, zero  # live: [v25, v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v26], uses: [v25], upward_exposed: [v25], params_defs: [v25]
// [Asm] # live_in: [v25, v5, v6, zero, v7], live_out: [v5, v6, v26, zero, v7]
// [Asm] # block parameters: [v25]
// [Asm] .aux.150_12:
// [Asm] # control
// [Asm]   mv v26, v25  # live: [v5, v6, v26, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v27], uses: [v26], upward_exposed: [v26], params_defs: [v26]
// [Asm] # live_in: [v5, v6, v26, zero, v7], live_out: [v5, v6, zero, v27, v7]
// [Asm] # block parameters: [v26]
// [Asm] .aux.150_13:
// [Asm] # control
// [Asm]   mv v27, v26  # live: [v5, v6, zero, v27, v7]
// [Asm] 
// [Asm] # block info: defs: [v5, v28], uses: [v5, v6, v28, v7], upward_exposed: [v5, v6, v7], params_defs: [v27]
// [Asm] # live_in: [v5, v6, zero, v27, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: [v27]
// [Asm] .aux.150_6:
// [Asm]   addi v28, v5, 1  # live: [v6, v28, zero, v7]
// [Asm] # control
// [Asm]   mv v5, v28  # live: [v5, v6, zero, v7]
// [Asm]   mv v6, v6  # live: [v5, v6, zero, v7]
// [Asm]   mv v7, v7  # live: [v5, v6, zero, v7]
// [Asm]   j .aux.150_0  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v26], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v6, v26, zero, v7]
// [Asm] # block parameters: []
// [Asm] .aux.150_8:
// [Asm] # control
// [Asm]   mv v26, zero  # live: [v5, v6, v26, zero, v7]
// [Asm]   j .aux.150_13  # live: [v5, v6, v26, zero, v7]
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 2013265920 # 2GB - 128MB
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 67108864 # 64MB
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux.148
// [Main]   .type aux.148, @function
// [Main] # leaf true
// [Main] aux.148:
// [Main] .aux.148_5:
// [Main]   mv a4, a0
// [Main]   mv a0, a2
// [Main]   mv a2, a4
// [Main]   mv a4, a0
// [Main] 
// [Main] .aux.148_0:
// [Main]   beq a2, a4, .aux.148_1
// [Main] 
// [Main] .aux.148_2:
// [Main]   li a0, 75
// [Main]   mul a0, a1, a0
// [Main]   addi a0, a0, 74
// [Main]   li a1, 65537
// [Main]   rem a0, a0, a1
// [Main]   th.surw a0, a3, a2, 2
// [Main]   addi a2, a2, 1
// [Main]   mv a1, a0
// [Main]   j .aux.148_0
// [Main] 
// [Main] .aux.148_1:
// [Main]   mv a0, zero
// [Main] 
// [Main] .aux.148_3:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.147
// [Main]   .type main.147, @function
// [Main] # leaf false
// [Main] main.147:
// [Main] .main.147_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   addi s0, s11, -400
// [Main]   andi s11, s0, -8
// [Main]   mv a0, zero
// [Main]   li a1, 12345
// [Main]   li a2, 100
// [Main]   mv a3, s0
// [Main]   call aux.148
// [Main]   li a0, 1
// [Main]   li a1, 100
// [Main]   mv a2, s0
// [Main]   call aux.150
// [Main]   mv a0, zero
// [Main]   li a1, 100
// [Main]   mv a2, s0
// [Main]   call aux.151
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call main.147
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux.151
// [Main]   .type aux.151, @function
// [Main] # leaf false
// [Main] aux.151:
// [Main] .aux.151_5:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   mv s2, a2
// [Main] 
// [Main] .aux.151_0:
// [Main]   beq s0, s1, .aux.151_1
// [Main] 
// [Main] .aux.151_2:
// [Main]   th.lurw a0, s2, s0, 2
// [Main]   call minimbt_print_int
// [Main]   li a0, 32
// [Main]   call minimbt_print_char
// [Main]   addi s0, s0, 1
// [Main]   j .aux.151_0
// [Main] 
// [Main] .aux.151_1:
// [Main]   mv a0, zero
// [Main] 
// [Main] .aux.151_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux.150
// [Main]   .type aux.150, @function
// [Main] # leaf true
// [Main] aux.150:
// [Main] .aux.150_5:
// [Main] 
// [Main] .aux.150_0:
// [Main]   bne a0, a1, .aux.150_2
// [Main] 
// [Main] .aux.150_1:
// [Main]   mv a0, zero
// [Main] 
// [Main] .aux.150_3:
// [Main]   ret
// [Main] 
// [Main] .aux.150_2:
// [Main] 
// [Main] .aux.150_15:
// [Main]   mv a3, a0
// [Main] 
// [Main] .aux.150_7:
// [Main]   beq a3, zero, .aux.150_8
// [Main] 
// [Main] .aux.150_9:
// [Main]   addi a4, a3, -1
// [Main]   th.lurw a4, a2, a4, 2
// [Main]   th.lurw a5, a2, a3, 2
// [Main]   bge a5, a4, .aux.150_10
// [Main] 
// [Main] .aux.150_11:
// [Main]   th.lurw a4, a2, a3, 2
// [Main]   addi a5, a3, -1
// [Main]   th.lurw a6, a2, a5, 2
// [Main]   th.surw a6, a2, a3, 2
// [Main]   th.surw a4, a2, a5, 2
// [Main]   mv a3, a5
// [Main]   j .aux.150_7
// [Main] 
// [Main] .aux.150_10:
// [Main]   mv a3, zero
// [Main] 
// [Main] .aux.150_12:
// [Main] 
// [Main] .aux.150_13:
// [Main] 
// [Main] .aux.150_6:
// [Main]   addi a0, a0, 1
// [Main]   j .aux.150_0
// [Main] 
// [Main] .aux.150_8:
// [Main]   mv a3, zero
// [Main]   j .aux.150_13
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Typer] resolve: LetRec({tyvars: [], name: ("random", Int), args: [("state", Int)], body: Prim(Prim(Var("state"), Int(75), Mul, kind=None), Int(74), Add, kind=None)}, LetRec({tyvars: [], name: ("modulo", Int), args: [("x", Int), ("y", Int)], body: Let(("q", Var(None)), Prim(Var("x"), Var("y"), Div, kind=None), Prim(Var("x"), Prim(Var("q"), Var("y"), Mul, kind=None), Sub, kind=None))}, LetRec({tyvars: [], name: ("fill_buffer", Unit), args: [("arr", Array[Int]), ("n", Int)], body: LetRec({tyvars: [], name: ("aux", Unit), args: [("i", Int), ("state", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("new_state", Var(None)), App(Var("random"), targs=None, [Var("state")]), Let(("res", Var(None)), App(Var("modulo"), targs=None, [Var("new_state"), Int(65537)]), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None), Var("res")])))))}, App(Var("aux"), targs=None, [Int(0), Int(12345)]))}, LetRec({tyvars: [], name: ("isort", Unit), args: [("arr", Array[Int]), ("n", Int)], body: LetRec({tyvars: [], name: ("insert", Unit), args: [("arr", Array[Int]), ("i", Int)], body: If(Eq(Var("i"), Int(0)), Unit, If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var(None)), Get(Var("arr"), Var("i")), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None))), Let(("_", Var(None)), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None), Var("tmp")), App(Var("insert"), targs=None, [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)]))))))}, LetRec({tyvars: [], name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var(None)), App(Var("insert"), targs=None, [Var("arr"), Var("i")]), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))}, App(Var("aux"), targs=None, [Int(1)])))}, LetRec({tyvars: [], name: ("print_array", Unit), args: [("arr", Array[Int]), ("n", Int)], body: LetRec({tyvars: [], name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var(None)), App(Var("print_int"), targs=None, [Get(Var("arr"), Var("i"))]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(32)]), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]))))}, App(Var("aux"), targs=None, [Int(0)]))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("n", Var(None)), Int(100), Let(("arr", Var(None)), Array(Var("n"), Int(0)), Let(("_", Var(None)), App(Var("fill_buffer"), targs=None, [Var("arr"), Var("n")]), Let(("_", Var(None)), App(Var("isort"), targs=None, [Var("arr"), Var("n")]), App(Var("print_array"), targs=None, [Var("arr"), Var("n")])))))}, Unit))))))
// [Typer] resolve: Prim(Prim(Var("state"), Int(75), Mul, kind=None), Int(74), Add, kind=None)
// [Typer] resolve: Prim(Var("state"), Int(75), Mul, kind=None)
// [Typer] resolve: Var("state")
// [Typer] resolve: Int(75)
// [Typer] resolve: Int(74)
// [Typer] resolve: LetRec({tyvars: [], name: ("modulo", Int), args: [("x", Int), ("y", Int)], body: Let(("q", Var(None)), Prim(Var("x"), Var("y"), Div, kind=None), Prim(Var("x"), Prim(Var("q"), Var("y"), Mul, kind=None), Sub, kind=None))}, LetRec({tyvars: [], name: ("fill_buffer", Unit), args: [("arr", Array[Int]), ("n", Int)], body: LetRec({tyvars: [], name: ("aux", Unit), args: [("i", Int), ("state", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("new_state", Var(None)), App(Var("random"), targs=None, [Var("state")]), Let(("res", Var(None)), App(Var("modulo"), targs=None, [Var("new_state"), Int(65537)]), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None), Var("res")])))))}, App(Var("aux"), targs=None, [Int(0), Int(12345)]))}, LetRec({tyvars: [], name: ("isort", Unit), args: [("arr", Array[Int]), ("n", Int)], body: LetRec({tyvars: [], name: ("insert", Unit), args: [("arr", Array[Int]), ("i", Int)], body: If(Eq(Var("i"), Int(0)), Unit, If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var(None)), Get(Var("arr"), Var("i")), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None))), Let(("_", Var(None)), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None), Var("tmp")), App(Var("insert"), targs=None, [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)]))))))}, LetRec({tyvars: [], name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var(None)), App(Var("insert"), targs=None, [Var("arr"), Var("i")]), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))}, App(Var("aux"), targs=None, [Int(1)])))}, LetRec({tyvars: [], name: ("print_array", Unit), args: [("arr", Array[Int]), ("n", Int)], body: LetRec({tyvars: [], name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var(None)), App(Var("print_int"), targs=None, [Get(Var("arr"), Var("i"))]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(32)]), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]))))}, App(Var("aux"), targs=None, [Int(0)]))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("n", Var(None)), Int(100), Let(("arr", Var(None)), Array(Var("n"), Int(0)), Let(("_", Var(None)), App(Var("fill_buffer"), targs=None, [Var("arr"), Var("n")]), Let(("_", Var(None)), App(Var("isort"), targs=None, [Var("arr"), Var("n")]), App(Var("print_array"), targs=None, [Var("arr"), Var("n")])))))}, Unit)))))
// [Typer] resolve: Let(("q", Var(None)), Prim(Var("x"), Var("y"), Div, kind=None), Prim(Var("x"), Prim(Var("q"), Var("y"), Mul, kind=None), Sub, kind=None))
// [Typer] resolve: Prim(Var("x"), Var("y"), Div, kind=None)
// [Typer] resolve: Var("x")
// [Typer] resolve: Var("y")
// [Typer] resolve: Prim(Var("x"), Prim(Var("q"), Var("y"), Mul, kind=None), Sub, kind=None)
// [Typer] resolve: Var("x")
// [Typer] resolve: Prim(Var("q"), Var("y"), Mul, kind=None)
// [Typer] resolve: Var("q")
// [Typer] resolve: Var("y")
// [Typer] resolve: LetRec({tyvars: [], name: ("fill_buffer", Unit), args: [("arr", Array[Int]), ("n", Int)], body: LetRec({tyvars: [], name: ("aux", Unit), args: [("i", Int), ("state", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("new_state", Var(None)), App(Var("random"), targs=None, [Var("state")]), Let(("res", Var(None)), App(Var("modulo"), targs=None, [Var("new_state"), Int(65537)]), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None), Var("res")])))))}, App(Var("aux"), targs=None, [Int(0), Int(12345)]))}, LetRec({tyvars: [], name: ("isort", Unit), args: [("arr", Array[Int]), ("n", Int)], body: LetRec({tyvars: [], name: ("insert", Unit), args: [("arr", Array[Int]), ("i", Int)], body: If(Eq(Var("i"), Int(0)), Unit, If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var(None)), Get(Var("arr"), Var("i")), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None))), Let(("_", Var(None)), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None), Var("tmp")), App(Var("insert"), targs=None, [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)]))))))}, LetRec({tyvars: [], name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var(None)), App(Var("insert"), targs=None, [Var("arr"), Var("i")]), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))}, App(Var("aux"), targs=None, [Int(1)])))}, LetRec({tyvars: [], name: ("print_array", Unit), args: [("arr", Array[Int]), ("n", Int)], body: LetRec({tyvars: [], name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var(None)), App(Var("print_int"), targs=None, [Get(Var("arr"), Var("i"))]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(32)]), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]))))}, App(Var("aux"), targs=None, [Int(0)]))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("n", Var(None)), Int(100), Let(("arr", Var(None)), Array(Var("n"), Int(0)), Let(("_", Var(None)), App(Var("fill_buffer"), targs=None, [Var("arr"), Var("n")]), Let(("_", Var(None)), App(Var("isort"), targs=None, [Var("arr"), Var("n")]), App(Var("print_array"), targs=None, [Var("arr"), Var("n")])))))}, Unit))))
// [Typer] resolve: LetRec({tyvars: [], name: ("aux", Unit), args: [("i", Int), ("state", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("new_state", Var(None)), App(Var("random"), targs=None, [Var("state")]), Let(("res", Var(None)), App(Var("modulo"), targs=None, [Var("new_state"), Int(65537)]), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None), Var("res")])))))}, App(Var("aux"), targs=None, [Int(0), Int(12345)]))
// [Typer] resolve: If(Eq(Var("i"), Var("n")), Unit, Let(("new_state", Var(None)), App(Var("random"), targs=None, [Var("state")]), Let(("res", Var(None)), App(Var("modulo"), targs=None, [Var("new_state"), Int(65537)]), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None), Var("res")])))))
// [Typer] resolve: Eq(Var("i"), Var("n"))
// [Typer] resolve: Var("i")
// [Typer] resolve: Var("n")
// [Typer] resolve: Unit
// [Typer] resolve: Let(("new_state", Var(None)), App(Var("random"), targs=None, [Var("state")]), Let(("res", Var(None)), App(Var("modulo"), targs=None, [Var("new_state"), Int(65537)]), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None), Var("res")]))))
// [Typer] resolve: App(Var("random"), targs=None, [Var("state")])
// [Typer] resolve: Var("state")
// [Typer] resolve: Var("random")
// [Typer] resolve: Let(("res", Var(None)), App(Var("modulo"), targs=None, [Var("new_state"), Int(65537)]), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None), Var("res")])))
// [Typer] resolve: App(Var("modulo"), targs=None, [Var("new_state"), Int(65537)])
// [Typer] resolve: Var("new_state")
// [Typer] resolve: Int(65537)
// [Typer] resolve: Var("modulo")
// [Typer] resolve: Let(("_", Var(None)), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None), Var("res")]))
// [Typer] resolve: Put(Var("arr"), Var("i"), Var("res"))
// [Typer] resolve: Var("arr")
// [Typer] resolve: Var("i")
// [Typer] resolve: Var("res")
// [Typer] resolve: App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None), Var("res")])
// [Typer] resolve: Prim(Var("i"), Int(1), Add, kind=None)
// [Typer] resolve: Var("i")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("res")
// [Typer] resolve: Var("aux")
// [Typer] resolve: App(Var("aux"), targs=None, [Int(0), Int(12345)])
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(12345)
// [Typer] resolve: Var("aux")
// [Typer] resolve: LetRec({tyvars: [], name: ("isort", Unit), args: [("arr", Array[Int]), ("n", Int)], body: LetRec({tyvars: [], name: ("insert", Unit), args: [("arr", Array[Int]), ("i", Int)], body: If(Eq(Var("i"), Int(0)), Unit, If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var(None)), Get(Var("arr"), Var("i")), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None))), Let(("_", Var(None)), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None), Var("tmp")), App(Var("insert"), targs=None, [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)]))))))}, LetRec({tyvars: [], name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var(None)), App(Var("insert"), targs=None, [Var("arr"), Var("i")]), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))}, App(Var("aux"), targs=None, [Int(1)])))}, LetRec({tyvars: [], name: ("print_array", Unit), args: [("arr", Array[Int]), ("n", Int)], body: LetRec({tyvars: [], name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var(None)), App(Var("print_int"), targs=None, [Get(Var("arr"), Var("i"))]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(32)]), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]))))}, App(Var("aux"), targs=None, [Int(0)]))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("n", Var(None)), Int(100), Let(("arr", Var(None)), Array(Var("n"), Int(0)), Let(("_", Var(None)), App(Var("fill_buffer"), targs=None, [Var("arr"), Var("n")]), Let(("_", Var(None)), App(Var("isort"), targs=None, [Var("arr"), Var("n")]), App(Var("print_array"), targs=None, [Var("arr"), Var("n")])))))}, Unit)))
// [Typer] resolve: LetRec({tyvars: [], name: ("insert", Unit), args: [("arr", Array[Int]), ("i", Int)], body: If(Eq(Var("i"), Int(0)), Unit, If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var(None)), Get(Var("arr"), Var("i")), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None))), Let(("_", Var(None)), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None), Var("tmp")), App(Var("insert"), targs=None, [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)]))))))}, LetRec({tyvars: [], name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var(None)), App(Var("insert"), targs=None, [Var("arr"), Var("i")]), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))}, App(Var("aux"), targs=None, [Int(1)])))
// [Typer] resolve: If(Eq(Var("i"), Int(0)), Unit, If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var(None)), Get(Var("arr"), Var("i")), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None))), Let(("_", Var(None)), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None), Var("tmp")), App(Var("insert"), targs=None, [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)]))))))
// [Typer] resolve: Eq(Var("i"), Int(0))
// [Typer] resolve: Var("i")
// [Typer] resolve: Int(0)
// [Typer] resolve: Unit
// [Typer] resolve: If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var(None)), Get(Var("arr"), Var("i")), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None))), Let(("_", Var(None)), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None), Var("tmp")), App(Var("insert"), targs=None, [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)])))))
// [Typer] resolve: LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)), Get(Var("arr"), Var("i")))
// [Typer] resolve: Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None))
// [Typer] resolve: Var("arr")
// [Typer] resolve: Prim(Var("i"), Int(1), Sub, kind=None)
// [Typer] resolve: Var("i")
// [Typer] resolve: Int(1)
// [Typer] resolve: Get(Var("arr"), Var("i"))
// [Typer] resolve: Var("arr")
// [Typer] resolve: Var("i")
// [Typer] resolve: Unit
// [Typer] resolve: Let(("tmp", Var(None)), Get(Var("arr"), Var("i")), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None))), Let(("_", Var(None)), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None), Var("tmp")), App(Var("insert"), targs=None, [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)]))))
// [Typer] resolve: Get(Var("arr"), Var("i"))
// [Typer] resolve: Var("arr")
// [Typer] resolve: Var("i")
// [Typer] resolve: Let(("_", Var(None)), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None))), Let(("_", Var(None)), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None), Var("tmp")), App(Var("insert"), targs=None, [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)])))
// [Typer] resolve: Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)))
// [Typer] resolve: Var("arr")
// [Typer] resolve: Var("i")
// [Typer] resolve: Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None))
// [Typer] resolve: Var("arr")
// [Typer] resolve: Prim(Var("i"), Int(1), Sub, kind=None)
// [Typer] resolve: Var("i")
// [Typer] resolve: Int(1)
// [Typer] resolve: Let(("_", Var(None)), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None), Var("tmp")), App(Var("insert"), targs=None, [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)]))
// [Typer] resolve: Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None), Var("tmp"))
// [Typer] resolve: Var("arr")
// [Typer] resolve: Prim(Var("i"), Int(1), Sub, kind=None)
// [Typer] resolve: Var("i")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("tmp")
// [Typer] resolve: App(Var("insert"), targs=None, [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)])
// [Typer] resolve: Var("arr")
// [Typer] resolve: Prim(Var("i"), Int(1), Sub, kind=None)
// [Typer] resolve: Var("i")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("insert")
// [Typer] resolve: LetRec({tyvars: [], name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var(None)), App(Var("insert"), targs=None, [Var("arr"), Var("i")]), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))}, App(Var("aux"), targs=None, [Int(1)]))
// [Typer] resolve: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var(None)), App(Var("insert"), targs=None, [Var("arr"), Var("i")]), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))
// [Typer] resolve: Eq(Var("i"), Var("n"))
// [Typer] resolve: Var("i")
// [Typer] resolve: Var("n")
// [Typer] resolve: Unit
// [Typer] resolve: Let(("_", Var(None)), App(Var("insert"), targs=None, [Var("arr"), Var("i")]), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]))
// [Typer] resolve: App(Var("insert"), targs=None, [Var("arr"), Var("i")])
// [Typer] resolve: Var("arr")
// [Typer] resolve: Var("i")
// [Typer] resolve: Var("insert")
// [Typer] resolve: App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])
// [Typer] resolve: Prim(Var("i"), Int(1), Add, kind=None)
// [Typer] resolve: Var("i")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("aux")
// [Typer] resolve: App(Var("aux"), targs=None, [Int(1)])
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("aux")
// [Typer] resolve: LetRec({tyvars: [], name: ("print_array", Unit), args: [("arr", Array[Int]), ("n", Int)], body: LetRec({tyvars: [], name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var(None)), App(Var("print_int"), targs=None, [Get(Var("arr"), Var("i"))]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(32)]), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]))))}, App(Var("aux"), targs=None, [Int(0)]))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("n", Var(None)), Int(100), Let(("arr", Var(None)), Array(Var("n"), Int(0)), Let(("_", Var(None)), App(Var("fill_buffer"), targs=None, [Var("arr"), Var("n")]), Let(("_", Var(None)), App(Var("isort"), targs=None, [Var("arr"), Var("n")]), App(Var("print_array"), targs=None, [Var("arr"), Var("n")])))))}, Unit))
// [Typer] resolve: LetRec({tyvars: [], name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var(None)), App(Var("print_int"), targs=None, [Get(Var("arr"), Var("i"))]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(32)]), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]))))}, App(Var("aux"), targs=None, [Int(0)]))
// [Typer] resolve: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var(None)), App(Var("print_int"), targs=None, [Get(Var("arr"), Var("i"))]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(32)]), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]))))
// [Typer] resolve: Eq(Var("i"), Var("n"))
// [Typer] resolve: Var("i")
// [Typer] resolve: Var("n")
// [Typer] resolve: Unit
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), targs=None, [Get(Var("arr"), Var("i"))]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(32)]), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))
// [Typer] resolve: App(Var("print_int"), targs=None, [Get(Var("arr"), Var("i"))])
// [Typer] resolve: Get(Var("arr"), Var("i"))
// [Typer] resolve: Var("arr")
// [Typer] resolve: Var("i")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(32)]), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]))
// [Typer] resolve: App(Var("print_char"), targs=None, [Int(32)])
// [Typer] resolve: Int(32)
// [Typer] resolve: Var("print_char")
// [Typer] resolve: App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])
// [Typer] resolve: Prim(Var("i"), Int(1), Add, kind=None)
// [Typer] resolve: Var("i")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("aux")
// [Typer] resolve: App(Var("aux"), targs=None, [Int(0)])
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("aux")
// [Typer] resolve: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("n", Var(None)), Int(100), Let(("arr", Var(None)), Array(Var("n"), Int(0)), Let(("_", Var(None)), App(Var("fill_buffer"), targs=None, [Var("arr"), Var("n")]), Let(("_", Var(None)), App(Var("isort"), targs=None, [Var("arr"), Var("n")]), App(Var("print_array"), targs=None, [Var("arr"), Var("n")])))))}, Unit)
// [Typer] resolve: Let(("n", Var(None)), Int(100), Let(("arr", Var(None)), Array(Var("n"), Int(0)), Let(("_", Var(None)), App(Var("fill_buffer"), targs=None, [Var("arr"), Var("n")]), Let(("_", Var(None)), App(Var("isort"), targs=None, [Var("arr"), Var("n")]), App(Var("print_array"), targs=None, [Var("arr"), Var("n")])))))
// [Typer] resolve: Int(100)
// [Typer] resolve: Let(("arr", Var(None)), Array(Var("n"), Int(0)), Let(("_", Var(None)), App(Var("fill_buffer"), targs=None, [Var("arr"), Var("n")]), Let(("_", Var(None)), App(Var("isort"), targs=None, [Var("arr"), Var("n")]), App(Var("print_array"), targs=None, [Var("arr"), Var("n")]))))
// [Typer] resolve: Array(Var("n"), Int(0))
// [Typer] resolve: Var("n")
// [Typer] resolve: Int(0)
// [Typer] resolve: Let(("_", Var(None)), App(Var("fill_buffer"), targs=None, [Var("arr"), Var("n")]), Let(("_", Var(None)), App(Var("isort"), targs=None, [Var("arr"), Var("n")]), App(Var("print_array"), targs=None, [Var("arr"), Var("n")])))
// [Typer] resolve: App(Var("fill_buffer"), targs=None, [Var("arr"), Var("n")])
// [Typer] resolve: Var("arr")
// [Typer] resolve: Var("n")
// [Typer] resolve: Var("fill_buffer")
// [Typer] resolve: Let(("_", Var(None)), App(Var("isort"), targs=None, [Var("arr"), Var("n")]), App(Var("print_array"), targs=None, [Var("arr"), Var("n")]))
// [Typer] resolve: App(Var("isort"), targs=None, [Var("arr"), Var("n")])
// [Typer] resolve: Var("arr")
// [Typer] resolve: Var("n")
// [Typer] resolve: Var("isort")
// [Typer] resolve: App(Var("print_array"), targs=None, [Var("arr"), Var("n")])
// [Typer] resolve: Var("arr")
// [Typer] resolve: Var("n")
// [Typer] resolve: Var("print_array")
// [Typer] resolve: Unit
// [Typer] check: LetRec({tyvars: [], name: ("random", Int), args: [("state", Int)], body: Prim(Prim(Var("state"), Int(75), Mul, kind=None), Int(74), Add, kind=None)}, LetRec({tyvars: [], name: ("modulo", Int), args: [("x", Int), ("y", Int)], body: Let(("q", Var(None)), Prim(Var("x"), Var("y"), Div, kind=None), Prim(Var("x"), Prim(Var("q"), Var("y"), Mul, kind=None), Sub, kind=None))}, LetRec({tyvars: [], name: ("fill_buffer", Unit), args: [("arr", Array[Int]), ("n", Int)], body: LetRec({tyvars: [], name: ("aux", Unit), args: [("i", Int), ("state", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("new_state", Var(None)), App(Var("random"), targs=None, [Var("state")]), Let(("res", Var(None)), App(Var("modulo"), targs=None, [Var("new_state"), Int(65537)]), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None), Var("res")])))))}, App(Var("aux"), targs=None, [Int(0), Int(12345)]))}, LetRec({tyvars: [], name: ("isort", Unit), args: [("arr", Array[Int]), ("n", Int)], body: LetRec({tyvars: [], name: ("insert", Unit), args: [("arr", Array[Int]), ("i", Int)], body: If(Eq(Var("i"), Int(0)), Unit, If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var(None)), Get(Var("arr"), Var("i")), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None))), Let(("_", Var(None)), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None), Var("tmp")), App(Var("insert"), targs=None, [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)]))))))}, LetRec({tyvars: [], name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var(None)), App(Var("insert"), targs=None, [Var("arr"), Var("i")]), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))}, App(Var("aux"), targs=None, [Int(1)])))}, LetRec({tyvars: [], name: ("print_array", Unit), args: [("arr", Array[Int]), ("n", Int)], body: LetRec({tyvars: [], name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var(None)), App(Var("print_int"), targs=None, [Get(Var("arr"), Var("i"))]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(32)]), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]))))}, App(Var("aux"), targs=None, [Int(0)]))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("n", Var(None)), Int(100), Let(("arr", Var(None)), Array(Var("n"), Int(0)), Let(("_", Var(None)), App(Var("fill_buffer"), targs=None, [Var("arr"), Var("n")]), Let(("_", Var(None)), App(Var("isort"), targs=None, [Var("arr"), Var("n")]), App(Var("print_array"), targs=None, [Var("arr"), Var("n")])))))}, Unit)))))) against Unit
// [Typer] typevars: []
// [Typer] check: Prim(Prim(Var("state"), Int(75), Mul, kind=None), Int(74), Add, kind=None) against Int
// [Typer] check: Prim(Var("state"), Int(75), Mul, kind=None) against Int
// [Typer] check: Var("state") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(75) against Int
// [Typer] check: Int(74) against Int
// [Typer] check: LetRec({tyvars: [], name: ("modulo", Int), args: [("x", Int), ("y", Int)], body: Let(("q", Var(None)), Prim(Var("x"), Var("y"), Div, kind=None), Prim(Var("x"), Prim(Var("q"), Var("y"), Mul, kind=None), Sub, kind=None))}, LetRec({tyvars: [], name: ("fill_buffer", Unit), args: [("arr", Array[Int]), ("n", Int)], body: LetRec({tyvars: [], name: ("aux", Unit), args: [("i", Int), ("state", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("new_state", Var(None)), App(Var("random"), targs=None, [Var("state")]), Let(("res", Var(None)), App(Var("modulo"), targs=None, [Var("new_state"), Int(65537)]), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None), Var("res")])))))}, App(Var("aux"), targs=None, [Int(0), Int(12345)]))}, LetRec({tyvars: [], name: ("isort", Unit), args: [("arr", Array[Int]), ("n", Int)], body: LetRec({tyvars: [], name: ("insert", Unit), args: [("arr", Array[Int]), ("i", Int)], body: If(Eq(Var("i"), Int(0)), Unit, If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var(None)), Get(Var("arr"), Var("i")), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None))), Let(("_", Var(None)), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None), Var("tmp")), App(Var("insert"), targs=None, [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)]))))))}, LetRec({tyvars: [], name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var(None)), App(Var("insert"), targs=None, [Var("arr"), Var("i")]), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))}, App(Var("aux"), targs=None, [Int(1)])))}, LetRec({tyvars: [], name: ("print_array", Unit), args: [("arr", Array[Int]), ("n", Int)], body: LetRec({tyvars: [], name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var(None)), App(Var("print_int"), targs=None, [Get(Var("arr"), Var("i"))]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(32)]), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]))))}, App(Var("aux"), targs=None, [Int(0)]))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("n", Var(None)), Int(100), Let(("arr", Var(None)), Array(Var("n"), Int(0)), Let(("_", Var(None)), App(Var("fill_buffer"), targs=None, [Var("arr"), Var("n")]), Let(("_", Var(None)), App(Var("isort"), targs=None, [Var("arr"), Var("n")]), App(Var("print_array"), targs=None, [Var("arr"), Var("n")])))))}, Unit))))) against Unit
// [Typer] typevars: []
// [Typer] check: Let(("q", Var(None)), Prim(Var("x"), Var("y"), Div, kind=None), Prim(Var("x"), Prim(Var("q"), Var("y"), Mul, kind=None), Sub, kind=None)) against Int
// [Typer] infer: Prim(Var("x"), Var("y"), Div, kind=None)
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("y")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Prim(Var("x"), Prim(Var("q"), Var("y"), Mul, kind=None), Sub, kind=None) against Int
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Prim(Var("q"), Var("y"), Mul, kind=None) against Int
// [Typer] check: Var("q") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("y") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("fill_buffer", Unit), args: [("arr", Array[Int]), ("n", Int)], body: LetRec({tyvars: [], name: ("aux", Unit), args: [("i", Int), ("state", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("new_state", Var(None)), App(Var("random"), targs=None, [Var("state")]), Let(("res", Var(None)), App(Var("modulo"), targs=None, [Var("new_state"), Int(65537)]), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None), Var("res")])))))}, App(Var("aux"), targs=None, [Int(0), Int(12345)]))}, LetRec({tyvars: [], name: ("isort", Unit), args: [("arr", Array[Int]), ("n", Int)], body: LetRec({tyvars: [], name: ("insert", Unit), args: [("arr", Array[Int]), ("i", Int)], body: If(Eq(Var("i"), Int(0)), Unit, If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var(None)), Get(Var("arr"), Var("i")), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None))), Let(("_", Var(None)), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None), Var("tmp")), App(Var("insert"), targs=None, [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)]))))))}, LetRec({tyvars: [], name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var(None)), App(Var("insert"), targs=None, [Var("arr"), Var("i")]), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))}, App(Var("aux"), targs=None, [Int(1)])))}, LetRec({tyvars: [], name: ("print_array", Unit), args: [("arr", Array[Int]), ("n", Int)], body: LetRec({tyvars: [], name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var(None)), App(Var("print_int"), targs=None, [Get(Var("arr"), Var("i"))]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(32)]), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]))))}, App(Var("aux"), targs=None, [Int(0)]))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("n", Var(None)), Int(100), Let(("arr", Var(None)), Array(Var("n"), Int(0)), Let(("_", Var(None)), App(Var("fill_buffer"), targs=None, [Var("arr"), Var("n")]), Let(("_", Var(None)), App(Var("isort"), targs=None, [Var("arr"), Var("n")]), App(Var("print_array"), targs=None, [Var("arr"), Var("n")])))))}, Unit)))) against Unit
// [Typer] typevars: []
// [Typer] check: LetRec({tyvars: [], name: ("aux", Unit), args: [("i", Int), ("state", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("new_state", Var(None)), App(Var("random"), targs=None, [Var("state")]), Let(("res", Var(None)), App(Var("modulo"), targs=None, [Var("new_state"), Int(65537)]), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None), Var("res")])))))}, App(Var("aux"), targs=None, [Int(0), Int(12345)])) against Unit
// [Typer] typevars: []
// [Typer] check: If(Eq(Var("i"), Var("n")), Unit, Let(("new_state", Var(None)), App(Var("random"), targs=None, [Var("state")]), Let(("res", Var(None)), App(Var("modulo"), targs=None, [Var("new_state"), Int(65537)]), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None), Var("res")]))))) against Unit
// [Typer] check: Eq(Var("i"), Var("n")) against Bool
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Unit against Unit
// [Typer] check: Let(("new_state", Var(None)), App(Var("random"), targs=None, [Var("state")]), Let(("res", Var(None)), App(Var("modulo"), targs=None, [Var("new_state"), Int(65537)]), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None), Var("res")])))) against Unit
// [Typer] infer: App(Var("random"), targs=None, [Var("state")])
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] check: Var("state") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("res", Var(None)), App(Var("modulo"), targs=None, [Var("new_state"), Int(65537)]), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None), Var("res")]))) against Unit
// [Typer] infer: App(Var("modulo"), targs=None, [Var("new_state"), Int(65537)])
// [Typer] inst: TypeScheme(([], (Int, Int) -> Int))
// [Typer] inst result: (Int, Int) -> Int
// [Typer] check: Var("new_state") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(65537) against Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("_", Var(None)), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None), Var("res")])) against Unit
// [Typer] infer: Put(Var("arr"), Var("i"), Var("res"))
// [Typer] infer: Var("res")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] check: Var("arr") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None), Var("res")]) against Unit
// [Typer] infer: Prim(Var("i"), Int(1), Add, kind=None)
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] infer: Var("res")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] inst: TypeScheme(([], (Int, Int) -> Unit))
// [Typer] inst result: (Int, Int) -> Unit
// [Typer] unify: (Int, Int) -> Unit and (Int, Int) -> Unit
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: App(Var("aux"), targs=None, [Int(0), Int(12345)]) against Unit
// [Typer] infer: Int(0)
// [Typer] infer: Int(12345)
// [Typer] inst: TypeScheme(([], (Int, Int) -> Unit))
// [Typer] inst result: (Int, Int) -> Unit
// [Typer] unify: (Int, Int) -> Unit and (Int, Int) -> Unit
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: LetRec({tyvars: [], name: ("isort", Unit), args: [("arr", Array[Int]), ("n", Int)], body: LetRec({tyvars: [], name: ("insert", Unit), args: [("arr", Array[Int]), ("i", Int)], body: If(Eq(Var("i"), Int(0)), Unit, If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var(None)), Get(Var("arr"), Var("i")), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None))), Let(("_", Var(None)), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None), Var("tmp")), App(Var("insert"), targs=None, [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)]))))))}, LetRec({tyvars: [], name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var(None)), App(Var("insert"), targs=None, [Var("arr"), Var("i")]), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))}, App(Var("aux"), targs=None, [Int(1)])))}, LetRec({tyvars: [], name: ("print_array", Unit), args: [("arr", Array[Int]), ("n", Int)], body: LetRec({tyvars: [], name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var(None)), App(Var("print_int"), targs=None, [Get(Var("arr"), Var("i"))]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(32)]), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]))))}, App(Var("aux"), targs=None, [Int(0)]))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("n", Var(None)), Int(100), Let(("arr", Var(None)), Array(Var("n"), Int(0)), Let(("_", Var(None)), App(Var("fill_buffer"), targs=None, [Var("arr"), Var("n")]), Let(("_", Var(None)), App(Var("isort"), targs=None, [Var("arr"), Var("n")]), App(Var("print_array"), targs=None, [Var("arr"), Var("n")])))))}, Unit))) against Unit
// [Typer] typevars: []
// [Typer] check: LetRec({tyvars: [], name: ("insert", Unit), args: [("arr", Array[Int]), ("i", Int)], body: If(Eq(Var("i"), Int(0)), Unit, If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var(None)), Get(Var("arr"), Var("i")), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None))), Let(("_", Var(None)), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None), Var("tmp")), App(Var("insert"), targs=None, [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)]))))))}, LetRec({tyvars: [], name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var(None)), App(Var("insert"), targs=None, [Var("arr"), Var("i")]), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))}, App(Var("aux"), targs=None, [Int(1)]))) against Unit
// [Typer] typevars: []
// [Typer] check: If(Eq(Var("i"), Int(0)), Unit, If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var(None)), Get(Var("arr"), Var("i")), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None))), Let(("_", Var(None)), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None), Var("tmp")), App(Var("insert"), targs=None, [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)])))))) against Unit
// [Typer] check: Eq(Var("i"), Int(0)) against Bool
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(0)
// [Typer] unify: Int and Int
// [Typer] check: Unit against Unit
// [Typer] check: If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var(None)), Get(Var("arr"), Var("i")), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None))), Let(("_", Var(None)), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None), Var("tmp")), App(Var("insert"), targs=None, [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)]))))) against Unit
// [Typer] check: LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)), Get(Var("arr"), Var("i"))) against Bool
// [Typer] infer: Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None))
// [Typer] infer: Var("arr")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Prim(Var("i"), Int(1), Sub, kind=None) against Int
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] infer: Get(Var("arr"), Var("i"))
// [Typer] infer: Var("arr")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: Unit against Unit
// [Typer] check: Let(("tmp", Var(None)), Get(Var("arr"), Var("i")), Let(("_", Var(None)), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None))), Let(("_", Var(None)), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None), Var("tmp")), App(Var("insert"), targs=None, [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)])))) against Unit
// [Typer] infer: Get(Var("arr"), Var("i"))
// [Typer] infer: Var("arr")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("_", Var(None)), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None))), Let(("_", Var(None)), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None), Var("tmp")), App(Var("insert"), targs=None, [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)]))) against Unit
// [Typer] infer: Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)))
// [Typer] infer: Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None))
// [Typer] infer: Var("arr")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Prim(Var("i"), Int(1), Sub, kind=None) against Int
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Var("arr") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Let(("_", Var(None)), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None), Var("tmp")), App(Var("insert"), targs=None, [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)])) against Unit
// [Typer] infer: Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None), Var("tmp"))
// [Typer] infer: Var("tmp")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] check: Var("arr") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Prim(Var("i"), Int(1), Sub, kind=None) against Int
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: App(Var("insert"), targs=None, [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=None)]) against Unit
// [Typer] infer: Var("arr")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] infer: Prim(Var("i"), Int(1), Sub, kind=None)
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] inst: TypeScheme(([], (Array[Int], Int) -> Unit))
// [Typer] inst result: (Array[Int], Int) -> Unit
// [Typer] unify: (Array[Int], Int) -> Unit and (Array[Int], Int) -> Unit
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: LetRec({tyvars: [], name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var(None)), App(Var("insert"), targs=None, [Var("arr"), Var("i")]), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))}, App(Var("aux"), targs=None, [Int(1)])) against Unit
// [Typer] typevars: []
// [Typer] check: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var(None)), App(Var("insert"), targs=None, [Var("arr"), Var("i")]), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]))) against Unit
// [Typer] check: Eq(Var("i"), Var("n")) against Bool
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Unit against Unit
// [Typer] check: Let(("_", Var(None)), App(Var("insert"), targs=None, [Var("arr"), Var("i")]), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])) against Unit
// [Typer] infer: App(Var("insert"), targs=None, [Var("arr"), Var("i")])
// [Typer] inst: TypeScheme(([], (Array[Int], Int) -> Unit))
// [Typer] inst result: (Array[Int], Int) -> Unit
// [Typer] check: Var("arr") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]) against Unit
// [Typer] infer: Prim(Var("i"), Int(1), Add, kind=None)
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] unify: (Int) -> Unit and (Int) -> Unit
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: App(Var("aux"), targs=None, [Int(1)]) against Unit
// [Typer] infer: Int(1)
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] unify: (Int) -> Unit and (Int) -> Unit
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: LetRec({tyvars: [], name: ("print_array", Unit), args: [("arr", Array[Int]), ("n", Int)], body: LetRec({tyvars: [], name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var(None)), App(Var("print_int"), targs=None, [Get(Var("arr"), Var("i"))]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(32)]), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]))))}, App(Var("aux"), targs=None, [Int(0)]))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("n", Var(None)), Int(100), Let(("arr", Var(None)), Array(Var("n"), Int(0)), Let(("_", Var(None)), App(Var("fill_buffer"), targs=None, [Var("arr"), Var("n")]), Let(("_", Var(None)), App(Var("isort"), targs=None, [Var("arr"), Var("n")]), App(Var("print_array"), targs=None, [Var("arr"), Var("n")])))))}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: LetRec({tyvars: [], name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var(None)), App(Var("print_int"), targs=None, [Get(Var("arr"), Var("i"))]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(32)]), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]))))}, App(Var("aux"), targs=None, [Int(0)])) against Unit
// [Typer] typevars: []
// [Typer] check: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var(None)), App(Var("print_int"), targs=None, [Get(Var("arr"), Var("i"))]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(32)]), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])))) against Unit
// [Typer] check: Eq(Var("i"), Var("n")) against Bool
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Unit against Unit
// [Typer] check: Let(("_", Var(None)), App(Var("print_int"), targs=None, [Get(Var("arr"), Var("i"))]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(32)]), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]))) against Unit
// [Typer] infer: App(Var("print_int"), targs=None, [Get(Var("arr"), Var("i"))])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Get(Var("arr"), Var("i")) against Int
// [Typer] check: Var("arr") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(32)]), App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])) against Unit
// [Typer] infer: App(Var("print_char"), targs=None, [Int(32)])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Int(32) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: App(Var("aux"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]) against Unit
// [Typer] infer: Prim(Var("i"), Int(1), Add, kind=None)
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] unify: (Int) -> Unit and (Int) -> Unit
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: App(Var("aux"), targs=None, [Int(0)]) against Unit
// [Typer] infer: Int(0)
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] unify: (Int) -> Unit and (Int) -> Unit
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("n", Var(None)), Int(100), Let(("arr", Var(None)), Array(Var("n"), Int(0)), Let(("_", Var(None)), App(Var("fill_buffer"), targs=None, [Var("arr"), Var("n")]), Let(("_", Var(None)), App(Var("isort"), targs=None, [Var("arr"), Var("n")]), App(Var("print_array"), targs=None, [Var("arr"), Var("n")])))))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("n", Var(None)), Int(100), Let(("arr", Var(None)), Array(Var("n"), Int(0)), Let(("_", Var(None)), App(Var("fill_buffer"), targs=None, [Var("arr"), Var("n")]), Let(("_", Var(None)), App(Var("isort"), targs=None, [Var("arr"), Var("n")]), App(Var("print_array"), targs=None, [Var("arr"), Var("n")])))))
// [Typer] infer: Int(100)
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("arr", Var(None)), Array(Var("n"), Int(0)), Let(("_", Var(None)), App(Var("fill_buffer"), targs=None, [Var("arr"), Var("n")]), Let(("_", Var(None)), App(Var("isort"), targs=None, [Var("arr"), Var("n")]), App(Var("print_array"), targs=None, [Var("arr"), Var("n")]))))
// [Typer] infer: Array(Var("n"), Int(0))
// [Typer] infer: Int(0)
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Array[Int]
// [Typer] union: Var(None) and Array[Int]
// [Typer] infer: Let(("_", Var(None)), App(Var("fill_buffer"), targs=None, [Var("arr"), Var("n")]), Let(("_", Var(None)), App(Var("isort"), targs=None, [Var("arr"), Var("n")]), App(Var("print_array"), targs=None, [Var("arr"), Var("n")])))
// [Typer] infer: App(Var("fill_buffer"), targs=None, [Var("arr"), Var("n")])
// [Typer] inst: TypeScheme(([], (Array[Int], Int) -> Unit))
// [Typer] inst result: (Array[Int], Int) -> Unit
// [Typer] check: Var("arr") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("isort"), targs=None, [Var("arr"), Var("n")]), App(Var("print_array"), targs=None, [Var("arr"), Var("n")]))
// [Typer] infer: App(Var("isort"), targs=None, [Var("arr"), Var("n")])
// [Typer] inst: TypeScheme(([], (Array[Int], Int) -> Unit))
// [Typer] inst result: (Array[Int], Int) -> Unit
// [Typer] check: Var("arr") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: App(Var("print_array"), targs=None, [Var("arr"), Var("n")])
// [Typer] inst: TypeScheme(([], (Array[Int], Int) -> Unit))
// [Typer] inst result: (Array[Int], Int) -> Unit
// [Typer] check: Var("arr") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [KnfOpt] freq: {random.1: Once, modulo.7: Once, fill_buffer.14: Once, aux.19: Many(2), isort.33: Once, insert.38: Many(2), aux.60: Many(2), print_array.68: Once, aux.73: Many(2), main.85: Once}
// [KnfOpt] Knf inline Some(random)
// [KnfOpt] Knf inline Some(modulo)
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 35
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 35
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Knf inline Some(fill_buffer)
// [KnfOpt] Knf inline Some(isort)
// [KnfOpt] Knf inline Some(print_array)
// [KnfOpt] freq: {main.85: Once, aux.98: Many(2), insert.114: Many(2), aux.132: Many(2), aux.138: Many(2)}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 35
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 35
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] freq: {main.85: Once, aux.98: Many(2), insert.114: Many(2), aux.132: Many(2), aux.138: Many(2)}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 35
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 35
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Numbers of let rec: 5 5 0
// [KnfOpt] Tuple freq: {res.106: MayEscape, _111: MayEscape, n.86: MayEscape, arr.88: MayEscape, _125: MayEscape, tmp.122: MayEscape, arr.115: MayEscape, _131: MayEscape, i.133: MayEscape, _136: MayEscape, _140: MayEscape, _142: MayEscape, _145: MayEscape, _87: MayEscape, _112: MayEscape, _113: MayEscape, _137: MayEscape, _146: MayEscape}
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %12: Call(ty=Unit, f=f1, args=[FnParam(fref=f1, fpref=$f.0), Insn(iref=%11)])
// [CoreOpt] eliminated tail rec call %3: Call(ty=Unit, f=f2, args=[Insn(iref=%2), FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %5: Call(ty=Unit, f=f3, args=[Insn(iref=%4), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %8: Call(ty=Unit, f=f0, args=[Insn(iref=%7), Insn(iref=%5), FnParam(fref=f0, fpref=$f.2), FnParam(fref=f0, fpref=$f.3)])
// [CoreOpt] Call frequnce: FnCallFreq({f4: Once, f1: Once, f10: Once, f2: Once, f3: Once, f0: Once})
// [CoreOpt] allow_inline: false %1 aux.148 false true true false true
// [CoreOpt] allow_inline: false %2 aux.150 false true true false true
// [CoreOpt] allow_inline: false %3 aux.151 false true true false true
// [CoreOpt] allow_inline: false %0 main.147 false true true true true
// [CoreOpt] allow_inline: true %1 insert.149 true true true false true
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] allow_inline: false %1 insert.149 true true false false true
// [CoreOpt] allow_inline: false %1 aux.148 false true true false true
// [CoreOpt] allow_inline: false %2 aux.150 false true true false true
// [CoreOpt] allow_inline: false %3 aux.151 false true true false true
// [CoreOpt] allow_inline: false %0 main.147 false true true true true
// [CoreOpt] allow_inline: true %1 insert.149 true true true false true
// [CoreOpt] aux.150 is inlining Call(ty=Unit, f=f1, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0)])
// [CoreOpt] shifted callee .fn insert.149 #f1 : fn(array[int32], int32) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b15 {
// [CoreOpt]   .bb #b7 (array[int32], int32) {
// [CoreOpt]     let %3: bool = eq($b7.1, 0)
// [CoreOpt]     br %3 b8() b9()
// [CoreOpt]   }
// [CoreOpt]   .bb #b8 () {
// [CoreOpt]     jump b13(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b9 () {
// [CoreOpt]     let %4: int32 = sub($b7.1, 1)
// [CoreOpt]     let %5: int32 = load int32 offset($b7.0, %4 * @32)
// [CoreOpt]     let %6: int32 = load int32 offset($b7.0, $b7.1 * @32)
// [CoreOpt]     let %7: bool = le(%5, %6)
// [CoreOpt]     br %7 b10() b11()
// [CoreOpt]   }
// [CoreOpt]   .bb #b10 () {
// [CoreOpt]     jump b12(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b11 () {
// [CoreOpt]     let %8: int32 = load int32 offset($b7.0, $b7.1 * @32)
// [CoreOpt]     let %9: int32 = sub($b7.1, 1)
// [CoreOpt]     let %10: int32 = load int32 offset($b7.0, %9 * @32)
// [CoreOpt]     let _ = store int32 offset($b7.0, $b7.1 * @32) <- %10
// [CoreOpt]     let %12: int32 = sub($b7.1, 1)
// [CoreOpt]     let _ = store int32 offset($b7.0, %12 * @32) <- %8
// [CoreOpt]     let %14: int32 = sub($b7.1, 1)
// [CoreOpt]     jump b7($b7.0, %14)
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 (unit) {
// [CoreOpt]     jump b13($b12.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b13 (unit) {
// [CoreOpt]     return $b13.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b14 pre #Some(b15) header #b7 {
// [CoreOpt]     .block #b13
// [CoreOpt]     .block #b11
// [CoreOpt]     .block #b8
// [CoreOpt]     .block #b12
// [CoreOpt]     .block #b9
// [CoreOpt]     .block #b10
// [CoreOpt]   }
// [CoreOpt]   .bb #b15 () {
// [CoreOpt]     jump b14($f0, $f1)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f1
// [CoreOpt] Call frequnce: FnCallFreq({f4: Once, f10: Once, f2: Once, f3: Once, f0: Once})
// [CoreOpt] allow_inline: false %1 aux.148 false true true false true
// [CoreOpt] allow_inline: false %2 aux.150 false true true false true
// [CoreOpt] allow_inline: false %3 aux.151 false true true false true
// [CoreOpt] allow_inline: false %0 main.147 false true true true true
// [CoreOpt] allow_inline: false %1 aux.148 false true true false true
// [CoreOpt] allow_inline: false %2 aux.150 false true true false true
// [CoreOpt] allow_inline: false %3 aux.151 false true true false true
// [CoreOpt] allow_inline: false %0 main.147 false true true true true
// [CoreOpt] Call frequnce: FnCallFreq({f4: Once, f10: Once, f2: Once, f3: Once, f0: Once})
// [CoreOpt] allow_inline: false %1 aux.148 false true true false true
// [CoreOpt] allow_inline: false %2 aux.150 false true true false true
// [CoreOpt] allow_inline: false %3 aux.151 false true true false true
// [CoreOpt] allow_inline: false %0 main.147 false true true true true
// [CoreOpt] allow_inline: false %1 aux.148 false true true false true
// [CoreOpt] allow_inline: false %2 aux.150 false true true false true
// [CoreOpt] allow_inline: false %3 aux.151 false true true false true
// [CoreOpt] allow_inline: false %0 main.147 false true true true true
// [CoreOpt] LVN subst Insn(iref=%12) with Insn(iref=%9)
// [CoreOpt] LVN subst Insn(iref=%14) with Insn(iref=%9)
// [CoreOpt2] LVN subst Insn(iref=%23) with Insn(iref=%26)
// [CoreOpt2] LVN subst Insn(iref=%20) with Insn(iref=%25)
