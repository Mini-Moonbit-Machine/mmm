// [Asm] pre_assigned_registers: Insn(iref=%1) -> v4, Insn(iref=%3) -> v6, Self(fref=f4) -> v0, Mem(fref=f4, mref=m0) -> v2, Insn(iref=%0) -> v3, Insn(iref=%2) -> v5
// [Asm] defs: []
// [Asm] live_set: [s11]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v14, v2]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2]
// [Asm] move_origin: [v14]
// [Asm] defined: a1 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0, v2]
// [Asm] move_origin: [v11]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0, v2]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [v9]
// [Asm] live_set: [a0, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0, v2]
// [Asm] move_origin: [v9]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0, v2]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [v7]
// [Asm] live_set: [a0, v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: [v7]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.150"];
// [Asm]   r0 [label="v2 ← s0", color=green];
// [Asm]   r20 [label="v7 ← a1", color=green];
// [Asm]   r3 [label="a1", color=blue];
// [Asm]   r9 [label="a5", color=blue];
// [Asm]   r6 [label="a2", color=blue];
// [Asm]   r13 [label="t1", color=blue];
// [Asm]   r4 [label="a0", color=blue];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r11 [label="a7", color=blue];
// [Asm]   r7 [label="a3", color=blue];
// [Asm]   r10 [label="a6", color=blue];
// [Asm]   r14 [label="t2", color=blue];
// [Asm]   r8 [label="a4", color=blue];
// [Asm]   r5 [label="v11 ← a1", color=green];
// [Asm]   r15 [label="t3", color=blue];
// [Asm]   r2 [label="v14 ← a0", color=green];
// [Asm]   r16 [label="t4", color=blue];
// [Asm]   r18 [label="v9 ← a1", color=green];
// [Asm]   r19 [label="v5 ← a0", color=green];
// [Asm]   r17 [label="v4 ← a0", color=green];
// [Asm]   r21 [label="v6 ← a0", color=green];
// [Asm]   r12 [label="t0", color=blue];
// [Asm]   r4 -- r13;
// [Asm]   r0 -- r15;
// [Asm]   r0 -- r13;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r16;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r17;
// [Asm]   r0 -- r5;
// [Asm]   r4 -- r12;
// [Asm]   r0 -- r14;
// [Asm]   r0 -- r1;
// [Asm]   r4 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r4 -- r20;
// [Asm]   r4 -- r8;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r4 -- r18;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r16;
// [Asm]   r0 -- r19;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r18;
// [Asm]   comment = "0:v2-> 1:s11-> 2:v14-> 3:a1-> 4:a0-> 5:v11-> 6:a2-> 7:a3-> 8:a4-> 9:a5-> 10:a6-> 11:a7-> 12:t0-> 13:t1-> 14:t2-> 15:t3-> 16:t4-> 18:v9-> 17:v4-> 19:v5-> 20:v7-> 21:v6"
// [Asm]   comment = "v2<-s0;v7<-a1;v11<-a1;v14<-a0;v9<-a1;v5<-a0;v4<-a0;v6<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.150"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v2, s11, -400 ->   addi s0, s11, -400
// [Asm] subst   andi s11, v2, -8 ->   andi s11, s0, -8
// [Asm] subst   li v14, 100 ->   li a0, 100
// [Asm] subst   mv a1, v14 ->   mv a1, a0
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   li v11, 100 ->   li a1, 100
// [Asm] subst   call fill_buffer.146 ->   call fill_buffer.146
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   li v9, 100 ->   li a1, 100
// [Asm] subst   call isort.147 ->   call isort.147
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   li v7, 100 ->   li a1, 100
// [Asm] subst   call print_array.149 ->   call print_array.149
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f10) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main.150 ->   call main.150
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: BlockParam(bref=b2, bpref=$b.0) -> v4, BlockParam(bref=b15, bpref=$b.0) -> v19, Insn(iref=%9) -> v14, Self(fref=f2) -> v0, Insn(iref=%8) -> v13, Insn(iref=%10) -> v15, BlockParam(bref=b9, bpref=$b.1) -> v7, BlockParam(bref=b14, bpref=$b.0) -> v18, Insn(iref=%5) -> v10, Insn(iref=%0) -> v5, Insn(iref=%4) -> v9, Insn(iref=%3) -> v8, Insn(iref=%13) -> v17, Insn(iref=%7) -> v12, BlockParam(bref=b5, bpref=$b.0) -> v22, BlockParam(bref=b6, bpref=$b.0) -> v20, Insn(iref=%2) -> v21, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%11) -> v16, Insn(iref=%6) -> v11, FnParam(fref=f2, fpref=$f.0) -> v2, BlockParam(bref=b9, bpref=$b.0) -> v6
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%5), Insn(iref=%6)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b9, bpref=$b.1), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b2, bpref=$b.0), FnParam(fref=f2, fpref=$f.1)])
// [Asm] defs: [v19]
// [Asm] live_set: [v3, v19, v4, zero, v2]
// [Asm] move_origin: [v18]
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v19, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v3, v19, v4, zero, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v22]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v3, v4, v18, zero, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: v18 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v3, v21, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: [v21]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v2, zero, v7, v4, v6, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v38]
// [Asm] live_set: [v2, zero, v7, v4, v38, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v38 is X
// [Asm] defs: [v39]
// [Asm] live_set: [v2, zero, v7, v4, v6, v39, v3]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v2, v10, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v2, v10, zero, v7, v35, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v2, v10, zero, v7, v36, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v2, v11, v10, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v3, v4, v6, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v32]
// [Asm] live_set: [v2, zero, v7, v4, v32, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: [v33]
// [Asm] live_set: [v2, zero, v7, v4, v6, v33, v3]
// [Asm] move_origin: []
// [Asm] defined: v33 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v2, zero, v13, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v2, v14, zero, v13, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v2, v14, zero, v13, v7, v4, v6, v28, v3]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: [v29]
// [Asm] live_set: [v2, v14, zero, v13, v29, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v2, v14, zero, v13, v7, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v2, v14, zero, v13, v26, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v2, v14, zero, v13, v27, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v14, zero, v13, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v24]
// [Asm] live_set: [v2, v14, zero, v13, v4, v6, v24, v3]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v2, v25, v14, zero, v13, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v14, zero, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, v4, v6, v14, zero, v2]
// [Asm] move_origin: [v6]
// [Asm] defs: [v7]
// [Asm] live_set: [v7, v3, v4, v6, zero, v2]
// [Asm] move_origin: [v14]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v3, v4, v6, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v22]
// [Asm] live_set: [v22]
// [Asm] move_origin: [zero]
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v3, v4, v6, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, zero, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v42]
// [Asm] live_set: [v3, zero, v42, v2]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: [v42]
// [Asm] defined: v4 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v3, v4, v6, zero, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v7, v3, v4, v6, zero, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: v7 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v3, v4, zero, v20, v2]
// [Asm] move_origin: [v19]
// [Asm] defined: v20 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of isort.147"];
// [Asm]   r0 [label="v19 ← a0", color=green];
// [Asm]   r20 [label="v14 ← a5", color=green];
// [Asm]   r23 [label="v15 ← a6", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="v7 ← a4", color=green];
// [Asm]   r26 [label="v24 ← a4", color=green];
// [Asm]   r27 [label="v25 ← a4", color=green];
// [Asm]   r6 [label="v18 ← a0", color=green];
// [Asm]   r13 [label="v10 ← a0", color=green];
// [Asm]   r4 [label="v2 ← a3", color=green];
// [Asm]   r29 [label="a1", color=blue];
// [Asm]   r1 [label="v3 ← a1", color=green];
// [Asm]   r28 [label="v22 ← a0", color=green];
// [Asm]   r11 [label="v38 ← a0", color=green];
// [Asm]   r7 [label="v21 ← a0", color=green];
// [Asm]   r10 [label="v6 ← a3", color=green];
// [Asm]   r22 [label="v29 ← a6", color=green];
// [Asm]   r14 [label="v35 ← a5", color=green];
// [Asm]   r8 [label="v9 ← a0", color=green];
// [Asm]   r30 [label="v42 ← a0", color=green];
// [Asm]   r5 [label="a0", color=blue];
// [Asm]   r15 [label="v36 ← a5", color=green];
// [Asm]   r24 [label="v26 ← a4", color=green];
// [Asm]   r25 [label="v27 ← a4", color=green];
// [Asm]   r2 [label="v4 ← a2", color=green];
// [Asm]   r16 [label="v11 ← a5", color=green];
// [Asm]   r18 [label="v33 ← a0", color=green];
// [Asm]   r19 [label="v13 ← a0", color=green];
// [Asm]   r31 [label="v20 ← a0", color=green];
// [Asm]   r17 [label="v32 ← a0", color=green];
// [Asm]   r21 [label="v28 ← a6", color=green];
// [Asm]   r12 [label="v39 ← a0", color=green];
// [Asm]   r19 -- r20;
// [Asm]   r9 -- r21;
// [Asm]   r10 -- r14;
// [Asm]   r2 -- r20;
// [Asm]   r2 -- r31;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r30;
// [Asm]   r3 -- r16;
// [Asm]   r10 -- r26;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r10 -- r13;
// [Asm]   r10 -- r19;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r9 -- r17;
// [Asm]   r1 -- r16;
// [Asm]   r19 -- r21;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r31;
// [Asm]   r9 -- r18;
// [Asm]   r4 -- r31;
// [Asm]   r9 -- r14;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r20 -- r23;
// [Asm]   r1 -- r31;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r10 -- r20;
// [Asm]   r20 -- r22;
// [Asm]   r3 -- r30;
// [Asm]   r3 -- r4;
// [Asm]   r19 -- r27;
// [Asm]   r10 -- r18;
// [Asm]   r0 -- r2;
// [Asm]   r10 -- r12;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r9 -- r23;
// [Asm]   r19 -- r22;
// [Asm]   r9 -- r12;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r4 -- r12;
// [Asm]   r10 -- r22;
// [Asm]   r1 -- r2;
// [Asm]   r20 -- r27;
// [Asm]   r4 -- r29;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r27;
// [Asm]   r9 -- r20;
// [Asm]   r23 -- r24;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r25;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r1 -- r6;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r7;
// [Asm]   r10 -- r25;
// [Asm]   r2 -- r24;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r10 -- r17;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r20 -- r24;
// [Asm]   r13 -- r15;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r24;
// [Asm]   r2 -- r26;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r9 -- r15;
// [Asm]   r20 -- r26;
// [Asm]   r1 -- r23;
// [Asm]   r8 -- r9;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r22;
// [Asm]   r13 -- r16;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r20;
// [Asm]   r19 -- r24;
// [Asm]   r4 -- r30;
// [Asm]   r4 -- r18;
// [Asm]   r10 -- r27;
// [Asm]   r2 -- r11;
// [Asm]   r19 -- r26;
// [Asm]   r20 -- r25;
// [Asm]   r10 -- r16;
// [Asm]   r3 -- r22;
// [Asm]   r9 -- r22;
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r23 -- r25;
// [Asm]   r19 -- r23;
// [Asm]   r2 -- r14;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r10 -- r15;
// [Asm]   r13 -- r14;
// [Asm]   r10 -- r23;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r1 -- r25;
// [Asm]   r2 -- r21;
// [Asm]   r3 -- r14;
// [Asm]   r8 -- r10;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r9 -- r16;
// [Asm]   r9 -- r19;
// [Asm]   r4 -- r17;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r6;
// [Asm]   r2 -- r19;
// [Asm]   r4 -- r26;
// [Asm]   r1 -- r3;
// [Asm]   r9 -- r13;
// [Asm]   r2 -- r3;
// [Asm]   r19 -- r25;
// [Asm]   r20 -- r21;
// [Asm]   r3 -- r23;
// [Asm]   r10 -- r24;
// [Asm]   r2 -- r27;
// [Asm]   r10 -- r21;
// [Asm]   r4 -- r19;
// [Asm]   r1 -- r24;
// [Asm]   comment = "0:v19-> 1:v3-> 2:v4-> 3:zero-> 4:v2-> 8:v9-> 9:v7-> 10:v6-> 11:v38-> 12:v39-> 13:v10-> 14:v35-> 15:v36-> 16:v11-> 17:v32-> 18:v33-> 19:v13-> 20:v14-> 21:v28-> 22:v29-> 23:v15-> 24:v26-> 25:v27-> 26:v24-> 27:v25-> 31:v20-> 6:v18-> 7:v21-> 30:v42-> 29:a1-> 5:a0-> 28:v22"
// [Asm]   comment = "v19<-a0;v14<-a5;v15<-a6;v7<-a4;v24<-a4;v25<-a4;v18<-a0;v10<-a0;v2<-a3;v3<-a1;v22<-a0;v38<-a0;v21<-a0;v6<-a3;v29<-a6;v35<-a5;v9<-a0;v42<-a0;v36<-a5;v26<-a4;v27<-a4;v4<-a2;v11<-a5;v33<-a0;v13<-a0;v20<-a0;v32<-a0;v28<-a6;v39<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of isort.147"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   j .isort.147_15 ->   j .isort.147_15
// [Asm] subst   mv v19, zero ->   mv a0, zero
// [Asm] subst   bne v4, v3, .isort.147_4 ->   bne a2, a1, .isort.147_4
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v18, zero ->   mv a0, zero
// [Asm] subst   addi v21, v4, 1 ->   addi a0, a2, 1
// [Asm] subst   mv v4, v21 ->   mv a2, a0
// [Asm] subst   j .isort.147_2 ->   j .isort.147_2
// [Asm] subst   addi v9, v7, -1 ->   addi a0, a4, -1
// [Asm] subst   slliw v38, v9, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v39, v6, v38 ->   add a0, a3, a0
// [Asm] subst   lw v10, 0(v39) ->   lw a0, 0(a0)
// [Asm] subst   slliw v35, v7, 2 ->   slliw a5, a4, 2
// [Asm] subst   add v36, v6, v35 ->   add a5, a3, a5
// [Asm] subst   lw v11, 0(v36) ->   lw a5, 0(a5)
// [Asm] subst   bge v11, v10, .isort.147_12 ->   bge a5, a0, .isort.147_12
// [Asm] subst   slliw v32, v7, 2 ->   slliw a0, a4, 2
// [Asm] subst   add v33, v6, v32 ->   add a0, a3, a0
// [Asm] subst   lw v13, 0(v33) ->   lw a0, 0(a0)
// [Asm] subst   addi v14, v7, -1 ->   addi a5, a4, -1
// [Asm] subst   slliw v28, v14, 2 ->   slliw a6, a5, 2
// [Asm] subst   add v29, v6, v28 ->   add a6, a3, a6
// [Asm] subst   lw v15, 0(v29) ->   lw a6, 0(a6)
// [Asm] subst   slliw v26, v7, 2 ->   slliw a4, a4, 2
// [Asm] subst   add v27, v6, v26 ->   add a4, a3, a4
// [Asm] subst   sw v15, 0(v27) ->   sw a6, 0(a4)
// [Asm] subst   slliw v24, v14, 2 ->   slliw a4, a5, 2
// [Asm] subst   add v25, v6, v24 ->   add a4, a3, a4
// [Asm] subst   sw v13, 0(v25) ->   sw a0, 0(a4)
// [Asm] subst   mv v7, v14 ->   mv a4, a5
// [Asm] subst   j .isort.147_9 ->   j .isort.147_9
// [Asm] subst   mv v22, zero ->   mv a0, zero
// [Asm] subst   beq v7, zero, .isort.147_10 ->   beq a4, zero, .isort.147_10
// [Asm] subst   mv v2, a0 ->   mv a3, a0
// [Asm] subst   li v42, 1 ->   li a0, 1
// [Asm] subst   mv v4, v42 ->   mv a2, a0
// [Asm] subst   mv v7, v4 ->   mv a4, a2
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v9, Insn(iref=%3) -> v8, BlockParam(bref=b2, bpref=$b.0) -> v4, BlockParam(bref=b5, bpref=$b.0) -> v10, FnParam(fref=f3, fpref=$f.1) -> v3, Insn(iref=%2) -> v7, Insn(iref=%1) -> v6, FnParam(fref=f3, fpref=$f.0) -> v2, Self(fref=f3) -> v0, Insn(iref=%0) -> v5
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b2, bpref=$b.0), FnParam(fref=f3, fpref=$f.1)])
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [zero]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, zero, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: v4 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v3, v4, v15, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v3, v4, v16, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v3, v4, v6, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v4, v6, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v4, zero, a0, v2]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v3, v4, zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v3, v4, v12, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v4, zero, a0, v2]
// [Asm] move_origin: [v12]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v3, v4, zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v3, zero, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: [v9]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of print_array.149"];
// [Asm]   r0 [label="v10 ← a0", color=green];
// [Asm]   r20 [label="t4", color=blue];
// [Asm]   r23 [label="v8 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="v6 ← a0", color=green];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r13 [label="a5", color=blue];
// [Asm]   r4 [label="v3 ← s1", color=green];
// [Asm]   r1 [label="v2 ← s0", color=green];
// [Asm]   r11 [label="a3", color=blue];
// [Asm]   r7 [label="v15 ← a0", color=green];
// [Asm]   r10 [label="a2", color=blue];
// [Asm]   r22 [label="v12 ← a0", color=green];
// [Asm]   r14 [label="a6", color=blue];
// [Asm]   r8 [label="v16 ← a0", color=green];
// [Asm]   r5 [label="v4 ← s2", color=green];
// [Asm]   r24 [label="v9 ← a0", color=green];
// [Asm]   r15 [label="a7", color=blue];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="t0", color=blue];
// [Asm]   r18 [label="t2", color=blue];
// [Asm]   r19 [label="t3", color=blue];
// [Asm]   r17 [label="t1", color=blue];
// [Asm]   r21 [label="v7 ← a0", color=green];
// [Asm]   r12 [label="a4", color=blue];
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r5 -- r21;
// [Asm]   r6 -- r11;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r15;
// [Asm]   r6 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r20;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r10;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r23;
// [Asm]   r5 -- r23;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r22;
// [Asm]   r5 -- r18;
// [Asm]   r1 -- r10;
// [Asm]   r5 -- r19;
// [Asm]   r3 -- r9;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r3 -- r11;
// [Asm]   r4 -- r20;
// [Asm]   r6 -- r16;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r3 -- r24;
// [Asm]   r4 -- r18;
// [Asm]   r1 -- r16;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r18;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r12;
// [Asm]   r3 -- r5;
// [Asm]   r6 -- r20;
// [Asm]   r3 -- r22;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r6 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r6 -- r19;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r3 -- r20;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r4 -- r7;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r5 -- r14;
// [Asm]   r4 -- r17;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r5 -- r15;
// [Asm]   r4 -- r19;
// [Asm]   r1 -- r24;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v10-> 1:v2-> 2:a1-> 3:zero-> 4:v3-> 5:v4-> 6:a0-> 10:a2-> 11:a3-> 12:a4-> 13:a5-> 14:a6-> 15:a7-> 16:t0-> 17:t1-> 18:t2-> 19:t3-> 20:t4-> 7:v15-> 8:v16-> 9:v6-> 21:v7-> 22:v12-> 23:v8-> 24:v9"
// [Asm]   comment = "v10<-a0;v8<-a0;v6<-a0;v3<-s1;v2<-s0;v15<-a0;v12<-a0;v16<-a0;v4<-s2;v9<-a0;v7<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of print_array.149"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v10, zero ->   mv a0, zero
// [Asm] subst   beq v4, v3, .print_array.149_3 ->   beq s2, s1, .print_array.149_3
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   mv v3, a1 ->   mv s1, a1
// [Asm] subst   mv v4, zero ->   mv s2, zero
// [Asm] subst   ret ->   ret
// [Asm] subst   slliw v15, v4, 2 ->   slliw a0, s2, 2
// [Asm] subst   add v16, v2, v15 ->   add a0, s0, a0
// [Asm] subst   lw v6, 0(v16) ->   lw a0, 0(a0)
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v12, 32 ->   li a0, 32
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   addi v9, v4, 1 ->   addi a0, s2, 1
// [Asm] subst   mv v4, v9 ->   mv s2, a0
// [Asm] subst   j .print_array.149_2 ->   j .print_array.149_2
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v9, FnParam(fref=f0, fpref=$f.1) -> v3, BlockParam(bref=b2, bpref=$b.0) -> v4, Insn(iref=%7) -> v13, BlockParam(bref=b5, bpref=$b.0) -> v14, Self(fref=f0) -> v0, Insn(iref=%2) -> v8, BlockParam(bref=b2, bpref=$b.1) -> v5, Insn(iref=%1) -> v7, Insn(iref=%6) -> v12, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%5) -> v11, Insn(iref=%0) -> v6, Insn(iref=%4) -> v10
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b2, bpref=$b.0), FnParam(fref=f0, fpref=$f.1)])
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move_origin: [zero]
// [Asm] defined: v14 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v14]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v24]
// [Asm] live_set: [v2, v5, zero, v4, v24, v3]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, zero, v7, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v2, zero, v8, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v2, v21, zero, v8, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v2, zero, v8, v4, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v2, zero, v8, v19, v4, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v3, v8, v4, v10, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v3, v11, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v3, v11, v4, v16, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v3, v11, v4, v17, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v11, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v3, v11, zero, v13, v2]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v11, v4, zero, v2]
// [Asm] move_origin: [v13]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v4, v5, zero, v2]
// [Asm] move_origin: [v11]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v4, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, zero, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: v4 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v3, v4, zero, v26, v2]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v4, v5, zero, v2]
// [Asm] move_origin: [v26]
// [Asm] defined: v5 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of fill_buffer.146"];
// [Asm]   r0 [label="v14 ← a0", color=green];
// [Asm]   r3 [label="v2 ← a2", color=green];
// [Asm]   r9 [label="v8 ← a0", color=green];
// [Asm]   r6 [label="v4 ← a3", color=green];
// [Asm]   r13 [label="v10 ← a1", color=green];
// [Asm]   r4 [label="v5 ← a1", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="v9 ← a1", color=green];
// [Asm]   r7 [label="v3 ← a4", color=green];
// [Asm]   r10 [label="v21 ← a1", color=green];
// [Asm]   r14 [label="v11 ← a0", color=green];
// [Asm]   r8 [label="v7 ← a0", color=green];
// [Asm]   r5 [label="zero", color=blue];
// [Asm]   r15 [label="v16 ← a1", color=green];
// [Asm]   r2 [label="v24 ← a0", color=green];
// [Asm]   r16 [label="v17 ← a1", color=green];
// [Asm]   r18 [label="a1", color=blue];
// [Asm]   r19 [label="v26 ← a0", color=green];
// [Asm]   r17 [label="v13 ← a1", color=green];
// [Asm]   r12 [label="v19 ← a5", color=green];
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r3 -- r19;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r15;
// [Asm]   r6 -- r15;
// [Asm]   r14 -- r17;
// [Asm]   r14 -- r16;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r16;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r10;
// [Asm]   r6 -- r14;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r7 -- r13;
// [Asm]   r3 -- r9;
// [Asm]   r11 -- r12;
// [Asm]   r5 -- r19;
// [Asm]   r3 -- r11;
// [Asm]   r6 -- r16;
// [Asm]   r2 -- r7;
// [Asm]   r7 -- r9;
// [Asm]   r3 -- r18;
// [Asm]   r5 -- r16;
// [Asm]   r5 -- r11;
// [Asm]   r6 -- r12;
// [Asm]   r3 -- r5;
// [Asm]   r6 -- r8;
// [Asm]   r7 -- r17;
// [Asm]   r3 -- r8;
// [Asm]   r6 -- r13;
// [Asm]   r6 -- r19;
// [Asm]   r2 -- r6;
// [Asm]   r9 -- r11;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r7 -- r19;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r13;
// [Asm]   r7 -- r15;
// [Asm]   r7 -- r10;
// [Asm]   r6 -- r10;
// [Asm]   r9 -- r12;
// [Asm]   r7 -- r11;
// [Asm]   r3 -- r10;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r14;
// [Asm]   r4 -- r7;
// [Asm]   r3 -- r17;
// [Asm]   r5 -- r7;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r7 -- r16;
// [Asm]   r3 -- r7;
// [Asm]   r4 -- r6;
// [Asm]   r7 -- r8;
// [Asm]   r9 -- r13;
// [Asm]   r7 -- r12;
// [Asm]   r2 -- r3;
// [Asm]   r7 -- r14;
// [Asm]   r14 -- r15;
// [Asm]   r5 -- r15;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v14-> 1:a0-> 2:v24-> 3:v2-> 4:v5-> 5:zero-> 6:v4-> 7:v3-> 8:v7-> 9:v8-> 10:v21-> 11:v9-> 12:v19-> 13:v10-> 14:v11-> 15:v16-> 16:v17-> 17:v13-> 19:v26-> 18:a1"
// [Asm]   comment = "v14<-a0;v2<-a2;v8<-a0;v4<-a3;v10<-a1;v5<-a1;v9<-a1;v3<-a4;v21<-a1;v11<-a0;v7<-a0;v16<-a1;v24<-a0;v17<-a1;v26<-a0;v13<-a1;v19<-a5;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of fill_buffer.146"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v2, a0 ->   mv a2, a0
// [Asm] subst   mv v3, a1 ->   mv a4, a1
// [Asm] subst   mv v4, zero ->   mv a3, zero
// [Asm] subst   li v26, 12345 ->   li a0, 12345
// [Asm] subst   mv v5, v26 ->   mv a1, a0
// [Asm] subst   ret ->   ret
// [Asm] subst   li v24, 75 ->   li a0, 75
// [Asm] subst   mul v7, v5, v24 ->   mul a0, a1, a0
// [Asm] subst   addi v8, v7, 74 ->   addi a0, a0, 74
// [Asm] subst   li v21, 65537 ->   li a1, 65537
// [Asm] subst   div v9, v8, v21 ->   div a1, a0, a1
// [Asm] subst   li v19, 65537 ->   li a5, 65537
// [Asm] subst   mul v10, v9, v19 ->   mul a1, a1, a5
// [Asm] subst   sub v11, v8, v10 ->   sub a0, a0, a1
// [Asm] subst   slliw v16, v4, 2 ->   slliw a1, a3, 2
// [Asm] subst   add v17, v2, v16 ->   add a1, a2, a1
// [Asm] subst   sw v11, 0(v17) ->   sw a0, 0(a1)
// [Asm] subst   addi v13, v4, 1 ->   addi a1, a3, 1
// [Asm] subst   mv v4, v13 ->   mv a3, a1
// [Asm] subst   mv v5, v11 ->   mv a1, a0
// [Asm] subst   j .fill_buffer.146_2 ->   j .fill_buffer.146_2
// [Asm] subst   beq v4, v3, .fill_buffer.146_3 ->   beq a3, a4, .fill_buffer.146_3
// [Asm] subst   mv v14, zero ->   mv a0, zero
// [Asm] before colored: # leaf false
// [Asm] print_array.149:
// [Asm] # block info: defs: [v3, v4, v2], uses: [a1, a0, zero], upward_exposed: [a1, a0, zero], params_defs: []
// [Asm] # live_in: [a1, a0, zero], live_out: [v2, v4, zero, v3]
// [Asm] # block parameters: []
// [Asm] .print_array.149_0:
// [Asm]   # save_ctx1  # live: [a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v3, zero, v2]
// [Asm] # control
// [Asm]   mv v4, zero  # live: [v3, v4, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v4, v3], upward_exposed: [v4, v3], params_defs: [v4]
// [Asm] # live_in: [v2, v4, zero, v3], live_out: [v3, v4, zero, v2]
// [Asm] # block parameters: [v4]
// [Asm] .print_array.149_2:
// [Asm] # control
// [Asm]   beq v4, v3, .print_array.149_3  # live: [v2, v4, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v16, v7, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, v4, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v16, a0, v4, v6, v15, v12, v9, v2], upward_exposed: [v4, v2], params_defs: []
// [Asm] # live_in: [v3, v4, zero, v2], live_out: [v2, v4, zero, v3]
// [Asm] # block parameters: []
// [Asm] .print_array.149_4:
// [Asm]   slliw v15, v4, 2  # live: [v3, v4, v15, zero, v2]
// [Asm]   add v16, v2, v15  # live: [v3, v4, v16, zero, v2]
// [Asm]   lw v6, 0(v16)  # live: [v3, v4, v6, zero, v2]
// [Asm]   # save_ctx2  # live: [v3, v4, v6, zero, v2]
// [Asm]   mv a0, v6  # live: [v3, v4, zero, a0, v2]
// [Asm]   call minimbt_print_int  # live: [v3, v4, zero, a0, v2]
// [Asm]   mv v7, a0  # live: [v3, v4, zero, v2]
// [Asm]   # restore_ctx2  # live: [v3, v4, zero, v2]
// [Asm]   # save_ctx2  # live: [v3, v4, zero, v2]
// [Asm]   li v12, 32  # live: [v3, v4, v12, zero, v2]
// [Asm]   mv a0, v12  # live: [v3, v4, zero, a0, v2]
// [Asm]   call minimbt_print_char  # live: [v3, v4, zero, a0, v2]
// [Asm]   mv v8, a0  # live: [v3, v4, zero, v2]
// [Asm]   # restore_ctx2  # live: [v3, v4, zero, v2]
// [Asm]   addi v9, v4, 1  # live: [v3, zero, v9, v2]
// [Asm] # control
// [Asm]   mv v4, v9  # live: [v3, v4, zero, v2]
// [Asm]   j .print_array.149_2  # live: [v3, v4, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .print_array.149_3:
// [Asm] # control
// [Asm]   mv v10, zero  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .print_array.149_5:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] isort.147:
// [Asm] # block info: defs: [v3, v4, v42, v2], uses: [a1, a0, v42], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, a0, zero], live_out: [v2, v4, zero, v3]
// [Asm] # block parameters: []
// [Asm] .isort.147_0:
// [Asm]   # save_ctx1  # live: [a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v3, zero, v2]
// [Asm] # control
// [Asm]   li v42, 1  # live: [v3, zero, v42, v2]
// [Asm]   mv v4, v42  # live: [v3, v4, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v4, v3], upward_exposed: [v4, v3], params_defs: [v4]
// [Asm] # live_in: [v2, v4, zero, v3], live_out: [v3, v4, zero, v2]
// [Asm] # block parameters: [v4]
// [Asm] .isort.147_2:
// [Asm] # control
// [Asm]   bne v4, v3, .isort.147_4  # live: [v2, v4, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v22], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v22]
// [Asm] # block parameters: []
// [Asm] .isort.147_3:
// [Asm] # control
// [Asm]   mv v22, zero  # live: [v22]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v22], upward_exposed: [v22], params_defs: [v22]
// [Asm] # live_in: [v22], live_out: []
// [Asm] # block parameters: [v22]
// [Asm] .isort.147_5:
// [Asm] # control
// [Asm]   mv a0, v22  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [], uses: [], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v3, v4, zero, v2], live_out: [v3, v4, zero, v2]
// [Asm] # block parameters: []
// [Asm] .isort.147_4:
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v6, v7], uses: [v4, v2], upward_exposed: [v4, v2], params_defs: []
// [Asm] # live_in: [v3, v4, zero, v2], live_out: [v2, zero, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .isort.147_7:
// [Asm] # control
// [Asm]   mv v6, v2  # live: [v3, v4, v6, zero, v2]
// [Asm]   mv v7, v4  # live: [v7, v3, v4, v6, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [], uses: [zero, v7], upward_exposed: [zero, v7], params_defs: [v6, v7]
// [Asm] # live_in: [v2, zero, v7, v4, v6, v3], live_out: [v2, zero, v7, v4, v6, v3]
// [Asm] # block parameters: [v6, v7]
// [Asm] .isort.147_9:
// [Asm] # control
// [Asm]   beq v7, zero, .isort.147_10  # live: [v7, v3, v4, v6, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [v11, v10, v36, v35, v38, v9, v39], uses: [v11, v10, v35, v7, v36, v38, v6, v9, v39], upward_exposed: [v6, v7], params_defs: []
// [Asm] # live_in: [v2, zero, v7, v4, v6, v3], live_out: [v2, zero, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .isort.147_11:
// [Asm]   addi v9, v7, -1  # live: [v2, zero, v7, v4, v6, v9, v3]
// [Asm]   slliw v38, v9, 2  # live: [v2, zero, v7, v4, v38, v6, v3]
// [Asm]   add v39, v6, v38  # live: [v2, zero, v7, v4, v6, v39, v3]
// [Asm]   lw v10, 0(v39)  # live: [v2, v10, zero, v7, v4, v6, v3]
// [Asm]   slliw v35, v7, 2  # live: [v2, v10, zero, v7, v35, v4, v6, v3]
// [Asm]   add v36, v6, v35  # live: [v2, v10, zero, v7, v36, v4, v6, v3]
// [Asm]   lw v11, 0(v36)  # live: [v2, v11, v10, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   bge v11, v10, .isort.147_12  # live: [v7, v3, v4, v6, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [v25, v14, v13, v29, v26, v27, v7, v32, v15, v24, v28, v33], uses: [v25, v14, v26, v13, v7, v32, v24, v28, v33, v29, v27, v6, v15], upward_exposed: [v6, v7], params_defs: []
// [Asm] # live_in: [v2, zero, v7, v4, v6, v3], live_out: [v2, zero, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .isort.147_13:
// [Asm]   slliw v32, v7, 2  # live: [v2, zero, v7, v4, v32, v6, v3]
// [Asm]   add v33, v6, v32  # live: [v2, zero, v7, v4, v6, v33, v3]
// [Asm]   lw v13, 0(v33)  # live: [v2, zero, v13, v7, v4, v6, v3]
// [Asm]   addi v14, v7, -1  # live: [v2, v14, zero, v13, v7, v4, v6, v3]
// [Asm]   slliw v28, v14, 2  # live: [v2, v14, zero, v13, v7, v4, v6, v28, v3]
// [Asm]   add v29, v6, v28  # live: [v2, v14, zero, v13, v29, v7, v4, v6, v3]
// [Asm]   lw v15, 0(v29)  # live: [v2, v14, zero, v13, v7, v4, v6, v15, v3]
// [Asm]   slliw v26, v7, 2  # live: [v2, v14, zero, v13, v26, v4, v6, v15, v3]
// [Asm]   add v27, v6, v26  # live: [v2, v14, zero, v13, v27, v4, v6, v15, v3]
// [Asm]   sw v15, 0(v27)  # live: [v2, v14, zero, v13, v4, v6, v3]
// [Asm]   slliw v24, v14, 2  # live: [v2, v14, zero, v13, v4, v6, v24, v3]
// [Asm]   add v25, v6, v24  # live: [v2, v25, v14, zero, v13, v4, v6, v3]
// [Asm]   sw v13, 0(v25)  # live: [v2, v14, zero, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v6, v6  # live: [v3, v4, v6, v14, zero, v2]
// [Asm]   mv v7, v14  # live: [v7, v3, v4, v6, zero, v2]
// [Asm]   j .isort.147_9  # live: [v7, v3, v4, v6, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [v19], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v2, v4, zero, v3], live_out: [v2, v19, v4, zero, v3]
// [Asm] # block parameters: []
// [Asm] .isort.147_10:
// [Asm] # control
// [Asm]   mv v19, zero  # live: [v3, v19, v4, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [v20], uses: [v19], upward_exposed: [v19], params_defs: [v19]
// [Asm] # live_in: [v2, v19, v4, zero, v3], live_out: [v2, v4, zero, v20, v3]
// [Asm] # block parameters: [v19]
// [Asm] .isort.147_15:
// [Asm] # control
// [Asm]   mv v20, v19  # live: [v3, v4, zero, v20, v2]
// [Asm] 
// [Asm] # block info: defs: [v4, v21], uses: [v4, v21], upward_exposed: [v4], params_defs: [v20]
// [Asm] # live_in: [v2, v4, zero, v20, v3], live_out: [v2, v4, zero, v3]
// [Asm] # block parameters: [v20]
// [Asm] .isort.147_6:
// [Asm]   addi v21, v4, 1  # live: [v3, v21, zero, v2]
// [Asm] # control
// [Asm]   mv v4, v21  # live: [v3, v4, zero, v2]
// [Asm]   j .isort.147_2  # live: [v3, v4, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [v18], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v2, v4, zero, v3], live_out: [v2, v4, v18, zero, v3]
// [Asm] # block parameters: []
// [Asm] .isort.147_12:
// [Asm] # control
// [Asm]   mv v18, zero  # live: [v3, v4, v18, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [v19], uses: [v18], upward_exposed: [v18], params_defs: [v18]
// [Asm] # live_in: [v2, v4, v18, zero, v3], live_out: [v2, v19, v4, zero, v3]
// [Asm] # block parameters: [v18]
// [Asm] .isort.147_14:
// [Asm] # control
// [Asm]   mv v19, v18  # live: [v3, v19, v4, zero, v2]
// [Asm]   j .isort.147_15  # live: [v3, v19, v4, zero, v2]
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main.150  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] fill_buffer.146:
// [Asm] # block info: defs: [v3, v4, v5, v26, v2], uses: [a1, a0, zero, v26], upward_exposed: [a1, a0, zero], params_defs: []
// [Asm] # live_in: [a1, a0, zero], live_out: [v2, v4, v5, zero, v3]
// [Asm] # block parameters: []
// [Asm] .fill_buffer.146_0:
// [Asm]   # save_ctx1  # live: [a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v3, zero, v2]
// [Asm] # control
// [Asm]   mv v4, zero  # live: [v3, v4, zero, v2]
// [Asm]   li v26, 12345  # live: [v3, v4, zero, v26, v2]
// [Asm]   mv v5, v26  # live: [v3, v4, v5, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v4, v3], upward_exposed: [v4, v3], params_defs: [v4, v5]
// [Asm] # live_in: [v2, v4, v5, zero, v3], live_out: [v3, v4, v5, zero, v2]
// [Asm] # block parameters: [v4, v5]
// [Asm] .fill_buffer.146_2:
// [Asm] # control
// [Asm]   beq v4, v3, .fill_buffer.146_3  # live: [v2, v4, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v11, v16, v5, v10, v21, v13, v8, v7, v19, v4, v17, v24, v9], uses: [v11, v5, v16, v10, v21, v13, v7, v17, v24, v9, v8, v19, v4, v2], upward_exposed: [v4, v5, v2], params_defs: []
// [Asm] # live_in: [v3, v4, v5, zero, v2], live_out: [v2, v4, v5, zero, v3]
// [Asm] # block parameters: []
// [Asm] .fill_buffer.146_4:
// [Asm]   li v24, 75  # live: [v2, v5, zero, v4, v24, v3]
// [Asm]   mul v7, v5, v24  # live: [v2, zero, v7, v4, v3]
// [Asm]   addi v8, v7, 74  # live: [v2, zero, v8, v4, v3]
// [Asm]   li v21, 65537  # live: [v2, v21, zero, v8, v4, v3]
// [Asm]   div v9, v8, v21  # live: [v2, zero, v8, v4, v9, v3]
// [Asm]   li v19, 65537  # live: [v2, zero, v8, v19, v4, v9, v3]
// [Asm]   mul v10, v9, v19  # live: [v3, v8, v4, v10, zero, v2]
// [Asm]   sub v11, v8, v10  # live: [v3, v11, v4, zero, v2]
// [Asm]   slliw v16, v4, 2  # live: [v3, v11, v4, v16, zero, v2]
// [Asm]   add v17, v2, v16  # live: [v3, v11, v4, v17, zero, v2]
// [Asm]   sw v11, 0(v17)  # live: [v3, v11, v4, zero, v2]
// [Asm]   addi v13, v4, 1  # live: [v3, v11, zero, v13, v2]
// [Asm] # control
// [Asm]   mv v4, v13  # live: [v3, v11, v4, zero, v2]
// [Asm]   mv v5, v11  # live: [v3, v4, v5, zero, v2]
// [Asm]   j .fill_buffer.146_2  # live: [v3, v4, v5, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [v14], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v14]
// [Asm] # block parameters: []
// [Asm] .fill_buffer.146_3:
// [Asm] # control
// [Asm]   mv v14, zero  # live: [v14]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v14, a0], upward_exposed: [v14], params_defs: [v14]
// [Asm] # live_in: [v14], live_out: []
// [Asm] # block parameters: [v14]
// [Asm] .fill_buffer.146_5:
// [Asm] # control
// [Asm]   mv a0, v14  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main.150:
// [Asm] # block info: defs: [t1, v14, v7, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, v6, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v11, v14, a0, v7, a1, v6, s11, v9, v2], upward_exposed: [s11], params_defs: []
// [Asm] # live_in: [s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.150_0:
// [Asm]   # save_ctx1  # live: [s11]
// [Asm]   addi v2, s11, -400  # live: [v2]
// [Asm]   andi s11, v2, -8  # live: [v2]
// [Asm]   li v14, 100  # live: [v14, v2]
// [Asm]   mv a1, v14  # live: [v2]
// [Asm]   # save_ctx2  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0, v2]
// [Asm]   li v11, 100  # live: [v11, a0, v2]
// [Asm]   mv a1, v11  # live: [a1, a0, v2]
// [Asm]   call fill_buffer.146  # live: [a0, v2]
// [Asm]   mv v4, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm]   # save_ctx2  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0, v2]
// [Asm]   li v9, 100  # live: [a0, v9, v2]
// [Asm]   mv a1, v9  # live: [a1, a0, v2]
// [Asm]   call isort.147  # live: [a0, v2]
// [Asm]   mv v5, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm]   # save_ctx2  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   li v7, 100  # live: [a0, v7]
// [Asm]   mv a1, v7  # live: [a1, a0]
// [Asm]   call print_array.149  # live: [a0]
// [Asm]   mv v6, a0  # live: [v6]
// [Asm]   # restore_ctx2  # live: [v6]
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("random", Int), args: [("state", Int)], body: Prim(Prim(Var("state"), Int(75), Mul, kind=Some(Int)), Int(74), Add, kind=Some(Int))}, LetRec({name: ("modulo", Int), args: [("x", Int), ("y", Int)], body: Let(("q", Var({val: Some(Int)})), Prim(Var("x"), Var("y"), Div, kind=Some(Int)), Prim(Var("x"), Prim(Var("q"), Var("y"), Mul, kind=Some(Int)), Sub, kind=Some(Int)))}, LetRec({name: ("fill_buffer", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("aux", Unit), args: [("i", Int), ("state", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("new_state", Var({val: Some(Int)})), App(Var("random"), [Var("state")]), Let(("res", Var({val: Some(Int)})), App(Var("modulo"), [Var("new_state"), Int(65537)]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res")])))))}, App(Var("aux"), [Int(0), Int(12345)]))}, LetRec({name: ("isort", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("insert", Unit), args: [("arr", Array(Int)), ("i", Int)], body: If(Eq(Var("i"), Int(0)), Unit, If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))))))}, LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("insert"), [Var("arr"), Var("i")]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))}, App(Var("aux"), [Int(1)])))}, LetRec({name: ("print_array", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(32)]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, App(Var("aux"), [Int(0)]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), Int(100), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("fill_buffer"), [Var("arr"), Var("n")]), Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")])))))}, App(Var("main"), [])))))))
// [Knf] build_knf: Prim(Prim(Var("state"), Int(75), Mul, kind=Some(Int)), Int(74), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Var("state"), Int(75), Mul, kind=Some(Int))
// [Knf] build_knf: Var("state")
// [Knf] build_knf: Int(75)
// [Knf] build_knf: Int(74)
// [Knf] build_knf: LetRec({name: ("modulo", Int), args: [("x", Int), ("y", Int)], body: Let(("q", Var({val: Some(Int)})), Prim(Var("x"), Var("y"), Div, kind=Some(Int)), Prim(Var("x"), Prim(Var("q"), Var("y"), Mul, kind=Some(Int)), Sub, kind=Some(Int)))}, LetRec({name: ("fill_buffer", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("aux", Unit), args: [("i", Int), ("state", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("new_state", Var({val: Some(Int)})), App(Var("random"), [Var("state")]), Let(("res", Var({val: Some(Int)})), App(Var("modulo"), [Var("new_state"), Int(65537)]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res")])))))}, App(Var("aux"), [Int(0), Int(12345)]))}, LetRec({name: ("isort", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("insert", Unit), args: [("arr", Array(Int)), ("i", Int)], body: If(Eq(Var("i"), Int(0)), Unit, If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))))))}, LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("insert"), [Var("arr"), Var("i")]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))}, App(Var("aux"), [Int(1)])))}, LetRec({name: ("print_array", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(32)]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, App(Var("aux"), [Int(0)]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), Int(100), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("fill_buffer"), [Var("arr"), Var("n")]), Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")])))))}, App(Var("main"), []))))))
// [Knf] build_knf: Let(("q", Var({val: Some(Int)})), Prim(Var("x"), Var("y"), Div, kind=Some(Int)), Prim(Var("x"), Prim(Var("q"), Var("y"), Mul, kind=Some(Int)), Sub, kind=Some(Int)))
// [Knf] build_knf: Prim(Var("x"), Var("y"), Div, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Prim(Var("x"), Prim(Var("q"), Var("y"), Mul, kind=Some(Int)), Sub, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Prim(Var("q"), Var("y"), Mul, kind=Some(Int))
// [Knf] build_knf: Var("q")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: LetRec({name: ("fill_buffer", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("aux", Unit), args: [("i", Int), ("state", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("new_state", Var({val: Some(Int)})), App(Var("random"), [Var("state")]), Let(("res", Var({val: Some(Int)})), App(Var("modulo"), [Var("new_state"), Int(65537)]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res")])))))}, App(Var("aux"), [Int(0), Int(12345)]))}, LetRec({name: ("isort", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("insert", Unit), args: [("arr", Array(Int)), ("i", Int)], body: If(Eq(Var("i"), Int(0)), Unit, If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))))))}, LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("insert"), [Var("arr"), Var("i")]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))}, App(Var("aux"), [Int(1)])))}, LetRec({name: ("print_array", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(32)]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, App(Var("aux"), [Int(0)]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), Int(100), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("fill_buffer"), [Var("arr"), Var("n")]), Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")])))))}, App(Var("main"), [])))))
// [Knf] build_knf: LetRec({name: ("aux", Unit), args: [("i", Int), ("state", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("new_state", Var({val: Some(Int)})), App(Var("random"), [Var("state")]), Let(("res", Var({val: Some(Int)})), App(Var("modulo"), [Var("new_state"), Int(65537)]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res")])))))}, App(Var("aux"), [Int(0), Int(12345)]))
// [Knf] build_knf: If(Eq(Var("i"), Var("n")), Unit, Let(("new_state", Var({val: Some(Int)})), App(Var("random"), [Var("state")]), Let(("res", Var({val: Some(Int)})), App(Var("modulo"), [Var("new_state"), Int(65537)]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res")])))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("new_state", Var({val: Some(Int)})), App(Var("random"), [Var("state")]), Let(("res", Var({val: Some(Int)})), App(Var("modulo"), [Var("new_state"), Int(65537)]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res")]))))
// [Knf] build_knf: App(Var("random"), [Var("state")])
// [Knf] build_knf: Var("random")
// [Knf] build_knf: Var("state")
// [Knf] build_knf: Let(("res", Var({val: Some(Int)})), App(Var("modulo"), [Var("new_state"), Int(65537)]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res")])))
// [Knf] build_knf: App(Var("modulo"), [Var("new_state"), Int(65537)])
// [Knf] build_knf: Var("modulo")
// [Knf] build_knf: Var("new_state")
// [Knf] build_knf: Int(65537)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res")]))
// [Knf] build_knf: Put(Var("arr"), Var("i"), Var("res"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("res")
// [Knf] build_knf: App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res")])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("res")
// [Knf] build_knf: App(Var("aux"), [Int(0), Int(12345)])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(12345)
// [Knf] build_knf: LetRec({name: ("isort", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("insert", Unit), args: [("arr", Array(Int)), ("i", Int)], body: If(Eq(Var("i"), Int(0)), Unit, If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))))))}, LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("insert"), [Var("arr"), Var("i")]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))}, App(Var("aux"), [Int(1)])))}, LetRec({name: ("print_array", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(32)]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, App(Var("aux"), [Int(0)]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), Int(100), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("fill_buffer"), [Var("arr"), Var("n")]), Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")])))))}, App(Var("main"), []))))
// [Knf] build_knf: LetRec({name: ("insert", Unit), args: [("arr", Array(Int)), ("i", Int)], body: If(Eq(Var("i"), Int(0)), Unit, If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))))))}, LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("insert"), [Var("arr"), Var("i")]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))}, App(Var("aux"), [Int(1)])))
// [Knf] build_knf: If(Eq(Var("i"), Int(0)), Unit, If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))])))))
// [Knf] build_knf: Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Get(Var("arr"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))))
// [Knf] build_knf: Get(Var("arr"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))])))
// [Knf] build_knf: Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("tmp")
// [Knf] build_knf: App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("insert")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("insert"), [Var("arr"), Var("i")]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))}, App(Var("aux"), [Int(1)]))
// [Knf] build_knf: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("insert"), [Var("arr"), Var("i")]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("insert"), [Var("arr"), Var("i")]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("insert"), [Var("arr"), Var("i")])
// [Knf] build_knf: Var("insert")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Int(1)])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("print_array", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(32)]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, App(Var("aux"), [Int(0)]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), Int(100), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("fill_buffer"), [Var("arr"), Var("n")]), Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")])))))}, App(Var("main"), [])))
// [Knf] build_knf: LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(32)]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, App(Var("aux"), [Int(0)]))
// [Knf] build_knf: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(32)]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(32)]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: App(Var("print_int"), [Get(Var("arr"), Var("i"))])
// [Knf] build_knf: Get(Var("arr"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(32)]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("print_char"), [Int(32)])
// [Knf] build_knf: Int(32)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Int(0)])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), Int(100), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("fill_buffer"), [Var("arr"), Var("n")]), Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")])))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("n", Var({val: Some(Int)})), Int(100), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("fill_buffer"), [Var("arr"), Var("n")]), Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")])))))
// [Knf] build_knf: Int(100)
// [Knf] build_knf: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("fill_buffer"), [Var("arr"), Var("n")]), Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")]))))
// [Knf] build_knf: Array(Var("n"), Int(0))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("fill_buffer"), [Var("arr"), Var("n")]), Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")])))
// [Knf] build_knf: App(Var("fill_buffer"), [Var("arr"), Var("n")])
// [Knf] build_knf: Var("fill_buffer")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")]))
// [Knf] build_knf: App(Var("isort"), [Var("arr"), Var("n")])
// [Knf] build_knf: Var("isort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: App(Var("print_array"), [Var("arr"), Var("n")])
// [Knf] build_knf: Var("print_array")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Core] b3 control: Panic -> Jump(target=b5, args=[Unit])
// [Core] b4 control: Jump(target=b2, args=[Insn(iref=%7), Insn(iref=%5)]) already set
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b5 control: Panic -> Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[Int32(val=0), Int32(val=12345)]) already set
// [Core] b5 control: Panic -> Jump(target=b7, args=[Unit])
// [Core] b6 control: Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), Insn(iref=%11)]) already set
// [Core] b4 control: Panic -> Branch(cond=Insn(iref=%4), t=b5, t_args=[], f=b6, f_args=[])
// [Core] b3 control: Panic -> Jump(target=b8, args=[Unit])
// [Core] b7 control: Panic -> Jump(target=b8, args=[BlockParam(bref=b7, bpref=$b.0)])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b8 control: Panic -> Return(args=[BlockParam(bref=b8, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[FnParam(fref=f1, fpref=$f.0), FnParam(fref=f1, fpref=$f.1)]) already set
// [Core] b3 control: Panic -> Jump(target=b5, args=[Unit])
// [Core] b4 control: Jump(target=b2, args=[Insn(iref=%2)]) already set
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b5 control: Panic -> Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[Int32(val=1)]) already set
// [Core] b3 control: Panic -> Jump(target=b5, args=[Unit])
// [Core] b4 control: Jump(target=b2, args=[Insn(iref=%4)]) already set
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b5 control: Panic -> Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[Int32(val=0)]) already set
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%3)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl print_array.149
// [Main]   .type print_array.149, @function
// [Main] # leaf false
// [Main] print_array.149:
// [Main] .print_array.149_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   mv s2, zero
// [Main] 
// [Main] .print_array.149_2:
// [Main]   beq s2, s1, .print_array.149_3
// [Main] 
// [Main] .print_array.149_4:
// [Main]   slliw a0, s2, 2
// [Main]   add a0, s0, a0
// [Main]   lw a0, 0(a0)
// [Main]   call minimbt_print_int
// [Main]   li a0, 32
// [Main]   call minimbt_print_char
// [Main]   addi a0, s2, 1
// [Main]   mv s2, a0
// [Main]   j .print_array.149_2
// [Main] 
// [Main] .print_array.149_3:
// [Main]   mv a0, zero
// [Main] 
// [Main] .print_array.149_5:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl isort.147
// [Main]   .type isort.147, @function
// [Main] # leaf true
// [Main] isort.147:
// [Main] .isort.147_0:
// [Main]   mv a3, a0
// [Main]   li a0, 1
// [Main]   mv a2, a0
// [Main] 
// [Main] .isort.147_2:
// [Main]   bne a2, a1, .isort.147_4
// [Main] 
// [Main] .isort.147_3:
// [Main]   mv a0, zero
// [Main] 
// [Main] .isort.147_5:
// [Main]   ret
// [Main] 
// [Main] .isort.147_4:
// [Main] 
// [Main] .isort.147_7:
// [Main]   mv a4, a2
// [Main] 
// [Main] .isort.147_9:
// [Main]   beq a4, zero, .isort.147_10
// [Main] 
// [Main] .isort.147_11:
// [Main]   addi a0, a4, -1
// [Main]   slliw a0, a0, 2
// [Main]   add a0, a3, a0
// [Main]   lw a0, 0(a0)
// [Main]   slliw a5, a4, 2
// [Main]   add a5, a3, a5
// [Main]   lw a5, 0(a5)
// [Main]   bge a5, a0, .isort.147_12
// [Main] 
// [Main] .isort.147_13:
// [Main]   slliw a0, a4, 2
// [Main]   add a0, a3, a0
// [Main]   lw a0, 0(a0)
// [Main]   addi a5, a4, -1
// [Main]   slliw a6, a5, 2
// [Main]   add a6, a3, a6
// [Main]   lw a6, 0(a6)
// [Main]   slliw a4, a4, 2
// [Main]   add a4, a3, a4
// [Main]   sw a6, 0(a4)
// [Main]   slliw a4, a5, 2
// [Main]   add a4, a3, a4
// [Main]   sw a0, 0(a4)
// [Main]   mv a4, a5
// [Main]   j .isort.147_9
// [Main] 
// [Main] .isort.147_10:
// [Main]   mv a0, zero
// [Main] 
// [Main] .isort.147_15:
// [Main] 
// [Main] .isort.147_6:
// [Main]   addi a0, a2, 1
// [Main]   mv a2, a0
// [Main]   j .isort.147_2
// [Main] 
// [Main] .isort.147_12:
// [Main]   mv a0, zero
// [Main] 
// [Main] .isort.147_14:
// [Main]   j .isort.147_15
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main.150
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl fill_buffer.146
// [Main]   .type fill_buffer.146, @function
// [Main] # leaf true
// [Main] fill_buffer.146:
// [Main] .fill_buffer.146_0:
// [Main]   mv a2, a0
// [Main]   mv a4, a1
// [Main]   mv a3, zero
// [Main]   li a0, 12345
// [Main]   mv a1, a0
// [Main] 
// [Main] .fill_buffer.146_2:
// [Main]   beq a3, a4, .fill_buffer.146_3
// [Main] 
// [Main] .fill_buffer.146_4:
// [Main]   li a0, 75
// [Main]   mul a0, a1, a0
// [Main]   addi a0, a0, 74
// [Main]   li a1, 65537
// [Main]   div a1, a0, a1
// [Main]   li a5, 65537
// [Main]   mul a1, a1, a5
// [Main]   sub a0, a0, a1
// [Main]   slliw a1, a3, 2
// [Main]   add a1, a2, a1
// [Main]   sw a0, 0(a1)
// [Main]   addi a1, a3, 1
// [Main]   mv a3, a1
// [Main]   mv a1, a0
// [Main]   j .fill_buffer.146_2
// [Main] 
// [Main] .fill_buffer.146_3:
// [Main]   mv a0, zero
// [Main] 
// [Main] .fill_buffer.146_5:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.150
// [Main]   .type main.150, @function
// [Main] # leaf false
// [Main] main.150:
// [Main] .main.150_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   addi s0, s11, -400
// [Main]   andi s11, s0, -8
// [Main]   li a0, 100
// [Main]   mv a1, a0
// [Main]   mv a0, s0
// [Main]   li a1, 100
// [Main]   call fill_buffer.146
// [Main]   mv a0, s0
// [Main]   li a1, 100
// [Main]   call isort.147
// [Main]   mv a0, s0
// [Main]   li a1, 100
// [Main]   call print_array.149
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function main.150
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[Mem(fref=f4, mref=m0), Int32(val=100)])
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Lowering insn Call(ty=Unit, f=f2, args=[Mem(fref=f4, mref=m0), Int32(val=100)])
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Lowering insn Call(ty=Unit, f=f3, args=[Mem(fref=f4, mref=m0), Int32(val=100)])
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Lowering control Return(args=[Insn(iref=%3)])
// [Wasm] Local Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Lowered function main.150 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [Wasm] Lowering function isort.147
// [Wasm] Lowering control Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Jump(target=b2, args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b15, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b15, args=[Unit])
// [Wasm] Lowering control Jump(target=b15, args=[BlockParam(bref=b14, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b14, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b9, bpref=$b.0), offset=BlockParam(bref=b9, bpref=$b.1), width=@32))
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.1) -> $b9.$b.1
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b9, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.1) -> $b9.$b.1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b9, bpref=$b.0), offset=Insn(iref=%9), width=@32))
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b9, bpref=$b.0), offset=BlockParam(bref=b9, bpref=$b.1), width=@32), val=Insn(iref=%10))
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.1) -> $b9.$b.1
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b9, bpref=$b.0), offset=Insn(iref=%9), width=@32), val=Insn(iref=%8))
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering control Jump(target=b9, args=[BlockParam(bref=b9, bpref=$b.0), Insn(iref=%9)])
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.1) -> $b9.$b.1
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b9, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.1) -> $b9.$b.1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b9, bpref=$b.0), offset=Insn(iref=%4), width=@32))
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b9, bpref=$b.0), offset=BlockParam(bref=b9, bpref=$b.1), width=@32))
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.1) -> $b9.$b.1
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%5), Insn(iref=%6)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Branch(cond=Insn(iref=%7), t=b12, t_args=[], f=b13, f_args=[])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b9, bpref=$b.1), Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.1) -> $b9.$b.1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b10, t_args=[], f=b11, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b8, args=[FnParam(fref=f2, fpref=$f.0), BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.1) -> $b9.$b.1
// [Wasm] Lowering control Jump(target=b7, args=[])
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b2, bpref=$b.0), FnParam(fref=f2, fpref=$f.1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b1, args=[Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b9, bpref=$b.1) -> $b9.$b.1
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function isort.147 to wasm
// [Wasm] Lowering function print_array.149
// [Wasm] Lowering control Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f3, fpref=$f.0), offset=BlockParam(bref=b2, bpref=$b.0), width=@32))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Int32(val=32)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b2, args=[Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b2, bpref=$b.0), FnParam(fref=f3, fpref=$f.1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b1, args=[Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function print_array.149 to wasm
// [Wasm] Lowering function fill_buffer.146
// [Wasm] Lowering control Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[BlockParam(bref=b2, bpref=$b.1), Int32(val=75)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%1), Int32(val=74)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Div, args=[Insn(iref=%2), Int32(val=65537)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%3), Int32(val=65537)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%2), Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f0, fpref=$f.0), offset=BlockParam(bref=b2, bpref=$b.0), width=@32), val=Insn(iref=%5))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Jump(target=b2, args=[Insn(iref=%7), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b2, bpref=$b.0), FnParam(fref=f0, fpref=$f.1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b1, args=[Int32(val=0), Int32(val=12345)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function fill_buffer.146 to wasm
// [KnfOpt] func_tre: random.1 false
// [KnfOpt] func_tre: modulo.6 false
// [KnfOpt] func_tre: fill_buffer.11 false
// [KnfOpt] func_tre: aux.14 true
// [KnfOpt] func_tre: isort.25 false
// [KnfOpt] func_tre: insert.28 true
// [KnfOpt] func_tre: aux.46 true
// [KnfOpt] func_tre: print_array.52 false
// [KnfOpt] func_tre: aux.55 true
// [KnfOpt] func_tre: main.64 false
// [KnfOpt] freq: {random.1: Once, modulo.6: Once, fill_buffer.11: Once, aux.14: Once, aux.70: Many(2), isort.25: Once, insert.28: Once, insert.79: Many(2), aux.46: Once, aux.97: Many(2), print_array.52: Once, aux.55: Once, aux.102: Many(2), main.64: Once}
// [KnfOpt] Inline threshold 7
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision random.1 accepted
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision modulo.6 accepted
// [KnfOpt] Knf inline Some(modulo) let res.75: Int = Unit
// [KnfOpt] let _76: Unit = Put arr.12[i.71] = res.75
// [KnfOpt] let _77: Int = Int(1)
// [KnfOpt] let _78: Int = Add(i.71, _77)
// [KnfOpt] Jump(aux.70, [_78, res.75, ])
// [KnfOpt] Knf inline Some(random) let new_state.73: Int = Unit
// [KnfOpt] let _74: Int = Int(65537)
// [KnfOpt] let q.110: Int = Div(new_state.73, _74)
// [KnfOpt] let _111: Int = Mul(q.110, _74)
// [KnfOpt] let res.75: Int = Sub(new_state.73, _111)
// [KnfOpt] let _76: Unit = Put arr.12[i.71] = res.75
// [KnfOpt] let _77: Int = Int(1)
// [KnfOpt] let _78: Int = Add(i.71, _77)
// [KnfOpt] Jump(aux.70, [_78, res.75, ])
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision modulo.6 accepted
// [KnfOpt] Knf inline Some(modulo) let res.75: Int = Unit
// [KnfOpt] let _76: Unit = Put arr.12[i.71] = res.75
// [KnfOpt] let _77: Int = Int(1)
// [KnfOpt] let _78: Int = Add(i.71, _77)
// [KnfOpt] Jump(aux.70, [_78, res.75, ])
// [KnfOpt] Inline threshold 17
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision aux.14 accepted
// [KnfOpt] Knf inline Some(aux) Unit
// [KnfOpt] Inline threshold 37
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision insert.28 rejected
// [KnfOpt] Inline threshold 11
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision aux.46 accepted
// [KnfOpt] Knf inline Some(aux) Unit
// [KnfOpt] Inline threshold 17
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision aux.55 accepted
// [KnfOpt] Knf inline Some(aux) Unit
// [KnfOpt] Inline threshold 23
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision fill_buffer.11 rejected
// [KnfOpt] Inline threshold 53
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 2
// [KnfOpt] Inline decision isort.25 rejected
// [KnfOpt] Inline threshold 21
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision print_array.52 rejected
// [KnfOpt] freq: {random.1: Once, modulo.6: Once, fill_buffer.11: Once, aux.117: Many(2), isort.25: Once, insert.28: Once, insert.79: Many(2), aux.126: Many(2), print_array.52: Once, aux.131: Many(2), main.64: Once}
// [KnfOpt] Inline threshold 7
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision random.1 accepted
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision modulo.6 accepted
// [KnfOpt] Knf inline Some(modulo) let res.122: Int = Unit
// [KnfOpt] let _123: Unit = Put arr.12[i.118] = res.122
// [KnfOpt] let _124: Int = Int(1)
// [KnfOpt] let _125: Int = Add(i.118, _124)
// [KnfOpt] Jump(aux.117, [_125, res.122, ])
// [KnfOpt] Knf inline Some(random) let new_state.120: Int = Unit
// [KnfOpt] let _121: Int = Int(65537)
// [KnfOpt] let q.139: Int = Div(new_state.120, _121)
// [KnfOpt] let _140: Int = Mul(q.139, _121)
// [KnfOpt] let res.122: Int = Sub(new_state.120, _140)
// [KnfOpt] let _123: Unit = Put arr.12[i.118] = res.122
// [KnfOpt] let _124: Int = Int(1)
// [KnfOpt] let _125: Int = Add(i.118, _124)
// [KnfOpt] Jump(aux.117, [_125, res.122, ])
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision modulo.6 accepted
// [KnfOpt] Knf inline Some(modulo) let res.122: Int = Unit
// [KnfOpt] let _123: Unit = Put arr.12[i.118] = res.122
// [KnfOpt] let _124: Int = Int(1)
// [KnfOpt] let _125: Int = Add(i.118, _124)
// [KnfOpt] Jump(aux.117, [_125, res.122, ])
// [KnfOpt] Inline threshold 37
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision insert.28 rejected
// [KnfOpt] Inline threshold 21
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision fill_buffer.11 rejected
// [KnfOpt] Inline threshold 51
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 2
// [KnfOpt] Inline decision isort.25 rejected
// [KnfOpt] Inline threshold 19
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision print_array.52 rejected
// [KnfOpt] Numbers of let rec: 5 5 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f4: Once, f1: Once, f10: Once, f2: Once, f3: Once, f0: Once})
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] isort.147 is inlining Call(ty=Unit, f=f1, args=[FnParam(fref=f2, fpref=$f.0), BlockParam(bref=b2, bpref=$b.0)])
// [CoreOpt] shifted callee .fn insert.148 #f1 : fn(array[int32], int32) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b7 {
// [CoreOpt]   .bb #b7 () {
// [CoreOpt]     jump b8($f0, $f1)
// [CoreOpt]   }
// [CoreOpt]   .loop #b8 pre #Some(b7) header #b9 {
// [CoreOpt]     .block #b10
// [CoreOpt]     .block #b11
// [CoreOpt]     .block #b12
// [CoreOpt]     .block #b13
// [CoreOpt]     .block #b14
// [CoreOpt]     .block #b15
// [CoreOpt]   }
// [CoreOpt]   .bb #b9 (array[int32], int32) {
// [CoreOpt]     let %3: bool = eq($b9.1, 0)
// [CoreOpt]     br %3 b10() b11()
// [CoreOpt]   }
// [CoreOpt]   .bb #b10 () {
// [CoreOpt]     jump b15(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b11 () {
// [CoreOpt]     let %4: int32 = sub($b9.1, 1)
// [CoreOpt]     let %5: int32 = load int32 offset($b9.0, %4 * @32)
// [CoreOpt]     let %6: int32 = load int32 offset($b9.0, $b9.1 * @32)
// [CoreOpt]     let %7: bool = le(%5, %6)
// [CoreOpt]     br %7 b12() b13()
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 () {
// [CoreOpt]     jump b14(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b13 () {
// [CoreOpt]     let %8: int32 = load int32 offset($b9.0, $b9.1 * @32)
// [CoreOpt]     let %9: int32 = sub($b9.1, 1)
// [CoreOpt]     let %10: int32 = load int32 offset($b9.0, %9 * @32)
// [CoreOpt]     let _ = store int32 offset($b9.0, $b9.1 * @32) <- %10
// [CoreOpt]     let %12: int32 = sub($b9.1, 1)
// [CoreOpt]     let _ = store int32 offset($b9.0, %12 * @32) <- %8
// [CoreOpt]     let %14: int32 = sub($b9.1, 1)
// [CoreOpt]     jump b9($b9.0, %14)
// [CoreOpt]   }
// [CoreOpt]   .bb #b14 (unit) {
// [CoreOpt]     jump b15($b14.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b15 (unit) {
// [CoreOpt]     return $b15.0
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f1
// [CoreOpt] LVN subst Insn(iref=%12) with Insn(iref=%9)
// [CoreOpt] LVN subst Insn(iref=%14) with Insn(iref=%9)
