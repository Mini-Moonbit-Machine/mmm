// [Asm] pre_assigned_registers: Insn(iref=%9) -> v13, Self(fref=f12) -> v0, Insn(iref=%8) -> v12, Insn(iref=%10) -> v14, Insn(iref=%5) -> v9, Insn(iref=%0) -> v4, Insn(iref=%4) -> v8, FnParam(fref=f12, fpref=$f.1) -> v3, Insn(iref=%3) -> v7, Insn(iref=%7) -> v11, FnParam(fref=f12, fpref=$f.0) -> v2, BlockParam(bref=b5, bpref=$b.0) -> v17, BlockParam(bref=b6, bpref=$b.0) -> v18, Insn(iref=%2) -> v6, Insn(iref=%1) -> v5, Insn(iref=%11) -> v15, Insn(iref=%6) -> v10, Insn(iref=%12) -> v16
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%2), Insn(iref=%3)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[FnParam(fref=f12, fpref=$f.1), Int32(val=0)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v18]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v17]
// [Asm] move_origin: [zero]
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v17]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a1, zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, a1, zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v0, zero, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v0, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v18]
// [Asm] move_origin: [zero]
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v18]
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v0, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v37]
// [Asm] live_set: [v3, v0, v37, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: [v38]
// [Asm] live_set: [v3, v0, v38, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v38 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v3, v0, v6, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v34]
// [Asm] live_set: [v3, v0, v6, zero, v34, v2]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v3, v35, v0, v6, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v7, v0, v6, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v0, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v31]
// [Asm] live_set: [v3, v0, v31, v2]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v3, v0, v32, v2]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v3, v0, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v3, v0, v10, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v3, v0, v9, v27, v2]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v3, v0, v28, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v3, v0, v11, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v3, v0, v11, v25, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v3, v0, v11, v9, v26, v2]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v0, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v3, v0, v9, v13, v2]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v3, v0, v9, v22, v2]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v3, v0, v9, v23, v2]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v0, v2]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v0, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v0, v15, v2]
// [Asm] move_origin: [v0]
// [Asm] defined: s10 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v19, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v19, v15, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v19, v15, a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v19, a1, a0]
// [Asm] move_origin: [v15]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v16]
// [Asm] live_set: [v16]
// [Asm] move_origin: [a0]
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v16]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v17]
// [Asm] move_origin: [v16]
// [Asm] defined: v17 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v18]
// [Asm] move_origin: [v17]
// [Asm] defined: v18 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of insert38_12"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r38 [label="a5", color=blue];
// [Asm]   r33 [label="t3", color=blue];
// [Asm]   r9 [label="v37 ← a3", color=green];
// [Asm]   r26 [label="v23 ← a4", color=green];
// [Asm]   r6 [label="v3 ← a1", color=green];
// [Asm]   r13 [label="v35 ← a4", color=green];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r29 [label="v19 ← a2", color=green];
// [Asm]   r35 [label="a2", color=blue];
// [Asm]   r7 [label="v18 ← a0", color=green];
// [Asm]   r10 [label="v38 ← a3", color=green];
// [Asm]   r8 [label="v5 ← a3", color=green];
// [Asm]   r5 [label="v2 ← a0", color=green];
// [Asm]   r36 [label="a3", color=blue];
// [Asm]   r24 [label="v13 ← a4", color=green];
// [Asm]   r32 [label="t2", color=blue];
// [Asm]   r15 [label="v31 ← a3", color=green];
// [Asm]   r31 [label="t1", color=blue];
// [Asm]   r39 [label="a6", color=blue];
// [Asm]   r17 [label="v9 ← a3", color=green];
// [Asm]   r12 [label="v34 ← a4", color=green];
// [Asm]   r37 [label="a4", color=blue];
// [Asm]   r20 [label="v28 ← a4", color=green];
// [Asm]   r23 [label="v26 ← a5", color=green];
// [Asm]   r3 [label="a1", color=blue];
// [Asm]   r27 [label="v15 ← a1", color=green];
// [Asm]   r1 [label="v17 ← a0", color=green];
// [Asm]   r40 [label="a7", color=blue];
// [Asm]   r41 [label="v16 ← a0", color=green];
// [Asm]   r28 [label="s10", color=blue];
// [Asm]   r11 [label="v6 ← a3", color=green];
// [Asm]   r34 [label="t4", color=blue];
// [Asm]   r22 [label="v25 ← a5", color=green];
// [Asm]   r14 [label="v7 ← a4", color=green];
// [Asm]   r30 [label="t0", color=blue];
// [Asm]   r25 [label="v22 ← a4", color=green];
// [Asm]   r2 [label="v0 ← a2", color=green];
// [Asm]   r16 [label="v32 ← a3", color=green];
// [Asm]   r18 [label="v10 ← a4", color=green];
// [Asm]   r19 [label="v27 ← a4", color=green];
// [Asm]   r21 [label="v11 ← a4", color=green];
// [Asm]   r6 -- r21;
// [Asm]   r0 -- r36;
// [Asm]   r5 -- r21;
// [Asm]   r17 -- r21;
// [Asm]   r0 -- r32;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r10;
// [Asm]   r27 -- r29;
// [Asm]   r11 -- r14;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r5 -- r18;
// [Asm]   r2 -- r10;
// [Asm]   r5 -- r29;
// [Asm]   r2 -- r16;
// [Asm]   r27 -- r28;
// [Asm]   r3 -- r5;
// [Asm]   r17 -- r19;
// [Asm]   r6 -- r13;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r0 -- r40;
// [Asm]   r11 -- r13;
// [Asm]   r0 -- r2;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r17 -- r22;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r4 -- r12;
// [Asm]   r0 -- r38;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r4 -- r8;
// [Asm]   r5 -- r14;
// [Asm]   r2 -- r22;
// [Asm]   r21 -- r22;
// [Asm]   r6 -- r23;
// [Asm]   r2 -- r24;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r17 -- r20;
// [Asm]   r6 -- r25;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r17 -- r18;
// [Asm]   r6 -- r11;
// [Asm]   r2 -- r26;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r18;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r23;
// [Asm]   r0 -- r34;
// [Asm]   r17 -- r26;
// [Asm]   r5 -- r13;
// [Asm]   r11 -- r12;
// [Asm]   r5 -- r19;
// [Asm]   r17 -- r24;
// [Asm]   r6 -- r16;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r17 -- r25;
// [Asm]   r0 -- r35;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r26;
// [Asm]   r6 -- r12;
// [Asm]   r6 -- r24;
// [Asm]   r6 -- r20;
// [Asm]   r21 -- r23;
// [Asm]   r0 -- r31;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r19;
// [Asm]   r4 -- r11;
// [Asm]   r17 -- r23;
// [Asm]   r0 -- r33;
// [Asm]   r5 -- r28;
// [Asm]   r2 -- r14;
// [Asm]   r5 -- r9;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r39;
// [Asm]   r0 -- r29;
// [Asm]   r3 -- r29;
// [Asm]   r0 -- r37;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r2 -- r17;
// [Asm]   r5 -- r25;
// [Asm]   r5 -- r27;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r2 -- r19;
// [Asm]   r0 -- r30;
// [Asm]   r0 -- r27;
// [Asm]   r2 -- r3;
// [Asm]   r2 -- r27;
// [Asm]   r5 -- r15;
// [Asm]   r5 -- r12;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:a0-> 2:v0-> 3:a1-> 5:v2-> 27:v15-> 29:v19-> 4:zero-> 6:v3-> 8:v5-> 9:v37-> 10:v38-> 11:v6-> 12:v34-> 13:v35-> 14:v7-> 15:v31-> 16:v32-> 17:v9-> 18:v10-> 19:v27-> 20:v28-> 21:v11-> 22:v25-> 23:v26-> 24:v13-> 25:v22-> 26:v23-> 28:s10-> 30:t0-> 31:t1-> 32:t2-> 33:t3-> 34:t4-> 35:a2-> 36:a3-> 37:a4-> 38:a5-> 39:a6-> 40:a7-> 1:v17-> 7:v18-> 41:v16"
// [Asm]   comment = "v37<-a3;v23<-a4;v3<-a1;v35<-a4;v19<-a2;v18<-a0;v38<-a3;v5<-a3;v2<-a0;v13<-a4;v31<-a3;v9<-a3;v34<-a4;v28<-a4;v26<-a5;v15<-a1;v17<-a0;v16<-a0;v6<-a3;v25<-a5;v7<-a4;v22<-a4;v0<-a2;v32<-a3;v10<-a4;v27<-a4;v11<-a4;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of insert38_12"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v17, zero ->   mv a0, zero
// [Asm] subst   j .insert38_12_5 ->   j .insert38_12_5
// [Asm] subst   mv v0, s10 ->   mv a2, s10
// [Asm] subst   beq v3, zero, .insert38_12_1 ->   beq a1, zero, .insert38_12_1
// [Asm] subst   mv v18, zero ->   mv a0, zero
// [Asm] subst   j .insert38_12_6 ->   j .insert38_12_6
// [Asm] subst   addi v5, v3, -1 ->   addi a3, a1, -1
// [Asm] subst   slliw v37, v5, 2 ->   slliw a3, a3, 2
// [Asm] subst   add v38, v2, v37 ->   add a3, a0, a3
// [Asm] subst   lw v6, 0(v38) ->   lw a3, 0(a3)
// [Asm] subst   slliw v34, v3, 2 ->   slliw a4, a1, 2
// [Asm] subst   add v35, v2, v34 ->   add a4, a0, a4
// [Asm] subst   lw v7, 0(v35) ->   lw a4, 0(a4)
// [Asm] subst   bge v7, v6, .insert38_12_3 ->   bge a4, a3, .insert38_12_3
// [Asm] subst   slliw v31, v3, 2 ->   slliw a3, a1, 2
// [Asm] subst   add v32, v2, v31 ->   add a3, a0, a3
// [Asm] subst   lw v9, 0(v32) ->   lw a3, 0(a3)
// [Asm] subst   addi v10, v3, -1 ->   addi a4, a1, -1
// [Asm] subst   slliw v27, v10, 2 ->   slliw a4, a4, 2
// [Asm] subst   add v28, v2, v27 ->   add a4, a0, a4
// [Asm] subst   lw v11, 0(v28) ->   lw a4, 0(a4)
// [Asm] subst   slliw v25, v3, 2 ->   slliw a5, a1, 2
// [Asm] subst   add v26, v2, v25 ->   add a5, a0, a5
// [Asm] subst   sw v11, 0(v26) ->   sw a4, 0(a5)
// [Asm] subst   addi v13, v3, -1 ->   addi a4, a1, -1
// [Asm] subst   slliw v22, v13, 2 ->   slliw a4, a4, 2
// [Asm] subst   add v23, v2, v22 ->   add a4, a0, a4
// [Asm] subst   sw v9, 0(v23) ->   sw a3, 0(a4)
// [Asm] subst   addi v15, v3, -1 ->   addi a1, a1, -1
// [Asm] subst   mv s10, v0 ->   mv s10, a2
// [Asm] subst   ld v19, 0(v0) ->   ld a2, 0(a2)
// [Asm] subst   jalr v19 ->   jalr a2
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v6, FnParam(fref=f4, fpref=$f.0) -> v2, Self(fref=f4) -> v0, Mem(fref=f4, mref=m0) -> v4, FnParam(fref=f4, fpref=$f.1) -> v3, Insn(iref=%0) -> v5
// [Asm] defs: []
// [Asm] live_set: [a1, s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, s11, zero, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v3, zero, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: s11 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v3, v11, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, zero]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v4, zero]
// [Asm] move_origin: [v4]
// [Asm] defined: s10 is X
// [Asm] defs: [v7]
// [Asm] live_set: [zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v7]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of print_array68_4"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r20 [label="a6", color=blue];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="v7 ← a1", color=green];
// [Asm]   r6 [label="v4 ← a2", color=green];
// [Asm]   r13 [label="t2", color=blue];
// [Asm]   r4 [label="v3 ← a1", color=green];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t0", color=blue];
// [Asm]   r7 [label="v11 ← a3", color=green];
// [Asm]   r10 [label="a0", color=blue];
// [Asm]   r22 [label="v6 ← a0", color=green];
// [Asm]   r14 [label="t3", color=blue];
// [Asm]   r8 [label="s10", color=blue];
// [Asm]   r5 [label="v9 ← a2", color=green];
// [Asm]   r15 [label="t4", color=blue];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r16 [label="a2", color=blue];
// [Asm]   r18 [label="a4", color=blue];
// [Asm]   r19 [label="a5", color=blue];
// [Asm]   r17 [label="a3", color=blue];
// [Asm]   r21 [label="a7", color=blue];
// [Asm]   r12 [label="t1", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r10 -- r20;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r10 -- r18;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r2 -- r4;
// [Asm]   r10 -- r12;
// [Asm]   r3 -- r6;
// [Asm]   r10 -- r15;
// [Asm]   r10 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r10;
// [Asm]   r10 -- r13;
// [Asm]   r10 -- r19;
// [Asm]   r3 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r4 -- r7;
// [Asm]   r9 -- r10;
// [Asm]   r3 -- r7;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r0 -- r7;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r10 -- r21;
// [Asm]   r10 -- r16;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r10 -- r17;
// [Asm]   r10 -- r14;
// [Asm]   comment = "0:v2-> 1:a1-> 2:s11-> 3:zero-> 4:v3-> 5:v9-> 6:v4-> 7:v11-> 8:s10-> 9:v7-> 10:a0-> 11:t0-> 12:t1-> 13:t2-> 14:t3-> 15:t4-> 16:a2-> 17:a3-> 18:a4-> 19:a5-> 20:a6-> 21:a7-> 22:v6"
// [Asm]   comment = "v2<-a0;v7<-a1;v4<-a2;v3<-a1;v11<-a3;v6<-a0;v9<-a2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of print_array68_4"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v9, s11, -24 ->   addi a2, s11, -24
// [Asm] subst   andi v4, v9, -8 ->   andi a2, a2, -8
// [Asm] subst   mv s11, v4 ->   mv s11, a2
// [Asm] subst   la v11, aux73_17 ->   la a3, aux73_17
// [Asm] subst   sd v11, 0(v4) ->   sd a3, 0(a2)
// [Asm] subst   sd v3, 8(v4) ->   sd a1, 8(a2)
// [Asm] subst   sd v2, 16(v4) ->   sd a0, 16(a2)
// [Asm] subst   mv s10, v4 ->   mv s10, a2
// [Asm] subst   ld v7, 0(v4) ->   ld a1, 0(a2)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   jalr v7 ->   jalr a1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v10, Insn(iref=%3) -> v9, Self(fref=f9) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v12, Insn(iref=%2) -> v8, FreeVar(fvref=^1) -> v4, FreeVar(fvref=^2) -> v5, Insn(iref=%1) -> v7, FnParam(fref=f9, fpref=$f.1) -> v3, FnParam(fref=f9, fpref=$f.0) -> v2, Insn(iref=%5) -> v11, Insn(iref=%0) -> v6
// [Asm] skipping Op(ty=Bool, op=Eq, args=[FnParam(fref=f9, fpref=$f.0), FreeVar(fvref=^1)])
// [Asm] defs: []
// [Asm] live_set: [v3, v0, v5, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v0, v5, a0, v2]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v0, v5, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v7, v0, v5, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v0, v5, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v7, v0, v5, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v0, v5, a0, v2]
// [Asm] move_origin: [v7]
// [Asm] defined: a0 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v0, v5, v18, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v0, v5, a1, a0, v2]
// [Asm] move_origin: [v18]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v0, v5, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v2, v0, v5, v8]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v0, v5, v8]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v2, v0, v5, v16, v8]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v2, v0, v17, v8]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v0, v8]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v0, v10, v8]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v0, v10, v8]
// [Asm] move_origin: [v0]
// [Asm] defined: s10 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v10, v13, v8]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v10, v13, v8]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v13, v8]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0, v13]
// [Asm] move_origin: [v8]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: [a0]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v12]
// [Asm] move_origin: [v11]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [a1, zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, a1, zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v0, zero, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v0, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v0, v4, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v0, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v12]
// [Asm] move_origin: [zero]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v12]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v12]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux19_9"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="v17 ← a0", color=green];
// [Asm]   r23 [label="v13 ← a2", color=green];
// [Asm]   r3 [label="v2 ← s2", color=green];
// [Asm]   r9 [label="a1", color=blue];
// [Asm]   r26 [label="zero", color=blue];
// [Asm]   r27 [label="v3 ← a0", color=green];
// [Asm]   r6 [label="t2", color=blue];
// [Asm]   r13 [label="a5", color=blue];
// [Asm]   r4 [label="t0", color=blue];
// [Asm]   r1 [label="v0 ← s0", color=green];
// [Asm]   r28 [label="v4 ← a1", color=green];
// [Asm]   r11 [label="a3", color=blue];
// [Asm]   r7 [label="t3", color=blue];
// [Asm]   r10 [label="a2", color=blue];
// [Asm]   r22 [label="s10", color=blue];
// [Asm]   r14 [label="a6", color=blue];
// [Asm]   r8 [label="t4", color=blue];
// [Asm]   r5 [label="t1", color=blue];
// [Asm]   r24 [label="v11 ← a0", color=green];
// [Asm]   r15 [label="a7", color=blue];
// [Asm]   r25 [label="v12 ← a0", color=green];
// [Asm]   r2 [label="v5 ← s1", color=green];
// [Asm]   r16 [label="v7 ← a0", color=green];
// [Asm]   r18 [label="v8 ← a1", color=green];
// [Asm]   r19 [label="v16 ← a0", color=green];
// [Asm]   r17 [label="v18 ← a1", color=green];
// [Asm]   r21 [label="v10 ← a0", color=green];
// [Asm]   r12 [label="a4", color=blue];
// [Asm]   r0 -- r15;
// [Asm]   r3 -- r19;
// [Asm]   r0 -- r13;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r26;
// [Asm]   r2 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r16;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r0 -- r14;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r18 -- r21;
// [Asm]   r0 -- r23;
// [Asm]   r2 -- r16;
// [Asm]   r3 -- r28;
// [Asm]   r27 -- r28;
// [Asm]   r2 -- r7;
// [Asm]   r18 -- r22;
// [Asm]   r2 -- r11;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r5;
// [Asm]   r1 -- r28;
// [Asm]   r21 -- r23;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r26 -- r28;
// [Asm]   r26 -- r27;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r18 -- r19;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r1 -- r21;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r3 -- r13;
// [Asm]   r9 -- r23;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r14;
// [Asm]   r3 -- r27;
// [Asm]   r2 -- r17;
// [Asm]   r0 -- r10;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r0 -- r12;
// [Asm]   r18 -- r20;
// [Asm]   r0 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r2 -- r9;
// [Asm]   r0 -- r4;
// [Asm]   r21 -- r22;
// [Asm]   r1 -- r14;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r2 -- r3;
// [Asm]   r2 -- r27;
// [Asm]   r0 -- r18;
// [Asm]   r18 -- r23;
// [Asm]   comment = "0:a0-> 1:v0-> 2:v5-> 3:v2-> 4:t0-> 5:t1-> 6:t2-> 7:t3-> 8:t4-> 9:a1-> 10:a2-> 11:a3-> 12:a4-> 13:a5-> 14:a6-> 15:a7-> 17:v18-> 18:v8-> 19:v16-> 16:v7-> 20:v17-> 23:v13-> 21:v10-> 26:zero-> 27:v3-> 28:v4-> 22:s10-> 24:v11-> 25:v12"
// [Asm]   comment = "v17<-a0;v13<-a2;v2<-s2;v3<-a0;v0<-s0;v4<-a1;v11<-a0;v12<-a0;v5<-s1;v7<-a0;v8<-a1;v16<-a0;v18<-a1;v10<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux19_9"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call random1_0 ->   call random1_0
// [Asm] subst   li v18, 65537 ->   li a1, 65537
// [Asm] subst   call modulo7_1 ->   call modulo7_1
// [Asm] subst   mv v8, a0 ->   mv a1, a0
// [Asm] subst   slliw v16, v2, 2 ->   slliw a0, s2, 2
// [Asm] subst   add v17, v5, v16 ->   add a0, s1, a0
// [Asm] subst   sw v8, 0(v17) ->   sw a1, 0(a0)
// [Asm] subst   addi v10, v2, 1 ->   addi a0, s2, 1
// [Asm] subst   mv s10, v0 ->   mv s10, s0
// [Asm] subst   ld v13, 0(v0) ->   ld a2, 0(s0)
// [Asm] subst   jalr v13 ->   jalr a2
// [Asm] subst   mv v0, s10 ->   mv s0, s10
// [Asm] subst   mv v2, a0 ->   mv s2, a0
// [Asm] subst   mv v3, a1 ->   mv a0, a1
// [Asm] subst   lw v4, 8(v0) ->   lw a1, 8(s0)
// [Asm] subst   ld v5, 16(v0) ->   ld s1, 16(s0)
// [Asm] subst   beq v2, v4, .aux19_9_1 ->   beq s2, a1, .aux19_9_1
// [Asm] subst   mv v12, zero ->   mv a0, zero
// [Asm] subst   j .aux19_9_3 ->   j .aux19_9_3
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f17, fpref=$f.0) -> v2, Insn(iref=%3) -> v8, Self(fref=f17) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v11, Insn(iref=%2) -> v7, Insn(iref=%1) -> v6, FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, Insn(iref=%5) -> v10, Insn(iref=%0) -> v5, Insn(iref=%4) -> v9
// [Asm] skipping Op(ty=Bool, op=Eq, args=[FnParam(fref=f17, fpref=$f.0), FreeVar(fvref=^1)])
// [Asm] defs: []
// [Asm] live_set: [zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v0, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v0, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v0, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: [zero]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v0, v4, v18, v2]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v0, v19, v2]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v0, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v0, v6, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v0, a0, v2]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v0, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v0, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v0, a0, v2]
// [Asm] move_origin: [v15]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v0, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v0, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v0, v9]
// [Asm] move_origin: [v0]
// [Asm] defined: s10 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v12, a0]
// [Asm] move_origin: [v9]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [a0]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v10]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: [v10]
// [Asm] defined: v11 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux73_17"];
// [Asm]   r0 [label="v0 ← s0", color=green];
// [Asm]   r20 [label="a6", color=blue];
// [Asm]   r23 [label="v15 ← a0", color=green];
// [Asm]   r3 [label="v2 ← s1", color=green];
// [Asm]   r9 [label="v6 ← a0", color=green];
// [Asm]   r26 [label="s10", color=blue];
// [Asm]   r27 [label="v12 ← a1", color=green];
// [Asm]   r6 [label="v11 ← a0", color=green];
// [Asm]   r13 [label="t3", color=blue];
// [Asm]   r4 [label="v3 ← a0", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r28 [label="v10 ← a0", color=green];
// [Asm]   r11 [label="t1", color=blue];
// [Asm]   r7 [label="v18 ← a0", color=green];
// [Asm]   r10 [label="t0", color=blue];
// [Asm]   r22 [label="v7 ← a0", color=green];
// [Asm]   r14 [label="t4", color=blue];
// [Asm]   r8 [label="v19 ← a0", color=green];
// [Asm]   r5 [label="v4 ← a1", color=green];
// [Asm]   r24 [label="v8 ← a0", color=green];
// [Asm]   r15 [label="a1", color=blue];
// [Asm]   r25 [label="v9 ← a0", color=green];
// [Asm]   r2 [label="a0", color=blue];
// [Asm]   r16 [label="a2", color=blue];
// [Asm]   r18 [label="a4", color=blue];
// [Asm]   r19 [label="a5", color=blue];
// [Asm]   r17 [label="a3", color=blue];
// [Asm]   r21 [label="a7", color=blue];
// [Asm]   r12 [label="t2", color=blue];
// [Asm]   r0 -- r15;
// [Asm]   r3 -- r19;
// [Asm]   r0 -- r13;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r2 -- r18;
// [Asm]   r0 -- r24;
// [Asm]   r1 -- r4;
// [Asm]   r0 -- r17;
// [Asm]   r25 -- r27;
// [Asm]   r3 -- r12;
// [Asm]   r0 -- r14;
// [Asm]   r0 -- r25;
// [Asm]   r2 -- r10;
// [Asm]   r0 -- r21;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r25 -- r26;
// [Asm]   r0 -- r23;
// [Asm]   r2 -- r16;
// [Asm]   r0 -- r22;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r11;
// [Asm]   r3 -- r18;
// [Asm]   r0 -- r19;
// [Asm]   r0 -- r16;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r22;
// [Asm]   r3 -- r8;
// [Asm]   r3 -- r4;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r8;
// [Asm]   r3 -- r13;
// [Asm]   r2 -- r12;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r3 -- r10;
// [Asm]   r2 -- r21;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r0 -- r10;
// [Asm]   r3 -- r17;
// [Asm]   r5 -- r7;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r0 -- r7;
// [Asm]   r2 -- r3;
// [Asm]   r0 -- r20;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   r0 -- r18;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:v0-> 1:zero-> 3:v2-> 4:v3-> 5:v4-> 7:v18-> 2:a0-> 10:t0-> 11:t1-> 12:t2-> 13:t3-> 14:t4-> 15:a1-> 16:a2-> 17:a3-> 18:a4-> 19:a5-> 20:a6-> 21:a7-> 8:v19-> 9:v6-> 22:v7-> 23:v15-> 24:v8-> 25:v9-> 27:v12-> 26:s10-> 6:v11-> 28:v10"
// [Asm]   comment = "v0<-s0;v15<-a0;v2<-s1;v6<-a0;v12<-a1;v11<-a0;v3<-a0;v10<-a0;v18<-a0;v7<-a0;v19<-a0;v4<-a1;v8<-a0;v9<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux73_17"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v0, s10 ->   mv s0, s10
// [Asm] subst   mv v2, a0 ->   mv s1, a0
// [Asm] subst   lw v3, 8(v0) ->   lw a0, 8(s0)
// [Asm] subst   ld v4, 16(v0) ->   ld a1, 16(s0)
// [Asm] subst   beq v2, v3, .aux73_17_1 ->   beq s1, a0, .aux73_17_1
// [Asm] subst   mv v11, zero ->   mv a0, zero
// [Asm] subst   j .aux73_17_3 ->   j .aux73_17_3
// [Asm] subst   ret ->   ret
// [Asm] subst   slliw v18, v2, 2 ->   slliw a0, s1, 2
// [Asm] subst   add v19, v4, v18 ->   add a0, a1, a0
// [Asm] subst   lw v6, 0(v19) ->   lw a0, 0(a0)
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v15, 32 ->   li a0, 32
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   addi v9, v2, 1 ->   addi a0, s1, 1
// [Asm] subst   mv s10, v0 ->   mv s10, s0
// [Asm] subst   ld v12, 0(v0) ->   ld a1, 0(s0)
// [Asm] subst   jalr v12 ->   jalr a1
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v4, Self(fref=f0) -> v0, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%0) -> v3
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of random1_0"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a0", color=blue];
// [Asm]   r1 [label="v6 ← a1", color=green];
// [Asm]   r3 [label="v4 ← a0", color=green];
// [Asm]   r2 [label="v3 ← a0", color=green];
// [Asm]   r0 -- r1;
// [Asm]   comment = "0:v2-> 1:v6-> 2:v3-> 3:v4-> 4:a0"
// [Asm]   comment = "v2<-a0;v6<-a1;v4<-a0;v3<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of random1_0"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v6, 75 ->   li a1, 75
// [Asm] subst   mul v3, v2, v6 ->   mul a0, a0, a1
// [Asm] subst   addi v4, v3, 74 ->   addi a0, a0, 74
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v5, FnParam(fref=f1, fpref=$f.1) -> v3, Self(fref=f1) -> v0, FnParam(fref=f1, fpref=$f.0) -> v2, Insn(iref=%0) -> v4, Insn(iref=%2) -> v6
// [Asm] defs: []
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of modulo7_1"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r5 [label="v6 ← a0", color=green];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r4 [label="v5 ← a1", color=green];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r3 [label="v4 ← a2", color=green];
// [Asm]   r2 [label="v3 ← a1", color=green];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r3;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:v2-> 1:a1-> 2:v3-> 3:v4-> 4:v5-> 5:v6-> 6:a0"
// [Asm]   comment = "v2<-a0;v6<-a0;v5<-a1;v4<-a2;v3<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of modulo7_1"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   div v4, v2, v3 ->   div a2, a0, a1
// [Asm] subst   mul v5, v4, v3 ->   mul a1, a2, a1
// [Asm] subst   sub v6, v2, v5 ->   sub a0, a0, a1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v4, Insn(iref=%3) -> v6, Mem(fref=f5, mref=m0) -> v2, Self(fref=f5) -> v0, Insn(iref=%0) -> v3, Insn(iref=%2) -> v5
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [zero, v13]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: s11 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v15, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, v2]
// [Asm] move_origin: [v15]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a1, a0, zero, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0, v2]
// [Asm] move_origin: [v11]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [v9]
// [Asm] live_set: [a0, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0, v2]
// [Asm] move_origin: [v9]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [v7]
// [Asm] live_set: [a0, v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: [v7]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main85_5"];
// [Asm]   r0 [label="v13 ← a0", color=green];
// [Asm]   r20 [label="v9 ← a1", color=green];
// [Asm]   r23 [label="v6 ← a0", color=green];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r13 [label="a3", color=blue];
// [Asm]   r4 [label="v15 ← a0", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r22 [label="v7 ← a1", color=green];
// [Asm]   r14 [label="a4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r5 [label="a1", color=blue];
// [Asm]   r15 [label="a5", color=blue];
// [Asm]   r2 [label="v2 ← s0", color=green];
// [Asm]   r16 [label="a6", color=blue];
// [Asm]   r18 [label="v11 ← a1", color=green];
// [Asm]   r19 [label="v4 ← a0", color=green];
// [Asm]   r21 [label="v5 ← a0", color=green];
// [Asm]   r17 [label="a7", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r6 -- r11;
// [Asm]   r6 -- r15;
// [Asm]   r2 -- r14;
// [Asm]   r2 -- r15;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r6 -- r18;
// [Asm]   r1 -- r4;
// [Asm]   r6 -- r14;
// [Asm]   r6 -- r10;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r2 -- r21;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r10;
// [Asm]   r6 -- r17;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r17;
// [Asm]   r5 -- r7;
// [Asm]   r6 -- r16;
// [Asm]   r2 -- r16;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r2 -- r9;
// [Asm]   r6 -- r12;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r6 -- r20;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r13;
// [Asm]   comment = "0:v13-> 1:zero-> 2:v2-> 4:v15-> 5:a1-> 6:a0-> 7:a2-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:a3-> 14:a4-> 15:a5-> 16:a6-> 17:a7-> 18:v11-> 20:v9-> 3:s11-> 19:v4-> 21:v5-> 22:v7-> 23:v6"
// [Asm]   comment = "v13<-a0;v9<-a1;v6<-a0;v15<-a0;v7<-a1;v2<-s0;v11<-a1;v4<-a0;v5<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main85_5"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v13, s11, -400 ->   addi a0, s11, -400
// [Asm] subst   andi v2, v13, -8 ->   andi s0, a0, -8
// [Asm] subst   mv s11, v2 ->   mv s11, s0
// [Asm] subst   li v15, 100 ->   li a0, 100
// [Asm] subst   mv a1, v15 ->   mv a1, a0
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   call memseti32 ->   call memseti32
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   li v11, 100 ->   li a1, 100
// [Asm] subst   call fill_buffer14_2 ->   call fill_buffer14_2
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   li v9, 100 ->   li a1, 100
// [Asm] subst   call isort33_3 ->   call isort33_3
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   li v7, 100 ->   li a1, 100
// [Asm] subst   call print_array68_4 ->   call print_array68_4
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%1) -> v6, Mem(fref=f2, mref=m0) -> v4, FnParam(fref=f2, fpref=$f.0) -> v2, Insn(iref=%0) -> v5
// [Asm] defs: []
// [Asm] live_set: [a1, s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, s11, zero, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v3, v10, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: s11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v3, v4, v12, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, zero]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v4, zero]
// [Asm] move_origin: [v4]
// [Asm] defined: s10 is X
// [Asm] defs: [v7]
// [Asm] live_set: [zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v7]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0, v7]
// [Asm] move_origin: [v8]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of fill_buffer14_2"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r20 [label="a5", color=blue];
// [Asm]   r23 [label="v6 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="v7 ← a2", color=green];
// [Asm]   r6 [label="v4 ← a2", color=green];
// [Asm]   r13 [label="t1", color=blue];
// [Asm]   r4 [label="v3 ← a1", color=green];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="v8 ← a1", color=green];
// [Asm]   r7 [label="v12 ← a3", color=green];
// [Asm]   r10 [label="a0", color=blue];
// [Asm]   r22 [label="a7", color=blue];
// [Asm]   r14 [label="t2", color=blue];
// [Asm]   r8 [label="s10", color=blue];
// [Asm]   r5 [label="v10 ← a2", color=green];
// [Asm]   r15 [label="t3", color=blue];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r16 [label="t4", color=blue];
// [Asm]   r18 [label="a3", color=blue];
// [Asm]   r19 [label="a4", color=blue];
// [Asm]   r17 [label="a2", color=blue];
// [Asm]   r21 [label="a6", color=blue];
// [Asm]   r12 [label="t0", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r1 -- r9;
// [Asm]   r9 -- r11;
// [Asm]   r10 -- r20;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r10 -- r18;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r2 -- r4;
// [Asm]   r10 -- r12;
// [Asm]   r3 -- r6;
// [Asm]   r10 -- r15;
// [Asm]   r10 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r10;
// [Asm]   r10 -- r22;
// [Asm]   r10 -- r13;
// [Asm]   r10 -- r19;
// [Asm]   r3 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r4 -- r7;
// [Asm]   r9 -- r10;
// [Asm]   r3 -- r7;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r0 -- r7;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r10 -- r21;
// [Asm]   r10 -- r16;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r10 -- r17;
// [Asm]   r10 -- r14;
// [Asm]   comment = "0:v2-> 1:a1-> 2:s11-> 3:zero-> 4:v3-> 5:v10-> 6:v4-> 7:v12-> 9:v7-> 10:a0-> 11:v8-> 8:s10-> 12:t0-> 13:t1-> 14:t2-> 15:t3-> 16:t4-> 17:a2-> 18:a3-> 19:a4-> 20:a5-> 21:a6-> 22:a7-> 23:v6"
// [Asm]   comment = "v2<-a0;v6<-a0;v7<-a2;v4<-a2;v3<-a1;v8<-a1;v12<-a3;v10<-a2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of fill_buffer14_2"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v10, s11, -24 ->   addi a2, s11, -24
// [Asm] subst   andi v4, v10, -8 ->   andi a2, a2, -8
// [Asm] subst   mv s11, v4 ->   mv s11, a2
// [Asm] subst   la v12, aux19_9 ->   la a3, aux19_9
// [Asm] subst   sd v12, 0(v4) ->   sd a3, 0(a2)
// [Asm] subst   sd v3, 8(v4) ->   sd a1, 8(a2)
// [Asm] subst   sd v2, 16(v4) ->   sd a0, 16(a2)
// [Asm] subst   mv s10, v4 ->   mv s10, a2
// [Asm] subst   ld v7, 0(v4) ->   ld a2, 0(a2)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   li v8, 12345 ->   li a1, 12345
// [Asm] subst   jalr v7 ->   jalr a2
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%0) -> v6, Insn(iref=%2) -> v8, Insn(iref=%1) -> v7, Mem(fref=f3, mref=m0) -> v4, FnParam(fref=f3, fpref=$f.0) -> v2, FnParam(fref=f3, fpref=$f.1) -> v3, Mem(fref=f3, mref=m1) -> v5, Self(fref=f3) -> v0
// [Asm] defs: []
// [Asm] live_set: [a1, s11, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, s11, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v3, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v4, s11, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: s11 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v3, v4, v17, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v3, v4, v12, v2]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v4, v5, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v4, v5, v2]
// [Asm] move_origin: [v5]
// [Asm] defined: s11 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v3, v4, v5, v14, v2]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v4, v5, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v5]
// [Asm] move_origin: [v5]
// [Asm] defined: s10 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v9]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10, v9]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v9]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of isort33_3"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r20 [label="a3", color=blue];
// [Asm]   r23 [label="a6", color=blue];
// [Asm]   r3 [label="v3 ← a1", color=green];
// [Asm]   r9 [label="v14 ← a4", color=green];
// [Asm]   r6 [label="v17 ← a3", color=green];
// [Asm]   r13 [label="a0", color=blue];
// [Asm]   r4 [label="v15 ← a2", color=green];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="v9 ← a1", color=green];
// [Asm]   r7 [label="v12 ← a3", color=green];
// [Asm]   r10 [label="s10", color=blue];
// [Asm]   r22 [label="a5", color=blue];
// [Asm]   r14 [label="t0", color=blue];
// [Asm]   r8 [label="v5 ← a3", color=green];
// [Asm]   r5 [label="v4 ← a2", color=green];
// [Asm]   r15 [label="t1", color=blue];
// [Asm]   r24 [label="a7", color=blue];
// [Asm]   r25 [label="v8 ← a0", color=green];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r16 [label="t2", color=blue];
// [Asm]   r18 [label="t4", color=blue];
// [Asm]   r19 [label="a2", color=blue];
// [Asm]   r17 [label="t3", color=blue];
// [Asm]   r21 [label="a4", color=blue];
// [Asm]   r12 [label="v10 ← a0", color=green];
// [Asm]   r13 -- r24;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r13 -- r15;
// [Asm]   r11 -- r13;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r9;
// [Asm]   r5 -- r8;
// [Asm]   r0 -- r3;
// [Asm]   r13 -- r23;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r8;
// [Asm]   r3 -- r6;
// [Asm]   r13 -- r14;
// [Asm]   r8 -- r9;
// [Asm]   r0 -- r5;
// [Asm]   r13 -- r17;
// [Asm]   r2 -- r5;
// [Asm]   r13 -- r16;
// [Asm]   r3 -- r9;
// [Asm]   r11 -- r12;
// [Asm]   r0 -- r1;
// [Asm]   r13 -- r18;
// [Asm]   r1 -- r13;
// [Asm]   r5 -- r7;
// [Asm]   r13 -- r22;
// [Asm]   r3 -- r7;
// [Asm]   r0 -- r4;
// [Asm]   r13 -- r21;
// [Asm]   r0 -- r7;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r13 -- r20;
// [Asm]   r13 -- r19;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   comment = "0:v2-> 1:a1-> 2:s11-> 3:v3-> 5:v4-> 6:v17-> 7:v12-> 8:v5-> 9:v14-> 4:v15-> 13:a0-> 11:v9-> 12:v10-> 14:t0-> 15:t1-> 16:t2-> 17:t3-> 18:t4-> 19:a2-> 20:a3-> 21:a4-> 22:a5-> 23:a6-> 24:a7-> 10:s10-> 25:v8"
// [Asm]   comment = "v2<-a0;v3<-a1;v14<-a4;v17<-a3;v15<-a2;v9<-a1;v12<-a3;v5<-a3;v4<-a2;v8<-a0;v10<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of isort33_3"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v15, s11, -8 ->   addi a2, s11, -8
// [Asm] subst   andi v4, v15, -8 ->   andi a2, a2, -8
// [Asm] subst   mv s11, v4 ->   mv s11, a2
// [Asm] subst   la v17, insert38_12 ->   la a3, insert38_12
// [Asm] subst   sd v17, 0(v4) ->   sd a3, 0(a2)
// [Asm] subst   addi v12, s11, -32 ->   addi a3, s11, -32
// [Asm] subst   andi v5, v12, -8 ->   andi a3, a3, -8
// [Asm] subst   mv s11, v5 ->   mv s11, a3
// [Asm] subst   la v14, aux60_14 ->   la a4, aux60_14
// [Asm] subst   sd v14, 0(v5) ->   sd a4, 0(a3)
// [Asm] subst   sd v3, 8(v5) ->   sd a1, 8(a3)
// [Asm] subst   sd v4, 16(v5) ->   sd a2, 16(a3)
// [Asm] subst   sd v2, 24(v5) ->   sd a0, 24(a3)
// [Asm] subst   mv s10, v5 ->   mv s10, a3
// [Asm] subst   ld v9, 0(v5) ->   ld a1, 0(a3)
// [Asm] subst   li v10, 1 ->   li a0, 1
// [Asm] subst   jalr v9 ->   jalr a1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v9, Self(fref=f14) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v10, Insn(iref=%2) -> v8, FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, Insn(iref=%1) -> v7, FreeVar(fvref=^3) -> v5, FnParam(fref=f14, fpref=$f.0) -> v2, Insn(iref=%0) -> v6
// [Asm] skipping Op(ty=Bool, op=Eq, args=[FnParam(fref=f14, fpref=$f.0), FreeVar(fvref=^1)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v0, v4, v5, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: s10 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v0, v14, v5, v2]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v0, v14, v5, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v0, v14, a0, v2]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v0, a1, v14, a0, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v0, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v0, v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v0, v8]
// [Asm] move_origin: [v0]
// [Asm] defined: s10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v8]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v8]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, a0]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v9]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [v9]
// [Asm] defined: v10 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [zero]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v10]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v0, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v0, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v0, v4, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v0, v4, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux60_14"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="v8 ← a0", color=green];
// [Asm]   r23 [label="v10 ← a0", color=green];
// [Asm]   r3 [label="v4 ← a1", color=green];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="v14 ← a2", color=green];
// [Asm]   r13 [label="a2", color=blue];
// [Asm]   r4 [label="v5 ← a0", color=green];
// [Asm]   r1 [label="s10", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a1", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r22 [label="v9 ← a0", color=green];
// [Asm]   r14 [label="a3", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r5 [label="v2 ← s1", color=green];
// [Asm]   r15 [label="a4", color=blue];
// [Asm]   r24 [label="zero", color=blue];
// [Asm]   r25 [label="v3 ← a2", color=green];
// [Asm]   r2 [label="v0 ← s0", color=green];
// [Asm]   r16 [label="a5", color=blue];
// [Asm]   r18 [label="a7", color=blue];
// [Asm]   r19 [label="v7 ← a0", color=green];
// [Asm]   r17 [label="a6", color=blue];
// [Asm]   r21 [label="v11 ← a1", color=green];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r0 -- r15;
// [Asm]   r0 -- r13;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r5 -- r10;
// [Asm]   r1 -- r4;
// [Asm]   r5 -- r17;
// [Asm]   r0 -- r17;
// [Asm]   r5 -- r13;
// [Asm]   r5 -- r18;
// [Asm]   r0 -- r14;
// [Asm]   r2 -- r10;
// [Asm]   r5 -- r19;
// [Asm]   r0 -- r21;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r0 -- r16;
// [Asm]   r3 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r2 -- r14;
// [Asm]   r5 -- r9;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r24;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r2 -- r17;
// [Asm]   r0 -- r10;
// [Asm]   r4 -- r25;
// [Asm]   r5 -- r7;
// [Asm]   r0 -- r12;
// [Asm]   r5 -- r14;
// [Asm]   r5 -- r25;
// [Asm]   r0 -- r11;
// [Asm]   r1 -- r5;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r24;
// [Asm]   r4 -- r6;
// [Asm]   r2 -- r19;
// [Asm]   r0 -- r7;
// [Asm]   r24 -- r25;
// [Asm]   r2 -- r3;
// [Asm]   r20 -- r21;
// [Asm]   r5 -- r15;
// [Asm]   r0 -- r18;
// [Asm]   r5 -- r12;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:a0-> 2:v0-> 5:v2-> 6:v14-> 7:a1-> 4:v5-> 1:s10-> 3:v4-> 24:zero-> 25:v3-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:a2-> 14:a3-> 15:a4-> 16:a5-> 17:a6-> 18:a7-> 19:v7-> 20:v8-> 21:v11-> 22:v9-> 23:v10"
// [Asm]   comment = "v8<-a0;v10<-a0;v4<-a1;v14<-a2;v5<-a0;v9<-a0;v2<-s1;v3<-a2;v0<-s0;v7<-a0;v11<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux60_14"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   mv s10, v4 ->   mv s10, a1
// [Asm] subst   ld v14, 0(v4) ->   ld a2, 0(a1)
// [Asm] subst   mv a1, v2 ->   mv a1, s1
// [Asm] subst   jalr v14 ->   jalr a2
// [Asm] subst   addi v8, v2, 1 ->   addi a0, s1, 1
// [Asm] subst   mv s10, v0 ->   mv s10, s0
// [Asm] subst   ld v11, 0(v0) ->   ld a1, 0(s0)
// [Asm] subst   jalr v11 ->   jalr a1
// [Asm] subst   mv v10, zero ->   mv a0, zero
// [Asm] subst   j .aux60_14_3 ->   j .aux60_14_3
// [Asm] subst   mv v0, s10 ->   mv s0, s10
// [Asm] subst   mv v2, a0 ->   mv s1, a0
// [Asm] subst   lw v3, 8(v0) ->   lw a2, 8(s0)
// [Asm] subst   ld v4, 16(v0) ->   ld a1, 16(s0)
// [Asm] subst   ld v5, 24(v0) ->   ld a0, 24(s0)
// [Asm] subst   beq v2, v3, .aux60_14_1 ->   beq s1, a2, .aux60_14_1
// [Asm] pre_assigned_registers: Self(fref=f20) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_20"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_20"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main85_5 ->   call main85_5
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] fill_buffer14_2:
// [Asm] # block info: defs: [v2, t1, v7, ft0, ft1, a1, s11, v12, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, v6, ft7, ft4, v10, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, v10, a0, zero, v8, v7, v4, a1, v6, v12, s11, v3], upward_exposed: [a1, s11, a0, zero], params_defs: []
// [Asm] # live_in: [a1, s11, a0, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .fill_buffer14_2_0:
// [Asm]   # save_ctx1  # live: [a1, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, s11, zero, v2]
// [Asm]   mv v3, a1  # live: [v3, s11, zero, v2]
// [Asm]   addi v10, s11, -24  # live: [v3, v10, zero, v2]
// [Asm]   andi v4, v10, -8  # live: [v3, v4, zero, v2]
// [Asm]   mv s11, v4  # live: [v3, v4, zero, v2]
// [Asm]   la v12, aux19_9  # live: [v3, v4, v12, zero, v2]
// [Asm]   sd v12, 0(v4)  # live: [v3, v4, zero, v2]
// [Asm]   sd v3, 8(v4)  # live: [v4, zero, v2]
// [Asm]   sd v2, 16(v4)  # live: [v4, zero]
// [Asm]   mv s10, v4  # live: [v4, zero]
// [Asm]   ld v7, 0(v4)  # live: [zero, v7]
// [Asm]   # save_ctx2  # live: [zero, v7]
// [Asm]   mv a0, zero  # live: [a0, v7]
// [Asm]   li v8, 12345  # live: [v8, a0, v7]
// [Asm]   mv a1, v8  # live: [a1, a0, v7]
// [Asm]   jalr v7  # live: [a0]
// [Asm]   mv v6, a0  # live: [v6]
// [Asm]   # restore_ctx2  # live: [v6]
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] isort33_3:
// [Asm] # block info: defs: [v2, t1, v14, ft0, ft1, a1, v12, s11, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, ft7, ft4, v5, v10, ft9, a5, a0, fa4, ft2, a2, v17, a3, v9, s10, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15, v3], uses: [v3, v5, v14, v10, a0, a1, v17, s11, v12, v9, v8, v4, v15, v2], upward_exposed: [a1, s11, a0], params_defs: []
// [Asm] # live_in: [a1, s11, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .isort33_3_0:
// [Asm]   # save_ctx1  # live: [a1, s11, a0]
// [Asm]   mv v2, a0  # live: [a1, s11, v2]
// [Asm]   mv v3, a1  # live: [v3, s11, v2]
// [Asm]   addi v15, s11, -8  # live: [v3, v15, v2]
// [Asm]   andi v4, v15, -8  # live: [v3, v4, v2]
// [Asm]   mv s11, v4  # live: [v3, v4, s11, v2]
// [Asm]   la v17, insert38_12  # live: [v3, v4, v17, s11, v2]
// [Asm]   sd v17, 0(v4)  # live: [v3, v4, s11, v2]
// [Asm]   addi v12, s11, -32  # live: [v3, v4, v12, v2]
// [Asm]   andi v5, v12, -8  # live: [v3, v4, v5, v2]
// [Asm]   mv s11, v5  # live: [v3, v4, v5, v2]
// [Asm]   la v14, aux60_14  # live: [v3, v4, v5, v14, v2]
// [Asm]   sd v14, 0(v5)  # live: [v3, v4, v5, v2]
// [Asm]   sd v3, 8(v5)  # live: [v4, v5, v2]
// [Asm]   sd v4, 16(v5)  # live: [v5, v2]
// [Asm]   sd v2, 24(v5)  # live: [v5]
// [Asm]   mv s10, v5  # live: [v5]
// [Asm]   ld v9, 0(v5)  # live: [v9]
// [Asm]   # save_ctx2  # live: [v9]
// [Asm]   li v10, 1  # live: [v10, v9]
// [Asm]   mv a0, v10  # live: [a0, v9]
// [Asm]   jalr v9  # live: [a0]
// [Asm]   mv v8, a0  # live: [v8]
// [Asm]   # restore_ctx2  # live: [v8]
// [Asm] # control
// [Asm]   mv a0, v8  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] aux73_17:
// [Asm] # block info: defs: [v3, v0, v4, v2], uses: [v3, v0, s10, a0, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0, zero], live_out: [v0, v4, zero, v2]
// [Asm] # block parameters: []
// [Asm] .aux73_17_0:
// [Asm]   # save_ctx1  # live: [zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, zero, v2]
// [Asm]   lw v3, 8(v0)  # live: [v3, v0, zero, v2]
// [Asm]   ld v4, 16(v0)  # live: [v3, v0, v4, zero, v2]
// [Asm] # control
// [Asm]   beq v2, v3, .aux73_17_1  # live: [v0, v4, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [t1, v7, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, v8, a6, v19, ft10, ft5, v6, ft7, v11, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, v9, s10, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v15], uses: [v18, v10, a0, v19, v0, v4, v6, v15, v12, v9, v2], upward_exposed: [v0, v4, v2], params_defs: []
// [Asm] # live_in: [v0, v4, v2], live_out: [v11]
// [Asm] # block parameters: []
// [Asm] .aux73_17_2:
// [Asm]   slliw v18, v2, 2  # live: [v0, v4, v18, v2]
// [Asm]   add v19, v4, v18  # live: [v0, v19, v2]
// [Asm]   lw v6, 0(v19)  # live: [v0, v6, v2]
// [Asm]   # save_ctx2  # live: [v0, v6, v2]
// [Asm]   mv a0, v6  # live: [v0, a0, v2]
// [Asm]   call minimbt_print_int  # live: [v0, a0, v2]
// [Asm]   mv v7, a0  # live: [v0, v2]
// [Asm]   # restore_ctx2  # live: [v0, v2]
// [Asm]   # save_ctx2  # live: [v0, v2]
// [Asm]   li v15, 32  # live: [v0, v15, v2]
// [Asm]   mv a0, v15  # live: [v0, a0, v2]
// [Asm]   call minimbt_print_char  # live: [v0, a0, v2]
// [Asm]   mv v8, a0  # live: [v0, v2]
// [Asm]   # restore_ctx2  # live: [v0, v2]
// [Asm]   addi v9, v2, 1  # live: [v0, v9]
// [Asm]   mv s10, v0  # live: [v0, v9]
// [Asm]   ld v12, 0(v0)  # live: [v12, v9]
// [Asm]   # save_ctx2  # live: [v12, v9]
// [Asm]   mv a0, v9  # live: [v12, a0]
// [Asm]   jalr v12  # live: [a0]
// [Asm]   mv v10, a0  # live: [v10]
// [Asm]   # restore_ctx2  # live: [v10]
// [Asm] # control
// [Asm]   mv v11, v10  # live: [v11]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v11, a0], upward_exposed: [v11], params_defs: [v11]
// [Asm] # live_in: [v11], live_out: []
// [Asm] # block parameters: [v11]
// [Asm] .aux73_17_3:
// [Asm] # control
// [Asm]   mv a0, v11  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v11], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v11]
// [Asm] # block parameters: []
// [Asm] .aux73_17_1:
// [Asm] # control
// [Asm]   mv v11, zero  # live: [v11]
// [Asm]   j .aux73_17_3  # live: [v11]
// [Asm] 
// [Asm] # leaf false
// [Asm] main85_5:
// [Asm] # block info: defs: [t1, v13, v7, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, v6, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15, v2], uses: [v11, v13, zero, a0, v7, a2, a1, v6, v15, s11, v9, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main85_5_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   addi v13, s11, -400  # live: [zero, v13]
// [Asm]   andi v2, v13, -8  # live: [zero, v2]
// [Asm]   mv s11, v2  # live: [zero, v2]
// [Asm]   li v15, 100  # live: [v15, zero, v2]
// [Asm]   mv a1, v15  # live: [a1, zero, v2]
// [Asm]   mv a0, v2  # live: [a1, a0, zero, v2]
// [Asm]   mv a2, zero  # live: [a2, a1, a0, v2]
// [Asm]   call memseti32  # live: [v2]
// [Asm]   # save_ctx2  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0, v2]
// [Asm]   li v11, 100  # live: [v11, a0, v2]
// [Asm]   mv a1, v11  # live: [a1, a0, v2]
// [Asm]   call fill_buffer14_2  # live: [a0, v2]
// [Asm]   mv v4, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm]   # save_ctx2  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0, v2]
// [Asm]   li v9, 100  # live: [a0, v9, v2]
// [Asm]   mv a1, v9  # live: [a1, a0, v2]
// [Asm]   call isort33_3  # live: [a0, v2]
// [Asm]   mv v5, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm]   # save_ctx2  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   li v7, 100  # live: [a0, v7]
// [Asm]   mv a1, v7  # live: [a1, a0]
// [Asm]   call print_array68_4  # live: [a0]
// [Asm]   mv v6, a0  # live: [v6]
// [Asm]   # restore_ctx2  # live: [v6]
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] insert38_12:
// [Asm] # block info: defs: [v3, v0, v2], uses: [v3, a1, s10, a0, zero], upward_exposed: [a1, s10, a0, zero], params_defs: []
// [Asm] # live_in: [a1, s10, a0, zero], live_out: [v2, v0, zero, v3]
// [Asm] # block parameters: []
// [Asm] .insert38_12_0:
// [Asm]   # save_ctx1  # live: [a1, zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v3, v0, zero, v2]
// [Asm] # control
// [Asm]   beq v3, zero, .insert38_12_1  # live: [v3, v0, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [v5, v35, v7, v37, v38, v6, v34], uses: [v3, v5, v35, v7, v37, v38, v6, v34, v2], upward_exposed: [v2, v3], params_defs: []
// [Asm] # live_in: [v3, v0, zero, v2], live_out: [v2, v0, zero, v3]
// [Asm] # block parameters: []
// [Asm] .insert38_12_2:
// [Asm]   addi v5, v3, -1  # live: [v3, v0, v5, zero, v2]
// [Asm]   slliw v37, v5, 2  # live: [v3, v0, v37, zero, v2]
// [Asm]   add v38, v2, v37  # live: [v3, v0, v38, zero, v2]
// [Asm]   lw v6, 0(v38)  # live: [v3, v0, v6, zero, v2]
// [Asm]   slliw v34, v3, 2  # live: [v3, v0, v6, zero, v34, v2]
// [Asm]   add v35, v2, v34  # live: [v3, v35, v0, v6, zero, v2]
// [Asm]   lw v7, 0(v35)  # live: [v3, v7, v0, v6, zero, v2]
// [Asm] # control
// [Asm]   bge v7, v6, .insert38_12_3  # live: [v3, v0, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [v25, t1, v16, v26, v13, v22, v32, ft0, ft1, a1, v28, fa1, fa2, ft6, v27, a4, fa6, a6, v19, ft10, ft5, ft7, v11, ft4, v10, ft9, a5, a0, fa4, ft2, a2, v17, a3, v31, s10, v9, ft8, t3, a7, fa7, t0, fa5, fa3, v23, ft3, fa0, t4, t2, v15], uses: [v2, v11, v25, v16, v10, v26, v13, a0, v22, v0, v32, a1, v31, v28, v9, v27, v23, v19, v15, v3], upward_exposed: [v2, v0, v3], params_defs: []
// [Asm] # live_in: [v3, v0, v2], live_out: [v17]
// [Asm] # block parameters: []
// [Asm] .insert38_12_4:
// [Asm]   slliw v31, v3, 2  # live: [v3, v0, v31, v2]
// [Asm]   add v32, v2, v31  # live: [v3, v0, v32, v2]
// [Asm]   lw v9, 0(v32)  # live: [v3, v0, v9, v2]
// [Asm]   addi v10, v3, -1  # live: [v3, v0, v10, v9, v2]
// [Asm]   slliw v27, v10, 2  # live: [v3, v0, v9, v27, v2]
// [Asm]   add v28, v2, v27  # live: [v3, v0, v28, v9, v2]
// [Asm]   lw v11, 0(v28)  # live: [v3, v0, v11, v9, v2]
// [Asm]   slliw v25, v3, 2  # live: [v3, v0, v11, v25, v9, v2]
// [Asm]   add v26, v2, v25  # live: [v3, v0, v11, v9, v26, v2]
// [Asm]   sw v11, 0(v26)  # live: [v3, v0, v9, v2]
// [Asm]   addi v13, v3, -1  # live: [v3, v0, v9, v13, v2]
// [Asm]   slliw v22, v13, 2  # live: [v3, v0, v9, v22, v2]
// [Asm]   add v23, v2, v22  # live: [v3, v0, v9, v23, v2]
// [Asm]   sw v9, 0(v23)  # live: [v3, v0, v2]
// [Asm]   addi v15, v3, -1  # live: [v0, v15, v2]
// [Asm]   mv s10, v0  # live: [v0, v15, v2]
// [Asm]   ld v19, 0(v0)  # live: [v19, v15, v2]
// [Asm]   # save_ctx2  # live: [v19, v15, v2]
// [Asm]   mv a0, v2  # live: [v19, v15, a0]
// [Asm]   mv a1, v15  # live: [v19, a1, a0]
// [Asm]   jalr v19  # live: [a0]
// [Asm]   mv v16, a0  # live: [v16]
// [Asm]   # restore_ctx2  # live: [v16]
// [Asm] # control
// [Asm]   mv v17, v16  # live: [v17]
// [Asm] 
// [Asm] # block info: defs: [v18], uses: [v17], upward_exposed: [v17], params_defs: [v17]
// [Asm] # live_in: [v17], live_out: [v18]
// [Asm] # block parameters: [v17]
// [Asm] .insert38_12_5:
// [Asm] # control
// [Asm]   mv v18, v17  # live: [v18]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v18, a0], upward_exposed: [v18], params_defs: [v18]
// [Asm] # live_in: [v18], live_out: []
// [Asm] # block parameters: [v18]
// [Asm] .insert38_12_6:
// [Asm] # control
// [Asm]   mv a0, v18  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v18], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v18]
// [Asm] # block parameters: []
// [Asm] .insert38_12_1:
// [Asm] # control
// [Asm]   mv v18, zero  # live: [v18]
// [Asm]   j .insert38_12_6  # live: [v18]
// [Asm] 
// [Asm] # block info: defs: [v17], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v17]
// [Asm] # block parameters: []
// [Asm] .insert38_12_3:
// [Asm] # control
// [Asm]   mv v17, zero  # live: [v17]
// [Asm]   j .insert38_12_5  # live: [v17]
// [Asm] 
// [Asm] # leaf false
// [Asm] aux19_9:
// [Asm] # block info: defs: [v3, v0, v4, v5, v2], uses: [v0, v4, a1, s10, a0, v2], upward_exposed: [a1, s10, a0], params_defs: []
// [Asm] # live_in: [a1, s10, a0, zero], live_out: [v2, v0, v5, zero, v3]
// [Asm] # block parameters: []
// [Asm] .aux19_9_0:
// [Asm]   # save_ctx1  # live: [a1, zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v3, v0, zero, v2]
// [Asm]   lw v4, 8(v0)  # live: [v3, v0, v4, zero, v2]
// [Asm]   ld v5, 16(v0)  # live: [v3, v0, v4, v5, zero, v2]
// [Asm] # control
// [Asm]   beq v2, v4, .aux19_9_1  # live: [v3, v0, v5, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [t1, v16, v13, v7, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, v11, ft4, ft9, v10, a5, fa4, a0, ft2, a2, v17, a3, s10, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v2, v11, v5, v16, v10, a0, v13, v7, v0, v17, a1, v18, v8, v3], upward_exposed: [v2, v0, v5, v3], params_defs: []
// [Asm] # live_in: [v3, v0, v5, v2], live_out: [v12]
// [Asm] # block parameters: []
// [Asm] .aux19_9_2:
// [Asm]   # save_ctx2  # live: [v3, v0, v5, v2]
// [Asm]   mv a0, v3  # live: [v0, v5, a0, v2]
// [Asm]   call random1_0  # live: [v0, v5, a0, v2]
// [Asm]   mv v7, a0  # live: [v7, v0, v5, v2]
// [Asm]   # restore_ctx2  # live: [v7, v0, v5, v2]
// [Asm]   # save_ctx2  # live: [v7, v0, v5, v2]
// [Asm]   mv a0, v7  # live: [v0, v5, a0, v2]
// [Asm]   li v18, 65537  # live: [v0, v5, v18, a0, v2]
// [Asm]   mv a1, v18  # live: [v0, v5, a1, a0, v2]
// [Asm]   call modulo7_1  # live: [v0, v5, a0, v2]
// [Asm]   mv v8, a0  # live: [v2, v0, v5, v8]
// [Asm]   # restore_ctx2  # live: [v2, v0, v5, v8]
// [Asm]   slliw v16, v2, 2  # live: [v2, v0, v5, v16, v8]
// [Asm]   add v17, v5, v16  # live: [v2, v0, v17, v8]
// [Asm]   sw v8, 0(v17)  # live: [v2, v0, v8]
// [Asm]   addi v10, v2, 1  # live: [v0, v10, v8]
// [Asm]   mv s10, v0  # live: [v0, v10, v8]
// [Asm]   ld v13, 0(v0)  # live: [v10, v13, v8]
// [Asm]   # save_ctx2  # live: [v10, v13, v8]
// [Asm]   mv a0, v10  # live: [a0, v13, v8]
// [Asm]   mv a1, v8  # live: [a1, a0, v13]
// [Asm]   jalr v13  # live: [a0]
// [Asm]   mv v11, a0  # live: [v11]
// [Asm]   # restore_ctx2  # live: [v11]
// [Asm] # control
// [Asm]   mv v12, v11  # live: [v12]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v12, a0], upward_exposed: [v12], params_defs: [v12]
// [Asm] # live_in: [v12], live_out: []
// [Asm] # block parameters: [v12]
// [Asm] .aux19_9_3:
// [Asm] # control
// [Asm]   mv a0, v12  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v12], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v12]
// [Asm] # block parameters: []
// [Asm] .aux19_9_1:
// [Asm] # control
// [Asm]   mv v12, zero  # live: [v12]
// [Asm]   j .aux19_9_3  # live: [v12]
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_20:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_20_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main85_5  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] aux60_14:
// [Asm] # block info: defs: [v3, v0, v4, v5, v2], uses: [v3, v0, s10, a0, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0, zero], live_out: [v0, v4, v5, zero, v2]
// [Asm] # block parameters: []
// [Asm] .aux60_14_0:
// [Asm]   # save_ctx1  # live: [zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, zero, v2]
// [Asm]   lw v3, 8(v0)  # live: [v3, v0, zero, v2]
// [Asm]   ld v4, 16(v0)  # live: [v3, v0, v4, zero, v2]
// [Asm]   ld v5, 24(v0)  # live: [v3, v0, v4, v5, zero, v2]
// [Asm] # control
// [Asm]   beq v2, v3, .aux60_14_1  # live: [v0, v4, v5, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, v11, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, s10, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v11, v5, v14, a0, v8, v0, v4, a1, v9, v2], upward_exposed: [v0, v4, v5, v2], params_defs: []
// [Asm] # live_in: [v0, v4, v5, v2], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .aux60_14_2:
// [Asm]   mv s10, v4  # live: [v0, v4, v5, v2]
// [Asm]   ld v14, 0(v4)  # live: [v0, v14, v5, v2]
// [Asm]   # save_ctx2  # live: [v0, v14, v5, v2]
// [Asm]   mv a0, v5  # live: [v0, v14, a0, v2]
// [Asm]   mv a1, v2  # live: [v0, a1, v14, a0, v2]
// [Asm]   jalr v14  # live: [v0, a0, v2]
// [Asm]   mv v7, a0  # live: [v0, v2]
// [Asm]   # restore_ctx2  # live: [v0, v2]
// [Asm]   addi v8, v2, 1  # live: [v0, v8]
// [Asm]   mv s10, v0  # live: [v0, v8]
// [Asm]   ld v11, 0(v0)  # live: [v11, v8]
// [Asm]   # save_ctx2  # live: [v11, v8]
// [Asm]   mv a0, v8  # live: [v11, a0]
// [Asm]   jalr v11  # live: [a0]
// [Asm]   mv v9, a0  # live: [v9]
// [Asm]   # restore_ctx2  # live: [v9]
// [Asm] # control
// [Asm]   mv v10, v9  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .aux60_14_3:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .aux60_14_1:
// [Asm] # control
// [Asm]   mv v10, zero  # live: [v10]
// [Asm]   j .aux60_14_3  # live: [v10]
// [Asm] 
// [Asm] # leaf true
// [Asm] modulo7_1:
// [Asm] # block info: defs: [v3, v4, v5, v6, a0, v2], uses: [v2, v5, a0, v4, a1, v6, v3], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .modulo7_1_0:
// [Asm]   # save_ctx1  # live: [a1, a0]
// [Asm]   mv v2, a0  # live: [a1, v2]
// [Asm]   mv v3, a1  # live: [v3, v2]
// [Asm]   div v4, v2, v3  # live: [v3, v4, v2]
// [Asm]   mul v5, v4, v3  # live: [v5, v2]
// [Asm]   sub v6, v2, v5  # live: [v6]
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] print_array68_4:
// [Asm] # block info: defs: [v2, t1, v7, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, v4, ft5, ft10, v6, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v9, s10, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, v11, a0, zero, v7, v4, a1, v6, s11, v9, v3], upward_exposed: [a1, s11, a0, zero], params_defs: []
// [Asm] # live_in: [a1, s11, a0, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .print_array68_4_0:
// [Asm]   # save_ctx1  # live: [a1, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, s11, zero, v2]
// [Asm]   mv v3, a1  # live: [v3, s11, zero, v2]
// [Asm]   addi v9, s11, -24  # live: [v3, zero, v9, v2]
// [Asm]   andi v4, v9, -8  # live: [v3, v4, zero, v2]
// [Asm]   mv s11, v4  # live: [v3, v4, zero, v2]
// [Asm]   la v11, aux73_17  # live: [v3, v11, v4, zero, v2]
// [Asm]   sd v11, 0(v4)  # live: [v3, v4, zero, v2]
// [Asm]   sd v3, 8(v4)  # live: [v4, zero, v2]
// [Asm]   sd v2, 16(v4)  # live: [v4, zero]
// [Asm]   mv s10, v4  # live: [v4, zero]
// [Asm]   ld v7, 0(v4)  # live: [zero, v7]
// [Asm]   # save_ctx2  # live: [zero, v7]
// [Asm]   mv a0, zero  # live: [a0, v7]
// [Asm]   jalr v7  # live: [a0]
// [Asm]   mv v6, a0  # live: [v6]
// [Asm]   # restore_ctx2  # live: [v6]
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] random1_0:
// [Asm] # block info: defs: [v3, v4, v6, a0, v2], uses: [v3, v4, v6, a0, v2], upward_exposed: [a0], params_defs: []
// [Asm] # live_in: [a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .random1_0_0:
// [Asm]   # save_ctx1  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   li v6, 75  # live: [v6, v2]
// [Asm]   mul v3, v2, v6  # live: [v3]
// [Asm]   addi v4, v3, 74  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_20  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("random", Int), args: [("state", Int)], body: Prim(Prim(Var("state"), Int(75), Mul, kind=Some(Int)), Int(74), Add, kind=Some(Int))}, LetRec({name: ("modulo", Int), args: [("x", Int), ("y", Int)], body: Let(("q", Var({val: Some(Int)})), Prim(Var("x"), Var("y"), Div, kind=Some(Int)), Prim(Var("x"), Prim(Var("q"), Var("y"), Mul, kind=Some(Int)), Sub, kind=Some(Int)))}, LetRec({name: ("fill_buffer", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("aux", Unit), args: [("i", Int), ("state", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("new_state", Var({val: Some(Int)})), App(Var("random"), [Var("state")]), Let(("res", Var({val: Some(Int)})), App(Var("modulo"), [Var("new_state"), Int(65537)]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res")])))))}, App(Var("aux"), [Int(0), Int(12345)]))}, LetRec({name: ("isort", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("insert", Unit), args: [("arr", Array(Int)), ("i", Int)], body: If(Eq(Var("i"), Int(0)), Unit, If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))))))}, LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("insert"), [Var("arr"), Var("i")]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))}, App(Var("aux"), [Int(1)])))}, LetRec({name: ("print_array", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(32)]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, App(Var("aux"), [Int(0)]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), Int(100), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("fill_buffer"), [Var("arr"), Var("n")]), Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")])))))}, App(Var("main"), [])))))))
// [Knf] build_knf: Prim(Prim(Var("state"), Int(75), Mul, kind=Some(Int)), Int(74), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Var("state"), Int(75), Mul, kind=Some(Int))
// [Knf] build_knf: Var("state")
// [Knf] build_knf: Int(75)
// [Knf] build_knf: Int(74)
// [Knf] build_knf: LetRec({name: ("modulo", Int), args: [("x", Int), ("y", Int)], body: Let(("q", Var({val: Some(Int)})), Prim(Var("x"), Var("y"), Div, kind=Some(Int)), Prim(Var("x"), Prim(Var("q"), Var("y"), Mul, kind=Some(Int)), Sub, kind=Some(Int)))}, LetRec({name: ("fill_buffer", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("aux", Unit), args: [("i", Int), ("state", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("new_state", Var({val: Some(Int)})), App(Var("random"), [Var("state")]), Let(("res", Var({val: Some(Int)})), App(Var("modulo"), [Var("new_state"), Int(65537)]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res")])))))}, App(Var("aux"), [Int(0), Int(12345)]))}, LetRec({name: ("isort", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("insert", Unit), args: [("arr", Array(Int)), ("i", Int)], body: If(Eq(Var("i"), Int(0)), Unit, If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))))))}, LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("insert"), [Var("arr"), Var("i")]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))}, App(Var("aux"), [Int(1)])))}, LetRec({name: ("print_array", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(32)]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, App(Var("aux"), [Int(0)]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), Int(100), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("fill_buffer"), [Var("arr"), Var("n")]), Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")])))))}, App(Var("main"), []))))))
// [Knf] build_knf: Let(("q", Var({val: Some(Int)})), Prim(Var("x"), Var("y"), Div, kind=Some(Int)), Prim(Var("x"), Prim(Var("q"), Var("y"), Mul, kind=Some(Int)), Sub, kind=Some(Int)))
// [Knf] build_knf: Prim(Var("x"), Var("y"), Div, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Prim(Var("x"), Prim(Var("q"), Var("y"), Mul, kind=Some(Int)), Sub, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Prim(Var("q"), Var("y"), Mul, kind=Some(Int))
// [Knf] build_knf: Var("q")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: LetRec({name: ("fill_buffer", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("aux", Unit), args: [("i", Int), ("state", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("new_state", Var({val: Some(Int)})), App(Var("random"), [Var("state")]), Let(("res", Var({val: Some(Int)})), App(Var("modulo"), [Var("new_state"), Int(65537)]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res")])))))}, App(Var("aux"), [Int(0), Int(12345)]))}, LetRec({name: ("isort", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("insert", Unit), args: [("arr", Array(Int)), ("i", Int)], body: If(Eq(Var("i"), Int(0)), Unit, If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))))))}, LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("insert"), [Var("arr"), Var("i")]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))}, App(Var("aux"), [Int(1)])))}, LetRec({name: ("print_array", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(32)]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, App(Var("aux"), [Int(0)]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), Int(100), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("fill_buffer"), [Var("arr"), Var("n")]), Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")])))))}, App(Var("main"), [])))))
// [Knf] build_knf: LetRec({name: ("aux", Unit), args: [("i", Int), ("state", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("new_state", Var({val: Some(Int)})), App(Var("random"), [Var("state")]), Let(("res", Var({val: Some(Int)})), App(Var("modulo"), [Var("new_state"), Int(65537)]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res")])))))}, App(Var("aux"), [Int(0), Int(12345)]))
// [Knf] build_knf: If(Eq(Var("i"), Var("n")), Unit, Let(("new_state", Var({val: Some(Int)})), App(Var("random"), [Var("state")]), Let(("res", Var({val: Some(Int)})), App(Var("modulo"), [Var("new_state"), Int(65537)]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res")])))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("new_state", Var({val: Some(Int)})), App(Var("random"), [Var("state")]), Let(("res", Var({val: Some(Int)})), App(Var("modulo"), [Var("new_state"), Int(65537)]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res")]))))
// [Knf] build_knf: App(Var("random"), [Var("state")])
// [Knf] build_knf: Var("random")
// [Knf] build_knf: Var("state")
// [Knf] build_knf: Let(("res", Var({val: Some(Int)})), App(Var("modulo"), [Var("new_state"), Int(65537)]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res")])))
// [Knf] build_knf: App(Var("modulo"), [Var("new_state"), Int(65537)])
// [Knf] build_knf: Var("modulo")
// [Knf] build_knf: Var("new_state")
// [Knf] build_knf: Int(65537)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Var("res")), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res")]))
// [Knf] build_knf: Put(Var("arr"), Var("i"), Var("res"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("res")
// [Knf] build_knf: App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res")])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("res")
// [Knf] build_knf: App(Var("aux"), [Int(0), Int(12345)])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(12345)
// [Knf] build_knf: LetRec({name: ("isort", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("insert", Unit), args: [("arr", Array(Int)), ("i", Int)], body: If(Eq(Var("i"), Int(0)), Unit, If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))))))}, LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("insert"), [Var("arr"), Var("i")]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))}, App(Var("aux"), [Int(1)])))}, LetRec({name: ("print_array", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(32)]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, App(Var("aux"), [Int(0)]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), Int(100), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("fill_buffer"), [Var("arr"), Var("n")]), Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")])))))}, App(Var("main"), []))))
// [Knf] build_knf: LetRec({name: ("insert", Unit), args: [("arr", Array(Int)), ("i", Int)], body: If(Eq(Var("i"), Int(0)), Unit, If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))))))}, LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("insert"), [Var("arr"), Var("i")]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))}, App(Var("aux"), [Int(1)])))
// [Knf] build_knf: If(Eq(Var("i"), Int(0)), Unit, If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: If(LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))), Get(Var("arr"), Var("i"))), Unit, Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))])))))
// [Knf] build_knf: Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Get(Var("arr"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))))
// [Knf] build_knf: Get(Var("arr"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))])))
// [Knf] build_knf: Put(Var("arr"), Var("i"), Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp")), App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("tmp"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("tmp")
// [Knf] build_knf: App(Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("insert")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("insert"), [Var("arr"), Var("i")]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))}, App(Var("aux"), [Int(1)]))
// [Knf] build_knf: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("insert"), [Var("arr"), Var("i")]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("insert"), [Var("arr"), Var("i")]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("insert"), [Var("arr"), Var("i")])
// [Knf] build_knf: Var("insert")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Int(1)])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("print_array", Unit), args: [("arr", Array(Int)), ("n", Int)], body: LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(32)]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, App(Var("aux"), [Int(0)]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), Int(100), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("fill_buffer"), [Var("arr"), Var("n")]), Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")])))))}, App(Var("main"), [])))
// [Knf] build_knf: LetRec({name: ("aux", Unit), args: [("i", Int)], body: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(32)]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, App(Var("aux"), [Int(0)]))
// [Knf] build_knf: If(Eq(Var("i"), Var("n")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(32)]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(32)]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: App(Var("print_int"), [Get(Var("arr"), Var("i"))])
// [Knf] build_knf: Get(Var("arr"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(32)]), App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("print_char"), [Int(32)])
// [Knf] build_knf: Int(32)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Int(0)])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), Int(100), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("fill_buffer"), [Var("arr"), Var("n")]), Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")])))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("n", Var({val: Some(Int)})), Int(100), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("fill_buffer"), [Var("arr"), Var("n")]), Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")])))))
// [Knf] build_knf: Int(100)
// [Knf] build_knf: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("n"), Int(0)), Let(("_", Var({val: Some(Unit)})), App(Var("fill_buffer"), [Var("arr"), Var("n")]), Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")]))))
// [Knf] build_knf: Array(Var("n"), Int(0))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("fill_buffer"), [Var("arr"), Var("n")]), Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")])))
// [Knf] build_knf: App(Var("fill_buffer"), [Var("arr"), Var("n")])
// [Knf] build_knf: Var("fill_buffer")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("isort"), [Var("arr"), Var("n")]), App(Var("print_array"), [Var("arr"), Var("n")]))
// [Knf] build_knf: App(Var("isort"), [Var("arr"), Var("n")])
// [Knf] build_knf: Var("isort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: App(Var("print_array"), [Var("arr"), Var("n")])
// [Knf] build_knf: Var("print_array")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memseti32
// [Main]   .type memseti32, @function
// [Main] memseti32:
// [Main]   blez a1, .memseti32_b1
// [Main]   slli a1, a1, 2
// [Main]   add a1, a1, a0
// [Main] .memseti32_b0:
// [Main]   sw a2, 0(a0)
// [Main]   addi a0, a0, 4
// [Main]   bne a0, a1, .memseti32_b0
// [Main] .memseti32_b1:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl fill_buffer14_2
// [Main]   .type fill_buffer14_2, @function
// [Main] # leaf false
// [Main] fill_buffer14_2:
// [Main] .fill_buffer14_2_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   addi a2, s11, -24
// [Main]   andi a2, a2, -8
// [Main]   mv s11, a2
// [Main]   la a3, aux19_9
// [Main]   sd a3, 0(a2)
// [Main]   sd a1, 8(a2)
// [Main]   sd a0, 16(a2)
// [Main]   mv s10, a2
// [Main]   ld a2, 0(a2)
// [Main]   mv a0, zero
// [Main]   li a1, 12345
// [Main]   jalr a2
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl isort33_3
// [Main]   .type isort33_3, @function
// [Main] # leaf false
// [Main] isort33_3:
// [Main] .isort33_3_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   addi a2, s11, -8
// [Main]   andi a2, a2, -8
// [Main]   mv s11, a2
// [Main]   la a3, insert38_12
// [Main]   sd a3, 0(a2)
// [Main]   addi a3, s11, -32
// [Main]   andi a3, a3, -8
// [Main]   mv s11, a3
// [Main]   la a4, aux60_14
// [Main]   sd a4, 0(a3)
// [Main]   sd a1, 8(a3)
// [Main]   sd a2, 16(a3)
// [Main]   sd a0, 24(a3)
// [Main]   mv s10, a3
// [Main]   ld a1, 0(a3)
// [Main]   li a0, 1
// [Main]   jalr a1
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux73_17
// [Main]   .type aux73_17, @function
// [Main] # leaf false
// [Main] aux73_17:
// [Main] .aux73_17_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   mv s0, s10
// [Main]   mv s1, a0
// [Main]   lw a0, 8(s0)
// [Main]   ld a1, 16(s0)
// [Main]   beq s1, a0, .aux73_17_1
// [Main] 
// [Main] .aux73_17_2:
// [Main]   slliw a0, s1, 2
// [Main]   add a0, a1, a0
// [Main]   lw a0, 0(a0)
// [Main]   call minimbt_print_int
// [Main]   li a0, 32
// [Main]   call minimbt_print_char
// [Main]   addi a0, s1, 1
// [Main]   mv s10, s0
// [Main]   ld a1, 0(s0)
// [Main]   jalr a1
// [Main] 
// [Main] .aux73_17_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .aux73_17_1:
// [Main]   mv a0, zero
// [Main]   j .aux73_17_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main85_5
// [Main]   .type main85_5, @function
// [Main] # leaf false
// [Main] main85_5:
// [Main] .main85_5_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   addi a0, s11, -400
// [Main]   andi s0, a0, -8
// [Main]   mv s11, s0
// [Main]   li a0, 100
// [Main]   mv a1, a0
// [Main]   mv a0, s0
// [Main]   mv a2, zero
// [Main]   call memseti32
// [Main]   mv a0, s0
// [Main]   li a1, 100
// [Main]   call fill_buffer14_2
// [Main]   mv a0, s0
// [Main]   li a1, 100
// [Main]   call isort33_3
// [Main]   mv a0, s0
// [Main]   li a1, 100
// [Main]   call print_array68_4
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl insert38_12
// [Main]   .type insert38_12, @function
// [Main] # leaf false
// [Main] insert38_12:
// [Main] .insert38_12_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a2, s10
// [Main]   beq a1, zero, .insert38_12_1
// [Main] 
// [Main] .insert38_12_2:
// [Main]   addi a3, a1, -1
// [Main]   slliw a3, a3, 2
// [Main]   add a3, a0, a3
// [Main]   lw a3, 0(a3)
// [Main]   slliw a4, a1, 2
// [Main]   add a4, a0, a4
// [Main]   lw a4, 0(a4)
// [Main]   bge a4, a3, .insert38_12_3
// [Main] 
// [Main] .insert38_12_4:
// [Main]   slliw a3, a1, 2
// [Main]   add a3, a0, a3
// [Main]   lw a3, 0(a3)
// [Main]   addi a4, a1, -1
// [Main]   slliw a4, a4, 2
// [Main]   add a4, a0, a4
// [Main]   lw a4, 0(a4)
// [Main]   slliw a5, a1, 2
// [Main]   add a5, a0, a5
// [Main]   sw a4, 0(a5)
// [Main]   addi a4, a1, -1
// [Main]   slliw a4, a4, 2
// [Main]   add a4, a0, a4
// [Main]   sw a3, 0(a4)
// [Main]   addi a1, a1, -1
// [Main]   mv s10, a2
// [Main]   ld a2, 0(a2)
// [Main]   jalr a2
// [Main] 
// [Main] .insert38_12_5:
// [Main] 
// [Main] .insert38_12_6:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .insert38_12_1:
// [Main]   mv a0, zero
// [Main]   j .insert38_12_6
// [Main] 
// [Main] .insert38_12_3:
// [Main]   mv a0, zero
// [Main]   j .insert38_12_5
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux19_9
// [Main]   .type aux19_9, @function
// [Main] # leaf false
// [Main] aux19_9:
// [Main] .aux19_9_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s0, s10
// [Main]   mv s2, a0
// [Main]   mv a0, a1
// [Main]   lw a1, 8(s0)
// [Main]   ld s1, 16(s0)
// [Main]   beq s2, a1, .aux19_9_1
// [Main] 
// [Main] .aux19_9_2:
// [Main]   call random1_0
// [Main]   li a1, 65537
// [Main]   call modulo7_1
// [Main]   mv a1, a0
// [Main]   slliw a0, s2, 2
// [Main]   add a0, s1, a0
// [Main]   sw a1, 0(a0)
// [Main]   addi a0, s2, 1
// [Main]   mv s10, s0
// [Main]   ld a2, 0(s0)
// [Main]   jalr a2
// [Main] 
// [Main] .aux19_9_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .aux19_9_1:
// [Main]   mv a0, zero
// [Main]   j .aux19_9_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_20
// [Main]   .type T$start_20, @function
// [Main] # leaf false
// [Main] T$start_20:
// [Main] .T$start_20_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main85_5
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux60_14
// [Main]   .type aux60_14, @function
// [Main] # leaf false
// [Main] aux60_14:
// [Main] .aux60_14_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   mv s0, s10
// [Main]   mv s1, a0
// [Main]   lw a2, 8(s0)
// [Main]   ld a1, 16(s0)
// [Main]   ld a0, 24(s0)
// [Main]   beq s1, a2, .aux60_14_1
// [Main] 
// [Main] .aux60_14_2:
// [Main]   mv s10, a1
// [Main]   ld a2, 0(a1)
// [Main]   mv a1, s1
// [Main]   jalr a2
// [Main]   addi a0, s1, 1
// [Main]   mv s10, s0
// [Main]   ld a1, 0(s0)
// [Main]   jalr a1
// [Main] 
// [Main] .aux60_14_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .aux60_14_1:
// [Main]   mv a0, zero
// [Main]   j .aux60_14_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl modulo7_1
// [Main]   .type modulo7_1, @function
// [Main] # leaf true
// [Main] modulo7_1:
// [Main] .modulo7_1_0:
// [Main]   div a2, a0, a1
// [Main]   mul a1, a2, a1
// [Main]   sub a0, a0, a1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl print_array68_4
// [Main]   .type print_array68_4, @function
// [Main] # leaf false
// [Main] print_array68_4:
// [Main] .print_array68_4_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   addi a2, s11, -24
// [Main]   andi a2, a2, -8
// [Main]   mv s11, a2
// [Main]   la a3, aux73_17
// [Main]   sd a3, 0(a2)
// [Main]   sd a1, 8(a2)
// [Main]   sd a0, 16(a2)
// [Main]   mv s10, a2
// [Main]   ld a1, 0(a2)
// [Main]   mv a0, zero
// [Main]   jalr a1
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl random1_0
// [Main]   .type random1_0, @function
// [Main] # leaf true
// [Main] random1_0:
// [Main] .random1_0_0:
// [Main]   li a1, 75
// [Main]   mul a0, a0, a1
// [Main]   addi a0, a0, 74
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_20
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Parser] flags: []
