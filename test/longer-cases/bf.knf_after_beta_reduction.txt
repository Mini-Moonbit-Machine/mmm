let rec read_ch_until_newline_or_eof1: Int = () {
  let c.2: Int = ExtApply(minimbt_read_char, [])
  let _3: Int = Int(10)
  if (c.2 == _3) then {
    Int(-1)
  } else {
    let _4: Int = Int(13)
    if (c.2 == _4) then {
      Int(-1)
    } else {
      Var(c.2)
    }
  }
}
let rec main136: Var({val: Some(Unit)}) = () {
  let len.137: Int = Int(1024)
  let _138: Int = Int(0)
  let prog.139: Array(Int) = ExtApply(minimbt_create_array, [len.137, _138, ])
  let rec read_prog140: Var({val: Some(Unit)}) = (i141.142: Var({val: Some(Int)})) {
    let x.143: Int = Apply(read_ch_until_newline_or_eof1, [])
    let _144: Int = Int(-1)
    if (x.143 == _144) then {
      let _152: Int = Int(1)
      let _153: Int = Int(0)
      let ptr.154: Array(Int) = ExtApply(minimbt_create_array, [_152, _153, ])
      let _155: Int = Int(1024)
      let _156: Int = Int(1024)
      let _157: Int = Mul(_155, _156)
      let _158: Int = Int(0)
      let cells.159: Array(Int) = ExtApply(minimbt_create_array, [_157, _158, ])
      let _160: Int = Int(1)
      let _161: Int = Int(0)
      let next_pc.162: Array(Int) = ExtApply(minimbt_create_array, [_160, _161, ])
      let rec skip21.163: Var({val: Some(Int)}) = (pc22.164: Var({val: Some(Int)}), level24.165: Int) {
        if (i141.142 <= pc22.164) then {
          Var(pc22.164)
        } else {
          let i.166: Int = Get prog.139[pc22.164]
          let _167: Int = Int(91)
          if (i.166 == _167) then {
            let _168: Int = Int(1)
            let _169: Int = Add(pc22.164, _168)
            let _170: Int = Int(1)
            let _171: Int = Add(level24.165, _170)
            Apply(skip21.163, [_169, _171, ])
          } else {
            let _172: Int = Int(93)
            if (i.166 == _172) then {
              let _173: Int = Int(0)
              if (level24.165 == _173) then {
                Var(pc22.164)
              } else {
                let _174: Int = Int(1)
                let _175: Int = Add(pc22.164, _174)
                let _176: Int = Int(1)
                let _177: Int = Sub(level24.165, _176)
                Apply(skip21.163, [_175, _177, ])
              }
            } else {
              let _178: Int = Int(1)
              let _179: Int = Add(pc22.164, _178)
              Apply(skip21.163, [_179, level24.165, ])
            }
          }
        }
      }
      let rec aux40.180: Var({val: Some(Int)}) = (pc41.181: Var({val: Some(Int)})) {
        if (i141.142 <= pc41.181) then {
          Var(pc41.181)
        } else {
          let i.182: Int = Get prog.139[pc41.181]
          let _183: Int = Int(62)
          if (i.182 == _183) then {
            let _184: Int = Int(0)
            let _185: Int = Int(0)
            let _186: Int = Get ptr.154[_185]
            let _187: Int = Int(1)
            let _188: Int = Add(_186, _187)
            let _189: Unit = Put ptr.154[_184] = _188
            let _190: Int = Int(1)
            let _191: Int = Add(pc41.181, _190)
            Apply(aux40.180, [_191, ])
          } else {
            let _192: Int = Int(60)
            if (i.182 == _192) then {
              let _193: Int = Int(0)
              let _194: Int = Int(0)
              let _195: Int = Get ptr.154[_194]
              let _196: Int = Int(1)
              let _197: Int = Sub(_195, _196)
              let _198: Unit = Put ptr.154[_193] = _197
              let _199: Int = Int(1)
              let _200: Int = Add(pc41.181, _199)
              Apply(aux40.180, [_200, ])
            } else {
              let _201: Int = Int(43)
              if (i.182 == _201) then {
                let _202: Int = Int(0)
                let _203: Int = Get ptr.154[_202]
                let _204: Int = Int(0)
                let _205: Int = Get ptr.154[_204]
                let _206: Int = Get cells.159[_205]
                let _207: Int = Int(1)
                let _208: Int = Add(_206, _207)
                let _209: Unit = Put cells.159[_203] = _208
                let _210: Int = Int(1)
                let _211: Int = Add(pc41.181, _210)
                Apply(aux40.180, [_211, ])
              } else {
                let _212: Int = Int(45)
                if (i.182 == _212) then {
                  let _213: Int = Int(0)
                  let _214: Int = Get ptr.154[_213]
                  let _215: Int = Int(0)
                  let _216: Int = Get ptr.154[_215]
                  let _217: Int = Get cells.159[_216]
                  let _218: Int = Int(1)
                  let _219: Int = Sub(_217, _218)
                  let _220: Unit = Put cells.159[_214] = _219
                  let _221: Int = Int(1)
                  let _222: Int = Add(pc41.181, _221)
                  Apply(aux40.180, [_222, ])
                } else {
                  let _223: Int = Int(46)
                  if (i.182 == _223) then {
                    let _224: Int = Int(0)
                    let _225: Int = Get ptr.154[_224]
                    let _226: Int = Get cells.159[_225]
                    let _227: Unit = ExtApply(minimbt_print_char, [_226, ])
                    let _228: Int = Int(1)
                    let _229: Int = Add(pc41.181, _228)
                    Apply(aux40.180, [_229, ])
                  } else {
                    let _230: Int = Int(44)
                    if (i.182 == _230) then {
                      let _231: Int = Int(0)
                      let _232: Int = Get ptr.154[_231]
                      let _233: Int = Apply(read_ch_until_newline_or_eof1, [])
                      let _234: Unit = Put cells.159[_232] = _233
                      let _235: Int = Int(1)
                      let _236: Int = Add(pc41.181, _235)
                      Apply(aux40.180, [_236, ])
                    } else {
                      let _237: Int = Int(91)
                      if (i.182 == _237) then {
                        let _238: Int = Int(0)
                        let _239: Unit = Put next_pc.162[_238] = pc41.181
                        let rec lp108.240: Var({val: Some(Unit)}) = () {
                          let _241: Int = Int(0)
                          let _242: Int = Get ptr.154[_241]
                          let _243: Int = Get cells.159[_242]
                          let _244: Int = Int(0)
                          if (_243 == _244) then {
                            let _245: Int = Int(0)
                            let _246: Int = Int(1)
                            let _247: Int = Add(pc41.181, _246)
                            let _248: Int = Int(0)
                            let _249: Var({val: Some(Int)}) = Apply(skip21.163, [_247, _248, ])
                            let _250: Unit = Put next_pc.162[_245] = _249
                            Unit
                          } else {
                            let _251: Int = Int(0)
                            let _252: Int = Int(1)
                            let _253: Int = Add(pc41.181, _252)
                            let _254: Var({val: Some(Int)}) = Apply(aux40.180, [_253, ])
                            let _255: Unit = Put next_pc.162[_251] = _254
                            Apply(lp108.240, [])
                          }
                        }
                        let _256: Var({val: Some(Unit)}) = Apply(lp108.240, [])
                        let _257: Int = Int(0)
                        let _258: Int = Get next_pc.162[_257]
                        let _259: Int = Int(1)
                        let _260: Int = Add(_258, _259)
                        Apply(aux40.180, [_260, ])
                      } else {
                        let _261: Int = Int(93)
                        if (i.182 == _261) then {
                          Var(pc41.181)
                        } else {
                          Var(pc41.181)
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      let _262: Int = Int(0)
      let _263: Var({val: Some(Int)}) = Apply(aux40.180, [_262, ])
      Unit
    } else {
      let _146: Unit = Put prog.139[i141.142] = x.143
      let _147: Int = Int(1)
      let _148: Int = Add(i141.142, _147)
      Apply(read_prog140, [_148, ])
    }
  }
  let _149: Int = Int(0)
  let _151: Var({val: Some(Unit)}) = Apply(read_prog140, [_149, ])
  Unit
}
Apply(main136, [])