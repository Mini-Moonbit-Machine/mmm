// [Asm] pre_assigned_registers: FnParam(fref=f12, fpref=$f.1) -> v3, Insn(iref=%3) -> v12, FnParam(fref=f12, fpref=$f.0) -> v2, FnParam(fref=f12, fpref=$f.2) -> v4, BlockParam(bref=b3, bpref=$b.0) -> v10, Insn(iref=%2) -> v11, Self(fref=f12) -> v0, Insn(iref=%1) -> v9, BlockParam(bref=b0, bpref=$b.0) -> v5, BlockParam(bref=b0, bpref=$b.1) -> v6, BlockParam(bref=b0, bpref=$b.2) -> v7, Insn(iref=%0) -> v8, Insn(iref=%4) -> v13
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, v5, zero, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v6, v5, zero, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v11, v6, v5, v15, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v6, v5, v16, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v6, zero, v13, v7]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v13]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v6]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [zero]
// [Asm] defined: v10 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move_origin: [v3]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v4]
// [Asm] defined: v7 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of input243l8_12"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r20 [label="v13 ← a0", color=green];
// [Asm]   r23 [label="v2 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="t4", color=blue];
// [Asm]   r6 [label="t1", color=blue];
// [Asm]   r13 [label="a4", color=blue];
// [Asm]   r4 [label="a0", color=blue];
// [Asm]   r1 [label="v6 ← s0", color=green];
// [Asm]   r11 [label="a2", color=blue];
// [Asm]   r7 [label="t2", color=blue];
// [Asm]   r10 [label="a1", color=blue];
// [Asm]   r22 [label="v8 ← a0", color=green];
// [Asm]   r14 [label="a5", color=blue];
// [Asm]   r8 [label="t3", color=blue];
// [Asm]   r5 [label="v7 ← s2", color=green];
// [Asm]   r15 [label="a6", color=blue];
// [Asm]   r24 [label="v3 ← a1", color=green];
// [Asm]   r25 [label="v4 ← a2", color=green];
// [Asm]   r2 [label="v5 ← s1", color=green];
// [Asm]   r16 [label="a7", color=blue];
// [Asm]   r18 [label="v15 ← a1", color=green];
// [Asm]   r19 [label="v16 ← a1", color=green];
// [Asm]   r17 [label="v11 ← a0", color=green];
// [Asm]   r21 [label="v10 ← a0", color=green];
// [Asm]   r12 [label="a3", color=blue];
// [Asm]   r5 -- r12;
// [Asm]   r4 -- r13;
// [Asm]   r17 -- r18;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r3 -- r25;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r5 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r18;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r22;
// [Asm]   r1 -- r10;
// [Asm]   r5 -- r18;
// [Asm]   r2 -- r10;
// [Asm]   r5 -- r19;
// [Asm]   r3 -- r9;
// [Asm]   r1 -- r15;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r13;
// [Asm]   r11 -- r23;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r3 -- r24;
// [Asm]   r11 -- r24;
// [Asm]   r2 -- r11;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r18;
// [Asm]   r5 -- r16;
// [Asm]   r5 -- r11;
// [Asm]   r3 -- r5;
// [Asm]   r17 -- r19;
// [Asm]   r3 -- r22;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r23 -- r25;
// [Asm]   r3 -- r4;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r9;
// [Asm]   r0 -- r3;
// [Asm]   r3 -- r13;
// [Asm]   r2 -- r12;
// [Asm]   r10 -- r23;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r25;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r23 -- r24;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r5 -- r14;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r24;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r24 -- r25;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r5 -- r15;
// [Asm]   comment = "0:t0-> 1:v6-> 2:v5-> 3:zero-> 4:a0-> 5:v7-> 6:t1-> 7:t2-> 8:t3-> 9:t4-> 10:a1-> 11:a2-> 12:a3-> 13:a4-> 14:a5-> 15:a6-> 16:a7-> 17:v11-> 18:v15-> 19:v16-> 22:v8-> 20:v13-> 23:v2-> 24:v3-> 25:v4-> 21:v10"
// [Asm]   comment = "v13<-a0;v2<-a0;v6<-s0;v8<-a0;v7<-s2;v3<-a1;v4<-a2;v5<-s1;v15<-a1;v16<-a1;v11<-a0;v10<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of input243l8_12"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call minimbt_read_int ->   call minimbt_read_int
// [Asm] subst   slliw v15, v5, 2 ->   slliw a1, s1, 2
// [Asm] subst   add v16, v6, v15 ->   add a1, s0, a1
// [Asm] subst   sw v11, 0(v16) ->   sw a0, 0(a1)
// [Asm] subst   addi v13, v5, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v5, v13 ->   mv s1, a0
// [Asm] subst   j .input243l8_12_0 ->   j .input243l8_12_0
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v10, zero ->   mv a0, zero
// [Asm] subst   addi v8, v7, -1 ->   addi a0, s2, -1
// [Asm] subst   blt v8, v5, .input243l8_12_2 ->   blt a0, s1, .input243l8_12_2
// [Asm] subst   mv v5, v2 ->   mv s1, a0
// [Asm] subst   mv v6, v3 ->   mv s0, a1
// [Asm] subst   mv v7, v4 ->   mv s2, a2
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v6, FnParam(fref=f4, fpref=$f.0) -> v2, Self(fref=f4) -> v0, FnParam(fref=f4, fpref=$f.1) -> v3, Insn(iref=%0) -> v5, FnParam(fref=f4, fpref=$f.2) -> v4
// [Asm] defs: []
// [Asm] live_set: [a2, a1, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v5, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v4, a0, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, v4, a1, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [a2, a1, a3, a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a3 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of insertion_sort30l2_4"];
// [Asm]   r0 [label="v2 ← a3", color=green];
// [Asm]   r3 [label="v3 ← a4", color=green];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r13 [label="a4", color=blue];
// [Asm]   r4 [label="v4 ← a5", color=green];
// [Asm]   r1 [label="a2", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a3", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r14 [label="a5", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r5 [label="v5 ← a0", color=green];
// [Asm]   r15 [label="a6", color=blue];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="a7", color=blue];
// [Asm]   r17 [label="v6 ← a0", color=green];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r6 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r6 -- r14;
// [Asm]   r6 -- r10;
// [Asm]   r1 -- r7;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r2;
// [Asm]   r0 -- r1;
// [Asm]   r6 -- r16;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r3;
// [Asm]   r6 -- r12;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r6 -- r8;
// [Asm]   r0 -- r6;
// [Asm]   r6 -- r13;
// [Asm]   comment = "0:v2-> 1:a2-> 2:a1-> 3:v3-> 4:v4-> 6:a0-> 5:v5-> 7:a3-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:a4-> 14:a5-> 15:a6-> 16:a7-> 17:v6"
// [Asm]   comment = "v2<-a3;v3<-a4;v4<-a5;v5<-a0;v6<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of insertion_sort30l2_4"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v2, a0 ->   mv a3, a0
// [Asm] subst   mv v3, a1 ->   mv a4, a1
// [Asm] subst   mv v4, a2 ->   mv a5, a2
// [Asm] subst   addi v5, v3, 1 ->   addi a0, a4, 1
// [Asm] subst   mv a1, v2 ->   mv a1, a3
// [Asm] subst   mv a2, v3 ->   mv a2, a4
// [Asm] subst   mv a3, v4 ->   mv a3, a5
// [Asm] subst   call f54l4_3 ->   call f54l4_3
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f8, fpref=$f.2) -> v4, FnParam(fref=f8, fpref=$f.3) -> v5, FnParam(fref=f8, fpref=$f.0) -> v2, FnParam(fref=f8, fpref=$f.1) -> v3, Insn(iref=%2) -> v9, Insn(iref=%1) -> v8, FnParam(fref=f8, fpref=$f.4) -> v6, Self(fref=f8) -> v0, Insn(iref=%0) -> v7
// [Asm] defs: []
// [Asm] live_set: [a0, a4, a2, a1, a3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a4, a2, a1, a3, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, a4, a2, a3, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, a4, v4, a3, v2]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v5, a4, v4, v2]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v3, v5, v4, v6, v2]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v5, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v5, a0, v4, v6, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v3, v5, a0, v4, a1, v6, v2]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v3, v5, a0, v4, a2, a1, v6, v2]
// [Asm] move_origin: [v5]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v3, v5, a0, v4, a2, a1, v6, a3, v2]
// [Asm] move_origin: [v6]
// [Asm] defined: a3 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v3, v5, a0, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v5, v4, v6, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v5, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, v5, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v5, a0, v4, v6, v2]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v3, v5, a0, v6, a1, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v3, v5, a0, a2, v6, a1, v2]
// [Asm] move_origin: [v5]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v3, v5, a0, a2, v6, a1, a3, v2]
// [Asm] move_origin: [v6]
// [Asm] defined: a3 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, v6, v5, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v2, v6, v5, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v6, v5, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v6, v5, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v6, v5, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, v6, v5, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, v6, a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [a2, a1, a3, a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a3 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v9]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of sort_3173l6_8"];
// [Asm]   r0 [label="v2 ← s0", color=green];
// [Asm]   r20 [label="v9 ← a0", color=green];
// [Asm]   r3 [label="a1", color=blue];
// [Asm]   r9 [label="a0", color=blue];
// [Asm]   r6 [label="v4 ← s2", color=green];
// [Asm]   r13 [label="t3", color=blue];
// [Asm]   r4 [label="a3", color=blue];
// [Asm]   r1 [label="a4", color=blue];
// [Asm]   r11 [label="t1", color=blue];
// [Asm]   r7 [label="v5 ← s3", color=green];
// [Asm]   r10 [label="t0", color=blue];
// [Asm]   r14 [label="t4", color=blue];
// [Asm]   r8 [label="v6 ← s4", color=green];
// [Asm]   r5 [label="v3 ← s1", color=green];
// [Asm]   r15 [label="a5", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r16 [label="a6", color=blue];
// [Asm]   r18 [label="v7 ← a0", color=green];
// [Asm]   r19 [label="v8 ← a0", color=green];
// [Asm]   r17 [label="a7", color=blue];
// [Asm]   r12 [label="t2", color=blue];
// [Asm]   r0 -- r18;
// [Asm]   r5 -- r12;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r0 -- r15;
// [Asm]   r0 -- r13;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r5 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r10;
// [Asm]   r9 -- r15;
// [Asm]   r6 -- r14;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r0 -- r17;
// [Asm]   r8 -- r19;
// [Asm]   r1 -- r7;
// [Asm]   r8 -- r9;
// [Asm]   r5 -- r13;
// [Asm]   r5 -- r18;
// [Asm]   r7 -- r13;
// [Asm]   r0 -- r14;
// [Asm]   r3 -- r9;
// [Asm]   r5 -- r19;
// [Asm]   r6 -- r16;
// [Asm]   r9 -- r17;
// [Asm]   r2 -- r7;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r12;
// [Asm]   r0 -- r16;
// [Asm]   r0 -- r19;
// [Asm]   r3 -- r5;
// [Asm]   r8 -- r12;
// [Asm]   r6 -- r8;
// [Asm]   r0 -- r6;
// [Asm]   r9 -- r14;
// [Asm]   r7 -- r17;
// [Asm]   r3 -- r8;
// [Asm]   r6 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r9 -- r11;
// [Asm]   r5 -- r6;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r7 -- r19;
// [Asm]   r8 -- r16;
// [Asm]   r8 -- r13;
// [Asm]   r5 -- r9;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r8;
// [Asm]   r7 -- r15;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r7 -- r10;
// [Asm]   r9 -- r12;
// [Asm]   r8 -- r18;
// [Asm]   r2 -- r8;
// [Asm]   r7 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r2 -- r5;
// [Asm]   r6 -- r17;
// [Asm]   r0 -- r1;
// [Asm]   r8 -- r10;
// [Asm]   r0 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r9 -- r16;
// [Asm]   r5 -- r14;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r7 -- r16;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r0 -- r4;
// [Asm]   r8 -- r14;
// [Asm]   r4 -- r6;
// [Asm]   r7 -- r8;
// [Asm]   r0 -- r7;
// [Asm]   r9 -- r13;
// [Asm]   r7 -- r12;
// [Asm]   r2 -- r3;
// [Asm]   r7 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r5 -- r15;
// [Asm]   comment = "0:v2-> 1:a4-> 5:v3-> 6:v4-> 7:v5-> 8:v6-> 9:a0-> 2:a2-> 3:a1-> 4:a3-> 10:t0-> 11:t1-> 12:t2-> 13:t3-> 14:t4-> 15:a5-> 16:a6-> 17:a7-> 18:v7-> 19:v8-> 20:v9"
// [Asm]   comment = "v2<-s0;v9<-a0;v4<-s2;v5<-s3;v6<-s4;v3<-s1;v7<-a0;v8<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of sort_3173l6_8"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   mv v3, a1 ->   mv s1, a1
// [Asm] subst   mv v4, a2 ->   mv s2, a2
// [Asm] subst   mv v5, a3 ->   mv s3, a3
// [Asm] subst   mv v6, a4 ->   mv s4, a4
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   mv a1, v3 ->   mv a1, s1
// [Asm] subst   mv a2, v5 ->   mv a2, s3
// [Asm] subst   mv a3, v6 ->   mv a3, s4
// [Asm] subst   call sort_2157l5_7 ->   call sort_2157l5_7
// [Asm] subst   mv a0, v3 ->   mv a0, s1
// [Asm] subst   mv a1, v4 ->   mv a1, s2
// [Asm] subst   mv a2, v5 ->   mv a2, s3
// [Asm] subst   mv a3, v6 ->   mv a3, s4
// [Asm] subst   call sort_2157l5_7 ->   call sort_2157l5_7
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   mv a1, v3 ->   mv a1, s1
// [Asm] subst   mv a2, v5 ->   mv a2, s3
// [Asm] subst   mv a3, v6 ->   mv a3, s4
// [Asm] subst   call sort_2157l5_7 ->   call sort_2157l5_7
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f28) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_28"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_28"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main239l7_13 ->   call main239l7_13
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v6, Insn(iref=%3) -> v8, FnParam(fref=f0, fpref=$f.1) -> v3, FnParam(fref=f0, fpref=$f.2) -> v4, Self(fref=f0) -> v0, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%0) -> v5, Insn(iref=%2) -> v7
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, a2, zero, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v3, v4, v16, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v3, v4, v17, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v4, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v3, v4, v5, zero, v13, v2]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v3, v4, v5, v14, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v3, v4, v5, v6, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v4, v5, v6, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v4, v5, v6, v12, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of swap1l0_0"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="v13 ← a4", color=green];
// [Asm]   r6 [label="v16 ← a3", color=green];
// [Asm]   r13 [label="v12 ← a1", color=green];
// [Asm]   r4 [label="v3 ← a1", color=green];
// [Asm]   r1 [label="a2", color=blue];
// [Asm]   r11 [label="v6 ← a4", color=green];
// [Asm]   r7 [label="v17 ← a3", color=green];
// [Asm]   r10 [label="v14 ← a4", color=green];
// [Asm]   r14 [label="v9 ← a1", color=green];
// [Asm]   r8 [label="v5 ← a3", color=green];
// [Asm]   r5 [label="v4 ← a2", color=green];
// [Asm]   r15 [label="v10 ← a0", color=green];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="a0", color=blue];
// [Asm]   r12 [label="v11 ← a1", color=green];
// [Asm]   r5 -- r6;
// [Asm]   r0 -- r13;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r15;
// [Asm]   r8 -- r13;
// [Asm]   r11 -- r13;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r9;
// [Asm]   r5 -- r8;
// [Asm]   r0 -- r3;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r9;
// [Asm]   r5 -- r10;
// [Asm]   r0 -- r8;
// [Asm]   r3 -- r13;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r8 -- r9;
// [Asm]   r0 -- r5;
// [Asm]   r3 -- r10;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r0 -- r14;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r9;
// [Asm]   r11 -- r12;
// [Asm]   r3 -- r14;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r3 -- r11;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r5 -- r11;
// [Asm]   r8 -- r14;
// [Asm]   r0 -- r7;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r9;
// [Asm]   r8 -- r12;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v2-> 1:a2-> 4:v3-> 3:zero-> 5:v4-> 6:v16-> 7:v17-> 8:v5-> 9:v13-> 10:v14-> 11:v6-> 12:v11-> 13:v12-> 14:v9-> 15:v10-> 2:a1-> 16:a0"
// [Asm]   comment = "v2<-a0;v13<-a4;v16<-a3;v12<-a1;v3<-a1;v6<-a4;v17<-a3;v14<-a4;v9<-a1;v5<-a3;v4<-a2;v10<-a0;v11<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of swap1l0_0"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   slliw v16, v3, 2 ->   slliw a3, a1, 2
// [Asm] subst   add v17, v2, v16 ->   add a3, a0, a3
// [Asm] subst   lw v5, 0(v17) ->   lw a3, 0(a3)
// [Asm] subst   slliw v13, v4, 2 ->   slliw a4, a2, 2
// [Asm] subst   add v14, v2, v13 ->   add a4, a0, a4
// [Asm] subst   lw v6, 0(v14) ->   lw a4, 0(a4)
// [Asm] subst   slliw v11, v3, 2 ->   slliw a1, a1, 2
// [Asm] subst   add v12, v2, v11 ->   add a1, a0, a1
// [Asm] subst   sw v6, 0(v12) ->   sw a4, 0(a1)
// [Asm] subst   slliw v9, v4, 2 ->   slliw a1, a2, 2
// [Asm] subst   add v10, v2, v9 ->   add a0, a0, a1
// [Asm] subst   sw v5, 0(v10) ->   sw a3, 0(a0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v7, Insn(iref=%1) -> v4, Mem(fref=f13, mref=m0) -> v2, Insn(iref=%3) -> v6, Self(fref=f13) -> v0, Insn(iref=%0) -> v3, Insn(iref=%2) -> v5
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [s11, zero, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v12, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, a1, zero, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v2, a1, zero, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v2, a2, a1, zero, a0, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, zero, a0, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, a1, zero, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v2, a2, a1, zero, a0, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, zero, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, zero, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, a1, zero, a0, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, zero, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v7]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main239l7_13"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r20 [label="v6 ← a0", color=green];
// [Asm]   r3 [label="a0", color=blue];
// [Asm]   r9 [label="a2", color=blue];
// [Asm]   r6 [label="t3", color=blue];
// [Asm]   r13 [label="a6", color=blue];
// [Asm]   r4 [label="t1", color=blue];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r11 [label="a4", color=blue];
// [Asm]   r7 [label="t4", color=blue];
// [Asm]   r10 [label="a3", color=blue];
// [Asm]   r14 [label="a7", color=blue];
// [Asm]   r8 [label="a1", color=blue];
// [Asm]   r5 [label="t2", color=blue];
// [Asm]   r15 [label="v3 ← s0", color=green];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="v11 ← a0", color=green];
// [Asm]   r18 [label="v2 ← s1", color=green];
// [Asm]   r19 [label="v5 ← a0", color=green];
// [Asm]   r21 [label="v7 ← a0", color=green];
// [Asm]   r17 [label="v12 ← a0", color=green];
// [Asm]   r12 [label="a5", color=blue];
// [Asm]   r0 -- r15;
// [Asm]   r13 -- r15;
// [Asm]   r1 -- r12;
// [Asm]   r3 -- r15;
// [Asm]   r14 -- r18;
// [Asm]   r6 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r9 -- r15;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r12 -- r15;
// [Asm]   r1 -- r7;
// [Asm]   r8 -- r9;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r10;
// [Asm]   r5 -- r18;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r1 -- r15;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r13;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r11 -- r18;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r5;
// [Asm]   r9 -- r18;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r15 -- r18;
// [Asm]   r2 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r3 -- r4;
// [Asm]   r18 -- r19;
// [Asm]   r15 -- r17;
// [Asm]   r2 -- r14;
// [Asm]   r10 -- r18;
// [Asm]   r0 -- r2;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r3;
// [Asm]   r3 -- r13;
// [Asm]   r7 -- r15;
// [Asm]   r6 -- r18;
// [Asm]   r10 -- r15;
// [Asm]   r2 -- r12;
// [Asm]   r8 -- r18;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r13 -- r18;
// [Asm]   r1 -- r11;
// [Asm]   r11 -- r15;
// [Asm]   r18 -- r20;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r15 -- r16;
// [Asm]   r15 -- r20;
// [Asm]   r15 -- r19;
// [Asm]   r2 -- r3;
// [Asm]   r14 -- r15;
// [Asm]   r12 -- r18;
// [Asm]   r5 -- r15;
// [Asm]   r0 -- r18;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:t0-> 1:s11-> 2:zero-> 3:a0-> 15:v3-> 4:t1-> 18:v2-> 5:t2-> 6:t3-> 7:t4-> 8:a1-> 9:a2-> 10:a3-> 11:a4-> 12:a5-> 13:a6-> 14:a7-> 16:v11-> 19:v5-> 20:v6-> 17:v12-> 21:v7"
// [Asm]   comment = "v6<-a0;v3<-s0;v11<-a0;v2<-s1;v5<-a0;v7<-a0;v12<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main239l7_13"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call minimbt_read_int ->   call minimbt_read_int
// [Asm] subst   mv v3, a0 ->   mv s0, a0
// [Asm] subst   slliw v11, v3, 2 ->   slliw a0, s0, 2
// [Asm] subst   sub v12, s11, v11 ->   sub a0, s11, a0
// [Asm] subst   andi v2, v12, -8 ->   andi s1, a0, -8
// [Asm] subst   mv s11, v2 ->   mv s11, s1
// [Asm] subst   mv a1, v3 ->   mv a1, s0
// [Asm] subst   mv a0, v2 ->   mv a0, s1
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   call memseti32 ->   call memseti32
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v2 ->   mv a1, s1
// [Asm] subst   mv a2, v3 ->   mv a2, s0
// [Asm] subst   call input243l8_12 ->   call input243l8_12
// [Asm] subst   mv a0, v2 ->   mv a0, s1
// [Asm] subst   mv a1, v3 ->   mv a1, s0
// [Asm] subst   call sort233l6_11 ->   call sort233l6_11
// [Asm] subst   mv a0, v2 ->   mv a0, s1
// [Asm] subst   mv a1, zero ->   mv a1, zero
// [Asm] subst   mv a2, v3 ->   mv a2, s0
// [Asm] subst   call output14l1_1 ->   call output14l1_1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v12, FnParam(fref=f1, fpref=$f.1) -> v3, FnParam(fref=f1, fpref=$f.0) -> v2, FnParam(fref=f1, fpref=$f.2) -> v4, BlockParam(bref=b3, bpref=$b.0) -> v10, Insn(iref=%2) -> v11, Insn(iref=%1) -> v9, BlockParam(bref=b0, bpref=$b.0) -> v5, Self(fref=f1) -> v0, BlockParam(bref=b0, bpref=$b.1) -> v6, BlockParam(bref=b0, bpref=$b.2) -> v7, Insn(iref=%5) -> v14, Insn(iref=%0) -> v8, Insn(iref=%4) -> v13
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%0)])
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move_origin: [v3]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v4]
// [Asm] defined: v7 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [zero]
// [Asm] defined: v10 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v5, v6, v18, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v19, v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, v6, zero, a0, v7]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, v6, zero, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v12]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, v6, zero, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v13]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v5, v14, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v14, zero, v7]
// [Asm] move_origin: [v5]
// [Asm] defs: [v6]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v14]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of output14l1_1"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r20 [label="a3", color=blue];
// [Asm]   r23 [label="a6", color=blue];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="v10 ← a0", color=green];
// [Asm]   r26 [label="v13 ← a0", color=green];
// [Asm]   r27 [label="v14 ← a0", color=green];
// [Asm]   r6 [label="v5 ← s0", color=green];
// [Asm]   r13 [label="v11 ← a0", color=green];
// [Asm]   r4 [label="v3 ← a1", color=green];
// [Asm]   r1 [label="a2", color=blue];
// [Asm]   r11 [label="v18 ← a0", color=green];
// [Asm]   r7 [label="v6 ← s1", color=green];
// [Asm]   r10 [label="v8 ← a0", color=green];
// [Asm]   r22 [label="a5", color=blue];
// [Asm]   r14 [label="a0", color=blue];
// [Asm]   r8 [label="v7 ← s2", color=green];
// [Asm]   r5 [label="v4 ← a2", color=green];
// [Asm]   r24 [label="a7", color=blue];
// [Asm]   r15 [label="t0", color=blue];
// [Asm]   r25 [label="v12 ← a0", color=green];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="t1", color=blue];
// [Asm]   r18 [label="t3", color=blue];
// [Asm]   r19 [label="t4", color=blue];
// [Asm]   r17 [label="t2", color=blue];
// [Asm]   r21 [label="a4", color=blue];
// [Asm]   r12 [label="v19 ← a0", color=green];
// [Asm]   r6 -- r21;
// [Asm]   r14 -- r20;
// [Asm]   r7 -- r21;
// [Asm]   r3 -- r15;
// [Asm]   r14 -- r16;
// [Asm]   r3 -- r16;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r7 -- r25;
// [Asm]   r3 -- r11;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r5;
// [Asm]   r8 -- r12;
// [Asm]   r3 -- r8;
// [Asm]   r8 -- r24;
// [Asm]   r6 -- r13;
// [Asm]   r14 -- r19;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r8 -- r16;
// [Asm]   r0 -- r2;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r7 -- r10;
// [Asm]   r6 -- r10;
// [Asm]   r2 -- r8;
// [Asm]   r8 -- r23;
// [Asm]   r3 -- r10;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r27;
// [Asm]   r3 -- r17;
// [Asm]   r5 -- r7;
// [Asm]   r8 -- r22;
// [Asm]   r8 -- r21;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r6 -- r23;
// [Asm]   r0 -- r4;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r14 -- r22;
// [Asm]   r14 -- r15;
// [Asm]   r6 -- r25;
// [Asm]   r6 -- r7;
// [Asm]   r3 -- r19;
// [Asm]   r6 -- r11;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r5;
// [Asm]   r14 -- r18;
// [Asm]   r6 -- r15;
// [Asm]   r14 -- r17;
// [Asm]   r1 -- r8;
// [Asm]   r6 -- r14;
// [Asm]   r7 -- r24;
// [Asm]   r8 -- r27;
// [Asm]   r8 -- r19;
// [Asm]   r14 -- r23;
// [Asm]   r3 -- r12;
// [Asm]   r7 -- r26;
// [Asm]   r7 -- r13;
// [Asm]   r7 -- r20;
// [Asm]   r6 -- r16;
// [Asm]   r6 -- r22;
// [Asm]   r14 -- r24;
// [Asm]   r8 -- r20;
// [Asm]   r6 -- r26;
// [Asm]   r8 -- r25;
// [Asm]   r6 -- r12;
// [Asm]   r6 -- r24;
// [Asm]   r6 -- r20;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r8;
// [Asm]   r7 -- r17;
// [Asm]   r6 -- r19;
// [Asm]   r6 -- r27;
// [Asm]   r7 -- r22;
// [Asm]   r7 -- r19;
// [Asm]   r8 -- r13;
// [Asm]   r2 -- r14;
// [Asm]   r3 -- r21;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r3;
// [Asm]   r7 -- r15;
// [Asm]   r14 -- r21;
// [Asm]   r8 -- r18;
// [Asm]   r7 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r8 -- r10;
// [Asm]   r8 -- r26;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r7 -- r23;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r3;
// [Asm]   r7 -- r12;
// [Asm]   r2 -- r3;
// [Asm]   r7 -- r14;
// [Asm]   r3 -- r23;
// [Asm]   comment = "0:v2-> 1:a2-> 3:zero-> 4:v3-> 5:v4-> 6:v5-> 7:v6-> 2:a1-> 8:v7-> 14:a0-> 15:t0-> 16:t1-> 17:t2-> 18:t3-> 19:t4-> 20:a3-> 21:a4-> 22:a5-> 23:a6-> 24:a7-> 10:v8-> 11:v18-> 12:v19-> 13:v11-> 25:v12-> 26:v13-> 27:v14-> 9:v10"
// [Asm]   comment = "v2<-a0;v10<-a0;v13<-a0;v14<-a0;v5<-s0;v11<-a0;v3<-a1;v18<-a0;v6<-s1;v8<-a0;v7<-s2;v4<-a2;v12<-a0;v19<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of output14l1_1"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v5, v2 ->   mv s0, a0
// [Asm] subst   mv v6, v3 ->   mv s1, a1
// [Asm] subst   mv v7, v4 ->   mv s2, a2
// [Asm] subst   mv v10, zero ->   mv a0, zero
// [Asm] subst   addi v8, v7, -1 ->   addi a0, s2, -1
// [Asm] subst   blt v8, v6, .output14l1_1_2 ->   blt a0, s1, .output14l1_1_2
// [Asm] subst   slliw v18, v6, 2 ->   slliw a0, s1, 2
// [Asm] subst   add v19, v5, v18 ->   add a0, s0, a0
// [Asm] subst   lw v11, 0(v19) ->   lw a0, 0(a0)
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   addi v14, v6, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v6, v14 ->   mv s1, a0
// [Asm] subst   j .output14l1_1_0 ->   j .output14l1_1_0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v52, Insn(iref=%41) -> v17, Insn(iref=%33) -> v83, Insn(iref=%63) -> v41, Insn(iref=%8) -> v74, Insn(iref=%10) -> v76, BlockParam(bref=b25, bpref=$b.3) -> v57, Mem(fref=f10, mref=m40) -> v9, BlockParam(bref=b34, bpref=$b.0) -> v62, Insn(iref=%27) -> v77, Insn(iref=%25) -> v60, Insn(iref=%39) -> v15, Insn(iref=%59) -> v35, Insn(iref=%4) -> v46, BlockParam(bref=b25, bpref=$b.0) -> v54, Insn(iref=%56) -> v32, Insn(iref=%49) -> v25, Insn(iref=%42) -> v18, Insn(iref=%65) -> v44, FnParam(fref=f10, fpref=$f.0) -> v2, BlockParam(bref=b44, bpref=$b.0) -> v38, Insn(iref=%26) -> v61, Insn(iref=%31) -> v81, BlockParam(bref=b25, bpref=$b.1) -> v55, Insn(iref=%64) -> v42, Insn(iref=%38) -> v90, Insn(iref=%16) -> v53, Insn(iref=%53) -> v29, BlockParam(bref=b0, bpref=$b.1) -> v11, Mem(fref=f10, mref=m12) -> v5, Insn(iref=%54) -> v30, BlockParam(bref=b25, bpref=$b.5) -> v59, Insn(iref=%60) -> v36, Mem(fref=f10, mref=m11) -> v6, Insn(iref=%5) -> v47, Insn(iref=%19) -> v65, BlockParam(bref=b48, bpref=$b.0) -> v43, Insn(iref=%13) -> v50, BlockParam(bref=b33, bpref=$b.0) -> v89, Insn(iref=%55) -> v31, BlockParam(bref=b45, bpref=$b.0) -> v40, Insn(iref=%7) -> v73, Insn(iref=%48) -> v24, Insn(iref=%23) -> v69, Insn(iref=%20) -> v66, Insn(iref=%34) -> v84, Insn(iref=%36) -> v87, FnParam(fref=f10, fpref=$f.2) -> v4, BlockParam(bref=b15, bpref=$b.0) -> v63, BlockParam(bref=b7, bpref=$b.0) -> v72, Insn(iref=%50) -> v26, Self(fref=f10) -> v0, Insn(iref=%14) -> v51, Insn(iref=%51) -> v27, BlockParam(bref=b14, bpref=$b.0) -> v70, Insn(iref=%52) -> v28, Mem(fref=f10, mref=m39) -> v8, Insn(iref=%44) -> v20, Insn(iref=%32) -> v82, Insn(iref=%58) -> v34, BlockParam(bref=b6, bpref=$b.0) -> v45, Insn(iref=%1) -> v14, Insn(iref=%11) -> v48, BlockParam(bref=b25, bpref=$b.2) -> v56, Insn(iref=%57) -> v33, Insn(iref=%35) -> v86, Insn(iref=%62) -> v39, BlockParam(bref=b32, bpref=$b.0) -> v85, Mem(fref=f10, mref=m13) -> v7, FnParam(fref=f10, fpref=$f.1) -> v3, Insn(iref=%46) -> v22, Insn(iref=%28) -> v78, BlockParam(bref=b3, bpref=$b.0) -> v92, Insn(iref=%24) -> v71, Insn(iref=%9) -> v75, Insn(iref=%37) -> v88, BlockParam(bref=b0, bpref=$b.0) -> v10, Insn(iref=%45) -> v21, BlockParam(bref=b0, bpref=$b.2) -> v12, Insn(iref=%29) -> v79, Insn(iref=%47) -> v23, Insn(iref=%0) -> v13, Insn(iref=%61) -> v37, Insn(iref=%18) -> v64, Insn(iref=%22) -> v68, Insn(iref=%2) -> v91, Insn(iref=%43) -> v19, Insn(iref=%30) -> v80, Insn(iref=%21) -> v67, Insn(iref=%40) -> v16, BlockParam(bref=b25, bpref=$b.4) -> v58, Insn(iref=%12) -> v49
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%30), BlockParam(bref=b25, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%27), Insn(iref=%28)])
// [Asm] skipping Load(ty=Bool, ma=Field(ty=Bool, val=BlockParam(bref=b7, bpref=$b.0), index=1, width=@(@32, @(@32, @32))))
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%22), Int32(val=1)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b25, bpref=$b.0), Insn(iref=%25)])
// [Asm] skipping Load(ty=Bool, ma=Field(ty=Bool, val=BlockParam(bref=b6, bpref=$b.0), index=1, width=@(@32, @(@32, @32))))
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%63), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=50), Insn(iref=%51)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=8), Insn(iref=%40)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%0), Int32(val=16)])
// [Asm] defs: [v46]
// [Asm] live_set: [v11, v46, v10, v12, s11, zero]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: [v129]
// [Asm] live_set: [v11, v10, zero, v19, v43, v12, v129]
// [Asm] move_origin: []
// [Asm] defined: v129 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v11, v10, zero, v19, v43, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v10, zero, v19, v43, v12, s11, v9]
// [Asm] move_origin: [v9]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v43, v12, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v12, s11, zero, v9]
// [Asm] move_origin: []
// [Asm] defs: [v45]
// [Asm] live_set: [v11, v10, v12, s11, zero, v45]
// [Asm] move_origin: [v9]
// [Asm] defined: v45 is X
// [Asm] defs: [v162]
// [Asm] live_set: [v11, v162, v10, zero, v12]
// [Asm] move_origin: []
// [Asm] defined: v162 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v10, zero, v8, v12]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v10, zero, v8, s11, v12]
// [Asm] move_origin: [v8]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v8, s11, v12]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v16, v10, zero, v8, s11, v12]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v159]
// [Asm] live_set: [v11, v16, v10, zero, v159, v8, s11, v12]
// [Asm] move_origin: []
// [Asm] defined: v159 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v11, v16, v10, zero, v8, v17, s11, v12]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v157]
// [Asm] live_set: [v11, v16, v10, zero, v8, v157, v17, s11, v12]
// [Asm] move_origin: []
// [Asm] defined: v157 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v11, v16, v10, v18, zero, v8, s11, v12]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v11, v16, v10, zero, v8, v19, s11, v12]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v155]
// [Asm] live_set: [v11, v155, v16, v10, zero, v8, v19, s11, v12]
// [Asm] move_origin: []
// [Asm] defined: v155 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v10, zero, v8, v19, s11, v12]
// [Asm] move_origin: []
// [Asm] defs: [v64]
// [Asm] live_set: [v11, v5, v10, zero, v6, v12, s11, v64]
// [Asm] move_origin: []
// [Asm] defined: v64 is X
// [Asm] defs: [v65]
// [Asm] live_set: [v11, v5, v10, zero, v65, v6, v12, s11, v64]
// [Asm] move_origin: []
// [Asm] defined: v65 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, zero, v65, v6, v12, s11, v64]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v5, v10, zero, a0, v65, v6, v12, s11, v64]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v11, v5, v10, zero, a0, v65, v6, a1, v12, s11]
// [Asm] move_origin: [v64]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v11, v5, v10, zero, a0, a2, v6, a1, v12, s11]
// [Asm] move_origin: [v65]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v5, v10, zero, a0, v6, s11, v12]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v66]
// [Asm] live_set: [v11, v5, v10, zero, v6, s11, v12]
// [Asm] move_origin: [a0]
// [Asm] defined: v66 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, zero, v6, s11, v12]
// [Asm] move_origin: []
// [Asm] defs: [v67]
// [Asm] live_set: [v11, v5, v10, zero, v67, s11, v12]
// [Asm] move_origin: []
// [Asm] defined: v67 is X
// [Asm] defs: [v68]
// [Asm] live_set: [v11, v10, zero, v68, v67, s11, v12]
// [Asm] move_origin: []
// [Asm] defined: v68 is X
// [Asm] defs: [v110]
// [Asm] live_set: [v11, v10, zero, v68, v67, v110, s11, v12]
// [Asm] move_origin: []
// [Asm] defined: v110 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, s11, v12, zero, v67]
// [Asm] move_origin: []
// [Asm] defs: [v109]
// [Asm] live_set: [v11, v109, v10, zero, v67, s11, v12]
// [Asm] move_origin: []
// [Asm] defined: v109 is X
// [Asm] defs: [v70]
// [Asm] live_set: [v11, v10, zero, v67, v70, s11, v12]
// [Asm] move_origin: [v109]
// [Asm] defined: v70 is X
// [Asm] defs: [v80]
// [Asm] live_set: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v80, v6, v57, v54, v55]
// [Asm] move_origin: []
// [Asm] defined: v80 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v5, v10, v56, zero, v59, v6, v12, s11, v57, v54, v55]
// [Asm] move_origin: []
// [Asm] defs: [v43]
// [Asm] live_set: [v11, v10, zero, v19, v43, s11, v12]
// [Asm] move_origin: [zero]
// [Asm] defined: v43 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v19, v43, s11, v12]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v10, zero, v13, v12, s11]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v164]
// [Asm] live_set: [v11, v164, v10, zero, v13, v12, s11]
// [Asm] move_origin: []
// [Asm] defined: v164 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v12, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v73]
// [Asm] live_set: [v11, v10, zero, v12, s11, v73]
// [Asm] move_origin: []
// [Asm] defined: v73 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v12, s11, v73]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v10, zero, a0, v12, s11, v73]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v10, zero, a0, a1, v12, s11, v73]
// [Asm] move_origin: [v11]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v10, zero, a0, a2, a1, v12, s11, v73]
// [Asm] move_origin: [v73]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v73, v10, v12, s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v75]
// [Asm] live_set: [v10, v12, s11, zero, v73]
// [Asm] move_origin: [a0]
// [Asm] defined: v75 is X
// [Asm] defs: []
// [Asm] live_set: [v10, v12, s11, zero, v73]
// [Asm] move_origin: []
// [Asm] defs: [v76]
// [Asm] live_set: [v10, v12, s11, zero, v76]
// [Asm] move_origin: []
// [Asm] defined: v76 is X
// [Asm] defs: []
// [Asm] live_set: [v10, v12, s11, zero, v76]
// [Asm] move_origin: [v10]
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v10, v12, s11, zero]
// [Asm] move_origin: [v76]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v12, s11, zero]
// [Asm] move_origin: [v12]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v12, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v107]
// [Asm] live_set: [v11, v10, zero, v67, v107, v70, v12]
// [Asm] move_origin: []
// [Asm] defined: v107 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v11, v10, zero, v67, v7, v70, v12]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v10, zero, v67, v7, v70, v12, s11]
// [Asm] move_origin: [v7]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v7, v70, v12, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v12, s11, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v72]
// [Asm] live_set: [v11, v72, v10, v12, s11, zero]
// [Asm] move_origin: [v7]
// [Asm] defined: v72 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v12, v10]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v12, a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, v12, a0]
// [Asm] move_origin: [v11]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0]
// [Asm] move_origin: [v12]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v91]
// [Asm] live_set: [v91]
// [Asm] move_origin: [a0]
// [Asm] defined: v91 is X
// [Asm] defs: []
// [Asm] live_set: [v91]
// [Asm] move_origin: []
// [Asm] defs: [v92]
// [Asm] live_set: [v92]
// [Asm] move_origin: [v91]
// [Asm] defined: v92 is X
// [Asm] defs: [v60]
// [Asm] live_set: [v11, v58, v5, v10, v12, s11, v60, v56, zero, v59, v6, v57, v55, v54]
// [Asm] move_origin: []
// [Asm] defined: v60 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v5, v10, v56, zero, v59, v6, v12, s11, v57, v55, v54]
// [Asm] move_origin: []
// [Asm] defs: [v86]
// [Asm] live_set: [v11, v58, v5, v10, v12, s11, v86, v56, zero, v59, v6, v57, v54, v55]
// [Asm] move_origin: []
// [Asm] defined: v86 is X
// [Asm] defs: [v87]
// [Asm] live_set: [v11, v58, v5, v87, v10, v12, s11, v56, zero, v59, v6, v57, v54, v55]
// [Asm] move_origin: []
// [Asm] defined: v87 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v54, v55]
// [Asm] move_origin: []
// [Asm] defs: [v89]
// [Asm] live_set: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v89, v54, v55]
// [Asm] move_origin: [zero]
// [Asm] defined: v89 is X
// [Asm] defs: [v89]
// [Asm] live_set: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v89, v54, v55]
// [Asm] move_origin: [zero]
// [Asm] defined: v89 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v89, v54, v55]
// [Asm] move_origin: []
// [Asm] defs: [v85]
// [Asm] live_set: [v11, v58, v5, v10, v12, s11, v56, zero, v85, v59, v6, v57, v54, v55]
// [Asm] move_origin: [zero]
// [Asm] defined: v85 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v5, v10, v12, s11, v56, zero, v85, v59, v6, v57, v54, v55]
// [Asm] move_origin: []
// [Asm] defs: [v54]
// [Asm] live_set: [v11, v5, v10, zero, v6, v12, s11, v54, v51]
// [Asm] move_origin: [v11]
// [Asm] defined: v54 is X
// [Asm] defs: [v55]
// [Asm] live_set: [v11, v5, v10, zero, v6, v12, s11, v55, v54, v51]
// [Asm] move_origin: [v6]
// [Asm] defined: v55 is X
// [Asm] defs: [v56]
// [Asm] live_set: [v11, v5, v10, v56, zero, v6, v12, s11, v55, v54, v51]
// [Asm] move_origin: [v10]
// [Asm] defined: v56 is X
// [Asm] defs: [v57]
// [Asm] live_set: [v11, v5, v10, v56, zero, v6, v12, s11, v57, v55, v54]
// [Asm] move_origin: [v51]
// [Asm] defined: v57 is X
// [Asm] defs: [v58]
// [Asm] live_set: [v11, v58, v5, v10, v56, zero, v6, v12, s11, v57, v55, v54]
// [Asm] move_origin: [v12]
// [Asm] defined: v58 is X
// [Asm] defs: [v59]
// [Asm] live_set: [v11, v58, v5, v10, v56, zero, v59, v6, v12, s11, v57, v55, v54]
// [Asm] move_origin: [v5]
// [Asm] defined: v59 is X
// [Asm] defs: [v41]
// [Asm] live_set: [v11, v10, zero, v19, v41, s11, v12]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v19, v10, s11, v12, zero]
// [Asm] move_origin: []
// [Asm] defs: [v29]
// [Asm] live_set: [v11, v10, v26, s11, v12, zero, v29, v23, v8, v19]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [v30]
// [Asm] live_set: [v11, v10, v26, v30, s11, v12, zero, v29, v23, v8, v19]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v26, v30, s11, v12, zero, v29, v23, v8, v19]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v10, v26, a0, v30, s11, v12, zero, v23, v8, v19]
// [Asm] move_origin: [v29]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v11, v10, v26, a0, v30, a1, s11, v12, zero, v23, v8, v19]
// [Asm] move_origin: [v23]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v11, v10, v26, a0, a2, a1, s11, v12, zero, v23, v8, v19]
// [Asm] move_origin: [v30]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v11, v10, v26, a0, a2, a1, s11, v12, a3, zero, v23, v8, v19]
// [Asm] move_origin: [v8]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v11, v10, v26, a0, a2, a1, s11, v12, a3, zero, v23, a4, v8, v19]
// [Asm] move_origin: [v10]
// [Asm] defined: a4 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, v26, a0, s11, v12, zero, v23, v8, v19]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v31]
// [Asm] live_set: [v11, v10, v26, s11, v12, zero, v23, v8, v19]
// [Asm] move_origin: [a0]
// [Asm] defined: v31 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v26, s11, v12, zero, v23, v8, v19]
// [Asm] move_origin: []
// [Asm] defs: [v32]
// [Asm] live_set: [v11, v10, v26, v32, s11, v12, zero, v23, v8, v19]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: [v33]
// [Asm] live_set: [v11, v10, v26, v32, s11, v12, v33, zero, v23, v8, v19]
// [Asm] move_origin: []
// [Asm] defined: v33 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v26, v32, s11, v12, v33, zero, v23, v8, v19]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v10, v26, a0, s11, v12, v33, zero, v23, v8, v19]
// [Asm] move_origin: [v32]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v11, v10, v26, a0, a1, s11, v12, v33, zero, v23, v8, v19]
// [Asm] move_origin: [v19]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v11, v10, v26, a0, a2, a1, s11, v12, zero, v23, v8, v19]
// [Asm] move_origin: [v33]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v11, v10, v26, a0, a2, a1, s11, v12, a3, zero, v23, v8, v19]
// [Asm] move_origin: [v8]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v11, v10, v26, a0, a2, a1, s11, v12, a3, zero, v23, a4, v8, v19]
// [Asm] move_origin: [v10]
// [Asm] defined: a4 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, v26, a0, s11, v12, zero, v23, v8, v19]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v34]
// [Asm] live_set: [v11, v10, v26, s11, v12, zero, v23, v8, v19]
// [Asm] move_origin: [a0]
// [Asm] defined: v34 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v26, s11, v12, zero, v23, v8, v19]
// [Asm] move_origin: []
// [Asm] defs: [v35]
// [Asm] live_set: [v11, v10, v26, s11, v12, zero, v23, v8, v35, v19]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v11, v10, v26, v36, s11, v12, zero, v23, v8, v35, v19]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v26, v36, s11, v12, zero, v23, v8, v35, v19]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v10, v26, a0, v36, s11, v12, zero, v23, v8, v19]
// [Asm] move_origin: [v35]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v11, v10, v26, a0, v36, a1, s11, v12, zero, v23, v8, v19]
// [Asm] move_origin: [v26]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v11, v10, v26, a0, a2, a1, s11, v12, zero, v23, v8, v19]
// [Asm] move_origin: [v36]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v11, v10, v26, a0, a2, a1, s11, v12, a3, zero, v23, v8, v19]
// [Asm] move_origin: [v8]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v11, v10, v26, a0, a2, a1, s11, v12, a3, zero, v23, a4, v8, v19]
// [Asm] move_origin: [v10]
// [Asm] defined: a4 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, v26, zero, a0, v23, v8, v19, s11, v12]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v37]
// [Asm] live_set: [v11, v10, v26, zero, v23, v8, v19, v37, s11, v12]
// [Asm] move_origin: [a0]
// [Asm] defined: v37 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v26, zero, v23, v8, v19, v37, s11, v12]
// [Asm] move_origin: []
// [Asm] defs: [v38]
// [Asm] live_set: [v11, v10, v26, zero, v23, v8, v19, v38, s11, v12]
// [Asm] move_origin: [v37]
// [Asm] defined: v38 is X
// [Asm] defs: [v153]
// [Asm] live_set: [v11, v153, v16, v10, zero, v8, v19, s11, v12]
// [Asm] move_origin: []
// [Asm] defined: v153 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v11, v16, v10, v21, zero, v8, v19, s11, v12]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v151]
// [Asm] live_set: [v11, v16, v10, v21, zero, v8, v19, v151, s11, v12]
// [Asm] move_origin: []
// [Asm] defined: v151 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v11, v16, v10, zero, v22, v8, v19, s11, v12]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v11, v16, v10, zero, v23, v8, v19, s11, v12]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v148]
// [Asm] live_set: [v11, v16, v10, zero, v23, v8, v148, v19, s11, v12]
// [Asm] move_origin: []
// [Asm] defined: v148 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v11, v16, v10, zero, v23, v8, v19, s11, v12, v24]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v146]
// [Asm] live_set: [v11, v16, v10, v146, zero, v23, v8, v19, s11, v12, v24]
// [Asm] move_origin: []
// [Asm] defined: v146 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v11, v25, v16, v10, zero, v23, v8, v19, s11, v12]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v11, v16, v10, v26, zero, v23, v8, v19, s11, v12]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v11, v10, v26, zero, v23, v27, v8, v19, s11, v12]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v143]
// [Asm] live_set: [v11, v10, v26, zero, v23, v27, v8, v19, s11, v12, v143]
// [Asm] move_origin: []
// [Asm] defined: v143 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v26, zero, v23, v8, v19, s11, v12]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v26, v23, v8, v19, v12, s11]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v10, zero, a0, v26, v8, v19, v12, s11]
// [Asm] move_origin: [v23]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v11, v10, zero, a0, v26, v8, v19, a1, v12, s11]
// [Asm] move_origin: [v19]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v11, v10, zero, a0, v8, v19, a2, a1, v12, s11]
// [Asm] move_origin: [v26]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v11, v10, zero, a0, v8, v19, a2, a1, v12, a3, s11]
// [Asm] move_origin: [v8]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v11, v10, zero, a0, a4, v8, v19, a2, a1, v12, a3, s11]
// [Asm] move_origin: [v10]
// [Asm] defined: a4 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, zero, a0, v8, v19, s11, v12]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v39]
// [Asm] live_set: [v11, v10, zero, v8, v19, s11, v12, v39]
// [Asm] move_origin: [a0]
// [Asm] defined: v39 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v8, v19, s11, v12, v39]
// [Asm] move_origin: []
// [Asm] defs: [v40]
// [Asm] live_set: [v11, v10, zero, v8, v19, s11, v12, v40]
// [Asm] move_origin: [v39]
// [Asm] defined: v40 is X
// [Asm] defs: [v131]
// [Asm] live_set: [v11, v10, zero, v19, s11, v12, v131]
// [Asm] move_origin: []
// [Asm] defined: v131 is X
// [Asm] defs: [v43]
// [Asm] live_set: [v11, v10, zero, v19, v43, s11, v12]
// [Asm] move_origin: [v131]
// [Asm] defined: v43 is X
// [Asm] defs: [v40]
// [Asm] live_set: [v11, v10, zero, v8, v19, s11, v12, v40]
// [Asm] move_origin: [zero]
// [Asm] defined: v40 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v8, v19, s11, v12, v40]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, s11, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, s11, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v4, v10, s11, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v4, v10, s11, zero]
// [Asm] move_origin: [v3]
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v10, v12, s11, zero]
// [Asm] move_origin: [v4]
// [Asm] defined: v12 is X
// [Asm] defs: [v90]
// [Asm] live_set: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v90, v6, v57, v55]
// [Asm] move_origin: []
// [Asm] defined: v90 is X
// [Asm] defs: [v54]
// [Asm] live_set: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v55, v54]
// [Asm] move_origin: [v90]
// [Asm] defined: v54 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v55, v54]
// [Asm] move_origin: [v55]
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v55, v54]
// [Asm] move_origin: [v56]
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v55, v54]
// [Asm] move_origin: [v57]
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v55, v54]
// [Asm] move_origin: [v58]
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v5, v10, v56, zero, v59, v6, v12, s11, v57, v55, v54]
// [Asm] move_origin: [v59]
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v5, v10, v56, zero, v59, v6, v12, s11, v57, v55, v54]
// [Asm] move_origin: []
// [Asm] defs: [v48]
// [Asm] live_set: [v11, v46, v10, v48, zero, v12, s11]
// [Asm] move_origin: []
// [Asm] defined: v48 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v46, v10, v48, zero, v12, s11]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v46, v10, v48, zero, a0, v12, s11]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v11, v10, v48, zero, a0, a1, v12, s11]
// [Asm] move_origin: [v46]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v11, v10, zero, a0, a2, a1, v12, s11]
// [Asm] move_origin: [v48]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, zero, a0, v12, s11]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v49]
// [Asm] live_set: [v11, v10, zero, v12, s11]
// [Asm] move_origin: [a0]
// [Asm] defined: v49 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v12, s11]
// [Asm] move_origin: []
// [Asm] defs: [v50]
// [Asm] live_set: [v11, v10, zero, v50, v12, s11]
// [Asm] move_origin: []
// [Asm] defined: v50 is X
// [Asm] defs: [v122]
// [Asm] live_set: [v11, v10, zero, v12, s11, v122]
// [Asm] move_origin: []
// [Asm] defined: v122 is X
// [Asm] defs: [v123]
// [Asm] live_set: [v11, v10, zero, v123, v12, s11]
// [Asm] move_origin: []
// [Asm] defined: v123 is X
// [Asm] defs: [v51]
// [Asm] live_set: [v11, v10, zero, v12, s11, v51]
// [Asm] move_origin: []
// [Asm] defined: v51 is X
// [Asm] defs: [v120]
// [Asm] live_set: [v11, v10, zero, v120, v12, v51]
// [Asm] move_origin: []
// [Asm] defined: v120 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v11, v10, zero, v6, v12, v51]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v10, zero, v6, v12, s11, v51]
// [Asm] move_origin: [v6]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v6, v12, s11, v51]
// [Asm] move_origin: []
// [Asm] defs: [v117]
// [Asm] live_set: [v11, v10, zero, v6, v12, v117, v51]
// [Asm] move_origin: []
// [Asm] defined: v117 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v11, v5, v10, zero, v6, v12, v51]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v5, v10, zero, v6, v12, s11, v51]
// [Asm] move_origin: [v5]
// [Asm] defined: s11 is X
// [Asm] defs: [v119]
// [Asm] live_set: [v11, v5, v10, zero, v119, v6, v12, s11, v51]
// [Asm] move_origin: []
// [Asm] defined: v119 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, zero, v6, v12, s11, v51]
// [Asm] move_origin: []
// [Asm] defs: [v70]
// [Asm] live_set: [v11, v10, zero, v67, v70, s11, v12]
// [Asm] move_origin: [zero]
// [Asm] defined: v70 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v67, v70, s11, v12]
// [Asm] move_origin: []
// [Asm] defs: [v38]
// [Asm] live_set: [v11, v10, v26, zero, v23, v8, v19, v38, s11, v12]
// [Asm] move_origin: [zero]
// [Asm] defined: v38 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v26, zero, v23, v8, v19, v38, s11, v12]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v92]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v82]
// [Asm] live_set: [v11, v58, v5, v10, v12, s11, v82, v56, zero, v59, v6, v57, v54, v55]
// [Asm] move_origin: []
// [Asm] defined: v82 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v5, v10, v12, s11, v82, v56, zero, v59, v6, v57, v54, v55]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v58, v5, v10, a0, v12, s11, v82, v56, zero, v59, v6, v57, v54, v55]
// [Asm] move_origin: [v56]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v11, v58, v5, v10, a0, a1, v12, s11, v56, zero, v59, v6, v57, v54, v55]
// [Asm] move_origin: [v82]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v11, v58, v5, v10, a0, a2, a1, v12, s11, v56, zero, v59, v6, v57, v54, v55]
// [Asm] move_origin: [v54]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v58, v5, v10, a0, v12, s11, v56, zero, v59, v6, v57, v54, v55]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v83]
// [Asm] live_set: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v54, v55]
// [Asm] move_origin: [a0]
// [Asm] defined: v83 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v54, v55]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v54, v55]
// [Asm] move_origin: []
// [Asm] defs: [v85]
// [Asm] live_set: [v11, v58, v5, v10, v12, s11, v56, zero, v85, v59, v6, v57, v54, v55]
// [Asm] move_origin: [zero]
// [Asm] defined: v85 is X
// [Asm] defs: [v63]
// [Asm] live_set: [v11, v63, v5, v10, zero, v6, v12, s11]
// [Asm] move_origin: [v62]
// [Asm] defined: v63 is X
// [Asm] defs: [v101]
// [Asm] live_set: [v11, v58, v5, v10, v12, s11, v101, v56, zero, v59, v6, v57, v54, v55]
// [Asm] move_origin: []
// [Asm] defined: v101 is X
// [Asm] defs: [v102]
// [Asm] live_set: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v102, v54, v55]
// [Asm] move_origin: []
// [Asm] defined: v102 is X
// [Asm] defs: [v77]
// [Asm] live_set: [v11, v58, v5, v10, v12, s11, v56, zero, v77, v59, v6, v57, v54, v55]
// [Asm] move_origin: []
// [Asm] defined: v77 is X
// [Asm] defs: [v78]
// [Asm] live_set: [v11, v58, v5, v10, v78, v12, s11, v56, zero, v77, v59, v6, v57, v54, v55]
// [Asm] move_origin: []
// [Asm] defined: v78 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v5, v10, v56, zero, v59, v6, v12, s11, v57, v54, v55]
// [Asm] move_origin: []
// [Asm] defs: [v62]
// [Asm] live_set: [v62, v11, v5, v10, zero, v6, v12, s11]
// [Asm] move_origin: [zero]
// [Asm] defined: v62 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of quick_sort210l5_10"];
// [Asm]   r0 [label="v46 ← a1", color=green];
// [Asm]   r46 [label="v57 ← s5", color=green];
// [Asm]   r33 [label="a5", color=blue];
// [Asm]   r76 [label="v37 ← a0", color=green];
// [Asm]   r59 [label="v60 ← a0", color=green];
// [Asm]   r9 [label="v9 ← a1", color=green];
// [Asm]   r26 [label="t0", color=blue];
// [Asm]   r86 [label="v27 ← a0", color=green];
// [Asm]   r44 [label="v56 ← s1", color=green];
// [Asm]   r53 [label="v76 ← a0", color=green];
// [Asm]   r56 [label="v72 ← a0", color=green];
// [Asm]   r10 [label="v45 ← a0", color=green];
// [Asm]   r5 [label="zero", color=blue];
// [Asm]   r54 [label="v107 ← a2", color=green];
// [Asm]   r24 [label="a1", color=blue];
// [Asm]   r43 [label="v58 ← s2", color=green];
// [Asm]   r88 [label="v39 ← a0", color=green];
// [Asm]   r80 [label="v151 ← a2", color=green];
// [Asm]   r31 [label="a3", color=blue];
// [Asm]   r39 [label="v110 ← a2", color=green];
// [Asm]   r99 [label="v123 ← a0", color=green];
// [Asm]   r17 [label="v18 ← a1", color=green];
// [Asm]   r52 [label="v75 ← a0", color=green];
// [Asm]   r65 [label="v41 ← a0", color=green];
// [Asm]   r79 [label="v21 ← a1", color=green];
// [Asm]   r20 [label="v5 ← s4", color=green];
// [Asm]   r61 [label="v87 ← a0", color=green];
// [Asm]   r23 [label="a0", color=blue];
// [Asm]   r3 [label="v12 ← s2", color=green];
// [Asm]   r108 [label="v77 ← a0", color=green];
// [Asm]   r82 [label="v148 ← a1", color=green];
// [Asm]   r67 [label="v26 ← s4", color=green];
// [Asm]   r27 [label="t1", color=blue];
// [Asm]   r75 [label="v36 ← a2", color=green];
// [Asm]   r77 [label="v38 ← a0", color=green];
// [Asm]   r62 [label="v89 ← a0", color=green];
// [Asm]   r40 [label="v109 ← a1", color=green];
// [Asm]   r11 [label="v162 ← a0", color=green];
// [Asm]   r58 [label="v92 ← a0", color=green];
// [Asm]   r110 [label="v62 ← a0", color=green];
// [Asm]   r34 [label="a6", color=blue];
// [Asm]   r105 [label="v63 ← a0", color=green];
// [Asm]   r83 [label="v24 ← a1", color=green];
// [Asm]   r103 [label="v82 ← a1", color=green];
// [Asm]   r14 [label="v159 ← a1", color=green];
// [Asm]   r51 [label="v73 ← s3", color=green];
// [Asm]   r96 [label="v49 ← a0", color=green];
// [Asm]   r78 [label="v153 ← a1", color=green];
// [Asm]   r55 [label="v7 ← a2", color=green];
// [Asm]   r16 [label="v157 ← a2", color=green];
// [Asm]   r21 [label="v6 ← s3", color=green];
// [Asm]   r60 [label="v86 ← a0", color=green];
// [Asm]   r73 [label="v34 ← a0", color=green];
// [Asm]   r93 [label="v4 ← a2", color=green];
// [Asm]   r38 [label="v68 ← a1", color=green];
// [Asm]   r72 [label="v33 ← a2", color=green];
// [Asm]   r104 [label="v83 ← a0", color=green];
// [Asm]   r87 [label="v143 ← a1", color=green];
// [Asm]   r100 [label="v120 ← a1", color=green];
// [Asm]   r85 [label="v25 ← a1", color=green];
// [Asm]   r47 [label="v54 ← s6", color=green];
// [Asm]   r6 [label="v129 ← a1", color=green];
// [Asm]   r13 [label="v16 ← a0", color=green];
// [Asm]   r42 [label="v80 ← a0", color=green];
// [Asm]   r4 [label="s11", color=blue];
// [Asm]   r95 [label="v48 ← a2", color=green];
// [Asm]   r29 [label="t3", color=blue];
// [Asm]   r35 [label="a7", color=blue];
// [Asm]   r7 [label="v19 ← s3", color=green];
// [Asm]   r64 [label="v51 ← a0", color=green];
// [Asm]   r8 [label="v43 ← a0", color=green];
// [Asm]   r36 [label="v66 ← a0", color=green];
// [Asm]   r66 [label="v29 ← a0", color=green];
// [Asm]   r32 [label="a4", color=blue];
// [Asm]   r15 [label="v17 ← a1", color=green];
// [Asm]   r49 [label="v13 ← a0", color=green];
// [Asm]   r74 [label="v35 ← a0", color=green];
// [Asm]   r57 [label="v91 ← a0", color=green];
// [Asm]   r68 [label="v23 ← s5", color=green];
// [Asm]   r98 [label="v122 ← a0", color=green];
// [Asm]   r91 [label="v2 ← a0", color=green];
// [Asm]   r70 [label="v31 ← a0", color=green];
// [Asm]   r12 [label="v8 ← s6", color=green];
// [Asm]   r48 [label="v55 ← s3", color=green];
// [Asm]   r37 [label="v67 ← a0", color=green];
// [Asm]   r102 [label="v119 ← a1", color=green];
// [Asm]   r106 [label="v101 ← a0", color=green];
// [Asm]   r109 [label="v78 ← a1", color=green];
// [Asm]   r1 [label="v11 ← s0", color=green];
// [Asm]   r28 [label="t2", color=blue];
// [Asm]   r41 [label="v70 ← a1", color=green];
// [Asm]   r71 [label="v32 ← a0", color=green];
// [Asm]   r22 [label="v65 ← a2", color=green];
// [Asm]   r69 [label="v30 ← a2", color=green];
// [Asm]   r84 [label="v146 ← a2", color=green];
// [Asm]   r89 [label="v40 ← a0", color=green];
// [Asm]   r50 [label="v164 ← a1", color=green];
// [Asm]   r30 [label="t4", color=blue];
// [Asm]   r92 [label="v3 ← a1", color=green];
// [Asm]   r45 [label="v59 ← s4", color=green];
// [Asm]   r107 [label="v102 ← a0", color=green];
// [Asm]   r25 [label="a2", color=blue];
// [Asm]   r63 [label="v85 ← a0", color=green];
// [Asm]   r2 [label="v10 ← s1", color=green];
// [Asm]   r18 [label="v155 ← a1", color=green];
// [Asm]   r19 [label="v64 ← a1", color=green];
// [Asm]   r97 [label="v50 ← a0", color=green];
// [Asm]   r90 [label="v131 ← a0", color=green];
// [Asm]   r81 [label="v22 ← a1", color=green];
// [Asm]   r94 [label="v90 ← a0", color=green];
// [Asm]   r101 [label="v117 ← a1", color=green];
// [Asm]   r12 -- r25;
// [Asm]   r5 -- r105;
// [Asm]   r5 -- r69;
// [Asm]   r32 -- r48;
// [Asm]   r2 -- r38;
// [Asm]   r2 -- r78;
// [Asm]   r45 -- r94;
// [Asm]   r24 -- r75;
// [Asm]   r23 -- r46;
// [Asm]   r20 -- r103;
// [Asm]   r43 -- r48;
// [Asm]   r68 -- r72;
// [Asm]   r13 -- r82;
// [Asm]   r4 -- r44;
// [Asm]   r4 -- r90;
// [Asm]   r20 -- r34;
// [Asm]   r3 -- r9;
// [Asm]   r23 -- r35;
// [Asm]   r7 -- r78;
// [Asm]   r3 -- r107;
// [Asm]   r4 -- r48;
// [Asm]   r13 -- r67;
// [Asm]   r5 -- r65;
// [Asm]   r3 -- r86;
// [Asm]   r26 -- r43;
// [Asm]   r2 -- r51;
// [Asm]   r20 -- r36;
// [Asm]   r3 -- r26;
// [Asm]   r21 -- r103;
// [Asm]   r3 -- r70;
// [Asm]   r3 -- r31;
// [Asm]   r2 -- r41;
// [Asm]   r7 -- r32;
// [Asm]   r68 -- r82;
// [Asm]   r48 -- r109;
// [Asm]   r1 -- r68;
// [Asm]   r20 -- r30;
// [Asm]   r3 -- r48;
// [Asm]   r25 -- r48;
// [Asm]   r24 -- r45;
// [Asm]   r5 -- r35;
// [Asm]   r20 -- r22;
// [Asm]   r32 -- r44;
// [Asm]   r46 -- r59;
// [Asm]   r30 -- r67;
// [Asm]   r5 -- r107;
// [Asm]   r2 -- r48;
// [Asm]   r23 -- r72;
// [Asm]   r4 -- r83;
// [Asm]   r24 -- r44;
// [Asm]   r5 -- r32;
// [Asm]   r1 -- r2;
// [Asm]   r20 -- r60;
// [Asm]   r4 -- r29;
// [Asm]   r1 -- r11;
// [Asm]   r5 -- r51;
// [Asm]   r12 -- r23;
// [Asm]   r2 -- r98;
// [Asm]   r1 -- r35;
// [Asm]   r64 -- r101;
// [Asm]   r24 -- r46;
// [Asm]   r2 -- r69;
// [Asm]   r23 -- r29;
// [Asm]   r47 -- r106;
// [Asm]   r23 -- r67;
// [Asm]   r35 -- r67;
// [Asm]   r2 -- r73;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r103;
// [Asm]   r1 -- r55;
// [Asm]   r21 -- r28;
// [Asm]   r12 -- r34;
// [Asm]   r21 -- r29;
// [Asm]   r42 -- r44;
// [Asm]   r34 -- r48;
// [Asm]   r1 -- r105;
// [Asm]   r3 -- r104;
// [Asm]   r2 -- r50;
// [Asm]   r5 -- r19;
// [Asm]   r21 -- r34;
// [Asm]   r20 -- r110;
// [Asm]   r3 -- r83;
// [Asm]   r21 -- r102;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r43 -- r45;
// [Asm]   r5 -- r11;
// [Asm]   r7 -- r75;
// [Asm]   r5 -- r74;
// [Asm]   r68 -- r84;
// [Asm]   r3 -- r65;
// [Asm]   r5 -- r93;
// [Asm]   r64 -- r100;
// [Asm]   r5 -- r97;
// [Asm]   r2 -- r14;
// [Asm]   r29 -- r45;
// [Asm]   r3 -- r99;
// [Asm]   r23 -- r69;
// [Asm]   r45 -- r108;
// [Asm]   r1 -- r72;
// [Asm]   r1 -- r99;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r60;
// [Asm]   r4 -- r63;
// [Asm]   r35 -- r45;
// [Asm]   r12 -- r16;
// [Asm]   r44 -- r63;
// [Asm]   r12 -- r17;
// [Asm]   r13 -- r68;
// [Asm]   r3 -- r23;
// [Asm]   r31 -- r47;
// [Asm]   r25 -- r44;
// [Asm]   r1 -- r24;
// [Asm]   r5 -- r12;
// [Asm]   r12 -- r35;
// [Asm]   r32 -- r51;
// [Asm]   r24 -- r51;
// [Asm]   r2 -- r45;
// [Asm]   r44 -- r46;
// [Asm]   r21 -- r35;
// [Asm]   r4 -- r41;
// [Asm]   r67 -- r71;
// [Asm]   r12 -- r81;
// [Asm]   r30 -- r51;
// [Asm]   r2 -- r15;
// [Asm]   r66 -- r68;
// [Asm]   r5 -- r8;
// [Asm]   r47 -- r61;
// [Asm]   r34 -- r46;
// [Asm]   r3 -- r56;
// [Asm]   r7 -- r77;
// [Asm]   r34 -- r43;
// [Asm]   r4 -- r110;
// [Asm]   r1 -- r10;
// [Asm]   r1 -- r85;
// [Asm]   r44 -- r107;
// [Asm]   r3 -- r32;
// [Asm]   r46 -- r106;
// [Asm]   r1 -- r17;
// [Asm]   r4 -- r78;
// [Asm]   r42 -- r43;
// [Asm]   r4 -- r91;
// [Asm]   r3 -- r89;
// [Asm]   r34 -- r51;
// [Asm]   r68 -- r74;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r18;
// [Asm]   r4 -- r35;
// [Asm]   r4 -- r69;
// [Asm]   r47 -- r104;
// [Asm]   r1 -- r70;
// [Asm]   r1 -- r31;
// [Asm]   r1 -- r103;
// [Asm]   r42 -- r45;
// [Asm]   r1 -- r87;
// [Asm]   r24 -- r31;
// [Asm]   r5 -- r104;
// [Asm]   r3 -- r97;
// [Asm]   r5 -- r86;
// [Asm]   r4 -- r86;
// [Asm]   r43 -- r62;
// [Asm]   r2 -- r46;
// [Asm]   r4 -- r28;
// [Asm]   r3 -- r40;
// [Asm]   r43 -- r46;
// [Asm]   r43 -- r63;
// [Asm]   r37 -- r55;
// [Asm]   r48 -- r106;
// [Asm]   r3 -- r27;
// [Asm]   r3 -- r69;
// [Asm]   r5 -- r80;
// [Asm]   r2 -- r97;
// [Asm]   r13 -- r18;
// [Asm]   r3 -- r95;
// [Asm]   r5 -- r7;
// [Asm]   r12 -- r86;
// [Asm]   r2 -- r103;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r110;
// [Asm]   r45 -- r47;
// [Asm]   r4 -- r49;
// [Asm]   r12 -- r68;
// [Asm]   r30 -- r46;
// [Asm]   r2 -- r72;
// [Asm]   r67 -- r68;
// [Asm]   r26 -- r67;
// [Asm]   r20 -- r24;
// [Asm]   r25 -- r46;
// [Asm]   r28 -- r67;
// [Asm]   r7 -- r88;
// [Asm]   r30 -- r44;
// [Asm]   r1 -- r23;
// [Asm]   r43 -- r104;
// [Asm]   r5 -- r23;
// [Asm]   r20 -- r63;
// [Asm]   r46 -- r47;
// [Asm]   r4 -- r79;
// [Asm]   r7 -- r71;
// [Asm]   r23 -- r34;
// [Asm]   r1 -- r60;
// [Asm]   r5 -- r87;
// [Asm]   r4 -- r30;
// [Asm]   r67 -- r74;
// [Asm]   r1 -- r65;
// [Asm]   r1 -- r66;
// [Asm]   r1 -- r39;
// [Asm]   r43 -- r59;
// [Asm]   r2 -- r63;
// [Asm]   r43 -- r61;
// [Asm]   r32 -- r45;
// [Asm]   r68 -- r85;
// [Asm]   r1 -- r106;
// [Asm]   r23 -- r47;
// [Asm]   r66 -- r69;
// [Asm]   r30 -- r45;
// [Asm]   r28 -- r47;
// [Asm]   r3 -- r84;
// [Asm]   r29 -- r67;
// [Asm]   r7 -- r33;
// [Asm]   r4 -- r72;
// [Asm]   r2 -- r104;
// [Asm]   r21 -- r25;
// [Asm]   r20 -- r47;
// [Asm]   r68 -- r86;
// [Asm]   r3 -- r55;
// [Asm]   r22 -- r23;
// [Asm]   r28 -- r48;
// [Asm]   r1 -- r83;
// [Asm]   r44 -- r59;
// [Asm]   r1 -- r84;
// [Asm]   r44 -- r104;
// [Asm]   r12 -- r30;
// [Asm]   r24 -- r91;
// [Asm]   r4 -- r39;
// [Asm]   r1 -- r73;
// [Asm]   r2 -- r71;
// [Asm]   r7 -- r68;
// [Asm]   r5 -- r43;
// [Asm]   r3 -- r109;
// [Asm]   r2 -- r110;
// [Asm]   r7 -- r69;
// [Asm]   r5 -- r76;
// [Asm]   r37 -- r41;
// [Asm]   r12 -- r18;
// [Asm]   r1 -- r93;
// [Asm]   r3 -- r44;
// [Asm]   r44 -- r106;
// [Asm]   r37 -- r39;
// [Asm]   r12 -- r29;
// [Asm]   r5 -- r82;
// [Asm]   r12 -- r84;
// [Asm]   r1 -- r90;
// [Asm]   r12 -- r32;
// [Asm]   r5 -- r21;
// [Asm]   r5 -- r33;
// [Asm]   r4 -- r34;
// [Asm]   r1 -- r30;
// [Asm]   r4 -- r97;
// [Asm]   r5 -- r10;
// [Asm]   r48 -- r61;
// [Asm]   r3 -- r6;
// [Asm]   r2 -- r81;
// [Asm]   r5 -- r85;
// [Asm]   r5 -- r22;
// [Asm]   r26 -- r44;
// [Asm]   r7 -- r84;
// [Asm]   r1 -- r45;
// [Asm]   r12 -- r69;
// [Asm]   r5 -- r29;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r31;
// [Asm]   r45 -- r62;
// [Asm]   r20 -- r23;
// [Asm]   r21 -- r107;
// [Asm]   r2 -- r25;
// [Asm]   r26 -- r48;
// [Asm]   r2 -- r83;
// [Asm]   r47 -- r109;
// [Asm]   r1 -- r77;
// [Asm]   r2 -- r67;
// [Asm]   r13 -- r83;
// [Asm]   r37 -- r54;
// [Asm]   r20 -- r27;
// [Asm]   r48 -- r108;
// [Asm]   r4 -- r56;
// [Asm]   r21 -- r60;
// [Asm]   r45 -- r48;
// [Asm]   r0 -- r1;
// [Asm]   r5 -- r101;
// [Asm]   r23 -- r24;
// [Asm]   r4 -- r25;
// [Asm]   r5 -- r55;
// [Asm]   r3 -- r49;
// [Asm]   r2 -- r36;
// [Asm]   r1 -- r80;
// [Asm]   r25 -- r51;
// [Asm]   r31 -- r68;
// [Asm]   r4 -- r14;
// [Asm]   r3 -- r46;
// [Asm]   r7 -- r65;
// [Asm]   r7 -- r67;
// [Asm]   r51 -- r52;
// [Asm]   r29 -- r47;
// [Asm]   r3 -- r45;
// [Asm]   r4 -- r106;
// [Asm]   r13 -- r15;
// [Asm]   r43 -- r60;
// [Asm]   r2 -- r26;
// [Asm]   r1 -- r43;
// [Asm]   r4 -- r23;
// [Asm]   r20 -- r26;
// [Asm]   r1 -- r34;
// [Asm]   r12 -- r72;
// [Asm]   r7 -- r24;
// [Asm]   r32 -- r43;
// [Asm]   r27 -- r48;
// [Asm]   r8 -- r9;
// [Asm]   r28 -- r68;
// [Asm]   r21 -- r94;
// [Asm]   r2 -- r65;
// [Asm]   r2 -- r88;
// [Asm]   r2 -- r80;
// [Asm]   r28 -- r45;
// [Asm]   r35 -- r51;
// [Asm]   r79 -- r80;
// [Asm]   r20 -- r35;
// [Asm]   r21 -- r45;
// [Asm]   r24 -- r67;
// [Asm]   r34 -- r67;
// [Asm]   r27 -- r43;
// [Asm]   r4 -- r71;
// [Asm]   r45 -- r106;
// [Asm]   r2 -- r40;
// [Asm]   r4 -- r80;
// [Asm]   r4 -- r15;
// [Asm]   r35 -- r43;
// [Asm]   r23 -- r25;
// [Asm]   r26 -- r68;
// [Asm]   r12 -- r13;
// [Asm]   r5 -- r28;
// [Asm]   r12 -- r33;
// [Asm]   r1 -- r81;
// [Asm]   r0 -- r3;
// [Asm]   r1 -- r94;
// [Asm]   r30 -- r48;
// [Asm]   r31 -- r44;
// [Asm]   r7 -- r85;
// [Asm]   r4 -- r109;
// [Asm]   r20 -- r62;
// [Asm]   r24 -- r43;
// [Asm]   r68 -- r77;
// [Asm]   r25 -- r31;
// [Asm]   r5 -- r70;
// [Asm]   r46 -- r103;
// [Asm]   r35 -- r46;
// [Asm]   r20 -- r109;
// [Asm]   r2 -- r30;
// [Asm]   r5 -- r39;
// [Asm]   r5 -- r98;
// [Asm]   r45 -- r59;
// [Asm]   r20 -- r28;
// [Asm]   r7 -- r18;
// [Asm]   r7 -- r12;
// [Asm]   r44 -- r62;
// [Asm]   r20 -- r21;
// [Asm]   r1 -- r54;
// [Asm]   r28 -- r43;
// [Asm]   r2 -- r39;
// [Asm]   r4 -- r87;
// [Asm]   r4 -- r38;
// [Asm]   r23 -- r31;
// [Asm]   r2 -- r94;
// [Asm]   r4 -- r66;
// [Asm]   r1 -- r12;
// [Asm]   r44 -- r48;
// [Asm]   r1 -- r4;
// [Asm]   r5 -- r88;
// [Asm]   r2 -- r95;
// [Asm]   r3 -- r100;
// [Asm]   r25 -- r45;
// [Asm]   r4 -- r105;
// [Asm]   r48 -- r103;
// [Asm]   r25 -- r67;
// [Asm]   r1 -- r18;
// [Asm]   r21 -- r108;
// [Asm]   r2 -- r10;
// [Asm]   r1 -- r69;
// [Asm]   r1 -- r20;
// [Asm]   r3 -- r24;
// [Asm]   r5 -- r73;
// [Asm]   r4 -- r40;
// [Asm]   r3 -- r51;
// [Asm]   r3 -- r34;
// [Asm]   r2 -- r74;
// [Asm]   r37 -- r40;
// [Asm]   r1 -- r46;
// [Asm]   r7 -- r34;
// [Asm]   r68 -- r73;
// [Asm]   r45 -- r104;
// [Asm]   r4 -- r43;
// [Asm]   r4 -- r98;
// [Asm]   r35 -- r68;
// [Asm]   r5 -- r53;
// [Asm]   r21 -- r32;
// [Asm]   r3 -- r80;
// [Asm]   r2 -- r47;
// [Asm]   r12 -- r74;
// [Asm]   r42 -- r48;
// [Asm]   r3 -- r82;
// [Asm]   r7 -- r70;
// [Asm]   r1 -- r27;
// [Asm]   r44 -- r64;
// [Asm]   r2 -- r79;
// [Asm]   r3 -- r102;
// [Asm]   r4 -- r50;
// [Asm]   r4 -- r8;
// [Asm]   r5 -- r50;
// [Asm]   r1 -- r49;
// [Asm]   r2 -- r24;
// [Asm]   r46 -- r107;
// [Asm]   r2 -- r70;
// [Asm]   r2 -- r87;
// [Asm]   r29 -- r68;
// [Asm]   r24 -- r48;
// [Asm]   r21 -- r104;
// [Asm]   r47 -- r108;
// [Asm]   r4 -- r24;
// [Asm]   r34 -- r44;
// [Asm]   r20 -- r43;
// [Asm]   r5 -- r103;
// [Asm]   r12 -- r80;
// [Asm]   r66 -- r67;
// [Asm]   r5 -- r77;
// [Asm]   r12 -- r15;
// [Asm]   r44 -- r108;
// [Asm]   r4 -- r59;
// [Asm]   r7 -- r26;
// [Asm]   r3 -- r12;
// [Asm]   r43 -- r106;
// [Asm]   r31 -- r48;
// [Asm]   r1 -- r78;
// [Asm]   r5 -- r84;
// [Asm]   r5 -- r52;
// [Asm]   r5 -- r44;
// [Asm]   r45 -- r46;
// [Asm]   r3 -- r28;
// [Asm]   r33 -- r48;
// [Asm]   r3 -- r106;
// [Asm]   r7 -- r9;
// [Asm]   r26 -- r47;
// [Asm]   r20 -- r46;
// [Asm]   r4 -- r60;
// [Asm]   r20 -- r25;
// [Asm]   r1 -- r28;
// [Asm]   r7 -- r66;
// [Asm]   r7 -- r28;
// [Asm]   r6 -- r8;
// [Asm]   r5 -- r64;
// [Asm]   r12 -- r71;
// [Asm]   r33 -- r47;
// [Asm]   r43 -- r94;
// [Asm]   r4 -- r73;
// [Asm]   r19 -- r23;
// [Asm]   r21 -- r31;
// [Asm]   r46 -- r63;
// [Asm]   r5 -- r46;
// [Asm]   r47 -- r63;
// [Asm]   r12 -- r31;
// [Asm]   r2 -- r56;
// [Asm]   r23 -- r28;
// [Asm]   r3 -- r64;
// [Asm]   r47 -- r103;
// [Asm]   r3 -- r81;
// [Asm]   r2 -- r109;
// [Asm]   r3 -- r75;
// [Asm]   r68 -- r71;
// [Asm]   r7 -- r31;
// [Asm]   r4 -- r96;
// [Asm]   r4 -- r77;
// [Asm]   r48 -- r94;
// [Asm]   r4 -- r17;
// [Asm]   r23 -- r44;
// [Asm]   r1 -- r36;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r63;
// [Asm]   r12 -- r26;
// [Asm]   r5 -- r40;
// [Asm]   r19 -- r20;
// [Asm]   r21 -- r24;
// [Asm]   r12 -- r70;
// [Asm]   r26 -- r46;
// [Asm]   r2 -- r31;
// [Asm]   r3 -- r52;
// [Asm]   r1 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r23 -- r51;
// [Asm]   r3 -- r16;
// [Asm]   r4 -- r51;
// [Asm]   r3 -- r53;
// [Asm]   r31 -- r45;
// [Asm]   r2 -- r49;
// [Asm]   r27 -- r51;
// [Asm]   r48 -- r63;
// [Asm]   r7 -- r25;
// [Asm]   r7 -- r72;
// [Asm]   r3 -- r62;
// [Asm]   r12 -- r85;
// [Asm]   r4 -- r64;
// [Asm]   r45 -- r61;
// [Asm]   r21 -- r61;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r102;
// [Asm]   r2 -- r7;
// [Asm]   r27 -- r67;
// [Asm]   r25 -- r91;
// [Asm]   r2 -- r42;
// [Asm]   r7 -- r35;
// [Asm]   r1 -- r50;
// [Asm]   r29 -- r48;
// [Asm]   r3 -- r8;
// [Asm]   r3 -- r85;
// [Asm]   r1 -- r9;
// [Asm]   r5 -- r6;
// [Asm]   r1 -- r48;
// [Asm]   r25 -- r92;
// [Asm]   r1 -- r64;
// [Asm]   r3 -- r74;
// [Asm]   r7 -- r79;
// [Asm]   r3 -- r39;
// [Asm]   r5 -- r106;
// [Asm]   r5 -- r54;
// [Asm]   r1 -- r107;
// [Asm]   r5 -- r60;
// [Asm]   r3 -- r33;
// [Asm]   r3 -- r71;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r1 -- r51;
// [Asm]   r3 -- r17;
// [Asm]   r27 -- r46;
// [Asm]   r1 -- r38;
// [Asm]   r1 -- r41;
// [Asm]   r44 -- r47;
// [Asm]   r2 -- r96;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r35;
// [Asm]   r1 -- r5;
// [Asm]   r48 -- r59;
// [Asm]   r24 -- r25;
// [Asm]   r21 -- r46;
// [Asm]   r5 -- r36;
// [Asm]   r2 -- r86;
// [Asm]   r3 -- r94;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r25;
// [Asm]   r3 -- r110;
// [Asm]   r4 -- r76;
// [Asm]   r4 -- r62;
// [Asm]   r1 -- r109;
// [Asm]   r1 -- r75;
// [Asm]   r74 -- r75;
// [Asm]   r4 -- r88;
// [Asm]   r2 -- r84;
// [Asm]   r3 -- r105;
// [Asm]   r4 -- r81;
// [Asm]   r13 -- r16;
// [Asm]   r67 -- r86;
// [Asm]   r21 -- r106;
// [Asm]   r13 -- r80;
// [Asm]   r30 -- r47;
// [Asm]   r12 -- r89;
// [Asm]   r33 -- r45;
// [Asm]   r5 -- r38;
// [Asm]   r34 -- r68;
// [Asm]   r23 -- r45;
// [Asm]   r3 -- r22;
// [Asm]   r27 -- r68;
// [Asm]   r23 -- r26;
// [Asm]   r21 -- r62;
// [Asm]   r31 -- r46;
// [Asm]   r68 -- r83;
// [Asm]   r4 -- r99;
// [Asm]   r13 -- r78;
// [Asm]   r23 -- r30;
// [Asm]   r1 -- r79;
// [Asm]   r2 -- r89;
// [Asm]   r27 -- r47;
// [Asm]   r1 -- r97;
// [Asm]   r13 -- r14;
// [Asm]   r5 -- r68;
// [Asm]   r3 -- r29;
// [Asm]   r1 -- r89;
// [Asm]   r3 -- r66;
// [Asm]   r64 -- r102;
// [Asm]   r5 -- r81;
// [Asm]   r1 -- r95;
// [Asm]   r4 -- r36;
// [Asm]   r43 -- r108;
// [Asm]   r2 -- r75;
// [Asm]   r5 -- r25;
// [Asm]   r20 -- r42;
// [Asm]   r2 -- r93;
// [Asm]   r12 -- r87;
// [Asm]   r4 -- r74;
// [Asm]   r4 -- r10;
// [Asm]   r43 -- r44;
// [Asm]   r24 -- r69;
// [Asm]   r2 -- r27;
// [Asm]   r20 -- r105;
// [Asm]   r21 -- r63;
// [Asm]   r20 -- r107;
// [Asm]   r1 -- r42;
// [Asm]   r33 -- r68;
// [Asm]   r86 -- r87;
// [Asm]   r4 -- r108;
// [Asm]   r2 -- r62;
// [Asm]   r3 -- r67;
// [Asm]   r4 -- r102;
// [Asm]   r35 -- r48;
// [Asm]   r29 -- r46;
// [Asm]   r1 -- r37;
// [Asm]   r37 -- r38;
// [Asm]   r1 -- r98;
// [Asm]   r5 -- r95;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r88;
// [Asm]   r24 -- r32;
// [Asm]   r30 -- r68;
// [Asm]   r20 -- r64;
// [Asm]   r5 -- r42;
// [Asm]   r2 -- r16;
// [Asm]   r29 -- r51;
// [Asm]   r44 -- r60;
// [Asm]   r5 -- r92;
// [Asm]   r1 -- r62;
// [Asm]   r1 -- r67;
// [Asm]   r2 -- r101;
// [Asm]   r2 -- r59;
// [Asm]   r4 -- r107;
// [Asm]   r2 -- r54;
// [Asm]   r2 -- r92;
// [Asm]   r2 -- r68;
// [Asm]   r4 -- r33;
// [Asm]   r20 -- r102;
// [Asm]   r3 -- r30;
// [Asm]   r35 -- r44;
// [Asm]   r5 -- r83;
// [Asm]   r12 -- r28;
// [Asm]   r20 -- r59;
// [Asm]   r20 -- r32;
// [Asm]   r3 -- r13;
// [Asm]   r13 -- r84;
// [Asm]   r25 -- r43;
// [Asm]   r20 -- r94;
// [Asm]   r23 -- r32;
// [Asm]   r3 -- r10;
// [Asm]   r5 -- r91;
// [Asm]   r4 -- r104;
// [Asm]   r4 -- r92;
// [Asm]   r68 -- r70;
// [Asm]   r4 -- r84;
// [Asm]   r1 -- r108;
// [Asm]   r5 -- r90;
// [Asm]   r1 -- r6;
// [Asm]   r21 -- r22;
// [Asm]   r68 -- r75;
// [Asm]   r12 -- r78;
// [Asm]   r2 -- r23;
// [Asm]   r46 -- r61;
// [Asm]   r7 -- r82;
// [Asm]   r5 -- r109;
// [Asm]   r5 -- r89;
// [Asm]   r48 -- r60;
// [Asm]   r23 -- r33;
// [Asm]   r4 -- r16;
// [Asm]   r20 -- r31;
// [Asm]   r4 -- r5;
// [Asm]   r4 -- r95;
// [Asm]   r43 -- r107;
// [Asm]   r5 -- r48;
// [Asm]   r31 -- r67;
// [Asm]   r24 -- r47;
// [Asm]   r13 -- r85;
// [Asm]   r5 -- r79;
// [Asm]   r3 -- r87;
// [Asm]   r1 -- r15;
// [Asm]   r3 -- r47;
// [Asm]   r42 -- r46;
// [Asm]   r2 -- r55;
// [Asm]   r21 -- r105;
// [Asm]   r4 -- r89;
// [Asm]   r21 -- r47;
// [Asm]   r7 -- r81;
// [Asm]   r22 -- r24;
// [Asm]   r0 -- r95;
// [Asm]   r28 -- r44;
// [Asm]   r7 -- r73;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r21 -- r109;
// [Asm]   r5 -- r26;
// [Asm]   r5 -- r24;
// [Asm]   r1 -- r59;
// [Asm]   r4 -- r85;
// [Asm]   r1 -- r74;
// [Asm]   r108 -- r109;
// [Asm]   r21 -- r42;
// [Asm]   r34 -- r47;
// [Asm]   r4 -- r47;
// [Asm]   r67 -- r70;
// [Asm]   r2 -- r100;
// [Asm]   r3 -- r36;
// [Asm]   r12 -- r14;
// [Asm]   r31 -- r32;
// [Asm]   r12 -- r27;
// [Asm]   r33 -- r44;
// [Asm]   r3 -- r54;
// [Asm]   r20 -- r108;
// [Asm]   r1 -- r3;
// [Asm]   r23 -- r48;
// [Asm]   r5 -- r30;
// [Asm]   r1 -- r82;
// [Asm]   r49 -- r50;
// [Asm]   r33 -- r51;
// [Asm]   r4 -- r52;
// [Asm]   r4 -- r19;
// [Asm]   r24 -- r95;
// [Asm]   r2 -- r64;
// [Asm]   r4 -- r53;
// [Asm]   r68 -- r69;
// [Asm]   r92 -- r93;
// [Asm]   r4 -- r75;
// [Asm]   r2 -- r32;
// [Asm]   r20 -- r33;
// [Asm]   r4 -- r68;
// [Asm]   r3 -- r98;
// [Asm]   r12 -- r79;
// [Asm]   r28 -- r46;
// [Asm]   r12 -- r77;
// [Asm]   r1 -- r86;
// [Asm]   r47 -- r107;
// [Asm]   r5 -- r72;
// [Asm]   r5 -- r17;
// [Asm]   r3 -- r42;
// [Asm]   r41 -- r55;
// [Asm]   r2 -- r43;
// [Asm]   r5 -- r59;
// [Asm]   r23 -- r68;
// [Asm]   r46 -- r104;
// [Asm]   r5 -- r18;
// [Asm]   r4 -- r103;
// [Asm]   r5 -- r47;
// [Asm]   r2 -- r99;
// [Asm]   r0 -- r23;
// [Asm]   r3 -- r37;
// [Asm]   r2 -- r37;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r68 -- r87;
// [Asm]   r23 -- r75;
// [Asm]   r3 -- r68;
// [Asm]   r7 -- r27;
// [Asm]   r2 -- r34;
// [Asm]   r5 -- r31;
// [Asm]   r46 -- r109;
// [Asm]   r67 -- r73;
// [Asm]   r3 -- r78;
// [Asm]   r2 -- r6;
// [Asm]   r71 -- r72;
// [Asm]   r21 -- r33;
// [Asm]   r4 -- r67;
// [Asm]   r25 -- r32;
// [Asm]   r19 -- r22;
// [Asm]   r4 -- r65;
// [Asm]   r32 -- r46;
// [Asm]   r5 -- r78;
// [Asm]   r1 -- r40;
// [Asm]   r2 -- r12;
// [Asm]   r5 -- r67;
// [Asm]   r47 -- r59;
// [Asm]   r67 -- r87;
// [Asm]   r7 -- r80;
// [Asm]   r2 -- r108;
// [Asm]   r5 -- r66;
// [Asm]   r0 -- r4;
// [Asm]   r27 -- r45;
// [Asm]   r46 -- r94;
// [Asm]   r7 -- r76;
// [Asm]   r3 -- r19;
// [Asm]   r44 -- r103;
// [Asm]   r7 -- r29;
// [Asm]   r1 -- r8;
// [Asm]   r3 -- r101;
// [Asm]   r3 -- r38;
// [Asm]   r48 -- r104;
// [Asm]   r1 -- r47;
// [Asm]   r12 -- r88;
// [Asm]   r5 -- r71;
// [Asm]   r67 -- r72;
// [Asm]   r47 -- r48;
// [Asm]   r2 -- r90;
// [Asm]   r44 -- r94;
// [Asm]   r1 -- r22;
// [Asm]   r20 -- r29;
// [Asm]   r2 -- r52;
// [Asm]   r1 -- r13;
// [Asm]   r7 -- r74;
// [Asm]   r1 -- r104;
// [Asm]   r12 -- r82;
// [Asm]   r45 -- r63;
// [Asm]   r33 -- r46;
// [Asm]   r45 -- r103;
// [Asm]   r42 -- r47;
// [Asm]   r21 -- r23;
// [Asm]   r3 -- r50;
// [Asm]   r30 -- r43;
// [Asm]   r2 -- r107;
// [Asm]   r20 -- r48;
// [Asm]   r46 -- r60;
// [Asm]   r2 -- r102;
// [Asm]   r20 -- r106;
// [Asm]   r5 -- r9;
// [Asm]   r12 -- r73;
// [Asm]   r3 -- r21;
// [Asm]   r21 -- r30;
// [Asm]   r12 -- r76;
// [Asm]   r24 -- r72;
// [Asm]   r4 -- r32;
// [Asm]   r1 -- r29;
// [Asm]   r21 -- r59;
// [Asm]   r83 -- r84;
// [Asm]   r5 -- r45;
// [Asm]   r3 -- r20;
// [Asm]   r2 -- r77;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r13 -- r17;
// [Asm]   r5 -- r94;
// [Asm]   r5 -- r56;
// [Asm]   r12 -- r66;
// [Asm]   r5 -- r61;
// [Asm]   r1 -- r61;
// [Asm]   r2 -- r17;
// [Asm]   r3 -- r73;
// [Asm]   r4 -- r82;
// [Asm]   r20 -- r61;
// [Asm]   r7 -- r87;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r35;
// [Asm]   r25 -- r68;
// [Asm]   r4 -- r93;
// [Asm]   r13 -- r79;
// [Asm]   r48 -- r62;
// [Asm]   r1 -- r100;
// [Asm]   r1 -- r76;
// [Asm]   r2 -- r20;
// [Asm]   r21 -- r43;
// [Asm]   r47 -- r60;
// [Asm]   r91 -- r92;
// [Asm]   r5 -- r41;
// [Asm]   r33 -- r43;
// [Asm]   r1 -- r71;
// [Asm]   r26 -- r45;
// [Asm]   r45 -- r109;
// [Asm]   r32 -- r47;
// [Asm]   r27 -- r44;
// [Asm]   r1 -- r7;
// [Asm]   r2 -- r85;
// [Asm]   r48 -- r64;
// [Asm]   r1 -- r56;
// [Asm]   r3 -- r60;
// [Asm]   r3 -- r79;
// [Asm]   r3 -- r108;
// [Asm]   r32 -- r67;
// [Asm]   r1 -- r63;
// [Asm]   r5 -- r96;
// [Asm]   r5 -- r49;
// [Asm]   r5 -- r99;
// [Asm]   r44 -- r45;
// [Asm]   r4 -- r27;
// [Asm]   r19 -- r21;
// [Asm]   r46 -- r108;
// [Asm]   r4 -- r42;
// [Asm]   r67 -- r69;
// [Asm]   r7 -- r83;
// [Asm]   r46 -- r48;
// [Asm]   r29 -- r43;
// [Asm]   r2 -- r76;
// [Asm]   r4 -- r21;
// [Asm]   r45 -- r107;
// [Asm]   r12 -- r24;
// [Asm]   r43 -- r47;
// [Asm]   r3 -- r76;
// [Asm]   r31 -- r51;
// [Asm]   r35 -- r47;
// [Asm]   r7 -- r90;
// [Asm]   r2 -- r33;
// [Asm]   r3 -- r96;
// [Asm]   r3 -- r4;
// [Asm]   r33 -- r67;
// [Asm]   r12 -- r67;
// [Asm]   r5 -- r75;
// [Asm]   r21 -- r101;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r21 -- r27;
// [Asm]   r25 -- r47;
// [Asm]   r5 -- r108;
// [Asm]   r67 -- r77;
// [Asm]   r2 -- r8;
// [Asm]   r46 -- r62;
// [Asm]   r5 -- r14;
// [Asm]   r1 -- r44;
// [Asm]   r43 -- r109;
// [Asm]   r3 -- r61;
// [Asm]   r21 -- r36;
// [Asm]   r7 -- r8;
// [Asm]   r4 -- r94;
// [Asm]   r32 -- r68;
// [Asm]   r2 -- r106;
// [Asm]   r3 -- r88;
// [Asm]   r5 -- r34;
// [Asm]   r2 -- r53;
// [Asm]   r2 -- r61;
// [Asm]   r44 -- r61;
// [Asm]   r6 -- r7;
// [Asm]   r68 -- r76;
// [Asm]   r48 -- r107;
// [Asm]   r47 -- r64;
// [Asm]   r67 -- r76;
// [Asm]   r5 -- r100;
// [Asm]   r28 -- r51;
// [Asm]   r5 -- r20;
// [Asm]   r4 -- r37;
// [Asm]   r2 -- r18;
// [Asm]   r2 -- r105;
// [Asm]   r20 -- r37;
// [Asm]   r7 -- r89;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r32;
// [Asm]   r7 -- r13;
// [Asm]   r91 -- r93;
// [Asm]   r47 -- r62;
// [Asm]   r2 -- r82;
// [Asm]   r7 -- r86;
// [Asm]   r7 -- r30;
// [Asm]   r23 -- r103;
// [Asm]   r23 -- r27;
// [Asm]   r3 -- r90;
// [Asm]   r21 -- r44;
// [Asm]   r5 -- r16;
// [Asm]   r21 -- r110;
// [Asm]   r44 -- r109;
// [Asm]   r41 -- r54;
// [Asm]   r1 -- r101;
// [Asm]   r3 -- r77;
// [Asm]   r4 -- r70;
// [Asm]   r26 -- r51;
// [Asm]   r67 -- r75;
// [Asm]   r13 -- r81;
// [Asm]   r1 -- r96;
// [Asm]   r24 -- r68;
// [Asm]   r4 -- r46;
// [Asm]   r12 -- r75;
// [Asm]   r4 -- r45;
// [Asm]   r29 -- r44;
// [Asm]   r34 -- r45;
// [Asm]   r5 -- r37;
// [Asm]   r2 -- r66;
// [Asm]   r20 -- r104;
// [Asm]   r3 -- r72;
// [Asm]   r43 -- r103;
// [Asm]   r23 -- r95;
// [Asm]   r3 -- r41;
// [Asm]   r2 -- r21;
// [Asm]   r5 -- r102;
// [Asm]   r3 -- r14;
// [Asm]   r21 -- r26;
// [Asm]   r3 -- r59;
// [Asm]   r5 -- r27;
// [Asm]   r23 -- r43;
// [Asm]   r38 -- r39;
// [Asm]   r7 -- r23;
// [Asm]   r1 -- r14;
// [Asm]   r31 -- r43;
// [Asm]   r45 -- r60;
// [Asm]   r2 -- r19;
// [Asm]   r21 -- r64;
// [Asm]   r4 -- r26;
// [Asm]   r20 -- r44;
// [Asm]   r12 -- r83;
// [Asm]   r4 -- r61;
// [Asm]   r5 -- r15;
// [Asm]   comment = "0:v46-> 1:v11-> 2:v10-> 3:v12-> 4:s11-> 5:zero-> 23:a0-> 95:v48-> 24:a1-> 7:v19-> 25:a2-> 31:a3-> 32:a4-> 67:v26-> 68:v23-> 12:v8-> 69:v30-> 72:v33-> 75:v36-> 21:v6-> 26:t0-> 45:v59-> 46:v57-> 47:v54-> 27:t1-> 43:v58-> 44:v56-> 48:v55-> 20:v5-> 28:t2-> 29:t3-> 30:t4-> 33:a5-> 34:a6-> 35:a7-> 51:v73-> 103:v82-> 42:v80-> 59:v60-> 60:v86-> 61:v87-> 104:v83-> 106:v101-> 107:v102-> 108:v77-> 109:v78-> 62:v89-> 63:v85-> 94:v90-> 64:v51-> 66:v29-> 71:v32-> 74:v35-> 13:v16-> 22:v65-> 19:v64-> 70:v31-> 73:v34-> 76:v37-> 77:v38-> 82:v148-> 83:v24-> 84:v146-> 85:v25-> 86:v27-> 87:v143-> 18:v155-> 78:v153-> 79:v21-> 80:v151-> 81:v22-> 102:v119-> 14:v159-> 15:v17-> 16:v157-> 17:v18-> 36:v66-> 88:v39-> 89:v40-> 105:v63-> 8:v43-> 6:v129-> 9:v9-> 37:v67-> 38:v68-> 39:v110-> 40:v109-> 41:v70-> 54:v107-> 55:v7-> 65:v41-> 90:v131-> 101:v117-> 110:v62-> 10:v45-> 49:v13-> 50:v164-> 52:v75-> 56:v72-> 96:v49-> 97:v50-> 98:v122-> 99:v123-> 100:v120-> 11:v162-> 53:v76-> 91:v2-> 92:v3-> 93:v4-> 57:v91-> 58:v92"
// [Asm]   comment = "v46<-a1;v57<-s5;v37<-a0;v60<-a0;v9<-a1;v27<-a0;v56<-s1;v76<-a0;v72<-a0;v45<-a0;v107<-a2;v58<-s2;v39<-a0;v151<-a2;v110<-a2;v123<-a0;v18<-a1;v75<-a0;v41<-a0;v21<-a1;v5<-s4;v87<-a0;v12<-s2;v77<-a0;v148<-a1;v26<-s4;v36<-a2;v38<-a0;v89<-a0;v109<-a1;v162<-a0;v92<-a0;v62<-a0;v63<-a0;v24<-a1;v82<-a1;v159<-a1;v73<-s3;v49<-a0;v153<-a1;v7<-a2;v157<-a2;v6<-s3;v86<-a0;v34<-a0;v4<-a2;v68<-a1;v33<-a2;v83<-a0;v143<-a1;v120<-a1;v25<-a1;v54<-s6;v129<-a1;v16<-a0;v80<-a0;v48<-a2;v19<-s3;v51<-a0;v43<-a0;v66<-a0;v29<-a0;v17<-a1;v13<-a0;v35<-a0;v91<-a0;v23<-s5;v122<-a0;v2<-a0;v31<-a0;v8<-s6;v55<-s3;v67<-a0;v119<-a1;v101<-a0;v78<-a1;v11<-s0;v70<-a1;v32<-a0;v65<-a2;v30<-a2;v146<-a2;v40<-a0;v164<-a1;v3<-a1;v59<-s4;v102<-a0;v85<-a0;v10<-s1;v155<-a1;v64<-a1;v50<-a0;v131<-a0;v22<-a1;v90<-a0;v117<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of quick_sort210l5_10"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   lw v46, 0(v45) ->   lw a1, 0(a0)
// [Asm] subst   addi v129, s11, -8 ->   addi a1, s11, -8
// [Asm] subst   andi v9, v129, -8 ->   andi a1, a1, -8
// [Asm] subst   mv s11, v9 ->   mv s11, a1
// [Asm] subst   sw v19, 0(v9) ->   sw s3, 0(a1)
// [Asm] subst   sw v43, 4(v9) ->   sw a0, 4(a1)
// [Asm] subst   mv v45, v9 ->   mv a0, a1
// [Asm] subst   addi v162, s11, -4 ->   addi a0, s11, -4
// [Asm] subst   andi v8, v162, -8 ->   andi s6, a0, -8
// [Asm] subst   mv s11, v8 ->   mv s11, s6
// [Asm] subst   sw zero, 0(v8) ->   sw zero, 0(s6)
// [Asm] subst   sub v16, v12, v11 ->   sub a0, s2, s0
// [Asm] subst   li v159, 4 ->   li a1, 4
// [Asm] subst   div v17, v16, v159 ->   div a1, a0, a1
// [Asm] subst   li v157, 2 ->   li a2, 2
// [Asm] subst   mul v18, v17, v157 ->   mul a1, a1, a2
// [Asm] subst   add v19, v11, v18 ->   add s3, s0, a1
// [Asm] subst   li v155, 8 ->   li a1, 8
// [Asm] subst   blt v16, v155, .quick_sort210l5_10_41 ->   blt a0, a1, .quick_sort210l5_10_41
// [Asm] subst   lw v64, 0(v6) ->   lw a1, 0(s3)
// [Asm] subst   addi v65, v12, -1 ->   addi a2, s2, -1
// [Asm] subst   mv a0, v10 ->   mv a0, s1
// [Asm] subst   call swap1l0_0 ->   call swap1l0_0
// [Asm] subst   lw v67, 0(v6) ->   lw a0, 0(s3)
// [Asm] subst   lw v68, 0(v5) ->   lw a1, 0(s4)
// [Asm] subst   li v110, 1 ->   li a2, 1
// [Asm] subst   bne v68, v110, .quick_sort210l5_10_13 ->   bne a1, a2, .quick_sort210l5_10_13
// [Asm] subst   li v109, 1 ->   li a1, 1
// [Asm] subst   lw v80, 0(v55) ->   lw a0, 0(s3)
// [Asm] subst   beq v80, v54, .quick_sort210l5_10_30 ->   beq a0, s6, .quick_sort210l5_10_30
// [Asm] subst   mv v43, zero ->   mv a0, zero
// [Asm] subst   j .quick_sort210l5_10_48 ->   j .quick_sort210l5_10_48
// [Asm] subst   sub v13, v12, v11 ->   sub a0, s2, s0
// [Asm] subst   li v164, 16 ->   li a1, 16
// [Asm] subst   blt v164, v13, .quick_sort210l5_10_2 ->   blt a1, a0, .quick_sort210l5_10_2
// [Asm] subst   lw v73, 0(v72) ->   lw s3, 0(a0)
// [Asm] subst   mv a0, v10 ->   mv a0, s1
// [Asm] subst   mv a1, v11 ->   mv a1, s0
// [Asm] subst   mv a2, v73 ->   mv a2, s3
// [Asm] subst   call quick_sort210l5_10 ->   call quick_sort210l5_10
// [Asm] subst   addi v76, v73, 1 ->   addi a0, s3, 1
// [Asm] subst   mv v11, v76 ->   mv s0, a0
// [Asm] subst   j .quick_sort210l5_10_0 ->   j .quick_sort210l5_10_0
// [Asm] subst   addi v107, s11, -8 ->   addi a2, s11, -8
// [Asm] subst   andi v7, v107, -8 ->   andi a2, a2, -8
// [Asm] subst   mv s11, v7 ->   mv s11, a2
// [Asm] subst   sw v67, 0(v7) ->   sw a0, 0(a2)
// [Asm] subst   sw v70, 4(v7) ->   sw a1, 4(a2)
// [Asm] subst   mv v72, v7 ->   mv a0, a2
// [Asm] subst   mv a0, v10 ->   mv a0, s1
// [Asm] subst   mv a1, v11 ->   mv a1, s0
// [Asm] subst   mv a2, v12 ->   mv a2, s2
// [Asm] subst   call insertion_sort30l2_4 ->   call insertion_sort30l2_4
// [Asm] subst   addi v60, v58, -2 ->   addi a0, s2, -2
// [Asm] subst   blt v60, v54, .quick_sort210l5_10_27 ->   blt a0, s6, .quick_sort210l5_10_27
// [Asm] subst   lw v86, 0(v55) ->   lw a0, 0(s3)
// [Asm] subst   addi v87, v86, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v87, 0(v55) ->   sw a0, 0(s3)
// [Asm] subst   mv v89, zero ->   mv a0, zero
// [Asm] subst   mv v89, zero ->   mv a0, zero
// [Asm] subst   j .quick_sort210l5_10_33 ->   j .quick_sort210l5_10_33
// [Asm] subst   mv v85, zero ->   mv a0, zero
// [Asm] subst   j .quick_sort210l5_10_32 ->   j .quick_sort210l5_10_32
// [Asm] subst   mv v54, v11 ->   mv s6, s0
// [Asm] subst   mv v57, v51 ->   mv s5, a0
// [Asm] subst   lw v41, 0(v8) ->   lw a0, 0(s6)
// [Asm] subst   bne v41, zero, .quick_sort210l5_10_47 ->   bne a0, zero, .quick_sort210l5_10_47
// [Asm] subst   addi v29, v23, -1 ->   addi a0, s5, -1
// [Asm] subst   addi v30, v23, 1 ->   addi a2, s5, 1
// [Asm] subst   mv a1, v23 ->   mv a1, s5
// [Asm] subst   mv a3, v8 ->   mv a3, s6
// [Asm] subst   mv a4, v10 ->   mv a4, s1
// [Asm] subst   call sort_3173l6_8 ->   call sort_3173l6_8
// [Asm] subst   addi v32, v19, -1 ->   addi a0, s3, -1
// [Asm] subst   addi v33, v19, 1 ->   addi a2, s3, 1
// [Asm] subst   mv a1, v19 ->   mv a1, s3
// [Asm] subst   mv a3, v8 ->   mv a3, s6
// [Asm] subst   mv a4, v10 ->   mv a4, s1
// [Asm] subst   call sort_3173l6_8 ->   call sort_3173l6_8
// [Asm] subst   addi v35, v26, -1 ->   addi a0, s4, -1
// [Asm] subst   addi v36, v26, 1 ->   addi a2, s4, 1
// [Asm] subst   mv a1, v26 ->   mv a1, s4
// [Asm] subst   mv a3, v8 ->   mv a3, s6
// [Asm] subst   mv a4, v10 ->   mv a4, s1
// [Asm] subst   call sort_3173l6_8 ->   call sort_3173l6_8
// [Asm] subst   li v153, 4 ->   li a1, 4
// [Asm] subst   div v21, v16, v153 ->   div a1, a0, a1
// [Asm] subst   li v151, 1 ->   li a2, 1
// [Asm] subst   mul v22, v21, v151 ->   mul a1, a1, a2
// [Asm] subst   add v23, v11, v22 ->   add s5, s0, a1
// [Asm] subst   li v148, 4 ->   li a1, 4
// [Asm] subst   div v24, v16, v148 ->   div a1, a0, a1
// [Asm] subst   li v146, 3 ->   li a2, 3
// [Asm] subst   mul v25, v24, v146 ->   mul a1, a1, a2
// [Asm] subst   add v26, v11, v25 ->   add s4, s0, a1
// [Asm] subst   addi v27, v16, -1 ->   addi a0, a0, -1
// [Asm] subst   li v143, 50 ->   li a1, 50
// [Asm] subst   blt v27, v143, .quick_sort210l5_10_43 ->   blt a0, a1, .quick_sort210l5_10_43
// [Asm] subst   mv a0, v23 ->   mv a0, s5
// [Asm] subst   mv a1, v19 ->   mv a1, s3
// [Asm] subst   mv a2, v26 ->   mv a2, s4
// [Asm] subst   mv a3, v8 ->   mv a3, s6
// [Asm] subst   mv a4, v10 ->   mv a4, s1
// [Asm] subst   call sort_3173l6_8 ->   call sort_3173l6_8
// [Asm] subst   li v131, 1 ->   li a0, 1
// [Asm] subst   mv v40, zero ->   mv a0, zero
// [Asm] subst   j .quick_sort210l5_10_45 ->   j .quick_sort210l5_10_45
// [Asm] subst   mv v10, v2 ->   mv s1, a0
// [Asm] subst   mv v11, v3 ->   mv s0, a1
// [Asm] subst   mv v12, v4 ->   mv s2, a2
// [Asm] subst   addi v90, v54, 1 ->   addi a0, s6, 1
// [Asm] subst   mv v54, v90 ->   mv s6, a0
// [Asm] subst   j .quick_sort210l5_10_25 ->   j .quick_sort210l5_10_25
// [Asm] subst   addi v48, v12, -1 ->   addi a2, s2, -1
// [Asm] subst   mv a0, v10 ->   mv a0, s1
// [Asm] subst   call swap1l0_0 ->   call swap1l0_0
// [Asm] subst   addi v50, v12, -1 ->   addi a0, s2, -1
// [Asm] subst   slliw v122, v50, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v123, v10, v122 ->   add a0, s1, a0
// [Asm] subst   lw v51, 0(v123) ->   lw a0, 0(a0)
// [Asm] subst   addi v120, s11, -4 ->   addi a1, s11, -4
// [Asm] subst   andi v6, v120, -8 ->   andi s3, a1, -8
// [Asm] subst   mv s11, v6 ->   mv s11, s3
// [Asm] subst   sw v11, 0(v6) ->   sw s0, 0(s3)
// [Asm] subst   addi v117, s11, -4 ->   addi a1, s11, -4
// [Asm] subst   andi v5, v117, -8 ->   andi s4, a1, -8
// [Asm] subst   mv s11, v5 ->   mv s11, s4
// [Asm] subst   li v119, 1 ->   li a1, 1
// [Asm] subst   sw v119, 0(v5) ->   sw a1, 0(s4)
// [Asm] subst   mv v70, zero ->   mv a1, zero
// [Asm] subst   j .quick_sort210l5_10_14 ->   j .quick_sort210l5_10_14
// [Asm] subst   mv v38, zero ->   mv a0, zero
// [Asm] subst   j .quick_sort210l5_10_44 ->   j .quick_sort210l5_10_44
// [Asm] subst   ret ->   ret
// [Asm] subst   lw v82, 0(v55) ->   lw a1, 0(s3)
// [Asm] subst   mv a0, v56 ->   mv a0, s1
// [Asm] subst   mv a2, v54 ->   mv a2, s6
// [Asm] subst   call swap1l0_0 ->   call swap1l0_0
// [Asm] subst   sw zero, 0(v59) ->   sw zero, 0(s4)
// [Asm] subst   mv v85, zero ->   mv a0, zero
// [Asm] subst   slliw v101, v54, 2 ->   slliw a0, s6, 2
// [Asm] subst   add v102, v56, v101 ->   add a0, s1, a0
// [Asm] subst   lw v77, 0(v102) ->   lw a0, 0(a0)
// [Asm] subst   addi v78, v57, -1 ->   addi a1, s5, -1
// [Asm] subst   blt v78, v77, .quick_sort210l5_10_29 ->   blt a1, a0, .quick_sort210l5_10_29
// [Asm] subst   mv v62, zero ->   mv a0, zero
// [Asm] pre_assigned_registers: FnParam(fref=f11, fpref=$f.1) -> v3, FnParam(fref=f11, fpref=$f.0) -> v2, Self(fref=f11) -> v0, Insn(iref=%0) -> v4
// [Asm] defs: []
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of sort233l6_11"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r3 [label="v3 ← a2", color=green];
// [Asm]   r9 [label="t3", color=blue];
// [Asm]   r6 [label="t0", color=blue];
// [Asm]   r13 [label="a5", color=blue];
// [Asm]   r4 [label="a0", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="a3", color=blue];
// [Asm]   r7 [label="t1", color=blue];
// [Asm]   r10 [label="t4", color=blue];
// [Asm]   r14 [label="a6", color=blue];
// [Asm]   r8 [label="t2", color=blue];
// [Asm]   r5 [label="a2", color=blue];
// [Asm]   r15 [label="a7", color=blue];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="v4 ← a0", color=green];
// [Asm]   r12 [label="a4", color=blue];
// [Asm]   r0 -- r1;
// [Asm]   r4 -- r13;
// [Asm]   r4 -- r7;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r8;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r2 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r4 -- r9;
// [Asm]   r4 -- r12;
// [Asm]   comment = "0:v2-> 1:a1-> 3:v3-> 2:zero-> 4:a0-> 5:a2-> 6:t0-> 7:t1-> 8:t2-> 9:t3-> 10:t4-> 11:a3-> 12:a4-> 13:a5-> 14:a6-> 15:a7-> 16:v4"
// [Asm]   comment = "v2<-a0;v3<-a2;v4<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of sort233l6_11"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v3, a1 ->   mv a2, a1
// [Asm] subst   mv a1, zero ->   mv a1, zero
// [Asm] subst   call quick_sort210l5_10 ->   call quick_sort210l5_10
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f3, fpref=$f.2) -> v4, BlockParam(bref=b12, bpref=$b.0) -> v23, BlockParam(bref=b7, bpref=$b.2) -> v15, BlockParam(bref=b7, bpref=$b.1) -> v14, BlockParam(bref=b7, bpref=$b.0) -> v13, BlockParam(bref=b3, bpref=$b.0) -> v12, Insn(iref=%9) -> v21, Insn(iref=%8) -> v20, Insn(iref=%10) -> v22, BlockParam(bref=b0, bpref=$b.3) -> v9, FnParam(fref=f3, fpref=$f.3) -> v5, BlockParam(bref=b0, bpref=$b.0) -> v6, BlockParam(bref=b0, bpref=$b.1) -> v7, FnParam(fref=f3, fpref=$f.0) -> v2, BlockParam(bref=b0, bpref=$b.2) -> v8, Insn(iref=%5) -> v17, Self(fref=f3) -> v0, Insn(iref=%0) -> v10, Insn(iref=%4) -> v16, BlockParam(bref=b13, bpref=$b.0) -> v24, Insn(iref=%3) -> v26, Insn(iref=%13) -> v29, Insn(iref=%7) -> v19, BlockParam(bref=b6, bpref=$b.0) -> v25, FnParam(fref=f3, fpref=$f.1) -> v3, Insn(iref=%1) -> v11, Insn(iref=%11) -> v27, Insn(iref=%6) -> v18, Insn(iref=%12) -> v28
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%6), Insn(iref=%9)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%4), BlockParam(bref=b7, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v12]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, a3, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, a3, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, a3, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, a3, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, zero, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v4, v6, v5, zero, v7]
// [Asm] move_origin: [v3]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v6, v5, zero, v8]
// [Asm] move_origin: [v4]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v5]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v10, zero, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: [v26]
// [Asm] live_set: [v7, v8, v9, zero, v26]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v26]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v8]
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v7, v25, v6, zero, v9, v8]
// [Asm] move_origin: [v24]
// [Asm] defined: v25 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v14, zero, v13, v27, v7, v8, v6, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v14, zero, v13, v27, v7, v8, v6, v15, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v14, zero, v13, a0, v27, v7, v8, v6, v15, v9]
// [Asm] move_origin: [v14]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v14, zero, v13, a0, v27, v7, v8, v6, a1, v15, v9]
// [Asm] move_origin: [v13]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v14, zero, v13, a0, v8, v7, a2, a1, v6, v15, v9]
// [Asm] move_origin: [v27]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v14, zero, v13, a0, v7, v8, v6, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v28]
// [Asm] live_set: [v14, zero, v13, v8, v7, v6, v15, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v28 is X
// [Asm] defs: []
// [Asm] live_set: [v14, zero, v13, v8, v7, v6, v15, v9]
// [Asm] move_origin: []
// [Asm] defs: [v29]
// [Asm] live_set: [v14, zero, v29, v8, v7, v6, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v14, v13, zero, v8, v7, v6, v15, v9]
// [Asm] move_origin: [v29]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v14, v13, zero, v8, v7, v6, v15, v9]
// [Asm] move_origin: [v14]
// [Asm] defs: []
// [Asm] live_set: [v14, v13, zero, v8, v7, v6, v15, v9]
// [Asm] move_origin: [v15]
// [Asm] defs: []
// [Asm] live_set: [v14, v13, zero, v8, v7, v6, v15, v9]
// [Asm] move_origin: []
// [Asm] defs: [v39]
// [Asm] live_set: [v14, v13, zero, v7, v8, v6, v15, v9, v39]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: [v40]
// [Asm] live_set: [v14, v13, zero, v7, v8, v6, v15, v9, v40]
// [Asm] move_origin: []
// [Asm] defined: v40 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v14, v18, v13, zero, v7, v8, v6, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v14, v18, v13, zero, v7, v8, v19, v6, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v14, v18, v13, zero, v7, v8, v35, v6, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v14, v18, v13, zero, v7, v8, v36, v6, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v14, v18, v13, zero, v20, v7, v8, v6, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v14, v21, v18, v13, zero, v8, v7, v6, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v14, v13, zero, v8, v7, v6, v15, v9]
// [Asm] move_origin: []
// [Asm] defs: [v24]
// [Asm] live_set: [v7, v6, v24, zero, v9, v8]
// [Asm] move_origin: [zero]
// [Asm] defined: v24 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v14, v16, v13, zero, v8, v7, v6, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v14, v13, zero, v8, v7, v6, v15, v9]
// [Asm] move_origin: []
// [Asm] defs: [v24]
// [Asm] live_set: [v7, v6, v24, zero, v9, v8]
// [Asm] move_origin: [v23]
// [Asm] defined: v24 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v24, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v13, zero, v8, v7, v6, v9]
// [Asm] move_origin: [v6]
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v14, v13, zero, v8, v7, v6, v9]
// [Asm] move_origin: [v7]
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v14, v13, zero, v8, v7, v6, v15, v9]
// [Asm] move_origin: [v8]
// [Asm] defined: v15 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v12]
// [Asm] move_origin: [zero]
// [Asm] defined: v12 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v7, v8, v6, zero, v9, v23]
// [Asm] move_origin: [zero]
// [Asm] defined: v23 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of f54l4_3"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r38 [label="v21 ← a1", color=green];
// [Asm]   r33 [label="v18 ← a0", color=green];
// [Asm]   r9 [label="v6 ← s0", color=green];
// [Asm]   r26 [label="a5", color=blue];
// [Asm]   r6 [label="v3 ← a1", color=green];
// [Asm]   r13 [label="v10 ← a0", color=green];
// [Asm]   r42 [label="v23 ← a0", color=green];
// [Asm]   r4 [label="a3", color=blue];
// [Asm]   r29 [label="v28 ← a0", color=green];
// [Asm]   r35 [label="v35 ← a1", color=green];
// [Asm]   r7 [label="v4 ← a2", color=green];
// [Asm]   r10 [label="v7 ← s1", color=green];
// [Asm]   r8 [label="v5 ← a3", color=green];
// [Asm]   r5 [label="zero", color=blue];
// [Asm]   r36 [label="v36 ← a1", color=green];
// [Asm]   r15 [label="v25 ← a0", color=green];
// [Asm]   r32 [label="v40 ← a0", color=green];
// [Asm]   r24 [label="t4", color=blue];
// [Asm]   r31 [label="v39 ← a0", color=green];
// [Asm]   r39 [label="v24 ← a0", color=green];
// [Asm]   r17 [label="v14 ← s1", color=green];
// [Asm]   r12 [label="v9 ← s3", color=green];
// [Asm]   r37 [label="v20 ← a1", color=green];
// [Asm]   r20 [label="t0", color=blue];
// [Asm]   r23 [label="t3", color=blue];
// [Asm]   r3 [label="a1", color=blue];
// [Asm]   r27 [label="a6", color=blue];
// [Asm]   r1 [label="v2 ← a0", color=green];
// [Asm]   r40 [label="v16 ← a0", color=green];
// [Asm]   r28 [label="a7", color=blue];
// [Asm]   r41 [label="v12 ← a0", color=green];
// [Asm]   r11 [label="v8 ← s2", color=green];
// [Asm]   r34 [label="v19 ← a1", color=green];
// [Asm]   r22 [label="t2", color=blue];
// [Asm]   r14 [label="v26 ← a0", color=green];
// [Asm]   r30 [label="v29 ← a0", color=green];
// [Asm]   r25 [label="a4", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r16 [label="v27 ← a2", color=green];
// [Asm]   r18 [label="v13 ← s4", color=green];
// [Asm]   r19 [label="v15 ← s2", color=green];
// [Asm]   r21 [label="t1", color=blue];
// [Asm]   r5 -- r40;
// [Asm]   r12 -- r26;
// [Asm]   r4 -- r19;
// [Asm]   r5 -- r15;
// [Asm]   r19 -- r20;
// [Asm]   r10 -- r14;
// [Asm]   r12 -- r25;
// [Asm]   r12 -- r29;
// [Asm]   r12 -- r32;
// [Asm]   r5 -- r21;
// [Asm]   r5 -- r33;
// [Asm]   r11 -- r35;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r11 -- r14;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r17 -- r35;
// [Asm]   r5 -- r18;
// [Asm]   r0 -- r28;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r5 -- r29;
// [Asm]   r9 -- r26;
// [Asm]   r0 -- r23;
// [Asm]   r18 -- r21;
// [Asm]   r9 -- r17;
// [Asm]   r11 -- r18;
// [Asm]   r18 -- r35;
// [Asm]   r10 -- r40;
// [Asm]   r0 -- r16;
// [Asm]   r3 -- r5;
// [Asm]   r18 -- r34;
// [Asm]   r17 -- r19;
// [Asm]   r18 -- r28;
// [Asm]   r5 -- r31;
// [Asm]   r5 -- r35;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r0 -- r26;
// [Asm]   r19 -- r29;
// [Asm]   r11 -- r13;
// [Asm]   r10 -- r38;
// [Asm]   r10 -- r18;
// [Asm]   r10 -- r12;
// [Asm]   r0 -- r9;
// [Asm]   r10 -- r33;
// [Asm]   r9 -- r23;
// [Asm]   r19 -- r22;
// [Asm]   r9 -- r12;
// [Asm]   r2 -- r12;
// [Asm]   r5 -- r32;
// [Asm]   r19 -- r36;
// [Asm]   r10 -- r31;
// [Asm]   r1 -- r2;
// [Asm]   r10 -- r22;
// [Asm]   r2 -- r5;
// [Asm]   r9 -- r20;
// [Asm]   r10 -- r42;
// [Asm]   r0 -- r10;
// [Asm]   r3 -- r17;
// [Asm]   r12 -- r23;
// [Asm]   r18 -- r33;
// [Asm]   r11 -- r15;
// [Asm]   r18 -- r20;
// [Asm]   r18 -- r37;
// [Asm]   r12 -- r21;
// [Asm]   r1 -- r5;
// [Asm]   r17 -- r31;
// [Asm]   r0 -- r4;
// [Asm]   r17 -- r27;
// [Asm]   r11 -- r36;
// [Asm]   r9 -- r39;
// [Asm]   r17 -- r34;
// [Asm]   r5 -- r36;
// [Asm]   r0 -- r18;
// [Asm]   r18 -- r24;
// [Asm]   r3 -- r19;
// [Asm]   r19 -- r40;
// [Asm]   r11 -- r20;
// [Asm]   r1 -- r8;
// [Asm]   r17 -- r29;
// [Asm]   r19 -- r30;
// [Asm]   r12 -- r34;
// [Asm]   r9 -- r40;
// [Asm]   r8 -- r9;
// [Asm]   r11 -- r16;
// [Asm]   r19 -- r34;
// [Asm]   r11 -- r12;
// [Asm]   r33 -- r36;
// [Asm]   r5 -- r19;
// [Asm]   r18 -- r40;
// [Asm]   r17 -- r24;
// [Asm]   r10 -- r29;
// [Asm]   r11 -- r23;
// [Asm]   r9 -- r30;
// [Asm]   r11 -- r22;
// [Asm]   r33 -- r35;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r17 -- r25;
// [Asm]   r5 -- r11;
// [Asm]   r19 -- r37;
// [Asm]   r0 -- r19;
// [Asm]   r5 -- r38;
// [Asm]   r11 -- r37;
// [Asm]   r16 -- r18;
// [Asm]   r10 -- r16;
// [Asm]   r19 -- r28;
// [Asm]   r12 -- r20;
// [Asm]   r9 -- r11;
// [Asm]   r12 -- r13;
// [Asm]   r5 -- r28;
// [Asm]   r12 -- r33;
// [Asm]   r5 -- r9;
// [Asm]   r0 -- r3;
// [Asm]   r10 -- r15;
// [Asm]   r9 -- r24;
// [Asm]   r12 -- r22;
// [Asm]   r33 -- r37;
// [Asm]   r9 -- r36;
// [Asm]   r10 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r19 -- r33;
// [Asm]   r8 -- r10;
// [Asm]   r2 -- r17;
// [Asm]   r11 -- r34;
// [Asm]   r4 -- r7;
// [Asm]   r5 -- r39;
// [Asm]   r5 -- r25;
// [Asm]   r10 -- r36;
// [Asm]   r12 -- r16;
// [Asm]   r12 -- r17;
// [Asm]   r2 -- r9;
// [Asm]   r10 -- r32;
// [Asm]   r17 -- r38;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r9 -- r13;
// [Asm]   r0 -- r20;
// [Asm]   r19 -- r25;
// [Asm]   r11 -- r28;
// [Asm]   r11 -- r29;
// [Asm]   r9 -- r21;
// [Asm]   r5 -- r12;
// [Asm]   r18 -- r23;
// [Asm]   r12 -- r35;
// [Asm]   r9 -- r25;
// [Asm]   r17 -- r21;
// [Asm]   r9 -- r27;
// [Asm]   r5 -- r8;
// [Asm]   r17 -- r40;
// [Asm]   r10 -- r26;
// [Asm]   r1 -- r4;
// [Asm]   r0 -- r17;
// [Asm]   r19 -- r38;
// [Asm]   r1 -- r7;
// [Asm]   r18 -- r25;
// [Asm]   r0 -- r25;
// [Asm]   r10 -- r13;
// [Asm]   r11 -- r31;
// [Asm]   r2 -- r10;
// [Asm]   r10 -- r19;
// [Asm]   r11 -- r32;
// [Asm]   r18 -- r27;
// [Asm]   r19 -- r31;
// [Asm]   r9 -- r31;
// [Asm]   r0 -- r22;
// [Asm]   r11 -- r24;
// [Asm]   r19 -- r21;
// [Asm]   r3 -- r18;
// [Asm]   r17 -- r36;
// [Asm]   r17 -- r33;
// [Asm]   r12 -- r19;
// [Asm]   r16 -- r17;
// [Asm]   r9 -- r18;
// [Asm]   r12 -- r24;
// [Asm]   r10 -- r20;
// [Asm]   r18 -- r26;
// [Asm]   r10 -- r37;
// [Asm]   r19 -- r27;
// [Asm]   r12 -- r28;
// [Asm]   r9 -- r28;
// [Asm]   r0 -- r2;
// [Asm]   r7 -- r10;
// [Asm]   r17 -- r22;
// [Asm]   r12 -- r40;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r10 -- r30;
// [Asm]   r5 -- r7;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r0 -- r11;
// [Asm]   r8 -- r11;
// [Asm]   r18 -- r31;
// [Asm]   r10 -- r25;
// [Asm]   r1 -- r6;
// [Asm]   r7 -- r8;
// [Asm]   r11 -- r30;
// [Asm]   r10 -- r35;
// [Asm]   r4 -- r9;
// [Asm]   r11 -- r25;
// [Asm]   r5 -- r34;
// [Asm]   r17 -- r20;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r17 -- r18;
// [Asm]   r4 -- r5;
// [Asm]   r11 -- r40;
// [Asm]   r9 -- r35;
// [Asm]   r12 -- r38;
// [Asm]   r11 -- r17;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r18;
// [Asm]   r9 -- r15;
// [Asm]   r0 -- r24;
// [Asm]   r5 -- r23;
// [Asm]   r9 -- r29;
// [Asm]   r18 -- r29;
// [Asm]   r12 -- r36;
// [Asm]   r12 -- r15;
// [Asm]   r3 -- r12;
// [Asm]   r17 -- r26;
// [Asm]   r5 -- r13;
// [Asm]   r16 -- r19;
// [Asm]   r0 -- r21;
// [Asm]   r9 -- r42;
// [Asm]   r19 -- r24;
// [Asm]   r19 -- r35;
// [Asm]   r10 -- r27;
// [Asm]   r18 -- r22;
// [Asm]   r19 -- r26;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r16;
// [Asm]   r10 -- r34;
// [Asm]   r18 -- r36;
// [Asm]   r17 -- r37;
// [Asm]   r6 -- r8;
// [Asm]   r33 -- r34;
// [Asm]   r9 -- r22;
// [Asm]   r18 -- r32;
// [Asm]   r12 -- r42;
// [Asm]   r11 -- r42;
// [Asm]   r11 -- r33;
// [Asm]   r17 -- r23;
// [Asm]   r4 -- r11;
// [Asm]   r10 -- r28;
// [Asm]   r19 -- r32;
// [Asm]   r18 -- r19;
// [Asm]   r9 -- r34;
// [Asm]   r9 -- r38;
// [Asm]   r19 -- r23;
// [Asm]   r5 -- r26;
// [Asm]   r12 -- r31;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r37;
// [Asm]   r9 -- r33;
// [Asm]   r11 -- r39;
// [Asm]   r10 -- r23;
// [Asm]   r10 -- r39;
// [Asm]   r9 -- r37;
// [Asm]   r12 -- r39;
// [Asm]   r12 -- r30;
// [Asm]   r11 -- r26;
// [Asm]   r12 -- r37;
// [Asm]   r11 -- r38;
// [Asm]   r9 -- r16;
// [Asm]   r9 -- r32;
// [Asm]   r0 -- r12;
// [Asm]   r12 -- r14;
// [Asm]   r5 -- r27;
// [Asm]   r18 -- r38;
// [Asm]   r12 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r9 -- r19;
// [Asm]   r11 -- r27;
// [Asm]   r17 -- r30;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r17 -- r32;
// [Asm]   r0 -- r27;
// [Asm]   r5 -- r30;
// [Asm]   r2 -- r3;
// [Asm]   r10 -- r24;
// [Asm]   r10 -- r21;
// [Asm]   r17 -- r28;
// [Asm]   r33 -- r38;
// [Asm]   r12 -- r18;
// [Asm]   r11 -- r21;
// [Asm]   comment = "0:a0-> 2:a2-> 3:a1-> 5:zero-> 9:v6-> 10:v7-> 11:v8-> 12:v9-> 18:v13-> 16:v27-> 17:v14-> 19:v15-> 4:a3-> 20:t0-> 21:t1-> 22:t2-> 23:t3-> 24:t4-> 25:a4-> 26:a5-> 27:a6-> 28:a7-> 29:v28-> 31:v39-> 32:v40-> 33:v18-> 34:v19-> 35:v35-> 36:v36-> 37:v20-> 38:v21-> 40:v16-> 30:v29-> 13:v10-> 15:v25-> 39:v24-> 1:v2-> 6:v3-> 7:v4-> 8:v5-> 14:v26-> 42:v23-> 41:v12"
// [Asm]   comment = "v21<-a1;v18<-a0;v6<-s0;v3<-a1;v10<-a0;v23<-a0;v28<-a0;v35<-a1;v4<-a2;v7<-s1;v5<-a3;v36<-a1;v25<-a0;v40<-a0;v39<-a0;v24<-a0;v14<-s1;v9<-s3;v20<-a1;v2<-a0;v16<-a0;v12<-a0;v8<-s2;v19<-a1;v26<-a0;v29<-a0;v27<-a2;v13<-s4;v15<-s2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of f54l4_3"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   addi v10, v9, -1 ->   addi a0, s3, -1
// [Asm] subst   blt v10, v6, .f54l4_3_2 ->   blt a0, s0, .f54l4_3_2
// [Asm] subst   mv v6, v2 ->   mv s0, a0
// [Asm] subst   mv v7, v3 ->   mv s1, a1
// [Asm] subst   mv v8, v4 ->   mv s2, a2
// [Asm] subst   mv v9, v5 ->   mv s3, a3
// [Asm] subst   addi v26, v6, 1 ->   addi a0, s0, 1
// [Asm] subst   mv v6, v26 ->   mv s0, a0
// [Asm] subst   j .f54l4_3_0 ->   j .f54l4_3_0
// [Asm] subst   addi v27, v13, -1 ->   addi a2, s4, -1
// [Asm] subst   mv a0, v14 ->   mv a0, s1
// [Asm] subst   mv a1, v13 ->   mv a1, s4
// [Asm] subst   call swap1l0_0 ->   call swap1l0_0
// [Asm] subst   addi v29, v13, -1 ->   addi a0, s4, -1
// [Asm] subst   mv v13, v29 ->   mv s4, a0
// [Asm] subst   j .f54l4_3_7 ->   j .f54l4_3_7
// [Asm] subst   slliw v39, v13, 2 ->   slliw a0, s4, 2
// [Asm] subst   add v40, v14, v39 ->   add a0, s1, a0
// [Asm] subst   lw v18, 0(v40) ->   lw a0, 0(a0)
// [Asm] subst   addi v19, v13, -1 ->   addi a1, s4, -1
// [Asm] subst   slliw v35, v19, 2 ->   slliw a1, a1, 2
// [Asm] subst   add v36, v14, v35 ->   add a1, s1, a1
// [Asm] subst   lw v20, 0(v36) ->   lw a1, 0(a1)
// [Asm] subst   addi v21, v20, -1 ->   addi a1, a1, -1
// [Asm] subst   blt v21, v18, .f54l4_3_11 ->   blt a1, a0, .f54l4_3_11
// [Asm] subst   mv v24, zero ->   mv a0, zero
// [Asm] subst   addi v16, v15, 1 ->   addi a0, s2, 1
// [Asm] subst   blt v13, v16, .f54l4_3_9 ->   blt s4, a0, .f54l4_3_9
// [Asm] subst   j .f54l4_3_13 ->   j .f54l4_3_13
// [Asm] subst   mv v13, v6 ->   mv s4, s0
// [Asm] subst   mv v12, zero ->   mv a0, zero
// [Asm] subst   mv v23, zero ->   mv a0, zero
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v9, FnParam(fref=f7, fpref=$f.1) -> v3, Insn(iref=%7) -> v13, FnParam(fref=f7, fpref=$f.2) -> v4, Self(fref=f7) -> v0, FnParam(fref=f7, fpref=$f.0) -> v2, BlockParam(bref=b3, bpref=$b.0) -> v14, Insn(iref=%2) -> v8, Insn(iref=%1) -> v7, FnParam(fref=f7, fpref=$f.3) -> v5, Insn(iref=%6) -> v12, Insn(iref=%5) -> v11, Insn(iref=%0) -> v6, Insn(iref=%4) -> v10
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%0), Insn(iref=%2)])
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v4, zero, a0, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, zero, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v4, a2, a1, zero, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v10]
// [Asm] live_set: [v4, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v4, zero]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v4, zero]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v4, v12, zero]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move_origin: [zero]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [zero, a0, a2, a1, a3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, a2, a1, a3, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, zero, a2, a3, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, zero, v4, a3, v2]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v5, zero, v4, v2]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v3, v5, zero, v22, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v3, v5, zero, v23, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v3, v5, zero, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v3, v5, zero, v19, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v3, v5, zero, v20, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v3, v5, zero, v8, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move_origin: [zero]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v14]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v14]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of sort_2157l5_7"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="v14 ← a0", color=green];
// [Asm]   r23 [label="v23 ← a1", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="t2", color=blue];
// [Asm]   r26 [label="v20 ← a2", color=green];
// [Asm]   r27 [label="v7 ← a2", color=green];
// [Asm]   r6 [label="a2", color=blue];
// [Asm]   r13 [label="a4", color=blue];
// [Asm]   r4 [label="v3 ← a5", color=green];
// [Asm]   r1 [label="v2 ← a4", color=green];
// [Asm]   r28 [label="v8 ← a2", color=green];
// [Asm]   r11 [label="t4", color=blue];
// [Asm]   r7 [label="t0", color=blue];
// [Asm]   r10 [label="t3", color=blue];
// [Asm]   r22 [label="v22 ← a1", color=green];
// [Asm]   r14 [label="a5", color=blue];
// [Asm]   r8 [label="t1", color=blue];
// [Asm]   r5 [label="a1", color=blue];
// [Asm]   r15 [label="a6", color=blue];
// [Asm]   r24 [label="v6 ← a1", color=green];
// [Asm]   r25 [label="v19 ← a2", color=green];
// [Asm]   r2 [label="v4 ← s0", color=green];
// [Asm]   r16 [label="a7", color=blue];
// [Asm]   r18 [label="v11 ← a0", color=green];
// [Asm]   r19 [label="v12 ← a0", color=green];
// [Asm]   r21 [label="v5 ← a0", color=green];
// [Asm]   r17 [label="v10 ← a0", color=green];
// [Asm]   r12 [label="a3", color=blue];
// [Asm]   r2 -- r23;
// [Asm]   r1 -- r24;
// [Asm]   r21 -- r24;
// [Asm]   r0 -- r15;
// [Asm]   r3 -- r19;
// [Asm]   r0 -- r13;
// [Asm]   r3 -- r25;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r24;
// [Asm]   r1 -- r26;
// [Asm]   r2 -- r26;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r4 -- r23;
// [Asm]   r3 -- r16;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r23;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r21 -- r28;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r22;
// [Asm]   r0 -- r14;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r2 -- r16;
// [Asm]   r3 -- r28;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r11;
// [Asm]   r2 -- r7;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r24 -- r28;
// [Asm]   r0 -- r16;
// [Asm]   r3 -- r5;
// [Asm]   r24 -- r26;
// [Asm]   r1 -- r28;
// [Asm]   r21 -- r23;
// [Asm]   r3 -- r22;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r1 -- r21;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r8;
// [Asm]   r3 -- r13;
// [Asm]   r21 -- r27;
// [Asm]   r4 -- r28;
// [Asm]   r21 -- r25;
// [Asm]   r2 -- r12;
// [Asm]   r24 -- r27;
// [Asm]   r2 -- r8;
// [Asm]   r0 -- r5;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r25;
// [Asm]   r2 -- r21;
// [Asm]   r1 -- r27;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r14;
// [Asm]   r0 -- r1;
// [Asm]   r21 -- r26;
// [Asm]   r3 -- r27;
// [Asm]   r2 -- r13;
// [Asm]   r2 -- r17;
// [Asm]   r0 -- r10;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r25;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r21 -- r22;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r24;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r3;
// [Asm]   r4 -- r26;
// [Asm]   r2 -- r19;
// [Asm]   r0 -- r7;
// [Asm]   r24 -- r25;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   comment = "0:a0-> 1:v2-> 2:v4-> 3:zero-> 4:v3-> 5:a1-> 6:a2-> 12:a3-> 21:v5-> 22:v22-> 23:v23-> 24:v6-> 25:v19-> 26:v20-> 27:v7-> 28:v8-> 7:t0-> 8:t1-> 9:t2-> 10:t3-> 11:t4-> 13:a4-> 14:a5-> 15:a6-> 16:a7-> 17:v10-> 18:v11-> 19:v12-> 20:v14"
// [Asm]   comment = "v14<-a0;v23<-a1;v20<-a2;v7<-a2;v3<-a5;v2<-a4;v8<-a2;v22<-a1;v6<-a1;v19<-a2;v4<-s0;v11<-a0;v12<-a0;v5<-a0;v10<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of sort_2157l5_7"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv a1, v2 ->   mv a1, a4
// [Asm] subst   mv a2, v3 ->   mv a2, a5
// [Asm] subst   call swap1l0_0 ->   call swap1l0_0
// [Asm] subst   lw v11, 0(v4) ->   lw a0, 0(s0)
// [Asm] subst   addi v12, v11, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v12, 0(v4) ->   sw a0, 0(s0)
// [Asm] subst   mv v14, zero ->   mv a0, zero
// [Asm] subst   mv v2, a0 ->   mv a4, a0
// [Asm] subst   mv v3, a1 ->   mv a5, a1
// [Asm] subst   mv v4, a2 ->   mv s0, a2
// [Asm] subst   mv v5, a3 ->   mv a0, a3
// [Asm] subst   slliw v22, v3, 2 ->   slliw a1, a5, 2
// [Asm] subst   add v23, v5, v22 ->   add a1, a0, a1
// [Asm] subst   lw v6, 0(v23) ->   lw a1, 0(a1)
// [Asm] subst   slliw v19, v2, 2 ->   slliw a2, a4, 2
// [Asm] subst   add v20, v5, v19 ->   add a2, a0, a2
// [Asm] subst   lw v7, 0(v20) ->   lw a2, 0(a2)
// [Asm] subst   addi v8, v7, -1 ->   addi a2, a2, -1
// [Asm] subst   blt v8, v6, .sort_2157l5_7_2 ->   blt a2, a1, .sort_2157l5_7_2
// [Asm] subst   mv v14, zero ->   mv a0, zero
// [Asm] subst   j .sort_2157l5_7_3 ->   j .sort_2157l5_7_3
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] sort_3173l6_8:
// [Asm] # block info: defs: [v2, t1, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v3, v5, a0, a4, a2, v4, v6, a1, a3, v9, v2], upward_exposed: [a2, a1, a3, a0, a4], params_defs: []
// [Asm] # live_in: [a2, a1, a3, a0, a4], live_out: []
// [Asm] # block parameters: []
// [Asm] .sort_3173l6_8_0:
// [Asm]   # save_ctx1  # live: [a0, a4, a2, a1, a3]
// [Asm]   mv v2, a0  # live: [a4, a2, a1, a3, v2]
// [Asm]   mv v3, a1  # live: [v3, a4, a2, a3, v2]
// [Asm]   mv v4, a2  # live: [v3, a4, v4, a3, v2]
// [Asm]   mv v5, a3  # live: [v3, v5, a4, v4, v2]
// [Asm]   mv v6, a4  # live: [v3, v5, v4, v6, v2]
// [Asm]   # save_ctx2  # live: [v3, v5, v4, v6, v2]
// [Asm]   mv a0, v2  # live: [v3, v5, a0, v4, v6, v2]
// [Asm]   mv a1, v3  # live: [v3, v5, a0, v4, a1, v6, v2]
// [Asm]   mv a2, v5  # live: [v3, v5, a0, v4, a2, a1, v6, v2]
// [Asm]   mv a3, v6  # live: [v3, v5, a0, v4, a2, a1, v6, a3, v2]
// [Asm]   call sort_2157l5_7  # live: [v3, v5, a0, v4, v6, v2]
// [Asm]   mv v7, a0  # live: [v3, v5, v4, v6, v2]
// [Asm]   # restore_ctx2  # live: [v3, v5, v4, v6, v2]
// [Asm]   # save_ctx2  # live: [v3, v5, v4, v6, v2]
// [Asm]   mv a0, v3  # live: [v3, v5, a0, v4, v6, v2]
// [Asm]   mv a1, v4  # live: [v3, v5, a0, v6, a1, v2]
// [Asm]   mv a2, v5  # live: [v3, v5, a0, a2, v6, a1, v2]
// [Asm]   mv a3, v6  # live: [v3, v5, a0, a2, v6, a1, a3, v2]
// [Asm]   call sort_2157l5_7  # live: [v2, v6, v5, a0, v3]
// [Asm]   mv v8, a0  # live: [v2, v6, v5, v3]
// [Asm]   # restore_ctx2  # live: [v2, v6, v5, v3]
// [Asm]   # save_ctx2  # live: [v2, v6, v5, v3]
// [Asm]   mv a0, v2  # live: [v6, v5, a0, v3]
// [Asm]   mv a1, v3  # live: [a1, v6, v5, a0]
// [Asm]   mv a2, v5  # live: [a2, a1, v6, a0]
// [Asm]   mv a3, v6  # live: [a2, a1, a3, a0]
// [Asm]   call sort_2157l5_7  # live: [a0]
// [Asm]   mv v9, a0  # live: [v9]
// [Asm]   # restore_ctx2  # live: [v9]
// [Asm] # control
// [Asm]   mv a0, v9  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] output14l1_1:
// [Asm] # block info: defs: [v3, v7, v4, v6, v5, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .output14l1_1_5:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm]   mv v6, v3  # live: [v4, v5, v6, zero]
// [Asm]   mv v7, v4  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v8], uses: [v8, v6, v7], upward_exposed: [v6, v7], params_defs: [v5, v6, v7]
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v6, v5, zero, v7]
// [Asm] # block parameters: [v5, v6, v7]
// [Asm] .output14l1_1_0:
// [Asm]   addi v8, v7, -1  # live: [v8, v6, v5, zero, v7]
// [Asm] # control
// [Asm]   blt v8, v6, .output14l1_1_2  # live: [v6, v5, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v13, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, v19, a6, ft5, ft10, v6, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v11, v5, v14, v18, a0, v7, v19, v6], upward_exposed: [v6, v5, v7], params_defs: []
// [Asm] # live_in: [v6, v5, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .output14l1_1_1:
// [Asm]   slliw v18, v6, 2  # live: [v5, v6, v18, zero, v7]
// [Asm]   add v19, v5, v18  # live: [v19, v5, v6, zero, v7]
// [Asm]   lw v11, 0(v19)  # live: [v11, v5, v6, zero, v7]
// [Asm]   # save_ctx2  # live: [v11, v5, v6, zero, v7]
// [Asm]   mv a0, v11  # live: [v5, v6, zero, a0, v7]
// [Asm]   call minimbt_print_int  # live: [v5, v6, zero, a0, v7]
// [Asm]   mv v12, a0  # live: [v5, v6, zero, v7]
// [Asm]   # restore_ctx2  # live: [v5, v6, zero, v7]
// [Asm]   # save_ctx2  # live: [v5, v6, zero, v7]
// [Asm]   call minimbt_print_endline  # live: [v5, v6, zero, a0, v7]
// [Asm]   mv v13, a0  # live: [v5, v6, zero, v7]
// [Asm]   # restore_ctx2  # live: [v5, v6, zero, v7]
// [Asm]   addi v14, v6, 1  # live: [v5, v14, zero, v7]
// [Asm] # control
// [Asm]   mv v5, v5  # live: [v5, v14, zero, v7]
// [Asm]   mv v6, v14  # live: [v5, v6, zero, v7]
// [Asm]   mv v7, v7  # live: [v5, v6, zero, v7]
// [Asm]   j .output14l1_1_0  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .output14l1_1_2:
// [Asm] # control
// [Asm]   mv v10, zero  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .output14l1_1_3:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] quick_sort210l5_10:
// [Asm] # block info: defs: [v3, v11, v4, v10, v12, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, s11, a0, zero], live_out: [v11, v10, v12, s11, zero]
// [Asm] # block parameters: []
// [Asm] .quick_sort210l5_10_5:
// [Asm]   # save_ctx1  # live: [a2, a1, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, s11, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, s11, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, s11, zero, v3]
// [Asm] # control
// [Asm]   mv v10, v2  # live: [v4, v10, s11, zero, v3]
// [Asm]   mv v11, v3  # live: [v11, v4, v10, s11, zero]
// [Asm]   mv v12, v4  # live: [v11, v10, v12, s11, zero]
// [Asm] 
// [Asm] # block info: defs: [v164, v13], uses: [v11, v164, v12, v13], upward_exposed: [v11, v12], params_defs: [v11, v10, v12]
// [Asm] # live_in: [v11, v10, v12, s11, zero], live_out: [v11, v10, v12, s11, zero]
// [Asm] # block parameters: [v10, v11, v12]
// [Asm] .quick_sort210l5_10_0:
// [Asm]   sub v13, v12, v11  # live: [v11, v10, zero, v13, v12, s11]
// [Asm] # control
// [Asm]   li v164, 16  # live: [v11, v164, v10, zero, v13, v12, s11]
// [Asm]   blt v164, v13, .quick_sort210l5_10_2  # live: [v11, v10, v12, s11, zero]
// [Asm] 
// [Asm] # block info: defs: [t1, v91, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, v92, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v11, v91, v10, a0, a2, a1, v12], upward_exposed: [v11, v10, v12], params_defs: []
// [Asm] # live_in: [v11, v10, v12], live_out: [v92]
// [Asm] # block parameters: []
// [Asm] .quick_sort210l5_10_1:
// [Asm]   # save_ctx2  # live: [v11, v12, v10]
// [Asm]   mv a0, v10  # live: [v11, v12, a0]
// [Asm]   mv a1, v11  # live: [a1, v12, a0]
// [Asm]   mv a2, v12  # live: [a2, a1, a0]
// [Asm]   call insertion_sort30l2_4  # live: [a0]
// [Asm]   mv v91, a0  # live: [v91]
// [Asm]   # restore_ctx2  # live: [v91]
// [Asm] # control
// [Asm]   mv v92, v91  # live: [v92]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v92, a0], upward_exposed: [v92], params_defs: [v92]
// [Asm] # live_in: [v92], live_out: []
// [Asm] # block parameters: [v92]
// [Asm] .quick_sort210l5_10_3:
// [Asm] # control
// [Asm]   mv a0, v92  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [], uses: [], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v11, s11, v12, v10, zero], live_out: [v11, s11, v12, v10, zero]
// [Asm] # block parameters: []
// [Asm] .quick_sort210l5_10_2:
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v155, v162, v16, v18, v159, v8, v157, v19, v17, s11], uses: [v11, v155, v162, v16, v18, zero, v159, v8, v157, v17, s11, v12], upward_exposed: [v11, s11, v12, zero], params_defs: []
// [Asm] # live_in: [v11, s11, v12, v10, zero], live_out: [v11, v16, v10, zero, v8, v19, s11, v12]
// [Asm] # block parameters: []
// [Asm] .quick_sort210l5_10_39:
// [Asm]   addi v162, s11, -4  # live: [v11, v162, v10, zero, v12]
// [Asm]   andi v8, v162, -8  # live: [v11, v10, zero, v8, v12]
// [Asm]   mv s11, v8  # live: [v11, v10, zero, v8, s11, v12]
// [Asm]   sw zero, 0(v8)  # live: [v11, v10, zero, v8, s11, v12]
// [Asm]   sub v16, v12, v11  # live: [v11, v16, v10, zero, v8, s11, v12]
// [Asm]   li v159, 4  # live: [v11, v16, v10, zero, v159, v8, s11, v12]
// [Asm]   div v17, v16, v159  # live: [v11, v16, v10, zero, v8, v17, s11, v12]
// [Asm]   li v157, 2  # live: [v11, v16, v10, zero, v8, v157, v17, s11, v12]
// [Asm]   mul v18, v17, v157  # live: [v11, v16, v10, v18, zero, v8, s11, v12]
// [Asm]   add v19, v11, v18  # live: [v11, v16, v10, zero, v8, v19, s11, v12]
// [Asm] # control
// [Asm]   li v155, 8  # live: [v11, v155, v16, v10, zero, v8, v19, s11, v12]
// [Asm]   blt v16, v155, .quick_sort210l5_10_41  # live: [v11, v16, v10, zero, v8, v19, s11, v12]
// [Asm] 
// [Asm] # block info: defs: [v153, v25, v21, v146, v26, v22, v23, v27, v148, v151, v24, v143], uses: [v153, v11, v25, v16, v146, v21, v22, v27, v148, v151, v24, v143], upward_exposed: [v11, v16], params_defs: []
// [Asm] # live_in: [v11, v16, v10, zero, v8, v19, s11, v12], live_out: [v11, v10, v26, zero, v23, v8, v19, s11, v12]
// [Asm] # block parameters: []
// [Asm] .quick_sort210l5_10_40:
// [Asm]   li v153, 4  # live: [v11, v153, v16, v10, zero, v8, v19, s11, v12]
// [Asm]   div v21, v16, v153  # live: [v11, v16, v10, v21, zero, v8, v19, s11, v12]
// [Asm]   li v151, 1  # live: [v11, v16, v10, v21, zero, v8, v19, v151, s11, v12]
// [Asm]   mul v22, v21, v151  # live: [v11, v16, v10, zero, v22, v8, v19, s11, v12]
// [Asm]   add v23, v11, v22  # live: [v11, v16, v10, zero, v23, v8, v19, s11, v12]
// [Asm]   li v148, 4  # live: [v11, v16, v10, zero, v23, v8, v148, v19, s11, v12]
// [Asm]   div v24, v16, v148  # live: [v11, v16, v10, zero, v23, v8, v19, s11, v12, v24]
// [Asm]   li v146, 3  # live: [v11, v16, v10, v146, zero, v23, v8, v19, s11, v12, v24]
// [Asm]   mul v25, v24, v146  # live: [v11, v25, v16, v10, zero, v23, v8, v19, s11, v12]
// [Asm]   add v26, v11, v25  # live: [v11, v16, v10, v26, zero, v23, v8, v19, s11, v12]
// [Asm]   addi v27, v16, -1  # live: [v11, v10, v26, zero, v23, v27, v8, v19, s11, v12]
// [Asm] # control
// [Asm]   li v143, 50  # live: [v11, v10, v26, zero, v23, v27, v8, v19, s11, v12, v143]
// [Asm]   blt v27, v143, .quick_sort210l5_10_43  # live: [v11, v10, v26, zero, v23, v8, v19, s11, v12]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, v32, a1, fa1, v33, fa2, v29, ft6, a4, fa6, a6, ft10, ft5, v34, ft7, ft4, ft9, a5, a0, fa4, v30, v36, ft2, a2, v37, a3, v31, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, v35, t4, v38, t2], uses: [v10, a0, v26, v30, v36, a2, v32, v37, a1, a3, v33, v29, v23, a4, v8, v35, v19], upward_exposed: [v19, v10, v26, v23, v8], params_defs: []
// [Asm] # live_in: [v11, v10, v26, zero, v23, v8, v19, s11, v12], live_out: [v11, v10, v26, zero, v23, v8, v19, v38, s11, v12]
// [Asm] # block parameters: []
// [Asm] .quick_sort210l5_10_42:
// [Asm]   addi v29, v23, -1  # live: [v11, v10, v26, s11, v12, zero, v29, v23, v8, v19]
// [Asm]   addi v30, v23, 1  # live: [v11, v10, v26, v30, s11, v12, zero, v29, v23, v8, v19]
// [Asm]   # save_ctx2  # live: [v11, v10, v26, v30, s11, v12, zero, v29, v23, v8, v19]
// [Asm]   mv a0, v29  # live: [v11, v10, v26, a0, v30, s11, v12, zero, v23, v8, v19]
// [Asm]   mv a1, v23  # live: [v11, v10, v26, a0, v30, a1, s11, v12, zero, v23, v8, v19]
// [Asm]   mv a2, v30  # live: [v11, v10, v26, a0, a2, a1, s11, v12, zero, v23, v8, v19]
// [Asm]   mv a3, v8  # live: [v11, v10, v26, a0, a2, a1, s11, v12, a3, zero, v23, v8, v19]
// [Asm]   mv a4, v10  # live: [v11, v10, v26, a0, a2, a1, s11, v12, a3, zero, v23, a4, v8, v19]
// [Asm]   call sort_3173l6_8  # live: [v11, v10, v26, a0, s11, v12, zero, v23, v8, v19]
// [Asm]   mv v31, a0  # live: [v11, v10, v26, s11, v12, zero, v23, v8, v19]
// [Asm]   # restore_ctx2  # live: [v11, v10, v26, s11, v12, zero, v23, v8, v19]
// [Asm]   addi v32, v19, -1  # live: [v11, v10, v26, v32, s11, v12, zero, v23, v8, v19]
// [Asm]   addi v33, v19, 1  # live: [v11, v10, v26, v32, s11, v12, v33, zero, v23, v8, v19]
// [Asm]   # save_ctx2  # live: [v11, v10, v26, v32, s11, v12, v33, zero, v23, v8, v19]
// [Asm]   mv a0, v32  # live: [v11, v10, v26, a0, s11, v12, v33, zero, v23, v8, v19]
// [Asm]   mv a1, v19  # live: [v11, v10, v26, a0, a1, s11, v12, v33, zero, v23, v8, v19]
// [Asm]   mv a2, v33  # live: [v11, v10, v26, a0, a2, a1, s11, v12, zero, v23, v8, v19]
// [Asm]   mv a3, v8  # live: [v11, v10, v26, a0, a2, a1, s11, v12, a3, zero, v23, v8, v19]
// [Asm]   mv a4, v10  # live: [v11, v10, v26, a0, a2, a1, s11, v12, a3, zero, v23, a4, v8, v19]
// [Asm]   call sort_3173l6_8  # live: [v11, v10, v26, a0, s11, v12, zero, v23, v8, v19]
// [Asm]   mv v34, a0  # live: [v11, v10, v26, s11, v12, zero, v23, v8, v19]
// [Asm]   # restore_ctx2  # live: [v11, v10, v26, s11, v12, zero, v23, v8, v19]
// [Asm]   addi v35, v26, -1  # live: [v11, v10, v26, s11, v12, zero, v23, v8, v35, v19]
// [Asm]   addi v36, v26, 1  # live: [v11, v10, v26, v36, s11, v12, zero, v23, v8, v35, v19]
// [Asm]   # save_ctx2  # live: [v11, v10, v26, v36, s11, v12, zero, v23, v8, v35, v19]
// [Asm]   mv a0, v35  # live: [v11, v10, v26, a0, v36, s11, v12, zero, v23, v8, v19]
// [Asm]   mv a1, v26  # live: [v11, v10, v26, a0, v36, a1, s11, v12, zero, v23, v8, v19]
// [Asm]   mv a2, v36  # live: [v11, v10, v26, a0, a2, a1, s11, v12, zero, v23, v8, v19]
// [Asm]   mv a3, v8  # live: [v11, v10, v26, a0, a2, a1, s11, v12, a3, zero, v23, v8, v19]
// [Asm]   mv a4, v10  # live: [v11, v10, v26, a0, a2, a1, s11, v12, a3, zero, v23, a4, v8, v19]
// [Asm]   call sort_3173l6_8  # live: [v11, v10, v26, zero, a0, v23, v8, v19, s11, v12]
// [Asm]   mv v37, a0  # live: [v11, v10, v26, zero, v23, v8, v19, v37, s11, v12]
// [Asm]   # restore_ctx2  # live: [v11, v10, v26, zero, v23, v8, v19, v37, s11, v12]
// [Asm] # control
// [Asm]   mv v38, v37  # live: [v11, v10, v26, zero, v23, v8, v19, v38, s11, v12]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v39, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v40], uses: [v10, v26, a0, v23, a4, v8, v19, a2, a1, a3, v39], upward_exposed: [v19, v10, v26, v23, v8], params_defs: [v38]
// [Asm] # live_in: [v11, v10, v26, zero, v23, v8, v19, v38, s11, v12], live_out: [v11, v10, zero, v8, v19, s11, v12, v40]
// [Asm] # block parameters: [v38]
// [Asm] .quick_sort210l5_10_44:
// [Asm]   # save_ctx2  # live: [v11, v10, zero, v26, v23, v8, v19, v12, s11]
// [Asm]   mv a0, v23  # live: [v11, v10, zero, a0, v26, v8, v19, v12, s11]
// [Asm]   mv a1, v19  # live: [v11, v10, zero, a0, v26, v8, v19, a1, v12, s11]
// [Asm]   mv a2, v26  # live: [v11, v10, zero, a0, v8, v19, a2, a1, v12, s11]
// [Asm]   mv a3, v8  # live: [v11, v10, zero, a0, v8, v19, a2, a1, v12, a3, s11]
// [Asm]   mv a4, v10  # live: [v11, v10, zero, a0, a4, v8, v19, a2, a1, v12, a3, s11]
// [Asm]   call sort_3173l6_8  # live: [v11, v10, zero, a0, v8, v19, s11, v12]
// [Asm]   mv v39, a0  # live: [v11, v10, zero, v8, v19, s11, v12, v39]
// [Asm]   # restore_ctx2  # live: [v11, v10, zero, v8, v19, s11, v12, v39]
// [Asm] # control
// [Asm]   mv v40, v39  # live: [v11, v10, zero, v8, v19, s11, v12, v40]
// [Asm] 
// [Asm] # block info: defs: [v41], uses: [v41, zero, v8], upward_exposed: [zero, v8], params_defs: [v40]
// [Asm] # live_in: [v11, v10, zero, v8, v19, s11, v12, v40], live_out: [v11, v10, zero, v19, s11, v12]
// [Asm] # block parameters: [v40]
// [Asm] .quick_sort210l5_10_45:
// [Asm]   lw v41, 0(v8)  # live: [v11, v10, zero, v19, v41, s11, v12]
// [Asm] # control
// [Asm]   bne v41, zero, .quick_sort210l5_10_47  # live: [v11, v19, v10, s11, v12, zero]
// [Asm] 
// [Asm] # block info: defs: [v43, v131], uses: [v131], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v19, s11, v12], live_out: [v11, v10, zero, v19, v43, s11, v12]
// [Asm] # block parameters: []
// [Asm] .quick_sort210l5_10_46:
// [Asm] # control
// [Asm]   li v131, 1  # live: [v11, v10, zero, v19, s11, v12, v131]
// [Asm]   mv v43, v131  # live: [v11, v10, zero, v19, v43, s11, v12]
// [Asm] 
// [Asm] # block info: defs: [s11, v129, v9, v45], uses: [v19, v43, s11, v129, v9], upward_exposed: [v19, v43, s11], params_defs: [v43]
// [Asm] # live_in: [v11, v10, zero, v19, v43, s11, v12], live_out: [v11, v10, zero, v45, v12, s11]
// [Asm] # block parameters: [v43]
// [Asm] .quick_sort210l5_10_48:
// [Asm]   addi v129, s11, -8  # live: [v11, v10, zero, v19, v43, v12, v129]
// [Asm]   andi v9, v129, -8  # live: [v11, v10, zero, v19, v43, v12, v9]
// [Asm]   mv s11, v9  # live: [v11, v10, zero, v19, v43, v12, s11, v9]
// [Asm]   sw v19, 0(v9)  # live: [v11, v10, zero, v43, v12, s11, v9]
// [Asm]   sw v43, 4(v9)  # live: [v11, v10, v12, s11, zero, v9]
// [Asm] # control
// [Asm]   mv v45, v9  # live: [v11, v10, v12, s11, zero, v45]
// [Asm] 
// [Asm] # block info: defs: [v46], uses: [v45], upward_exposed: [v45], params_defs: [v45]
// [Asm] # live_in: [v11, v10, zero, v45, v12, s11], live_out: [v11, v46, v10, zero, v12, s11]
// [Asm] # block parameters: [v45]
// [Asm] .quick_sort210l5_10_6:
// [Asm]   lw v46, 0(v45)  # live: [v11, v46, v10, v12, s11, zero]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [t1, v120, ft0, ft1, a1, s11, fa1, v51, fa2, ft6, a4, fa6, v50, a6, ft10, ft5, v6, v117, v122, ft7, ft4, v5, ft9, v49, a5, fa4, a0, v123, v119, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, v48, fa3, ft3, fa0, t4, t2], uses: [v11, v46, v5, v10, a0, v123, v120, v119, a2, a1, s11, v12, v48, v50, v6, v117, v122], upward_exposed: [v11, v46, v12, v10, s11], params_defs: []
// [Asm] # live_in: [v11, v46, v10, zero, v12, s11], live_out: [v11, v5, v10, zero, v6, v12, s11, v51]
// [Asm] # block parameters: []
// [Asm] .quick_sort210l5_10_11:
// [Asm]   addi v48, v12, -1  # live: [v11, v46, v10, v48, zero, v12, s11]
// [Asm]   # save_ctx2  # live: [v11, v46, v10, v48, zero, v12, s11]
// [Asm]   mv a0, v10  # live: [v11, v46, v10, v48, zero, a0, v12, s11]
// [Asm]   mv a1, v46  # live: [v11, v10, v48, zero, a0, a1, v12, s11]
// [Asm]   mv a2, v48  # live: [v11, v10, zero, a0, a2, a1, v12, s11]
// [Asm]   call swap1l0_0  # live: [v11, v10, zero, a0, v12, s11]
// [Asm]   mv v49, a0  # live: [v11, v10, zero, v12, s11]
// [Asm]   # restore_ctx2  # live: [v11, v10, zero, v12, s11]
// [Asm]   addi v50, v12, -1  # live: [v11, v10, zero, v50, v12, s11]
// [Asm]   slliw v122, v50, 2  # live: [v11, v10, zero, v12, s11, v122]
// [Asm]   add v123, v10, v122  # live: [v11, v10, zero, v123, v12, s11]
// [Asm]   lw v51, 0(v123)  # live: [v11, v10, zero, v12, s11, v51]
// [Asm]   addi v120, s11, -4  # live: [v11, v10, zero, v120, v12, v51]
// [Asm]   andi v6, v120, -8  # live: [v11, v10, zero, v6, v12, v51]
// [Asm]   mv s11, v6  # live: [v11, v10, zero, v6, v12, s11, v51]
// [Asm]   sw v11, 0(v6)  # live: [v11, v10, zero, v6, v12, s11, v51]
// [Asm]   addi v117, s11, -4  # live: [v11, v10, zero, v6, v12, v117, v51]
// [Asm]   andi v5, v117, -8  # live: [v11, v5, v10, zero, v6, v12, v51]
// [Asm]   mv s11, v5  # live: [v11, v5, v10, zero, v6, v12, s11, v51]
// [Asm]   li v119, 1  # live: [v11, v5, v10, zero, v119, v6, v12, s11, v51]
// [Asm]   sw v119, 0(v5)  # live: [v11, v5, v10, zero, v6, v12, s11, v51]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v59, v58, v56, v57, v54, v55], uses: [v11, v6, v5, v12, v10, v51], upward_exposed: [v11, v6, v5, v12, v10, v51], params_defs: []
// [Asm] # live_in: [v11, v5, v10, zero, v6, v12, s11, v51], live_out: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v55, v54]
// [Asm] # block parameters: []
// [Asm] .quick_sort210l5_10_36:
// [Asm] # control
// [Asm]   mv v54, v11  # live: [v11, v5, v10, zero, v6, v12, s11, v54, v51]
// [Asm]   mv v55, v6  # live: [v11, v5, v10, zero, v6, v12, s11, v55, v54, v51]
// [Asm]   mv v56, v10  # live: [v11, v5, v10, v56, zero, v6, v12, s11, v55, v54, v51]
// [Asm]   mv v57, v51  # live: [v11, v5, v10, v56, zero, v6, v12, s11, v57, v55, v54]
// [Asm]   mv v58, v12  # live: [v11, v58, v5, v10, v56, zero, v6, v12, s11, v57, v55, v54]
// [Asm]   mv v59, v5  # live: [v11, v58, v5, v10, v56, zero, v59, v6, v12, s11, v57, v55, v54]
// [Asm] 
// [Asm] # block info: defs: [v60], uses: [v58, v54, v60], upward_exposed: [v58, v54], params_defs: [v59, v58, v56, v57, v54, v55]
// [Asm] # live_in: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v55, v54], live_out: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v55, v54]
// [Asm] # block parameters: [v54, v55, v56, v57, v58, v59]
// [Asm] .quick_sort210l5_10_25:
// [Asm]   addi v60, v58, -2  # live: [v11, v58, v5, v10, v12, s11, v60, v56, zero, v59, v6, v57, v55, v54]
// [Asm] # control
// [Asm]   blt v60, v54, .quick_sort210l5_10_27  # live: [v11, v58, v5, v10, v56, zero, v59, v6, v12, s11, v57, v55, v54]
// [Asm] 
// [Asm] # block info: defs: [v101, v102, v77, v78], uses: [v56, v78, v77, v102, v57, v54, v101], upward_exposed: [v56, v57, v54], params_defs: []
// [Asm] # live_in: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v55, v54], live_out: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v54, v55]
// [Asm] # block parameters: []
// [Asm] .quick_sort210l5_10_26:
// [Asm]   slliw v101, v54, 2  # live: [v11, v58, v5, v10, v12, s11, v101, v56, zero, v59, v6, v57, v54, v55]
// [Asm]   add v102, v56, v101  # live: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v102, v54, v55]
// [Asm]   lw v77, 0(v102)  # live: [v11, v58, v5, v10, v12, s11, v56, zero, v77, v59, v6, v57, v54, v55]
// [Asm]   addi v78, v57, -1  # live: [v11, v58, v5, v10, v78, v12, s11, v56, zero, v77, v59, v6, v57, v54, v55]
// [Asm] # control
// [Asm]   blt v78, v77, .quick_sort210l5_10_29  # live: [v11, v58, v5, v10, v56, zero, v59, v6, v12, s11, v57, v54, v55]
// [Asm] 
// [Asm] # block info: defs: [v80], uses: [v80, v55, v54], upward_exposed: [v55, v54], params_defs: []
// [Asm] # live_in: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v54, v55], live_out: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v54, v55]
// [Asm] # block parameters: []
// [Asm] .quick_sort210l5_10_28:
// [Asm]   lw v80, 0(v55)  # live: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v80, v6, v57, v54, v55]
// [Asm] # control
// [Asm]   beq v80, v54, .quick_sort210l5_10_30  # live: [v11, v58, v5, v10, v56, zero, v59, v6, v12, s11, v57, v54, v55]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, v82, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, v85, t4, t2, v83], uses: [v82, v56, a0, zero, a2, v59, a1, v55, v54], upward_exposed: [v59, v56, v55, v54, zero], params_defs: []
// [Asm] # live_in: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v54, v55], live_out: [v11, v58, v5, v10, v12, s11, v56, zero, v85, v59, v6, v57, v54, v55]
// [Asm] # block parameters: []
// [Asm] .quick_sort210l5_10_31:
// [Asm]   lw v82, 0(v55)  # live: [v11, v58, v5, v10, v12, s11, v82, v56, zero, v59, v6, v57, v54, v55]
// [Asm]   # save_ctx2  # live: [v11, v58, v5, v10, v12, s11, v82, v56, zero, v59, v6, v57, v54, v55]
// [Asm]   mv a0, v56  # live: [v11, v58, v5, v10, a0, v12, s11, v82, v56, zero, v59, v6, v57, v54, v55]
// [Asm]   mv a1, v82  # live: [v11, v58, v5, v10, a0, a1, v12, s11, v56, zero, v59, v6, v57, v54, v55]
// [Asm]   mv a2, v54  # live: [v11, v58, v5, v10, a0, a2, a1, v12, s11, v56, zero, v59, v6, v57, v54, v55]
// [Asm]   call swap1l0_0  # live: [v11, v58, v5, v10, a0, v12, s11, v56, zero, v59, v6, v57, v54, v55]
// [Asm]   mv v83, a0  # live: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v54, v55]
// [Asm]   # restore_ctx2  # live: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v54, v55]
// [Asm]   sw zero, 0(v59)  # live: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v54, v55]
// [Asm] # control
// [Asm]   mv v85, zero  # live: [v11, v58, v5, v10, v12, s11, v56, zero, v85, v59, v6, v57, v54, v55]
// [Asm] 
// [Asm] # block info: defs: [v87, v86, v89], uses: [v87, v86, v55, zero], upward_exposed: [v55, zero], params_defs: [v85]
// [Asm] # live_in: [v11, v58, v5, v10, v12, s11, v56, zero, v85, v59, v6, v57, v54, v55], live_out: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v89, v54, v55]
// [Asm] # block parameters: [v85]
// [Asm] .quick_sort210l5_10_32:
// [Asm]   lw v86, 0(v55)  # live: [v11, v58, v5, v10, v12, s11, v86, v56, zero, v59, v6, v57, v54, v55]
// [Asm]   addi v87, v86, 1  # live: [v11, v58, v5, v87, v10, v12, s11, v56, zero, v59, v6, v57, v54, v55]
// [Asm]   sw v87, 0(v55)  # live: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v54, v55]
// [Asm] # control
// [Asm]   mv v89, zero  # live: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v89, v54, v55]
// [Asm] 
// [Asm] # block info: defs: [v90, v54], uses: [v58, v56, v90, v59, v57, v54, v55], upward_exposed: [v59, v58, v56, v57, v54, v55], params_defs: [v89]
// [Asm] # live_in: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v89, v54, v55], live_out: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v55, v54]
// [Asm] # block parameters: [v89]
// [Asm] .quick_sort210l5_10_33:
// [Asm]   addi v90, v54, 1  # live: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v90, v6, v57, v55]
// [Asm] # control
// [Asm]   mv v54, v90  # live: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v55, v54]
// [Asm]   mv v55, v55  # live: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v55, v54]
// [Asm]   mv v56, v56  # live: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v55, v54]
// [Asm]   mv v57, v57  # live: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v55, v54]
// [Asm]   mv v58, v58  # live: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v55, v54]
// [Asm]   mv v59, v59  # live: [v11, v58, v5, v10, v56, zero, v59, v6, v12, s11, v57, v55, v54]
// [Asm]   j .quick_sort210l5_10_25  # live: [v11, v58, v5, v10, v56, zero, v59, v6, v12, s11, v57, v55, v54]
// [Asm] 
// [Asm] # block info: defs: [v40], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v8, v19, s11, v12], live_out: [v11, v10, zero, v8, v19, s11, v12, v40]
// [Asm] # block parameters: []
// [Asm] .quick_sort210l5_10_41:
// [Asm] # control
// [Asm]   mv v40, zero  # live: [v11, v10, zero, v8, v19, s11, v12, v40]
// [Asm]   j .quick_sort210l5_10_45  # live: [v11, v10, zero, v8, v19, s11, v12, v40]
// [Asm] 
// [Asm] # block info: defs: [v38], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v26, v23, v8, v19, s11, v12], live_out: [v11, v10, v26, zero, v23, v8, v19, v38, s11, v12]
// [Asm] # block parameters: []
// [Asm] .quick_sort210l5_10_43:
// [Asm] # control
// [Asm]   mv v38, zero  # live: [v11, v10, v26, zero, v23, v8, v19, v38, s11, v12]
// [Asm]   j .quick_sort210l5_10_44  # live: [v11, v10, v26, zero, v23, v8, v19, v38, s11, v12]
// [Asm] 
// [Asm] # block info: defs: [v43], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v19, s11, v12], live_out: [v11, v10, zero, v19, v43, s11, v12]
// [Asm] # block parameters: []
// [Asm] .quick_sort210l5_10_47:
// [Asm] # control
// [Asm]   mv v43, zero  # live: [v11, v10, zero, v19, v43, s11, v12]
// [Asm]   j .quick_sort210l5_10_48  # live: [v11, v10, zero, v19, v43, s11, v12]
// [Asm] 
// [Asm] # block info: defs: [v62], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v11, v5, v10, zero, v6, v12, s11], live_out: [v62, v11, v5, v10, zero, v6, v12, s11]
// [Asm] # block parameters: []
// [Asm] .quick_sort210l5_10_27:
// [Asm] # control
// [Asm]   mv v62, zero  # live: [v62, v11, v5, v10, zero, v6, v12, s11]
// [Asm] 
// [Asm] # block info: defs: [v63], uses: [v62], upward_exposed: [v62], params_defs: [v62]
// [Asm] # live_in: [v62, v11, v5, v10, zero, v6, v12, s11], live_out: [v11, v63, v5, v10, zero, v6, v12, s11]
// [Asm] # block parameters: [v62]
// [Asm] .quick_sort210l5_10_34:
// [Asm] # control
// [Asm]   mv v63, v62  # live: [v11, v63, v5, v10, zero, v6, v12, s11]
// [Asm] 
// [Asm] # block info: defs: [t1, v67, ft0, ft1, a1, v64, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v66, ft4, ft9, a5, a0, fa4, v110, ft2, v65, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, v68, ft3, fa0, t4, t2], uses: [v5, v10, a0, v68, v110, v65, a2, a1, v6, v12, v64], upward_exposed: [v6, v5, v10, v12], params_defs: [v63]
// [Asm] # live_in: [v11, v63, v5, v10, zero, v6, v12, s11], live_out: [v11, v10, zero, v67, s11, v12]
// [Asm] # block parameters: [v63]
// [Asm] .quick_sort210l5_10_15:
// [Asm]   lw v64, 0(v6)  # live: [v11, v5, v10, zero, v6, v12, s11, v64]
// [Asm]   addi v65, v12, -1  # live: [v11, v5, v10, zero, v65, v6, v12, s11, v64]
// [Asm]   # save_ctx2  # live: [v11, v5, v10, zero, v65, v6, v12, s11, v64]
// [Asm]   mv a0, v10  # live: [v11, v5, v10, zero, a0, v65, v6, v12, s11, v64]
// [Asm]   mv a1, v64  # live: [v11, v5, v10, zero, a0, v65, v6, a1, v12, s11]
// [Asm]   mv a2, v65  # live: [v11, v5, v10, zero, a0, a2, v6, a1, v12, s11]
// [Asm]   call swap1l0_0  # live: [v11, v5, v10, zero, a0, v6, s11, v12]
// [Asm]   mv v66, a0  # live: [v11, v5, v10, zero, v6, s11, v12]
// [Asm]   # restore_ctx2  # live: [v11, v5, v10, zero, v6, s11, v12]
// [Asm]   lw v67, 0(v6)  # live: [v11, v5, v10, zero, v67, s11, v12]
// [Asm]   lw v68, 0(v5)  # live: [v11, v10, zero, v68, v67, s11, v12]
// [Asm] # control
// [Asm]   li v110, 1  # live: [v11, v10, zero, v68, v67, v110, s11, v12]
// [Asm]   bne v68, v110, .quick_sort210l5_10_13  # live: [v11, v10, s11, v12, zero, v67]
// [Asm] 
// [Asm] # block info: defs: [v109, v70], uses: [v109], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v67, s11, v12], live_out: [v11, v10, zero, v67, v70, s11, v12]
// [Asm] # block parameters: []
// [Asm] .quick_sort210l5_10_12:
// [Asm] # control
// [Asm]   li v109, 1  # live: [v11, v109, v10, zero, v67, s11, v12]
// [Asm]   mv v70, v109  # live: [v11, v10, zero, v67, v70, s11, v12]
// [Asm] 
// [Asm] # block info: defs: [v107, v72, s11, v7], uses: [v107, v70, s11, v67, v7], upward_exposed: [v70, s11, v67], params_defs: [v70]
// [Asm] # live_in: [v11, v10, zero, v67, v70, s11, v12], live_out: [v11, v72, v10, zero, v12, s11]
// [Asm] # block parameters: [v70]
// [Asm] .quick_sort210l5_10_14:
// [Asm]   addi v107, s11, -8  # live: [v11, v10, zero, v67, v107, v70, v12]
// [Asm]   andi v7, v107, -8  # live: [v11, v10, zero, v67, v7, v70, v12]
// [Asm]   mv s11, v7  # live: [v11, v10, zero, v67, v7, v70, v12, s11]
// [Asm]   sw v67, 0(v7)  # live: [v11, v10, zero, v7, v70, v12, s11]
// [Asm]   sw v70, 4(v7)  # live: [v11, v10, v12, s11, zero, v7]
// [Asm] # control
// [Asm]   mv v72, v7  # live: [v11, v72, v10, v12, s11, zero]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, v73, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, v75, fa3, ft3, fa0, t4, t2, v76], uses: [v76, v11, v72, v10, a0, a2, a1, v12, v73], upward_exposed: [v11, v72, v10, v12], params_defs: [v72]
// [Asm] # live_in: [v11, v72, v10, zero, v12, s11], live_out: [v11, v10, v12, s11, zero]
// [Asm] # block parameters: [v72]
// [Asm] .quick_sort210l5_10_7:
// [Asm]   lw v73, 0(v72)  # live: [v11, v10, zero, v12, s11, v73]
// [Asm]   # save_ctx2  # live: [v11, v10, zero, v12, s11, v73]
// [Asm]   mv a0, v10  # live: [v11, v10, zero, a0, v12, s11, v73]
// [Asm]   mv a1, v11  # live: [v10, zero, a0, a1, v12, s11, v73]
// [Asm]   mv a2, v73  # live: [v10, zero, a0, a2, a1, v12, s11, v73]
// [Asm]   call quick_sort210l5_10  # live: [v73, v10, v12, s11, zero, a0]
// [Asm]   mv v75, a0  # live: [v10, v12, s11, zero, v73]
// [Asm]   # restore_ctx2  # live: [v10, v12, s11, zero, v73]
// [Asm]   addi v76, v73, 1  # live: [v10, v12, s11, zero, v76]
// [Asm] # control
// [Asm]   mv v10, v10  # live: [v10, v12, s11, zero, v76]
// [Asm]   mv v11, v76  # live: [v11, v10, v12, s11, zero]
// [Asm]   mv v12, v12  # live: [v11, v10, v12, s11, zero]
// [Asm]   j .quick_sort210l5_10_0  # live: [v11, v10, v12, s11, zero]
// [Asm] 
// [Asm] # block info: defs: [v70], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v67, s11, v12], live_out: [v11, v10, zero, v67, v70, s11, v12]
// [Asm] # block parameters: []
// [Asm] .quick_sort210l5_10_13:
// [Asm] # control
// [Asm]   mv v70, zero  # live: [v11, v10, zero, v67, v70, s11, v12]
// [Asm]   j .quick_sort210l5_10_14  # live: [v11, v10, zero, v67, v70, s11, v12]
// [Asm] 
// [Asm] # block info: defs: [v89], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v55, v54], live_out: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v89, v54, v55]
// [Asm] # block parameters: []
// [Asm] .quick_sort210l5_10_29:
// [Asm] # control
// [Asm]   mv v89, zero  # live: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v89, v54, v55]
// [Asm]   j .quick_sort210l5_10_33  # live: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v89, v54, v55]
// [Asm] 
// [Asm] # block info: defs: [v85], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v11, v58, v5, v10, v12, s11, v56, zero, v59, v6, v57, v54, v55], live_out: [v11, v58, v5, v10, v12, s11, v56, zero, v85, v59, v6, v57, v54, v55]
// [Asm] # block parameters: []
// [Asm] .quick_sort210l5_10_30:
// [Asm] # control
// [Asm]   mv v85, zero  # live: [v11, v58, v5, v10, v12, s11, v56, zero, v85, v59, v6, v57, v54, v55]
// [Asm]   j .quick_sort210l5_10_32  # live: [v11, v58, v5, v10, v12, s11, v56, zero, v85, v59, v6, v57, v54, v55]
// [Asm] 
// [Asm] # leaf false
// [Asm] f54l4_3:
// [Asm] # block info: defs: [v2, v5, v7, v8, v4, v6, v9, v3], uses: [v2, v5, a0, a2, v4, a1, a3, v3], upward_exposed: [a2, a1, a3, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a3, a0, zero], live_out: [v8, v6, v9, zero, v7]
// [Asm] # block parameters: []
// [Asm] .f54l4_3_5:
// [Asm]   # save_ctx1  # live: [a2, a1, a3, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, a3, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, a3, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, a3, zero, v3]
// [Asm]   mv v5, a3  # live: [v2, v4, v5, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v2  # live: [v4, v6, v5, zero, v3]
// [Asm]   mv v7, v3  # live: [v4, v6, v5, zero, v7]
// [Asm]   mv v8, v4  # live: [v7, v6, v5, zero, v8]
// [Asm]   mv v9, v5  # live: [v7, v6, v9, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [v6, v10, v9], upward_exposed: [v6, v9], params_defs: [v8, v6, v9, v7]
// [Asm] # live_in: [v7, v6, v9, zero, v8], live_out: [v8, v6, zero, v9, v7]
// [Asm] # block parameters: [v6, v7, v8, v9]
// [Asm] .f54l4_3_0:
// [Asm]   addi v10, v9, -1  # live: [v10, zero, v7, v8, v6, v9]
// [Asm] # control
// [Asm]   blt v10, v6, .f54l4_3_2  # live: [v7, v6, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v7, v6, zero, v9, v8], live_out: [v8, v6, zero, v9, v7]
// [Asm] # block parameters: []
// [Asm] .f54l4_3_1:
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v14, v15, v13], uses: [v8, v6, v7], upward_exposed: [v8, v6, v7], params_defs: []
// [Asm] # live_in: [v7, v6, zero, v9, v8], live_out: [v14, v13, zero, v7, v8, v6, v15, v9]
// [Asm] # block parameters: []
// [Asm] .f54l4_3_15:
// [Asm] # control
// [Asm]   mv v13, v6  # live: [v13, zero, v8, v7, v6, v9]
// [Asm]   mv v14, v7  # live: [v14, v13, zero, v8, v7, v6, v9]
// [Asm]   mv v15, v8  # live: [v14, v13, zero, v8, v7, v6, v15, v9]
// [Asm] 
// [Asm] # block info: defs: [v16], uses: [v16, v15, v13], upward_exposed: [v15, v13], params_defs: [v14, v15, v13]
// [Asm] # live_in: [v14, v13, zero, v8, v7, v6, v15, v9], live_out: [v14, v13, zero, v7, v8, v6, v15, v9]
// [Asm] # block parameters: [v13, v14, v15]
// [Asm] .f54l4_3_7:
// [Asm]   addi v16, v15, 1  # live: [v14, v16, v13, zero, v8, v7, v6, v15, v9]
// [Asm] # control
// [Asm]   blt v13, v16, .f54l4_3_9  # live: [v14, v13, zero, v8, v7, v6, v15, v9]
// [Asm] 
// [Asm] # block info: defs: [v18, v21, v20, v35, v36, v19, v39, v40], uses: [v14, v21, v18, v13, v20, v35, v36, v19, v39, v40], upward_exposed: [v14, v13], params_defs: []
// [Asm] # live_in: [v14, v13, zero, v8, v7, v6, v15, v9], live_out: [v14, v13, zero, v7, v8, v6, v15, v9]
// [Asm] # block parameters: []
// [Asm] .f54l4_3_8:
// [Asm]   slliw v39, v13, 2  # live: [v14, v13, zero, v7, v8, v6, v15, v9, v39]
// [Asm]   add v40, v14, v39  # live: [v14, v13, zero, v7, v8, v6, v15, v9, v40]
// [Asm]   lw v18, 0(v40)  # live: [v14, v18, v13, zero, v7, v8, v6, v15, v9]
// [Asm]   addi v19, v13, -1  # live: [v14, v18, v13, zero, v7, v8, v19, v6, v15, v9]
// [Asm]   slliw v35, v19, 2  # live: [v14, v18, v13, zero, v7, v8, v35, v6, v15, v9]
// [Asm]   add v36, v14, v35  # live: [v14, v18, v13, zero, v7, v8, v36, v6, v15, v9]
// [Asm]   lw v20, 0(v36)  # live: [v14, v18, v13, zero, v20, v7, v8, v6, v15, v9]
// [Asm]   addi v21, v20, -1  # live: [v14, v21, v18, v13, zero, v8, v7, v6, v15, v9]
// [Asm] # control
// [Asm]   blt v21, v18, .f54l4_3_11  # live: [v14, v13, zero, v8, v7, v6, v15, v9]
// [Asm] 
// [Asm] # block info: defs: [t1, v13, ft0, ft1, a1, v28, fa1, fa2, ft6, v29, a4, fa6, v27, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v14, v13, a0, v29, v27, a2, a1, v15], upward_exposed: [v14, v15, v13], params_defs: []
// [Asm] # live_in: [v14, v13, zero, v8, v7, v6, v15, v9], live_out: [v14, v13, zero, v7, v8, v6, v15, v9]
// [Asm] # block parameters: []
// [Asm] .f54l4_3_10:
// [Asm]   addi v27, v13, -1  # live: [v14, zero, v13, v27, v7, v8, v6, v15, v9]
// [Asm]   # save_ctx2  # live: [v14, zero, v13, v27, v7, v8, v6, v15, v9]
// [Asm]   mv a0, v14  # live: [v14, zero, v13, a0, v27, v7, v8, v6, v15, v9]
// [Asm]   mv a1, v13  # live: [v14, zero, v13, a0, v27, v7, v8, v6, a1, v15, v9]
// [Asm]   mv a2, v27  # live: [v14, zero, v13, a0, v8, v7, a2, a1, v6, v15, v9]
// [Asm]   call swap1l0_0  # live: [v14, zero, v13, a0, v7, v8, v6, v15, v9]
// [Asm]   mv v28, a0  # live: [v14, zero, v13, v8, v7, v6, v15, v9]
// [Asm]   # restore_ctx2  # live: [v14, zero, v13, v8, v7, v6, v15, v9]
// [Asm]   addi v29, v13, -1  # live: [v14, zero, v29, v8, v7, v6, v15, v9]
// [Asm] # control
// [Asm]   mv v13, v29  # live: [v14, v13, zero, v8, v7, v6, v15, v9]
// [Asm]   mv v14, v14  # live: [v14, v13, zero, v8, v7, v6, v15, v9]
// [Asm]   mv v15, v15  # live: [v14, v13, zero, v8, v7, v6, v15, v9]
// [Asm]   j .f54l4_3_7  # live: [v14, v13, zero, v8, v7, v6, v15, v9]
// [Asm] 
// [Asm] # block info: defs: [v12], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v12]
// [Asm] # block parameters: []
// [Asm] .f54l4_3_2:
// [Asm] # control
// [Asm]   mv v12, zero  # live: [v12]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v12, a0], upward_exposed: [v12], params_defs: [v12]
// [Asm] # live_in: [v12], live_out: []
// [Asm] # block parameters: [v12]
// [Asm] .f54l4_3_3:
// [Asm] # control
// [Asm]   mv a0, v12  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v24], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v7, v6, zero, v9, v8], live_out: [zero, v8, v7, v6, v24, v9]
// [Asm] # block parameters: []
// [Asm] .f54l4_3_9:
// [Asm] # control
// [Asm]   mv v24, zero  # live: [v7, v6, v24, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [v25], uses: [v24], upward_exposed: [v24], params_defs: [v24]
// [Asm] # live_in: [zero, v7, v8, v6, v24, v9], live_out: [v25, zero, v8, v7, v6, v9]
// [Asm] # block parameters: [v24]
// [Asm] .f54l4_3_13:
// [Asm] # control
// [Asm]   mv v25, v24  # live: [v7, v25, v6, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [v6, v26], uses: [v8, v6, v26, v9, v7], upward_exposed: [v8, v6, v9, v7], params_defs: [v25]
// [Asm] # live_in: [v25, zero, v7, v8, v6, v9], live_out: [v8, v6, v9, zero, v7]
// [Asm] # block parameters: [v25]
// [Asm] .f54l4_3_6:
// [Asm]   addi v26, v6, 1  # live: [v7, v8, v9, zero, v26]
// [Asm] # control
// [Asm]   mv v6, v26  # live: [v7, v6, v9, zero, v8]
// [Asm]   mv v7, v7  # live: [v7, v6, v9, zero, v8]
// [Asm]   mv v8, v8  # live: [v7, v6, v9, zero, v8]
// [Asm]   mv v9, v9  # live: [v7, v6, v9, zero, v8]
// [Asm]   j .f54l4_3_0  # live: [v7, v6, v9, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v23], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v7, v6, zero, v9, v8], live_out: [zero, v23, v8, v7, v6, v9]
// [Asm] # block parameters: []
// [Asm] .f54l4_3_11:
// [Asm] # control
// [Asm]   mv v23, zero  # live: [v7, v8, v6, zero, v9, v23]
// [Asm] 
// [Asm] # block info: defs: [v24], uses: [v23], upward_exposed: [v23], params_defs: [v23]
// [Asm] # live_in: [zero, v23, v7, v8, v6, v9], live_out: [zero, v8, v7, v6, v24, v9]
// [Asm] # block parameters: [v23]
// [Asm] .f54l4_3_12:
// [Asm] # control
// [Asm]   mv v24, v23  # live: [v7, v6, v24, zero, v9, v8]
// [Asm]   j .f54l4_3_13  # live: [v7, v6, v24, zero, v9, v8]
// [Asm] 
// [Asm] # leaf false
// [Asm] insertion_sort30l2_4:
// [Asm] # block info: defs: [v2, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, v4, ft5, ft10, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v3, v5, a0, a2, v4, a1, v6, a3, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .insertion_sort30l2_4_0:
// [Asm]   # save_ctx1  # live: [a2, a1, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, v3]
// [Asm]   addi v5, v3, 1  # live: [v2, v4, v5, v3]
// [Asm]   # save_ctx2  # live: [v2, v4, v5, v3]
// [Asm]   mv a0, v5  # live: [v2, v4, a0, v3]
// [Asm]   mv a1, v2  # live: [v4, a1, a0, v3]
// [Asm]   mv a2, v3  # live: [a2, v4, a1, a0]
// [Asm]   mv a3, v4  # live: [a2, a1, a3, a0]
// [Asm]   call f54l4_3  # live: [a0]
// [Asm]   mv v6, a0  # live: [v6]
// [Asm]   # restore_ctx2  # live: [v6]
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] input243l8_12:
// [Asm] # block info: defs: [v3, v7, v4, v6, v5, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .input243l8_12_5:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm]   mv v6, v3  # live: [v4, v5, v6, zero]
// [Asm]   mv v7, v4  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v8], uses: [v8, v5, v7], upward_exposed: [v5, v7], params_defs: [v5, v6, v7]
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: [v5, v6, v7]
// [Asm] .input243l8_12_0:
// [Asm]   addi v8, v7, -1  # live: [v8, v5, v6, zero, v7]
// [Asm] # control
// [Asm]   blt v8, v5, .input243l8_12_2  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, v16, v13, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v11, v5, v16, a0, v13, v7, v6, v15], upward_exposed: [v5, v6, v7], params_defs: []
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .input243l8_12_1:
// [Asm]   # save_ctx2  # live: [v6, v5, zero, v7]
// [Asm]   call minimbt_read_int  # live: [v6, v5, zero, a0, v7]
// [Asm]   mv v11, a0  # live: [v11, v6, v5, zero, v7]
// [Asm]   # restore_ctx2  # live: [v11, v6, v5, zero, v7]
// [Asm]   slliw v15, v5, 2  # live: [v11, v6, v5, v15, zero, v7]
// [Asm]   add v16, v6, v15  # live: [v11, v6, v5, v16, zero, v7]
// [Asm]   sw v11, 0(v16)  # live: [v6, v5, zero, v7]
// [Asm]   addi v13, v5, 1  # live: [v6, zero, v13, v7]
// [Asm] # control
// [Asm]   mv v5, v13  # live: [v5, v6, zero, v7]
// [Asm]   mv v6, v6  # live: [v5, v6, zero, v7]
// [Asm]   mv v7, v7  # live: [v5, v6, zero, v7]
// [Asm]   j .input243l8_12_0  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .input243l8_12_2:
// [Asm] # control
// [Asm]   mv v10, zero  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .input243l8_12_3:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] sort233l6_11:
// [Asm] # block info: defs: [v2, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, a0, zero, a2, v4, a1, v3], upward_exposed: [a1, a0, zero], params_defs: []
// [Asm] # live_in: [a1, a0, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .sort233l6_11_0:
// [Asm]   # save_ctx1  # live: [a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, v3]
// [Asm]   mv a0, v2  # live: [a0, zero, v3]
// [Asm]   mv a1, zero  # live: [a1, a0, v3]
// [Asm]   mv a2, v3  # live: [a2, a1, a0]
// [Asm]   call quick_sort210l5_10  # live: [a0]
// [Asm]   mv v4, a0  # live: [v4]
// [Asm]   # restore_ctx2  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] sort_2157l5_7:
// [Asm] # block info: defs: [v2, v5, v22, v23, v20, v7, v8, v19, v4, v6, v3], uses: [v3, v5, a0, v22, v7, a2, a1, a3, v23, v20, v8, v19, v6, v2], upward_exposed: [a2, a1, a3, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a3, a0, zero], live_out: [v3, v4, v5, zero, v2]
// [Asm] # block parameters: []
// [Asm] .sort_2157l5_7_0:
// [Asm]   # save_ctx1  # live: [zero, a0, a2, a1, a3]
// [Asm]   mv v2, a0  # live: [zero, a2, a1, a3, v2]
// [Asm]   mv v3, a1  # live: [v3, zero, a2, a3, v2]
// [Asm]   mv v4, a2  # live: [v3, zero, v4, a3, v2]
// [Asm]   mv v5, a3  # live: [v3, v5, zero, v4, v2]
// [Asm]   slliw v22, v3, 2  # live: [v3, v5, zero, v22, v4, v2]
// [Asm]   add v23, v5, v22  # live: [v3, v5, zero, v23, v4, v2]
// [Asm]   lw v6, 0(v23)  # live: [v3, v5, zero, v4, v6, v2]
// [Asm]   slliw v19, v2, 2  # live: [v3, v5, zero, v19, v4, v6, v2]
// [Asm]   add v20, v5, v19  # live: [v3, v5, zero, v20, v4, v6, v2]
// [Asm]   lw v7, 0(v20)  # live: [v3, v5, zero, v7, v4, v6, v2]
// [Asm]   addi v8, v7, -1  # live: [v3, v5, zero, v8, v4, v6, v2]
// [Asm] # control
// [Asm]   blt v8, v6, .sort_2157l5_7_2  # live: [v2, v4, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v2, v11, v5, a0, zero, a2, v4, a1, v12, v3], upward_exposed: [v3, v4, v5, zero, v2], params_defs: []
// [Asm] # live_in: [v2, v4, v5, zero, v3], live_out: [v14]
// [Asm] # block parameters: []
// [Asm] .sort_2157l5_7_1:
// [Asm]   # save_ctx2  # live: [v2, v4, v5, zero, v3]
// [Asm]   mv a0, v5  # live: [v2, v4, zero, a0, v3]
// [Asm]   mv a1, v2  # live: [v4, a1, zero, a0, v3]
// [Asm]   mv a2, v3  # live: [v4, a2, a1, zero, a0]
// [Asm]   call swap1l0_0  # live: [v4, zero, a0]
// [Asm]   mv v10, a0  # live: [v4, zero]
// [Asm]   # restore_ctx2  # live: [v4, zero]
// [Asm]   lw v11, 0(v4)  # live: [v11, v4, zero]
// [Asm]   addi v12, v11, 1  # live: [v4, v12, zero]
// [Asm]   sw v12, 0(v4)  # live: [zero]
// [Asm] # control
// [Asm]   mv v14, zero  # live: [v14]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v14, a0], upward_exposed: [v14], params_defs: [v14]
// [Asm] # live_in: [v14], live_out: []
// [Asm] # block parameters: [v14]
// [Asm] .sort_2157l5_7_3:
// [Asm] # control
// [Asm]   mv a0, v14  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v14], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v14]
// [Asm] # block parameters: []
// [Asm] .sort_2157l5_7_2:
// [Asm] # control
// [Asm]   mv v14, zero  # live: [v14]
// [Asm]   j .sort_2157l5_7_3  # live: [v14]
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_28:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_28_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main239l7_13  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main239l7_13:
// [Asm] # block info: defs: [v2, t1, v7, ft0, ft1, a1, v12, s11, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v6, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v3, v11, a0, zero, v7, a2, a1, s11, v12, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main239l7_13_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   # save_ctx2  # live: [s11, zero]
// [Asm]   call minimbt_read_int  # live: [s11, zero, a0]
// [Asm]   mv v3, a0  # live: [s11, zero, v3]
// [Asm]   # restore_ctx2  # live: [s11, zero, v3]
// [Asm]   slliw v11, v3, 2  # live: [v11, s11, zero, v3]
// [Asm]   sub v12, s11, v11  # live: [v12, zero, v3]
// [Asm]   andi v2, v12, -8  # live: [v2, zero, v3]
// [Asm]   mv s11, v2  # live: [v2, zero, v3]
// [Asm]   mv a1, v3  # live: [v2, a1, zero, v3]
// [Asm]   mv a0, v2  # live: [v2, a1, zero, a0, v3]
// [Asm]   mv a2, zero  # live: [v2, a2, a1, zero, a0, v3]
// [Asm]   call memseti32  # live: [v2, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, v3]
// [Asm]   mv a0, zero  # live: [v2, zero, a0, v3]
// [Asm]   mv a1, v2  # live: [v2, a1, zero, a0, v3]
// [Asm]   mv a2, v3  # live: [v2, a2, a1, zero, a0, v3]
// [Asm]   call input243l8_12  # live: [v2, zero, a0, v3]
// [Asm]   mv v5, a0  # live: [v2, zero, v3]
// [Asm]   # restore_ctx2  # live: [v2, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, v3]
// [Asm]   mv a0, v2  # live: [v2, zero, a0, v3]
// [Asm]   mv a1, v3  # live: [v2, a1, zero, a0, v3]
// [Asm]   call sort233l6_11  # live: [v2, zero, a0, v3]
// [Asm]   mv v6, a0  # live: [v2, zero, v3]
// [Asm]   # restore_ctx2  # live: [v2, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, v3]
// [Asm]   mv a0, v2  # live: [a0, zero, v3]
// [Asm]   mv a1, zero  # live: [a1, a0, v3]
// [Asm]   mv a2, v3  # live: [a2, a1, a0]
// [Asm]   call output14l1_1  # live: [a0]
// [Asm]   mv v7, a0  # live: [v7]
// [Asm]   # restore_ctx2  # live: [v7]
// [Asm] # control
// [Asm]   mv a0, v7  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] swap1l0_0:
// [Asm] # block info: defs: [v3, v11, v16, v5, v14, v10, v13, a0, v17, v12, v9, v4, v6, v2], uses: [v2, v11, v16, v14, v5, v10, v13, a0, a2, v17, a1, v12, v9, zero, v4, v6, v3], upward_exposed: [a2, a1, a0, zero], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .swap1l0_0_0:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v3, a2, zero, v2]
// [Asm]   mv v4, a2  # live: [v3, v4, zero, v2]
// [Asm]   slliw v16, v3, 2  # live: [v3, v4, v16, zero, v2]
// [Asm]   add v17, v2, v16  # live: [v3, v4, v17, zero, v2]
// [Asm]   lw v5, 0(v17)  # live: [v3, v4, v5, zero, v2]
// [Asm]   slliw v13, v4, 2  # live: [v3, v4, v5, zero, v13, v2]
// [Asm]   add v14, v2, v13  # live: [v3, v4, v5, v14, zero, v2]
// [Asm]   lw v6, 0(v14)  # live: [v3, v4, v5, v6, zero, v2]
// [Asm]   slliw v11, v3, 2  # live: [v11, v4, v5, v6, zero, v2]
// [Asm]   add v12, v2, v11  # live: [v4, v5, v6, v12, zero, v2]
// [Asm]   sw v6, 0(v12)  # live: [v4, v5, zero, v2]
// [Asm]   slliw v9, v4, 2  # live: [v5, zero, v9, v2]
// [Asm]   add v10, v2, v9  # live: [v5, v10, zero]
// [Asm]   sw v5, 0(v10)  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_28  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("swap", Unit), args: [("arr", Array(Int)), ("i", Int), ("j", Int)], body: Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j"))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit)))}, LetRec({name: ("output", Unit), args: [("arr", Array(Int)), ("i", Int), ("len", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Var("arr"), Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("len")]))), Unit)}, LetRec({name: ("insertion_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: LetRec({name: ("g", Unit), args: [("j", Int)], body: If(LE(Prim(Int(1), Var("low"), Add, kind=Some(Int)), Var("j")), If(LE(Get(Var("arr"), Var("j")), Prim(Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))]), App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])), Unit), Unit)}, LetRec({name: ("f", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("j", Var({val: Some(Int)})), Var("i"), Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("f"), [Prim(Var("low"), Int(1), Add, kind=Some(Int))])))}, LetRec({name: ("partition", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("pivot_index", Int), ("low", Int), ("high", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("pivot_index"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Var("low")), Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))))))))}, LetRec({name: ("choose_pivot", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("use_median_of_medians", Var({val: Some(Int)})), Int(50), Let(("swaps", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))))))}, LetRec({name: ("quick_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))))}, LetRec({name: ("sort", Unit), args: [("x", Array(Int)), ("len", Int)], body: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), [])))))))))
// [Knf] build_knf: Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j"))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit)))
// [Knf] build_knf: Get(Var("arr"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j"))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit))
// [Knf] build_knf: Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j")))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("arr"), Var("j"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit)
// [Knf] build_knf: Put(Var("arr"), Var("j"), Var("tmp"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Var("tmp")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("output", Unit), args: [("arr", Array(Int)), ("i", Int), ("len", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Var("arr"), Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("len")]))), Unit)}, LetRec({name: ("insertion_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: LetRec({name: ("g", Unit), args: [("j", Int)], body: If(LE(Prim(Int(1), Var("low"), Add, kind=Some(Int)), Var("j")), If(LE(Get(Var("arr"), Var("j")), Prim(Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))]), App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])), Unit), Unit)}, LetRec({name: ("f", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("j", Var({val: Some(Int)})), Var("i"), Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("f"), [Prim(Var("low"), Int(1), Add, kind=Some(Int))])))}, LetRec({name: ("partition", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("pivot_index", Int), ("low", Int), ("high", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("pivot_index"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Var("low")), Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))))))))}, LetRec({name: ("choose_pivot", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("use_median_of_medians", Var({val: Some(Int)})), Int(50), Let(("swaps", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))))))}, LetRec({name: ("quick_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))))}, LetRec({name: ("sort", Unit), args: [("x", Array(Int)), ("len", Int)], body: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), []))))))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Var("arr"), Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("len")]))), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Var("arr"), Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("len")])))
// [Knf] build_knf: App(Var("print_int"), [Get(Var("arr"), Var("i"))])
// [Knf] build_knf: Get(Var("arr"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Var("arr"), Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("len")]))
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: App(Var("output"), [Var("arr"), Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("len")])
// [Knf] build_knf: Var("output")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("insertion_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: LetRec({name: ("g", Unit), args: [("j", Int)], body: If(LE(Prim(Int(1), Var("low"), Add, kind=Some(Int)), Var("j")), If(LE(Get(Var("arr"), Var("j")), Prim(Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))]), App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])), Unit), Unit)}, LetRec({name: ("f", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("j", Var({val: Some(Int)})), Var("i"), Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("f"), [Prim(Var("low"), Int(1), Add, kind=Some(Int))])))}, LetRec({name: ("partition", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("pivot_index", Int), ("low", Int), ("high", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("pivot_index"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Var("low")), Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))))))))}, LetRec({name: ("choose_pivot", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("use_median_of_medians", Var({val: Some(Int)})), Int(50), Let(("swaps", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))))))}, LetRec({name: ("quick_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))))}, LetRec({name: ("sort", Unit), args: [("x", Array(Int)), ("len", Int)], body: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), [])))))))
// [Knf] build_knf: LetRec({name: ("g", Unit), args: [("j", Int)], body: If(LE(Prim(Int(1), Var("low"), Add, kind=Some(Int)), Var("j")), If(LE(Get(Var("arr"), Var("j")), Prim(Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))]), App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])), Unit), Unit)}, LetRec({name: ("f", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("j", Var({val: Some(Int)})), Var("i"), Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("f"), [Prim(Var("low"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: If(LE(Prim(Int(1), Var("low"), Add, kind=Some(Int)), Var("j")), If(LE(Get(Var("arr"), Var("j")), Prim(Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))]), App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])), Unit), Unit)
// [Knf] build_knf: Prim(Int(1), Var("low"), Add, kind=Some(Int))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: If(LE(Get(Var("arr"), Var("j")), Prim(Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))]), App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])), Unit)
// [Knf] build_knf: Get(Var("arr"), Var("j"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("j"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))]), App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))]))
// [Knf] build_knf: App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("swap")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Var("j"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Prim(Var("j"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("f", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("j", Var({val: Some(Int)})), Var("i"), Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("f"), [Prim(Var("low"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("j", Var({val: Some(Int)})), Var("i"), Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("high"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("j", Var({val: Some(Int)})), Var("i"), Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("g"), [Var("j")])
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("f"), [Prim(Var("low"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Prim(Var("low"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("partition", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("pivot_index", Int), ("low", Int), ("high", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("pivot_index"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Var("low")), Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))))))))}, LetRec({name: ("choose_pivot", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("use_median_of_medians", Var({val: Some(Int)})), Int(50), Let(("swaps", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))))))}, LetRec({name: ("quick_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))))}, LetRec({name: ("sort", Unit), args: [("x", Array(Int)), ("len", Int)], body: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), []))))))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("pivot_index"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Var("low")), Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))))))))
// [Knf] build_knf: App(Var("swap"), [Var("arr"), Var("pivot_index"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("swap")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("pivot_index")
// [Knf] build_knf: Prim(Var("high"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Var("low")), Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))])))))))
// [Knf] build_knf: Get(Var("arr"), Prim(Var("high"), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("high"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Var("low")), Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))))))
// [Knf] build_knf: Array(Int(1), Var("low"))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))])))))
// [Knf] build_knf: Array(Int(1), Int(1))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))))
// [Knf] build_knf: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Var("high"), Int(2), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit)
// [Knf] build_knf: Get(Var("arr"), Var("j"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("pivot")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit))
// [Knf] build_knf: If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0))))
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))
// [Knf] build_knf: App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])
// [Knf] build_knf: Var("swap")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Put(Var("partitioned"), Int(0), Int(0))
// [Knf] build_knf: Var("partitioned")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)
// [Knf] build_knf: Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("j"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))])))
// [Knf] build_knf: App(Var("aux"), [Var("low")])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))
// [Knf] build_knf: App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("swap")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Var("high"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))])
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Eq(Get(Var("partitioned"), Int(0)), Int(1))
// [Knf] build_knf: Get(Var("partitioned"), Int(0))
// [Knf] build_knf: Var("partitioned")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("choose_pivot", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("use_median_of_medians", Var({val: Some(Int)})), Int(50), Let(("swaps", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))))))}, LetRec({name: ("quick_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))))}, LetRec({name: ("sort", Unit), args: [("x", Array(Int)), ("len", Int)], body: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), [])))))
// [Knf] build_knf: Let(("use_median_of_medians", Var({val: Some(Int)})), Int(50), Let(("swaps", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))))))
// [Knf] build_knf: Int(50)
// [Knf] build_knf: Let(("swaps", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))])))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))))
// [Knf] build_knf: Prim(Var("high"), Var("low"), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))])))
// [Knf] build_knf: Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int))
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int))
// [Knf] build_knf: Prim(Var("len"), Int(4), Div, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(4)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))
// [Knf] build_knf: If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit)
// [Knf] build_knf: Int(8)
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")]))))))
// [Knf] build_knf: Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int))
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int))
// [Knf] build_knf: Prim(Var("len"), Int(4), Div, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(4)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))
// [Knf] build_knf: Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int))
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int))
// [Knf] build_knf: Prim(Var("len"), Int(4), Div, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(4)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")]))))
// [Knf] build_knf: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)
// [Knf] build_knf: Get(Var("arr"), Var("b"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("arr"), Var("a"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int))))
// [Knf] build_knf: App(Var("swap"), [Var("arr"), Var("a"), Var("b")])
// [Knf] build_knf: Var("swap")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("swaps")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("swaps"), Int(0))
// [Knf] build_knf: Var("swaps")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))
// [Knf] build_knf: App(Var("sort_2"), [Var("a"), Var("b")])
// [Knf] build_knf: Var("sort_2")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")]))
// [Knf] build_knf: App(Var("sort_2"), [Var("b"), Var("c")])
// [Knf] build_knf: Var("sort_2")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: App(Var("sort_2"), [Var("a"), Var("b")])
// [Knf] build_knf: Var("sort_2")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")]))
// [Knf] build_knf: If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit)
// [Knf] build_knf: Var("use_median_of_medians")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("sort_3")
// [Knf] build_knf: Prim(Var("a"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Prim(Var("a"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("sort_3")
// [Knf] build_knf: Prim(Var("b"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Prim(Var("b"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("sort_3")
// [Knf] build_knf: Prim(Var("c"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Prim(Var("c"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("sort_3")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Unit
// [Knf] build_knf: Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))])
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Eq(Get(Var("swaps"), Int(0)), Int(0))
// [Knf] build_knf: Get(Var("swaps"), Int(0))
// [Knf] build_knf: Var("swaps")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("quick_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))))}, LetRec({name: ("sort", Unit), args: [("x", Array(Int)), ("len", Int)], body: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), []))))
// [Knf] build_knf: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))))
// [Knf] build_knf: Prim(Var("high"), Var("low"), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")])))))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(16)
// [Knf] build_knf: App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")])
// [Knf] build_knf: Var("insertion_sort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Var("high")
// [Knf] build_knf: LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))
// [Knf] build_knf: App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")])
// [Knf] build_knf: Var("choose_pivot")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Var("high")
// [Knf] build_knf: LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")])))
// [Knf] build_knf: App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")])
// [Knf] build_knf: Var("partition")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("pivot_index")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))
// [Knf] build_knf: App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")])
// [Knf] build_knf: Var("quick_sort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Var("pivot")
// [Knf] build_knf: App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")])
// [Knf] build_knf: Var("quick_sort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("pivot"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pivot")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("high")
// [Knf] build_knf: LetRec({name: ("sort", Unit), args: [("x", Array(Int)), ("len", Int)], body: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), [])))
// [Knf] build_knf: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])
// [Knf] build_knf: Var("quick_sort")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("len")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))
// [Knf] build_knf: App(Var("read_int"), [])
// [Knf] build_knf: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")])))))
// [Knf] build_knf: Array(Var("len"), Int(0))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("arr"), Var("i"), App(Var("read_int"), []))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("read_int"), [])
// [Knf] build_knf: App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("input")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")])))
// [Knf] build_knf: App(Var("input"), [Int(0)])
// [Knf] build_knf: Var("input")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))
// [Knf] build_knf: App(Var("sort"), [Var("arr"), Var("len")])
// [Knf] build_knf: Var("sort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("len")
// [Knf] build_knf: App(Var("output"), [Var("arr"), Int(0), Var("len")])
// [Knf] build_knf: Var("output")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("len")
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memseti32
// [Main]   .type memseti32, @function
// [Main] memseti32:
// [Main]   blez a1, .memseti32_b1
// [Main]   slli a1, a1, 2
// [Main]   add a1, a1, a0
// [Main] .memseti32_b0:
// [Main]   sw a2, 0(a0)
// [Main]   addi a0, a0, 4
// [Main]   bne a0, a1, .memseti32_b0
// [Main] .memseti32_b1:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl sort_3173l6_8
// [Main]   .type sort_3173l6_8, @function
// [Main] # leaf false
// [Main] sort_3173l6_8:
// [Main] .sort_3173l6_8_0:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   mv s2, a2
// [Main]   mv s3, a3
// [Main]   mv s4, a4
// [Main]   mv a0, s0
// [Main]   mv a1, s1
// [Main]   mv a2, s3
// [Main]   mv a3, s4
// [Main]   call sort_2157l5_7
// [Main]   mv a0, s1
// [Main]   mv a1, s2
// [Main]   mv a2, s3
// [Main]   mv a3, s4
// [Main]   call sort_2157l5_7
// [Main]   mv a0, s0
// [Main]   mv a1, s1
// [Main]   mv a2, s3
// [Main]   mv a3, s4
// [Main]   call sort_2157l5_7
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl output14l1_1
// [Main]   .type output14l1_1, @function
// [Main] # leaf false
// [Main] output14l1_1:
// [Main] .output14l1_1_5:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   mv s2, a2
// [Main] 
// [Main] .output14l1_1_0:
// [Main]   addi a0, s2, -1
// [Main]   blt a0, s1, .output14l1_1_2
// [Main] 
// [Main] .output14l1_1_1:
// [Main]   slliw a0, s1, 2
// [Main]   add a0, s0, a0
// [Main]   lw a0, 0(a0)
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   addi a0, s1, 1
// [Main]   mv s1, a0
// [Main]   j .output14l1_1_0
// [Main] 
// [Main] .output14l1_1_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .output14l1_1_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl quick_sort210l5_10
// [Main]   .type quick_sort210l5_10, @function
// [Main] # leaf false
// [Main] quick_sort210l5_10:
// [Main] .quick_sort210l5_10_5:
// [Main]   addi sp, sp, -64
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   sd s6, 56(sp)
// [Main]   mv s1, a0
// [Main]   mv s0, a1
// [Main]   mv s2, a2
// [Main] 
// [Main] .quick_sort210l5_10_0:
// [Main]   sub a0, s2, s0
// [Main]   li a1, 16
// [Main]   blt a1, a0, .quick_sort210l5_10_2
// [Main] 
// [Main] .quick_sort210l5_10_1:
// [Main]   mv a0, s1
// [Main]   mv a1, s0
// [Main]   mv a2, s2
// [Main]   call insertion_sort30l2_4
// [Main] 
// [Main] .quick_sort210l5_10_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   ld s6, 56(sp)
// [Main]   addi sp, sp, 64
// [Main]   ret
// [Main] 
// [Main] .quick_sort210l5_10_2:
// [Main] 
// [Main] .quick_sort210l5_10_39:
// [Main]   addi a0, s11, -4
// [Main]   andi s6, a0, -8
// [Main]   mv s11, s6
// [Main]   sw zero, 0(s6)
// [Main]   sub a0, s2, s0
// [Main]   li a1, 4
// [Main]   div a1, a0, a1
// [Main]   li a2, 2
// [Main]   mul a1, a1, a2
// [Main]   add s3, s0, a1
// [Main]   li a1, 8
// [Main]   blt a0, a1, .quick_sort210l5_10_41
// [Main] 
// [Main] .quick_sort210l5_10_40:
// [Main]   li a1, 4
// [Main]   div a1, a0, a1
// [Main]   li a2, 1
// [Main]   mul a1, a1, a2
// [Main]   add s5, s0, a1
// [Main]   li a1, 4
// [Main]   div a1, a0, a1
// [Main]   li a2, 3
// [Main]   mul a1, a1, a2
// [Main]   add s4, s0, a1
// [Main]   addi a0, a0, -1
// [Main]   li a1, 50
// [Main]   blt a0, a1, .quick_sort210l5_10_43
// [Main] 
// [Main] .quick_sort210l5_10_42:
// [Main]   addi a0, s5, -1
// [Main]   addi a2, s5, 1
// [Main]   mv a1, s5
// [Main]   mv a3, s6
// [Main]   mv a4, s1
// [Main]   call sort_3173l6_8
// [Main]   addi a0, s3, -1
// [Main]   addi a2, s3, 1
// [Main]   mv a1, s3
// [Main]   mv a3, s6
// [Main]   mv a4, s1
// [Main]   call sort_3173l6_8
// [Main]   addi a0, s4, -1
// [Main]   addi a2, s4, 1
// [Main]   mv a1, s4
// [Main]   mv a3, s6
// [Main]   mv a4, s1
// [Main]   call sort_3173l6_8
// [Main] 
// [Main] .quick_sort210l5_10_44:
// [Main]   mv a0, s5
// [Main]   mv a1, s3
// [Main]   mv a2, s4
// [Main]   mv a3, s6
// [Main]   mv a4, s1
// [Main]   call sort_3173l6_8
// [Main] 
// [Main] .quick_sort210l5_10_45:
// [Main]   lw a0, 0(s6)
// [Main]   bne a0, zero, .quick_sort210l5_10_47
// [Main] 
// [Main] .quick_sort210l5_10_46:
// [Main]   li a0, 1
// [Main] 
// [Main] .quick_sort210l5_10_48:
// [Main]   addi a1, s11, -8
// [Main]   andi a1, a1, -8
// [Main]   mv s11, a1
// [Main]   sw s3, 0(a1)
// [Main]   sw a0, 4(a1)
// [Main]   mv a0, a1
// [Main] 
// [Main] .quick_sort210l5_10_6:
// [Main]   lw a1, 0(a0)
// [Main] 
// [Main] .quick_sort210l5_10_11:
// [Main]   addi a2, s2, -1
// [Main]   mv a0, s1
// [Main]   call swap1l0_0
// [Main]   addi a0, s2, -1
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s1, a0
// [Main]   lw a0, 0(a0)
// [Main]   addi a1, s11, -4
// [Main]   andi s3, a1, -8
// [Main]   mv s11, s3
// [Main]   sw s0, 0(s3)
// [Main]   addi a1, s11, -4
// [Main]   andi s4, a1, -8
// [Main]   mv s11, s4
// [Main]   li a1, 1
// [Main]   sw a1, 0(s4)
// [Main] 
// [Main] .quick_sort210l5_10_36:
// [Main]   mv s6, s0
// [Main]   mv s5, a0
// [Main] 
// [Main] .quick_sort210l5_10_25:
// [Main]   addi a0, s2, -2
// [Main]   blt a0, s6, .quick_sort210l5_10_27
// [Main] 
// [Main] .quick_sort210l5_10_26:
// [Main]   slliw a0, s6, 2
// [Main]   add a0, s1, a0
// [Main]   lw a0, 0(a0)
// [Main]   addi a1, s5, -1
// [Main]   blt a1, a0, .quick_sort210l5_10_29
// [Main] 
// [Main] .quick_sort210l5_10_28:
// [Main]   lw a0, 0(s3)
// [Main]   beq a0, s6, .quick_sort210l5_10_30
// [Main] 
// [Main] .quick_sort210l5_10_31:
// [Main]   lw a1, 0(s3)
// [Main]   mv a0, s1
// [Main]   mv a2, s6
// [Main]   call swap1l0_0
// [Main]   sw zero, 0(s4)
// [Main]   mv a0, zero
// [Main] 
// [Main] .quick_sort210l5_10_32:
// [Main]   lw a0, 0(s3)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s3)
// [Main]   mv a0, zero
// [Main] 
// [Main] .quick_sort210l5_10_33:
// [Main]   addi a0, s6, 1
// [Main]   mv s6, a0
// [Main]   j .quick_sort210l5_10_25
// [Main] 
// [Main] .quick_sort210l5_10_41:
// [Main]   mv a0, zero
// [Main]   j .quick_sort210l5_10_45
// [Main] 
// [Main] .quick_sort210l5_10_43:
// [Main]   mv a0, zero
// [Main]   j .quick_sort210l5_10_44
// [Main] 
// [Main] .quick_sort210l5_10_47:
// [Main]   mv a0, zero
// [Main]   j .quick_sort210l5_10_48
// [Main] 
// [Main] .quick_sort210l5_10_27:
// [Main]   mv a0, zero
// [Main] 
// [Main] .quick_sort210l5_10_34:
// [Main] 
// [Main] .quick_sort210l5_10_15:
// [Main]   lw a1, 0(s3)
// [Main]   addi a2, s2, -1
// [Main]   mv a0, s1
// [Main]   call swap1l0_0
// [Main]   lw a0, 0(s3)
// [Main]   lw a1, 0(s4)
// [Main]   li a2, 1
// [Main]   bne a1, a2, .quick_sort210l5_10_13
// [Main] 
// [Main] .quick_sort210l5_10_12:
// [Main]   li a1, 1
// [Main] 
// [Main] .quick_sort210l5_10_14:
// [Main]   addi a2, s11, -8
// [Main]   andi a2, a2, -8
// [Main]   mv s11, a2
// [Main]   sw a0, 0(a2)
// [Main]   sw a1, 4(a2)
// [Main]   mv a0, a2
// [Main] 
// [Main] .quick_sort210l5_10_7:
// [Main]   lw s3, 0(a0)
// [Main]   mv a0, s1
// [Main]   mv a1, s0
// [Main]   mv a2, s3
// [Main]   call quick_sort210l5_10
// [Main]   addi a0, s3, 1
// [Main]   mv s0, a0
// [Main]   j .quick_sort210l5_10_0
// [Main] 
// [Main] .quick_sort210l5_10_13:
// [Main]   mv a1, zero
// [Main]   j .quick_sort210l5_10_14
// [Main] 
// [Main] .quick_sort210l5_10_29:
// [Main]   mv a0, zero
// [Main]   j .quick_sort210l5_10_33
// [Main] 
// [Main] .quick_sort210l5_10_30:
// [Main]   mv a0, zero
// [Main]   j .quick_sort210l5_10_32
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl f54l4_3
// [Main]   .type f54l4_3, @function
// [Main] # leaf false
// [Main] f54l4_3:
// [Main] .f54l4_3_5:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   mv s2, a2
// [Main]   mv s3, a3
// [Main] 
// [Main] .f54l4_3_0:
// [Main]   addi a0, s3, -1
// [Main]   blt a0, s0, .f54l4_3_2
// [Main] 
// [Main] .f54l4_3_1:
// [Main] 
// [Main] .f54l4_3_15:
// [Main]   mv s4, s0
// [Main] 
// [Main] .f54l4_3_7:
// [Main]   addi a0, s2, 1
// [Main]   blt s4, a0, .f54l4_3_9
// [Main] 
// [Main] .f54l4_3_8:
// [Main]   slliw a0, s4, 2
// [Main]   add a0, s1, a0
// [Main]   lw a0, 0(a0)
// [Main]   addi a1, s4, -1
// [Main]   slliw a1, a1, 2
// [Main]   add a1, s1, a1
// [Main]   lw a1, 0(a1)
// [Main]   addi a1, a1, -1
// [Main]   blt a1, a0, .f54l4_3_11
// [Main] 
// [Main] .f54l4_3_10:
// [Main]   addi a2, s4, -1
// [Main]   mv a0, s1
// [Main]   mv a1, s4
// [Main]   call swap1l0_0
// [Main]   addi a0, s4, -1
// [Main]   mv s4, a0
// [Main]   j .f54l4_3_7
// [Main] 
// [Main] .f54l4_3_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .f54l4_3_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main] .f54l4_3_9:
// [Main]   mv a0, zero
// [Main] 
// [Main] .f54l4_3_13:
// [Main] 
// [Main] .f54l4_3_6:
// [Main]   addi a0, s0, 1
// [Main]   mv s0, a0
// [Main]   j .f54l4_3_0
// [Main] 
// [Main] .f54l4_3_11:
// [Main]   mv a0, zero
// [Main] 
// [Main] .f54l4_3_12:
// [Main]   j .f54l4_3_13
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl insertion_sort30l2_4
// [Main]   .type insertion_sort30l2_4, @function
// [Main] # leaf false
// [Main] insertion_sort30l2_4:
// [Main] .insertion_sort30l2_4_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a3, a0
// [Main]   mv a4, a1
// [Main]   mv a5, a2
// [Main]   addi a0, a4, 1
// [Main]   mv a1, a3
// [Main]   mv a2, a4
// [Main]   mv a3, a5
// [Main]   call f54l4_3
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl input243l8_12
// [Main]   .type input243l8_12, @function
// [Main] # leaf false
// [Main] input243l8_12:
// [Main] .input243l8_12_5:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s1, a0
// [Main]   mv s0, a1
// [Main]   mv s2, a2
// [Main] 
// [Main] .input243l8_12_0:
// [Main]   addi a0, s2, -1
// [Main]   blt a0, s1, .input243l8_12_2
// [Main] 
// [Main] .input243l8_12_1:
// [Main]   call minimbt_read_int
// [Main]   slliw a1, s1, 2
// [Main]   add a1, s0, a1
// [Main]   sw a0, 0(a1)
// [Main]   addi a0, s1, 1
// [Main]   mv s1, a0
// [Main]   j .input243l8_12_0
// [Main] 
// [Main] .input243l8_12_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .input243l8_12_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl sort233l6_11
// [Main]   .type sort233l6_11, @function
// [Main] # leaf false
// [Main] sort233l6_11:
// [Main] .sort233l6_11_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a2, a1
// [Main]   mv a1, zero
// [Main]   call quick_sort210l5_10
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl sort_2157l5_7
// [Main]   .type sort_2157l5_7, @function
// [Main] # leaf false
// [Main] sort_2157l5_7:
// [Main] .sort_2157l5_7_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   mv a4, a0
// [Main]   mv a5, a1
// [Main]   mv s0, a2
// [Main]   mv a0, a3
// [Main]   slliw a1, a5, 2
// [Main]   add a1, a0, a1
// [Main]   lw a1, 0(a1)
// [Main]   slliw a2, a4, 2
// [Main]   add a2, a0, a2
// [Main]   lw a2, 0(a2)
// [Main]   addi a2, a2, -1
// [Main]   blt a2, a1, .sort_2157l5_7_2
// [Main] 
// [Main] .sort_2157l5_7_1:
// [Main]   mv a1, a4
// [Main]   mv a2, a5
// [Main]   call swap1l0_0
// [Main]   lw a0, 0(s0)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s0)
// [Main]   mv a0, zero
// [Main] 
// [Main] .sort_2157l5_7_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .sort_2157l5_7_2:
// [Main]   mv a0, zero
// [Main]   j .sort_2157l5_7_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_28
// [Main]   .type T$start_28, @function
// [Main] # leaf false
// [Main] T$start_28:
// [Main] .T$start_28_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main239l7_13
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main239l7_13
// [Main]   .type main239l7_13, @function
// [Main] # leaf false
// [Main] main239l7_13:
// [Main] .main239l7_13_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   call minimbt_read_int
// [Main]   mv s0, a0
// [Main]   slliw a0, s0, 2
// [Main]   sub a0, s11, a0
// [Main]   andi s1, a0, -8
// [Main]   mv s11, s1
// [Main]   mv a1, s0
// [Main]   mv a0, s1
// [Main]   mv a2, zero
// [Main]   call memseti32
// [Main]   mv a0, zero
// [Main]   mv a1, s1
// [Main]   mv a2, s0
// [Main]   call input243l8_12
// [Main]   mv a0, s1
// [Main]   mv a1, s0
// [Main]   call sort233l6_11
// [Main]   mv a0, s1
// [Main]   mv a1, zero
// [Main]   mv a2, s0
// [Main]   call output14l1_1
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl swap1l0_0
// [Main]   .type swap1l0_0, @function
// [Main] # leaf true
// [Main] swap1l0_0:
// [Main] .swap1l0_0_0:
// [Main]   slliw a3, a1, 2
// [Main]   add a3, a0, a3
// [Main]   lw a3, 0(a3)
// [Main]   slliw a4, a2, 2
// [Main]   add a4, a0, a4
// [Main]   lw a4, 0(a4)
// [Main]   slliw a1, a1, 2
// [Main]   add a1, a0, a1
// [Main]   sw a4, 0(a1)
// [Main]   slliw a1, a2, 2
// [Main]   add a0, a0, a1
// [Main]   sw a3, 0(a0)
// [Main]   mv a0, zero
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_28
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function input243l8_12
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_int", args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), offset=BlockParam(bref=b0, bpref=$b.0), width=@32), val=Insn(iref=%2))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%4), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f12, fpref=$f.0), FnParam(fref=f12, fpref=$f.1), FnParam(fref=f12, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function input243l8_12 to wasm
// [Wasm] Lowering function insertion_sort30l2_4
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f4, fpref=$f.1), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Call(ty=Unit, f=f3, args=[Insn(iref=%0), FnParam(fref=f4, fpref=$f.0), FnParam(fref=f4, fpref=$f.1), FnParam(fref=f4, fpref=$f.2)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Lowering control Return(args=[Insn(iref=%1)])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function insertion_sort30l2_4 to wasm
// [Wasm] Lowering function sort_3173l6_8
// [Wasm] Lowering insn Call(ty=Unit, f=f7, args=[FnParam(fref=f8, fpref=$f.0), FnParam(fref=f8, fpref=$f.1), FnParam(fref=f8, fpref=$f.3), FnParam(fref=f8, fpref=$f.4)])
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.4) -> $$f.4
// [Wasm] Lowering insn Call(ty=Unit, f=f7, args=[FnParam(fref=f8, fpref=$f.1), FnParam(fref=f8, fpref=$f.2), FnParam(fref=f8, fpref=$f.3), FnParam(fref=f8, fpref=$f.4)])
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.4) -> $$f.4
// [Wasm] Lowering insn Call(ty=Unit, f=f7, args=[FnParam(fref=f8, fpref=$f.0), FnParam(fref=f8, fpref=$f.1), FnParam(fref=f8, fpref=$f.3), FnParam(fref=f8, fpref=$f.4)])
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.4) -> $$f.4
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.4) -> $$f.4
// [Wasm] Lowered function sort_3173l6_8 to wasm
// [Wasm] Lowering function T$start_28
// [Wasm] Lowering insn Call(ty=Unit, f=f13, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start_28 to wasm
// [Wasm] Lowering function swap1l0_0
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f0, fpref=$f.0), offset=FnParam(fref=f0, fpref=$f.1), width=@32))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f0, fpref=$f.0), offset=FnParam(fref=f0, fpref=$f.2), width=@32))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f0, fpref=$f.0), offset=FnParam(fref=f0, fpref=$f.1), width=@32), val=Insn(iref=%1))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f0, fpref=$f.0), offset=FnParam(fref=f0, fpref=$f.2), width=@32), val=Insn(iref=%0))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function swap1l0_0 to wasm
// [Wasm] Lowering function main239l7_13
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_int", args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Mem(fref=f13, mref=m0) -> $f13.m0
// [Wasm] Lowering insn Call(ty=Unit, f=f12, args=[Int32(val=0), Mem(fref=f13, mref=m0), Insn(iref=%0)])
// [Wasm] Get Local name Mem(fref=f13, mref=m0) -> $f13.m0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Call(ty=Unit, f=f11, args=[Mem(fref=f13, mref=m0), Insn(iref=%0)])
// [Wasm] Get Local name Mem(fref=f13, mref=m0) -> $f13.m0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Call(ty=Unit, f=f1, args=[Mem(fref=f13, mref=m0), Int32(val=0), Insn(iref=%0)])
// [Wasm] Get Local name Mem(fref=f13, mref=m0) -> $f13.m0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%4)])
// [Wasm] Local Mem(fref=f13, mref=m0) -> $f13.m0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function main239l7_13 to wasm
// [Wasm] Lowering function output14l1_1
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), offset=BlockParam(bref=b0, bpref=$b.1), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%5), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f1, fpref=$f.0), FnParam(fref=f1, fpref=$f.1), FnParam(fref=f1, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function output14l1_1 to wasm
// [Wasm] Lowering function quick_sort210l5_10
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%2)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b25, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.0) -> $b25.$b.0
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering control Jump(target=b25, args=[Insn(iref=%38), BlockParam(bref=b25, bpref=$b.1), BlockParam(bref=b25, bpref=$b.2), BlockParam(bref=b25, bpref=$b.3), BlockParam(bref=b25, bpref=$b.4), BlockParam(bref=b25, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.0) -> $b25.$b.0
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.1) -> $b25.$b.1
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.1) -> $b25.$b.1
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.2) -> $b25.$b.2
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.2) -> $b25.$b.2
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.3) -> $b25.$b.3
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.3) -> $b25.$b.3
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.4) -> $b25.$b.4
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.4) -> $b25.$b.4
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.5) -> $b25.$b.5
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.5) -> $b25.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b25, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.1) -> $b25.$b.1
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%35), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b25, bpref=$b.1), index=0, width=@32), val=Insn(iref=%36))
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.1) -> $b25.$b.1
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering control Jump(target=b33, args=[Unit])
// [Wasm] Lowering control Jump(target=b32, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b25, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.1) -> $b25.$b.1
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[BlockParam(bref=b25, bpref=$b.2), Insn(iref=%32), BlockParam(bref=b25, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.2) -> $b25.$b.2
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.0) -> $b25.$b.0
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b25, bpref=$b.5), index=0, width=@32), val=Int32(val=0))
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.5) -> $b25.$b.5
// [Wasm] Lowering control Jump(target=b32, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b25, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.1) -> $b25.$b.1
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%30), BlockParam(bref=b25, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.0) -> $b25.$b.0
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering control Branch(cond=Insn(iref=%31), t=b30, t_args=[], f=b31, f_args=[])
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering control Jump(target=b33, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b25, bpref=$b.2), offset=BlockParam(bref=b25, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.2) -> $b25.$b.2
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.0) -> $b25.$b.0
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b25, bpref=$b.3), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.3) -> $b25.$b.3
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%27), Insn(iref=%28)])
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering control Branch(cond=Insn(iref=%29), t=b28, t_args=[], f=b29, f_args=[])
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b7, bpref=$b.0), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Load(ty=Bool, ma=Field(ty=Bool, val=BlockParam(bref=b7, bpref=$b.0), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Call(ty=Unit, f=f10, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%7)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%7), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%10), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Bool]), mref=m13, fills=[Field(index=0, val=Insn(iref=%21)), Field(index=1, val=BlockParam(bref=b14, bpref=$b.0))])
// [Wasm] Get Local name Mem(fref=f10, mref=m13) -> $f10.m13
// [Wasm] Get Local name Mem(fref=f10, mref=m13) -> $f10.m13
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name Mem(fref=f10, mref=m13) -> $f10.m13
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.0) -> $b14.$b.0
// [Wasm] Lowering control Jump(target=b7, args=[Mem(fref=f10, mref=m13)])
// [Wasm] Get Local name Mem(fref=f10, mref=m13) -> $f10.m13
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Lowering control Jump(target=b14, args=[Bool(val=true)])
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.0) -> $b14.$b.0
// [Wasm] Lowering control Jump(target=b14, args=[Bool(val=false)])
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.0) -> $b14.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f10, mref=m11), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f10, mref=m11) -> $f10.m11
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%18), Insn(iref=%19)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f10, mref=m11), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f10, mref=m11) -> $f10.m11
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f10, mref=m12), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f10, mref=m12) -> $f10.m12
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%22), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering control Branch(cond=Insn(iref=%23), t=b12, t_args=[], f=b13, f_args=[])
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering control Jump(target=b15, args=[BlockParam(bref=b34, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b34, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b25, bpref=$b.4), Int32(val=2)])
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.4) -> $b25.$b.4
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b25, bpref=$b.0), Insn(iref=%25)])
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.0) -> $b25.$b.0
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering control Branch(cond=Insn(iref=%26), t=b26, t_args=[], f=b27, f_args=[])
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering control Jump(target=b35, args=[BlockParam(bref=b0, bpref=$b.1), Mem(fref=f10, mref=m11), BlockParam(bref=b0, bpref=$b.0), Insn(iref=%14), BlockParam(bref=b0, bpref=$b.2), Mem(fref=f10, mref=m12)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.0) -> $b25.$b.0
// [Wasm] Get Local name Mem(fref=f10, mref=m11) -> $f10.m11
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.1) -> $b25.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.2) -> $b25.$b.2
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.3) -> $b25.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.4) -> $b25.$b.4
// [Wasm] Get Local name Mem(fref=f10, mref=m12) -> $f10.m12
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.5) -> $b25.$b.5
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%4), Insn(iref=%11)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), offset=Insn(iref=%13), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m11, fills=[Init(val=BlockParam(bref=b0, bpref=$b.1))])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Mem(fref=f10, mref=m11) -> $f10.m11
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m12, fills=[Init(val=Int32(val=1))])
// [Wasm] Get Local name Mem(fref=f10, mref=m12) -> $f10.m12
// [Wasm] Lowering control Jump(target=b36, args=[])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b6, bpref=$b.0), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Load(ty=Bool, ma=Field(ty=Bool, val=BlockParam(bref=b6, bpref=$b.0), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b11, args=[])
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Bool]), mref=m40, fills=[Field(index=0, val=Insn(iref=%43)), Field(index=1, val=BlockParam(bref=b48, bpref=$b.0))])
// [Wasm] Get Local name Mem(fref=f10, mref=m40) -> $f10.m40
// [Wasm] Get Local name Mem(fref=f10, mref=m40) -> $f10.m40
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Get Local name Mem(fref=f10, mref=m40) -> $f10.m40
// [Wasm] Get Local name BlockParam(bref=b48, bpref=$b.0) -> $b48.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[Mem(fref=f10, mref=m40)])
// [Wasm] Get Local name Mem(fref=f10, mref=m40) -> $f10.m40
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b48, args=[Bool(val=true)])
// [Wasm] Get Local name BlockParam(bref=b48, bpref=$b.0) -> $b48.$b.0
// [Wasm] Lowering control Jump(target=b48, args=[Bool(val=false)])
// [Wasm] Get Local name BlockParam(bref=b48, bpref=$b.0) -> $b48.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f10, mref=m39), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f10, mref=m39) -> $f10.m39
// [Wasm] Get Local name Insn(iref=%63) -> $%63
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%63), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%63) -> $%63
// [Wasm] Get Local name Insn(iref=%64) -> $%64
// [Wasm] Lowering control Branch(cond=Insn(iref=%64), t=b46, t_args=[], f=b47, f_args=[])
// [Wasm] Get Local name Insn(iref=%64) -> $%64
// [Wasm] Lowering insn Call(ty=Unit, f=f8, args=[Insn(iref=%47), Insn(iref=%43), Insn(iref=%50), Mem(fref=f10, mref=m39), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Get Local name Insn(iref=%50) -> $%50
// [Wasm] Get Local name Mem(fref=f10, mref=m39) -> $f10.m39
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering control Jump(target=b45, args=[Insn(iref=%62)])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%47), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Get Local name Insn(iref=%53) -> $%53
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%47), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Get Local name Insn(iref=%54) -> $%54
// [Wasm] Lowering insn Call(ty=Unit, f=f8, args=[Insn(iref=%53), Insn(iref=%47), Insn(iref=%54), Mem(fref=f10, mref=m39), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%53) -> $%53
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Get Local name Insn(iref=%54) -> $%54
// [Wasm] Get Local name Mem(fref=f10, mref=m39) -> $f10.m39
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%43), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Get Local name Insn(iref=%56) -> $%56
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%43), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Get Local name Insn(iref=%57) -> $%57
// [Wasm] Lowering insn Call(ty=Unit, f=f8, args=[Insn(iref=%56), Insn(iref=%43), Insn(iref=%57), Mem(fref=f10, mref=m39), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%56) -> $%56
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Get Local name Insn(iref=%57) -> $%57
// [Wasm] Get Local name Mem(fref=f10, mref=m39) -> $f10.m39
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%50), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%50) -> $%50
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%50), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%50) -> $%50
// [Wasm] Get Local name Insn(iref=%60) -> $%60
// [Wasm] Lowering insn Call(ty=Unit, f=f8, args=[Insn(iref=%59), Insn(iref=%50), Insn(iref=%60), Mem(fref=f10, mref=m39), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Get Local name Insn(iref=%50) -> $%50
// [Wasm] Get Local name Insn(iref=%60) -> $%60
// [Wasm] Get Local name Mem(fref=f10, mref=m39) -> $f10.m39
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering control Jump(target=b44, args=[Insn(iref=%61)])
// [Wasm] Lowering control Jump(target=b44, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Div, args=[Insn(iref=%40), Int32(val=4)])
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%45), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%46)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Lowering insn Op(ty=Int32, op=Div, args=[Insn(iref=%40), Int32(val=4)])
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%48), Int32(val=3)])
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%49)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Get Local name Insn(iref=%50) -> $%50
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%40), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=50), Insn(iref=%51)])
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Get Local name Insn(iref=%52) -> $%52
// [Wasm] Lowering control Branch(cond=Insn(iref=%52), t=b42, t_args=[], f=b43, f_args=[])
// [Wasm] Get Local name Insn(iref=%52) -> $%52
// [Wasm] Lowering control Jump(target=b45, args=[Unit])
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m39, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f10, mref=m39) -> $f10.m39
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Lowering insn Op(ty=Int32, op=Div, args=[Insn(iref=%40), Int32(val=4)])
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%41), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%42)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=8), Insn(iref=%40)])
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Get Local name Insn(iref=%44) -> $%44
// [Wasm] Lowering control Branch(cond=Insn(iref=%44), t=b40, t_args=[], f=b41, f_args=[])
// [Wasm] Get Local name Insn(iref=%44) -> $%44
// [Wasm] Lowering control Jump(target=b39, args=[])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%0), Int32(val=16)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f10, fpref=$f.0), FnParam(fref=f10, fpref=$f.1), FnParam(fref=f10, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f10, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f10, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f10, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f10, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f10, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f10, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%41) -> $%41
// [Wasm] Local Insn(iref=%63) -> $%63
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b25, bpref=$b.3) -> $b25.$b.3
// [Wasm] Local Insn(iref=%27) -> $%27
// [Wasm] Local Mem(fref=f10, mref=m40) -> $f10.m40
// [Wasm] Local Insn(iref=%25) -> $%25
// [Wasm] Local Insn(iref=%59) -> $%59
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local BlockParam(bref=b25, bpref=$b.0) -> $b25.$b.0
// [Wasm] Local Insn(iref=%56) -> $%56
// [Wasm] Local Insn(iref=%49) -> $%49
// [Wasm] Local Insn(iref=%42) -> $%42
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local Insn(iref=%31) -> $%31
// [Wasm] Local BlockParam(bref=b25, bpref=$b.1) -> $b25.$b.1
// [Wasm] Local Insn(iref=%64) -> $%64
// [Wasm] Local Insn(iref=%38) -> $%38
// [Wasm] Local Insn(iref=%53) -> $%53
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b25, bpref=$b.5) -> $b25.$b.5
// [Wasm] Local Mem(fref=f10, mref=m12) -> $f10.m12
// [Wasm] Local Insn(iref=%54) -> $%54
// [Wasm] Local Mem(fref=f10, mref=m11) -> $f10.m11
// [Wasm] Local Insn(iref=%60) -> $%60
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local BlockParam(bref=b48, bpref=$b.0) -> $b48.$b.0
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%48) -> $%48
// [Wasm] Local Insn(iref=%36) -> $%36
// [Wasm] Local BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Local Insn(iref=%50) -> $%50
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%51) -> $%51
// [Wasm] Local BlockParam(bref=b14, bpref=$b.0) -> $b14.$b.0
// [Wasm] Local Insn(iref=%52) -> $%52
// [Wasm] Local Mem(fref=f10, mref=m39) -> $f10.m39
// [Wasm] Local Insn(iref=%44) -> $%44
// [Wasm] Local Insn(iref=%32) -> $%32
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b25, bpref=$b.2) -> $b25.$b.2
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%57) -> $%57
// [Wasm] Local Insn(iref=%35) -> $%35
// [Wasm] Local Mem(fref=f10, mref=m13) -> $f10.m13
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local Insn(iref=%46) -> $%46
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local Insn(iref=%45) -> $%45
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%29) -> $%29
// [Wasm] Local Insn(iref=%47) -> $%47
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%43) -> $%43
// [Wasm] Local Insn(iref=%30) -> $%30
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local BlockParam(bref=b25, bpref=$b.4) -> $b25.$b.4
// [Wasm] Local Insn(iref=%40) -> $%40
// [Wasm] Lowered function quick_sort210l5_10 to wasm
// [Wasm] Lowering function sort233l6_11
// [Wasm] Lowering insn Call(ty=Unit, f=f10, args=[FnParam(fref=f11, fpref=$f.0), Int32(val=0), FnParam(fref=f11, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f11, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f11, fpref=$f.1) -> $$f.1
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name FnParam(fref=f11, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f11, fpref=$f.1) -> $$f.1
// [Wasm] Lowered function sort233l6_11 to wasm
// [Wasm] Lowering function f54l4_3
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b7, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[BlockParam(bref=b7, bpref=$b.1), BlockParam(bref=b7, bpref=$b.0), Insn(iref=%11)])
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b7, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering control Jump(target=b7, args=[Insn(iref=%13), BlockParam(bref=b7, bpref=$b.1), BlockParam(bref=b7, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.2) -> $b7.$b.2
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.2) -> $b7.$b.2
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%3), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b13, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b13, args=[BlockParam(bref=b12, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b12, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b7, bpref=$b.1), offset=BlockParam(bref=b7, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b7, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b7, bpref=$b.1), offset=Insn(iref=%7), width=@32))
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%8), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%6), Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Branch(cond=Insn(iref=%10), t=b10, t_args=[], f=b11, f_args=[])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Jump(target=b13, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Int32(val=1), BlockParam(bref=b7, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.2) -> $b7.$b.2
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%4), BlockParam(bref=b7, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Branch(cond=Insn(iref=%5), t=b8, t_args=[], f=b9, f_args=[])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b14, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.2) -> $b7.$b.2
// [Wasm] Lowering control Jump(target=b15, args=[])
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.3), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f3, fpref=$f.0), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.3) -> $$f.3
// [Wasm] Local BlockParam(bref=b7, bpref=$b.2) -> $b7.$b.2
// [Wasm] Local BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Local BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Lowered function f54l4_3 to wasm
// [Wasm] Lowering function sort_2157l5_7
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[FnParam(fref=f7, fpref=$f.3), FnParam(fref=f7, fpref=$f.0), FnParam(fref=f7, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.1) -> $$f.1
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f7, fpref=$f.2), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%5), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f7, fpref=$f.2), index=0, width=@32), val=Insn(iref=%6))
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f7, fpref=$f.3), offset=FnParam(fref=f7, fpref=$f.1), width=@32))
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f7, fpref=$f.3), offset=FnParam(fref=f7, fpref=$f.0), width=@32))
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%1), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%0), Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.3) -> $$f.3
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function sort_2157l5_7 to wasm
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %5: Call(ty=Unit, f=f12, args=[Insn(iref=%4), FnParam(fref=f12, fpref=$f.1), FnParam(fref=f12, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %6: Call(ty=Unit, f=f1, args=[FnParam(fref=f1, fpref=$f.0), Insn(iref=%5), FnParam(fref=f1, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %11: Call(ty=Unit, f=f10, args=[FnParam(fref=f10, fpref=$f.0), Insn(iref=%10), FnParam(fref=f10, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %14: Call(ty=Unit, f=f5, args=[Insn(iref=%13), FnParam(fref=f5, fpref=$f.1), FnParam(fref=f5, fpref=$f.2), FnParam(fref=f5, fpref=$f.3), FnParam(fref=f5, fpref=$f.4), FnParam(fref=f5, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %10: Call(ty=Unit, f=f2, args=[Insn(iref=%9), FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %4: Call(ty=Unit, f=f3, args=[Insn(iref=%3), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3)])
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f12: Once, f4: Once, f8: Multiple, f9: Once, f28: Once, f0: Multiple, f13: Once, f1: Once, f10: Multiple, f11: Once, f5: Once, f2: Once, f3: Once, f7: Multiple})
// [CoreOpt] post splitting: Insn(iref=%6) -> BlockParam(bref=b4, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%6) -> BlockParam(bref=b4, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%6) -> BlockParam(bref=b4, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%6) -> BlockParam(bref=b4, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%6) -> BlockParam(bref=b7, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%6) -> BlockParam(bref=b7, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%6) -> BlockParam(bref=b7, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%6) -> BlockParam(bref=b7, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%6) -> BlockParam(bref=b7, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%6) -> BlockParam(bref=b7, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] partition65l3_6 is inlining Call(ty=Unit, f=f5, args=[FnParam(fref=f6, fpref=$f.2), Mem(fref=f6, mref=m0), FnParam(fref=f6, fpref=$f.0), Insn(iref=%3), FnParam(fref=f6, fpref=$f.3), Mem(fref=f6, mref=m1)])
// [CoreOpt] shifted callee .fn aux86l4_5 #f5 : fn(int32, array[int32], array[int32], int32, int32, array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b25 {
// [CoreOpt]   .bb #b14 (int32, array[int32], array[int32], int32, int32, array[int32]) {
// [CoreOpt]     let %14: int32 = sub($b14.4, 2)
// [CoreOpt]     let %15: bool = le($b14.0, %14)
// [CoreOpt]     br %15 b15() b16()
// [CoreOpt]   }
// [CoreOpt]   .bb #b15 () {
// [CoreOpt]     let %16: int32 = load int32 offset($b14.2, $b14.0 * @32)
// [CoreOpt]     let %17: int32 = sub($b14.3, 1)
// [CoreOpt]     let %18: bool = le(%16, %17)
// [CoreOpt]     br %18 b17() b18()
// [CoreOpt]   }
// [CoreOpt]   .bb #b16 () {
// [CoreOpt]     jump b23(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b17 () {
// [CoreOpt]     let %19: int32 = load int32 field($b14.1, 0 * @32)
// [CoreOpt]     let %20: bool = eq(%19, $b14.0)
// [CoreOpt]     br %20 b19() b20()
// [CoreOpt]   }
// [CoreOpt]   .bb #b18 () {
// [CoreOpt]     jump b22(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b19 () {
// [CoreOpt]     jump b21(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b20 () {
// [CoreOpt]     let %21: int32 = load int32 field($b14.1, 0 * @32)
// [CoreOpt]     let %22: unit = call f0($b14.2, %21, $b14.0)
// [CoreOpt]     let _ = store int32 field($b14.5, 0 * @32) <- 0
// [CoreOpt]     jump b21(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b21 (unit) {
// [CoreOpt]     let %24: int32 = load int32 field($b14.1, 0 * @32)
// [CoreOpt]     let %25: int32 = add(%24, 1)
// [CoreOpt]     let _ = store int32 field($b14.1, 0 * @32) <- %25
// [CoreOpt]     jump b22(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b22 (unit) {
// [CoreOpt]     let %27: int32 = add($b14.0, 1)
// [CoreOpt]     jump b14(%27, $b14.1, $b14.2, $b14.3, $b14.4, $b14.5)
// [CoreOpt]   }
// [CoreOpt]   .bb #b23 (unit) {
// [CoreOpt]     return $b23.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b24 header #b14 {
// [CoreOpt]     .block #b20
// [CoreOpt]     .block #b18
// [CoreOpt]     .block #b22
// [CoreOpt]     .block #b23
// [CoreOpt]     .block #b15
// [CoreOpt]     .block #b19
// [CoreOpt]     .block #b16
// [CoreOpt]     .block #b17
// [CoreOpt]     .block #b21
// [CoreOpt]   }
// [CoreOpt]   .bb #b25 () {
// [CoreOpt]     jump b24($f0, $f1, $f2, $f3, $f4, $f5)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] quick_sort210l5_10 is inlining Call(ty=Tuple(fields=[Int32, Bool]), f=f6, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%4), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [CoreOpt] shifted callee .fn partition65l3_6 #f6 : fn(array[int32], int32, int32, int32) -> (int32, bool)
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b11 {
// [CoreOpt]   .bb #b11 () {
// [CoreOpt]     let %11: int32 = sub($f3, 1)
// [CoreOpt]     let %12: unit = call f0($f0, $f1, %11)
// [CoreOpt]     let %13: int32 = sub($f3, 1)
// [CoreOpt]     let %14: int32 = load int32 offset($f0, %13 * @32)
// [CoreOpt]     let _ = alloc <m11: array[int32] heap(1)> <- [..] = $f2
// [CoreOpt]     let _ = alloc <m12: array[int32] heap(1)> <- [..] = 1
// [CoreOpt]     jump b36()
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 () {
// [CoreOpt]     jump b14(true)
// [CoreOpt]   }
// [CoreOpt]   .bb #b13 () {
// [CoreOpt]     jump b14(false)
// [CoreOpt]   }
// [CoreOpt]   .bb #b14 (bool) {
// [CoreOpt]     let _ = alloc <m13: (int32, bool) heap(2)> <- [0] = %21, [1] = $b14.0
// [CoreOpt]     return f6.m13
// [CoreOpt]   }
// [CoreOpt]   .bb #b15 (unit) {
// [CoreOpt]     let %18: int32 = load int32 field(f6.m11, 0 * @32)
// [CoreOpt]     let %19: int32 = sub($f3, 1)
// [CoreOpt]     let %20: unit = call f0($f0, %18, %19)
// [CoreOpt]     let %21: int32 = load int32 field(f6.m11, 0 * @32)
// [CoreOpt]     let %22: int32 = load int32 field(f6.m12, 0 * @32)
// [CoreOpt]     let %23: bool = eq(%22, 1)
// [CoreOpt]     br %23 b12() b13()
// [CoreOpt]   }
// [CoreOpt]   .bb #b25 (int32, array[int32], array[int32], int32, int32, array[int32]) {
// [CoreOpt]     let %25: int32 = sub($b25.4, 2)
// [CoreOpt]     let %26: bool = le($b25.0, %25)
// [CoreOpt]     br %26 b26() b27()
// [CoreOpt]   }
// [CoreOpt]   .bb #b26 () {
// [CoreOpt]     let %27: int32 = load int32 offset($b25.2, $b25.0 * @32)
// [CoreOpt]     let %28: int32 = sub($b25.3, 1)
// [CoreOpt]     let %29: bool = le(%27, %28)
// [CoreOpt]     br %29 b28() b29()
// [CoreOpt]   }
// [CoreOpt]   .bb #b27 () {
// [CoreOpt]     jump b34(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b28 () {
// [CoreOpt]     let %30: int32 = load int32 field($b25.1, 0 * @32)
// [CoreOpt]     let %31: bool = eq(%30, $b25.0)
// [CoreOpt]     br %31 b30() b31()
// [CoreOpt]   }
// [CoreOpt]   .bb #b29 () {
// [CoreOpt]     jump b33(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b30 () {
// [CoreOpt]     jump b32(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b31 () {
// [CoreOpt]     let %32: int32 = load int32 field($b25.1, 0 * @32)
// [CoreOpt]     let %33: unit = call f0($b25.2, %32, $b25.0)
// [CoreOpt]     let _ = store int32 field($b25.5, 0 * @32) <- 0
// [CoreOpt]     jump b32(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b32 (unit) {
// [CoreOpt]     let %35: int32 = load int32 field($b25.1, 0 * @32)
// [CoreOpt]     let %36: int32 = add(%35, 1)
// [CoreOpt]     let _ = store int32 field($b25.1, 0 * @32) <- %36
// [CoreOpt]     jump b33(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b33 (unit) {
// [CoreOpt]     let %38: int32 = add($b25.0, 1)
// [CoreOpt]     jump b25(%38, $b25.1, $b25.2, $b25.3, $b25.4, $b25.5)
// [CoreOpt]   }
// [CoreOpt]   .bb #b34 (unit) {
// [CoreOpt]     jump b15($b34.0)
// [CoreOpt]   }
// [CoreOpt]   .loop #b35 header #b25 {
// [CoreOpt]     .block #b31
// [CoreOpt]     .block #b29
// [CoreOpt]     .block #b33
// [CoreOpt]     .block #b34
// [CoreOpt]     .block #b26
// [CoreOpt]     .block #b30
// [CoreOpt]     .block #b27
// [CoreOpt]     .block #b28
// [CoreOpt]     .block #b32
// [CoreOpt]   }
// [CoreOpt]   .bb #b36 () {
// [CoreOpt]     jump b35($f2, f6.m11, $f0, %14, $f3, f6.m12)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] quick_sort210l5_10 is inlining Call(ty=Tuple(fields=[Int32, Bool]), f=f9, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [CoreOpt] shifted callee .fn choose_pivot129l4_9 #f9 : fn(array[int32], int32, int32) -> (int32, bool)
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b39 {
// [CoreOpt]   .bb #b39 () {
// [CoreOpt]     let _ = alloc <m39: array[int32] heap(1)> <- [..] = 0
// [CoreOpt]     let %40: int32 = sub($f2, $f1)
// [CoreOpt]     let %41: int32 = div(%40, 4)
// [CoreOpt]     let %42: int32 = mul(%41, 2)
// [CoreOpt]     let %43: int32 = add($f1, %42)
// [CoreOpt]     let %44: bool = le(8, %40)
// [CoreOpt]     br %44 b40() b41()
// [CoreOpt]   }
// [CoreOpt]   .bb #b40 () {
// [CoreOpt]     let %45: int32 = div(%40, 4)
// [CoreOpt]     let %46: int32 = mul(%45, 1)
// [CoreOpt]     let %47: int32 = add($f1, %46)
// [CoreOpt]     let %48: int32 = div(%40, 4)
// [CoreOpt]     let %49: int32 = mul(%48, 3)
// [CoreOpt]     let %50: int32 = add($f1, %49)
// [CoreOpt]     let %51: int32 = sub(%40, 1)
// [CoreOpt]     let %52: bool = le(50, %51)
// [CoreOpt]     br %52 b42() b43()
// [CoreOpt]   }
// [CoreOpt]   .bb #b41 () {
// [CoreOpt]     jump b45(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b42 () {
// [CoreOpt]     let %53: int32 = sub(%47, 1)
// [CoreOpt]     let %54: int32 = add(%47, 1)
// [CoreOpt]     let %55: unit = call f8(%53, %47, %54, f9.m39, $f0)
// [CoreOpt]     let %56: int32 = sub(%43, 1)
// [CoreOpt]     let %57: int32 = add(%43, 1)
// [CoreOpt]     let %58: unit = call f8(%56, %43, %57, f9.m39, $f0)
// [CoreOpt]     let %59: int32 = sub(%50, 1)
// [CoreOpt]     let %60: int32 = add(%50, 1)
// [CoreOpt]     let %61: unit = call f8(%59, %50, %60, f9.m39, $f0)
// [CoreOpt]     jump b44(%61)
// [CoreOpt]   }
// [CoreOpt]   .bb #b43 () {
// [CoreOpt]     jump b44(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b44 (unit) {
// [CoreOpt]     let %62: unit = call f8(%47, %43, %50, f9.m39, $f0)
// [CoreOpt]     jump b45(%62)
// [CoreOpt]   }
// [CoreOpt]   .bb #b45 (unit) {
// [CoreOpt]     let %63: int32 = load int32 field(f9.m39, 0 * @32)
// [CoreOpt]     let %64: bool = eq(%63, 0)
// [CoreOpt]     br %64 b46() b47()
// [CoreOpt]   }
// [CoreOpt]   .bb #b46 () {
// [CoreOpt]     jump b48(true)
// [CoreOpt]   }
// [CoreOpt]   .bb #b47 () {
// [CoreOpt]     jump b48(false)
// [CoreOpt]   }
// [CoreOpt]   .bb #b48 (bool) {
// [CoreOpt]     let _ = alloc <m40: (int32, bool) heap(2)> <- [0] = %43, [1] = $b48.0
// [CoreOpt]     return f9.m40
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] f54l4_3 is inlining Call(ty=Unit, f=f2, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [CoreOpt] shifted callee .fn g37l3_2 #f2 : fn(int32, array[int32], int32) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b15 {
// [CoreOpt]   .bb #b7 (int32, array[int32], int32) {
// [CoreOpt]     let %4: int32 = add(1, $b7.2)
// [CoreOpt]     let %5: bool = le(%4, $b7.0)
// [CoreOpt]     br %5 b8() b9()
// [CoreOpt]   }
// [CoreOpt]   .bb #b8 () {
// [CoreOpt]     let %6: int32 = load int32 offset($b7.1, $b7.0 * @32)
// [CoreOpt]     let %7: int32 = sub($b7.0, 1)
// [CoreOpt]     let %8: int32 = load int32 offset($b7.1, %7 * @32)
// [CoreOpt]     let %9: int32 = sub(%8, 1)
// [CoreOpt]     let %10: bool = le(%6, %9)
// [CoreOpt]     br %10 b10() b11()
// [CoreOpt]   }
// [CoreOpt]   .bb #b9 () {
// [CoreOpt]     jump b13(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b10 () {
// [CoreOpt]     let %11: int32 = sub($b7.0, 1)
// [CoreOpt]     let %12: unit = call f0($b7.1, $b7.0, %11)
// [CoreOpt]     let %13: int32 = sub($b7.0, 1)
// [CoreOpt]     jump b7(%13, $b7.1, $b7.2)
// [CoreOpt]   }
// [CoreOpt]   .bb #b11 () {
// [CoreOpt]     jump b12(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 (unit) {
// [CoreOpt]     jump b13($b12.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b13 (unit) {
// [CoreOpt]     return $b13.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b14 header #b7 {
// [CoreOpt]     .block #b13
// [CoreOpt]     .block #b11
// [CoreOpt]     .block #b8
// [CoreOpt]     .block #b12
// [CoreOpt]     .block #b9
// [CoreOpt]     .block #b10
// [CoreOpt]   }
// [CoreOpt]   .bb #b15 () {
// [CoreOpt]     jump b14($f0, $f1, $f2)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f6
// [CoreOpt] Remove dead function: f9
// [CoreOpt] Remove dead function: f5
// [CoreOpt] Remove dead function: f2
