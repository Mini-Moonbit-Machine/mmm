// [Asm] LoweringOrder: [0, 2, 1, 8, 4, 3]
// [Asm] LoweringOrder: [[1, 2], [3], [8], [4], [3], []]
// [Asm] LoweringOrder: HashMap::of([(b4, 0), (b1, 0), (b8, 0), (b2, 1), (b3, 0), (b0, 0)])
// [Asm] LoweringOrder: [b0, b1, b8, b4, b3, b2]
// [Asm] LoweringOrder: HashMap::of([(b4, 3), (b1, 1), (b8, 2), (b2, 0), (b3, 4), (b0, 0)])
// [Asm] pre_assigned_registers: FnParam(fref=f4, fpref=$f.0) -> v2, BlockParam(bref=b3, bpref=$b.0) -> v22, FnParam(fref=f4, fpref=$f.3) -> v5, Insn(iref=%24) -> v6, Insn(iref=%9) -> v15, Insn(iref=%8) -> v13, Insn(iref=%10) -> v16, FnParam(fref=f4, fpref=$f.1) -> v3, Insn(iref=%5) -> v19, Insn(iref=%0) -> v7, Insn(iref=%3) -> v11, Insn(iref=%7) -> v21, Insn(iref=%23) -> v8, FnParam(fref=f4, fpref=$f.2) -> v4, Insn(iref=%2) -> v10, Insn(iref=%20) -> v14, Insn(iref=%1) -> v9, Insn(iref=%11) -> v17, Self(fref=f4) -> v0, Insn(iref=%21) -> v12, BlockParam(bref=b4, bpref=$b.0) -> v18, Insn(iref=%6) -> v20
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b4: []
// [Asm] critical color seq for b4: []
// [Asm] succs: [4]
// [Asm] critical edges for b8: []
// [Asm] critical color seq for b8: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=FnParam(fref=f4, fpref=$f.1), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=FnParam(fref=f4, fpref=$f.0), width=@32))
// [Asm] succs: [8]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: [3]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%0), Insn(iref=%2)])
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=FnParam(fref=f4, fpref=$f.0), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=FnParam(fref=f4, fpref=$f.1), width=@32))
// [Asm] defs: [v13]
// [Asm] live_set: [v2, v5, zero, v13, v4, v3]
// [Asm] defined: v13 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v2, v5, zero, v13, v4, v15, v3]
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v13, v3]
// [Asm] defs: []
// [Asm] live_set: [v4, zero]
// [Asm] defs: [v18]
// [Asm] live_set: [v4, v18, zero]
// [Asm] move: v18 <- zero
// [Asm] defined: v18 is X
// [Asm] skip edge 7 -> 3
// [Asm] defs: [v19]
// [Asm] live_set: [v19, v4, zero]
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v4, zero, v20]
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v22]
// [Asm] live_set: [v22]
// [Asm] move: v22 <- zero
// [Asm] defined: v22 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v22]
// [Asm] move: v22 <- zero
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v22]
// [Asm] defs: []
// [Asm] live_set: [zero, a0, a2, a1, a3]
// [Asm] defs: [v2]
// [Asm] live_set: [zero, a2, a1, a3, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, a2, a3, v3]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, zero, v4, a3, v3]
// [Asm] move: v4 <- a2
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, zero, v4, v3]
// [Asm] move: v5 <- a3
// [Asm] defined: v5 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, zero, v7, v4, v3]
// [Asm] defined: v7 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v2, v5, zero, v7, v4, v9, v3]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v2, v5, v10, zero, v7, v4, v3]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v4, v5, zero, v2]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v22
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("sort_2157.398") clobbered_x: @hashset.of([a2, a1, a3, a5, a0, a4])
// [Asm] Label("sort_2157.398") clobbered_f: @hashset.of([])
// [Asm] subst   th.lurw v13, v5, v2, 2 ->   th.lurw a1, a3, a0, 2
// [Asm] subst   th.lurw v15, v5, v3, 2 ->   th.lurw a5, a3, a4, 2
// [Asm] subst   th.surw v15, v5, v2, 2 ->   th.surw a5, a3, a0, 2
// [Asm] subst   th.surw v13, v5, v3, 2 ->   th.surw a1, a3, a4, 2
// [Asm] subst   mv v18, zero ->   mv a0, zero
// [Asm] subst   lw v19, 0(v4) ->   lw a0, 0(a2)
// [Asm] subst   addi v20, v19, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v20, 0(v4) ->   sw a0, 0(a2)
// [Asm] subst   mv v22, zero ->   mv a0, zero
// [Asm] subst   mv v22, zero ->   mv a0, zero
// [Asm] subst   j .sort_2157.398_3 ->   j .sort_2157.398_3
// [Asm] subst   mv v3, a1 ->   mv a4, a1
// [Asm] subst   th.lurw v7, v5, v3, 2 ->   th.lurw a1, a3, a4, 2
// [Asm] subst   th.lurw v9, v5, v2, 2 ->   th.lurw a5, a3, a0, 2
// [Asm] subst   addi v10, v9, -1 ->   addi a5, a5, -1
// [Asm] subst   blt v10, v7, .sort_2157.398_2 ->   blt a5, a1, .sort_2157.398_2
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [5, 0, 2, 3, 1]
// [Asm] LoweringOrder: [[4], [1, 2], [3], [], [0]]
// [Asm] LoweringOrder: HashMap::of([(b1, 0), (b5, 0), (b2, 1), (b3, 1), (b0, 0)])
// [Asm] LoweringOrder: [b5, b0, b1, b2, b3]
// [Asm] LoweringOrder: HashMap::of([(b1, 2), (b5, 0), (b2, 0), (b3, 1), (b0, 1)])
// [Asm] pre_assigned_registers: FnParam(fref=f8, fpref=$f.2) -> v4, Insn(iref=%3) -> v13, FnParam(fref=f8, fpref=$f.0) -> v2, FnParam(fref=f8, fpref=$f.1) -> v3, BlockParam(bref=b3, bpref=$b.0) -> v10, Insn(iref=%2) -> v11, Insn(iref=%1) -> v9, BlockParam(bref=b0, bpref=$b.0) -> v5, BlockParam(bref=b0, bpref=$b.1) -> v6, BlockParam(bref=b0, bpref=$b.2) -> v7, Self(fref=f8) -> v0, Insn(iref=%5) -> v12, Insn(iref=%0) -> v8, Insn(iref=%4) -> v14
// [Asm] succs: [0]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Asm] succs: [4]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move: v10 <- zero
// [Asm] defined: v10 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v6, v5, zero, v7]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v10
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, v5, zero, a0, v7]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v6, v5, zero, v7]
// [Asm] move: v11 <- a0
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v6, v5, zero, v7]
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] defs: [v14]
// [Asm] live_set: [v6, v14, zero, v7]
// [Asm] defined: v14 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move: v5 <- v14
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move: v6 <- v6
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move: v7 <- v7
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move: v4 <- a2
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move: v5 <- v2
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move: v6 <- v3
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move: v7 <- v4
// [Asm] defined: v7 is X
// [Asm] Label("input243.402") clobbered_x: @hashset.of([s2, a2, s0, a1, a0, s1])
// [Asm] Label("input243.402") clobbered_f: @hashset.of([])
// [Asm] subst   mv v10, zero ->   mv a0, zero
// [Asm] subst   addi v8, v7, -1 ->   addi a0, s0, -1
// [Asm] subst   blt v8, v5, .input243.402_2 ->   blt a0, s2, .input243.402_2
// [Asm] subst   ret ->   ret
// [Asm] subst   call minimbt_read_int ->   call minimbt_read_int
// [Asm] subst   th.surw v11, v6, v5, 2 ->   th.surw a0, s1, s2, 2
// [Asm] subst   addi v14, v5, 1 ->   addi a0, s2, 1
// [Asm] subst   mv v5, v14 ->   mv s2, a0
// [Asm] subst   j .input243.402_0 ->   j .input243.402_0
// [Asm] subst   mv v5, v2 ->   mv s2, a0
// [Asm] subst   mv v6, v3 ->   mv s1, a1
// [Asm] subst   mv v7, v4 ->   mv s0, a2
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v7, Insn(iref=%1) -> v4, Insn(iref=%3) -> v6, Mem(fref=f9, mref=m0) -> v2, Self(fref=f9) -> v0, Insn(iref=%0) -> v3, Insn(iref=%2) -> v5
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [s11, zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [s11, zero, v3]
// [Asm] move: v3 <- a0
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v3]
// [Asm] defs: [v11]
// [Asm] live_set: [v11, s11, zero, v3]
// [Asm] defined: v11 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v2, zero, v3]
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, zero, v3]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] defs: [a0]
// [Asm] live_set: [v2, zero, a0, v3]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] skip edge 5 -> 14
// [Asm] defs: [a1]
// [Asm] live_set: [v2, a1, zero, a0, v3]
// [Asm] move: a1 <- v2
// [Asm] defined: a1 is X
// [Asm] skip edge 6 -> 17
// [Asm] defs: [a2]
// [Asm] live_set: [v2, a2, a1, zero, a0, v3]
// [Asm] move: a2 <- v3
// [Asm] defined: a2 is X
// [Asm] skip edge 7 -> 15
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, zero, a0, v3]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move: v5 <- a0
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] defs: [a0]
// [Asm] live_set: [v2, zero, a0, v3]
// [Asm] move: a0 <- v2
// [Asm] defined: a0 is X
// [Asm] skip edge 5 -> 17
// [Asm] defs: [a1]
// [Asm] live_set: [v2, a1, zero, a0, v3]
// [Asm] move: a1 <- zero
// [Asm] defined: a1 is X
// [Asm] skip edge 6 -> 14
// [Asm] defs: [a2]
// [Asm] live_set: [v2, a2, a1, zero, a0, v3]
// [Asm] move: a2 <- v3
// [Asm] defined: a2 is X
// [Asm] skip edge 7 -> 15
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, zero, a0, v3]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move: v6 <- a0
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] defs: [a0]
// [Asm] live_set: [a0, zero, v3]
// [Asm] move: a0 <- v2
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0, v3]
// [Asm] move: a1 <- zero
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0]
// [Asm] move: a2 <- v3
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] move: v7 <- a0
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v7
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main239.401") clobbered_x: @hashset.of([s0, a0, s1])
// [Asm] Label("main239.401") clobbered_f: @hashset.of([])
// [Asm] subst   call minimbt_read_int ->   call minimbt_read_int
// [Asm] subst   mv v3, a0 ->   mv s0, a0
// [Asm] subst   slliw v11, v3, 2 ->   slliw a0, s0, 2
// [Asm] subst   sub v2, s11, v11 ->   sub s1, s11, a0
// [Asm] subst   andi s11, v2, -8 ->   andi s11, s1, -8
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v2 ->   mv a1, s1
// [Asm] subst   mv a2, v3 ->   mv a2, s0
// [Asm] subst   call input243.402 ->   call input243.402
// [Asm] subst   mv a0, v2 ->   mv a0, s1
// [Asm] subst   mv a1, zero ->   mv a1, zero
// [Asm] subst   mv a2, v3 ->   mv a2, s0
// [Asm] subst   call quick_sort210.395 ->   call quick_sort210.395
// [Asm] subst   mv a0, v2 ->   mv a0, s1
// [Asm] subst   mv a1, zero ->   mv a1, zero
// [Asm] subst   mv a2, v3 ->   mv a2, s0
// [Asm] subst   call output14.394 ->   call output14.394
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [5, 0, 2, 3, 1]
// [Asm] LoweringOrder: [[4], [1, 2], [3], [], [0]]
// [Asm] LoweringOrder: HashMap::of([(b1, 0), (b5, 0), (b2, 1), (b3, 1), (b0, 0)])
// [Asm] LoweringOrder: [b5, b0, b1, b2, b3]
// [Asm] LoweringOrder: HashMap::of([(b1, 2), (b5, 0), (b2, 0), (b3, 1), (b0, 1)])
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v13, FnParam(fref=f1, fpref=$f.1) -> v3, FnParam(fref=f1, fpref=$f.0) -> v2, FnParam(fref=f1, fpref=$f.2) -> v4, BlockParam(bref=b3, bpref=$b.0) -> v10, Insn(iref=%2) -> v12, Insn(iref=%1) -> v9, BlockParam(bref=b0, bpref=$b.0) -> v5, Self(fref=f1) -> v0, BlockParam(bref=b0, bpref=$b.1) -> v6, BlockParam(bref=b0, bpref=$b.2) -> v7, Insn(iref=%6) -> v11, Insn(iref=%5) -> v15, Insn(iref=%0) -> v8, Insn(iref=%4) -> v14
// [Asm] succs: [0]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b0, bpref=$b.1), width=@32))
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%0)])
// [Asm] succs: [4]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] defs: [v12]
// [Asm] live_set: [v5, v6, v12, zero, v7]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v12, zero, v7]
// [Asm] defs: [a0]
// [Asm] live_set: [v5, v6, zero, a0, v7]
// [Asm] move: a0 <- v12
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, v6, zero, a0, v7]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v13]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move: v13 <- a0
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, v6, zero, a0, v7]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v14]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move: v14 <- a0
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] defs: [v15]
// [Asm] live_set: [v5, v15, zero, v7]
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v15, zero, v7]
// [Asm] move: v5 <- v5
// [Asm] defs: [v6]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move: v6 <- v15
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move: v7 <- v7
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v10
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v5, v6, zero, v7]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move: v10 <- zero
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move: v4 <- a2
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move: v5 <- v2
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move: v6 <- v3
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move: v7 <- v4
// [Asm] defined: v7 is X
// [Asm] Label("output14.394") clobbered_x: @hashset.of([s2, a2, s0, a1, a0, s1])
// [Asm] Label("output14.394") clobbered_f: @hashset.of([])
// [Asm] subst   th.lurw v12, v5, v6, 2 ->   th.lurw a0, s0, s1, 2
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   addi v15, v6, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v6, v15 ->   mv s1, a0
// [Asm] subst   j .output14.394_0 ->   j .output14.394_0
// [Asm] subst   mv v5, v2 ->   mv s0, a0
// [Asm] subst   mv v6, v3 ->   mv s1, a1
// [Asm] subst   mv v7, v4 ->   mv s2, a2
// [Asm] subst   addi v8, v7, -1 ->   addi a0, s2, -1
// [Asm] subst   blt v8, v6, .output14.394_2 ->   blt a0, s1, .output14.394_2
// [Asm] subst   mv v10, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [17, 0, 2, 4, 3, 6, 5, 76, 21, 101, 22, 73, 7, 104, 8, 10, 9, 11, 79, 18, 94, 83, 85, 92, 19, 51, 20, 13, 12, 14, 84, 87, 86, 89, 97, 95, 88, 90, 91, 1, 60, 55, 57, 58, 15, 56, 70, 62, 64, 63, 66, 67, 68, 61, 65, 72, 71]
// [Asm] LoweringOrder: [[16], [1, 2], [3, 4], [8], [5, 6], [7], [76], [21], [101], [22], [73], [7], [104], [8], [9, 10], [11], [11], [79], [18], [94], [93], [84, 85], [92], [19], [51], [20], [12, 13], [14], [14], [0], [86, 87], [91], [88, 89], [97], [95], [90], [90], [91], [83], [60], [59], [56, 57], [58], [15], [], [70], [69], [63, 64], [68], [65, 66], [67], [68], [61], [55], [72], [71], [62]]
// [Asm] LoweringOrder: HashMap::of([(b9, 0), (b85, 3), (b60, 8), (b13, 10), (b87, 2), (b92, 3), (b15, 14), (b62, 8), (b65, 8), (b84, 0), (b1, 8), (b97, 0), (b2, 0), (b22, 0), (b90, 0), (b101, 0), (b6, 6), (b12, 3), (b58, 14), (b83, 0), (b89, 0), (b61, 11), (b64, 12), (b67, 11), (b10, 5), (b86, 0), (b5, 0), (b14, 3), (b8, 0), (b19, 3), (b57, 14), (b11, 0), (b18, 0), (b104, 0), (b88, 1), (b21, 0), (b79, 0), (b70, 8), (b20, 3), (b72, 8), (b4, 7), (b55, 8), (b17, 0), (b68, 11), (b71, 8), (b0, 0), (b94, 0), (b66, 11), (b76, 0), (b73, 0), (b95, 0), (b51, 3), (b56, 8), (b3, 0), (b7, 0), (b91, 0), (b63, 8)])
// [Asm] LoweringOrder: [b17, b0, b2, b3, b5, b76, b21, b101, b22, b73, b7, b104, b8, b9, b11, b79, b18, b94, b83, b84, b86, b89, b97, b95, b90, b91, b88, b87, b85, b92, b19, b51, b20, b12, b14, b10, b6, b4, b1, b60, b55, b56, b70, b62, b63, b65, b72, b71, b13, b66, b67, b68, b61, b64, b57, b58, b15]
// [Asm] LoweringOrder: HashMap::of([(b9, 13), (b85, 0), (b60, 1), (b13, 0), (b87, 0), (b92, 1), (b15, 2), (b62, 5), (b65, 7), (b84, 19), (b1, 0), (b97, 22), (b2, 2), (b22, 8), (b90, 24), (b101, 7), (b6, 0), (b12, 5), (b58, 1), (b83, 18), (b89, 21), (b61, 3), (b64, 0), (b67, 1), (b10, 0), (b86, 20), (b5, 4), (b14, 6), (b8, 12), (b19, 2), (b57, 0), (b11, 14), (b18, 16), (b104, 11), (b88, 0), (b21, 6), (b79, 15), (b70, 4), (b20, 4), (b72, 8), (b4, 0), (b55, 2), (b17, 0), (b68, 2), (b71, 9), (b0, 1), (b94, 17), (b66, 0), (b76, 5), (b73, 9), (b95, 23), (b51, 3), (b56, 3), (b3, 3), (b7, 10), (b91, 25), (b63, 6)])
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v25, Insn(iref=%82) -> v62, Insn(iref=%33) -> v56, Insn(iref=%76) -> v30, BlockParam(bref=b90, bpref=$b.0) -> v112, Insn(iref=%10) -> v21, BlockParam(bref=b18, bpref=$b.0) -> v63, Insn(iref=%59) -> v130, BlockParam(bref=b67, bpref=$b.0) -> v139, Insn(iref=%4) -> v15, Insn(iref=%65) -> v138, Insn(iref=%31) -> v54, Insn(iref=%116) -> v106, Insn(iref=%64) -> v137, BlockParam(bref=b19, bpref=$b.0) -> v78, BlockParam(bref=b22, bpref=$b.0) -> v39, Insn(iref=%16) -> v26, Insn(iref=%106) -> v48, Insn(iref=%78) -> v32, Insn(iref=%54) -> v86, Insn(iref=%60) -> v131, Insn(iref=%84) -> v76, BlockParam(bref=b62, bpref=$b.0) -> v127, Insn(iref=%101) -> v36, BlockParam(bref=b61, bpref=$b.0) -> v141, Insn(iref=%79) -> v58, Insn(iref=%55) -> v123, Insn(iref=%66) -> v143, Insn(iref=%48) -> v94, Insn(iref=%103) -> v38, BlockParam(bref=b83, bpref=$b.3) -> v72, Insn(iref=%138) -> v144, BlockParam(bref=b21, bpref=$b.0) -> v33, Mem(fref=f7, mref=m4) -> v5, BlockParam(bref=b20, bpref=$b.0) -> v87, Insn(iref=%36) -> v66, Mem(fref=f7, mref=m0) -> v9, Insn(iref=%89) -> v102, Insn(iref=%150) -> v135, Insn(iref=%90) -> v103, Insn(iref=%50) -> v96, Insn(iref=%14) -> v24, BlockParam(bref=b55, bpref=$b.1) -> v120, Insn(iref=%80) -> v60, BlockParam(bref=b58, bpref=$b.0) -> v125, BlockParam(bref=b68, bpref=$b.0) -> v140, Insn(iref=%11) -> v22, Insn(iref=%86) -> v99, Insn(iref=%104) -> v46, BlockParam(bref=b62, bpref=$b.1) -> v128, Insn(iref=%28) -> v50, Insn(iref=%97) -> v105, Insn(iref=%9) -> v20, BlockParam(bref=b62, bpref=$b.2) -> v129, BlockParam(bref=b83, bpref=$b.2) -> v71, BlockParam(bref=b55, bpref=$b.3) -> v122, Insn(iref=%45) -> v90, BlockParam(bref=b0, bpref=$b.2) -> v12, BlockParam(bref=b8, bpref=$b.0) -> v49, Insn(iref=%99) -> v108, Insn(iref=%70) -> v147, Insn(iref=%0) -> v13, Insn(iref=%61) -> v133, Insn(iref=%98) -> v107, Mem(fref=f7, mref=m3) -> v8, Insn(iref=%2) -> v118, Insn(iref=%148) -> v81, Insn(iref=%12) -> v23, Insn(iref=%41) -> v80, Insn(iref=%63) -> v136, Self(fref=f7) -> v0, Insn(iref=%8) -> v19, Insn(iref=%88) -> v101, Insn(iref=%25) -> v41, Insn(iref=%118) -> v65, Insn(iref=%95) -> v115, Insn(iref=%81) -> v61, Insn(iref=%96) -> v117, Insn(iref=%94) -> v114, Insn(iref=%56) -> v124, Insn(iref=%49) -> v95, BlockParam(bref=b95, bpref=$b.0) -> v110, FnParam(fref=f7, fpref=$f.2) -> v4, Mem(fref=f7, mref=m1) -> v6, Insn(iref=%68) -> v151, Insn(iref=%73) -> v42, Insn(iref=%92) -> v111, FnParam(fref=f7, fpref=$f.0) -> v2, Insn(iref=%93) -> v113, Insn(iref=%74) -> v43, Insn(iref=%83) -> v75, Insn(iref=%38) -> v68, Insn(iref=%75) -> v44, Insn(iref=%53) -> v85, BlockParam(bref=b0, bpref=$b.1) -> v11, Insn(iref=%5) -> v16, Insn(iref=%19) -> v29, Mem(fref=f7, mref=m2) -> v7, BlockParam(bref=b11, bpref=$b.0) -> v52, Insn(iref=%7) -> v18, Insn(iref=%71) -> v148, BlockParam(bref=b83, bpref=$b.0) -> v69, BlockParam(bref=b7, bpref=$b.0) -> v45, Insn(iref=%100) -> v109, BlockParam(bref=b15, bpref=$b.0) -> v126, BlockParam(bref=b83, bpref=$b.5) -> v74, Insn(iref=%77) -> v31, Insn(iref=%51) -> v82, BlockParam(bref=b14, bpref=$b.0) -> v91, Insn(iref=%52) -> v84, Insn(iref=%44) -> v89, Insn(iref=%32) -> v55, Insn(iref=%147) -> v83, Insn(iref=%128) -> v57, Insn(iref=%87) -> v100, Insn(iref=%58) -> v142, Insn(iref=%1) -> v14, BlockParam(bref=b91, bpref=$b.0) -> v116, Insn(iref=%117) -> v104, BlockParam(bref=b55, bpref=$b.2) -> v121, BlockParam(bref=b55, bpref=$b.0) -> v119, Insn(iref=%107) -> v97, Insn(iref=%6) -> v17, Insn(iref=%35) -> v64, Insn(iref=%62) -> v134, BlockParam(bref=b83, bpref=$b.4) -> v73, Insn(iref=%127) -> v59, FnParam(fref=f7, fpref=$f.1) -> v3, BlockParam(bref=b92, bpref=$b.0) -> v77, BlockParam(bref=b83, bpref=$b.1) -> v70, Insn(iref=%137) -> v146, Insn(iref=%46) -> v92, Insn(iref=%24) -> v40, Insn(iref=%37) -> v67, BlockParam(bref=b0, bpref=$b.0) -> v10, Insn(iref=%151) -> v132, Insn(iref=%29) -> v51, BlockParam(bref=b71, bpref=$b.0) -> v150, Insn(iref=%47) -> v93, Insn(iref=%102) -> v37, Insn(iref=%18) -> v28, Insn(iref=%22) -> v35, Insn(iref=%85) -> v98, Insn(iref=%17) -> v27, Insn(iref=%72) -> v149, Insn(iref=%43) -> v88, Insn(iref=%30) -> v53, Insn(iref=%21) -> v34, Insn(iref=%40) -> v79, Insn(iref=%69) -> v145, Insn(iref=%105) -> v47
// [Asm] succs: [62]
// [Asm] critical edges for b71: []
// [Asm] critical color seq for b71: []
// [Asm] succs: [71]
// [Asm] critical edges for b72: []
// [Asm] critical color seq for b72: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%66), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b62, bpref=$b.0), width=@32))
// [Asm] succs: [72]
// [Asm] critical edges for b65: []
// [Asm] critical color seq for b65: []
// [Asm] succs: [55]
// [Asm] critical edges for b61: []
// [Asm] critical color seq for b61: []
// [Asm] succs: [61]
// [Asm] critical edges for b68: []
// [Asm] critical color seq for b68: []
// [Asm] succs: [68]
// [Asm] critical edges for b67: []
// [Asm] critical color seq for b67: []
// [Asm] succs: [67]
// [Asm] critical edges for b66: []
// [Asm] critical color seq for b66: []
// [Asm] succs: [65, 66]
// [Asm] critical edges for b63: []
// [Asm] critical color seq for b63: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%61), Insn(iref=%64)])
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%62), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b62, bpref=$b.0), width=@32))
// [Asm] succs: [68]
// [Asm] critical edges for b64: []
// [Asm] critical color seq for b64: []
// [Asm] succs: [63, 64]
// [Asm] critical edges for b62: []
// [Asm] critical color seq for b62: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%59), BlockParam(bref=b62, bpref=$b.0)])
// [Asm] succs: [69]
// [Asm] critical edges for b70: []
// [Asm] critical color seq for b70: []
// [Asm] succs: [70]
// [Asm] critical edges for b56: []
// [Asm] critical color seq for b56: []
// [Asm] succs: []
// [Asm] critical edges for b15: []
// [Asm] critical color seq for b15: []
// [Asm] succs: [15]
// [Asm] critical edges for b58: []
// [Asm] critical color seq for b58: []
// [Asm] succs: [58]
// [Asm] critical edges for b57: []
// [Asm] critical color seq for b57: []
// [Asm] succs: [56, 57]
// [Asm] critical edges for b55: []
// [Asm] critical color seq for b55: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b55, bpref=$b.0), Insn(iref=%55)])
// [Asm] succs: [59]
// [Asm] critical edges for b60: []
// [Asm] critical color seq for b60: []
// [Asm] succs: [60]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: [83]
// [Asm] critical edges for b91: []
// [Asm] critical color seq for b91: []
// [Asm] succs: [91]
// [Asm] critical edges for b90: []
// [Asm] critical color seq for b90: []
// [Asm] succs: [90]
// [Asm] critical edges for b88: []
// [Asm] critical color seq for b88: []
// [Asm] succs: [90]
// [Asm] critical edges for b95: []
// [Asm] critical color seq for b95: []
// [Asm] succs: [95]
// [Asm] critical edges for b97: []
// [Asm] critical color seq for b97: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b83, bpref=$b.0), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%90), width=@32))
// [Asm] succs: [97]
// [Asm] critical edges for b89: []
// [Asm] critical color seq for b89: []
// [Asm] succs: [88, 89]
// [Asm] critical edges for b86: []
// [Asm] critical color seq for b86: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%88), BlockParam(bref=b83, bpref=$b.0)])
// [Asm] succs: [91]
// [Asm] critical edges for b87: []
// [Asm] critical color seq for b87: []
// [Asm] succs: [86, 87]
// [Asm] critical edges for b84: []
// [Asm] critical color seq for b84: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%85), Insn(iref=%86)])
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b83, bpref=$b.0), width=@32))
// [Asm] succs: [0]
// [Asm] critical edges for b14: []
// [Asm] critical color seq for b14: []
// [Asm] skipping Load(ty=Bool, ma=Field(ty=Bool, val=Mem(fref=f7, mref=m4), index=1, width=@(@32, @(@32, @32))))
// [Asm] succs: [14]
// [Asm] critical edges for b12: []
// [Asm] critical color seq for b12: []
// [Asm] succs: [14]
// [Asm] critical edges for b13: []
// [Asm] critical color seq for b13: []
// [Asm] succs: [12, 13]
// [Asm] critical edges for b20: []
// [Asm] critical color seq for b20: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%44), Int32(val=1)])
// [Asm] succs: [20]
// [Asm] critical edges for b51: []
// [Asm] critical color seq for b51: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%41), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%40), width=@32))
// [Asm] succs: [51]
// [Asm] critical edges for b19: []
// [Asm] critical color seq for b19: []
// [Asm] succs: [19]
// [Asm] critical edges for b92: []
// [Asm] critical color seq for b92: []
// [Asm] succs: [92]
// [Asm] critical edges for b85: []
// [Asm] critical color seq for b85: []
// [Asm] succs: [84, 85]
// [Asm] critical edges for b83: []
// [Asm] critical color seq for b83: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b83, bpref=$b.0), Insn(iref=%83)])
// [Asm] succs: [93]
// [Asm] critical edges for b94: []
// [Asm] critical color seq for b94: []
// [Asm] succs: [94]
// [Asm] critical edges for b18: []
// [Asm] critical color seq for b18: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%35), width=@32))
// [Asm] succs: [18]
// [Asm] critical edges for b79: []
// [Asm] critical color seq for b79: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%33), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%31), width=@32))
// [Asm] succs: [79]
// [Asm] critical edges for b11: []
// [Asm] critical color seq for b11: []
// [Asm] skipping Load(ty=Bool, ma=Field(ty=Bool, val=Mem(fref=f7, mref=m1), index=1, width=@(@32, @(@32, @32))))
// [Asm] succs: [11]
// [Asm] critical edges for b9: []
// [Asm] critical color seq for b9: []
// [Asm] succs: [11]
// [Asm] critical edges for b10: []
// [Asm] critical color seq for b10: []
// [Asm] succs: [9, 10]
// [Asm] critical edges for b8: []
// [Asm] critical color seq for b8: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%28), Int32(val=0)])
// [Asm] succs: [8]
// [Asm] critical edges for b104: []
// [Asm] critical color seq for b104: []
// [Asm] succs: [104]
// [Asm] critical edges for b7: []
// [Asm] critical color seq for b7: []
// [Asm] succs: [7]
// [Asm] critical edges for b73: []
// [Asm] critical color seq for b73: []
// [Asm] succs: [73]
// [Asm] critical edges for b22: []
// [Asm] critical color seq for b22: []
// [Asm] succs: [22]
// [Asm] critical edges for b101: []
// [Asm] critical color seq for b101: []
// [Asm] succs: [101]
// [Asm] critical edges for b21: []
// [Asm] critical color seq for b21: []
// [Asm] succs: [21]
// [Asm] critical edges for b76: []
// [Asm] critical color seq for b76: []
// [Asm] succs: [76]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] succs: [7]
// [Asm] critical edges for b6: []
// [Asm] critical color seq for b6: []
// [Asm] succs: [5, 6]
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=50), Insn(iref=%16)])
// [Asm] succs: [8]
// [Asm] critical edges for b4: []
// [Asm] critical color seq for b4: []
// [Asm] succs: [3, 4]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=8), Insn(iref=%5)])
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%0), Int32(val=16)])
// [Asm] succs: [16]
// [Asm] critical edges for b17: []
// [Asm] critical color seq for b17: []
// [Asm] defs: [v116]
// [Asm] live_set: [v116, v11, v71, v69, v10, v7, v12, s11, v73, v72, zero, v8, v70, v74]
// [Asm] move: v116 <- zero
// [Asm] defined: v116 is X
// [Asm] skip edge 1 -> 0
// [Asm] defs: []
// [Asm] live_set: [v116, v11, v71, v69, v10, v7, v12, s11, v73, v72, zero, v8, v70, v74]
// [Asm] defs: [v177]
// [Asm] live_set: [v11, v10, zero, v88, v177, s11, v12]
// [Asm] defined: v177 is X
// [Asm] defs: [v91]
// [Asm] live_set: [v11, v91, v10, zero, v88, s11, v12]
// [Asm] move: v91 <- v177
// [Asm] defined: v91 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v11, v10, zero, v19, v6, v12, v52]
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v10, zero, v19, v6, v12, s11, v52]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v6, v12, s11, v52]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v6, v12, s11]
// [Asm] defs: [v54]
// [Asm] live_set: [v11, v10, zero, v12, s11, v54]
// [Asm] defined: v54 is X
// [Asm] defs: [v56]
// [Asm] live_set: [v11, v10, v56, zero, v12, s11, v54]
// [Asm] defined: v56 is X
// [Asm] defs: [v103]
// [Asm] live_set: [v11, v69, v71, v10, v7, v12, s11, v73, v72, zero, v8, v103, v74, v70]
// [Asm] defined: v103 is X
// [Asm] defs: [v34]
// [Asm] live_set: [v25, v11, v10, zero, v23, v19, s11, v12, v34, v9]
// [Asm] defined: v34 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v25, v11, v10, zero, v23, v35, v19, s11, v12, v34, v9]
// [Asm] defined: v35 is X
// [Asm] defs: [v52]
// [Asm] live_set: [v11, v10, zero, v19, v52, s11, v12]
// [Asm] move: v52 <- zero
// [Asm] defined: v52 is X
// [Asm] skip edge 19 -> 0
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v19, v52, s11, v12]
// [Asm] defs: [v79]
// [Asm] live_set: [v11, v10, v79, zero, v7, v8, s11, v12]
// [Asm] defined: v79 is X
// [Asm] defs: [v80]
// [Asm] live_set: [v11, v10, v79, zero, v7, v8, v80, s11, v12]
// [Asm] defined: v80 is X
// [Asm] defs: [v101]
// [Asm] live_set: [v11, v69, v71, v10, v7, s11, v12, v73, v101, v72, zero, v8, v70, v74]
// [Asm] defined: v101 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v72, v69, v71, v10, zero, v7, v8, v70, v74, s11, v12, v73]
// [Asm] defs: [v49]
// [Asm] live_set: [v11, v49, v10, zero, v19, s11, v12, v9]
// [Asm] move: v49 <- zero
// [Asm] defined: v49 is X
// [Asm] skip edge 31 -> 0
// [Asm] defs: []
// [Asm] live_set: [v11, v49, v10, zero, v19, s11, v12, v9]
// [Asm] defs: [v88]
// [Asm] live_set: [v11, v10, zero, v8, v88, s11, v12]
// [Asm] defined: v88 is X
// [Asm] defs: [v89]
// [Asm] live_set: [v11, v10, zero, v88, s11, v12, v89]
// [Asm] defined: v89 is X
// [Asm] defs: [v178]
// [Asm] live_set: [v11, v10, zero, v178, v88, s11, v12, v89]
// [Asm] defined: v178 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v88, v10, s11, v12, zero]
// [Asm] defs: [v91]
// [Asm] live_set: [v11, v91, v10, zero, v88, s11, v12]
// [Asm] move: v91 <- zero
// [Asm] defined: v91 is X
// [Asm] skip edge 16 -> 0
// [Asm] defs: []
// [Asm] live_set: [v11, v91, v10, zero, v88, s11, v12]
// [Asm] defs: []
// [Asm] live_set: [v11, v71, v69, v10, v7, v12, s11, v73, v72, zero, v8, v70, v74]
// [Asm] defs: [v112]
// [Asm] live_set: [v11, v71, v69, v10, v7, v12, s11, v73, v112, v72, zero, v8, v70, v74]
// [Asm] move: v112 <- zero
// [Asm] defined: v112 is X
// [Asm] skip edge 34 -> 0
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v126
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, s11, zero, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, s11, zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, s11, zero, v3]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, s11, zero, v3]
// [Asm] move: v4 <- a2
// [Asm] defined: v4 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v4, v10, s11, zero, v3]
// [Asm] move: v10 <- v2
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v4, v10, s11, zero]
// [Asm] move: v11 <- v3
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v10, v12, s11, zero]
// [Asm] move: v12 <- v4
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v10, v41, v12, s11, v9, zero, v23, v19, v40]
// [Asm] defs: [a0]
// [Asm] live_set: [v25, v11, v10, a0, v41, v12, s11, v9, zero, v23, v19, v40]
// [Asm] move: a0 <- v40
// [Asm] defined: a0 is X
// [Asm] skip edge 36 -> 42
// [Asm] defs: [a1]
// [Asm] live_set: [v25, v11, v10, a0, v41, a1, v12, s11, v9, zero, v23, v19, v40]
// [Asm] move: a1 <- v25
// [Asm] defined: a1 is X
// [Asm] skip edge 39 -> 24
// [Asm] defs: [a2]
// [Asm] live_set: [v25, v11, v10, a0, v41, a2, a1, v12, s11, v9, zero, v23, v19, v40]
// [Asm] move: a2 <- v9
// [Asm] defined: a2 is X
// [Asm] skip edge 38 -> 26
// [Asm] defs: [a3]
// [Asm] live_set: [v25, v11, v10, a0, v41, a2, a1, v12, s11, a3, v9, zero, v23, v19, v40]
// [Asm] move: a3 <- v10
// [Asm] defined: a3 is X
// [Asm] skip edge 44 -> 5
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v25, v11, v10, a0, v41, s11, v12, v9, zero, v23, v19, v40]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v42]
// [Asm] live_set: [v25, v11, v10, v41, s11, v12, v9, zero, v23, v19, v40]
// [Asm] move: v42 <- a0
// [Asm] defined: v42 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v10, v41, s11, v12, v9, zero, v23, v19, v40]
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v10, v41, s11, v12, v9, zero, v23, v19, v40]
// [Asm] defs: [a0]
// [Asm] live_set: [v25, v11, v10, a0, v41, s11, v12, v9, zero, v23, v19, v40]
// [Asm] move: a0 <- v25
// [Asm] defined: a0 is X
// [Asm] skip edge 36 -> 24
// [Asm] defs: [a1]
// [Asm] live_set: [v25, v11, v10, a0, a1, s11, v12, v9, zero, v23, v19, v40]
// [Asm] move: a1 <- v41
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v25, v11, v10, a0, a2, a1, s11, v12, v9, zero, v23, v19, v40]
// [Asm] move: a2 <- v9
// [Asm] defined: a2 is X
// [Asm] skip edge 38 -> 26
// [Asm] defs: [a3]
// [Asm] live_set: [v25, v11, v10, a0, a2, a1, s11, v12, a3, v9, zero, v23, v19, v40]
// [Asm] move: a3 <- v10
// [Asm] defined: a3 is X
// [Asm] skip edge 44 -> 5
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v25, v11, v10, zero, a0, v23, v19, s11, v12, v9, v40]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v43]
// [Asm] live_set: [v25, v11, v10, zero, v23, v19, s11, v12, v9, v40]
// [Asm] move: v43 <- a0
// [Asm] defined: v43 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v10, zero, v23, v19, s11, v12, v9, v40]
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v10, zero, v23, v19, s11, v12, v9, v40]
// [Asm] defs: [a0]
// [Asm] live_set: [v25, v11, v10, zero, a0, v23, v19, s11, v12, v9]
// [Asm] move: a0 <- v40
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v25, v11, v10, zero, a0, v23, v19, a1, s11, v12, v9]
// [Asm] move: a1 <- v25
// [Asm] defined: a1 is X
// [Asm] skip edge 39 -> 24
// [Asm] defs: [a2]
// [Asm] live_set: [v25, v11, v10, zero, a0, v23, v19, a2, a1, s11, v12, v9]
// [Asm] move: a2 <- v9
// [Asm] defined: a2 is X
// [Asm] skip edge 38 -> 26
// [Asm] defs: [a3]
// [Asm] live_set: [v25, v11, v10, zero, a0, v23, v19, a2, a1, s11, v12, a3, v9]
// [Asm] move: a3 <- v10
// [Asm] defined: a3 is X
// [Asm] skip edge 44 -> 5
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v25, v11, v10, zero, a0, v23, v19, s11, v12, v9]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v44]
// [Asm] live_set: [v25, v11, v10, zero, v23, v19, s11, v12, v44, v9]
// [Asm] move: v44 <- a0
// [Asm] defined: v44 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v10, zero, v23, v19, s11, v12, v44, v9]
// [Asm] defs: [v45]
// [Asm] live_set: [v25, v11, v10, zero, v23, v45, v19, s11, v12, v9]
// [Asm] move: v45 <- v44
// [Asm] defined: v45 is X
// [Asm] defs: [v112]
// [Asm] live_set: [v11, v69, v71, v10, v7, v12, s11, v73, v112, v72, zero, v8, v70, v74]
// [Asm] move: v112 <- zero
// [Asm] defined: v112 is X
// [Asm] skip edge 34 -> 0
// [Asm] defs: []
// [Asm] live_set: [v11, v69, v71, v10, v7, v12, s11, v73, v112, v72, zero, v8, v70, v74]
// [Asm] defs: [v77]
// [Asm] live_set: [v11, v10, zero, v77, v7, v8, v12, s11]
// [Asm] move: v77 <- zero
// [Asm] defined: v77 is X
// [Asm] skip edge 58 -> 0
// [Asm] defs: [v22]
// [Asm] live_set: [v11, v16, v10, zero, v22, v19, s11, v12, v9]
// [Asm] defined: v22 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v11, v16, v10, zero, v23, v22, v19, s11, v12, v9]
// [Asm] defined: v23 is X
// [Asm] defs: [v219]
// [Asm] live_set: [v11, v16, v10, zero, v23, v22, v19, s11, v12, v9, v219]
// [Asm] defined: v219 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v11, v16, v10, zero, v23, v19, s11, v12, v24, v9]
// [Asm] defined: v24 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v11, v16, v10, zero, v23, v19, s11, v12, v9]
// [Asm] defined: v25 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v25, v11, v10, zero, v26, v23, v19, s11, v12, v9]
// [Asm] defined: v26 is X
// [Asm] defs: [v216]
// [Asm] live_set: [v25, v11, v10, zero, v26, v216, v23, v19, s11, v12, v9]
// [Asm] defined: v216 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v10, zero, v23, v19, s11, v12, v9]
// [Asm] defs: [v125]
// [Asm] live_set: [v125]
// [Asm] move: v125 <- zero
// [Asm] defined: v125 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v10, zero, v13, s11, v12]
// [Asm] defined: v13 is X
// [Asm] defs: [v229]
// [Asm] live_set: [v11, v10, v229, zero, v13, s11, v12]
// [Asm] defined: v229 is X
// [Asm] defs: []
// [Asm] live_set: [v11, s11, v12, v10, zero]
// [Asm] defs: [v28]
// [Asm] live_set: [v25, v11, v10, zero, v23, v19, s11, v12, v28, v9]
// [Asm] defined: v28 is X
// [Asm] defs: [v29]
// [Asm] live_set: [v25, v11, v10, v29, zero, v23, v19, s11, v12, v28, v9]
// [Asm] defined: v29 is X
// [Asm] defs: [v119]
// [Asm] live_set: [v11, v12, v10, zero, v119]
// [Asm] move: v119 <- v118
// [Asm] defined: v119 is X
// [Asm] defs: [v120]
// [Asm] live_set: [v11, v12, zero, v119, v120]
// [Asm] move: v120 <- v10
// [Asm] defined: v120 is X
// [Asm] defs: [v121]
// [Asm] live_set: [v121, v12, zero, v119, v120]
// [Asm] move: v121 <- v11
// [Asm] defined: v121 is X
// [Asm] defs: [v122]
// [Asm] live_set: [v122, v121, zero, v119, v120]
// [Asm] move: v122 <- v12
// [Asm] defined: v122 is X
// [Asm] defs: [v98]
// [Asm] live_set: [v11, v69, v71, v10, v7, s11, v12, v73, v98, v72, zero, v8, v70, v74]
// [Asm] defined: v98 is X
// [Asm] defs: [v99]
// [Asm] live_set: [v11, v69, v71, v10, v7, s11, v12, v73, v98, v72, v99, zero, v8, v70, v74]
// [Asm] defined: v99 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v72, v69, v71, v10, zero, v7, v8, v70, v74, s11, v12, v73]
// [Asm] defs: [v140]
// [Asm] live_set: [v122, v140, v121, zero, v120, v119]
// [Asm] move: v140 <- v139
// [Asm] defined: v140 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v10, s11, v12, v9, zero, v23, v35, v19, v34]
// [Asm] defs: [a0]
// [Asm] live_set: [v25, v11, v10, a0, s11, v12, v9, zero, v23, v35, v19, v34]
// [Asm] move: a0 <- v34
// [Asm] defined: a0 is X
// [Asm] skip edge 36 -> 23
// [Asm] defs: [a1]
// [Asm] live_set: [v25, v11, v10, a0, a1, s11, v12, v9, zero, v23, v35, v19, v34]
// [Asm] move: a1 <- v19
// [Asm] defined: a1 is X
// [Asm] skip edge 39 -> 18
// [Asm] defs: [a2]
// [Asm] live_set: [v25, v11, v10, a0, a2, a1, s11, v12, v9, zero, v23, v35, v19, v34]
// [Asm] move: a2 <- v9
// [Asm] defined: a2 is X
// [Asm] skip edge 38 -> 26
// [Asm] defs: [a3]
// [Asm] live_set: [v25, v11, v10, a0, a2, a1, s11, v12, a3, v9, zero, v23, v35, v19, v34]
// [Asm] move: a3 <- v10
// [Asm] defined: a3 is X
// [Asm] skip edge 44 -> 5
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v25, v11, v10, a0, s11, v12, v9, zero, v23, v35, v19, v34]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v36]
// [Asm] live_set: [v25, v11, v10, s11, v12, v9, zero, v23, v35, v19, v34]
// [Asm] move: v36 <- a0
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v10, s11, v12, v9, zero, v23, v35, v19, v34]
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v10, s11, v12, v9, zero, v23, v35, v19, v34]
// [Asm] defs: [a0]
// [Asm] live_set: [v25, v11, v10, a0, s11, v12, v9, zero, v23, v35, v19, v34]
// [Asm] move: a0 <- v19
// [Asm] defined: a0 is X
// [Asm] skip edge 36 -> 18
// [Asm] defs: [a1]
// [Asm] live_set: [v25, v11, v10, a0, a1, s11, v12, v9, zero, v23, v19, v34]
// [Asm] move: a1 <- v35
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v25, v11, v10, a0, a2, a1, s11, v12, v9, zero, v23, v19, v34]
// [Asm] move: a2 <- v9
// [Asm] defined: a2 is X
// [Asm] skip edge 38 -> 26
// [Asm] defs: [a3]
// [Asm] live_set: [v25, v11, v10, a0, a2, a1, s11, v12, a3, v9, zero, v23, v19, v34]
// [Asm] move: a3 <- v10
// [Asm] defined: a3 is X
// [Asm] skip edge 44 -> 5
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v25, v11, v10, zero, a0, v23, v19, s11, v12, v9, v34]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v37]
// [Asm] live_set: [v25, v11, v10, zero, v23, v19, s11, v12, v9, v34]
// [Asm] move: v37 <- a0
// [Asm] defined: v37 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v10, zero, v23, v19, s11, v12, v9, v34]
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v10, zero, v23, v19, s11, v12, v9, v34]
// [Asm] defs: [a0]
// [Asm] live_set: [v25, v11, v10, zero, a0, v23, v19, s11, v12, v9]
// [Asm] move: a0 <- v34
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v25, v11, v10, zero, a0, v23, v19, a1, s11, v12, v9]
// [Asm] move: a1 <- v19
// [Asm] defined: a1 is X
// [Asm] skip edge 39 -> 18
// [Asm] defs: [a2]
// [Asm] live_set: [v25, v11, v10, zero, a0, v23, v19, a2, a1, s11, v12, v9]
// [Asm] move: a2 <- v9
// [Asm] defined: a2 is X
// [Asm] skip edge 38 -> 26
// [Asm] defs: [a3]
// [Asm] live_set: [v25, v11, v10, zero, a0, v23, v19, a2, a1, s11, v12, a3, v9]
// [Asm] move: a3 <- v10
// [Asm] defined: a3 is X
// [Asm] skip edge 44 -> 5
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v25, v11, v10, zero, a0, v23, v19, s11, v12, v9]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v38]
// [Asm] live_set: [v25, v11, v10, zero, v23, v19, v38, s11, v12, v9]
// [Asm] move: v38 <- a0
// [Asm] defined: v38 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v10, zero, v23, v19, v38, s11, v12, v9]
// [Asm] defs: [v39]
// [Asm] live_set: [v25, v11, v10, zero, v23, v19, s11, v12, v9, v39]
// [Asm] move: v39 <- v38
// [Asm] defined: v39 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v11, v5, v91, v10, zero, v88, v12]
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v5, v91, v10, zero, v88, v12, s11]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v91, v10, zero, v12, s11]
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, zero, v12, s11]
// [Asm] defs: [v93]
// [Asm] live_set: [v11, v10, zero, v12, s11, v93]
// [Asm] defined: v93 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v12, s11, v93]
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v10, zero, a0, v12, s11, v93]
// [Asm] move: a0 <- v10
// [Asm] defined: a0 is X
// [Asm] skip edge 36 -> 5
// [Asm] defs: [a1]
// [Asm] live_set: [v10, zero, a0, a1, v12, s11, v93]
// [Asm] move: a1 <- v11
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v10, zero, a0, a2, a1, v12, s11, v93]
// [Asm] move: a2 <- v93
// [Asm] defined: a2 is X
// [Asm] skip edge 38 -> 84
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v93, v10, v12, s11, zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v95]
// [Asm] live_set: [v10, v12, s11, zero, v93]
// [Asm] move: v95 <- a0
// [Asm] defined: v95 is X
// [Asm] defs: []
// [Asm] live_set: [v10, v12, s11, zero, v93]
// [Asm] defs: [v96]
// [Asm] live_set: [v10, v12, s11, v96, zero]
// [Asm] defined: v96 is X
// [Asm] defs: []
// [Asm] live_set: [v10, v12, s11, v96, zero]
// [Asm] move: v10 <- v10
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v10, v12, s11, zero]
// [Asm] move: v11 <- v96
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v12, s11, zero]
// [Asm] move: v12 <- v12
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v12, s11, zero]
// [Asm] defs: [v133]
// [Asm] live_set: [v121, v127, zero, v120, v119, v133, v128, v129, v122]
// [Asm] defined: v133 is X
// [Asm] defs: [v134]
// [Asm] live_set: [v121, v127, zero, v120, v119, v133, v134, v128, v129, v122]
// [Asm] defined: v134 is X
// [Asm] defs: [v136]
// [Asm] live_set: [v121, v127, zero, v120, v119, v133, v136, v128, v129, v122]
// [Asm] defined: v136 is X
// [Asm] defs: [v137]
// [Asm] live_set: [v121, v127, zero, v120, v119, v133, v128, v129, v137, v122]
// [Asm] defined: v137 is X
// [Asm] defs: []
// [Asm] live_set: [v121, v127, zero, v120, v119, v128, v129, v122]
// [Asm] defs: [v123]
// [Asm] live_set: [v121, zero, v119, v123, v120, v122]
// [Asm] defined: v123 is X
// [Asm] defs: []
// [Asm] live_set: [v119, v121, zero, v120, v122]
// [Asm] defs: [v196]
// [Asm] live_set: [v11, v10, zero, v19, s11, v12, v196]
// [Asm] defined: v196 is X
// [Asm] defs: [v52]
// [Asm] live_set: [v11, v10, zero, v19, v52, s11, v12]
// [Asm] move: v52 <- v196
// [Asm] defined: v52 is X
// [Asm] defs: [v141]
// [Asm] live_set: [v122, v141, v121, zero, v119, v120]
// [Asm] move: v141 <- v140
// [Asm] defined: v141 is X
// [Asm] defs: [v126]
// [Asm] live_set: [v126]
// [Asm] move: v126 <- v125
// [Asm] defined: v126 is X
// [Asm] defs: [v127]
// [Asm] live_set: [v121, v127, zero, v120, v119, v122]
// [Asm] move: v127 <- v119
// [Asm] defined: v127 is X
// [Asm] skip edge 88 -> 71
// [Asm] defs: [v128]
// [Asm] live_set: [v121, v127, zero, v120, v119, v128, v122]
// [Asm] move: v128 <- v120
// [Asm] defined: v128 is X
// [Asm] skip edge 87 -> 72
// [Asm] defs: [v129]
// [Asm] live_set: [v121, v127, zero, v120, v119, v128, v129, v122]
// [Asm] move: v129 <- v121
// [Asm] defined: v129 is X
// [Asm] skip edge 90 -> 73
// [Asm] defs: [v139]
// [Asm] live_set: [v122, v121, v139, zero, v119, v120]
// [Asm] move: v139 <- zero
// [Asm] defined: v139 is X
// [Asm] skip edge 77 -> 0
// [Asm] defs: [v117]
// [Asm] live_set: [v11, v71, v10, v7, s11, v12, v73, v72, zero, v8, v70, v74, v117]
// [Asm] defined: v117 is X
// [Asm] defs: [v69]
// [Asm] live_set: [v11, v69, v71, v10, v7, s11, v12, v73, v72, zero, v8, v70, v74]
// [Asm] move: v69 <- v117
// [Asm] defined: v69 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v69, v71, v10, v7, s11, v12, v73, v72, zero, v8, v70, v74]
// [Asm] move: v70 <- v70
// [Asm] defs: []
// [Asm] live_set: [v11, v69, v71, v10, v7, s11, v12, v73, v72, zero, v8, v70, v74]
// [Asm] move: v71 <- v71
// [Asm] defs: []
// [Asm] live_set: [v11, v69, v71, v10, v7, s11, v12, v73, v72, zero, v8, v70, v74]
// [Asm] move: v72 <- v72
// [Asm] defs: []
// [Asm] live_set: [v11, v69, v71, v10, v7, s11, v12, v73, v72, zero, v8, v70, v74]
// [Asm] move: v73 <- v73
// [Asm] defs: []
// [Asm] live_set: [v11, v72, v69, v71, v10, zero, v7, v8, v70, v74, s11, v12, v73]
// [Asm] move: v74 <- v74
// [Asm] defs: []
// [Asm] live_set: [v11, v72, v69, v71, v10, zero, v7, v8, v70, v74, s11, v12, v73]
// [Asm] defs: [v40]
// [Asm] live_set: [v25, v11, v10, zero, v23, v19, s11, v12, v9, v40]
// [Asm] defined: v40 is X
// [Asm] defs: [v41]
// [Asm] live_set: [v25, v11, v10, zero, v23, v19, v41, s11, v12, v9, v40]
// [Asm] defined: v41 is X
// [Asm] defs: [v130]
// [Asm] live_set: [v121, v127, v130, zero, v119, v120, v128, v129, v122]
// [Asm] defined: v130 is X
// [Asm] defs: []
// [Asm] live_set: [v121, v127, zero, v120, v119, v128, v129, v122]
// [Asm] defs: [v105]
// [Asm] live_set: [v11, v69, v71, v10, v7, v12, s11, v73, v72, zero, v8, v105, v103, v74, v70]
// [Asm] defined: v105 is X
// [Asm] defs: [v107]
// [Asm] live_set: [v11, v69, v71, v10, v7, v107, v12, s11, v73, v72, zero, v8, v105, v103, v74, v70]
// [Asm] defined: v107 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v69, v71, v10, v7, v12, s11, v73, v72, zero, v8, v105, v74, v70]
// [Asm] defs: []
// [Asm] live_set: [v11, v69, v71, v10, v7, v12, s11, v73, v72, zero, v8, v74, v70]
// [Asm] defs: [v110]
// [Asm] live_set: [v11, v69, v71, v10, v110, v7, v12, s11, v73, v72, zero, v8, v74, v70]
// [Asm] move: v110 <- zero
// [Asm] defined: v110 is X
// [Asm] skip edge 101 -> 0
// [Asm] defs: [v50]
// [Asm] live_set: [v11, v10, zero, v50, v19, s11, v12]
// [Asm] defined: v50 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v19, v10, s11, v12, zero]
// [Asm] defs: [v58]
// [Asm] live_set: [v11, v58, v10, v56, zero, v12, s11, v54]
// [Asm] defined: v58 is X
// [Asm] defs: [v60]
// [Asm] live_set: [v11, v58, v10, v56, zero, v12, s11, v54, v60]
// [Asm] defined: v60 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v58, v10, v56, zero, v12, s11]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v12, s11, zero]
// [Asm] defs: [v63]
// [Asm] live_set: [v11, v63, v10, v12, s11, zero]
// [Asm] move: v63 <- zero
// [Asm] defined: v63 is X
// [Asm] skip edge 105 -> 0
// [Asm] defs: [v113]
// [Asm] live_set: [v11, v69, v71, v10, v7, v12, s11, v113, v73, v72, zero, v8, v70, v74]
// [Asm] defined: v113 is X
// [Asm] defs: [v114]
// [Asm] live_set: [v11, v69, v71, v10, v7, v114, v12, s11, v73, v72, zero, v8, v70, v74]
// [Asm] defined: v114 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v69, v71, v10, v7, v12, s11, v73, v72, zero, v8, v70, v74]
// [Asm] defs: [v116]
// [Asm] live_set: [v116, v11, v69, v71, v10, v7, v12, s11, v73, v72, zero, v8, v70, v74]
// [Asm] move: v116 <- zero
// [Asm] defined: v116 is X
// [Asm] skip edge 1 -> 0
// [Asm] defs: [v75]
// [Asm] live_set: [v11, v69, v71, v10, v7, s11, v12, v73, v72, v75, zero, v8, v70, v74]
// [Asm] defined: v75 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v72, v69, v71, v10, zero, v7, v8, v70, v74, s11, v12, v73]
// [Asm] defs: [v9]
// [Asm] live_set: [v11, v10, zero, v12, v9]
// [Asm] defined: v9 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v10, zero, s11, v12, v9]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, s11, v12, v9]
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v16, v10, zero, s11, v12, v9]
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v11, v16, v10, zero, v17, s11, v12, v9]
// [Asm] defined: v17 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v11, v16, v10, v18, zero, s11, v12, v9]
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v11, v16, v10, zero, v19, s11, v12, v9]
// [Asm] defined: v19 is X
// [Asm] defs: [v223]
// [Asm] live_set: [v11, v16, v10, zero, v223, v19, s11, v12, v9]
// [Asm] defined: v223 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v10, zero, v19, s11, v12, v9]
// [Asm] defs: [v142]
// [Asm] live_set: [v121, v142, zero, v122, v120]
// [Asm] defined: v142 is X
// [Asm] defs: [v119]
// [Asm] live_set: [v120, v121, zero, v122, v119]
// [Asm] move: v119 <- v142
// [Asm] defined: v119 is X
// [Asm] defs: []
// [Asm] live_set: [v120, v121, zero, v122, v119]
// [Asm] move: v120 <- v120
// [Asm] defs: []
// [Asm] live_set: [v120, v121, zero, v122, v119]
// [Asm] move: v121 <- v121
// [Asm] defs: []
// [Asm] live_set: [v120, v121, zero, v122, v119]
// [Asm] move: v122 <- v122
// [Asm] defs: []
// [Asm] live_set: [v120, v121, zero, v122, v119]
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v10, s11, v12, v28, v9, zero, v29, v23, v19]
// [Asm] defs: [a0]
// [Asm] live_set: [v25, v11, v10, a0, s11, v12, v28, v9, zero, v29, v23, v19]
// [Asm] move: a0 <- v28
// [Asm] defined: a0 is X
// [Asm] skip edge 36 -> 68
// [Asm] defs: [a1]
// [Asm] live_set: [v25, v11, v10, a0, a1, s11, v12, v28, v9, zero, v29, v23, v19]
// [Asm] move: a1 <- v23
// [Asm] defined: a1 is X
// [Asm] skip edge 39 -> 25
// [Asm] defs: [a2]
// [Asm] live_set: [v25, v11, v10, a0, a2, a1, s11, v12, v28, v9, zero, v29, v23, v19]
// [Asm] move: a2 <- v9
// [Asm] defined: a2 is X
// [Asm] skip edge 38 -> 26
// [Asm] defs: [a3]
// [Asm] live_set: [v25, v11, v10, a0, a2, a1, s11, v12, a3, v28, v9, zero, v29, v23, v19]
// [Asm] move: a3 <- v10
// [Asm] defined: a3 is X
// [Asm] skip edge 44 -> 5
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v25, v11, v10, a0, s11, v12, v28, v9, zero, v29, v23, v19]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v30]
// [Asm] live_set: [v25, v11, v10, s11, v12, v28, v9, zero, v29, v23, v19]
// [Asm] move: v30 <- a0
// [Asm] defined: v30 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v10, s11, v12, v28, v9, zero, v29, v23, v19]
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v10, s11, v12, v28, v9, zero, v29, v23, v19]
// [Asm] defs: [a0]
// [Asm] live_set: [v25, v11, v10, a0, s11, v12, v28, v9, zero, v29, v23, v19]
// [Asm] move: a0 <- v23
// [Asm] defined: a0 is X
// [Asm] skip edge 36 -> 25
// [Asm] defs: [a1]
// [Asm] live_set: [v25, v11, v10, a0, a1, s11, v12, v28, v9, zero, v23, v19]
// [Asm] move: a1 <- v29
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v25, v11, v10, a0, a2, a1, s11, v12, v28, v9, zero, v23, v19]
// [Asm] move: a2 <- v9
// [Asm] defined: a2 is X
// [Asm] skip edge 38 -> 26
// [Asm] defs: [a3]
// [Asm] live_set: [v25, v11, v10, a0, a2, a1, s11, v12, a3, v28, v9, zero, v23, v19]
// [Asm] move: a3 <- v10
// [Asm] defined: a3 is X
// [Asm] skip edge 44 -> 5
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v25, v11, v10, zero, a0, v23, v19, s11, v12, v28, v9]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v31]
// [Asm] live_set: [v25, v11, v10, zero, v23, v19, s11, v12, v28, v9]
// [Asm] move: v31 <- a0
// [Asm] defined: v31 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v10, zero, v23, v19, s11, v12, v28, v9]
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v10, zero, v23, v19, s11, v12, v28, v9]
// [Asm] defs: [a0]
// [Asm] live_set: [v25, v11, v10, zero, a0, v23, v19, s11, v12, v9]
// [Asm] move: a0 <- v28
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v25, v11, v10, zero, a0, v23, v19, a1, s11, v12, v9]
// [Asm] move: a1 <- v23
// [Asm] defined: a1 is X
// [Asm] skip edge 39 -> 25
// [Asm] defs: [a2]
// [Asm] live_set: [v25, v11, v10, zero, a0, v23, v19, a2, a1, s11, v12, v9]
// [Asm] move: a2 <- v9
// [Asm] defined: a2 is X
// [Asm] skip edge 38 -> 26
// [Asm] defs: [a3]
// [Asm] live_set: [v25, v11, v10, zero, a0, v23, v19, a2, a1, s11, v12, a3, v9]
// [Asm] move: a3 <- v10
// [Asm] defined: a3 is X
// [Asm] skip edge 44 -> 5
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v25, v11, v10, zero, a0, v23, v19, s11, v12, v9]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v32]
// [Asm] live_set: [v25, v11, v10, zero, v23, v19, v32, s11, v12, v9]
// [Asm] move: v32 <- a0
// [Asm] defined: v32 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v10, zero, v23, v19, v32, s11, v12, v9]
// [Asm] defs: [v33]
// [Asm] live_set: [v25, v11, v10, zero, v23, v19, s11, v12, v33, v9]
// [Asm] move: v33 <- v32
// [Asm] defined: v33 is X
// [Asm] defs: [v82]
// [Asm] live_set: [v11, v82, v10, zero, v79, v7, v8, v80, s11, v12]
// [Asm] defined: v82 is X
// [Asm] defs: [v84]
// [Asm] live_set: [v11, v82, v10, zero, v79, v7, v8, v84, v80, s11, v12]
// [Asm] defined: v84 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v82, v10, zero, v7, v8, v80, s11, v12]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v7, v8, s11, v12]
// [Asm] defs: [v87]
// [Asm] live_set: [v11, v87, v10, zero, v7, v8, s11, v12]
// [Asm] move: v87 <- zero
// [Asm] defined: v87 is X
// [Asm] skip edge 119 -> 0
// [Asm] defs: [v64]
// [Asm] live_set: [v11, v10, zero, v12, s11, v64]
// [Asm] defined: v64 is X
// [Asm] defs: [v66]
// [Asm] live_set: [v11, v66, v10, zero, v12, s11]
// [Asm] defined: v66 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v11, v66, v10, zero, v7, v12]
// [Asm] defined: v7 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v66, v10, zero, v7, v12, s11]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v66, v10, zero, v7, v12, s11]
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v66, v10, zero, v7, v8, v12]
// [Asm] defined: v8 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v66, v10, zero, v7, v8, v12, s11]
// [Asm] defined: s11 is X
// [Asm] defs: [v187]
// [Asm] live_set: [v11, v66, v10, zero, v7, v8, v12, s11, v187]
// [Asm] defined: v187 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v66, v10, zero, v7, v8, v12, s11]
// [Asm] defs: []
// [Asm] live_set: [v11, v25, v10, zero, v23, v19, s11, v12, v9]
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v25, v10, zero, a0, v23, v19, s11, v12, v9]
// [Asm] move: a0 <- v23
// [Asm] defined: a0 is X
// [Asm] skip edge 36 -> 25
// [Asm] defs: [a1]
// [Asm] live_set: [v11, v25, v10, zero, a0, v23, v19, a1, s11, v12, v9]
// [Asm] move: a1 <- v19
// [Asm] defined: a1 is X
// [Asm] skip edge 39 -> 18
// [Asm] defs: [a2]
// [Asm] live_set: [v11, v25, v10, zero, a0, v23, v19, a2, a1, s11, v12, v9]
// [Asm] move: a2 <- v9
// [Asm] defined: a2 is X
// [Asm] skip edge 38 -> 26
// [Asm] defs: [a3]
// [Asm] live_set: [v11, v25, v10, zero, a0, v23, v19, a2, a1, s11, v12, a3, v9]
// [Asm] move: a3 <- v10
// [Asm] defined: a3 is X
// [Asm] skip edge 44 -> 5
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v25, v10, zero, a0, v23, v19, s11, v12, v9]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v46]
// [Asm] live_set: [v11, v25, v10, zero, v23, v19, s11, v12, v9]
// [Asm] move: v46 <- a0
// [Asm] defined: v46 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v25, v10, zero, v23, v19, s11, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v25, v10, zero, v23, v19, s11, v12, v9]
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v25, v10, zero, a0, v23, v19, s11, v12, v9]
// [Asm] move: a0 <- v19
// [Asm] defined: a0 is X
// [Asm] skip edge 36 -> 18
// [Asm] defs: [a1]
// [Asm] live_set: [v11, v10, zero, a0, v23, v19, a1, s11, v12, v9]
// [Asm] move: a1 <- v25
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v11, v10, zero, a0, v23, v19, a2, a1, s11, v12, v9]
// [Asm] move: a2 <- v9
// [Asm] defined: a2 is X
// [Asm] skip edge 38 -> 26
// [Asm] defs: [a3]
// [Asm] live_set: [v11, v10, zero, a0, v23, v19, a2, a1, s11, v12, a3, v9]
// [Asm] move: a3 <- v10
// [Asm] defined: a3 is X
// [Asm] skip edge 44 -> 5
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, zero, a0, v23, v19, s11, v12, v9]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v47]
// [Asm] live_set: [v11, v10, zero, v23, v19, s11, v12, v9]
// [Asm] move: v47 <- a0
// [Asm] defined: v47 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v23, v19, s11, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v23, v19, s11, v12, v9]
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v10, zero, a0, v19, s11, v12, v9]
// [Asm] move: a0 <- v23
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v11, v10, zero, a0, v19, a1, s11, v12, v9]
// [Asm] move: a1 <- v19
// [Asm] defined: a1 is X
// [Asm] skip edge 39 -> 18
// [Asm] defs: [a2]
// [Asm] live_set: [v11, v10, zero, a0, v19, a2, a1, s11, v12, v9]
// [Asm] move: a2 <- v9
// [Asm] defined: a2 is X
// [Asm] skip edge 38 -> 26
// [Asm] defs: [a3]
// [Asm] live_set: [v11, v10, zero, a0, v19, a2, a1, s11, v12, a3, v9]
// [Asm] move: a3 <- v10
// [Asm] defined: a3 is X
// [Asm] skip edge 44 -> 5
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, zero, a0, v19, s11, v12, v9]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v48]
// [Asm] live_set: [v11, v10, v48, zero, v19, s11, v12, v9]
// [Asm] move: v48 <- a0
// [Asm] defined: v48 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v48, zero, v19, s11, v12, v9]
// [Asm] defs: [v49]
// [Asm] live_set: [v11, v49, v10, zero, v19, s11, v12, v9]
// [Asm] move: v49 <- v48
// [Asm] defined: v49 is X
// [Asm] defs: [v151]
// [Asm] live_set: [v121, zero, v120, v119, v151, v128, v129, v122]
// [Asm] defined: v151 is X
// [Asm] defs: [v127]
// [Asm] live_set: [v121, v127, zero, v120, v119, v128, v129, v122]
// [Asm] move: v127 <- v151
// [Asm] defined: v127 is X
// [Asm] defs: []
// [Asm] live_set: [v121, v127, zero, v120, v119, v128, v129, v122]
// [Asm] move: v128 <- v128
// [Asm] defs: []
// [Asm] live_set: [v121, v127, zero, v120, v119, v128, v129, v122]
// [Asm] move: v129 <- v129
// [Asm] defs: []
// [Asm] live_set: [v121, v127, zero, v120, v119, v128, v129, v122]
// [Asm] defs: [v45]
// [Asm] live_set: [v25, v11, v10, zero, v23, v45, v19, s11, v12, v9]
// [Asm] move: v45 <- zero
// [Asm] defined: v45 is X
// [Asm] skip edge 57 -> 0
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v10, zero, v23, v45, v19, s11, v12, v9]
// [Asm] defs: [v78]
// [Asm] live_set: [v11, v10, zero, v78, v7, v8, v12, s11]
// [Asm] move: v78 <- v77
// [Asm] defined: v78 is X
// [Asm] defs: [v69]
// [Asm] live_set: [v11, v66, v69, v10, zero, v7, v8, s11, v12]
// [Asm] move: v69 <- v11
// [Asm] defined: v69 is X
// [Asm] skip edge 4 -> 2
// [Asm] defs: [v70]
// [Asm] live_set: [v11, v66, v69, v10, zero, v7, v8, v70, s11, v12]
// [Asm] move: v70 <- v7
// [Asm] defined: v70 is X
// [Asm] skip edge 12 -> 6
// [Asm] defs: [v71]
// [Asm] live_set: [v11, v69, v71, v10, zero, v7, v8, v70, s11, v12]
// [Asm] move: v71 <- v66
// [Asm] defined: v71 is X
// [Asm] defs: [v72]
// [Asm] live_set: [v11, v72, v69, v71, v10, zero, v7, v8, v70, s11, v12]
// [Asm] move: v72 <- v10
// [Asm] defined: v72 is X
// [Asm] skip edge 10 -> 5
// [Asm] defs: [v73]
// [Asm] live_set: [v11, v72, v69, v71, v10, zero, v7, v8, v70, s11, v12, v73]
// [Asm] move: v73 <- v12
// [Asm] defined: v73 is X
// [Asm] skip edge 9 -> 7
// [Asm] defs: [v74]
// [Asm] live_set: [v11, v72, v69, v71, v10, zero, v7, v8, v70, v74, s11, v12, v73]
// [Asm] move: v74 <- v8
// [Asm] defined: v74 is X
// [Asm] skip edge 13 -> 11
// [Asm] defs: [v118]
// [Asm] live_set: [v118, v11, v10, v12, zero]
// [Asm] defined: v118 is X
// [Asm] defs: [v145]
// [Asm] live_set: [v121, v127, zero, v120, v119, v128, v143, v145, v129, v122]
// [Asm] defined: v145 is X
// [Asm] defs: [v147]
// [Asm] live_set: [v122, v121, v127, zero, v120, v119, v128, v143, v147, v145, v129]
// [Asm] defined: v147 is X
// [Asm] defs: []
// [Asm] live_set: [v121, v127, zero, v120, v119, v128, v143, v129, v145, v122]
// [Asm] defs: []
// [Asm] live_set: [v121, v127, zero, v120, v119, v128, v129, v122]
// [Asm] defs: [v150]
// [Asm] live_set: [v121, v127, zero, v120, v119, v150, v128, v129, v122]
// [Asm] move: v150 <- zero
// [Asm] defined: v150 is X
// [Asm] skip edge 131 -> 0
// [Asm] defs: [v143]
// [Asm] live_set: [v121, v127, zero, v120, v119, v128, v143, v129, v122]
// [Asm] defined: v143 is X
// [Asm] defs: [v140]
// [Asm] live_set: [v119, v140, v121, zero, v122, v120]
// [Asm] move: v140 <- zero
// [Asm] defined: v140 is X
// [Asm] skip edge 78 -> 0
// [Asm] defs: []
// [Asm] live_set: [v119, v140, v121, zero, v122, v120]
// [Asm] Label("quick_sort210.395") clobbered_x: @hashset.of([s7, a5, a0, s1, s2, s5, a2, a1, s3, a3, s6, a7, t0, s8, s4, a4, a6, s0])
// [Asm] Label("quick_sort210.395") clobbered_f: @hashset.of([])
// [Asm] subst   mv v116, zero ->   mv a4, zero
// [Asm] subst   j .quick_sort210.395_91 ->   j .quick_sort210.395_91
// [Asm] subst   li v177, 1 ->   li a1, 1
// [Asm] subst   addi v6, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v6, -8 ->   andi s11, a0, -8
// [Asm] subst   sw v19, 0(v6) ->   sw s3, 0(a0)
// [Asm] subst   sw v52, 4(v6) ->   sw a1, 4(a0)
// [Asm] subst   lw v54, 0(v6) ->   lw a0, 0(a0)
// [Asm] subst   addi v56, v12, -1 ->   addi a1, s2, -1
// [Asm] subst   lw v103, 0(v70) ->   lw a4, 0(a2)
// [Asm] subst   addi v34, v19, -1 ->   addi s4, s3, -1
// [Asm] subst   addi v35, v19, 1 ->   addi s8, s3, 1
// [Asm] subst   mv v52, zero ->   mv a1, zero
// [Asm] subst   j .quick_sort210.395_11 ->   j .quick_sort210.395_11
// [Asm] subst   lw v79, 0(v7) ->   lw a0, 0(a2)
// [Asm] subst   addi v80, v12, -1 ->   addi a1, s2, -1
// [Asm] subst   lw v101, 0(v70) ->   lw a4, 0(a2)
// [Asm] subst   beq v101, v69, .quick_sort210.395_88 ->   beq a4, a1, .quick_sort210.395_88
// [Asm] subst   mv v49, zero ->   mv a0, zero
// [Asm] subst   j .quick_sort210.395_8 ->   j .quick_sort210.395_8
// [Asm] subst   lw v88, 0(v7) ->   lw a0, 0(a2)
// [Asm] subst   lw v89, 0(v8) ->   lw a1, 0(a3)
// [Asm] subst   li v178, 1 ->   li a2, 1
// [Asm] subst   bne v89, v178, .quick_sort210.395_13 ->   bne a1, a2, .quick_sort210.395_13
// [Asm] subst   mv v91, zero ->   mv a1, zero
// [Asm] subst   j .quick_sort210.395_14 ->   j .quick_sort210.395_14
// [Asm] subst   sw zero, 0(v74) ->   sw zero, 0(a3)
// [Asm] subst   mv v112, zero ->   mv a4, zero
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v10, v2 ->   mv s1, a0
// [Asm] subst   mv v11, v3 ->   mv s0, a1
// [Asm] subst   mv v12, v4 ->   mv s2, a2
// [Asm] subst   mv a0, v40 ->   mv a0, s4
// [Asm] subst   mv a1, v25 ->   mv a1, s5
// [Asm] subst   mv a2, v9 ->   mv a2, s7
// [Asm] subst   mv a3, v10 ->   mv a3, s1
// [Asm] subst   call sort_2157.398 ->   call sort_2157.398
// [Asm] subst   mv a0, v25 ->   mv a0, s5
// [Asm] subst   mv a1, v41 ->   mv a1, s8
// [Asm] subst   mv a2, v9 ->   mv a2, s7
// [Asm] subst   mv a3, v10 ->   mv a3, s1
// [Asm] subst   call sort_2157.398 ->   call sort_2157.398
// [Asm] subst   mv a0, v40 ->   mv a0, s4
// [Asm] subst   mv a1, v25 ->   mv a1, s5
// [Asm] subst   mv a2, v9 ->   mv a2, s7
// [Asm] subst   mv a3, v10 ->   mv a3, s1
// [Asm] subst   call sort_2157.398 ->   call sort_2157.398
// [Asm] subst   mv v112, zero ->   mv a4, zero
// [Asm] subst   j .quick_sort210.395_90 ->   j .quick_sort210.395_90
// [Asm] subst   mv v77, zero ->   mv a0, zero
// [Asm] subst   srai v22, v16, 2 ->   srai a1, a0, 2
// [Asm] subst   add v23, v11, v22 ->   add s6, s0, a1
// [Asm] subst   li v219, 3 ->   li a2, 3
// [Asm] subst   mul v24, v22, v219 ->   mul a1, a1, a2
// [Asm] subst   add v25, v11, v24 ->   add s5, s0, a1
// [Asm] subst   addi v26, v16, -1 ->   addi a0, a0, -1
// [Asm] subst   li v216, 50 ->   li a1, 50
// [Asm] subst   blt v26, v216, .quick_sort210.395_6 ->   blt a0, a1, .quick_sort210.395_6
// [Asm] subst   mv v125, zero ->   mv a0, zero
// [Asm] subst   sub v13, v12, v11 ->   sub a0, s2, s0
// [Asm] subst   li v229, 16 ->   li a1, 16
// [Asm] subst   bge v229, v13, .quick_sort210.395_1 ->   bge a1, a0, .quick_sort210.395_1
// [Asm] subst   addi v28, v23, -1 ->   addi s4, s6, -1
// [Asm] subst   addi v29, v23, 1 ->   addi s8, s6, 1
// [Asm] subst   mv v120, v10 ->   mv a1, s1
// [Asm] subst   mv v121, v11 ->   mv a2, s0
// [Asm] subst   mv v122, v12 ->   mv a3, s2
// [Asm] subst   th.lurw v98, v72, v69, 2 ->   th.lurw a4, t0, a1, 2
// [Asm] subst   addi v99, v71, -1 ->   addi a5, a0, -1
// [Asm] subst   blt v99, v98, .quick_sort210.395_87 ->   blt a5, a4, .quick_sort210.395_87
// [Asm] subst   mv a0, v34 ->   mv a0, s4
// [Asm] subst   mv a1, v19 ->   mv a1, s3
// [Asm] subst   mv a2, v9 ->   mv a2, s7
// [Asm] subst   mv a3, v10 ->   mv a3, s1
// [Asm] subst   call sort_2157.398 ->   call sort_2157.398
// [Asm] subst   mv a0, v19 ->   mv a0, s3
// [Asm] subst   mv a1, v35 ->   mv a1, s8
// [Asm] subst   mv a2, v9 ->   mv a2, s7
// [Asm] subst   mv a3, v10 ->   mv a3, s1
// [Asm] subst   call sort_2157.398 ->   call sort_2157.398
// [Asm] subst   mv a0, v34 ->   mv a0, s4
// [Asm] subst   mv a1, v19 ->   mv a1, s3
// [Asm] subst   mv a2, v9 ->   mv a2, s7
// [Asm] subst   mv a3, v10 ->   mv a3, s1
// [Asm] subst   call sort_2157.398 ->   call sort_2157.398
// [Asm] subst   addi v5, s11, -8 ->   addi a2, s11, -8
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a2, -8
// [Asm] subst   sw v88, 0(v5) ->   sw a0, 0(a2)
// [Asm] subst   sw v91, 4(v5) ->   sw a1, 4(a2)
// [Asm] subst   lw v93, 0(v5) ->   lw s3, 0(a2)
// [Asm] subst   mv a0, v10 ->   mv a0, s1
// [Asm] subst   mv a1, v11 ->   mv a1, s0
// [Asm] subst   mv a2, v93 ->   mv a2, s3
// [Asm] subst   call quick_sort210.395 ->   call quick_sort210.395
// [Asm] subst   addi v96, v93, 1 ->   addi a0, s3, 1
// [Asm] subst   mv v11, v96 ->   mv s0, a0
// [Asm] subst   j .quick_sort210.395_0 ->   j .quick_sort210.395_0
// [Asm] subst   th.lurw v133, v128, v127, 2 ->   th.lurw a5, a1, a4, 2
// [Asm] subst   addi v134, v127, -1 ->   addi a6, a4, -1
// [Asm] subst   th.lurw v136, v128, v134, 2 ->   th.lurw a6, a1, a6, 2
// [Asm] subst   addi v137, v136, -1 ->   addi a6, a6, -1
// [Asm] subst   blt v137, v133, .quick_sort210.395_66 ->   blt a6, a5, .quick_sort210.395_66
// [Asm] subst   addi v123, v122, -1 ->   addi a4, a3, -1
// [Asm] subst   blt v123, v119, .quick_sort210.395_57 ->   blt a4, a0, .quick_sort210.395_57
// [Asm] subst   li v196, 1 ->   li a0, 1
// [Asm] subst   mv v52, v196 ->   mv a1, a0
// [Asm] subst   mv v127, v119 ->   mv a4, a0
// [Asm] subst   mv v139, zero ->   mv a4, zero
// [Asm] subst   addi v117, v69, 1 ->   addi a1, a1, 1
// [Asm] subst   j .quick_sort210.395_83 ->   j .quick_sort210.395_83
// [Asm] subst   addi v40, v25, -1 ->   addi s4, s5, -1
// [Asm] subst   addi v41, v25, 1 ->   addi s8, s5, 1
// [Asm] subst   addi v130, v129, 1 ->   addi a5, a2, 1
// [Asm] subst   blt v127, v130, .quick_sort210.395_64 ->   blt a4, a5, .quick_sort210.395_64
// [Asm] subst   th.lurw v105, v72, v103, 2 ->   th.lurw a5, t0, a4, 2
// [Asm] subst   th.lurw v107, v72, v69, 2 ->   th.lurw a6, t0, a1, 2
// [Asm] subst   th.surw v107, v72, v103, 2 ->   th.surw a6, t0, a4, 2
// [Asm] subst   th.surw v105, v72, v69, 2 ->   th.surw a5, t0, a1, 2
// [Asm] subst   mv v110, zero ->   mv a4, zero
// [Asm] subst   lw v50, 0(v9) ->   lw a0, 0(s7)
// [Asm] subst   bne v50, zero, .quick_sort210.395_10 ->   bne a0, zero, .quick_sort210.395_10
// [Asm] subst   th.lurw v58, v10, v54, 2 ->   th.lurw a2, s1, a0, 2
// [Asm] subst   th.lurw v60, v10, v56, 2 ->   th.lurw a3, s1, a1, 2
// [Asm] subst   th.surw v60, v10, v54, 2 ->   th.surw a3, s1, a0, 2
// [Asm] subst   th.surw v58, v10, v56, 2 ->   th.surw a2, s1, a1, 2
// [Asm] subst   mv v63, zero ->   mv a0, zero
// [Asm] subst   lw v113, 0(v70) ->   lw a4, 0(a2)
// [Asm] subst   addi v114, v113, 1 ->   addi a4, a4, 1
// [Asm] subst   sw v114, 0(v70) ->   sw a4, 0(a2)
// [Asm] subst   mv v116, zero ->   mv a4, zero
// [Asm] subst   addi v75, v73, -2 ->   addi a4, a7, -2
// [Asm] subst   blt v75, v69, .quick_sort210.395_85 ->   blt a4, a1, .quick_sort210.395_85
// [Asm] subst   addi v9, s11, -4 ->   addi s7, s11, -4
// [Asm] subst   andi s11, v9, -8 ->   andi s11, s7, -8
// [Asm] subst   sw zero, 0(v9) ->   sw zero, 0(s7)
// [Asm] subst   sub v16, v12, v11 ->   sub a0, s2, s0
// [Asm] subst   srai v17, v16, 2 ->   srai a1, a0, 2
// [Asm] subst   slli v18, v17, 1 ->   slli a1, a1, 1
// [Asm] subst   add v19, v11, v18 ->   add s3, s0, a1
// [Asm] subst   li v223, 8 ->   li a1, 8
// [Asm] subst   blt v16, v223, .quick_sort210.395_4 ->   blt a0, a1, .quick_sort210.395_4
// [Asm] subst   addi v142, v119, 1 ->   addi a0, a0, 1
// [Asm] subst   j .quick_sort210.395_55 ->   j .quick_sort210.395_55
// [Asm] subst   mv a0, v28 ->   mv a0, s4
// [Asm] subst   mv a1, v23 ->   mv a1, s6
// [Asm] subst   mv a2, v9 ->   mv a2, s7
// [Asm] subst   mv a3, v10 ->   mv a3, s1
// [Asm] subst   call sort_2157.398 ->   call sort_2157.398
// [Asm] subst   mv a0, v23 ->   mv a0, s6
// [Asm] subst   mv a1, v29 ->   mv a1, s8
// [Asm] subst   mv a2, v9 ->   mv a2, s7
// [Asm] subst   mv a3, v10 ->   mv a3, s1
// [Asm] subst   call sort_2157.398 ->   call sort_2157.398
// [Asm] subst   mv a0, v28 ->   mv a0, s4
// [Asm] subst   mv a1, v23 ->   mv a1, s6
// [Asm] subst   mv a2, v9 ->   mv a2, s7
// [Asm] subst   mv a3, v10 ->   mv a3, s1
// [Asm] subst   call sort_2157.398 ->   call sort_2157.398
// [Asm] subst   th.lurw v82, v10, v79, 2 ->   th.lurw a4, s1, a0, 2
// [Asm] subst   th.lurw v84, v10, v80, 2 ->   th.lurw a5, s1, a1, 2
// [Asm] subst   th.surw v84, v10, v79, 2 ->   th.surw a5, s1, a0, 2
// [Asm] subst   th.surw v82, v10, v80, 2 ->   th.surw a4, s1, a1, 2
// [Asm] subst   mv v87, zero ->   mv a0, zero
// [Asm] subst   addi v64, v12, -1 ->   addi a0, s2, -1
// [Asm] subst   th.lurw v66, v10, v64, 2 ->   th.lurw a0, s1, a0, 2
// [Asm] subst   addi v7, s11, -4 ->   addi a2, s11, -4
// [Asm] subst   andi s11, v7, -8 ->   andi s11, a2, -8
// [Asm] subst   sw v11, 0(v7) ->   sw s0, 0(a2)
// [Asm] subst   addi v8, s11, -4 ->   addi a3, s11, -4
// [Asm] subst   andi s11, v8, -8 ->   andi s11, a3, -8
// [Asm] subst   li v187, 1 ->   li a1, 1
// [Asm] subst   sw v187, 0(v8) ->   sw a1, 0(a3)
// [Asm] subst   mv a0, v23 ->   mv a0, s6
// [Asm] subst   mv a1, v19 ->   mv a1, s3
// [Asm] subst   mv a2, v9 ->   mv a2, s7
// [Asm] subst   mv a3, v10 ->   mv a3, s1
// [Asm] subst   call sort_2157.398 ->   call sort_2157.398
// [Asm] subst   mv a0, v19 ->   mv a0, s3
// [Asm] subst   mv a1, v25 ->   mv a1, s5
// [Asm] subst   mv a2, v9 ->   mv a2, s7
// [Asm] subst   mv a3, v10 ->   mv a3, s1
// [Asm] subst   call sort_2157.398 ->   call sort_2157.398
// [Asm] subst   mv a0, v23 ->   mv a0, s6
// [Asm] subst   mv a1, v19 ->   mv a1, s3
// [Asm] subst   mv a2, v9 ->   mv a2, s7
// [Asm] subst   mv a3, v10 ->   mv a3, s1
// [Asm] subst   call sort_2157.398 ->   call sort_2157.398
// [Asm] subst   addi v151, v127, -1 ->   addi a4, a4, -1
// [Asm] subst   j .quick_sort210.395_62 ->   j .quick_sort210.395_62
// [Asm] subst   mv v45, zero ->   mv a0, zero
// [Asm] subst   j .quick_sort210.395_7 ->   j .quick_sort210.395_7
// [Asm] subst   mv v69, v11 ->   mv a1, s0
// [Asm] subst   mv v72, v10 ->   mv t0, s1
// [Asm] subst   mv v73, v12 ->   mv a7, s2
// [Asm] subst   addi v118, v11, 1 ->   addi a0, s0, 1
// [Asm] subst   th.lurw v145, v128, v127, 2 ->   th.lurw a5, a1, a4, 2
// [Asm] subst   th.lurw v147, v128, v143, 2 ->   th.lurw a7, a1, a6, 2
// [Asm] subst   th.surw v147, v128, v127, 2 ->   th.surw a7, a1, a4, 2
// [Asm] subst   th.surw v145, v128, v143, 2 ->   th.surw a5, a1, a6, 2
// [Asm] subst   mv v150, zero ->   mv a5, zero
// [Asm] subst   addi v143, v127, -1 ->   addi a6, a4, -1
// [Asm] subst   mv v140, zero ->   mv a4, zero
// [Asm] subst   j .quick_sort210.395_68 ->   j .quick_sort210.395_68
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f20) -> v0, Insn(iref=%0) -> v2
// [Asm] before colored: # leaf true
// [Asm] sort_2157.398:
// [Asm] # block info: defs: [v2, v5, v10, v7, v4, v9, v3], uses: [v2, v5, v10, a0, v7, a2, a1, a3, v9, v3], upward_exposed: [a2, a1, a3, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a3, a0, zero], live_out: [v3, v4, v5, zero, v2]
// [Asm] # block parameters: []
// [Asm] .sort_2157.398_0:
// [Asm]   # save_ctx1  # live: [zero, a0, a2, a1, a3]
// [Asm]   mv v2, a0  # live: [zero, a2, a1, a3, v2]
// [Asm]   mv v3, a1  # live: [v2, zero, a2, a3, v3]
// [Asm]   mv v4, a2  # live: [v2, zero, v4, a3, v3]
// [Asm]   mv v5, a3  # live: [v2, v5, zero, v4, v3]
// [Asm]   th.lurw v7, v5, v3, 2  # live: [v2, v5, zero, v7, v4, v3]
// [Asm]   th.lurw v9, v5, v2, 2  # live: [v2, v5, zero, v7, v4, v9, v3]
// [Asm]   addi v10, v9, -1  # live: [v2, v5, v10, zero, v7, v4, v3]
// [Asm] # control
// [Asm]   blt v10, v7, .sort_2157.398_2  # live: [v3, v4, v5, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [], uses: [], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v2, v4, v5, zero, v3], live_out: [v3, v4, v5, zero, v2]
// [Asm] # block parameters: []
// [Asm] .sort_2157.398_1:
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v15, v18, v13], uses: [v3, v5, v15, v13, zero, v2], upward_exposed: [v3, v5, zero, v2], params_defs: []
// [Asm] # live_in: [v2, v4, v5, zero, v3], live_out: [v4, v18, zero]
// [Asm] # block parameters: []
// [Asm] .sort_2157.398_8:
// [Asm]   th.lurw v13, v5, v2, 2  # live: [v2, v5, zero, v13, v4, v3]
// [Asm]   th.lurw v15, v5, v3, 2  # live: [v2, v5, zero, v13, v4, v15, v3]
// [Asm]   th.surw v15, v5, v2, 2  # live: [v4, v5, zero, v13, v3]
// [Asm]   th.surw v13, v5, v3, 2  # live: [v4, zero]
// [Asm] # control
// [Asm]   mv v18, zero  # live: [v4, v18, zero]
// [Asm] 
// [Asm] # block info: defs: [v19, v20, v22], uses: [v19, v4, zero, v20], upward_exposed: [v4, zero], params_defs: [v18]
// [Asm] # live_in: [v4, v18, zero], live_out: [v22]
// [Asm] # block parameters: [v18]
// [Asm] .sort_2157.398_4:
// [Asm]   lw v19, 0(v4)  # live: [v19, v4, zero]
// [Asm]   addi v20, v19, 1  # live: [v4, zero, v20]
// [Asm]   sw v20, 0(v4)  # live: [zero]
// [Asm] # control
// [Asm]   mv v22, zero  # live: [v22]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v22], upward_exposed: [v22], params_defs: [v22]
// [Asm] # live_in: [v22], live_out: []
// [Asm] # block parameters: [v22]
// [Asm] .sort_2157.398_3:
// [Asm] # control
// [Asm]   mv a0, v22  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v22], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v22]
// [Asm] # block parameters: []
// [Asm] .sort_2157.398_2:
// [Asm] # control
// [Asm]   mv v22, zero  # live: [v22]
// [Asm]   j .sort_2157.398_3  # live: [v22]
// [Asm] 
// [Asm] # leaf false
// [Asm] input243.402:
// [Asm] # block info: defs: [v3, v7, v4, v6, v5, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .input243.402_5:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm]   mv v6, v3  # live: [v4, v5, v6, zero]
// [Asm]   mv v7, v4  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v8], uses: [v8, v5, v7], upward_exposed: [v5, v7], params_defs: [v5, v6, v7]
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v6, v5, zero, v7]
// [Asm] # block parameters: [v5, v6, v7]
// [Asm] .input243.402_0:
// [Asm]   addi v8, v7, -1  # live: [v8, v6, v5, zero, v7]
// [Asm] # control
// [Asm]   blt v8, v5, .input243.402_2  # live: [v6, v5, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v11, v6, v5, v14, a0, v7], upward_exposed: [v6, v5, v7], params_defs: []
// [Asm] # live_in: [v6, v5, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .input243.402_1:
// [Asm]   # save_ctx2  # live: [v6, v5, zero, v7]
// [Asm]   call minimbt_read_int  # live: [v6, v5, zero, a0, v7]
// [Asm]   mv v11, a0  # live: [v11, v6, v5, zero, v7]
// [Asm]   # restore_ctx2  # live: [v11, v6, v5, zero, v7]
// [Asm]   th.surw v11, v6, v5, 2  # live: [v6, v5, zero, v7]
// [Asm]   addi v14, v5, 1  # live: [v6, v14, zero, v7]
// [Asm] # control
// [Asm]   mv v5, v14  # live: [v5, v6, zero, v7]
// [Asm]   mv v6, v6  # live: [v5, v6, zero, v7]
// [Asm]   mv v7, v7  # live: [v5, v6, zero, v7]
// [Asm]   j .input243.402_0  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .input243.402_2:
// [Asm] # control
// [Asm]   mv v10, zero  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .input243.402_3:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] output14.394:
// [Asm] # block info: defs: [v3, v7, v4, v6, v5, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .output14.394_5:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm]   mv v6, v3  # live: [v4, v5, v6, zero]
// [Asm]   mv v7, v4  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v8], uses: [v8, v6, v7], upward_exposed: [v6, v7], params_defs: [v5, v6, v7]
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: [v5, v6, v7]
// [Asm] .output14.394_0:
// [Asm]   addi v8, v7, -1  # live: [v8, v5, v6, zero, v7]
// [Asm] # control
// [Asm]   blt v8, v6, .output14.394_2  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v13, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v5, v6, v12, v15, a0, v7], upward_exposed: [v5, v6, v7], params_defs: []
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .output14.394_1:
// [Asm]   th.lurw v12, v5, v6, 2  # live: [v5, v6, v12, zero, v7]
// [Asm]   # save_ctx2  # live: [v5, v6, v12, zero, v7]
// [Asm]   mv a0, v12  # live: [v5, v6, zero, a0, v7]
// [Asm]   call minimbt_print_int  # live: [v5, v6, zero, a0, v7]
// [Asm]   mv v13, a0  # live: [v5, v6, zero, v7]
// [Asm]   # restore_ctx2  # live: [v5, v6, zero, v7]
// [Asm]   # save_ctx2  # live: [v5, v6, zero, v7]
// [Asm]   call minimbt_print_endline  # live: [v5, v6, zero, a0, v7]
// [Asm]   mv v14, a0  # live: [v5, v6, zero, v7]
// [Asm]   # restore_ctx2  # live: [v5, v6, zero, v7]
// [Asm]   addi v15, v6, 1  # live: [v5, v15, zero, v7]
// [Asm] # control
// [Asm]   mv v5, v5  # live: [v5, v15, zero, v7]
// [Asm]   mv v6, v15  # live: [v5, v6, zero, v7]
// [Asm]   mv v7, v7  # live: [v5, v6, zero, v7]
// [Asm]   j .output14.394_0  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .output14.394_2:
// [Asm] # control
// [Asm]   mv v10, zero  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .output14.394_3:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main239.401:
// [Asm] # block info: defs: [v2, t1, v7, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v6, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v3, v11, a0, zero, v7, a2, a1, s11, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main239.401_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   # save_ctx2  # live: [s11, zero]
// [Asm]   call minimbt_read_int  # live: [s11, zero, a0]
// [Asm]   mv v3, a0  # live: [s11, zero, v3]
// [Asm]   # restore_ctx2  # live: [s11, zero, v3]
// [Asm]   slliw v11, v3, 2  # live: [v11, s11, zero, v3]
// [Asm]   sub v2, s11, v11  # live: [v2, zero, v3]
// [Asm]   andi s11, v2, -8  # live: [v2, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, v3]
// [Asm]   mv a0, zero  # live: [v2, zero, a0, v3]
// [Asm]   mv a1, v2  # live: [v2, a1, zero, a0, v3]
// [Asm]   mv a2, v3  # live: [v2, a2, a1, zero, a0, v3]
// [Asm]   call input243.402  # live: [v2, zero, a0, v3]
// [Asm]   mv v5, a0  # live: [v2, zero, v3]
// [Asm]   # restore_ctx2  # live: [v2, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, v3]
// [Asm]   mv a0, v2  # live: [v2, zero, a0, v3]
// [Asm]   mv a1, zero  # live: [v2, a1, zero, a0, v3]
// [Asm]   mv a2, v3  # live: [v2, a2, a1, zero, a0, v3]
// [Asm]   call quick_sort210.395  # live: [v2, zero, a0, v3]
// [Asm]   mv v6, a0  # live: [v2, zero, v3]
// [Asm]   # restore_ctx2  # live: [v2, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, v3]
// [Asm]   mv a0, v2  # live: [a0, zero, v3]
// [Asm]   mv a1, zero  # live: [a1, a0, v3]
// [Asm]   mv a2, v3  # live: [a2, a1, a0]
// [Asm]   call output14.394  # live: [a0]
// [Asm]   mv v7, a0  # live: [v7]
// [Asm]   # restore_ctx2  # live: [v7]
// [Asm] # control
// [Asm]   mv a0, v7  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] quick_sort210.395:
// [Asm] # block info: defs: [v3, v11, v4, v10, v12, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, s11, a0, zero], live_out: [v11, v10, v12, s11, zero]
// [Asm] # block parameters: []
// [Asm] .quick_sort210.395_17:
// [Asm]   # save_ctx1  # live: [a2, a1, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, s11, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, s11, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, s11, zero, v3]
// [Asm] # control
// [Asm]   mv v10, v2  # live: [v4, v10, s11, zero, v3]
// [Asm]   mv v11, v3  # live: [v11, v4, v10, s11, zero]
// [Asm]   mv v12, v4  # live: [v11, v10, v12, s11, zero]
// [Asm] 
// [Asm] # block info: defs: [v229, v13], uses: [v11, v12, v229, v13], upward_exposed: [v11, v12], params_defs: [v11, v10, v12]
// [Asm] # live_in: [v11, v10, v12, s11, zero], live_out: [v11, s11, v12, v10, zero]
// [Asm] # block parameters: [v10, v11, v12]
// [Asm] .quick_sort210.395_0:
// [Asm]   sub v13, v12, v11  # live: [v11, v10, zero, v13, s11, v12]
// [Asm] # control
// [Asm]   li v229, 16  # live: [v11, v10, v229, zero, v13, s11, v12]
// [Asm]   bge v229, v13, .quick_sort210.395_1  # live: [v11, s11, v12, v10, zero]
// [Asm] 
// [Asm] # block info: defs: [v16, v18, v223, v19, v17, s11, v9], uses: [v11, v16, v18, zero, v223, v17, s11, v12, v9], upward_exposed: [v11, s11, v12, zero], params_defs: []
// [Asm] # live_in: [v11, s11, v12, v10, zero], live_out: [v11, v16, v10, zero, v19, s11, v12, v9]
// [Asm] # block parameters: []
// [Asm] .quick_sort210.395_2:
// [Asm]   addi v9, s11, -4  # live: [v11, v10, zero, v12, v9]
// [Asm]   andi s11, v9, -8  # live: [v11, v10, zero, s11, v12, v9]
// [Asm]   sw zero, 0(v9)  # live: [v11, v10, zero, s11, v12, v9]
// [Asm]   sub v16, v12, v11  # live: [v11, v16, v10, zero, s11, v12, v9]
// [Asm]   srai v17, v16, 2  # live: [v11, v16, v10, zero, v17, s11, v12, v9]
// [Asm]   slli v18, v17, 1  # live: [v11, v16, v10, v18, zero, s11, v12, v9]
// [Asm]   add v19, v11, v18  # live: [v11, v16, v10, zero, v19, s11, v12, v9]
// [Asm] # control
// [Asm]   li v223, 8  # live: [v11, v16, v10, zero, v223, v19, s11, v12, v9]
// [Asm]   blt v16, v223, .quick_sort210.395_4  # live: [v11, v16, v10, zero, v19, s11, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v25, v26, v216, v23, v22, v24, v219], uses: [v11, v16, v26, v216, v22, v24, v219], upward_exposed: [v11, v16], params_defs: []
// [Asm] # live_in: [v11, v16, v10, zero, v19, s11, v12, v9], live_out: [v25, v11, v10, zero, v23, v19, s11, v12, v9]
// [Asm] # block parameters: []
// [Asm] .quick_sort210.395_3:
// [Asm]   srai v22, v16, 2  # live: [v11, v16, v10, zero, v22, v19, s11, v12, v9]
// [Asm]   add v23, v11, v22  # live: [v11, v16, v10, zero, v23, v22, v19, s11, v12, v9]
// [Asm]   li v219, 3  # live: [v11, v16, v10, zero, v23, v22, v19, s11, v12, v9, v219]
// [Asm]   mul v24, v22, v219  # live: [v11, v16, v10, zero, v23, v19, s11, v12, v24, v9]
// [Asm]   add v25, v11, v24  # live: [v25, v11, v16, v10, zero, v23, v19, s11, v12, v9]
// [Asm]   addi v26, v16, -1  # live: [v25, v11, v10, zero, v26, v23, v19, s11, v12, v9]
// [Asm] # control
// [Asm]   li v216, 50  # live: [v25, v11, v10, zero, v26, v216, v23, v19, s11, v12, v9]
// [Asm]   blt v26, v216, .quick_sort210.395_6  # live: [v25, v11, v10, zero, v23, v19, s11, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v28, v29], uses: [v23], upward_exposed: [v23], params_defs: []
// [Asm] # live_in: [v25, v11, v10, zero, v23, v19, s11, v12, v9], live_out: [v25, v11, v10, v29, zero, v23, v19, s11, v12, v28, v9]
// [Asm] # block parameters: []
// [Asm] .quick_sort210.395_5:
// [Asm]   addi v28, v23, -1  # live: [v25, v11, v10, zero, v23, v19, s11, v12, v28, v9]
// [Asm]   addi v29, v23, 1  # live: [v25, v11, v10, v29, zero, v23, v19, s11, v12, v28, v9]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, v32, a1, fa1, v33, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, v30, ft2, a2, a3, v31, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v10, a0, v29, v23, a2, v32, a1, a3, v28, v9], upward_exposed: [v10, v28, v9, v29, v23], params_defs: []
// [Asm] # live_in: [v25, v11, v10, v29, zero, v23, v19, s11, v12, v28, v9], live_out: [v25, v11, v10, zero, v23, v19, s11, v12, v33, v9]
// [Asm] # block parameters: []
// [Asm] .quick_sort210.395_76:
// [Asm]   # save_ctx2  # live: [v25, v11, v10, s11, v12, v28, v9, zero, v29, v23, v19]
// [Asm]   mv a0, v28  # live: [v25, v11, v10, a0, s11, v12, v28, v9, zero, v29, v23, v19]
// [Asm]   mv a1, v23  # live: [v25, v11, v10, a0, a1, s11, v12, v28, v9, zero, v29, v23, v19]
// [Asm]   mv a2, v9  # live: [v25, v11, v10, a0, a2, a1, s11, v12, v28, v9, zero, v29, v23, v19]
// [Asm]   mv a3, v10  # live: [v25, v11, v10, a0, a2, a1, s11, v12, a3, v28, v9, zero, v29, v23, v19]
// [Asm]   call sort_2157.398  # live: [v25, v11, v10, a0, s11, v12, v28, v9, zero, v29, v23, v19]
// [Asm]   mv v30, a0  # live: [v25, v11, v10, s11, v12, v28, v9, zero, v29, v23, v19]
// [Asm]   # restore_ctx2  # live: [v25, v11, v10, s11, v12, v28, v9, zero, v29, v23, v19]
// [Asm]   # save_ctx2  # live: [v25, v11, v10, s11, v12, v28, v9, zero, v29, v23, v19]
// [Asm]   mv a0, v23  # live: [v25, v11, v10, a0, s11, v12, v28, v9, zero, v29, v23, v19]
// [Asm]   mv a1, v29  # live: [v25, v11, v10, a0, a1, s11, v12, v28, v9, zero, v23, v19]
// [Asm]   mv a2, v9  # live: [v25, v11, v10, a0, a2, a1, s11, v12, v28, v9, zero, v23, v19]
// [Asm]   mv a3, v10  # live: [v25, v11, v10, a0, a2, a1, s11, v12, a3, v28, v9, zero, v23, v19]
// [Asm]   call sort_2157.398  # live: [v25, v11, v10, zero, a0, v23, v19, s11, v12, v28, v9]
// [Asm]   mv v31, a0  # live: [v25, v11, v10, zero, v23, v19, s11, v12, v28, v9]
// [Asm]   # restore_ctx2  # live: [v25, v11, v10, zero, v23, v19, s11, v12, v28, v9]
// [Asm]   # save_ctx2  # live: [v25, v11, v10, zero, v23, v19, s11, v12, v28, v9]
// [Asm]   mv a0, v28  # live: [v25, v11, v10, zero, a0, v23, v19, s11, v12, v9]
// [Asm]   mv a1, v23  # live: [v25, v11, v10, zero, a0, v23, v19, a1, s11, v12, v9]
// [Asm]   mv a2, v9  # live: [v25, v11, v10, zero, a0, v23, v19, a2, a1, s11, v12, v9]
// [Asm]   mv a3, v10  # live: [v25, v11, v10, zero, a0, v23, v19, a2, a1, s11, v12, a3, v9]
// [Asm]   call sort_2157.398  # live: [v25, v11, v10, zero, a0, v23, v19, s11, v12, v9]
// [Asm]   mv v32, a0  # live: [v25, v11, v10, zero, v23, v19, v32, s11, v12, v9]
// [Asm]   # restore_ctx2  # live: [v25, v11, v10, zero, v23, v19, v32, s11, v12, v9]
// [Asm] # control
// [Asm]   mv v33, v32  # live: [v25, v11, v10, zero, v23, v19, s11, v12, v33, v9]
// [Asm] 
// [Asm] # block info: defs: [v34, v35], uses: [v19], upward_exposed: [v19], params_defs: [v33]
// [Asm] # live_in: [v25, v11, v10, zero, v23, v19, s11, v12, v33, v9], live_out: [v25, v11, v10, zero, v23, v35, v19, s11, v12, v34, v9]
// [Asm] # block parameters: [v33]
// [Asm] .quick_sort210.395_21:
// [Asm]   addi v34, v19, -1  # live: [v25, v11, v10, zero, v23, v19, s11, v12, v34, v9]
// [Asm]   addi v35, v19, 1  # live: [v25, v11, v10, zero, v23, v35, v19, s11, v12, v34, v9]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, v36, ft2, a2, v37, a3, v39, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, v38, t2], uses: [v10, a0, v35, v19, a2, v38, a1, a3, v34, v9], upward_exposed: [v19, v10, v34, v9, v35], params_defs: []
// [Asm] # live_in: [v25, v11, v10, zero, v23, v35, v19, s11, v12, v34, v9], live_out: [v25, v11, v10, zero, v23, v19, s11, v12, v9, v39]
// [Asm] # block parameters: []
// [Asm] .quick_sort210.395_101:
// [Asm]   # save_ctx2  # live: [v25, v11, v10, s11, v12, v9, zero, v23, v35, v19, v34]
// [Asm]   mv a0, v34  # live: [v25, v11, v10, a0, s11, v12, v9, zero, v23, v35, v19, v34]
// [Asm]   mv a1, v19  # live: [v25, v11, v10, a0, a1, s11, v12, v9, zero, v23, v35, v19, v34]
// [Asm]   mv a2, v9  # live: [v25, v11, v10, a0, a2, a1, s11, v12, v9, zero, v23, v35, v19, v34]
// [Asm]   mv a3, v10  # live: [v25, v11, v10, a0, a2, a1, s11, v12, a3, v9, zero, v23, v35, v19, v34]
// [Asm]   call sort_2157.398  # live: [v25, v11, v10, a0, s11, v12, v9, zero, v23, v35, v19, v34]
// [Asm]   mv v36, a0  # live: [v25, v11, v10, s11, v12, v9, zero, v23, v35, v19, v34]
// [Asm]   # restore_ctx2  # live: [v25, v11, v10, s11, v12, v9, zero, v23, v35, v19, v34]
// [Asm]   # save_ctx2  # live: [v25, v11, v10, s11, v12, v9, zero, v23, v35, v19, v34]
// [Asm]   mv a0, v19  # live: [v25, v11, v10, a0, s11, v12, v9, zero, v23, v35, v19, v34]
// [Asm]   mv a1, v35  # live: [v25, v11, v10, a0, a1, s11, v12, v9, zero, v23, v19, v34]
// [Asm]   mv a2, v9  # live: [v25, v11, v10, a0, a2, a1, s11, v12, v9, zero, v23, v19, v34]
// [Asm]   mv a3, v10  # live: [v25, v11, v10, a0, a2, a1, s11, v12, a3, v9, zero, v23, v19, v34]
// [Asm]   call sort_2157.398  # live: [v25, v11, v10, zero, a0, v23, v19, s11, v12, v9, v34]
// [Asm]   mv v37, a0  # live: [v25, v11, v10, zero, v23, v19, s11, v12, v9, v34]
// [Asm]   # restore_ctx2  # live: [v25, v11, v10, zero, v23, v19, s11, v12, v9, v34]
// [Asm]   # save_ctx2  # live: [v25, v11, v10, zero, v23, v19, s11, v12, v9, v34]
// [Asm]   mv a0, v34  # live: [v25, v11, v10, zero, a0, v23, v19, s11, v12, v9]
// [Asm]   mv a1, v19  # live: [v25, v11, v10, zero, a0, v23, v19, a1, s11, v12, v9]
// [Asm]   mv a2, v9  # live: [v25, v11, v10, zero, a0, v23, v19, a2, a1, s11, v12, v9]
// [Asm]   mv a3, v10  # live: [v25, v11, v10, zero, a0, v23, v19, a2, a1, s11, v12, a3, v9]
// [Asm]   call sort_2157.398  # live: [v25, v11, v10, zero, a0, v23, v19, s11, v12, v9]
// [Asm]   mv v38, a0  # live: [v25, v11, v10, zero, v23, v19, v38, s11, v12, v9]
// [Asm]   # restore_ctx2  # live: [v25, v11, v10, zero, v23, v19, v38, s11, v12, v9]
// [Asm] # control
// [Asm]   mv v39, v38  # live: [v25, v11, v10, zero, v23, v19, s11, v12, v9, v39]
// [Asm] 
// [Asm] # block info: defs: [v41, v40], uses: [v25], upward_exposed: [v25], params_defs: [v39]
// [Asm] # live_in: [v25, v11, v10, zero, v23, v19, s11, v12, v9, v39], live_out: [v25, v11, v10, zero, v23, v19, v41, s11, v12, v9, v40]
// [Asm] # block parameters: [v39]
// [Asm] .quick_sort210.395_22:
// [Asm]   addi v40, v25, -1  # live: [v25, v11, v10, zero, v23, v19, s11, v12, v9, v40]
// [Asm]   addi v41, v25, 1  # live: [v25, v11, v10, zero, v23, v19, v41, s11, v12, v9, v40]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [t1, v42, ft0, ft1, a1, v44, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v43, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, v45, t4, t2], uses: [v25, v10, a0, a2, v41, a1, a3, v44, v9, v40], upward_exposed: [v25, v41, v10, v9, v40], params_defs: []
// [Asm] # live_in: [v25, v11, v10, zero, v23, v19, v41, s11, v12, v9, v40], live_out: [v25, v11, v10, zero, v23, v45, v19, s11, v12, v9]
// [Asm] # block parameters: []
// [Asm] .quick_sort210.395_73:
// [Asm]   # save_ctx2  # live: [v25, v11, v10, v41, v12, s11, v9, zero, v23, v19, v40]
// [Asm]   mv a0, v40  # live: [v25, v11, v10, a0, v41, v12, s11, v9, zero, v23, v19, v40]
// [Asm]   mv a1, v25  # live: [v25, v11, v10, a0, v41, a1, v12, s11, v9, zero, v23, v19, v40]
// [Asm]   mv a2, v9  # live: [v25, v11, v10, a0, v41, a2, a1, v12, s11, v9, zero, v23, v19, v40]
// [Asm]   mv a3, v10  # live: [v25, v11, v10, a0, v41, a2, a1, v12, s11, a3, v9, zero, v23, v19, v40]
// [Asm]   call sort_2157.398  # live: [v25, v11, v10, a0, v41, s11, v12, v9, zero, v23, v19, v40]
// [Asm]   mv v42, a0  # live: [v25, v11, v10, v41, s11, v12, v9, zero, v23, v19, v40]
// [Asm]   # restore_ctx2  # live: [v25, v11, v10, v41, s11, v12, v9, zero, v23, v19, v40]
// [Asm]   # save_ctx2  # live: [v25, v11, v10, v41, s11, v12, v9, zero, v23, v19, v40]
// [Asm]   mv a0, v25  # live: [v25, v11, v10, a0, v41, s11, v12, v9, zero, v23, v19, v40]
// [Asm]   mv a1, v41  # live: [v25, v11, v10, a0, a1, s11, v12, v9, zero, v23, v19, v40]
// [Asm]   mv a2, v9  # live: [v25, v11, v10, a0, a2, a1, s11, v12, v9, zero, v23, v19, v40]
// [Asm]   mv a3, v10  # live: [v25, v11, v10, a0, a2, a1, s11, v12, a3, v9, zero, v23, v19, v40]
// [Asm]   call sort_2157.398  # live: [v25, v11, v10, zero, a0, v23, v19, s11, v12, v9, v40]
// [Asm]   mv v43, a0  # live: [v25, v11, v10, zero, v23, v19, s11, v12, v9, v40]
// [Asm]   # restore_ctx2  # live: [v25, v11, v10, zero, v23, v19, s11, v12, v9, v40]
// [Asm]   # save_ctx2  # live: [v25, v11, v10, zero, v23, v19, s11, v12, v9, v40]
// [Asm]   mv a0, v40  # live: [v25, v11, v10, zero, a0, v23, v19, s11, v12, v9]
// [Asm]   mv a1, v25  # live: [v25, v11, v10, zero, a0, v23, v19, a1, s11, v12, v9]
// [Asm]   mv a2, v9  # live: [v25, v11, v10, zero, a0, v23, v19, a2, a1, s11, v12, v9]
// [Asm]   mv a3, v10  # live: [v25, v11, v10, zero, a0, v23, v19, a2, a1, s11, v12, a3, v9]
// [Asm]   call sort_2157.398  # live: [v25, v11, v10, zero, a0, v23, v19, s11, v12, v9]
// [Asm]   mv v44, a0  # live: [v25, v11, v10, zero, v23, v19, s11, v12, v44, v9]
// [Asm]   # restore_ctx2  # live: [v25, v11, v10, zero, v23, v19, s11, v12, v44, v9]
// [Asm] # control
// [Asm]   mv v45, v44  # live: [v25, v11, v10, zero, v23, v45, v19, s11, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [], uses: [], upward_exposed: [], params_defs: [v45]
// [Asm] # live_in: [v25, v11, v10, zero, v23, v45, v19, s11, v12, v9], live_out: [v25, v11, v10, zero, v23, v19, s11, v12, v9]
// [Asm] # block parameters: [v45]
// [Asm] .quick_sort210.395_7:
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v47, ft7, ft4, v46, ft9, v49, a5, fa4, a0, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, v48, fa3, ft3, fa0, t4, t2], uses: [v25, v10, v48, a0, v23, v19, a2, a1, a3, v9], upward_exposed: [v19, v25, v10, v9, v23], params_defs: []
// [Asm] # live_in: [v25, v11, v10, zero, v23, v19, s11, v12, v9], live_out: [v11, v49, v10, zero, v19, s11, v12, v9]
// [Asm] # block parameters: []
// [Asm] .quick_sort210.395_104:
// [Asm]   # save_ctx2  # live: [v11, v25, v10, zero, v23, v19, s11, v12, v9]
// [Asm]   mv a0, v23  # live: [v11, v25, v10, zero, a0, v23, v19, s11, v12, v9]
// [Asm]   mv a1, v19  # live: [v11, v25, v10, zero, a0, v23, v19, a1, s11, v12, v9]
// [Asm]   mv a2, v9  # live: [v11, v25, v10, zero, a0, v23, v19, a2, a1, s11, v12, v9]
// [Asm]   mv a3, v10  # live: [v11, v25, v10, zero, a0, v23, v19, a2, a1, s11, v12, a3, v9]
// [Asm]   call sort_2157.398  # live: [v11, v25, v10, zero, a0, v23, v19, s11, v12, v9]
// [Asm]   mv v46, a0  # live: [v11, v25, v10, zero, v23, v19, s11, v12, v9]
// [Asm]   # restore_ctx2  # live: [v11, v25, v10, zero, v23, v19, s11, v12, v9]
// [Asm]   # save_ctx2  # live: [v11, v25, v10, zero, v23, v19, s11, v12, v9]
// [Asm]   mv a0, v19  # live: [v11, v25, v10, zero, a0, v23, v19, s11, v12, v9]
// [Asm]   mv a1, v25  # live: [v11, v10, zero, a0, v23, v19, a1, s11, v12, v9]
// [Asm]   mv a2, v9  # live: [v11, v10, zero, a0, v23, v19, a2, a1, s11, v12, v9]
// [Asm]   mv a3, v10  # live: [v11, v10, zero, a0, v23, v19, a2, a1, s11, v12, a3, v9]
// [Asm]   call sort_2157.398  # live: [v11, v10, zero, a0, v23, v19, s11, v12, v9]
// [Asm]   mv v47, a0  # live: [v11, v10, zero, v23, v19, s11, v12, v9]
// [Asm]   # restore_ctx2  # live: [v11, v10, zero, v23, v19, s11, v12, v9]
// [Asm]   # save_ctx2  # live: [v11, v10, zero, v23, v19, s11, v12, v9]
// [Asm]   mv a0, v23  # live: [v11, v10, zero, a0, v19, s11, v12, v9]
// [Asm]   mv a1, v19  # live: [v11, v10, zero, a0, v19, a1, s11, v12, v9]
// [Asm]   mv a2, v9  # live: [v11, v10, zero, a0, v19, a2, a1, s11, v12, v9]
// [Asm]   mv a3, v10  # live: [v11, v10, zero, a0, v19, a2, a1, s11, v12, a3, v9]
// [Asm]   call sort_2157.398  # live: [v11, v10, zero, a0, v19, s11, v12, v9]
// [Asm]   mv v48, a0  # live: [v11, v10, v48, zero, v19, s11, v12, v9]
// [Asm]   # restore_ctx2  # live: [v11, v10, v48, zero, v19, s11, v12, v9]
// [Asm] # control
// [Asm]   mv v49, v48  # live: [v11, v49, v10, zero, v19, s11, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v50], uses: [v9, zero, v50], upward_exposed: [v9, zero], params_defs: [v49]
// [Asm] # live_in: [v11, v49, v10, zero, v19, s11, v12, v9], live_out: [v11, v10, zero, v19, s11, v12]
// [Asm] # block parameters: [v49]
// [Asm] .quick_sort210.395_8:
// [Asm]   lw v50, 0(v9)  # live: [v11, v10, zero, v50, v19, s11, v12]
// [Asm] # control
// [Asm]   bne v50, zero, .quick_sort210.395_10  # live: [v11, v19, v10, s11, v12, zero]
// [Asm] 
// [Asm] # block info: defs: [v52, v196], uses: [v196], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v19, s11, v12], live_out: [v11, v10, zero, v19, v52, s11, v12]
// [Asm] # block parameters: []
// [Asm] .quick_sort210.395_9:
// [Asm] # control
// [Asm]   li v196, 1  # live: [v11, v10, zero, v19, s11, v12, v196]
// [Asm]   mv v52, v196  # live: [v11, v10, zero, v19, v52, s11, v12]
// [Asm] 
// [Asm] # block info: defs: [v6, s11, v56, v54], uses: [v19, v6, s11, v52, v12], upward_exposed: [v19, s11, v52, v12], params_defs: [v52]
// [Asm] # live_in: [v11, v10, zero, v19, v52, s11, v12], live_out: [v11, v10, v56, zero, v12, s11, v54]
// [Asm] # block parameters: [v52]
// [Asm] .quick_sort210.395_11:
// [Asm]   addi v6, s11, -8  # live: [v11, v10, zero, v19, v6, v12, v52]
// [Asm]   andi s11, v6, -8  # live: [v11, v10, zero, v19, v6, v12, s11, v52]
// [Asm]   sw v19, 0(v6)  # live: [v11, v10, zero, v6, v12, s11, v52]
// [Asm]   sw v52, 4(v6)  # live: [v11, v10, zero, v6, v12, s11]
// [Asm]   lw v54, 0(v6)  # live: [v11, v10, zero, v12, s11, v54]
// [Asm]   addi v56, v12, -1  # live: [v11, v10, v56, zero, v12, s11, v54]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v63, v58, v60], uses: [v58, v10, v56, v54, zero, v60], upward_exposed: [v10, v56, v54, zero], params_defs: []
// [Asm] # live_in: [v11, v10, v56, zero, v12, s11, v54], live_out: [v11, v63, v10, zero, v12, s11]
// [Asm] # block parameters: []
// [Asm] .quick_sort210.395_79:
// [Asm]   th.lurw v58, v10, v54, 2  # live: [v11, v58, v10, v56, zero, v12, s11, v54]
// [Asm]   th.lurw v60, v10, v56, 2  # live: [v11, v58, v10, v56, zero, v12, s11, v54, v60]
// [Asm]   th.surw v60, v10, v54, 2  # live: [v11, v58, v10, v56, zero, v12, s11]
// [Asm]   th.surw v58, v10, v56, 2  # live: [v11, v10, v12, s11, zero]
// [Asm] # control
// [Asm]   mv v63, zero  # live: [v11, v63, v10, v12, s11, zero]
// [Asm] 
// [Asm] # block info: defs: [v8, v66, s11, v64, v187, v7], uses: [v11, v10, v7, v8, v12, s11, v64, v187], upward_exposed: [v11, v12, v10, s11], params_defs: [v63]
// [Asm] # live_in: [v11, v63, v10, zero, v12, s11], live_out: [v66, v11, v10, zero, v8, v7, v12, s11]
// [Asm] # block parameters: [v63]
// [Asm] .quick_sort210.395_18:
// [Asm]   addi v64, v12, -1  # live: [v11, v10, zero, v12, s11, v64]
// [Asm]   th.lurw v66, v10, v64, 2  # live: [v11, v66, v10, zero, v12, s11]
// [Asm]   addi v7, s11, -4  # live: [v11, v66, v10, zero, v7, v12]
// [Asm]   andi s11, v7, -8  # live: [v11, v66, v10, zero, v7, v12, s11]
// [Asm]   sw v11, 0(v7)  # live: [v11, v66, v10, zero, v7, v12, s11]
// [Asm]   addi v8, s11, -4  # live: [v11, v66, v10, zero, v7, v8, v12]
// [Asm]   andi s11, v8, -8  # live: [v11, v66, v10, zero, v7, v8, v12, s11]
// [Asm]   li v187, 1  # live: [v11, v66, v10, zero, v7, v8, v12, s11, v187]
// [Asm]   sw v187, 0(v8)  # live: [v11, v66, v10, zero, v7, v8, v12, s11]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v72, v69, v70, v71, v74, v73], uses: [v8, v66, v11, v10, v12, v7], upward_exposed: [v8, v66, v11, v10, v12, v7], params_defs: []
// [Asm] # live_in: [v11, v66, v10, zero, v7, v8, v12, s11], live_out: [v11, v69, v71, v10, v7, v12, s11, v73, v72, zero, v8, v70, v74]
// [Asm] # block parameters: []
// [Asm] .quick_sort210.395_94:
// [Asm] # control
// [Asm]   mv v69, v11  # live: [v11, v66, v69, v10, zero, v7, v8, s11, v12]
// [Asm]   mv v70, v7  # live: [v11, v66, v69, v10, zero, v7, v8, v70, s11, v12]
// [Asm]   mv v71, v66  # live: [v11, v69, v71, v10, zero, v7, v8, v70, s11, v12]
// [Asm]   mv v72, v10  # live: [v11, v72, v69, v71, v10, zero, v7, v8, v70, s11, v12]
// [Asm]   mv v73, v12  # live: [v11, v72, v69, v71, v10, zero, v7, v8, v70, s11, v12, v73]
// [Asm]   mv v74, v8  # live: [v11, v72, v69, v71, v10, zero, v7, v8, v70, v74, s11, v12, v73]
// [Asm] 
// [Asm] # block info: defs: [v75], uses: [v69, v75, v73], upward_exposed: [v69, v73], params_defs: [v72, v69, v70, v71, v74, v73]
// [Asm] # live_in: [v11, v69, v71, v10, v7, v12, s11, v73, v72, zero, v8, v70, v74], live_out: [v11, v69, v71, v10, v7, v12, s11, v73, v72, zero, v8, v70, v74]
// [Asm] # block parameters: [v69, v70, v71, v72, v73, v74]
// [Asm] .quick_sort210.395_83:
// [Asm]   addi v75, v73, -2  # live: [v11, v69, v71, v10, v7, s11, v12, v73, v72, v75, zero, v8, v70, v74]
// [Asm] # control
// [Asm]   blt v75, v69, .quick_sort210.395_85  # live: [v11, v72, v69, v71, v10, zero, v7, v8, v70, v74, s11, v12, v73]
// [Asm] 
// [Asm] # block info: defs: [v99, v98], uses: [v72, v69, v71, v99, v98], upward_exposed: [v72, v69, v71], params_defs: []
// [Asm] # live_in: [v11, v69, v71, v10, v7, v12, s11, v73, v72, zero, v8, v70, v74], live_out: [v11, v69, v71, v10, v7, v12, s11, v73, v72, zero, v8, v70, v74]
// [Asm] # block parameters: []
// [Asm] .quick_sort210.395_84:
// [Asm]   th.lurw v98, v72, v69, 2  # live: [v11, v69, v71, v10, v7, s11, v12, v73, v98, v72, zero, v8, v70, v74]
// [Asm]   addi v99, v71, -1  # live: [v11, v69, v71, v10, v7, s11, v12, v73, v98, v72, v99, zero, v8, v70, v74]
// [Asm] # control
// [Asm]   blt v99, v98, .quick_sort210.395_87  # live: [v11, v72, v69, v71, v10, zero, v7, v8, v70, v74, s11, v12, v73]
// [Asm] 
// [Asm] # block info: defs: [v101], uses: [v70, v69, v101], upward_exposed: [v70, v69], params_defs: []
// [Asm] # live_in: [v11, v69, v71, v10, v7, v12, s11, v73, v72, zero, v8, v70, v74], live_out: [v11, v69, v71, v10, v7, v12, s11, v73, v72, zero, v8, v70, v74]
// [Asm] # block parameters: []
// [Asm] .quick_sort210.395_86:
// [Asm]   lw v101, 0(v70)  # live: [v11, v69, v71, v10, v7, s11, v12, v73, v101, v72, zero, v8, v70, v74]
// [Asm] # control
// [Asm]   beq v101, v69, .quick_sort210.395_88  # live: [v11, v72, v69, v71, v10, zero, v7, v8, v70, v74, s11, v12, v73]
// [Asm] 
// [Asm] # block info: defs: [v103], uses: [v70], upward_exposed: [v70], params_defs: []
// [Asm] # live_in: [v11, v69, v71, v10, v7, v12, s11, v73, v72, zero, v8, v70, v74], live_out: [v11, v69, v71, v10, v7, v12, s11, v73, v72, zero, v8, v103, v74, v70]
// [Asm] # block parameters: []
// [Asm] .quick_sort210.395_89:
// [Asm]   lw v103, 0(v70)  # live: [v11, v69, v71, v10, v7, v12, s11, v73, v72, zero, v8, v103, v74, v70]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v105, v107, v110], uses: [v103, v107, v105, v72, v69, zero], upward_exposed: [v103, v72, v69, zero], params_defs: []
// [Asm] # live_in: [v11, v69, v71, v10, v7, v12, s11, v73, v72, zero, v8, v103, v74, v70], live_out: [v11, v69, v71, v10, v110, v7, v12, s11, v73, v72, zero, v8, v74, v70]
// [Asm] # block parameters: []
// [Asm] .quick_sort210.395_97:
// [Asm]   th.lurw v105, v72, v103, 2  # live: [v11, v69, v71, v10, v7, v12, s11, v73, v72, zero, v8, v105, v103, v74, v70]
// [Asm]   th.lurw v107, v72, v69, 2  # live: [v11, v69, v71, v10, v7, v107, v12, s11, v73, v72, zero, v8, v105, v103, v74, v70]
// [Asm]   th.surw v107, v72, v103, 2  # live: [v11, v69, v71, v10, v7, v12, s11, v73, v72, zero, v8, v105, v74, v70]
// [Asm]   th.surw v105, v72, v69, 2  # live: [v11, v69, v71, v10, v7, v12, s11, v73, v72, zero, v8, v74, v70]
// [Asm] # control
// [Asm]   mv v110, zero  # live: [v11, v69, v71, v10, v110, v7, v12, s11, v73, v72, zero, v8, v74, v70]
// [Asm] 
// [Asm] # block info: defs: [v112], uses: [v74, zero], upward_exposed: [v74, zero], params_defs: [v110]
// [Asm] # live_in: [v11, v69, v71, v10, v110, v7, v12, s11, v73, v72, zero, v8, v74, v70], live_out: [v11, v69, v71, v10, v7, v12, s11, v73, v112, v72, zero, v8, v70, v74]
// [Asm] # block parameters: [v110]
// [Asm] .quick_sort210.395_95:
// [Asm]   sw zero, 0(v74)  # live: [v11, v71, v69, v10, v7, v12, s11, v73, v72, zero, v8, v70, v74]
// [Asm] # control
// [Asm]   mv v112, zero  # live: [v11, v71, v69, v10, v7, v12, s11, v73, v112, v72, zero, v8, v70, v74]
// [Asm] 
// [Asm] # block info: defs: [v116, v114, v113], uses: [v114, v70, v113, zero], upward_exposed: [v70, zero], params_defs: [v112]
// [Asm] # live_in: [v11, v69, v71, v10, v7, v12, s11, v73, v112, v72, zero, v8, v70, v74], live_out: [v116, v11, v71, v69, v10, v7, v12, s11, v73, v72, zero, v8, v70, v74]
// [Asm] # block parameters: [v112]
// [Asm] .quick_sort210.395_90:
// [Asm]   lw v113, 0(v70)  # live: [v11, v69, v71, v10, v7, v12, s11, v113, v73, v72, zero, v8, v70, v74]
// [Asm]   addi v114, v113, 1  # live: [v11, v69, v71, v10, v7, v114, v12, s11, v73, v72, zero, v8, v70, v74]
// [Asm]   sw v114, 0(v70)  # live: [v11, v69, v71, v10, v7, v12, s11, v73, v72, zero, v8, v70, v74]
// [Asm] # control
// [Asm]   mv v116, zero  # live: [v116, v11, v69, v71, v10, v7, v12, s11, v73, v72, zero, v8, v70, v74]
// [Asm] 
// [Asm] # block info: defs: [v69, v117], uses: [v72, v69, v71, v70, v74, v117, v73], upward_exposed: [v72, v69, v70, v71, v74, v73], params_defs: [v116]
// [Asm] # live_in: [v116, v11, v71, v69, v10, v7, v12, s11, v73, v72, zero, v8, v70, v74], live_out: [v11, v69, v71, v10, v7, v12, s11, v73, v72, zero, v8, v70, v74]
// [Asm] # block parameters: [v116]
// [Asm] .quick_sort210.395_91:
// [Asm]   addi v117, v69, 1  # live: [v11, v71, v10, v7, s11, v12, v73, v72, zero, v8, v70, v74, v117]
// [Asm] # control
// [Asm]   mv v69, v117  # live: [v11, v69, v71, v10, v7, s11, v12, v73, v72, zero, v8, v70, v74]
// [Asm]   mv v70, v70  # live: [v11, v69, v71, v10, v7, s11, v12, v73, v72, zero, v8, v70, v74]
// [Asm]   mv v71, v71  # live: [v11, v69, v71, v10, v7, s11, v12, v73, v72, zero, v8, v70, v74]
// [Asm]   mv v72, v72  # live: [v11, v69, v71, v10, v7, s11, v12, v73, v72, zero, v8, v70, v74]
// [Asm]   mv v73, v73  # live: [v11, v69, v71, v10, v7, s11, v12, v73, v72, zero, v8, v70, v74]
// [Asm]   mv v74, v74  # live: [v11, v72, v69, v71, v10, zero, v7, v8, v70, v74, s11, v12, v73]
// [Asm]   j .quick_sort210.395_83  # live: [v11, v72, v69, v71, v10, zero, v7, v8, v70, v74, s11, v12, v73]
// [Asm] 
// [Asm] # block info: defs: [v112], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v11, v69, v71, v10, v7, v12, s11, v73, v72, zero, v8, v70, v74], live_out: [v11, v69, v71, v10, v7, v12, s11, v73, v112, v72, zero, v8, v70, v74]
// [Asm] # block parameters: []
// [Asm] .quick_sort210.395_88:
// [Asm] # control
// [Asm]   mv v112, zero  # live: [v11, v69, v71, v10, v7, v12, s11, v73, v112, v72, zero, v8, v70, v74]
// [Asm]   j .quick_sort210.395_90  # live: [v11, v69, v71, v10, v7, v12, s11, v73, v112, v72, zero, v8, v70, v74]
// [Asm] 
// [Asm] # block info: defs: [v116], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v11, v69, v71, v10, v7, v12, s11, v73, v72, zero, v8, v70, v74], live_out: [v116, v11, v71, v69, v10, v7, v12, s11, v73, v72, zero, v8, v70, v74]
// [Asm] # block parameters: []
// [Asm] .quick_sort210.395_87:
// [Asm] # control
// [Asm]   mv v116, zero  # live: [v116, v11, v71, v69, v10, v7, v12, s11, v73, v72, zero, v8, v70, v74]
// [Asm]   j .quick_sort210.395_91  # live: [v116, v11, v71, v69, v10, v7, v12, s11, v73, v72, zero, v8, v70, v74]
// [Asm] 
// [Asm] # block info: defs: [v77], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v8, v7, v12, s11], live_out: [v11, v10, zero, v77, v8, v7, v12, s11]
// [Asm] # block parameters: []
// [Asm] .quick_sort210.395_85:
// [Asm] # control
// [Asm]   mv v77, zero  # live: [v11, v10, zero, v77, v7, v8, v12, s11]
// [Asm] 
// [Asm] # block info: defs: [v78], uses: [v77], upward_exposed: [v77], params_defs: [v77]
// [Asm] # live_in: [v11, v10, zero, v77, v8, v7, v12, s11], live_out: [v11, v10, zero, v78, v8, v7, v12, s11]
// [Asm] # block parameters: [v77]
// [Asm] .quick_sort210.395_92:
// [Asm] # control
// [Asm]   mv v78, v77  # live: [v11, v10, zero, v78, v7, v8, v12, s11]
// [Asm] 
// [Asm] # block info: defs: [v80, v79], uses: [v12, v7], upward_exposed: [v12, v7], params_defs: [v78]
// [Asm] # live_in: [v11, v10, zero, v78, v8, v7, v12, s11], live_out: [v11, v10, v79, zero, v8, v7, v80, s11, v12]
// [Asm] # block parameters: [v78]
// [Asm] .quick_sort210.395_19:
// [Asm]   lw v79, 0(v7)  # live: [v11, v10, v79, zero, v7, v8, s11, v12]
// [Asm]   addi v80, v12, -1  # live: [v11, v10, v79, zero, v7, v8, v80, s11, v12]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v84, v82, v87], uses: [v84, v80, v82, v10, v79, zero], upward_exposed: [v80, v10, v79, zero], params_defs: []
// [Asm] # live_in: [v11, v10, v79, zero, v7, v8, v80, s11, v12], live_out: [v11, v87, v10, zero, v8, v7, s11, v12]
// [Asm] # block parameters: []
// [Asm] .quick_sort210.395_51:
// [Asm]   th.lurw v82, v10, v79, 2  # live: [v11, v82, v10, zero, v79, v7, v8, v80, s11, v12]
// [Asm]   th.lurw v84, v10, v80, 2  # live: [v11, v82, v10, zero, v79, v7, v8, v84, v80, s11, v12]
// [Asm]   th.surw v84, v10, v79, 2  # live: [v11, v82, v10, zero, v7, v8, v80, s11, v12]
// [Asm]   th.surw v82, v10, v80, 2  # live: [v11, v10, zero, v7, v8, s11, v12]
// [Asm] # control
// [Asm]   mv v87, zero  # live: [v11, v87, v10, zero, v7, v8, s11, v12]
// [Asm] 
// [Asm] # block info: defs: [v88, v89, v178], uses: [v8, v89, v178, v7], upward_exposed: [v8, v7], params_defs: [v87]
// [Asm] # live_in: [v11, v87, v10, zero, v7, v8, s11, v12], live_out: [v11, v10, zero, v88, s11, v12]
// [Asm] # block parameters: [v87]
// [Asm] .quick_sort210.395_20:
// [Asm]   lw v88, 0(v7)  # live: [v11, v10, zero, v8, v88, s11, v12]
// [Asm]   lw v89, 0(v8)  # live: [v11, v10, zero, v88, s11, v12, v89]
// [Asm] # control
// [Asm]   li v178, 1  # live: [v11, v10, zero, v178, v88, s11, v12, v89]
// [Asm]   bne v89, v178, .quick_sort210.395_13  # live: [v11, v88, v10, s11, v12, zero]
// [Asm] 
// [Asm] # block info: defs: [v177, v91], uses: [v177], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v88, s11, v12], live_out: [v11, v91, v10, zero, v88, s11, v12]
// [Asm] # block parameters: []
// [Asm] .quick_sort210.395_12:
// [Asm] # control
// [Asm]   li v177, 1  # live: [v11, v10, zero, v88, v177, s11, v12]
// [Asm]   mv v91, v177  # live: [v11, v91, v10, zero, v88, s11, v12]
// [Asm] 
// [Asm] # block info: defs: [t1, v95, ft0, ft1, a1, s11, fa1, v93, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, v96, ft3, fa0, t4, t2], uses: [v11, v5, v91, v10, v96, a0, v88, a2, a1, s11, v12, v93], upward_exposed: [v88, v11, v91, s11, v10, v12], params_defs: [v91]
// [Asm] # live_in: [v11, v91, v10, zero, v88, s11, v12], live_out: [v11, v10, v12, s11, zero]
// [Asm] # block parameters: [v91]
// [Asm] .quick_sort210.395_14:
// [Asm]   addi v5, s11, -8  # live: [v11, v5, v91, v10, zero, v88, v12]
// [Asm]   andi s11, v5, -8  # live: [v11, v5, v91, v10, zero, v88, v12, s11]
// [Asm]   sw v88, 0(v5)  # live: [v11, v5, v91, v10, zero, v12, s11]
// [Asm]   sw v91, 4(v5)  # live: [v11, v5, v10, zero, v12, s11]
// [Asm]   lw v93, 0(v5)  # live: [v11, v10, zero, v12, s11, v93]
// [Asm]   # save_ctx2  # live: [v11, v10, zero, v12, s11, v93]
// [Asm]   mv a0, v10  # live: [v11, v10, zero, a0, v12, s11, v93]
// [Asm]   mv a1, v11  # live: [v10, zero, a0, a1, v12, s11, v93]
// [Asm]   mv a2, v93  # live: [v10, zero, a0, a2, a1, v12, s11, v93]
// [Asm]   call quick_sort210.395  # live: [v93, v10, v12, s11, zero, a0]
// [Asm]   mv v95, a0  # live: [v10, v12, s11, zero, v93]
// [Asm]   # restore_ctx2  # live: [v10, v12, s11, zero, v93]
// [Asm]   addi v96, v93, 1  # live: [v10, v12, s11, v96, zero]
// [Asm] # control
// [Asm]   mv v10, v10  # live: [v10, v12, s11, v96, zero]
// [Asm]   mv v11, v96  # live: [v11, v10, v12, s11, zero]
// [Asm]   mv v12, v12  # live: [v11, v10, v12, s11, zero]
// [Asm]   j .quick_sort210.395_0  # live: [v11, v10, v12, s11, zero]
// [Asm] 
// [Asm] # block info: defs: [v52], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v19, s11, v12], live_out: [v11, v10, zero, v19, v52, s11, v12]
// [Asm] # block parameters: []
// [Asm] .quick_sort210.395_10:
// [Asm] # control
// [Asm]   mv v52, zero  # live: [v11, v10, zero, v19, v52, s11, v12]
// [Asm]   j .quick_sort210.395_11  # live: [v11, v10, zero, v19, v52, s11, v12]
// [Asm] 
// [Asm] # block info: defs: [v45], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v25, v11, v10, zero, v23, v19, s11, v12, v9], live_out: [v25, v11, v10, zero, v23, v45, v19, s11, v12, v9]
// [Asm] # block parameters: []
// [Asm] .quick_sort210.395_6:
// [Asm] # control
// [Asm]   mv v45, zero  # live: [v25, v11, v10, zero, v23, v45, v19, s11, v12, v9]
// [Asm]   j .quick_sort210.395_7  # live: [v25, v11, v10, zero, v23, v45, v19, s11, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v49], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v19, s11, v12, v9], live_out: [v11, v49, v10, zero, v19, s11, v12, v9]
// [Asm] # block parameters: []
// [Asm] .quick_sort210.395_4:
// [Asm] # control
// [Asm]   mv v49, zero  # live: [v11, v49, v10, zero, v19, s11, v12, v9]
// [Asm]   j .quick_sort210.395_8  # live: [v11, v49, v10, zero, v19, s11, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v118], uses: [v11], upward_exposed: [v11], params_defs: []
// [Asm] # live_in: [v11, v10, v12, zero], live_out: [v118, v11, v10, v12, zero]
// [Asm] # block parameters: []
// [Asm] .quick_sort210.395_1:
// [Asm]   addi v118, v11, 1  # live: [v118, v11, v10, v12, zero]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v122, v121, v119, v120], uses: [v118, v11, v10, v12], upward_exposed: [v118, v11, v10, v12], params_defs: []
// [Asm] # live_in: [v118, v11, v10, v12, zero], live_out: [v119, v121, zero, v120, v122]
// [Asm] # block parameters: []
// [Asm] .quick_sort210.395_60:
// [Asm] # control
// [Asm]   mv v119, v118  # live: [v11, v12, v10, zero, v119]
// [Asm]   mv v120, v10  # live: [v11, v12, zero, v119, v120]
// [Asm]   mv v121, v11  # live: [v121, v12, zero, v119, v120]
// [Asm]   mv v122, v12  # live: [v122, v121, zero, v119, v120]
// [Asm] 
// [Asm] # block info: defs: [v123], uses: [v119, v122, v123], upward_exposed: [v122, v119], params_defs: [v122, v121, v119, v120]
// [Asm] # live_in: [v120, v121, zero, v122, v119], live_out: [v122, v121, zero, v119, v120]
// [Asm] # block parameters: [v119, v120, v121, v122]
// [Asm] .quick_sort210.395_55:
// [Asm]   addi v123, v122, -1  # live: [v121, zero, v119, v123, v120, v122]
// [Asm] # control
// [Asm]   blt v123, v119, .quick_sort210.395_57  # live: [v119, v121, zero, v120, v122]
// [Asm] 
// [Asm] # block info: defs: [], uses: [], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v122, v121, zero, v119, v120], live_out: [v122, v121, zero, v119, v120]
// [Asm] # block parameters: []
// [Asm] .quick_sort210.395_56:
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v128, v127, v129], uses: [v121, v119, v120], upward_exposed: [v121, v119, v120], params_defs: []
// [Asm] # live_in: [v122, v121, zero, v119, v120], live_out: [v121, v127, zero, v120, v119, v128, v129, v122]
// [Asm] # block parameters: []
// [Asm] .quick_sort210.395_70:
// [Asm] # control
// [Asm]   mv v127, v119  # live: [v121, v127, zero, v120, v119, v122]
// [Asm]   mv v128, v120  # live: [v121, v127, zero, v120, v119, v128, v122]
// [Asm]   mv v129, v121  # live: [v121, v127, zero, v120, v119, v128, v129, v122]
// [Asm] 
// [Asm] # block info: defs: [v130], uses: [v127, v130, v129], upward_exposed: [v127, v129], params_defs: [v128, v127, v129]
// [Asm] # live_in: [v121, v127, zero, v120, v119, v128, v129, v122], live_out: [v121, v127, zero, v120, v119, v128, v129, v122]
// [Asm] # block parameters: [v127, v128, v129]
// [Asm] .quick_sort210.395_62:
// [Asm]   addi v130, v129, 1  # live: [v121, v127, v130, zero, v119, v120, v128, v129, v122]
// [Asm] # control
// [Asm]   blt v127, v130, .quick_sort210.395_64  # live: [v121, v127, zero, v120, v119, v128, v129, v122]
// [Asm] 
// [Asm] # block info: defs: [v134, v136, v137, v133], uses: [v134, v136, v128, v127, v137, v133], upward_exposed: [v128, v127], params_defs: []
// [Asm] # live_in: [v121, v127, zero, v120, v119, v128, v129, v122], live_out: [v121, v127, zero, v120, v119, v128, v129, v122]
// [Asm] # block parameters: []
// [Asm] .quick_sort210.395_63:
// [Asm]   th.lurw v133, v128, v127, 2  # live: [v121, v127, zero, v120, v119, v133, v128, v129, v122]
// [Asm]   addi v134, v127, -1  # live: [v121, v127, zero, v120, v119, v133, v134, v128, v129, v122]
// [Asm]   th.lurw v136, v128, v134, 2  # live: [v121, v127, zero, v120, v119, v133, v136, v128, v129, v122]
// [Asm]   addi v137, v136, -1  # live: [v121, v127, zero, v120, v119, v133, v128, v129, v137, v122]
// [Asm] # control
// [Asm]   blt v137, v133, .quick_sort210.395_66  # live: [v121, v127, zero, v120, v119, v128, v129, v122]
// [Asm] 
// [Asm] # block info: defs: [v143], uses: [v127], upward_exposed: [v127], params_defs: []
// [Asm] # live_in: [v121, v127, zero, v120, v119, v128, v129, v122], live_out: [v121, v127, zero, v120, v119, v128, v143, v129, v122]
// [Asm] # block parameters: []
// [Asm] .quick_sort210.395_65:
// [Asm]   addi v143, v127, -1  # live: [v121, v127, zero, v120, v119, v128, v143, v129, v122]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v147, v145, v150], uses: [zero, v128, v143, v127, v147, v145], upward_exposed: [v128, v143, v127, zero], params_defs: []
// [Asm] # live_in: [v121, v127, zero, v120, v119, v128, v143, v129, v122], live_out: [v121, v127, zero, v120, v119, v150, v128, v129, v122]
// [Asm] # block parameters: []
// [Asm] .quick_sort210.395_72:
// [Asm]   th.lurw v145, v128, v127, 2  # live: [v121, v127, zero, v120, v119, v128, v143, v145, v129, v122]
// [Asm]   th.lurw v147, v128, v143, 2  # live: [v122, v121, v127, zero, v120, v119, v128, v143, v147, v145, v129]
// [Asm]   th.surw v147, v128, v127, 2  # live: [v121, v127, zero, v120, v119, v128, v143, v129, v145, v122]
// [Asm]   th.surw v145, v128, v143, 2  # live: [v121, v127, zero, v120, v119, v128, v129, v122]
// [Asm] # control
// [Asm]   mv v150, zero  # live: [v121, v127, zero, v120, v119, v150, v128, v129, v122]
// [Asm] 
// [Asm] # block info: defs: [v151, v127], uses: [v151, v128, v127, v129], upward_exposed: [v128, v127, v129], params_defs: [v150]
// [Asm] # live_in: [v121, v127, zero, v120, v119, v150, v128, v129, v122], live_out: [v121, v127, zero, v120, v119, v128, v129, v122]
// [Asm] # block parameters: [v150]
// [Asm] .quick_sort210.395_71:
// [Asm]   addi v151, v127, -1  # live: [v121, zero, v120, v119, v151, v128, v129, v122]
// [Asm] # control
// [Asm]   mv v127, v151  # live: [v121, v127, zero, v120, v119, v128, v129, v122]
// [Asm]   mv v128, v128  # live: [v121, v127, zero, v120, v119, v128, v129, v122]
// [Asm]   mv v129, v129  # live: [v121, v127, zero, v120, v119, v128, v129, v122]
// [Asm]   j .quick_sort210.395_62  # live: [v121, v127, zero, v120, v119, v128, v129, v122]
// [Asm] 
// [Asm] # block info: defs: [v91], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v88, s11, v12], live_out: [v11, v91, v10, zero, v88, s11, v12]
// [Asm] # block parameters: []
// [Asm] .quick_sort210.395_13:
// [Asm] # control
// [Asm]   mv v91, zero  # live: [v11, v91, v10, zero, v88, s11, v12]
// [Asm]   j .quick_sort210.395_14  # live: [v11, v91, v10, zero, v88, s11, v12]
// [Asm] 
// [Asm] # block info: defs: [v139], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v120, v121, zero, v122, v119], live_out: [v121, zero, v119, v120, v139, v122]
// [Asm] # block parameters: []
// [Asm] .quick_sort210.395_66:
// [Asm] # control
// [Asm]   mv v139, zero  # live: [v122, v121, v139, zero, v119, v120]
// [Asm] 
// [Asm] # block info: defs: [v140], uses: [v139], upward_exposed: [v139], params_defs: [v139]
// [Asm] # live_in: [v121, zero, v119, v120, v139, v122], live_out: [v121, zero, v120, v119, v140, v122]
// [Asm] # block parameters: [v139]
// [Asm] .quick_sort210.395_67:
// [Asm] # control
// [Asm]   mv v140, v139  # live: [v122, v140, v121, zero, v120, v119]
// [Asm] 
// [Asm] # block info: defs: [v141], uses: [v140], upward_exposed: [v140], params_defs: [v140]
// [Asm] # live_in: [v121, zero, v119, v120, v140, v122], live_out: [v121, zero, v119, v120, v141, v122]
// [Asm] # block parameters: [v140]
// [Asm] .quick_sort210.395_68:
// [Asm] # control
// [Asm]   mv v141, v140  # live: [v122, v141, v121, zero, v119, v120]
// [Asm] 
// [Asm] # block info: defs: [v142, v119], uses: [v122, v142, v121, v119, v120], upward_exposed: [v122, v121, v119, v120], params_defs: [v141]
// [Asm] # live_in: [v121, zero, v120, v119, v141, v122], live_out: [v119, v121, zero, v120, v122]
// [Asm] # block parameters: [v141]
// [Asm] .quick_sort210.395_61:
// [Asm]   addi v142, v119, 1  # live: [v121, v142, zero, v122, v120]
// [Asm] # control
// [Asm]   mv v119, v142  # live: [v120, v121, zero, v122, v119]
// [Asm]   mv v120, v120  # live: [v120, v121, zero, v122, v119]
// [Asm]   mv v121, v121  # live: [v120, v121, zero, v122, v119]
// [Asm]   mv v122, v122  # live: [v120, v121, zero, v122, v119]
// [Asm]   j .quick_sort210.395_55  # live: [v120, v121, zero, v122, v119]
// [Asm] 
// [Asm] # block info: defs: [v140], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v119, v121, zero, v120, v122], live_out: [v121, zero, v120, v119, v140, v122]
// [Asm] # block parameters: []
// [Asm] .quick_sort210.395_64:
// [Asm] # control
// [Asm]   mv v140, zero  # live: [v119, v140, v121, zero, v122, v120]
// [Asm]   j .quick_sort210.395_68  # live: [v119, v140, v121, zero, v122, v120]
// [Asm] 
// [Asm] # block info: defs: [v125], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v125]
// [Asm] # block parameters: []
// [Asm] .quick_sort210.395_57:
// [Asm] # control
// [Asm]   mv v125, zero  # live: [v125]
// [Asm] 
// [Asm] # block info: defs: [v126], uses: [v125], upward_exposed: [v125], params_defs: [v125]
// [Asm] # live_in: [v125], live_out: [v126]
// [Asm] # block parameters: [v125]
// [Asm] .quick_sort210.395_58:
// [Asm] # control
// [Asm]   mv v126, v125  # live: [v126]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v126, a0], upward_exposed: [v126], params_defs: [v126]
// [Asm] # live_in: [v126], live_out: []
// [Asm] # block parameters: [v126]
// [Asm] .quick_sort210.395_15:
// [Asm] # control
// [Asm]   mv a0, v126  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call main239.401  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("swap", Unit), args: [("arr", Array(Int)), ("i", Int), ("j", Int)], body: Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j"))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit)))}, LetRec({name: ("output", Unit), args: [("arr", Array(Int)), ("i", Int), ("len", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Var("arr"), Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("len")]))), Unit)}, LetRec({name: ("insertion_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: LetRec({name: ("g", Unit), args: [("j", Int)], body: If(LE(Prim(Int(1), Var("low"), Add, kind=Some(Int)), Var("j")), If(LE(Get(Var("arr"), Var("j")), Prim(Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))]), App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])), Unit), Unit)}, LetRec({name: ("f", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("j", Var({val: Some(Int)})), Var("i"), Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("f"), [Prim(Var("low"), Int(1), Add, kind=Some(Int))])))}, LetRec({name: ("partition", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("pivot_index", Int), ("low", Int), ("high", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("pivot_index"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Var("low")), Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))))))))}, LetRec({name: ("choose_pivot", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("use_median_of_medians", Var({val: Some(Int)})), Int(50), Let(("swaps", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))))))}, LetRec({name: ("quick_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))))}, LetRec({name: ("sort", Unit), args: [("x", Array(Int)), ("len", Int)], body: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), [])))))))))
// [Knf] build_knf: Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j"))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit)))
// [Knf] build_knf: Get(Var("arr"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j"))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit))
// [Knf] build_knf: Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j")))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("arr"), Var("j"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit)
// [Knf] build_knf: Put(Var("arr"), Var("j"), Var("tmp"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Var("tmp")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("output", Unit), args: [("arr", Array(Int)), ("i", Int), ("len", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Var("arr"), Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("len")]))), Unit)}, LetRec({name: ("insertion_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: LetRec({name: ("g", Unit), args: [("j", Int)], body: If(LE(Prim(Int(1), Var("low"), Add, kind=Some(Int)), Var("j")), If(LE(Get(Var("arr"), Var("j")), Prim(Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))]), App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])), Unit), Unit)}, LetRec({name: ("f", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("j", Var({val: Some(Int)})), Var("i"), Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("f"), [Prim(Var("low"), Int(1), Add, kind=Some(Int))])))}, LetRec({name: ("partition", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("pivot_index", Int), ("low", Int), ("high", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("pivot_index"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Var("low")), Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))))))))}, LetRec({name: ("choose_pivot", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("use_median_of_medians", Var({val: Some(Int)})), Int(50), Let(("swaps", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))))))}, LetRec({name: ("quick_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))))}, LetRec({name: ("sort", Unit), args: [("x", Array(Int)), ("len", Int)], body: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), []))))))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Var("arr"), Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("len")]))), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Var("arr"), Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("len")])))
// [Knf] build_knf: App(Var("print_int"), [Get(Var("arr"), Var("i"))])
// [Knf] build_knf: Get(Var("arr"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Var("arr"), Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("len")]))
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: App(Var("output"), [Var("arr"), Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("len")])
// [Knf] build_knf: Var("output")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("insertion_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: LetRec({name: ("g", Unit), args: [("j", Int)], body: If(LE(Prim(Int(1), Var("low"), Add, kind=Some(Int)), Var("j")), If(LE(Get(Var("arr"), Var("j")), Prim(Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))]), App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])), Unit), Unit)}, LetRec({name: ("f", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("j", Var({val: Some(Int)})), Var("i"), Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("f"), [Prim(Var("low"), Int(1), Add, kind=Some(Int))])))}, LetRec({name: ("partition", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("pivot_index", Int), ("low", Int), ("high", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("pivot_index"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Var("low")), Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))))))))}, LetRec({name: ("choose_pivot", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("use_median_of_medians", Var({val: Some(Int)})), Int(50), Let(("swaps", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))))))}, LetRec({name: ("quick_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))))}, LetRec({name: ("sort", Unit), args: [("x", Array(Int)), ("len", Int)], body: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), [])))))))
// [Knf] build_knf: LetRec({name: ("g", Unit), args: [("j", Int)], body: If(LE(Prim(Int(1), Var("low"), Add, kind=Some(Int)), Var("j")), If(LE(Get(Var("arr"), Var("j")), Prim(Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))]), App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])), Unit), Unit)}, LetRec({name: ("f", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("j", Var({val: Some(Int)})), Var("i"), Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("f"), [Prim(Var("low"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: If(LE(Prim(Int(1), Var("low"), Add, kind=Some(Int)), Var("j")), If(LE(Get(Var("arr"), Var("j")), Prim(Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))]), App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])), Unit), Unit)
// [Knf] build_knf: Prim(Int(1), Var("low"), Add, kind=Some(Int))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: If(LE(Get(Var("arr"), Var("j")), Prim(Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))]), App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])), Unit)
// [Knf] build_knf: Get(Var("arr"), Var("j"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("j"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))]), App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))]))
// [Knf] build_knf: App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("swap")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Var("j"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Prim(Var("j"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("f", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("j", Var({val: Some(Int)})), Var("i"), Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("f"), [Prim(Var("low"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("j", Var({val: Some(Int)})), Var("i"), Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("high"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("j", Var({val: Some(Int)})), Var("i"), Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("g"), [Var("j")])
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("f"), [Prim(Var("low"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Prim(Var("low"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("partition", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("pivot_index", Int), ("low", Int), ("high", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("pivot_index"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Var("low")), Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))))))))}, LetRec({name: ("choose_pivot", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("use_median_of_medians", Var({val: Some(Int)})), Int(50), Let(("swaps", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))))))}, LetRec({name: ("quick_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))))}, LetRec({name: ("sort", Unit), args: [("x", Array(Int)), ("len", Int)], body: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), []))))))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("pivot_index"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Var("low")), Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))))))))
// [Knf] build_knf: App(Var("swap"), [Var("arr"), Var("pivot_index"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("swap")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("pivot_index")
// [Knf] build_knf: Prim(Var("high"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Var("low")), Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))])))))))
// [Knf] build_knf: Get(Var("arr"), Prim(Var("high"), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("high"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Var("low")), Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))))))
// [Knf] build_knf: Array(Int(1), Var("low"))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))])))))
// [Knf] build_knf: Array(Int(1), Int(1))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))))
// [Knf] build_knf: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Var("high"), Int(2), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit)
// [Knf] build_knf: Get(Var("arr"), Var("j"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("pivot")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit))
// [Knf] build_knf: If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0))))
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))
// [Knf] build_knf: App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])
// [Knf] build_knf: Var("swap")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Put(Var("partitioned"), Int(0), Int(0))
// [Knf] build_knf: Var("partitioned")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)
// [Knf] build_knf: Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("j"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))])))
// [Knf] build_knf: App(Var("aux"), [Var("low")])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))
// [Knf] build_knf: App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("swap")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Var("high"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))])
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Eq(Get(Var("partitioned"), Int(0)), Int(1))
// [Knf] build_knf: Get(Var("partitioned"), Int(0))
// [Knf] build_knf: Var("partitioned")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("choose_pivot", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("use_median_of_medians", Var({val: Some(Int)})), Int(50), Let(("swaps", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))))))}, LetRec({name: ("quick_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))))}, LetRec({name: ("sort", Unit), args: [("x", Array(Int)), ("len", Int)], body: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), [])))))
// [Knf] build_knf: Let(("use_median_of_medians", Var({val: Some(Int)})), Int(50), Let(("swaps", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))))))
// [Knf] build_knf: Int(50)
// [Knf] build_knf: Let(("swaps", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))])))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))))
// [Knf] build_knf: Prim(Var("high"), Var("low"), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))])))
// [Knf] build_knf: Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int))
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int))
// [Knf] build_knf: Prim(Var("len"), Int(4), Div, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(4)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))
// [Knf] build_knf: If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit)
// [Knf] build_knf: Int(8)
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")]))))))
// [Knf] build_knf: Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int))
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int))
// [Knf] build_knf: Prim(Var("len"), Int(4), Div, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(4)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))
// [Knf] build_knf: Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int))
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int))
// [Knf] build_knf: Prim(Var("len"), Int(4), Div, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(4)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")]))))
// [Knf] build_knf: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)
// [Knf] build_knf: Get(Var("arr"), Var("b"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("arr"), Var("a"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int))))
// [Knf] build_knf: App(Var("swap"), [Var("arr"), Var("a"), Var("b")])
// [Knf] build_knf: Var("swap")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("swaps")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("swaps"), Int(0))
// [Knf] build_knf: Var("swaps")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))
// [Knf] build_knf: App(Var("sort_2"), [Var("a"), Var("b")])
// [Knf] build_knf: Var("sort_2")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")]))
// [Knf] build_knf: App(Var("sort_2"), [Var("b"), Var("c")])
// [Knf] build_knf: Var("sort_2")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: App(Var("sort_2"), [Var("a"), Var("b")])
// [Knf] build_knf: Var("sort_2")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")]))
// [Knf] build_knf: If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit)
// [Knf] build_knf: Var("use_median_of_medians")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("sort_3")
// [Knf] build_knf: Prim(Var("a"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Prim(Var("a"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("sort_3")
// [Knf] build_knf: Prim(Var("b"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Prim(Var("b"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("sort_3")
// [Knf] build_knf: Prim(Var("c"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Prim(Var("c"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("sort_3")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Unit
// [Knf] build_knf: Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))])
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Eq(Get(Var("swaps"), Int(0)), Int(0))
// [Knf] build_knf: Get(Var("swaps"), Int(0))
// [Knf] build_knf: Var("swaps")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("quick_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))))}, LetRec({name: ("sort", Unit), args: [("x", Array(Int)), ("len", Int)], body: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), []))))
// [Knf] build_knf: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))))
// [Knf] build_knf: Prim(Var("high"), Var("low"), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")])))))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(16)
// [Knf] build_knf: App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")])
// [Knf] build_knf: Var("insertion_sort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Var("high")
// [Knf] build_knf: LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))
// [Knf] build_knf: App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")])
// [Knf] build_knf: Var("choose_pivot")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Var("high")
// [Knf] build_knf: LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")])))
// [Knf] build_knf: App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")])
// [Knf] build_knf: Var("partition")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("pivot_index")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))
// [Knf] build_knf: App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")])
// [Knf] build_knf: Var("quick_sort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Var("pivot")
// [Knf] build_knf: App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")])
// [Knf] build_knf: Var("quick_sort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("pivot"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pivot")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("high")
// [Knf] build_knf: LetRec({name: ("sort", Unit), args: [("x", Array(Int)), ("len", Int)], body: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), [])))
// [Knf] build_knf: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])
// [Knf] build_knf: Var("quick_sort")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("len")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))
// [Knf] build_knf: App(Var("read_int"), [])
// [Knf] build_knf: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")])))))
// [Knf] build_knf: Array(Var("len"), Int(0))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("arr"), Var("i"), App(Var("read_int"), []))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("read_int"), [])
// [Knf] build_knf: App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("input")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")])))
// [Knf] build_knf: App(Var("input"), [Int(0)])
// [Knf] build_knf: Var("input")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))
// [Knf] build_knf: App(Var("sort"), [Var("arr"), Var("len")])
// [Knf] build_knf: Var("sort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("len")
// [Knf] build_knf: App(Var("output"), [Var("arr"), Int(0), Var("len")])
// [Knf] build_knf: Var("output")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("len")
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl sort_2157.398
// [Main]   .type sort_2157.398, @function
// [Main] # leaf true
// [Main] sort_2157.398:
// [Main] .sort_2157.398_0:
// [Main]   mv a4, a1
// [Main]   th.lurw a1, a3, a4, 2
// [Main]   th.lurw a5, a3, a0, 2
// [Main]   addi a5, a5, -1
// [Main]   blt a5, a1, .sort_2157.398_2
// [Main] 
// [Main] .sort_2157.398_1:
// [Main] 
// [Main] .sort_2157.398_8:
// [Main]   th.lurw a1, a3, a0, 2
// [Main]   th.lurw a5, a3, a4, 2
// [Main]   th.surw a5, a3, a0, 2
// [Main]   th.surw a1, a3, a4, 2
// [Main]   mv a0, zero
// [Main] 
// [Main] .sort_2157.398_4:
// [Main]   lw a0, 0(a2)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(a2)
// [Main]   mv a0, zero
// [Main] 
// [Main] .sort_2157.398_3:
// [Main]   ret
// [Main] 
// [Main] .sort_2157.398_2:
// [Main]   mv a0, zero
// [Main]   j .sort_2157.398_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl input243.402
// [Main]   .type input243.402, @function
// [Main] # leaf false
// [Main] input243.402:
// [Main] .input243.402_5:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s2, a0
// [Main]   mv s1, a1
// [Main]   mv s0, a2
// [Main] 
// [Main] .input243.402_0:
// [Main]   addi a0, s0, -1
// [Main]   blt a0, s2, .input243.402_2
// [Main] 
// [Main] .input243.402_1:
// [Main]   call minimbt_read_int
// [Main]   th.surw a0, s1, s2, 2
// [Main]   addi s2, s2, 1
// [Main]   j .input243.402_0
// [Main] 
// [Main] .input243.402_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .input243.402_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl output14.394
// [Main]   .type output14.394, @function
// [Main] # leaf false
// [Main] output14.394:
// [Main] .output14.394_5:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   mv s2, a2
// [Main] 
// [Main] .output14.394_0:
// [Main]   addi a0, s2, -1
// [Main]   blt a0, s1, .output14.394_2
// [Main] 
// [Main] .output14.394_1:
// [Main]   th.lurw a0, s0, s1, 2
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   addi s1, s1, 1
// [Main]   j .output14.394_0
// [Main] 
// [Main] .output14.394_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .output14.394_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main239.401
// [Main]   .type main239.401, @function
// [Main] # leaf false
// [Main] main239.401:
// [Main] .main239.401_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   call minimbt_read_int
// [Main]   mv s0, a0
// [Main]   slliw a0, s0, 2
// [Main]   sub s1, s11, a0
// [Main]   andi s11, s1, -8
// [Main]   mv a0, zero
// [Main]   mv a1, s1
// [Main]   mv a2, s0
// [Main]   call input243.402
// [Main]   mv a0, s1
// [Main]   mv a1, zero
// [Main]   mv a2, s0
// [Main]   call quick_sort210.395
// [Main]   mv a0, s1
// [Main]   mv a1, zero
// [Main]   mv a2, s0
// [Main]   call output14.394
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl quick_sort210.395
// [Main]   .type quick_sort210.395, @function
// [Main] # leaf false
// [Main] quick_sort210.395:
// [Main] .quick_sort210.395_17:
// [Main]   addi sp, sp, -80
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   sd s6, 56(sp)
// [Main]   sd s7, 64(sp)
// [Main]   sd s8, 72(sp)
// [Main]   mv s1, a0
// [Main]   mv s0, a1
// [Main]   mv s2, a2
// [Main] 
// [Main] .quick_sort210.395_0:
// [Main]   sub a0, s2, s0
// [Main]   li a1, 16
// [Main]   bge a1, a0, .quick_sort210.395_1
// [Main] 
// [Main] .quick_sort210.395_2:
// [Main]   addi s7, s11, -4
// [Main]   andi s11, s7, -8
// [Main]   sw zero, 0(s7)
// [Main]   sub a0, s2, s0
// [Main]   srai a1, a0, 2
// [Main]   slli a1, a1, 1
// [Main]   add s3, s0, a1
// [Main]   li a1, 8
// [Main]   blt a0, a1, .quick_sort210.395_4
// [Main] 
// [Main] .quick_sort210.395_3:
// [Main]   srai a1, a0, 2
// [Main]   add s6, s0, a1
// [Main]   li a2, 3
// [Main]   mul a1, a1, a2
// [Main]   add s5, s0, a1
// [Main]   addi a0, a0, -1
// [Main]   li a1, 50
// [Main]   blt a0, a1, .quick_sort210.395_6
// [Main] 
// [Main] .quick_sort210.395_5:
// [Main]   addi s4, s6, -1
// [Main]   addi s8, s6, 1
// [Main] 
// [Main] .quick_sort210.395_76:
// [Main]   mv a0, s4
// [Main]   mv a1, s6
// [Main]   mv a2, s7
// [Main]   mv a3, s1
// [Main]   call sort_2157.398
// [Main]   mv a0, s6
// [Main]   mv a1, s8
// [Main]   mv a2, s7
// [Main]   mv a3, s1
// [Main]   call sort_2157.398
// [Main]   mv a0, s4
// [Main]   mv a1, s6
// [Main]   mv a2, s7
// [Main]   mv a3, s1
// [Main]   call sort_2157.398
// [Main] 
// [Main] .quick_sort210.395_21:
// [Main]   addi s4, s3, -1
// [Main]   addi s8, s3, 1
// [Main] 
// [Main] .quick_sort210.395_101:
// [Main]   mv a0, s4
// [Main]   mv a1, s3
// [Main]   mv a2, s7
// [Main]   mv a3, s1
// [Main]   call sort_2157.398
// [Main]   mv a0, s3
// [Main]   mv a1, s8
// [Main]   mv a2, s7
// [Main]   mv a3, s1
// [Main]   call sort_2157.398
// [Main]   mv a0, s4
// [Main]   mv a1, s3
// [Main]   mv a2, s7
// [Main]   mv a3, s1
// [Main]   call sort_2157.398
// [Main] 
// [Main] .quick_sort210.395_22:
// [Main]   addi s4, s5, -1
// [Main]   addi s8, s5, 1
// [Main] 
// [Main] .quick_sort210.395_73:
// [Main]   mv a0, s4
// [Main]   mv a1, s5
// [Main]   mv a2, s7
// [Main]   mv a3, s1
// [Main]   call sort_2157.398
// [Main]   mv a0, s5
// [Main]   mv a1, s8
// [Main]   mv a2, s7
// [Main]   mv a3, s1
// [Main]   call sort_2157.398
// [Main]   mv a0, s4
// [Main]   mv a1, s5
// [Main]   mv a2, s7
// [Main]   mv a3, s1
// [Main]   call sort_2157.398
// [Main] 
// [Main] .quick_sort210.395_7:
// [Main] 
// [Main] .quick_sort210.395_104:
// [Main]   mv a0, s6
// [Main]   mv a1, s3
// [Main]   mv a2, s7
// [Main]   mv a3, s1
// [Main]   call sort_2157.398
// [Main]   mv a0, s3
// [Main]   mv a1, s5
// [Main]   mv a2, s7
// [Main]   mv a3, s1
// [Main]   call sort_2157.398
// [Main]   mv a0, s6
// [Main]   mv a1, s3
// [Main]   mv a2, s7
// [Main]   mv a3, s1
// [Main]   call sort_2157.398
// [Main] 
// [Main] .quick_sort210.395_8:
// [Main]   lw a0, 0(s7)
// [Main]   bne a0, zero, .quick_sort210.395_10
// [Main] 
// [Main] .quick_sort210.395_9:
// [Main]   li a0, 1
// [Main]   mv a1, a0
// [Main] 
// [Main] .quick_sort210.395_11:
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   sw s3, 0(a0)
// [Main]   sw a1, 4(a0)
// [Main]   lw a0, 0(a0)
// [Main]   addi a1, s2, -1
// [Main] 
// [Main] .quick_sort210.395_79:
// [Main]   th.lurw a2, s1, a0, 2
// [Main]   th.lurw a3, s1, a1, 2
// [Main]   th.surw a3, s1, a0, 2
// [Main]   th.surw a2, s1, a1, 2
// [Main]   mv a0, zero
// [Main] 
// [Main] .quick_sort210.395_18:
// [Main]   addi a0, s2, -1
// [Main]   th.lurw a0, s1, a0, 2
// [Main]   addi a2, s11, -4
// [Main]   andi s11, a2, -8
// [Main]   sw s0, 0(a2)
// [Main]   addi a3, s11, -4
// [Main]   andi s11, a3, -8
// [Main]   li a1, 1
// [Main]   sw a1, 0(a3)
// [Main] 
// [Main] .quick_sort210.395_94:
// [Main]   mv a1, s0
// [Main]   mv t0, s1
// [Main]   mv a7, s2
// [Main] 
// [Main] .quick_sort210.395_83:
// [Main]   addi a4, a7, -2
// [Main]   blt a4, a1, .quick_sort210.395_85
// [Main] 
// [Main] .quick_sort210.395_84:
// [Main]   th.lurw a4, t0, a1, 2
// [Main]   addi a5, a0, -1
// [Main]   blt a5, a4, .quick_sort210.395_87
// [Main] 
// [Main] .quick_sort210.395_86:
// [Main]   lw a4, 0(a2)
// [Main]   beq a4, a1, .quick_sort210.395_88
// [Main] 
// [Main] .quick_sort210.395_89:
// [Main]   lw a4, 0(a2)
// [Main] 
// [Main] .quick_sort210.395_97:
// [Main]   th.lurw a5, t0, a4, 2
// [Main]   th.lurw a6, t0, a1, 2
// [Main]   th.surw a6, t0, a4, 2
// [Main]   th.surw a5, t0, a1, 2
// [Main]   mv a4, zero
// [Main] 
// [Main] .quick_sort210.395_95:
// [Main]   sw zero, 0(a3)
// [Main]   mv a4, zero
// [Main] 
// [Main] .quick_sort210.395_90:
// [Main]   lw a4, 0(a2)
// [Main]   addi a4, a4, 1
// [Main]   sw a4, 0(a2)
// [Main]   mv a4, zero
// [Main] 
// [Main] .quick_sort210.395_91:
// [Main]   addi a1, a1, 1
// [Main]   j .quick_sort210.395_83
// [Main] 
// [Main] .quick_sort210.395_88:
// [Main]   mv a4, zero
// [Main]   j .quick_sort210.395_90
// [Main] 
// [Main] .quick_sort210.395_87:
// [Main]   mv a4, zero
// [Main]   j .quick_sort210.395_91
// [Main] 
// [Main] .quick_sort210.395_85:
// [Main]   mv a0, zero
// [Main] 
// [Main] .quick_sort210.395_92:
// [Main] 
// [Main] .quick_sort210.395_19:
// [Main]   lw a0, 0(a2)
// [Main]   addi a1, s2, -1
// [Main] 
// [Main] .quick_sort210.395_51:
// [Main]   th.lurw a4, s1, a0, 2
// [Main]   th.lurw a5, s1, a1, 2
// [Main]   th.surw a5, s1, a0, 2
// [Main]   th.surw a4, s1, a1, 2
// [Main]   mv a0, zero
// [Main] 
// [Main] .quick_sort210.395_20:
// [Main]   lw a0, 0(a2)
// [Main]   lw a1, 0(a3)
// [Main]   li a2, 1
// [Main]   bne a1, a2, .quick_sort210.395_13
// [Main] 
// [Main] .quick_sort210.395_12:
// [Main]   li a1, 1
// [Main] 
// [Main] .quick_sort210.395_14:
// [Main]   addi a2, s11, -8
// [Main]   andi s11, a2, -8
// [Main]   sw a0, 0(a2)
// [Main]   sw a1, 4(a2)
// [Main]   lw s3, 0(a2)
// [Main]   mv a0, s1
// [Main]   mv a1, s0
// [Main]   mv a2, s3
// [Main]   call quick_sort210.395
// [Main]   addi s0, s3, 1
// [Main]   j .quick_sort210.395_0
// [Main] 
// [Main] .quick_sort210.395_10:
// [Main]   mv a1, zero
// [Main]   j .quick_sort210.395_11
// [Main] 
// [Main] .quick_sort210.395_6:
// [Main]   mv a0, zero
// [Main]   j .quick_sort210.395_7
// [Main] 
// [Main] .quick_sort210.395_4:
// [Main]   mv a0, zero
// [Main]   j .quick_sort210.395_8
// [Main] 
// [Main] .quick_sort210.395_1:
// [Main]   addi a0, s0, 1
// [Main] 
// [Main] .quick_sort210.395_60:
// [Main]   mv a1, s1
// [Main]   mv a2, s0
// [Main]   mv a3, s2
// [Main] 
// [Main] .quick_sort210.395_55:
// [Main]   addi a4, a3, -1
// [Main]   blt a4, a0, .quick_sort210.395_57
// [Main] 
// [Main] .quick_sort210.395_56:
// [Main] 
// [Main] .quick_sort210.395_70:
// [Main]   mv a4, a0
// [Main] 
// [Main] .quick_sort210.395_62:
// [Main]   addi a5, a2, 1
// [Main]   blt a4, a5, .quick_sort210.395_64
// [Main] 
// [Main] .quick_sort210.395_63:
// [Main]   th.lurw a5, a1, a4, 2
// [Main]   addi a6, a4, -1
// [Main]   th.lurw a6, a1, a6, 2
// [Main]   addi a6, a6, -1
// [Main]   blt a6, a5, .quick_sort210.395_66
// [Main] 
// [Main] .quick_sort210.395_65:
// [Main]   addi a6, a4, -1
// [Main] 
// [Main] .quick_sort210.395_72:
// [Main]   th.lurw a5, a1, a4, 2
// [Main]   th.lurw a7, a1, a6, 2
// [Main]   th.surw a7, a1, a4, 2
// [Main]   th.surw a5, a1, a6, 2
// [Main]   mv a5, zero
// [Main] 
// [Main] .quick_sort210.395_71:
// [Main]   addi a4, a4, -1
// [Main]   j .quick_sort210.395_62
// [Main] 
// [Main] .quick_sort210.395_13:
// [Main]   mv a1, zero
// [Main]   j .quick_sort210.395_14
// [Main] 
// [Main] .quick_sort210.395_66:
// [Main]   mv a4, zero
// [Main] 
// [Main] .quick_sort210.395_67:
// [Main] 
// [Main] .quick_sort210.395_68:
// [Main] 
// [Main] .quick_sort210.395_61:
// [Main]   addi a0, a0, 1
// [Main]   j .quick_sort210.395_55
// [Main] 
// [Main] .quick_sort210.395_64:
// [Main]   mv a4, zero
// [Main]   j .quick_sort210.395_68
// [Main] 
// [Main] .quick_sort210.395_57:
// [Main]   mv a0, zero
// [Main] 
// [Main] .quick_sort210.395_58:
// [Main] 
// [Main] .quick_sort210.395_15:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   ld s6, 56(sp)
// [Main]   ld s7, 64(sp)
// [Main]   ld s8, 72(sp)
// [Main]   addi sp, sp, 80
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call main239.401
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Wasm] LoweringOrder: [0, 2, 1, 8, 4, 3]
// [Wasm] LoweringOrder: [[1, 2], [3], [8], [4], [3], []]
// [Wasm] LoweringOrder: HashMap::of([(b4, 0), (b1, 0), (b8, 0), (b2, 1), (b3, 0), (b0, 0)])
// [Wasm] LoweringOrder: [b0, b1, b8, b4, b3, b2]
// [Wasm] LoweringOrder: HashMap::of([(b4, 3), (b1, 1), (b8, 2), (b2, 0), (b3, 4), (b0, 0)])
// [Wasm] Lowering function sort_2157.398
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f4, fpref=$f.2), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%5), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f4, fpref=$f.2), index=0, width=@32), val=Insn(iref=%6))
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f4, fpref=$f.3), offset=FnParam(fref=f4, fpref=$f.0), width=@32))
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f4, fpref=$f.3), offset=FnParam(fref=f4, fpref=$f.1), width=@32))
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f4, fpref=$f.3), offset=FnParam(fref=f4, fpref=$f.0), width=@32), val=Insn(iref=%9))
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f4, fpref=$f.3), offset=FnParam(fref=f4, fpref=$f.1), width=@32), val=Insn(iref=%8))
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering control Jump(target=b4, args=[Unit])
// [Wasm] Lowering control Jump(target=b8, args=[])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f4, fpref=$f.3), offset=FnParam(fref=f4, fpref=$f.1), width=@32))
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f4, fpref=$f.3), offset=FnParam(fref=f4, fpref=$f.0), width=@32))
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%1), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%0), Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.3) -> $$f.3
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Lowered function sort_2157.398 to wasm
// [Wasm] LoweringOrder: [5, 0, 2, 3, 1]
// [Wasm] LoweringOrder: [[4], [1, 2], [3], [], [0]]
// [Wasm] LoweringOrder: HashMap::of([(b1, 0), (b5, 0), (b2, 1), (b3, 1), (b0, 0)])
// [Wasm] LoweringOrder: [b5, b0, b1, b2, b3]
// [Wasm] LoweringOrder: HashMap::of([(b1, 2), (b5, 0), (b2, 0), (b3, 1), (b0, 1)])
// [Wasm] Lowering function input243.402
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_int", args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), offset=BlockParam(bref=b0, bpref=$b.0), width=@32), val=Insn(iref=%2))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%4), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f8, fpref=$f.0), FnParam(fref=f8, fpref=$f.1), FnParam(fref=f8, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function input243.402 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function main239.401
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_int", args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Zero])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Mem(fref=f9, mref=m0) -> $f9.m0
// [Wasm] Lowering insn Call(ty=Unit, f=f8, args=[Int32(val=0), Mem(fref=f9, mref=m0), Insn(iref=%0)])
// [Wasm] Get Local name Mem(fref=f9, mref=m0) -> $f9.m0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Call(ty=Unit, f=f7, args=[Mem(fref=f9, mref=m0), Int32(val=0), Insn(iref=%0)])
// [Wasm] Get Local name Mem(fref=f9, mref=m0) -> $f9.m0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Call(ty=Unit, f=f1, args=[Mem(fref=f9, mref=m0), Int32(val=0), Insn(iref=%0)])
// [Wasm] Get Local name Mem(fref=f9, mref=m0) -> $f9.m0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%4)])
// [Wasm] Local Mem(fref=f9, mref=m0) -> $f9.m0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function main239.401 to wasm
// [Wasm] LoweringOrder: [5, 0, 2, 3, 1]
// [Wasm] LoweringOrder: [[4], [1, 2], [3], [], [0]]
// [Wasm] LoweringOrder: HashMap::of([(b1, 0), (b5, 0), (b2, 1), (b3, 1), (b0, 0)])
// [Wasm] LoweringOrder: [b5, b0, b1, b2, b3]
// [Wasm] LoweringOrder: HashMap::of([(b1, 2), (b5, 0), (b2, 0), (b3, 1), (b0, 1)])
// [Wasm] Lowering function output14.394
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), offset=BlockParam(bref=b0, bpref=$b.1), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%5), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f1, fpref=$f.0), FnParam(fref=f1, fpref=$f.1), FnParam(fref=f1, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function output14.394 to wasm
// [Wasm] LoweringOrder: [17, 0, 2, 4, 3, 6, 5, 76, 21, 101, 22, 73, 7, 104, 8, 10, 9, 11, 79, 18, 94, 83, 85, 92, 19, 51, 20, 13, 12, 14, 84, 87, 86, 89, 97, 95, 88, 90, 91, 1, 60, 55, 57, 58, 15, 56, 70, 62, 64, 63, 66, 67, 68, 61, 65, 72, 71]
// [Wasm] LoweringOrder: [[16], [1, 2], [3, 4], [8], [5, 6], [7], [76], [21], [101], [22], [73], [7], [104], [8], [9, 10], [11], [11], [79], [18], [94], [93], [84, 85], [92], [19], [51], [20], [12, 13], [14], [14], [0], [86, 87], [91], [88, 89], [97], [95], [90], [90], [91], [83], [60], [59], [56, 57], [58], [15], [], [70], [69], [63, 64], [68], [65, 66], [67], [68], [61], [55], [72], [71], [62]]
// [Wasm] LoweringOrder: HashMap::of([(b9, 0), (b85, 3), (b60, 8), (b13, 10), (b87, 2), (b92, 3), (b15, 14), (b62, 8), (b65, 8), (b84, 0), (b1, 8), (b97, 0), (b2, 0), (b22, 0), (b90, 0), (b101, 0), (b6, 6), (b12, 3), (b58, 14), (b83, 0), (b89, 0), (b61, 11), (b64, 12), (b67, 11), (b10, 5), (b86, 0), (b5, 0), (b14, 3), (b8, 0), (b19, 3), (b57, 14), (b11, 0), (b18, 0), (b104, 0), (b88, 1), (b21, 0), (b79, 0), (b70, 8), (b20, 3), (b72, 8), (b4, 7), (b55, 8), (b17, 0), (b68, 11), (b71, 8), (b0, 0), (b94, 0), (b66, 11), (b76, 0), (b73, 0), (b95, 0), (b51, 3), (b56, 8), (b3, 0), (b7, 0), (b91, 0), (b63, 8)])
// [Wasm] LoweringOrder: [b17, b0, b2, b3, b5, b76, b21, b101, b22, b73, b7, b104, b8, b9, b11, b79, b18, b94, b83, b84, b86, b89, b97, b95, b90, b91, b88, b87, b85, b92, b19, b51, b20, b12, b14, b10, b6, b4, b1, b60, b55, b56, b70, b62, b63, b65, b72, b71, b13, b66, b67, b68, b61, b64, b57, b58, b15]
// [Wasm] LoweringOrder: HashMap::of([(b9, 13), (b85, 0), (b60, 1), (b13, 0), (b87, 0), (b92, 1), (b15, 2), (b62, 5), (b65, 7), (b84, 19), (b1, 0), (b97, 22), (b2, 2), (b22, 8), (b90, 24), (b101, 7), (b6, 0), (b12, 5), (b58, 1), (b83, 18), (b89, 21), (b61, 3), (b64, 0), (b67, 1), (b10, 0), (b86, 20), (b5, 4), (b14, 6), (b8, 12), (b19, 2), (b57, 0), (b11, 14), (b18, 16), (b104, 11), (b88, 0), (b21, 6), (b79, 15), (b70, 4), (b20, 4), (b72, 8), (b4, 0), (b55, 2), (b17, 0), (b68, 2), (b71, 9), (b0, 1), (b94, 17), (b66, 0), (b76, 5), (b73, 9), (b95, 23), (b51, 3), (b56, 3), (b3, 3), (b7, 10), (b91, 25), (b63, 6)])
// [Wasm] Lowering function quick_sort210.395
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b62, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b62, bpref=$b.0) -> $b62.$b.0
// [Wasm] Get Local name Insn(iref=%68) -> $%68
// [Wasm] Lowering control Jump(target=b62, args=[Insn(iref=%68), BlockParam(bref=b62, bpref=$b.1), BlockParam(bref=b62, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%68) -> $%68
// [Wasm] Get Local name BlockParam(bref=b62, bpref=$b.0) -> $b62.$b.0
// [Wasm] Get Local name BlockParam(bref=b62, bpref=$b.1) -> $b62.$b.1
// [Wasm] Get Local name BlockParam(bref=b62, bpref=$b.1) -> $b62.$b.1
// [Wasm] Get Local name BlockParam(bref=b62, bpref=$b.2) -> $b62.$b.2
// [Wasm] Get Local name BlockParam(bref=b62, bpref=$b.2) -> $b62.$b.2
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b62, bpref=$b.1), offset=BlockParam(bref=b62, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b62, bpref=$b.1) -> $b62.$b.1
// [Wasm] Get Local name BlockParam(bref=b62, bpref=$b.0) -> $b62.$b.0
// [Wasm] Get Local name Insn(iref=%69) -> $%69
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b62, bpref=$b.1), offset=Insn(iref=%66), width=@32))
// [Wasm] Get Local name BlockParam(bref=b62, bpref=$b.1) -> $b62.$b.1
// [Wasm] Get Local name Insn(iref=%66) -> $%66
// [Wasm] Get Local name Insn(iref=%70) -> $%70
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b62, bpref=$b.1), offset=BlockParam(bref=b62, bpref=$b.0), width=@32), val=Insn(iref=%70))
// [Wasm] Get Local name BlockParam(bref=b62, bpref=$b.1) -> $b62.$b.1
// [Wasm] Get Local name BlockParam(bref=b62, bpref=$b.0) -> $b62.$b.0
// [Wasm] Get Local name Insn(iref=%70) -> $%70
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b62, bpref=$b.1), offset=Insn(iref=%66), width=@32), val=Insn(iref=%69))
// [Wasm] Get Local name BlockParam(bref=b62, bpref=$b.1) -> $b62.$b.1
// [Wasm] Get Local name Insn(iref=%66) -> $%66
// [Wasm] Get Local name Insn(iref=%69) -> $%69
// [Wasm] Lowering control Jump(target=b71, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b62, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b62, bpref=$b.0) -> $b62.$b.0
// [Wasm] Get Local name Insn(iref=%66) -> $%66
// [Wasm] Lowering control Jump(target=b72, args=[])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b55, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b55, bpref=$b.0) -> $b55.$b.0
// [Wasm] Get Local name Insn(iref=%58) -> $%58
// [Wasm] Lowering control Jump(target=b55, args=[Insn(iref=%58), BlockParam(bref=b55, bpref=$b.1), BlockParam(bref=b55, bpref=$b.2), BlockParam(bref=b55, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%58) -> $%58
// [Wasm] Get Local name BlockParam(bref=b55, bpref=$b.0) -> $b55.$b.0
// [Wasm] Get Local name BlockParam(bref=b55, bpref=$b.1) -> $b55.$b.1
// [Wasm] Get Local name BlockParam(bref=b55, bpref=$b.1) -> $b55.$b.1
// [Wasm] Get Local name BlockParam(bref=b55, bpref=$b.2) -> $b55.$b.2
// [Wasm] Get Local name BlockParam(bref=b55, bpref=$b.2) -> $b55.$b.2
// [Wasm] Get Local name BlockParam(bref=b55, bpref=$b.3) -> $b55.$b.3
// [Wasm] Get Local name BlockParam(bref=b55, bpref=$b.3) -> $b55.$b.3
// [Wasm] Lowering control Jump(target=b61, args=[BlockParam(bref=b68, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b68, args=[BlockParam(bref=b67, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b67, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b62, bpref=$b.1), offset=BlockParam(bref=b62, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b62, bpref=$b.1) -> $b62.$b.1
// [Wasm] Get Local name BlockParam(bref=b62, bpref=$b.0) -> $b62.$b.0
// [Wasm] Get Local name Insn(iref=%61) -> $%61
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b62, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b62, bpref=$b.0) -> $b62.$b.0
// [Wasm] Get Local name Insn(iref=%62) -> $%62
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b62, bpref=$b.1), offset=Insn(iref=%62), width=@32))
// [Wasm] Get Local name BlockParam(bref=b62, bpref=$b.1) -> $b62.$b.1
// [Wasm] Get Local name Insn(iref=%62) -> $%62
// [Wasm] Get Local name Insn(iref=%63) -> $%63
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%63), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%63) -> $%63
// [Wasm] Get Local name Insn(iref=%64) -> $%64
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%61), Insn(iref=%64)])
// [Wasm] Get Local name Insn(iref=%61) -> $%61
// [Wasm] Get Local name Insn(iref=%64) -> $%64
// [Wasm] Get Local name Insn(iref=%65) -> $%65
// [Wasm] Lowering control Branch(cond=Insn(iref=%65), t=b65, t_args=[], f=b66, f_args=[])
// [Wasm] Get Local name Insn(iref=%65) -> $%65
// [Wasm] Lowering control Jump(target=b68, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Int32(val=1), BlockParam(bref=b62, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b62, bpref=$b.2) -> $b62.$b.2
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%59), BlockParam(bref=b62, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Get Local name BlockParam(bref=b62, bpref=$b.0) -> $b62.$b.0
// [Wasm] Get Local name Insn(iref=%60) -> $%60
// [Wasm] Lowering control Branch(cond=Insn(iref=%60), t=b63, t_args=[], f=b64, f_args=[])
// [Wasm] Get Local name Insn(iref=%60) -> $%60
// [Wasm] Lowering control Jump(target=b69, args=[BlockParam(bref=b55, bpref=$b.0), BlockParam(bref=b55, bpref=$b.1), BlockParam(bref=b55, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b55, bpref=$b.0) -> $b55.$b.0
// [Wasm] Get Local name BlockParam(bref=b62, bpref=$b.0) -> $b62.$b.0
// [Wasm] Get Local name BlockParam(bref=b55, bpref=$b.1) -> $b55.$b.1
// [Wasm] Get Local name BlockParam(bref=b62, bpref=$b.1) -> $b62.$b.1
// [Wasm] Get Local name BlockParam(bref=b55, bpref=$b.2) -> $b55.$b.2
// [Wasm] Get Local name BlockParam(bref=b62, bpref=$b.2) -> $b62.$b.2
// [Wasm] Lowering control Jump(target=b70, args=[])
// [Wasm] Lowering control Return(args=[BlockParam(bref=b15, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b15, args=[BlockParam(bref=b58, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b58, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b55, bpref=$b.3), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b55, bpref=$b.3) -> $b55.$b.3
// [Wasm] Get Local name Insn(iref=%55) -> $%55
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b55, bpref=$b.0), Insn(iref=%55)])
// [Wasm] Get Local name BlockParam(bref=b55, bpref=$b.0) -> $b55.$b.0
// [Wasm] Get Local name Insn(iref=%55) -> $%55
// [Wasm] Get Local name Insn(iref=%56) -> $%56
// [Wasm] Lowering control Branch(cond=Insn(iref=%56), t=b56, t_args=[], f=b57, f_args=[])
// [Wasm] Get Local name Insn(iref=%56) -> $%56
// [Wasm] Lowering control Jump(target=b59, args=[Insn(iref=%2), BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b55, bpref=$b.0) -> $b55.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b55, bpref=$b.1) -> $b55.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b55, bpref=$b.2) -> $b55.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b55, bpref=$b.3) -> $b55.$b.3
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Jump(target=b60, args=[])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b83, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b83, bpref=$b.0) -> $b83.$b.0
// [Wasm] Get Local name Insn(iref=%96) -> $%96
// [Wasm] Lowering control Jump(target=b83, args=[Insn(iref=%96), BlockParam(bref=b83, bpref=$b.1), BlockParam(bref=b83, bpref=$b.2), BlockParam(bref=b83, bpref=$b.3), BlockParam(bref=b83, bpref=$b.4), BlockParam(bref=b83, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%96) -> $%96
// [Wasm] Get Local name BlockParam(bref=b83, bpref=$b.0) -> $b83.$b.0
// [Wasm] Get Local name BlockParam(bref=b83, bpref=$b.1) -> $b83.$b.1
// [Wasm] Get Local name BlockParam(bref=b83, bpref=$b.1) -> $b83.$b.1
// [Wasm] Get Local name BlockParam(bref=b83, bpref=$b.2) -> $b83.$b.2
// [Wasm] Get Local name BlockParam(bref=b83, bpref=$b.2) -> $b83.$b.2
// [Wasm] Get Local name BlockParam(bref=b83, bpref=$b.3) -> $b83.$b.3
// [Wasm] Get Local name BlockParam(bref=b83, bpref=$b.3) -> $b83.$b.3
// [Wasm] Get Local name BlockParam(bref=b83, bpref=$b.4) -> $b83.$b.4
// [Wasm] Get Local name BlockParam(bref=b83, bpref=$b.4) -> $b83.$b.4
// [Wasm] Get Local name BlockParam(bref=b83, bpref=$b.5) -> $b83.$b.5
// [Wasm] Get Local name BlockParam(bref=b83, bpref=$b.5) -> $b83.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b83, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b83, bpref=$b.1) -> $b83.$b.1
// [Wasm] Get Local name Insn(iref=%93) -> $%93
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%93), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%93) -> $%93
// [Wasm] Get Local name Insn(iref=%94) -> $%94
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b83, bpref=$b.1), index=0, width=@32), val=Insn(iref=%94))
// [Wasm] Get Local name BlockParam(bref=b83, bpref=$b.1) -> $b83.$b.1
// [Wasm] Get Local name Insn(iref=%94) -> $%94
// [Wasm] Lowering control Jump(target=b91, args=[Unit])
// [Wasm] Lowering control Jump(target=b90, args=[Unit])
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b83, bpref=$b.5), index=0, width=@32), val=Int32(val=0))
// [Wasm] Get Local name BlockParam(bref=b83, bpref=$b.5) -> $b83.$b.5
// [Wasm] Lowering control Jump(target=b90, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b83, bpref=$b.3), offset=Insn(iref=%90), width=@32))
// [Wasm] Get Local name BlockParam(bref=b83, bpref=$b.3) -> $b83.$b.3
// [Wasm] Get Local name Insn(iref=%90) -> $%90
// [Wasm] Get Local name Insn(iref=%97) -> $%97
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b83, bpref=$b.3), offset=BlockParam(bref=b83, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b83, bpref=$b.3) -> $b83.$b.3
// [Wasm] Get Local name BlockParam(bref=b83, bpref=$b.0) -> $b83.$b.0
// [Wasm] Get Local name Insn(iref=%98) -> $%98
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b83, bpref=$b.3), offset=Insn(iref=%90), width=@32), val=Insn(iref=%98))
// [Wasm] Get Local name BlockParam(bref=b83, bpref=$b.3) -> $b83.$b.3
// [Wasm] Get Local name Insn(iref=%90) -> $%90
// [Wasm] Get Local name Insn(iref=%98) -> $%98
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b83, bpref=$b.3), offset=BlockParam(bref=b83, bpref=$b.0), width=@32), val=Insn(iref=%97))
// [Wasm] Get Local name BlockParam(bref=b83, bpref=$b.3) -> $b83.$b.3
// [Wasm] Get Local name BlockParam(bref=b83, bpref=$b.0) -> $b83.$b.0
// [Wasm] Get Local name Insn(iref=%97) -> $%97
// [Wasm] Lowering control Jump(target=b95, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b83, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b83, bpref=$b.1) -> $b83.$b.1
// [Wasm] Get Local name Insn(iref=%90) -> $%90
// [Wasm] Lowering control Jump(target=b97, args=[])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b83, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b83, bpref=$b.1) -> $b83.$b.1
// [Wasm] Get Local name Insn(iref=%88) -> $%88
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%88), BlockParam(bref=b83, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%88) -> $%88
// [Wasm] Get Local name BlockParam(bref=b83, bpref=$b.0) -> $b83.$b.0
// [Wasm] Get Local name Insn(iref=%89) -> $%89
// [Wasm] Lowering control Branch(cond=Insn(iref=%89), t=b88, t_args=[], f=b89, f_args=[])
// [Wasm] Get Local name Insn(iref=%89) -> $%89
// [Wasm] Lowering control Jump(target=b91, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b83, bpref=$b.3), offset=BlockParam(bref=b83, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b83, bpref=$b.3) -> $b83.$b.3
// [Wasm] Get Local name BlockParam(bref=b83, bpref=$b.0) -> $b83.$b.0
// [Wasm] Get Local name Insn(iref=%85) -> $%85
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b83, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b83, bpref=$b.2) -> $b83.$b.2
// [Wasm] Get Local name Insn(iref=%86) -> $%86
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%85), Insn(iref=%86)])
// [Wasm] Get Local name Insn(iref=%85) -> $%85
// [Wasm] Get Local name Insn(iref=%86) -> $%86
// [Wasm] Get Local name Insn(iref=%87) -> $%87
// [Wasm] Lowering control Branch(cond=Insn(iref=%87), t=b86, t_args=[], f=b87, f_args=[])
// [Wasm] Get Local name Insn(iref=%87) -> $%87
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Bool]), mref=m4, fills=[Field(index=0, val=Insn(iref=%43)), Field(index=1, val=BlockParam(bref=b14, bpref=$b.0))])
// [Wasm] Get Local name Mem(fref=f7, mref=m4) -> $f7.m4
// [Wasm] Get Local name Mem(fref=f7, mref=m4) -> $f7.m4
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Get Local name Mem(fref=f7, mref=m4) -> $f7.m4
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.0) -> $b14.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f7, mref=m4), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Mem(fref=f7, mref=m4) -> $f7.m4
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Lowering insn Load(ty=Bool, ma=Field(ty=Bool, val=Mem(fref=f7, mref=m4), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Mem(fref=f7, mref=m4) -> $f7.m4
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Lowering insn Call(ty=Unit, f=f7, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%47)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%47), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Get Local name Insn(iref=%50) -> $%50
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%50), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%50) -> $%50
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering control Jump(target=b14, args=[Bool(val=true)])
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.0) -> $b14.$b.0
// [Wasm] Lowering control Jump(target=b14, args=[Bool(val=false)])
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.0) -> $b14.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f7, mref=m2), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f7, mref=m2) -> $f7.m2
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f7, mref=m3), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f7, mref=m3) -> $f7.m3
// [Wasm] Get Local name Insn(iref=%44) -> $%44
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%44), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%44) -> $%44
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Lowering control Branch(cond=Insn(iref=%45), t=b12, t_args=[], f=b13, f_args=[])
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), offset=Insn(iref=%40), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), offset=Insn(iref=%41), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Get Local name Insn(iref=%52) -> $%52
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), offset=Insn(iref=%40), width=@32), val=Insn(iref=%52))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Get Local name Insn(iref=%52) -> $%52
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), offset=Insn(iref=%41), width=@32), val=Insn(iref=%51))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Lowering control Jump(target=b20, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f7, mref=m2), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f7, mref=m2) -> $f7.m2
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Lowering control Jump(target=b51, args=[])
// [Wasm] Lowering control Jump(target=b19, args=[BlockParam(bref=b92, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b92, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b83, bpref=$b.4), Int32(val=2)])
// [Wasm] Get Local name BlockParam(bref=b83, bpref=$b.4) -> $b83.$b.4
// [Wasm] Get Local name Insn(iref=%83) -> $%83
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b83, bpref=$b.0), Insn(iref=%83)])
// [Wasm] Get Local name BlockParam(bref=b83, bpref=$b.0) -> $b83.$b.0
// [Wasm] Get Local name Insn(iref=%83) -> $%83
// [Wasm] Get Local name Insn(iref=%84) -> $%84
// [Wasm] Lowering control Branch(cond=Insn(iref=%84), t=b84, t_args=[], f=b85, f_args=[])
// [Wasm] Get Local name Insn(iref=%84) -> $%84
// [Wasm] Lowering control Jump(target=b93, args=[BlockParam(bref=b0, bpref=$b.1), Mem(fref=f7, mref=m2), Insn(iref=%36), BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.2), Mem(fref=f7, mref=m3)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b83, bpref=$b.0) -> $b83.$b.0
// [Wasm] Get Local name Mem(fref=f7, mref=m2) -> $f7.m2
// [Wasm] Get Local name BlockParam(bref=b83, bpref=$b.1) -> $b83.$b.1
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Get Local name BlockParam(bref=b83, bpref=$b.2) -> $b83.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b83, bpref=$b.3) -> $b83.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b83, bpref=$b.4) -> $b83.$b.4
// [Wasm] Get Local name Mem(fref=f7, mref=m3) -> $f7.m3
// [Wasm] Get Local name BlockParam(bref=b83, bpref=$b.5) -> $b83.$b.5
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), offset=Insn(iref=%35), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m2, fills=[Init(val=BlockParam(bref=b0, bpref=$b.1))])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Mem(fref=f7, mref=m2) -> $f7.m2
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m3, fills=[Init(val=Int32(val=1))])
// [Wasm] Get Local name Mem(fref=f7, mref=m3) -> $f7.m3
// [Wasm] Lowering control Jump(target=b94, args=[])
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), offset=Insn(iref=%31), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Get Local name Insn(iref=%79) -> $%79
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), offset=Insn(iref=%33), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%33) -> $%33
// [Wasm] Get Local name Insn(iref=%80) -> $%80
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), offset=Insn(iref=%31), width=@32), val=Insn(iref=%80))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Get Local name Insn(iref=%80) -> $%80
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), offset=Insn(iref=%33), width=@32), val=Insn(iref=%79))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%33) -> $%33
// [Wasm] Get Local name Insn(iref=%79) -> $%79
// [Wasm] Lowering control Jump(target=b18, args=[Unit])
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Bool]), mref=m1, fills=[Field(index=0, val=Insn(iref=%8)), Field(index=1, val=BlockParam(bref=b11, bpref=$b.0))])
// [Wasm] Get Local name Mem(fref=f7, mref=m1) -> $f7.m1
// [Wasm] Get Local name Mem(fref=f7, mref=m1) -> $f7.m1
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Mem(fref=f7, mref=m1) -> $f7.m1
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f7, mref=m1), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Mem(fref=f7, mref=m1) -> $f7.m1
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering insn Load(ty=Bool, ma=Field(ty=Bool, val=Mem(fref=f7, mref=m1), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Mem(fref=f7, mref=m1) -> $f7.m1
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%33) -> $%33
// [Wasm] Lowering control Jump(target=b79, args=[])
// [Wasm] Lowering control Jump(target=b11, args=[Bool(val=true)])
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Lowering control Jump(target=b11, args=[Bool(val=false)])
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f7, mref=m0), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%28), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering control Branch(cond=Insn(iref=%29), t=b9, t_args=[], f=b10, f_args=[])
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[Insn(iref=%12), Insn(iref=%8), Mem(fref=f7, mref=m0), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[Insn(iref=%8), Insn(iref=%15), Mem(fref=f7, mref=m0), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[Insn(iref=%12), Insn(iref=%8), Mem(fref=f7, mref=m0), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering control Jump(target=b8, args=[Insn(iref=%106)])
// [Wasm] Lowering control Jump(target=b104, args=[])
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[Insn(iref=%24), Insn(iref=%15), Mem(fref=f7, mref=m0), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[Insn(iref=%15), Insn(iref=%25), Mem(fref=f7, mref=m0), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[Insn(iref=%24), Insn(iref=%15), Mem(fref=f7, mref=m0), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering control Jump(target=b7, args=[Insn(iref=%75)])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%15), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%15), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering control Jump(target=b73, args=[])
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[Insn(iref=%21), Insn(iref=%8), Mem(fref=f7, mref=m0), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[Insn(iref=%8), Insn(iref=%22), Mem(fref=f7, mref=m0), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[Insn(iref=%21), Insn(iref=%8), Mem(fref=f7, mref=m0), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering control Jump(target=b22, args=[Insn(iref=%103)])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%8), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%8), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering control Jump(target=b101, args=[])
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[Insn(iref=%18), Insn(iref=%12), Mem(fref=f7, mref=m0), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[Insn(iref=%12), Insn(iref=%19), Mem(fref=f7, mref=m0), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[Insn(iref=%18), Insn(iref=%12), Mem(fref=f7, mref=m0), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering control Jump(target=b21, args=[Insn(iref=%78)])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%12), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%12), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering control Jump(target=b76, args=[])
// [Wasm] Lowering control Jump(target=b7, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Div, args=[Insn(iref=%5), Int32(val=4)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%10), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%11)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%10), Int32(val=3)])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%14)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%5), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=50), Insn(iref=%16)])
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering control Branch(cond=Insn(iref=%17), t=b5, t_args=[], f=b6, f_args=[])
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering control Jump(target=b8, args=[Unit])
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Int32, op=Div, args=[Insn(iref=%5), Int32(val=4)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%6), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%7)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=8), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering control Branch(cond=Insn(iref=%9), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%0), Int32(val=16)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b16, args=[FnParam(fref=f7, fpref=$f.0), FnParam(fref=f7, fpref=$f.1), FnParam(fref=f7, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local Insn(iref=%41) -> $%41
// [Wasm] Local Insn(iref=%33) -> $%33
// [Wasm] Local Insn(iref=%63) -> $%63
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%88) -> $%88
// [Wasm] Local Insn(iref=%25) -> $%25
// [Wasm] Local Insn(iref=%59) -> $%59
// [Wasm] Local Insn(iref=%96) -> $%96
// [Wasm] Local Insn(iref=%56) -> $%56
// [Wasm] Local Insn(iref=%94) -> $%94
// [Wasm] Local Insn(iref=%65) -> $%65
// [Wasm] Local Insn(iref=%68) -> $%68
// [Wasm] Local Mem(fref=f7, mref=m1) -> $f7.m1
// [Wasm] Local Insn(iref=%93) -> $%93
// [Wasm] Local Insn(iref=%31) -> $%31
// [Wasm] Local Insn(iref=%64) -> $%64
// [Wasm] Local Insn(iref=%83) -> $%83
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local Insn(iref=%60) -> $%60
// [Wasm] Local Insn(iref=%84) -> $%84
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local BlockParam(bref=b62, bpref=$b.0) -> $b62.$b.0
// [Wasm] Local Mem(fref=f7, mref=m2) -> $f7.m2
// [Wasm] Local Insn(iref=%79) -> $%79
// [Wasm] Local BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Local Insn(iref=%55) -> $%55
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%66) -> $%66
// [Wasm] Local Insn(iref=%48) -> $%48
// [Wasm] Local BlockParam(bref=b83, bpref=$b.3) -> $b83.$b.3
// [Wasm] Local BlockParam(bref=b83, bpref=$b.0) -> $b83.$b.0
// [Wasm] Local Mem(fref=f7, mref=m4) -> $f7.m4
// [Wasm] Local Insn(iref=%36) -> $%36
// [Wasm] Local Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Local Insn(iref=%89) -> $%89
// [Wasm] Local BlockParam(bref=b83, bpref=$b.5) -> $b83.$b.5
// [Wasm] Local Insn(iref=%90) -> $%90
// [Wasm] Local Insn(iref=%50) -> $%50
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local BlockParam(bref=b55, bpref=$b.1) -> $b55.$b.1
// [Wasm] Local Insn(iref=%51) -> $%51
// [Wasm] Local BlockParam(bref=b14, bpref=$b.0) -> $b14.$b.0
// [Wasm] Local Insn(iref=%80) -> $%80
// [Wasm] Local Insn(iref=%52) -> $%52
// [Wasm] Local Insn(iref=%44) -> $%44
// [Wasm] Local Insn(iref=%32) -> $%32
// [Wasm] Local Insn(iref=%58) -> $%58
// [Wasm] Local Insn(iref=%87) -> $%87
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local BlockParam(bref=b55, bpref=$b.2) -> $b55.$b.2
// [Wasm] Local BlockParam(bref=b55, bpref=$b.0) -> $b55.$b.0
// [Wasm] Local Insn(iref=%86) -> $%86
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%35) -> $%35
// [Wasm] Local Insn(iref=%62) -> $%62
// [Wasm] Local BlockParam(bref=b83, bpref=$b.4) -> $b83.$b.4
// [Wasm] Local BlockParam(bref=b62, bpref=$b.1) -> $b62.$b.1
// [Wasm] Local BlockParam(bref=b83, bpref=$b.1) -> $b83.$b.1
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local Insn(iref=%97) -> $%97
// [Wasm] Local BlockParam(bref=b62, bpref=$b.2) -> $b62.$b.2
// [Wasm] Local Insn(iref=%24) -> $%24
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local BlockParam(bref=b83, bpref=$b.2) -> $b83.$b.2
// [Wasm] Local BlockParam(bref=b55, bpref=$b.3) -> $b55.$b.3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local Insn(iref=%45) -> $%45
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%29) -> $%29
// [Wasm] Local Insn(iref=%70) -> $%70
// [Wasm] Local Insn(iref=%47) -> $%47
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%61) -> $%61
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%98) -> $%98
// [Wasm] Local Mem(fref=f7, mref=m3) -> $f7.m3
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%85) -> $%85
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%43) -> $%43
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local Insn(iref=%40) -> $%40
// [Wasm] Local Insn(iref=%69) -> $%69
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function quick_sort210.395 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f9, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [KnfOpt] freq: {swap1: Many(5), output14: Many(2), insertion_sort30: Once, g37: Many(2), f54: Many(2), partition65: Once, aux86: Many(2), choose_pivot129: Once, sort_2157: Many(3), sort_3173: Many(4), quick_sort210: Many(3), sort233: Once, main239: Once, input243: Many(2)}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 5 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 31
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 31
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 13
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 13
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 5 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 5 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 51
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 51
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 5 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 5 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 23
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 23
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 23
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 4 5
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 4 5
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 4 5
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 4 5
// [KnfOpt] Inline decision rejected
// [KnfOpt] Knf inline Some(insertion_sort30)
// [KnfOpt] Knf inline Some(choose_pivot129)
// [KnfOpt] Knf inline Some(partition65)
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 19
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 19
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 291
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Knf inline Some(sort233)
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Inline decision rejected
// [KnfOpt] freq: {swap1: Many(5), output14: Many(2), quick_sort210: Many(3), g37.259: Many(2), f54.274: Many(2), sort_2157.305: Many(3), sort_3173.318: Many(4), aux86.356: Many(2), main239: Once, input243: Many(2)}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 5 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 31
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 31
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 13
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 13
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 5 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 23
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 23
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 23
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 4 5
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 4 5
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 4 5
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 4 5
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 5 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 5 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 51
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 51
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 5 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 291
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 291
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 291
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Inline decision rejected
// [KnfOpt] freq: {swap1: Many(5), output14: Many(2), quick_sort210: Many(3), g37.259: Many(2), f54.274: Many(2), sort_2157.305: Many(3), sort_3173.318: Many(4), aux86.356: Many(2), main239: Once, input243: Many(2)}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 5 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 31
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 31
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 13
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 13
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 5 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 23
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 23
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 23
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 4 5
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 4 5
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 4 5
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 4 5
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 5 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 5 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 51
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 51
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 5 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 291
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 291
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 291
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Inline decision rejected
// [KnfOpt] Numbers of let rec: 10 10 0
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %14: Call(ty=Unit, f=f6, args=[Insn(iref=%13), FnParam(fref=f6, fpref=$f.1), FnParam(fref=f6, fpref=$f.2), FnParam(fref=f6, fpref=$f.3), FnParam(fref=f6, fpref=$f.4), FnParam(fref=f6, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %5: Call(ty=Unit, f=f8, args=[Insn(iref=%4), FnParam(fref=f8, fpref=$f.1), FnParam(fref=f8, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %6: Call(ty=Unit, f=f1, args=[FnParam(fref=f1, fpref=$f.0), Insn(iref=%5), FnParam(fref=f1, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %10: Call(ty=Unit, f=f2, args=[Insn(iref=%9), FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %4: Call(ty=Unit, f=f3, args=[Insn(iref=%3), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3)])
// [CoreOpt] eliminated tail rec call %51: Call(ty=Unit, f=f7, args=[FnParam(fref=f7, fpref=$f.0), Insn(iref=%50), FnParam(fref=f7, fpref=$f.2)])
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f4: Multiple, f8: Once, f9: Once, f0: Multiple, f1: Once, f5: Multiple, f2: Once, f3: Once, f7: Multiple, f20: Once})
// [CoreOpt] allow_inline: true %8 swap1.393 true false true true true
// [CoreOpt] post splitting: Insn(iref=%8) -> BlockParam(bref=b12, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%8) -> BlockParam(bref=b12, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%8) -> BlockParam(bref=b12, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%8) -> BlockParam(bref=b12, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%8) -> BlockParam(bref=b12, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%8) -> BlockParam(bref=b12, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%8) -> BlockParam(bref=b12, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%8) -> BlockParam(bref=b12, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%8) -> BlockParam(bref=b12, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%8) -> BlockParam(bref=b12, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%8) -> BlockParam(bref=b12, bpref=$b.0)
// [CoreOpt] allow_inline: false %8 swap1.393 true false false true true
// [CoreOpt] allow_inline: true %4 swap1.393 true false true true true
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b4, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b4, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b4, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b4, bpref=$b.0)
// [CoreOpt] allow_inline: false %4 swap1.393 true false false true true
// [CoreOpt] allow_inline: false %2 input243.402 false true true false true
// [CoreOpt] allow_inline: false %3 quick_sort210.395 false false true false true
// [CoreOpt] allow_inline: false %4 output14.394 false true true false true
// [CoreOpt] allow_inline: false %0 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %1 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %2 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: true %8 swap1.393 true false true true true
// [CoreOpt] post splitting: Insn(iref=%8) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%8) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%8) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%8) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%8) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%8) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%8) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%8) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] allow_inline: false %8 swap1.393 true false false true true
// [CoreOpt] allow_inline: true %2 g37.396 true true true false true
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] allow_inline: false %2 g37.396 true true false false true
// [CoreOpt] allow_inline: true %3 f54.397 true true true false true
// [CoreOpt] allow_inline: true %34 swap1.393 true false true true true
// [CoreOpt] post splitting: Insn(iref=%34) -> BlockParam(bref=b18, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%34) -> BlockParam(bref=b18, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%34) -> BlockParam(bref=b18, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%34) -> BlockParam(bref=b18, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%34) -> BlockParam(bref=b18, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%34) -> BlockParam(bref=b18, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%34) -> BlockParam(bref=b18, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%34) -> BlockParam(bref=b18, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%34) -> BlockParam(bref=b18, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%34) -> BlockParam(bref=b18, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%34) -> BlockParam(bref=b18, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%34) -> BlockParam(bref=b18, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%34) -> BlockParam(bref=b18, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%34) -> BlockParam(bref=b18, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%34) -> BlockParam(bref=b18, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%34) -> BlockParam(bref=b18, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%34) -> BlockParam(bref=b18, bpref=$b.0)
// [CoreOpt] allow_inline: false %3 f54.397 true true false false true
// [CoreOpt] allow_inline: false %34 swap1.393 true false false true true
// [CoreOpt] allow_inline: true %39 aux86.400 true true true false true
// [CoreOpt] post splitting: Insn(iref=%39) -> BlockParam(bref=b19, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%39) -> BlockParam(bref=b19, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%39) -> BlockParam(bref=b19, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%39) -> BlockParam(bref=b19, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%39) -> BlockParam(bref=b19, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%39) -> BlockParam(bref=b19, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%39) -> BlockParam(bref=b19, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%39) -> BlockParam(bref=b19, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%39) -> BlockParam(bref=b19, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%39) -> BlockParam(bref=b19, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%39) -> BlockParam(bref=b19, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%39) -> BlockParam(bref=b19, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%39) -> BlockParam(bref=b19, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%39) -> BlockParam(bref=b19, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%39) -> BlockParam(bref=b19, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%39) -> BlockParam(bref=b19, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%39) -> BlockParam(bref=b19, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%39) -> BlockParam(bref=b19, bpref=$b.0)
// [CoreOpt] allow_inline: true %42 swap1.393 true false true true true
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b20, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b20, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b20, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b20, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b20, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b20, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b20, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b20, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b20, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b20, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b20, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b20, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b20, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b20, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b20, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b20, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b20, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b20, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b20, bpref=$b.0)
// [CoreOpt] allow_inline: false %42 swap1.393 true false false true true
// [CoreOpt] allow_inline: false %3 f54.397 true true false false true
// [CoreOpt] allow_inline: false %34 swap1.393 true false false true true
// [CoreOpt] allow_inline: false %39 aux86.400 true true false false true
// [CoreOpt] allow_inline: true %20 sort_3173.399 true false true true true
// [CoreOpt] post splitting: Insn(iref=%20) -> BlockParam(bref=b21, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%20) -> BlockParam(bref=b21, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%20) -> BlockParam(bref=b21, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%20) -> BlockParam(bref=b21, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%20) -> BlockParam(bref=b21, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%20) -> BlockParam(bref=b21, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%20) -> BlockParam(bref=b21, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%20) -> BlockParam(bref=b21, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%20) -> BlockParam(bref=b21, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%20) -> BlockParam(bref=b21, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%20) -> BlockParam(bref=b21, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%20) -> BlockParam(bref=b21, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%20) -> BlockParam(bref=b21, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%20) -> BlockParam(bref=b21, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%20) -> BlockParam(bref=b21, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%20) -> BlockParam(bref=b21, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%20) -> BlockParam(bref=b21, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%20) -> BlockParam(bref=b21, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%20) -> BlockParam(bref=b21, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%20) -> BlockParam(bref=b21, bpref=$b.0)
// [CoreOpt] allow_inline: false %42 swap1.393 true false false true true
// [CoreOpt] allow_inline: false %3 f54.397 true true false false true
// [CoreOpt] allow_inline: false %34 swap1.393 true false false true true
// [CoreOpt] allow_inline: false %39 aux86.400 true true false false true
// [CoreOpt] allow_inline: true %23 sort_3173.399 true false true true true
// [CoreOpt] post splitting: Insn(iref=%23) -> BlockParam(bref=b22, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%23) -> BlockParam(bref=b22, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%23) -> BlockParam(bref=b22, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%23) -> BlockParam(bref=b22, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%23) -> BlockParam(bref=b22, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%23) -> BlockParam(bref=b22, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%23) -> BlockParam(bref=b22, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%23) -> BlockParam(bref=b22, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%23) -> BlockParam(bref=b22, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%23) -> BlockParam(bref=b22, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%23) -> BlockParam(bref=b22, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%23) -> BlockParam(bref=b22, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%23) -> BlockParam(bref=b22, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%23) -> BlockParam(bref=b22, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%23) -> BlockParam(bref=b22, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%23) -> BlockParam(bref=b22, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%23) -> BlockParam(bref=b22, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%23) -> BlockParam(bref=b22, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%23) -> BlockParam(bref=b22, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%23) -> BlockParam(bref=b22, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%23) -> BlockParam(bref=b22, bpref=$b.0)
// [CoreOpt] allow_inline: false %42 swap1.393 true false false true true
// [CoreOpt] allow_inline: false %3 f54.397 true true false false true
// [CoreOpt] allow_inline: false %34 swap1.393 true false false true true
// [CoreOpt] allow_inline: false %39 aux86.400 true true false false true
// [CoreOpt] allow_inline: false %23 sort_3173.399 true false false true true
// [CoreOpt] allow_inline: true %26 sort_3173.399 true false true true true
// [CoreOpt] allow_inline: false %20 sort_3173.399 true false false true true
// [CoreOpt] allow_inline: false %49 quick_sort210.395 true false true false true
// [CoreOpt] allow_inline: true %27 sort_3173.399 true false true true true
// [CoreOpt] allow_inline: false %0 main239.401 false true true true true
// [CoreOpt] allow_inline: true %8 swap1.393 true false true true true
// [CoreOpt] aux86.400 is inlining Call(ty=Unit, f=f0, args=[BlockParam(bref=b0, bpref=$b.3), Insn(iref=%7), BlockParam(bref=b0, bpref=$b.0)])
// [CoreOpt] shifted callee .fn swap1.393 #f0 : fn(array[int32], int32, int32) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b14 {
// [CoreOpt]   .bb #b14 () {
// [CoreOpt]     let %14: int32 = load int32 offset($f0, $f1 * @32)
// [CoreOpt]     let %15: int32 = load int32 offset($f0, $f2 * @32)
// [CoreOpt]     let _ = store int32 offset($f0, $f1 * @32) <- %15
// [CoreOpt]     let _ = store int32 offset($f0, $f2 * @32) <- %14
// [CoreOpt]     return ()
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] allow_inline: true %4 swap1.393 true false true true true
// [CoreOpt] sort_2157.398 is inlining Call(ty=Unit, f=f0, args=[FnParam(fref=f4, fpref=$f.3), FnParam(fref=f4, fpref=$f.0), FnParam(fref=f4, fpref=$f.1)])
// [CoreOpt] shifted callee .fn swap1.393 #f0 : fn(array[int32], int32, int32) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b8 {
// [CoreOpt]   .bb #b8 () {
// [CoreOpt]     let %8: int32 = load int32 offset($f0, $f1 * @32)
// [CoreOpt]     let %9: int32 = load int32 offset($f0, $f2 * @32)
// [CoreOpt]     let _ = store int32 offset($f0, $f1 * @32) <- %9
// [CoreOpt]     let _ = store int32 offset($f0, $f2 * @32) <- %8
// [CoreOpt]     return ()
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] allow_inline: false %2 input243.402 false true true false true
// [CoreOpt] allow_inline: false %3 quick_sort210.395 false false true false true
// [CoreOpt] allow_inline: false %4 output14.394 false true true false true
// [CoreOpt] allow_inline: false %0 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %1 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %2 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: true %8 swap1.393 true false true true true
// [CoreOpt] g37.396 is inlining Call(ty=Unit, f=f0, args=[BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.0), Insn(iref=%7)])
// [CoreOpt] shifted callee .fn swap1.393 #f0 : fn(array[int32], int32, int32) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b10 {
// [CoreOpt]   .bb #b10 () {
// [CoreOpt]     let %10: int32 = load int32 offset($f0, $f1 * @32)
// [CoreOpt]     let %11: int32 = load int32 offset($f0, $f2 * @32)
// [CoreOpt]     let _ = store int32 offset($f0, $f1 * @32) <- %11
// [CoreOpt]     let _ = store int32 offset($f0, $f2 * @32) <- %10
// [CoreOpt]     return ()
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] allow_inline: true %2 g37.396 true true true false true
// [CoreOpt] f54.397 is inlining Call(ty=Unit, f=f2, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [CoreOpt] shifted callee .fn g37.396 #f2 : fn(int32, array[int32], int32) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b15 {
// [CoreOpt]   .bb #b7 (int32, array[int32], int32) {
// [CoreOpt]     let %4: int32 = add(1, $b7.2)
// [CoreOpt]     let %5: bool = le(%4, $b7.0)
// [CoreOpt]     br %5 b8() b9()
// [CoreOpt]   }
// [CoreOpt]   .bb #b8 () {
// [CoreOpt]     let %6: int32 = load int32 offset($b7.1, $b7.0 * @32)
// [CoreOpt]     let %7: int32 = sub($b7.0, 1)
// [CoreOpt]     let %8: int32 = load int32 offset($b7.1, %7 * @32)
// [CoreOpt]     let %9: int32 = sub(%8, 1)
// [CoreOpt]     let %10: bool = le(%6, %9)
// [CoreOpt]     br %10 b10() b11()
// [CoreOpt]   }
// [CoreOpt]   .bb #b9 () {
// [CoreOpt]     jump b13(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b10 () {
// [CoreOpt]     let %11: int32 = sub($b7.0, 1)
// [CoreOpt]     jump b17()
// [CoreOpt]   }
// [CoreOpt]   .bb #b11 () {
// [CoreOpt]     jump b12(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 (unit) {
// [CoreOpt]     jump b13($b12.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b13 (unit) {
// [CoreOpt]     return $b13.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b14 pre #Some(b15) header #b7 {
// [CoreOpt]     .block #b13
// [CoreOpt]     .block #b11
// [CoreOpt]     .block #b8
// [CoreOpt]     .block #b12
// [CoreOpt]     .block #b9
// [CoreOpt]     .block #b10
// [CoreOpt]   }
// [CoreOpt]   .bb #b15 () {
// [CoreOpt]     jump b14($f0, $f1, $f2)
// [CoreOpt]   }
// [CoreOpt]   .bb #b16 (unit) {
// [CoreOpt]     let %13: int32 = sub($b7.0, 1)
// [CoreOpt]     jump b7(%13, $b7.1, $b7.2)
// [CoreOpt]   }
// [CoreOpt]   .bb #b17 () {
// [CoreOpt]     let %14: int32 = load int32 offset($b7.1, $b7.0 * @32)
// [CoreOpt]     let %15: int32 = load int32 offset($b7.1, %11 * @32)
// [CoreOpt]     let _ = store int32 offset($b7.1, $b7.0 * @32) <- %15
// [CoreOpt]     let _ = store int32 offset($b7.1, %11 * @32) <- %14
// [CoreOpt]     jump b16(())
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] allow_inline: true %42 swap1.393 true false true true true
// [CoreOpt] quick_sort210.395 is inlining Call(ty=Unit, f=f0, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%40), Insn(iref=%41)])
// [CoreOpt] shifted callee .fn swap1.393 #f0 : fn(array[int32], int32, int32) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b51 {
// [CoreOpt]   .bb #b51 () {
// [CoreOpt]     let %51: int32 = load int32 offset($f0, $f1 * @32)
// [CoreOpt]     let %52: int32 = load int32 offset($f0, $f2 * @32)
// [CoreOpt]     let _ = store int32 offset($f0, $f1 * @32) <- %52
// [CoreOpt]     let _ = store int32 offset($f0, $f2 * @32) <- %51
// [CoreOpt]     return ()
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] allow_inline: true %3 f54.397 true true true false true
// [CoreOpt] quick_sort210.395 is inlining Call(ty=Unit, f=f3, args=[Insn(iref=%2), BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [CoreOpt] shifted callee .fn f54.397 #f3 : fn(int32, array[int32], int32, int32) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b60 {
// [CoreOpt]   .bb #b55 (int32, array[int32], int32, int32) {
// [CoreOpt]     let %55: int32 = sub($b55.3, 1)
// [CoreOpt]     let %56: bool = le($b55.0, %55)
// [CoreOpt]     br %56 b56() b57()
// [CoreOpt]   }
// [CoreOpt]   .bb #b56 () {
// [CoreOpt]     jump b70()
// [CoreOpt]   }
// [CoreOpt]   .bb #b57 () {
// [CoreOpt]     jump b58(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b58 (unit) {
// [CoreOpt]     return $b58.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b59 pre #Some(b60) header #b55 {
// [CoreOpt]     .block #b56
// [CoreOpt]     .block #b57
// [CoreOpt]     .block #b58
// [CoreOpt]   }
// [CoreOpt]   .bb #b60 () {
// [CoreOpt]     jump b59($f0, $f1, $f2, $f3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b61 (unit) {
// [CoreOpt]     let %58: int32 = add($b55.0, 1)
// [CoreOpt]     jump b55(%58, $b55.1, $b55.2, $b55.3)
// [CoreOpt]   }
// [CoreOpt]   .bb #b62 (int32, array[int32], int32) {
// [CoreOpt]     let %59: int32 = add(1, $b62.2)
// [CoreOpt]     let %60: bool = le(%59, $b62.0)
// [CoreOpt]     br %60 b63() b64()
// [CoreOpt]   }
// [CoreOpt]   .bb #b63 () {
// [CoreOpt]     let %61: int32 = load int32 offset($b62.1, $b62.0 * @32)
// [CoreOpt]     let %62: int32 = sub($b62.0, 1)
// [CoreOpt]     let %63: int32 = load int32 offset($b62.1, %62 * @32)
// [CoreOpt]     let %64: int32 = sub(%63, 1)
// [CoreOpt]     let %65: bool = le(%61, %64)
// [CoreOpt]     br %65 b65() b66()
// [CoreOpt]   }
// [CoreOpt]   .bb #b64 () {
// [CoreOpt]     jump b68(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b65 () {
// [CoreOpt]     let %66: int32 = sub($b62.0, 1)
// [CoreOpt]     jump b72()
// [CoreOpt]   }
// [CoreOpt]   .bb #b66 () {
// [CoreOpt]     jump b67(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b67 (unit) {
// [CoreOpt]     jump b68($b67.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b68 (unit) {
// [CoreOpt]     jump b61($b68.0)
// [CoreOpt]   }
// [CoreOpt]   .loop #b69 pre #Some(b70) header #b62 {
// [CoreOpt]     .block #b68
// [CoreOpt]     .block #b66
// [CoreOpt]     .block #b63
// [CoreOpt]     .block #b67
// [CoreOpt]     .block #b64
// [CoreOpt]     .block #b65
// [CoreOpt]   }
// [CoreOpt]   .bb #b70 () {
// [CoreOpt]     jump b69($b55.0, $b55.1, $b55.2)
// [CoreOpt]   }
// [CoreOpt]   .bb #b71 (unit) {
// [CoreOpt]     let %68: int32 = sub($b62.0, 1)
// [CoreOpt]     jump b62(%68, $b62.1, $b62.2)
// [CoreOpt]   }
// [CoreOpt]   .bb #b72 () {
// [CoreOpt]     let %69: int32 = load int32 offset($b62.1, $b62.0 * @32)
// [CoreOpt]     let %70: int32 = load int32 offset($b62.1, %66 * @32)
// [CoreOpt]     let _ = store int32 offset($b62.1, $b62.0 * @32) <- %70
// [CoreOpt]     let _ = store int32 offset($b62.1, %66 * @32) <- %69
// [CoreOpt]     jump b71(())
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] allow_inline: true %26 sort_3173.399 true false true true true
// [CoreOpt] quick_sort210.395 is inlining Call(ty=Unit, f=f5, args=[Insn(iref=%24), Insn(iref=%15), Insn(iref=%25), Mem(fref=f7, mref=m0), BlockParam(bref=b0, bpref=$b.0)])
// [CoreOpt] shifted callee .fn sort_3173.399 #f5 : fn(int32, int32, int32, array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b73 {
// [CoreOpt]   .bb #b73 () {
// [CoreOpt]     let %73: unit = call f4($f0, $f1, $f3, $f4)
// [CoreOpt]     let %74: unit = call f4($f1, $f2, $f3, $f4)
// [CoreOpt]     let %75: unit = call f4($f0, $f1, $f3, $f4)
// [CoreOpt]     return %75
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] allow_inline: true %20 sort_3173.399 true false true true true
// [CoreOpt] quick_sort210.395 is inlining Call(ty=Unit, f=f5, args=[Insn(iref=%18), Insn(iref=%12), Insn(iref=%19), Mem(fref=f7, mref=m0), BlockParam(bref=b0, bpref=$b.0)])
// [CoreOpt] shifted callee .fn sort_3173.399 #f5 : fn(int32, int32, int32, array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b76 {
// [CoreOpt]   .bb #b76 () {
// [CoreOpt]     let %76: unit = call f4($f0, $f1, $f3, $f4)
// [CoreOpt]     let %77: unit = call f4($f1, $f2, $f3, $f4)
// [CoreOpt]     let %78: unit = call f4($f0, $f1, $f3, $f4)
// [CoreOpt]     return %78
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] allow_inline: false %49 quick_sort210.395 true false true false true
// [CoreOpt] allow_inline: true %34 swap1.393 true false true true true
// [CoreOpt] quick_sort210.395 is inlining Call(ty=Unit, f=f0, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%31), Insn(iref=%33)])
// [CoreOpt] shifted callee .fn swap1.393 #f0 : fn(array[int32], int32, int32) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b79 {
// [CoreOpt]   .bb #b79 () {
// [CoreOpt]     let %79: int32 = load int32 offset($f0, $f1 * @32)
// [CoreOpt]     let %80: int32 = load int32 offset($f0, $f2 * @32)
// [CoreOpt]     let _ = store int32 offset($f0, $f1 * @32) <- %80
// [CoreOpt]     let _ = store int32 offset($f0, $f2 * @32) <- %79
// [CoreOpt]     return ()
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] allow_inline: false %49 quick_sort210.395 true false true false true
// [CoreOpt] allow_inline: true %39 aux86.400 true true true false true
// [CoreOpt] quick_sort210.395 is inlining Call(ty=Unit, f=f6, args=[BlockParam(bref=b0, bpref=$b.1), Mem(fref=f7, mref=m2), Insn(iref=%36), BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.2), Mem(fref=f7, mref=m3)])
// [CoreOpt] shifted callee .fn aux86.400 #f6 : fn(int32, array[int32], int32, array[int32], int32, array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b94 {
// [CoreOpt]   .bb #b83 (int32, array[int32], int32, array[int32], int32, array[int32]) {
// [CoreOpt]     let %83: int32 = sub($b83.4, 2)
// [CoreOpt]     let %84: bool = le($b83.0, %83)
// [CoreOpt]     br %84 b84() b85()
// [CoreOpt]   }
// [CoreOpt]   .bb #b84 () {
// [CoreOpt]     let %85: int32 = load int32 offset($b83.3, $b83.0 * @32)
// [CoreOpt]     let %86: int32 = sub($b83.2, 1)
// [CoreOpt]     let %87: bool = le(%85, %86)
// [CoreOpt]     br %87 b86() b87()
// [CoreOpt]   }
// [CoreOpt]   .bb #b85 () {
// [CoreOpt]     jump b92(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b86 () {
// [CoreOpt]     let %88: int32 = load int32 field($b83.1, 0 * @32)
// [CoreOpt]     let %89: bool = eq(%88, $b83.0)
// [CoreOpt]     br %89 b88() b89()
// [CoreOpt]   }
// [CoreOpt]   .bb #b87 () {
// [CoreOpt]     jump b91(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b88 () {
// [CoreOpt]     jump b90(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b89 () {
// [CoreOpt]     let %90: int32 = load int32 field($b83.1, 0 * @32)
// [CoreOpt]     jump b97()
// [CoreOpt]   }
// [CoreOpt]   .bb #b90 (unit) {
// [CoreOpt]     let %93: int32 = load int32 field($b83.1, 0 * @32)
// [CoreOpt]     let %94: int32 = add(%93, 1)
// [CoreOpt]     let _ = store int32 field($b83.1, 0 * @32) <- %94
// [CoreOpt]     jump b91(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b91 (unit) {
// [CoreOpt]     let %96: int32 = add($b83.0, 1)
// [CoreOpt]     jump b83(%96, $b83.1, $b83.2, $b83.3, $b83.4, $b83.5)
// [CoreOpt]   }
// [CoreOpt]   .bb #b92 (unit) {
// [CoreOpt]     return $b92.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b93 pre #Some(b94) header #b83 {
// [CoreOpt]     .block #b89
// [CoreOpt]     .block #b87
// [CoreOpt]     .block #b91
// [CoreOpt]     .block #b92
// [CoreOpt]     .block #b84
// [CoreOpt]     .block #b88
// [CoreOpt]     .block #b85
// [CoreOpt]     .block #b86
// [CoreOpt]     .block #b90
// [CoreOpt]   }
// [CoreOpt]   .bb #b94 () {
// [CoreOpt]     jump b93($f0, $f1, $f2, $f3, $f4, $f5)
// [CoreOpt]   }
// [CoreOpt]   .bb #b95 (unit) {
// [CoreOpt]     let _ = store int32 field($b83.5, 0 * @32) <- 0
// [CoreOpt]     jump b90(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b97 () {
// [CoreOpt]     let %97: int32 = load int32 offset($b83.3, %90 * @32)
// [CoreOpt]     let %98: int32 = load int32 offset($b83.3, $b83.0 * @32)
// [CoreOpt]     let _ = store int32 offset($b83.3, %90 * @32) <- %98
// [CoreOpt]     let _ = store int32 offset($b83.3, $b83.0 * @32) <- %97
// [CoreOpt]     jump b95(())
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] allow_inline: false %49 quick_sort210.395 true false true false true
// [CoreOpt] allow_inline: true %23 sort_3173.399 true false true true true
// [CoreOpt] quick_sort210.395 is inlining Call(ty=Unit, f=f5, args=[Insn(iref=%21), Insn(iref=%8), Insn(iref=%22), Mem(fref=f7, mref=m0), BlockParam(bref=b0, bpref=$b.0)])
// [CoreOpt] shifted callee .fn sort_3173.399 #f5 : fn(int32, int32, int32, array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b101 {
// [CoreOpt]   .bb #b101 () {
// [CoreOpt]     let %101: unit = call f4($f0, $f1, $f3, $f4)
// [CoreOpt]     let %102: unit = call f4($f1, $f2, $f3, $f4)
// [CoreOpt]     let %103: unit = call f4($f0, $f1, $f3, $f4)
// [CoreOpt]     return %103
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] allow_inline: false %101 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %102 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %103 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %49 quick_sort210.395 true false true false true
// [CoreOpt] allow_inline: false %73 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %74 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %75 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %76 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %77 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %78 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: true %27 sort_3173.399 true false true true true
// [CoreOpt] quick_sort210.395 is inlining Call(ty=Unit, f=f5, args=[Insn(iref=%12), Insn(iref=%8), Insn(iref=%15), Mem(fref=f7, mref=m0), BlockParam(bref=b0, bpref=$b.0)])
// [CoreOpt] shifted callee .fn sort_3173.399 #f5 : fn(int32, int32, int32, array[int32], array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b104 {
// [CoreOpt]   .bb #b104 () {
// [CoreOpt]     let %104: unit = call f4($f0, $f1, $f3, $f4)
// [CoreOpt]     let %105: unit = call f4($f1, $f2, $f3, $f4)
// [CoreOpt]     let %106: unit = call f4($f0, $f1, $f3, $f4)
// [CoreOpt]     return %106
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] allow_inline: false %101 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %102 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %103 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %49 quick_sort210.395 true false true false true
// [CoreOpt] allow_inline: false %104 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %105 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %106 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %73 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %74 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %75 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %76 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %77 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %78 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %0 main239.401 false true true true true
// [CoreOpt] Remove dead function: f6
// [CoreOpt] Remove dead function: f0
// [CoreOpt] Remove dead function: f5
// [CoreOpt] Remove dead function: f2
// [CoreOpt] Remove dead function: f3
// [CoreOpt] allow_inline: false %2 input243.402 false true true false true
// [CoreOpt] allow_inline: false %3 quick_sort210.395 false false true false true
// [CoreOpt] allow_inline: false %4 output14.394 false true true false true
// [CoreOpt] allow_inline: false %101 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %102 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %103 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %49 quick_sort210.395 true false true false true
// [CoreOpt] allow_inline: false %104 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %105 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %106 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %73 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %74 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %75 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %76 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %77 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %78 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %0 main239.401 false true true true true
// [CoreOpt] allow_inline: false %2 input243.402 false true true false true
// [CoreOpt] allow_inline: false %3 quick_sort210.395 false false true false true
// [CoreOpt] allow_inline: false %4 output14.394 false true true false true
// [CoreOpt] allow_inline: false %101 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %102 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %103 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %49 quick_sort210.395 true false true false true
// [CoreOpt] allow_inline: false %104 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %105 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %106 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %73 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %74 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %75 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %76 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %77 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %78 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %0 main239.401 false true true true true
// [CoreOpt] allow_inline: false %2 input243.402 false true true false true
// [CoreOpt] allow_inline: false %3 quick_sort210.395 false false true false true
// [CoreOpt] allow_inline: false %4 output14.394 false true true false true
// [CoreOpt] allow_inline: false %101 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %102 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %103 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %49 quick_sort210.395 true false true false true
// [CoreOpt] allow_inline: false %104 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %105 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %106 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %73 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %74 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %75 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %76 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %77 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %78 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %0 main239.401 false true true true true
// [CoreOpt] allow_inline: false %2 input243.402 false true true false true
// [CoreOpt] allow_inline: false %3 quick_sort210.395 false false true false true
// [CoreOpt] allow_inline: false %4 output14.394 false true true false true
// [CoreOpt] allow_inline: false %101 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %102 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %103 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %49 quick_sort210.395 true false true false true
// [CoreOpt] allow_inline: false %104 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %105 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %106 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %73 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %74 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %75 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %76 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %77 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %78 sort_2157.398 true false true false true
// [CoreOpt] allow_inline: false %0 main239.401 false true true true true
// [CoreOpt] LVN subst Insn(iref=%13) with Insn(iref=%10)
// [CoreOpt2] LVN subst Insn(iref=%18) with Insn(iref=%21)
// [CoreOpt2] LVN subst Insn(iref=%15) with Insn(iref=%20)
// [CoreOpt2] LVN subst Insn(iref=%114) with Insn(iref=%117)
// [CoreOpt2] LVN subst Insn(iref=%111) with Insn(iref=%116)
// [CoreOpt2] LVN subst Insn(iref=%125) with Insn(iref=%128)
// [CoreOpt2] LVN subst Insn(iref=%122) with Insn(iref=%127)
// [CoreOpt2] LVN subst Insn(iref=%135) with Insn(iref=%138)
// [CoreOpt2] LVN subst Insn(iref=%132) with Insn(iref=%137)
// [CoreOpt2] LVN subst Insn(iref=%145) with Insn(iref=%148)
// [CoreOpt2] LVN subst Insn(iref=%142) with Insn(iref=%147)
