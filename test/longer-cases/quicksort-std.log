// [Asm] pre_assigned_registers: FnParam(fref=f6, fpref=$f.1) -> v3, Self(fref=f6) -> v0, Insn(iref=%0) -> v4, FnParam(fref=f6, fpref=$f.0) -> v2
// [Asm] defs: []
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of sort233_6"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r3 [label="v3 ← a2", color=green];
// [Asm]   r9 [label="t3", color=blue];
// [Asm]   r6 [label="t0", color=blue];
// [Asm]   r13 [label="a5", color=blue];
// [Asm]   r4 [label="a0", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="a3", color=blue];
// [Asm]   r7 [label="t1", color=blue];
// [Asm]   r10 [label="t4", color=blue];
// [Asm]   r14 [label="a6", color=blue];
// [Asm]   r8 [label="t2", color=blue];
// [Asm]   r5 [label="a2", color=blue];
// [Asm]   r15 [label="a7", color=blue];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="v4 ← a0", color=green];
// [Asm]   r12 [label="a4", color=blue];
// [Asm]   r0 -- r1;
// [Asm]   r4 -- r13;
// [Asm]   r4 -- r7;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r8;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r2 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r4 -- r9;
// [Asm]   r4 -- r12;
// [Asm]   comment = "0:v2-> 1:a1-> 3:v3-> 2:zero-> 4:a0-> 5:a2-> 6:t0-> 7:t1-> 8:t2-> 9:t3-> 10:t4-> 11:a3-> 12:a4-> 13:a5-> 14:a6-> 15:a7-> 16:v4"
// [Asm]   comment = "v2<-a0;v3<-a2;v4<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of sort233_6"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v3, a1 ->   mv a2, a1
// [Asm] subst   mv a1, zero ->   mv a1, zero
// [Asm] subst   call quick_sort210_5 ->   call quick_sort210_5
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v24, Insn(iref=%8) -> v17, Insn(iref=%10) -> v19, Insn(iref=%27) -> v38, Insn(iref=%14) -> v23, Insn(iref=%25) -> v35, Insn(iref=%4) -> v13, Mem(fref=f4, mref=m2) -> v7, BlockParam(bref=b6, bpref=$b.0) -> v36, FnParam(fref=f4, fpref=$f.2) -> v4, Insn(iref=%1) -> v10, Insn(iref=%11) -> v20, Insn(iref=%26) -> v37, Insn(iref=%6) -> v15, Mem(fref=f4, mref=m0) -> v5, BlockParam(bref=b9, bpref=$b.0) -> v39, FnParam(fref=f4, fpref=$f.0) -> v2, Mem(fref=f4, mref=m3) -> v8, Insn(iref=%28) -> v40, Insn(iref=%9) -> v18, Insn(iref=%16) -> v25, Insn(iref=%24) -> v33, FnParam(fref=f4, fpref=$f.1) -> v3, Insn(iref=%5) -> v14, Insn(iref=%0) -> v9, Insn(iref=%19) -> v28, Insn(iref=%18) -> v27, Insn(iref=%3) -> v12, Insn(iref=%13) -> v22, Insn(iref=%7) -> v16, BlockParam(bref=b5, bpref=$b.0) -> v34, Insn(iref=%22) -> v31, Insn(iref=%17) -> v26, Insn(iref=%23) -> v32, Insn(iref=%2) -> v11, Insn(iref=%20) -> v29, Mem(fref=f4, mref=m1) -> v6, Self(fref=f4) -> v0, Insn(iref=%21) -> v30, Insn(iref=%12) -> v21
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%26), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=50), Insn(iref=%14)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=8), Insn(iref=%1)])
// [Asm] defs: [v34]
// [Asm] live_set: [v5, v13, zero, v20, v7, v17, s11, v34]
// [Asm] move_origin: [zero]
// [Asm] defined: v34 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v13, zero, v20, v7, v17, s11, v34]
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v5, v13, zero, v20, v7, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v25, v5, v13, zero, v26, v20, v7, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v25, v5, v13, zero, v26, v20, v7, v17, s11]
// [Asm] move_origin: [v7]
// [Asm] defined: s10 is X
// [Asm] defs: [v55]
// [Asm] live_set: [v25, v5, v13, zero, v26, v20, v7, v17, s11, v55]
// [Asm] move_origin: []
// [Asm] defined: v55 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v5, v13, zero, v26, v20, v7, v17, s11, v55]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, v13, zero, a0, v26, v20, v7, v17, s11, v55]
// [Asm] move_origin: [v25]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, v13, zero, a0, v26, v20, v7, v17, a1, s11, v55]
// [Asm] move_origin: [v17]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, v13, zero, a0, v20, v7, a2, a1, v17, s11, v55]
// [Asm] move_origin: [v26]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, v13, zero, a0, v20, v7, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v27]
// [Asm] live_set: [v5, v13, zero, v20, v7, v17, s11]
// [Asm] move_origin: [a0]
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v13, zero, v20, v7, v17, s11]
// [Asm] move_origin: []
// [Asm] defs: [v28]
// [Asm] live_set: [v5, v13, zero, v20, v7, v17, s11, v28]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: [v29]
// [Asm] live_set: [v5, v13, zero, v29, v20, v7, v17, s11, v28]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v5, v13, zero, v29, v20, v7, v17, s11, v28]
// [Asm] move_origin: [v7]
// [Asm] defined: s10 is X
// [Asm] defs: [v51]
// [Asm] live_set: [v5, v13, zero, v29, v20, v7, v17, s11, v28, v51]
// [Asm] move_origin: []
// [Asm] defined: v51 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v13, zero, v29, v20, v7, v17, s11, v28, v51]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, v13, zero, a0, v29, v20, v7, v17, s11, v51]
// [Asm] move_origin: [v28]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, v13, zero, a0, v29, v20, v7, v17, a1, s11, v51]
// [Asm] move_origin: [v13]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, v13, zero, a0, v20, v7, a2, a1, v17, s11, v51]
// [Asm] move_origin: [v29]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, v13, zero, a0, v20, v7, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v30]
// [Asm] live_set: [v5, v13, zero, v20, v7, v17, s11]
// [Asm] move_origin: [a0]
// [Asm] defined: v30 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v13, zero, v20, v7, v17, s11]
// [Asm] move_origin: []
// [Asm] defs: [v31]
// [Asm] live_set: [v5, v13, zero, v20, v7, v17, s11, v31]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v5, v13, zero, v20, v7, v32, v17, s11, v31]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v5, v13, zero, v20, v7, v32, v17, s11, v31]
// [Asm] move_origin: [v7]
// [Asm] defined: s10 is X
// [Asm] defs: [v47]
// [Asm] live_set: [v5, v13, zero, v20, v7, v47, v32, v17, s11, v31]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v13, zero, v20, v7, v47, v32, v17, s11, v31]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, v13, zero, a0, v20, v7, v47, v32, v17, s11]
// [Asm] move_origin: [v31]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, v13, zero, a0, v20, v7, v47, v32, a1, v17, s11]
// [Asm] move_origin: [v20]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, v13, zero, a0, v20, v7, a2, v47, v17, a1, s11]
// [Asm] move_origin: [v32]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, v13, zero, a0, v20, v7, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v33]
// [Asm] live_set: [v5, v13, zero, v20, v7, v17, s11, v33]
// [Asm] move_origin: [a0]
// [Asm] defined: v33 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v13, zero, v20, v7, v17, s11, v33]
// [Asm] move_origin: []
// [Asm] defs: [v34]
// [Asm] live_set: [v5, v13, zero, v20, v7, v17, s11, v34]
// [Asm] move_origin: [v33]
// [Asm] defined: v34 is X
// [Asm] defs: [v41]
// [Asm] live_set: [v41, v13, v39]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v13, v39, v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v13, v39, v8]
// [Asm] move_origin: [v8]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v39, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v36]
// [Asm] live_set: [v5, s11, zero, v13, v36]
// [Asm] move_origin: [zero]
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [v5, s11, zero, v13, v36]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v5, zero, v13, v20, v7, v17, s11]
// [Asm] move_origin: [v7]
// [Asm] defined: s10 is X
// [Asm] defs: [v45]
// [Asm] live_set: [v5, zero, v13, v20, v45, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: v45 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v13, v20, v45, v17, s11]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, v13, a0, v20, v45, s11]
// [Asm] move_origin: [v17]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, v13, a0, v20, v45, a1, s11]
// [Asm] move_origin: [v13]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, zero, v13, a0, v45, a2, a1, s11]
// [Asm] move_origin: [v20]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, s11, zero, v13, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v35]
// [Asm] live_set: [v5, s11, zero, v13, v35]
// [Asm] move_origin: [a0]
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [v5, s11, zero, v13, v35]
// [Asm] move_origin: []
// [Asm] defs: [v36]
// [Asm] live_set: [v5, s11, zero, v13, v36]
// [Asm] move_origin: [v35]
// [Asm] defined: v36 is X
// [Asm] defs: [v37]
// [Asm] live_set: [v37, s11, zero, v13]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v13]
// [Asm] move_origin: []
// [Asm] defs: [v43]
// [Asm] live_set: [v43, s11, v13]
// [Asm] move_origin: []
// [Asm] defined: v43 is X
// [Asm] defs: [v39]
// [Asm] live_set: [s11, v13, v39]
// [Asm] move_origin: [v43]
// [Asm] defined: v39 is X
// [Asm] defs: [v75]
// [Asm] live_set: [v3, v5, v10, v75, v13, zero, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v75 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v3, v5, v10, v13, zero, s11, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v73]
// [Asm] live_set: [v3, v73, v5, v10, v13, zero, s11, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v73 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v3, v5, v16, v10, v13, zero, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v3, v5, v10, v13, zero, v17, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v70]
// [Asm] live_set: [v3, v5, v10, v13, zero, v17, v70, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v70 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v3, v5, v10, v18, v13, zero, v17, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v68]
// [Asm] live_set: [v3, v5, v10, v18, v13, zero, v68, v17, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v68 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v3, v5, v10, v13, zero, v19, v17, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v5, v10, v13, zero, v20, v17, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v64]
// [Asm] live_set: [v5, v10, v13, zero, v20, v17, v64, v2]
// [Asm] move_origin: []
// [Asm] defined: v64 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v5, v10, v13, zero, v20, v17, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, v10, v13, zero, v20, v17, v6, s11, v2]
// [Asm] move_origin: [v6]
// [Asm] defined: s11 is X
// [Asm] defs: [v66]
// [Asm] live_set: [v66, v5, v10, v13, zero, v20, v17, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v66 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v13, zero, v20, v17, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v13, zero, v20, v17, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v13, zero, v20, v17, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: [v61]
// [Asm] live_set: [v5, v10, v13, zero, v20, v17, v6, v61]
// [Asm] move_origin: []
// [Asm] defined: v61 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v10, v13, zero, v20, v7, v17, v6]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, v10, v13, zero, v20, v7, v17, v6, s11]
// [Asm] move_origin: [v7]
// [Asm] defined: s11 is X
// [Asm] defs: [v63]
// [Asm] live_set: [v63, v5, v10, v13, zero, v20, v7, v17, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: v63 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v13, zero, v20, v7, v17, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v13, zero, v20, v7, v17, s11]
// [Asm] move_origin: []
// [Asm] defs: [v23]
// [Asm] live_set: [v5, v13, zero, v20, v23, v7, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v59]
// [Asm] live_set: [v5, v13, zero, v20, v23, v7, v59, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: v59 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v13, zero, v20, v7, v17, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, a0, a2, a1, s11]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, a2, a1, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, a2, s11, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, zero, v4, s11, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v84]
// [Asm] live_set: [v2, zero, v84, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v84 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v5, zero, v4, s11, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v2, v5, v10, zero, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v81]
// [Asm] live_set: [v2, v5, v10, zero, v81, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v81 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v2, v11, v5, v10, zero, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v79]
// [Asm] live_set: [v2, v11, v5, v10, zero, v79, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v79 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v2, v5, v10, zero, s11, v12, v3]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v2, v5, v10, zero, v13, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v77]
// [Asm] live_set: [v2, v5, v10, zero, v13, v77, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v77 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, v10, zero, v13, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v39]
// [Asm] live_set: [s11, v13, v39]
// [Asm] move_origin: [zero]
// [Asm] defined: v39 is X
// [Asm] defs: []
// [Asm] live_set: [s11, v13, v39]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of choose_pivot129_4"];
// [Asm]   r0 [label="v34 ← a0", color=green];
// [Asm]   r46 [label="v15 ← a2", color=green];
// [Asm]   r33 [label="v33 ← a0", color=green];
// [Asm]   r59 [label="v59 ← a1", color=green];
// [Asm]   r9 [label="v26 ← a2", color=green];
// [Asm]   r26 [label="v28 ← a0", color=green];
// [Asm]   r44 [label="v10 ← a1", color=green];
// [Asm]   r53 [label="v64 ← a2", color=green];
// [Asm]   r56 [label="v61 ← a0", color=green];
// [Asm]   r10 [label="s10", color=blue];
// [Asm]   r5 [label="v7 ← s3", color=green];
// [Asm]   r54 [label="v6 ← a2", color=green];
// [Asm]   r24 [label="a7", color=blue];
// [Asm]   r43 [label="v3 ← a3", color=green];
// [Asm]   r31 [label="v32 ← a2", color=green];
// [Asm]   r39 [label="v35 ← a0", color=green];
// [Asm]   r17 [label="t2", color=blue];
// [Asm]   r65 [label="v12 ← a2", color=green];
// [Asm]   r52 [label="v19 ← a2", color=green];
// [Asm]   r20 [label="a3", color=blue];
// [Asm]   r61 [label="v84 ← a2", color=green];
// [Asm]   r23 [label="a6", color=blue];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r27 [label="v29 ← a2", color=green];
// [Asm]   r62 [label="v81 ← a2", color=green];
// [Asm]   r40 [label="v37 ← a0", color=green];
// [Asm]   r11 [label="v55 ← a3", color=green];
// [Asm]   r58 [label="v23 ← a0", color=green];
// [Asm]   r34 [label="v41 ← a1", color=green];
// [Asm]   r14 [label="a2", color=blue];
// [Asm]   r51 [label="v68 ← a4", color=green];
// [Asm]   r55 [label="v66 ← a3", color=green];
// [Asm]   r16 [label="t1", color=blue];
// [Asm]   r21 [label="a4", color=blue];
// [Asm]   r60 [label="v4 ← a1", color=green];
// [Asm]   r38 [label="v45 ← a3", color=green];
// [Asm]   r47 [label="v73 ← a4", color=green];
// [Asm]   r6 [label="v17 ← s4", color=green];
// [Asm]   r13 [label="a1", color=blue];
// [Asm]   r42 [label="v75 ← a2", color=green];
// [Asm]   r4 [label="v20 ← s2", color=green];
// [Asm]   r29 [label="v30 ← a0", color=green];
// [Asm]   r35 [label="v39 ← a0", color=green];
// [Asm]   r7 [label="s11", color=blue];
// [Asm]   r64 [label="v79 ← a4", color=green];
// [Asm]   r8 [label="v25 ← a0", color=green];
// [Asm]   r36 [label="v8 ← a1", color=green];
// [Asm]   r66 [label="v77 ← a2", color=green];
// [Asm]   r32 [label="v47 ← a3", color=green];
// [Asm]   r15 [label="t0", color=blue];
// [Asm]   r49 [label="v70 ← a2", color=green];
// [Asm]   r57 [label="v63 ← a0", color=green];
// [Asm]   r12 [label="a0", color=blue];
// [Asm]   r48 [label="v16 ← a2", color=green];
// [Asm]   r37 [label="v36 ← a0", color=green];
// [Asm]   r1 [label="v5 ← s0", color=green];
// [Asm]   r41 [label="v43 ← a0", color=green];
// [Asm]   r28 [label="v51 ← a3", color=green];
// [Asm]   r22 [label="a5", color=blue];
// [Asm]   r50 [label="v18 ← a2", color=green];
// [Asm]   r30 [label="v31 ← a0", color=green];
// [Asm]   r45 [label="v2 ← a0", color=green];
// [Asm]   r25 [label="v27 ← a0", color=green];
// [Asm]   r63 [label="v11 ← a2", color=green];
// [Asm]   r2 [label="v13 ← s1", color=green];
// [Asm]   r18 [label="t3", color=blue];
// [Asm]   r19 [label="t4", color=blue];
// [Asm]   r2 -- r31;
// [Asm]   r2 -- r38;
// [Asm]   r3 -- r52;
// [Asm]   r1 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r44 -- r55;
// [Asm]   r3 -- r16;
// [Asm]   r3 -- r53;
// [Asm]   r2 -- r49;
// [Asm]   r43 -- r48;
// [Asm]   r7 -- r25;
// [Asm]   r3 -- r62;
// [Asm]   r4 -- r44;
// [Asm]   r45 -- r61;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r2 -- r51;
// [Asm]   r27 -- r28;
// [Asm]   r2 -- r7;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r31;
// [Asm]   r7 -- r62;
// [Asm]   r2 -- r41;
// [Asm]   r2 -- r42;
// [Asm]   r7 -- r35;
// [Asm]   r7 -- r32;
// [Asm]   r4 -- r57;
// [Asm]   r1 -- r50;
// [Asm]   r3 -- r48;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r26 -- r28;
// [Asm]   r26 -- r27;
// [Asm]   r5 -- r6;
// [Asm]   r1 -- r48;
// [Asm]   r2 -- r48;
// [Asm]   r1 -- r64;
// [Asm]   r3 -- r39;
// [Asm]   r44 -- r49;
// [Asm]   r9 -- r12;
// [Asm]   r7 -- r59;
// [Asm]   r5 -- r58;
// [Asm]   r5 -- r32;
// [Asm]   r5 -- r54;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r29;
// [Asm]   r3 -- r33;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r1 -- r51;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r12 -- r23;
// [Asm]   r6 -- r50;
// [Asm]   r1 -- r38;
// [Asm]   r44 -- r47;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r6 -- r56;
// [Asm]   r6 -- r25;
// [Asm]   r4 -- r13;
// [Asm]   r44 -- r51;
// [Asm]   r7 -- r44;
// [Asm]   r3 -- r25;
// [Asm]   r34 -- r35;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r55;
// [Asm]   r42 -- r44;
// [Asm]   r7 -- r20;
// [Asm]   r2 -- r50;
// [Asm]   r5 -- r19;
// [Asm]   r6 -- r53;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r43 -- r45;
// [Asm]   r5 -- r11;
// [Asm]   r6 -- r59;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r19;
// [Asm]   r7 -- r22;
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r55;
// [Asm]   r3 -- r65;
// [Asm]   r7 -- r19;
// [Asm]   r45 -- r65;
// [Asm]   r2 -- r14;
// [Asm]   r13 -- r14;
// [Asm]   r12 -- r22;
// [Asm]   r3 -- r29;
// [Asm]   r3 -- r66;
// [Asm]   r4 -- r7;
// [Asm]   r5 -- r25;
// [Asm]   r12 -- r16;
// [Asm]   r44 -- r63;
// [Asm]   r12 -- r17;
// [Asm]   r6 -- r38;
// [Asm]   r4 -- r10;
// [Asm]   r54 -- r56;
// [Asm]   r43 -- r44;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   r45 -- r64;
// [Asm]   r7 -- r46;
// [Asm]   r6 -- r52;
// [Asm]   r1 -- r24;
// [Asm]   r1 -- r42;
// [Asm]   r2 -- r58;
// [Asm]   r5 -- r12;
// [Asm]   r44 -- r46;
// [Asm]   r2 -- r45;
// [Asm]   r1 -- r37;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r56;
// [Asm]   r4 -- r58;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r4 -- r54;
// [Asm]   r44 -- r52;
// [Asm]   r3 -- r32;
// [Asm]   r6 -- r54;
// [Asm]   r1 -- r17;
// [Asm]   r2 -- r16;
// [Asm]   r42 -- r43;
// [Asm]   r13 -- r28;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r18;
// [Asm]   r1 -- r62;
// [Asm]   r1 -- r31;
// [Asm]   r42 -- r45;
// [Asm]   r14 -- r28;
// [Asm]   r2 -- r59;
// [Asm]   r2 -- r54;
// [Asm]   r43 -- r66;
// [Asm]   r4 -- r33;
// [Asm]   r3 -- r30;
// [Asm]   r50 -- r51;
// [Asm]   r12 -- r28;
// [Asm]   r43 -- r62;
// [Asm]   r2 -- r46;
// [Asm]   r3 -- r13;
// [Asm]   r58 -- r59;
// [Asm]   r6 -- r43;
// [Asm]   r6 -- r18;
// [Asm]   r7 -- r63;
// [Asm]   r6 -- r10;
// [Asm]   r4 -- r28;
// [Asm]   r3 -- r40;
// [Asm]   r43 -- r46;
// [Asm]   r44 -- r56;
// [Asm]   r43 -- r63;
// [Asm]   r3 -- r10;
// [Asm]   r44 -- r65;
// [Asm]   r4 -- r12;
// [Asm]   r3 -- r27;
// [Asm]   r43 -- r65;
// [Asm]   r8 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r45 -- r47;
// [Asm]   r7 -- r54;
// [Asm]   r43 -- r64;
// [Asm]   r2 -- r23;
// [Asm]   r6 -- r32;
// [Asm]   r7 -- r52;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r12 -- r38;
// [Asm]   r6 -- r49;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r23;
// [Asm]   r1 -- r53;
// [Asm]   r5 -- r23;
// [Asm]   r46 -- r47;
// [Asm]   r43 -- r50;
// [Asm]   r1 -- r15;
// [Asm]   r4 -- r20;
// [Asm]   r3 -- r47;
// [Asm]   r1 -- r60;
// [Asm]   r6 -- r16;
// [Asm]   r4 -- r30;
// [Asm]   r2 -- r55;
// [Asm]   r10 -- r27;
// [Asm]   r1 -- r65;
// [Asm]   r1 -- r66;
// [Asm]   r6 -- r12;
// [Asm]   r6 -- r24;
// [Asm]   r44 -- r54;
// [Asm]   r1 -- r39;
// [Asm]   r43 -- r61;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r7 -- r37;
// [Asm]   r2 -- r57;
// [Asm]   r4 -- r11;
// [Asm]   r7 -- r60;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r7 -- r33;
// [Asm]   r6 -- r28;
// [Asm]   r1 -- r59;
// [Asm]   r3 -- r55;
// [Asm]   r7 -- r11;
// [Asm]   r7 -- r47;
// [Asm]   r60 -- r61;
// [Asm]   r7 -- r39;
// [Asm]   r14 -- r45;
// [Asm]   r7 -- r43;
// [Asm]   r12 -- r14;
// [Asm]   r12 -- r27;
// [Asm]   r31 -- r32;
// [Asm]   r7 -- r50;
// [Asm]   r3 -- r54;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r5 -- r30;
// [Asm]   r54 -- r57;
// [Asm]   r12 -- r18;
// [Asm]   r4 -- r19;
// [Asm]   r3 -- r44;
// [Asm]   r4 -- r53;
// [Asm]   r7 -- r51;
// [Asm]   r2 -- r32;
// [Asm]   r12 -- r32;
// [Asm]   r5 -- r21;
// [Asm]   r5 -- r33;
// [Asm]   r43 -- r52;
// [Asm]   r1 -- r30;
// [Asm]   r14 -- r43;
// [Asm]   r1 -- r57;
// [Asm]   r13 -- r32;
// [Asm]   r3 -- r6;
// [Asm]   r11 -- r14;
// [Asm]   r5 -- r17;
// [Asm]   r3 -- r42;
// [Asm]   r5 -- r22;
// [Asm]   r5 -- r59;
// [Asm]   r2 -- r43;
// [Asm]   r45 -- r54;
// [Asm]   r5 -- r18;
// [Asm]   r1 -- r45;
// [Asm]   r13 -- r31;
// [Asm]   r5 -- r29;
// [Asm]   r1 -- r52;
// [Asm]   r3 -- r37;
// [Asm]   r2 -- r37;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r7 -- r27;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r31;
// [Asm]   r45 -- r62;
// [Asm]   r2 -- r34;
// [Asm]   r5 -- r31;
// [Asm]   r43 -- r51;
// [Asm]   r13 -- r38;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r57;
// [Asm]   r11 -- r13;
// [Asm]   r7 -- r38;
// [Asm]   r2 -- r12;
// [Asm]   r10 -- r31;
// [Asm]   r45 -- r48;
// [Asm]   r45 -- r52;
// [Asm]   r4 -- r56;
// [Asm]   r0 -- r1;
// [Asm]   r4 -- r25;
// [Asm]   r3 -- r49;
// [Asm]   r2 -- r36;
// [Asm]   r6 -- r55;
// [Asm]   r12 -- r21;
// [Asm]   r0 -- r4;
// [Asm]   r6 -- r23;
// [Asm]   r7 -- r42;
// [Asm]   r4 -- r14;
// [Asm]   r3 -- r46;
// [Asm]   r7 -- r65;
// [Asm]   r14 -- r32;
// [Asm]   r3 -- r19;
// [Asm]   r3 -- r45;
// [Asm]   r7 -- r29;
// [Asm]   r43 -- r60;
// [Asm]   r2 -- r26;
// [Asm]   r1 -- r43;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r3 -- r38;
// [Asm]   r1 -- r47;
// [Asm]   r7 -- r24;
// [Asm]   r44 -- r57;
// [Asm]   r30 -- r32;
// [Asm]   r8 -- r9;
// [Asm]   r6 -- r33;
// [Asm]   r6 -- r30;
// [Asm]   r1 -- r22;
// [Asm]   r2 -- r52;
// [Asm]   r11 -- r12;
// [Asm]   r1 -- r13;
// [Asm]   r7 -- r48;
// [Asm]   r6 -- r22;
// [Asm]   r45 -- r63;
// [Asm]   r7 -- r49;
// [Asm]   r6 -- r20;
// [Asm]   r45 -- r50;
// [Asm]   r3 -- r50;
// [Asm]   r7 -- r17;
// [Asm]   r2 -- r44;
// [Asm]   r3 -- r57;
// [Asm]   r6 -- r27;
// [Asm]   r2 -- r40;
// [Asm]   r12 -- r20;
// [Asm]   r4 -- r15;
// [Asm]   r12 -- r13;
// [Asm]   r5 -- r28;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r4 -- r32;
// [Asm]   r7 -- r15;
// [Asm]   r1 -- r29;
// [Asm]   r6 -- r57;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r7 -- r41;
// [Asm]   r8 -- r10;
// [Asm]   r2 -- r17;
// [Asm]   r2 -- r30;
// [Asm]   r7 -- r57;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r63 -- r64;
// [Asm]   r2 -- r35;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r9 -- r13;
// [Asm]   r7 -- r12;
// [Asm]   r44 -- r50;
// [Asm]   r44 -- r62;
// [Asm]   r7 -- r14;
// [Asm]   r1 -- r54;
// [Asm]   r2 -- r39;
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r21;
// [Asm]   r4 -- r38;
// [Asm]   r7 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r44 -- r48;
// [Asm]   r14 -- r38;
// [Asm]   r3 -- r43;
// [Asm]   r43 -- r49;
// [Asm]   r7 -- r40;
// [Asm]   r10 -- r26;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r56;
// [Asm]   r3 -- r60;
// [Asm]   r1 -- r63;
// [Asm]   r30 -- r31;
// [Asm]   r2 -- r10;
// [Asm]   r6 -- r29;
// [Asm]   r44 -- r45;
// [Asm]   r1 -- r20;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r3 -- r51;
// [Asm]   r12 -- r19;
// [Asm]   r1 -- r46;
// [Asm]   r4 -- r21;
// [Asm]   r12 -- r24;
// [Asm]   r6 -- r13;
// [Asm]   r43 -- r47;
// [Asm]   r2 -- r33;
// [Asm]   r7 -- r55;
// [Asm]   r3 -- r4;
// [Asm]   r54 -- r55;
// [Asm]   r44 -- r53;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r45 -- r66;
// [Asm]   r7 -- r10;
// [Asm]   r2 -- r47;
// [Asm]   r2 -- r8;
// [Asm]   r1 -- r27;
// [Asm]   r6 -- r31;
// [Asm]   r44 -- r64;
// [Asm]   r10 -- r30;
// [Asm]   r44 -- r66;
// [Asm]   r6 -- r45;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r1 -- r49;
// [Asm]   r1 -- r44;
// [Asm]   r3 -- r61;
// [Asm]   r2 -- r24;
// [Asm]   r7 -- r8;
// [Asm]   r4 -- r9;
// [Asm]   r3 -- r58;
// [Asm]   r2 -- r53;
// [Asm]   r7 -- r64;
// [Asm]   r6 -- r58;
// [Asm]   r35 -- r36;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r45 -- r55;
// [Asm]   r1 -- r58;
// [Asm]   r4 -- r24;
// [Asm]   r6 -- r15;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r18;
// [Asm]   r45 -- r49;
// [Asm]   r7 -- r45;
// [Asm]   r6 -- r44;
// [Asm]   r12 -- r15;
// [Asm]   r13 -- r45;
// [Asm]   r4 -- r59;
// [Asm]   r7 -- r26;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r32;
// [Asm]   r7 -- r13;
// [Asm]   r6 -- r51;
// [Asm]   r5 -- r44;
// [Asm]   r45 -- r46;
// [Asm]   r3 -- r28;
// [Asm]   r7 -- r30;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r26;
// [Asm]   r1 -- r28;
// [Asm]   r7 -- r66;
// [Asm]   r7 -- r28;
// [Asm]   r6 -- r8;
// [Asm]   r45 -- r53;
// [Asm]   r4 -- r45;
// [Asm]   r12 -- r31;
// [Asm]   r2 -- r56;
// [Asm]   r3 -- r64;
// [Asm]   r2 -- r66;
// [Asm]   r45 -- r51;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r7 -- r58;
// [Asm]   r3 -- r59;
// [Asm]   r7 -- r31;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r7 -- r23;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r26;
// [Asm]   r2 -- r19;
// [Asm]   r45 -- r60;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r63;
// [Asm]   r13 -- r27;
// [Asm]   r5 -- r15;
// [Asm]   comment = "0:v34-> 1:v5-> 2:v13-> 3:zero-> 4:v20-> 5:v7-> 6:v17-> 7:s11-> 8:v25-> 9:v26-> 11:v55-> 12:a0-> 13:a1-> 14:a2-> 28:v51-> 27:v29-> 32:v47-> 31:v32-> 10:s10-> 26:v28-> 30:v31-> 38:v45-> 15:t0-> 16:t1-> 17:t2-> 18:t3-> 19:t4-> 20:a3-> 21:a4-> 22:a5-> 23:a6-> 24:a7-> 45:v2-> 44:v10-> 54:v6-> 55:v66-> 57:v63-> 43:v3-> 49:v70-> 50:v18-> 51:v68-> 52:v19-> 25:v27-> 29:v30-> 33:v33-> 42:v75-> 46:v15-> 47:v73-> 48:v16-> 53:v64-> 56:v61-> 58:v23-> 59:v59-> 66:v77-> 62:v81-> 63:v11-> 64:v79-> 65:v12-> 60:v4-> 37:v36-> 39:v35-> 61:v84-> 40:v37-> 35:v39-> 34:v41-> 36:v8-> 41:v43"
// [Asm]   comment = "v34<-a0;v15<-a2;v33<-a0;v59<-a1;v26<-a2;v28<-a0;v10<-a1;v64<-a2;v61<-a0;v7<-s3;v6<-a2;v3<-a3;v32<-a2;v35<-a0;v12<-a2;v19<-a2;v84<-a2;v29<-a2;v81<-a2;v37<-a0;v55<-a3;v23<-a0;v41<-a1;v68<-a4;v66<-a3;v4<-a1;v45<-a3;v73<-a4;v17<-s4;v75<-a2;v20<-s2;v30<-a0;v39<-a0;v79<-a4;v25<-a0;v8<-a1;v77<-a2;v47<-a3;v70<-a2;v63<-a0;v16<-a2;v36<-a0;v5<-s0;v43<-a0;v51<-a3;v18<-a2;v31<-a0;v2<-a0;v27<-a0;v11<-a2;v13<-s1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of choose_pivot129_4"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v34, zero ->   mv a0, zero
// [Asm] subst   j .choose_pivot129_4_5 ->   j .choose_pivot129_4_5
// [Asm] subst   addi v25, v17, -1 ->   addi a0, s4, -1
// [Asm] subst   addi v26, v17, 1 ->   addi a2, s4, 1
// [Asm] subst   mv s10, v7 ->   mv s10, s3
// [Asm] subst   ld v55, 0(v7) ->   ld a3, 0(s3)
// [Asm] subst   mv a1, v17 ->   mv a1, s4
// [Asm] subst   jalr v55 ->   jalr a3
// [Asm] subst   addi v28, v13, -1 ->   addi a0, s1, -1
// [Asm] subst   addi v29, v13, 1 ->   addi a2, s1, 1
// [Asm] subst   mv s10, v7 ->   mv s10, s3
// [Asm] subst   ld v51, 0(v7) ->   ld a3, 0(s3)
// [Asm] subst   mv a1, v13 ->   mv a1, s1
// [Asm] subst   jalr v51 ->   jalr a3
// [Asm] subst   addi v31, v20, -1 ->   addi a0, s2, -1
// [Asm] subst   addi v32, v20, 1 ->   addi a2, s2, 1
// [Asm] subst   mv s10, v7 ->   mv s10, s3
// [Asm] subst   ld v47, 0(v7) ->   ld a3, 0(s3)
// [Asm] subst   mv a1, v20 ->   mv a1, s2
// [Asm] subst   jalr v47 ->   jalr a3
// [Asm] subst   addi v41, s11, -8 ->   addi a1, s11, -8
// [Asm] subst   andi v8, v41, -8 ->   andi a1, a1, -8
// [Asm] subst   mv s11, v8 ->   mv s11, a1
// [Asm] subst   sw v13, 0(v8) ->   sw s1, 0(a1)
// [Asm] subst   sw v39, 4(v8) ->   sw a0, 4(a1)
// [Asm] subst   mv a0, v8 ->   mv a0, a1
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v36, zero ->   mv a0, zero
// [Asm] subst   j .choose_pivot129_4_6 ->   j .choose_pivot129_4_6
// [Asm] subst   mv s10, v7 ->   mv s10, s3
// [Asm] subst   ld v45, 0(v7) ->   ld a3, 0(s3)
// [Asm] subst   mv a0, v17 ->   mv a0, s4
// [Asm] subst   mv a1, v13 ->   mv a1, s1
// [Asm] subst   mv a2, v20 ->   mv a2, s2
// [Asm] subst   jalr v45 ->   jalr a3
// [Asm] subst   lw v37, 0(v5) ->   lw a0, 0(s0)
// [Asm] subst   bne v37, zero, .choose_pivot129_4_8 ->   bne a0, zero, .choose_pivot129_4_8
// [Asm] subst   li v43, 1 ->   li a0, 1
// [Asm] subst   li v75, 4 ->   li a2, 4
// [Asm] subst   div v15, v10, v75 ->   div a2, a1, a2
// [Asm] subst   li v73, 1 ->   li a4, 1
// [Asm] subst   mul v16, v15, v73 ->   mul a2, a2, a4
// [Asm] subst   add v17, v3, v16 ->   add s4, a3, a2
// [Asm] subst   li v70, 4 ->   li a2, 4
// [Asm] subst   div v18, v10, v70 ->   div a2, a1, a2
// [Asm] subst   li v68, 3 ->   li a4, 3
// [Asm] subst   mul v19, v18, v68 ->   mul a2, a2, a4
// [Asm] subst   add v20, v3, v19 ->   add s2, a3, a2
// [Asm] subst   addi v64, s11, -24 ->   addi a2, s11, -24
// [Asm] subst   andi v6, v64, -8 ->   andi a2, a2, -8
// [Asm] subst   mv s11, v6 ->   mv s11, a2
// [Asm] subst   la v66, sort_2157_19 ->   la a3, sort_2157_19
// [Asm] subst   sd v66, 0(v6) ->   sd a3, 0(a2)
// [Asm] subst   sd v2, 8(v6) ->   sd a0, 8(a2)
// [Asm] subst   sd v5, 16(v6) ->   sd s0, 16(a2)
// [Asm] subst   addi v61, s11, -16 ->   addi a0, s11, -16
// [Asm] subst   andi v7, v61, -8 ->   andi s3, a0, -8
// [Asm] subst   mv s11, v7 ->   mv s11, s3
// [Asm] subst   la v63, sort_3173_21 ->   la a0, sort_3173_21
// [Asm] subst   sd v63, 0(v7) ->   sd a0, 0(s3)
// [Asm] subst   sd v6, 8(v7) ->   sd a2, 8(s3)
// [Asm] subst   addi v23, v10, -1 ->   addi a0, a1, -1
// [Asm] subst   li v59, 50 ->   li a1, 50
// [Asm] subst   blt v23, v59, .choose_pivot129_4_4 ->   blt a0, a1, .choose_pivot129_4_4
// [Asm] subst   mv v3, a1 ->   mv a3, a1
// [Asm] subst   mv v4, a2 ->   mv a1, a2
// [Asm] subst   addi v84, s11, -4 ->   addi a2, s11, -4
// [Asm] subst   andi v5, v84, -8 ->   andi s0, a2, -8
// [Asm] subst   mv s11, v5 ->   mv s11, s0
// [Asm] subst   sw zero, 0(v5) ->   sw zero, 0(s0)
// [Asm] subst   sub v10, v4, v3 ->   sub a1, a1, a3
// [Asm] subst   li v81, 4 ->   li a2, 4
// [Asm] subst   div v11, v10, v81 ->   div a2, a1, a2
// [Asm] subst   li v79, 2 ->   li a4, 2
// [Asm] subst   mul v12, v11, v79 ->   mul a2, a2, a4
// [Asm] subst   add v13, v3, v12 ->   add s1, a3, a2
// [Asm] subst   li v77, 8 ->   li a2, 8
// [Asm] subst   blt v10, v77, .choose_pivot129_4_2 ->   blt a1, a2, .choose_pivot129_4_2
// [Asm] subst   mv v39, zero ->   mv a0, zero
// [Asm] subst   j .choose_pivot129_4_9 ->   j .choose_pivot129_4_9
// [Asm] pre_assigned_registers: Self(fref=f28) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_28"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_28"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main239_7 ->   call main239_7
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FreeVar(fvref=^5) -> v7, BlockParam(bref=b7, bpref=$b.0) -> v20, Insn(iref=%9) -> v19, FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, Insn(iref=%8) -> v18, Insn(iref=%10) -> v21, BlockParam(bref=b0, bpref=$b.0) -> v8, FreeVar(fvref=^4) -> v6, BlockParam(bref=b8, bpref=$b.0) -> v24, Insn(iref=%5) -> v15, Insn(iref=%0) -> v9, Insn(iref=%4) -> v14, Insn(iref=%3) -> v13, Insn(iref=%13) -> v25, Insn(iref=%7) -> v17, Self(fref=f16) -> v0, Insn(iref=%2) -> v12, Insn(iref=%1) -> v10, Insn(iref=%11) -> v22, FreeVar(fvref=^3) -> v5, Insn(iref=%6) -> v16, BlockParam(bref=b9, bpref=$b.0) -> v11, FnParam(fref=f16, fpref=$f.0) -> v2, Insn(iref=%12) -> v23
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%5), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%2), Insn(iref=%3)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Asm] defs: []
// [Asm] live_set: [zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [zero, a0, v0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v0, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v0, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, zero, v0, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, zero, v0, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, zero, v0, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v17, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v17, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v7, v8, v4, v6, v17, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, a0, v7, v8, v4, a1, v6, v3]
// [Asm] move_origin: [v17]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, zero, a0, v7, v8, v4, a2, a1, v6, v3]
// [Asm] move_origin: [v8]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v18]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v20]
// [Asm] live_set: [v5, zero, v20, v7, v8, v4, v6, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v20 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v24, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v24 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v24, v3]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v5, v21, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v5, zero, v22, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v24]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v24, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v24 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v20]
// [Asm] live_set: [v5, zero, v20, v7, v8, v4, v6, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v20, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: [v25]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v33]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v33, v3]
// [Asm] move_origin: []
// [Asm] defined: v33 is X
// [Asm] defs: [v34]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v34, v3]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v12, v3]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v5, zero, v13, v8, v7, v4, v6, v12, v3]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: [zero]
// [Asm] defined: v11 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux86_16"];
// [Asm]   r0 [label="v0 ← a1", color=green];
// [Asm]   r33 [label="v12 ← a0", color=green];
// [Asm]   r9 [label="v8 ← s5", color=green];
// [Asm]   r26 [label="v24 ← a0", color=green];
// [Asm]   r6 [label="v5 ← s2", color=green];
// [Asm]   r13 [label="a2", color=blue];
// [Asm]   r4 [label="v3 ← s0", color=green];
// [Asm]   r29 [label="v25 ← a0", color=green];
// [Asm]   r35 [label="v11 ← a0", color=green];
// [Asm]   r7 [label="v6 ← s3", color=green];
// [Asm]   r10 [label="v9 ← a0", color=green];
// [Asm]   r8 [label="v7 ← s4", color=green];
// [Asm]   r5 [label="v4 ← s1", color=green];
// [Asm]   r24 [label="v18 ← a0", color=green];
// [Asm]   r32 [label="v34 ← a0", color=green];
// [Asm]   r15 [label="t1", color=blue];
// [Asm]   r31 [label="v33 ← a0", color=green];
// [Asm]   r17 [label="t3", color=blue];
// [Asm]   r12 [label="a1", color=blue];
// [Asm]   r20 [label="a4", color=blue];
// [Asm]   r23 [label="a7", color=blue];
// [Asm]   r3 [label="v2 ← a0", color=green];
// [Asm]   r27 [label="v21 ← a0", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r28 [label="v22 ← a0", color=green];
// [Asm]   r11 [label="v17 ← a1", color=green];
// [Asm]   r34 [label="v13 ← a1", color=green];
// [Asm]   r22 [label="a6", color=blue];
// [Asm]   r14 [label="t0", color=blue];
// [Asm]   r30 [label="v15 ← a0", color=green];
// [Asm]   r25 [label="v20 ← a0", color=green];
// [Asm]   r2 [label="a0", color=blue];
// [Asm]   r16 [label="t2", color=blue];
// [Asm]   r18 [label="t4", color=blue];
// [Asm]   r19 [label="a3", color=blue];
// [Asm]   r21 [label="a5", color=blue];
// [Asm]   r8 -- r31;
// [Asm]   r5 -- r21;
// [Asm]   r5 -- r33;
// [Asm]   r4 -- r34;
// [Asm]   r1 -- r30;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r7 -- r25;
// [Asm]   r5 -- r18;
// [Asm]   r9 -- r26;
// [Asm]   r5 -- r29;
// [Asm]   r9 -- r17;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r7 -- r27;
// [Asm]   r7 -- r32;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r31;
// [Asm]   r8 -- r12;
// [Asm]   r0 -- r6;
// [Asm]   r9 -- r14;
// [Asm]   r5 -- r31;
// [Asm]   r8 -- r24;
// [Asm]   r3 -- r8;
// [Asm]   r8 -- r34;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r8 -- r16;
// [Asm]   r9 -- r23;
// [Asm]   r9 -- r12;
// [Asm]   r2 -- r12;
// [Asm]   r8 -- r23;
// [Asm]   r5 -- r32;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r29;
// [Asm]   r2 -- r5;
// [Asm]   r9 -- r20;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r4 -- r25;
// [Asm]   r1 -- r11;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r8 -- r32;
// [Asm]   r0 -- r4;
// [Asm]   r6 -- r23;
// [Asm]   r4 -- r14;
// [Asm]   r8 -- r30;
// [Asm]   r6 -- r25;
// [Asm]   r4 -- r13;
// [Asm]   r7 -- r29;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r34;
// [Asm]   r7 -- r24;
// [Asm]   r8 -- r27;
// [Asm]   r8 -- r9;
// [Asm]   r6 -- r33;
// [Asm]   r6 -- r30;
// [Asm]   r1 -- r22;
// [Asm]   r7 -- r20;
// [Asm]   r5 -- r19;
// [Asm]   r1 -- r13;
// [Asm]   r9 -- r30;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r5 -- r11;
// [Asm]   r8 -- r20;
// [Asm]   r8 -- r25;
// [Asm]   r6 -- r20;
// [Asm]   r7 -- r17;
// [Asm]   r6 -- r19;
// [Asm]   r6 -- r27;
// [Asm]   r7 -- r22;
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r15;
// [Asm]   r7 -- r19;
// [Asm]   r12 -- r13;
// [Asm]   r5 -- r28;
// [Asm]   r2 -- r14;
// [Asm]   r5 -- r9;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r3;
// [Asm]   r4 -- r32;
// [Asm]   r7 -- r15;
// [Asm]   r1 -- r29;
// [Asm]   r9 -- r24;
// [Asm]   r8 -- r18;
// [Asm]   r0 -- r5;
// [Asm]   r8 -- r10;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r8 -- r26;
// [Asm]   r5 -- r25;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r9 -- r13;
// [Asm]   r7 -- r12;
// [Asm]   r7 -- r14;
// [Asm]   r1 -- r24;
// [Asm]   r9 -- r21;
// [Asm]   r5 -- r12;
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r21;
// [Asm]   r9 -- r25;
// [Asm]   r1 -- r12;
// [Asm]   r7 -- r21;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r9 -- r27;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r6 -- r29;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r9 -- r31;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r27;
// [Asm]   r4 -- r22;
// [Asm]   r9 -- r18;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r31;
// [Asm]   r6 -- r13;
// [Asm]   r7 -- r34;
// [Asm]   r4 -- r33;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r9 -- r28;
// [Asm]   r1 -- r21;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r7 -- r10;
// [Asm]   r4 -- r28;
// [Asm]   r2 -- r8;
// [Asm]   r1 -- r27;
// [Asm]   r4 -- r12;
// [Asm]   r6 -- r31;
// [Asm]   r8 -- r29;
// [Asm]   r8 -- r22;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r8 -- r21;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r2 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r6 -- r32;
// [Asm]   r5 -- r34;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r5 -- r20;
// [Asm]   r9 -- r15;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r23;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r23;
// [Asm]   r8 -- r19;
// [Asm]   r7 -- r26;
// [Asm]   r5 -- r13;
// [Asm]   r7 -- r13;
// [Asm]   r1 -- r32;
// [Asm]   r1 -- r15;
// [Asm]   r4 -- r20;
// [Asm]   r6 -- r16;
// [Asm]   r7 -- r30;
// [Asm]   r4 -- r30;
// [Asm]   r8 -- r33;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r26;
// [Asm]   r6 -- r12;
// [Asm]   r6 -- r24;
// [Asm]   r1 -- r28;
// [Asm]   r7 -- r28;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r34;
// [Asm]   r33 -- r34;
// [Asm]   r8 -- r28;
// [Asm]   r9 -- r22;
// [Asm]   r4 -- r11;
// [Asm]   r9 -- r34;
// [Asm]   r8 -- r13;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r9 -- r33;
// [Asm]   r7 -- r33;
// [Asm]   r6 -- r28;
// [Asm]   r7 -- r11;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r9 -- r16;
// [Asm]   r7 -- r31;
// [Asm]   r9 -- r32;
// [Asm]   r5 -- r27;
// [Asm]   r9 -- r19;
// [Asm]   r4 -- r17;
// [Asm]   r7 -- r23;
// [Asm]   r1 -- r14;
// [Asm]   r2 -- r19;
// [Asm]   r4 -- r26;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r5 -- r30;
// [Asm]   r5 -- r15;
// [Asm]   r4 -- r19;
// [Asm]   comment = "0:v0-> 1:zero-> 2:a0-> 4:v3-> 5:v4-> 6:v5-> 7:v6-> 3:v2-> 8:v7-> 9:v8-> 11:v17-> 12:a1-> 13:a2-> 14:t0-> 15:t1-> 16:t2-> 17:t3-> 18:t4-> 19:a3-> 20:a4-> 21:a5-> 22:a6-> 23:a7-> 10:v9-> 24:v18-> 27:v21-> 28:v22-> 30:v15-> 31:v33-> 32:v34-> 33:v12-> 34:v13-> 25:v20-> 26:v24-> 29:v25-> 35:v11"
// [Asm]   comment = "v0<-a1;v12<-a0;v8<-s5;v24<-a0;v5<-s2;v3<-s0;v25<-a0;v11<-a0;v6<-s3;v9<-a0;v7<-s4;v4<-s1;v18<-a0;v34<-a0;v33<-a0;v2<-a0;v21<-a0;v22<-a0;v17<-a1;v13<-a1;v15<-a0;v20<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux86_16"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   lw v3, 8(v0) ->   lw s0, 8(a1)
// [Asm] subst   ld v4, 16(v0) ->   ld s1, 16(a1)
// [Asm] subst   lw v5, 24(v0) ->   lw s2, 24(a1)
// [Asm] subst   ld v6, 32(v0) ->   ld s3, 32(a1)
// [Asm] subst   ld v7, 40(v0) ->   ld s4, 40(a1)
// [Asm] subst   mv v8, v2 ->   mv s5, a0
// [Asm] subst   addi v9, v3, -2 ->   addi a0, s0, -2
// [Asm] subst   blt v9, v8, .aux86_16_2 ->   blt a0, s5, .aux86_16_2
// [Asm] subst   lw v17, 0(v6) ->   lw a1, 0(s3)
// [Asm] subst   mv a0, v4 ->   mv a0, s1
// [Asm] subst   mv a2, v8 ->   mv a2, s5
// [Asm] subst   call swap1_0 ->   call swap1_0
// [Asm] subst   sw zero, 0(v7) ->   sw zero, 0(s4)
// [Asm] subst   mv v20, zero ->   mv a0, zero
// [Asm] subst   mv v24, zero ->   mv a0, zero
// [Asm] subst   j .aux86_16_8 ->   j .aux86_16_8
// [Asm] subst   lw v21, 0(v6) ->   lw a0, 0(s3)
// [Asm] subst   addi v22, v21, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v22, 0(v6) ->   sw a0, 0(s3)
// [Asm] subst   mv v24, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v20, zero ->   mv a0, zero
// [Asm] subst   j .aux86_16_7 ->   j .aux86_16_7
// [Asm] subst   addi v25, v8, 1 ->   addi a0, s5, 1
// [Asm] subst   mv v8, v25 ->   mv s5, a0
// [Asm] subst   j .aux86_16_0 ->   j .aux86_16_0
// [Asm] subst   lw v15, 0(v6) ->   lw a0, 0(s3)
// [Asm] subst   beq v15, v8, .aux86_16_5 ->   beq a0, s5, .aux86_16_5
// [Asm] subst   slliw v33, v8, 2 ->   slliw a0, s5, 2
// [Asm] subst   add v34, v4, v33 ->   add a0, s1, a0
// [Asm] subst   lw v12, 0(v34) ->   lw a0, 0(a0)
// [Asm] subst   addi v13, v5, -1 ->   addi a1, s2, -1
// [Asm] subst   blt v13, v12, .aux86_16_4 ->   blt a1, a0, .aux86_16_4
// [Asm] subst   mv v11, zero ->   mv a0, zero
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v6, Insn(iref=%3) -> v8, FnParam(fref=f0, fpref=$f.1) -> v3, FnParam(fref=f0, fpref=$f.2) -> v4, Self(fref=f0) -> v0, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%0) -> v5, Insn(iref=%2) -> v7
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, a2, zero, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v3, v4, v16, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v3, v4, v17, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v4, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v3, v4, v5, zero, v13, v2]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v3, v4, v5, v14, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v3, v4, v5, v6, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v4, v5, v6, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v4, v5, v6, v12, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of swap1_0"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="v13 ← a4", color=green];
// [Asm]   r6 [label="v16 ← a3", color=green];
// [Asm]   r13 [label="v12 ← a1", color=green];
// [Asm]   r4 [label="v3 ← a1", color=green];
// [Asm]   r1 [label="a2", color=blue];
// [Asm]   r11 [label="v6 ← a4", color=green];
// [Asm]   r7 [label="v17 ← a3", color=green];
// [Asm]   r10 [label="v14 ← a4", color=green];
// [Asm]   r14 [label="v9 ← a1", color=green];
// [Asm]   r8 [label="v5 ← a3", color=green];
// [Asm]   r5 [label="v4 ← a2", color=green];
// [Asm]   r15 [label="v10 ← a0", color=green];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="a0", color=blue];
// [Asm]   r12 [label="v11 ← a1", color=green];
// [Asm]   r5 -- r6;
// [Asm]   r0 -- r13;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r15;
// [Asm]   r8 -- r13;
// [Asm]   r11 -- r13;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r9;
// [Asm]   r5 -- r8;
// [Asm]   r0 -- r3;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r9;
// [Asm]   r5 -- r10;
// [Asm]   r0 -- r8;
// [Asm]   r3 -- r13;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r8 -- r9;
// [Asm]   r0 -- r5;
// [Asm]   r3 -- r10;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r0 -- r14;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r9;
// [Asm]   r11 -- r12;
// [Asm]   r3 -- r14;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r3 -- r11;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r5 -- r11;
// [Asm]   r8 -- r14;
// [Asm]   r0 -- r7;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r9;
// [Asm]   r8 -- r12;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v2-> 1:a2-> 4:v3-> 3:zero-> 5:v4-> 6:v16-> 7:v17-> 8:v5-> 9:v13-> 10:v14-> 11:v6-> 12:v11-> 13:v12-> 14:v9-> 15:v10-> 2:a1-> 16:a0"
// [Asm]   comment = "v2<-a0;v13<-a4;v16<-a3;v12<-a1;v3<-a1;v6<-a4;v17<-a3;v14<-a4;v9<-a1;v5<-a3;v4<-a2;v10<-a0;v11<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of swap1_0"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   slliw v16, v3, 2 ->   slliw a3, a1, 2
// [Asm] subst   add v17, v2, v16 ->   add a3, a0, a3
// [Asm] subst   lw v5, 0(v17) ->   lw a3, 0(a3)
// [Asm] subst   slliw v13, v4, 2 ->   slliw a4, a2, 2
// [Asm] subst   add v14, v2, v13 ->   add a4, a0, a4
// [Asm] subst   lw v6, 0(v14) ->   lw a4, 0(a4)
// [Asm] subst   slliw v11, v3, 2 ->   slliw a1, a1, 2
// [Asm] subst   add v12, v2, v11 ->   add a1, a0, a1
// [Asm] subst   sw v6, 0(v12) ->   sw a4, 0(a1)
// [Asm] subst   slliw v9, v4, 2 ->   slliw a1, a2, 2
// [Asm] subst   add v10, v2, v9 ->   add a0, a0, a1
// [Asm] subst   sw v5, 0(v10) ->   sw a3, 0(a0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v10, BlockParam(bref=b3, bpref=$b.0) -> v8, Insn(iref=%2) -> v9, FnParam(fref=f13, fpref=$f.0) -> v2, FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, Insn(iref=%1) -> v7, Self(fref=f13) -> v0, BlockParam(bref=b0, bpref=$b.0) -> v5, Insn(iref=%0) -> v6
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v0, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: s10 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v4, v5, v12, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v12, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, v5, v12, zero, a0, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, v5, zero, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v4, v10, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v10]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: [zero]
// [Asm] defined: v8 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of f54_13"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="a7", color=blue];
// [Asm]   r23 [label="v6 ← a0", color=green];
// [Asm]   r3 [label="v2 ← a0", color=green];
// [Asm]   r9 [label="t0", color=blue];
// [Asm]   r6 [label="v5 ← s2", color=green];
// [Asm]   r13 [label="t4", color=blue];
// [Asm]   r4 [label="v3 ← s0", color=green];
// [Asm]   r1 [label="v0 ← a1", color=green];
// [Asm]   r11 [label="t2", color=blue];
// [Asm]   r7 [label="s10", color=blue];
// [Asm]   r10 [label="t1", color=blue];
// [Asm]   r22 [label="v10 ← a0", color=green];
// [Asm]   r14 [label="a1", color=blue];
// [Asm]   r8 [label="v12 ← a1", color=green];
// [Asm]   r5 [label="v4 ← s1", color=green];
// [Asm]   r15 [label="a2", color=blue];
// [Asm]   r24 [label="v8 ← a0", color=green];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="a3", color=blue];
// [Asm]   r18 [label="a5", color=blue];
// [Asm]   r19 [label="a6", color=blue];
// [Asm]   r21 [label="v9 ← a0", color=green];
// [Asm]   r17 [label="a4", color=blue];
// [Asm]   r12 [label="t3", color=blue];
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r21;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r0 -- r15;
// [Asm]   r0 -- r13;
// [Asm]   r4 -- r16;
// [Asm]   r5 -- r21;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r4 -- r23;
// [Asm]   r5 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r18;
// [Asm]   r5 -- r10;
// [Asm]   r1 -- r4;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r23;
// [Asm]   r5 -- r22;
// [Asm]   r0 -- r17;
// [Asm]   r5 -- r13;
// [Asm]   r5 -- r18;
// [Asm]   r0 -- r14;
// [Asm]   r2 -- r10;
// [Asm]   r5 -- r19;
// [Asm]   r4 -- r20;
// [Asm]   r6 -- r16;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r4 -- r22;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r12;
// [Asm]   r0 -- r16;
// [Asm]   r0 -- r19;
// [Asm]   r3 -- r5;
// [Asm]   r6 -- r20;
// [Asm]   r6 -- r8;
// [Asm]   r0 -- r6;
// [Asm]   r4 -- r21;
// [Asm]   r6 -- r13;
// [Asm]   r6 -- r19;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r9;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r0 -- r5;
// [Asm]   r2 -- r21;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r2 -- r5;
// [Asm]   r6 -- r17;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r17;
// [Asm]   r0 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r0 -- r12;
// [Asm]   r5 -- r14;
// [Asm]   r0 -- r11;
// [Asm]   r4 -- r17;
// [Asm]   r2 -- r22;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r9;
// [Asm]   r6 -- r23;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r4 -- r14;
// [Asm]   r0 -- r20;
// [Asm]   r2 -- r3;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r23;
// [Asm]   r5 -- r15;
// [Asm]   r4 -- r19;
// [Asm]   r0 -- r18;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:a0-> 1:v0-> 2:zero-> 4:v3-> 3:v2-> 5:v4-> 6:v5-> 8:v12-> 9:t0-> 10:t1-> 11:t2-> 12:t3-> 13:t4-> 14:a1-> 15:a2-> 16:a3-> 17:a4-> 18:a5-> 19:a6-> 20:a7-> 21:v9-> 23:v6-> 7:s10-> 22:v10-> 24:v8"
// [Asm]   comment = "v6<-a0;v2<-a0;v5<-s2;v3<-s0;v0<-a1;v10<-a0;v12<-a1;v4<-s1;v8<-a0;v9<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of f54_13"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   lw v3, 8(v0) ->   lw s0, 8(a1)
// [Asm] subst   ld v4, 16(v0) ->   ld s1, 16(a1)
// [Asm] subst   mv v5, v2 ->   mv s2, a0
// [Asm] subst   mv s10, v4 ->   mv s10, s1
// [Asm] subst   ld v12, 0(v4) ->   ld a1, 0(s1)
// [Asm] subst   mv a0, v5 ->   mv a0, s2
// [Asm] subst   jalr v12 ->   jalr a1
// [Asm] subst   addi v10, v5, 1 ->   addi a0, s2, 1
// [Asm] subst   mv v5, v10 ->   mv s2, a0
// [Asm] subst   j .f54_13_0 ->   j .f54_13_0
// [Asm] subst   addi v6, v3, -1 ->   addi a0, s0, -1
// [Asm] subst   blt v6, v5, .f54_13_2 ->   blt a0, s2, .f54_13_2
// [Asm] subst   mv v8, zero ->   mv a0, zero
// [Asm] pre_assigned_registers: FnParam(fref=f19, fpref=$f.0) -> v2, Insn(iref=%3) -> v9, FnParam(fref=f19, fpref=$f.1) -> v3, Insn(iref=%7) -> v13, Self(fref=f19) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v14, Insn(iref=%2) -> v8, FreeVar(fvref=^1) -> v4, FreeVar(fvref=^2) -> v5, Insn(iref=%1) -> v7, Insn(iref=%6) -> v12, Insn(iref=%5) -> v11, Insn(iref=%0) -> v6, Insn(iref=%4) -> v10
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%0), Insn(iref=%2)])
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move_origin: [zero]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v14]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v5, zero, a0, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, a1, zero, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, v5, a1, zero, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v10]
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, zero]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v5, v12, zero]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move_origin: [zero]
// [Asm] defined: v14 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v14]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, a0, a1, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [zero, a0, v0, a1]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v0, a1, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, zero, v0, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, zero, v0, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v5, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v3, v5, zero, v22, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v3, v5, zero, v23, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v3, v5, zero, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v3, v5, zero, v19, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v3, v5, zero, v20, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v3, v5, zero, v8, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of sort_2157_19"];
// [Asm]   r0 [label="v14 ← a0", color=green];
// [Asm]   r20 [label="v12 ← a0", color=green];
// [Asm]   r23 [label="v22 ← a1", color=green];
// [Asm]   r3 [label="v5 ← s0", color=green];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r26 [label="v19 ← a4", color=green];
// [Asm]   r27 [label="v20 ← a4", color=green];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="a3", color=blue];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r29 [label="v8 ← a4", color=green];
// [Asm]   r28 [label="v7 ← a4", color=green];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r22 [label="v4 ← a0", color=green];
// [Asm]   r14 [label="a4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r5 [label="v3 ← a3", color=green];
// [Asm]   r24 [label="v23 ← a1", color=green];
// [Asm]   r15 [label="a5", color=blue];
// [Asm]   r25 [label="v6 ← a1", color=green];
// [Asm]   r2 [label="v2 ← a2", color=green];
// [Asm]   r16 [label="a6", color=blue];
// [Asm]   r18 [label="v10 ← a0", color=green];
// [Asm]   r19 [label="v11 ← a0", color=green];
// [Asm]   r17 [label="a7", color=blue];
// [Asm]   r21 [label="v0 ← a4", color=green];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r21;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r25 -- r28;
// [Asm]   r4 -- r16;
// [Asm]   r5 -- r21;
// [Asm]   r3 -- r25;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r16;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r5 -- r23;
// [Asm]   r5 -- r22;
// [Asm]   r1 -- r7;
// [Asm]   r25 -- r27;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r10;
// [Asm]   r22 -- r29;
// [Asm]   r3 -- r9;
// [Asm]   r1 -- r15;
// [Asm]   r22 -- r26;
// [Asm]   r3 -- r11;
// [Asm]   r4 -- r20;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r17;
// [Asm]   r25 -- r26;
// [Asm]   r5 -- r29;
// [Asm]   r3 -- r28;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r4 -- r18;
// [Asm]   r1 -- r16;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r5;
// [Asm]   r22 -- r24;
// [Asm]   r3 -- r22;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r28;
// [Asm]   r22 -- r25;
// [Asm]   r2 -- r29;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r25 -- r29;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r5 -- r28;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r22 -- r28;
// [Asm]   r4 -- r28;
// [Asm]   r22 -- r27;
// [Asm]   r22 -- r23;
// [Asm]   r3 -- r29;
// [Asm]   r3 -- r20;
// [Asm]   r3 -- r10;
// [Asm]   r2 -- r21;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r4 -- r29;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r27;
// [Asm]   r3 -- r14;
// [Asm]   r4 -- r7;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r25;
// [Asm]   r4 -- r8;
// [Asm]   r5 -- r25;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r21 -- r22;
// [Asm]   r2 -- r24;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r4 -- r26;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   r4 -- r19;
// [Asm]   comment = "0:v14-> 1:a0-> 2:v2-> 3:v5-> 4:zero-> 5:v3-> 6:a1-> 21:v0-> 22:v4-> 23:v22-> 24:v23-> 25:v6-> 26:v19-> 27:v20-> 28:v7-> 29:v8-> 7:a2-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:a3-> 14:a4-> 15:a5-> 16:a6-> 17:a7-> 18:v10-> 19:v11-> 20:v12"
// [Asm]   comment = "v14<-a0;v12<-a0;v22<-a1;v5<-s0;v19<-a4;v20<-a4;v8<-a4;v7<-a4;v4<-a0;v3<-a3;v23<-a1;v6<-a1;v2<-a2;v10<-a0;v11<-a0;v0<-a4;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of sort_2157_19"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v14, zero ->   mv a0, zero
// [Asm] subst   j .sort_2157_19_3 ->   j .sort_2157_19_3
// [Asm] subst   mv a1, v2 ->   mv a1, a2
// [Asm] subst   mv a2, v3 ->   mv a2, a3
// [Asm] subst   call swap1_0 ->   call swap1_0
// [Asm] subst   lw v11, 0(v5) ->   lw a0, 0(s0)
// [Asm] subst   addi v12, v11, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v12, 0(v5) ->   sw a0, 0(s0)
// [Asm] subst   mv v14, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v0, s10 ->   mv a4, s10
// [Asm] subst   mv v2, a0 ->   mv a2, a0
// [Asm] subst   mv v3, a1 ->   mv a3, a1
// [Asm] subst   ld v4, 8(v0) ->   ld a0, 8(a4)
// [Asm] subst   ld v5, 16(v0) ->   ld s0, 16(a4)
// [Asm] subst   slliw v22, v3, 2 ->   slliw a1, a3, 2
// [Asm] subst   add v23, v4, v22 ->   add a1, a0, a1
// [Asm] subst   lw v6, 0(v23) ->   lw a1, 0(a1)
// [Asm] subst   slliw v19, v2, 2 ->   slliw a4, a2, 2
// [Asm] subst   add v20, v4, v19 ->   add a4, a0, a4
// [Asm] subst   lw v7, 0(v20) ->   lw a4, 0(a4)
// [Asm] subst   addi v8, v7, -1 ->   addi a4, a4, -1
// [Asm] subst   blt v8, v6, .sort_2157_19_2 ->   blt a4, a1, .sort_2157_19_2
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v10, Self(fref=f26) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v8, FnParam(fref=f26, fpref=$f.0) -> v2, Insn(iref=%2) -> v9, Insn(iref=%1) -> v7, FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, BlockParam(bref=b0, bpref=$b.0) -> v5, Insn(iref=%0) -> v6, Insn(iref=%4) -> v11
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Asm] defs: []
// [Asm] live_set: [zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v0, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, v5, zero, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v4, v5, zero, v9, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v3, v4, v5, zero, v9, v13]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v4, v5, v14, zero, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v11]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: [zero]
// [Asm] defined: v8 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of input243_26"];
// [Asm]   r0 [label="v0 ← a1", color=green];
// [Asm]   r20 [label="v9 ← a0", color=green];
// [Asm]   r23 [label="v11 ← a0", color=green];
// [Asm]   r3 [label="v2 ← a0", color=green];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="v5 ← s2", color=green];
// [Asm]   r13 [label="a1", color=blue];
// [Asm]   r4 [label="v3 ← s0", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="v6 ← a0", color=green];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r22 [label="v14 ← a1", color=green];
// [Asm]   r14 [label="a2", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r5 [label="v4 ← s1", color=green];
// [Asm]   r24 [label="v8 ← a0", color=green];
// [Asm]   r15 [label="a3", color=blue];
// [Asm]   r2 [label="a0", color=blue];
// [Asm]   r16 [label="a4", color=blue];
// [Asm]   r18 [label="a6", color=blue];
// [Asm]   r19 [label="a7", color=blue];
// [Asm]   r21 [label="v13 ← a1", color=green];
// [Asm]   r17 [label="a5", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r21;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r4 -- r16;
// [Asm]   r5 -- r21;
// [Asm]   r6 -- r11;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r20;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r10;
// [Asm]   r2 -- r18;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r23;
// [Asm]   r1 -- r4;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r23;
// [Asm]   r5 -- r22;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r22;
// [Asm]   r5 -- r13;
// [Asm]   r5 -- r18;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r5 -- r19;
// [Asm]   r1 -- r15;
// [Asm]   r4 -- r20;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r17;
// [Asm]   r6 -- r16;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r1 -- r16;
// [Asm]   r4 -- r22;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r12;
// [Asm]   r3 -- r5;
// [Asm]   r6 -- r20;
// [Asm]   r6 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r6 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r6 -- r19;
// [Asm]   r2 -- r6;
// [Asm]   r20 -- r22;
// [Asm]   r4 -- r15;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r9;
// [Asm]   r0 -- r3;
// [Asm]   r1 -- r21;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r6 -- r17;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r1 -- r11;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r5 -- r14;
// [Asm]   r4 -- r17;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r4 -- r14;
// [Asm]   r20 -- r21;
// [Asm]   r4 -- r9;
// [Asm]   r5 -- r15;
// [Asm]   r4 -- r19;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v0-> 1:zero-> 2:a0-> 4:v3-> 3:v2-> 5:v4-> 6:v5-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:a1-> 14:a2-> 15:a3-> 16:a4-> 17:a5-> 18:a6-> 19:a7-> 7:v6-> 20:v9-> 21:v13-> 22:v14-> 23:v11-> 24:v8"
// [Asm]   comment = "v0<-a1;v9<-a0;v11<-a0;v2<-a0;v5<-s2;v3<-s0;v6<-a0;v14<-a1;v4<-s1;v8<-a0;v13<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of input243_26"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   lw v3, 8(v0) ->   lw s0, 8(a1)
// [Asm] subst   ld v4, 16(v0) ->   ld s1, 16(a1)
// [Asm] subst   mv v5, v2 ->   mv s2, a0
// [Asm] subst   addi v6, v3, -1 ->   addi a0, s0, -1
// [Asm] subst   blt v6, v5, .input243_26_2 ->   blt a0, s2, .input243_26_2
// [Asm] subst   call minimbt_read_int ->   call minimbt_read_int
// [Asm] subst   slliw v13, v5, 2 ->   slliw a1, s2, 2
// [Asm] subst   add v14, v4, v13 ->   add a1, s1, a1
// [Asm] subst   sw v9, 0(v14) ->   sw a0, 0(a1)
// [Asm] subst   addi v11, v5, 1 ->   addi a0, s2, 1
// [Asm] subst   mv v5, v11 ->   mv s2, a0
// [Asm] subst   j .input243_26_0 ->   j .input243_26_0
// [Asm] subst   mv v8, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v12, FnParam(fref=f1, fpref=$f.1) -> v3, FnParam(fref=f1, fpref=$f.0) -> v2, FnParam(fref=f1, fpref=$f.2) -> v4, BlockParam(bref=b3, bpref=$b.0) -> v10, Insn(iref=%2) -> v11, Insn(iref=%1) -> v9, BlockParam(bref=b0, bpref=$b.0) -> v5, Self(fref=f1) -> v0, BlockParam(bref=b0, bpref=$b.1) -> v6, BlockParam(bref=b0, bpref=$b.2) -> v7, Insn(iref=%5) -> v14, Insn(iref=%0) -> v8, Insn(iref=%4) -> v13
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%0)])
// [Asm] defs: [v18]
// [Asm] live_set: [v5, v6, v18, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v19, v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, v6, zero, a0, v7]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, v6, zero, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v12]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, v6, zero, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v13]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v5, v14, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v14, zero, v7]
// [Asm] move_origin: [v5]
// [Asm] defs: [v6]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v14]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move_origin: [v3]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v4]
// [Asm] defined: v7 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [zero]
// [Asm] defined: v10 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of output14_1"];
// [Asm]   r0 [label="v18 ← a0", color=green];
// [Asm]   r20 [label="v12 ← a0", color=green];
// [Asm]   r23 [label="v2 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r26 [label="v10 ← a0", color=green];
// [Asm]   r27 [label="v8 ← a0", color=green];
// [Asm]   r6 [label="v11 ← a0", color=green];
// [Asm]   r13 [label="a1", color=blue];
// [Asm]   r4 [label="v7 ← s2", color=green];
// [Asm]   r1 [label="v5 ← s0", color=green];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a0", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r22 [label="v14 ← a0", color=green];
// [Asm]   r14 [label="a2", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r5 [label="v19 ← a0", color=green];
// [Asm]   r15 [label="a3", color=blue];
// [Asm]   r24 [label="v3 ← a1", color=green];
// [Asm]   r25 [label="v4 ← a2", color=green];
// [Asm]   r2 [label="v6 ← s1", color=green];
// [Asm]   r16 [label="a4", color=blue];
// [Asm]   r18 [label="a6", color=blue];
// [Asm]   r19 [label="a7", color=blue];
// [Asm]   r21 [label="v13 ← a0", color=green];
// [Asm]   r17 [label="a5", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r1 -- r12;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r4 -- r22;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r7 -- r10;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r27;
// [Asm]   r23 -- r24;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r8;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r7 -- r8;
// [Asm]   r24 -- r25;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r5;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r14 -- r23;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r22;
// [Asm]   r7 -- r13;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r20;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r14 -- r24;
// [Asm]   r7 -- r9;
// [Asm]   r3 -- r22;
// [Asm]   r7 -- r17;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r23 -- r25;
// [Asm]   r7 -- r19;
// [Asm]   r2 -- r14;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r13 -- r23;
// [Asm]   r7 -- r15;
// [Asm]   r7 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r1 -- r25;
// [Asm]   r2 -- r21;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r4 -- r17;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r7 -- r12;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r7 -- r14;
// [Asm]   r2 -- r27;
// [Asm]   r4 -- r19;
// [Asm]   r1 -- r24;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:v18-> 1:v5-> 2:v6-> 3:zero-> 4:v7-> 5:v19-> 6:v11-> 7:a0-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:a1-> 14:a2-> 15:a3-> 16:a4-> 17:a5-> 18:a6-> 19:a7-> 20:v12-> 21:v13-> 27:v8-> 22:v14-> 23:v2-> 24:v3-> 25:v4-> 26:v10"
// [Asm]   comment = "v18<-a0;v12<-a0;v2<-a0;v10<-a0;v8<-a0;v11<-a0;v7<-s2;v5<-s0;v14<-a0;v19<-a0;v3<-a1;v4<-a2;v6<-s1;v13<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of output14_1"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   slliw v18, v6, 2 ->   slliw a0, s1, 2
// [Asm] subst   add v19, v5, v18 ->   add a0, s0, a0
// [Asm] subst   lw v11, 0(v19) ->   lw a0, 0(a0)
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   addi v14, v6, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v6, v14 ->   mv s1, a0
// [Asm] subst   j .output14_1_0 ->   j .output14_1_0
// [Asm] subst   mv v5, v2 ->   mv s0, a0
// [Asm] subst   mv v6, v3 ->   mv s1, a1
// [Asm] subst   mv v7, v4 ->   mv s2, a2
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v10, zero ->   mv a0, zero
// [Asm] subst   addi v8, v7, -1 ->   addi a0, s2, -1
// [Asm] subst   blt v8, v6, .output14_1_2 ->   blt a0, s1, .output14_1_2
// [Asm] pre_assigned_registers: Insn(iref=%9) -> v17, FreeVar(fvref=^2) -> v4, FreeVar(fvref=^1) -> v3, Insn(iref=%8) -> v16, BlockParam(bref=b0, bpref=$b.0) -> v5, Insn(iref=%5) -> v11, Insn(iref=%0) -> v6, Insn(iref=%4) -> v10, Insn(iref=%3) -> v9, Insn(iref=%7) -> v15, BlockParam(bref=b5, bpref=$b.0) -> v13, FnParam(fref=f11, fpref=$f.0) -> v2, BlockParam(bref=b6, bpref=$b.0) -> v14, Self(fref=f11) -> v0, Insn(iref=%2) -> v8, Insn(iref=%1) -> v7, Insn(iref=%6) -> v12
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%2), Insn(iref=%5)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%0), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v14]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v5, zero, v4, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v4, v15, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, a0, v4, a1, v15, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, zero, a0, v4, a2, a1, v3]
// [Asm] move_origin: [v15]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, v5, zero, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v16]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v4, v17, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v17]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move_origin: [zero]
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move_origin: [v13]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v14]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move_origin: [zero]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v0, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v4, v5, zero, v26, v3]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v4, v5, zero, v27, v3]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v8, v4, v5, zero, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v8, v4, v5, zero, v22, v3]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v8, v4, v5, zero, v23, v3]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v8, v4, v5, v10, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v8, v11, v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of g37_11"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r26 [label="v27 ← a0", color=green];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="a3", color=blue];
// [Asm]   r4 [label="v4 ← s1", color=green];
// [Asm]   r29 [label="v22 ← a1", color=green];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r5 [label="v3 ← s2", color=green];
// [Asm]   r24 [label="v2 ← a0", color=green];
// [Asm]   r15 [label="a5", color=blue];
// [Asm]   r32 [label="v11 ← a1", color=green];
// [Asm]   r31 [label="v10 ← a1", color=green];
// [Asm]   r17 [label="a7", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r20 [label="v13 ← a0", color=green];
// [Asm]   r23 [label="v0 ← a1", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r27 [label="v8 ← a0", color=green];
// [Asm]   r1 [label="v15 ← a2", color=green];
// [Asm]   r28 [label="v9 ← a1", color=green];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r22 [label="v6 ← a0", color=green];
// [Asm]   r14 [label="a4", color=blue];
// [Asm]   r30 [label="v23 ← a1", color=green];
// [Asm]   r25 [label="v26 ← a0", color=green];
// [Asm]   r2 [label="v5 ← s0", color=green];
// [Asm]   r16 [label="a6", color=blue];
// [Asm]   r18 [label="v16 ← a0", color=green];
// [Asm]   r19 [label="v17 ← a0", color=green];
// [Asm]   r21 [label="v14 ← a0", color=green];
// [Asm]   r2 -- r32;
// [Asm]   r2 -- r31;
// [Asm]   r0 -- r13;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r27 -- r29;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r0 -- r17;
// [Asm]   r5 -- r18;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r32;
// [Asm]   r27 -- r32;
// [Asm]   r3 -- r11;
// [Asm]   r5 -- r29;
// [Asm]   r0 -- r23;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r27;
// [Asm]   r27 -- r28;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r31;
// [Asm]   r0 -- r16;
// [Asm]   r3 -- r5;
// [Asm]   r27 -- r30;
// [Asm]   r4 -- r31;
// [Asm]   r0 -- r6;
// [Asm]   r5 -- r31;
// [Asm]   r3 -- r8;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r30;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r9;
// [Asm]   r3 -- r13;
// [Asm]   r4 -- r28;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r5 -- r32;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r29;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r27;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r10;
// [Asm]   r23 -- r24;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r25;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r5 -- r14;
// [Asm]   r0 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r27 -- r31;
// [Asm]   r6 -- r7;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r0 -- r15;
// [Asm]   r4 -- r16;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r26;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r5 -- r23;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r0 -- r14;
// [Asm]   r5 -- r19;
// [Asm]   r3 -- r28;
// [Asm]   r4 -- r30;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r5 -- r11;
// [Asm]   r3 -- r22;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r5 -- r28;
// [Asm]   r2 -- r14;
// [Asm]   r5 -- r9;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r8;
// [Asm]   r4 -- r32;
// [Asm]   r3 -- r29;
// [Asm]   r0 -- r5;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r30;
// [Asm]   r0 -- r12;
// [Asm]   r5 -- r25;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r3;
// [Asm]   r4 -- r26;
// [Asm]   r0 -- r7;
// [Asm]   r5 -- r30;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   r4 -- r19;
// [Asm]   r5 -- r15;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:a0-> 1:v15-> 2:v5-> 3:zero-> 4:v4-> 5:v3-> 6:a1-> 7:a2-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:a3-> 14:a4-> 15:a5-> 16:a6-> 17:a7-> 18:v16-> 22:v6-> 25:v26-> 26:v27-> 27:v8-> 28:v9-> 29:v22-> 30:v23-> 31:v10-> 32:v11-> 19:v17-> 23:v0-> 24:v2-> 20:v13-> 21:v14"
// [Asm]   comment = "v27<-a0;v4<-s1;v22<-a1;v3<-s2;v2<-a0;v11<-a1;v10<-a1;v13<-a0;v0<-a1;v8<-a0;v15<-a2;v9<-a1;v6<-a0;v23<-a1;v26<-a0;v5<-s0;v16<-a0;v17<-a0;v14<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of g37_11"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   addi v15, v5, -1 ->   addi a2, s0, -1
// [Asm] subst   mv a0, v4 ->   mv a0, s1
// [Asm] subst   mv a1, v5 ->   mv a1, s0
// [Asm] subst   call swap1_0 ->   call swap1_0
// [Asm] subst   addi v17, v5, -1 ->   addi a0, s0, -1
// [Asm] subst   mv v5, v17 ->   mv s0, a0
// [Asm] subst   j .g37_11_0 ->   j .g37_11_0
// [Asm] subst   mv v13, zero ->   mv a0, zero
// [Asm] subst   j .g37_11_6 ->   j .g37_11_6
// [Asm] subst   addi v6, v3, 1 ->   addi a0, s2, 1
// [Asm] subst   blt v5, v6, .g37_11_2 ->   blt s0, a0, .g37_11_2
// [Asm] subst   mv v14, zero ->   mv a0, zero
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   lw v3, 8(v0) ->   lw s2, 8(a1)
// [Asm] subst   ld v4, 16(v0) ->   ld s1, 16(a1)
// [Asm] subst   mv v5, v2 ->   mv s0, a0
// [Asm] subst   slliw v26, v5, 2 ->   slliw a0, s0, 2
// [Asm] subst   add v27, v4, v26 ->   add a0, s1, a0
// [Asm] subst   lw v8, 0(v27) ->   lw a0, 0(a0)
// [Asm] subst   addi v9, v5, -1 ->   addi a1, s0, -1
// [Asm] subst   slliw v22, v9, 2 ->   slliw a1, a1, 2
// [Asm] subst   add v23, v4, v22 ->   add a1, s1, a1
// [Asm] subst   lw v10, 0(v23) ->   lw a1, 0(a1)
// [Asm] subst   addi v11, v10, -1 ->   addi a1, a1, -1
// [Asm] subst   blt v11, v8, .g37_11_4 ->   blt a1, a0, .g37_11_4
// [Asm] pre_assigned_registers: FnParam(fref=f5, fpref=$f.2) -> v4, BlockParam(bref=b3, bpref=$b.0) -> v19, Insn(iref=%9) -> v16, Insn(iref=%8) -> v15, Insn(iref=%10) -> v17, BlockParam(bref=b0, bpref=$b.0) -> v5, BlockParam(bref=b0, bpref=$b.1) -> v6, BlockParam(bref=b0, bpref=$b.2) -> v7, Insn(iref=%5) -> v12, Insn(iref=%0) -> v8, Insn(iref=%4) -> v11, Insn(iref=%3) -> v10, FnParam(fref=f5, fpref=$f.0) -> v2, Self(fref=f5) -> v0, Insn(iref=%7) -> v14, Insn(iref=%2) -> v18, Insn(iref=%1) -> v9, Insn(iref=%6) -> v13, FnParam(fref=f5, fpref=$f.1) -> v3
// [Asm] skipping Load(ty=Bool, ma=Field(ty=Bool, val=Insn(iref=%6), index=1, width=@(@32, @(@32, @32))))
// [Asm] skipping Load(ty=Bool, ma=Field(ty=Bool, val=Insn(iref=%3), index=1, width=@(@32, @(@32, @32))))
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%0), Int32(val=16)])
// [Asm] defs: []
// [Asm] live_set: [a2, a1, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6]
// [Asm] move_origin: [v3]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, v7]
// [Asm] move_origin: [v4]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v7, v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, a0, v7, v6]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, a0, v7, v6, a1]
// [Asm] move_origin: [v6]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, a0, v7, a2, v6, a1]
// [Asm] move_origin: [v7]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, a0, v7, v6]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, v7, v6]
// [Asm] move_origin: [a0]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v7, v6]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, v7, v6]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v7, v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v5, a0, v7, v6]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, a0, v7, v6, a1]
// [Asm] move_origin: [v11]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, a0, v7, a2, v6, a1]
// [Asm] move_origin: [v6]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v5, a0, v7, a2, v6, a1, a3]
// [Asm] move_origin: [v7]
// [Asm] defined: a3 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, v6, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v13]
// [Asm] live_set: [v5, v6, v13, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v13, v7]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v5, v14, v6, v7]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v14, v6, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, v14, v6, a0, v7]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, v14, a1, a0, v7]
// [Asm] move_origin: [v6]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, v5, v14, a1, a0, v7]
// [Asm] move_origin: [v14]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, v14, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v16]
// [Asm] live_set: [v5, v14, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v14, v7]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v5, v17, v7]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v17, v7]
// [Asm] move_origin: [v5]
// [Asm] defs: [v6]
// [Asm] live_set: [v5, v6, v7]
// [Asm] move_origin: [v17]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v7]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v7]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v5, v6, v7]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v8, v5, v6, v27, v7]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6, v5, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v6, a0, v7]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0, v7]
// [Asm] move_origin: [v6]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0]
// [Asm] move_origin: [v7]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v18]
// [Asm] live_set: [v18]
// [Asm] move_origin: [a0]
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v18]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v19]
// [Asm] move_origin: [v18]
// [Asm] defined: v19 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v19]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of quick_sort210_5"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r20 [label="v11 ← a1", color=green];
// [Asm]   r23 [label="v16 ← a0", color=green];
// [Asm]   r3 [label="v3 ← a1", color=green];
// [Asm]   r9 [label="t0", color=blue];
// [Asm]   r26 [label="v27 ← a1", color=green];
// [Asm]   r27 [label="v18 ← a0", color=green];
// [Asm]   r6 [label="v6 ← s1", color=green];
// [Asm]   r13 [label="t4", color=blue];
// [Asm]   r4 [label="v4 ← a2", color=green];
// [Asm]   r1 [label="a2", color=blue];
// [Asm]   r28 [label="v19 ← a0", color=green];
// [Asm]   r11 [label="t2", color=blue];
// [Asm]   r7 [label="v7 ← s2", color=green];
// [Asm]   r10 [label="t1", color=blue];
// [Asm]   r22 [label="v14 ← s3", color=green];
// [Asm]   r14 [label="a3", color=blue];
// [Asm]   r8 [label="a0", color=blue];
// [Asm]   r5 [label="v5 ← s0", color=green];
// [Asm]   r15 [label="a4", color=blue];
// [Asm]   r24 [label="v17 ← a0", color=green];
// [Asm]   r25 [label="v8 ← a0", color=green];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="a5", color=blue];
// [Asm]   r18 [label="a7", color=blue];
// [Asm]   r19 [label="v10 ← a0", color=green];
// [Asm]   r21 [label="v13 ← a0", color=green];
// [Asm]   r17 [label="a6", color=blue];
// [Asm]   r12 [label="t3", color=blue];
// [Asm]   r6 -- r21;
// [Asm]   r5 -- r21;
// [Asm]   r7 -- r21;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r10;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r1 -- r7;
// [Asm]   r7 -- r25;
// [Asm]   r5 -- r18;
// [Asm]   r2 -- r7;
// [Asm]   r3 -- r5;
// [Asm]   r8 -- r12;
// [Asm]   r6 -- r13;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r8 -- r16;
// [Asm]   r0 -- r2;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r7 -- r10;
// [Asm]   r17 -- r22;
// [Asm]   r2 -- r8;
// [Asm]   r1 -- r2;
// [Asm]   r10 -- r22;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r5 -- r7;
// [Asm]   r8 -- r22;
// [Asm]   r5 -- r14;
// [Asm]   r13 -- r22;
// [Asm]   r8 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r14 -- r22;
// [Asm]   r16 -- r22;
// [Asm]   r6 -- r25;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r5 -- r20;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r23;
// [Asm]   r7 -- r24;
// [Asm]   r15 -- r22;
// [Asm]   r8 -- r9;
// [Asm]   r7 -- r26;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r22;
// [Asm]   r7 -- r13;
// [Asm]   r7 -- r20;
// [Asm]   r5 -- r19;
// [Asm]   r6 -- r16;
// [Asm]   r25 -- r26;
// [Asm]   r11 -- r22;
// [Asm]   r6 -- r22;
// [Asm]   r18 -- r22;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r8 -- r20;
// [Asm]   r6 -- r26;
// [Asm]   r6 -- r12;
// [Asm]   r6 -- r20;
// [Asm]   r6 -- r8;
// [Asm]   r7 -- r17;
// [Asm]   r9 -- r22;
// [Asm]   r6 -- r19;
// [Asm]   r7 -- r22;
// [Asm]   r7 -- r19;
// [Asm]   r8 -- r13;
// [Asm]   r2 -- r14;
// [Asm]   r5 -- r9;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r0 -- r3;
// [Asm]   r8 -- r15;
// [Asm]   r7 -- r15;
// [Asm]   r12 -- r22;
// [Asm]   r8 -- r18;
// [Asm]   r22 -- r23;
// [Asm]   r7 -- r11;
// [Asm]   r6 -- r17;
// [Asm]   r8 -- r10;
// [Asm]   r5 -- r25;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r7 -- r23;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r3;
// [Asm]   r7 -- r12;
// [Asm]   r7 -- r14;
// [Asm]   r5 -- r15;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v2-> 1:a2-> 2:a1-> 3:v3-> 5:v5-> 4:v4-> 6:v6-> 7:v7-> 8:a0-> 14:a3-> 22:v14-> 9:t0-> 10:t1-> 11:t2-> 12:t3-> 13:t4-> 15:a4-> 16:a5-> 17:a6-> 18:a7-> 20:v11-> 19:v10-> 21:v13-> 23:v16-> 25:v8-> 26:v27-> 24:v17-> 27:v18-> 28:v19"
// [Asm]   comment = "v2<-a0;v11<-a1;v16<-a0;v3<-a1;v27<-a1;v18<-a0;v6<-s1;v4<-a2;v19<-a0;v7<-s2;v14<-s3;v5<-s0;v17<-a0;v8<-a0;v10<-a0;v13<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of quick_sort210_5"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v5, v2 ->   mv s0, a0
// [Asm] subst   mv v6, v3 ->   mv s1, a1
// [Asm] subst   mv v7, v4 ->   mv s2, a2
// [Asm] subst   mv a0, v5 ->   mv a0, s0
// [Asm] subst   mv a1, v6 ->   mv a1, s1
// [Asm] subst   mv a2, v7 ->   mv a2, s2
// [Asm] subst   call choose_pivot129_4 ->   call choose_pivot129_4
// [Asm] subst   lw v11, 0(v10) ->   lw a1, 0(a0)
// [Asm] subst   mv a0, v5 ->   mv a0, s0
// [Asm] subst   mv a2, v6 ->   mv a2, s1
// [Asm] subst   mv a3, v7 ->   mv a3, s2
// [Asm] subst   call partition65_3 ->   call partition65_3
// [Asm] subst   lw v14, 0(v13) ->   lw s3, 0(a0)
// [Asm] subst   mv a0, v5 ->   mv a0, s0
// [Asm] subst   mv a1, v6 ->   mv a1, s1
// [Asm] subst   mv a2, v14 ->   mv a2, s3
// [Asm] subst   call quick_sort210_5 ->   call quick_sort210_5
// [Asm] subst   addi v17, v14, 1 ->   addi a0, s3, 1
// [Asm] subst   mv v6, v17 ->   mv s1, a0
// [Asm] subst   j .quick_sort210_5_0 ->   j .quick_sort210_5_0
// [Asm] subst   sub v8, v7, v6 ->   sub a0, s2, s1
// [Asm] subst   li v27, 16 ->   li a1, 16
// [Asm] subst   bge v27, v8, .quick_sort210_5_1 ->   bge a1, a0, .quick_sort210_5_1
// [Asm] subst   mv a0, v5 ->   mv a0, s0
// [Asm] subst   mv a1, v6 ->   mv a1, s1
// [Asm] subst   mv a2, v7 ->   mv a2, s2
// [Asm] subst   call insertion_sort30_2 ->   call insertion_sort30_2
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Mem(fref=f2, mref=m1) -> v6, Insn(iref=%3) -> v10, Mem(fref=f2, mref=m0) -> v5, Insn(iref=%2) -> v9, Self(fref=f2) -> v0, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%1) -> v8, FnParam(fref=f2, fpref=$f.0) -> v2, FnParam(fref=f2, fpref=$f.2) -> v4, Insn(iref=%0) -> v7
// [Asm] defs: []
// [Asm] live_set: [a0, a2, a1, s11]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, a2, s11, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v4, s11, v2]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v3, v4, v17, v2]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v5, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v5, v4, s11, v2]
// [Asm] move_origin: [v5]
// [Asm] defined: s11 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v3, v5, v19, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v5, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v5, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, v5, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v4, v5, v14, v3]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, v5, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v4, v6, v5, v3]
// [Asm] move_origin: [v6]
// [Asm] defined: s11 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v4, v6, v5, v16, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v6, v5, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6, v5, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v6, v9]
// [Asm] move_origin: [v6]
// [Asm] defined: s10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v9]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, a0]
// [Asm] move_origin: [v9]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [a0]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v10]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of insertion_sort30_2"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r20 [label="t4", color=blue];
// [Asm]   r23 [label="a5", color=blue];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r9 [label="v14 ← a0", color=green];
// [Asm]   r26 [label="v10 ← a0", color=green];
// [Asm]   r6 [label="v17 ← a3", color=green];
// [Asm]   r13 [label="s10", color=blue];
// [Asm]   r4 [label="v3 ← a1", color=green];
// [Asm]   r1 [label="a2", color=blue];
// [Asm]   r11 [label="v16 ← a4", color=green];
// [Asm]   r7 [label="v5 ← a3", color=green];
// [Asm]   r10 [label="v6 ← a0", color=green];
// [Asm]   r22 [label="a4", color=blue];
// [Asm]   r14 [label="v11 ← a2", color=green];
// [Asm]   r8 [label="v19 ← a4", color=green];
// [Asm]   r5 [label="v4 ← a2", color=green];
// [Asm]   r24 [label="a6", color=blue];
// [Asm]   r15 [label="a0", color=blue];
// [Asm]   r25 [label="a7", color=blue];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="t0", color=blue];
// [Asm]   r18 [label="t2", color=blue];
// [Asm]   r19 [label="t3", color=blue];
// [Asm]   r17 [label="t1", color=blue];
// [Asm]   r21 [label="a3", color=blue];
// [Asm]   r12 [label="v9 ← a1", color=green];
// [Asm]   r15 -- r18;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r12 -- r13;
// [Asm]   r15 -- r17;
// [Asm]   r2 -- r15;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r9;
// [Asm]   r15 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r10 -- r12;
// [Asm]   r5 -- r8;
// [Asm]   r0 -- r8;
// [Asm]   r5 -- r10;
// [Asm]   r1 -- r4;
// [Asm]   r7 -- r10;
// [Asm]   r15 -- r22;
// [Asm]   r10 -- r11;
// [Asm]   r7 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r15 -- r24;
// [Asm]   r4 -- r7;
// [Asm]   r1 -- r15;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r15 -- r23;
// [Asm]   r12 -- r14;
// [Asm]   r3 -- r7;
// [Asm]   r0 -- r4;
// [Asm]   r7 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r5 -- r11;
// [Asm]   r7 -- r8;
// [Asm]   r0 -- r7;
// [Asm]   r15 -- r16;
// [Asm]   r15 -- r20;
// [Asm]   r15 -- r19;
// [Asm]   r15 -- r25;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r9;
// [Asm]   r14 -- r15;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   comment = "0:v2-> 1:a2-> 4:v3-> 3:s11-> 5:v4-> 7:v5-> 8:v19-> 6:v17-> 9:v14-> 10:v6-> 11:v16-> 2:a1-> 15:a0-> 12:v9-> 14:v11-> 13:s10-> 16:t0-> 17:t1-> 18:t2-> 19:t3-> 20:t4-> 21:a3-> 22:a4-> 23:a5-> 24:a6-> 25:a7-> 26:v10"
// [Asm]   comment = "v2<-a0;v14<-a0;v10<-a0;v17<-a3;v3<-a1;v16<-a4;v5<-a3;v6<-a0;v11<-a2;v19<-a4;v4<-a2;v9<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of insertion_sort30_2"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v17, s11, -24 ->   addi a3, s11, -24
// [Asm] subst   andi v5, v17, -8 ->   andi a3, a3, -8
// [Asm] subst   mv s11, v5 ->   mv s11, a3
// [Asm] subst   la v19, g37_11 ->   la a4, g37_11
// [Asm] subst   sd v19, 0(v5) ->   sd a4, 0(a3)
// [Asm] subst   sd v3, 8(v5) ->   sd a1, 8(a3)
// [Asm] subst   sd v2, 16(v5) ->   sd a0, 16(a3)
// [Asm] subst   addi v14, s11, -24 ->   addi a0, s11, -24
// [Asm] subst   andi v6, v14, -8 ->   andi a0, a0, -8
// [Asm] subst   mv s11, v6 ->   mv s11, a0
// [Asm] subst   la v16, f54_13 ->   la a4, f54_13
// [Asm] subst   sd v16, 0(v6) ->   sd a4, 0(a0)
// [Asm] subst   sd v4, 8(v6) ->   sd a2, 8(a0)
// [Asm] subst   sd v5, 16(v6) ->   sd a3, 16(a0)
// [Asm] subst   addi v9, v3, 1 ->   addi a1, a1, 1
// [Asm] subst   mv s10, v6 ->   mv s10, a0
// [Asm] subst   ld v11, 0(v6) ->   ld a2, 0(a0)
// [Asm] subst   mv a0, v9 ->   mv a0, a1
// [Asm] subst   jalr v11 ->   jalr a2
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f3, fpref=$f.2) -> v4, Mem(fref=f3, mref=m0) -> v6, BlockParam(bref=b3, bpref=$b.0) -> v24, Insn(iref=%9) -> v19, Insn(iref=%8) -> v18, Insn(iref=%10) -> v20, FnParam(fref=f3, fpref=$f.3) -> v5, Insn(iref=%14) -> v25, FnParam(fref=f3, fpref=$f.0) -> v2, Mem(fref=f3, mref=m3) -> v9, Insn(iref=%5) -> v15, Self(fref=f3) -> v0, Insn(iref=%0) -> v10, Insn(iref=%4) -> v14, Insn(iref=%3) -> v13, Insn(iref=%13) -> v23, Insn(iref=%7) -> v17, FnParam(fref=f3, fpref=$f.1) -> v3, Mem(fref=f3, mref=m1) -> v7, Insn(iref=%2) -> v12, Insn(iref=%1) -> v11, Insn(iref=%11) -> v21, Insn(iref=%6) -> v16, Mem(fref=f3, mref=m2) -> v8, Insn(iref=%12) -> v22
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%12), Int32(val=1)])
// [Asm] defs: [v26]
// [Asm] live_set: [v24, v21, v26]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v24, v21, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v24, v21, v9]
// [Asm] move_origin: [v9]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v24, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v9]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v24]
// [Asm] live_set: [v24, s11, v21]
// [Asm] move_origin: [zero]
// [Asm] defined: v24 is X
// [Asm] defs: []
// [Asm] live_set: [v24, s11, v21]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, a0, a2, a1, s11, a3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, a2, a1, s11, a3, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, zero, a2, s11, a3, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, zero, v4, s11, a3, v2]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v5, zero, v4, s11, v2]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v3, v5, v10, zero, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v5, v10, zero, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v5, v10, zero, a0, v4, s11, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, v10, zero, a0, v4, a1, s11, v2]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, zero, a0, v4, a2, a1, s11, v2]
// [Asm] move_origin: [v10]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v5, zero, v4, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v5, zero, v4, s11, v12, v2]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v45]
// [Asm] live_set: [v5, zero, v45, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v45 is X
// [Asm] defs: [v46]
// [Asm] live_set: [v5, v46, zero, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v5, zero, v13, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v43]
// [Asm] live_set: [v5, zero, v13, v4, v43, v2]
// [Asm] move_origin: []
// [Asm] defined: v43 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v5, zero, v13, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero, v13, v4, v6, s11, v2]
// [Asm] move_origin: [v6]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v13, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v40]
// [Asm] live_set: [v40, v5, zero, v13, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v40 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, zero, v13, v7, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero, v13, v7, v4, v6, s11, v2]
// [Asm] move_origin: [v7]
// [Asm] defined: s11 is X
// [Asm] defs: [v42]
// [Asm] live_set: [v5, zero, v13, v42, v7, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v13, v7, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v37]
// [Asm] live_set: [v5, zero, v13, v7, v4, v37, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v13, v7, v8, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero, v13, v7, v8, v4, v6, s11, v2]
// [Asm] move_origin: [v8]
// [Asm] defined: s11 is X
// [Asm] defs: [v39]
// [Asm] live_set: [v5, zero, v13, v7, v8, v4, v6, s11, v39, v2]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v13, v7, v8, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v13, v7, v8, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v13, v7, v8, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, s11, v2]
// [Asm] move_origin: [v8]
// [Asm] defined: s10 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v5, zero, v7, v35, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v35, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v7, v35, v6, s11, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0, v7, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v17]
// [Asm] live_set: [v5, zero, v7, v6, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v5, v18, zero, v7, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v18, zero, v7, v19, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v18, zero, v7, v19, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v18, zero, a0, v7, v19, v6, s11]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, a0, v7, v19, v6, a1, s11]
// [Asm] move_origin: [v18]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [zero, a0, v7, a2, v6, a1, s11]
// [Asm] move_origin: [v19]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, s11, zero, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v20]
// [Asm] live_set: [v6, s11, zero, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v6, s11, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [s11, v21, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v22]
// [Asm] live_set: [s11, v21, zero, v22]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v29]
// [Asm] live_set: [s11, v21, zero, v29, v22]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: []
// [Asm] live_set: [s11, v21, zero]
// [Asm] move_origin: []
// [Asm] defs: [v28]
// [Asm] live_set: [s11, v21, v28]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v24, s11, v21]
// [Asm] move_origin: [v28]
// [Asm] defined: v24 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of partition65_3"];
// [Asm]   r0 [label="v26 ← a0", color=green];
// [Asm]   r38 [label="v35 ← a1", color=green];
// [Asm]   r33 [label="v42 ← a1", color=green];
// [Asm]   r9 [label="a1", color=blue];
// [Asm]   r26 [label="v45 ← a0", color=green];
// [Asm]   r6 [label="v2 ← s1", color=green];
// [Asm]   r44 [label="v29 ← a1", color=green];
// [Asm]   r13 [label="v5 ← s3", color=green];
// [Asm]   r42 [label="v20 ← a0", color=green];
// [Asm]   r4 [label="s11", color=blue];
// [Asm]   r29 [label="v43 ← a1", color=green];
// [Asm]   r35 [label="v8 ← a2", color=green];
// [Asm]   r7 [label="zero", color=blue];
// [Asm]   r10 [label="a3", color=blue];
// [Asm]   r8 [label="a2", color=blue];
// [Asm]   r5 [label="a0", color=blue];
// [Asm]   r36 [label="v39 ← a1", color=green];
// [Asm]   r24 [label="v11 ← a0", color=green];
// [Asm]   r32 [label="v7 ← s0", color=green];
// [Asm]   r15 [label="t0", color=blue];
// [Asm]   r43 [label="v22 ← a0", color=green];
// [Asm]   r31 [label="v40 ← a1", color=green];
// [Asm]   r39 [label="v17 ← a0", color=green];
// [Asm]   r17 [label="t2", color=blue];
// [Asm]   r12 [label="v4 ← s2", color=green];
// [Asm]   r37 [label="s10", color=blue];
// [Asm]   r20 [label="a4", color=blue];
// [Asm]   r23 [label="a7", color=blue];
// [Asm]   r3 [label="v9 ← a0", color=green];
// [Asm]   r27 [label="v46 ← a0", color=green];
// [Asm]   r40 [label="v18 ← a1", color=green];
// [Asm]   r1 [label="v24 ← a1", color=green];
// [Asm]   r28 [label="v13 ← a0", color=green];
// [Asm]   r41 [label="v19 ← a2", color=green];
// [Asm]   r11 [label="v3 ← a1", color=green];
// [Asm]   r34 [label="v37 ← a1", color=green];
// [Asm]   r22 [label="a6", color=blue];
// [Asm]   r14 [label="v10 ← a2", color=green];
// [Asm]   r30 [label="v6 ← s4", color=green];
// [Asm]   r45 [label="v28 ← a0", color=green];
// [Asm]   r25 [label="v12 ← a0", color=green];
// [Asm]   r2 [label="v21 ← a2", color=green];
// [Asm]   r16 [label="t1", color=blue];
// [Asm]   r18 [label="t3", color=blue];
// [Asm]   r19 [label="t4", color=blue];
// [Asm]   r21 [label="a5", color=blue];
// [Asm]   r12 -- r25;
// [Asm]   r2 -- r32;
// [Asm]   r12 -- r29;
// [Asm]   r12 -- r32;
// [Asm]   r32 -- r36;
// [Asm]   r5 -- r21;
// [Asm]   r28 -- r32;
// [Asm]   r6 -- r35;
// [Asm]   r5 -- r10;
// [Asm]   r13 -- r32;
// [Asm]   r13 -- r36;
// [Asm]   r11 -- r14;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r2 -- r43;
// [Asm]   r7 -- r25;
// [Asm]   r5 -- r18;
// [Asm]   r28 -- r30;
// [Asm]   r4 -- r44;
// [Asm]   r13 -- r31;
// [Asm]   r2 -- r7;
// [Asm]   r7 -- r27;
// [Asm]   r30 -- r34;
// [Asm]   r7 -- r32;
// [Asm]   r7 -- r35;
// [Asm]   r20 -- r30;
// [Asm]   r8 -- r12;
// [Asm]   r9 -- r14;
// [Asm]   r13 -- r38;
// [Asm]   r32 -- r35;
// [Asm]   r13 -- r30;
// [Asm]   r5 -- r6;
// [Asm]   r13 -- r33;
// [Asm]   r11 -- r13;
// [Asm]   r10 -- r12;
// [Asm]   r9 -- r12;
// [Asm]   r7 -- r38;
// [Asm]   r5 -- r32;
// [Asm]   r1 -- r2;
// [Asm]   r28 -- r33;
// [Asm]   r0 -- r1;
// [Asm]   r4 -- r25;
// [Asm]   r12 -- r23;
// [Asm]   r32 -- r34;
// [Asm]   r13 -- r35;
// [Asm]   r12 -- r21;
// [Asm]   r8 -- r32;
// [Asm]   r6 -- r23;
// [Asm]   r7 -- r42;
// [Asm]   r4 -- r14;
// [Asm]   r15 -- r30;
// [Asm]   r8 -- r30;
// [Asm]   r6 -- r25;
// [Asm]   r4 -- r13;
// [Asm]   r7 -- r44;
// [Asm]   r7 -- r29;
// [Asm]   r16 -- r30;
// [Asm]   r13 -- r15;
// [Asm]   r28 -- r31;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r6 -- r41;
// [Asm]   r30 -- r35;
// [Asm]   r19 -- r30;
// [Asm]   r7 -- r24;
// [Asm]   r16 -- r32;
// [Asm]   r12 -- r34;
// [Asm]   r30 -- r32;
// [Asm]   r6 -- r33;
// [Asm]   r8 -- r9;
// [Asm]   r6 -- r30;
// [Asm]   r7 -- r20;
// [Asm]   r13 -- r16;
// [Asm]   r5 -- r19;
// [Asm]   r11 -- r12;
// [Asm]   r9 -- r30;
// [Asm]   r32 -- r40;
// [Asm]   r4 -- r18;
// [Asm]   r6 -- r22;
// [Asm]   r28 -- r36;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r38;
// [Asm]   r13 -- r19;
// [Asm]   r6 -- r20;
// [Asm]   r7 -- r17;
// [Asm]   r6 -- r19;
// [Asm]   r2 -- r44;
// [Asm]   r6 -- r27;
// [Asm]   r7 -- r22;
// [Asm]   r12 -- r20;
// [Asm]   r4 -- r15;
// [Asm]   r7 -- r19;
// [Asm]   r12 -- r13;
// [Asm]   r12 -- r33;
// [Asm]   r32 -- r33;
// [Asm]   r5 -- r9;
// [Asm]   r21 -- r30;
// [Asm]   r13 -- r23;
// [Asm]   r23 -- r30;
// [Asm]   r4 -- r32;
// [Asm]   r7 -- r15;
// [Asm]   r13 -- r14;
// [Asm]   r12 -- r22;
// [Asm]   r10 -- r11;
// [Asm]   r7 -- r36;
// [Asm]   r13 -- r17;
// [Asm]   r4 -- r36;
// [Asm]   r7 -- r41;
// [Asm]   r4 -- r7;
// [Asm]   r22 -- r32;
// [Asm]   r6 -- r39;
// [Asm]   r12 -- r16;
// [Asm]   r7 -- r16;
// [Asm]   r12 -- r17;
// [Asm]   r6 -- r38;
// [Asm]   r7 -- r18;
// [Asm]   r13 -- r39;
// [Asm]   r10 -- r32;
// [Asm]   r30 -- r41;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r43 -- r44;
// [Asm]   r7 -- r12;
// [Asm]   r9 -- r13;
// [Asm]   r7 -- r14;
// [Asm]   r5 -- r12;
// [Asm]   r28 -- r34;
// [Asm]   r6 -- r21;
// [Asm]   r12 -- r35;
// [Asm]   r4 -- r38;
// [Asm]   r5 -- r41;
// [Asm]   r2 -- r45;
// [Asm]   r30 -- r42;
// [Asm]   r4 -- r41;
// [Asm]   r7 -- r21;
// [Asm]   r6 -- r36;
// [Asm]   r5 -- r8;
// [Asm]   r7 -- r40;
// [Asm]   r30 -- r38;
// [Asm]   r1 -- r4;
// [Asm]   r30 -- r40;
// [Asm]   r10 -- r13;
// [Asm]   r30 -- r31;
// [Asm]   r6 -- r29;
// [Asm]   r4 -- r27;
// [Asm]   r13 -- r28;
// [Asm]   r4 -- r22;
// [Asm]   r4 -- r40;
// [Asm]   r9 -- r41;
// [Asm]   r4 -- r42;
// [Asm]   r32 -- r41;
// [Asm]   r12 -- r19;
// [Asm]   r13 -- r37;
// [Asm]   r13 -- r40;
// [Asm]   r4 -- r21;
// [Asm]   r12 -- r24;
// [Asm]   r6 -- r13;
// [Asm]   r7 -- r34;
// [Asm]   r4 -- r33;
// [Asm]   r4 -- r43;
// [Asm]   r12 -- r28;
// [Asm]   r0 -- r2;
// [Asm]   r20 -- r32;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r7 -- r10;
// [Asm]   r4 -- r28;
// [Asm]   r21 -- r32;
// [Asm]   r18 -- r30;
// [Asm]   r23 -- r32;
// [Asm]   r4 -- r12;
// [Asm]   r6 -- r31;
// [Asm]   r28 -- r29;
// [Asm]   r13 -- r18;
// [Asm]   r10 -- r30;
// [Asm]   r30 -- r39;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r5 -- r14;
// [Asm]   r13 -- r22;
// [Asm]   r8 -- r11;
// [Asm]   r13 -- r21;
// [Asm]   r7 -- r8;
// [Asm]   r13 -- r29;
// [Asm]   r4 -- r9;
// [Asm]   r6 -- r32;
// [Asm]   r30 -- r33;
// [Asm]   r35 -- r36;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r13 -- r24;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r32 -- r37;
// [Asm]   r12 -- r38;
// [Asm]   r5 -- r20;
// [Asm]   r4 -- r37;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r23;
// [Asm]   r12 -- r36;
// [Asm]   r12 -- r15;
// [Asm]   r13 -- r26;
// [Asm]   r7 -- r26;
// [Asm]   r5 -- r13;
// [Asm]   r7 -- r13;
// [Asm]   r4 -- r20;
// [Asm]   r6 -- r16;
// [Asm]   r7 -- r30;
// [Asm]   r4 -- r30;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r26;
// [Asm]   r6 -- r12;
// [Asm]   r6 -- r40;
// [Asm]   r30 -- r37;
// [Asm]   r13 -- r25;
// [Asm]   r13 -- r20;
// [Asm]   r6 -- r24;
// [Asm]   r15 -- r32;
// [Asm]   r7 -- r28;
// [Asm]   r32 -- r38;
// [Asm]   r6 -- r8;
// [Asm]   r32 -- r42;
// [Asm]   r6 -- r34;
// [Asm]   r18 -- r32;
// [Asm]   r7 -- r37;
// [Asm]   r6 -- r37;
// [Asm]   r4 -- r11;
// [Asm]   r19 -- r32;
// [Asm]   r13 -- r34;
// [Asm]   r22 -- r30;
// [Asm]   r4 -- r45;
// [Asm]   r8 -- r13;
// [Asm]   r12 -- r31;
// [Asm]   r7 -- r33;
// [Asm]   r32 -- r39;
// [Asm]   r6 -- r28;
// [Asm]   r7 -- r11;
// [Asm]   r28 -- r35;
// [Asm]   r6 -- r17;
// [Asm]   r7 -- r39;
// [Asm]   r7 -- r43;
// [Asm]   r12 -- r30;
// [Asm]   r30 -- r36;
// [Asm]   r12 -- r37;
// [Asm]   r40 -- r41;
// [Asm]   r7 -- r31;
// [Asm]   r9 -- r32;
// [Asm]   r4 -- r39;
// [Asm]   r12 -- r14;
// [Asm]   r4 -- r17;
// [Asm]   r12 -- r27;
// [Asm]   r7 -- r23;
// [Asm]   r17 -- r30;
// [Asm]   r1 -- r3;
// [Asm]   r4 -- r26;
// [Asm]   r17 -- r32;
// [Asm]   r5 -- r30;
// [Asm]   r2 -- r3;
// [Asm]   r13 -- r27;
// [Asm]   r12 -- r18;
// [Asm]   r12 -- r26;
// [Asm]   r5 -- r40;
// [Asm]   r4 -- r19;
// [Asm]   r5 -- r15;
// [Asm]   comment = "0:v26-> 1:v24-> 2:v21-> 3:v9-> 4:s11-> 7:zero-> 32:v7-> 5:a0-> 6:v2-> 8:a2-> 9:a1-> 12:v4-> 13:v5-> 30:v6-> 10:a3-> 11:v3-> 14:v10-> 15:t0-> 16:t1-> 17:t2-> 18:t3-> 19:t4-> 20:a4-> 21:a5-> 22:a6-> 23:a7-> 38:v35-> 28:v13-> 33:v42-> 36:v39-> 35:v8-> 34:v37-> 37:s10-> 40:v18-> 41:v19-> 31:v40-> 39:v17-> 24:v11-> 25:v12-> 26:v45-> 27:v46-> 29:v43-> 42:v20-> 43:v22-> 44:v29-> 45:v28"
// [Asm]   comment = "v26<-a0;v35<-a1;v42<-a1;v45<-a0;v2<-s1;v29<-a1;v5<-s3;v20<-a0;v43<-a1;v8<-a2;v39<-a1;v11<-a0;v7<-s0;v22<-a0;v40<-a1;v17<-a0;v4<-s2;v9<-a0;v46<-a0;v18<-a1;v24<-a1;v13<-a0;v19<-a2;v3<-a1;v37<-a1;v10<-a2;v6<-s4;v28<-a0;v12<-a0;v21<-a2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of partition65_3"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v26, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi v9, v26, -8 ->   andi a0, a0, -8
// [Asm] subst   mv s11, v9 ->   mv s11, a0
// [Asm] subst   sw v21, 0(v9) ->   sw a2, 0(a0)
// [Asm] subst   sw v24, 4(v9) ->   sw a1, 4(a0)
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v24, zero ->   mv a1, zero
// [Asm] subst   j .partition65_3_3 ->   j .partition65_3_3
// [Asm] subst   mv v2, a0 ->   mv s1, a0
// [Asm] subst   mv v4, a2 ->   mv s2, a2
// [Asm] subst   mv v5, a3 ->   mv s3, a3
// [Asm] subst   addi v10, v5, -1 ->   addi a2, s3, -1
// [Asm] subst   mv a0, v2 ->   mv a0, s1
// [Asm] subst   call swap1_0 ->   call swap1_0
// [Asm] subst   addi v12, v5, -1 ->   addi a0, s3, -1
// [Asm] subst   slliw v45, v12, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v46, v2, v45 ->   add a0, s1, a0
// [Asm] subst   lw v13, 0(v46) ->   lw a0, 0(a0)
// [Asm] subst   addi v43, s11, -4 ->   addi a1, s11, -4
// [Asm] subst   andi v6, v43, -8 ->   andi s4, a1, -8
// [Asm] subst   mv s11, v6 ->   mv s11, s4
// [Asm] subst   sw v4, 0(v6) ->   sw s2, 0(s4)
// [Asm] subst   addi v40, s11, -4 ->   addi a1, s11, -4
// [Asm] subst   andi v7, v40, -8 ->   andi s0, a1, -8
// [Asm] subst   mv s11, v7 ->   mv s11, s0
// [Asm] subst   li v42, 1 ->   li a1, 1
// [Asm] subst   sw v42, 0(v7) ->   sw a1, 0(s0)
// [Asm] subst   addi v37, s11, -48 ->   addi a1, s11, -48
// [Asm] subst   andi v8, v37, -8 ->   andi a2, a1, -8
// [Asm] subst   mv s11, v8 ->   mv s11, a2
// [Asm] subst   la v39, aux86_16 ->   la a1, aux86_16
// [Asm] subst   sd v39, 0(v8) ->   sd a1, 0(a2)
// [Asm] subst   sd v5, 8(v8) ->   sd s3, 8(a2)
// [Asm] subst   sd v2, 16(v8) ->   sd s1, 16(a2)
// [Asm] subst   sd v13, 24(v8) ->   sd a0, 24(a2)
// [Asm] subst   sd v6, 32(v8) ->   sd s4, 32(a2)
// [Asm] subst   sd v7, 40(v8) ->   sd s0, 40(a2)
// [Asm] subst   mv s10, v8 ->   mv s10, a2
// [Asm] subst   ld v35, 0(v8) ->   ld a1, 0(a2)
// [Asm] subst   mv a0, v4 ->   mv a0, s2
// [Asm] subst   jalr v35 ->   jalr a1
// [Asm] subst   lw v18, 0(v6) ->   lw a1, 0(s4)
// [Asm] subst   addi v19, v5, -1 ->   addi a2, s3, -1
// [Asm] subst   mv a0, v2 ->   mv a0, s1
// [Asm] subst   call swap1_0 ->   call swap1_0
// [Asm] subst   lw v21, 0(v6) ->   lw a2, 0(s4)
// [Asm] subst   lw v22, 0(v7) ->   lw a0, 0(s0)
// [Asm] subst   li v29, 1 ->   li a1, 1
// [Asm] subst   bne v22, v29, .partition65_3_2 ->   bne a0, a1, .partition65_3_2
// [Asm] subst   li v28, 1 ->   li a0, 1
// [Asm] subst   mv v24, v28 ->   mv a1, a0
// [Asm] pre_assigned_registers: Mem(fref=f7, mref=m0) -> v2, Insn(iref=%3) -> v7, Mem(fref=f7, mref=m1) -> v3, Self(fref=f7) -> v0, Insn(iref=%2) -> v6, Insn(iref=%1) -> v5, Insn(iref=%5) -> v9, Insn(iref=%0) -> v4, Insn(iref=%4) -> v8
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, s11]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [zero, v4, s11]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v4, s11]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [zero, v4, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v18, zero, v4]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v4, s11, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, v4, a1, s11, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v4, a1, s11, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a2]
// [Asm] live_set: [zero, a0, v4, a2, a1, s11, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v14]
// [Asm] live_set: [v4, v14, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: [v3]
// [Asm] defined: s11 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v3, v4, v16, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: [v3]
// [Asm] defined: s10 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v4, v12, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v12, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, v12, zero, a0, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v4, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, zero, a0, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, zero, a0, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v4, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, a0, zero]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v9]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main239_7"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r20 [label="v3 ← a0", color=green];
// [Asm]   r23 [label="v12 ← a1", color=green];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r9 [label="a2", color=blue];
// [Asm]   r26 [label="v9 ← a0", color=green];
// [Asm]   r6 [label="t3", color=blue];
// [Asm]   r13 [label="a6", color=blue];
// [Asm]   r4 [label="t1", color=blue];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r11 [label="a4", color=blue];
// [Asm]   r7 [label="t4", color=blue];
// [Asm]   r10 [label="a3", color=blue];
// [Asm]   r22 [label="s10", color=blue];
// [Asm]   r14 [label="a7", color=blue];
// [Asm]   r8 [label="a1", color=blue];
// [Asm]   r5 [label="t2", color=blue];
// [Asm]   r24 [label="v7 ← a0", color=green];
// [Asm]   r15 [label="v4 ← s0", color=green];
// [Asm]   r25 [label="v8 ← a0", color=green];
// [Asm]   r2 [label="a0", color=blue];
// [Asm]   r16 [label="v17 ← a0", color=green];
// [Asm]   r18 [label="v2 ← s1", color=green];
// [Asm]   r19 [label="v14 ← a0", color=green];
// [Asm]   r21 [label="v16 ← a1", color=green];
// [Asm]   r17 [label="v18 ← a0", color=green];
// [Asm]   r12 [label="a5", color=blue];
// [Asm]   r18 -- r23;
// [Asm]   r18 -- r24;
// [Asm]   r0 -- r15;
// [Asm]   r13 -- r15;
// [Asm]   r1 -- r12;
// [Asm]   r3 -- r15;
// [Asm]   r14 -- r18;
// [Asm]   r6 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r3 -- r16;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r9 -- r15;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r23;
// [Asm]   r15 -- r22;
// [Asm]   r12 -- r15;
// [Asm]   r1 -- r7;
// [Asm]   r8 -- r9;
// [Asm]   r1 -- r18;
// [Asm]   r18 -- r25;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r22;
// [Asm]   r5 -- r18;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r1 -- r15;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r17;
// [Asm]   r18 -- r21;
// [Asm]   r1 -- r20;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r2 -- r7;
// [Asm]   r11 -- r18;
// [Asm]   r18 -- r22;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r18;
// [Asm]   r15 -- r25;
// [Asm]   r3 -- r5;
// [Asm]   r9 -- r18;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r15 -- r18;
// [Asm]   r2 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r3 -- r4;
// [Asm]   r18 -- r19;
// [Asm]   r15 -- r17;
// [Asm]   r2 -- r14;
// [Asm]   r10 -- r18;
// [Asm]   r0 -- r2;
// [Asm]   r15 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r8 -- r15;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r7 -- r15;
// [Asm]   r6 -- r18;
// [Asm]   r10 -- r15;
// [Asm]   r2 -- r12;
// [Asm]   r8 -- r18;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r25;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r14;
// [Asm]   r0 -- r1;
// [Asm]   r15 -- r24;
// [Asm]   r13 -- r18;
// [Asm]   r1 -- r11;
// [Asm]   r11 -- r15;
// [Asm]   r18 -- r20;
// [Asm]   r15 -- r23;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r15 -- r16;
// [Asm]   r15 -- r20;
// [Asm]   r15 -- r19;
// [Asm]   r2 -- r3;
// [Asm]   r20 -- r21;
// [Asm]   r14 -- r15;
// [Asm]   r2 -- r23;
// [Asm]   r12 -- r18;
// [Asm]   r5 -- r15;
// [Asm]   r0 -- r18;
// [Asm]   r1 -- r24;
// [Asm]   comment = "0:t0-> 1:zero-> 2:a0-> 3:s11-> 15:v4-> 18:v2-> 4:t1-> 5:t2-> 6:t3-> 7:t4-> 8:a1-> 9:a2-> 10:a3-> 11:a4-> 12:a5-> 13:a6-> 14:a7-> 23:v12-> 16:v17-> 19:v14-> 20:v3-> 21:v16-> 22:s10-> 24:v7-> 25:v8-> 17:v18-> 26:v9"
// [Asm]   comment = "v3<-a0;v12<-a1;v9<-a0;v7<-a0;v4<-s0;v8<-a0;v17<-a0;v2<-s1;v14<-a0;v16<-a1;v18<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main239_7"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call minimbt_read_int ->   call minimbt_read_int
// [Asm] subst   mv v4, a0 ->   mv s0, a0
// [Asm] subst   slliw v17, v4, 2 ->   slliw a0, s0, 2
// [Asm] subst   sub v18, s11, v17 ->   sub a0, s11, a0
// [Asm] subst   andi v2, v18, -8 ->   andi s1, a0, -8
// [Asm] subst   mv s11, v2 ->   mv s11, s1
// [Asm] subst   mv a1, v4 ->   mv a1, s0
// [Asm] subst   mv a0, v2 ->   mv a0, s1
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   call memseti32 ->   call memseti32
// [Asm] subst   addi v14, s11, -24 ->   addi a0, s11, -24
// [Asm] subst   andi v3, v14, -8 ->   andi a0, a0, -8
// [Asm] subst   mv s11, v3 ->   mv s11, a0
// [Asm] subst   la v16, input243_26 ->   la a1, input243_26
// [Asm] subst   sd v16, 0(v3) ->   sd a1, 0(a0)
// [Asm] subst   sd v4, 8(v3) ->   sd s0, 8(a0)
// [Asm] subst   sd v2, 16(v3) ->   sd s1, 16(a0)
// [Asm] subst   mv s10, v3 ->   mv s10, a0
// [Asm] subst   ld v12, 0(v3) ->   ld a1, 0(a0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   jalr v12 ->   jalr a1
// [Asm] subst   mv a0, v2 ->   mv a0, s1
// [Asm] subst   mv a1, v4 ->   mv a1, s0
// [Asm] subst   call sort233_6 ->   call sort233_6
// [Asm] subst   mv a0, v2 ->   mv a0, s1
// [Asm] subst   mv a1, zero ->   mv a1, zero
// [Asm] subst   mv a2, v4 ->   mv a2, s0
// [Asm] subst   call output14_1 ->   call output14_1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FreeVar(fvref=^1) -> v5, Insn(iref=%1) -> v7, Self(fref=f21) -> v0, FnParam(fref=f21, fpref=$f.2) -> v4, FnParam(fref=f21, fpref=$f.0) -> v2, FnParam(fref=f21, fpref=$f.1) -> v3, Insn(iref=%0) -> v6, Insn(iref=%2) -> v8
// [Asm] defs: []
// [Asm] live_set: [a0, a2, a1, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [a0, v0, a2, a1]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, a2, a1, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v0, a2, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v0, v4, v2]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v5, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v3, v5, v4, v2]
// [Asm] move_origin: [v5]
// [Asm] defined: s10 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v3, v5, v13, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v5, v13, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v5, a0, v13, v4, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v3, v5, a0, v13, v4, a1, v2]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, v4, v5, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v4, v5, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v5, v3]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v2, v4, v5, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: s10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v2, v11, v4, v5, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v11, v4, v5, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v11, v4, v5, a0, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, v11, v5, a1, a0, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, v5, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, v3]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v2, v5, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: s10 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v2, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v9, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0, v9]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of sort_3173_21"];
// [Asm]   r0 [label="v0 ← a3", color=green];
// [Asm]   r20 [label="v6 ← a0", color=green];
// [Asm]   r23 [label="v9 ← a2", color=green];
// [Asm]   r3 [label="a1", color=blue];
// [Asm]   r9 [label="v13 ← a2", color=green];
// [Asm]   r6 [label="v4 ← s2", color=green];
// [Asm]   r13 [label="t3", color=blue];
// [Asm]   r4 [label="v2 ← s0", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="t1", color=blue];
// [Asm]   r7 [label="v5 ← s3", color=green];
// [Asm]   r10 [label="t0", color=blue];
// [Asm]   r22 [label="v7 ← a0", color=green];
// [Asm]   r14 [label="t4", color=blue];
// [Asm]   r8 [label="s10", color=blue];
// [Asm]   r5 [label="v3 ← s1", color=green];
// [Asm]   r24 [label="v8 ← a0", color=green];
// [Asm]   r15 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r16 [label="a4", color=blue];
// [Asm]   r18 [label="a6", color=blue];
// [Asm]   r19 [label="a7", color=blue];
// [Asm]   r17 [label="a5", color=blue];
// [Asm]   r21 [label="v11 ← a2", color=green];
// [Asm]   r12 [label="t2", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r21;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r4 -- r16;
// [Asm]   r5 -- r21;
// [Asm]   r6 -- r11;
// [Asm]   r1 -- r12;
// [Asm]   r7 -- r21;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r20;
// [Asm]   r5 -- r10;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r23;
// [Asm]   r5 -- r23;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r19;
// [Asm]   r5 -- r18;
// [Asm]   r1 -- r10;
// [Asm]   r7 -- r13;
// [Asm]   r7 -- r20;
// [Asm]   r5 -- r19;
// [Asm]   r3 -- r9;
// [Asm]   r1 -- r15;
// [Asm]   r4 -- r20;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r17;
// [Asm]   r6 -- r16;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r4 -- r22;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r12;
// [Asm]   r3 -- r5;
// [Asm]   r6 -- r20;
// [Asm]   r6 -- r8;
// [Asm]   r0 -- r6;
// [Asm]   r7 -- r17;
// [Asm]   r4 -- r21;
// [Asm]   r6 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r6 -- r19;
// [Asm]   r7 -- r22;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r7 -- r19;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r1 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r6 -- r18;
// [Asm]   r7 -- r15;
// [Asm]   r6 -- r10;
// [Asm]   r7 -- r10;
// [Asm]   r7 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r6 -- r17;
// [Asm]   r0 -- r1;
// [Asm]   r4 -- r7;
// [Asm]   r1 -- r11;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r5 -- r14;
// [Asm]   r4 -- r17;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r7 -- r16;
// [Asm]   r1 -- r5;
// [Asm]   r7 -- r18;
// [Asm]   r0 -- r4;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r3;
// [Asm]   r7 -- r12;
// [Asm]   r4 -- r14;
// [Asm]   r7 -- r14;
// [Asm]   r3 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r4 -- r19;
// [Asm]   r5 -- r15;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v0-> 1:a0-> 2:a2-> 4:v2-> 5:v3-> 6:v4-> 3:a1-> 7:v5-> 9:v13-> 21:v11-> 10:t0-> 11:t1-> 12:t2-> 13:t3-> 14:t4-> 15:a3-> 16:a4-> 17:a5-> 18:a6-> 19:a7-> 20:v6-> 23:v9-> 8:s10-> 22:v7-> 24:v8"
// [Asm]   comment = "v0<-a3;v6<-a0;v9<-a2;v13<-a2;v4<-s2;v2<-s0;v5<-s3;v7<-a0;v3<-s1;v8<-a0;v11<-a2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of sort_3173_21"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v0, s10 ->   mv a3, s10
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   mv v3, a1 ->   mv s1, a1
// [Asm] subst   mv v4, a2 ->   mv s2, a2
// [Asm] subst   ld v5, 8(v0) ->   ld s3, 8(a3)
// [Asm] subst   mv s10, v5 ->   mv s10, s3
// [Asm] subst   ld v13, 0(v5) ->   ld a2, 0(s3)
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   mv a1, v3 ->   mv a1, s1
// [Asm] subst   jalr v13 ->   jalr a2
// [Asm] subst   mv s10, v5 ->   mv s10, s3
// [Asm] subst   ld v11, 0(v5) ->   ld a2, 0(s3)
// [Asm] subst   mv a0, v3 ->   mv a0, s1
// [Asm] subst   mv a1, v4 ->   mv a1, s2
// [Asm] subst   jalr v11 ->   jalr a2
// [Asm] subst   mv s10, v5 ->   mv s10, s3
// [Asm] subst   ld v9, 0(v5) ->   ld a2, 0(s3)
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   mv a1, v3 ->   mv a1, s1
// [Asm] subst   jalr v9 ->   jalr a2
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] g37_11:
// [Asm] # block info: defs: [v3, v0, v4, v5, v2], uses: [v0, s10, a0, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0, zero], live_out: [v4, v5, zero, v3]
// [Asm] # block parameters: []
// [Asm] .g37_11_7:
// [Asm]   # save_ctx1  # live: [zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, zero, v2]
// [Asm]   lw v3, 8(v0)  # live: [v2, v0, zero, v3]
// [Asm]   ld v4, 16(v0)  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v6], uses: [v5, v6, v3], upward_exposed: [v5, v3], params_defs: [v5]
// [Asm] # live_in: [v4, v5, zero, v3], live_out: [v4, v5, zero, v3]
// [Asm] # block parameters: [v5]
// [Asm] .g37_11_0:
// [Asm]   addi v6, v3, 1  # live: [v4, v5, v6, zero, v3]
// [Asm] # control
// [Asm]   blt v5, v6, .g37_11_2  # live: [v4, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v11, v10, v26, v22, v23, v27, v8, v9], uses: [v11, v5, v10, v26, v22, v27, v23, v8, v4, v9], upward_exposed: [v4, v5], params_defs: []
// [Asm] # live_in: [v4, v5, zero, v3], live_out: [v4, v5, zero, v3]
// [Asm] # block parameters: []
// [Asm] .g37_11_1:
// [Asm]   slliw v26, v5, 2  # live: [v4, v5, zero, v26, v3]
// [Asm]   add v27, v4, v26  # live: [v4, v5, zero, v27, v3]
// [Asm]   lw v8, 0(v27)  # live: [v8, v4, v5, zero, v3]
// [Asm]   addi v9, v5, -1  # live: [v8, v4, v5, zero, v9, v3]
// [Asm]   slliw v22, v9, 2  # live: [v8, v4, v5, zero, v22, v3]
// [Asm]   add v23, v4, v22  # live: [v8, v4, v5, zero, v23, v3]
// [Asm]   lw v10, 0(v23)  # live: [v8, v4, v5, v10, zero, v3]
// [Asm]   addi v11, v10, -1  # live: [v8, v11, v4, v5, zero, v3]
// [Asm] # control
// [Asm]   blt v11, v8, .g37_11_4  # live: [v4, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v16, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, v17, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v5, a0, v4, a2, a1, v17, v15], upward_exposed: [v4, v5], params_defs: []
// [Asm] # live_in: [v4, v5, zero, v3], live_out: [v4, v5, zero, v3]
// [Asm] # block parameters: []
// [Asm] .g37_11_3:
// [Asm]   addi v15, v5, -1  # live: [v5, zero, v4, v15, v3]
// [Asm]   # save_ctx2  # live: [v5, zero, v4, v15, v3]
// [Asm]   mv a0, v4  # live: [v5, zero, a0, v4, v15, v3]
// [Asm]   mv a1, v5  # live: [v5, zero, a0, v4, a1, v15, v3]
// [Asm]   mv a2, v15  # live: [v5, zero, a0, v4, a2, a1, v3]
// [Asm]   call swap1_0  # live: [v4, v5, zero, a0, v3]
// [Asm]   mv v16, a0  # live: [v4, v5, zero, v3]
// [Asm]   # restore_ctx2  # live: [v4, v5, zero, v3]
// [Asm]   addi v17, v5, -1  # live: [v4, v17, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v17  # live: [v4, v5, zero, v3]
// [Asm]   j .g37_11_0  # live: [v4, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v14], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v14]
// [Asm] # block parameters: []
// [Asm] .g37_11_2:
// [Asm] # control
// [Asm]   mv v14, zero  # live: [v14]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v14, a0], upward_exposed: [v14], params_defs: [v14]
// [Asm] # live_in: [v14], live_out: []
// [Asm] # block parameters: [v14]
// [Asm] .g37_11_6:
// [Asm] # control
// [Asm]   mv a0, v14  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v13], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v13]
// [Asm] # block parameters: []
// [Asm] .g37_11_4:
// [Asm] # control
// [Asm]   mv v13, zero  # live: [v13]
// [Asm] 
// [Asm] # block info: defs: [v14], uses: [v13], upward_exposed: [v13], params_defs: [v13]
// [Asm] # live_in: [v13], live_out: [v14]
// [Asm] # block parameters: [v13]
// [Asm] .g37_11_5:
// [Asm] # control
// [Asm]   mv v14, v13  # live: [v14]
// [Asm]   j .g37_11_6  # live: [v14]
// [Asm] 
// [Asm] # leaf false
// [Asm] insertion_sort30_2:
// [Asm] # block info: defs: [v2, t1, v14, v16, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, v19, a6, v4, ft5, ft10, v6, ft7, v11, ft4, v5, ft9, v10, a5, fa4, a0, ft2, a2, v17, a3, s10, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v3, v11, v5, v14, v16, v10, a0, a2, v17, a1, s11, v9, v19, v4, v6, v2], upward_exposed: [a2, a1, s11, a0], params_defs: []
// [Asm] # live_in: [a2, a1, s11, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .insertion_sort30_2_0:
// [Asm]   # save_ctx1  # live: [a0, a2, a1, s11]
// [Asm]   mv v2, a0  # live: [a2, a1, s11, v2]
// [Asm]   mv v3, a1  # live: [v3, a2, s11, v2]
// [Asm]   mv v4, a2  # live: [v3, v4, s11, v2]
// [Asm]   addi v17, s11, -24  # live: [v3, v4, v17, v2]
// [Asm]   andi v5, v17, -8  # live: [v3, v5, v4, v2]
// [Asm]   mv s11, v5  # live: [v3, v5, v4, s11, v2]
// [Asm]   la v19, g37_11  # live: [v3, v5, v19, v4, s11, v2]
// [Asm]   sd v19, 0(v5)  # live: [v2, v4, v5, s11, v3]
// [Asm]   sd v3, 8(v5)  # live: [v2, v4, v5, s11, v3]
// [Asm]   sd v2, 16(v5)  # live: [v4, v5, s11, v3]
// [Asm]   addi v14, s11, -24  # live: [v4, v5, v14, v3]
// [Asm]   andi v6, v14, -8  # live: [v4, v6, v5, v3]
// [Asm]   mv s11, v6  # live: [v4, v6, v5, v3]
// [Asm]   la v16, f54_13  # live: [v4, v6, v5, v16, v3]
// [Asm]   sd v16, 0(v6)  # live: [v4, v6, v5, v3]
// [Asm]   sd v4, 8(v6)  # live: [v6, v5, v3]
// [Asm]   sd v5, 16(v6)  # live: [v6, v3]
// [Asm]   addi v9, v3, 1  # live: [v6, v9]
// [Asm]   mv s10, v6  # live: [v6, v9]
// [Asm]   ld v11, 0(v6)  # live: [v11, v9]
// [Asm]   # save_ctx2  # live: [v11, v9]
// [Asm]   mv a0, v9  # live: [v11, a0]
// [Asm]   jalr v11  # live: [a0]
// [Asm]   mv v10, a0  # live: [v10]
// [Asm]   # restore_ctx2  # live: [v10]
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] choose_pivot129_4:
// [Asm] # block info: defs: [v2, v11, v5, v10, v79, v13, v77, v84, v4, v81, s11, v12, v3], uses: [v11, v5, v10, a0, v79, a2, a1, s11, v12, zero, v77, v84, v4, v81, v3], upward_exposed: [a2, a1, s11, a0, zero], params_defs: []
// [Asm] # live_in: [a2, a1, s11, a0, zero], live_out: [v3, v5, v10, zero, v13, s11, v2]
// [Asm] # block parameters: []
// [Asm] .choose_pivot129_4_0:
// [Asm]   # save_ctx1  # live: [zero, a0, a2, a1, s11]
// [Asm]   mv v2, a0  # live: [zero, a2, a1, s11, v2]
// [Asm]   mv v3, a1  # live: [v2, zero, a2, s11, v3]
// [Asm]   mv v4, a2  # live: [v2, zero, v4, s11, v3]
// [Asm]   addi v84, s11, -4  # live: [v2, zero, v84, v4, v3]
// [Asm]   andi v5, v84, -8  # live: [v2, v5, zero, v4, v3]
// [Asm]   mv s11, v5  # live: [v2, v5, zero, v4, s11, v3]
// [Asm]   sw zero, 0(v5)  # live: [v2, v5, zero, v4, s11, v3]
// [Asm]   sub v10, v4, v3  # live: [v2, v5, v10, zero, s11, v3]
// [Asm]   li v81, 4  # live: [v2, v5, v10, zero, v81, s11, v3]
// [Asm]   div v11, v10, v81  # live: [v2, v11, v5, v10, zero, s11, v3]
// [Asm]   li v79, 2  # live: [v2, v11, v5, v10, zero, v79, s11, v3]
// [Asm]   mul v12, v11, v79  # live: [v2, v5, v10, zero, s11, v12, v3]
// [Asm]   add v13, v3, v12  # live: [v2, v5, v10, zero, v13, s11, v3]
// [Asm] # control
// [Asm]   li v77, 8  # live: [v2, v5, v10, zero, v13, v77, s11, v3]
// [Asm]   blt v10, v77, .choose_pivot129_4_2  # live: [v2, v5, v10, zero, v13, s11, v3]
// [Asm] 
// [Asm] # block info: defs: [v66, v16, v7, v17, s11, v64, v73, v63, v75, v18, v68, v20, v23, v19, v59, v70, v6, v15, v61], uses: [v2, v66, v16, v5, v10, v7, s11, v64, v73, v63, v75, v18, v68, v23, v19, v59, v70, v6, v15, v61, v3], upward_exposed: [v2, v5, v10, s11, v3], params_defs: []
// [Asm] # live_in: [v2, v5, v10, v13, zero, s11, v3], live_out: [v5, v13, zero, v20, v7, v17, s11]
// [Asm] # block parameters: []
// [Asm] .choose_pivot129_4_1:
// [Asm]   li v75, 4  # live: [v3, v5, v10, v75, v13, zero, s11, v2]
// [Asm]   div v15, v10, v75  # live: [v3, v5, v10, v13, zero, s11, v15, v2]
// [Asm]   li v73, 1  # live: [v3, v73, v5, v10, v13, zero, s11, v15, v2]
// [Asm]   mul v16, v15, v73  # live: [v3, v5, v16, v10, v13, zero, s11, v2]
// [Asm]   add v17, v3, v16  # live: [v3, v5, v10, v13, zero, v17, s11, v2]
// [Asm]   li v70, 4  # live: [v3, v5, v10, v13, zero, v17, v70, s11, v2]
// [Asm]   div v18, v10, v70  # live: [v3, v5, v10, v18, v13, zero, v17, s11, v2]
// [Asm]   li v68, 3  # live: [v3, v5, v10, v18, v13, zero, v68, v17, s11, v2]
// [Asm]   mul v19, v18, v68  # live: [v3, v5, v10, v13, zero, v19, v17, s11, v2]
// [Asm]   add v20, v3, v19  # live: [v5, v10, v13, zero, v20, v17, s11, v2]
// [Asm]   addi v64, s11, -24  # live: [v5, v10, v13, zero, v20, v17, v64, v2]
// [Asm]   andi v6, v64, -8  # live: [v5, v10, v13, zero, v20, v17, v6, v2]
// [Asm]   mv s11, v6  # live: [v5, v10, v13, zero, v20, v17, v6, s11, v2]
// [Asm]   la v66, sort_2157_19  # live: [v66, v5, v10, v13, zero, v20, v17, v6, s11, v2]
// [Asm]   sd v66, 0(v6)  # live: [v5, v10, v13, zero, v20, v17, v6, s11, v2]
// [Asm]   sd v2, 8(v6)  # live: [v5, v10, v13, zero, v20, v17, v6, s11]
// [Asm]   sd v5, 16(v6)  # live: [v5, v10, v13, zero, v20, v17, v6, s11]
// [Asm]   addi v61, s11, -16  # live: [v5, v10, v13, zero, v20, v17, v6, v61]
// [Asm]   andi v7, v61, -8  # live: [v5, v10, v13, zero, v20, v7, v17, v6]
// [Asm]   mv s11, v7  # live: [v5, v10, v13, zero, v20, v7, v17, v6, s11]
// [Asm]   la v63, sort_3173_21  # live: [v63, v5, v10, v13, zero, v20, v7, v17, v6, s11]
// [Asm]   sd v63, 0(v7)  # live: [v5, v10, v13, zero, v20, v7, v17, v6, s11]
// [Asm]   sd v6, 8(v7)  # live: [v5, v10, v13, zero, v20, v7, v17, s11]
// [Asm]   addi v23, v10, -1  # live: [v5, v13, zero, v20, v23, v7, v17, s11]
// [Asm] # control
// [Asm]   li v59, 50  # live: [v5, v13, zero, v20, v23, v7, v59, v17, s11]
// [Asm]   blt v23, v59, .choose_pivot129_4_4  # live: [v5, v13, zero, v20, v7, v17, s11]
// [Asm] 
// [Asm] # block info: defs: [v25, t1, v26, ft0, ft1, v32, a1, v28, fa1, v33, v51, fa2, ft6, v29, fa6, v27, a4, a6, ft5, ft10, v47, v34, ft7, ft4, ft9, a5, a0, fa4, v30, ft2, a2, a3, v31, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v55], uses: [v25, v26, a0, v13, v7, a2, v32, a1, v17, v31, v28, v33, v51, v29, v20, v47, v55], upward_exposed: [v17, v13, v20, v7], params_defs: []
// [Asm] # live_in: [v5, v13, zero, v20, v7, v17, s11], live_out: [v5, v13, zero, v20, v7, v17, s11, v34]
// [Asm] # block parameters: []
// [Asm] .choose_pivot129_4_3:
// [Asm]   addi v25, v17, -1  # live: [v25, v5, v13, zero, v20, v7, v17, s11]
// [Asm]   addi v26, v17, 1  # live: [v25, v5, v13, zero, v26, v20, v7, v17, s11]
// [Asm]   mv s10, v7  # live: [v25, v5, v13, zero, v26, v20, v7, v17, s11]
// [Asm]   ld v55, 0(v7)  # live: [v25, v5, v13, zero, v26, v20, v7, v17, s11, v55]
// [Asm]   # save_ctx2  # live: [v25, v5, v13, zero, v26, v20, v7, v17, s11, v55]
// [Asm]   mv a0, v25  # live: [v5, v13, zero, a0, v26, v20, v7, v17, s11, v55]
// [Asm]   mv a1, v17  # live: [v5, v13, zero, a0, v26, v20, v7, v17, a1, s11, v55]
// [Asm]   mv a2, v26  # live: [v5, v13, zero, a0, v20, v7, a2, a1, v17, s11, v55]
// [Asm]   jalr v55  # live: [v5, v13, zero, a0, v20, v7, v17, s11]
// [Asm]   mv v27, a0  # live: [v5, v13, zero, v20, v7, v17, s11]
// [Asm]   # restore_ctx2  # live: [v5, v13, zero, v20, v7, v17, s11]
// [Asm]   addi v28, v13, -1  # live: [v5, v13, zero, v20, v7, v17, s11, v28]
// [Asm]   addi v29, v13, 1  # live: [v5, v13, zero, v29, v20, v7, v17, s11, v28]
// [Asm]   mv s10, v7  # live: [v5, v13, zero, v29, v20, v7, v17, s11, v28]
// [Asm]   ld v51, 0(v7)  # live: [v5, v13, zero, v29, v20, v7, v17, s11, v28, v51]
// [Asm]   # save_ctx2  # live: [v5, v13, zero, v29, v20, v7, v17, s11, v28, v51]
// [Asm]   mv a0, v28  # live: [v5, v13, zero, a0, v29, v20, v7, v17, s11, v51]
// [Asm]   mv a1, v13  # live: [v5, v13, zero, a0, v29, v20, v7, v17, a1, s11, v51]
// [Asm]   mv a2, v29  # live: [v5, v13, zero, a0, v20, v7, a2, a1, v17, s11, v51]
// [Asm]   jalr v51  # live: [v5, v13, zero, a0, v20, v7, v17, s11]
// [Asm]   mv v30, a0  # live: [v5, v13, zero, v20, v7, v17, s11]
// [Asm]   # restore_ctx2  # live: [v5, v13, zero, v20, v7, v17, s11]
// [Asm]   addi v31, v20, -1  # live: [v5, v13, zero, v20, v7, v17, s11, v31]
// [Asm]   addi v32, v20, 1  # live: [v5, v13, zero, v20, v7, v32, v17, s11, v31]
// [Asm]   mv s10, v7  # live: [v5, v13, zero, v20, v7, v32, v17, s11, v31]
// [Asm]   ld v47, 0(v7)  # live: [v5, v13, zero, v20, v7, v47, v32, v17, s11, v31]
// [Asm]   # save_ctx2  # live: [v5, v13, zero, v20, v7, v47, v32, v17, s11, v31]
// [Asm]   mv a0, v31  # live: [v5, v13, zero, a0, v20, v7, v47, v32, v17, s11]
// [Asm]   mv a1, v20  # live: [v5, v13, zero, a0, v20, v7, v47, v32, a1, v17, s11]
// [Asm]   mv a2, v32  # live: [v5, v13, zero, a0, v20, v7, a2, v47, v17, a1, s11]
// [Asm]   jalr v47  # live: [v5, v13, zero, a0, v20, v7, v17, s11]
// [Asm]   mv v33, a0  # live: [v5, v13, zero, v20, v7, v17, s11, v33]
// [Asm]   # restore_ctx2  # live: [v5, v13, zero, v20, v7, v17, s11, v33]
// [Asm] # control
// [Asm]   mv v34, v33  # live: [v5, v13, zero, v20, v7, v17, s11, v34]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, v36, ft2, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, v45, fa0, v35, t4, t2], uses: [v13, a0, v20, v7, v45, v35, a2, v17, a1], upward_exposed: [v17, v13, v20, v7], params_defs: [v34]
// [Asm] # live_in: [v5, v13, zero, v20, v7, v17, s11, v34], live_out: [v5, s11, zero, v13, v36]
// [Asm] # block parameters: [v34]
// [Asm] .choose_pivot129_4_5:
// [Asm]   mv s10, v7  # live: [v5, zero, v13, v20, v7, v17, s11]
// [Asm]   ld v45, 0(v7)  # live: [v5, zero, v13, v20, v45, v17, s11]
// [Asm]   # save_ctx2  # live: [v5, zero, v13, v20, v45, v17, s11]
// [Asm]   mv a0, v17  # live: [v5, zero, v13, a0, v20, v45, s11]
// [Asm]   mv a1, v13  # live: [v5, zero, v13, a0, v20, v45, a1, s11]
// [Asm]   mv a2, v20  # live: [v5, zero, v13, a0, v45, a2, a1, s11]
// [Asm]   jalr v45  # live: [v5, s11, zero, v13, a0]
// [Asm]   mv v35, a0  # live: [v5, s11, zero, v13, v35]
// [Asm]   # restore_ctx2  # live: [v5, s11, zero, v13, v35]
// [Asm] # control
// [Asm]   mv v36, v35  # live: [v5, s11, zero, v13, v36]
// [Asm] 
// [Asm] # block info: defs: [v37], uses: [v37, v5, zero], upward_exposed: [v5, zero], params_defs: [v36]
// [Asm] # live_in: [v5, s11, zero, v13, v36], live_out: [s11, zero, v13]
// [Asm] # block parameters: [v36]
// [Asm] .choose_pivot129_4_6:
// [Asm]   lw v37, 0(v5)  # live: [v37, s11, zero, v13]
// [Asm] # control
// [Asm]   bne v37, zero, .choose_pivot129_4_8  # live: [s11, zero, v13]
// [Asm] 
// [Asm] # block info: defs: [v43, v39], uses: [v43], upward_exposed: [], params_defs: []
// [Asm] # live_in: [s11, v13], live_out: [s11, v13, v39]
// [Asm] # block parameters: []
// [Asm] .choose_pivot129_4_7:
// [Asm] # control
// [Asm]   li v43, 1  # live: [v43, s11, v13]
// [Asm]   mv v39, v43  # live: [s11, v13, v39]
// [Asm] 
// [Asm] # block info: defs: [v41, s11, a0, v8], uses: [v8, v41, s11, v13, a0, v39], upward_exposed: [s11, v13, v39], params_defs: [v39]
// [Asm] # live_in: [s11, v13, v39], live_out: []
// [Asm] # block parameters: [v39]
// [Asm] .choose_pivot129_4_9:
// [Asm]   addi v41, s11, -8  # live: [v41, v13, v39]
// [Asm]   andi v8, v41, -8  # live: [v13, v39, v8]
// [Asm]   mv s11, v8  # live: [v13, v39, v8]
// [Asm]   sw v13, 0(v8)  # live: [v39, v8]
// [Asm]   sw v39, 4(v8)  # live: [v8]
// [Asm] # control
// [Asm]   mv a0, v8  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v36], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v5, s11, zero, v13], live_out: [v5, s11, zero, v13, v36]
// [Asm] # block parameters: []
// [Asm] .choose_pivot129_4_2:
// [Asm] # control
// [Asm]   mv v36, zero  # live: [v5, s11, zero, v13, v36]
// [Asm]   j .choose_pivot129_4_6  # live: [v5, s11, zero, v13, v36]
// [Asm] 
// [Asm] # block info: defs: [v34], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v5, zero, v13, v20, v7, v17, s11], live_out: [v5, v13, zero, v20, v7, v17, s11, v34]
// [Asm] # block parameters: []
// [Asm] .choose_pivot129_4_4:
// [Asm] # control
// [Asm]   mv v34, zero  # live: [v5, v13, zero, v20, v7, v17, s11, v34]
// [Asm]   j .choose_pivot129_4_5  # live: [v5, v13, zero, v20, v7, v17, s11, v34]
// [Asm] 
// [Asm] # block info: defs: [v39], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [s11, zero, v13], live_out: [s11, v13, v39]
// [Asm] # block parameters: []
// [Asm] .choose_pivot129_4_8:
// [Asm] # control
// [Asm]   mv v39, zero  # live: [s11, v13, v39]
// [Asm]   j .choose_pivot129_4_9  # live: [s11, v13, v39]
// [Asm] 
// [Asm] # leaf false
// [Asm] quick_sort210_5:
// [Asm] # block info: defs: [v3, v7, v4, v6, v5, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0], live_out: [v5, v6, v7]
// [Asm] # block parameters: []
// [Asm] .quick_sort210_5_4:
// [Asm]   # save_ctx1  # live: [a2, a1, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, v3]
// [Asm]   mv v6, v3  # live: [v4, v5, v6]
// [Asm]   mv v7, v4  # live: [v5, v6, v7]
// [Asm] 
// [Asm] # block info: defs: [v27, v8], uses: [v8, v6, v27, v7], upward_exposed: [v6, v7], params_defs: [v5, v6, v7]
// [Asm] # live_in: [v5, v6, v7], live_out: [v5, v6, v7]
// [Asm] # block parameters: [v5, v6, v7]
// [Asm] .quick_sort210_5_0:
// [Asm]   sub v8, v7, v6  # live: [v8, v5, v6, v7]
// [Asm] # control
// [Asm]   li v27, 16  # live: [v8, v5, v6, v27, v7]
// [Asm]   bge v27, v8, .quick_sort210_5_1  # live: [v5, v6, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v16, v13, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v6, ft7, v11, ft4, ft9, v10, a5, fa4, a0, ft2, a2, v17, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v11, v5, v14, v10, a0, v13, v7, a2, v6, a1, v17, a3], upward_exposed: [v5, v6, v7], params_defs: []
// [Asm] # live_in: [v5, v6, v7], live_out: [v5, v6, v7]
// [Asm] # block parameters: []
// [Asm] .quick_sort210_5_2:
// [Asm]   # save_ctx2  # live: [v5, v7, v6]
// [Asm]   mv a0, v5  # live: [v5, a0, v7, v6]
// [Asm]   mv a1, v6  # live: [v5, a0, v7, v6, a1]
// [Asm]   mv a2, v7  # live: [v5, a0, v7, a2, v6, a1]
// [Asm]   call choose_pivot129_4  # live: [v5, a0, v7, v6]
// [Asm]   mv v10, a0  # live: [v5, v10, v7, v6]
// [Asm]   # restore_ctx2  # live: [v5, v10, v7, v6]
// [Asm]   lw v11, 0(v10)  # live: [v11, v5, v7, v6]
// [Asm]   # save_ctx2  # live: [v11, v5, v7, v6]
// [Asm]   mv a0, v5  # live: [v11, v5, a0, v7, v6]
// [Asm]   mv a1, v11  # live: [v5, a0, v7, v6, a1]
// [Asm]   mv a2, v6  # live: [v5, a0, v7, a2, v6, a1]
// [Asm]   mv a3, v7  # live: [v5, a0, v7, a2, v6, a1, a3]
// [Asm]   call partition65_3  # live: [v5, v6, a0, v7]
// [Asm]   mv v13, a0  # live: [v5, v6, v13, v7]
// [Asm]   # restore_ctx2  # live: [v5, v6, v13, v7]
// [Asm]   lw v14, 0(v13)  # live: [v5, v14, v6, v7]
// [Asm]   # save_ctx2  # live: [v5, v14, v6, v7]
// [Asm]   mv a0, v5  # live: [v5, v14, v6, a0, v7]
// [Asm]   mv a1, v6  # live: [v5, v14, a1, a0, v7]
// [Asm]   mv a2, v14  # live: [a2, v5, v14, a1, a0, v7]
// [Asm]   call quick_sort210_5  # live: [v5, v14, a0, v7]
// [Asm]   mv v16, a0  # live: [v5, v14, v7]
// [Asm]   # restore_ctx2  # live: [v5, v14, v7]
// [Asm]   addi v17, v14, 1  # live: [v5, v17, v7]
// [Asm] # control
// [Asm]   mv v5, v5  # live: [v5, v17, v7]
// [Asm]   mv v6, v17  # live: [v5, v6, v7]
// [Asm]   mv v7, v7  # live: [v5, v6, v7]
// [Asm]   j .quick_sort210_5_0  # live: [v5, v6, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, v19, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v5, v18, a0, v7, a2, v6, a1], upward_exposed: [v5, v6, v7], params_defs: []
// [Asm] # live_in: [v5, v6, v7], live_out: [v19]
// [Asm] # block parameters: []
// [Asm] .quick_sort210_5_1:
// [Asm]   # save_ctx2  # live: [v6, v5, v7]
// [Asm]   mv a0, v5  # live: [v6, a0, v7]
// [Asm]   mv a1, v6  # live: [a1, a0, v7]
// [Asm]   mv a2, v7  # live: [a2, a1, a0]
// [Asm]   call insertion_sort30_2  # live: [a0]
// [Asm]   mv v18, a0  # live: [v18]
// [Asm]   # restore_ctx2  # live: [v18]
// [Asm] # control
// [Asm]   mv v19, v18  # live: [v19]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v19, a0], upward_exposed: [v19], params_defs: [v19]
// [Asm] # live_in: [v19], live_out: []
// [Asm] # block parameters: [v19]
// [Asm] .quick_sort210_5_3:
// [Asm] # control
// [Asm]   mv a0, v19  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main239_7:
// [Asm] # block info: defs: [v3, t1, v14, v16, v7, ft0, ft1, a1, s11, v12, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, v4, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, s10, v9, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v2], uses: [v2, v14, v16, a0, a2, a1, v17, s11, v12, v9, v18, zero, v4, v3], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main239_7_0:
// [Asm]   # save_ctx1  # live: [zero, s11]
// [Asm]   # save_ctx2  # live: [zero, s11]
// [Asm]   call minimbt_read_int  # live: [zero, a0, s11]
// [Asm]   mv v4, a0  # live: [zero, v4, s11]
// [Asm]   # restore_ctx2  # live: [zero, v4, s11]
// [Asm]   slliw v17, v4, 2  # live: [zero, v4, v17, s11]
// [Asm]   sub v18, s11, v17  # live: [v18, zero, v4]
// [Asm]   andi v2, v18, -8  # live: [zero, v4, v2]
// [Asm]   mv s11, v2  # live: [zero, v4, s11, v2]
// [Asm]   mv a1, v4  # live: [zero, v4, a1, s11, v2]
// [Asm]   mv a0, v2  # live: [zero, a0, v4, a1, s11, v2]
// [Asm]   mv a2, zero  # live: [zero, a0, v4, a2, a1, s11, v2]
// [Asm]   call memseti32  # live: [v4, s11, zero, v2]
// [Asm]   addi v14, s11, -24  # live: [v4, v14, zero, v2]
// [Asm]   andi v3, v14, -8  # live: [v3, v4, zero, v2]
// [Asm]   mv s11, v3  # live: [v3, v4, zero, v2]
// [Asm]   la v16, input243_26  # live: [v3, v4, v16, zero, v2]
// [Asm]   sd v16, 0(v3)  # live: [v3, v4, zero, v2]
// [Asm]   sd v4, 8(v3)  # live: [v3, v4, zero, v2]
// [Asm]   sd v2, 16(v3)  # live: [v3, v4, zero, v2]
// [Asm]   mv s10, v3  # live: [v3, v4, zero, v2]
// [Asm]   ld v12, 0(v3)  # live: [v4, v12, zero, v2]
// [Asm]   # save_ctx2  # live: [v4, v12, zero, v2]
// [Asm]   mv a0, zero  # live: [v4, v12, zero, a0, v2]
// [Asm]   jalr v12  # live: [v4, zero, a0, v2]
// [Asm]   mv v7, a0  # live: [v4, zero, v2]
// [Asm]   # restore_ctx2  # live: [v4, zero, v2]
// [Asm]   # save_ctx2  # live: [v4, zero, v2]
// [Asm]   mv a0, v2  # live: [v4, zero, a0, v2]
// [Asm]   mv a1, v4  # live: [v4, a1, zero, a0, v2]
// [Asm]   call sort233_6  # live: [v4, zero, a0, v2]
// [Asm]   mv v8, a0  # live: [v4, zero, v2]
// [Asm]   # restore_ctx2  # live: [v4, zero, v2]
// [Asm]   # save_ctx2  # live: [v4, zero, v2]
// [Asm]   mv a0, v2  # live: [v4, a0, zero]
// [Asm]   mv a1, zero  # live: [v4, a1, a0]
// [Asm]   mv a2, v4  # live: [a2, a1, a0]
// [Asm]   call output14_1  # live: [a0]
// [Asm]   mv v9, a0  # live: [v9]
// [Asm]   # restore_ctx2  # live: [v9]
// [Asm] # control
// [Asm]   mv a0, v9  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] output14_1:
// [Asm] # block info: defs: [v3, v7, v4, v6, v5, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .output14_1_4:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm]   mv v6, v3  # live: [v4, v5, v6, zero]
// [Asm]   mv v7, v4  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v8], uses: [v8, v6, v7], upward_exposed: [v6, v7], params_defs: [v5, v6, v7]
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v6, v5, zero, v7]
// [Asm] # block parameters: [v5, v6, v7]
// [Asm] .output14_1_0:
// [Asm]   addi v8, v7, -1  # live: [v8, v6, v5, zero, v7]
// [Asm] # control
// [Asm]   blt v8, v6, .output14_1_2  # live: [v6, v5, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v13, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, v19, a6, ft5, ft10, v6, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v11, v5, v14, v18, a0, v7, v19, v6], upward_exposed: [v6, v5, v7], params_defs: []
// [Asm] # live_in: [v6, v5, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .output14_1_1:
// [Asm]   slliw v18, v6, 2  # live: [v5, v6, v18, zero, v7]
// [Asm]   add v19, v5, v18  # live: [v19, v5, v6, zero, v7]
// [Asm]   lw v11, 0(v19)  # live: [v11, v5, v6, zero, v7]
// [Asm]   # save_ctx2  # live: [v11, v5, v6, zero, v7]
// [Asm]   mv a0, v11  # live: [v5, v6, zero, a0, v7]
// [Asm]   call minimbt_print_int  # live: [v5, v6, zero, a0, v7]
// [Asm]   mv v12, a0  # live: [v5, v6, zero, v7]
// [Asm]   # restore_ctx2  # live: [v5, v6, zero, v7]
// [Asm]   # save_ctx2  # live: [v5, v6, zero, v7]
// [Asm]   call minimbt_print_endline  # live: [v5, v6, zero, a0, v7]
// [Asm]   mv v13, a0  # live: [v5, v6, zero, v7]
// [Asm]   # restore_ctx2  # live: [v5, v6, zero, v7]
// [Asm]   addi v14, v6, 1  # live: [v5, v14, zero, v7]
// [Asm] # control
// [Asm]   mv v5, v5  # live: [v5, v14, zero, v7]
// [Asm]   mv v6, v14  # live: [v5, v6, zero, v7]
// [Asm]   mv v7, v7  # live: [v5, v6, zero, v7]
// [Asm]   j .output14_1_0  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .output14_1_2:
// [Asm] # control
// [Asm]   mv v10, zero  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .output14_1_3:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] input243_26:
// [Asm] # block info: defs: [v3, v0, v4, v5, v2], uses: [v0, s10, a0, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0, zero], live_out: [v4, v5, zero, v3]
// [Asm] # block parameters: []
// [Asm] .input243_26_4:
// [Asm]   # save_ctx1  # live: [zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, zero, v2]
// [Asm]   lw v3, 8(v0)  # live: [v2, v0, zero, v3]
// [Asm]   ld v4, 16(v0)  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v6], uses: [v6, v5, v3], upward_exposed: [v5, v3], params_defs: [v5]
// [Asm] # live_in: [v4, v5, zero, v3], live_out: [v4, v5, zero, v3]
// [Asm] # block parameters: [v5]
// [Asm] .input243_26_0:
// [Asm]   addi v6, v3, -1  # live: [v4, v5, v6, zero, v3]
// [Asm] # control
// [Asm]   blt v6, v5, .input243_26_2  # live: [v4, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v13, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v11, v5, v14, a0, v13, v4, v9], upward_exposed: [v4, v5], params_defs: []
// [Asm] # live_in: [v4, v5, zero, v3], live_out: [v4, v5, zero, v3]
// [Asm] # block parameters: []
// [Asm] .input243_26_1:
// [Asm]   # save_ctx2  # live: [v4, v5, zero, v3]
// [Asm]   call minimbt_read_int  # live: [v4, v5, zero, a0, v3]
// [Asm]   mv v9, a0  # live: [v4, v5, zero, v9, v3]
// [Asm]   # restore_ctx2  # live: [v4, v5, zero, v9, v3]
// [Asm]   slliw v13, v5, 2  # live: [v3, v4, v5, zero, v9, v13]
// [Asm]   add v14, v4, v13  # live: [v4, v5, v14, zero, v9, v3]
// [Asm]   sw v9, 0(v14)  # live: [v4, v5, zero, v3]
// [Asm]   addi v11, v5, 1  # live: [v11, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v11  # live: [v4, v5, zero, v3]
// [Asm]   j .input243_26_0  # live: [v4, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v8], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v8]
// [Asm] # block parameters: []
// [Asm] .input243_26_2:
// [Asm] # control
// [Asm]   mv v8, zero  # live: [v8]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v8], upward_exposed: [v8], params_defs: [v8]
// [Asm] # live_in: [v8], live_out: []
// [Asm] # block parameters: [v8]
// [Asm] .input243_26_3:
// [Asm] # control
// [Asm]   mv a0, v8  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] sort_3173_21:
// [Asm] # block info: defs: [v2, t1, v13, v7, v0, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, v6, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, s10, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, v11, v5, a0, v13, v0, a2, a1, s10, v9, v8, v4, v3], upward_exposed: [a2, a1, s10, a0], params_defs: []
// [Asm] # live_in: [a2, a1, s10, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .sort_3173_21_0:
// [Asm]   # save_ctx1  # live: [a0, a2, a1, s10]
// [Asm]   mv v0, s10  # live: [a0, v0, a2, a1]
// [Asm]   mv v2, a0  # live: [v0, a2, a1, v2]
// [Asm]   mv v3, a1  # live: [v3, v0, a2, v2]
// [Asm]   mv v4, a2  # live: [v3, v0, v4, v2]
// [Asm]   ld v5, 8(v0)  # live: [v3, v5, v4, v2]
// [Asm]   mv s10, v5  # live: [v3, v5, v4, v2]
// [Asm]   ld v13, 0(v5)  # live: [v3, v5, v13, v4, v2]
// [Asm]   # save_ctx2  # live: [v3, v5, v13, v4, v2]
// [Asm]   mv a0, v2  # live: [v3, v5, a0, v13, v4, v2]
// [Asm]   mv a1, v3  # live: [v3, v5, a0, v13, v4, a1, v2]
// [Asm]   jalr v13  # live: [v2, v4, v5, a0, v3]
// [Asm]   mv v6, a0  # live: [v2, v4, v5, v3]
// [Asm]   # restore_ctx2  # live: [v2, v4, v5, v3]
// [Asm]   mv s10, v5  # live: [v2, v4, v5, v3]
// [Asm]   ld v11, 0(v5)  # live: [v2, v11, v4, v5, v3]
// [Asm]   # save_ctx2  # live: [v2, v11, v4, v5, v3]
// [Asm]   mv a0, v3  # live: [v2, v11, v4, v5, a0, v3]
// [Asm]   mv a1, v4  # live: [v2, v11, v5, a1, a0, v3]
// [Asm]   jalr v11  # live: [v2, v5, a0, v3]
// [Asm]   mv v7, a0  # live: [v2, v5, v3]
// [Asm]   # restore_ctx2  # live: [v2, v5, v3]
// [Asm]   mv s10, v5  # live: [v2, v5, v3]
// [Asm]   ld v9, 0(v5)  # live: [v2, v9, v3]
// [Asm]   # save_ctx2  # live: [v2, v9, v3]
// [Asm]   mv a0, v2  # live: [a0, v9, v3]
// [Asm]   mv a1, v3  # live: [a1, a0, v9]
// [Asm]   jalr v9  # live: [a0]
// [Asm]   mv v8, a0  # live: [v8]
// [Asm]   # restore_ctx2  # live: [v8]
// [Asm] # control
// [Asm]   mv a0, v8  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] sort233_6:
// [Asm] # block info: defs: [v2, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, a0, zero, a2, v4, a1, v3], upward_exposed: [a1, a0, zero], params_defs: []
// [Asm] # live_in: [a1, a0, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .sort233_6_0:
// [Asm]   # save_ctx1  # live: [a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, v3]
// [Asm]   mv a0, v2  # live: [a0, zero, v3]
// [Asm]   mv a1, zero  # live: [a1, a0, v3]
// [Asm]   mv a2, v3  # live: [a2, a1, a0]
// [Asm]   call quick_sort210_5  # live: [a0]
// [Asm]   mv v4, a0  # live: [v4]
// [Asm]   # restore_ctx2  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] sort_2157_19:
// [Asm] # block info: defs: [v2, v5, v22, v23, v20, v7, v8, v19, v0, v4, v6, v3], uses: [v3, a0, v22, v7, v0, a1, s10, v23, v20, v8, v19, v4, v6, v2], upward_exposed: [a1, s10, a0], params_defs: []
// [Asm] # live_in: [a1, s10, a0, zero], live_out: [v3, v4, v5, zero, v2]
// [Asm] # block parameters: []
// [Asm] .sort_2157_19_0:
// [Asm]   # save_ctx1  # live: [zero, a0, a1, s10]
// [Asm]   mv v0, s10  # live: [zero, a0, v0, a1]
// [Asm]   mv v2, a0  # live: [zero, v0, a1, v2]
// [Asm]   mv v3, a1  # live: [v3, zero, v0, v2]
// [Asm]   ld v4, 8(v0)  # live: [v3, zero, v0, v4, v2]
// [Asm]   ld v5, 16(v0)  # live: [v3, v5, zero, v4, v2]
// [Asm]   slliw v22, v3, 2  # live: [v3, v5, zero, v22, v4, v2]
// [Asm]   add v23, v4, v22  # live: [v3, v5, zero, v23, v4, v2]
// [Asm]   lw v6, 0(v23)  # live: [v3, v5, zero, v4, v6, v2]
// [Asm]   slliw v19, v2, 2  # live: [v3, v5, zero, v19, v4, v6, v2]
// [Asm]   add v20, v4, v19  # live: [v3, v5, zero, v20, v4, v6, v2]
// [Asm]   lw v7, 0(v20)  # live: [v3, v5, zero, v7, v4, v6, v2]
// [Asm]   addi v8, v7, -1  # live: [v3, v5, zero, v8, v4, v6, v2]
// [Asm] # control
// [Asm]   blt v8, v6, .sort_2157_19_2  # live: [v2, v4, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v2, v11, v5, a0, zero, v4, a2, a1, v12, v3], upward_exposed: [v3, v4, v5, zero, v2], params_defs: []
// [Asm] # live_in: [v2, v4, v5, zero, v3], live_out: [v14]
// [Asm] # block parameters: []
// [Asm] .sort_2157_19_1:
// [Asm]   # save_ctx2  # live: [v2, v4, v5, zero, v3]
// [Asm]   mv a0, v4  # live: [v2, v5, zero, a0, v3]
// [Asm]   mv a1, v2  # live: [v5, a1, zero, a0, v3]
// [Asm]   mv a2, v3  # live: [a2, v5, a1, zero, a0]
// [Asm]   call swap1_0  # live: [v5, zero, a0]
// [Asm]   mv v10, a0  # live: [v5, zero]
// [Asm]   # restore_ctx2  # live: [v5, zero]
// [Asm]   lw v11, 0(v5)  # live: [v11, v5, zero]
// [Asm]   addi v12, v11, 1  # live: [v5, v12, zero]
// [Asm]   sw v12, 0(v5)  # live: [zero]
// [Asm] # control
// [Asm]   mv v14, zero  # live: [v14]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v14, a0], upward_exposed: [v14], params_defs: [v14]
// [Asm] # live_in: [v14], live_out: []
// [Asm] # block parameters: [v14]
// [Asm] .sort_2157_19_3:
// [Asm] # control
// [Asm]   mv a0, v14  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v14], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v14]
// [Asm] # block parameters: []
// [Asm] .sort_2157_19_2:
// [Asm] # control
// [Asm]   mv v14, zero  # live: [v14]
// [Asm]   j .sort_2157_19_3  # live: [v14]
// [Asm] 
// [Asm] # leaf true
// [Asm] swap1_0:
// [Asm] # block info: defs: [v3, v11, v16, v5, v14, v10, v13, a0, v17, v12, v9, v4, v6, v2], uses: [v2, v11, v16, v14, v5, v10, v13, a0, a2, v17, a1, v12, v9, zero, v4, v6, v3], upward_exposed: [a2, a1, a0, zero], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .swap1_0_0:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v3, a2, zero, v2]
// [Asm]   mv v4, a2  # live: [v3, v4, zero, v2]
// [Asm]   slliw v16, v3, 2  # live: [v3, v4, v16, zero, v2]
// [Asm]   add v17, v2, v16  # live: [v3, v4, v17, zero, v2]
// [Asm]   lw v5, 0(v17)  # live: [v3, v4, v5, zero, v2]
// [Asm]   slliw v13, v4, 2  # live: [v3, v4, v5, zero, v13, v2]
// [Asm]   add v14, v2, v13  # live: [v3, v4, v5, v14, zero, v2]
// [Asm]   lw v6, 0(v14)  # live: [v3, v4, v5, v6, zero, v2]
// [Asm]   slliw v11, v3, 2  # live: [v11, v4, v5, v6, zero, v2]
// [Asm]   add v12, v2, v11  # live: [v4, v5, v6, v12, zero, v2]
// [Asm]   sw v6, 0(v12)  # live: [v4, v5, zero, v2]
// [Asm]   slliw v9, v4, 2  # live: [v5, zero, v9, v2]
// [Asm]   add v10, v2, v9  # live: [v5, v10, zero]
// [Asm]   sw v5, 0(v10)  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] f54_13:
// [Asm] # block info: defs: [v3, v0, v4, v5, v2], uses: [v0, s10, a0, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0, zero], live_out: [v4, v5, zero, v3]
// [Asm] # block parameters: []
// [Asm] .f54_13_4:
// [Asm]   # save_ctx1  # live: [zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, zero, v2]
// [Asm]   lw v3, 8(v0)  # live: [v2, v0, zero, v3]
// [Asm]   ld v4, 16(v0)  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v6], uses: [v6, v5, v3], upward_exposed: [v5, v3], params_defs: [v5]
// [Asm] # live_in: [v4, v5, zero, v3], live_out: [v4, v5, zero, v3]
// [Asm] # block parameters: [v5]
// [Asm] .f54_13_0:
// [Asm]   addi v6, v3, -1  # live: [v4, v5, v6, zero, v3]
// [Asm] # control
// [Asm]   blt v6, v5, .f54_13_2  # live: [v4, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, v5, ft9, v10, a5, fa4, a0, ft2, a2, a3, s10, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v4, v5, v12, v10, a0], upward_exposed: [v4, v5], params_defs: []
// [Asm] # live_in: [v4, v5, zero, v3], live_out: [v4, v5, zero, v3]
// [Asm] # block parameters: []
// [Asm] .f54_13_1:
// [Asm]   mv s10, v4  # live: [v4, v5, zero, v3]
// [Asm]   ld v12, 0(v4)  # live: [v4, v5, v12, zero, v3]
// [Asm]   # save_ctx2  # live: [v4, v5, v12, zero, v3]
// [Asm]   mv a0, v5  # live: [v4, v5, v12, zero, a0, v3]
// [Asm]   jalr v12  # live: [v4, v5, zero, a0, v3]
// [Asm]   mv v9, a0  # live: [v4, v5, zero, v3]
// [Asm]   # restore_ctx2  # live: [v4, v5, zero, v3]
// [Asm]   addi v10, v5, 1  # live: [v4, v10, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v10  # live: [v4, v5, zero, v3]
// [Asm]   j .f54_13_0  # live: [v4, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v8], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v8]
// [Asm] # block parameters: []
// [Asm] .f54_13_2:
// [Asm] # control
// [Asm]   mv v8, zero  # live: [v8]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v8], upward_exposed: [v8], params_defs: [v8]
// [Asm] # live_in: [v8], live_out: []
// [Asm] # block parameters: [v8]
// [Asm] .f54_13_3:
// [Asm] # control
// [Asm]   mv a0, v8  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_28:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_28_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main239_7  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] aux86_16:
// [Asm] # block info: defs: [v2, v5, v7, v8, v0, v4, v6, v3], uses: [v0, s10, a0, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0, zero], live_out: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux86_16_10:
// [Asm]   # save_ctx1  # live: [zero, a0, s10]
// [Asm]   mv v0, s10  # live: [zero, a0, v0]
// [Asm]   mv v2, a0  # live: [zero, v0, v2]
// [Asm]   lw v3, 8(v0)  # live: [v2, zero, v0, v3]
// [Asm]   ld v4, 16(v0)  # live: [v2, zero, v0, v4, v3]
// [Asm]   lw v5, 24(v0)  # live: [v2, v5, zero, v0, v4, v3]
// [Asm]   ld v6, 32(v0)  # live: [v2, v5, zero, v0, v4, v6, v3]
// [Asm]   ld v7, 40(v0)  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v8, v2  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v9], uses: [v8, v9, v3], upward_exposed: [v8, v3], params_defs: [v8]
// [Asm] # live_in: [v5, zero, v8, v7, v4, v6, v3], live_out: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] # block parameters: [v8]
// [Asm] .aux86_16_0:
// [Asm]   addi v9, v3, -2  # live: [v5, zero, v8, v7, v4, v6, v9, v3]
// [Asm] # control
// [Asm]   blt v9, v8, .aux86_16_2  # live: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v12, v33, v34, v13], uses: [v5, v13, v8, v4, v12, v33, v34], upward_exposed: [v4, v5, v8], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v8, v4, v6, v3], live_out: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux86_16_1:
// [Asm]   slliw v33, v8, 2  # live: [v5, zero, v8, v7, v4, v6, v33, v3]
// [Asm]   add v34, v4, v33  # live: [v5, zero, v8, v7, v4, v6, v34, v3]
// [Asm]   lw v12, 0(v34)  # live: [v5, zero, v8, v7, v4, v6, v12, v3]
// [Asm]   addi v13, v5, -1  # live: [v5, zero, v13, v8, v7, v4, v6, v12, v3]
// [Asm] # control
// [Asm]   blt v13, v12, .aux86_16_4  # live: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v15], uses: [v6, v15, v8], upward_exposed: [v6, v8], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v8, v4, v6, v3], live_out: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux86_16_3:
// [Asm]   lw v15, 0(v6)  # live: [v5, zero, v8, v7, v4, v6, v15, v3]
// [Asm] # control
// [Asm]   beq v15, v8, .aux86_16_5  # live: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v20, a6, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [a0, zero, v8, v7, v4, a2, v17, a1, v6], upward_exposed: [v7, v4, v6, zero, v8], params_defs: []
// [Asm] # live_in: [v5, zero, v8, v7, v4, v6, v3], live_out: [v5, zero, v20, v8, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux86_16_6:
// [Asm]   lw v17, 0(v6)  # live: [v5, zero, v7, v8, v4, v6, v17, v3]
// [Asm]   # save_ctx2  # live: [v5, zero, v7, v8, v4, v6, v17, v3]
// [Asm]   mv a0, v4  # live: [v5, zero, a0, v7, v8, v4, v6, v17, v3]
// [Asm]   mv a1, v17  # live: [v5, zero, a0, v7, v8, v4, a1, v6, v3]
// [Asm]   mv a2, v8  # live: [v5, zero, a0, v7, v8, v4, a2, a1, v6, v3]
// [Asm]   call swap1_0  # live: [v5, zero, a0, v7, v8, v4, v6, v3]
// [Asm]   mv v18, a0  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   # restore_ctx2  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   sw zero, 0(v7)  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v20, zero  # live: [v5, zero, v20, v7, v8, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v21, v24, v22], uses: [v6, v21, zero, v22], upward_exposed: [v6, zero], params_defs: [v20]
// [Asm] # live_in: [v5, zero, v20, v8, v7, v4, v6, v3], live_out: [v5, zero, v8, v7, v4, v6, v24, v3]
// [Asm] # block parameters: [v20]
// [Asm] .aux86_16_7:
// [Asm]   lw v21, 0(v6)  # live: [v5, v21, zero, v7, v8, v4, v6, v3]
// [Asm]   addi v22, v21, 1  # live: [v5, zero, v22, v7, v8, v4, v6, v3]
// [Asm]   sw v22, 0(v6)  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v24, zero  # live: [v5, zero, v7, v8, v4, v6, v24, v3]
// [Asm] 
// [Asm] # block info: defs: [v25, v8], uses: [v25, v8], upward_exposed: [v8], params_defs: [v24]
// [Asm] # live_in: [v5, zero, v8, v7, v4, v6, v24, v3], live_out: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: [v24]
// [Asm] .aux86_16_8:
// [Asm]   addi v25, v8, 1  # live: [v25, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v8, v25  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   j .aux86_16_0  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v11], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v11]
// [Asm] # block parameters: []
// [Asm] .aux86_16_2:
// [Asm] # control
// [Asm]   mv v11, zero  # live: [v11]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v11, a0], upward_exposed: [v11], params_defs: [v11]
// [Asm] # live_in: [v11], live_out: []
// [Asm] # block parameters: [v11]
// [Asm] .aux86_16_9:
// [Asm] # control
// [Asm]   mv a0, v11  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v24], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v5, zero, v8, v7, v4, v6, v3], live_out: [v5, zero, v8, v7, v4, v6, v24, v3]
// [Asm] # block parameters: []
// [Asm] .aux86_16_4:
// [Asm] # control
// [Asm]   mv v24, zero  # live: [v5, zero, v7, v8, v4, v6, v24, v3]
// [Asm]   j .aux86_16_8  # live: [v5, zero, v7, v8, v4, v6, v24, v3]
// [Asm] 
// [Asm] # block info: defs: [v20], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v5, zero, v8, v7, v4, v6, v3], live_out: [v5, zero, v20, v8, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux86_16_5:
// [Asm] # control
// [Asm]   mv v20, zero  # live: [v5, zero, v20, v7, v8, v4, v6, v3]
// [Asm]   j .aux86_16_7  # live: [v5, zero, v20, v7, v8, v4, v6, v3]
// [Asm] 
// [Asm] # leaf false
// [Asm] partition65_3:
// [Asm] # block info: defs: [v22, a1, s11, fa1, fa2, ft6, a4, fa6, v20, a6, ft10, ft5, v6, ft4, v5, ft9, v10, fa4, ft2, v37, v43, v17, a3, a7, fa7, fa3, ft3, v45, t2, v40, v3, t1, v13, v42, v7, ft0, ft1, v12, v29, v8, v19, v4, ft7, v11, v46, v21, a5, a0, a2, s10, v39, ft8, t3, t0, fa5, v18, fa0, v35, t4, v2], uses: [v40, v3, v42, v13, v22, v7, a1, v12, s11, v29, v8, v19, v4, v6, v5, v46, v10, a0, v37, a2, v43, a3, v39, v18, v45, v35, v2], upward_exposed: [a2, a1, a3, s11, a0], params_defs: []
// [Asm] # live_in: [a0, zero, a2, a1, a3, s11], live_out: [s11, v21, zero]
// [Asm] # block parameters: []
// [Asm] .partition65_3_0:
// [Asm]   # save_ctx1  # live: [zero, a0, a2, a1, s11, a3]
// [Asm]   mv v2, a0  # live: [zero, a2, a1, s11, a3, v2]
// [Asm]   mv v3, a1  # live: [v3, zero, a2, s11, a3, v2]
// [Asm]   mv v4, a2  # live: [v3, zero, v4, s11, a3, v2]
// [Asm]   mv v5, a3  # live: [v3, v5, zero, v4, s11, v2]
// [Asm]   addi v10, v5, -1  # live: [v3, v5, v10, zero, v4, s11, v2]
// [Asm]   # save_ctx2  # live: [v3, v5, v10, zero, v4, s11, v2]
// [Asm]   mv a0, v2  # live: [v3, v5, v10, zero, a0, v4, s11, v2]
// [Asm]   mv a1, v3  # live: [v5, v10, zero, a0, v4, a1, s11, v2]
// [Asm]   mv a2, v10  # live: [v5, zero, a0, v4, a2, a1, s11, v2]
// [Asm]   call swap1_0  # live: [v5, zero, a0, v4, s11, v2]
// [Asm]   mv v11, a0  # live: [v5, zero, v4, s11, v2]
// [Asm]   # restore_ctx2  # live: [v5, zero, v4, s11, v2]
// [Asm]   addi v12, v5, -1  # live: [v5, zero, v4, s11, v12, v2]
// [Asm]   slliw v45, v12, 2  # live: [v5, zero, v45, v4, s11, v2]
// [Asm]   add v46, v2, v45  # live: [v5, v46, zero, v4, s11, v2]
// [Asm]   lw v13, 0(v46)  # live: [v5, zero, v13, v4, s11, v2]
// [Asm]   addi v43, s11, -4  # live: [v5, zero, v13, v4, v43, v2]
// [Asm]   andi v6, v43, -8  # live: [v5, zero, v13, v4, v6, v2]
// [Asm]   mv s11, v6  # live: [v5, zero, v13, v4, v6, s11, v2]
// [Asm]   sw v4, 0(v6)  # live: [v5, zero, v13, v4, v6, s11, v2]
// [Asm]   addi v40, s11, -4  # live: [v40, v5, zero, v13, v4, v6, v2]
// [Asm]   andi v7, v40, -8  # live: [v5, zero, v13, v7, v4, v6, v2]
// [Asm]   mv s11, v7  # live: [v5, zero, v13, v7, v4, v6, s11, v2]
// [Asm]   li v42, 1  # live: [v5, zero, v13, v42, v7, v4, v6, s11, v2]
// [Asm]   sw v42, 0(v7)  # live: [v5, zero, v13, v7, v4, v6, s11, v2]
// [Asm]   addi v37, s11, -48  # live: [v5, zero, v13, v7, v4, v37, v6, v2]
// [Asm]   andi v8, v37, -8  # live: [v5, zero, v13, v7, v8, v4, v6, v2]
// [Asm]   mv s11, v8  # live: [v5, zero, v13, v7, v8, v4, v6, s11, v2]
// [Asm]   la v39, aux86_16  # live: [v5, zero, v13, v7, v8, v4, v6, s11, v39, v2]
// [Asm]   sd v39, 0(v8)  # live: [v5, zero, v13, v7, v8, v4, v6, s11, v2]
// [Asm]   sd v5, 8(v8)  # live: [v5, zero, v13, v7, v8, v4, v6, s11, v2]
// [Asm]   sd v2, 16(v8)  # live: [v5, zero, v13, v7, v8, v4, v6, s11, v2]
// [Asm]   sd v13, 24(v8)  # live: [v5, zero, v7, v8, v4, v6, s11, v2]
// [Asm]   sd v6, 32(v8)  # live: [v5, zero, v7, v8, v4, v6, s11, v2]
// [Asm]   sd v7, 40(v8)  # live: [v5, zero, v7, v8, v4, v6, s11, v2]
// [Asm]   mv s10, v8  # live: [v5, zero, v7, v8, v4, v6, s11, v2]
// [Asm]   ld v35, 0(v8)  # live: [v5, zero, v7, v35, v4, v6, s11, v2]
// [Asm]   # save_ctx2  # live: [v5, zero, v7, v35, v4, v6, s11, v2]
// [Asm]   mv a0, v4  # live: [v5, zero, a0, v7, v35, v6, s11, v2]
// [Asm]   jalr v35  # live: [v5, zero, a0, v7, v6, s11, v2]
// [Asm]   mv v17, a0  # live: [v5, zero, v7, v6, s11, v2]
// [Asm]   # restore_ctx2  # live: [v5, zero, v7, v6, s11, v2]
// [Asm]   lw v18, 0(v6)  # live: [v5, v18, zero, v7, v6, s11, v2]
// [Asm]   addi v19, v5, -1  # live: [v18, zero, v7, v19, v6, s11, v2]
// [Asm]   # save_ctx2  # live: [v18, zero, v7, v19, v6, s11, v2]
// [Asm]   mv a0, v2  # live: [v18, zero, a0, v7, v19, v6, s11]
// [Asm]   mv a1, v18  # live: [zero, a0, v7, v19, v6, a1, s11]
// [Asm]   mv a2, v19  # live: [zero, a0, v7, a2, v6, a1, s11]
// [Asm]   call swap1_0  # live: [v6, s11, zero, a0, v7]
// [Asm]   mv v20, a0  # live: [v6, s11, zero, v7]
// [Asm]   # restore_ctx2  # live: [v6, s11, zero, v7]
// [Asm]   lw v21, 0(v6)  # live: [s11, v21, zero, v7]
// [Asm]   lw v22, 0(v7)  # live: [s11, v21, zero, v22]
// [Asm] # control
// [Asm]   li v29, 1  # live: [s11, v21, zero, v29, v22]
// [Asm]   bne v22, v29, .partition65_3_2  # live: [s11, v21, zero]
// [Asm] 
// [Asm] # block info: defs: [v24, v28], uses: [v28], upward_exposed: [], params_defs: []
// [Asm] # live_in: [s11, v21], live_out: [v24, s11, v21]
// [Asm] # block parameters: []
// [Asm] .partition65_3_1:
// [Asm] # control
// [Asm]   li v28, 1  # live: [s11, v21, v28]
// [Asm]   mv v24, v28  # live: [v24, s11, v21]
// [Asm] 
// [Asm] # block info: defs: [s11, v26, v9, a0], uses: [a0, s11, v21, v24, v9, v26], upward_exposed: [s11, v21, v24], params_defs: [v24]
// [Asm] # live_in: [v24, s11, v21], live_out: []
// [Asm] # block parameters: [v24]
// [Asm] .partition65_3_3:
// [Asm]   addi v26, s11, -8  # live: [v24, v21, v26]
// [Asm]   andi v9, v26, -8  # live: [v24, v21, v9]
// [Asm]   mv s11, v9  # live: [v24, v21, v9]
// [Asm]   sw v21, 0(v9)  # live: [v24, v9]
// [Asm]   sw v24, 4(v9)  # live: [v9]
// [Asm] # control
// [Asm]   mv a0, v9  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v24], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [s11, v21, zero], live_out: [v24, s11, v21]
// [Asm] # block parameters: []
// [Asm] .partition65_3_2:
// [Asm] # control
// [Asm]   mv v24, zero  # live: [v24, s11, v21]
// [Asm]   j .partition65_3_3  # live: [v24, s11, v21]
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_28  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("swap", Unit), args: [("arr", Array(Int)), ("i", Int), ("j", Int)], body: Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j"))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit)))}, LetRec({name: ("output", Unit), args: [("arr", Array(Int)), ("i", Int), ("len", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Var("arr"), Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("len")]))), Unit)}, LetRec({name: ("insertion_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: LetRec({name: ("g", Unit), args: [("j", Int)], body: If(LE(Prim(Int(1), Var("low"), Add, kind=Some(Int)), Var("j")), If(LE(Get(Var("arr"), Var("j")), Prim(Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))]), App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])), Unit), Unit)}, LetRec({name: ("f", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("j", Var({val: Some(Int)})), Var("i"), Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("f"), [Prim(Var("low"), Int(1), Add, kind=Some(Int))])))}, LetRec({name: ("partition", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("pivot_index", Int), ("low", Int), ("high", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("pivot_index"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Var("low")), Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))))))))}, LetRec({name: ("choose_pivot", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("use_median_of_medians", Var({val: Some(Int)})), Int(50), Let(("swaps", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))))))}, LetRec({name: ("quick_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))))}, LetRec({name: ("sort", Unit), args: [("x", Array(Int)), ("len", Int)], body: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), [])))))))))
// [Knf] build_knf: Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j"))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit)))
// [Knf] build_knf: Get(Var("arr"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j"))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit))
// [Knf] build_knf: Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j")))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("arr"), Var("j"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit)
// [Knf] build_knf: Put(Var("arr"), Var("j"), Var("tmp"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Var("tmp")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("output", Unit), args: [("arr", Array(Int)), ("i", Int), ("len", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Var("arr"), Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("len")]))), Unit)}, LetRec({name: ("insertion_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: LetRec({name: ("g", Unit), args: [("j", Int)], body: If(LE(Prim(Int(1), Var("low"), Add, kind=Some(Int)), Var("j")), If(LE(Get(Var("arr"), Var("j")), Prim(Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))]), App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])), Unit), Unit)}, LetRec({name: ("f", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("j", Var({val: Some(Int)})), Var("i"), Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("f"), [Prim(Var("low"), Int(1), Add, kind=Some(Int))])))}, LetRec({name: ("partition", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("pivot_index", Int), ("low", Int), ("high", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("pivot_index"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Var("low")), Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))))))))}, LetRec({name: ("choose_pivot", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("use_median_of_medians", Var({val: Some(Int)})), Int(50), Let(("swaps", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))))))}, LetRec({name: ("quick_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))))}, LetRec({name: ("sort", Unit), args: [("x", Array(Int)), ("len", Int)], body: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), []))))))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Var("arr"), Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("len")]))), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Var("arr"), Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("len")])))
// [Knf] build_knf: App(Var("print_int"), [Get(Var("arr"), Var("i"))])
// [Knf] build_knf: Get(Var("arr"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Var("arr"), Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("len")]))
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: App(Var("output"), [Var("arr"), Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("len")])
// [Knf] build_knf: Var("output")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("insertion_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: LetRec({name: ("g", Unit), args: [("j", Int)], body: If(LE(Prim(Int(1), Var("low"), Add, kind=Some(Int)), Var("j")), If(LE(Get(Var("arr"), Var("j")), Prim(Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))]), App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])), Unit), Unit)}, LetRec({name: ("f", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("j", Var({val: Some(Int)})), Var("i"), Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("f"), [Prim(Var("low"), Int(1), Add, kind=Some(Int))])))}, LetRec({name: ("partition", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("pivot_index", Int), ("low", Int), ("high", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("pivot_index"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Var("low")), Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))))))))}, LetRec({name: ("choose_pivot", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("use_median_of_medians", Var({val: Some(Int)})), Int(50), Let(("swaps", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))))))}, LetRec({name: ("quick_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))))}, LetRec({name: ("sort", Unit), args: [("x", Array(Int)), ("len", Int)], body: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), [])))))))
// [Knf] build_knf: LetRec({name: ("g", Unit), args: [("j", Int)], body: If(LE(Prim(Int(1), Var("low"), Add, kind=Some(Int)), Var("j")), If(LE(Get(Var("arr"), Var("j")), Prim(Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))]), App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])), Unit), Unit)}, LetRec({name: ("f", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("j", Var({val: Some(Int)})), Var("i"), Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("f"), [Prim(Var("low"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: If(LE(Prim(Int(1), Var("low"), Add, kind=Some(Int)), Var("j")), If(LE(Get(Var("arr"), Var("j")), Prim(Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))]), App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])), Unit), Unit)
// [Knf] build_knf: Prim(Int(1), Var("low"), Add, kind=Some(Int))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: If(LE(Get(Var("arr"), Var("j")), Prim(Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))]), App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])), Unit)
// [Knf] build_knf: Get(Var("arr"), Var("j"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("j"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))]), App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))]))
// [Knf] build_knf: App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("swap")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Var("j"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Prim(Var("j"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("f", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("j", Var({val: Some(Int)})), Var("i"), Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("f"), [Prim(Var("low"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("j", Var({val: Some(Int)})), Var("i"), Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("high"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("j", Var({val: Some(Int)})), Var("i"), Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("g"), [Var("j")])
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("f"), [Prim(Var("low"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Prim(Var("low"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("partition", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("pivot_index", Int), ("low", Int), ("high", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("pivot_index"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Var("low")), Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))))))))}, LetRec({name: ("choose_pivot", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("use_median_of_medians", Var({val: Some(Int)})), Int(50), Let(("swaps", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))))))}, LetRec({name: ("quick_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))))}, LetRec({name: ("sort", Unit), args: [("x", Array(Int)), ("len", Int)], body: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), []))))))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("pivot_index"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Var("low")), Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))))))))
// [Knf] build_knf: App(Var("swap"), [Var("arr"), Var("pivot_index"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("swap")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("pivot_index")
// [Knf] build_knf: Prim(Var("high"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Var("low")), Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))])))))))
// [Knf] build_knf: Get(Var("arr"), Prim(Var("high"), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("high"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Var("low")), Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))))))
// [Knf] build_knf: Array(Int(1), Var("low"))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))])))))
// [Knf] build_knf: Array(Int(1), Int(1))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))))
// [Knf] build_knf: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Var("high"), Int(2), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit)
// [Knf] build_knf: Get(Var("arr"), Var("j"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("pivot")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit))
// [Knf] build_knf: If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0))))
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))
// [Knf] build_knf: App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])
// [Knf] build_knf: Var("swap")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Put(Var("partitioned"), Int(0), Int(0))
// [Knf] build_knf: Var("partitioned")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)
// [Knf] build_knf: Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("j"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))])))
// [Knf] build_knf: App(Var("aux"), [Var("low")])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))
// [Knf] build_knf: App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("swap")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Var("high"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))])
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Eq(Get(Var("partitioned"), Int(0)), Int(1))
// [Knf] build_knf: Get(Var("partitioned"), Int(0))
// [Knf] build_knf: Var("partitioned")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("choose_pivot", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("use_median_of_medians", Var({val: Some(Int)})), Int(50), Let(("swaps", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))))))}, LetRec({name: ("quick_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))))}, LetRec({name: ("sort", Unit), args: [("x", Array(Int)), ("len", Int)], body: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), [])))))
// [Knf] build_knf: Let(("use_median_of_medians", Var({val: Some(Int)})), Int(50), Let(("swaps", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))))))
// [Knf] build_knf: Int(50)
// [Knf] build_knf: Let(("swaps", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))])))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))))
// [Knf] build_knf: Prim(Var("high"), Var("low"), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))])))
// [Knf] build_knf: Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int))
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int))
// [Knf] build_knf: Prim(Var("len"), Int(4), Div, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(4)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))
// [Knf] build_knf: If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit)
// [Knf] build_knf: Int(8)
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")]))))))
// [Knf] build_knf: Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int))
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int))
// [Knf] build_knf: Prim(Var("len"), Int(4), Div, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(4)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))
// [Knf] build_knf: Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int))
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int))
// [Knf] build_knf: Prim(Var("len"), Int(4), Div, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(4)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")]))))
// [Knf] build_knf: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)
// [Knf] build_knf: Get(Var("arr"), Var("b"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("arr"), Var("a"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int))))
// [Knf] build_knf: App(Var("swap"), [Var("arr"), Var("a"), Var("b")])
// [Knf] build_knf: Var("swap")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("swaps")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("swaps"), Int(0))
// [Knf] build_knf: Var("swaps")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))
// [Knf] build_knf: App(Var("sort_2"), [Var("a"), Var("b")])
// [Knf] build_knf: Var("sort_2")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")]))
// [Knf] build_knf: App(Var("sort_2"), [Var("b"), Var("c")])
// [Knf] build_knf: Var("sort_2")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: App(Var("sort_2"), [Var("a"), Var("b")])
// [Knf] build_knf: Var("sort_2")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")]))
// [Knf] build_knf: If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit)
// [Knf] build_knf: Var("use_median_of_medians")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("sort_3")
// [Knf] build_knf: Prim(Var("a"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Prim(Var("a"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("sort_3")
// [Knf] build_knf: Prim(Var("b"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Prim(Var("b"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("sort_3")
// [Knf] build_knf: Prim(Var("c"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Prim(Var("c"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("sort_3")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Unit
// [Knf] build_knf: Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))])
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Eq(Get(Var("swaps"), Int(0)), Int(0))
// [Knf] build_knf: Get(Var("swaps"), Int(0))
// [Knf] build_knf: Var("swaps")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("quick_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))))}, LetRec({name: ("sort", Unit), args: [("x", Array(Int)), ("len", Int)], body: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), []))))
// [Knf] build_knf: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))))
// [Knf] build_knf: Prim(Var("high"), Var("low"), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")])))))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(16)
// [Knf] build_knf: App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")])
// [Knf] build_knf: Var("insertion_sort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Var("high")
// [Knf] build_knf: LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))
// [Knf] build_knf: App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")])
// [Knf] build_knf: Var("choose_pivot")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Var("high")
// [Knf] build_knf: LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")])))
// [Knf] build_knf: App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")])
// [Knf] build_knf: Var("partition")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("pivot_index")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))
// [Knf] build_knf: App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")])
// [Knf] build_knf: Var("quick_sort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Var("pivot")
// [Knf] build_knf: App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")])
// [Knf] build_knf: Var("quick_sort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("pivot"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pivot")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("high")
// [Knf] build_knf: LetRec({name: ("sort", Unit), args: [("x", Array(Int)), ("len", Int)], body: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), [])))
// [Knf] build_knf: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])
// [Knf] build_knf: Var("quick_sort")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("len")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))
// [Knf] build_knf: App(Var("read_int"), [])
// [Knf] build_knf: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")])))))
// [Knf] build_knf: Array(Var("len"), Int(0))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("arr"), Var("i"), App(Var("read_int"), []))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("read_int"), [])
// [Knf] build_knf: App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("input")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")])))
// [Knf] build_knf: App(Var("input"), [Int(0)])
// [Knf] build_knf: Var("input")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))
// [Knf] build_knf: App(Var("sort"), [Var("arr"), Var("len")])
// [Knf] build_knf: Var("sort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("len")
// [Knf] build_knf: App(Var("output"), [Var("arr"), Int(0), Var("len")])
// [Knf] build_knf: Var("output")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("len")
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memseti32
// [Main]   .type memseti32, @function
// [Main] memseti32:
// [Main]   blez a1, .memseti32_b1
// [Main]   slli a1, a1, 2
// [Main]   add a1, a1, a0
// [Main] .memseti32_b0:
// [Main]   sw a2, 0(a0)
// [Main]   addi a0, a0, 4
// [Main]   bne a0, a1, .memseti32_b0
// [Main] .memseti32_b1:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl g37_11
// [Main]   .type g37_11, @function
// [Main] # leaf false
// [Main] g37_11:
// [Main] .g37_11_7:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv a1, s10
// [Main]   lw s2, 8(a1)
// [Main]   ld s1, 16(a1)
// [Main]   mv s0, a0
// [Main] 
// [Main] .g37_11_0:
// [Main]   addi a0, s2, 1
// [Main]   blt s0, a0, .g37_11_2
// [Main] 
// [Main] .g37_11_1:
// [Main]   slliw a0, s0, 2
// [Main]   add a0, s1, a0
// [Main]   lw a0, 0(a0)
// [Main]   addi a1, s0, -1
// [Main]   slliw a1, a1, 2
// [Main]   add a1, s1, a1
// [Main]   lw a1, 0(a1)
// [Main]   addi a1, a1, -1
// [Main]   blt a1, a0, .g37_11_4
// [Main] 
// [Main] .g37_11_3:
// [Main]   addi a2, s0, -1
// [Main]   mv a0, s1
// [Main]   mv a1, s0
// [Main]   call swap1_0
// [Main]   addi a0, s0, -1
// [Main]   mv s0, a0
// [Main]   j .g37_11_0
// [Main] 
// [Main] .g37_11_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .g37_11_6:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .g37_11_4:
// [Main]   mv a0, zero
// [Main] 
// [Main] .g37_11_5:
// [Main]   j .g37_11_6
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl insertion_sort30_2
// [Main]   .type insertion_sort30_2, @function
// [Main] # leaf false
// [Main] insertion_sort30_2:
// [Main] .insertion_sort30_2_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   addi a3, s11, -24
// [Main]   andi a3, a3, -8
// [Main]   mv s11, a3
// [Main]   la a4, g37_11
// [Main]   sd a4, 0(a3)
// [Main]   sd a1, 8(a3)
// [Main]   sd a0, 16(a3)
// [Main]   addi a0, s11, -24
// [Main]   andi a0, a0, -8
// [Main]   mv s11, a0
// [Main]   la a4, f54_13
// [Main]   sd a4, 0(a0)
// [Main]   sd a2, 8(a0)
// [Main]   sd a3, 16(a0)
// [Main]   addi a1, a1, 1
// [Main]   mv s10, a0
// [Main]   ld a2, 0(a0)
// [Main]   mv a0, a1
// [Main]   jalr a2
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl choose_pivot129_4
// [Main]   .type choose_pivot129_4, @function
// [Main] # leaf false
// [Main] choose_pivot129_4:
// [Main] .choose_pivot129_4_0:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   mv a3, a1
// [Main]   mv a1, a2
// [Main]   addi a2, s11, -4
// [Main]   andi s0, a2, -8
// [Main]   mv s11, s0
// [Main]   sw zero, 0(s0)
// [Main]   sub a1, a1, a3
// [Main]   li a2, 4
// [Main]   div a2, a1, a2
// [Main]   li a4, 2
// [Main]   mul a2, a2, a4
// [Main]   add s1, a3, a2
// [Main]   li a2, 8
// [Main]   blt a1, a2, .choose_pivot129_4_2
// [Main] 
// [Main] .choose_pivot129_4_1:
// [Main]   li a2, 4
// [Main]   div a2, a1, a2
// [Main]   li a4, 1
// [Main]   mul a2, a2, a4
// [Main]   add s4, a3, a2
// [Main]   li a2, 4
// [Main]   div a2, a1, a2
// [Main]   li a4, 3
// [Main]   mul a2, a2, a4
// [Main]   add s2, a3, a2
// [Main]   addi a2, s11, -24
// [Main]   andi a2, a2, -8
// [Main]   mv s11, a2
// [Main]   la a3, sort_2157_19
// [Main]   sd a3, 0(a2)
// [Main]   sd a0, 8(a2)
// [Main]   sd s0, 16(a2)
// [Main]   addi a0, s11, -16
// [Main]   andi s3, a0, -8
// [Main]   mv s11, s3
// [Main]   la a0, sort_3173_21
// [Main]   sd a0, 0(s3)
// [Main]   sd a2, 8(s3)
// [Main]   addi a0, a1, -1
// [Main]   li a1, 50
// [Main]   blt a0, a1, .choose_pivot129_4_4
// [Main] 
// [Main] .choose_pivot129_4_3:
// [Main]   addi a0, s4, -1
// [Main]   addi a2, s4, 1
// [Main]   mv s10, s3
// [Main]   ld a3, 0(s3)
// [Main]   mv a1, s4
// [Main]   jalr a3
// [Main]   addi a0, s1, -1
// [Main]   addi a2, s1, 1
// [Main]   mv s10, s3
// [Main]   ld a3, 0(s3)
// [Main]   mv a1, s1
// [Main]   jalr a3
// [Main]   addi a0, s2, -1
// [Main]   addi a2, s2, 1
// [Main]   mv s10, s3
// [Main]   ld a3, 0(s3)
// [Main]   mv a1, s2
// [Main]   jalr a3
// [Main] 
// [Main] .choose_pivot129_4_5:
// [Main]   mv s10, s3
// [Main]   ld a3, 0(s3)
// [Main]   mv a0, s4
// [Main]   mv a1, s1
// [Main]   mv a2, s2
// [Main]   jalr a3
// [Main] 
// [Main] .choose_pivot129_4_6:
// [Main]   lw a0, 0(s0)
// [Main]   bne a0, zero, .choose_pivot129_4_8
// [Main] 
// [Main] .choose_pivot129_4_7:
// [Main]   li a0, 1
// [Main] 
// [Main] .choose_pivot129_4_9:
// [Main]   addi a1, s11, -8
// [Main]   andi a1, a1, -8
// [Main]   mv s11, a1
// [Main]   sw s1, 0(a1)
// [Main]   sw a0, 4(a1)
// [Main]   mv a0, a1
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main] .choose_pivot129_4_2:
// [Main]   mv a0, zero
// [Main]   j .choose_pivot129_4_6
// [Main] 
// [Main] .choose_pivot129_4_4:
// [Main]   mv a0, zero
// [Main]   j .choose_pivot129_4_5
// [Main] 
// [Main] .choose_pivot129_4_8:
// [Main]   mv a0, zero
// [Main]   j .choose_pivot129_4_9
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl quick_sort210_5
// [Main]   .type quick_sort210_5, @function
// [Main] # leaf false
// [Main] quick_sort210_5:
// [Main] .quick_sort210_5_4:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   mv s2, a2
// [Main] 
// [Main] .quick_sort210_5_0:
// [Main]   sub a0, s2, s1
// [Main]   li a1, 16
// [Main]   bge a1, a0, .quick_sort210_5_1
// [Main] 
// [Main] .quick_sort210_5_2:
// [Main]   mv a0, s0
// [Main]   mv a1, s1
// [Main]   mv a2, s2
// [Main]   call choose_pivot129_4
// [Main]   lw a1, 0(a0)
// [Main]   mv a0, s0
// [Main]   mv a2, s1
// [Main]   mv a3, s2
// [Main]   call partition65_3
// [Main]   lw s3, 0(a0)
// [Main]   mv a0, s0
// [Main]   mv a1, s1
// [Main]   mv a2, s3
// [Main]   call quick_sort210_5
// [Main]   addi a0, s3, 1
// [Main]   mv s1, a0
// [Main]   j .quick_sort210_5_0
// [Main] 
// [Main] .quick_sort210_5_1:
// [Main]   mv a0, s0
// [Main]   mv a1, s1
// [Main]   mv a2, s2
// [Main]   call insertion_sort30_2
// [Main] 
// [Main] .quick_sort210_5_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main239_7
// [Main]   .type main239_7, @function
// [Main] # leaf false
// [Main] main239_7:
// [Main] .main239_7_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   call minimbt_read_int
// [Main]   mv s0, a0
// [Main]   slliw a0, s0, 2
// [Main]   sub a0, s11, a0
// [Main]   andi s1, a0, -8
// [Main]   mv s11, s1
// [Main]   mv a1, s0
// [Main]   mv a0, s1
// [Main]   mv a2, zero
// [Main]   call memseti32
// [Main]   addi a0, s11, -24
// [Main]   andi a0, a0, -8
// [Main]   mv s11, a0
// [Main]   la a1, input243_26
// [Main]   sd a1, 0(a0)
// [Main]   sd s0, 8(a0)
// [Main]   sd s1, 16(a0)
// [Main]   mv s10, a0
// [Main]   ld a1, 0(a0)
// [Main]   mv a0, zero
// [Main]   jalr a1
// [Main]   mv a0, s1
// [Main]   mv a1, s0
// [Main]   call sort233_6
// [Main]   mv a0, s1
// [Main]   mv a1, zero
// [Main]   mv a2, s0
// [Main]   call output14_1
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl output14_1
// [Main]   .type output14_1, @function
// [Main] # leaf false
// [Main] output14_1:
// [Main] .output14_1_4:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   mv s2, a2
// [Main] 
// [Main] .output14_1_0:
// [Main]   addi a0, s2, -1
// [Main]   blt a0, s1, .output14_1_2
// [Main] 
// [Main] .output14_1_1:
// [Main]   slliw a0, s1, 2
// [Main]   add a0, s0, a0
// [Main]   lw a0, 0(a0)
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   addi a0, s1, 1
// [Main]   mv s1, a0
// [Main]   j .output14_1_0
// [Main] 
// [Main] .output14_1_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .output14_1_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl input243_26
// [Main]   .type input243_26, @function
// [Main] # leaf false
// [Main] input243_26:
// [Main] .input243_26_4:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv a1, s10
// [Main]   lw s0, 8(a1)
// [Main]   ld s1, 16(a1)
// [Main]   mv s2, a0
// [Main] 
// [Main] .input243_26_0:
// [Main]   addi a0, s0, -1
// [Main]   blt a0, s2, .input243_26_2
// [Main] 
// [Main] .input243_26_1:
// [Main]   call minimbt_read_int
// [Main]   slliw a1, s2, 2
// [Main]   add a1, s1, a1
// [Main]   sw a0, 0(a1)
// [Main]   addi a0, s2, 1
// [Main]   mv s2, a0
// [Main]   j .input243_26_0
// [Main] 
// [Main] .input243_26_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .input243_26_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl sort_3173_21
// [Main]   .type sort_3173_21, @function
// [Main] # leaf false
// [Main] sort_3173_21:
// [Main] .sort_3173_21_0:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   mv a3, s10
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   mv s2, a2
// [Main]   ld s3, 8(a3)
// [Main]   mv s10, s3
// [Main]   ld a2, 0(s3)
// [Main]   mv a0, s0
// [Main]   mv a1, s1
// [Main]   jalr a2
// [Main]   mv s10, s3
// [Main]   ld a2, 0(s3)
// [Main]   mv a0, s1
// [Main]   mv a1, s2
// [Main]   jalr a2
// [Main]   mv s10, s3
// [Main]   ld a2, 0(s3)
// [Main]   mv a0, s0
// [Main]   mv a1, s1
// [Main]   jalr a2
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl sort233_6
// [Main]   .type sort233_6, @function
// [Main] # leaf false
// [Main] sort233_6:
// [Main] .sort233_6_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a2, a1
// [Main]   mv a1, zero
// [Main]   call quick_sort210_5
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl sort_2157_19
// [Main]   .type sort_2157_19, @function
// [Main] # leaf false
// [Main] sort_2157_19:
// [Main] .sort_2157_19_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   mv a4, s10
// [Main]   mv a2, a0
// [Main]   mv a3, a1
// [Main]   ld a0, 8(a4)
// [Main]   ld s0, 16(a4)
// [Main]   slliw a1, a3, 2
// [Main]   add a1, a0, a1
// [Main]   lw a1, 0(a1)
// [Main]   slliw a4, a2, 2
// [Main]   add a4, a0, a4
// [Main]   lw a4, 0(a4)
// [Main]   addi a4, a4, -1
// [Main]   blt a4, a1, .sort_2157_19_2
// [Main] 
// [Main] .sort_2157_19_1:
// [Main]   mv a1, a2
// [Main]   mv a2, a3
// [Main]   call swap1_0
// [Main]   lw a0, 0(s0)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s0)
// [Main]   mv a0, zero
// [Main] 
// [Main] .sort_2157_19_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .sort_2157_19_2:
// [Main]   mv a0, zero
// [Main]   j .sort_2157_19_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl swap1_0
// [Main]   .type swap1_0, @function
// [Main] # leaf true
// [Main] swap1_0:
// [Main] .swap1_0_0:
// [Main]   slliw a3, a1, 2
// [Main]   add a3, a0, a3
// [Main]   lw a3, 0(a3)
// [Main]   slliw a4, a2, 2
// [Main]   add a4, a0, a4
// [Main]   lw a4, 0(a4)
// [Main]   slliw a1, a1, 2
// [Main]   add a1, a0, a1
// [Main]   sw a4, 0(a1)
// [Main]   slliw a1, a2, 2
// [Main]   add a0, a0, a1
// [Main]   sw a3, 0(a0)
// [Main]   mv a0, zero
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl f54_13
// [Main]   .type f54_13, @function
// [Main] # leaf false
// [Main] f54_13:
// [Main] .f54_13_4:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv a1, s10
// [Main]   lw s0, 8(a1)
// [Main]   ld s1, 16(a1)
// [Main]   mv s2, a0
// [Main] 
// [Main] .f54_13_0:
// [Main]   addi a0, s0, -1
// [Main]   blt a0, s2, .f54_13_2
// [Main] 
// [Main] .f54_13_1:
// [Main]   mv s10, s1
// [Main]   ld a1, 0(s1)
// [Main]   mv a0, s2
// [Main]   jalr a1
// [Main]   addi a0, s2, 1
// [Main]   mv s2, a0
// [Main]   j .f54_13_0
// [Main] 
// [Main] .f54_13_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .f54_13_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_28
// [Main]   .type T$start_28, @function
// [Main] # leaf false
// [Main] T$start_28:
// [Main] .T$start_28_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main239_7
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux86_16
// [Main]   .type aux86_16, @function
// [Main] # leaf false
// [Main] aux86_16:
// [Main] .aux86_16_10:
// [Main]   addi sp, sp, -64
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   mv a1, s10
// [Main]   lw s0, 8(a1)
// [Main]   ld s1, 16(a1)
// [Main]   lw s2, 24(a1)
// [Main]   ld s3, 32(a1)
// [Main]   ld s4, 40(a1)
// [Main]   mv s5, a0
// [Main] 
// [Main] .aux86_16_0:
// [Main]   addi a0, s0, -2
// [Main]   blt a0, s5, .aux86_16_2
// [Main] 
// [Main] .aux86_16_1:
// [Main]   slliw a0, s5, 2
// [Main]   add a0, s1, a0
// [Main]   lw a0, 0(a0)
// [Main]   addi a1, s2, -1
// [Main]   blt a1, a0, .aux86_16_4
// [Main] 
// [Main] .aux86_16_3:
// [Main]   lw a0, 0(s3)
// [Main]   beq a0, s5, .aux86_16_5
// [Main] 
// [Main] .aux86_16_6:
// [Main]   lw a1, 0(s3)
// [Main]   mv a0, s1
// [Main]   mv a2, s5
// [Main]   call swap1_0
// [Main]   sw zero, 0(s4)
// [Main]   mv a0, zero
// [Main] 
// [Main] .aux86_16_7:
// [Main]   lw a0, 0(s3)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s3)
// [Main]   mv a0, zero
// [Main] 
// [Main] .aux86_16_8:
// [Main]   addi a0, s5, 1
// [Main]   mv s5, a0
// [Main]   j .aux86_16_0
// [Main] 
// [Main] .aux86_16_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .aux86_16_9:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   addi sp, sp, 64
// [Main]   ret
// [Main] 
// [Main] .aux86_16_4:
// [Main]   mv a0, zero
// [Main]   j .aux86_16_8
// [Main] 
// [Main] .aux86_16_5:
// [Main]   mv a0, zero
// [Main]   j .aux86_16_7
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl partition65_3
// [Main]   .type partition65_3, @function
// [Main] # leaf false
// [Main] partition65_3:
// [Main] .partition65_3_0:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   mv s1, a0
// [Main]   mv s2, a2
// [Main]   mv s3, a3
// [Main]   addi a2, s3, -1
// [Main]   mv a0, s1
// [Main]   call swap1_0
// [Main]   addi a0, s3, -1
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s1, a0
// [Main]   lw a0, 0(a0)
// [Main]   addi a1, s11, -4
// [Main]   andi s4, a1, -8
// [Main]   mv s11, s4
// [Main]   sw s2, 0(s4)
// [Main]   addi a1, s11, -4
// [Main]   andi s0, a1, -8
// [Main]   mv s11, s0
// [Main]   li a1, 1
// [Main]   sw a1, 0(s0)
// [Main]   addi a1, s11, -48
// [Main]   andi a2, a1, -8
// [Main]   mv s11, a2
// [Main]   la a1, aux86_16
// [Main]   sd a1, 0(a2)
// [Main]   sd s3, 8(a2)
// [Main]   sd s1, 16(a2)
// [Main]   sd a0, 24(a2)
// [Main]   sd s4, 32(a2)
// [Main]   sd s0, 40(a2)
// [Main]   mv s10, a2
// [Main]   ld a1, 0(a2)
// [Main]   mv a0, s2
// [Main]   jalr a1
// [Main]   lw a1, 0(s4)
// [Main]   addi a2, s3, -1
// [Main]   mv a0, s1
// [Main]   call swap1_0
// [Main]   lw a2, 0(s4)
// [Main]   lw a0, 0(s0)
// [Main]   li a1, 1
// [Main]   bne a0, a1, .partition65_3_2
// [Main] 
// [Main] .partition65_3_1:
// [Main]   li a0, 1
// [Main]   mv a1, a0
// [Main] 
// [Main] .partition65_3_3:
// [Main]   addi a0, s11, -8
// [Main]   andi a0, a0, -8
// [Main]   mv s11, a0
// [Main]   sw a2, 0(a0)
// [Main]   sw a1, 4(a0)
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main] .partition65_3_2:
// [Main]   mv a1, zero
// [Main]   j .partition65_3_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_28
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function sort233_6
// [Wasm] Lowering insn Call(ty=Unit, f=f5, args=[FnParam(fref=f6, fpref=$f.0), Int32(val=0), FnParam(fref=f6, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Lowered function sort233_6 to wasm
// [Wasm] Lowering function choose_pivot129_4
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Bool]), mref=m3, fills=[Field(index=0, val=Insn(iref=%4)), Field(index=1, val=BlockParam(bref=b9, bpref=$b.0))])
// [Wasm] Get Local name Mem(fref=f4, mref=m3) -> $f4.m3
// [Wasm] Get Local name Mem(fref=f4, mref=m3) -> $f4.m3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Mem(fref=f4, mref=m3) -> $f4.m3
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Lowering control Return(args=[Mem(fref=f4, mref=m3)])
// [Wasm] Get Local name Mem(fref=f4, mref=m3) -> $f4.m3
// [Wasm] Lowering control Jump(target=b9, args=[Bool(val=true)])
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Lowering control Jump(target=b9, args=[Bool(val=false)])
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f4, mref=m0), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%26), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Lowering control Branch(cond=Insn(iref=%27), t=b7, t_args=[], f=b8, f_args=[])
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Lowering insn Apply(ty=Unit, f=Mem(fref=f4, mref=m2), args=[Insn(iref=%8), Insn(iref=%4), Insn(iref=%11)])
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Lowering control Jump(target=b6, args=[Insn(iref=%25)])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%8), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%8), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Apply(ty=Unit, f=Mem(fref=f4, mref=m2), args=[Insn(iref=%16), Insn(iref=%8), Insn(iref=%17)])
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%4), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%4), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Apply(ty=Unit, f=Mem(fref=f4, mref=m2), args=[Insn(iref=%19), Insn(iref=%4), Insn(iref=%20)])
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%11), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%11), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Apply(ty=Unit, f=Mem(fref=f4, mref=m2), args=[Insn(iref=%22), Insn(iref=%11), Insn(iref=%23)])
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Lowering control Jump(target=b5, args=[Insn(iref=%24)])
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Div, args=[Insn(iref=%1), Int32(val=4)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%6), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f4, fpref=$f.1), Insn(iref=%7)])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Int32, op=Div, args=[Insn(iref=%1), Int32(val=4)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%9), Int32(val=3)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f4, fpref=$f.1), Insn(iref=%10)])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32, Int32], ty=Unit), mref=m1, fills=[Field(index=0, val=Fn(fref=f19)), Field(index=1, val=FnParam(fref=f4, fpref=$f.0)), Field(index=2, val=Mem(fref=f4, mref=m0))])
// [Wasm] Get Local name Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Get Local name Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Get Local name Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32, Int32, Int32], ty=Unit), mref=m2, fills=[Field(index=0, val=Fn(fref=f21)), Field(index=1, val=Mem(fref=f4, mref=m1))])
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Get Local name Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%1), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=50), Insn(iref=%14)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering control Branch(cond=Insn(iref=%15), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering control Jump(target=b6, args=[Unit])
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f4, fpref=$f.2), FnParam(fref=f4, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Div, args=[Insn(iref=%1), Int32(val=4)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%2), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f4, fpref=$f.1), Insn(iref=%3)])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=8), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Branch(cond=Insn(iref=%5), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local Mem(fref=f4, mref=m3) -> $f4.m3
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%27) -> $%27
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Local BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Lowered function choose_pivot129_4 to wasm
// [Wasm] Lowering function T$start_28
// [Wasm] Lowering insn Call(ty=Unit, f=f7, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start_28 to wasm
// [Wasm] Lowering function aux86_16
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Get Local name FreeVar(fvref=^5) -> $^5
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%13)])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^4), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%10), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^4), index=0, width=@32), val=Insn(iref=%11))
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering control Jump(target=b8, args=[Unit])
// [Wasm] Lowering control Jump(target=b7, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^4), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[FreeVar(fvref=^2), Insn(iref=%7), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^5), index=0, width=@32), val=Int32(val=0))
// [Wasm] Get Local name FreeVar(fvref=^5) -> $^5
// [Wasm] Lowering control Jump(target=b7, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^4), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%5), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Branch(cond=Insn(iref=%6), t=b5, t_args=[], f=b6, f_args=[])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Jump(target=b8, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^2), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FreeVar(fvref=^3), Int32(val=1)])
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%2), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Branch(cond=Insn(iref=%4), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Return(args=[BlockParam(bref=b9, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b9, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FreeVar(fvref=^1), Int32(val=2)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b0, args=[FnParam(fref=f16, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f16, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f16, fpref=$f.0) -> $$f.0
// [Wasm] Local FreeVar(fvref=^5) -> $^5
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local FreeVar(fvref=^4) -> $^4
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local FreeVar(fvref=^3) -> $^3
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Lowered function aux86_16 to wasm
// [Wasm] Lowering function swap1_0
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f0, fpref=$f.0), offset=FnParam(fref=f0, fpref=$f.1), width=@32))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f0, fpref=$f.0), offset=FnParam(fref=f0, fpref=$f.2), width=@32))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f0, fpref=$f.0), offset=FnParam(fref=f0, fpref=$f.1), width=@32), val=Insn(iref=%1))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f0, fpref=$f.0), offset=FnParam(fref=f0, fpref=$f.2), width=@32), val=Insn(iref=%0))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function swap1_0 to wasm
// [Wasm] Lowering function f54_13
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Lowering insn Apply(ty=Unit, f=FreeVar(fvref=^2), args=[BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FreeVar(fvref=^1), Int32(val=1)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b0, args=[FnParam(fref=f13, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.0) -> $$f.0
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function f54_13 to wasm
// [Wasm] Lowering function sort_2157_19
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[FreeVar(fvref=^1), FnParam(fref=f19, fpref=$f.0), FnParam(fref=f19, fpref=$f.1)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FnParam(fref=f19, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f19, fpref=$f.1) -> $$f.1
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^2), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%5), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^2), index=0, width=@32), val=Insn(iref=%6))
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^1), offset=FnParam(fref=f19, fpref=$f.1), width=@32))
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FnParam(fref=f19, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^1), offset=FnParam(fref=f19, fpref=$f.0), width=@32))
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FnParam(fref=f19, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%1), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%0), Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name FnParam(fref=f19, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f19, fpref=$f.1) -> $$f.1
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function sort_2157_19 to wasm
// [Wasm] Lowering function input243_26
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_int", args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^2), offset=BlockParam(bref=b0, bpref=$b.0), width=@32), val=Insn(iref=%2))
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FreeVar(fvref=^1), Int32(val=1)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b0, args=[FnParam(fref=f26, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f26, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f26, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function input243_26 to wasm
// [Wasm] Lowering function output14_1
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), offset=BlockParam(bref=b0, bpref=$b.1), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%5), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b0, args=[FnParam(fref=f1, fpref=$f.0), FnParam(fref=f1, fpref=$f.1), FnParam(fref=f1, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function output14_1 to wasm
// [Wasm] Lowering function g37_11
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[FreeVar(fvref=^2), BlockParam(bref=b0, bpref=$b.0), Insn(iref=%7)])
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^2), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^2), offset=Insn(iref=%3), width=@32))
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%4), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%2), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Branch(cond=Insn(iref=%6), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Jump(target=b6, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Int32(val=1), FreeVar(fvref=^1)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%0), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b0, args=[FnParam(fref=f11, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f11, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f11, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function g37_11 to wasm
// [Wasm] Lowering function quick_sort210_5
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering insn Call(ty=Unit, f=f2, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%2)])
// [Wasm] Lowering insn Call(ty=Tuple(fields=[Int32, Bool]), f=f4, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%3), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Load(ty=Bool, ma=Field(ty=Bool, val=Insn(iref=%3), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Call(ty=Tuple(fields=[Int32, Bool]), f=f3, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%4), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%6), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Load(ty=Bool, ma=Field(ty=Bool, val=Insn(iref=%6), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Call(ty=Unit, f=f5, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%7)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%7), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%10), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%0), Int32(val=16)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b0, args=[FnParam(fref=f5, fpref=$f.0), FnParam(fref=f5, fpref=$f.1), FnParam(fref=f5, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function quick_sort210_5 to wasm
// [Wasm] Lowering function insertion_sort30_2
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Unit), mref=m0, fills=[Field(index=0, val=Fn(fref=f11)), Field(index=1, val=FnParam(fref=f2, fpref=$f.1)), Field(index=2, val=FnParam(fref=f2, fpref=$f.0))])
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Unit), mref=m1, fills=[Field(index=0, val=Fn(fref=f13)), Field(index=1, val=FnParam(fref=f2, fpref=$f.2)), Field(index=2, val=Mem(fref=f2, mref=m0))])
// [Wasm] Get Local name Mem(fref=f2, mref=m1) -> $f2.m1
// [Wasm] Get Local name Mem(fref=f2, mref=m1) -> $f2.m1
// [Wasm] Get Local name Mem(fref=f2, mref=m1) -> $f2.m1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Mem(fref=f2, mref=m1) -> $f2.m1
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f2, fpref=$f.1), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Apply(ty=Unit, f=Mem(fref=f2, mref=m1), args=[Insn(iref=%2)])
// [Wasm] Get Local name Mem(fref=f2, mref=m1) -> $f2.m1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Mem(fref=f2, mref=m1) -> $f2.m1
// [Wasm] Lowering control Return(args=[Insn(iref=%3)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Local Mem(fref=f2, mref=m1) -> $f2.m1
// [Wasm] Local Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function insertion_sort30_2 to wasm
// [Wasm] Lowering function partition65_3
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Bool]), mref=m3, fills=[Field(index=0, val=Insn(iref=%11)), Field(index=1, val=BlockParam(bref=b3, bpref=$b.0))])
// [Wasm] Get Local name Mem(fref=f3, mref=m3) -> $f3.m3
// [Wasm] Get Local name Mem(fref=f3, mref=m3) -> $f3.m3
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Mem(fref=f3, mref=m3) -> $f3.m3
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Return(args=[Mem(fref=f3, mref=m3)])
// [Wasm] Get Local name Mem(fref=f3, mref=m3) -> $f3.m3
// [Wasm] Lowering control Jump(target=b3, args=[Bool(val=true)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Jump(target=b3, args=[Bool(val=false)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f3, fpref=$f.3), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[FnParam(fref=f3, fpref=$f.0), FnParam(fref=f3, fpref=$f.1), Insn(iref=%0)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f3, fpref=$f.3), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f3, fpref=$f.0), offset=Insn(iref=%2), width=@32))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=FnParam(fref=f3, fpref=$f.2))])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m1, fills=[Init(val=Int32(val=1))])
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Unit), mref=m2, fills=[Field(index=0, val=Fn(fref=f16)), Field(index=1, val=FnParam(fref=f3, fpref=$f.3)), Field(index=2, val=FnParam(fref=f3, fpref=$f.0)), Field(index=3, val=Insn(iref=%3)), Field(index=4, val=Mem(fref=f3, mref=m0)), Field(index=5, val=Mem(fref=f3, mref=m1))])
// [Wasm] Get Local name Mem(fref=f3, mref=m2) -> $f3.m2
// [Wasm] Get Local name Mem(fref=f3, mref=m2) -> $f3.m2
// [Wasm] Get Local name Mem(fref=f3, mref=m2) -> $f3.m2
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name Mem(fref=f3, mref=m2) -> $f3.m2
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f3, mref=m2) -> $f3.m2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Mem(fref=f3, mref=m2) -> $f3.m2
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Mem(fref=f3, mref=m2) -> $f3.m2
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Lowering insn Apply(ty=Unit, f=Mem(fref=f3, mref=m2), args=[FnParam(fref=f3, fpref=$f.2)])
// [Wasm] Get Local name Mem(fref=f3, mref=m2) -> $f3.m2
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Mem(fref=f3, mref=m2) -> $f3.m2
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f3, mref=m0), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f3, fpref=$f.3), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[FnParam(fref=f3, fpref=$f.0), Insn(iref=%8), Insn(iref=%9)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f3, mref=m0), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f3, mref=m1), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%12), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering control Branch(cond=Insn(iref=%13), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.3) -> $$f.3
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Local Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Mem(fref=f3, mref=m2) -> $f3.m2
// [Wasm] Local Mem(fref=f3, mref=m3) -> $f3.m3
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function partition65_3 to wasm
// [Wasm] Lowering function main239_7
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_int", args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Unit), mref=m1, fills=[Field(index=0, val=Fn(fref=f26)), Field(index=1, val=Insn(iref=%0)), Field(index=2, val=Mem(fref=f7, mref=m0))])
// [Wasm] Get Local name Mem(fref=f7, mref=m1) -> $f7.m1
// [Wasm] Get Local name Mem(fref=f7, mref=m1) -> $f7.m1
// [Wasm] Get Local name Mem(fref=f7, mref=m1) -> $f7.m1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Mem(fref=f7, mref=m1) -> $f7.m1
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Lowering insn Apply(ty=Unit, f=Mem(fref=f7, mref=m1), args=[Int32(val=0)])
// [Wasm] Get Local name Mem(fref=f7, mref=m1) -> $f7.m1
// [Wasm] Get Local name Mem(fref=f7, mref=m1) -> $f7.m1
// [Wasm] Lowering insn Call(ty=Unit, f=f6, args=[Mem(fref=f7, mref=m0), Insn(iref=%0)])
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Call(ty=Unit, f=f1, args=[Mem(fref=f7, mref=m0), Int32(val=0), Insn(iref=%0)])
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%5)])
// [Wasm] Local Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Local Mem(fref=f7, mref=m1) -> $f7.m1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function main239_7 to wasm
// [Wasm] Lowering function sort_3173_21
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Lowering insn Apply(ty=Unit, f=FreeVar(fvref=^1), args=[FnParam(fref=f21, fpref=$f.0), FnParam(fref=f21, fpref=$f.1)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FnParam(fref=f21, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f21, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Lowering insn Apply(ty=Unit, f=FreeVar(fvref=^1), args=[FnParam(fref=f21, fpref=$f.1), FnParam(fref=f21, fpref=$f.2)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FnParam(fref=f21, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f21, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Lowering insn Apply(ty=Unit, f=FreeVar(fvref=^1), args=[FnParam(fref=f21, fpref=$f.0), FnParam(fref=f21, fpref=$f.1)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FnParam(fref=f21, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f21, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Get Local name FnParam(fref=f21, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f21, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f21, fpref=$f.2) -> $$f.2
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Lowered function sort_3173_21 to wasm
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %14: Apply(ty=Unit, f=Self(fref=f16), args=[Insn(iref=%13)])
// [CoreOpt] eliminated tail rec call %4: Apply(ty=Unit, f=Self(fref=f13), args=[Insn(iref=%3)])
// [CoreOpt] eliminated tail rec call %5: Apply(ty=Unit, f=Self(fref=f26), args=[Insn(iref=%4)])
// [CoreOpt] eliminated tail rec call %6: Call(ty=Unit, f=f1, args=[FnParam(fref=f1, fpref=$f.0), Insn(iref=%5), FnParam(fref=f1, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %10: Apply(ty=Unit, f=Self(fref=f11), args=[Insn(iref=%9)])
// [CoreOpt] eliminated tail rec call %11: Call(ty=Unit, f=f5, args=[FnParam(fref=f5, fpref=$f.0), Insn(iref=%10), FnParam(fref=f5, fpref=$f.2)])
