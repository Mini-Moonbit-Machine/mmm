// [Asm] pre_assigned_registers: FnParam(fref=f6, fpref=$f.1) -> v3, Self(fref=f6) -> v0, Insn(iref=%0) -> v4, FnParam(fref=f6, fpref=$f.0) -> v2
// [Asm] defs: []
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of sort233_6"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r3 [label="v3 ← a2", color=green];
// [Asm]   r9 [label="t3", color=blue];
// [Asm]   r6 [label="t0", color=blue];
// [Asm]   r13 [label="a5", color=blue];
// [Asm]   r4 [label="a0", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="a3", color=blue];
// [Asm]   r7 [label="t1", color=blue];
// [Asm]   r10 [label="t4", color=blue];
// [Asm]   r14 [label="a6", color=blue];
// [Asm]   r8 [label="t2", color=blue];
// [Asm]   r5 [label="a2", color=blue];
// [Asm]   r15 [label="a7", color=blue];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="v4 ← a0", color=green];
// [Asm]   r12 [label="a4", color=blue];
// [Asm]   r0 -- r1;
// [Asm]   r4 -- r13;
// [Asm]   r4 -- r7;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r8;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r2 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r4 -- r9;
// [Asm]   r4 -- r12;
// [Asm]   comment = "0:v2-> 1:a1-> 3:v3-> 2:zero-> 4:a0-> 5:a2-> 6:t0-> 7:t1-> 8:t2-> 9:t3-> 10:t4-> 11:a3-> 12:a4-> 13:a5-> 14:a6-> 15:a7-> 16:v4"
// [Asm]   comment = "v2<-a0;v3<-a2;v4<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of sort233_6"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v3, a1 ->   mv a2, a1
// [Asm] subst   mv a1, zero ->   mv a1, zero
// [Asm] subst   call quick_sort210_5 ->   call quick_sort210_5
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f28) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_28"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_28"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main239_7 ->   call main239_7
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FreeVar(fvref=^5) -> v7, BlockParam(bref=b7, bpref=$b.0) -> v20, Insn(iref=%9) -> v19, FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, Insn(iref=%8) -> v18, Insn(iref=%10) -> v21, BlockParam(bref=b0, bpref=$b.0) -> v8, FreeVar(fvref=^4) -> v6, BlockParam(bref=b8, bpref=$b.0) -> v24, Insn(iref=%5) -> v15, Insn(iref=%0) -> v9, Insn(iref=%4) -> v14, Insn(iref=%3) -> v13, Insn(iref=%13) -> v25, Insn(iref=%7) -> v17, Self(fref=f16) -> v0, Insn(iref=%2) -> v12, Insn(iref=%1) -> v10, Insn(iref=%11) -> v22, FreeVar(fvref=^3) -> v5, Insn(iref=%6) -> v16, BlockParam(bref=b9, bpref=$b.0) -> v11, FnParam(fref=f16, fpref=$f.0) -> v2, Insn(iref=%12) -> v23
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%5), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%2), Insn(iref=%3)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v17, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v17, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v7, v8, v4, v6, v17, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, a0, v7, v8, v4, a1, v6, v3]
// [Asm] move_origin: [v17]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, zero, a0, v7, v8, v4, a2, a1, v6, v3]
// [Asm] move_origin: [v8]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v18]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v20]
// [Asm] live_set: [v5, zero, v20, v7, v8, v4, v6, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v20 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v24, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v24 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v24, v3]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v5, v21, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v5, zero, v22, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v24]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v24, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v24 is X
// [Asm] defs: []
// [Asm] live_set: [zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [zero, a0, v0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v0, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v0, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, zero, v0, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, zero, v0, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, zero, v0, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v8 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v20]
// [Asm] live_set: [v5, zero, v20, v7, v8, v4, v6, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v20, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: [v25]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v33]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v33, v3]
// [Asm] move_origin: []
// [Asm] defined: v33 is X
// [Asm] defs: [v34]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v34, v3]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v12, v3]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v5, zero, v13, v8, v7, v4, v6, v12, v3]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: [zero]
// [Asm] defined: v11 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux86_16"];
// [Asm]   r0 [label="v9 ← a0", color=green];
// [Asm]   r33 [label="v12 ← a0", color=green];
// [Asm]   r9 [label="a0", color=blue];
// [Asm]   r26 [label="v22 ← a0", color=green];
// [Asm]   r6 [label="v6 ← s4", color=green];
// [Asm]   r13 [label="t1", color=blue];
// [Asm]   r4 [label="v7 ← s2", color=green];
// [Asm]   r29 [label="v25 ← a0", color=green];
// [Asm]   r35 [label="v11 ← a0", color=green];
// [Asm]   r7 [label="v3 ← s5", color=green];
// [Asm]   r10 [label="a1", color=blue];
// [Asm]   r8 [label="v17 ← a1", color=green];
// [Asm]   r5 [label="v4 ← s3", color=green];
// [Asm]   r15 [label="t3", color=blue];
// [Asm]   r24 [label="v24 ← a0", color=green];
// [Asm]   r32 [label="v34 ← a0", color=green];
// [Asm]   r31 [label="v33 ← a0", color=green];
// [Asm]   r17 [label="a3", color=blue];
// [Asm]   r12 [label="t0", color=blue];
// [Asm]   r20 [label="a6", color=blue];
// [Asm]   r23 [label="v20 ← a0", color=green];
// [Asm]   r3 [label="v8 ← s1", color=green];
// [Asm]   r27 [label="v0 ← a1", color=green];
// [Asm]   r1 [label="v5 ← s0", color=green];
// [Asm]   r28 [label="v2 ← a0", color=green];
// [Asm]   r11 [label="a2", color=blue];
// [Asm]   r34 [label="v13 ← a1", color=green];
// [Asm]   r22 [label="v18 ← a0", color=green];
// [Asm]   r14 [label="t2", color=blue];
// [Asm]   r30 [label="v15 ← a0", color=green];
// [Asm]   r25 [label="v21 ← a0", color=green];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="t4", color=blue];
// [Asm]   r18 [label="a4", color=blue];
// [Asm]   r19 [label="a5", color=blue];
// [Asm]   r21 [label="a7", color=blue];
// [Asm]   r2 -- r32;
// [Asm]   r2 -- r31;
// [Asm]   r5 -- r21;
// [Asm]   r5 -- r33;
// [Asm]   r1 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r4 -- r34;
// [Asm]   r1 -- r30;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r7 -- r25;
// [Asm]   r5 -- r18;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r5 -- r29;
// [Asm]   r27 -- r28;
// [Asm]   r9 -- r17;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r31;
// [Asm]   r7 -- r27;
// [Asm]   r7 -- r32;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r31;
// [Asm]   r2 -- r34;
// [Asm]   r0 -- r6;
// [Asm]   r9 -- r14;
// [Asm]   r5 -- r31;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r9 -- r12;
// [Asm]   r2 -- r12;
// [Asm]   r5 -- r32;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r29;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r33;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r9 -- r20;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r25;
// [Asm]   r1 -- r11;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r6 -- r23;
// [Asm]   r4 -- r14;
// [Asm]   r6 -- r25;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r7 -- r29;
// [Asm]   r3 -- r25;
// [Asm]   r2 -- r26;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r34;
// [Asm]   r7 -- r24;
// [Asm]   r8 -- r9;
// [Asm]   r6 -- r33;
// [Asm]   r6 -- r30;
// [Asm]   r1 -- r22;
// [Asm]   r7 -- r20;
// [Asm]   r5 -- r19;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r5 -- r11;
// [Asm]   r6 -- r20;
// [Asm]   r3 -- r22;
// [Asm]   r7 -- r17;
// [Asm]   r6 -- r19;
// [Asm]   r6 -- r27;
// [Asm]   r7 -- r22;
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r15;
// [Asm]   r7 -- r19;
// [Asm]   r5 -- r28;
// [Asm]   r2 -- r14;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r4 -- r32;
// [Asm]   r7 -- r15;
// [Asm]   r1 -- r29;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r30;
// [Asm]   r5 -- r25;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r7 -- r12;
// [Asm]   r9 -- r13;
// [Asm]   r7 -- r14;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   r1 -- r24;
// [Asm]   r9 -- r21;
// [Asm]   r5 -- r12;
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r21;
// [Asm]   r7 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r2 -- r15;
// [Asm]   r9 -- r27;
// [Asm]   r5 -- r8;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r6 -- r29;
// [Asm]   r3 -- r32;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r3 -- r24;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r34;
// [Asm]   r9 -- r18;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r31;
// [Asm]   r6 -- r13;
// [Asm]   r7 -- r34;
// [Asm]   r2 -- r33;
// [Asm]   r4 -- r33;
// [Asm]   r3 -- r30;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r7 -- r10;
// [Asm]   r4 -- r28;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r4 -- r12;
// [Asm]   r6 -- r31;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r7 -- r8;
// [Asm]   r4 -- r9;
// [Asm]   r6 -- r32;
// [Asm]   r5 -- r34;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r5 -- r20;
// [Asm]   r9 -- r15;
// [Asm]   r2 -- r18;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r23;
// [Asm]   r5 -- r23;
// [Asm]   r3 -- r12;
// [Asm]   r7 -- r26;
// [Asm]   r5 -- r13;
// [Asm]   r7 -- r13;
// [Asm]   r1 -- r32;
// [Asm]   r1 -- r15;
// [Asm]   r4 -- r20;
// [Asm]   r6 -- r16;
// [Asm]   r7 -- r30;
// [Asm]   r4 -- r30;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r26;
// [Asm]   r6 -- r12;
// [Asm]   r6 -- r24;
// [Asm]   r1 -- r28;
// [Asm]   r7 -- r28;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r34;
// [Asm]   r33 -- r34;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r4 -- r11;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r7 -- r33;
// [Asm]   r6 -- r28;
// [Asm]   r7 -- r11;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r9 -- r16;
// [Asm]   r7 -- r31;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r9 -- r19;
// [Asm]   r7 -- r23;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r26;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r5 -- r30;
// [Asm]   r2 -- r3;
// [Asm]   r4 -- r19;
// [Asm]   r5 -- r15;
// [Asm]   comment = "0:v9-> 1:v5-> 2:zero-> 3:v8-> 4:v7-> 5:v4-> 6:v6-> 7:v3-> 8:v17-> 9:a0-> 10:a1-> 11:a2-> 12:t0-> 13:t1-> 14:t2-> 15:t3-> 16:t4-> 17:a3-> 18:a4-> 19:a5-> 20:a6-> 21:a7-> 22:v18-> 25:v21-> 26:v22-> 30:v15-> 31:v33-> 32:v34-> 33:v12-> 34:v13-> 23:v20-> 24:v24-> 27:v0-> 28:v2-> 29:v25-> 35:v11"
// [Asm]   comment = "v9<-a0;v12<-a0;v22<-a0;v6<-s4;v7<-s2;v25<-a0;v11<-a0;v3<-s5;v17<-a1;v4<-s3;v24<-a0;v34<-a0;v33<-a0;v20<-a0;v8<-s1;v0<-a1;v5<-s0;v2<-a0;v13<-a1;v18<-a0;v15<-a0;v21<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux86_16"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v9, v3, -2 ->   addi a0, s5, -2
// [Asm] subst   blt v9, v8, .aux86_16_2 ->   blt a0, s1, .aux86_16_2
// [Asm] subst   lw v17, 0(v6) ->   lw a1, 0(s4)
// [Asm] subst   mv a0, v4 ->   mv a0, s3
// [Asm] subst   mv a2, v8 ->   mv a2, s1
// [Asm] subst   call swap1_0 ->   call swap1_0
// [Asm] subst   sw zero, 0(v7) ->   sw zero, 0(s2)
// [Asm] subst   mv v20, zero ->   mv a0, zero
// [Asm] subst   mv v24, zero ->   mv a0, zero
// [Asm] subst   j .aux86_16_8 ->   j .aux86_16_8
// [Asm] subst   lw v21, 0(v6) ->   lw a0, 0(s4)
// [Asm] subst   addi v22, v21, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v22, 0(v6) ->   sw a0, 0(s4)
// [Asm] subst   mv v24, zero ->   mv a0, zero
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   lw v3, 8(v0) ->   lw s5, 8(a1)
// [Asm] subst   ld v4, 16(v0) ->   ld s3, 16(a1)
// [Asm] subst   lw v5, 24(v0) ->   lw s0, 24(a1)
// [Asm] subst   ld v6, 32(v0) ->   ld s4, 32(a1)
// [Asm] subst   ld v7, 40(v0) ->   ld s2, 40(a1)
// [Asm] subst   mv v8, v2 ->   mv s1, a0
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v20, zero ->   mv a0, zero
// [Asm] subst   j .aux86_16_7 ->   j .aux86_16_7
// [Asm] subst   addi v25, v8, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v8, v25 ->   mv s1, a0
// [Asm] subst   j .aux86_16_0 ->   j .aux86_16_0
// [Asm] subst   lw v15, 0(v6) ->   lw a0, 0(s4)
// [Asm] subst   beq v15, v8, .aux86_16_5 ->   beq a0, s1, .aux86_16_5
// [Asm] subst   slliw v33, v8, 2 ->   slliw a0, s1, 2
// [Asm] subst   add v34, v4, v33 ->   add a0, s3, a0
// [Asm] subst   lw v12, 0(v34) ->   lw a0, 0(a0)
// [Asm] subst   addi v13, v5, -1 ->   addi a1, s0, -1
// [Asm] subst   blt v13, v12, .aux86_16_4 ->   blt a1, a0, .aux86_16_4
// [Asm] subst   mv v11, zero ->   mv a0, zero
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v6, Insn(iref=%3) -> v8, FnParam(fref=f0, fpref=$f.1) -> v3, FnParam(fref=f0, fpref=$f.2) -> v4, Self(fref=f0) -> v0, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%0) -> v5, Insn(iref=%2) -> v7
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, a2, zero, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v3, v4, v16, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v3, v4, v17, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v4, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v3, v4, v5, zero, v13, v2]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v3, v4, v5, v14, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v3, v4, v5, v6, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v4, v5, v6, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v4, v5, v6, v12, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of swap1_0"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="v13 ← a4", color=green];
// [Asm]   r6 [label="v16 ← a3", color=green];
// [Asm]   r13 [label="v12 ← a1", color=green];
// [Asm]   r4 [label="v3 ← a1", color=green];
// [Asm]   r1 [label="a2", color=blue];
// [Asm]   r11 [label="v6 ← a4", color=green];
// [Asm]   r7 [label="v17 ← a3", color=green];
// [Asm]   r10 [label="v14 ← a4", color=green];
// [Asm]   r14 [label="v9 ← a1", color=green];
// [Asm]   r8 [label="v5 ← a3", color=green];
// [Asm]   r5 [label="v4 ← a2", color=green];
// [Asm]   r15 [label="v10 ← a0", color=green];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="a0", color=blue];
// [Asm]   r12 [label="v11 ← a1", color=green];
// [Asm]   r5 -- r6;
// [Asm]   r0 -- r13;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r15;
// [Asm]   r8 -- r13;
// [Asm]   r11 -- r13;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r9;
// [Asm]   r5 -- r8;
// [Asm]   r0 -- r3;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r9;
// [Asm]   r5 -- r10;
// [Asm]   r0 -- r8;
// [Asm]   r3 -- r13;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r8 -- r9;
// [Asm]   r0 -- r5;
// [Asm]   r3 -- r10;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r0 -- r14;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r9;
// [Asm]   r11 -- r12;
// [Asm]   r3 -- r14;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r3 -- r11;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r5 -- r11;
// [Asm]   r8 -- r14;
// [Asm]   r0 -- r7;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r9;
// [Asm]   r8 -- r12;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v2-> 1:a2-> 4:v3-> 3:zero-> 5:v4-> 6:v16-> 7:v17-> 8:v5-> 9:v13-> 10:v14-> 11:v6-> 12:v11-> 13:v12-> 14:v9-> 15:v10-> 2:a1-> 16:a0"
// [Asm]   comment = "v2<-a0;v13<-a4;v16<-a3;v12<-a1;v3<-a1;v6<-a4;v17<-a3;v14<-a4;v9<-a1;v5<-a3;v4<-a2;v10<-a0;v11<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of swap1_0"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   slliw v16, v3, 2 ->   slliw a3, a1, 2
// [Asm] subst   add v17, v2, v16 ->   add a3, a0, a3
// [Asm] subst   lw v5, 0(v17) ->   lw a3, 0(a3)
// [Asm] subst   slliw v13, v4, 2 ->   slliw a4, a2, 2
// [Asm] subst   add v14, v2, v13 ->   add a4, a0, a4
// [Asm] subst   lw v6, 0(v14) ->   lw a4, 0(a4)
// [Asm] subst   slliw v11, v3, 2 ->   slliw a1, a1, 2
// [Asm] subst   add v12, v2, v11 ->   add a1, a0, a1
// [Asm] subst   sw v6, 0(v12) ->   sw a4, 0(a1)
// [Asm] subst   slliw v9, v4, 2 ->   slliw a1, a2, 2
// [Asm] subst   add v10, v2, v9 ->   add a0, a0, a1
// [Asm] subst   sw v5, 0(v10) ->   sw a3, 0(a0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v10, BlockParam(bref=b3, bpref=$b.0) -> v8, Insn(iref=%2) -> v9, FnParam(fref=f13, fpref=$f.0) -> v2, FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, Insn(iref=%1) -> v7, Self(fref=f13) -> v0, BlockParam(bref=b0, bpref=$b.0) -> v5, Insn(iref=%0) -> v6
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: s10 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v4, v5, v12, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v12, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, v5, v12, zero, a0, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, v5, zero, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v4, v10, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v10]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: [zero]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v0, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of f54_13"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="v10 ← a0", color=green];
// [Asm]   r23 [label="v0 ← a1", color=green];
// [Asm]   r3 [label="v5 ← s1", color=green];
// [Asm]   r9 [label="t2", color=blue];
// [Asm]   r6 [label="v12 ← a1", color=green];
// [Asm]   r13 [label="a2", color=blue];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r1 [label="s10", color=blue];
// [Asm]   r11 [label="t4", color=blue];
// [Asm]   r7 [label="t0", color=blue];
// [Asm]   r10 [label="t3", color=blue];
// [Asm]   r22 [label="v8 ← a0", color=green];
// [Asm]   r14 [label="a3", color=blue];
// [Asm]   r8 [label="t1", color=blue];
// [Asm]   r5 [label="v3 ← s2", color=green];
// [Asm]   r24 [label="v2 ← a0", color=green];
// [Asm]   r15 [label="a4", color=blue];
// [Asm]   r2 [label="v4 ← s0", color=green];
// [Asm]   r16 [label="a5", color=blue];
// [Asm]   r18 [label="a7", color=blue];
// [Asm]   r19 [label="v9 ← a0", color=green];
// [Asm]   r17 [label="a6", color=blue];
// [Asm]   r21 [label="v6 ← a0", color=green];
// [Asm]   r12 [label="a1", color=blue];
// [Asm]   r2 -- r20;
// [Asm]   r4 -- r13;
// [Asm]   r0 -- r15;
// [Asm]   r3 -- r19;
// [Asm]   r0 -- r13;
// [Asm]   r4 -- r16;
// [Asm]   r5 -- r21;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r4 -- r23;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r10;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r23;
// [Asm]   r5 -- r17;
// [Asm]   r0 -- r17;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r5 -- r18;
// [Asm]   r0 -- r14;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r5 -- r19;
// [Asm]   r3 -- r11;
// [Asm]   r4 -- r20;
// [Asm]   r0 -- r23;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r2 -- r7;
// [Asm]   r3 -- r18;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r0 -- r16;
// [Asm]   r3 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r24;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r8;
// [Asm]   r3 -- r13;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r0 -- r5;
// [Asm]   r3 -- r10;
// [Asm]   r2 -- r21;
// [Asm]   r4 -- r12;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r0 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r23 -- r24;
// [Asm]   r3 -- r17;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r5 -- r14;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r4 -- r17;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r24;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r0 -- r7;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r4 -- r9;
// [Asm]   r5 -- r15;
// [Asm]   r4 -- r19;
// [Asm]   r0 -- r18;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:a0-> 2:v4-> 3:v5-> 4:zero-> 5:v3-> 6:v12-> 7:t0-> 8:t1-> 9:t2-> 10:t3-> 11:t4-> 12:a1-> 13:a2-> 14:a3-> 15:a4-> 16:a5-> 17:a6-> 18:a7-> 19:v9-> 21:v6-> 1:s10-> 20:v10-> 23:v0-> 24:v2-> 22:v8"
// [Asm]   comment = "v10<-a0;v0<-a1;v5<-s1;v12<-a1;v8<-a0;v3<-s2;v2<-a0;v4<-s0;v9<-a0;v6<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of f54_13"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   mv s10, v4 ->   mv s10, s0
// [Asm] subst   ld v12, 0(v4) ->   ld a1, 0(s0)
// [Asm] subst   mv a0, v5 ->   mv a0, s1
// [Asm] subst   jalr v12 ->   jalr a1
// [Asm] subst   addi v10, v5, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v5, v10 ->   mv s1, a0
// [Asm] subst   j .f54_13_0 ->   j .f54_13_0
// [Asm] subst   addi v6, v3, -1 ->   addi a0, s2, -1
// [Asm] subst   blt v6, v5, .f54_13_2 ->   blt a0, s1, .f54_13_2
// [Asm] subst   mv v8, zero ->   mv a0, zero
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   lw v3, 8(v0) ->   lw s2, 8(a1)
// [Asm] subst   ld v4, 16(v0) ->   ld s0, 16(a1)
// [Asm] subst   mv v5, v2 ->   mv s1, a0
// [Asm] pre_assigned_registers: FnParam(fref=f19, fpref=$f.0) -> v2, Insn(iref=%3) -> v9, FnParam(fref=f19, fpref=$f.1) -> v3, Insn(iref=%7) -> v13, Self(fref=f19) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v14, Insn(iref=%2) -> v8, FreeVar(fvref=^1) -> v4, FreeVar(fvref=^2) -> v5, Insn(iref=%1) -> v7, Insn(iref=%6) -> v12, Insn(iref=%5) -> v11, Insn(iref=%0) -> v6, Insn(iref=%4) -> v10
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%0), Insn(iref=%2)])
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move_origin: [zero]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v14]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v5, zero, a0, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, a1, zero, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, v5, a1, zero, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v10]
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, zero]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v5, v12, zero]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move_origin: [zero]
// [Asm] defined: v14 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v14]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, a0, a1, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [zero, a0, v0, a1]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v0, a1, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, zero, v0, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, zero, v0, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v5, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v3, v5, zero, v22, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v3, v5, zero, v23, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v3, v5, zero, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v3, v5, zero, v19, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v3, v5, zero, v20, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v3, v5, zero, v8, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of sort_2157_19"];
// [Asm]   r0 [label="v14 ← a0", color=green];
// [Asm]   r20 [label="v12 ← a0", color=green];
// [Asm]   r23 [label="v22 ← a1", color=green];
// [Asm]   r3 [label="v5 ← s0", color=green];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r26 [label="v19 ← a4", color=green];
// [Asm]   r27 [label="v20 ← a4", color=green];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="a3", color=blue];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r29 [label="v8 ← a4", color=green];
// [Asm]   r28 [label="v7 ← a4", color=green];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r22 [label="v4 ← a0", color=green];
// [Asm]   r14 [label="a4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r5 [label="v3 ← a3", color=green];
// [Asm]   r24 [label="v23 ← a1", color=green];
// [Asm]   r15 [label="a5", color=blue];
// [Asm]   r25 [label="v6 ← a1", color=green];
// [Asm]   r2 [label="v2 ← a2", color=green];
// [Asm]   r16 [label="a6", color=blue];
// [Asm]   r18 [label="v10 ← a0", color=green];
// [Asm]   r19 [label="v11 ← a0", color=green];
// [Asm]   r17 [label="a7", color=blue];
// [Asm]   r21 [label="v0 ← a4", color=green];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r21;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r25 -- r28;
// [Asm]   r4 -- r16;
// [Asm]   r5 -- r21;
// [Asm]   r3 -- r25;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r16;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r5 -- r23;
// [Asm]   r5 -- r22;
// [Asm]   r1 -- r7;
// [Asm]   r25 -- r27;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r10;
// [Asm]   r22 -- r29;
// [Asm]   r3 -- r9;
// [Asm]   r1 -- r15;
// [Asm]   r22 -- r26;
// [Asm]   r3 -- r11;
// [Asm]   r4 -- r20;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r17;
// [Asm]   r25 -- r26;
// [Asm]   r5 -- r29;
// [Asm]   r3 -- r28;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r4 -- r18;
// [Asm]   r1 -- r16;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r5;
// [Asm]   r22 -- r24;
// [Asm]   r3 -- r22;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r28;
// [Asm]   r22 -- r25;
// [Asm]   r2 -- r29;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r25 -- r29;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r5 -- r28;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r22 -- r28;
// [Asm]   r4 -- r28;
// [Asm]   r22 -- r27;
// [Asm]   r22 -- r23;
// [Asm]   r3 -- r29;
// [Asm]   r3 -- r20;
// [Asm]   r3 -- r10;
// [Asm]   r2 -- r21;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r4 -- r29;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r27;
// [Asm]   r3 -- r14;
// [Asm]   r4 -- r7;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r25;
// [Asm]   r4 -- r8;
// [Asm]   r5 -- r25;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r21 -- r22;
// [Asm]   r2 -- r24;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r4 -- r26;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   r4 -- r19;
// [Asm]   comment = "0:v14-> 1:a0-> 2:v2-> 3:v5-> 4:zero-> 5:v3-> 6:a1-> 21:v0-> 22:v4-> 23:v22-> 24:v23-> 25:v6-> 26:v19-> 27:v20-> 28:v7-> 29:v8-> 7:a2-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:a3-> 14:a4-> 15:a5-> 16:a6-> 17:a7-> 18:v10-> 19:v11-> 20:v12"
// [Asm]   comment = "v14<-a0;v12<-a0;v22<-a1;v5<-s0;v19<-a4;v20<-a4;v8<-a4;v7<-a4;v4<-a0;v3<-a3;v23<-a1;v6<-a1;v2<-a2;v10<-a0;v11<-a0;v0<-a4;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of sort_2157_19"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v14, zero ->   mv a0, zero
// [Asm] subst   j .sort_2157_19_3 ->   j .sort_2157_19_3
// [Asm] subst   mv a1, v2 ->   mv a1, a2
// [Asm] subst   mv a2, v3 ->   mv a2, a3
// [Asm] subst   call swap1_0 ->   call swap1_0
// [Asm] subst   lw v11, 0(v5) ->   lw a0, 0(s0)
// [Asm] subst   addi v12, v11, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v12, 0(v5) ->   sw a0, 0(s0)
// [Asm] subst   mv v14, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v0, s10 ->   mv a4, s10
// [Asm] subst   mv v2, a0 ->   mv a2, a0
// [Asm] subst   mv v3, a1 ->   mv a3, a1
// [Asm] subst   ld v4, 8(v0) ->   ld a0, 8(a4)
// [Asm] subst   ld v5, 16(v0) ->   ld s0, 16(a4)
// [Asm] subst   slliw v22, v3, 2 ->   slliw a1, a3, 2
// [Asm] subst   add v23, v4, v22 ->   add a1, a0, a1
// [Asm] subst   lw v6, 0(v23) ->   lw a1, 0(a1)
// [Asm] subst   slliw v19, v2, 2 ->   slliw a4, a2, 2
// [Asm] subst   add v20, v4, v19 ->   add a4, a0, a4
// [Asm] subst   lw v7, 0(v20) ->   lw a4, 0(a4)
// [Asm] subst   addi v8, v7, -1 ->   addi a4, a4, -1
// [Asm] subst   blt v8, v6, .sort_2157_19_2 ->   blt a4, a1, .sort_2157_19_2
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v10, Self(fref=f26) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v8, FnParam(fref=f26, fpref=$f.0) -> v2, Insn(iref=%2) -> v9, Insn(iref=%1) -> v7, FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, BlockParam(bref=b0, bpref=$b.0) -> v5, Insn(iref=%0) -> v6, Insn(iref=%4) -> v11
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v0, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, v5, zero, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v4, v5, zero, v9, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v3, v4, v5, zero, v9, v13]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v4, v5, v14, zero, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v11]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: [zero]
// [Asm] defined: v8 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of input243_26"];
// [Asm]   r0 [label="v6 ← a0", color=green];
// [Asm]   r20 [label="v9 ← a0", color=green];
// [Asm]   r23 [label="v11 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r13 [label="a1", color=blue];
// [Asm]   r4 [label="v3 ← s2", color=green];
// [Asm]   r1 [label="v4 ← s0", color=green];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="v2 ← a0", color=green];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r22 [label="v14 ← a1", color=green];
// [Asm]   r14 [label="a2", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r5 [label="v0 ← a1", color=green];
// [Asm]   r24 [label="v8 ← a0", color=green];
// [Asm]   r15 [label="a3", color=blue];
// [Asm]   r2 [label="v5 ← s1", color=green];
// [Asm]   r16 [label="a4", color=blue];
// [Asm]   r18 [label="a6", color=blue];
// [Asm]   r19 [label="a7", color=blue];
// [Asm]   r21 [label="v13 ← a1", color=green];
// [Asm]   r17 [label="a5", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r15;
// [Asm]   r6 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r3 -- r16;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r4;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r23;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r22;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r3 -- r11;
// [Asm]   r4 -- r20;
// [Asm]   r1 -- r17;
// [Asm]   r6 -- r16;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r1 -- r16;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r18;
// [Asm]   r6 -- r12;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r8;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r6 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r6 -- r19;
// [Asm]   r2 -- r6;
// [Asm]   r20 -- r22;
// [Asm]   r4 -- r15;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r3 -- r21;
// [Asm]   r1 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r20;
// [Asm]   r3 -- r10;
// [Asm]   r2 -- r21;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r6 -- r17;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r4 -- r17;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r2 -- r22;
// [Asm]   r2 -- r9;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r10;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r20 -- r21;
// [Asm]   r3 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r4 -- r19;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:v6-> 1:v4-> 2:v5-> 3:zero-> 4:v3-> 6:a0-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:a1-> 14:a2-> 15:a3-> 16:a4-> 17:a5-> 18:a6-> 19:a7-> 20:v9-> 21:v13-> 22:v14-> 5:v0-> 7:v2-> 23:v11-> 24:v8"
// [Asm]   comment = "v6<-a0;v9<-a0;v11<-a0;v3<-s2;v4<-s0;v2<-a0;v14<-a1;v0<-a1;v8<-a0;v5<-s1;v13<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of input243_26"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v6, v3, -1 ->   addi a0, s2, -1
// [Asm] subst   blt v6, v5, .input243_26_2 ->   blt a0, s1, .input243_26_2
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   lw v3, 8(v0) ->   lw s2, 8(a1)
// [Asm] subst   ld v4, 16(v0) ->   ld s0, 16(a1)
// [Asm] subst   mv v5, v2 ->   mv s1, a0
// [Asm] subst   call minimbt_read_int ->   call minimbt_read_int
// [Asm] subst   slliw v13, v5, 2 ->   slliw a1, s1, 2
// [Asm] subst   add v14, v4, v13 ->   add a1, s0, a1
// [Asm] subst   sw v9, 0(v14) ->   sw a0, 0(a1)
// [Asm] subst   addi v11, v5, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v5, v11 ->   mv s1, a0
// [Asm] subst   j .input243_26_0 ->   j .input243_26_0
// [Asm] subst   mv v8, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v12, FnParam(fref=f1, fpref=$f.1) -> v3, FnParam(fref=f1, fpref=$f.0) -> v2, FnParam(fref=f1, fpref=$f.2) -> v4, BlockParam(bref=b3, bpref=$b.0) -> v10, Insn(iref=%2) -> v11, Insn(iref=%1) -> v9, BlockParam(bref=b0, bpref=$b.0) -> v5, Self(fref=f1) -> v0, BlockParam(bref=b0, bpref=$b.1) -> v6, BlockParam(bref=b0, bpref=$b.2) -> v7, Insn(iref=%5) -> v14, Insn(iref=%0) -> v8, Insn(iref=%4) -> v13
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%0)])
// [Asm] defs: [v18]
// [Asm] live_set: [v5, v6, v18, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v19, v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, v6, zero, a0, v7]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, v6, zero, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v12]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, v6, zero, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v13]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v5, v14, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v14, zero, v7]
// [Asm] move_origin: [v5]
// [Asm] defs: [v6]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v14]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [zero]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move_origin: [v3]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v4]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of output14_1"];
// [Asm]   r0 [label="v18 ← a0", color=green];
// [Asm]   r20 [label="v12 ← a0", color=green];
// [Asm]   r23 [label="v10 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r26 [label="v4 ← a2", color=green];
// [Asm]   r27 [label="v8 ← a0", color=green];
// [Asm]   r6 [label="v11 ← a0", color=green];
// [Asm]   r13 [label="a1", color=blue];
// [Asm]   r4 [label="v7 ← s2", color=green];
// [Asm]   r1 [label="v5 ← s0", color=green];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a0", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r22 [label="v14 ← a0", color=green];
// [Asm]   r14 [label="a2", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r5 [label="v19 ← a0", color=green];
// [Asm]   r24 [label="v2 ← a0", color=green];
// [Asm]   r15 [label="a3", color=blue];
// [Asm]   r25 [label="v3 ← a1", color=green];
// [Asm]   r2 [label="v6 ← s1", color=green];
// [Asm]   r16 [label="a4", color=blue];
// [Asm]   r18 [label="a6", color=blue];
// [Asm]   r19 [label="a7", color=blue];
// [Asm]   r21 [label="v13 ← a0", color=green];
// [Asm]   r17 [label="a5", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r7 -- r10;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r27;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r8;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r7 -- r8;
// [Asm]   r24 -- r25;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r13 -- r24;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r26;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r22;
// [Asm]   r7 -- r13;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r20;
// [Asm]   r25 -- r26;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r14 -- r24;
// [Asm]   r7 -- r9;
// [Asm]   r24 -- r26;
// [Asm]   r3 -- r22;
// [Asm]   r7 -- r17;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r7 -- r19;
// [Asm]   r2 -- r14;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r14 -- r25;
// [Asm]   r7 -- r15;
// [Asm]   r7 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r1 -- r25;
// [Asm]   r2 -- r21;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r4 -- r17;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r7 -- r12;
// [Asm]   r2 -- r3;
// [Asm]   r7 -- r14;
// [Asm]   r2 -- r27;
// [Asm]   r4 -- r19;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:v18-> 1:v5-> 2:v6-> 3:zero-> 4:v7-> 5:v19-> 6:v11-> 7:a0-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:a1-> 14:a2-> 15:a3-> 16:a4-> 17:a5-> 18:a6-> 19:a7-> 20:v12-> 21:v13-> 27:v8-> 22:v14-> 24:v2-> 25:v3-> 26:v4-> 23:v10"
// [Asm]   comment = "v18<-a0;v12<-a0;v10<-a0;v4<-a2;v8<-a0;v11<-a0;v7<-s2;v5<-s0;v14<-a0;v19<-a0;v2<-a0;v3<-a1;v6<-s1;v13<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of output14_1"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   slliw v18, v6, 2 ->   slliw a0, s1, 2
// [Asm] subst   add v19, v5, v18 ->   add a0, s0, a0
// [Asm] subst   lw v11, 0(v19) ->   lw a0, 0(a0)
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   addi v14, v6, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v6, v14 ->   mv s1, a0
// [Asm] subst   j .output14_1_0 ->   j .output14_1_0
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v10, zero ->   mv a0, zero
// [Asm] subst   mv v5, v2 ->   mv s0, a0
// [Asm] subst   mv v6, v3 ->   mv s1, a1
// [Asm] subst   mv v7, v4 ->   mv s2, a2
// [Asm] subst   addi v8, v7, -1 ->   addi a0, s2, -1
// [Asm] subst   blt v8, v6, .output14_1_2 ->   blt a0, s1, .output14_1_2
// [Asm] pre_assigned_registers: Insn(iref=%9) -> v17, FreeVar(fvref=^2) -> v4, FreeVar(fvref=^1) -> v3, Insn(iref=%8) -> v16, BlockParam(bref=b0, bpref=$b.0) -> v5, Insn(iref=%5) -> v11, Insn(iref=%0) -> v6, Insn(iref=%4) -> v10, Insn(iref=%3) -> v9, Insn(iref=%7) -> v15, BlockParam(bref=b5, bpref=$b.0) -> v13, FnParam(fref=f11, fpref=$f.0) -> v2, BlockParam(bref=b6, bpref=$b.0) -> v14, Self(fref=f11) -> v0, Insn(iref=%2) -> v8, Insn(iref=%1) -> v7, Insn(iref=%6) -> v12
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%2), Insn(iref=%5)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%0), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v14]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v5, zero, v4, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v4, v15, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, a0, v4, a1, v15, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, zero, a0, v4, a2, a1, v3]
// [Asm] move_origin: [v15]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, v5, zero, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v16]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v4, v17, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v17]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move_origin: [zero]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v0, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move_origin: [v13]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v14]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move_origin: [zero]
// [Asm] defined: v14 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v4, v5, zero, v26, v3]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v4, v5, zero, v27, v3]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v8, v4, v5, zero, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v8, v4, v5, zero, v22, v3]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v8, v4, v5, zero, v23, v3]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v8, v4, v5, v10, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v8, v11, v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of g37_11"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r26 [label="v27 ← a0", color=green];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="a3", color=blue];
// [Asm]   r4 [label="v4 ← s1", color=green];
// [Asm]   r29 [label="v22 ← a1", color=green];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r5 [label="v3 ← s2", color=green];
// [Asm]   r15 [label="a5", color=blue];
// [Asm]   r32 [label="v11 ← a1", color=green];
// [Asm]   r24 [label="v6 ← a0", color=green];
// [Asm]   r31 [label="v10 ← a1", color=green];
// [Asm]   r17 [label="a7", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r20 [label="v13 ← a0", color=green];
// [Asm]   r23 [label="v14 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r27 [label="v8 ← a0", color=green];
// [Asm]   r1 [label="v15 ← a2", color=green];
// [Asm]   r28 [label="v9 ← a1", color=green];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r22 [label="v2 ← a0", color=green];
// [Asm]   r14 [label="a4", color=blue];
// [Asm]   r30 [label="v23 ← a1", color=green];
// [Asm]   r25 [label="v26 ← a0", color=green];
// [Asm]   r2 [label="v5 ← s0", color=green];
// [Asm]   r16 [label="a6", color=blue];
// [Asm]   r18 [label="v16 ← a0", color=green];
// [Asm]   r19 [label="v17 ← a0", color=green];
// [Asm]   r21 [label="v0 ← a1", color=green];
// [Asm]   r2 -- r32;
// [Asm]   r2 -- r31;
// [Asm]   r0 -- r13;
// [Asm]   r5 -- r21;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r27 -- r29;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r0 -- r17;
// [Asm]   r5 -- r18;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r32;
// [Asm]   r27 -- r32;
// [Asm]   r3 -- r11;
// [Asm]   r5 -- r29;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r27;
// [Asm]   r27 -- r28;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r31;
// [Asm]   r0 -- r16;
// [Asm]   r3 -- r5;
// [Asm]   r27 -- r30;
// [Asm]   r4 -- r31;
// [Asm]   r0 -- r6;
// [Asm]   r5 -- r31;
// [Asm]   r3 -- r8;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r30;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r9;
// [Asm]   r3 -- r13;
// [Asm]   r4 -- r28;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r5 -- r32;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r29;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r27;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r10;
// [Asm]   r4 -- r25;
// [Asm]   r3 -- r17;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r5 -- r14;
// [Asm]   r0 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r21 -- r22;
// [Asm]   r2 -- r24;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r27 -- r31;
// [Asm]   r6 -- r7;
// [Asm]   r4 -- r13;
// [Asm]   r0 -- r15;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r26;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r0 -- r14;
// [Asm]   r5 -- r19;
// [Asm]   r0 -- r21;
// [Asm]   r3 -- r28;
// [Asm]   r4 -- r30;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r5 -- r11;
// [Asm]   r3 -- r22;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r5 -- r28;
// [Asm]   r2 -- r14;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r8;
// [Asm]   r4 -- r32;
// [Asm]   r3 -- r29;
// [Asm]   r0 -- r5;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r30;
// [Asm]   r0 -- r12;
// [Asm]   r5 -- r25;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r3;
// [Asm]   r4 -- r26;
// [Asm]   r0 -- r7;
// [Asm]   r5 -- r30;
// [Asm]   r2 -- r3;
// [Asm]   r2 -- r27;
// [Asm]   r5 -- r15;
// [Asm]   r4 -- r19;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:a0-> 1:v15-> 2:v5-> 3:zero-> 4:v4-> 5:v3-> 6:a1-> 7:a2-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:a3-> 14:a4-> 15:a5-> 16:a6-> 17:a7-> 18:v16-> 24:v6-> 25:v26-> 26:v27-> 27:v8-> 28:v9-> 29:v22-> 30:v23-> 31:v10-> 32:v11-> 19:v17-> 21:v0-> 22:v2-> 20:v13-> 23:v14"
// [Asm]   comment = "v27<-a0;v4<-s1;v22<-a1;v3<-s2;v11<-a1;v6<-a0;v10<-a1;v13<-a0;v14<-a0;v8<-a0;v15<-a2;v9<-a1;v2<-a0;v23<-a1;v26<-a0;v5<-s0;v16<-a0;v17<-a0;v0<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of g37_11"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   addi v15, v5, -1 ->   addi a2, s0, -1
// [Asm] subst   mv a0, v4 ->   mv a0, s1
// [Asm] subst   mv a1, v5 ->   mv a1, s0
// [Asm] subst   call swap1_0 ->   call swap1_0
// [Asm] subst   addi v17, v5, -1 ->   addi a0, s0, -1
// [Asm] subst   mv v5, v17 ->   mv s0, a0
// [Asm] subst   j .g37_11_0 ->   j .g37_11_0
// [Asm] subst   mv v13, zero ->   mv a0, zero
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   lw v3, 8(v0) ->   lw s2, 8(a1)
// [Asm] subst   ld v4, 16(v0) ->   ld s1, 16(a1)
// [Asm] subst   mv v5, v2 ->   mv s0, a0
// [Asm] subst   j .g37_11_6 ->   j .g37_11_6
// [Asm] subst   addi v6, v3, 1 ->   addi a0, s2, 1
// [Asm] subst   blt v5, v6, .g37_11_2 ->   blt s0, a0, .g37_11_2
// [Asm] subst   mv v14, zero ->   mv a0, zero
// [Asm] subst   slliw v26, v5, 2 ->   slliw a0, s0, 2
// [Asm] subst   add v27, v4, v26 ->   add a0, s1, a0
// [Asm] subst   lw v8, 0(v27) ->   lw a0, 0(a0)
// [Asm] subst   addi v9, v5, -1 ->   addi a1, s0, -1
// [Asm] subst   slliw v22, v9, 2 ->   slliw a1, a1, 2
// [Asm] subst   add v23, v4, v22 ->   add a1, s1, a1
// [Asm] subst   lw v10, 0(v23) ->   lw a1, 0(a1)
// [Asm] subst   addi v11, v10, -1 ->   addi a1, a1, -1
// [Asm] subst   blt v11, v8, .g37_11_4 ->   blt a1, a0, .g37_11_4
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v64, Insn(iref=%41) -> v36, Insn(iref=%33) -> v28, Insn(iref=%8) -> v78, Mem(fref=f5, mref=m14) -> v8, Insn(iref=%10) -> v80, Mem(fref=f5, mref=m11) -> v6, Insn(iref=%27) -> v22, Insn(iref=%25) -> v75, Insn(iref=%39) -> v34, BlockParam(bref=b26, bpref=$b.0) -> v18, Mem(fref=f5, mref=m28) -> v9, BlockParam(bref=b35, bpref=$b.0) -> v51, Insn(iref=%4) -> v54, Insn(iref=%49) -> v44, Insn(iref=%42) -> v37, Mem(fref=f5, mref=m29) -> v7, Insn(iref=%26) -> v21, Mem(fref=f5, mref=m27) -> v12, Insn(iref=%31) -> v26, FnParam(fref=f5, fpref=$f.1) -> v3, Mem(fref=f5, mref=m12) -> v5, Insn(iref=%38) -> v33, FnParam(fref=f5, fpref=$f.2) -> v4, Insn(iref=%16) -> v65, Insn(iref=%53) -> v50, BlockParam(bref=b0, bpref=$b.1) -> v14, Insn(iref=%54) -> v52, Insn(iref=%5) -> v55, Insn(iref=%19) -> v68, Insn(iref=%13) -> v62, BlockParam(bref=b11, bpref=$b.0) -> v56, Insn(iref=%7) -> v77, BlockParam(bref=b11, bpref=$b.2) -> v58, Insn(iref=%48) -> v43, Insn(iref=%23) -> v72, Insn(iref=%20) -> v69, Insn(iref=%34) -> v29, Insn(iref=%36) -> v31, BlockParam(bref=b31, bpref=$b.0) -> v46, BlockParam(bref=b26, bpref=$b.1) -> v19, BlockParam(bref=b7, bpref=$b.0) -> v76, BlockParam(bref=b11, bpref=$b.3) -> v59, Insn(iref=%50) -> v45, Insn(iref=%14) -> v63, Insn(iref=%51) -> v47, BlockParam(bref=b14, bpref=$b.0) -> v74, Insn(iref=%52) -> v49, FnParam(fref=f5, fpref=$f.0) -> v2, Mem(fref=f5, mref=m13) -> v10, Self(fref=f5) -> v0, Insn(iref=%44) -> v39, Insn(iref=%32) -> v27, BlockParam(bref=b26, bpref=$b.2) -> v20, Mem(fref=f5, mref=m26) -> v11, BlockParam(bref=b6, bpref=$b.0) -> v53, Insn(iref=%1) -> v17, Insn(iref=%11) -> v60, BlockParam(bref=b11, bpref=$b.1) -> v57, Insn(iref=%35) -> v30, BlockParam(bref=b32, bpref=$b.0) -> v48, Insn(iref=%28) -> v23, Insn(iref=%46) -> v41, BlockParam(bref=b3, bpref=$b.0) -> v82, Insn(iref=%24) -> v73, Insn(iref=%9) -> v79, Insn(iref=%37) -> v32, BlockParam(bref=b0, bpref=$b.0) -> v13, Insn(iref=%45) -> v40, BlockParam(bref=b0, bpref=$b.2) -> v15, Insn(iref=%29) -> v24, Insn(iref=%47) -> v42, Insn(iref=%0) -> v16, Insn(iref=%18) -> v67, Insn(iref=%22) -> v71, Insn(iref=%17) -> v66, Insn(iref=%2) -> v81, Insn(iref=%43) -> v38, Insn(iref=%30) -> v25, Insn(iref=%21) -> v70, Insn(iref=%40) -> v35, Insn(iref=%12) -> v61
// [Asm] skipping Load(ty=Bool, ma=Field(ty=Bool, val=BlockParam(bref=b7, bpref=$b.0), index=1, width=@(@32, @(@32, @32))))
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%23), Int32(val=1)])
// [Asm] skipping Load(ty=Bool, ma=Field(ty=Bool, val=BlockParam(bref=b6, bpref=$b.0), index=1, width=@(@32, @(@32, @32))))
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%52), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=50), Insn(iref=%40)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=8), Insn(iref=%27)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%0), Int32(val=16)])
// [Asm] defs: [v156]
// [Asm] live_set: [v14, v156, v13, zero, v15]
// [Asm] move_origin: []
// [Asm] defined: v156 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v14, v13, zero, v15]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v14, v13, zero, s11, v15]
// [Asm] move_origin: [v11]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v13, zero, s11, v15]
// [Asm] move_origin: []
// [Asm] defs: [v22]
// [Asm] live_set: [v11, v14, v13, zero, v22, s11, v15]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v153]
// [Asm] live_set: [v11, v153, v14, v13, zero, v22, s11, v15]
// [Asm] move_origin: []
// [Asm] defined: v153 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v11, v14, v13, zero, v22, v23, s11, v15]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v151]
// [Asm] live_set: [v11, v14, v13, zero, v22, v23, v151, s11, v15]
// [Asm] move_origin: []
// [Asm] defined: v151 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v11, v14, v13, zero, v22, s11, v15, v24]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v11, v25, v14, v13, zero, v22, s11, v15]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [v149]
// [Asm] live_set: [v11, v25, v14, v13, zero, v22, s11, v15, v149]
// [Asm] move_origin: []
// [Asm] defined: v149 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v25, v14, v13, zero, v22, s11, v15]
// [Asm] move_origin: []
// [Asm] defs: [v113]
// [Asm] live_set: [v25, v14, zero, v13, v15, v113, v51]
// [Asm] move_origin: []
// [Asm] defined: v113 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v25, v14, zero, v13, v7, v15, v51]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v25, v14, zero, v13, v7, v15, s11, v51]
// [Asm] move_origin: [v7]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v14, zero, v13, v7, v15, s11, v51]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v14, v15, s11, zero, v13, v7]
// [Asm] move_origin: []
// [Asm] defs: [v53]
// [Asm] live_set: [v14, v53, v15, s11, zero, v13]
// [Asm] move_origin: [v7]
// [Asm] defined: v53 is X
// [Asm] defs: [v115]
// [Asm] live_set: [v25, v115, v14, v13, zero, s11, v15]
// [Asm] move_origin: []
// [Asm] defined: v115 is X
// [Asm] defs: [v51]
// [Asm] live_set: [v25, v14, v13, zero, s11, v15, v51]
// [Asm] move_origin: [v115]
// [Asm] defined: v51 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v14, v16, v13, zero, v15, s11]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v158]
// [Asm] live_set: [v14, v16, v13, zero, v158, v15, s11]
// [Asm] move_origin: []
// [Asm] defined: v158 is X
// [Asm] defs: []
// [Asm] live_set: [v14, v15, s11, v13, zero]
// [Asm] move_origin: []
// [Asm] defs: [v77]
// [Asm] live_set: [v14, v13, zero, v77, v15, s11]
// [Asm] move_origin: []
// [Asm] defined: v77 is X
// [Asm] defs: []
// [Asm] live_set: [v14, v13, zero, v77, v15, s11]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v14, v13, zero, a0, v77, v15, s11]
// [Asm] move_origin: [v13]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v13, zero, a0, v77, a1, v15, s11]
// [Asm] move_origin: [v14]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v13, zero, a0, v77, a2, a1, v15, s11]
// [Asm] move_origin: [v77]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v77, v15, s11, v13, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v79]
// [Asm] live_set: [v15, s11, v13, zero, v77]
// [Asm] move_origin: [a0]
// [Asm] defined: v79 is X
// [Asm] defs: []
// [Asm] live_set: [v15, s11, v13, zero, v77]
// [Asm] move_origin: []
// [Asm] defs: [v80]
// [Asm] live_set: [v80, v15, s11, v13, zero]
// [Asm] move_origin: []
// [Asm] defined: v80 is X
// [Asm] defs: []
// [Asm] live_set: [v80, v15, s11, v13, zero]
// [Asm] move_origin: [v13]
// [Asm] defs: [v14]
// [Asm] live_set: [v14, v15, s11, v13, zero]
// [Asm] move_origin: [v80]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v14, v15, s11, v13, zero]
// [Asm] move_origin: [v15]
// [Asm] defs: []
// [Asm] live_set: [v14, v15, s11, v13, zero]
// [Asm] move_origin: []
// [Asm] defs: [v54]
// [Asm] live_set: [v14, v13, zero, v15, s11, v54]
// [Asm] move_origin: []
// [Asm] defined: v54 is X
// [Asm] defs: [v56]
// [Asm] live_set: [v14, v56, v13, zero, v15, s11, v54]
// [Asm] move_origin: [v13]
// [Asm] defined: v56 is X
// [Asm] defs: [v57]
// [Asm] live_set: [v14, v56, v13, zero, v57, v15, s11, v54]
// [Asm] move_origin: [v54]
// [Asm] defined: v57 is X
// [Asm] defs: [v58]
// [Asm] live_set: [v58, v14, v56, v13, zero, v57, v15, s11, v54]
// [Asm] move_origin: [v14]
// [Asm] defined: v58 is X
// [Asm] defs: [v59]
// [Asm] live_set: [v58, v14, v56, v13, zero, v59, v57, v15, s11, v54]
// [Asm] move_origin: [v15]
// [Asm] defined: v59 is X
// [Asm] defs: []
// [Asm] live_set: [v14, v15, v13]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v14, v15, a0]
// [Asm] move_origin: [v13]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, v15, a0]
// [Asm] move_origin: [v14]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0]
// [Asm] move_origin: [v15]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v81]
// [Asm] live_set: [v81]
// [Asm] move_origin: [a0]
// [Asm] defined: v81 is X
// [Asm] defs: []
// [Asm] live_set: [v81]
// [Asm] move_origin: []
// [Asm] defs: [v82]
// [Asm] live_set: [v82]
// [Asm] move_origin: [v81]
// [Asm] defined: v82 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v82]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v60]
// [Asm] live_set: [v14, v13, zero, v15, s11, v54, v60]
// [Asm] move_origin: []
// [Asm] defined: v60 is X
// [Asm] defs: []
// [Asm] live_set: [v14, v13, zero, v15, s11, v54, v60]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v14, v13, zero, a0, v15, s11, v54, v60]
// [Asm] move_origin: [v13]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v14, v13, zero, a0, a1, v15, s11, v60]
// [Asm] move_origin: [v54]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v14, v13, zero, a0, a2, a1, v15, s11]
// [Asm] move_origin: [v60]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v14, v13, zero, a0, v15, s11]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v61]
// [Asm] live_set: [v14, v13, zero, v15, s11]
// [Asm] move_origin: [a0]
// [Asm] defined: v61 is X
// [Asm] defs: []
// [Asm] live_set: [v14, v13, zero, v15, s11]
// [Asm] move_origin: []
// [Asm] defs: [v62]
// [Asm] live_set: [v62, v14, v13, zero, v15, s11]
// [Asm] move_origin: []
// [Asm] defined: v62 is X
// [Asm] defs: [v106]
// [Asm] live_set: [v106, v14, v13, zero, v15, s11]
// [Asm] move_origin: []
// [Asm] defined: v106 is X
// [Asm] defs: [v107]
// [Asm] live_set: [v14, v13, zero, v107, v15, s11]
// [Asm] move_origin: []
// [Asm] defined: v107 is X
// [Asm] defs: [v63]
// [Asm] live_set: [v63, v14, v13, zero, v15, s11]
// [Asm] move_origin: []
// [Asm] defined: v63 is X
// [Asm] defs: [v104]
// [Asm] live_set: [v63, v14, v13, zero, v104, v15]
// [Asm] move_origin: []
// [Asm] defined: v104 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v63, v14, v13, zero, v6, v15]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v63, v14, v13, zero, v6, v15, s11]
// [Asm] move_origin: [v6]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v63, v14, v13, zero, v6, v15, s11]
// [Asm] move_origin: []
// [Asm] defs: [v101]
// [Asm] live_set: [v63, v14, v13, zero, v6, v15, v101]
// [Asm] move_origin: []
// [Asm] defined: v101 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v63, v14, v5, v13, zero, v6, v15]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v63, v14, v5, v13, zero, v6, v15, s11]
// [Asm] move_origin: [v5]
// [Asm] defined: s11 is X
// [Asm] defs: [v103]
// [Asm] live_set: [v63, v14, v5, v13, zero, v103, v6, v15, s11]
// [Asm] move_origin: []
// [Asm] defined: v103 is X
// [Asm] defs: []
// [Asm] live_set: [v63, v14, v5, v13, zero, v6, v15, s11]
// [Asm] move_origin: []
// [Asm] defs: [v98]
// [Asm] live_set: [v63, v14, v5, v13, zero, v6, v15, v98]
// [Asm] move_origin: []
// [Asm] defined: v98 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v63, v14, v5, v10, v13, zero, v6, v15]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v63, v14, v5, v10, v13, zero, v6, v15, s11]
// [Asm] move_origin: [v10]
// [Asm] defined: s11 is X
// [Asm] defs: [v100]
// [Asm] live_set: [v63, v14, v5, v10, v13, zero, v6, v15, s11, v100]
// [Asm] move_origin: []
// [Asm] defined: v100 is X
// [Asm] defs: []
// [Asm] live_set: [v63, v14, v5, v10, v13, zero, v6, v15, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v63, v14, v5, v10, v13, zero, v6, v15, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v63, v14, v5, v10, v13, zero, v6, v15, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v14, v5, v10, v13, zero, v6, v15, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v14, v5, v10, v13, zero, v6, v15, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v14, v5, v10, v13, zero, v6, v15, s11]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v14, v5, v10, v13, zero, v6, v15, s11]
// [Asm] move_origin: [v10]
// [Asm] defined: s10 is X
// [Asm] defs: [v96]
// [Asm] live_set: [v14, v5, v96, v13, zero, v6, v15, s11]
// [Asm] move_origin: []
// [Asm] defined: v96 is X
// [Asm] defs: []
// [Asm] live_set: [v14, v5, v96, v13, zero, v6, v15, s11]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v14, v5, v96, v13, zero, a0, v6, v15, s11]
// [Asm] move_origin: [v14]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v14, v5, v13, zero, a0, v6, v15, s11]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v67]
// [Asm] live_set: [v14, v5, v13, zero, v6, v15, s11]
// [Asm] move_origin: [a0]
// [Asm] defined: v67 is X
// [Asm] defs: []
// [Asm] live_set: [v14, v5, v13, zero, v6, v15, s11]
// [Asm] move_origin: []
// [Asm] defs: [v68]
// [Asm] live_set: [v14, v5, v13, zero, v68, v6, v15, s11]
// [Asm] move_origin: []
// [Asm] defined: v68 is X
// [Asm] defs: [v69]
// [Asm] live_set: [v14, v5, v69, v13, zero, v68, v6, v15, s11]
// [Asm] move_origin: []
// [Asm] defined: v69 is X
// [Asm] defs: []
// [Asm] live_set: [v14, v5, v69, v13, zero, v68, v6, v15, s11]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v14, v5, v69, v13, zero, a0, v68, v6, v15, s11]
// [Asm] move_origin: [v13]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v14, v5, v69, v13, zero, a0, v6, a1, v15, s11]
// [Asm] move_origin: [v68]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v14, v5, v13, zero, a0, a2, v6, a1, v15, s11]
// [Asm] move_origin: [v69]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v14, v5, v13, zero, a0, v6, s11, v15]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v70]
// [Asm] live_set: [v14, v5, v13, zero, v6, s11, v15]
// [Asm] move_origin: [a0]
// [Asm] defined: v70 is X
// [Asm] defs: []
// [Asm] live_set: [v14, v5, v13, zero, v6, s11, v15]
// [Asm] move_origin: []
// [Asm] defs: [v71]
// [Asm] live_set: [v71, v14, v5, v13, zero, s11, v15]
// [Asm] move_origin: []
// [Asm] defined: v71 is X
// [Asm] defs: [v72]
// [Asm] live_set: [v72, v71, v14, v13, zero, s11, v15]
// [Asm] move_origin: []
// [Asm] defined: v72 is X
// [Asm] defs: [v90]
// [Asm] live_set: [v72, v71, v14, v13, zero, v90, s11, v15]
// [Asm] move_origin: []
// [Asm] defined: v90 is X
// [Asm] defs: []
// [Asm] live_set: [v71, v14, s11, v15, v13, zero]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v14, v18, zero, v13, s11, v15]
// [Asm] move_origin: [v13]
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v14, v18, zero, v13, v19, s11, v15]
// [Asm] move_origin: [v14]
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v14, v18, zero, v13, v20, v19, s11, v15]
// [Asm] move_origin: [v15]
// [Asm] defined: v20 is X
// [Asm] defs: [v147]
// [Asm] live_set: [v25, v11, v14, v13, v22, s11, v147, zero, v15]
// [Asm] move_origin: []
// [Asm] defined: v147 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v25, v11, v14, v13, v22, s11, zero, v27, v15]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v145]
// [Asm] live_set: [v25, v11, v14, v13, v22, s11, v145, zero, v27, v15]
// [Asm] move_origin: []
// [Asm] defined: v145 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v25, v11, v14, v13, v22, s11, v28, zero, v15]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: [v29]
// [Asm] live_set: [v25, v11, v14, v13, v22, s11, v29, zero, v15]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [v142]
// [Asm] live_set: [v25, v11, v14, v13, v22, s11, v142, v29, zero, v15]
// [Asm] move_origin: []
// [Asm] defined: v142 is X
// [Asm] defs: [v30]
// [Asm] live_set: [v25, v11, v14, v13, v22, v30, s11, v29, zero, v15]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: [v140]
// [Asm] live_set: [v25, v11, v14, v13, v22, v30, s11, v29, zero, v140, v15]
// [Asm] move_origin: []
// [Asm] defined: v140 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v25, v11, v14, v13, v22, s11, v31, v29, zero, v15]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v25, v11, v14, v13, v22, v32, s11, v29, zero, v15]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: [v136]
// [Asm] live_set: [v25, v11, v14, v13, v22, v32, v29, zero, v136, v15]
// [Asm] move_origin: []
// [Asm] defined: v136 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v25, v11, v14, v13, v22, v32, v12, v29, zero, v15]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v25, v11, v14, v13, v22, v32, v12, s11, v29, zero, v15]
// [Asm] move_origin: [v12]
// [Asm] defined: s11 is X
// [Asm] defs: [v138]
// [Asm] live_set: [v25, v11, v14, v13, v22, v32, v12, s11, v138, v29, zero, v15]
// [Asm] move_origin: []
// [Asm] defined: v138 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v14, v13, v22, v32, v12, s11, v29, zero, v15]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v14, v13, v22, v32, v12, s11, v29, zero, v15]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v14, v13, v22, v32, v12, s11, v29, zero, v15]
// [Asm] move_origin: []
// [Asm] defs: [v133]
// [Asm] live_set: [v25, v11, v14, v13, v22, v133, v32, v12, v29, zero, v15]
// [Asm] move_origin: []
// [Asm] defined: v133 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v25, v11, v14, v13, v22, v32, v12, v9, v29, zero, v15]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v25, v11, v14, v13, v22, v32, s11, v12, v9, v29, zero, v15]
// [Asm] move_origin: [v9]
// [Asm] defined: s11 is X
// [Asm] defs: [v135]
// [Asm] live_set: [v25, v11, v14, v13, v22, v32, s11, v12, v9, v29, zero, v15, v135]
// [Asm] move_origin: []
// [Asm] defined: v135 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v14, v29, zero, v13, v22, v32, s11, v15, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v14, v29, zero, v13, v22, v32, s11, v15, v9]
// [Asm] move_origin: []
// [Asm] defs: [v35]
// [Asm] live_set: [v25, v11, v14, v29, zero, v13, v35, v32, s11, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: [v131]
// [Asm] live_set: [v25, v11, v14, v29, zero, v13, v35, v32, s11, v15, v131, v9]
// [Asm] move_origin: []
// [Asm] defined: v131 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v14, v29, zero, v13, v32, s11, v15, v9]
// [Asm] move_origin: []
// [Asm] defs: [v51]
// [Asm] live_set: [v25, v14, v13, zero, s11, v15, v51]
// [Asm] move_origin: [zero]
// [Asm] defined: v51 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v14, v13, zero, s11, v15, v51]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, s11, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, s11, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v4, s11, v13, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v4, v14, s11, v13, zero]
// [Asm] move_origin: [v3]
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v14, v15, s11, v13, zero]
// [Asm] move_origin: [v4]
// [Asm] defined: v15 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v11, v25, v14, zero, v13, v29, v32, s11, v15, v9]
// [Asm] move_origin: [v9]
// [Asm] defined: s10 is X
// [Asm] defs: [v117]
// [Asm] live_set: [v11, v25, v14, zero, v13, v29, v32, s11, v15, v117]
// [Asm] move_origin: []
// [Asm] defined: v117 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v25, v14, zero, v13, v29, v32, s11, v15, v117]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v25, v14, zero, v13, a0, v32, s11, v15, v117]
// [Asm] move_origin: [v29]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v11, v25, v14, zero, v13, a0, v32, a1, s11, v15, v117]
// [Asm] move_origin: [v25]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v11, v25, v14, zero, v13, a0, a2, a1, s11, v15, v117]
// [Asm] move_origin: [v32]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v25, v14, zero, v13, a0, s11, v15]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v47]
// [Asm] live_set: [v11, v25, v14, zero, v13, v47, s11, v15]
// [Asm] move_origin: [a0]
// [Asm] defined: v47 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v25, v14, zero, v13, v47, s11, v15]
// [Asm] move_origin: []
// [Asm] defs: [v48]
// [Asm] live_set: [v11, v25, v14, v48, zero, v13, s11, v15]
// [Asm] move_origin: [v47]
// [Asm] defined: v48 is X
// [Asm] defs: [v74]
// [Asm] live_set: [v71, v14, zero, v13, v74, s11, v15]
// [Asm] move_origin: [zero]
// [Asm] defined: v74 is X
// [Asm] defs: []
// [Asm] live_set: [v71, v14, zero, v13, v74, s11, v15]
// [Asm] move_origin: []
// [Asm] defs: [v37]
// [Asm] live_set: [v25, v11, v14, v13, v32, v37, s11, v9, v29, zero, v15]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: [v38]
// [Asm] live_set: [v25, v11, v14, v13, v32, v37, s11, v9, v29, zero, v38, v15]
// [Asm] move_origin: []
// [Asm] defined: v38 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v25, v11, v14, v13, v32, v37, s11, v9, v29, zero, v38, v15]
// [Asm] move_origin: [v9]
// [Asm] defined: s10 is X
// [Asm] defs: [v127]
// [Asm] live_set: [v25, v11, v14, v127, v13, v32, v37, s11, v9, v29, zero, v38, v15]
// [Asm] move_origin: []
// [Asm] defined: v127 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v14, v127, v13, v32, v37, s11, v9, v29, zero, v38, v15]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v25, v11, v14, v127, v13, a0, v32, s11, v9, v29, zero, v38, v15]
// [Asm] move_origin: [v37]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v25, v11, v14, v127, v13, a0, v32, a1, s11, v9, v29, zero, v38, v15]
// [Asm] move_origin: [v29]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v25, v11, v14, v127, v13, a0, v32, a2, a1, s11, v9, v29, zero, v15]
// [Asm] move_origin: [v38]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v25, v11, v14, v13, a0, v32, s11, v9, v29, zero, v15]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v39]
// [Asm] live_set: [v25, v11, v14, v13, v32, s11, v9, v29, zero, v15]
// [Asm] move_origin: [a0]
// [Asm] defined: v39 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v14, v13, v32, s11, v9, v29, zero, v15]
// [Asm] move_origin: []
// [Asm] defs: [v40]
// [Asm] live_set: [v25, v11, v14, v13, v32, s11, v9, v29, zero, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: v40 is X
// [Asm] defs: [v41]
// [Asm] live_set: [v25, v11, v14, v13, v32, v41, s11, v9, v29, zero, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v25, v11, v14, v13, v32, v41, s11, v9, v29, zero, v15, v40]
// [Asm] move_origin: [v9]
// [Asm] defined: s10 is X
// [Asm] defs: [v123]
// [Asm] live_set: [v25, v11, v14, v13, v123, v32, v41, s11, v9, v29, zero, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: v123 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v14, v13, v123, v32, v41, s11, v9, v29, zero, v15, v40]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v25, v11, v14, v13, a0, v123, v32, v41, s11, v9, v29, zero, v15]
// [Asm] move_origin: [v40]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v25, v11, v14, v13, a0, v123, v32, v41, a1, s11, v9, v29, zero, v15]
// [Asm] move_origin: [v25]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v25, v11, v14, v13, a0, v123, v32, a2, a1, s11, v9, v29, zero, v15]
// [Asm] move_origin: [v41]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v25, v11, v14, v13, a0, v32, s11, v9, v29, zero, v15]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v42]
// [Asm] live_set: [v25, v11, v14, v13, v32, s11, v9, v29, zero, v15]
// [Asm] move_origin: [a0]
// [Asm] defined: v42 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v14, v13, v32, s11, v9, v29, zero, v15]
// [Asm] move_origin: []
// [Asm] defs: [v43]
// [Asm] live_set: [v25, v11, v14, v13, v32, v43, s11, v9, v29, zero, v15]
// [Asm] move_origin: []
// [Asm] defined: v43 is X
// [Asm] defs: [v44]
// [Asm] live_set: [v25, v11, v14, v13, v32, v43, s11, v44, v9, v29, zero, v15]
// [Asm] move_origin: []
// [Asm] defined: v44 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v25, v11, v14, v13, v32, v43, s11, v44, v9, v29, zero, v15]
// [Asm] move_origin: [v9]
// [Asm] defined: s10 is X
// [Asm] defs: [v119]
// [Asm] live_set: [v25, v11, v14, v13, v119, v32, v43, s11, v44, v9, v29, zero, v15]
// [Asm] move_origin: []
// [Asm] defined: v119 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v14, v13, v119, v32, v43, s11, v44, v9, v29, zero, v15]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v25, v11, v14, v13, a0, v119, v32, s11, v44, v9, v29, zero, v15]
// [Asm] move_origin: [v43]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v25, v11, v14, v13, a0, v119, v32, a1, s11, v44, v9, v29, zero, v15]
// [Asm] move_origin: [v32]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v25, v11, v14, v13, a0, v119, v32, a2, a1, s11, v9, v29, zero, v15]
// [Asm] move_origin: [v44]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v25, v11, v14, v29, zero, v13, a0, v32, s11, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v45]
// [Asm] live_set: [v25, v11, v14, v29, zero, v13, v45, v32, s11, v15, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v45 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v14, v29, zero, v13, v45, v32, s11, v15, v9]
// [Asm] move_origin: []
// [Asm] defs: [v46]
// [Asm] live_set: [v25, v11, v46, v14, v29, zero, v13, v32, s11, v15, v9]
// [Asm] move_origin: [v45]
// [Asm] defined: v46 is X
// [Asm] defs: [v46]
// [Asm] live_set: [v25, v11, v46, v14, v29, zero, v13, v32, s11, v15, v9]
// [Asm] move_origin: [zero]
// [Asm] defined: v46 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v46, v14, v29, zero, v13, v32, s11, v15, v9]
// [Asm] move_origin: []
// [Asm] defs: [v89]
// [Asm] live_set: [v71, v14, zero, v13, s11, v15, v89]
// [Asm] move_origin: []
// [Asm] defined: v89 is X
// [Asm] defs: [v74]
// [Asm] live_set: [v71, v14, zero, v13, v74, s11, v15]
// [Asm] move_origin: [v89]
// [Asm] defined: v74 is X
// [Asm] defs: [v49]
// [Asm] live_set: [v25, v14, v49, zero, v13, s11, v15]
// [Asm] move_origin: []
// [Asm] defined: v49 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v14, s11, v15, zero, v13]
// [Asm] move_origin: []
// [Asm] defs: [v48]
// [Asm] live_set: [v11, v25, v14, v48, zero, v13, s11, v15]
// [Asm] move_origin: [zero]
// [Asm] defined: v48 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v25, v14, v48, zero, v13, s11, v15]
// [Asm] move_origin: []
// [Asm] defs: [v87]
// [Asm] live_set: [v14, v71, v87, v13, zero, v74, v15]
// [Asm] move_origin: []
// [Asm] defined: v87 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v14, v71, v13, zero, v8, v74, v15]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v14, v71, v13, zero, v8, v74, v15, s11]
// [Asm] move_origin: [v8]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v14, v13, zero, v8, v74, v15, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v14, v15, s11, v13, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v76]
// [Asm] live_set: [v14, v15, s11, v13, zero, v76]
// [Asm] move_origin: [v8]
// [Asm] defined: v76 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of quick_sort210_5"];
// [Asm]   r0 [label="v156 ← a0", color=green];
// [Asm]   r46 [label="v62 ← a0", color=green];
// [Asm]   r33 [label="a6", color=blue];
// [Asm]   r76 [label="v30 ← a1", color=green];
// [Asm]   r59 [label="v96 ← a1", color=green];
// [Asm]   r9 [label="v23 ← a1", color=green];
// [Asm]   r26 [label="t1", color=blue];
// [Asm]   r86 [label="v35 ← a0", color=green];
// [Asm]   r44 [label="v60 ← a2", color=green];
// [Asm]   r53 [label="v5 ← s4", color=green];
// [Asm]   r56 [label="v10 ← a2", color=green];
// [Asm]   r10 [label="v151 ← a2", color=green];
// [Asm]   r111 [label="v8 ← a2", color=green];
// [Asm]   r5 [label="v11 ← s3", color=green];
// [Asm]   r54 [label="v103 ← a1", color=green];
// [Asm]   r24 [label="a2", color=blue];
// [Asm]   r43 [label="v82 ← a0", color=green];
// [Asm]   r88 [label="v2 ← a0", color=green];
// [Asm]   r80 [label="v136 ← a1", color=green];
// [Asm]   r31 [label="a4", color=blue];
// [Asm]   r39 [label="v57 ← a1", color=green];
// [Asm]   r99 [label="v40 ← a0", color=green];
// [Asm]   r17 [label="v53 ← a0", color=green];
// [Asm]   r52 [label="v101 ← a1", color=green];
// [Asm]   r65 [label="v72 ← a1", color=green];
// [Asm]   r79 [label="v32 ← s6", color=green];
// [Asm]   r20 [label="v158 ← a1", color=green];
// [Asm]   r61 [label="v68 ← a1", color=green];
// [Asm]   r23 [label="a1", color=blue];
// [Asm]   r108 [label="v89 ← a1", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r82 [label="v138 ← a2", color=green];
// [Asm]   r67 [label="v18 ← a0", color=green];
// [Asm]   r75 [label="v142 ← a1", color=green];
// [Asm]   r77 [label="v140 ← a2", color=green];
// [Asm]   r27 [label="t2", color=blue];
// [Asm]   r62 [label="v69 ← a2", color=green];
// [Asm]   r40 [label="v58 ← a2", color=green];
// [Asm]   r11 [label="v24 ← a1", color=green];
// [Asm]   r110 [label="v87 ← a2", color=green];
// [Asm]   r58 [label="s10", color=blue];
// [Asm]   r105 [label="v119 ← a3", color=green];
// [Asm]   r34 [label="a7", color=blue];
// [Asm]   r83 [label="v133 ← a2", color=green];
// [Asm]   r103 [label="v43 ← a0", color=green];
// [Asm]   r14 [label="v113 ← a1", color=green];
// [Asm]   r51 [label="v6 ← s3", color=green];
// [Asm]   r96 [label="v38 ← a2", color=green];
// [Asm]   r78 [label="v31 ← a1", color=green];
// [Asm]   r55 [label="v98 ← a1", color=green];
// [Asm]   r16 [label="v7 ← a1", color=green];
// [Asm]   r21 [label="v77 ← s3", color=green];
// [Asm]   r60 [label="v67 ← a0", color=green];
// [Asm]   r93 [label="v48 ← a0", color=green];
// [Asm]   r73 [label="v28 ← a1", color=green];
// [Asm]   r38 [label="v56 ← a0", color=green];
// [Asm]   r72 [label="v145 ← a2", color=green];
// [Asm]   r104 [label="v44 ← a2", color=green];
// [Asm]   r87 [label="v131 ← a1", color=green];
// [Asm]   r100 [label="v41 ← a2", color=green];
// [Asm]   r85 [label="v135 ← a2", color=green];
// [Asm]   r47 [label="v106 ← a0", color=green];
// [Asm]   r6 [label="s11", color=blue];
// [Asm]   r13 [label="v149 ← a1", color=green];
// [Asm]   r42 [label="v81 ← a0", color=green];
// [Asm]   r4 [label="v15 ← s2", color=green];
// [Asm]   r95 [label="v37 ← a0", color=green];
// [Asm]   r29 [label="t4", color=blue];
// [Asm]   r35 [label="v79 ← a0", color=green];
// [Asm]   r7 [label="v22 ← a0", color=green];
// [Asm]   r64 [label="v71 ← a0", color=green];
// [Asm]   r8 [label="v153 ← a1", color=green];
// [Asm]   r112 [label="v76 ← a0", color=green];
// [Asm]   r36 [label="v80 ← a0", color=green];
// [Asm]   r66 [label="v90 ← a2", color=green];
// [Asm]   r15 [label="v51 ← a0", color=green];
// [Asm]   r32 [label="a5", color=blue];
// [Asm]   r49 [label="v63 ← a0", color=green];
// [Asm]   r74 [label="v29 ← s5", color=green];
// [Asm]   r57 [label="v100 ← a1", color=green];
// [Asm]   r68 [label="v19 ← a1", color=green];
// [Asm]   r98 [label="v39 ← a0", color=green];
// [Asm]   r91 [label="v117 ← a3", color=green];
// [Asm]   r70 [label="v147 ← a1", color=green];
// [Asm]   r48 [label="v107 ← a0", color=green];
// [Asm]   r12 [label="v25 ← s4", color=green];
// [Asm]   r37 [label="v54 ← a1", color=green];
// [Asm]   r102 [label="v42 ← a0", color=green];
// [Asm]   r106 [label="v45 ← a0", color=green];
// [Asm]   r109 [label="v49 ← a0", color=green];
// [Asm]   r1 [label="v14 ← s0", color=green];
// [Asm]   r28 [label="t3", color=blue];
// [Asm]   r41 [label="v59 ← a3", color=green];
// [Asm]   r71 [label="v27 ← a1", color=green];
// [Asm]   r22 [label="a0", color=blue];
// [Asm]   r69 [label="v20 ← a2", color=green];
// [Asm]   r84 [label="v9 ← s7", color=green];
// [Asm]   r89 [label="v3 ← a1", color=green];
// [Asm]   r50 [label="v104 ← a1", color=green];
// [Asm]   r30 [label="a3", color=blue];
// [Asm]   r92 [label="v47 ← a0", color=green];
// [Asm]   r45 [label="v61 ← a0", color=green];
// [Asm]   r107 [label="v46 ← a0", color=green];
// [Asm]   r25 [label="t0", color=blue];
// [Asm]   r63 [label="v70 ← a0", color=green];
// [Asm]   r2 [label="v13 ← s1", color=green];
// [Asm]   r18 [label="v115 ← a0", color=green];
// [Asm]   r19 [label="v16 ← a0", color=green];
// [Asm]   r97 [label="v127 ← a3", color=green];
// [Asm]   r90 [label="v4 ← a2", color=green];
// [Asm]   r81 [label="v12 ← a1", color=green];
// [Asm]   r94 [label="v74 ← a1", color=green];
// [Asm]   r101 [label="v123 ← a3", color=green];
// [Asm]   r12 -- r25;
// [Asm]   r5 -- r105;
// [Asm]   r6 -- r102;
// [Asm]   r12 -- r91;
// [Asm]   r6 -- r70;
// [Asm]   r2 -- r78;
// [Asm]   r6 -- r48;
// [Asm]   r74 -- r107;
// [Asm]   r25 -- r79;
// [Asm]   r25 -- r84;
// [Asm]   r6 -- r68;
// [Asm]   r4 -- r101;
// [Asm]   r88 -- r89;
// [Asm]   r4 -- r44;
// [Asm]   r6 -- r88;
// [Asm]   r3 -- r9;
// [Asm]   r2 -- r91;
// [Asm]   r7 -- r78;
// [Asm]   r3 -- r107;
// [Asm]   r4 -- r48;
// [Asm]   r3 -- r86;
// [Asm]   r2 -- r51;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r70;
// [Asm]   r3 -- r31;
// [Asm]   r2 -- r41;
// [Asm]   r3 -- r48;
// [Asm]   r1 -- r112;
// [Asm]   r6 -- r69;
// [Asm]   r61 -- r62;
// [Asm]   r5 -- r107;
// [Asm]   r26 -- r79;
// [Asm]   r2 -- r48;
// [Asm]   r79 -- r86;
// [Asm]   r56 -- r57;
// [Asm]   r4 -- r83;
// [Asm]   r84 -- r87;
// [Asm]   r23 -- r101;
// [Asm]   r5 -- r32;
// [Asm]   r25 -- r74;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r29;
// [Asm]   r1 -- r11;
// [Asm]   r74 -- r86;
// [Asm]   r12 -- r23;
// [Asm]   r74 -- r85;
// [Asm]   r2 -- r98;
// [Asm]   r88 -- r90;
// [Asm]   r22 -- r44;
// [Asm]   r2 -- r69;
// [Asm]   r49 -- r54;
// [Asm]   r74 -- r103;
// [Asm]   r6 -- r25;
// [Asm]   r33 -- r84;
// [Asm]   r2 -- r73;
// [Asm]   r6 -- r62;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r103;
// [Asm]   r1 -- r55;
// [Asm]   r21 -- r28;
// [Asm]   r12 -- r34;
// [Asm]   r21 -- r29;
// [Asm]   r12 -- r97;
// [Asm]   r1 -- r105;
// [Asm]   r3 -- r104;
// [Asm]   r2 -- r50;
// [Asm]   r22 -- r26;
// [Asm]   r6 -- r46;
// [Asm]   r21 -- r34;
// [Asm]   r3 -- r83;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r30 -- r79;
// [Asm]   r5 -- r11;
// [Asm]   r31 -- r74;
// [Asm]   r7 -- r75;
// [Asm]   r5 -- r74;
// [Asm]   r74 -- r79;
// [Asm]   r3 -- r65;
// [Asm]   r74 -- r82;
// [Asm]   r5 -- r93;
// [Asm]   r6 -- r105;
// [Asm]   r5 -- r97;
// [Asm]   r2 -- r14;
// [Asm]   r84 -- r100;
// [Asm]   r4 -- r100;
// [Asm]   r3 -- r99;
// [Asm]   r58 -- r99;
// [Asm]   r38 -- r40;
// [Asm]   r81 -- r85;
// [Asm]   r1 -- r72;
// [Asm]   r1 -- r99;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r60;
// [Asm]   r4 -- r63;
// [Asm]   r12 -- r16;
// [Asm]   r6 -- r38;
// [Asm]   r79 -- r98;
// [Asm]   r3 -- r23;
// [Asm]   r1 -- r24;
// [Asm]   r2 -- r58;
// [Asm]   r5 -- r12;
// [Asm]   r6 -- r95;
// [Asm]   r32 -- r51;
// [Asm]   r24 -- r51;
// [Asm]   r2 -- r45;
// [Asm]   r21 -- r35;
// [Asm]   r12 -- r81;
// [Asm]   r30 -- r51;
// [Asm]   r2 -- r15;
// [Asm]   r24 -- r84;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r112;
// [Asm]   r3 -- r56;
// [Asm]   r6 -- r66;
// [Asm]   r7 -- r77;
// [Asm]   r4 -- r110;
// [Asm]   r1 -- r10;
// [Asm]   r4 -- r54;
// [Asm]   r1 -- r85;
// [Asm]   r53 -- r57;
// [Asm]   r3 -- r32;
// [Asm]   r6 -- r54;
// [Asm]   r22 -- r31;
// [Asm]   r1 -- r17;
// [Asm]   r4 -- r78;
// [Asm]   r24 -- r89;
// [Asm]   r4 -- r91;
// [Asm]   r3 -- r89;
// [Asm]   r34 -- r51;
// [Asm]   r4 -- r22;
// [Asm]   r76 -- r77;
// [Asm]   r3 -- r18;
// [Asm]   r6 -- r77;
// [Asm]   r4 -- r35;
// [Asm]   r1 -- r70;
// [Asm]   r1 -- r31;
// [Asm]   r1 -- r103;
// [Asm]   r23 -- r105;
// [Asm]   r1 -- r87;
// [Asm]   r5 -- r104;
// [Asm]   r3 -- r97;
// [Asm]   r5 -- r86;
// [Asm]   r4 -- r86;
// [Asm]   r6 -- r96;
// [Asm]   r53 -- r59;
// [Asm]   r2 -- r46;
// [Asm]   r79 -- r84;
// [Asm]   r6 -- r18;
// [Asm]   r4 -- r28;
// [Asm]   r3 -- r40;
// [Asm]   r74 -- r105;
// [Asm]   r22 -- r105;
// [Asm]   r3 -- r27;
// [Asm]   r3 -- r69;
// [Asm]   r5 -- r80;
// [Asm]   r2 -- r97;
// [Asm]   r3 -- r95;
// [Asm]   r5 -- r7;
// [Asm]   r12 -- r86;
// [Asm]   r2 -- r103;
// [Asm]   r3 -- r7;
// [Asm]   r79 -- r100;
// [Asm]   r1 -- r110;
// [Asm]   r4 -- r49;
// [Asm]   r31 -- r53;
// [Asm]   r6 -- r32;
// [Asm]   r49 -- r57;
// [Asm]   r67 -- r68;
// [Asm]   r2 -- r72;
// [Asm]   r53 -- r55;
// [Asm]   r1 -- r23;
// [Asm]   r5 -- r23;
// [Asm]   r4 -- r79;
// [Asm]   r74 -- r99;
// [Asm]   r24 -- r79;
// [Asm]   r34 -- r53;
// [Asm]   r7 -- r71;
// [Asm]   r4 -- r20;
// [Asm]   r1 -- r60;
// [Asm]   r5 -- r87;
// [Asm]   r4 -- r30;
// [Asm]   r1 -- r65;
// [Asm]   r1 -- r66;
// [Asm]   r12 -- r107;
// [Asm]   r1 -- r39;
// [Asm]   r2 -- r63;
// [Asm]   r1 -- r106;
// [Asm]   r79 -- r106;
// [Asm]   r2 -- r57;
// [Asm]   r4 -- r11;
// [Asm]   r6 -- r112;
// [Asm]   r3 -- r84;
// [Asm]   r79 -- r97;
// [Asm]   r22 -- r62;
// [Asm]   r4 -- r72;
// [Asm]   r2 -- r104;
// [Asm]   r21 -- r25;
// [Asm]   r3 -- r55;
// [Asm]   r22 -- r23;
// [Asm]   r12 -- r102;
// [Asm]   r1 -- r83;
// [Asm]   r23 -- r79;
// [Asm]   r6 -- r82;
// [Asm]   r22 -- r84;
// [Asm]   r1 -- r84;
// [Asm]   r12 -- r30;
// [Asm]   r51 -- r58;
// [Asm]   r24 -- r91;
// [Asm]   r4 -- r39;
// [Asm]   r1 -- r73;
// [Asm]   r2 -- r71;
// [Asm]   r79 -- r82;
// [Asm]   r3 -- r109;
// [Asm]   r2 -- r110;
// [Asm]   r74 -- r106;
// [Asm]   r5 -- r76;
// [Asm]   r37 -- r41;
// [Asm]   r12 -- r18;
// [Asm]   r1 -- r93;
// [Asm]   r3 -- r44;
// [Asm]   r4 -- r111;
// [Asm]   r6 -- r81;
// [Asm]   r12 -- r29;
// [Asm]   r5 -- r82;
// [Asm]   r3 -- r91;
// [Asm]   r12 -- r32;
// [Asm]   r12 -- r84;
// [Asm]   r1 -- r90;
// [Asm]   r5 -- r33;
// [Asm]   r22 -- r96;
// [Asm]   r4 -- r34;
// [Asm]   r1 -- r30;
// [Asm]   r4 -- r97;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r2 -- r81;
// [Asm]   r5 -- r85;
// [Asm]   r5 -- r22;
// [Asm]   r6 -- r100;
// [Asm]   r7 -- r84;
// [Asm]   r1 -- r45;
// [Asm]   r1 -- r52;
// [Asm]   r5 -- r29;
// [Asm]   r6 -- r101;
// [Asm]   r23 -- r104;
// [Asm]   r51 -- r63;
// [Asm]   r6 -- r89;
// [Asm]   r3 -- r5;
// [Asm]   r27 -- r84;
// [Asm]   r4 -- r31;
// [Asm]   r23 -- r53;
// [Asm]   r12 -- r103;
// [Asm]   r24 -- r105;
// [Asm]   r3 -- r92;
// [Asm]   r2 -- r25;
// [Asm]   r6 -- r60;
// [Asm]   r22 -- r53;
// [Asm]   r22 -- r100;
// [Asm]   r2 -- r83;
// [Asm]   r22 -- r34;
// [Asm]   r1 -- r77;
// [Asm]   r26 -- r84;
// [Asm]   r12 -- r104;
// [Asm]   r53 -- r63;
// [Asm]   r64 -- r108;
// [Asm]   r84 -- r86;
// [Asm]   r51 -- r54;
// [Asm]   r4 -- r56;
// [Asm]   r0 -- r1;
// [Asm]   r5 -- r101;
// [Asm]   r23 -- r24;
// [Asm]   r4 -- r25;
// [Asm]   r3 -- r49;
// [Asm]   r2 -- r36;
// [Asm]   r1 -- r80;
// [Asm]   r25 -- r51;
// [Asm]   r79 -- r83;
// [Asm]   r6 -- r23;
// [Asm]   r4 -- r14;
// [Asm]   r3 -- r46;
// [Asm]   r14 -- r15;
// [Asm]   r1 -- r111;
// [Asm]   r51 -- r52;
// [Asm]   r33 -- r79;
// [Asm]   r84 -- r96;
// [Asm]   r3 -- r45;
// [Asm]   r4 -- r106;
// [Asm]   r2 -- r26;
// [Asm]   r4 -- r23;
// [Asm]   r25 -- r53;
// [Asm]   r1 -- r34;
// [Asm]   r12 -- r72;
// [Asm]   r6 -- r33;
// [Asm]   r2 -- r65;
// [Asm]   r2 -- r80;
// [Asm]   r84 -- r105;
// [Asm]   r23 -- r88;
// [Asm]   r6 -- r22;
// [Asm]   r74 -- r100;
// [Asm]   r79 -- r80;
// [Asm]   r74 -- r101;
// [Asm]   r2 -- r44;
// [Asm]   r3 -- r57;
// [Asm]   r30 -- r53;
// [Asm]   r4 -- r71;
// [Asm]   r2 -- r40;
// [Asm]   r6 -- r27;
// [Asm]   r4 -- r80;
// [Asm]   r74 -- r102;
// [Asm]   r4 -- r15;
// [Asm]   r12 -- r13;
// [Asm]   r5 -- r28;
// [Asm]   r12 -- r33;
// [Asm]   r1 -- r81;
// [Asm]   r0 -- r3;
// [Asm]   r1 -- r94;
// [Asm]   r22 -- r28;
// [Asm]   r6 -- r87;
// [Asm]   r6 -- r57;
// [Asm]   r7 -- r85;
// [Asm]   r4 -- r109;
// [Asm]   r5 -- r70;
// [Asm]   r81 -- r83;
// [Asm]   r104 -- r105;
// [Asm]   r12 -- r98;
// [Asm]   r2 -- r30;
// [Asm]   r5 -- r98;
// [Asm]   r74 -- r97;
// [Asm]   r22 -- r33;
// [Asm]   r7 -- r12;
// [Asm]   r1 -- r54;
// [Asm]   r2 -- r39;
// [Asm]   r6 -- r71;
// [Asm]   r6 -- r21;
// [Asm]   r4 -- r87;
// [Asm]   r4 -- r38;
// [Asm]   r2 -- r94;
// [Asm]   r4 -- r66;
// [Asm]   r1 -- r12;
// [Asm]   r6 -- r47;
// [Asm]   r23 -- r100;
// [Asm]   r1 -- r4;
// [Asm]   r2 -- r95;
// [Asm]   r3 -- r100;
// [Asm]   r4 -- r105;
// [Asm]   r1 -- r18;
// [Asm]   r84 -- r95;
// [Asm]   r99 -- r100;
// [Asm]   r2 -- r10;
// [Asm]   r79 -- r96;
// [Asm]   r1 -- r69;
// [Asm]   r6 -- r109;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r111;
// [Asm]   r89 -- r90;
// [Asm]   r3 -- r24;
// [Asm]   r5 -- r73;
// [Asm]   r4 -- r40;
// [Asm]   r3 -- r51;
// [Asm]   r3 -- r34;
// [Asm]   r65 -- r66;
// [Asm]   r51 -- r60;
// [Asm]   r2 -- r74;
// [Asm]   r37 -- r40;
// [Asm]   r1 -- r46;
// [Asm]   r29 -- r74;
// [Asm]   r31 -- r84;
// [Asm]   r4 -- r98;
// [Asm]   r7 -- r10;
// [Asm]   r21 -- r32;
// [Asm]   r2 -- r47;
// [Asm]   r3 -- r80;
// [Asm]   r12 -- r74;
// [Asm]   r6 -- r94;
// [Asm]   r3 -- r82;
// [Asm]   r7 -- r70;
// [Asm]   r1 -- r27;
// [Asm]   r2 -- r79;
// [Asm]   r51 -- r57;
// [Asm]   r3 -- r102;
// [Asm]   r4 -- r50;
// [Asm]   r12 -- r99;
// [Asm]   r4 -- r8;
// [Asm]   r64 -- r94;
// [Asm]   r74 -- r87;
// [Asm]   r1 -- r49;
// [Asm]   r2 -- r24;
// [Asm]   r51 -- r56;
// [Asm]   r3 -- r58;
// [Asm]   r2 -- r70;
// [Asm]   r2 -- r87;
// [Asm]   r6 -- r58;
// [Asm]   r84 -- r101;
// [Asm]   r1 -- r58;
// [Asm]   r4 -- r24;
// [Asm]   r22 -- r101;
// [Asm]   r22 -- r37;
// [Asm]   r6 -- r15;
// [Asm]   r51 -- r62;
// [Asm]   r5 -- r103;
// [Asm]   r12 -- r80;
// [Asm]   r6 -- r44;
// [Asm]   r5 -- r77;
// [Asm]   r12 -- r15;
// [Asm]   r34 -- r79;
// [Asm]   r4 -- r59;
// [Asm]   r3 -- r12;
// [Asm]   r6 -- r79;
// [Asm]   r74 -- r84;
// [Asm]   r23 -- r62;
// [Asm]   r6 -- r51;
// [Asm]   r1 -- r78;
// [Asm]   r5 -- r84;
// [Asm]   r24 -- r101;
// [Asm]   r34 -- r84;
// [Asm]   r3 -- r28;
// [Asm]   r53 -- r60;
// [Asm]   r23 -- r91;
// [Asm]   r3 -- r106;
// [Asm]   r7 -- r9;
// [Asm]   r6 -- r40;
// [Asm]   r4 -- r60;
// [Asm]   r1 -- r28;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r34;
// [Asm]   r84 -- r107;
// [Asm]   r3 -- r111;
// [Asm]   r12 -- r71;
// [Asm]   r53 -- r56;
// [Asm]   r79 -- r103;
// [Asm]   r22 -- r79;
// [Asm]   r4 -- r73;
// [Asm]   r22 -- r30;
// [Asm]   r21 -- r31;
// [Asm]   r12 -- r31;
// [Asm]   r2 -- r56;
// [Asm]   r34 -- r74;
// [Asm]   r3 -- r64;
// [Asm]   r28 -- r79;
// [Asm]   r58 -- r100;
// [Asm]   r3 -- r81;
// [Asm]   r12 -- r100;
// [Asm]   r2 -- r109;
// [Asm]   r3 -- r75;
// [Asm]   r51 -- r59;
// [Asm]   r4 -- r96;
// [Asm]   r4 -- r77;
// [Asm]   r23 -- r44;
// [Asm]   r4 -- r17;
// [Asm]   r29 -- r84;
// [Asm]   r24 -- r97;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r63;
// [Asm]   r12 -- r26;
// [Asm]   r19 -- r20;
// [Asm]   r21 -- r24;
// [Asm]   r12 -- r70;
// [Asm]   r96 -- r97;
// [Asm]   r3 -- r52;
// [Asm]   r2 -- r31;
// [Asm]   r1 -- r26;
// [Asm]   r6 -- r75;
// [Asm]   r3 -- r15;
// [Asm]   r84 -- r98;
// [Asm]   r23 -- r51;
// [Asm]   r3 -- r16;
// [Asm]   r39 -- r41;
// [Asm]   r4 -- r51;
// [Asm]   r3 -- r53;
// [Asm]   r2 -- r49;
// [Asm]   r27 -- r51;
// [Asm]   r84 -- r106;
// [Asm]   r7 -- r72;
// [Asm]   r12 -- r85;
// [Asm]   r3 -- r62;
// [Asm]   r4 -- r64;
// [Asm]   r22 -- r97;
// [Asm]   r79 -- r105;
// [Asm]   r3 -- r11;
// [Asm]   r74 -- r81;
// [Asm]   r1 -- r102;
// [Asm]   r2 -- r7;
// [Asm]   r4 -- r57;
// [Asm]   r1 -- r50;
// [Asm]   r64 -- r65;
// [Asm]   r6 -- r86;
// [Asm]   r3 -- r8;
// [Asm]   r3 -- r85;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r112;
// [Asm]   r22 -- r25;
// [Asm]   r32 -- r79;
// [Asm]   r5 -- r6;
// [Asm]   r1 -- r48;
// [Asm]   r1 -- r64;
// [Asm]   r3 -- r74;
// [Asm]   r7 -- r79;
// [Asm]   r3 -- r39;
// [Asm]   r5 -- r106;
// [Asm]   r6 -- r104;
// [Asm]   r5 -- r58;
// [Asm]   r22 -- r27;
// [Asm]   r1 -- r107;
// [Asm]   r12 -- r58;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r33;
// [Asm]   r3 -- r71;
// [Asm]   r2 -- r13;
// [Asm]   r74 -- r77;
// [Asm]   r1 -- r51;
// [Asm]   r3 -- r17;
// [Asm]   r39 -- r40;
// [Asm]   r6 -- r72;
// [Asm]   r1 -- r41;
// [Asm]   r1 -- r38;
// [Asm]   r2 -- r96;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r35;
// [Asm]   r1 -- r5;
// [Asm]   r2 -- r86;
// [Asm]   r3 -- r94;
// [Asm]   r4 -- r13;
// [Asm]   r28 -- r74;
// [Asm]   r3 -- r25;
// [Asm]   r3 -- r110;
// [Asm]   r4 -- r76;
// [Asm]   r4 -- r62;
// [Asm]   r1 -- r109;
// [Asm]   r6 -- r41;
// [Asm]   r1 -- r75;
// [Asm]   r6 -- r106;
// [Asm]   r74 -- r75;
// [Asm]   r53 -- r64;
// [Asm]   r6 -- r98;
// [Asm]   r2 -- r84;
// [Asm]   r3 -- r105;
// [Asm]   r4 -- r81;
// [Asm]   r64 -- r111;
// [Asm]   r6 -- r53;
// [Asm]   r27 -- r53;
// [Asm]   r74 -- r96;
// [Asm]   r32 -- r74;
// [Asm]   r6 -- r59;
// [Asm]   r3 -- r22;
// [Asm]   r23 -- r97;
// [Asm]   r6 -- r19;
// [Asm]   r6 -- r108;
// [Asm]   r49 -- r53;
// [Asm]   r4 -- r55;
// [Asm]   r38 -- r41;
// [Asm]   r4 -- r99;
// [Asm]   r1 -- r79;
// [Asm]   r2 -- r89;
// [Asm]   r1 -- r97;
// [Asm]   r12 -- r22;
// [Asm]   r3 -- r29;
// [Asm]   r3 -- r66;
// [Asm]   r79 -- r99;
// [Asm]   r5 -- r81;
// [Asm]   r1 -- r95;
// [Asm]   r26 -- r74;
// [Asm]   r4 -- r36;
// [Asm]   r58 -- r79;
// [Asm]   r94 -- r111;
// [Asm]   r22 -- r32;
// [Asm]   r2 -- r75;
// [Asm]   r6 -- r39;
// [Asm]   r22 -- r104;
// [Asm]   r5 -- r25;
// [Asm]   r2 -- r93;
// [Asm]   r6 -- r74;
// [Asm]   r12 -- r87;
// [Asm]   r4 -- r74;
// [Asm]   r4 -- r10;
// [Asm]   r79 -- r107;
// [Asm]   r23 -- r96;
// [Asm]   r2 -- r27;
// [Asm]   r12 -- r106;
// [Asm]   r84 -- r104;
// [Asm]   r86 -- r87;
// [Asm]   r84 -- r103;
// [Asm]   r4 -- r108;
// [Asm]   r2 -- r62;
// [Asm]   r3 -- r67;
// [Asm]   r29 -- r79;
// [Asm]   r4 -- r102;
// [Asm]   r6 -- r36;
// [Asm]   r1 -- r37;
// [Asm]   r37 -- r38;
// [Asm]   r1 -- r98;
// [Asm]   r4 -- r58;
// [Asm]   r5 -- r95;
// [Asm]   r103 -- r105;
// [Asm]   r1 -- r19;
// [Asm]   r27 -- r79;
// [Asm]   r6 -- r63;
// [Asm]   r29 -- r51;
// [Asm]   r2 -- r16;
// [Asm]   r51 -- r53;
// [Asm]   r5 -- r92;
// [Asm]   r1 -- r62;
// [Asm]   r1 -- r67;
// [Asm]   r79 -- r101;
// [Asm]   r2 -- r101;
// [Asm]   r2 -- r59;
// [Asm]   r4 -- r107;
// [Asm]   r2 -- r92;
// [Asm]   r2 -- r54;
// [Asm]   r32 -- r53;
// [Asm]   r2 -- r68;
// [Asm]   r4 -- r33;
// [Asm]   r12 -- r93;
// [Asm]   r3 -- r30;
// [Asm]   r5 -- r83;
// [Asm]   r12 -- r28;
// [Asm]   r3 -- r13;
// [Asm]   r74 -- r98;
// [Asm]   r6 -- r10;
// [Asm]   r79 -- r104;
// [Asm]   r3 -- r10;
// [Asm]   r5 -- r91;
// [Asm]   r4 -- r104;
// [Asm]   r4 -- r12;
// [Asm]   r4 -- r92;
// [Asm]   r4 -- r84;
// [Asm]   r79 -- r87;
// [Asm]   r1 -- r108;
// [Asm]   r1 -- r6;
// [Asm]   r21 -- r22;
// [Asm]   r12 -- r78;
// [Asm]   r22 -- r91;
// [Asm]   r2 -- r23;
// [Asm]   r7 -- r82;
// [Asm]   r6 -- r92;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r32 -- r84;
// [Asm]   r53 -- r62;
// [Asm]   r4 -- r95;
// [Asm]   r84 -- r97;
// [Asm]   r6 -- r49;
// [Asm]   r49 -- r55;
// [Asm]   r1 -- r53;
// [Asm]   r5 -- r79;
// [Asm]   r74 -- r83;
// [Asm]   r3 -- r87;
// [Asm]   r1 -- r15;
// [Asm]   r3 -- r47;
// [Asm]   r2 -- r55;
// [Asm]   r4 -- r112;
// [Asm]   r79 -- r95;
// [Asm]   r6 -- r12;
// [Asm]   r7 -- r81;
// [Asm]   r22 -- r24;
// [Asm]   r6 -- r24;
// [Asm]   r28 -- r53;
// [Asm]   r7 -- r73;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r51 -- r61;
// [Asm]   r6 -- r37;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r53 -- r61;
// [Asm]   r6 -- r28;
// [Asm]   r4 -- r85;
// [Asm]   r1 -- r59;
// [Asm]   r49 -- r51;
// [Asm]   r1 -- r74;
// [Asm]   r7 -- r11;
// [Asm]   r6 -- r67;
// [Asm]   r6 -- r90;
// [Asm]   r95 -- r97;
// [Asm]   r4 -- r47;
// [Asm]   r2 -- r100;
// [Asm]   r40 -- r41;
// [Asm]   r3 -- r36;
// [Asm]   r12 -- r14;
// [Asm]   r12 -- r27;
// [Asm]   r3 -- r54;
// [Asm]   r3 -- r93;
// [Asm]   r1 -- r3;
// [Asm]   r5 -- r30;
// [Asm]   r1 -- r82;
// [Asm]   r1 -- r92;
// [Asm]   r49 -- r50;
// [Asm]   r33 -- r51;
// [Asm]   r4 -- r52;
// [Asm]   r27 -- r74;
// [Asm]   r4 -- r19;
// [Asm]   r2 -- r64;
// [Asm]   r68 -- r69;
// [Asm]   r4 -- r53;
// [Asm]   r79 -- r81;
// [Asm]   r2 -- r32;
// [Asm]   r4 -- r75;
// [Asm]   r81 -- r82;
// [Asm]   r6 -- r73;
// [Asm]   r4 -- r68;
// [Asm]   r100 -- r101;
// [Asm]   r3 -- r98;
// [Asm]   r12 -- r79;
// [Asm]   r6 -- r35;
// [Asm]   r12 -- r77;
// [Asm]   r1 -- r86;
// [Asm]   r1 -- r57;
// [Asm]   r5 -- r72;
// [Asm]   r99 -- r101;
// [Asm]   r51 -- r55;
// [Asm]   r4 -- r103;
// [Asm]   r79 -- r91;
// [Asm]   r22 -- r59;
// [Asm]   r2 -- r99;
// [Asm]   r3 -- r37;
// [Asm]   r2 -- r37;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r84 -- r85;
// [Asm]   r3 -- r68;
// [Asm]   r79 -- r85;
// [Asm]   r6 -- r85;
// [Asm]   r2 -- r34;
// [Asm]   r5 -- r31;
// [Asm]   r3 -- r78;
// [Asm]   r2 -- r6;
// [Asm]   r71 -- r72;
// [Asm]   r21 -- r33;
// [Asm]   r6 -- r91;
// [Asm]   r4 -- r67;
// [Asm]   r4 -- r65;
// [Asm]   r5 -- r78;
// [Asm]   r2 -- r12;
// [Asm]   r6 -- r64;
// [Asm]   r7 -- r80;
// [Asm]   r2 -- r108;
// [Asm]   r6 -- r65;
// [Asm]   r0 -- r4;
// [Asm]   r49 -- r56;
// [Asm]   r24 -- r53;
// [Asm]   r6 -- r76;
// [Asm]   r7 -- r76;
// [Asm]   r3 -- r19;
// [Asm]   r53 -- r54;
// [Asm]   r1 -- r8;
// [Asm]   r3 -- r101;
// [Asm]   r3 -- r38;
// [Asm]   r1 -- r47;
// [Asm]   r5 -- r71;
// [Asm]   r2 -- r90;
// [Asm]   r12 -- r101;
// [Asm]   r81 -- r84;
// [Asm]   r6 -- r30;
// [Asm]   r1 -- r22;
// [Asm]   r2 -- r52;
// [Asm]   r1 -- r13;
// [Asm]   r7 -- r74;
// [Asm]   r1 -- r104;
// [Asm]   r12 -- r82;
// [Asm]   r30 -- r74;
// [Asm]   r6 -- r99;
// [Asm]   r6 -- r20;
// [Asm]   r21 -- r23;
// [Asm]   r30 -- r84;
// [Asm]   r58 -- r103;
// [Asm]   r3 -- r50;
// [Asm]   r2 -- r107;
// [Asm]   r2 -- r102;
// [Asm]   r3 -- r21;
// [Asm]   r21 -- r30;
// [Asm]   r12 -- r73;
// [Asm]   r5 -- r9;
// [Asm]   r12 -- r76;
// [Asm]   r49 -- r52;
// [Asm]   r4 -- r32;
// [Asm]   r1 -- r29;
// [Asm]   r3 -- r20;
// [Asm]   r2 -- r77;
// [Asm]   r1 -- r25;
// [Asm]   r1 -- r61;
// [Asm]   r84 -- r99;
// [Asm]   r2 -- r17;
// [Asm]   r23 -- r84;
// [Asm]   r3 -- r73;
// [Asm]   r4 -- r82;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r35;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r93;
// [Asm]   r26 -- r53;
// [Asm]   r1 -- r100;
// [Asm]   r2 -- r20;
// [Asm]   r1 -- r76;
// [Asm]   r58 -- r104;
// [Asm]   r53 -- r58;
// [Asm]   r1 -- r71;
// [Asm]   r58 -- r95;
// [Asm]   r12 -- r105;
// [Asm]   r22 -- r61;
// [Asm]   r1 -- r7;
// [Asm]   r2 -- r85;
// [Asm]   r1 -- r56;
// [Asm]   r3 -- r60;
// [Asm]   r3 -- r79;
// [Asm]   r3 -- r108;
// [Asm]   r1 -- r63;
// [Asm]   r5 -- r96;
// [Asm]   r6 -- r29;
// [Asm]   r6 -- r107;
// [Asm]   r5 -- r99;
// [Asm]   r1 -- r91;
// [Asm]   r12 -- r109;
// [Asm]   r4 -- r27;
// [Asm]   r67 -- r69;
// [Asm]   r7 -- r83;
// [Asm]   r103 -- r104;
// [Asm]   r4 -- r21;
// [Asm]   r2 -- r76;
// [Asm]   r12 -- r24;
// [Asm]   r6 -- r13;
// [Asm]   r31 -- r51;
// [Asm]   r3 -- r76;
// [Asm]   r2 -- r33;
// [Asm]   r3 -- r96;
// [Asm]   r3 -- r4;
// [Asm]   r5 -- r75;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r6 -- r93;
// [Asm]   r21 -- r27;
// [Asm]   r24 -- r88;
// [Asm]   r74 -- r91;
// [Asm]   r2 -- r8;
// [Asm]   r22 -- r74;
// [Asm]   r6 -- r103;
// [Asm]   r6 -- r31;
// [Asm]   r6 -- r78;
// [Asm]   r95 -- r96;
// [Asm]   r12 -- r95;
// [Asm]   r6 -- r45;
// [Asm]   r28 -- r84;
// [Asm]   r74 -- r78;
// [Asm]   r9 -- r10;
// [Asm]   r1 -- r44;
// [Asm]   r3 -- r61;
// [Asm]   r7 -- r8;
// [Asm]   r4 -- r94;
// [Asm]   r6 -- r97;
// [Asm]   r6 -- r61;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r106;
// [Asm]   r29 -- r53;
// [Asm]   r3 -- r88;
// [Asm]   r2 -- r53;
// [Asm]   r5 -- r34;
// [Asm]   r31 -- r79;
// [Asm]   r2 -- r61;
// [Asm]   r12 -- r92;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r64 -- r66;
// [Asm]   r74 -- r76;
// [Asm]   r5 -- r100;
// [Asm]   r64 -- r110;
// [Asm]   r28 -- r51;
// [Asm]   r4 -- r37;
// [Asm]   r2 -- r18;
// [Asm]   r74 -- r95;
// [Asm]   r2 -- r105;
// [Asm]   r23 -- r74;
// [Asm]   r5 -- r13;
// [Asm]   r22 -- r29;
// [Asm]   r1 -- r32;
// [Asm]   r7 -- r13;
// [Asm]   r2 -- r82;
// [Asm]   r12 -- r96;
// [Asm]   r58 -- r96;
// [Asm]   r33 -- r53;
// [Asm]   r3 -- r90;
// [Asm]   r6 -- r26;
// [Asm]   r84 -- r102;
// [Asm]   r1 -- r101;
// [Asm]   r3 -- r77;
// [Asm]   r4 -- r70;
// [Asm]   r26 -- r51;
// [Asm]   r1 -- r96;
// [Asm]   r4 -- r46;
// [Asm]   r12 -- r75;
// [Asm]   r4 -- r45;
// [Asm]   r37 -- r44;
// [Asm]   r2 -- r66;
// [Asm]   r94 -- r110;
// [Asm]   r3 -- r72;
// [Asm]   r24 -- r74;
// [Asm]   r3 -- r41;
// [Asm]   r2 -- r21;
// [Asm]   r5 -- r102;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r21 -- r26;
// [Asm]   r58 -- r74;
// [Asm]   r33 -- r74;
// [Asm]   r3 -- r59;
// [Asm]   r74 -- r104;
// [Asm]   r5 -- r27;
// [Asm]   r74 -- r80;
// [Asm]   r38 -- r39;
// [Asm]   r79 -- r102;
// [Asm]   r1 -- r14;
// [Asm]   r2 -- r19;
// [Asm]   r4 -- r26;
// [Asm]   r22 -- r51;
// [Asm]   r12 -- r83;
// [Asm]   r4 -- r61;
// [Asm]   comment = "0:v156-> 1:v14-> 2:v13-> 3:zero-> 4:v15-> 5:v11-> 6:s11-> 7:v22-> 8:v153-> 9:v23-> 10:v151-> 11:v24-> 12:v25-> 13:v149-> 70:v147-> 71:v27-> 72:v145-> 73:v28-> 74:v29-> 75:v142-> 76:v30-> 77:v140-> 78:v31-> 79:v32-> 81:v12-> 82:v138-> 85:v135-> 84:v9-> 22:a0-> 23:a1-> 24:a2-> 97:v127-> 96:v38-> 101:v123-> 100:v41-> 105:v119-> 104:v44-> 58:s10-> 95:v37-> 99:v40-> 103:v43-> 91:v117-> 25:t0-> 26:t1-> 27:t2-> 51:v6-> 53:v5-> 28:t3-> 29:t4-> 21:v77-> 30:a3-> 31:a4-> 32:a5-> 33:a6-> 34:a7-> 83:v133-> 86:v35-> 87:v131-> 98:v39-> 102:v42-> 106:v45-> 107:v46-> 62:v69-> 61:v68-> 80:v136-> 59:v96-> 44:v60-> 37:v54-> 49:v63-> 54:v103-> 57:v100-> 56:v10-> 55:v98-> 60:v67-> 63:v70-> 92:v47-> 93:v48-> 15:v51-> 14:v113-> 16:v7-> 18:v115-> 52:v101-> 64:v71-> 65:v72-> 66:v90-> 94:v74-> 108:v89-> 109:v49-> 110:v87-> 111:v8-> 17:v53-> 19:v16-> 20:v158-> 35:v79-> 38:v56-> 39:v57-> 40:v58-> 41:v59-> 45:v61-> 46:v62-> 47:v106-> 48:v107-> 50:v104-> 112:v76-> 36:v80-> 67:v18-> 68:v19-> 69:v20-> 88:v2-> 89:v3-> 90:v4-> 42:v81-> 43:v82"
// [Asm]   comment = "v156<-a0;v62<-a0;v30<-a1;v96<-a1;v23<-a1;v35<-a0;v60<-a2;v5<-s4;v10<-a2;v151<-a2;v8<-a2;v11<-s3;v103<-a1;v82<-a0;v2<-a0;v136<-a1;v57<-a1;v40<-a0;v53<-a0;v101<-a1;v72<-a1;v32<-s6;v158<-a1;v68<-a1;v89<-a1;v138<-a2;v18<-a0;v142<-a1;v140<-a2;v69<-a2;v58<-a2;v24<-a1;v87<-a2;v119<-a3;v133<-a2;v43<-a0;v113<-a1;v6<-s3;v38<-a2;v31<-a1;v98<-a1;v7<-a1;v77<-s3;v67<-a0;v48<-a0;v28<-a1;v56<-a0;v145<-a2;v44<-a2;v131<-a1;v41<-a2;v135<-a2;v106<-a0;v149<-a1;v81<-a0;v15<-s2;v37<-a0;v79<-a0;v22<-a0;v71<-a0;v153<-a1;v76<-a0;v80<-a0;v90<-a2;v51<-a0;v63<-a0;v29<-s5;v100<-a1;v19<-a1;v39<-a0;v117<-a3;v147<-a1;v107<-a0;v25<-s4;v54<-a1;v42<-a0;v45<-a0;v49<-a0;v14<-s0;v59<-a3;v27<-a1;v20<-a2;v9<-s7;v3<-a1;v104<-a1;v47<-a0;v61<-a0;v46<-a0;v70<-a0;v13<-s1;v115<-a0;v16<-a0;v127<-a3;v4<-a2;v12<-a1;v74<-a1;v123<-a3;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of quick_sort210_5"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v156, s11, -4 ->   addi a0, s11, -4
// [Asm] subst   andi v11, v156, -8 ->   andi s3, a0, -8
// [Asm] subst   mv s11, v11 ->   mv s11, s3
// [Asm] subst   sw zero, 0(v11) ->   sw zero, 0(s3)
// [Asm] subst   sub v22, v15, v14 ->   sub a0, s2, s0
// [Asm] subst   li v153, 4 ->   li a1, 4
// [Asm] subst   div v23, v22, v153 ->   div a1, a0, a1
// [Asm] subst   li v151, 2 ->   li a2, 2
// [Asm] subst   mul v24, v23, v151 ->   mul a1, a1, a2
// [Asm] subst   add v25, v14, v24 ->   add s4, s0, a1
// [Asm] subst   li v149, 8 ->   li a1, 8
// [Asm] subst   blt v22, v149, .quick_sort210_5_28 ->   blt a0, a1, .quick_sort210_5_28
// [Asm] subst   addi v113, s11, -8 ->   addi a1, s11, -8
// [Asm] subst   andi v7, v113, -8 ->   andi a1, a1, -8
// [Asm] subst   mv s11, v7 ->   mv s11, a1
// [Asm] subst   sw v25, 0(v7) ->   sw s4, 0(a1)
// [Asm] subst   sw v51, 4(v7) ->   sw a0, 4(a1)
// [Asm] subst   mv v53, v7 ->   mv a0, a1
// [Asm] subst   li v115, 1 ->   li a0, 1
// [Asm] subst   sub v16, v15, v14 ->   sub a0, s2, s0
// [Asm] subst   li v158, 16 ->   li a1, 16
// [Asm] subst   blt v158, v16, .quick_sort210_5_2 ->   blt a1, a0, .quick_sort210_5_2
// [Asm] subst   lw v77, 0(v76) ->   lw s3, 0(a0)
// [Asm] subst   mv a0, v13 ->   mv a0, s1
// [Asm] subst   mv a1, v14 ->   mv a1, s0
// [Asm] subst   mv a2, v77 ->   mv a2, s3
// [Asm] subst   call quick_sort210_5 ->   call quick_sort210_5
// [Asm] subst   addi v80, v77, 1 ->   addi a0, s3, 1
// [Asm] subst   mv v14, v80 ->   mv s0, a0
// [Asm] subst   j .quick_sort210_5_0 ->   j .quick_sort210_5_0
// [Asm] subst   lw v54, 0(v53) ->   lw a1, 0(a0)
// [Asm] subst   mv v56, v13 ->   mv a0, s1
// [Asm] subst   mv v58, v14 ->   mv a2, s0
// [Asm] subst   mv v59, v15 ->   mv a3, s2
// [Asm] subst   mv a0, v13 ->   mv a0, s1
// [Asm] subst   mv a1, v14 ->   mv a1, s0
// [Asm] subst   mv a2, v15 ->   mv a2, s2
// [Asm] subst   call insertion_sort30_2 ->   call insertion_sort30_2
// [Asm] subst   ret ->   ret
// [Asm] subst   addi v60, v15, -1 ->   addi a2, s2, -1
// [Asm] subst   mv a0, v13 ->   mv a0, s1
// [Asm] subst   call swap1_0 ->   call swap1_0
// [Asm] subst   addi v62, v15, -1 ->   addi a0, s2, -1
// [Asm] subst   slliw v106, v62, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v107, v13, v106 ->   add a0, s1, a0
// [Asm] subst   lw v63, 0(v107) ->   lw a0, 0(a0)
// [Asm] subst   addi v104, s11, -4 ->   addi a1, s11, -4
// [Asm] subst   andi v6, v104, -8 ->   andi s3, a1, -8
// [Asm] subst   mv s11, v6 ->   mv s11, s3
// [Asm] subst   sw v14, 0(v6) ->   sw s0, 0(s3)
// [Asm] subst   addi v101, s11, -4 ->   addi a1, s11, -4
// [Asm] subst   andi v5, v101, -8 ->   andi s4, a1, -8
// [Asm] subst   mv s11, v5 ->   mv s11, s4
// [Asm] subst   li v103, 1 ->   li a1, 1
// [Asm] subst   sw v103, 0(v5) ->   sw a1, 0(s4)
// [Asm] subst   addi v98, s11, -48 ->   addi a1, s11, -48
// [Asm] subst   andi v10, v98, -8 ->   andi a2, a1, -8
// [Asm] subst   mv s11, v10 ->   mv s11, a2
// [Asm] subst   la v100, aux86_16 ->   la a1, aux86_16
// [Asm] subst   sd v100, 0(v10) ->   sd a1, 0(a2)
// [Asm] subst   sd v15, 8(v10) ->   sd s2, 8(a2)
// [Asm] subst   sd v13, 16(v10) ->   sd s1, 16(a2)
// [Asm] subst   sd v63, 24(v10) ->   sd a0, 24(a2)
// [Asm] subst   sd v6, 32(v10) ->   sd s3, 32(a2)
// [Asm] subst   sd v5, 40(v10) ->   sd s4, 40(a2)
// [Asm] subst   mv s10, v10 ->   mv s10, a2
// [Asm] subst   ld v96, 0(v10) ->   ld a1, 0(a2)
// [Asm] subst   mv a0, v14 ->   mv a0, s0
// [Asm] subst   jalr v96 ->   jalr a1
// [Asm] subst   lw v68, 0(v6) ->   lw a1, 0(s3)
// [Asm] subst   addi v69, v15, -1 ->   addi a2, s2, -1
// [Asm] subst   mv a0, v13 ->   mv a0, s1
// [Asm] subst   call swap1_0 ->   call swap1_0
// [Asm] subst   lw v71, 0(v6) ->   lw a0, 0(s3)
// [Asm] subst   lw v72, 0(v5) ->   lw a1, 0(s4)
// [Asm] subst   li v90, 1 ->   li a2, 1
// [Asm] subst   bne v72, v90, .quick_sort210_5_13 ->   bne a1, a2, .quick_sort210_5_13
// [Asm] subst   mv v18, v13 ->   mv a0, s1
// [Asm] subst   mv v19, v14 ->   mv a1, s0
// [Asm] subst   mv v20, v15 ->   mv a2, s2
// [Asm] subst   li v147, 4 ->   li a1, 4
// [Asm] subst   div v27, v22, v147 ->   div a1, a0, a1
// [Asm] subst   li v145, 1 ->   li a2, 1
// [Asm] subst   mul v28, v27, v145 ->   mul a1, a1, a2
// [Asm] subst   add v29, v14, v28 ->   add s5, s0, a1
// [Asm] subst   li v142, 4 ->   li a1, 4
// [Asm] subst   div v30, v22, v142 ->   div a1, a0, a1
// [Asm] subst   li v140, 3 ->   li a2, 3
// [Asm] subst   mul v31, v30, v140 ->   mul a1, a1, a2
// [Asm] subst   add v32, v14, v31 ->   add s6, s0, a1
// [Asm] subst   addi v136, s11, -24 ->   addi a1, s11, -24
// [Asm] subst   andi v12, v136, -8 ->   andi a1, a1, -8
// [Asm] subst   mv s11, v12 ->   mv s11, a1
// [Asm] subst   la v138, sort_2157_19 ->   la a2, sort_2157_19
// [Asm] subst   sd v138, 0(v12) ->   sd a2, 0(a1)
// [Asm] subst   sd v13, 8(v12) ->   sd s1, 8(a1)
// [Asm] subst   sd v11, 16(v12) ->   sd s3, 16(a1)
// [Asm] subst   addi v133, s11, -16 ->   addi a2, s11, -16
// [Asm] subst   andi v9, v133, -8 ->   andi s7, a2, -8
// [Asm] subst   mv s11, v9 ->   mv s11, s7
// [Asm] subst   la v135, sort_3173_21 ->   la a2, sort_3173_21
// [Asm] subst   sd v135, 0(v9) ->   sd a2, 0(s7)
// [Asm] subst   sd v12, 8(v9) ->   sd a1, 8(s7)
// [Asm] subst   addi v35, v22, -1 ->   addi a0, a0, -1
// [Asm] subst   li v131, 50 ->   li a1, 50
// [Asm] subst   blt v35, v131, .quick_sort210_5_30 ->   blt a0, a1, .quick_sort210_5_30
// [Asm] subst   mv v51, zero ->   mv a0, zero
// [Asm] subst   j .quick_sort210_5_35 ->   j .quick_sort210_5_35
// [Asm] subst   mv v13, v2 ->   mv s1, a0
// [Asm] subst   mv v14, v3 ->   mv s0, a1
// [Asm] subst   mv v15, v4 ->   mv s2, a2
// [Asm] subst   mv s10, v9 ->   mv s10, s7
// [Asm] subst   ld v117, 0(v9) ->   ld a3, 0(s7)
// [Asm] subst   mv a0, v29 ->   mv a0, s5
// [Asm] subst   mv a1, v25 ->   mv a1, s4
// [Asm] subst   mv a2, v32 ->   mv a2, s6
// [Asm] subst   jalr v117 ->   jalr a3
// [Asm] subst   mv v74, zero ->   mv a1, zero
// [Asm] subst   j .quick_sort210_5_14 ->   j .quick_sort210_5_14
// [Asm] subst   addi v37, v29, -1 ->   addi a0, s5, -1
// [Asm] subst   addi v38, v29, 1 ->   addi a2, s5, 1
// [Asm] subst   mv s10, v9 ->   mv s10, s7
// [Asm] subst   ld v127, 0(v9) ->   ld a3, 0(s7)
// [Asm] subst   mv a1, v29 ->   mv a1, s5
// [Asm] subst   jalr v127 ->   jalr a3
// [Asm] subst   addi v40, v25, -1 ->   addi a0, s4, -1
// [Asm] subst   addi v41, v25, 1 ->   addi a2, s4, 1
// [Asm] subst   mv s10, v9 ->   mv s10, s7
// [Asm] subst   ld v123, 0(v9) ->   ld a3, 0(s7)
// [Asm] subst   mv a1, v25 ->   mv a1, s4
// [Asm] subst   jalr v123 ->   jalr a3
// [Asm] subst   addi v43, v32, -1 ->   addi a0, s6, -1
// [Asm] subst   addi v44, v32, 1 ->   addi a2, s6, 1
// [Asm] subst   mv s10, v9 ->   mv s10, s7
// [Asm] subst   ld v119, 0(v9) ->   ld a3, 0(s7)
// [Asm] subst   mv a1, v32 ->   mv a1, s6
// [Asm] subst   jalr v119 ->   jalr a3
// [Asm] subst   mv v46, zero ->   mv a0, zero
// [Asm] subst   j .quick_sort210_5_31 ->   j .quick_sort210_5_31
// [Asm] subst   li v89, 1 ->   li a1, 1
// [Asm] subst   lw v49, 0(v11) ->   lw a0, 0(s3)
// [Asm] subst   bne v49, zero, .quick_sort210_5_34 ->   bne a0, zero, .quick_sort210_5_34
// [Asm] subst   mv v48, zero ->   mv a0, zero
// [Asm] subst   j .quick_sort210_5_32 ->   j .quick_sort210_5_32
// [Asm] subst   addi v87, s11, -8 ->   addi a2, s11, -8
// [Asm] subst   andi v8, v87, -8 ->   andi a2, a2, -8
// [Asm] subst   mv s11, v8 ->   mv s11, a2
// [Asm] subst   sw v71, 0(v8) ->   sw a0, 0(a2)
// [Asm] subst   sw v74, 4(v8) ->   sw a1, 4(a2)
// [Asm] subst   mv v76, v8 ->   mv a0, a2
// [Asm] pre_assigned_registers: Mem(fref=f2, mref=m1) -> v6, Insn(iref=%3) -> v10, Mem(fref=f2, mref=m0) -> v5, Insn(iref=%2) -> v9, Self(fref=f2) -> v0, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%1) -> v8, FnParam(fref=f2, fpref=$f.0) -> v2, FnParam(fref=f2, fpref=$f.2) -> v4, Insn(iref=%0) -> v7
// [Asm] defs: []
// [Asm] live_set: [a0, a2, a1, s11]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, a2, s11, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v4, s11, v2]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v3, v4, v17, v2]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v5, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v5, v4, s11, v2]
// [Asm] move_origin: [v5]
// [Asm] defined: s11 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v3, v5, v19, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v5, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v5, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, v5, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v4, v5, v14, v3]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, v5, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v4, v6, v5, v3]
// [Asm] move_origin: [v6]
// [Asm] defined: s11 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v4, v6, v5, v16, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v6, v5, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6, v5, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v6, v9]
// [Asm] move_origin: [v6]
// [Asm] defined: s10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v9]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, a0]
// [Asm] move_origin: [v9]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [a0]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v10]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of insertion_sort30_2"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r20 [label="t4", color=blue];
// [Asm]   r23 [label="a5", color=blue];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r9 [label="v14 ← a0", color=green];
// [Asm]   r26 [label="v10 ← a0", color=green];
// [Asm]   r6 [label="v17 ← a3", color=green];
// [Asm]   r13 [label="s10", color=blue];
// [Asm]   r4 [label="v3 ← a1", color=green];
// [Asm]   r1 [label="a2", color=blue];
// [Asm]   r11 [label="v16 ← a4", color=green];
// [Asm]   r7 [label="v5 ← a3", color=green];
// [Asm]   r10 [label="v6 ← a0", color=green];
// [Asm]   r22 [label="a4", color=blue];
// [Asm]   r14 [label="v11 ← a2", color=green];
// [Asm]   r8 [label="v19 ← a4", color=green];
// [Asm]   r5 [label="v4 ← a2", color=green];
// [Asm]   r24 [label="a6", color=blue];
// [Asm]   r15 [label="a0", color=blue];
// [Asm]   r25 [label="a7", color=blue];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="t0", color=blue];
// [Asm]   r18 [label="t2", color=blue];
// [Asm]   r19 [label="t3", color=blue];
// [Asm]   r17 [label="t1", color=blue];
// [Asm]   r21 [label="a3", color=blue];
// [Asm]   r12 [label="v9 ← a1", color=green];
// [Asm]   r15 -- r18;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r12 -- r13;
// [Asm]   r15 -- r17;
// [Asm]   r2 -- r15;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r9;
// [Asm]   r15 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r10 -- r12;
// [Asm]   r5 -- r8;
// [Asm]   r0 -- r8;
// [Asm]   r5 -- r10;
// [Asm]   r1 -- r4;
// [Asm]   r7 -- r10;
// [Asm]   r15 -- r22;
// [Asm]   r10 -- r11;
// [Asm]   r7 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r15 -- r24;
// [Asm]   r4 -- r7;
// [Asm]   r1 -- r15;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r15 -- r23;
// [Asm]   r12 -- r14;
// [Asm]   r3 -- r7;
// [Asm]   r0 -- r4;
// [Asm]   r7 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r5 -- r11;
// [Asm]   r7 -- r8;
// [Asm]   r0 -- r7;
// [Asm]   r15 -- r16;
// [Asm]   r15 -- r20;
// [Asm]   r15 -- r19;
// [Asm]   r15 -- r25;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r9;
// [Asm]   r14 -- r15;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   comment = "0:v2-> 1:a2-> 4:v3-> 3:s11-> 5:v4-> 7:v5-> 8:v19-> 6:v17-> 9:v14-> 10:v6-> 11:v16-> 2:a1-> 15:a0-> 12:v9-> 14:v11-> 13:s10-> 16:t0-> 17:t1-> 18:t2-> 19:t3-> 20:t4-> 21:a3-> 22:a4-> 23:a5-> 24:a6-> 25:a7-> 26:v10"
// [Asm]   comment = "v2<-a0;v14<-a0;v10<-a0;v17<-a3;v3<-a1;v16<-a4;v5<-a3;v6<-a0;v11<-a2;v19<-a4;v4<-a2;v9<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of insertion_sort30_2"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v17, s11, -24 ->   addi a3, s11, -24
// [Asm] subst   andi v5, v17, -8 ->   andi a3, a3, -8
// [Asm] subst   mv s11, v5 ->   mv s11, a3
// [Asm] subst   la v19, g37_11 ->   la a4, g37_11
// [Asm] subst   sd v19, 0(v5) ->   sd a4, 0(a3)
// [Asm] subst   sd v3, 8(v5) ->   sd a1, 8(a3)
// [Asm] subst   sd v2, 16(v5) ->   sd a0, 16(a3)
// [Asm] subst   addi v14, s11, -24 ->   addi a0, s11, -24
// [Asm] subst   andi v6, v14, -8 ->   andi a0, a0, -8
// [Asm] subst   mv s11, v6 ->   mv s11, a0
// [Asm] subst   la v16, f54_13 ->   la a4, f54_13
// [Asm] subst   sd v16, 0(v6) ->   sd a4, 0(a0)
// [Asm] subst   sd v4, 8(v6) ->   sd a2, 8(a0)
// [Asm] subst   sd v5, 16(v6) ->   sd a3, 16(a0)
// [Asm] subst   addi v9, v3, 1 ->   addi a1, a1, 1
// [Asm] subst   mv s10, v6 ->   mv s10, a0
// [Asm] subst   ld v11, 0(v6) ->   ld a2, 0(a0)
// [Asm] subst   mv a0, v9 ->   mv a0, a1
// [Asm] subst   jalr v11 ->   jalr a2
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Mem(fref=f7, mref=m0) -> v2, Insn(iref=%3) -> v7, Mem(fref=f7, mref=m1) -> v3, Self(fref=f7) -> v0, Insn(iref=%2) -> v6, Insn(iref=%1) -> v5, Insn(iref=%5) -> v9, Insn(iref=%0) -> v4, Insn(iref=%4) -> v8
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, s11]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [zero, v4, s11]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v4, s11]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [zero, v4, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v18, zero, v4]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v4, s11, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, v4, a1, s11, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v4, a1, s11, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a2]
// [Asm] live_set: [zero, a0, v4, a2, a1, s11, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v14]
// [Asm] live_set: [v4, v14, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: [v3]
// [Asm] defined: s11 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v3, v4, v16, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: [v3]
// [Asm] defined: s10 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v4, v12, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v12, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, v12, zero, a0, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v4, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, zero, a0, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, zero, a0, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v4, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, a0, zero]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v9]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main239_7"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r20 [label="v3 ← a0", color=green];
// [Asm]   r23 [label="v12 ← a1", color=green];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r9 [label="a2", color=blue];
// [Asm]   r26 [label="v9 ← a0", color=green];
// [Asm]   r6 [label="t3", color=blue];
// [Asm]   r13 [label="a6", color=blue];
// [Asm]   r4 [label="t1", color=blue];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r11 [label="a4", color=blue];
// [Asm]   r7 [label="t4", color=blue];
// [Asm]   r10 [label="a3", color=blue];
// [Asm]   r22 [label="s10", color=blue];
// [Asm]   r14 [label="a7", color=blue];
// [Asm]   r8 [label="a1", color=blue];
// [Asm]   r5 [label="t2", color=blue];
// [Asm]   r24 [label="v7 ← a0", color=green];
// [Asm]   r15 [label="v4 ← s0", color=green];
// [Asm]   r25 [label="v8 ← a0", color=green];
// [Asm]   r2 [label="a0", color=blue];
// [Asm]   r16 [label="v17 ← a0", color=green];
// [Asm]   r18 [label="v2 ← s1", color=green];
// [Asm]   r19 [label="v14 ← a0", color=green];
// [Asm]   r21 [label="v16 ← a1", color=green];
// [Asm]   r17 [label="v18 ← a0", color=green];
// [Asm]   r12 [label="a5", color=blue];
// [Asm]   r18 -- r23;
// [Asm]   r18 -- r24;
// [Asm]   r0 -- r15;
// [Asm]   r13 -- r15;
// [Asm]   r1 -- r12;
// [Asm]   r3 -- r15;
// [Asm]   r14 -- r18;
// [Asm]   r6 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r3 -- r16;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r9 -- r15;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r23;
// [Asm]   r15 -- r22;
// [Asm]   r12 -- r15;
// [Asm]   r1 -- r7;
// [Asm]   r8 -- r9;
// [Asm]   r1 -- r18;
// [Asm]   r18 -- r25;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r22;
// [Asm]   r5 -- r18;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r1 -- r15;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r17;
// [Asm]   r18 -- r21;
// [Asm]   r1 -- r20;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r2 -- r7;
// [Asm]   r11 -- r18;
// [Asm]   r18 -- r22;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r18;
// [Asm]   r15 -- r25;
// [Asm]   r3 -- r5;
// [Asm]   r9 -- r18;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r15 -- r18;
// [Asm]   r2 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r3 -- r4;
// [Asm]   r18 -- r19;
// [Asm]   r15 -- r17;
// [Asm]   r2 -- r14;
// [Asm]   r10 -- r18;
// [Asm]   r0 -- r2;
// [Asm]   r15 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r8 -- r15;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r7 -- r15;
// [Asm]   r6 -- r18;
// [Asm]   r10 -- r15;
// [Asm]   r2 -- r12;
// [Asm]   r8 -- r18;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r25;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r14;
// [Asm]   r0 -- r1;
// [Asm]   r15 -- r24;
// [Asm]   r13 -- r18;
// [Asm]   r1 -- r11;
// [Asm]   r11 -- r15;
// [Asm]   r18 -- r20;
// [Asm]   r15 -- r23;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r15 -- r16;
// [Asm]   r15 -- r20;
// [Asm]   r15 -- r19;
// [Asm]   r2 -- r3;
// [Asm]   r20 -- r21;
// [Asm]   r14 -- r15;
// [Asm]   r2 -- r23;
// [Asm]   r12 -- r18;
// [Asm]   r5 -- r15;
// [Asm]   r0 -- r18;
// [Asm]   r1 -- r24;
// [Asm]   comment = "0:t0-> 1:zero-> 2:a0-> 3:s11-> 15:v4-> 18:v2-> 4:t1-> 5:t2-> 6:t3-> 7:t4-> 8:a1-> 9:a2-> 10:a3-> 11:a4-> 12:a5-> 13:a6-> 14:a7-> 23:v12-> 16:v17-> 19:v14-> 20:v3-> 21:v16-> 22:s10-> 24:v7-> 25:v8-> 17:v18-> 26:v9"
// [Asm]   comment = "v3<-a0;v12<-a1;v9<-a0;v7<-a0;v4<-s0;v8<-a0;v17<-a0;v2<-s1;v14<-a0;v16<-a1;v18<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main239_7"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call minimbt_read_int ->   call minimbt_read_int
// [Asm] subst   mv v4, a0 ->   mv s0, a0
// [Asm] subst   slliw v17, v4, 2 ->   slliw a0, s0, 2
// [Asm] subst   sub v18, s11, v17 ->   sub a0, s11, a0
// [Asm] subst   andi v2, v18, -8 ->   andi s1, a0, -8
// [Asm] subst   mv s11, v2 ->   mv s11, s1
// [Asm] subst   mv a1, v4 ->   mv a1, s0
// [Asm] subst   mv a0, v2 ->   mv a0, s1
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   call memseti32 ->   call memseti32
// [Asm] subst   addi v14, s11, -24 ->   addi a0, s11, -24
// [Asm] subst   andi v3, v14, -8 ->   andi a0, a0, -8
// [Asm] subst   mv s11, v3 ->   mv s11, a0
// [Asm] subst   la v16, input243_26 ->   la a1, input243_26
// [Asm] subst   sd v16, 0(v3) ->   sd a1, 0(a0)
// [Asm] subst   sd v4, 8(v3) ->   sd s0, 8(a0)
// [Asm] subst   sd v2, 16(v3) ->   sd s1, 16(a0)
// [Asm] subst   mv s10, v3 ->   mv s10, a0
// [Asm] subst   ld v12, 0(v3) ->   ld a1, 0(a0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   jalr v12 ->   jalr a1
// [Asm] subst   mv a0, v2 ->   mv a0, s1
// [Asm] subst   mv a1, v4 ->   mv a1, s0
// [Asm] subst   call sort233_6 ->   call sort233_6
// [Asm] subst   mv a0, v2 ->   mv a0, s1
// [Asm] subst   mv a1, zero ->   mv a1, zero
// [Asm] subst   mv a2, v4 ->   mv a2, s0
// [Asm] subst   call output14_1 ->   call output14_1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FreeVar(fvref=^1) -> v5, Insn(iref=%1) -> v7, Self(fref=f21) -> v0, FnParam(fref=f21, fpref=$f.2) -> v4, FnParam(fref=f21, fpref=$f.0) -> v2, FnParam(fref=f21, fpref=$f.1) -> v3, Insn(iref=%0) -> v6, Insn(iref=%2) -> v8
// [Asm] defs: []
// [Asm] live_set: [a0, a2, a1, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [a0, v0, a2, a1]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, a2, a1, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v0, a2, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v0, v4, v2]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v5, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v3, v5, v4, v2]
// [Asm] move_origin: [v5]
// [Asm] defined: s10 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v3, v5, v13, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v5, v13, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v5, a0, v13, v4, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v3, v5, a0, v13, v4, a1, v2]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, v4, v5, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v4, v5, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v5, v3]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v2, v4, v5, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: s10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v2, v11, v4, v5, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v11, v4, v5, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v11, v4, v5, a0, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, v11, v5, a1, a0, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, v5, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, v3]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v2, v5, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: s10 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v2, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v9, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0, v9]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of sort_3173_21"];
// [Asm]   r0 [label="v0 ← a3", color=green];
// [Asm]   r20 [label="v6 ← a0", color=green];
// [Asm]   r23 [label="v9 ← a2", color=green];
// [Asm]   r3 [label="a1", color=blue];
// [Asm]   r9 [label="v13 ← a2", color=green];
// [Asm]   r6 [label="v4 ← s2", color=green];
// [Asm]   r13 [label="t3", color=blue];
// [Asm]   r4 [label="v2 ← s0", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="t1", color=blue];
// [Asm]   r7 [label="v5 ← s3", color=green];
// [Asm]   r10 [label="t0", color=blue];
// [Asm]   r22 [label="v7 ← a0", color=green];
// [Asm]   r14 [label="t4", color=blue];
// [Asm]   r8 [label="s10", color=blue];
// [Asm]   r5 [label="v3 ← s1", color=green];
// [Asm]   r24 [label="v8 ← a0", color=green];
// [Asm]   r15 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r16 [label="a4", color=blue];
// [Asm]   r18 [label="a6", color=blue];
// [Asm]   r19 [label="a7", color=blue];
// [Asm]   r17 [label="a5", color=blue];
// [Asm]   r21 [label="v11 ← a2", color=green];
// [Asm]   r12 [label="t2", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r21;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r4 -- r16;
// [Asm]   r5 -- r21;
// [Asm]   r6 -- r11;
// [Asm]   r1 -- r12;
// [Asm]   r7 -- r21;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r20;
// [Asm]   r5 -- r10;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r23;
// [Asm]   r5 -- r23;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r19;
// [Asm]   r5 -- r18;
// [Asm]   r1 -- r10;
// [Asm]   r7 -- r13;
// [Asm]   r7 -- r20;
// [Asm]   r5 -- r19;
// [Asm]   r3 -- r9;
// [Asm]   r1 -- r15;
// [Asm]   r4 -- r20;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r17;
// [Asm]   r6 -- r16;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r4 -- r22;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r12;
// [Asm]   r3 -- r5;
// [Asm]   r6 -- r20;
// [Asm]   r6 -- r8;
// [Asm]   r0 -- r6;
// [Asm]   r7 -- r17;
// [Asm]   r4 -- r21;
// [Asm]   r6 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r6 -- r19;
// [Asm]   r7 -- r22;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r7 -- r19;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r1 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r6 -- r18;
// [Asm]   r7 -- r15;
// [Asm]   r6 -- r10;
// [Asm]   r7 -- r10;
// [Asm]   r7 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r6 -- r17;
// [Asm]   r0 -- r1;
// [Asm]   r4 -- r7;
// [Asm]   r1 -- r11;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r5 -- r14;
// [Asm]   r4 -- r17;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r7 -- r16;
// [Asm]   r1 -- r5;
// [Asm]   r7 -- r18;
// [Asm]   r0 -- r4;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r3;
// [Asm]   r7 -- r12;
// [Asm]   r4 -- r14;
// [Asm]   r7 -- r14;
// [Asm]   r3 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r4 -- r19;
// [Asm]   r5 -- r15;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v0-> 1:a0-> 2:a2-> 4:v2-> 5:v3-> 6:v4-> 3:a1-> 7:v5-> 9:v13-> 21:v11-> 10:t0-> 11:t1-> 12:t2-> 13:t3-> 14:t4-> 15:a3-> 16:a4-> 17:a5-> 18:a6-> 19:a7-> 20:v6-> 23:v9-> 8:s10-> 22:v7-> 24:v8"
// [Asm]   comment = "v0<-a3;v6<-a0;v9<-a2;v13<-a2;v4<-s2;v2<-s0;v5<-s3;v7<-a0;v3<-s1;v8<-a0;v11<-a2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of sort_3173_21"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v0, s10 ->   mv a3, s10
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   mv v3, a1 ->   mv s1, a1
// [Asm] subst   mv v4, a2 ->   mv s2, a2
// [Asm] subst   ld v5, 8(v0) ->   ld s3, 8(a3)
// [Asm] subst   mv s10, v5 ->   mv s10, s3
// [Asm] subst   ld v13, 0(v5) ->   ld a2, 0(s3)
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   mv a1, v3 ->   mv a1, s1
// [Asm] subst   jalr v13 ->   jalr a2
// [Asm] subst   mv s10, v5 ->   mv s10, s3
// [Asm] subst   ld v11, 0(v5) ->   ld a2, 0(s3)
// [Asm] subst   mv a0, v3 ->   mv a0, s1
// [Asm] subst   mv a1, v4 ->   mv a1, s2
// [Asm] subst   jalr v11 ->   jalr a2
// [Asm] subst   mv s10, v5 ->   mv s10, s3
// [Asm] subst   ld v9, 0(v5) ->   ld a2, 0(s3)
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   mv a1, v3 ->   mv a1, s1
// [Asm] subst   jalr v9 ->   jalr a2
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] g37_11:
// [Asm] # block info: defs: [v3, v0, v4, v5, v2], uses: [v0, s10, a0, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0, zero], live_out: [v4, v5, zero, v3]
// [Asm] # block parameters: []
// [Asm] .g37_11_8:
// [Asm]   # save_ctx1  # live: [zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, zero, v2]
// [Asm]   lw v3, 8(v0)  # live: [v2, v0, zero, v3]
// [Asm]   ld v4, 16(v0)  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v6], uses: [v5, v6, v3], upward_exposed: [v5, v3], params_defs: [v5]
// [Asm] # live_in: [v4, v5, zero, v3], live_out: [v4, v5, zero, v3]
// [Asm] # block parameters: [v5]
// [Asm] .g37_11_0:
// [Asm]   addi v6, v3, 1  # live: [v4, v5, v6, zero, v3]
// [Asm] # control
// [Asm]   blt v5, v6, .g37_11_2  # live: [v4, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v11, v10, v26, v22, v23, v27, v8, v9], uses: [v11, v5, v10, v26, v22, v27, v23, v8, v4, v9], upward_exposed: [v4, v5], params_defs: []
// [Asm] # live_in: [v4, v5, zero, v3], live_out: [v4, v5, zero, v3]
// [Asm] # block parameters: []
// [Asm] .g37_11_1:
// [Asm]   slliw v26, v5, 2  # live: [v4, v5, zero, v26, v3]
// [Asm]   add v27, v4, v26  # live: [v4, v5, zero, v27, v3]
// [Asm]   lw v8, 0(v27)  # live: [v8, v4, v5, zero, v3]
// [Asm]   addi v9, v5, -1  # live: [v8, v4, v5, zero, v9, v3]
// [Asm]   slliw v22, v9, 2  # live: [v8, v4, v5, zero, v22, v3]
// [Asm]   add v23, v4, v22  # live: [v8, v4, v5, zero, v23, v3]
// [Asm]   lw v10, 0(v23)  # live: [v8, v4, v5, v10, zero, v3]
// [Asm]   addi v11, v10, -1  # live: [v8, v11, v4, v5, zero, v3]
// [Asm] # control
// [Asm]   blt v11, v8, .g37_11_4  # live: [v4, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v16, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, v17, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v5, a0, v4, a2, a1, v17, v15], upward_exposed: [v4, v5], params_defs: []
// [Asm] # live_in: [v4, v5, zero, v3], live_out: [v4, v5, zero, v3]
// [Asm] # block parameters: []
// [Asm] .g37_11_3:
// [Asm]   addi v15, v5, -1  # live: [v5, zero, v4, v15, v3]
// [Asm]   # save_ctx2  # live: [v5, zero, v4, v15, v3]
// [Asm]   mv a0, v4  # live: [v5, zero, a0, v4, v15, v3]
// [Asm]   mv a1, v5  # live: [v5, zero, a0, v4, a1, v15, v3]
// [Asm]   mv a2, v15  # live: [v5, zero, a0, v4, a2, a1, v3]
// [Asm]   call swap1_0  # live: [v4, v5, zero, a0, v3]
// [Asm]   mv v16, a0  # live: [v4, v5, zero, v3]
// [Asm]   # restore_ctx2  # live: [v4, v5, zero, v3]
// [Asm]   addi v17, v5, -1  # live: [v4, v17, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v17  # live: [v4, v5, zero, v3]
// [Asm]   j .g37_11_0  # live: [v4, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v14], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v14]
// [Asm] # block parameters: []
// [Asm] .g37_11_2:
// [Asm] # control
// [Asm]   mv v14, zero  # live: [v14]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v14, a0], upward_exposed: [v14], params_defs: [v14]
// [Asm] # live_in: [v14], live_out: []
// [Asm] # block parameters: [v14]
// [Asm] .g37_11_6:
// [Asm] # control
// [Asm]   mv a0, v14  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v13], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v13]
// [Asm] # block parameters: []
// [Asm] .g37_11_4:
// [Asm] # control
// [Asm]   mv v13, zero  # live: [v13]
// [Asm] 
// [Asm] # block info: defs: [v14], uses: [v13], upward_exposed: [v13], params_defs: [v13]
// [Asm] # live_in: [v13], live_out: [v14]
// [Asm] # block parameters: [v13]
// [Asm] .g37_11_5:
// [Asm] # control
// [Asm]   mv v14, v13  # live: [v14]
// [Asm]   j .g37_11_6  # live: [v14]
// [Asm] 
// [Asm] # leaf false
// [Asm] insertion_sort30_2:
// [Asm] # block info: defs: [v2, t1, v14, v16, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, v19, a6, v4, ft5, ft10, v6, ft7, v11, ft4, v5, ft9, v10, a5, fa4, a0, ft2, a2, v17, a3, s10, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v3, v11, v5, v14, v16, v10, a0, a2, v17, a1, s11, v9, v19, v4, v6, v2], upward_exposed: [a2, a1, s11, a0], params_defs: []
// [Asm] # live_in: [a2, a1, s11, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .insertion_sort30_2_0:
// [Asm]   # save_ctx1  # live: [a0, a2, a1, s11]
// [Asm]   mv v2, a0  # live: [a2, a1, s11, v2]
// [Asm]   mv v3, a1  # live: [v3, a2, s11, v2]
// [Asm]   mv v4, a2  # live: [v3, v4, s11, v2]
// [Asm]   addi v17, s11, -24  # live: [v3, v4, v17, v2]
// [Asm]   andi v5, v17, -8  # live: [v3, v5, v4, v2]
// [Asm]   mv s11, v5  # live: [v3, v5, v4, s11, v2]
// [Asm]   la v19, g37_11  # live: [v3, v5, v19, v4, s11, v2]
// [Asm]   sd v19, 0(v5)  # live: [v2, v4, v5, s11, v3]
// [Asm]   sd v3, 8(v5)  # live: [v2, v4, v5, s11, v3]
// [Asm]   sd v2, 16(v5)  # live: [v4, v5, s11, v3]
// [Asm]   addi v14, s11, -24  # live: [v4, v5, v14, v3]
// [Asm]   andi v6, v14, -8  # live: [v4, v6, v5, v3]
// [Asm]   mv s11, v6  # live: [v4, v6, v5, v3]
// [Asm]   la v16, f54_13  # live: [v4, v6, v5, v16, v3]
// [Asm]   sd v16, 0(v6)  # live: [v4, v6, v5, v3]
// [Asm]   sd v4, 8(v6)  # live: [v6, v5, v3]
// [Asm]   sd v5, 16(v6)  # live: [v6, v3]
// [Asm]   addi v9, v3, 1  # live: [v6, v9]
// [Asm]   mv s10, v6  # live: [v6, v9]
// [Asm]   ld v11, 0(v6)  # live: [v11, v9]
// [Asm]   # save_ctx2  # live: [v11, v9]
// [Asm]   mv a0, v9  # live: [v11, a0]
// [Asm]   jalr v11  # live: [a0]
// [Asm]   mv v10, a0  # live: [v10]
// [Asm]   # restore_ctx2  # live: [v10]
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] quick_sort210_5:
// [Asm] # block info: defs: [v3, v4, v14, v15, v13, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, s11, a0, zero], live_out: [v14, v15, s11, v13, zero]
// [Asm] # block parameters: []
// [Asm] .quick_sort210_5_5:
// [Asm]   # save_ctx1  # live: [a2, a1, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, s11, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, s11, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, s11, zero, v3]
// [Asm] # control
// [Asm]   mv v13, v2  # live: [v4, s11, v13, zero, v3]
// [Asm]   mv v14, v3  # live: [v4, v14, s11, v13, zero]
// [Asm]   mv v15, v4  # live: [v14, v15, s11, v13, zero]
// [Asm] 
// [Asm] # block info: defs: [v16, v158], uses: [v14, v16, v15, v158], upward_exposed: [v14, v15], params_defs: [v14, v15, v13]
// [Asm] # live_in: [v14, v15, s11, v13, zero], live_out: [v14, v15, s11, v13, zero]
// [Asm] # block parameters: [v13, v14, v15]
// [Asm] .quick_sort210_5_0:
// [Asm]   sub v16, v15, v14  # live: [v14, v16, v13, zero, v15, s11]
// [Asm] # control
// [Asm]   li v158, 16  # live: [v14, v16, v13, zero, v158, v15, s11]
// [Asm]   blt v158, v16, .quick_sort210_5_2  # live: [v14, v15, s11, v13, zero]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, v82, fa2, ft6, a4, fa6, a6, ft5, ft10, v81, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v14, v13, a0, a2, v81, a1, v15], upward_exposed: [v14, v15, v13], params_defs: []
// [Asm] # live_in: [v14, v15, v13], live_out: [v82]
// [Asm] # block parameters: []
// [Asm] .quick_sort210_5_1:
// [Asm]   # save_ctx2  # live: [v14, v15, v13]
// [Asm]   mv a0, v13  # live: [v14, v15, a0]
// [Asm]   mv a1, v14  # live: [a1, v15, a0]
// [Asm]   mv a2, v15  # live: [a2, a1, a0]
// [Asm]   call insertion_sort30_2  # live: [a0]
// [Asm]   mv v81, a0  # live: [v81]
// [Asm]   # restore_ctx2  # live: [v81]
// [Asm] # control
// [Asm]   mv v82, v81  # live: [v82]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v82, a0], upward_exposed: [v82], params_defs: [v82]
// [Asm] # live_in: [v82], live_out: []
// [Asm] # block parameters: [v82]
// [Asm] .quick_sort210_5_3:
// [Asm] # control
// [Asm]   mv a0, v82  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v19, v18, v20], uses: [v14, v15, v13], upward_exposed: [v14, v15, v13], params_defs: []
// [Asm] # live_in: [v14, v15, s11, v13, zero], live_out: [v14, v18, zero, v13, v20, v19, s11, v15]
// [Asm] # block parameters: []
// [Asm] .quick_sort210_5_2:
// [Asm] # control
// [Asm]   mv v18, v13  # live: [v14, v18, zero, v13, s11, v15]
// [Asm]   mv v19, v14  # live: [v14, v18, zero, v13, v19, s11, v15]
// [Asm]   mv v20, v15  # live: [v14, v18, zero, v13, v20, v19, s11, v15]
// [Asm] 
// [Asm] # block info: defs: [v11, v153, v25, v156, v22, v23, v151, s11, v24, v149], uses: [v11, v153, v14, v156, zero, v22, v23, v151, s11, v15, v24, v149], upward_exposed: [v14, s11, v15, zero], params_defs: [v19, v18, v20]
// [Asm] # live_in: [v14, v18, zero, v13, v20, v19, s11, v15], live_out: [v11, v25, v14, v13, zero, v22, s11, v15]
// [Asm] # block parameters: [v18, v19, v20]
// [Asm] .quick_sort210_5_26:
// [Asm]   addi v156, s11, -4  # live: [v14, v156, v13, zero, v15]
// [Asm]   andi v11, v156, -8  # live: [v11, v14, v13, zero, v15]
// [Asm]   mv s11, v11  # live: [v11, v14, v13, zero, s11, v15]
// [Asm]   sw zero, 0(v11)  # live: [v11, v14, v13, zero, s11, v15]
// [Asm]   sub v22, v15, v14  # live: [v11, v14, v13, zero, v22, s11, v15]
// [Asm]   li v153, 4  # live: [v11, v153, v14, v13, zero, v22, s11, v15]
// [Asm]   div v23, v22, v153  # live: [v11, v14, v13, zero, v22, v23, s11, v15]
// [Asm]   li v151, 2  # live: [v11, v14, v13, zero, v22, v23, v151, s11, v15]
// [Asm]   mul v24, v23, v151  # live: [v11, v14, v13, zero, v22, s11, v15, v24]
// [Asm]   add v25, v14, v24  # live: [v11, v25, v14, v13, zero, v22, s11, v15]
// [Asm] # control
// [Asm]   li v149, 8  # live: [v11, v25, v14, v13, zero, v22, s11, v15, v149]
// [Asm]   blt v22, v149, .quick_sort210_5_28  # live: [v11, v25, v14, v13, zero, v22, s11, v15]
// [Asm] 
// [Asm] # block info: defs: [v30, v133, v32, v12, s11, v28, v31, v147, v145, v9, v138, v142, v29, v27, v35, v136, v140, v131, v135], uses: [v11, v14, v13, v22, v30, v133, s11, v12, v28, v31, v147, v145, v9, v138, v142, v27, v35, v136, v140, v131, v135], upward_exposed: [v11, v14, s11, v13, v22], params_defs: []
// [Asm] # live_in: [v11, v25, v14, v13, zero, v22, s11, v15], live_out: [v25, v11, v14, v29, zero, v13, v32, s11, v15, v9]
// [Asm] # block parameters: []
// [Asm] .quick_sort210_5_27:
// [Asm]   li v147, 4  # live: [v25, v11, v14, v13, v22, s11, v147, zero, v15]
// [Asm]   div v27, v22, v147  # live: [v25, v11, v14, v13, v22, s11, zero, v27, v15]
// [Asm]   li v145, 1  # live: [v25, v11, v14, v13, v22, s11, v145, zero, v27, v15]
// [Asm]   mul v28, v27, v145  # live: [v25, v11, v14, v13, v22, s11, v28, zero, v15]
// [Asm]   add v29, v14, v28  # live: [v25, v11, v14, v13, v22, s11, v29, zero, v15]
// [Asm]   li v142, 4  # live: [v25, v11, v14, v13, v22, s11, v142, v29, zero, v15]
// [Asm]   div v30, v22, v142  # live: [v25, v11, v14, v13, v22, v30, s11, v29, zero, v15]
// [Asm]   li v140, 3  # live: [v25, v11, v14, v13, v22, v30, s11, v29, zero, v140, v15]
// [Asm]   mul v31, v30, v140  # live: [v25, v11, v14, v13, v22, s11, v31, v29, zero, v15]
// [Asm]   add v32, v14, v31  # live: [v25, v11, v14, v13, v22, v32, s11, v29, zero, v15]
// [Asm]   addi v136, s11, -24  # live: [v25, v11, v14, v13, v22, v32, v29, zero, v136, v15]
// [Asm]   andi v12, v136, -8  # live: [v25, v11, v14, v13, v22, v32, v12, v29, zero, v15]
// [Asm]   mv s11, v12  # live: [v25, v11, v14, v13, v22, v32, v12, s11, v29, zero, v15]
// [Asm]   la v138, sort_2157_19  # live: [v25, v11, v14, v13, v22, v32, v12, s11, v138, v29, zero, v15]
// [Asm]   sd v138, 0(v12)  # live: [v25, v11, v14, v13, v22, v32, v12, s11, v29, zero, v15]
// [Asm]   sd v13, 8(v12)  # live: [v25, v11, v14, v13, v22, v32, v12, s11, v29, zero, v15]
// [Asm]   sd v11, 16(v12)  # live: [v25, v11, v14, v13, v22, v32, v12, s11, v29, zero, v15]
// [Asm]   addi v133, s11, -16  # live: [v25, v11, v14, v13, v22, v133, v32, v12, v29, zero, v15]
// [Asm]   andi v9, v133, -8  # live: [v25, v11, v14, v13, v22, v32, v12, v9, v29, zero, v15]
// [Asm]   mv s11, v9  # live: [v25, v11, v14, v13, v22, v32, s11, v12, v9, v29, zero, v15]
// [Asm]   la v135, sort_3173_21  # live: [v25, v11, v14, v13, v22, v32, s11, v12, v9, v29, zero, v15, v135]
// [Asm]   sd v135, 0(v9)  # live: [v25, v11, v14, v29, zero, v13, v22, v32, s11, v15, v12, v9]
// [Asm]   sd v12, 8(v9)  # live: [v25, v11, v14, v29, zero, v13, v22, v32, s11, v15, v9]
// [Asm]   addi v35, v22, -1  # live: [v25, v11, v14, v29, zero, v13, v35, v32, s11, v15, v9]
// [Asm] # control
// [Asm]   li v131, 50  # live: [v25, v11, v14, v29, zero, v13, v35, v32, s11, v15, v131, v9]
// [Asm]   blt v35, v131, .quick_sort210_5_30  # live: [v25, v11, v14, v29, zero, v13, v32, s11, v15, v9]
// [Asm] 
// [Asm] # block info: defs: [t1, v127, v42, ft0, ft1, v41, a1, v44, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, v46, ft9, a5, a0, fa4, v123, v119, ft2, a2, v37, v43, a3, s10, v39, ft8, t3, fa7, a7, t0, fa5, fa3, ft3, fa0, v45, t4, v38, t2, v40], uses: [v25, v127, a0, v123, v119, v37, a2, v41, v32, a1, v43, v44, v9, v29, v45, v38, v40], upward_exposed: [v25, v32, v29, v9], params_defs: []
// [Asm] # live_in: [v25, v11, v14, v29, zero, v13, v32, s11, v15, v9], live_out: [v25, v11, v46, v14, v29, zero, v13, v32, s11, v15, v9]
// [Asm] # block parameters: []
// [Asm] .quick_sort210_5_29:
// [Asm]   addi v37, v29, -1  # live: [v25, v11, v14, v13, v32, v37, s11, v9, v29, zero, v15]
// [Asm]   addi v38, v29, 1  # live: [v25, v11, v14, v13, v32, v37, s11, v9, v29, zero, v38, v15]
// [Asm]   mv s10, v9  # live: [v25, v11, v14, v13, v32, v37, s11, v9, v29, zero, v38, v15]
// [Asm]   ld v127, 0(v9)  # live: [v25, v11, v14, v127, v13, v32, v37, s11, v9, v29, zero, v38, v15]
// [Asm]   # save_ctx2  # live: [v25, v11, v14, v127, v13, v32, v37, s11, v9, v29, zero, v38, v15]
// [Asm]   mv a0, v37  # live: [v25, v11, v14, v127, v13, a0, v32, s11, v9, v29, zero, v38, v15]
// [Asm]   mv a1, v29  # live: [v25, v11, v14, v127, v13, a0, v32, a1, s11, v9, v29, zero, v38, v15]
// [Asm]   mv a2, v38  # live: [v25, v11, v14, v127, v13, a0, v32, a2, a1, s11, v9, v29, zero, v15]
// [Asm]   jalr v127  # live: [v25, v11, v14, v13, a0, v32, s11, v9, v29, zero, v15]
// [Asm]   mv v39, a0  # live: [v25, v11, v14, v13, v32, s11, v9, v29, zero, v15]
// [Asm]   # restore_ctx2  # live: [v25, v11, v14, v13, v32, s11, v9, v29, zero, v15]
// [Asm]   addi v40, v25, -1  # live: [v25, v11, v14, v13, v32, s11, v9, v29, zero, v15, v40]
// [Asm]   addi v41, v25, 1  # live: [v25, v11, v14, v13, v32, v41, s11, v9, v29, zero, v15, v40]
// [Asm]   mv s10, v9  # live: [v25, v11, v14, v13, v32, v41, s11, v9, v29, zero, v15, v40]
// [Asm]   ld v123, 0(v9)  # live: [v25, v11, v14, v13, v123, v32, v41, s11, v9, v29, zero, v15, v40]
// [Asm]   # save_ctx2  # live: [v25, v11, v14, v13, v123, v32, v41, s11, v9, v29, zero, v15, v40]
// [Asm]   mv a0, v40  # live: [v25, v11, v14, v13, a0, v123, v32, v41, s11, v9, v29, zero, v15]
// [Asm]   mv a1, v25  # live: [v25, v11, v14, v13, a0, v123, v32, v41, a1, s11, v9, v29, zero, v15]
// [Asm]   mv a2, v41  # live: [v25, v11, v14, v13, a0, v123, v32, a2, a1, s11, v9, v29, zero, v15]
// [Asm]   jalr v123  # live: [v25, v11, v14, v13, a0, v32, s11, v9, v29, zero, v15]
// [Asm]   mv v42, a0  # live: [v25, v11, v14, v13, v32, s11, v9, v29, zero, v15]
// [Asm]   # restore_ctx2  # live: [v25, v11, v14, v13, v32, s11, v9, v29, zero, v15]
// [Asm]   addi v43, v32, -1  # live: [v25, v11, v14, v13, v32, v43, s11, v9, v29, zero, v15]
// [Asm]   addi v44, v32, 1  # live: [v25, v11, v14, v13, v32, v43, s11, v44, v9, v29, zero, v15]
// [Asm]   mv s10, v9  # live: [v25, v11, v14, v13, v32, v43, s11, v44, v9, v29, zero, v15]
// [Asm]   ld v119, 0(v9)  # live: [v25, v11, v14, v13, v119, v32, v43, s11, v44, v9, v29, zero, v15]
// [Asm]   # save_ctx2  # live: [v25, v11, v14, v13, v119, v32, v43, s11, v44, v9, v29, zero, v15]
// [Asm]   mv a0, v43  # live: [v25, v11, v14, v13, a0, v119, v32, s11, v44, v9, v29, zero, v15]
// [Asm]   mv a1, v32  # live: [v25, v11, v14, v13, a0, v119, v32, a1, s11, v44, v9, v29, zero, v15]
// [Asm]   mv a2, v44  # live: [v25, v11, v14, v13, a0, v119, v32, a2, a1, s11, v9, v29, zero, v15]
// [Asm]   jalr v119  # live: [v25, v11, v14, v29, zero, v13, a0, v32, s11, v15, v9]
// [Asm]   mv v45, a0  # live: [v25, v11, v14, v29, zero, v13, v45, v32, s11, v15, v9]
// [Asm]   # restore_ctx2  # live: [v25, v11, v14, v29, zero, v13, v45, v32, s11, v15, v9]
// [Asm] # control
// [Asm]   mv v46, v45  # live: [v25, v11, v46, v14, v29, zero, v13, v32, s11, v15, v9]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v47, v117, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, v48, fa3, ft3, fa0, t4, t2], uses: [v25, v29, a0, v32, a2, v47, a1, v117, v9], upward_exposed: [v25, v32, v9, v29], params_defs: [v46]
// [Asm] # live_in: [v25, v11, v46, v14, v29, zero, v13, v32, s11, v15, v9], live_out: [v11, v25, v14, v48, zero, v13, s11, v15]
// [Asm] # block parameters: [v46]
// [Asm] .quick_sort210_5_31:
// [Asm]   mv s10, v9  # live: [v11, v25, v14, zero, v13, v29, v32, s11, v15, v9]
// [Asm]   ld v117, 0(v9)  # live: [v11, v25, v14, zero, v13, v29, v32, s11, v15, v117]
// [Asm]   # save_ctx2  # live: [v11, v25, v14, zero, v13, v29, v32, s11, v15, v117]
// [Asm]   mv a0, v29  # live: [v11, v25, v14, zero, v13, a0, v32, s11, v15, v117]
// [Asm]   mv a1, v25  # live: [v11, v25, v14, zero, v13, a0, v32, a1, s11, v15, v117]
// [Asm]   mv a2, v32  # live: [v11, v25, v14, zero, v13, a0, a2, a1, s11, v15, v117]
// [Asm]   jalr v117  # live: [v11, v25, v14, zero, v13, a0, s11, v15]
// [Asm]   mv v47, a0  # live: [v11, v25, v14, zero, v13, v47, s11, v15]
// [Asm]   # restore_ctx2  # live: [v11, v25, v14, zero, v13, v47, s11, v15]
// [Asm] # control
// [Asm]   mv v48, v47  # live: [v11, v25, v14, v48, zero, v13, s11, v15]
// [Asm] 
// [Asm] # block info: defs: [v49], uses: [v11, v49, zero], upward_exposed: [v11, zero], params_defs: [v48]
// [Asm] # live_in: [v11, v25, v14, v48, zero, v13, s11, v15], live_out: [v25, v14, zero, v13, s11, v15]
// [Asm] # block parameters: [v48]
// [Asm] .quick_sort210_5_32:
// [Asm]   lw v49, 0(v11)  # live: [v25, v14, v49, zero, v13, s11, v15]
// [Asm] # control
// [Asm]   bne v49, zero, .quick_sort210_5_34  # live: [v25, v14, s11, v15, zero, v13]
// [Asm] 
// [Asm] # block info: defs: [v115, v51], uses: [v115], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v25, v14, v13, zero, s11, v15], live_out: [v25, v14, v13, zero, s11, v15, v51]
// [Asm] # block parameters: []
// [Asm] .quick_sort210_5_33:
// [Asm] # control
// [Asm]   li v115, 1  # live: [v25, v115, v14, v13, zero, s11, v15]
// [Asm]   mv v51, v115  # live: [v25, v14, v13, zero, s11, v15, v51]
// [Asm] 
// [Asm] # block info: defs: [s11, v53, v113, v7], uses: [v51, v25, s11, v113, v7], upward_exposed: [v25, s11, v51], params_defs: [v51]
// [Asm] # live_in: [v25, v14, v13, zero, s11, v15, v51], live_out: [v14, v53, v13, zero, v15, s11]
// [Asm] # block parameters: [v51]
// [Asm] .quick_sort210_5_35:
// [Asm]   addi v113, s11, -8  # live: [v25, v14, zero, v13, v15, v113, v51]
// [Asm]   andi v7, v113, -8  # live: [v25, v14, zero, v13, v7, v15, v51]
// [Asm]   mv s11, v7  # live: [v25, v14, zero, v13, v7, v15, s11, v51]
// [Asm]   sw v25, 0(v7)  # live: [v14, zero, v13, v7, v15, s11, v51]
// [Asm]   sw v51, 4(v7)  # live: [v14, v15, s11, zero, v13, v7]
// [Asm] # control
// [Asm]   mv v53, v7  # live: [v14, v53, v15, s11, zero, v13]
// [Asm] 
// [Asm] # block info: defs: [v59, v58, v56, v57, v54], uses: [v14, v53, v15, v13, v54], upward_exposed: [v14, v53, v15, v13], params_defs: [v53]
// [Asm] # live_in: [v14, v53, v13, zero, v15, s11], live_out: [v58, v14, v56, v13, zero, v59, v57, v15, s11, v54]
// [Asm] # block parameters: [v53]
// [Asm] .quick_sort210_5_6:
// [Asm]   lw v54, 0(v53)  # live: [v14, v13, zero, v15, s11, v54]
// [Asm] # control
// [Asm]   mv v56, v13  # live: [v14, v56, v13, zero, v15, s11, v54]
// [Asm]   mv v57, v54  # live: [v14, v56, v13, zero, v57, v15, s11, v54]
// [Asm]   mv v58, v14  # live: [v58, v14, v56, v13, zero, v57, v15, s11, v54]
// [Asm]   mv v59, v15  # live: [v58, v14, v56, v13, zero, v59, v57, v15, s11, v54]
// [Asm] 
// [Asm] # block info: defs: [v67, a1, s11, fa1, v60, v63, fa2, ft6, a4, fa6, a6, ft10, ft5, v6, v62, ft4, v5, ft9, v10, fa4, ft2, a3, v101, a7, fa7, fa3, v96, v68, ft3, v104, t2, v61, t1, v69, v107, ft0, ft1, v98, v106, v103, v90, ft7, v71, a5, a0, a2, s10, ft8, t3, t0, v72, fa5, fa0, t4, v70, v100], uses: [v62, v14, v5, v69, v10, a0, v13, v107, a2, a1, s11, v60, v101, v98, v106, v63, v72, v96, v68, v104, v103, v90, v6, v15, v54, v100], upward_exposed: [v14, v15, s11, v13, v54], params_defs: [v59, v58, v56, v57]
// [Asm] # live_in: [v58, v14, v56, v13, zero, v59, v57, v15, s11, v54], live_out: [v71, v14, zero, v13, s11, v15]
// [Asm] # block parameters: [v56, v57, v58, v59]
// [Asm] .quick_sort210_5_11:
// [Asm]   addi v60, v15, -1  # live: [v14, v13, zero, v15, s11, v54, v60]
// [Asm]   # save_ctx2  # live: [v14, v13, zero, v15, s11, v54, v60]
// [Asm]   mv a0, v13  # live: [v14, v13, zero, a0, v15, s11, v54, v60]
// [Asm]   mv a1, v54  # live: [v14, v13, zero, a0, a1, v15, s11, v60]
// [Asm]   mv a2, v60  # live: [v14, v13, zero, a0, a2, a1, v15, s11]
// [Asm]   call swap1_0  # live: [v14, v13, zero, a0, v15, s11]
// [Asm]   mv v61, a0  # live: [v14, v13, zero, v15, s11]
// [Asm]   # restore_ctx2  # live: [v14, v13, zero, v15, s11]
// [Asm]   addi v62, v15, -1  # live: [v62, v14, v13, zero, v15, s11]
// [Asm]   slliw v106, v62, 2  # live: [v106, v14, v13, zero, v15, s11]
// [Asm]   add v107, v13, v106  # live: [v14, v13, zero, v107, v15, s11]
// [Asm]   lw v63, 0(v107)  # live: [v63, v14, v13, zero, v15, s11]
// [Asm]   addi v104, s11, -4  # live: [v63, v14, v13, zero, v104, v15]
// [Asm]   andi v6, v104, -8  # live: [v63, v14, v13, zero, v6, v15]
// [Asm]   mv s11, v6  # live: [v63, v14, v13, zero, v6, v15, s11]
// [Asm]   sw v14, 0(v6)  # live: [v63, v14, v13, zero, v6, v15, s11]
// [Asm]   addi v101, s11, -4  # live: [v63, v14, v13, zero, v6, v15, v101]
// [Asm]   andi v5, v101, -8  # live: [v63, v14, v5, v13, zero, v6, v15]
// [Asm]   mv s11, v5  # live: [v63, v14, v5, v13, zero, v6, v15, s11]
// [Asm]   li v103, 1  # live: [v63, v14, v5, v13, zero, v103, v6, v15, s11]
// [Asm]   sw v103, 0(v5)  # live: [v63, v14, v5, v13, zero, v6, v15, s11]
// [Asm]   addi v98, s11, -48  # live: [v63, v14, v5, v13, zero, v6, v15, v98]
// [Asm]   andi v10, v98, -8  # live: [v63, v14, v5, v10, v13, zero, v6, v15]
// [Asm]   mv s11, v10  # live: [v63, v14, v5, v10, v13, zero, v6, v15, s11]
// [Asm]   la v100, aux86_16  # live: [v63, v14, v5, v10, v13, zero, v6, v15, s11, v100]
// [Asm]   sd v100, 0(v10)  # live: [v63, v14, v5, v10, v13, zero, v6, v15, s11]
// [Asm]   sd v15, 8(v10)  # live: [v63, v14, v5, v10, v13, zero, v6, v15, s11]
// [Asm]   sd v13, 16(v10)  # live: [v63, v14, v5, v10, v13, zero, v6, v15, s11]
// [Asm]   sd v63, 24(v10)  # live: [v14, v5, v10, v13, zero, v6, v15, s11]
// [Asm]   sd v6, 32(v10)  # live: [v14, v5, v10, v13, zero, v6, v15, s11]
// [Asm]   sd v5, 40(v10)  # live: [v14, v5, v10, v13, zero, v6, v15, s11]
// [Asm]   mv s10, v10  # live: [v14, v5, v10, v13, zero, v6, v15, s11]
// [Asm]   ld v96, 0(v10)  # live: [v14, v5, v96, v13, zero, v6, v15, s11]
// [Asm]   # save_ctx2  # live: [v14, v5, v96, v13, zero, v6, v15, s11]
// [Asm]   mv a0, v14  # live: [v14, v5, v96, v13, zero, a0, v6, v15, s11]
// [Asm]   jalr v96  # live: [v14, v5, v13, zero, a0, v6, v15, s11]
// [Asm]   mv v67, a0  # live: [v14, v5, v13, zero, v6, v15, s11]
// [Asm]   # restore_ctx2  # live: [v14, v5, v13, zero, v6, v15, s11]
// [Asm]   lw v68, 0(v6)  # live: [v14, v5, v13, zero, v68, v6, v15, s11]
// [Asm]   addi v69, v15, -1  # live: [v14, v5, v69, v13, zero, v68, v6, v15, s11]
// [Asm]   # save_ctx2  # live: [v14, v5, v69, v13, zero, v68, v6, v15, s11]
// [Asm]   mv a0, v13  # live: [v14, v5, v69, v13, zero, a0, v68, v6, v15, s11]
// [Asm]   mv a1, v68  # live: [v14, v5, v69, v13, zero, a0, v6, a1, v15, s11]
// [Asm]   mv a2, v69  # live: [v14, v5, v13, zero, a0, a2, v6, a1, v15, s11]
// [Asm]   call swap1_0  # live: [v14, v5, v13, zero, a0, v6, s11, v15]
// [Asm]   mv v70, a0  # live: [v14, v5, v13, zero, v6, s11, v15]
// [Asm]   # restore_ctx2  # live: [v14, v5, v13, zero, v6, s11, v15]
// [Asm]   lw v71, 0(v6)  # live: [v71, v14, v5, v13, zero, s11, v15]
// [Asm]   lw v72, 0(v5)  # live: [v72, v71, v14, v13, zero, s11, v15]
// [Asm] # control
// [Asm]   li v90, 1  # live: [v72, v71, v14, v13, zero, v90, s11, v15]
// [Asm]   bne v72, v90, .quick_sort210_5_13  # live: [v71, v14, s11, v15, v13, zero]
// [Asm] 
// [Asm] # block info: defs: [v74, v89], uses: [v89], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v71, v14, v13, zero, s11, v15], live_out: [v71, v14, v13, zero, v74, s11, v15]
// [Asm] # block parameters: []
// [Asm] .quick_sort210_5_12:
// [Asm] # control
// [Asm]   li v89, 1  # live: [v71, v14, zero, v13, s11, v15, v89]
// [Asm]   mv v74, v89  # live: [v71, v14, zero, v13, v74, s11, v15]
// [Asm] 
// [Asm] # block info: defs: [v76, v87, s11, v8], uses: [v87, v71, v74, s11, v8], upward_exposed: [v71, v74, s11], params_defs: [v74]
// [Asm] # live_in: [v71, v14, v13, zero, v74, s11, v15], live_out: [v14, v13, zero, v15, s11, v76]
// [Asm] # block parameters: [v74]
// [Asm] .quick_sort210_5_14:
// [Asm]   addi v87, s11, -8  # live: [v14, v71, v87, v13, zero, v74, v15]
// [Asm]   andi v8, v87, -8  # live: [v14, v71, v13, zero, v8, v74, v15]
// [Asm]   mv s11, v8  # live: [v14, v71, v13, zero, v8, v74, v15, s11]
// [Asm]   sw v71, 0(v8)  # live: [v14, v13, zero, v8, v74, v15, s11]
// [Asm]   sw v74, 4(v8)  # live: [v14, v15, s11, v13, zero, v8]
// [Asm] # control
// [Asm]   mv v76, v8  # live: [v14, v15, s11, v13, zero, v76]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v79, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, v77, ft3, fa0, t4, v80, t2], uses: [v14, v13, a0, v77, a2, v80, a1, v15, v76], upward_exposed: [v14, v15, v13, v76], params_defs: [v76]
// [Asm] # live_in: [v14, v13, zero, v15, s11, v76], live_out: [v14, v15, s11, v13, zero]
// [Asm] # block parameters: [v76]
// [Asm] .quick_sort210_5_7:
// [Asm]   lw v77, 0(v76)  # live: [v14, v13, zero, v77, v15, s11]
// [Asm]   # save_ctx2  # live: [v14, v13, zero, v77, v15, s11]
// [Asm]   mv a0, v13  # live: [v14, v13, zero, a0, v77, v15, s11]
// [Asm]   mv a1, v14  # live: [v13, zero, a0, v77, a1, v15, s11]
// [Asm]   mv a2, v77  # live: [v13, zero, a0, v77, a2, a1, v15, s11]
// [Asm]   call quick_sort210_5  # live: [v77, v15, s11, v13, zero, a0]
// [Asm]   mv v79, a0  # live: [v15, s11, v13, zero, v77]
// [Asm]   # restore_ctx2  # live: [v15, s11, v13, zero, v77]
// [Asm]   addi v80, v77, 1  # live: [v80, v15, s11, v13, zero]
// [Asm] # control
// [Asm]   mv v13, v13  # live: [v80, v15, s11, v13, zero]
// [Asm]   mv v14, v80  # live: [v14, v15, s11, v13, zero]
// [Asm]   mv v15, v15  # live: [v14, v15, s11, v13, zero]
// [Asm]   j .quick_sort210_5_0  # live: [v14, v15, s11, v13, zero]
// [Asm] 
// [Asm] # block info: defs: [v48], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v11, v25, v14, zero, v13, s11, v15], live_out: [v11, v25, v14, v48, zero, v13, s11, v15]
// [Asm] # block parameters: []
// [Asm] .quick_sort210_5_28:
// [Asm] # control
// [Asm]   mv v48, zero  # live: [v11, v25, v14, v48, zero, v13, s11, v15]
// [Asm]   j .quick_sort210_5_32  # live: [v11, v25, v14, v48, zero, v13, s11, v15]
// [Asm] 
// [Asm] # block info: defs: [v46], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v25, v11, v14, zero, v29, v13, v32, s11, v15, v9], live_out: [v25, v11, v46, v14, v29, zero, v13, v32, s11, v15, v9]
// [Asm] # block parameters: []
// [Asm] .quick_sort210_5_30:
// [Asm] # control
// [Asm]   mv v46, zero  # live: [v25, v11, v46, v14, v29, zero, v13, v32, s11, v15, v9]
// [Asm]   j .quick_sort210_5_31  # live: [v25, v11, v46, v14, v29, zero, v13, v32, s11, v15, v9]
// [Asm] 
// [Asm] # block info: defs: [v51], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v25, v14, zero, v13, s11, v15], live_out: [v25, v14, v13, zero, s11, v15, v51]
// [Asm] # block parameters: []
// [Asm] .quick_sort210_5_34:
// [Asm] # control
// [Asm]   mv v51, zero  # live: [v25, v14, v13, zero, s11, v15, v51]
// [Asm]   j .quick_sort210_5_35  # live: [v25, v14, v13, zero, s11, v15, v51]
// [Asm] 
// [Asm] # block info: defs: [v74], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v71, v14, zero, v13, s11, v15], live_out: [v71, v14, v13, zero, v74, s11, v15]
// [Asm] # block parameters: []
// [Asm] .quick_sort210_5_13:
// [Asm] # control
// [Asm]   mv v74, zero  # live: [v71, v14, zero, v13, v74, s11, v15]
// [Asm]   j .quick_sort210_5_14  # live: [v71, v14, zero, v13, v74, s11, v15]
// [Asm] 
// [Asm] # leaf false
// [Asm] main239_7:
// [Asm] # block info: defs: [v3, t1, v14, v16, v7, ft0, ft1, a1, s11, v12, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, v4, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, s10, v9, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v2], uses: [v2, v14, v16, a0, a2, a1, v17, s11, v12, v9, v18, zero, v4, v3], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main239_7_0:
// [Asm]   # save_ctx1  # live: [zero, s11]
// [Asm]   # save_ctx2  # live: [zero, s11]
// [Asm]   call minimbt_read_int  # live: [zero, a0, s11]
// [Asm]   mv v4, a0  # live: [zero, v4, s11]
// [Asm]   # restore_ctx2  # live: [zero, v4, s11]
// [Asm]   slliw v17, v4, 2  # live: [zero, v4, v17, s11]
// [Asm]   sub v18, s11, v17  # live: [v18, zero, v4]
// [Asm]   andi v2, v18, -8  # live: [zero, v4, v2]
// [Asm]   mv s11, v2  # live: [zero, v4, s11, v2]
// [Asm]   mv a1, v4  # live: [zero, v4, a1, s11, v2]
// [Asm]   mv a0, v2  # live: [zero, a0, v4, a1, s11, v2]
// [Asm]   mv a2, zero  # live: [zero, a0, v4, a2, a1, s11, v2]
// [Asm]   call memseti32  # live: [v4, s11, zero, v2]
// [Asm]   addi v14, s11, -24  # live: [v4, v14, zero, v2]
// [Asm]   andi v3, v14, -8  # live: [v3, v4, zero, v2]
// [Asm]   mv s11, v3  # live: [v3, v4, zero, v2]
// [Asm]   la v16, input243_26  # live: [v3, v4, v16, zero, v2]
// [Asm]   sd v16, 0(v3)  # live: [v3, v4, zero, v2]
// [Asm]   sd v4, 8(v3)  # live: [v3, v4, zero, v2]
// [Asm]   sd v2, 16(v3)  # live: [v3, v4, zero, v2]
// [Asm]   mv s10, v3  # live: [v3, v4, zero, v2]
// [Asm]   ld v12, 0(v3)  # live: [v4, v12, zero, v2]
// [Asm]   # save_ctx2  # live: [v4, v12, zero, v2]
// [Asm]   mv a0, zero  # live: [v4, v12, zero, a0, v2]
// [Asm]   jalr v12  # live: [v4, zero, a0, v2]
// [Asm]   mv v7, a0  # live: [v4, zero, v2]
// [Asm]   # restore_ctx2  # live: [v4, zero, v2]
// [Asm]   # save_ctx2  # live: [v4, zero, v2]
// [Asm]   mv a0, v2  # live: [v4, zero, a0, v2]
// [Asm]   mv a1, v4  # live: [v4, a1, zero, a0, v2]
// [Asm]   call sort233_6  # live: [v4, zero, a0, v2]
// [Asm]   mv v8, a0  # live: [v4, zero, v2]
// [Asm]   # restore_ctx2  # live: [v4, zero, v2]
// [Asm]   # save_ctx2  # live: [v4, zero, v2]
// [Asm]   mv a0, v2  # live: [v4, a0, zero]
// [Asm]   mv a1, zero  # live: [v4, a1, a0]
// [Asm]   mv a2, v4  # live: [a2, a1, a0]
// [Asm]   call output14_1  # live: [a0]
// [Asm]   mv v9, a0  # live: [v9]
// [Asm]   # restore_ctx2  # live: [v9]
// [Asm] # control
// [Asm]   mv a0, v9  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] output14_1:
// [Asm] # block info: defs: [v3, v7, v4, v6, v5, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .output14_1_5:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm]   mv v6, v3  # live: [v4, v5, v6, zero]
// [Asm]   mv v7, v4  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v8], uses: [v8, v6, v7], upward_exposed: [v6, v7], params_defs: [v5, v6, v7]
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v6, v5, zero, v7]
// [Asm] # block parameters: [v5, v6, v7]
// [Asm] .output14_1_0:
// [Asm]   addi v8, v7, -1  # live: [v8, v6, v5, zero, v7]
// [Asm] # control
// [Asm]   blt v8, v6, .output14_1_2  # live: [v6, v5, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v13, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, v19, a6, ft5, ft10, v6, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v11, v5, v14, v18, a0, v7, v19, v6], upward_exposed: [v6, v5, v7], params_defs: []
// [Asm] # live_in: [v6, v5, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .output14_1_1:
// [Asm]   slliw v18, v6, 2  # live: [v5, v6, v18, zero, v7]
// [Asm]   add v19, v5, v18  # live: [v19, v5, v6, zero, v7]
// [Asm]   lw v11, 0(v19)  # live: [v11, v5, v6, zero, v7]
// [Asm]   # save_ctx2  # live: [v11, v5, v6, zero, v7]
// [Asm]   mv a0, v11  # live: [v5, v6, zero, a0, v7]
// [Asm]   call minimbt_print_int  # live: [v5, v6, zero, a0, v7]
// [Asm]   mv v12, a0  # live: [v5, v6, zero, v7]
// [Asm]   # restore_ctx2  # live: [v5, v6, zero, v7]
// [Asm]   # save_ctx2  # live: [v5, v6, zero, v7]
// [Asm]   call minimbt_print_endline  # live: [v5, v6, zero, a0, v7]
// [Asm]   mv v13, a0  # live: [v5, v6, zero, v7]
// [Asm]   # restore_ctx2  # live: [v5, v6, zero, v7]
// [Asm]   addi v14, v6, 1  # live: [v5, v14, zero, v7]
// [Asm] # control
// [Asm]   mv v5, v5  # live: [v5, v14, zero, v7]
// [Asm]   mv v6, v14  # live: [v5, v6, zero, v7]
// [Asm]   mv v7, v7  # live: [v5, v6, zero, v7]
// [Asm]   j .output14_1_0  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .output14_1_2:
// [Asm] # control
// [Asm]   mv v10, zero  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .output14_1_3:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] input243_26:
// [Asm] # block info: defs: [v3, v0, v4, v5, v2], uses: [v0, s10, a0, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0, zero], live_out: [v4, v5, zero, v3]
// [Asm] # block parameters: []
// [Asm] .input243_26_5:
// [Asm]   # save_ctx1  # live: [zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, zero, v2]
// [Asm]   lw v3, 8(v0)  # live: [v2, v0, zero, v3]
// [Asm]   ld v4, 16(v0)  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v6], uses: [v6, v5, v3], upward_exposed: [v5, v3], params_defs: [v5]
// [Asm] # live_in: [v4, v5, zero, v3], live_out: [v4, v5, zero, v3]
// [Asm] # block parameters: [v5]
// [Asm] .input243_26_0:
// [Asm]   addi v6, v3, -1  # live: [v4, v5, v6, zero, v3]
// [Asm] # control
// [Asm]   blt v6, v5, .input243_26_2  # live: [v4, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v13, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v11, v5, v14, a0, v13, v4, v9], upward_exposed: [v4, v5], params_defs: []
// [Asm] # live_in: [v4, v5, zero, v3], live_out: [v4, v5, zero, v3]
// [Asm] # block parameters: []
// [Asm] .input243_26_1:
// [Asm]   # save_ctx2  # live: [v4, v5, zero, v3]
// [Asm]   call minimbt_read_int  # live: [v4, v5, zero, a0, v3]
// [Asm]   mv v9, a0  # live: [v4, v5, zero, v9, v3]
// [Asm]   # restore_ctx2  # live: [v4, v5, zero, v9, v3]
// [Asm]   slliw v13, v5, 2  # live: [v3, v4, v5, zero, v9, v13]
// [Asm]   add v14, v4, v13  # live: [v4, v5, v14, zero, v9, v3]
// [Asm]   sw v9, 0(v14)  # live: [v4, v5, zero, v3]
// [Asm]   addi v11, v5, 1  # live: [v11, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v11  # live: [v4, v5, zero, v3]
// [Asm]   j .input243_26_0  # live: [v4, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v8], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v8]
// [Asm] # block parameters: []
// [Asm] .input243_26_2:
// [Asm] # control
// [Asm]   mv v8, zero  # live: [v8]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v8], upward_exposed: [v8], params_defs: [v8]
// [Asm] # live_in: [v8], live_out: []
// [Asm] # block parameters: [v8]
// [Asm] .input243_26_3:
// [Asm] # control
// [Asm]   mv a0, v8  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] sort_3173_21:
// [Asm] # block info: defs: [v2, t1, v13, v7, v0, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, v6, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, s10, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, v11, v5, a0, v13, v0, a2, a1, s10, v9, v8, v4, v3], upward_exposed: [a2, a1, s10, a0], params_defs: []
// [Asm] # live_in: [a2, a1, s10, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .sort_3173_21_0:
// [Asm]   # save_ctx1  # live: [a0, a2, a1, s10]
// [Asm]   mv v0, s10  # live: [a0, v0, a2, a1]
// [Asm]   mv v2, a0  # live: [v0, a2, a1, v2]
// [Asm]   mv v3, a1  # live: [v3, v0, a2, v2]
// [Asm]   mv v4, a2  # live: [v3, v0, v4, v2]
// [Asm]   ld v5, 8(v0)  # live: [v3, v5, v4, v2]
// [Asm]   mv s10, v5  # live: [v3, v5, v4, v2]
// [Asm]   ld v13, 0(v5)  # live: [v3, v5, v13, v4, v2]
// [Asm]   # save_ctx2  # live: [v3, v5, v13, v4, v2]
// [Asm]   mv a0, v2  # live: [v3, v5, a0, v13, v4, v2]
// [Asm]   mv a1, v3  # live: [v3, v5, a0, v13, v4, a1, v2]
// [Asm]   jalr v13  # live: [v2, v4, v5, a0, v3]
// [Asm]   mv v6, a0  # live: [v2, v4, v5, v3]
// [Asm]   # restore_ctx2  # live: [v2, v4, v5, v3]
// [Asm]   mv s10, v5  # live: [v2, v4, v5, v3]
// [Asm]   ld v11, 0(v5)  # live: [v2, v11, v4, v5, v3]
// [Asm]   # save_ctx2  # live: [v2, v11, v4, v5, v3]
// [Asm]   mv a0, v3  # live: [v2, v11, v4, v5, a0, v3]
// [Asm]   mv a1, v4  # live: [v2, v11, v5, a1, a0, v3]
// [Asm]   jalr v11  # live: [v2, v5, a0, v3]
// [Asm]   mv v7, a0  # live: [v2, v5, v3]
// [Asm]   # restore_ctx2  # live: [v2, v5, v3]
// [Asm]   mv s10, v5  # live: [v2, v5, v3]
// [Asm]   ld v9, 0(v5)  # live: [v2, v9, v3]
// [Asm]   # save_ctx2  # live: [v2, v9, v3]
// [Asm]   mv a0, v2  # live: [a0, v9, v3]
// [Asm]   mv a1, v3  # live: [a1, a0, v9]
// [Asm]   jalr v9  # live: [a0]
// [Asm]   mv v8, a0  # live: [v8]
// [Asm]   # restore_ctx2  # live: [v8]
// [Asm] # control
// [Asm]   mv a0, v8  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] sort233_6:
// [Asm] # block info: defs: [v2, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, a0, zero, a2, v4, a1, v3], upward_exposed: [a1, a0, zero], params_defs: []
// [Asm] # live_in: [a1, a0, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .sort233_6_0:
// [Asm]   # save_ctx1  # live: [a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, v3]
// [Asm]   mv a0, v2  # live: [a0, zero, v3]
// [Asm]   mv a1, zero  # live: [a1, a0, v3]
// [Asm]   mv a2, v3  # live: [a2, a1, a0]
// [Asm]   call quick_sort210_5  # live: [a0]
// [Asm]   mv v4, a0  # live: [v4]
// [Asm]   # restore_ctx2  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] sort_2157_19:
// [Asm] # block info: defs: [v2, v5, v22, v23, v20, v7, v8, v19, v0, v4, v6, v3], uses: [v3, a0, v22, v7, v0, a1, s10, v23, v20, v8, v19, v4, v6, v2], upward_exposed: [a1, s10, a0], params_defs: []
// [Asm] # live_in: [a1, s10, a0, zero], live_out: [v3, v4, v5, zero, v2]
// [Asm] # block parameters: []
// [Asm] .sort_2157_19_0:
// [Asm]   # save_ctx1  # live: [zero, a0, a1, s10]
// [Asm]   mv v0, s10  # live: [zero, a0, v0, a1]
// [Asm]   mv v2, a0  # live: [zero, v0, a1, v2]
// [Asm]   mv v3, a1  # live: [v3, zero, v0, v2]
// [Asm]   ld v4, 8(v0)  # live: [v3, zero, v0, v4, v2]
// [Asm]   ld v5, 16(v0)  # live: [v3, v5, zero, v4, v2]
// [Asm]   slliw v22, v3, 2  # live: [v3, v5, zero, v22, v4, v2]
// [Asm]   add v23, v4, v22  # live: [v3, v5, zero, v23, v4, v2]
// [Asm]   lw v6, 0(v23)  # live: [v3, v5, zero, v4, v6, v2]
// [Asm]   slliw v19, v2, 2  # live: [v3, v5, zero, v19, v4, v6, v2]
// [Asm]   add v20, v4, v19  # live: [v3, v5, zero, v20, v4, v6, v2]
// [Asm]   lw v7, 0(v20)  # live: [v3, v5, zero, v7, v4, v6, v2]
// [Asm]   addi v8, v7, -1  # live: [v3, v5, zero, v8, v4, v6, v2]
// [Asm] # control
// [Asm]   blt v8, v6, .sort_2157_19_2  # live: [v2, v4, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v2, v11, v5, a0, zero, v4, a2, a1, v12, v3], upward_exposed: [v3, v4, v5, zero, v2], params_defs: []
// [Asm] # live_in: [v2, v4, v5, zero, v3], live_out: [v14]
// [Asm] # block parameters: []
// [Asm] .sort_2157_19_1:
// [Asm]   # save_ctx2  # live: [v2, v4, v5, zero, v3]
// [Asm]   mv a0, v4  # live: [v2, v5, zero, a0, v3]
// [Asm]   mv a1, v2  # live: [v5, a1, zero, a0, v3]
// [Asm]   mv a2, v3  # live: [a2, v5, a1, zero, a0]
// [Asm]   call swap1_0  # live: [v5, zero, a0]
// [Asm]   mv v10, a0  # live: [v5, zero]
// [Asm]   # restore_ctx2  # live: [v5, zero]
// [Asm]   lw v11, 0(v5)  # live: [v11, v5, zero]
// [Asm]   addi v12, v11, 1  # live: [v5, v12, zero]
// [Asm]   sw v12, 0(v5)  # live: [zero]
// [Asm] # control
// [Asm]   mv v14, zero  # live: [v14]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v14, a0], upward_exposed: [v14], params_defs: [v14]
// [Asm] # live_in: [v14], live_out: []
// [Asm] # block parameters: [v14]
// [Asm] .sort_2157_19_3:
// [Asm] # control
// [Asm]   mv a0, v14  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v14], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v14]
// [Asm] # block parameters: []
// [Asm] .sort_2157_19_2:
// [Asm] # control
// [Asm]   mv v14, zero  # live: [v14]
// [Asm]   j .sort_2157_19_3  # live: [v14]
// [Asm] 
// [Asm] # leaf true
// [Asm] swap1_0:
// [Asm] # block info: defs: [v3, v11, v16, v5, v14, v10, v13, a0, v17, v12, v9, v4, v6, v2], uses: [v2, v11, v16, v14, v5, v10, v13, a0, a2, v17, a1, v12, v9, zero, v4, v6, v3], upward_exposed: [a2, a1, a0, zero], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .swap1_0_0:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v3, a2, zero, v2]
// [Asm]   mv v4, a2  # live: [v3, v4, zero, v2]
// [Asm]   slliw v16, v3, 2  # live: [v3, v4, v16, zero, v2]
// [Asm]   add v17, v2, v16  # live: [v3, v4, v17, zero, v2]
// [Asm]   lw v5, 0(v17)  # live: [v3, v4, v5, zero, v2]
// [Asm]   slliw v13, v4, 2  # live: [v3, v4, v5, zero, v13, v2]
// [Asm]   add v14, v2, v13  # live: [v3, v4, v5, v14, zero, v2]
// [Asm]   lw v6, 0(v14)  # live: [v3, v4, v5, v6, zero, v2]
// [Asm]   slliw v11, v3, 2  # live: [v11, v4, v5, v6, zero, v2]
// [Asm]   add v12, v2, v11  # live: [v4, v5, v6, v12, zero, v2]
// [Asm]   sw v6, 0(v12)  # live: [v4, v5, zero, v2]
// [Asm]   slliw v9, v4, 2  # live: [v5, zero, v9, v2]
// [Asm]   add v10, v2, v9  # live: [v5, v10, zero]
// [Asm]   sw v5, 0(v10)  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] f54_13:
// [Asm] # block info: defs: [v3, v0, v4, v5, v2], uses: [v0, s10, a0, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0, zero], live_out: [v4, v5, zero, v3]
// [Asm] # block parameters: []
// [Asm] .f54_13_5:
// [Asm]   # save_ctx1  # live: [zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, zero, v2]
// [Asm]   lw v3, 8(v0)  # live: [v2, v0, zero, v3]
// [Asm]   ld v4, 16(v0)  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v6], uses: [v6, v5, v3], upward_exposed: [v5, v3], params_defs: [v5]
// [Asm] # live_in: [v4, v5, zero, v3], live_out: [v4, v5, zero, v3]
// [Asm] # block parameters: [v5]
// [Asm] .f54_13_0:
// [Asm]   addi v6, v3, -1  # live: [v4, v5, v6, zero, v3]
// [Asm] # control
// [Asm]   blt v6, v5, .f54_13_2  # live: [v4, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, v5, ft9, v10, a5, fa4, a0, ft2, a2, a3, s10, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v4, v5, v12, v10, a0], upward_exposed: [v4, v5], params_defs: []
// [Asm] # live_in: [v4, v5, zero, v3], live_out: [v4, v5, zero, v3]
// [Asm] # block parameters: []
// [Asm] .f54_13_1:
// [Asm]   mv s10, v4  # live: [v4, v5, zero, v3]
// [Asm]   ld v12, 0(v4)  # live: [v4, v5, v12, zero, v3]
// [Asm]   # save_ctx2  # live: [v4, v5, v12, zero, v3]
// [Asm]   mv a0, v5  # live: [v4, v5, v12, zero, a0, v3]
// [Asm]   jalr v12  # live: [v4, v5, zero, a0, v3]
// [Asm]   mv v9, a0  # live: [v4, v5, zero, v3]
// [Asm]   # restore_ctx2  # live: [v4, v5, zero, v3]
// [Asm]   addi v10, v5, 1  # live: [v4, v10, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v10  # live: [v4, v5, zero, v3]
// [Asm]   j .f54_13_0  # live: [v4, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v8], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v8]
// [Asm] # block parameters: []
// [Asm] .f54_13_2:
// [Asm] # control
// [Asm]   mv v8, zero  # live: [v8]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v8], upward_exposed: [v8], params_defs: [v8]
// [Asm] # live_in: [v8], live_out: []
// [Asm] # block parameters: [v8]
// [Asm] .f54_13_3:
// [Asm] # control
// [Asm]   mv a0, v8  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_28:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_28_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main239_7  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] aux86_16:
// [Asm] # block info: defs: [v2, v5, v7, v8, v0, v4, v6, v3], uses: [v0, s10, a0, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0, zero], live_out: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux86_16_11:
// [Asm]   # save_ctx1  # live: [zero, a0, s10]
// [Asm]   mv v0, s10  # live: [zero, a0, v0]
// [Asm]   mv v2, a0  # live: [zero, v0, v2]
// [Asm]   lw v3, 8(v0)  # live: [v2, zero, v0, v3]
// [Asm]   ld v4, 16(v0)  # live: [v2, zero, v0, v4, v3]
// [Asm]   lw v5, 24(v0)  # live: [v2, v5, zero, v0, v4, v3]
// [Asm]   ld v6, 32(v0)  # live: [v2, v5, zero, v0, v4, v6, v3]
// [Asm]   ld v7, 40(v0)  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v8, v2  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v9], uses: [v8, v9, v3], upward_exposed: [v8, v3], params_defs: [v8]
// [Asm] # live_in: [v5, zero, v8, v7, v4, v6, v3], live_out: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] # block parameters: [v8]
// [Asm] .aux86_16_0:
// [Asm]   addi v9, v3, -2  # live: [v5, zero, v8, v7, v4, v6, v9, v3]
// [Asm] # control
// [Asm]   blt v9, v8, .aux86_16_2  # live: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v12, v33, v34, v13], uses: [v5, v13, v8, v4, v12, v33, v34], upward_exposed: [v4, v5, v8], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v8, v4, v6, v3], live_out: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux86_16_1:
// [Asm]   slliw v33, v8, 2  # live: [v5, zero, v8, v7, v4, v6, v33, v3]
// [Asm]   add v34, v4, v33  # live: [v5, zero, v8, v7, v4, v6, v34, v3]
// [Asm]   lw v12, 0(v34)  # live: [v5, zero, v8, v7, v4, v6, v12, v3]
// [Asm]   addi v13, v5, -1  # live: [v5, zero, v13, v8, v7, v4, v6, v12, v3]
// [Asm] # control
// [Asm]   blt v13, v12, .aux86_16_4  # live: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v15], uses: [v6, v15, v8], upward_exposed: [v6, v8], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v8, v4, v6, v3], live_out: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux86_16_3:
// [Asm]   lw v15, 0(v6)  # live: [v5, zero, v8, v7, v4, v6, v15, v3]
// [Asm] # control
// [Asm]   beq v15, v8, .aux86_16_5  # live: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v20, a6, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [a0, zero, v8, v7, v4, a2, v17, a1, v6], upward_exposed: [v7, v4, v6, zero, v8], params_defs: []
// [Asm] # live_in: [v5, zero, v8, v7, v4, v6, v3], live_out: [v5, zero, v20, v8, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux86_16_6:
// [Asm]   lw v17, 0(v6)  # live: [v5, zero, v7, v8, v4, v6, v17, v3]
// [Asm]   # save_ctx2  # live: [v5, zero, v7, v8, v4, v6, v17, v3]
// [Asm]   mv a0, v4  # live: [v5, zero, a0, v7, v8, v4, v6, v17, v3]
// [Asm]   mv a1, v17  # live: [v5, zero, a0, v7, v8, v4, a1, v6, v3]
// [Asm]   mv a2, v8  # live: [v5, zero, a0, v7, v8, v4, a2, a1, v6, v3]
// [Asm]   call swap1_0  # live: [v5, zero, a0, v7, v8, v4, v6, v3]
// [Asm]   mv v18, a0  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   # restore_ctx2  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   sw zero, 0(v7)  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v20, zero  # live: [v5, zero, v20, v7, v8, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v21, v24, v22], uses: [v6, v21, zero, v22], upward_exposed: [v6, zero], params_defs: [v20]
// [Asm] # live_in: [v5, zero, v20, v8, v7, v4, v6, v3], live_out: [v5, zero, v8, v7, v4, v6, v24, v3]
// [Asm] # block parameters: [v20]
// [Asm] .aux86_16_7:
// [Asm]   lw v21, 0(v6)  # live: [v5, v21, zero, v7, v8, v4, v6, v3]
// [Asm]   addi v22, v21, 1  # live: [v5, zero, v22, v7, v8, v4, v6, v3]
// [Asm]   sw v22, 0(v6)  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v24, zero  # live: [v5, zero, v7, v8, v4, v6, v24, v3]
// [Asm] 
// [Asm] # block info: defs: [v25, v8], uses: [v25, v8], upward_exposed: [v8], params_defs: [v24]
// [Asm] # live_in: [v5, zero, v8, v7, v4, v6, v24, v3], live_out: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: [v24]
// [Asm] .aux86_16_8:
// [Asm]   addi v25, v8, 1  # live: [v25, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v8, v25  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   j .aux86_16_0  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v11], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v11]
// [Asm] # block parameters: []
// [Asm] .aux86_16_2:
// [Asm] # control
// [Asm]   mv v11, zero  # live: [v11]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v11, a0], upward_exposed: [v11], params_defs: [v11]
// [Asm] # live_in: [v11], live_out: []
// [Asm] # block parameters: [v11]
// [Asm] .aux86_16_9:
// [Asm] # control
// [Asm]   mv a0, v11  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v24], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v5, zero, v8, v7, v4, v6, v3], live_out: [v5, zero, v8, v7, v4, v6, v24, v3]
// [Asm] # block parameters: []
// [Asm] .aux86_16_4:
// [Asm] # control
// [Asm]   mv v24, zero  # live: [v5, zero, v7, v8, v4, v6, v24, v3]
// [Asm]   j .aux86_16_8  # live: [v5, zero, v7, v8, v4, v6, v24, v3]
// [Asm] 
// [Asm] # block info: defs: [v20], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v5, zero, v8, v7, v4, v6, v3], live_out: [v5, zero, v20, v8, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux86_16_5:
// [Asm] # control
// [Asm]   mv v20, zero  # live: [v5, zero, v20, v7, v8, v4, v6, v3]
// [Asm]   j .aux86_16_7  # live: [v5, zero, v20, v7, v8, v4, v6, v3]
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_28  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("swap", Unit), args: [("arr", Array(Int)), ("i", Int), ("j", Int)], body: Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j"))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit)))}, LetRec({name: ("output", Unit), args: [("arr", Array(Int)), ("i", Int), ("len", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Var("arr"), Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("len")]))), Unit)}, LetRec({name: ("insertion_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: LetRec({name: ("g", Unit), args: [("j", Int)], body: If(LE(Prim(Int(1), Var("low"), Add, kind=Some(Int)), Var("j")), If(LE(Get(Var("arr"), Var("j")), Prim(Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))]), App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])), Unit), Unit)}, LetRec({name: ("f", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("j", Var({val: Some(Int)})), Var("i"), Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("f"), [Prim(Var("low"), Int(1), Add, kind=Some(Int))])))}, LetRec({name: ("partition", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("pivot_index", Int), ("low", Int), ("high", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("pivot_index"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Var("low")), Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))))))))}, LetRec({name: ("choose_pivot", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("use_median_of_medians", Var({val: Some(Int)})), Int(50), Let(("swaps", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))))))}, LetRec({name: ("quick_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))))}, LetRec({name: ("sort", Unit), args: [("x", Array(Int)), ("len", Int)], body: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), [])))))))))
// [Knf] build_knf: Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j"))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit)))
// [Knf] build_knf: Get(Var("arr"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j"))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit))
// [Knf] build_knf: Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j")))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("arr"), Var("j"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit)
// [Knf] build_knf: Put(Var("arr"), Var("j"), Var("tmp"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Var("tmp")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("output", Unit), args: [("arr", Array(Int)), ("i", Int), ("len", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Var("arr"), Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("len")]))), Unit)}, LetRec({name: ("insertion_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: LetRec({name: ("g", Unit), args: [("j", Int)], body: If(LE(Prim(Int(1), Var("low"), Add, kind=Some(Int)), Var("j")), If(LE(Get(Var("arr"), Var("j")), Prim(Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))]), App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])), Unit), Unit)}, LetRec({name: ("f", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("j", Var({val: Some(Int)})), Var("i"), Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("f"), [Prim(Var("low"), Int(1), Add, kind=Some(Int))])))}, LetRec({name: ("partition", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("pivot_index", Int), ("low", Int), ("high", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("pivot_index"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Var("low")), Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))))))))}, LetRec({name: ("choose_pivot", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("use_median_of_medians", Var({val: Some(Int)})), Int(50), Let(("swaps", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))))))}, LetRec({name: ("quick_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))))}, LetRec({name: ("sort", Unit), args: [("x", Array(Int)), ("len", Int)], body: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), []))))))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Var("arr"), Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("len")]))), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Var("arr"), Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("len")])))
// [Knf] build_knf: App(Var("print_int"), [Get(Var("arr"), Var("i"))])
// [Knf] build_knf: Get(Var("arr"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Var("arr"), Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("len")]))
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: App(Var("output"), [Var("arr"), Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("len")])
// [Knf] build_knf: Var("output")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("insertion_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: LetRec({name: ("g", Unit), args: [("j", Int)], body: If(LE(Prim(Int(1), Var("low"), Add, kind=Some(Int)), Var("j")), If(LE(Get(Var("arr"), Var("j")), Prim(Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))]), App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])), Unit), Unit)}, LetRec({name: ("f", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("j", Var({val: Some(Int)})), Var("i"), Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("f"), [Prim(Var("low"), Int(1), Add, kind=Some(Int))])))}, LetRec({name: ("partition", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("pivot_index", Int), ("low", Int), ("high", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("pivot_index"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Var("low")), Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))))))))}, LetRec({name: ("choose_pivot", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("use_median_of_medians", Var({val: Some(Int)})), Int(50), Let(("swaps", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))))))}, LetRec({name: ("quick_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))))}, LetRec({name: ("sort", Unit), args: [("x", Array(Int)), ("len", Int)], body: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), [])))))))
// [Knf] build_knf: LetRec({name: ("g", Unit), args: [("j", Int)], body: If(LE(Prim(Int(1), Var("low"), Add, kind=Some(Int)), Var("j")), If(LE(Get(Var("arr"), Var("j")), Prim(Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))]), App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])), Unit), Unit)}, LetRec({name: ("f", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("j", Var({val: Some(Int)})), Var("i"), Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("f"), [Prim(Var("low"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: If(LE(Prim(Int(1), Var("low"), Add, kind=Some(Int)), Var("j")), If(LE(Get(Var("arr"), Var("j")), Prim(Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))]), App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])), Unit), Unit)
// [Knf] build_knf: Prim(Int(1), Var("low"), Add, kind=Some(Int))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: If(LE(Get(Var("arr"), Var("j")), Prim(Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))]), App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])), Unit)
// [Knf] build_knf: Get(Var("arr"), Var("j"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("j"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))]), App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))]))
// [Knf] build_knf: App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("swap")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Var("j"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Prim(Var("j"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("f", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("j", Var({val: Some(Int)})), Var("i"), Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("f"), [Prim(Var("low"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("j", Var({val: Some(Int)})), Var("i"), Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("high"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("j", Var({val: Some(Int)})), Var("i"), Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("g"), [Var("j")])
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("f"), [Prim(Var("low"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Prim(Var("low"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("partition", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("pivot_index", Int), ("low", Int), ("high", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("pivot_index"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Var("low")), Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))))))))}, LetRec({name: ("choose_pivot", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("use_median_of_medians", Var({val: Some(Int)})), Int(50), Let(("swaps", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))))))}, LetRec({name: ("quick_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))))}, LetRec({name: ("sort", Unit), args: [("x", Array(Int)), ("len", Int)], body: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), []))))))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("pivot_index"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Var("low")), Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))))))))
// [Knf] build_knf: App(Var("swap"), [Var("arr"), Var("pivot_index"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("swap")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("pivot_index")
// [Knf] build_knf: Prim(Var("high"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Var("low")), Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))])))))))
// [Knf] build_knf: Get(Var("arr"), Prim(Var("high"), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("high"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Var("low")), Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))))))
// [Knf] build_knf: Array(Int(1), Var("low"))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))])))))
// [Knf] build_knf: Array(Int(1), Int(1))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))))
// [Knf] build_knf: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Var("high"), Int(2), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit)
// [Knf] build_knf: Get(Var("arr"), Var("j"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("pivot")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit))
// [Knf] build_knf: If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0))))
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))
// [Knf] build_knf: App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])
// [Knf] build_knf: Var("swap")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Put(Var("partitioned"), Int(0), Int(0))
// [Knf] build_knf: Var("partitioned")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)
// [Knf] build_knf: Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("j"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))])))
// [Knf] build_knf: App(Var("aux"), [Var("low")])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))
// [Knf] build_knf: App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("swap")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Var("high"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))])
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Eq(Get(Var("partitioned"), Int(0)), Int(1))
// [Knf] build_knf: Get(Var("partitioned"), Int(0))
// [Knf] build_knf: Var("partitioned")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("choose_pivot", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("use_median_of_medians", Var({val: Some(Int)})), Int(50), Let(("swaps", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))))))}, LetRec({name: ("quick_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))))}, LetRec({name: ("sort", Unit), args: [("x", Array(Int)), ("len", Int)], body: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), [])))))
// [Knf] build_knf: Let(("use_median_of_medians", Var({val: Some(Int)})), Int(50), Let(("swaps", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))))))
// [Knf] build_knf: Int(50)
// [Knf] build_knf: Let(("swaps", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))])))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))))
// [Knf] build_knf: Prim(Var("high"), Var("low"), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))])))
// [Knf] build_knf: Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int))
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int))
// [Knf] build_knf: Prim(Var("len"), Int(4), Div, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(4)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))
// [Knf] build_knf: If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit)
// [Knf] build_knf: Int(8)
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")]))))))
// [Knf] build_knf: Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int))
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int))
// [Knf] build_knf: Prim(Var("len"), Int(4), Div, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(4)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))
// [Knf] build_knf: Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int))
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int))
// [Knf] build_knf: Prim(Var("len"), Int(4), Div, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(4)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")]))))
// [Knf] build_knf: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)
// [Knf] build_knf: Get(Var("arr"), Var("b"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("arr"), Var("a"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int))))
// [Knf] build_knf: App(Var("swap"), [Var("arr"), Var("a"), Var("b")])
// [Knf] build_knf: Var("swap")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("swaps")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("swaps"), Int(0))
// [Knf] build_knf: Var("swaps")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))
// [Knf] build_knf: App(Var("sort_2"), [Var("a"), Var("b")])
// [Knf] build_knf: Var("sort_2")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")]))
// [Knf] build_knf: App(Var("sort_2"), [Var("b"), Var("c")])
// [Knf] build_knf: Var("sort_2")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: App(Var("sort_2"), [Var("a"), Var("b")])
// [Knf] build_knf: Var("sort_2")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")]))
// [Knf] build_knf: If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit)
// [Knf] build_knf: Var("use_median_of_medians")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("sort_3")
// [Knf] build_knf: Prim(Var("a"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Prim(Var("a"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("sort_3")
// [Knf] build_knf: Prim(Var("b"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Prim(Var("b"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("sort_3")
// [Knf] build_knf: Prim(Var("c"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Prim(Var("c"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("sort_3")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Unit
// [Knf] build_knf: Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))])
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Eq(Get(Var("swaps"), Int(0)), Int(0))
// [Knf] build_knf: Get(Var("swaps"), Int(0))
// [Knf] build_knf: Var("swaps")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("quick_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))))}, LetRec({name: ("sort", Unit), args: [("x", Array(Int)), ("len", Int)], body: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), []))))
// [Knf] build_knf: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))))
// [Knf] build_knf: Prim(Var("high"), Var("low"), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")])))))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(16)
// [Knf] build_knf: App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")])
// [Knf] build_knf: Var("insertion_sort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Var("high")
// [Knf] build_knf: LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))
// [Knf] build_knf: App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")])
// [Knf] build_knf: Var("choose_pivot")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Var("high")
// [Knf] build_knf: LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")])))
// [Knf] build_knf: App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")])
// [Knf] build_knf: Var("partition")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("pivot_index")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))
// [Knf] build_knf: App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")])
// [Knf] build_knf: Var("quick_sort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Var("pivot")
// [Knf] build_knf: App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")])
// [Knf] build_knf: Var("quick_sort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("pivot"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pivot")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("high")
// [Knf] build_knf: LetRec({name: ("sort", Unit), args: [("x", Array(Int)), ("len", Int)], body: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), [])))
// [Knf] build_knf: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])
// [Knf] build_knf: Var("quick_sort")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("len")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))
// [Knf] build_knf: App(Var("read_int"), [])
// [Knf] build_knf: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")])))))
// [Knf] build_knf: Array(Var("len"), Int(0))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("arr"), Var("i"), App(Var("read_int"), []))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("read_int"), [])
// [Knf] build_knf: App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("input")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")])))
// [Knf] build_knf: App(Var("input"), [Int(0)])
// [Knf] build_knf: Var("input")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))
// [Knf] build_knf: App(Var("sort"), [Var("arr"), Var("len")])
// [Knf] build_knf: Var("sort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("len")
// [Knf] build_knf: App(Var("output"), [Var("arr"), Int(0), Var("len")])
// [Knf] build_knf: Var("output")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("len")
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memseti32
// [Main]   .type memseti32, @function
// [Main] memseti32:
// [Main]   blez a1, .memseti32_b1
// [Main]   slli a1, a1, 2
// [Main]   add a1, a1, a0
// [Main] .memseti32_b0:
// [Main]   sw a2, 0(a0)
// [Main]   addi a0, a0, 4
// [Main]   bne a0, a1, .memseti32_b0
// [Main] .memseti32_b1:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl g37_11
// [Main]   .type g37_11, @function
// [Main] # leaf false
// [Main] g37_11:
// [Main] .g37_11_8:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv a1, s10
// [Main]   lw s2, 8(a1)
// [Main]   ld s1, 16(a1)
// [Main]   mv s0, a0
// [Main] 
// [Main] .g37_11_0:
// [Main]   addi a0, s2, 1
// [Main]   blt s0, a0, .g37_11_2
// [Main] 
// [Main] .g37_11_1:
// [Main]   slliw a0, s0, 2
// [Main]   add a0, s1, a0
// [Main]   lw a0, 0(a0)
// [Main]   addi a1, s0, -1
// [Main]   slliw a1, a1, 2
// [Main]   add a1, s1, a1
// [Main]   lw a1, 0(a1)
// [Main]   addi a1, a1, -1
// [Main]   blt a1, a0, .g37_11_4
// [Main] 
// [Main] .g37_11_3:
// [Main]   addi a2, s0, -1
// [Main]   mv a0, s1
// [Main]   mv a1, s0
// [Main]   call swap1_0
// [Main]   addi a0, s0, -1
// [Main]   mv s0, a0
// [Main]   j .g37_11_0
// [Main] 
// [Main] .g37_11_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .g37_11_6:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .g37_11_4:
// [Main]   mv a0, zero
// [Main] 
// [Main] .g37_11_5:
// [Main]   j .g37_11_6
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl insertion_sort30_2
// [Main]   .type insertion_sort30_2, @function
// [Main] # leaf false
// [Main] insertion_sort30_2:
// [Main] .insertion_sort30_2_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   addi a3, s11, -24
// [Main]   andi a3, a3, -8
// [Main]   mv s11, a3
// [Main]   la a4, g37_11
// [Main]   sd a4, 0(a3)
// [Main]   sd a1, 8(a3)
// [Main]   sd a0, 16(a3)
// [Main]   addi a0, s11, -24
// [Main]   andi a0, a0, -8
// [Main]   mv s11, a0
// [Main]   la a4, f54_13
// [Main]   sd a4, 0(a0)
// [Main]   sd a2, 8(a0)
// [Main]   sd a3, 16(a0)
// [Main]   addi a1, a1, 1
// [Main]   mv s10, a0
// [Main]   ld a2, 0(a0)
// [Main]   mv a0, a1
// [Main]   jalr a2
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl quick_sort210_5
// [Main]   .type quick_sort210_5, @function
// [Main] # leaf false
// [Main] quick_sort210_5:
// [Main] .quick_sort210_5_5:
// [Main]   addi sp, sp, -80
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   sd s6, 56(sp)
// [Main]   sd s7, 64(sp)
// [Main]   mv s1, a0
// [Main]   mv s0, a1
// [Main]   mv s2, a2
// [Main] 
// [Main] .quick_sort210_5_0:
// [Main]   sub a0, s2, s0
// [Main]   li a1, 16
// [Main]   blt a1, a0, .quick_sort210_5_2
// [Main] 
// [Main] .quick_sort210_5_1:
// [Main]   mv a0, s1
// [Main]   mv a1, s0
// [Main]   mv a2, s2
// [Main]   call insertion_sort30_2
// [Main] 
// [Main] .quick_sort210_5_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   ld s6, 56(sp)
// [Main]   ld s7, 64(sp)
// [Main]   addi sp, sp, 80
// [Main]   ret
// [Main] 
// [Main] .quick_sort210_5_2:
// [Main]   mv a0, s1
// [Main]   mv a1, s0
// [Main]   mv a2, s2
// [Main] 
// [Main] .quick_sort210_5_26:
// [Main]   addi a0, s11, -4
// [Main]   andi s3, a0, -8
// [Main]   mv s11, s3
// [Main]   sw zero, 0(s3)
// [Main]   sub a0, s2, s0
// [Main]   li a1, 4
// [Main]   div a1, a0, a1
// [Main]   li a2, 2
// [Main]   mul a1, a1, a2
// [Main]   add s4, s0, a1
// [Main]   li a1, 8
// [Main]   blt a0, a1, .quick_sort210_5_28
// [Main] 
// [Main] .quick_sort210_5_27:
// [Main]   li a1, 4
// [Main]   div a1, a0, a1
// [Main]   li a2, 1
// [Main]   mul a1, a1, a2
// [Main]   add s5, s0, a1
// [Main]   li a1, 4
// [Main]   div a1, a0, a1
// [Main]   li a2, 3
// [Main]   mul a1, a1, a2
// [Main]   add s6, s0, a1
// [Main]   addi a1, s11, -24
// [Main]   andi a1, a1, -8
// [Main]   mv s11, a1
// [Main]   la a2, sort_2157_19
// [Main]   sd a2, 0(a1)
// [Main]   sd s1, 8(a1)
// [Main]   sd s3, 16(a1)
// [Main]   addi a2, s11, -16
// [Main]   andi s7, a2, -8
// [Main]   mv s11, s7
// [Main]   la a2, sort_3173_21
// [Main]   sd a2, 0(s7)
// [Main]   sd a1, 8(s7)
// [Main]   addi a0, a0, -1
// [Main]   li a1, 50
// [Main]   blt a0, a1, .quick_sort210_5_30
// [Main] 
// [Main] .quick_sort210_5_29:
// [Main]   addi a0, s5, -1
// [Main]   addi a2, s5, 1
// [Main]   mv s10, s7
// [Main]   ld a3, 0(s7)
// [Main]   mv a1, s5
// [Main]   jalr a3
// [Main]   addi a0, s4, -1
// [Main]   addi a2, s4, 1
// [Main]   mv s10, s7
// [Main]   ld a3, 0(s7)
// [Main]   mv a1, s4
// [Main]   jalr a3
// [Main]   addi a0, s6, -1
// [Main]   addi a2, s6, 1
// [Main]   mv s10, s7
// [Main]   ld a3, 0(s7)
// [Main]   mv a1, s6
// [Main]   jalr a3
// [Main] 
// [Main] .quick_sort210_5_31:
// [Main]   mv s10, s7
// [Main]   ld a3, 0(s7)
// [Main]   mv a0, s5
// [Main]   mv a1, s4
// [Main]   mv a2, s6
// [Main]   jalr a3
// [Main] 
// [Main] .quick_sort210_5_32:
// [Main]   lw a0, 0(s3)
// [Main]   bne a0, zero, .quick_sort210_5_34
// [Main] 
// [Main] .quick_sort210_5_33:
// [Main]   li a0, 1
// [Main] 
// [Main] .quick_sort210_5_35:
// [Main]   addi a1, s11, -8
// [Main]   andi a1, a1, -8
// [Main]   mv s11, a1
// [Main]   sw s4, 0(a1)
// [Main]   sw a0, 4(a1)
// [Main]   mv a0, a1
// [Main] 
// [Main] .quick_sort210_5_6:
// [Main]   lw a1, 0(a0)
// [Main]   mv a0, s1
// [Main]   mv a2, s0
// [Main]   mv a3, s2
// [Main] 
// [Main] .quick_sort210_5_11:
// [Main]   addi a2, s2, -1
// [Main]   mv a0, s1
// [Main]   call swap1_0
// [Main]   addi a0, s2, -1
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s1, a0
// [Main]   lw a0, 0(a0)
// [Main]   addi a1, s11, -4
// [Main]   andi s3, a1, -8
// [Main]   mv s11, s3
// [Main]   sw s0, 0(s3)
// [Main]   addi a1, s11, -4
// [Main]   andi s4, a1, -8
// [Main]   mv s11, s4
// [Main]   li a1, 1
// [Main]   sw a1, 0(s4)
// [Main]   addi a1, s11, -48
// [Main]   andi a2, a1, -8
// [Main]   mv s11, a2
// [Main]   la a1, aux86_16
// [Main]   sd a1, 0(a2)
// [Main]   sd s2, 8(a2)
// [Main]   sd s1, 16(a2)
// [Main]   sd a0, 24(a2)
// [Main]   sd s3, 32(a2)
// [Main]   sd s4, 40(a2)
// [Main]   mv s10, a2
// [Main]   ld a1, 0(a2)
// [Main]   mv a0, s0
// [Main]   jalr a1
// [Main]   lw a1, 0(s3)
// [Main]   addi a2, s2, -1
// [Main]   mv a0, s1
// [Main]   call swap1_0
// [Main]   lw a0, 0(s3)
// [Main]   lw a1, 0(s4)
// [Main]   li a2, 1
// [Main]   bne a1, a2, .quick_sort210_5_13
// [Main] 
// [Main] .quick_sort210_5_12:
// [Main]   li a1, 1
// [Main] 
// [Main] .quick_sort210_5_14:
// [Main]   addi a2, s11, -8
// [Main]   andi a2, a2, -8
// [Main]   mv s11, a2
// [Main]   sw a0, 0(a2)
// [Main]   sw a1, 4(a2)
// [Main]   mv a0, a2
// [Main] 
// [Main] .quick_sort210_5_7:
// [Main]   lw s3, 0(a0)
// [Main]   mv a0, s1
// [Main]   mv a1, s0
// [Main]   mv a2, s3
// [Main]   call quick_sort210_5
// [Main]   addi a0, s3, 1
// [Main]   mv s0, a0
// [Main]   j .quick_sort210_5_0
// [Main] 
// [Main] .quick_sort210_5_28:
// [Main]   mv a0, zero
// [Main]   j .quick_sort210_5_32
// [Main] 
// [Main] .quick_sort210_5_30:
// [Main]   mv a0, zero
// [Main]   j .quick_sort210_5_31
// [Main] 
// [Main] .quick_sort210_5_34:
// [Main]   mv a0, zero
// [Main]   j .quick_sort210_5_35
// [Main] 
// [Main] .quick_sort210_5_13:
// [Main]   mv a1, zero
// [Main]   j .quick_sort210_5_14
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main239_7
// [Main]   .type main239_7, @function
// [Main] # leaf false
// [Main] main239_7:
// [Main] .main239_7_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   call minimbt_read_int
// [Main]   mv s0, a0
// [Main]   slliw a0, s0, 2
// [Main]   sub a0, s11, a0
// [Main]   andi s1, a0, -8
// [Main]   mv s11, s1
// [Main]   mv a1, s0
// [Main]   mv a0, s1
// [Main]   mv a2, zero
// [Main]   call memseti32
// [Main]   addi a0, s11, -24
// [Main]   andi a0, a0, -8
// [Main]   mv s11, a0
// [Main]   la a1, input243_26
// [Main]   sd a1, 0(a0)
// [Main]   sd s0, 8(a0)
// [Main]   sd s1, 16(a0)
// [Main]   mv s10, a0
// [Main]   ld a1, 0(a0)
// [Main]   mv a0, zero
// [Main]   jalr a1
// [Main]   mv a0, s1
// [Main]   mv a1, s0
// [Main]   call sort233_6
// [Main]   mv a0, s1
// [Main]   mv a1, zero
// [Main]   mv a2, s0
// [Main]   call output14_1
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl output14_1
// [Main]   .type output14_1, @function
// [Main] # leaf false
// [Main] output14_1:
// [Main] .output14_1_5:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   mv s2, a2
// [Main] 
// [Main] .output14_1_0:
// [Main]   addi a0, s2, -1
// [Main]   blt a0, s1, .output14_1_2
// [Main] 
// [Main] .output14_1_1:
// [Main]   slliw a0, s1, 2
// [Main]   add a0, s0, a0
// [Main]   lw a0, 0(a0)
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   addi a0, s1, 1
// [Main]   mv s1, a0
// [Main]   j .output14_1_0
// [Main] 
// [Main] .output14_1_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .output14_1_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl input243_26
// [Main]   .type input243_26, @function
// [Main] # leaf false
// [Main] input243_26:
// [Main] .input243_26_5:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv a1, s10
// [Main]   lw s2, 8(a1)
// [Main]   ld s0, 16(a1)
// [Main]   mv s1, a0
// [Main] 
// [Main] .input243_26_0:
// [Main]   addi a0, s2, -1
// [Main]   blt a0, s1, .input243_26_2
// [Main] 
// [Main] .input243_26_1:
// [Main]   call minimbt_read_int
// [Main]   slliw a1, s1, 2
// [Main]   add a1, s0, a1
// [Main]   sw a0, 0(a1)
// [Main]   addi a0, s1, 1
// [Main]   mv s1, a0
// [Main]   j .input243_26_0
// [Main] 
// [Main] .input243_26_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .input243_26_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl sort_3173_21
// [Main]   .type sort_3173_21, @function
// [Main] # leaf false
// [Main] sort_3173_21:
// [Main] .sort_3173_21_0:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   mv a3, s10
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   mv s2, a2
// [Main]   ld s3, 8(a3)
// [Main]   mv s10, s3
// [Main]   ld a2, 0(s3)
// [Main]   mv a0, s0
// [Main]   mv a1, s1
// [Main]   jalr a2
// [Main]   mv s10, s3
// [Main]   ld a2, 0(s3)
// [Main]   mv a0, s1
// [Main]   mv a1, s2
// [Main]   jalr a2
// [Main]   mv s10, s3
// [Main]   ld a2, 0(s3)
// [Main]   mv a0, s0
// [Main]   mv a1, s1
// [Main]   jalr a2
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl sort233_6
// [Main]   .type sort233_6, @function
// [Main] # leaf false
// [Main] sort233_6:
// [Main] .sort233_6_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a2, a1
// [Main]   mv a1, zero
// [Main]   call quick_sort210_5
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl sort_2157_19
// [Main]   .type sort_2157_19, @function
// [Main] # leaf false
// [Main] sort_2157_19:
// [Main] .sort_2157_19_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   mv a4, s10
// [Main]   mv a2, a0
// [Main]   mv a3, a1
// [Main]   ld a0, 8(a4)
// [Main]   ld s0, 16(a4)
// [Main]   slliw a1, a3, 2
// [Main]   add a1, a0, a1
// [Main]   lw a1, 0(a1)
// [Main]   slliw a4, a2, 2
// [Main]   add a4, a0, a4
// [Main]   lw a4, 0(a4)
// [Main]   addi a4, a4, -1
// [Main]   blt a4, a1, .sort_2157_19_2
// [Main] 
// [Main] .sort_2157_19_1:
// [Main]   mv a1, a2
// [Main]   mv a2, a3
// [Main]   call swap1_0
// [Main]   lw a0, 0(s0)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s0)
// [Main]   mv a0, zero
// [Main] 
// [Main] .sort_2157_19_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .sort_2157_19_2:
// [Main]   mv a0, zero
// [Main]   j .sort_2157_19_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl swap1_0
// [Main]   .type swap1_0, @function
// [Main] # leaf true
// [Main] swap1_0:
// [Main] .swap1_0_0:
// [Main]   slliw a3, a1, 2
// [Main]   add a3, a0, a3
// [Main]   lw a3, 0(a3)
// [Main]   slliw a4, a2, 2
// [Main]   add a4, a0, a4
// [Main]   lw a4, 0(a4)
// [Main]   slliw a1, a1, 2
// [Main]   add a1, a0, a1
// [Main]   sw a4, 0(a1)
// [Main]   slliw a1, a2, 2
// [Main]   add a0, a0, a1
// [Main]   sw a3, 0(a0)
// [Main]   mv a0, zero
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl f54_13
// [Main]   .type f54_13, @function
// [Main] # leaf false
// [Main] f54_13:
// [Main] .f54_13_5:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv a1, s10
// [Main]   lw s2, 8(a1)
// [Main]   ld s0, 16(a1)
// [Main]   mv s1, a0
// [Main] 
// [Main] .f54_13_0:
// [Main]   addi a0, s2, -1
// [Main]   blt a0, s1, .f54_13_2
// [Main] 
// [Main] .f54_13_1:
// [Main]   mv s10, s0
// [Main]   ld a1, 0(s0)
// [Main]   mv a0, s1
// [Main]   jalr a1
// [Main]   addi a0, s1, 1
// [Main]   mv s1, a0
// [Main]   j .f54_13_0
// [Main] 
// [Main] .f54_13_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .f54_13_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_28
// [Main]   .type T$start_28, @function
// [Main] # leaf false
// [Main] T$start_28:
// [Main] .T$start_28_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main239_7
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux86_16
// [Main]   .type aux86_16, @function
// [Main] # leaf false
// [Main] aux86_16:
// [Main] .aux86_16_11:
// [Main]   addi sp, sp, -64
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   mv a1, s10
// [Main]   lw s5, 8(a1)
// [Main]   ld s3, 16(a1)
// [Main]   lw s0, 24(a1)
// [Main]   ld s4, 32(a1)
// [Main]   ld s2, 40(a1)
// [Main]   mv s1, a0
// [Main] 
// [Main] .aux86_16_0:
// [Main]   addi a0, s5, -2
// [Main]   blt a0, s1, .aux86_16_2
// [Main] 
// [Main] .aux86_16_1:
// [Main]   slliw a0, s1, 2
// [Main]   add a0, s3, a0
// [Main]   lw a0, 0(a0)
// [Main]   addi a1, s0, -1
// [Main]   blt a1, a0, .aux86_16_4
// [Main] 
// [Main] .aux86_16_3:
// [Main]   lw a0, 0(s4)
// [Main]   beq a0, s1, .aux86_16_5
// [Main] 
// [Main] .aux86_16_6:
// [Main]   lw a1, 0(s4)
// [Main]   mv a0, s3
// [Main]   mv a2, s1
// [Main]   call swap1_0
// [Main]   sw zero, 0(s2)
// [Main]   mv a0, zero
// [Main] 
// [Main] .aux86_16_7:
// [Main]   lw a0, 0(s4)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s4)
// [Main]   mv a0, zero
// [Main] 
// [Main] .aux86_16_8:
// [Main]   addi a0, s1, 1
// [Main]   mv s1, a0
// [Main]   j .aux86_16_0
// [Main] 
// [Main] .aux86_16_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .aux86_16_9:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   addi sp, sp, 64
// [Main]   ret
// [Main] 
// [Main] .aux86_16_4:
// [Main]   mv a0, zero
// [Main]   j .aux86_16_8
// [Main] 
// [Main] .aux86_16_5:
// [Main]   mv a0, zero
// [Main]   j .aux86_16_7
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_28
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function sort233_6
// [Wasm] Lowering insn Call(ty=Unit, f=f5, args=[FnParam(fref=f6, fpref=$f.0), Int32(val=0), FnParam(fref=f6, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Lowered function sort233_6 to wasm
// [Wasm] Lowering function T$start_28
// [Wasm] Lowering insn Call(ty=Unit, f=f7, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start_28 to wasm
// [Wasm] Lowering function aux86_16
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Get Local name FreeVar(fvref=^5) -> $^5
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%13)])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^4), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%10), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^4), index=0, width=@32), val=Insn(iref=%11))
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering control Jump(target=b8, args=[Unit])
// [Wasm] Lowering control Jump(target=b7, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^4), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[FreeVar(fvref=^2), Insn(iref=%7), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^5), index=0, width=@32), val=Int32(val=0))
// [Wasm] Get Local name FreeVar(fvref=^5) -> $^5
// [Wasm] Lowering control Jump(target=b7, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^4), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%5), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Branch(cond=Insn(iref=%6), t=b5, t_args=[], f=b6, f_args=[])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Jump(target=b8, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^2), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FreeVar(fvref=^3), Int32(val=1)])
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%2), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Branch(cond=Insn(iref=%4), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Return(args=[BlockParam(bref=b9, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b9, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FreeVar(fvref=^1), Int32(val=2)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b10, args=[FnParam(fref=f16, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f16, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f16, fpref=$f.0) -> $$f.0
// [Wasm] Local FreeVar(fvref=^5) -> $^5
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local FreeVar(fvref=^4) -> $^4
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local FreeVar(fvref=^3) -> $^3
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Lowered function aux86_16 to wasm
// [Wasm] Lowering function swap1_0
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f0, fpref=$f.0), offset=FnParam(fref=f0, fpref=$f.1), width=@32))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f0, fpref=$f.0), offset=FnParam(fref=f0, fpref=$f.2), width=@32))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f0, fpref=$f.0), offset=FnParam(fref=f0, fpref=$f.1), width=@32), val=Insn(iref=%1))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f0, fpref=$f.0), offset=FnParam(fref=f0, fpref=$f.2), width=@32), val=Insn(iref=%0))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function swap1_0 to wasm
// [Wasm] Lowering function f54_13
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Lowering insn Apply(ty=Unit, f=FreeVar(fvref=^2), args=[BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FreeVar(fvref=^1), Int32(val=1)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f13, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.0) -> $$f.0
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function f54_13 to wasm
// [Wasm] Lowering function sort_2157_19
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[FreeVar(fvref=^1), FnParam(fref=f19, fpref=$f.0), FnParam(fref=f19, fpref=$f.1)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FnParam(fref=f19, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f19, fpref=$f.1) -> $$f.1
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^2), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%5), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^2), index=0, width=@32), val=Insn(iref=%6))
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^1), offset=FnParam(fref=f19, fpref=$f.1), width=@32))
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FnParam(fref=f19, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^1), offset=FnParam(fref=f19, fpref=$f.0), width=@32))
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FnParam(fref=f19, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%1), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%0), Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name FnParam(fref=f19, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f19, fpref=$f.1) -> $$f.1
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function sort_2157_19 to wasm
// [Wasm] Lowering function input243_26
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_int", args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^2), offset=BlockParam(bref=b0, bpref=$b.0), width=@32), val=Insn(iref=%2))
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FreeVar(fvref=^1), Int32(val=1)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f26, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f26, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f26, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function input243_26 to wasm
// [Wasm] Lowering function output14_1
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), offset=BlockParam(bref=b0, bpref=$b.1), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%5), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f1, fpref=$f.0), FnParam(fref=f1, fpref=$f.1), FnParam(fref=f1, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function output14_1 to wasm
// [Wasm] Lowering function g37_11
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[FreeVar(fvref=^2), BlockParam(bref=b0, bpref=$b.0), Insn(iref=%7)])
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^2), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^2), offset=Insn(iref=%3), width=@32))
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%4), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%2), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Branch(cond=Insn(iref=%6), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Jump(target=b6, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Int32(val=1), FreeVar(fvref=^1)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%0), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b7, args=[FnParam(fref=f11, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f11, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f11, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function g37_11 to wasm
// [Wasm] Lowering function quick_sort210_5
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering insn Call(ty=Unit, f=f2, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%2)])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b7, bpref=$b.0), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Load(ty=Bool, ma=Field(ty=Bool, val=BlockParam(bref=b7, bpref=$b.0), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Call(ty=Unit, f=f5, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%7)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%7), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%10), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Bool]), mref=m14, fills=[Field(index=0, val=Insn(iref=%22)), Field(index=1, val=BlockParam(bref=b14, bpref=$b.0))])
// [Wasm] Get Local name Mem(fref=f5, mref=m14) -> $f5.m14
// [Wasm] Get Local name Mem(fref=f5, mref=m14) -> $f5.m14
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Get Local name Mem(fref=f5, mref=m14) -> $f5.m14
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.0) -> $b14.$b.0
// [Wasm] Lowering control Jump(target=b7, args=[Mem(fref=f5, mref=m14)])
// [Wasm] Get Local name Mem(fref=f5, mref=m14) -> $f5.m14
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Lowering control Jump(target=b14, args=[Bool(val=true)])
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.0) -> $b14.$b.0
// [Wasm] Lowering control Jump(target=b14, args=[Bool(val=false)])
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.0) -> $b14.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%4), Insn(iref=%11)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), offset=Insn(iref=%13), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m11, fills=[Init(val=BlockParam(bref=b0, bpref=$b.1))])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Mem(fref=f5, mref=m11) -> $f5.m11
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m12, fills=[Init(val=Int32(val=1))])
// [Wasm] Get Local name Mem(fref=f5, mref=m12) -> $f5.m12
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Unit), mref=m13, fills=[Field(index=0, val=Fn(fref=f16)), Field(index=1, val=BlockParam(bref=b0, bpref=$b.2)), Field(index=2, val=BlockParam(bref=b0, bpref=$b.0)), Field(index=3, val=Insn(iref=%14)), Field(index=4, val=Mem(fref=f5, mref=m11)), Field(index=5, val=Mem(fref=f5, mref=m12))])
// [Wasm] Get Local name Mem(fref=f5, mref=m13) -> $f5.m13
// [Wasm] Get Local name Mem(fref=f5, mref=m13) -> $f5.m13
// [Wasm] Get Local name Mem(fref=f5, mref=m13) -> $f5.m13
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Mem(fref=f5, mref=m13) -> $f5.m13
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Mem(fref=f5, mref=m13) -> $f5.m13
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name Mem(fref=f5, mref=m13) -> $f5.m13
// [Wasm] Get Local name Mem(fref=f5, mref=m11) -> $f5.m11
// [Wasm] Get Local name Mem(fref=f5, mref=m13) -> $f5.m13
// [Wasm] Get Local name Mem(fref=f5, mref=m12) -> $f5.m12
// [Wasm] Lowering insn Apply(ty=Unit, f=Mem(fref=f5, mref=m13), args=[BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name Mem(fref=f5, mref=m13) -> $f5.m13
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Mem(fref=f5, mref=m13) -> $f5.m13
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f5, mref=m11), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f5, mref=m11) -> $f5.m11
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%19), Insn(iref=%20)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f5, mref=m11), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f5, mref=m11) -> $f5.m11
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f5, mref=m12), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f5, mref=m12) -> $f5.m12
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%23), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering control Branch(cond=Insn(iref=%24), t=b12, t_args=[], f=b13, f_args=[])
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b6, bpref=$b.0), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Load(ty=Bool, ma=Field(ty=Bool, val=BlockParam(bref=b6, bpref=$b.0), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b11, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%4), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.1) -> $b11.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.2) -> $b11.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.3) -> $b11.$b.3
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Bool]), mref=m29, fills=[Field(index=0, val=Insn(iref=%30)), Field(index=1, val=BlockParam(bref=b35, bpref=$b.0))])
// [Wasm] Get Local name Mem(fref=f5, mref=m29) -> $f5.m29
// [Wasm] Get Local name Mem(fref=f5, mref=m29) -> $f5.m29
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Get Local name Mem(fref=f5, mref=m29) -> $f5.m29
// [Wasm] Get Local name BlockParam(bref=b35, bpref=$b.0) -> $b35.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[Mem(fref=f5, mref=m29)])
// [Wasm] Get Local name Mem(fref=f5, mref=m29) -> $f5.m29
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b35, args=[Bool(val=true)])
// [Wasm] Get Local name BlockParam(bref=b35, bpref=$b.0) -> $b35.$b.0
// [Wasm] Lowering control Jump(target=b35, args=[Bool(val=false)])
// [Wasm] Get Local name BlockParam(bref=b35, bpref=$b.0) -> $b35.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f5, mref=m26), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f5, mref=m26) -> $f5.m26
// [Wasm] Get Local name Insn(iref=%52) -> $%52
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%52), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%52) -> $%52
// [Wasm] Get Local name Insn(iref=%53) -> $%53
// [Wasm] Lowering control Branch(cond=Insn(iref=%53), t=b33, t_args=[], f=b34, f_args=[])
// [Wasm] Get Local name Insn(iref=%53) -> $%53
// [Wasm] Lowering insn Apply(ty=Unit, f=Mem(fref=f5, mref=m28), args=[Insn(iref=%34), Insn(iref=%30), Insn(iref=%37)])
// [Wasm] Get Local name Mem(fref=f5, mref=m28) -> $f5.m28
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Get Local name Mem(fref=f5, mref=m28) -> $f5.m28
// [Wasm] Lowering control Jump(target=b32, args=[Insn(iref=%51)])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%34), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%34), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Lowering insn Apply(ty=Unit, f=Mem(fref=f5, mref=m28), args=[Insn(iref=%42), Insn(iref=%34), Insn(iref=%43)])
// [Wasm] Get Local name Mem(fref=f5, mref=m28) -> $f5.m28
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Get Local name Mem(fref=f5, mref=m28) -> $f5.m28
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%30), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%30), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Lowering insn Apply(ty=Unit, f=Mem(fref=f5, mref=m28), args=[Insn(iref=%45), Insn(iref=%30), Insn(iref=%46)])
// [Wasm] Get Local name Mem(fref=f5, mref=m28) -> $f5.m28
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Get Local name Mem(fref=f5, mref=m28) -> $f5.m28
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%37), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%37), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Lowering insn Apply(ty=Unit, f=Mem(fref=f5, mref=m28), args=[Insn(iref=%48), Insn(iref=%37), Insn(iref=%49)])
// [Wasm] Get Local name Mem(fref=f5, mref=m28) -> $f5.m28
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Get Local name Mem(fref=f5, mref=m28) -> $f5.m28
// [Wasm] Lowering control Jump(target=b31, args=[Insn(iref=%50)])
// [Wasm] Lowering control Jump(target=b31, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Div, args=[Insn(iref=%27), Int32(val=4)])
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%32), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Get Local name Insn(iref=%33) -> $%33
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%33)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%33) -> $%33
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Lowering insn Op(ty=Int32, op=Div, args=[Insn(iref=%27), Int32(val=4)])
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%35), Int32(val=3)])
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%36)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32, Int32], ty=Unit), mref=m27, fills=[Field(index=0, val=Fn(fref=f19)), Field(index=1, val=BlockParam(bref=b0, bpref=$b.0)), Field(index=2, val=Mem(fref=f5, mref=m26))])
// [Wasm] Get Local name Mem(fref=f5, mref=m27) -> $f5.m27
// [Wasm] Get Local name Mem(fref=f5, mref=m27) -> $f5.m27
// [Wasm] Get Local name Mem(fref=f5, mref=m27) -> $f5.m27
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Mem(fref=f5, mref=m27) -> $f5.m27
// [Wasm] Get Local name Mem(fref=f5, mref=m26) -> $f5.m26
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32, Int32, Int32], ty=Unit), mref=m28, fills=[Field(index=0, val=Fn(fref=f21)), Field(index=1, val=Mem(fref=f5, mref=m27))])
// [Wasm] Get Local name Mem(fref=f5, mref=m28) -> $f5.m28
// [Wasm] Get Local name Mem(fref=f5, mref=m28) -> $f5.m28
// [Wasm] Get Local name Mem(fref=f5, mref=m28) -> $f5.m28
// [Wasm] Get Local name Mem(fref=f5, mref=m27) -> $f5.m27
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%27), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=50), Insn(iref=%40)])
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Lowering control Branch(cond=Insn(iref=%41), t=b29, t_args=[], f=b30, f_args=[])
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Lowering control Jump(target=b32, args=[Unit])
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m26, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f5, mref=m26) -> $f5.m26
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Lowering insn Op(ty=Int32, op=Div, args=[Insn(iref=%27), Int32(val=4)])
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%28), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%29)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=8), Insn(iref=%27)])
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering control Branch(cond=Insn(iref=%31), t=b27, t_args=[], f=b28, f_args=[])
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering control Jump(target=b26, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.1) -> $b26.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.2) -> $b26.$b.2
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%0), Int32(val=16)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f5, fpref=$f.0), FnParam(fref=f5, fpref=$f.1), FnParam(fref=f5, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%41) -> $%41
// [Wasm] Local Insn(iref=%33) -> $%33
// [Wasm] Local BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Local BlockParam(bref=b26, bpref=$b.1) -> $b26.$b.1
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Mem(fref=f5, mref=m14) -> $f5.m14
// [Wasm] Local BlockParam(bref=b11, bpref=$b.3) -> $b11.$b.3
// [Wasm] Local Mem(fref=f5, mref=m11) -> $f5.m11
// [Wasm] Local Insn(iref=%27) -> $%27
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Local BlockParam(bref=b14, bpref=$b.0) -> $b14.$b.0
// [Wasm] Local BlockParam(bref=b35, bpref=$b.0) -> $b35.$b.0
// [Wasm] Local Mem(fref=f5, mref=m28) -> $f5.m28
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%52) -> $%52
// [Wasm] Local Insn(iref=%49) -> $%49
// [Wasm] Local Mem(fref=f5, mref=m13) -> $f5.m13
// [Wasm] Local Insn(iref=%42) -> $%42
// [Wasm] Local Mem(fref=f5, mref=m29) -> $f5.m29
// [Wasm] Local Insn(iref=%32) -> $%32
// [Wasm] Local BlockParam(bref=b26, bpref=$b.2) -> $b26.$b.2
// [Wasm] Local Mem(fref=f5, mref=m26) -> $f5.m26
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local BlockParam(bref=b11, bpref=$b.1) -> $b11.$b.1
// [Wasm] Local Mem(fref=f5, mref=m27) -> $f5.m27
// [Wasm] Local Insn(iref=%35) -> $%35
// [Wasm] Local Insn(iref=%31) -> $%31
// [Wasm] Local Mem(fref=f5, mref=m12) -> $f5.m12
// [Wasm] Local Insn(iref=%46) -> $%46
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local Insn(iref=%24) -> $%24
// [Wasm] Local Insn(iref=%53) -> $%53
// [Wasm] Local Insn(iref=%37) -> $%37
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local Insn(iref=%45) -> $%45
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%29) -> $%29
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local BlockParam(bref=b11, bpref=$b.2) -> $b11.$b.2
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%48) -> $%48
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Insn(iref=%43) -> $%43
// [Wasm] Local Insn(iref=%30) -> $%30
// [Wasm] Local Insn(iref=%34) -> $%34
// [Wasm] Local Insn(iref=%36) -> $%36
// [Wasm] Local Insn(iref=%40) -> $%40
// [Wasm] Lowered function quick_sort210_5 to wasm
// [Wasm] Lowering function insertion_sort30_2
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Unit), mref=m0, fills=[Field(index=0, val=Fn(fref=f11)), Field(index=1, val=FnParam(fref=f2, fpref=$f.1)), Field(index=2, val=FnParam(fref=f2, fpref=$f.0))])
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Unit), mref=m1, fills=[Field(index=0, val=Fn(fref=f13)), Field(index=1, val=FnParam(fref=f2, fpref=$f.2)), Field(index=2, val=Mem(fref=f2, mref=m0))])
// [Wasm] Get Local name Mem(fref=f2, mref=m1) -> $f2.m1
// [Wasm] Get Local name Mem(fref=f2, mref=m1) -> $f2.m1
// [Wasm] Get Local name Mem(fref=f2, mref=m1) -> $f2.m1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Mem(fref=f2, mref=m1) -> $f2.m1
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f2, fpref=$f.1), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Apply(ty=Unit, f=Mem(fref=f2, mref=m1), args=[Insn(iref=%2)])
// [Wasm] Get Local name Mem(fref=f2, mref=m1) -> $f2.m1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Mem(fref=f2, mref=m1) -> $f2.m1
// [Wasm] Lowering control Return(args=[Insn(iref=%3)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Local Mem(fref=f2, mref=m1) -> $f2.m1
// [Wasm] Local Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function insertion_sort30_2 to wasm
// [Wasm] Lowering function main239_7
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_int", args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Unit), mref=m1, fills=[Field(index=0, val=Fn(fref=f26)), Field(index=1, val=Insn(iref=%0)), Field(index=2, val=Mem(fref=f7, mref=m0))])
// [Wasm] Get Local name Mem(fref=f7, mref=m1) -> $f7.m1
// [Wasm] Get Local name Mem(fref=f7, mref=m1) -> $f7.m1
// [Wasm] Get Local name Mem(fref=f7, mref=m1) -> $f7.m1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Mem(fref=f7, mref=m1) -> $f7.m1
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Lowering insn Apply(ty=Unit, f=Mem(fref=f7, mref=m1), args=[Int32(val=0)])
// [Wasm] Get Local name Mem(fref=f7, mref=m1) -> $f7.m1
// [Wasm] Get Local name Mem(fref=f7, mref=m1) -> $f7.m1
// [Wasm] Lowering insn Call(ty=Unit, f=f6, args=[Mem(fref=f7, mref=m0), Insn(iref=%0)])
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Call(ty=Unit, f=f1, args=[Mem(fref=f7, mref=m0), Int32(val=0), Insn(iref=%0)])
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%5)])
// [Wasm] Local Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Local Mem(fref=f7, mref=m1) -> $f7.m1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function main239_7 to wasm
// [Wasm] Lowering function sort_3173_21
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Lowering insn Apply(ty=Unit, f=FreeVar(fvref=^1), args=[FnParam(fref=f21, fpref=$f.0), FnParam(fref=f21, fpref=$f.1)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FnParam(fref=f21, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f21, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Lowering insn Apply(ty=Unit, f=FreeVar(fvref=^1), args=[FnParam(fref=f21, fpref=$f.1), FnParam(fref=f21, fpref=$f.2)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FnParam(fref=f21, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f21, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Lowering insn Apply(ty=Unit, f=FreeVar(fvref=^1), args=[FnParam(fref=f21, fpref=$f.0), FnParam(fref=f21, fpref=$f.1)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FnParam(fref=f21, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f21, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Get Local name FnParam(fref=f21, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f21, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f21, fpref=$f.2) -> $$f.2
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Lowered function sort_3173_21 to wasm
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %14: Apply(ty=Unit, f=Self(fref=f16), args=[Insn(iref=%13)])
// [CoreOpt] eliminated tail rec call %4: Apply(ty=Unit, f=Self(fref=f13), args=[Insn(iref=%3)])
// [CoreOpt] eliminated tail rec call %5: Apply(ty=Unit, f=Self(fref=f26), args=[Insn(iref=%4)])
// [CoreOpt] eliminated tail rec call %6: Call(ty=Unit, f=f1, args=[FnParam(fref=f1, fpref=$f.0), Insn(iref=%5), FnParam(fref=f1, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %10: Apply(ty=Unit, f=Self(fref=f11), args=[Insn(iref=%9)])
// [CoreOpt] eliminated tail rec call %11: Call(ty=Unit, f=f5, args=[FnParam(fref=f5, fpref=$f.0), Insn(iref=%10), FnParam(fref=f5, fpref=$f.2)])
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f4: Once, f28: Once, f16: MaybeInClosure, f0: Multiple, f13: MaybeInClosure, f19: MaybeInClosure, f26: MaybeInClosure, f1: Once, f11: MaybeInClosure, f5: Multiple, f2: Once, f3: Once, f7: Once, f21: MaybeInClosure})
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%6) -> BlockParam(bref=b7, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%6) -> BlockParam(bref=b7, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%6) -> BlockParam(bref=b7, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%6) -> BlockParam(bref=b7, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%6) -> BlockParam(bref=b7, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%6) -> BlockParam(bref=b7, bpref=$b.0)
// [CoreOpt] quick_sort210_5 is inlining Call(ty=Tuple(fields=[Int32, Bool]), f=f3, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%4), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [CoreOpt] shifted callee .fn partition65_3 #f3 : fn(array[int32], int32, int32, int32) -> (int32, bool)
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b11 {
// [CoreOpt]   .bb #b11 () {
// [CoreOpt]     let %11: int32 = sub($f3, 1)
// [CoreOpt]     let %12: unit = call f0($f0, $f1, %11)
// [CoreOpt]     let %13: int32 = sub($f3, 1)
// [CoreOpt]     let %14: int32 = load int32 offset($f0, %13 * @32)
// [CoreOpt]     let _ = alloc <m11: array[int32] heap(1)> <- [..] = $f2
// [CoreOpt]     let _ = alloc <m12: array[int32] heap(1)> <- [..] = 1
// [CoreOpt]     let _ = alloc <m13: closure(int32) -> unit heap(6)> <- [0] = f16, [1] = $f3, [2] = $f0, [3] = %14, [4] = f3.m11, [5] = f3.m12
// [CoreOpt]     let %18: unit = apply f3.m13($f2)
// [CoreOpt]     let %19: int32 = load int32 field(f3.m11, 0 * @32)
// [CoreOpt]     let %20: int32 = sub($f3, 1)
// [CoreOpt]     let %21: unit = call f0($f0, %19, %20)
// [CoreOpt]     let %22: int32 = load int32 field(f3.m11, 0 * @32)
// [CoreOpt]     let %23: int32 = load int32 field(f3.m12, 0 * @32)
// [CoreOpt]     let %24: bool = eq(%23, 1)
// [CoreOpt]     br %24 b12() b13()
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 () {
// [CoreOpt]     jump b14(true)
// [CoreOpt]   }
// [CoreOpt]   .bb #b13 () {
// [CoreOpt]     jump b14(false)
// [CoreOpt]   }
// [CoreOpt]   .bb #b14 (bool) {
// [CoreOpt]     let _ = alloc <m14: (int32, bool) heap(2)> <- [0] = %22, [1] = $b14.0
// [CoreOpt]     return f3.m14
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] quick_sort210_5 is inlining Call(ty=Tuple(fields=[Int32, Bool]), f=f4, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [CoreOpt] shifted callee .fn choose_pivot129_4 #f4 : fn(array[int32], int32, int32) -> (int32, bool)
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b26 {
// [CoreOpt]   .bb #b26 () {
// [CoreOpt]     let _ = alloc <m26: array[int32] heap(1)> <- [..] = 0
// [CoreOpt]     let %27: int32 = sub($f2, $f1)
// [CoreOpt]     let %28: int32 = div(%27, 4)
// [CoreOpt]     let %29: int32 = mul(%28, 2)
// [CoreOpt]     let %30: int32 = add($f1, %29)
// [CoreOpt]     let %31: bool = le(8, %27)
// [CoreOpt]     br %31 b27() b28()
// [CoreOpt]   }
// [CoreOpt]   .bb #b27 () {
// [CoreOpt]     let %32: int32 = div(%27, 4)
// [CoreOpt]     let %33: int32 = mul(%32, 1)
// [CoreOpt]     let %34: int32 = add($f1, %33)
// [CoreOpt]     let %35: int32 = div(%27, 4)
// [CoreOpt]     let %36: int32 = mul(%35, 3)
// [CoreOpt]     let %37: int32 = add($f1, %36)
// [CoreOpt]     let _ = alloc <m27: closure(int32, int32) -> unit heap(3)> <- [0] = f19, [1] = $f0, [2] = f4.m26
// [CoreOpt]     let _ = alloc <m28: closure(int32, int32, int32) -> unit heap(2)> <- [0] = f21, [1] = f4.m27
// [CoreOpt]     let %40: int32 = sub(%27, 1)
// [CoreOpt]     let %41: bool = le(50, %40)
// [CoreOpt]     br %41 b29() b30()
// [CoreOpt]   }
// [CoreOpt]   .bb #b28 () {
// [CoreOpt]     jump b32(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b29 () {
// [CoreOpt]     let %42: int32 = sub(%34, 1)
// [CoreOpt]     let %43: int32 = add(%34, 1)
// [CoreOpt]     let %44: unit = apply f4.m28(%42, %34, %43)
// [CoreOpt]     let %45: int32 = sub(%30, 1)
// [CoreOpt]     let %46: int32 = add(%30, 1)
// [CoreOpt]     let %47: unit = apply f4.m28(%45, %30, %46)
// [CoreOpt]     let %48: int32 = sub(%37, 1)
// [CoreOpt]     let %49: int32 = add(%37, 1)
// [CoreOpt]     let %50: unit = apply f4.m28(%48, %37, %49)
// [CoreOpt]     jump b31(%50)
// [CoreOpt]   }
// [CoreOpt]   .bb #b30 () {
// [CoreOpt]     jump b31(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b31 (unit) {
// [CoreOpt]     let %51: unit = apply f4.m28(%34, %30, %37)
// [CoreOpt]     jump b32(%51)
// [CoreOpt]   }
// [CoreOpt]   .bb #b32 (unit) {
// [CoreOpt]     let %52: int32 = load int32 field(f4.m26, 0 * @32)
// [CoreOpt]     let %53: bool = eq(%52, 0)
// [CoreOpt]     br %53 b33() b34()
// [CoreOpt]   }
// [CoreOpt]   .bb #b33 () {
// [CoreOpt]     jump b35(true)
// [CoreOpt]   }
// [CoreOpt]   .bb #b34 () {
// [CoreOpt]     jump b35(false)
// [CoreOpt]   }
// [CoreOpt]   .bb #b35 (bool) {
// [CoreOpt]     let _ = alloc <m29: (int32, bool) heap(2)> <- [0] = %30, [1] = $b35.0
// [CoreOpt]     return f4.m29
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f4
// [CoreOpt] Remove dead function: f3
