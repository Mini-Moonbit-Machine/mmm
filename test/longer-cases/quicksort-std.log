// [Asm] pre_assigned_registers: Insn(iref=%4) -> v7, Insn(iref=%1) -> v4, Self(fref=f12) -> v0, Insn(iref=%3) -> v6, Mem(fref=f12, mref=m0) -> v2, Insn(iref=%0) -> v3, Insn(iref=%2) -> v5
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [s11, zero, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, zero, a0, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, a1, zero, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v2, a2, a1, zero, a0, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, zero, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, zero, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, a1, zero, a0, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v2, a2, a1, zero, a0, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, zero, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v7]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.213"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="v7 ← a0", color=green];
// [Asm]   r3 [label="a1", color=blue];
// [Asm]   r9 [label="a7", color=blue];
// [Asm]   r6 [label="a4", color=blue];
// [Asm]   r13 [label="t3", color=blue];
// [Asm]   r4 [label="a2", color=blue];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r11 [label="t1", color=blue];
// [Asm]   r7 [label="a5", color=blue];
// [Asm]   r10 [label="t0", color=blue];
// [Asm]   r14 [label="t4", color=blue];
// [Asm]   r8 [label="a6", color=blue];
// [Asm]   r5 [label="a3", color=blue];
// [Asm]   r15 [label="v3 ← s0", color=green];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="v11 ← a0", color=green];
// [Asm]   r18 [label="v5 ← a0", color=green];
// [Asm]   r19 [label="v6 ← a0", color=green];
// [Asm]   r17 [label="v2 ← s1", color=green];
// [Asm]   r12 [label="t2", color=blue];
// [Asm]   r0 -- r15;
// [Asm]   r17 -- r18;
// [Asm]   r0 -- r13;
// [Asm]   r13 -- r15;
// [Asm]   r1 -- r12;
// [Asm]   r3 -- r15;
// [Asm]   r6 -- r15;
// [Asm]   r14 -- r17;
// [Asm]   r11 -- r17;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r9 -- r15;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r4;
// [Asm]   r5 -- r17;
// [Asm]   r0 -- r17;
// [Asm]   r12 -- r15;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r10;
// [Asm]   r0 -- r14;
// [Asm]   r2 -- r10;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r17;
// [Asm]   r2 -- r16;
// [Asm]   r9 -- r17;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r1 -- r16;
// [Asm]   r17 -- r19;
// [Asm]   r0 -- r6;
// [Asm]   r7 -- r17;
// [Asm]   r1 -- r9;
// [Asm]   r15 -- r18;
// [Asm]   r2 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r15 -- r17;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r7 -- r15;
// [Asm]   r10 -- r15;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r0 -- r5;
// [Asm]   r13 -- r17;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r6 -- r17;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r17;
// [Asm]   r0 -- r10;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r0 -- r12;
// [Asm]   r11 -- r15;
// [Asm]   r0 -- r11;
// [Asm]   r4 -- r17;
// [Asm]   r1 -- r6;
// [Asm]   r12 -- r17;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r0 -- r7;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r15 -- r19;
// [Asm]   r14 -- r15;
// [Asm]   r5 -- r15;
// [Asm]   r10 -- r17;
// [Asm]   comment = "0:a0-> 1:s11-> 2:zero-> 3:a1-> 4:a2-> 15:v3-> 17:v2-> 5:a3-> 6:a4-> 7:a5-> 8:a6-> 9:a7-> 10:t0-> 11:t1-> 12:t2-> 13:t3-> 14:t4-> 16:v11-> 18:v5-> 19:v6-> 20:v7"
// [Asm]   comment = "v7<-a0;v3<-s0;v11<-a0;v5<-a0;v6<-a0;v2<-s1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.213"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call minimbt_read_int ->   call minimbt_read_int
// [Asm] subst   mv v3, a0 ->   mv s0, a0
// [Asm] subst   slliw v11, v3, 2 ->   slliw a0, s0, 2
// [Asm] subst   sub v2, s11, v11 ->   sub s1, s11, a0
// [Asm] subst   andi s11, v2, -8 ->   andi s11, s1, -8
// [Asm] subst   mv a1, v3 ->   mv a1, s0
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v2 ->   mv a1, s1
// [Asm] subst   mv a2, v3 ->   mv a2, s0
// [Asm] subst   call input.214 ->   call input.214
// [Asm] subst   mv a0, v2 ->   mv a0, s1
// [Asm] subst   mv a1, zero ->   mv a1, zero
// [Asm] subst   mv a2, v3 ->   mv a2, s0
// [Asm] subst   call quick_sort.212 ->   call quick_sort.212
// [Asm] subst   mv a0, v2 ->   mv a0, s1
// [Asm] subst   mv a1, zero ->   mv a1, zero
// [Asm] subst   mv a2, v3 ->   mv a2, s0
// [Asm] subst   call output.203 ->   call output.203
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v6, FnParam(fref=f4, fpref=$f.0) -> v2, Self(fref=f4) -> v0, FnParam(fref=f4, fpref=$f.1) -> v3, Insn(iref=%0) -> v5, FnParam(fref=f4, fpref=$f.2) -> v4
// [Asm] defs: []
// [Asm] live_set: [a2, a1, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v5, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v4, a0, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, v4, a1, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [a2, a1, a3, a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a3 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of insertion_sort.204"];
// [Asm]   r0 [label="v2 ← a3", color=green];
// [Asm]   r3 [label="v3 ← a4", color=green];
// [Asm]   r9 [label="a5", color=blue];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r13 [label="t1", color=blue];
// [Asm]   r4 [label="v4 ← a5", color=green];
// [Asm]   r1 [label="a2", color=blue];
// [Asm]   r11 [label="a7", color=blue];
// [Asm]   r7 [label="a3", color=blue];
// [Asm]   r10 [label="a6", color=blue];
// [Asm]   r14 [label="t2", color=blue];
// [Asm]   r8 [label="a4", color=blue];
// [Asm]   r5 [label="v5 ← a0", color=green];
// [Asm]   r15 [label="t3", color=blue];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="t4", color=blue];
// [Asm]   r17 [label="v6 ← a0", color=green];
// [Asm]   r12 [label="t0", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r6 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r6 -- r14;
// [Asm]   r6 -- r10;
// [Asm]   r1 -- r7;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r2;
// [Asm]   r0 -- r1;
// [Asm]   r6 -- r16;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r3;
// [Asm]   r6 -- r12;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r6 -- r8;
// [Asm]   r0 -- r6;
// [Asm]   r6 -- r13;
// [Asm]   comment = "0:v2-> 1:a2-> 2:a1-> 3:v3-> 4:v4-> 6:a0-> 5:v5-> 7:a3-> 8:a4-> 9:a5-> 10:a6-> 11:a7-> 12:t0-> 13:t1-> 14:t2-> 15:t3-> 16:t4-> 17:v6"
// [Asm]   comment = "v2<-a3;v3<-a4;v4<-a5;v5<-a0;v6<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of insertion_sort.204"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v2, a0 ->   mv a3, a0
// [Asm] subst   mv v3, a1 ->   mv a4, a1
// [Asm] subst   mv v4, a2 ->   mv a5, a2
// [Asm] subst   addi v5, v3, 1 ->   addi a0, a4, 1
// [Asm] subst   mv a1, v2 ->   mv a1, a3
// [Asm] subst   mv a2, v3 ->   mv a2, a4
// [Asm] subst   mv a3, v4 ->   mv a3, a5
// [Asm] subst   call f.206 ->   call f.206
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f8, fpref=$f.2) -> v4, FnParam(fref=f8, fpref=$f.3) -> v5, FnParam(fref=f8, fpref=$f.0) -> v2, FnParam(fref=f8, fpref=$f.1) -> v3, Insn(iref=%2) -> v9, Insn(iref=%1) -> v8, FnParam(fref=f8, fpref=$f.4) -> v6, Self(fref=f8) -> v0, Insn(iref=%0) -> v7
// [Asm] defs: []
// [Asm] live_set: [a0, a4, a2, a1, a3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a4, a2, a1, a3, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, a4, a2, a3, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, a4, v4, a3, v2]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v5, a4, v4, v2]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v3, v5, v4, v6, v2]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v5, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v5, a0, v4, v6, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v3, v5, a0, v4, a1, v6, v2]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v3, v5, a0, v4, a2, a1, v6, v2]
// [Asm] move_origin: [v5]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v3, v5, a0, v4, a2, a1, v6, a3, v2]
// [Asm] move_origin: [v6]
// [Asm] defined: a3 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v3, v5, a0, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v5, v4, v6, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v5, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, v5, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v5, a0, v4, v6, v2]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v3, v5, a0, v6, a1, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v3, v5, a0, a2, v6, a1, v2]
// [Asm] move_origin: [v5]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v3, v5, a0, a2, v6, a1, a3, v2]
// [Asm] move_origin: [v6]
// [Asm] defined: a3 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, v6, v5, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v2, v6, v5, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v6, v5, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v6, v5, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v6, v5, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, v6, v5, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, v6, a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [a2, a1, a3, a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a3 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v9]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of sort_3.211"];
// [Asm]   r0 [label="v2 ← s0", color=green];
// [Asm]   r20 [label="v9 ← a0", color=green];
// [Asm]   r3 [label="a1", color=blue];
// [Asm]   r9 [label="a0", color=blue];
// [Asm]   r6 [label="v4 ← s2", color=green];
// [Asm]   r13 [label="t0", color=blue];
// [Asm]   r4 [label="a3", color=blue];
// [Asm]   r1 [label="a4", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="v5 ← s3", color=green];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r14 [label="t1", color=blue];
// [Asm]   r8 [label="v6 ← s4", color=green];
// [Asm]   r5 [label="v3 ← s1", color=green];
// [Asm]   r15 [label="t2", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r16 [label="t3", color=blue];
// [Asm]   r18 [label="v7 ← a0", color=green];
// [Asm]   r19 [label="v8 ← a0", color=green];
// [Asm]   r17 [label="t4", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r0 -- r18;
// [Asm]   r5 -- r12;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r0 -- r15;
// [Asm]   r0 -- r13;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r10;
// [Asm]   r9 -- r15;
// [Asm]   r6 -- r14;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r0 -- r17;
// [Asm]   r8 -- r19;
// [Asm]   r1 -- r7;
// [Asm]   r8 -- r9;
// [Asm]   r5 -- r13;
// [Asm]   r5 -- r18;
// [Asm]   r7 -- r13;
// [Asm]   r0 -- r14;
// [Asm]   r3 -- r9;
// [Asm]   r5 -- r19;
// [Asm]   r6 -- r16;
// [Asm]   r9 -- r17;
// [Asm]   r2 -- r7;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r12;
// [Asm]   r0 -- r16;
// [Asm]   r0 -- r19;
// [Asm]   r3 -- r5;
// [Asm]   r8 -- r12;
// [Asm]   r6 -- r8;
// [Asm]   r0 -- r6;
// [Asm]   r9 -- r14;
// [Asm]   r7 -- r17;
// [Asm]   r3 -- r8;
// [Asm]   r6 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r9 -- r11;
// [Asm]   r5 -- r6;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r7 -- r19;
// [Asm]   r8 -- r16;
// [Asm]   r8 -- r13;
// [Asm]   r5 -- r9;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r7 -- r15;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r7 -- r10;
// [Asm]   r9 -- r12;
// [Asm]   r8 -- r18;
// [Asm]   r2 -- r8;
// [Asm]   r7 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r2 -- r5;
// [Asm]   r6 -- r17;
// [Asm]   r0 -- r1;
// [Asm]   r8 -- r10;
// [Asm]   r0 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r9 -- r16;
// [Asm]   r5 -- r14;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r7 -- r16;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r0 -- r4;
// [Asm]   r8 -- r14;
// [Asm]   r4 -- r6;
// [Asm]   r7 -- r8;
// [Asm]   r7 -- r12;
// [Asm]   r9 -- r13;
// [Asm]   r0 -- r7;
// [Asm]   r2 -- r3;
// [Asm]   r7 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r5 -- r15;
// [Asm]   comment = "0:v2-> 1:a4-> 5:v3-> 6:v4-> 7:v5-> 8:v6-> 9:a0-> 2:a2-> 3:a1-> 4:a3-> 10:a5-> 11:a6-> 12:a7-> 13:t0-> 14:t1-> 15:t2-> 16:t3-> 17:t4-> 18:v7-> 19:v8-> 20:v9"
// [Asm]   comment = "v2<-s0;v9<-a0;v4<-s2;v5<-s3;v6<-s4;v3<-s1;v7<-a0;v8<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of sort_3.211"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   mv v3, a1 ->   mv s1, a1
// [Asm] subst   mv v4, a2 ->   mv s2, a2
// [Asm] subst   mv v5, a3 ->   mv s3, a3
// [Asm] subst   mv v6, a4 ->   mv s4, a4
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   mv a1, v3 ->   mv a1, s1
// [Asm] subst   mv a2, v5 ->   mv a2, s3
// [Asm] subst   mv a3, v6 ->   mv a3, s4
// [Asm] subst   call sort_2.210 ->   call sort_2.210
// [Asm] subst   mv a0, v3 ->   mv a0, s1
// [Asm] subst   mv a1, v4 ->   mv a1, s2
// [Asm] subst   mv a2, v5 ->   mv a2, s3
// [Asm] subst   mv a3, v6 ->   mv a3, s4
// [Asm] subst   call sort_2.210 ->   call sort_2.210
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   mv a1, v3 ->   mv a1, s1
// [Asm] subst   mv a2, v5 ->   mv a2, s3
// [Asm] subst   mv a3, v6 ->   mv a3, s4
// [Asm] subst   call sort_2.210 ->   call sort_2.210
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v10, FnParam(fref=f0, fpref=$f.1) -> v3, Insn(iref=%13) -> v5, FnParam(fref=f0, fpref=$f.2) -> v4, Self(fref=f0) -> v0, Insn(iref=%2) -> v9, Insn(iref=%1) -> v8, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%0) -> v6, Insn(iref=%12) -> v7
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, a2, zero, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v4, v5, v16, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v7, v6, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v7, v6, v5, zero, v13, v2]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v8, v6, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v7, v8, v6, v12, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v6, zero]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of swap.202"];
// [Asm]   r8 [label="v6 ← a3", color=green];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r5 [label="v4 ← a2", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r9 [label="v7 ← a2", color=green];
// [Asm]   r6 [label="v5 ← a1", color=green];
// [Asm]   r13 [label="v11 ← a0", color=green];
// [Asm]   r4 [label="v3 ← a1", color=green];
// [Asm]   r1 [label="a2", color=blue];
// [Asm]   r11 [label="v8 ← a4", color=green];
// [Asm]   r7 [label="v16 ← a3", color=green];
// [Asm]   r10 [label="v13 ← a4", color=green];
// [Asm]   r12 [label="v12 ← a1", color=green];
// [Asm]   r14 [label="a0", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r9 -- r11;
// [Asm]   r5 -- r6;
// [Asm]   r6 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r8 -- r13;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r5 -- r8;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r3 -- r13;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r6 -- r10;
// [Asm]   r9 -- r12;
// [Asm]   r8 -- r9;
// [Asm]   r0 -- r5;
// [Asm]   r3 -- r10;
// [Asm]   r3 -- r12;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r9;
// [Asm]   r11 -- r12;
// [Asm]   r8 -- r10;
// [Asm]   r0 -- r10;
// [Asm]   r3 -- r11;
// [Asm]   r5 -- r7;
// [Asm]   r9 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r7;
// [Asm]   r3 -- r5;
// [Asm]   r8 -- r12;
// [Asm]   r6 -- r8;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   comment = "0:v2-> 1:a2-> 4:v3-> 3:zero-> 5:v4-> 6:v5-> 7:v16-> 8:v6-> 9:v7-> 10:v13-> 11:v8-> 12:v12-> 13:v11-> 2:a1-> 14:a0"
// [Asm]   comment = "v6<-a3;v2<-a0;v4<-a2;v7<-a2;v5<-a1;v11<-a0;v3<-a1;v8<-a4;v16<-a3;v13<-a4;v12<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of swap.202"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   slliw v5, v3, 2 ->   slliw a1, a1, 2
// [Asm] subst   add v16, v2, v5 ->   add a3, a0, a1
// [Asm] subst   lw v6, 0(v16) ->   lw a3, 0(a3)
// [Asm] subst   slliw v7, v4, 2 ->   slliw a2, a2, 2
// [Asm] subst   add v13, v2, v7 ->   add a4, a0, a2
// [Asm] subst   lw v8, 0(v13) ->   lw a4, 0(a4)
// [Asm] subst   add v12, v2, v5 ->   add a1, a0, a1
// [Asm] subst   sw v8, 0(v12) ->   sw a4, 0(a1)
// [Asm] subst   add v11, v2, v7 ->   add a0, a0, a2
// [Asm] subst   sw v6, 0(v11) ->   sw a3, 0(a0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f26) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main.213 ->   call main.213
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v13, FnParam(fref=f1, fpref=$f.1) -> v3, FnParam(fref=f1, fpref=$f.0) -> v2, FnParam(fref=f1, fpref=$f.2) -> v4, BlockParam(bref=b3, bpref=$b.0) -> v10, Insn(iref=%2) -> v12, Insn(iref=%1) -> v9, BlockParam(bref=b0, bpref=$b.0) -> v5, Self(fref=f1) -> v0, BlockParam(bref=b0, bpref=$b.1) -> v6, BlockParam(bref=b0, bpref=$b.2) -> v7, Insn(iref=%6) -> v11, Insn(iref=%5) -> v15, Insn(iref=%0) -> v8, Insn(iref=%4) -> v14
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b0, bpref=$b.1), width=@32))
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%0)])
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [zero]
// [Asm] defined: v10 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v19, v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v5, v6, zero, v20, v7]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v5, v6, v12, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v12, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, v6, zero, a0, v7]
// [Asm] move_origin: [v12]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, v6, zero, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v13]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, v6, zero, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v14]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v5, v15, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v15, zero, v7]
// [Asm] move_origin: [v5]
// [Asm] defs: [v6]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v15]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move_origin: [v3]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v4]
// [Asm] defined: v7 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of output.203"];
// [Asm]   r0 [label="v8 ← a0", color=green];
// [Asm]   r20 [label="t3", color=blue];
// [Asm]   r23 [label="v14 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="v12 ← a0", color=green];
// [Asm]   r26 [label="v3 ← a1", color=green];
// [Asm]   r27 [label="v4 ← a2", color=green];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r13 [label="a4", color=blue];
// [Asm]   r4 [label="v7 ← s2", color=green];
// [Asm]   r1 [label="v6 ← s0", color=green];
// [Asm]   r11 [label="a2", color=blue];
// [Asm]   r7 [label="v19 ← a0", color=green];
// [Asm]   r10 [label="a1", color=blue];
// [Asm]   r22 [label="v13 ← a0", color=green];
// [Asm]   r14 [label="a5", color=blue];
// [Asm]   r8 [label="v20 ← a0", color=green];
// [Asm]   r5 [label="v10 ← a0", color=green];
// [Asm]   r24 [label="v15 ← a0", color=green];
// [Asm]   r15 [label="a6", color=blue];
// [Asm]   r25 [label="v2 ← a0", color=green];
// [Asm]   r2 [label="v5 ← s1", color=green];
// [Asm]   r16 [label="a7", color=blue];
// [Asm]   r18 [label="t1", color=blue];
// [Asm]   r19 [label="t2", color=blue];
// [Asm]   r17 [label="t0", color=blue];
// [Asm]   r21 [label="t4", color=blue];
// [Asm]   r12 [label="a3", color=blue];
// [Asm]   r6 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r6 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r26 -- r27;
// [Asm]   r2 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r27;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r8;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r2 -- r22;
// [Asm]   r10 -- r25;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r24;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r23;
// [Asm]   r11 -- r25;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r24;
// [Asm]   r2 -- r26;
// [Asm]   r6 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r23;
// [Asm]   r25 -- r27;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r22;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r20;
// [Asm]   r6 -- r16;
// [Asm]   r25 -- r26;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r12;
// [Asm]   r6 -- r20;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r19;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r2 -- r14;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r3 -- r20;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r11 -- r26;
// [Asm]   r4 -- r17;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   r4 -- r19;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:v8-> 1:v6-> 2:v5-> 3:zero-> 4:v7-> 6:a0-> 10:a1-> 11:a2-> 12:a3-> 13:a4-> 14:a5-> 15:a6-> 16:a7-> 17:t0-> 18:t1-> 19:t2-> 20:t3-> 21:t4-> 7:v19-> 8:v20-> 9:v12-> 22:v13-> 23:v14-> 24:v15-> 25:v2-> 26:v3-> 27:v4-> 5:v10"
// [Asm]   comment = "v8<-a0;v14<-a0;v12<-a0;v3<-a1;v4<-a2;v7<-s2;v6<-s0;v19<-a0;v13<-a0;v20<-a0;v10<-a0;v15<-a0;v2<-a0;v5<-s1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of output.203"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v8, v7, -1 ->   addi a0, s2, -1
// [Asm] subst   blt v8, v6, .output.203_2 ->   blt a0, s0, .output.203_2
// [Asm] subst   mv v10, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] subst   slliw v19, v6, 2 ->   slliw a0, s0, 2
// [Asm] subst   add v20, v5, v19 ->   add a0, s1, a0
// [Asm] subst   lw v12, 0(v20) ->   lw a0, 0(a0)
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   addi v15, v6, 1 ->   addi a0, s0, 1
// [Asm] subst   mv v6, v15 ->   mv s0, a0
// [Asm] subst   j .output.203_0 ->   j .output.203_0
// [Asm] subst   mv v5, v2 ->   mv s1, a0
// [Asm] subst   mv v6, v3 ->   mv s0, a1
// [Asm] subst   mv v7, v4 ->   mv s2, a2
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v69, Insn(iref=%82) -> v30, Insn(iref=%41) -> v105, Mem(fref=f10, mref=m51) -> v10, Insn(iref=%33) -> v109, Insn(iref=%76) -> v40, Insn(iref=%63) -> v47, Insn(iref=%8) -> v92, Insn(iref=%10) -> v94, Insn(iref=%27) -> v78, Insn(iref=%25) -> v87, Insn(iref=%39) -> v103, Insn(iref=%59) -> v37, BlockParam(bref=b26, bpref=$b.0) -> v71, BlockParam(bref=b35, bpref=$b.0) -> v79, Insn(iref=%81) -> v28, Insn(iref=%4) -> v63, Mem(fref=f10, mref=m52) -> v8, Insn(iref=%49) -> v23, Insn(iref=%42) -> v106, Insn(iref=%65) -> v49, BlockParam(bref=b26, bpref=$b.4) -> v75, Insn(iref=%68) -> v52, FnParam(fref=f10, fpref=$f.0) -> v2, Insn(iref=%73) -> v58, Insn(iref=%26) -> v77, Mem(fref=f10, mref=m47) -> v13, Insn(iref=%31) -> v100, Insn(iref=%74) -> v57, Insn(iref=%64) -> v48, Mem(fref=f10, mref=m53) -> v7, Mem(fref=f10, mref=m48) -> v11, Insn(iref=%83) -> v29, Insn(iref=%38) -> v102, Insn(iref=%75) -> v39, Insn(iref=%16) -> v70, Insn(iref=%53) -> v32, Insn(iref=%78) -> v43, BlockParam(bref=b0, bpref=$b.1) -> v17, Mem(fref=f10, mref=m12) -> v5, Insn(iref=%54) -> v33, Mem(fref=f10, mref=m11) -> v9, Insn(iref=%60) -> v38, Insn(iref=%67) -> v51, Insn(iref=%5) -> v64, Insn(iref=%84) -> v95, Insn(iref=%19) -> v82, BlockParam(bref=b62, bpref=$b.0) -> v61, Mem(fref=f10, mref=m50) -> v12, BlockParam(bref=b61, bpref=$b.0) -> v31, Insn(iref=%79) -> v42, Insn(iref=%55) -> v34, Insn(iref=%7) -> v91, Insn(iref=%66) -> v50, Insn(iref=%48) -> v22, Insn(iref=%71) -> v55, Insn(iref=%23) -> v86, Insn(iref=%20) -> v83, Insn(iref=%34) -> v110, Insn(iref=%36) -> v112, FnParam(fref=f10, fpref=$f.2) -> v4, Mem(fref=f10, mref=m14) -> v14, BlockParam(bref=b26, bpref=$b.1) -> v72, BlockParam(bref=b15, bpref=$b.0) -> v80, BlockParam(bref=b7, bpref=$b.0) -> v90, BlockParam(bref=b57, bpref=$b.0) -> v44, Self(fref=f10) -> v0, Insn(iref=%50) -> v24, Insn(iref=%14) -> v68, Insn(iref=%77) -> v41, Insn(iref=%51) -> v25, BlockParam(bref=b14, bpref=$b.0) -> v89, Insn(iref=%80) -> v27, BlockParam(bref=b58, bpref=$b.0) -> v60, Insn(iref=%52) -> v26, Insn(iref=%44) -> v108, Insn(iref=%32) -> v101, Insn(iref=%58) -> v36, BlockParam(bref=b26, bpref=$b.2) -> v73, BlockParam(bref=b6, bpref=$b.0) -> v62, Insn(iref=%1) -> v20, Insn(iref=%11) -> v65, Insn(iref=%57) -> v35, Insn(iref=%35) -> v111, Insn(iref=%62) -> v46, Mem(fref=f10, mref=m13) -> v6, Mem(fref=f10, mref=m49) -> v15, FnParam(fref=f10, fpref=$f.1) -> v3, Insn(iref=%28) -> v96, Insn(iref=%46) -> v99, BlockParam(bref=b3, bpref=$b.0) -> v114, Insn(iref=%24) -> v88, Insn(iref=%9) -> v93, BlockParam(bref=b54, bpref=$b.0) -> v59, BlockParam(bref=b0, bpref=$b.0) -> v16, BlockParam(bref=b26, bpref=$b.5) -> v76, BlockParam(bref=b0, bpref=$b.2) -> v18, Insn(iref=%29) -> v97, Insn(iref=%70) -> v54, Insn(iref=%47) -> v21, Insn(iref=%0) -> v19, Insn(iref=%61) -> v45, BlockParam(bref=b26, bpref=$b.3) -> v74, Insn(iref=%18) -> v81, Insn(iref=%22) -> v85, Insn(iref=%85) -> v67, Insn(iref=%2) -> v113, Insn(iref=%72) -> v56, Insn(iref=%43) -> v107, Insn(iref=%30) -> v98, Insn(iref=%21) -> v84, Insn(iref=%40) -> v104, Insn(iref=%69) -> v53, Insn(iref=%12) -> v66
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%31), BlockParam(bref=b26, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%28), Insn(iref=%29)])
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b26, bpref=$b.0), width=@32))
// [Asm] skipping Load(ty=Bool, ma=Field(ty=Bool, val=BlockParam(bref=b7, bpref=$b.0), index=1, width=@(@32, @(@32, @32))))
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%22), Int32(val=1)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b26, bpref=$b.0), Insn(iref=%26)])
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%11), width=@32))
// [Asm] skipping Load(ty=Bool, ma=Field(ty=Bool, val=BlockParam(bref=b6, bpref=$b.0), index=1, width=@(@32, @(@32, @32))))
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%71), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%76), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=50), Insn(iref=%59)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%80), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=8), Insn(iref=%48)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%0), Int32(val=16)])
// [Asm] defs: [v81]
// [Asm] live_set: [v16, v5, v18, zero, v81, v17, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: v81 is X
// [Asm] defs: [v82]
// [Asm] live_set: [v16, v5, v82, v18, zero, v81, v17, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: v82 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v5, v82, v18, zero, v81, v17, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v16, v5, v82, v18, a0, zero, v81, v17, s11, v9]
// [Asm] move_origin: [v16]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v16, v5, v82, v18, a0, zero, v17, a1, s11, v9]
// [Asm] move_origin: [v81]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v16, v5, v18, zero, a0, a2, v17, a1, s11, v9]
// [Asm] move_origin: [v82]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v16, v5, v18, zero, a0, v17, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v83]
// [Asm] live_set: [v16, v5, v18, zero, v17, s11, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v83 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v5, v18, zero, v17, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: [v84]
// [Asm] live_set: [v16, v5, v18, zero, v84, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: v84 is X
// [Asm] defs: [v85]
// [Asm] live_set: [v16, v18, zero, v85, v84, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: v85 is X
// [Asm] defs: [v136]
// [Asm] live_set: [v16, v18, zero, v85, v84, v136, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: v136 is X
// [Asm] defs: []
// [Asm] live_set: [v84, v16, v17, v18, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v45]
// [Asm] live_set: [v25, v16, v13, v36, v17, s11, v18, zero, v45, v34]
// [Asm] move_origin: []
// [Asm] defined: v45 is X
// [Asm] defs: [v46]
// [Asm] live_set: [v25, v16, v46, v13, v36, v17, s11, v18, zero, v45, v34]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v16, v46, v13, v36, v17, s11, v18, zero, v45, v34]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v25, v16, v46, v13, a0, v36, v17, s11, v18, zero, v34]
// [Asm] move_origin: [v45]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v25, v16, v46, v13, a0, v36, v17, a1, s11, v18, zero, v34]
// [Asm] move_origin: [v34]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v25, v16, v13, a0, v36, a2, v17, a1, s11, v18, zero, v34]
// [Asm] move_origin: [v46]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v25, v16, v13, a0, v36, a2, v17, a1, s11, a3, v18, zero, v34]
// [Asm] move_origin: [v16]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v25, v16, v13, a0, v36, a2, v17, a1, s11, a3, v18, zero, a4, v34]
// [Asm] move_origin: [v13]
// [Asm] defined: a4 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v25, v16, v13, a0, v36, v17, s11, v18, zero, v34]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v47]
// [Asm] live_set: [v25, v16, v13, v36, v17, s11, v18, zero, v34]
// [Asm] move_origin: [a0]
// [Asm] defined: v47 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v16, v13, v36, v17, s11, v18, zero, v34]
// [Asm] move_origin: []
// [Asm] defs: [v48]
// [Asm] live_set: [v25, v16, v13, v36, v17, s11, v18, v48, zero, v34]
// [Asm] move_origin: []
// [Asm] defined: v48 is X
// [Asm] defs: [v49]
// [Asm] live_set: [v25, v16, v49, v13, v36, v17, s11, v18, v48, zero, v34]
// [Asm] move_origin: []
// [Asm] defined: v49 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v16, v49, v13, v36, v17, s11, v18, v48, zero, v34]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v25, v16, v49, v13, a0, v36, v17, s11, v18, zero, v34]
// [Asm] move_origin: [v48]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v25, v16, v49, v13, a0, v36, v17, a1, s11, v18, zero, v34]
// [Asm] move_origin: [v25]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v25, v16, v13, a0, v36, a2, v17, a1, s11, v18, zero, v34]
// [Asm] move_origin: [v49]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v25, v16, v13, a0, v36, a2, v17, a1, s11, a3, v18, zero, v34]
// [Asm] move_origin: [v16]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v25, v16, v13, a0, v36, a2, v17, a1, s11, a3, v18, zero, a4, v34]
// [Asm] move_origin: [v13]
// [Asm] defined: a4 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v25, v16, v13, a0, v36, v17, s11, v18, zero, v34]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v50]
// [Asm] live_set: [v25, v16, v13, v36, v17, s11, v18, zero, v34]
// [Asm] move_origin: [a0]
// [Asm] defined: v50 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v16, v13, v36, v17, s11, v18, zero, v34]
// [Asm] move_origin: []
// [Asm] defs: [v51]
// [Asm] live_set: [v25, v16, v13, v36, v17, s11, v51, v18, zero, v34]
// [Asm] move_origin: []
// [Asm] defined: v51 is X
// [Asm] defs: [v52]
// [Asm] live_set: [v25, v16, v13, v36, v17, s11, v52, v51, v18, zero, v34]
// [Asm] move_origin: []
// [Asm] defined: v52 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v16, v13, v36, v17, s11, v52, v51, v18, zero, v34]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v25, v16, v13, a0, v36, v17, s11, v52, v18, zero, v34]
// [Asm] move_origin: [v51]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v25, v16, v13, a0, v36, v17, a1, s11, v52, v18, zero, v34]
// [Asm] move_origin: [v36]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v25, v16, v13, a0, v36, a2, v17, a1, s11, v18, zero, v34]
// [Asm] move_origin: [v52]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v25, v16, v13, a0, v36, a2, v17, a1, s11, a3, v18, zero, v34]
// [Asm] move_origin: [v16]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v25, v16, v13, a0, v36, a2, v17, a1, s11, a3, v18, zero, a4, v34]
// [Asm] move_origin: [v13]
// [Asm] defined: a4 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v25, v16, v18, zero, v13, a0, v36, v17, s11, v34]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v53]
// [Asm] live_set: [v25, v16, v18, zero, v13, v36, v17, s11, v34]
// [Asm] move_origin: [a0]
// [Asm] defined: v53 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v16, v18, zero, v13, v36, v17, s11, v34]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v25, v16, v18, zero, v13, v36, v17, s11, v34]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v25, v16, v18, zero, v13, a0, v36, v17, s11]
// [Asm] move_origin: [v34]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v25, v16, v18, zero, v13, a0, v36, v17, a1, s11]
// [Asm] move_origin: [v25]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v25, v16, v18, zero, v13, a0, a2, v17, a1, s11]
// [Asm] move_origin: [v36]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v25, v16, v18, zero, v13, a0, a2, v17, a1, s11, a3]
// [Asm] move_origin: [v16]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v25, v16, v18, zero, v13, a0, a4, a2, v17, a1, s11, a3]
// [Asm] move_origin: [v13]
// [Asm] defined: a4 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v25, v16, v18, zero, v13, a0, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v54]
// [Asm] live_set: [v25, v16, v18, zero, v13, v17, s11]
// [Asm] move_origin: [a0]
// [Asm] defined: v54 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v16, v18, zero, v13, v17, s11]
// [Asm] move_origin: []
// [Asm] defs: [v55]
// [Asm] live_set: [v25, v16, v18, zero, v17, s11, v55]
// [Asm] move_origin: []
// [Asm] defined: v55 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v16, v17, v18, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v90]
// [Asm] live_set: [v90, v16, v17, v18, s11, zero]
// [Asm] move_origin: [v89]
// [Asm] defined: v90 is X
// [Asm] defs: [v63]
// [Asm] live_set: [v63, v16, v17, v18, s11, zero]
// [Asm] move_origin: []
// [Asm] defined: v63 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v25, v16, v18, zero, v17, v15]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v25, v16, v18, zero, v17, s11, v15]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v18, zero, v17, s11, v15]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v16, v17, v18, s11, v15, zero]
// [Asm] move_origin: []
// [Asm] defs: [v59]
// [Asm] live_set: [v59, v16, v17, v18, s11, zero]
// [Asm] move_origin: [v15]
// [Asm] defined: v59 is X
// [Asm] defs: []
// [Asm] live_set: [v59, v16, v17, v18, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v16, v18, zero, v19, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v193]
// [Asm] live_set: [v16, v18, zero, v19, v17, s11, v193]
// [Asm] move_origin: []
// [Asm] defined: v193 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v17, v18, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v127]
// [Asm] live_set: [v71, v16, v5, v127, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm] move_origin: []
// [Asm] defined: v127 is X
// [Asm] defs: [v128]
// [Asm] live_set: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v128, v76]
// [Asm] move_origin: []
// [Asm] defined: v128 is X
// [Asm] defs: [v96]
// [Asm] live_set: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, v96, zero, v74, v76]
// [Asm] move_origin: []
// [Asm] defined: v96 is X
// [Asm] defs: [v97]
// [Asm] live_set: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, v96, v97, zero, v74, v76]
// [Asm] move_origin: []
// [Asm] defined: v97 is X
// [Asm] defs: []
// [Asm] live_set: [v76, v72, v71, v16, v5, v75, v18, zero, v17, v74, s11, v9, v73]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v17, v16, v18]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v17, v18, a0]
// [Asm] move_origin: [v16]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, v18, a0]
// [Asm] move_origin: [v17]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0]
// [Asm] move_origin: [v18]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v113]
// [Asm] live_set: [v113]
// [Asm] move_origin: [a0]
// [Asm] defined: v113 is X
// [Asm] defs: []
// [Asm] live_set: [v113]
// [Asm] move_origin: []
// [Asm] defs: [v114]
// [Asm] live_set: [v114]
// [Asm] move_origin: [v113]
// [Asm] defined: v114 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v25, v16, v18, zero, v17]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v25, v16, v18, zero, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v18, zero, v17, s11]
// [Asm] move_origin: []
// [Asm] defs: [v153]
// [Asm] live_set: [v11, v153, v16, v18, zero, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: v153 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v17, v18, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v59]
// [Asm] live_set: [v59, v16, v17, v18, s11, zero]
// [Asm] move_origin: [v11]
// [Asm] defined: v59 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v25, v16, v18, v10, zero, v17]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v25, v16, v18, v10, zero, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v10, zero, v17, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v16, v17, v18, s11, v10, zero]
// [Asm] move_origin: []
// [Asm] defs: [v44]
// [Asm] live_set: [v16, v17, v18, s11, v44, zero]
// [Asm] move_origin: [v10]
// [Asm] defined: v44 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v17, v18, s11, v44, zero]
// [Asm] move_origin: []
// [Asm] defs: [v61]
// [Asm] live_set: [v16, v17, v18, v61, s11, zero]
// [Asm] move_origin: [v31]
// [Asm] defined: v61 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v17, v18, v61, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v80]
// [Asm] live_set: [v16, v5, v18, zero, v80, v17, s11, v9]
// [Asm] move_origin: [v79]
// [Asm] defined: v80 is X
// [Asm] defs: [v71]
// [Asm] live_set: [v71, v16, v5, v18, zero, v68, v17, s11, v9]
// [Asm] move_origin: [v17]
// [Asm] defined: v71 is X
// [Asm] defs: [v72]
// [Asm] live_set: [v72, v71, v16, v5, v18, zero, v68, v17, s11, v9]
// [Asm] move_origin: [v9]
// [Asm] defined: v72 is X
// [Asm] defs: [v73]
// [Asm] live_set: [v72, v71, v16, v5, v18, zero, v68, v17, s11, v9, v73]
// [Asm] move_origin: [v16]
// [Asm] defined: v73 is X
// [Asm] defs: [v74]
// [Asm] live_set: [v72, v71, v16, v5, v18, zero, v68, v17, v74, s11, v9, v73]
// [Asm] move_origin: [v18]
// [Asm] defined: v74 is X
// [Asm] defs: [v75]
// [Asm] live_set: [v72, v71, v16, v5, v75, v18, zero, v17, v74, s11, v9, v73]
// [Asm] move_origin: [v68]
// [Asm] defined: v75 is X
// [Asm] defs: [v76]
// [Asm] live_set: [v76, v72, v71, v16, v5, v75, v18, zero, v17, v74, s11, v9, v73]
// [Asm] move_origin: [v5]
// [Asm] defined: v76 is X
// [Asm] defs: [v100]
// [Asm] live_set: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v100, v76]
// [Asm] move_origin: []
// [Asm] defined: v100 is X
// [Asm] defs: []
// [Asm] live_set: [v76, v72, v71, v16, v5, v75, v18, zero, v17, v74, s11, v9, v73]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v25, v16, v18, zero, v7, v17]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v25, v16, v18, zero, v7, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v18, zero, v7, v17, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v16, v17, v18, s11, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v31]
// [Asm] live_set: [v16, v17, v18, s11, v31, zero]
// [Asm] move_origin: [v7]
// [Asm] defined: v31 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v17, v18, s11, v31, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, s11, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, s11, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v4, v16, s11, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v4, v16, v17, s11, zero]
// [Asm] move_origin: [v3]
// [Asm] defined: v17 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v16, v17, v18, s11, zero]
// [Asm] move_origin: [v4]
// [Asm] defined: v18 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v25, v16, v18, zero, v27, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v16, v17, v18, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v60]
// [Asm] live_set: [v16, v17, v18, s11, zero, v60]
// [Asm] move_origin: [v44]
// [Asm] defined: v60 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v17, v18, s11, zero, v60]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v25, v16, v18, zero, v8, v17]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v25, v16, v18, zero, v8, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v18, zero, v8, v17, s11]
// [Asm] move_origin: []
// [Asm] defs: [v182]
// [Asm] live_set: [v16, v182, v18, zero, v8, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: v182 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v17, v18, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v31]
// [Asm] live_set: [v16, v17, v18, s11, v31, zero]
// [Asm] move_origin: [v8]
// [Asm] defined: v31 is X
// [Asm] defs: [v65]
// [Asm] live_set: [v63, v16, v18, zero, v65, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: v65 is X
// [Asm] defs: []
// [Asm] live_set: [v63, v16, v18, zero, v65, v17, s11]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v63, v16, v18, zero, a0, v65, v17, s11]
// [Asm] move_origin: [v16]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v16, v18, zero, a0, v65, a1, v17, s11]
// [Asm] move_origin: [v63]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v16, v18, zero, a0, v65, a2, a1, v17, s11]
// [Asm] move_origin: [v65]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v16, v18, zero, a0, v65, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v66]
// [Asm] live_set: [v16, v18, zero, v65, v17, s11]
// [Asm] move_origin: [a0]
// [Asm] defined: v66 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v18, zero, v65, v17, s11]
// [Asm] move_origin: []
// [Asm] defs: [v146]
// [Asm] live_set: [v16, v18, v146, zero, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: v146 is X
// [Asm] defs: [v147]
// [Asm] live_set: [v16, v18, zero, v17, s11, v147]
// [Asm] move_origin: []
// [Asm] defined: v147 is X
// [Asm] defs: [v68]
// [Asm] live_set: [v16, v18, zero, v68, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: v68 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v16, v18, zero, v68, v17, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v16, v18, zero, v68, v17, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v18, zero, v68, v17, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v16, v5, v18, zero, v68, v17, v9]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v16, v5, v18, zero, v68, v17, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v144]
// [Asm] live_set: [v16, v5, v18, zero, v68, v17, s11, v9, v144]
// [Asm] move_origin: []
// [Asm] defined: v144 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v5, v18, zero, v68, v17, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v25, v16, v18, zero, v17, v12]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v25, v16, v18, zero, v17, s11, v12]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v18, zero, v17, s11, v12]
// [Asm] move_origin: []
// [Asm] defs: [v167]
// [Asm] live_set: [v16, v18, zero, v17, s11, v12, v167]
// [Asm] move_origin: []
// [Asm] defined: v167 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v17, v18, s11, v12, zero]
// [Asm] move_origin: []
// [Asm] defs: [v44]
// [Asm] live_set: [v16, v17, v18, s11, v44, zero]
// [Asm] move_origin: [v12]
// [Asm] defined: v44 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v16, v18, zero, v84, v17, v6]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v16, v18, zero, v84, v17, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v18, zero, v17, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: [v134]
// [Asm] live_set: [v16, v18, zero, v134, v17, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: v134 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v17, v6, s11, v18, zero]
// [Asm] move_origin: []
// [Asm] defs: [v89]
// [Asm] live_set: [v16, v17, v18, s11, zero, v89]
// [Asm] move_origin: [v6]
// [Asm] defined: v89 is X
// [Asm] defs: [v62]
// [Asm] live_set: [v62, v16, v17, v18, s11, zero]
// [Asm] move_origin: [v61]
// [Asm] defined: v62 is X
// [Asm] defs: [v109]
// [Asm] live_set: [v16, v5, v71, v17, s11, v9, v73, v109, v72, v75, v18, zero, v74, v76]
// [Asm] move_origin: []
// [Asm] defined: v109 is X
// [Asm] defs: [v110]
// [Asm] live_set: [v16, v5, v71, v110, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm] move_origin: []
// [Asm] defined: v110 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v5, v71, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm] move_origin: []
// [Asm] defs: [v112]
// [Asm] live_set: [v16, v5, v17, s11, v9, v73, v72, v112, v75, v18, zero, v74, v76]
// [Asm] move_origin: []
// [Asm] defined: v112 is X
// [Asm] defs: [v71]
// [Asm] live_set: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm] move_origin: [v112]
// [Asm] defined: v71 is X
// [Asm] defs: []
// [Asm] live_set: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm] move_origin: [v72]
// [Asm] defs: []
// [Asm] live_set: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm] move_origin: [v73]
// [Asm] defs: []
// [Asm] live_set: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm] move_origin: [v74]
// [Asm] defs: []
// [Asm] live_set: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm] move_origin: [v75]
// [Asm] defs: []
// [Asm] live_set: [v76, v72, v71, v16, v5, v75, v18, zero, v17, v74, s11, v9, v73]
// [Asm] move_origin: [v76]
// [Asm] defs: []
// [Asm] live_set: [v76, v72, v71, v16, v5, v75, v18, zero, v17, v74, s11, v9, v73]
// [Asm] move_origin: []
// [Asm] defs: [v99]
// [Asm] live_set: [v16, v5, v17, s11, v9, v73, v72, v75, v18, v99, zero, v74, v76]
// [Asm] move_origin: []
// [Asm] defined: v99 is X
// [Asm] defs: [v71]
// [Asm] live_set: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm] move_origin: [v99]
// [Asm] defined: v71 is X
// [Asm] defs: []
// [Asm] live_set: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm] move_origin: [v72]
// [Asm] defs: []
// [Asm] live_set: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm] move_origin: [v73]
// [Asm] defs: []
// [Asm] live_set: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm] move_origin: [v74]
// [Asm] defs: []
// [Asm] live_set: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm] move_origin: [v75]
// [Asm] defs: []
// [Asm] live_set: [v76, v72, v71, v16, v5, v75, v18, zero, v17, v74, s11, v9, v73]
// [Asm] move_origin: [v76]
// [Asm] defs: []
// [Asm] live_set: [v76, v72, v71, v16, v5, v75, v18, zero, v17, v74, s11, v9, v73]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v16, v14, v18, zero, v84, v17]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v16, v14, v18, zero, v84, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v14, v18, zero, v17, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v16, v17, v14, s11, v18, zero]
// [Asm] move_origin: []
// [Asm] defs: [v89]
// [Asm] live_set: [v16, v17, v18, s11, zero, v89]
// [Asm] move_origin: [v14]
// [Asm] defined: v89 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v17, v18, s11, zero, v89]
// [Asm] move_origin: []
// [Asm] defs: [v77]
// [Asm] live_set: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v77, v74, v76]
// [Asm] move_origin: []
// [Asm] defined: v77 is X
// [Asm] defs: []
// [Asm] live_set: [v76, v72, v71, v16, v5, v75, v18, zero, v17, v74, s11, v9, v73]
// [Asm] move_origin: []
// [Asm] defs: [v91]
// [Asm] live_set: [v16, v91, v18, zero, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: v91 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v91, v18, zero, v17, s11]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v16, v91, v18, zero, a0, v17, s11]
// [Asm] move_origin: [v16]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v16, v91, v18, zero, a0, a1, s11]
// [Asm] move_origin: [v17]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v16, v91, v18, zero, a0, a2, a1, s11]
// [Asm] move_origin: [v91]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v16, v91, s11, v18, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v93]
// [Asm] live_set: [v16, v91, s11, v18, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v93 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v91, s11, v18, zero]
// [Asm] move_origin: []
// [Asm] defs: [v94]
// [Asm] live_set: [v94, v16, v18, s11, zero]
// [Asm] move_origin: []
// [Asm] defined: v94 is X
// [Asm] defs: []
// [Asm] live_set: [v94, v16, v18, s11, zero]
// [Asm] move_origin: [v16]
// [Asm] defs: [v17]
// [Asm] live_set: [v16, v17, v18, s11, zero]
// [Asm] move_origin: [v94]
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v17, v18, s11, zero]
// [Asm] move_origin: [v18]
// [Asm] defs: []
// [Asm] live_set: [v16, v17, v18, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v114]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v102]
// [Asm] live_set: [v16, v5, v71, v17, s11, v9, v73, v72, v75, v18, zero, v74, v102, v76]
// [Asm] move_origin: []
// [Asm] defined: v102 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v5, v71, v17, s11, v9, v73, v72, v75, v18, zero, v74, v102, v76]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v16, v5, v71, a0, v17, s11, v9, v73, v72, v75, v18, zero, v74, v102, v76]
// [Asm] move_origin: [v73]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v16, v5, v71, a0, v17, a1, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm] move_origin: [v102]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v16, v5, v71, a0, a2, v17, a1, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm] move_origin: [v71]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v16, v5, v71, a0, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v103]
// [Asm] live_set: [v16, v5, v71, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm] move_origin: [a0]
// [Asm] defined: v103 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v5, v71, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v16, v5, v71, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm] move_origin: []
// [Asm] defs: [v105]
// [Asm] live_set: [v16, v5, v71, v17, s11, v9, v73, v72, v75, v18, zero, v105, v74, v76]
// [Asm] move_origin: []
// [Asm] defined: v105 is X
// [Asm] defs: [v106]
// [Asm] live_set: [v16, v5, v71, v17, s11, v9, v73, v106, v72, v75, v18, zero, v74, v76]
// [Asm] move_origin: []
// [Asm] defined: v106 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v5, v71, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm] move_origin: []
// [Asm] defs: [v108]
// [Asm] live_set: [v16, v5, v17, v108, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm] move_origin: []
// [Asm] defined: v108 is X
// [Asm] defs: [v71]
// [Asm] live_set: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm] move_origin: [v108]
// [Asm] defined: v71 is X
// [Asm] defs: []
// [Asm] live_set: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm] move_origin: [v72]
// [Asm] defs: []
// [Asm] live_set: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm] move_origin: [v73]
// [Asm] defs: []
// [Asm] live_set: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm] move_origin: [v74]
// [Asm] defs: []
// [Asm] live_set: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm] move_origin: [v75]
// [Asm] defs: []
// [Asm] live_set: [v76, v72, v71, v16, v5, v75, v18, zero, v17, v74, s11, v9, v73]
// [Asm] move_origin: [v76]
// [Asm] defs: []
// [Asm] live_set: [v76, v72, v71, v16, v5, v75, v18, zero, v17, v74, s11, v9, v73]
// [Asm] move_origin: []
// [Asm] defs: [v179]
// [Asm] live_set: [v25, v16, v18, v179, v13, zero, v22, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: v179 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v25, v16, v18, v13, zero, v22, v32, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: [v177]
// [Asm] live_set: [v25, v16, v18, v13, zero, v22, v32, v17, v177, s11]
// [Asm] move_origin: []
// [Asm] defined: v177 is X
// [Asm] defs: [v33]
// [Asm] live_set: [v25, v16, v18, v13, zero, v22, v32, v17, s11, v33]
// [Asm] move_origin: []
// [Asm] defined: v33 is X
// [Asm] defs: [v34]
// [Asm] live_set: [v25, v16, v18, v13, zero, v22, v32, v17, s11, v34]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: [v174]
// [Asm] live_set: [v25, v174, v16, v18, v13, zero, v22, v32, v17, s11, v34]
// [Asm] move_origin: []
// [Asm] defined: v174 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v25, v16, v18, v13, zero, v22, v35, v17, s11, v34]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v25, v16, v18, v13, zero, v22, v36, v17, s11, v34]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: [v37]
// [Asm] live_set: [v25, v16, v18, v13, zero, v36, v37, v17, s11, v34]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: [v171]
// [Asm] live_set: [v25, v16, v18, v171, v13, zero, v36, v37, v17, s11, v34]
// [Asm] move_origin: []
// [Asm] defined: v171 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v16, v18, v13, zero, v36, v17, s11, v34]
// [Asm] move_origin: []
// [Asm] defs: [v61]
// [Asm] live_set: [v16, v17, v18, v61, s11, zero]
// [Asm] move_origin: [v60]
// [Asm] defined: v61 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v16, v18, zero, v13, v36, v17, s11, v34]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v25, v16, v18, zero, v13, a0, v36, v17, s11]
// [Asm] move_origin: [v34]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v25, v16, v18, zero, v13, a0, v36, v17, a1, s11]
// [Asm] move_origin: [v25]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v25, v16, v18, zero, v13, a0, a2, v17, a1, s11]
// [Asm] move_origin: [v36]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v25, v16, v18, zero, v13, a0, a2, v17, a1, s11, a3]
// [Asm] move_origin: [v16]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v25, v16, v18, zero, v13, a0, a4, a2, v17, a1, s11, a3]
// [Asm] move_origin: [v13]
// [Asm] defined: a4 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v25, v16, v18, zero, v13, a0, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v39]
// [Asm] live_set: [v25, v16, v18, zero, v13, v17, s11]
// [Asm] move_origin: [a0]
// [Asm] defined: v39 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v16, v18, zero, v13, v17, s11]
// [Asm] move_origin: []
// [Asm] defs: [v40]
// [Asm] live_set: [v25, v16, v18, zero, v17, s11, v40]
// [Asm] move_origin: []
// [Asm] defined: v40 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v16, v17, v18, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v16, v18, v13, zero, v17]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v16, v18, v13, zero, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v13, zero, v17, s11]
// [Asm] move_origin: []
// [Asm] defs: [v22]
// [Asm] live_set: [v16, v18, v13, zero, v22, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v189]
// [Asm] live_set: [v16, v18, v13, zero, v22, v17, s11, v189]
// [Asm] move_origin: []
// [Asm] defined: v189 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v16, v18, v13, zero, v22, v23, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v187]
// [Asm] live_set: [v16, v18, v13, zero, v22, v23, v17, s11, v187]
// [Asm] move_origin: []
// [Asm] defined: v187 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v16, v18, v13, zero, v22, v17, s11, v24]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v16, v18, v13, zero, v22, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [v185]
// [Asm] live_set: [v25, v16, v18, v13, zero, v22, v17, s11, v185]
// [Asm] move_origin: []
// [Asm] defined: v185 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v16, v18, v13, zero, v22, v17, s11]
// [Asm] move_origin: []
// [Asm] defs: [v79]
// [Asm] live_set: [v16, v5, v18, zero, v79, v17, s11, v9]
// [Asm] move_origin: [zero]
// [Asm] defined: v79 is X
// [Asm] defs: [v60]
// [Asm] live_set: [v16, v17, v18, s11, zero, v60]
// [Asm] move_origin: [v59]
// [Asm] defined: v60 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of quick_sort.212"];
// [Asm]   r0 [label="v81 ← a1", color=green];
// [Asm]   r46 [label="v193 ← a1", color=green];
// [Asm]   r33 [label="v48 ← a0", color=green];
// [Asm]   r59 [label="v11 ← a0", color=green];
// [Asm]   r76 [label="v65 ← s1", color=green];
// [Asm]   r9 [label="a0", color=blue];
// [Asm]   r26 [label="v45 ← a0", color=green];
// [Asm]   r86 [label="v62 ← a0", color=green];
// [Asm]   r44 [label="v59 ← a0", color=green];
// [Asm]   r53 [label="v76 ← s1", color=green];
// [Asm]   r56 [label="v97 ← a1", color=green];
// [Asm]   r10 [label="a1", color=blue];
// [Asm]   r111 [label="v40 ← a0", color=green];
// [Asm]   r5 [label="v17 ← s3", color=green];
// [Asm]   r54 [label="v128 ← a0", color=green];
// [Asm]   r24 [label="v85 ← a1", color=green];
// [Asm]   r43 [label="v15 ← a0", color=green];
// [Asm]   r88 [label="v110 ← a0", color=green];
// [Asm]   r80 [label="v144 ← a1", color=green];
// [Asm]   r31 [label="v46 ← a2", color=green];
// [Asm]   r39 [label="v54 ← a0", color=green];
// [Asm]   r99 [label="v106 ← a0", color=green];
// [Asm]   r17 [label="t0", color=blue];
// [Asm]   r52 [label="v74 ← s2", color=green];
// [Asm]   r65 [label="v68 ← a0", color=green];
// [Asm]   r79 [label="v147 ← a0", color=green];
// [Asm]   r20 [label="t3", color=blue];
// [Asm]   r61 [label="v10 ← a0", color=green];
// [Asm]   r113 [label="v23 ← a1", color=green];
// [Asm]   r23 [label="v84 ← a0", color=green];
// [Asm]   r3 [label="v18 ← s2", color=green];
// [Asm]   r108 [label="v37 ← a0", color=green];
// [Asm]   r82 [label="v167 ← a1", color=green];
// [Asm]   r67 [label="v7 ← a0", color=green];
// [Asm]   r75 [label="v182 ← a1", color=green];
// [Asm]   r77 [label="v66 ← a0", color=green];
// [Asm]   r27 [label="v25 ← s1", color=green];
// [Asm]   r62 [label="v44 ← a0", color=green];
// [Asm]   r40 [label="v55 ← a0", color=green];
// [Asm]   r11 [label="a2", color=blue];
// [Asm]   r110 [label="v39 ← a0", color=green];
// [Asm]   r58 [label="v114 ← a0", color=green];
// [Asm]   r34 [label="v49 ← a2", color=green];
// [Asm]   r105 [label="v33 ← a2", color=green];
// [Asm]   r83 [label="v6 ← a1", color=green];
// [Asm]   r103 [label="v32 ← a1", color=green];
// [Asm]   r14 [label="a5", color=blue];
// [Asm]   r51 [label="v75 ← s6", color=green];
// [Asm]   r96 [label="v102 ← a1", color=green];
// [Asm]   r78 [label="v146 ← a0", color=green];
// [Asm]   r55 [label="v96 ← a0", color=green];
// [Asm]   r16 [label="a7", color=blue];
// [Asm]   r21 [label="t4", color=blue];
// [Asm]   r60 [label="v153 ← a1", color=green];
// [Asm]   r73 [label="v60 ← a0", color=green];
// [Asm]   r93 [label="v91 ← s1", color=green];
// [Asm]   r38 [label="v53 ← a0", color=green];
// [Asm]   r72 [label="v27 ← a0", color=green];
// [Asm]   r104 [label="v177 ← a2", color=green];
// [Asm]   r116 [label="v185 ← a1", color=green];
// [Asm]   r87 [label="v109 ← a0", color=green];
// [Asm]   r100 [label="v108 ← a0", color=green];
// [Asm]   r85 [label="v89 ← a0", color=green];
// [Asm]   r47 [label="v127 ← a0", color=green];
// [Asm]   r6 [label="s11", color=blue];
// [Asm]   r13 [label="a4", color=blue];
// [Asm]   r42 [label="v63 ← a1", color=green];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r117 [label="v79 ← a0", color=green];
// [Asm]   r95 [label="v94 ← a0", color=green];
// [Asm]   r29 [label="v36 ← s5", color=green];
// [Asm]   r35 [label="v50 ← a0", color=green];
// [Asm]   r7 [label="v9 ← s4", color=green];
// [Asm]   r114 [label="v187 ← a2", color=green];
// [Asm]   r64 [label="v80 ← a0", color=green];
// [Asm]   r8 [label="v82 ← a2", color=green];
// [Asm]   r36 [label="v51 ← a0", color=green];
// [Asm]   r112 [label="v189 ← a1", color=green];
// [Asm]   r66 [label="v100 ← a0", color=green];
// [Asm]   r32 [label="v47 ← a0", color=green];
// [Asm]   r15 [label="a6", color=blue];
// [Asm]   r49 [label="v73 ← s0", color=green];
// [Asm]   r115 [label="v24 ← a1", color=green];
// [Asm]   r57 [label="v113 ← a0", color=green];
// [Asm]   r74 [label="v8 ← a0", color=green];
// [Asm]   r68 [label="v31 ← a0", color=green];
// [Asm]   r98 [label="v105 ← a0", color=green];
// [Asm]   r91 [label="v14 ← a1", color=green];
// [Asm]   r70 [label="v3 ← a1", color=green];
// [Asm]   r48 [label="v71 ← s5", color=green];
// [Asm]   r12 [label="a3", color=blue];
// [Asm]   r37 [label="v52 ← a2", color=green];
// [Asm]   r102 [label="v22 ← a0", color=green];
// [Asm]   r106 [label="v174 ← a2", color=green];
// [Asm]   r109 [label="v171 ← a1", color=green];
// [Asm]   r1 [label="v16 ← s0", color=green];
// [Asm]   r41 [label="v90 ← a0", color=green];
// [Asm]   r28 [label="v13 ← s4", color=green];
// [Asm]   r71 [label="v4 ← a2", color=green];
// [Asm]   r22 [label="v83 ← a0", color=green];
// [Asm]   r69 [label="v2 ← a0", color=green];
// [Asm]   r84 [label="v134 ← a0", color=green];
// [Asm]   r89 [label="v112 ← a0", color=green];
// [Asm]   r50 [label="v72 ← s4", color=green];
// [Asm]   r30 [label="v34 ← s6", color=green];
// [Asm]   r45 [label="v19 ← a0", color=green];
// [Asm]   r92 [label="v77 ← a0", color=green];
// [Asm]   r107 [label="v35 ← a1", color=green];
// [Asm]   r25 [label="v136 ← a2", color=green];
// [Asm]   r63 [label="v61 ← a0", color=green];
// [Asm]   r2 [label="v5 ← s1", color=green];
// [Asm]   r18 [label="t1", color=blue];
// [Asm]   r19 [label="t2", color=blue];
// [Asm]   r90 [label="v99 ← a0", color=green];
// [Asm]   r97 [label="v103 ← a0", color=green];
// [Asm]   r81 [label="v12 ← a0", color=green];
// [Asm]   r94 [label="v93 ← a0", color=green];
// [Asm]   r101 [label="v179 ← a1", color=green];
// [Asm]   r7 -- r117;
// [Asm]   r5 -- r105;
// [Asm]   r21 -- r93;
// [Asm]   r18 -- r49;
// [Asm]   r6 -- r102;
// [Asm]   r6 -- r70;
// [Asm]   r6 -- r48;
// [Asm]   r10 -- r53;
// [Asm]   r14 -- r93;
// [Asm]   r27 -- r36;
// [Asm]   r6 -- r68;
// [Asm]   r4 -- r101;
// [Asm]   r4 -- r44;
// [Asm]   r6 -- r88;
// [Asm]   r4 -- r90;
// [Asm]   r3 -- r9;
// [Asm]   r102 -- r114;
// [Asm]   r3 -- r107;
// [Asm]   r4 -- r48;
// [Asm]   r5 -- r65;
// [Asm]   r3 -- r86;
// [Asm]   r2 -- r51;
// [Asm]   r3 -- r26;
// [Asm]   r30 -- r108;
// [Asm]   r3 -- r31;
// [Asm]   r4 -- r113;
// [Asm]   r1 -- r68;
// [Asm]   r20 -- r30;
// [Asm]   r9 -- r14;
// [Asm]   r3 -- r48;
// [Asm]   r0 -- r6;
// [Asm]   r1 -- r112;
// [Asm]   r6 -- r69;
// [Asm]   r26 -- r27;
// [Asm]   r5 -- r35;
// [Asm]   r13 -- r30;
// [Asm]   r28 -- r108;
// [Asm]   r5 -- r107;
// [Asm]   r2 -- r48;
// [Asm]   r21 -- r48;
// [Asm]   r53 -- r96;
// [Asm]   r51 -- r97;
// [Asm]   r29 -- r108;
// [Asm]   r4 -- r83;
// [Asm]   r29 -- r33;
// [Asm]   r15 -- r51;
// [Asm]   r5 -- r32;
// [Asm]   r1 -- r2;
// [Asm]   r28 -- r33;
// [Asm]   r4 -- r29;
// [Asm]   r1 -- r11;
// [Asm]   r5 -- r51;
// [Asm]   r50 -- r88;
// [Asm]   r2 -- r98;
// [Asm]   r28 -- r114;
// [Asm]   r1 -- r35;
// [Asm]   r17 -- r27;
// [Asm]   r6 -- r56;
// [Asm]   r49 -- r54;
// [Asm]   r6 -- r114;
// [Asm]   r1 -- r117;
// [Asm]   r6 -- r25;
// [Asm]   r14 -- r49;
// [Asm]   r49 -- r89;
// [Asm]   r27 -- r40;
// [Asm]   r19 -- r93;
// [Asm]   r6 -- r62;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r103;
// [Asm]   r1 -- r55;
// [Asm]   r21 -- r28;
// [Asm]   r29 -- r30;
// [Asm]   r49 -- r98;
// [Asm]   r21 -- r29;
// [Asm]   r11 -- r70;
// [Asm]   r6 -- r116;
// [Asm]   r19 -- r48;
// [Asm]   r1 -- r105;
// [Asm]   r3 -- r104;
// [Asm]   r2 -- r50;
// [Asm]   r5 -- r19;
// [Asm]   r6 -- r46;
// [Asm]   r9 -- r76;
// [Asm]   r9 -- r30;
// [Asm]   r53 -- r66;
// [Asm]   r3 -- r83;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r1 -- r114;
// [Asm]   r3 -- r113;
// [Asm]   r5 -- r11;
// [Asm]   r12 -- r50;
// [Asm]   r18 -- r51;
// [Asm]   r5 -- r74;
// [Asm]   r19 -- r50;
// [Asm]   r18 -- r53;
// [Asm]   r9 -- r11;
// [Asm]   r3 -- r65;
// [Asm]   r5 -- r93;
// [Asm]   r6 -- r105;
// [Asm]   r53 -- r89;
// [Asm]   r5 -- r97;
// [Asm]   r2 -- r14;
// [Asm]   r47 -- r51;
// [Asm]   r4 -- r100;
// [Asm]   r3 -- r99;
// [Asm]   r27 -- r106;
// [Asm]   r11 -- r52;
// [Asm]   r28 -- r102;
// [Asm]   r50 -- r100;
// [Asm]   r48 -- r49;
// [Asm]   r53 -- r97;
// [Asm]   r6 -- r113;
// [Asm]   r1 -- r72;
// [Asm]   r13 -- r52;
// [Asm]   r1 -- r99;
// [Asm]   r4 -- r7;
// [Asm]   r4 -- r63;
// [Asm]   r6 -- r38;
// [Asm]   r49 -- r87;
// [Asm]   r52 -- r97;
// [Asm]   r3 -- r23;
// [Asm]   r48 -- r56;
// [Asm]   r9 -- r21;
// [Asm]   r1 -- r24;
// [Asm]   r5 -- r12;
// [Asm]   r6 -- r95;
// [Asm]   r4 -- r41;
// [Asm]   r5 -- r63;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r69 -- r70;
// [Asm]   r93 -- r94;
// [Asm]   r51 -- r100;
// [Asm]   r3 -- r112;
// [Asm]   r6 -- r66;
// [Asm]   r7 -- r56;
// [Asm]   r3 -- r56;
// [Asm]   r48 -- r66;
// [Asm]   r4 -- r110;
// [Asm]   r1 -- r10;
// [Asm]   r4 -- r54;
// [Asm]   r1 -- r85;
// [Asm]   r3 -- r32;
// [Asm]   r6 -- r54;
// [Asm]   r27 -- r32;
// [Asm]   r48 -- r87;
// [Asm]   r29 -- r31;
// [Asm]   r1 -- r17;
// [Asm]   r9 -- r31;
// [Asm]   r4 -- r78;
// [Asm]   r4 -- r91;
// [Asm]   r15 -- r53;
// [Asm]   r3 -- r89;
// [Asm]   r4 -- r22;
// [Asm]   r76 -- r77;
// [Asm]   r3 -- r18;
// [Asm]   r6 -- r77;
// [Asm]   r4 -- r35;
// [Asm]   r4 -- r69;
// [Asm]   r42 -- r76;
// [Asm]   r1 -- r70;
// [Asm]   r1 -- r31;
// [Asm]   r1 -- r103;
// [Asm]   r14 -- r28;
// [Asm]   r1 -- r87;
// [Asm]   r5 -- r104;
// [Asm]   r3 -- r97;
// [Asm]   r50 -- r51;
// [Asm]   r5 -- r86;
// [Asm]   r4 -- r86;
// [Asm]   r6 -- r96;
// [Asm]   r11 -- r48;
// [Asm]   r6 -- r18;
// [Asm]   r4 -- r28;
// [Asm]   r3 -- r40;
// [Asm]   r18 -- r30;
// [Asm]   r5 -- r80;
// [Asm]   r3 -- r27;
// [Asm]   r2 -- r97;
// [Asm]   r3 -- r95;
// [Asm]   r5 -- r7;
// [Asm]   r53 -- r90;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r110;
// [Asm]   r52 -- r54;
// [Asm]   r4 -- r49;
// [Asm]   r12 -- r53;
// [Asm]   r55 -- r56;
// [Asm]   r27 -- r37;
// [Asm]   r6 -- r32;
// [Asm]   r30 -- r33;
// [Asm]   r53 -- r55;
// [Asm]   r49 -- r66;
// [Asm]   r28 -- r37;
// [Asm]   r7 -- r88;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r23;
// [Asm]   r5 -- r23;
// [Asm]   r9 -- r29;
// [Asm]   r4 -- r79;
// [Asm]   r7 -- r99;
// [Asm]   r52 -- r100;
// [Asm]   r49 -- r88;
// [Asm]   r4 -- r20;
// [Asm]   r1 -- r60;
// [Asm]   r27 -- r61;
// [Asm]   r6 -- r16;
// [Asm]   r5 -- r87;
// [Asm]   r4 -- r30;
// [Asm]   r1 -- r65;
// [Asm]   r10 -- r27;
// [Asm]   r1 -- r66;
// [Asm]   r1 -- r39;
// [Asm]   r113 -- r114;
// [Asm]   r1 -- r106;
// [Asm]   r51 -- r92;
// [Asm]   r4 -- r11;
// [Asm]   r6 -- r112;
// [Asm]   r3 -- r84;
// [Asm]   r27 -- r110;
// [Asm]   r48 -- r65;
// [Asm]   r4 -- r72;
// [Asm]   r49 -- r92;
// [Asm]   r12 -- r49;
// [Asm]   r102 -- r112;
// [Asm]   r3 -- r55;
// [Asm]   r1 -- r83;
// [Asm]   r18 -- r48;
// [Asm]   r6 -- r82;
// [Asm]   r1 -- r84;
// [Asm]   r19 -- r52;
// [Asm]   r30 -- r36;
// [Asm]   r12 -- r30;
// [Asm]   r20 -- r49;
// [Asm]   r9 -- r16;
// [Asm]   r4 -- r39;
// [Asm]   r1 -- r73;
// [Asm]   r30 -- r107;
// [Asm]   r9 -- r19;
// [Asm]   r11 -- r27;
// [Asm]   r0 -- r7;
// [Asm]   r5 -- r43;
// [Asm]   r3 -- r109;
// [Asm]   r5 -- r76;
// [Asm]   r16 -- r52;
// [Asm]   r3 -- r116;
// [Asm]   r1 -- r93;
// [Asm]   r3 -- r44;
// [Asm]   r4 -- r111;
// [Asm]   r48 -- r54;
// [Asm]   r6 -- r81;
// [Asm]   r7 -- r51;
// [Asm]   r12 -- r29;
// [Asm]   r3 -- r91;
// [Asm]   r5 -- r82;
// [Asm]   r1 -- r90;
// [Asm]   r5 -- r21;
// [Asm]   r5 -- r33;
// [Asm]   r4 -- r34;
// [Asm]   r7 -- r97;
// [Asm]   r1 -- r30;
// [Asm]   r4 -- r97;
// [Asm]   r50 -- r66;
// [Asm]   r47 -- r50;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r85;
// [Asm]   r5 -- r22;
// [Asm]   r6 -- r100;
// [Asm]   r1 -- r45;
// [Asm]   r1 -- r52;
// [Asm]   r5 -- r29;
// [Asm]   r15 -- r93;
// [Asm]   r48 -- r92;
// [Asm]   r6 -- r101;
// [Asm]   r30 -- r34;
// [Asm]   r3 -- r5;
// [Asm]   r6 -- r89;
// [Asm]   r4 -- r31;
// [Asm]   r52 -- r55;
// [Asm]   r3 -- r92;
// [Asm]   r5 -- r116;
// [Asm]   r6 -- r60;
// [Asm]   r19 -- r76;
// [Asm]   r53 -- r99;
// [Asm]   r14 -- r53;
// [Asm]   r19 -- r29;
// [Asm]   r102 -- r113;
// [Asm]   r5 -- r117;
// [Asm]   r10 -- r12;
// [Asm]   r1 -- r77;
// [Asm]   r50 -- r98;
// [Asm]   r51 -- r87;
// [Asm]   r50 -- r96;
// [Asm]   r10 -- r31;
// [Asm]   r20 -- r27;
// [Asm]   r51 -- r54;
// [Asm]   r4 -- r56;
// [Asm]   r21 -- r50;
// [Asm]   r9 -- r20;
// [Asm]   r0 -- r1;
// [Asm]   r5 -- r101;
// [Asm]   r23 -- r24;
// [Asm]   r4 -- r25;
// [Asm]   r5 -- r55;
// [Asm]   r3 -- r49;
// [Asm]   r1 -- r80;
// [Asm]   r6 -- r55;
// [Asm]   r27 -- r35;
// [Asm]   r6 -- r23;
// [Asm]   r4 -- r14;
// [Asm]   r3 -- r46;
// [Asm]   r15 -- r30;
// [Asm]   r7 -- r65;
// [Asm]   r16 -- r76;
// [Asm]   r1 -- r111;
// [Asm]   r15 -- r76;
// [Asm]   r51 -- r52;
// [Asm]   r20 -- r51;
// [Asm]   r28 -- r112;
// [Asm]   r3 -- r45;
// [Asm]   r4 -- r106;
// [Asm]   r1 -- r43;
// [Asm]   r4 -- r23;
// [Asm]   r30 -- r35;
// [Asm]   r1 -- r34;
// [Asm]   r102 -- r103;
// [Asm]   r6 -- r33;
// [Asm]   r8 -- r9;
// [Asm]   r2 -- r65;
// [Asm]   r2 -- r88;
// [Asm]   r2 -- r80;
// [Asm]   r30 -- r103;
// [Asm]   r50 -- r54;
// [Asm]   r10 -- r29;
// [Asm]   r30 -- r102;
// [Asm]   r102 -- r115;
// [Asm]   r6 -- r22;
// [Asm]   r28 -- r36;
// [Asm]   r10 -- r51;
// [Asm]   r5 -- r113;
// [Asm]   r27 -- r43;
// [Asm]   r3 -- r114;
// [Asm]   r4 -- r71;
// [Asm]   r6 -- r27;
// [Asm]   r4 -- r80;
// [Asm]   r21 -- r76;
// [Asm]   r4 -- r15;
// [Asm]   r23 -- r25;
// [Asm]   r12 -- r13;
// [Asm]   r5 -- r28;
// [Asm]   r1 -- r81;
// [Asm]   r0 -- r3;
// [Asm]   r50 -- r53;
// [Asm]   r1 -- r94;
// [Asm]   r7 -- r15;
// [Asm]   r6 -- r87;
// [Asm]   r4 -- r109;
// [Asm]   r29 -- r102;
// [Asm]   r102 -- r104;
// [Asm]   r4 -- r114;
// [Asm]   r5 -- r39;
// [Asm]   r5 -- r98;
// [Asm]   r20 -- r28;
// [Asm]   r26 -- r31;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r9 -- r48;
// [Asm]   r7 -- r12;
// [Asm]   r7 -- r14;
// [Asm]   r1 -- r54;
// [Asm]   r27 -- r81;
// [Asm]   r28 -- r34;
// [Asm]   r6 -- r71;
// [Asm]   r48 -- r88;
// [Asm]   r6 -- r21;
// [Asm]   r4 -- r87;
// [Asm]   r4 -- r38;
// [Asm]   r28 -- r113;
// [Asm]   r4 -- r66;
// [Asm]   r27 -- r59;
// [Asm]   r1 -- r12;
// [Asm]   r50 -- r89;
// [Asm]   r3 -- r115;
// [Asm]   r27 -- r105;
// [Asm]   r6 -- r47;
// [Asm]   r30 -- r38;
// [Asm]   r27 -- r29;
// [Asm]   r5 -- r88;
// [Asm]   r3 -- r100;
// [Asm]   r1 -- r4;
// [Asm]   r4 -- r105;
// [Asm]   r19 -- r51;
// [Asm]   r7 -- r100;
// [Asm]   r51 -- r98;
// [Asm]   r1 -- r18;
// [Asm]   r30 -- r31;
// [Asm]   r2 -- r10;
// [Asm]   r6 -- r109;
// [Asm]   r13 -- r50;
// [Asm]   r1 -- r20;
// [Asm]   r52 -- r92;
// [Asm]   r3 -- r24;
// [Asm]   r5 -- r73;
// [Asm]   r4 -- r40;
// [Asm]   r3 -- r51;
// [Asm]   r3 -- r34;
// [Asm]   r9 -- r18;
// [Asm]   r1 -- r46;
// [Asm]   r18 -- r50;
// [Asm]   r10 -- r49;
// [Asm]   r7 -- r55;
// [Asm]   r10 -- r37;
// [Asm]   r18 -- r52;
// [Asm]   r4 -- r43;
// [Asm]   r49 -- r96;
// [Asm]   r4 -- r98;
// [Asm]   r28 -- r104;
// [Asm]   r5 -- r53;
// [Asm]   r7 -- r10;
// [Asm]   r2 -- r47;
// [Asm]   r3 -- r80;
// [Asm]   r6 -- r94;
// [Asm]   r3 -- r82;
// [Asm]   r28 -- r115;
// [Asm]   r1 -- r27;
// [Asm]   r14 -- r52;
// [Asm]   r28 -- r29;
// [Asm]   r7 -- r98;
// [Asm]   r52 -- r87;
// [Asm]   r3 -- r102;
// [Asm]   r4 -- r50;
// [Asm]   r4 -- r8;
// [Asm]   r5 -- r50;
// [Asm]   r52 -- r88;
// [Asm]   r7 -- r96;
// [Asm]   r15 -- r28;
// [Asm]   r11 -- r30;
// [Asm]   r51 -- r56;
// [Asm]   r7 -- r64;
// [Asm]   r2 -- r87;
// [Asm]   r30 -- r109;
// [Asm]   r28 -- r101;
// [Asm]   r4 -- r24;
// [Asm]   r6 -- r15;
// [Asm]   r9 -- r15;
// [Asm]   r5 -- r103;
// [Asm]   r6 -- r44;
// [Asm]   r5 -- r77;
// [Asm]   r4 -- r59;
// [Asm]   r3 -- r12;
// [Asm]   r6 -- r79;
// [Asm]   r6 -- r51;
// [Asm]   r1 -- r78;
// [Asm]   r5 -- r84;
// [Asm]   r5 -- r52;
// [Asm]   r9 -- r42;
// [Asm]   r5 -- r44;
// [Asm]   r45 -- r46;
// [Asm]   r3 -- r28;
// [Asm]   r14 -- r29;
// [Asm]   r23 -- r91;
// [Asm]   r3 -- r106;
// [Asm]   r7 -- r9;
// [Asm]   r10 -- r34;
// [Asm]   r6 -- r40;
// [Asm]   r15 -- r27;
// [Asm]   r30 -- r37;
// [Asm]   r4 -- r60;
// [Asm]   r7 -- r66;
// [Asm]   r1 -- r28;
// [Asm]   r6 -- r8;
// [Asm]   r5 -- r64;
// [Asm]   r6 -- r34;
// [Asm]   r3 -- r111;
// [Asm]   r53 -- r56;
// [Asm]   r10 -- r50;
// [Asm]   r7 -- r92;
// [Asm]   r19 -- r53;
// [Asm]   r4 -- r73;
// [Asm]   r27 -- r111;
// [Asm]   r5 -- r46;
// [Asm]   r17 -- r51;
// [Asm]   r2 -- r56;
// [Asm]   r3 -- r64;
// [Asm]   r10 -- r52;
// [Asm]   r6 -- r42;
// [Asm]   r47 -- r49;
// [Asm]   r102 -- r106;
// [Asm]   r1 -- r115;
// [Asm]   r49 -- r99;
// [Asm]   r3 -- r81;
// [Asm]   r21 -- r49;
// [Asm]   r3 -- r75;
// [Asm]   r11 -- r69;
// [Asm]   r4 -- r96;
// [Asm]   r17 -- r52;
// [Asm]   r4 -- r77;
// [Asm]   r1 -- r113;
// [Asm]   r14 -- r76;
// [Asm]   r4 -- r17;
// [Asm]   r28 -- r116;
// [Asm]   r17 -- r30;
// [Asm]   r1 -- r36;
// [Asm]   r52 -- r98;
// [Asm]   r6 -- r111;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r63;
// [Asm]   r17 -- r28;
// [Asm]   r102 -- r116;
// [Asm]   r5 -- r40;
// [Asm]   r5 -- r112;
// [Asm]   r9 -- r53;
// [Asm]   r1 -- r26;
// [Asm]   r5 -- r114;
// [Asm]   r6 -- r75;
// [Asm]   r28 -- r32;
// [Asm]   r3 -- r15;
// [Asm]   r13 -- r76;
// [Asm]   r3 -- r16;
// [Asm]   r4 -- r51;
// [Asm]   r3 -- r53;
// [Asm]   r2 -- r49;
// [Asm]   r3 -- r62;
// [Asm]   r4 -- r64;
// [Asm]   r28 -- r30;
// [Asm]   r6 -- r84;
// [Asm]   r50 -- r90;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r102;
// [Asm]   r27 -- r28;
// [Asm]   r10 -- r69;
// [Asm]   r2 -- r7;
// [Asm]   r27 -- r34;
// [Asm]   r27 -- r67;
// [Asm]   r17 -- r76;
// [Asm]   r1 -- r50;
// [Asm]   r50 -- r55;
// [Asm]   r10 -- r93;
// [Asm]   r6 -- r86;
// [Asm]   r3 -- r85;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r26 -- r28;
// [Asm]   r5 -- r6;
// [Asm]   r1 -- r48;
// [Asm]   r1 -- r64;
// [Asm]   r59 -- r60;
// [Asm]   r3 -- r74;
// [Asm]   r3 -- r39;
// [Asm]   r20 -- r93;
// [Asm]   r69 -- r71;
// [Asm]   r5 -- r106;
// [Asm]   r6 -- r104;
// [Asm]   r9 -- r12;
// [Asm]   r48 -- r50;
// [Asm]   r5 -- r54;
// [Asm]   r1 -- r107;
// [Asm]   r5 -- r60;
// [Asm]   r4 -- r115;
// [Asm]   r3 -- r33;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r1 -- r51;
// [Asm]   r3 -- r17;
// [Asm]   r13 -- r93;
// [Asm]   r53 -- r88;
// [Asm]   r6 -- r72;
// [Asm]   r1 -- r38;
// [Asm]   r6 -- r50;
// [Asm]   r1 -- r41;
// [Asm]   r2 -- r96;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r35;
// [Asm]   r1 -- r5;
// [Asm]   r24 -- r25;
// [Asm]   r5 -- r111;
// [Asm]   r28 -- r109;
// [Asm]   r5 -- r36;
// [Asm]   r3 -- r94;
// [Asm]   r4 -- r13;
// [Asm]   r16 -- r30;
// [Asm]   r3 -- r25;
// [Asm]   r3 -- r110;
// [Asm]   r4 -- r76;
// [Asm]   r4 -- r62;
// [Asm]   r28 -- r31;
// [Asm]   r1 -- r109;
// [Asm]   r6 -- r41;
// [Asm]   r1 -- r75;
// [Asm]   r19 -- r30;
// [Asm]   r6 -- r106;
// [Asm]   r74 -- r75;
// [Asm]   r4 -- r88;
// [Asm]   r9 -- r93;
// [Asm]   r6 -- r98;
// [Asm]   r16 -- r51;
// [Asm]   r3 -- r105;
// [Asm]   r20 -- r52;
// [Asm]   r4 -- r81;
// [Asm]   r7 -- r20;
// [Asm]   r6 -- r53;
// [Asm]   r52 -- r90;
// [Asm]   r13 -- r48;
// [Asm]   r16 -- r50;
// [Asm]   r27 -- r102;
// [Asm]   r50 -- r65;
// [Asm]   r11 -- r51;
// [Asm]   r5 -- r38;
// [Asm]   r6 -- r59;
// [Asm]   r3 -- r22;
// [Asm]   r17 -- r93;
// [Asm]   r53 -- r98;
// [Asm]   r6 -- r19;
// [Asm]   r50 -- r92;
// [Asm]   r6 -- r108;
// [Asm]   r7 -- r22;
// [Asm]   r49 -- r53;
// [Asm]   r4 -- r55;
// [Asm]   r7 -- r19;
// [Asm]   r4 -- r99;
// [Asm]   r28 -- r110;
// [Asm]   r1 -- r79;
// [Asm]   r102 -- r107;
// [Asm]   r2 -- r89;
// [Asm]   r1 -- r97;
// [Asm]   r5 -- r68;
// [Asm]   r3 -- r29;
// [Asm]   r48 -- r51;
// [Asm]   r1 -- r89;
// [Asm]   r3 -- r66;
// [Asm]   r5 -- r81;
// [Asm]   r1 -- r95;
// [Asm]   r4 -- r36;
// [Asm]   r28 -- r103;
// [Asm]   r48 -- r52;
// [Asm]   r6 -- r39;
// [Asm]   r5 -- r25;
// [Asm]   r48 -- r99;
// [Asm]   r27 -- r107;
// [Asm]   r6 -- r74;
// [Asm]   r4 -- r74;
// [Asm]   r4 -- r10;
// [Asm]   r17 -- r50;
// [Asm]   r11 -- r28;
// [Asm]   r11 -- r29;
// [Asm]   r1 -- r42;
// [Asm]   r6 -- r52;
// [Asm]   r51 -- r99;
// [Asm]   r4 -- r108;
// [Asm]   r3 -- r67;
// [Asm]   r4 -- r102;
// [Asm]   r6 -- r36;
// [Asm]   r1 -- r37;
// [Asm]   r1 -- r98;
// [Asm]   r103 -- r105;
// [Asm]   r1 -- r19;
// [Asm]   r49 -- r90;
// [Asm]   r1 -- r88;
// [Asm]   r10 -- r13;
// [Asm]   r18 -- r27;
// [Asm]   r6 -- r63;
// [Asm]   r5 -- r42;
// [Asm]   r47 -- r52;
// [Asm]   r2 -- r16;
// [Asm]   r51 -- r53;
// [Asm]   r50 -- r87;
// [Asm]   r13 -- r28;
// [Asm]   r5 -- r92;
// [Asm]   r1 -- r62;
// [Asm]   r27 -- r39;
// [Asm]   r11 -- r53;
// [Asm]   r1 -- r67;
// [Asm]   r14 -- r30;
// [Asm]   r4 -- r107;
// [Asm]   r51 -- r66;
// [Asm]   r2 -- r54;
// [Asm]   r12 -- r52;
// [Asm]   r2 -- r92;
// [Asm]   r4 -- r33;
// [Asm]   r53 -- r100;
// [Asm]   r12 -- r93;
// [Asm]   r3 -- r30;
// [Asm]   r5 -- r83;
// [Asm]   r20 -- r76;
// [Asm]   r12 -- r28;
// [Asm]   r9 -- r28;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r43;
// [Asm]   r6 -- r10;
// [Asm]   r18 -- r93;
// [Asm]   r27 -- r104;
// [Asm]   r3 -- r10;
// [Asm]   r5 -- r91;
// [Asm]   r4 -- r104;
// [Asm]   r4 -- r12;
// [Asm]   r4 -- r92;
// [Asm]   r4 -- r84;
// [Asm]   r1 -- r108;
// [Asm]   r5 -- r90;
// [Asm]   r1 -- r6;
// [Asm]   r7 -- r54;
// [Asm]   r2 -- r23;
// [Asm]   r52 -- r99;
// [Asm]   r6 -- r92;
// [Asm]   r5 -- r109;
// [Asm]   r5 -- r89;
// [Asm]   r4 -- r16;
// [Asm]   r7 -- r52;
// [Asm]   r6 -- r11;
// [Asm]   r6 -- r110;
// [Asm]   r29 -- r32;
// [Asm]   r4 -- r5;
// [Asm]   r29 -- r109;
// [Asm]   r4 -- r95;
// [Asm]   r6 -- r49;
// [Asm]   r49 -- r55;
// [Asm]   r12 -- r51;
// [Asm]   r5 -- r48;
// [Asm]   r1 -- r53;
// [Asm]   r18 -- r29;
// [Asm]   r11 -- r49;
// [Asm]   r5 -- r79;
// [Asm]   r51 -- r89;
// [Asm]   r3 -- r87;
// [Asm]   r1 -- r15;
// [Asm]   r3 -- r47;
// [Asm]   r2 -- r55;
// [Asm]   r4 -- r112;
// [Asm]   r4 -- r89;
// [Asm]   r16 -- r28;
// [Asm]   r6 -- r12;
// [Asm]   r49 -- r97;
// [Asm]   r6 -- r24;
// [Asm]   r9 -- r51;
// [Asm]   r23 -- r83;
// [Asm]   r6 -- r37;
// [Asm]   r5 -- r110;
// [Asm]   r10 -- r28;
// [Asm]   r9 -- r34;
// [Asm]   r49 -- r65;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r28 -- r105;
// [Asm]   r0 -- r8;
// [Asm]   r6 -- r28;
// [Asm]   r4 -- r85;
// [Asm]   r1 -- r59;
// [Asm]   r49 -- r51;
// [Asm]   r26 -- r30;
// [Asm]   r1 -- r74;
// [Asm]   r11 -- r50;
// [Asm]   r7 -- r47;
// [Asm]   r7 -- r11;
// [Asm]   r6 -- r67;
// [Asm]   r108 -- r109;
// [Asm]   r9 -- r37;
// [Asm]   r6 -- r90;
// [Asm]   r13 -- r53;
// [Asm]   r4 -- r47;
// [Asm]   r5 -- r115;
// [Asm]   r2 -- r100;
// [Asm]   r30 -- r106;
// [Asm]   r3 -- r36;
// [Asm]   r12 -- r27;
// [Asm]   r3 -- r54;
// [Asm]   r3 -- r93;
// [Asm]   r1 -- r3;
// [Asm]   r16 -- r48;
// [Asm]   r5 -- r30;
// [Asm]   r1 -- r92;
// [Asm]   r1 -- r82;
// [Asm]   r49 -- r50;
// [Asm]   r9 -- r50;
// [Asm]   r4 -- r52;
// [Asm]   r47 -- r53;
// [Asm]   r4 -- r19;
// [Asm]   r2 -- r64;
// [Asm]   r27 -- r74;
// [Asm]   r52 -- r53;
// [Asm]   r14 -- r51;
// [Asm]   r4 -- r53;
// [Asm]   r52 -- r65;
// [Asm]   r4 -- r75;
// [Asm]   r48 -- r53;
// [Asm]   r81 -- r82;
// [Asm]   r11 -- r76;
// [Asm]   r4 -- r68;
// [Asm]   r6 -- r73;
// [Asm]   r3 -- r98;
// [Asm]   r15 -- r50;
// [Asm]   r6 -- r35;
// [Asm]   r1 -- r86;
// [Asm]   r5 -- r72;
// [Asm]   r5 -- r17;
// [Asm]   r3 -- r42;
// [Asm]   r5 -- r59;
// [Asm]   r51 -- r55;
// [Asm]   r48 -- r98;
// [Asm]   r5 -- r18;
// [Asm]   r4 -- r103;
// [Asm]   r5 -- r47;
// [Asm]   r2 -- r99;
// [Asm]   r6 -- r115;
// [Asm]   r3 -- r37;
// [Asm]   r9 -- r17;
// [Asm]   r1 -- r33;
// [Asm]   r1 -- r16;
// [Asm]   r9 -- r49;
// [Asm]   r3 -- r68;
// [Asm]   r6 -- r85;
// [Asm]   r5 -- r31;
// [Asm]   r18 -- r28;
// [Asm]   r28 -- r39;
// [Asm]   r16 -- r29;
// [Asm]   r5 -- r62;
// [Asm]   r3 -- r78;
// [Asm]   r2 -- r6;
// [Asm]   r51 -- r88;
// [Asm]   r6 -- r80;
// [Asm]   r53 -- r87;
// [Asm]   r6 -- r91;
// [Asm]   r17 -- r49;
// [Asm]   r11 -- r13;
// [Asm]   r102 -- r105;
// [Asm]   r4 -- r67;
// [Asm]   r0 -- r9;
// [Asm]   r4 -- r65;
// [Asm]   r103 -- r106;
// [Asm]   r5 -- r78;
// [Asm]   r1 -- r40;
// [Asm]   r2 -- r12;
// [Asm]   r5 -- r67;
// [Asm]   r6 -- r117;
// [Asm]   r6 -- r83;
// [Asm]   r20 -- r50;
// [Asm]   r51 -- r90;
// [Asm]   r48 -- r96;
// [Asm]   r11 -- r93;
// [Asm]   r6 -- r64;
// [Asm]   r15 -- r52;
// [Asm]   r7 -- r80;
// [Asm]   r5 -- r66;
// [Asm]   r6 -- r65;
// [Asm]   r0 -- r4;
// [Asm]   r27 -- r103;
// [Asm]   r28 -- r38;
// [Asm]   r49 -- r56;
// [Asm]   r27 -- r31;
// [Asm]   r6 -- r76;
// [Asm]   r50 -- r99;
// [Asm]   r27 -- r108;
// [Asm]   r3 -- r19;
// [Asm]   r53 -- r54;
// [Asm]   r50 -- r56;
// [Asm]   r20 -- r53;
// [Asm]   r1 -- r8;
// [Asm]   r17 -- r29;
// [Asm]   r3 -- r101;
// [Asm]   r17 -- r48;
// [Asm]   r3 -- r38;
// [Asm]   r1 -- r47;
// [Asm]   r5 -- r71;
// [Asm]   r2 -- r90;
// [Asm]   r47 -- r48;
// [Asm]   r30 -- r32;
// [Asm]   r51 -- r96;
// [Asm]   r6 -- r30;
// [Asm]   r1 -- r22;
// [Asm]   r20 -- r29;
// [Asm]   r2 -- r52;
// [Asm]   r11 -- r12;
// [Asm]   r27 -- r116;
// [Asm]   r1 -- r13;
// [Asm]   r10 -- r48;
// [Asm]   r1 -- r104;
// [Asm]   r7 -- r48;
// [Asm]   r7 -- r49;
// [Asm]   r6 -- r99;
// [Asm]   r6 -- r20;
// [Asm]   r9 -- r52;
// [Asm]   r3 -- r50;
// [Asm]   r7 -- r17;
// [Asm]   r14 -- r50;
// [Asm]   r19 -- r28;
// [Asm]   r20 -- r48;
// [Asm]   r27 -- r38;
// [Asm]   r3 -- r21;
// [Asm]   r21 -- r30;
// [Asm]   r5 -- r9;
// [Asm]   r49 -- r52;
// [Asm]   r12 -- r76;
// [Asm]   r4 -- r32;
// [Asm]   r1 -- r29;
// [Asm]   r3 -- r117;
// [Asm]   r83 -- r84;
// [Asm]   r5 -- r45;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r65 -- r80;
// [Asm]   r5 -- r56;
// [Asm]   r5 -- r61;
// [Asm]   r1 -- r61;
// [Asm]   r8 -- r10;
// [Asm]   r2 -- r17;
// [Asm]   r3 -- r73;
// [Asm]   r4 -- r82;
// [Asm]   r27 -- r33;
// [Asm]   r15 -- r48;
// [Asm]   r7 -- r87;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r93;
// [Asm]   r9 -- r13;
// [Asm]   r16 -- r49;
// [Asm]   r1 -- r100;
// [Asm]   r2 -- r20;
// [Asm]   r1 -- r76;
// [Asm]   r5 -- r41;
// [Asm]   r7 -- r21;
// [Asm]   r1 -- r71;
// [Asm]   r14 -- r27;
// [Asm]   r3 -- r43;
// [Asm]   r9 -- r27;
// [Asm]   r21 -- r53;
// [Asm]   r49 -- r100;
// [Asm]   r1 -- r7;
// [Asm]   r18 -- r76;
// [Asm]   r1 -- r56;
// [Asm]   r3 -- r60;
// [Asm]   r3 -- r79;
// [Asm]   r3 -- r108;
// [Asm]   r1 -- r63;
// [Asm]   r13 -- r49;
// [Asm]   r5 -- r96;
// [Asm]   r6 -- r29;
// [Asm]   r7 -- r53;
// [Asm]   r5 -- r49;
// [Asm]   r6 -- r107;
// [Asm]   r5 -- r99;
// [Asm]   r1 -- r91;
// [Asm]   r4 -- r27;
// [Asm]   r4 -- r42;
// [Asm]   r50 -- r97;
// [Asm]   r29 -- r36;
// [Asm]   r103 -- r104;
// [Asm]   r27 -- r30;
// [Asm]   r4 -- r21;
// [Asm]   r29 -- r38;
// [Asm]   r6 -- r13;
// [Asm]   r3 -- r76;
// [Asm]   r7 -- r90;
// [Asm]   r27 -- r72;
// [Asm]   r3 -- r96;
// [Asm]   r28 -- r106;
// [Asm]   r3 -- r4;
// [Asm]   r19 -- r27;
// [Asm]   r5 -- r75;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r6 -- r93;
// [Asm]   r21 -- r27;
// [Asm]   r53 -- r92;
// [Asm]   r1 -- r116;
// [Asm]   r4 -- r116;
// [Asm]   r5 -- r108;
// [Asm]   r2 -- r8;
// [Asm]   r13 -- r51;
// [Asm]   r6 -- r103;
// [Asm]   r50 -- r52;
// [Asm]   r70 -- r71;
// [Asm]   r6 -- r31;
// [Asm]   r6 -- r78;
// [Asm]   r2 -- r117;
// [Asm]   r10 -- r30;
// [Asm]   r6 -- r45;
// [Asm]   r48 -- r55;
// [Asm]   r9 -- r10;
// [Asm]   r52 -- r89;
// [Asm]   r5 -- r14;
// [Asm]   r52 -- r66;
// [Asm]   r1 -- r44;
// [Asm]   r3 -- r61;
// [Asm]   r4 -- r94;
// [Asm]   r7 -- r8;
// [Asm]   r13 -- r29;
// [Asm]   r6 -- r61;
// [Asm]   r6 -- r97;
// [Asm]   r4 -- r9;
// [Asm]   r16 -- r27;
// [Asm]   r3 -- r88;
// [Asm]   r5 -- r34;
// [Asm]   r29 -- r35;
// [Asm]   r36 -- r37;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r52 -- r96;
// [Asm]   r5 -- r100;
// [Asm]   r15 -- r29;
// [Asm]   r15 -- r49;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r18;
// [Asm]   r4 -- r37;
// [Asm]   r9 -- r96;
// [Asm]   r101 -- r102;
// [Asm]   r7 -- r89;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r32;
// [Asm]   r7 -- r13;
// [Asm]   r10 -- r76;
// [Asm]   r28 -- r107;
// [Asm]   r3 -- r90;
// [Asm]   r16 -- r53;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r26;
// [Asm]   r1 -- r101;
// [Asm]   r3 -- r77;
// [Asm]   r4 -- r70;
// [Asm]   r52 -- r56;
// [Asm]   r33 -- r34;
// [Asm]   r21 -- r52;
// [Asm]   r1 -- r96;
// [Asm]   r4 -- r46;
// [Asm]   r4 -- r45;
// [Asm]   r19 -- r49;
// [Asm]   r48 -- r97;
// [Asm]   r5 -- r37;
// [Asm]   r29 -- r37;
// [Asm]   r2 -- r66;
// [Asm]   r3 -- r72;
// [Asm]   r28 -- r35;
// [Asm]   r17 -- r53;
// [Asm]   r2 -- r21;
// [Asm]   r3 -- r41;
// [Asm]   r21 -- r51;
// [Asm]   r5 -- r102;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r29 -- r34;
// [Asm]   r27 -- r109;
// [Asm]   r3 -- r59;
// [Asm]   r26 -- r29;
// [Asm]   r5 -- r27;
// [Asm]   r12 -- r48;
// [Asm]   r16 -- r93;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r26;
// [Asm]   r2 -- r19;
// [Asm]   r27 -- r101;
// [Asm]   r14 -- r48;
// [Asm]   r4 -- r61;
// [Asm]   r13 -- r27;
// [Asm]   r5 -- r15;
// [Asm]   comment = "0:v81-> 1:v16-> 2:v5-> 3:v18-> 4:zero-> 5:v17-> 6:s11-> 7:v9-> 8:v82-> 9:a0-> 10:a1-> 11:a2-> 12:a3-> 13:a4-> 48:v71-> 51:v75-> 49:v73-> 50:v72-> 52:v74-> 53:v76-> 14:a5-> 15:a6-> 16:a7-> 17:t0-> 18:t1-> 27:v25-> 28:v13-> 29:v36-> 30:v34-> 19:t2-> 20:t3-> 21:t4-> 76:v65-> 93:v91-> 96:v102-> 47:v127-> 54:v128-> 55:v96-> 56:v97-> 66:v100-> 87:v109-> 88:v110-> 92:v77-> 97:v103-> 98:v105-> 99:v106-> 89:v112-> 90:v99-> 100:v108-> 31:v46-> 34:v49-> 37:v52-> 65:v68-> 26:v45-> 33:v48-> 36:v51-> 32:v47-> 35:v50-> 38:v53-> 102:v22-> 103:v32-> 106:v174-> 104:v177-> 105:v33-> 107:v35-> 108:v37-> 109:v171-> 80:v144-> 101:v179-> 116:v185-> 22:v83-> 39:v54-> 42:v63-> 64:v80-> 110:v39-> 112:v189-> 113:v23-> 114:v187-> 115:v24-> 23:v84-> 24:v85-> 25:v136-> 40:v55-> 43:v15-> 59:v11-> 60:v153-> 61:v10-> 67:v7-> 72:v27-> 74:v8-> 75:v182-> 77:v66-> 81:v12-> 82:v167-> 83:v6-> 84:v134-> 91:v14-> 111:v40-> 117:v79-> 41:v90-> 44:v59-> 45:v19-> 46:v193-> 62:v44-> 63:v61-> 68:v31-> 73:v60-> 78:v146-> 79:v147-> 85:v89-> 86:v62-> 94:v93-> 69:v2-> 70:v3-> 71:v4-> 95:v94-> 57:v113-> 58:v114"
// [Asm]   comment = "v81<-a1;v193<-a1;v48<-a0;v11<-a0;v65<-s1;v45<-a0;v62<-a0;v59<-a0;v76<-s1;v97<-a1;v40<-a0;v17<-s3;v128<-a0;v85<-a1;v15<-a0;v110<-a0;v144<-a1;v46<-a2;v54<-a0;v106<-a0;v74<-s2;v68<-a0;v147<-a0;v10<-a0;v23<-a1;v84<-a0;v18<-s2;v37<-a0;v167<-a1;v7<-a0;v182<-a1;v66<-a0;v25<-s1;v44<-a0;v55<-a0;v39<-a0;v114<-a0;v49<-a2;v33<-a2;v6<-a1;v32<-a1;v75<-s6;v102<-a1;v146<-a0;v96<-a0;v153<-a1;v60<-a0;v91<-s1;v53<-a0;v27<-a0;v177<-a2;v185<-a1;v109<-a0;v108<-a0;v89<-a0;v127<-a0;v63<-a1;v79<-a0;v94<-a0;v36<-s5;v50<-a0;v9<-s4;v187<-a2;v80<-a0;v82<-a2;v51<-a0;v189<-a1;v100<-a0;v47<-a0;v73<-s0;v24<-a1;v113<-a0;v8<-a0;v31<-a0;v105<-a0;v14<-a1;v3<-a1;v71<-s5;v52<-a2;v22<-a0;v174<-a2;v171<-a1;v16<-s0;v90<-a0;v13<-s4;v4<-a2;v83<-a0;v2<-a0;v134<-a0;v112<-a0;v72<-s4;v34<-s6;v19<-a0;v77<-a0;v35<-a1;v136<-a2;v61<-a0;v5<-s1;v99<-a0;v103<-a0;v12<-a0;v93<-a0;v179<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of quick_sort.212"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   lw v81, 0(v9) ->   lw a1, 0(s4)
// [Asm] subst   addi v82, v18, -1 ->   addi a2, s2, -1
// [Asm] subst   mv a0, v16 ->   mv a0, s0
// [Asm] subst   call swap.202 ->   call swap.202
// [Asm] subst   lw v84, 0(v9) ->   lw a0, 0(s4)
// [Asm] subst   lw v85, 0(v5) ->   lw a1, 0(s1)
// [Asm] subst   li v136, 1 ->   li a2, 1
// [Asm] subst   bne v85, v136, .quick_sort.212_13 ->   bne a1, a2, .quick_sort.212_13
// [Asm] subst   addi v45, v34, -1 ->   addi a0, s6, -1
// [Asm] subst   addi v46, v34, 1 ->   addi a2, s6, 1
// [Asm] subst   mv a1, v34 ->   mv a1, s6
// [Asm] subst   mv a3, v16 ->   mv a3, s0
// [Asm] subst   mv a4, v13 ->   mv a4, s4
// [Asm] subst   call sort_3.211 ->   call sort_3.211
// [Asm] subst   addi v48, v25, -1 ->   addi a0, s1, -1
// [Asm] subst   addi v49, v25, 1 ->   addi a2, s1, 1
// [Asm] subst   mv a1, v25 ->   mv a1, s1
// [Asm] subst   mv a3, v16 ->   mv a3, s0
// [Asm] subst   mv a4, v13 ->   mv a4, s4
// [Asm] subst   call sort_3.211 ->   call sort_3.211
// [Asm] subst   addi v51, v36, -1 ->   addi a0, s5, -1
// [Asm] subst   addi v52, v36, 1 ->   addi a2, s5, 1
// [Asm] subst   mv a1, v36 ->   mv a1, s5
// [Asm] subst   mv a3, v16 ->   mv a3, s0
// [Asm] subst   mv a4, v13 ->   mv a4, s4
// [Asm] subst   call sort_3.211 ->   call sort_3.211
// [Asm] subst   mv a0, v34 ->   mv a0, s6
// [Asm] subst   mv a1, v25 ->   mv a1, s1
// [Asm] subst   mv a2, v36 ->   mv a2, s5
// [Asm] subst   mv a3, v16 ->   mv a3, s0
// [Asm] subst   mv a4, v13 ->   mv a4, s4
// [Asm] subst   call sort_3.211 ->   call sort_3.211
// [Asm] subst   lw v55, 0(v13) ->   lw a0, 0(s4)
// [Asm] subst   bne v55, zero, .quick_sort.212_53 ->   bne a0, zero, .quick_sort.212_53
// [Asm] subst   lw v63, 0(v62) ->   lw a1, 0(a0)
// [Asm] subst   addi v15, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v15, -8 ->   andi s11, a0, -8
// [Asm] subst   sw v25, 0(v15) ->   sw s1, 0(a0)
// [Asm] subst   sw zero, 4(v15) ->   sw zero, 4(a0)
// [Asm] subst   j .quick_sort.212_54 ->   j .quick_sort.212_54
// [Asm] subst   sub v19, v18, v17 ->   sub a0, s2, s3
// [Asm] subst   li v193, 16 ->   li a1, 16
// [Asm] subst   blt v193, v19, .quick_sort.212_2 ->   blt a1, a0, .quick_sort.212_2
// [Asm] subst   slliw v127, v71, 2 ->   slliw a0, s5, 2
// [Asm] subst   add v128, v73, v127 ->   add a0, s0, a0
// [Asm] subst   lw v96, 0(v128) ->   lw a0, 0(a0)
// [Asm] subst   addi v97, v75, -1 ->   addi a1, s6, -1
// [Asm] subst   blt v97, v96, .quick_sort.212_30 ->   blt a1, a0, .quick_sort.212_30
// [Asm] subst   mv a0, v16 ->   mv a0, s0
// [Asm] subst   mv a1, v17 ->   mv a1, s3
// [Asm] subst   mv a2, v18 ->   mv a2, s2
// [Asm] subst   call insertion_sort.204 ->   call insertion_sort.204
// [Asm] subst   addi v11, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v11, -8 ->   andi s11, a0, -8
// [Asm] subst   sw v25, 0(v11) ->   sw s1, 0(a0)
// [Asm] subst   li v153, 1 ->   li a1, 1
// [Asm] subst   sw v153, 4(v11) ->   sw a1, 4(a0)
// [Asm] subst   addi v10, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v10, -8 ->   andi s11, a0, -8
// [Asm] subst   sw v25, 0(v10) ->   sw s1, 0(a0)
// [Asm] subst   sw zero, 4(v10) ->   sw zero, 4(a0)
// [Asm] subst   j .quick_sort.212_57 ->   j .quick_sort.212_57
// [Asm] subst   j .quick_sort.212_62 ->   j .quick_sort.212_62
// [Asm] subst   mv v71, v17 ->   mv s5, s3
// [Asm] subst   mv v75, v68 ->   mv s6, a0
// [Asm] subst   lw v100, 0(v72) ->   lw a0, 0(s4)
// [Asm] subst   beq v100, v71, .quick_sort.212_31 ->   beq a0, s5, .quick_sort.212_31
// [Asm] subst   addi v7, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v7, -8 ->   andi s11, a0, -8
// [Asm] subst   sw v25, 0(v7) ->   sw s1, 0(a0)
// [Asm] subst   sw zero, 4(v7) ->   sw zero, 4(a0)
// [Asm] subst   j .quick_sort.212_61 ->   j .quick_sort.212_61
// [Asm] subst   mv v16, v2 ->   mv s0, a0
// [Asm] subst   mv v17, v3 ->   mv s3, a1
// [Asm] subst   mv v18, v4 ->   mv s2, a2
// [Asm] subst   lw v27, 0(v13) ->   lw a0, 0(s4)
// [Asm] subst   bne v27, zero, .quick_sort.212_60 ->   bne a0, zero, .quick_sort.212_60
// [Asm] subst   j .quick_sort.212_58 ->   j .quick_sort.212_58
// [Asm] subst   addi v8, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v8, -8 ->   andi s11, a0, -8
// [Asm] subst   sw v25, 0(v8) ->   sw s1, 0(a0)
// [Asm] subst   li v182, 1 ->   li a1, 1
// [Asm] subst   sw v182, 4(v8) ->   sw a1, 4(a0)
// [Asm] subst   addi v65, v18, -1 ->   addi s1, s2, -1
// [Asm] subst   mv a0, v16 ->   mv a0, s0
// [Asm] subst   mv a2, v65 ->   mv a2, s1
// [Asm] subst   call swap.202 ->   call swap.202
// [Asm] subst   slliw v146, v65, 2 ->   slliw a0, s1, 2
// [Asm] subst   add v147, v16, v146 ->   add a0, s0, a0
// [Asm] subst   lw v68, 0(v147) ->   lw a0, 0(a0)
// [Asm] subst   addi v9, s11, -4 ->   addi s4, s11, -4
// [Asm] subst   andi s11, v9, -8 ->   andi s11, s4, -8
// [Asm] subst   sw v17, 0(v9) ->   sw s3, 0(s4)
// [Asm] subst   addi v5, s11, -4 ->   addi s1, s11, -4
// [Asm] subst   andi s11, v5, -8 ->   andi s11, s1, -8
// [Asm] subst   li v144, 1 ->   li a1, 1
// [Asm] subst   sw v144, 0(v5) ->   sw a1, 0(s1)
// [Asm] subst   addi v12, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v12, -8 ->   andi s11, a0, -8
// [Asm] subst   sw v25, 0(v12) ->   sw s1, 0(a0)
// [Asm] subst   li v167, 1 ->   li a1, 1
// [Asm] subst   sw v167, 4(v12) ->   sw a1, 4(a0)
// [Asm] subst   addi v6, s11, -8 ->   addi a1, s11, -8
// [Asm] subst   andi s11, v6, -8 ->   andi s11, a1, -8
// [Asm] subst   sw v84, 0(v6) ->   sw a0, 0(a1)
// [Asm] subst   li v134, 1 ->   li a0, 1
// [Asm] subst   sw v134, 4(v6) ->   sw a0, 4(a1)
// [Asm] subst   mv v89, v6 ->   mv a0, a1
// [Asm] subst   lw v109, 0(v72) ->   lw a0, 0(s4)
// [Asm] subst   addi v110, v109, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v110, 0(v72) ->   sw a0, 0(s4)
// [Asm] subst   addi v112, v71, 1 ->   addi a0, s5, 1
// [Asm] subst   mv v71, v112 ->   mv s5, a0
// [Asm] subst   j .quick_sort.212_26 ->   j .quick_sort.212_26
// [Asm] subst   addi v99, v71, 1 ->   addi a0, s5, 1
// [Asm] subst   mv v71, v99 ->   mv s5, a0
// [Asm] subst   j .quick_sort.212_26 ->   j .quick_sort.212_26
// [Asm] subst   addi v14, s11, -8 ->   addi a1, s11, -8
// [Asm] subst   andi s11, v14, -8 ->   andi s11, a1, -8
// [Asm] subst   sw v84, 0(v14) ->   sw a0, 0(a1)
// [Asm] subst   sw zero, 4(v14) ->   sw zero, 4(a1)
// [Asm] subst   mv v89, v14 ->   mv a0, a1
// [Asm] subst   j .quick_sort.212_14 ->   j .quick_sort.212_14
// [Asm] subst   addi v77, v74, -2 ->   addi a0, s2, -2
// [Asm] subst   blt v77, v71, .quick_sort.212_28 ->   blt a0, s5, .quick_sort.212_28
// [Asm] subst   lw v91, 0(v90) ->   lw s1, 0(a0)
// [Asm] subst   mv a0, v16 ->   mv a0, s0
// [Asm] subst   mv a1, v17 ->   mv a1, s3
// [Asm] subst   mv a2, v91 ->   mv a2, s1
// [Asm] subst   call quick_sort.212 ->   call quick_sort.212
// [Asm] subst   addi v94, v91, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v17, v94 ->   mv s3, a0
// [Asm] subst   j .quick_sort.212_0 ->   j .quick_sort.212_0
// [Asm] subst   ret ->   ret
// [Asm] subst   lw v102, 0(v72) ->   lw a1, 0(s4)
// [Asm] subst   mv a0, v73 ->   mv a0, s0
// [Asm] subst   mv a2, v71 ->   mv a2, s5
// [Asm] subst   call swap.202 ->   call swap.202
// [Asm] subst   sw zero, 0(v76) ->   sw zero, 0(s1)
// [Asm] subst   lw v105, 0(v72) ->   lw a0, 0(s4)
// [Asm] subst   addi v106, v105, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v106, 0(v72) ->   sw a0, 0(s4)
// [Asm] subst   addi v108, v71, 1 ->   addi a0, s5, 1
// [Asm] subst   mv v71, v108 ->   mv s5, a0
// [Asm] subst   j .quick_sort.212_26 ->   j .quick_sort.212_26
// [Asm] subst   li v179, 4 ->   li a1, 4
// [Asm] subst   div v32, v22, v179 ->   div a1, a0, a1
// [Asm] subst   li v177, 1 ->   li a2, 1
// [Asm] subst   mul v33, v32, v177 ->   mul a2, a1, a2
// [Asm] subst   add v34, v17, v33 ->   add s6, s3, a2
// [Asm] subst   li v174, 3 ->   li a2, 3
// [Asm] subst   mul v35, v32, v174 ->   mul a1, a1, a2
// [Asm] subst   add v36, v17, v35 ->   add s5, s3, a1
// [Asm] subst   addi v37, v22, -1 ->   addi a0, a0, -1
// [Asm] subst   li v171, 50 ->   li a1, 50
// [Asm] subst   blt v37, v171, .quick_sort.212_51 ->   blt a0, a1, .quick_sort.212_51
// [Asm] subst   mv a0, v34 ->   mv a0, s6
// [Asm] subst   mv a1, v25 ->   mv a1, s1
// [Asm] subst   mv a2, v36 ->   mv a2, s5
// [Asm] subst   mv a3, v16 ->   mv a3, s0
// [Asm] subst   mv a4, v13 ->   mv a4, s4
// [Asm] subst   call sort_3.211 ->   call sort_3.211
// [Asm] subst   lw v40, 0(v13) ->   lw a0, 0(s4)
// [Asm] subst   bne v40, zero, .quick_sort.212_56 ->   bne a0, zero, .quick_sort.212_56
// [Asm] subst   addi v13, s11, -4 ->   addi s4, s11, -4
// [Asm] subst   andi s11, v13, -8 ->   andi s11, s4, -8
// [Asm] subst   sw zero, 0(v13) ->   sw zero, 0(s4)
// [Asm] subst   sub v22, v18, v17 ->   sub a0, s2, s3
// [Asm] subst   li v189, 4 ->   li a1, 4
// [Asm] subst   div v23, v22, v189 ->   div a1, a0, a1
// [Asm] subst   li v187, 2 ->   li a2, 2
// [Asm] subst   mul v24, v23, v187 ->   mul a1, a1, a2
// [Asm] subst   add v25, v17, v24 ->   add s1, s3, a1
// [Asm] subst   li v185, 8 ->   li a1, 8
// [Asm] subst   blt v22, v185, .quick_sort.212_49 ->   blt a0, a1, .quick_sort.212_49
// [Asm] subst   mv v79, zero ->   mv a0, zero
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v13, FnParam(fref=f11, fpref=$f.1) -> v3, FnParam(fref=f11, fpref=$f.0) -> v2, Self(fref=f11) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v10, Insn(iref=%2) -> v11, Insn(iref=%1) -> v9, FnParam(fref=f11, fpref=$f.2) -> v4, BlockParam(bref=b0, bpref=$b.0) -> v5, BlockParam(bref=b0, bpref=$b.1) -> v6, BlockParam(bref=b0, bpref=$b.2) -> v7, Insn(iref=%5) -> v12, Insn(iref=%0) -> v8, Insn(iref=%4) -> v14
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, v5, zero, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v6, v5, zero, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v6, v5, v16, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v11, v6, v5, v17, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v6, v14, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v14]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v6]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move_origin: [v3]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v4]
// [Asm] defined: v7 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [zero]
// [Asm] defined: v10 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of input.214"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="v14 ← a0", color=green];
// [Asm]   r23 [label="v4 ← a2", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="a5", color=blue];
// [Asm]   r6 [label="a2", color=blue];
// [Asm]   r13 [label="t1", color=blue];
// [Asm]   r4 [label="v7 ← s2", color=green];
// [Asm]   r1 [label="v6 ← s0", color=green];
// [Asm]   r11 [label="a7", color=blue];
// [Asm]   r7 [label="a3", color=blue];
// [Asm]   r10 [label="a6", color=blue];
// [Asm]   r22 [label="v3 ← a1", color=green];
// [Asm]   r14 [label="t2", color=blue];
// [Asm]   r8 [label="a4", color=blue];
// [Asm]   r5 [label="a1", color=blue];
// [Asm]   r15 [label="t3", color=blue];
// [Asm]   r24 [label="v10 ← a0", color=green];
// [Asm]   r25 [label="v8 ← a0", color=green];
// [Asm]   r2 [label="v5 ← s1", color=green];
// [Asm]   r16 [label="t4", color=blue];
// [Asm]   r18 [label="v16 ← a1", color=green];
// [Asm]   r19 [label="v17 ← a1", color=green];
// [Asm]   r21 [label="v2 ← a0", color=green];
// [Asm]   r17 [label="v11 ← a0", color=green];
// [Asm]   r12 [label="t0", color=blue];
// [Asm]   r4 -- r9;
// [Asm]   r4 -- r19;
// [Asm]   r6 -- r21;
// [Asm]   r4 -- r13;
// [Asm]   r0 -- r15;
// [Asm]   r17 -- r18;
// [Asm]   r3 -- r19;
// [Asm]   r0 -- r13;
// [Asm]   r4 -- r16;
// [Asm]   r5 -- r21;
// [Asm]   r3 -- r25;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r16;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r23;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r0 -- r14;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r1 -- r15;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r20;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r18;
// [Asm]   r0 -- r16;
// [Asm]   r3 -- r5;
// [Asm]   r17 -- r19;
// [Asm]   r21 -- r23;
// [Asm]   r3 -- r22;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r8;
// [Asm]   r3 -- r13;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r22 -- r23;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r25;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r0 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r25;
// [Asm]   r4 -- r8;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r4 -- r17;
// [Asm]   r1 -- r6;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r21 -- r22;
// [Asm]   r2 -- r9;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r0 -- r7;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r23;
// [Asm]   comment = "0:a0-> 1:v6-> 2:v5-> 3:zero-> 4:v7-> 5:a1-> 6:a2-> 7:a3-> 8:a4-> 9:a5-> 10:a6-> 11:a7-> 12:t0-> 13:t1-> 14:t2-> 15:t3-> 16:t4-> 17:v11-> 18:v16-> 19:v17-> 25:v8-> 20:v14-> 21:v2-> 22:v3-> 23:v4-> 24:v10"
// [Asm]   comment = "v14<-a0;v4<-a2;v7<-s2;v6<-s0;v3<-a1;v10<-a0;v8<-a0;v5<-s1;v16<-a1;v17<-a1;v2<-a0;v11<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of input.214"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call minimbt_read_int ->   call minimbt_read_int
// [Asm] subst   slliw v16, v5, 2 ->   slliw a1, s1, 2
// [Asm] subst   add v17, v6, v16 ->   add a1, s0, a1
// [Asm] subst   sw v11, 0(v17) ->   sw a0, 0(a1)
// [Asm] subst   addi v14, v5, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v5, v14 ->   mv s1, a0
// [Asm] subst   j .input.214_0 ->   j .input.214_0
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v10, zero ->   mv a0, zero
// [Asm] subst   mv v5, v2 ->   mv s1, a0
// [Asm] subst   mv v6, v3 ->   mv s0, a1
// [Asm] subst   mv v7, v4 ->   mv s2, a2
// [Asm] subst   addi v8, v7, -1 ->   addi a0, s2, -1
// [Asm] subst   blt v8, v5, .input.214_2 ->   blt a0, s1, .input.214_2
// [Asm] pre_assigned_registers: FnParam(fref=f3, fpref=$f.2) -> v4, BlockParam(bref=b12, bpref=$b.0) -> v25, Insn(iref=%15) -> v18, BlockParam(bref=b7, bpref=$b.2) -> v15, BlockParam(bref=b7, bpref=$b.1) -> v14, BlockParam(bref=b7, bpref=$b.0) -> v13, BlockParam(bref=b3, bpref=$b.0) -> v12, Insn(iref=%9) -> v23, Insn(iref=%8) -> v22, Insn(iref=%10) -> v24, BlockParam(bref=b0, bpref=$b.3) -> v9, FnParam(fref=f3, fpref=$f.3) -> v5, BlockParam(bref=b0, bpref=$b.0) -> v6, Insn(iref=%14) -> v21, BlockParam(bref=b0, bpref=$b.1) -> v7, FnParam(fref=f3, fpref=$f.0) -> v2, BlockParam(bref=b0, bpref=$b.2) -> v8, Insn(iref=%5) -> v17, Self(fref=f3) -> v0, Insn(iref=%0) -> v10, Insn(iref=%4) -> v16, BlockParam(bref=b13, bpref=$b.0) -> v26, Insn(iref=%3) -> v28, Insn(iref=%7) -> v20, BlockParam(bref=b6, bpref=$b.0) -> v27, FnParam(fref=f3, fpref=$f.1) -> v3, Insn(iref=%1) -> v11, Insn(iref=%11) -> v29, Insn(iref=%6) -> v19, Insn(iref=%12) -> v30
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%6), Insn(iref=%9)])
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%7), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b7, bpref=$b.0), width=@32))
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%4), BlockParam(bref=b7, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Asm] defs: []
// [Asm] live_set: [a2, a1, a3, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, a3, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, a3, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, a3, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, zero, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v4, v6, v5, zero, v7]
// [Asm] move_origin: [v3]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v6, v5, zero, v8]
// [Asm] move_origin: [v4]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v5]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v10, zero, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: [v26]
// [Asm] live_set: [v7, v8, v6, v26, zero, v9]
// [Asm] move_origin: [v25]
// [Asm] defined: v26 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v8, v6, v26, zero, v9]
// [Asm] move_origin: []
// [Asm] defs: [v27]
// [Asm] live_set: [v7, v8, v6, zero, v9, v27]
// [Asm] move_origin: [v26]
// [Asm] defined: v27 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v14, v16, v13, zero, v8, v7, v6, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v14, v13, zero, v8, v7, v6, v15, v9]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v12]
// [Asm] move_origin: [zero]
// [Asm] defined: v12 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v7, v25, v6, zero, v9, v8]
// [Asm] move_origin: [zero]
// [Asm] defined: v25 is X
// [Asm] defs: [v29]
// [Asm] live_set: [v14, zero, v29, v13, v7, v8, v6, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: []
// [Asm] live_set: [v14, zero, v29, v13, v7, v8, v6, v15, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v14, zero, v29, a0, v13, v7, v8, v6, v15, v9]
// [Asm] move_origin: [v14]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v14, zero, v29, a0, v8, v7, a1, v6, v15, v9]
// [Asm] move_origin: [v13]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v14, zero, v29, a0, v8, v7, a2, a1, v6, v15, v9]
// [Asm] move_origin: [v29]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v14, zero, v29, a0, v7, v8, v6, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v30]
// [Asm] live_set: [v14, zero, v29, v8, v7, v6, v15, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v30 is X
// [Asm] defs: []
// [Asm] live_set: [v14, zero, v29, v8, v7, v6, v15, v9]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v14, v13, zero, v8, v7, v6, v15, v9]
// [Asm] move_origin: [v29]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v14, v13, zero, v8, v7, v6, v15, v9]
// [Asm] move_origin: [v14]
// [Asm] defs: []
// [Asm] live_set: [v14, v13, zero, v8, v7, v6, v15, v9]
// [Asm] move_origin: [v15]
// [Asm] defs: []
// [Asm] live_set: [v14, v13, zero, v8, v7, v6, v15, v9]
// [Asm] move_origin: []
// [Asm] defs: [v39]
// [Asm] live_set: [v14, v13, zero, v7, v8, v6, v15, v9, v39]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: [v40]
// [Asm] live_set: [v14, v13, zero, v7, v8, v6, v15, v9, v40]
// [Asm] move_origin: []
// [Asm] defined: v40 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v14, v13, zero, v7, v8, v19, v6, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v14, v13, zero, v20, v7, v8, v19, v6, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v14, v13, zero, v8, v7, v35, v19, v6, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v14, v13, zero, v8, v7, v36, v19, v6, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v14, v13, zero, v22, v8, v7, v19, v6, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v14, v13, zero, v23, v7, v8, v19, v6, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [v14, v13, zero, v8, v7, v6, v15, v9]
// [Asm] move_origin: []
// [Asm] defs: [v26]
// [Asm] live_set: [v7, v8, v6, v26, zero, v9]
// [Asm] move_origin: [zero]
// [Asm] defined: v26 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v7, v28, v9, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v28]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v8]
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v13, zero, v8, v7, v6, v9]
// [Asm] move_origin: [v6]
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v14, v13, zero, v8, v7, v6, v9]
// [Asm] move_origin: [v7]
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v14, v13, zero, v8, v7, v6, v15, v9]
// [Asm] move_origin: [v8]
// [Asm] defined: v15 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v12]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of f.206"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r38 [label="v36 ← a2", color=green];
// [Asm]   r33 [label="v39 ← a0", color=green];
// [Asm]   r9 [label="v7 ← s1", color=green];
// [Asm]   r26 [label="a7", color=blue];
// [Asm]   r6 [label="v4 ← a2", color=green];
// [Asm]   r13 [label="v26 ← a0", color=green];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r29 [label="t2", color=blue];
// [Asm]   r35 [label="v19 ← a0", color=green];
// [Asm]   r7 [label="v5 ← a3", color=green];
// [Asm]   r10 [label="v8 ← s2", color=green];
// [Asm]   r8 [label="v6 ← s0", color=green];
// [Asm]   r5 [label="v3 ← a1", color=green];
// [Asm]   r36 [label="v20 ← a2", color=green];
// [Asm]   r32 [label="v30 ← a0", color=green];
// [Asm]   r24 [label="a5", color=blue];
// [Asm]   r15 [label="v16 ← a0", color=green];
// [Asm]   r31 [label="t4", color=blue];
// [Asm]   r39 [label="v22 ← a2", color=green];
// [Asm]   r17 [label="v13 ← a1", color=green];
// [Asm]   r12 [label="v10 ← a0", color=green];
// [Asm]   r37 [label="v35 ← a2", color=green];
// [Asm]   r20 [label="v25 ← a0", color=green];
// [Asm]   r23 [label="a4", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r27 [label="t0", color=blue];
// [Asm]   r40 [label="v23 ← a2", color=green];
// [Asm]   r1 [label="a2", color=blue];
// [Asm]   r28 [label="t1", color=blue];
// [Asm]   r41 [label="v28 ← a0", color=green];
// [Asm]   r11 [label="v9 ← s3", color=green];
// [Asm]   r34 [label="v40 ← a0", color=green];
// [Asm]   r22 [label="a0", color=blue];
// [Asm]   r14 [label="v27 ← a0", color=green];
// [Asm]   r30 [label="t3", color=blue];
// [Asm]   r25 [label="a6", color=blue];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="v14 ← s1", color=green];
// [Asm]   r18 [label="v15 ← s2", color=green];
// [Asm]   r19 [label="v12 ← a0", color=green];
// [Asm]   r21 [label="v29 ← s4", color=green];
// [Asm]   r21 -- r24;
// [Asm]   r8 -- r31;
// [Asm]   r4 -- r34;
// [Asm]   r11 -- r35;
// [Asm]   r3 -- r16;
// [Asm]   r8 -- r36;
// [Asm]   r3 -- r6;
// [Asm]   r11 -- r14;
// [Asm]   r17 -- r35;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r9 -- r26;
// [Asm]   r18 -- r21;
// [Asm]   r9 -- r17;
// [Asm]   r11 -- r18;
// [Asm]   r1 -- r16;
// [Asm]   r18 -- r35;
// [Asm]   r10 -- r40;
// [Asm]   r3 -- r5;
// [Asm]   r17 -- r39;
// [Asm]   r18 -- r34;
// [Asm]   r4 -- r31;
// [Asm]   r8 -- r12;
// [Asm]   r9 -- r14;
// [Asm]   r0 -- r6;
// [Asm]   r18 -- r28;
// [Asm]   r3 -- r8;
// [Asm]   r8 -- r24;
// [Asm]   r8 -- r34;
// [Asm]   r16 -- r29;
// [Asm]   r1 -- r9;
// [Asm]   r16 -- r36;
// [Asm]   r22 -- r25;
// [Asm]   r5 -- r6;
// [Asm]   r8 -- r16;
// [Asm]   r11 -- r13;
// [Asm]   r10 -- r38;
// [Asm]   r10 -- r12;
// [Asm]   r16 -- r33;
// [Asm]   r10 -- r33;
// [Asm]   r35 -- r38;
// [Asm]   r16 -- r37;
// [Asm]   r9 -- r23;
// [Asm]   r9 -- r12;
// [Asm]   r22 -- r27;
// [Asm]   r8 -- r23;
// [Asm]   r10 -- r31;
// [Asm]   r10 -- r22;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r29;
// [Asm]   r0 -- r1;
// [Asm]   r9 -- r20;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r25;
// [Asm]   r18 -- r33;
// [Asm]   r35 -- r37;
// [Asm]   r11 -- r15;
// [Asm]   r18 -- r37;
// [Asm]   r16 -- r21;
// [Asm]   r2 -- r22;
// [Asm]   r8 -- r32;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r16 -- r24;
// [Asm]   r11 -- r36;
// [Asm]   r16 -- r38;
// [Asm]   r4 -- r14;
// [Asm]   r9 -- r39;
// [Asm]   r17 -- r34;
// [Asm]   r8 -- r30;
// [Asm]   r18 -- r24;
// [Asm]   r4 -- r13;
// [Asm]   r16 -- r30;
// [Asm]   r11 -- r20;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r8 -- r27;
// [Asm]   r16 -- r32;
// [Asm]   r21 -- r28;
// [Asm]   r9 -- r40;
// [Asm]   r21 -- r29;
// [Asm]   r8 -- r9;
// [Asm]   r11 -- r16;
// [Asm]   r1 -- r22;
// [Asm]   r11 -- r12;
// [Asm]   r22 -- r26;
// [Asm]   r18 -- r40;
// [Asm]   r10 -- r29;
// [Asm]   r11 -- r23;
// [Asm]   r9 -- r30;
// [Asm]   r11 -- r22;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r8 -- r20;
// [Asm]   r8 -- r25;
// [Asm]   r11 -- r37;
// [Asm]   r16 -- r18;
// [Asm]   r10 -- r16;
// [Asm]   r21 -- r23;
// [Asm]   r3 -- r22;
// [Asm]   r18 -- r39;
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r15;
// [Asm]   r3 -- r21;
// [Asm]   r21 -- r30;
// [Asm]   r0 -- r3;
// [Asm]   r8 -- r15;
// [Asm]   r4 -- r32;
// [Asm]   r22 -- r28;
// [Asm]   r9 -- r24;
// [Asm]   r10 -- r15;
// [Asm]   r16 -- r35;
// [Asm]   r8 -- r35;
// [Asm]   r8 -- r18;
// [Asm]   r9 -- r36;
// [Asm]   r11 -- r41;
// [Asm]   r10 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r4 -- r36;
// [Asm]   r8 -- r10;
// [Asm]   r11 -- r34;
// [Asm]   r4 -- r7;
// [Asm]   r8 -- r26;
// [Asm]   r10 -- r36;
// [Asm]   r2 -- r9;
// [Asm]   r10 -- r32;
// [Asm]   r17 -- r38;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r9 -- r13;
// [Asm]   r11 -- r28;
// [Asm]   r11 -- r29;
// [Asm]   r9 -- r21;
// [Asm]   r18 -- r23;
// [Asm]   r4 -- r38;
// [Asm]   r9 -- r25;
// [Asm]   r17 -- r21;
// [Asm]   r16 -- r25;
// [Asm]   r4 -- r41;
// [Asm]   r5 -- r8;
// [Asm]   r9 -- r27;
// [Asm]   r17 -- r40;
// [Asm]   r10 -- r26;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r18;
// [Asm]   r18 -- r25;
// [Asm]   r1 -- r10;
// [Asm]   r10 -- r13;
// [Asm]   r2 -- r10;
// [Asm]   r11 -- r31;
// [Asm]   r11 -- r32;
// [Asm]   r18 -- r27;
// [Asm]   r22 -- r31;
// [Asm]   r9 -- r31;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r27;
// [Asm]   r11 -- r24;
// [Asm]   r4 -- r22;
// [Asm]   r4 -- r40;
// [Asm]   r3 -- r18;
// [Asm]   r17 -- r36;
// [Asm]   r9 -- r41;
// [Asm]   r17 -- r33;
// [Asm]   r4 -- r35;
// [Asm]   r16 -- r17;
// [Asm]   r9 -- r18;
// [Asm]   r4 -- r21;
// [Asm]   r35 -- r39;
// [Asm]   r16 -- r34;
// [Asm]   r15 -- r18;
// [Asm]   r4 -- r33;
// [Asm]   r10 -- r20;
// [Asm]   r18 -- r26;
// [Asm]   r10 -- r37;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r9 -- r28;
// [Asm]   r1 -- r21;
// [Asm]   r8 -- r37;
// [Asm]   r21 -- r27;
// [Asm]   r4 -- r28;
// [Asm]   r7 -- r10;
// [Asm]   r21 -- r32;
// [Asm]   r17 -- r22;
// [Asm]   r18 -- r30;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r8 -- r39;
// [Asm]   r8 -- r29;
// [Asm]   r10 -- r30;
// [Asm]   r8 -- r22;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r8 -- r21;
// [Asm]   r9 -- r10;
// [Asm]   r8 -- r11;
// [Asm]   r18 -- r31;
// [Asm]   r16 -- r39;
// [Asm]   r10 -- r25;
// [Asm]   r21 -- r22;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r10 -- r35;
// [Asm]   r11 -- r30;
// [Asm]   r16 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r16 -- r22;
// [Asm]   r16 -- r27;
// [Asm]   r11 -- r25;
// [Asm]   r10 -- r17;
// [Asm]   r35 -- r36;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r16 -- r31;
// [Asm]   r17 -- r18;
// [Asm]   r4 -- r16;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r11 -- r40;
// [Asm]   r11 -- r17;
// [Asm]   r9 -- r35;
// [Asm]   r9 -- r15;
// [Asm]   r2 -- r18;
// [Asm]   r4 -- r37;
// [Asm]   r9 -- r29;
// [Asm]   r18 -- r29;
// [Asm]   r22 -- r29;
// [Asm]   r8 -- r38;
// [Asm]   r4 -- r30;
// [Asm]   r10 -- r41;
// [Asm]   r16 -- r40;
// [Asm]   r8 -- r33;
// [Asm]   r10 -- r27;
// [Asm]   r18 -- r22;
// [Asm]   r16 -- r26;
// [Asm]   r7 -- r9;
// [Asm]   r16 -- r28;
// [Asm]   r10 -- r34;
// [Asm]   r18 -- r36;
// [Asm]   r22 -- r24;
// [Asm]   r17 -- r37;
// [Asm]   r6 -- r8;
// [Asm]   r8 -- r28;
// [Asm]   r9 -- r22;
// [Asm]   r18 -- r32;
// [Asm]   r11 -- r33;
// [Asm]   r4 -- r11;
// [Asm]   r10 -- r28;
// [Asm]   r9 -- r34;
// [Asm]   r22 -- r30;
// [Asm]   r9 -- r38;
// [Asm]   r21 -- r31;
// [Asm]   r15 -- r17;
// [Asm]   r8 -- r13;
// [Asm]   r9 -- r33;
// [Asm]   r11 -- r39;
// [Asm]   r8 -- r40;
// [Asm]   r21 -- r25;
// [Asm]   r10 -- r23;
// [Asm]   r22 -- r23;
// [Asm]   r10 -- r39;
// [Asm]   r9 -- r37;
// [Asm]   r2 -- r21;
// [Asm]   r35 -- r40;
// [Asm]   r21 -- r26;
// [Asm]   r11 -- r26;
// [Asm]   r11 -- r38;
// [Asm]   r9 -- r32;
// [Asm]   r4 -- r39;
// [Asm]   r18 -- r38;
// [Asm]   r4 -- r17;
// [Asm]   r11 -- r27;
// [Asm]   r4 -- r26;
// [Asm]   r0 -- r7;
// [Asm]   r15 -- r16;
// [Asm]   r10 -- r21;
// [Asm]   r10 -- r24;
// [Asm]   r11 -- r21;
// [Asm]   r10 -- r14;
// [Asm]   comment = "0:v2-> 1:a2-> 2:a1-> 4:zero-> 5:v3-> 8:v6-> 3:a3-> 6:v4-> 9:v7-> 7:v5-> 10:v8-> 11:v9-> 21:v29-> 22:a0-> 16:v14-> 18:v15-> 17:v13-> 23:a4-> 24:a5-> 25:a6-> 26:a7-> 27:t0-> 28:t1-> 29:t2-> 30:t3-> 31:t4-> 15:v16-> 32:v30-> 33:v39-> 34:v40-> 35:v19-> 36:v20-> 37:v35-> 38:v36-> 39:v22-> 40:v23-> 12:v10-> 13:v26-> 14:v27-> 20:v25-> 41:v28-> 19:v12"
// [Asm]   comment = "v2<-a0;v36<-a2;v39<-a0;v7<-s1;v4<-a2;v26<-a0;v19<-a0;v5<-a3;v8<-s2;v6<-s0;v3<-a1;v20<-a2;v30<-a0;v16<-a0;v22<-a2;v13<-a1;v10<-a0;v35<-a2;v25<-a0;v23<-a2;v28<-a0;v9<-s3;v40<-a0;v27<-a0;v14<-s1;v15<-s2;v12<-a0;v29<-s4;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of f.206"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v6, v2 ->   mv s0, a0
// [Asm] subst   mv v7, v3 ->   mv s1, a1
// [Asm] subst   mv v8, v4 ->   mv s2, a2
// [Asm] subst   mv v9, v5 ->   mv s3, a3
// [Asm] subst   addi v10, v9, -1 ->   addi a0, s3, -1
// [Asm] subst   blt v10, v6, .f.206_2 ->   blt a0, s0, .f.206_2
// [Asm] subst   j .f.206_13 ->   j .f.206_13
// [Asm] subst   addi v16, v15, 1 ->   addi a0, s2, 1
// [Asm] subst   blt v13, v16, .f.206_9 ->   blt a1, a0, .f.206_9
// [Asm] subst   mv v12, zero ->   mv a0, zero
// [Asm] subst   mv v25, zero ->   mv a0, zero
// [Asm] subst   addi v29, v13, -1 ->   addi s4, a1, -1
// [Asm] subst   mv a0, v14 ->   mv a0, s1
// [Asm] subst   mv a2, v29 ->   mv a2, s4
// [Asm] subst   call swap.202 ->   call swap.202
// [Asm] subst   mv v13, v29 ->   mv a1, s4
// [Asm] subst   j .f.206_7 ->   j .f.206_7
// [Asm] subst   slliw v39, v13, 2 ->   slliw a0, a1, 2
// [Asm] subst   add v40, v14, v39 ->   add a0, s1, a0
// [Asm] subst   lw v19, 0(v40) ->   lw a0, 0(a0)
// [Asm] subst   addi v20, v13, -1 ->   addi a2, a1, -1
// [Asm] subst   slliw v35, v20, 2 ->   slliw a2, a2, 2
// [Asm] subst   add v36, v14, v35 ->   add a2, s1, a2
// [Asm] subst   lw v22, 0(v36) ->   lw a2, 0(a2)
// [Asm] subst   addi v23, v22, -1 ->   addi a2, a2, -1
// [Asm] subst   blt v23, v19, .f.206_11 ->   blt a2, a0, .f.206_11
// [Asm] subst   mv v26, zero ->   mv a0, zero
// [Asm] subst   addi v28, v6, 1 ->   addi a0, s0, 1
// [Asm] subst   mv v6, v28 ->   mv s0, a0
// [Asm] subst   j .f.206_0 ->   j .f.206_0
// [Asm] subst   mv v13, v6 ->   mv a1, s0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v11, FnParam(fref=f7, fpref=$f.1) -> v3, Insn(iref=%7) -> v15, FnParam(fref=f7, fpref=$f.2) -> v4, Self(fref=f7) -> v0, FnParam(fref=f7, fpref=$f.0) -> v2, BlockParam(bref=b3, bpref=$b.0) -> v16, Insn(iref=%2) -> v10, Insn(iref=%9) -> v8, Insn(iref=%1) -> v9, Insn(iref=%10) -> v6, FnParam(fref=f7, fpref=$f.3) -> v5, Insn(iref=%6) -> v14, Insn(iref=%5) -> v13, Insn(iref=%0) -> v7, Insn(iref=%4) -> v12
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%0), Insn(iref=%2)])
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=FnParam(fref=f7, fpref=$f.0), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=FnParam(fref=f7, fpref=$f.1), width=@32))
// [Asm] defs: []
// [Asm] live_set: [zero, a0, a2, a1, a3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, a2, a1, a3, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, zero, a2, a3, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, zero, v4, a3, v2]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v5, zero, v4, v2]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v3, v5, zero, v4, v24, v2]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v3, v25, v5, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v5, zero, v7, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v3, v5, v21, zero, v7, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v3, v5, zero, v22, v7, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v3, v5, zero, v7, v4, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v3, v5, v10, zero, v7, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v16]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v16]
// [Asm] move_origin: [zero]
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v16]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v5, zero, a0, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, a1, zero, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, v5, a1, zero, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v12]
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v5, zero, v13]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v14, v5, zero]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v16]
// [Asm] move_origin: [zero]
// [Asm] defined: v16 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of sort_2.210"];
// [Asm]   r0 [label="v2 ← a4", color=green];
// [Asm]   r20 [label="a7", color=blue];
// [Asm]   r23 [label="t2", color=blue];
// [Asm]   r3 [label="a1", color=blue];
// [Asm]   r9 [label="v25 ← a1", color=green];
// [Asm]   r26 [label="v12 ← a0", color=green];
// [Asm]   r27 [label="v13 ← a0", color=green];
// [Asm]   r6 [label="v4 ← a0", color=green];
// [Asm]   r13 [label="v9 ← a2", color=green];
// [Asm]   r4 [label="a3", color=blue];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r28 [label="v14 ← a0", color=green];
// [Asm]   r11 [label="v21 ← a2", color=green];
// [Asm]   r7 [label="v5 ← s0", color=green];
// [Asm]   r10 [label="v7 ← a1", color=green];
// [Asm]   r22 [label="t1", color=blue];
// [Asm]   r14 [label="v10 ← a2", color=green];
// [Asm]   r8 [label="v24 ← a1", color=green];
// [Asm]   r5 [label="v3 ← a5", color=green];
// [Asm]   r24 [label="t3", color=blue];
// [Asm]   r15 [label="a0", color=blue];
// [Asm]   r25 [label="t4", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r16 [label="v16 ← a0", color=green];
// [Asm]   r18 [label="a5", color=blue];
// [Asm]   r19 [label="a6", color=blue];
// [Asm]   r17 [label="a4", color=blue];
// [Asm]   r21 [label="t0", color=blue];
// [Asm]   r12 [label="v22 ← a2", color=green];
// [Asm]   r5 -- r12;
// [Asm]   r10 -- r14;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r0 -- r15;
// [Asm]   r0 -- r13;
// [Asm]   r6 -- r11;
// [Asm]   r1 -- r12;
// [Asm]   r7 -- r21;
// [Asm]   r1 -- r26;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r10;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r23;
// [Asm]   r7 -- r24;
// [Asm]   r15 -- r22;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r7 -- r25;
// [Asm]   r7 -- r26;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r22;
// [Asm]   r1 -- r10;
// [Asm]   r7 -- r13;
// [Asm]   r10 -- r13;
// [Asm]   r7 -- r20;
// [Asm]   r0 -- r14;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r7;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r11;
// [Asm]   r6 -- r12;
// [Asm]   r7 -- r27;
// [Asm]   r15 -- r25;
// [Asm]   r3 -- r5;
// [Asm]   r1 -- r28;
// [Asm]   r7 -- r28;
// [Asm]   r6 -- r8;
// [Asm]   r0 -- r6;
// [Asm]   r7 -- r17;
// [Asm]   r6 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r15 -- r18;
// [Asm]   r7 -- r22;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r7 -- r19;
// [Asm]   r15 -- r17;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r9;
// [Asm]   r15 -- r21;
// [Asm]   r10 -- r12;
// [Asm]   r1 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r8;
// [Asm]   r7 -- r15;
// [Asm]   r7 -- r10;
// [Asm]   r6 -- r10;
// [Asm]   r10 -- r11;
// [Asm]   r7 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r1 -- r27;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r15 -- r24;
// [Asm]   r0 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r1 -- r11;
// [Asm]   r5 -- r7;
// [Asm]   r0 -- r12;
// [Asm]   r5 -- r14;
// [Asm]   r15 -- r23;
// [Asm]   r0 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r7 -- r18;
// [Asm]   r7 -- r23;
// [Asm]   r0 -- r4;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r6;
// [Asm]   r7 -- r8;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r7 -- r12;
// [Asm]   r15 -- r20;
// [Asm]   r2 -- r3;
// [Asm]   r15 -- r19;
// [Asm]   r7 -- r14;
// [Asm]   r5 -- r15;
// [Asm]   r1 -- r24;
// [Asm]   comment = "0:v2-> 1:zero-> 2:a2-> 3:a1-> 5:v3-> 7:v5-> 15:a0-> 4:a3-> 6:v4-> 8:v24-> 9:v25-> 10:v7-> 11:v21-> 12:v22-> 13:v9-> 14:v10-> 17:a4-> 18:a5-> 19:a6-> 20:a7-> 21:t0-> 22:t1-> 23:t2-> 24:t3-> 25:t4-> 26:v12-> 27:v13-> 28:v14-> 16:v16"
// [Asm]   comment = "v2<-a4;v25<-a1;v12<-a0;v13<-a0;v4<-a0;v9<-a2;v14<-a0;v21<-a2;v5<-s0;v7<-a1;v10<-a2;v24<-a1;v3<-a5;v16<-a0;v22<-a2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of sort_2.210"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v2, a0 ->   mv a4, a0
// [Asm] subst   mv v3, a1 ->   mv a5, a1
// [Asm] subst   mv v4, a2 ->   mv a0, a2
// [Asm] subst   mv v5, a3 ->   mv s0, a3
// [Asm] subst   slliw v24, v3, 2 ->   slliw a1, a5, 2
// [Asm] subst   add v25, v4, v24 ->   add a1, a0, a1
// [Asm] subst   lw v7, 0(v25) ->   lw a1, 0(a1)
// [Asm] subst   slliw v21, v2, 2 ->   slliw a2, a4, 2
// [Asm] subst   add v22, v4, v21 ->   add a2, a0, a2
// [Asm] subst   lw v9, 0(v22) ->   lw a2, 0(a2)
// [Asm] subst   addi v10, v9, -1 ->   addi a2, a2, -1
// [Asm] subst   blt v10, v7, .sort_2.210_2 ->   blt a2, a1, .sort_2.210_2
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v16, zero ->   mv a0, zero
// [Asm] subst   j .sort_2.210_3 ->   j .sort_2.210_3
// [Asm] subst   mv a1, v2 ->   mv a1, a4
// [Asm] subst   mv a2, v3 ->   mv a2, a5
// [Asm] subst   call swap.202 ->   call swap.202
// [Asm] subst   lw v13, 0(v5) ->   lw a0, 0(s0)
// [Asm] subst   addi v14, v13, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v14, 0(v5) ->   sw a0, 0(s0)
// [Asm] subst   mv v16, zero ->   mv a0, zero
// [Asm] before colored: # leaf false
// [Asm] sort_3.211:
// [Asm] # block info: defs: [v2, t1, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v3, v5, a0, a4, a2, v4, v6, a1, a3, v9, v2], upward_exposed: [a2, a1, a3, a0, a4], params_defs: []
// [Asm] # live_in: [a2, a1, a3, a0, a4], live_out: []
// [Asm] # block parameters: []
// [Asm] .sort_3.211_0:
// [Asm]   # save_ctx1  # live: [a0, a4, a2, a1, a3]
// [Asm]   mv v2, a0  # live: [a4, a2, a1, a3, v2]
// [Asm]   mv v3, a1  # live: [v3, a4, a2, a3, v2]
// [Asm]   mv v4, a2  # live: [v3, a4, v4, a3, v2]
// [Asm]   mv v5, a3  # live: [v3, v5, a4, v4, v2]
// [Asm]   mv v6, a4  # live: [v3, v5, v4, v6, v2]
// [Asm]   # save_ctx2  # live: [v3, v5, v4, v6, v2]
// [Asm]   mv a0, v2  # live: [v3, v5, a0, v4, v6, v2]
// [Asm]   mv a1, v3  # live: [v3, v5, a0, v4, a1, v6, v2]
// [Asm]   mv a2, v5  # live: [v3, v5, a0, v4, a2, a1, v6, v2]
// [Asm]   mv a3, v6  # live: [v3, v5, a0, v4, a2, a1, v6, a3, v2]
// [Asm]   call sort_2.210  # live: [v3, v5, a0, v4, v6, v2]
// [Asm]   mv v7, a0  # live: [v3, v5, v4, v6, v2]
// [Asm]   # restore_ctx2  # live: [v3, v5, v4, v6, v2]
// [Asm]   # save_ctx2  # live: [v3, v5, v4, v6, v2]
// [Asm]   mv a0, v3  # live: [v3, v5, a0, v4, v6, v2]
// [Asm]   mv a1, v4  # live: [v3, v5, a0, v6, a1, v2]
// [Asm]   mv a2, v5  # live: [v3, v5, a0, a2, v6, a1, v2]
// [Asm]   mv a3, v6  # live: [v3, v5, a0, a2, v6, a1, a3, v2]
// [Asm]   call sort_2.210  # live: [v2, v6, v5, a0, v3]
// [Asm]   mv v8, a0  # live: [v2, v6, v5, v3]
// [Asm]   # restore_ctx2  # live: [v2, v6, v5, v3]
// [Asm]   # save_ctx2  # live: [v2, v6, v5, v3]
// [Asm]   mv a0, v2  # live: [v6, v5, a0, v3]
// [Asm]   mv a1, v3  # live: [a1, v6, v5, a0]
// [Asm]   mv a2, v5  # live: [a2, a1, v6, a0]
// [Asm]   mv a3, v6  # live: [a2, a1, a3, a0]
// [Asm]   call sort_2.210  # live: [a0]
// [Asm]   mv v9, a0  # live: [v9]
// [Asm]   # restore_ctx2  # live: [v9]
// [Asm] # control
// [Asm]   mv a0, v9  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] f.206:
// [Asm] # block info: defs: [v2, v5, v7, v8, v4, v6, v9, v3], uses: [v2, v5, a0, a2, v4, a1, a3, v3], upward_exposed: [a2, a1, a3, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a3, a0, zero], live_out: [v8, v6, v9, zero, v7]
// [Asm] # block parameters: []
// [Asm] .f.206_5:
// [Asm]   # save_ctx1  # live: [a2, a1, a3, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, a3, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, a3, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, a3, zero, v3]
// [Asm]   mv v5, a3  # live: [v2, v4, v5, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v2  # live: [v4, v6, v5, zero, v3]
// [Asm]   mv v7, v3  # live: [v4, v6, v5, zero, v7]
// [Asm]   mv v8, v4  # live: [v7, v6, v5, zero, v8]
// [Asm]   mv v9, v5  # live: [v7, v6, v9, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [v6, v10, v9], upward_exposed: [v6, v9], params_defs: [v8, v6, v9, v7]
// [Asm] # live_in: [v7, v6, v9, zero, v8], live_out: [v8, v6, zero, v9, v7]
// [Asm] # block parameters: [v6, v7, v8, v9]
// [Asm] .f.206_0:
// [Asm]   addi v10, v9, -1  # live: [v10, zero, v7, v8, v6, v9]
// [Asm] # control
// [Asm]   blt v10, v6, .f.206_2  # live: [v7, v6, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v7, v6, zero, v9, v8], live_out: [v8, v6, zero, v9, v7]
// [Asm] # block parameters: []
// [Asm] .f.206_1:
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v14, v15, v13], uses: [v8, v6, v7], upward_exposed: [v8, v6, v7], params_defs: []
// [Asm] # live_in: [v7, v6, zero, v9, v8], live_out: [v14, v13, zero, v7, v8, v6, v15, v9]
// [Asm] # block parameters: []
// [Asm] .f.206_15:
// [Asm] # control
// [Asm]   mv v13, v6  # live: [v13, zero, v8, v7, v6, v9]
// [Asm]   mv v14, v7  # live: [v14, v13, zero, v8, v7, v6, v9]
// [Asm]   mv v15, v8  # live: [v14, v13, zero, v8, v7, v6, v15, v9]
// [Asm] 
// [Asm] # block info: defs: [v16], uses: [v16, v15, v13], upward_exposed: [v15, v13], params_defs: [v14, v15, v13]
// [Asm] # live_in: [v14, v13, zero, v8, v7, v6, v15, v9], live_out: [v14, v13, zero, v7, v8, v6, v15, v9]
// [Asm] # block parameters: [v13, v14, v15]
// [Asm] .f.206_7:
// [Asm]   addi v16, v15, 1  # live: [v14, v16, v13, zero, v8, v7, v6, v15, v9]
// [Asm] # control
// [Asm]   blt v13, v16, .f.206_9  # live: [v14, v13, zero, v8, v7, v6, v15, v9]
// [Asm] 
// [Asm] # block info: defs: [v20, v22, v23, v35, v36, v19, v39, v40], uses: [v14, v13, v20, v22, v23, v35, v36, v19, v39, v40], upward_exposed: [v14, v13], params_defs: []
// [Asm] # live_in: [v14, v13, zero, v8, v7, v6, v15, v9], live_out: [v14, v13, zero, v7, v8, v6, v15, v9]
// [Asm] # block parameters: []
// [Asm] .f.206_8:
// [Asm]   slliw v39, v13, 2  # live: [v14, v13, zero, v7, v8, v6, v15, v9, v39]
// [Asm]   add v40, v14, v39  # live: [v14, v13, zero, v7, v8, v6, v15, v9, v40]
// [Asm]   lw v19, 0(v40)  # live: [v14, v13, zero, v7, v8, v19, v6, v15, v9]
// [Asm]   addi v20, v13, -1  # live: [v14, v13, zero, v20, v7, v8, v19, v6, v15, v9]
// [Asm]   slliw v35, v20, 2  # live: [v14, v13, zero, v8, v7, v35, v19, v6, v15, v9]
// [Asm]   add v36, v14, v35  # live: [v14, v13, zero, v8, v7, v36, v19, v6, v15, v9]
// [Asm]   lw v22, 0(v36)  # live: [v14, v13, zero, v22, v8, v7, v19, v6, v15, v9]
// [Asm]   addi v23, v22, -1  # live: [v14, v13, zero, v23, v7, v8, v19, v6, v15, v9]
// [Asm] # control
// [Asm]   blt v23, v19, .f.206_11  # live: [v14, v13, zero, v8, v7, v6, v15, v9]
// [Asm] 
// [Asm] # block info: defs: [t1, v13, ft0, ft1, a1, fa1, fa2, v29, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, v30, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v14, v13, v29, a0, a2, a1, v15], upward_exposed: [v14, v15, v13], params_defs: []
// [Asm] # live_in: [v14, v13, zero, v8, v7, v6, v15, v9], live_out: [v14, v13, zero, v7, v8, v6, v15, v9]
// [Asm] # block parameters: []
// [Asm] .f.206_10:
// [Asm]   addi v29, v13, -1  # live: [v14, zero, v29, v13, v7, v8, v6, v15, v9]
// [Asm]   # save_ctx2  # live: [v14, zero, v29, v13, v7, v8, v6, v15, v9]
// [Asm]   mv a0, v14  # live: [v14, zero, v29, a0, v13, v7, v8, v6, v15, v9]
// [Asm]   mv a1, v13  # live: [v14, zero, v29, a0, v8, v7, a1, v6, v15, v9]
// [Asm]   mv a2, v29  # live: [v14, zero, v29, a0, v8, v7, a2, a1, v6, v15, v9]
// [Asm]   call swap.202  # live: [v14, zero, v29, a0, v7, v8, v6, v15, v9]
// [Asm]   mv v30, a0  # live: [v14, zero, v29, v8, v7, v6, v15, v9]
// [Asm]   # restore_ctx2  # live: [v14, zero, v29, v8, v7, v6, v15, v9]
// [Asm] # control
// [Asm]   mv v13, v29  # live: [v14, v13, zero, v8, v7, v6, v15, v9]
// [Asm]   mv v14, v14  # live: [v14, v13, zero, v8, v7, v6, v15, v9]
// [Asm]   mv v15, v15  # live: [v14, v13, zero, v8, v7, v6, v15, v9]
// [Asm]   j .f.206_7  # live: [v14, v13, zero, v8, v7, v6, v15, v9]
// [Asm] 
// [Asm] # block info: defs: [v12], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v12]
// [Asm] # block parameters: []
// [Asm] .f.206_2:
// [Asm] # control
// [Asm]   mv v12, zero  # live: [v12]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v12, a0], upward_exposed: [v12], params_defs: [v12]
// [Asm] # live_in: [v12], live_out: []
// [Asm] # block parameters: [v12]
// [Asm] .f.206_3:
// [Asm] # control
// [Asm]   mv a0, v12  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v26], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v7, v6, zero, v9, v8], live_out: [v26, zero, v8, v7, v6, v9]
// [Asm] # block parameters: []
// [Asm] .f.206_9:
// [Asm] # control
// [Asm]   mv v26, zero  # live: [v7, v8, v6, v26, zero, v9]
// [Asm] 
// [Asm] # block info: defs: [v27], uses: [v26], upward_exposed: [v26], params_defs: [v26]
// [Asm] # live_in: [v26, zero, v7, v8, v6, v9], live_out: [zero, v27, v8, v7, v6, v9]
// [Asm] # block parameters: [v26]
// [Asm] .f.206_13:
// [Asm] # control
// [Asm]   mv v27, v26  # live: [v7, v8, v6, zero, v9, v27]
// [Asm] 
// [Asm] # block info: defs: [v6, v28], uses: [v8, v6, v28, v9, v7], upward_exposed: [v8, v6, v9, v7], params_defs: [v27]
// [Asm] # live_in: [zero, v27, v7, v8, v6, v9], live_out: [v8, v6, v9, zero, v7]
// [Asm] # block parameters: [v27]
// [Asm] .f.206_6:
// [Asm]   addi v28, v6, 1  # live: [v7, v28, v9, zero, v8]
// [Asm] # control
// [Asm]   mv v6, v28  # live: [v7, v6, v9, zero, v8]
// [Asm]   mv v7, v7  # live: [v7, v6, v9, zero, v8]
// [Asm]   mv v8, v8  # live: [v7, v6, v9, zero, v8]
// [Asm]   mv v9, v9  # live: [v7, v6, v9, zero, v8]
// [Asm]   j .f.206_0  # live: [v7, v6, v9, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v25], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v7, v6, zero, v9, v8], live_out: [v25, zero, v8, v7, v6, v9]
// [Asm] # block parameters: []
// [Asm] .f.206_11:
// [Asm] # control
// [Asm]   mv v25, zero  # live: [v7, v25, v6, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [v26], uses: [v25], upward_exposed: [v25], params_defs: [v25]
// [Asm] # live_in: [v25, zero, v7, v8, v6, v9], live_out: [v26, zero, v8, v7, v6, v9]
// [Asm] # block parameters: [v25]
// [Asm] .f.206_12:
// [Asm] # control
// [Asm]   mv v26, v25  # live: [v7, v8, v6, v26, zero, v9]
// [Asm]   j .f.206_13  # live: [v7, v8, v6, v26, zero, v9]
// [Asm] 
// [Asm] # leaf false
// [Asm] insertion_sort.204:
// [Asm] # block info: defs: [v2, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, v4, ft5, ft10, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v3, v5, a0, a2, v4, a1, v6, a3, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .insertion_sort.204_0:
// [Asm]   # save_ctx1  # live: [a2, a1, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, v3]
// [Asm]   addi v5, v3, 1  # live: [v2, v4, v5, v3]
// [Asm]   # save_ctx2  # live: [v2, v4, v5, v3]
// [Asm]   mv a0, v5  # live: [v2, v4, a0, v3]
// [Asm]   mv a1, v2  # live: [v4, a1, a0, v3]
// [Asm]   mv a2, v3  # live: [a2, v4, a1, a0]
// [Asm]   mv a3, v4  # live: [a2, a1, a3, a0]
// [Asm]   call f.206  # live: [a0]
// [Asm]   mv v6, a0  # live: [v6]
// [Asm]   # restore_ctx2  # live: [v6]
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main.213:
// [Asm] # block info: defs: [v2, t1, v7, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v6, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v3, v11, a0, zero, v7, a2, a1, s11, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.213_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   # save_ctx2  # live: [s11, zero]
// [Asm]   call minimbt_read_int  # live: [s11, zero, a0]
// [Asm]   mv v3, a0  # live: [s11, zero, v3]
// [Asm]   # restore_ctx2  # live: [s11, zero, v3]
// [Asm]   slliw v11, v3, 2  # live: [v11, s11, zero, v3]
// [Asm]   sub v2, s11, v11  # live: [v2, zero, v3]
// [Asm]   andi s11, v2, -8  # live: [v2, zero, v3]
// [Asm]   mv a1, v3  # live: [v2, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, v3]
// [Asm]   mv a0, zero  # live: [v2, zero, a0, v3]
// [Asm]   mv a1, v2  # live: [v2, a1, zero, a0, v3]
// [Asm]   mv a2, v3  # live: [v2, a2, a1, zero, a0, v3]
// [Asm]   call input.214  # live: [v2, zero, a0, v3]
// [Asm]   mv v5, a0  # live: [v2, zero, v3]
// [Asm]   # restore_ctx2  # live: [v2, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, v3]
// [Asm]   mv a0, v2  # live: [v2, zero, a0, v3]
// [Asm]   mv a1, zero  # live: [v2, a1, zero, a0, v3]
// [Asm]   mv a2, v3  # live: [v2, a2, a1, zero, a0, v3]
// [Asm]   call quick_sort.212  # live: [v2, zero, a0, v3]
// [Asm]   mv v6, a0  # live: [v2, zero, v3]
// [Asm]   # restore_ctx2  # live: [v2, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, v3]
// [Asm]   mv a0, v2  # live: [a0, zero, v3]
// [Asm]   mv a1, zero  # live: [a1, a0, v3]
// [Asm]   mv a2, v3  # live: [a2, a1, a0]
// [Asm]   call output.203  # live: [a0]
// [Asm]   mv v7, a0  # live: [v7]
// [Asm]   # restore_ctx2  # live: [v7]
// [Asm] # control
// [Asm]   mv a0, v7  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] output.203:
// [Asm] # block info: defs: [v3, v7, v4, v6, v5, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .output.203_5:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm]   mv v6, v3  # live: [v4, v5, v6, zero]
// [Asm]   mv v7, v4  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v8], uses: [v8, v6, v7], upward_exposed: [v6, v7], params_defs: [v5, v6, v7]
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v6, v5, zero, v7]
// [Asm] # block parameters: [v5, v6, v7]
// [Asm] .output.203_0:
// [Asm]   addi v8, v7, -1  # live: [v8, v6, v5, zero, v7]
// [Asm] # control
// [Asm]   blt v8, v6, .output.203_2  # live: [v6, v5, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v13, ft0, ft1, a1, v12, fa1, fa2, ft6, v20, a4, fa6, v19, a6, ft10, ft5, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v5, a0, v20, v7, v19, v6, v12, v15], upward_exposed: [v6, v5, v7], params_defs: []
// [Asm] # live_in: [v6, v5, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .output.203_1:
// [Asm]   slliw v19, v6, 2  # live: [v19, v5, v6, zero, v7]
// [Asm]   add v20, v5, v19  # live: [v5, v6, zero, v20, v7]
// [Asm]   lw v12, 0(v20)  # live: [v5, v6, v12, zero, v7]
// [Asm]   # save_ctx2  # live: [v5, v6, v12, zero, v7]
// [Asm]   mv a0, v12  # live: [v5, v6, zero, a0, v7]
// [Asm]   call minimbt_print_int  # live: [v5, v6, zero, a0, v7]
// [Asm]   mv v13, a0  # live: [v5, v6, zero, v7]
// [Asm]   # restore_ctx2  # live: [v5, v6, zero, v7]
// [Asm]   # save_ctx2  # live: [v5, v6, zero, v7]
// [Asm]   call minimbt_print_endline  # live: [v5, v6, zero, a0, v7]
// [Asm]   mv v14, a0  # live: [v5, v6, zero, v7]
// [Asm]   # restore_ctx2  # live: [v5, v6, zero, v7]
// [Asm]   addi v15, v6, 1  # live: [v5, v15, zero, v7]
// [Asm] # control
// [Asm]   mv v5, v5  # live: [v5, v15, zero, v7]
// [Asm]   mv v6, v15  # live: [v5, v6, zero, v7]
// [Asm]   mv v7, v7  # live: [v5, v6, zero, v7]
// [Asm]   j .output.203_0  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .output.203_2:
// [Asm] # control
// [Asm]   mv v10, zero  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .output.203_3:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] quick_sort.212:
// [Asm] # block info: defs: [v3, v4, v16, v17, v18, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, s11, a0, zero], live_out: [v16, v17, v18, s11, zero]
// [Asm] # block parameters: []
// [Asm] .quick_sort.212_5:
// [Asm]   # save_ctx1  # live: [a2, a1, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, s11, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, s11, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, s11, zero, v3]
// [Asm] # control
// [Asm]   mv v16, v2  # live: [v4, v16, s11, zero, v3]
// [Asm]   mv v17, v3  # live: [v4, v16, v17, s11, zero]
// [Asm]   mv v18, v4  # live: [v16, v17, v18, s11, zero]
// [Asm] 
// [Asm] # block info: defs: [v19, v193], uses: [v19, v17, v18, v193], upward_exposed: [v17, v18], params_defs: [v16, v17, v18]
// [Asm] # live_in: [v16, v17, v18, s11, zero], live_out: [v16, v17, v18, s11, zero]
// [Asm] # block parameters: [v16, v17, v18]
// [Asm] .quick_sort.212_0:
// [Asm]   sub v19, v18, v17  # live: [v16, v18, zero, v19, v17, s11]
// [Asm] # control
// [Asm]   li v193, 16  # live: [v16, v18, zero, v19, v17, s11, v193]
// [Asm]   blt v193, v19, .quick_sort.212_2  # live: [v16, v17, v18, s11, zero]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v114, a3, v113, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v16, v18, a0, a2, v17, a1, v113], upward_exposed: [v16, v17, v18], params_defs: []
// [Asm] # live_in: [v16, v17, v18], live_out: [v114]
// [Asm] # block parameters: []
// [Asm] .quick_sort.212_1:
// [Asm]   # save_ctx2  # live: [v17, v16, v18]
// [Asm]   mv a0, v16  # live: [v17, v18, a0]
// [Asm]   mv a1, v17  # live: [a1, v18, a0]
// [Asm]   mv a2, v18  # live: [a2, a1, a0]
// [Asm]   call insertion_sort.204  # live: [a0]
// [Asm]   mv v113, a0  # live: [v113]
// [Asm]   # restore_ctx2  # live: [v113]
// [Asm] # control
// [Asm]   mv v114, v113  # live: [v114]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v114, a0], upward_exposed: [v114], params_defs: [v114]
// [Asm] # live_in: [v114], live_out: []
// [Asm] # block parameters: [v114]
// [Asm] .quick_sort.212_3:
// [Asm] # control
// [Asm]   mv a0, v114  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [], uses: [], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v17, v16, v18, s11, zero], live_out: [v17, v16, v18, s11, zero]
// [Asm] # block parameters: []
// [Asm] .quick_sort.212_2:
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v25, v13, v22, v23, s11, v24, v185, v187, v189], uses: [v18, v13, zero, v22, v23, v17, s11, v24, v185, v187, v189], upward_exposed: [v17, s11, v18, zero], params_defs: []
// [Asm] # live_in: [v17, v16, v18, s11, zero], live_out: [v25, v16, v18, v13, zero, v22, v17, s11]
// [Asm] # block parameters: []
// [Asm] .quick_sort.212_47:
// [Asm]   addi v13, s11, -4  # live: [v16, v18, v13, zero, v17]
// [Asm]   andi s11, v13, -8  # live: [v16, v18, v13, zero, v17, s11]
// [Asm]   sw zero, 0(v13)  # live: [v16, v18, v13, zero, v17, s11]
// [Asm]   sub v22, v18, v17  # live: [v16, v18, v13, zero, v22, v17, s11]
// [Asm]   li v189, 4  # live: [v16, v18, v13, zero, v22, v17, s11, v189]
// [Asm]   div v23, v22, v189  # live: [v16, v18, v13, zero, v22, v23, v17, s11]
// [Asm]   li v187, 2  # live: [v16, v18, v13, zero, v22, v23, v17, s11, v187]
// [Asm]   mul v24, v23, v187  # live: [v16, v18, v13, zero, v22, v17, s11, v24]
// [Asm]   add v25, v17, v24  # live: [v25, v16, v18, v13, zero, v22, v17, s11]
// [Asm] # control
// [Asm]   li v185, 8  # live: [v25, v16, v18, v13, zero, v22, v17, s11, v185]
// [Asm]   blt v22, v185, .quick_sort.212_49  # live: [v25, v16, v18, v13, zero, v22, v17, s11]
// [Asm] 
// [Asm] # block info: defs: [v174, v179, v171, v35, v36, v32, v37, v177, v33, v34], uses: [v174, v179, v171, v22, v35, v32, v37, v17, v177, v33], upward_exposed: [v17, v22], params_defs: []
// [Asm] # live_in: [v25, v16, v18, v13, zero, v22, v17, s11], live_out: [v25, v16, v18, v13, zero, v36, v17, s11, v34]
// [Asm] # block parameters: []
// [Asm] .quick_sort.212_48:
// [Asm]   li v179, 4  # live: [v25, v16, v18, v179, v13, zero, v22, v17, s11]
// [Asm]   div v32, v22, v179  # live: [v25, v16, v18, v13, zero, v22, v32, v17, s11]
// [Asm]   li v177, 1  # live: [v25, v16, v18, v13, zero, v22, v32, v17, v177, s11]
// [Asm]   mul v33, v32, v177  # live: [v25, v16, v18, v13, zero, v22, v32, v17, s11, v33]
// [Asm]   add v34, v17, v33  # live: [v25, v16, v18, v13, zero, v22, v32, v17, s11, v34]
// [Asm]   li v174, 3  # live: [v25, v174, v16, v18, v13, zero, v22, v32, v17, s11, v34]
// [Asm]   mul v35, v32, v174  # live: [v25, v16, v18, v13, zero, v22, v35, v17, s11, v34]
// [Asm]   add v36, v17, v35  # live: [v25, v16, v18, v13, zero, v22, v36, v17, s11, v34]
// [Asm]   addi v37, v22, -1  # live: [v25, v16, v18, v13, zero, v36, v37, v17, s11, v34]
// [Asm] # control
// [Asm]   li v171, 50  # live: [v25, v16, v18, v171, v13, zero, v36, v37, v17, s11, v34]
// [Asm]   blt v37, v171, .quick_sort.212_51  # live: [v25, v16, v18, v13, zero, v36, v17, s11, v34]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, v51, fa2, ft6, a4, fa6, v50, a6, ft10, v47, ft5, v54, ft7, ft4, v46, ft9, v49, v53, a5, a0, fa4, ft2, a2, a3, v52, ft8, a7, t3, fa7, t0, fa5, v48, fa3, ft3, fa0, v45, t4, t2, v55], uses: [v25, v46, v16, v49, a0, v13, v36, a2, a1, a3, v52, v51, v48, zero, a4, v45, v34, v55], upward_exposed: [v36, v25, v16, v34, v13, zero], params_defs: []
// [Asm] # live_in: [v25, v16, v18, v13, zero, v36, v17, s11, v34], live_out: [v25, v16, v18, zero, v17, s11]
// [Asm] # block parameters: []
// [Asm] .quick_sort.212_50:
// [Asm]   addi v45, v34, -1  # live: [v25, v16, v13, v36, v17, s11, v18, zero, v45, v34]
// [Asm]   addi v46, v34, 1  # live: [v25, v16, v46, v13, v36, v17, s11, v18, zero, v45, v34]
// [Asm]   # save_ctx2  # live: [v25, v16, v46, v13, v36, v17, s11, v18, zero, v45, v34]
// [Asm]   mv a0, v45  # live: [v25, v16, v46, v13, a0, v36, v17, s11, v18, zero, v34]
// [Asm]   mv a1, v34  # live: [v25, v16, v46, v13, a0, v36, v17, a1, s11, v18, zero, v34]
// [Asm]   mv a2, v46  # live: [v25, v16, v13, a0, v36, a2, v17, a1, s11, v18, zero, v34]
// [Asm]   mv a3, v16  # live: [v25, v16, v13, a0, v36, a2, v17, a1, s11, a3, v18, zero, v34]
// [Asm]   mv a4, v13  # live: [v25, v16, v13, a0, v36, a2, v17, a1, s11, a3, v18, zero, a4, v34]
// [Asm]   call sort_3.211  # live: [v25, v16, v13, a0, v36, v17, s11, v18, zero, v34]
// [Asm]   mv v47, a0  # live: [v25, v16, v13, v36, v17, s11, v18, zero, v34]
// [Asm]   # restore_ctx2  # live: [v25, v16, v13, v36, v17, s11, v18, zero, v34]
// [Asm]   addi v48, v25, -1  # live: [v25, v16, v13, v36, v17, s11, v18, v48, zero, v34]
// [Asm]   addi v49, v25, 1  # live: [v25, v16, v49, v13, v36, v17, s11, v18, v48, zero, v34]
// [Asm]   # save_ctx2  # live: [v25, v16, v49, v13, v36, v17, s11, v18, v48, zero, v34]
// [Asm]   mv a0, v48  # live: [v25, v16, v49, v13, a0, v36, v17, s11, v18, zero, v34]
// [Asm]   mv a1, v25  # live: [v25, v16, v49, v13, a0, v36, v17, a1, s11, v18, zero, v34]
// [Asm]   mv a2, v49  # live: [v25, v16, v13, a0, v36, a2, v17, a1, s11, v18, zero, v34]
// [Asm]   mv a3, v16  # live: [v25, v16, v13, a0, v36, a2, v17, a1, s11, a3, v18, zero, v34]
// [Asm]   mv a4, v13  # live: [v25, v16, v13, a0, v36, a2, v17, a1, s11, a3, v18, zero, a4, v34]
// [Asm]   call sort_3.211  # live: [v25, v16, v13, a0, v36, v17, s11, v18, zero, v34]
// [Asm]   mv v50, a0  # live: [v25, v16, v13, v36, v17, s11, v18, zero, v34]
// [Asm]   # restore_ctx2  # live: [v25, v16, v13, v36, v17, s11, v18, zero, v34]
// [Asm]   addi v51, v36, -1  # live: [v25, v16, v13, v36, v17, s11, v51, v18, zero, v34]
// [Asm]   addi v52, v36, 1  # live: [v25, v16, v13, v36, v17, s11, v52, v51, v18, zero, v34]
// [Asm]   # save_ctx2  # live: [v25, v16, v13, v36, v17, s11, v52, v51, v18, zero, v34]
// [Asm]   mv a0, v51  # live: [v25, v16, v13, a0, v36, v17, s11, v52, v18, zero, v34]
// [Asm]   mv a1, v36  # live: [v25, v16, v13, a0, v36, v17, a1, s11, v52, v18, zero, v34]
// [Asm]   mv a2, v52  # live: [v25, v16, v13, a0, v36, a2, v17, a1, s11, v18, zero, v34]
// [Asm]   mv a3, v16  # live: [v25, v16, v13, a0, v36, a2, v17, a1, s11, a3, v18, zero, v34]
// [Asm]   mv a4, v13  # live: [v25, v16, v13, a0, v36, a2, v17, a1, s11, a3, v18, zero, a4, v34]
// [Asm]   call sort_3.211  # live: [v25, v16, v18, zero, v13, a0, v36, v17, s11, v34]
// [Asm]   mv v53, a0  # live: [v25, v16, v18, zero, v13, v36, v17, s11, v34]
// [Asm]   # restore_ctx2  # live: [v25, v16, v18, zero, v13, v36, v17, s11, v34]
// [Asm]   # save_ctx2  # live: [v25, v16, v18, zero, v13, v36, v17, s11, v34]
// [Asm]   mv a0, v34  # live: [v25, v16, v18, zero, v13, a0, v36, v17, s11]
// [Asm]   mv a1, v25  # live: [v25, v16, v18, zero, v13, a0, v36, v17, a1, s11]
// [Asm]   mv a2, v36  # live: [v25, v16, v18, zero, v13, a0, a2, v17, a1, s11]
// [Asm]   mv a3, v16  # live: [v25, v16, v18, zero, v13, a0, a2, v17, a1, s11, a3]
// [Asm]   mv a4, v13  # live: [v25, v16, v18, zero, v13, a0, a4, a2, v17, a1, s11, a3]
// [Asm]   call sort_3.211  # live: [v25, v16, v18, zero, v13, a0, v17, s11]
// [Asm]   mv v54, a0  # live: [v25, v16, v18, zero, v13, v17, s11]
// [Asm]   # restore_ctx2  # live: [v25, v16, v18, zero, v13, v17, s11]
// [Asm]   lw v55, 0(v13)  # live: [v25, v16, v18, zero, v17, s11, v55]
// [Asm] # control
// [Asm]   bne v55, zero, .quick_sort.212_53  # live: [v25, v16, v17, v18, s11, zero]
// [Asm] 
// [Asm] # block info: defs: [v11, v153, v59, s11], uses: [v11, v25, v153, s11], upward_exposed: [v25, s11], params_defs: []
// [Asm] # live_in: [v25, v16, v18, zero, v17, s11], live_out: [v16, v18, zero, v59, v17, s11]
// [Asm] # block parameters: []
// [Asm] .quick_sort.212_52:
// [Asm]   addi v11, s11, -8  # live: [v11, v25, v16, v18, zero, v17]
// [Asm]   andi s11, v11, -8  # live: [v11, v25, v16, v18, zero, v17, s11]
// [Asm]   sw v25, 0(v11)  # live: [v11, v16, v18, zero, v17, s11]
// [Asm]   li v153, 1  # live: [v11, v153, v16, v18, zero, v17, s11]
// [Asm]   sw v153, 4(v11)  # live: [v11, v16, v17, v18, s11, zero]
// [Asm] # control
// [Asm]   mv v59, v11  # live: [v59, v16, v17, v18, s11, zero]
// [Asm] 
// [Asm] # block info: defs: [v60], uses: [v59], upward_exposed: [v59], params_defs: [v59]
// [Asm] # live_in: [v16, v18, zero, v59, v17, s11], live_out: [v16, v18, zero, v17, s11, v60]
// [Asm] # block parameters: [v59]
// [Asm] .quick_sort.212_54:
// [Asm] # control
// [Asm]   mv v60, v59  # live: [v16, v17, v18, s11, zero, v60]
// [Asm] 
// [Asm] # block info: defs: [v61], uses: [v60], upward_exposed: [v60], params_defs: [v60]
// [Asm] # live_in: [v16, v18, zero, v17, s11, v60], live_out: [v16, v18, zero, v17, v61, s11]
// [Asm] # block parameters: [v60]
// [Asm] .quick_sort.212_58:
// [Asm] # control
// [Asm]   mv v61, v60  # live: [v16, v17, v18, v61, s11, zero]
// [Asm] 
// [Asm] # block info: defs: [v62], uses: [v61], upward_exposed: [v61], params_defs: [v61]
// [Asm] # live_in: [v16, v18, zero, v17, v61, s11], live_out: [v62, v16, v18, zero, v17, s11]
// [Asm] # block parameters: [v61]
// [Asm] .quick_sort.212_62:
// [Asm] # control
// [Asm]   mv v62, v61  # live: [v62, v16, v17, v18, s11, zero]
// [Asm] 
// [Asm] # block info: defs: [v63], uses: [v62], upward_exposed: [v62], params_defs: [v62]
// [Asm] # live_in: [v62, v16, v18, zero, v17, s11], live_out: [v63, v16, v18, zero, v17, s11]
// [Asm] # block parameters: [v62]
// [Asm] .quick_sort.212_6:
// [Asm]   lw v63, 0(v62)  # live: [v63, v16, v17, v18, s11, zero]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v144, ft7, v66, ft4, v5, ft9, a5, a0, fa4, ft2, v65, a2, a3, v147, v9, ft8, a7, t3, fa7, t0, fa5, v146, fa3, v68, ft3, fa0, t4, t2], uses: [v16, v5, a0, v65, a2, a1, v17, s11, v147, v9, v63, v146, v18, v144], upward_exposed: [v63, v16, v17, s11, v18], params_defs: []
// [Asm] # live_in: [v63, v16, v18, zero, v17, s11], live_out: [v16, v5, v18, v68, zero, v17, s11, v9]
// [Asm] # block parameters: []
// [Asm] .quick_sort.212_11:
// [Asm]   addi v65, v18, -1  # live: [v63, v16, v18, zero, v65, v17, s11]
// [Asm]   # save_ctx2  # live: [v63, v16, v18, zero, v65, v17, s11]
// [Asm]   mv a0, v16  # live: [v63, v16, v18, zero, a0, v65, v17, s11]
// [Asm]   mv a1, v63  # live: [v16, v18, zero, a0, v65, a1, v17, s11]
// [Asm]   mv a2, v65  # live: [v16, v18, zero, a0, v65, a2, a1, v17, s11]
// [Asm]   call swap.202  # live: [v16, v18, zero, a0, v65, v17, s11]
// [Asm]   mv v66, a0  # live: [v16, v18, zero, v65, v17, s11]
// [Asm]   # restore_ctx2  # live: [v16, v18, zero, v65, v17, s11]
// [Asm]   slliw v146, v65, 2  # live: [v16, v18, v146, zero, v17, s11]
// [Asm]   add v147, v16, v146  # live: [v16, v18, zero, v17, s11, v147]
// [Asm]   lw v68, 0(v147)  # live: [v16, v18, zero, v68, v17, s11]
// [Asm]   addi v9, s11, -4  # live: [v16, v18, zero, v68, v17, v9]
// [Asm]   andi s11, v9, -8  # live: [v16, v18, zero, v68, v17, s11, v9]
// [Asm]   sw v17, 0(v9)  # live: [v16, v18, zero, v68, v17, s11, v9]
// [Asm]   addi v5, s11, -4  # live: [v16, v5, v18, zero, v68, v17, v9]
// [Asm]   andi s11, v5, -8  # live: [v16, v5, v18, zero, v68, v17, s11, v9]
// [Asm]   li v144, 1  # live: [v16, v5, v18, zero, v68, v17, s11, v9, v144]
// [Asm]   sw v144, 0(v5)  # live: [v16, v5, v18, zero, v68, v17, s11, v9]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v76, v72, v71, v74, v75, v73], uses: [v17, v16, v5, v18, v68, v9], upward_exposed: [v17, v16, v5, v18, v68, v9], params_defs: []
// [Asm] # live_in: [v16, v5, v18, v68, zero, v17, s11, v9], live_out: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm] # block parameters: []
// [Asm] .quick_sort.212_37:
// [Asm] # control
// [Asm]   mv v71, v17  # live: [v71, v16, v5, v18, zero, v68, v17, s11, v9]
// [Asm]   mv v72, v9  # live: [v72, v71, v16, v5, v18, zero, v68, v17, s11, v9]
// [Asm]   mv v73, v16  # live: [v72, v71, v16, v5, v18, zero, v68, v17, s11, v9, v73]
// [Asm]   mv v74, v18  # live: [v72, v71, v16, v5, v18, zero, v68, v17, v74, s11, v9, v73]
// [Asm]   mv v75, v68  # live: [v72, v71, v16, v5, v75, v18, zero, v17, v74, s11, v9, v73]
// [Asm]   mv v76, v5  # live: [v76, v72, v71, v16, v5, v75, v18, zero, v17, v74, s11, v9, v73]
// [Asm] 
// [Asm] # block info: defs: [v77], uses: [v74, v71, v77], upward_exposed: [v74, v71], params_defs: [v76, v72, v71, v74, v75, v73]
// [Asm] # live_in: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76], live_out: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm] # block parameters: [v71, v72, v73, v74, v75, v76]
// [Asm] .quick_sort.212_26:
// [Asm]   addi v77, v74, -2  # live: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v77, v74, v76]
// [Asm] # control
// [Asm]   blt v77, v71, .quick_sort.212_28  # live: [v76, v72, v71, v16, v5, v75, v18, zero, v17, v74, s11, v9, v73]
// [Asm] 
// [Asm] # block info: defs: [v128, v127, v96, v97], uses: [v71, v75, v127, v96, v97, v128, v73], upward_exposed: [v71, v75, v73], params_defs: []
// [Asm] # live_in: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76], live_out: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm] # block parameters: []
// [Asm] .quick_sort.212_27:
// [Asm]   slliw v127, v71, 2  # live: [v71, v16, v5, v127, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm]   add v128, v73, v127  # live: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v128, v76]
// [Asm]   lw v96, 0(v128)  # live: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, v96, zero, v74, v76]
// [Asm]   addi v97, v75, -1  # live: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, v96, v97, zero, v74, v76]
// [Asm] # control
// [Asm]   blt v97, v96, .quick_sort.212_30  # live: [v76, v72, v71, v16, v5, v75, v18, zero, v17, v74, s11, v9, v73]
// [Asm] 
// [Asm] # block info: defs: [v100], uses: [v72, v71, v100], upward_exposed: [v72, v71], params_defs: []
// [Asm] # live_in: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76], live_out: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm] # block parameters: []
// [Asm] .quick_sort.212_29:
// [Asm]   lw v100, 0(v72)  # live: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v100, v76]
// [Asm] # control
// [Asm]   beq v100, v71, .quick_sort.212_31  # live: [v76, v72, v71, v16, v5, v75, v18, zero, v17, v74, s11, v9, v73]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, v108, fa1, v106, fa2, ft6, a4, fa6, a6, v103, v105, ft5, ft10, v102, ft7, ft4, v71, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v71, a0, a2, a1, v108, v73, v106, v72, v75, zero, v105, v74, v102, v76], upward_exposed: [v73, v72, v71, v75, zero, v74, v76], params_defs: []
// [Asm] # live_in: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76], live_out: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm] # block parameters: []
// [Asm] .quick_sort.212_32:
// [Asm]   lw v102, 0(v72)  # live: [v16, v5, v71, v17, s11, v9, v73, v72, v75, v18, zero, v74, v102, v76]
// [Asm]   # save_ctx2  # live: [v16, v5, v71, v17, s11, v9, v73, v72, v75, v18, zero, v74, v102, v76]
// [Asm]   mv a0, v73  # live: [v16, v5, v71, a0, v17, s11, v9, v73, v72, v75, v18, zero, v74, v102, v76]
// [Asm]   mv a1, v102  # live: [v16, v5, v71, a0, v17, a1, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm]   mv a2, v71  # live: [v16, v5, v71, a0, a2, v17, a1, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm]   call swap.202  # live: [v16, v5, v71, a0, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm]   mv v103, a0  # live: [v16, v5, v71, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm]   # restore_ctx2  # live: [v16, v5, v71, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm]   sw zero, 0(v76)  # live: [v16, v5, v71, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm]   lw v105, 0(v72)  # live: [v16, v5, v71, v17, s11, v9, v73, v72, v75, v18, zero, v105, v74, v76]
// [Asm]   addi v106, v105, 1  # live: [v16, v5, v71, v17, s11, v9, v73, v106, v72, v75, v18, zero, v74, v76]
// [Asm]   sw v106, 0(v72)  # live: [v16, v5, v71, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm]   addi v108, v71, 1  # live: [v16, v5, v17, v108, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm] # control
// [Asm]   mv v71, v108  # live: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm]   mv v72, v72  # live: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm]   mv v73, v73  # live: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm]   mv v74, v74  # live: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm]   mv v75, v75  # live: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm]   mv v76, v76  # live: [v76, v72, v71, v16, v5, v75, v18, zero, v17, v74, s11, v9, v73]
// [Asm]   j .quick_sort.212_26  # live: [v76, v72, v71, v16, v5, v75, v18, zero, v17, v74, s11, v9, v73]
// [Asm] 
// [Asm] # block info: defs: [v27], uses: [v13, zero, v27], upward_exposed: [v13, zero], params_defs: []
// [Asm] # live_in: [v25, v16, v18, v13, zero, v17, s11], live_out: [v25, v16, v18, zero, v17, s11]
// [Asm] # block parameters: []
// [Asm] .quick_sort.212_49:
// [Asm]   lw v27, 0(v13)  # live: [v25, v16, v18, zero, v27, v17, s11]
// [Asm] # control
// [Asm]   bne v27, zero, .quick_sort.212_60  # live: [v25, v16, v17, v18, s11, zero]
// [Asm] 
// [Asm] # block info: defs: [v182, s11, v31, v8], uses: [v25, v182, s11, v8], upward_exposed: [v25, s11], params_defs: []
// [Asm] # live_in: [v25, v16, v18, zero, v17, s11], live_out: [v16, v18, zero, v17, s11, v31]
// [Asm] # block parameters: []
// [Asm] .quick_sort.212_59:
// [Asm]   addi v8, s11, -8  # live: [v25, v16, v18, zero, v8, v17]
// [Asm]   andi s11, v8, -8  # live: [v25, v16, v18, zero, v8, v17, s11]
// [Asm]   sw v25, 0(v8)  # live: [v16, v18, zero, v8, v17, s11]
// [Asm]   li v182, 1  # live: [v16, v182, v18, zero, v8, v17, s11]
// [Asm]   sw v182, 4(v8)  # live: [v16, v17, v18, s11, zero, v8]
// [Asm] # control
// [Asm]   mv v31, v8  # live: [v16, v17, v18, s11, v31, zero]
// [Asm] 
// [Asm] # block info: defs: [v61], uses: [v31], upward_exposed: [v31], params_defs: [v31]
// [Asm] # live_in: [v16, v18, zero, v17, s11, v31], live_out: [v16, v18, zero, v17, v61, s11]
// [Asm] # block parameters: [v31]
// [Asm] .quick_sort.212_61:
// [Asm] # control
// [Asm]   mv v61, v31  # live: [v16, v17, v18, v61, s11, zero]
// [Asm]   j .quick_sort.212_62  # live: [v16, v17, v18, v61, s11, zero]
// [Asm] 
// [Asm] # block info: defs: [s11, v31, v7], uses: [v25, s11, zero, v7], upward_exposed: [v25, s11, zero], params_defs: []
// [Asm] # live_in: [v25, v16, v18, zero, v17, s11], live_out: [v16, v18, zero, v17, s11, v31]
// [Asm] # block parameters: []
// [Asm] .quick_sort.212_60:
// [Asm]   addi v7, s11, -8  # live: [v25, v16, v18, zero, v7, v17]
// [Asm]   andi s11, v7, -8  # live: [v25, v16, v18, zero, v7, v17, s11]
// [Asm]   sw v25, 0(v7)  # live: [v16, v18, zero, v7, v17, s11]
// [Asm]   sw zero, 4(v7)  # live: [v16, v17, v18, s11, zero, v7]
// [Asm] # control
// [Asm]   mv v31, v7  # live: [v16, v17, v18, s11, v31, zero]
// [Asm]   j .quick_sort.212_61  # live: [v16, v17, v18, s11, v31, zero]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v39, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v40], uses: [v25, v16, v13, a0, zero, a4, v36, a2, a1, a3, v34, v40], upward_exposed: [v36, v25, v16, v34, v13, zero], params_defs: []
// [Asm] # live_in: [v25, v16, v18, v13, zero, v36, v17, s11, v34], live_out: [v25, v16, v18, zero, v17, s11]
// [Asm] # block parameters: []
// [Asm] .quick_sort.212_51:
// [Asm]   # save_ctx2  # live: [v25, v16, v18, zero, v13, v36, v17, s11, v34]
// [Asm]   mv a0, v34  # live: [v25, v16, v18, zero, v13, a0, v36, v17, s11]
// [Asm]   mv a1, v25  # live: [v25, v16, v18, zero, v13, a0, v36, v17, a1, s11]
// [Asm]   mv a2, v36  # live: [v25, v16, v18, zero, v13, a0, a2, v17, a1, s11]
// [Asm]   mv a3, v16  # live: [v25, v16, v18, zero, v13, a0, a2, v17, a1, s11, a3]
// [Asm]   mv a4, v13  # live: [v25, v16, v18, zero, v13, a0, a4, a2, v17, a1, s11, a3]
// [Asm]   call sort_3.211  # live: [v25, v16, v18, zero, v13, a0, v17, s11]
// [Asm]   mv v39, a0  # live: [v25, v16, v18, zero, v13, v17, s11]
// [Asm]   # restore_ctx2  # live: [v25, v16, v18, zero, v13, v17, s11]
// [Asm]   lw v40, 0(v13)  # live: [v25, v16, v18, zero, v17, s11, v40]
// [Asm] # control
// [Asm]   bne v40, zero, .quick_sort.212_56  # live: [v25, v16, v17, v18, s11, zero]
// [Asm] 
// [Asm] # block info: defs: [v12, s11, v44, v167], uses: [v25, s11, v12, v167], upward_exposed: [v25, s11], params_defs: []
// [Asm] # live_in: [v25, v16, v18, zero, v17, s11], live_out: [v16, v18, zero, v17, s11, v44]
// [Asm] # block parameters: []
// [Asm] .quick_sort.212_55:
// [Asm]   addi v12, s11, -8  # live: [v25, v16, v18, zero, v17, v12]
// [Asm]   andi s11, v12, -8  # live: [v25, v16, v18, zero, v17, s11, v12]
// [Asm]   sw v25, 0(v12)  # live: [v16, v18, zero, v17, s11, v12]
// [Asm]   li v167, 1  # live: [v16, v18, zero, v17, s11, v12, v167]
// [Asm]   sw v167, 4(v12)  # live: [v16, v17, v18, s11, v12, zero]
// [Asm] # control
// [Asm]   mv v44, v12  # live: [v16, v17, v18, s11, v44, zero]
// [Asm] 
// [Asm] # block info: defs: [v60], uses: [v44], upward_exposed: [v44], params_defs: [v44]
// [Asm] # live_in: [v16, v18, zero, v17, s11, v44], live_out: [v16, v18, zero, v17, s11, v60]
// [Asm] # block parameters: [v44]
// [Asm] .quick_sort.212_57:
// [Asm] # control
// [Asm]   mv v60, v44  # live: [v16, v17, v18, s11, zero, v60]
// [Asm]   j .quick_sort.212_58  # live: [v16, v17, v18, s11, zero, v60]
// [Asm] 
// [Asm] # block info: defs: [v10, s11, v44], uses: [v25, s11, v10, zero], upward_exposed: [v25, s11, zero], params_defs: []
// [Asm] # live_in: [v25, v16, v18, zero, v17, s11], live_out: [v16, v18, zero, v17, s11, v44]
// [Asm] # block parameters: []
// [Asm] .quick_sort.212_56:
// [Asm]   addi v10, s11, -8  # live: [v25, v16, v18, v10, zero, v17]
// [Asm]   andi s11, v10, -8  # live: [v25, v16, v18, v10, zero, v17, s11]
// [Asm]   sw v25, 0(v10)  # live: [v16, v18, v10, zero, v17, s11]
// [Asm]   sw zero, 4(v10)  # live: [v16, v17, v18, s11, v10, zero]
// [Asm] # control
// [Asm]   mv v44, v10  # live: [v16, v17, v18, s11, v44, zero]
// [Asm]   j .quick_sort.212_57  # live: [v16, v17, v18, s11, v44, zero]
// [Asm] 
// [Asm] # block info: defs: [v59, v15, s11], uses: [v25, s11, v15, zero], upward_exposed: [v25, s11, zero], params_defs: []
// [Asm] # live_in: [v25, v16, v18, zero, v17, s11], live_out: [v16, v18, zero, v59, v17, s11]
// [Asm] # block parameters: []
// [Asm] .quick_sort.212_53:
// [Asm]   addi v15, s11, -8  # live: [v25, v16, v18, zero, v17, v15]
// [Asm]   andi s11, v15, -8  # live: [v25, v16, v18, zero, v17, s11, v15]
// [Asm]   sw v25, 0(v15)  # live: [v16, v18, zero, v17, s11, v15]
// [Asm]   sw zero, 4(v15)  # live: [v16, v17, v18, s11, v15, zero]
// [Asm] # control
// [Asm]   mv v59, v15  # live: [v59, v16, v17, v18, s11, zero]
// [Asm]   j .quick_sort.212_54  # live: [v59, v16, v17, v18, s11, zero]
// [Asm] 
// [Asm] # block info: defs: [v79], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v16, v5, v18, zero, v17, s11, v9], live_out: [v16, v5, v18, v79, zero, v17, s11, v9]
// [Asm] # block parameters: []
// [Asm] .quick_sort.212_28:
// [Asm] # control
// [Asm]   mv v79, zero  # live: [v16, v5, v18, zero, v79, v17, s11, v9]
// [Asm] 
// [Asm] # block info: defs: [v80], uses: [v79], upward_exposed: [v79], params_defs: [v79]
// [Asm] # live_in: [v16, v5, v18, v79, zero, v17, s11, v9], live_out: [v16, v5, v18, zero, v80, v17, s11, v9]
// [Asm] # block parameters: [v79]
// [Asm] .quick_sort.212_35:
// [Asm] # control
// [Asm]   mv v80, v79  # live: [v16, v5, v18, zero, v80, v17, s11, v9]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, v82, fa2, ft6, a4, fa6, a6, v81, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, v85, v84, v136, t4, t2, v83], uses: [v16, v82, v5, v18, a0, v85, v136, v81, a2, a1, v9], upward_exposed: [v16, v5, v18, v9], params_defs: [v80]
// [Asm] # live_in: [v16, v5, v18, zero, v80, v17, s11, v9], live_out: [v16, v18, zero, v84, v17, s11]
// [Asm] # block parameters: [v80]
// [Asm] .quick_sort.212_15:
// [Asm]   lw v81, 0(v9)  # live: [v16, v5, v18, zero, v81, v17, s11, v9]
// [Asm]   addi v82, v18, -1  # live: [v16, v5, v82, v18, zero, v81, v17, s11, v9]
// [Asm]   # save_ctx2  # live: [v16, v5, v82, v18, zero, v81, v17, s11, v9]
// [Asm]   mv a0, v16  # live: [v16, v5, v82, v18, a0, zero, v81, v17, s11, v9]
// [Asm]   mv a1, v81  # live: [v16, v5, v82, v18, a0, zero, v17, a1, s11, v9]
// [Asm]   mv a2, v82  # live: [v16, v5, v18, zero, a0, a2, v17, a1, s11, v9]
// [Asm]   call swap.202  # live: [v16, v5, v18, zero, a0, v17, s11, v9]
// [Asm]   mv v83, a0  # live: [v16, v5, v18, zero, v17, s11, v9]
// [Asm]   # restore_ctx2  # live: [v16, v5, v18, zero, v17, s11, v9]
// [Asm]   lw v84, 0(v9)  # live: [v16, v5, v18, zero, v84, v17, s11]
// [Asm]   lw v85, 0(v5)  # live: [v16, v18, zero, v85, v84, v17, s11]
// [Asm] # control
// [Asm]   li v136, 1  # live: [v16, v18, zero, v85, v84, v136, v17, s11]
// [Asm]   bne v85, v136, .quick_sort.212_13  # live: [v84, v16, v17, v18, s11, zero]
// [Asm] 
// [Asm] # block info: defs: [v134, v6, s11, v89], uses: [v84, v134, v6, s11], upward_exposed: [v84, s11], params_defs: []
// [Asm] # live_in: [v16, v18, zero, v84, v17, s11], live_out: [v16, v18, zero, v17, s11, v89]
// [Asm] # block parameters: []
// [Asm] .quick_sort.212_12:
// [Asm]   addi v6, s11, -8  # live: [v16, v18, zero, v84, v17, v6]
// [Asm]   andi s11, v6, -8  # live: [v16, v18, zero, v84, v17, v6, s11]
// [Asm]   sw v84, 0(v6)  # live: [v16, v18, zero, v17, v6, s11]
// [Asm]   li v134, 1  # live: [v16, v18, zero, v134, v17, v6, s11]
// [Asm]   sw v134, 4(v6)  # live: [v16, v17, v6, s11, v18, zero]
// [Asm] # control
// [Asm]   mv v89, v6  # live: [v16, v17, v18, s11, zero, v89]
// [Asm] 
// [Asm] # block info: defs: [v90], uses: [v89], upward_exposed: [v89], params_defs: [v89]
// [Asm] # live_in: [v16, v18, zero, v17, s11, v89], live_out: [v16, v18, zero, v90, v17, s11]
// [Asm] # block parameters: [v89]
// [Asm] .quick_sort.212_14:
// [Asm] # control
// [Asm]   mv v90, v89  # live: [v90, v16, v17, v18, s11, zero]
// [Asm] 
// [Asm] # block info: defs: [t1, v91, ft0, ft1, a1, fa1, v93, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, ft8, a7, t3, fa7, t0, v94, fa5, fa3, ft3, fa0, t4, t2], uses: [v94, v16, v91, v18, a0, v90, a2, a1, v17], upward_exposed: [v90, v16, v17, v18], params_defs: [v90]
// [Asm] # live_in: [v16, v18, zero, v90, v17, s11], live_out: [v16, v17, v18, s11, zero]
// [Asm] # block parameters: [v90]
// [Asm] .quick_sort.212_7:
// [Asm]   lw v91, 0(v90)  # live: [v16, v91, v18, zero, v17, s11]
// [Asm]   # save_ctx2  # live: [v16, v91, v18, zero, v17, s11]
// [Asm]   mv a0, v16  # live: [v16, v91, v18, zero, a0, v17, s11]
// [Asm]   mv a1, v17  # live: [v16, v91, v18, zero, a0, a1, s11]
// [Asm]   mv a2, v91  # live: [v16, v91, v18, zero, a0, a2, a1, s11]
// [Asm]   call quick_sort.212  # live: [v16, v91, s11, v18, zero, a0]
// [Asm]   mv v93, a0  # live: [v16, v91, s11, v18, zero]
// [Asm]   # restore_ctx2  # live: [v16, v91, s11, v18, zero]
// [Asm]   addi v94, v91, 1  # live: [v94, v16, v18, s11, zero]
// [Asm] # control
// [Asm]   mv v16, v16  # live: [v94, v16, v18, s11, zero]
// [Asm]   mv v17, v94  # live: [v16, v17, v18, s11, zero]
// [Asm]   mv v18, v18  # live: [v16, v17, v18, s11, zero]
// [Asm]   j .quick_sort.212_0  # live: [v16, v17, v18, s11, zero]
// [Asm] 
// [Asm] # block info: defs: [v14, s11, v89], uses: [v84, v14, s11, zero], upward_exposed: [v84, s11, zero], params_defs: []
// [Asm] # live_in: [v16, v18, zero, v84, v17, s11], live_out: [v16, v18, zero, v17, s11, v89]
// [Asm] # block parameters: []
// [Asm] .quick_sort.212_13:
// [Asm]   addi v14, s11, -8  # live: [v16, v14, v18, zero, v84, v17]
// [Asm]   andi s11, v14, -8  # live: [v16, v14, v18, zero, v84, v17, s11]
// [Asm]   sw v84, 0(v14)  # live: [v16, v14, v18, zero, v17, s11]
// [Asm]   sw zero, 4(v14)  # live: [v16, v17, v14, s11, v18, zero]
// [Asm] # control
// [Asm]   mv v89, v14  # live: [v16, v17, v18, s11, zero, v89]
// [Asm]   j .quick_sort.212_14  # live: [v16, v17, v18, s11, zero, v89]
// [Asm] 
// [Asm] # block info: defs: [v71, v99], uses: [v76, v72, v71, v75, v99, v74, v73], upward_exposed: [v76, v72, v71, v74, v75, v73], params_defs: []
// [Asm] # live_in: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76], live_out: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm] # block parameters: []
// [Asm] .quick_sort.212_30:
// [Asm]   addi v99, v71, 1  # live: [v16, v5, v17, s11, v9, v73, v72, v75, v18, v99, zero, v74, v76]
// [Asm] # control
// [Asm]   mv v71, v99  # live: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm]   mv v72, v72  # live: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm]   mv v73, v73  # live: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm]   mv v74, v74  # live: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm]   mv v75, v75  # live: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm]   mv v76, v76  # live: [v76, v72, v71, v16, v5, v75, v18, zero, v17, v74, s11, v9, v73]
// [Asm]   j .quick_sort.212_26  # live: [v76, v72, v71, v16, v5, v75, v18, zero, v17, v74, s11, v9, v73]
// [Asm] 
// [Asm] # block info: defs: [v109, v112, v71, v110], uses: [v76, v109, v112, v72, v71, v75, v110, v74, v73], upward_exposed: [v76, v72, v71, v74, v75, v73], params_defs: []
// [Asm] # live_in: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76], live_out: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm] # block parameters: []
// [Asm] .quick_sort.212_31:
// [Asm]   lw v109, 0(v72)  # live: [v16, v5, v71, v17, s11, v9, v73, v109, v72, v75, v18, zero, v74, v76]
// [Asm]   addi v110, v109, 1  # live: [v16, v5, v71, v110, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm]   sw v110, 0(v72)  # live: [v16, v5, v71, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm]   addi v112, v71, 1  # live: [v16, v5, v17, s11, v9, v73, v72, v112, v75, v18, zero, v74, v76]
// [Asm] # control
// [Asm]   mv v71, v112  # live: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm]   mv v72, v72  # live: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm]   mv v73, v73  # live: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm]   mv v74, v74  # live: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm]   mv v75, v75  # live: [v71, v16, v5, v17, s11, v9, v73, v72, v75, v18, zero, v74, v76]
// [Asm]   mv v76, v76  # live: [v76, v72, v71, v16, v5, v75, v18, zero, v17, v74, s11, v9, v73]
// [Asm]   j .quick_sort.212_26  # live: [v76, v72, v71, v16, v5, v75, v18, zero, v17, v74, s11, v9, v73]
// [Asm] 
// [Asm] # leaf false
// [Asm] input.214:
// [Asm] # block info: defs: [v3, v7, v4, v6, v5, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .input.214_5:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm]   mv v6, v3  # live: [v4, v5, v6, zero]
// [Asm]   mv v7, v4  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v8], uses: [v8, v5, v7], upward_exposed: [v5, v7], params_defs: [v5, v6, v7]
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: [v5, v6, v7]
// [Asm] .input.214_0:
// [Asm]   addi v8, v7, -1  # live: [v8, v5, v6, zero, v7]
// [Asm] # control
// [Asm]   blt v8, v5, .input.214_2  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, v16, v14, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, v17, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v11, v5, v16, v14, a0, v7, v6, v17], upward_exposed: [v5, v6, v7], params_defs: []
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .input.214_1:
// [Asm]   # save_ctx2  # live: [v6, v5, zero, v7]
// [Asm]   call minimbt_read_int  # live: [v6, v5, zero, a0, v7]
// [Asm]   mv v11, a0  # live: [v11, v6, v5, zero, v7]
// [Asm]   # restore_ctx2  # live: [v11, v6, v5, zero, v7]
// [Asm]   slliw v16, v5, 2  # live: [v11, v6, v5, v16, zero, v7]
// [Asm]   add v17, v6, v16  # live: [v11, v6, v5, v17, zero, v7]
// [Asm]   sw v11, 0(v17)  # live: [v6, v5, zero, v7]
// [Asm]   addi v14, v5, 1  # live: [v6, v14, zero, v7]
// [Asm] # control
// [Asm]   mv v5, v14  # live: [v5, v6, zero, v7]
// [Asm]   mv v6, v6  # live: [v5, v6, zero, v7]
// [Asm]   mv v7, v7  # live: [v5, v6, zero, v7]
// [Asm]   j .input.214_0  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .input.214_2:
// [Asm] # control
// [Asm]   mv v10, zero  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .input.214_3:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main.213  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] sort_2.210:
// [Asm] # block info: defs: [v2, v25, v5, v21, v10, v22, v7, v4, v24, v9, v3], uses: [v3, v25, v21, v10, a0, v22, v7, a2, a1, a3, v24, v9, v4, v2], upward_exposed: [a2, a1, a3, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a3, a0, zero], live_out: [v3, v4, v5, zero, v2]
// [Asm] # block parameters: []
// [Asm] .sort_2.210_0:
// [Asm]   # save_ctx1  # live: [zero, a0, a2, a1, a3]
// [Asm]   mv v2, a0  # live: [zero, a2, a1, a3, v2]
// [Asm]   mv v3, a1  # live: [v3, zero, a2, a3, v2]
// [Asm]   mv v4, a2  # live: [v3, zero, v4, a3, v2]
// [Asm]   mv v5, a3  # live: [v3, v5, zero, v4, v2]
// [Asm]   slliw v24, v3, 2  # live: [v3, v5, zero, v4, v24, v2]
// [Asm]   add v25, v4, v24  # live: [v3, v25, v5, zero, v4, v2]
// [Asm]   lw v7, 0(v25)  # live: [v3, v5, zero, v7, v4, v2]
// [Asm]   slliw v21, v2, 2  # live: [v3, v5, v21, zero, v7, v4, v2]
// [Asm]   add v22, v4, v21  # live: [v3, v5, zero, v22, v7, v4, v2]
// [Asm]   lw v9, 0(v22)  # live: [v3, v5, zero, v7, v4, v9, v2]
// [Asm]   addi v10, v9, -1  # live: [v3, v5, v10, zero, v7, v4, v2]
// [Asm] # control
// [Asm]   blt v10, v7, .sort_2.210_2  # live: [v2, v4, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v16, v13, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v2, v5, v14, a0, v13, zero, v4, a2, a1, v3], upward_exposed: [v3, v4, v5, zero, v2], params_defs: []
// [Asm] # live_in: [v2, v4, v5, zero, v3], live_out: [v16]
// [Asm] # block parameters: []
// [Asm] .sort_2.210_1:
// [Asm]   # save_ctx2  # live: [v2, v4, v5, zero, v3]
// [Asm]   mv a0, v4  # live: [v2, v5, zero, a0, v3]
// [Asm]   mv a1, v2  # live: [v5, a1, zero, a0, v3]
// [Asm]   mv a2, v3  # live: [a2, v5, a1, zero, a0]
// [Asm]   call swap.202  # live: [v5, zero, a0]
// [Asm]   mv v12, a0  # live: [v5, zero]
// [Asm]   # restore_ctx2  # live: [v5, zero]
// [Asm]   lw v13, 0(v5)  # live: [v5, zero, v13]
// [Asm]   addi v14, v13, 1  # live: [v14, v5, zero]
// [Asm]   sw v14, 0(v5)  # live: [zero]
// [Asm] # control
// [Asm]   mv v16, zero  # live: [v16]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v16, a0], upward_exposed: [v16], params_defs: [v16]
// [Asm] # live_in: [v16], live_out: []
// [Asm] # block parameters: [v16]
// [Asm] .sort_2.210_3:
// [Asm] # control
// [Asm]   mv a0, v16  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v16], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v16]
// [Asm] # block parameters: []
// [Asm] .sort_2.210_2:
// [Asm] # control
// [Asm]   mv v16, zero  # live: [v16]
// [Asm]   j .sort_2.210_3  # live: [v16]
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] swap.202:
// [Asm] # block info: defs: [v2, v11, v5, v16, v13, a0, v7, v8, v4, v6, v12, v3], uses: [v2, v11, v5, v16, a0, v13, v7, a2, a1, v12, zero, v8, v4, v6, v3], upward_exposed: [a2, a1, a0, zero], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .swap.202_0:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v3, a2, zero, v2]
// [Asm]   mv v4, a2  # live: [v3, v4, zero, v2]
// [Asm]   slliw v5, v3, 2  # live: [v4, v5, zero, v2]
// [Asm]   add v16, v2, v5  # live: [v4, v5, v16, zero, v2]
// [Asm]   lw v6, 0(v16)  # live: [v4, v6, v5, zero, v2]
// [Asm]   slliw v7, v4, 2  # live: [v7, v6, v5, zero, v2]
// [Asm]   add v13, v2, v7  # live: [v7, v6, v5, zero, v13, v2]
// [Asm]   lw v8, 0(v13)  # live: [v7, v8, v6, v5, zero, v2]
// [Asm]   add v12, v2, v5  # live: [v7, v8, v6, v12, zero, v2]
// [Asm]   sw v8, 0(v12)  # live: [v7, v6, zero, v2]
// [Asm]   add v11, v2, v7  # live: [v11, v6, zero]
// [Asm]   sw v6, 0(v11)  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("swap", Unit), args: [("arr", Array(Int)), ("i", Int), ("j", Int)], body: Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j"))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit)))}, LetRec({name: ("output", Unit), args: [("arr", Array(Int)), ("i", Int), ("len", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Var("arr"), Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("len")]))), Unit)}, LetRec({name: ("insertion_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: LetRec({name: ("g", Unit), args: [("j", Int)], body: If(LE(Prim(Int(1), Var("low"), Add, kind=Some(Int)), Var("j")), If(LE(Get(Var("arr"), Var("j")), Prim(Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))]), App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])), Unit), Unit)}, LetRec({name: ("f", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("j", Var({val: Some(Int)})), Var("i"), Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("f"), [Prim(Var("low"), Int(1), Add, kind=Some(Int))])))}, LetRec({name: ("partition", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("pivot_index", Int), ("low", Int), ("high", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("pivot_index"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Var("low")), Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))))))))}, LetRec({name: ("choose_pivot", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("use_median_of_medians", Var({val: Some(Int)})), Int(50), Let(("swaps", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))))))}, LetRec({name: ("quick_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))))}, LetRec({name: ("sort", Unit), args: [("x", Array(Int)), ("len", Int)], body: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), [])))))))))
// [Knf] build_knf: Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j"))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit)))
// [Knf] build_knf: Get(Var("arr"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j"))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit))
// [Knf] build_knf: Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j")))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("arr"), Var("j"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit)
// [Knf] build_knf: Put(Var("arr"), Var("j"), Var("tmp"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Var("tmp")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("output", Unit), args: [("arr", Array(Int)), ("i", Int), ("len", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Var("arr"), Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("len")]))), Unit)}, LetRec({name: ("insertion_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: LetRec({name: ("g", Unit), args: [("j", Int)], body: If(LE(Prim(Int(1), Var("low"), Add, kind=Some(Int)), Var("j")), If(LE(Get(Var("arr"), Var("j")), Prim(Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))]), App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])), Unit), Unit)}, LetRec({name: ("f", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("j", Var({val: Some(Int)})), Var("i"), Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("f"), [Prim(Var("low"), Int(1), Add, kind=Some(Int))])))}, LetRec({name: ("partition", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("pivot_index", Int), ("low", Int), ("high", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("pivot_index"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Var("low")), Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))))))))}, LetRec({name: ("choose_pivot", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("use_median_of_medians", Var({val: Some(Int)})), Int(50), Let(("swaps", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))))))}, LetRec({name: ("quick_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))))}, LetRec({name: ("sort", Unit), args: [("x", Array(Int)), ("len", Int)], body: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), []))))))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Var("arr"), Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("len")]))), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Var("arr"), Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("len")])))
// [Knf] build_knf: App(Var("print_int"), [Get(Var("arr"), Var("i"))])
// [Knf] build_knf: Get(Var("arr"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Var("arr"), Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("len")]))
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: App(Var("output"), [Var("arr"), Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("len")])
// [Knf] build_knf: Var("output")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("insertion_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: LetRec({name: ("g", Unit), args: [("j", Int)], body: If(LE(Prim(Int(1), Var("low"), Add, kind=Some(Int)), Var("j")), If(LE(Get(Var("arr"), Var("j")), Prim(Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))]), App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])), Unit), Unit)}, LetRec({name: ("f", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("j", Var({val: Some(Int)})), Var("i"), Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("f"), [Prim(Var("low"), Int(1), Add, kind=Some(Int))])))}, LetRec({name: ("partition", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("pivot_index", Int), ("low", Int), ("high", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("pivot_index"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Var("low")), Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))))))))}, LetRec({name: ("choose_pivot", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("use_median_of_medians", Var({val: Some(Int)})), Int(50), Let(("swaps", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))))))}, LetRec({name: ("quick_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))))}, LetRec({name: ("sort", Unit), args: [("x", Array(Int)), ("len", Int)], body: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), [])))))))
// [Knf] build_knf: LetRec({name: ("g", Unit), args: [("j", Int)], body: If(LE(Prim(Int(1), Var("low"), Add, kind=Some(Int)), Var("j")), If(LE(Get(Var("arr"), Var("j")), Prim(Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))]), App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])), Unit), Unit)}, LetRec({name: ("f", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("j", Var({val: Some(Int)})), Var("i"), Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("f"), [Prim(Var("low"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: If(LE(Prim(Int(1), Var("low"), Add, kind=Some(Int)), Var("j")), If(LE(Get(Var("arr"), Var("j")), Prim(Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))]), App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])), Unit), Unit)
// [Knf] build_knf: Prim(Int(1), Var("low"), Add, kind=Some(Int))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: If(LE(Get(Var("arr"), Var("j")), Prim(Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))]), App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])), Unit)
// [Knf] build_knf: Get(Var("arr"), Var("j"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("arr"), Prim(Var("j"), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("j"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))]), App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))]))
// [Knf] build_knf: App(Var("swap"), [Var("arr"), Var("j"), Prim(Var("j"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("swap")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Var("j"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("g"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Prim(Var("j"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("f", Unit), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("j", Var({val: Some(Int)})), Var("i"), Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("f"), [Prim(Var("low"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("j", Var({val: Some(Int)})), Var("i"), Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("high"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("j", Var({val: Some(Int)})), Var("i"), Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("g"), [Var("j")]), App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("g"), [Var("j")])
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: App(Var("f"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("f"), [Prim(Var("low"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Prim(Var("low"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("partition", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("pivot_index", Int), ("low", Int), ("high", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("pivot_index"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Var("low")), Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))))))))}, LetRec({name: ("choose_pivot", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("use_median_of_medians", Var({val: Some(Int)})), Int(50), Let(("swaps", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))))))}, LetRec({name: ("quick_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))))}, LetRec({name: ("sort", Unit), args: [("x", Array(Int)), ("len", Int)], body: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), []))))))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("pivot_index"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Var("low")), Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))))))))
// [Knf] build_knf: App(Var("swap"), [Var("arr"), Var("pivot_index"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("swap")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("pivot_index")
// [Knf] build_knf: Prim(Var("high"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Var("low")), Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))])))))))
// [Knf] build_knf: Get(Var("arr"), Prim(Var("high"), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("high"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Var("low")), Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))))))
// [Knf] build_knf: Array(Int(1), Var("low"))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Let(("partitioned", Var({val: Some(Array(Int))})), Array(Int(1), Int(1)), LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))])))))
// [Knf] build_knf: Array(Int(1), Int(1))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("aux", Var({val: Some(Unit)})), args: [("j", Int)], body: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))))
// [Knf] build_knf: If(LE(Var("j"), Prim(Var("high"), Int(2), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Var("high"), Int(2), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit), App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: If(LE(Get(Var("arr"), Var("j")), Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)), Unit)
// [Knf] build_knf: Get(Var("arr"), Var("j"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Var("pivot"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("pivot")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit))
// [Knf] build_knf: If(Eq(Get(Var("i"), Int(0)), Var("j")), Unit, Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0))))
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]), Put(Var("partitioned"), Int(0), Int(0)))
// [Knf] build_knf: App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])
// [Knf] build_knf: Var("swap")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Put(Var("partitioned"), Int(0), Int(0))
// [Knf] build_knf: Var("partitioned")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Unit)
// [Knf] build_knf: Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("aux"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("j"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("aux"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))])))
// [Knf] build_knf: App(Var("aux"), [Var("low")])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))]), Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))]))
// [Knf] build_knf: App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Prim(Var("high"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("swap")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Var("high"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Tuple([Get(Var("i"), Int(0)), Eq(Get(Var("partitioned"), Int(0)), Int(1))])
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Eq(Get(Var("partitioned"), Int(0)), Int(1))
// [Knf] build_knf: Get(Var("partitioned"), Int(0))
// [Knf] build_knf: Var("partitioned")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("choose_pivot", Tuple([Int, Bool])), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("use_median_of_medians", Var({val: Some(Int)})), Int(50), Let(("swaps", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))))))}, LetRec({name: ("quick_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))))}, LetRec({name: ("sort", Unit), args: [("x", Array(Int)), ("len", Int)], body: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), [])))))
// [Knf] build_knf: Let(("use_median_of_medians", Var({val: Some(Int)})), Int(50), Let(("swaps", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))))))
// [Knf] build_knf: Int(50)
// [Knf] build_knf: Let(("swaps", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))])))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))))
// [Knf] build_knf: Prim(Var("high"), Var("low"), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Let(("b", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))])))
// [Knf] build_knf: Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int)), Add, kind=Some(Int))
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(2), Mul, kind=Some(Int))
// [Knf] build_knf: Prim(Var("len"), Int(4), Div, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(4)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit), Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))]))
// [Knf] build_knf: If(LE(Int(8), Var("len")), Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))), Unit)
// [Knf] build_knf: Int(8)
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Let(("a", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int)), Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")]))))))
// [Knf] build_knf: Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int)), Add, kind=Some(Int))
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(1), Mul, kind=Some(Int))
// [Knf] build_knf: Prim(Var("len"), Int(4), Div, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(4)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("c", Var({val: Some(Int)})), Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int)), LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))))
// [Knf] build_knf: Prim(Var("low"), Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int)), Add, kind=Some(Int))
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Prim(Prim(Var("len"), Int(4), Div, kind=Some(Int)), Int(3), Mul, kind=Some(Int))
// [Knf] build_knf: Prim(Var("len"), Int(4), Div, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(4)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: LetRec({name: ("sort_2", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int)], body: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)}, LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")]))))
// [Knf] build_knf: If(LE(Get(Var("arr"), Var("b")), Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))), Unit)
// [Knf] build_knf: Get(Var("arr"), Var("b"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Prim(Get(Var("arr"), Var("a")), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("arr"), Var("a"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Var("a"), Var("b")]), Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int))))
// [Knf] build_knf: App(Var("swap"), [Var("arr"), Var("a"), Var("b")])
// [Knf] build_knf: Var("swap")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Put(Var("swaps"), Int(0), Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("swaps")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("swaps"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("swaps"), Int(0))
// [Knf] build_knf: Var("swaps")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("sort_3", Var({val: Some(Unit)})), args: [("a", Int), ("b", Int), ("c", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))}, Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("a"), Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")])))
// [Knf] build_knf: App(Var("sort_2"), [Var("a"), Var("b")])
// [Knf] build_knf: Var("sort_2")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("sort_2"), [Var("b"), Var("c")]), App(Var("sort_2"), [Var("a"), Var("b")]))
// [Knf] build_knf: App(Var("sort_2"), [Var("b"), Var("c")])
// [Knf] build_knf: Var("sort_2")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: App(Var("sort_2"), [Var("a"), Var("b")])
// [Knf] build_knf: Var("sort_2")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit), App(Var("sort_3"), [Var("a"), Var("b"), Var("c")]))
// [Knf] build_knf: If(LE(Var("use_median_of_medians"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))), Unit)
// [Knf] build_knf: Var("use_median_of_medians")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: App(Var("sort_3"), [Prim(Var("a"), Int(1), Sub, kind=Some(Int)), Var("a"), Prim(Var("a"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("sort_3")
// [Knf] build_knf: Prim(Var("a"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Prim(Var("a"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))]), App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("sort_3"), [Prim(Var("b"), Int(1), Sub, kind=Some(Int)), Var("b"), Prim(Var("b"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("sort_3")
// [Knf] build_knf: Prim(Var("b"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Prim(Var("b"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("sort_3"), [Prim(Var("c"), Int(1), Sub, kind=Some(Int)), Var("c"), Prim(Var("c"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("sort_3")
// [Knf] build_knf: Prim(Var("c"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Prim(Var("c"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("sort_3"), [Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("sort_3")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Unit
// [Knf] build_knf: Tuple([Var("b"), Eq(Get(Var("swaps"), Int(0)), Int(0))])
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Eq(Get(Var("swaps"), Int(0)), Int(0))
// [Knf] build_knf: Get(Var("swaps"), Int(0))
// [Knf] build_knf: Var("swaps")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("quick_sort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))))}, LetRec({name: ("sort", Unit), args: [("x", Array(Int)), ("len", Int)], body: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), []))))
// [Knf] build_knf: Let(("len", Var({val: Some(Int)})), Prim(Var("high"), Var("low"), Sub, kind=Some(Int)), If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))))
// [Knf] build_knf: Prim(Var("high"), Var("low"), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: If(LE(Var("len"), Int(16)), App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")])))))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(16)
// [Knf] build_knf: App(Var("insertion_sort"), [Var("arr"), Var("low"), Var("high")])
// [Knf] build_knf: Var("insertion_sort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Var("high")
// [Knf] build_knf: LetTuple([("pivot_index", Var({val: Some(Int)})), ("likely_sorted", Var({val: Some(Bool)}))], App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")]), LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))))
// [Knf] build_knf: App(Var("choose_pivot"), [Var("arr"), Var("low"), Var("high")])
// [Knf] build_knf: Var("choose_pivot")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Var("high")
// [Knf] build_knf: LetTuple([("pivot", Var({val: Some(Int)})), ("partitioned", Var({val: Some(Bool)}))], App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")])))
// [Knf] build_knf: App(Var("partition"), [Var("arr"), Var("pivot_index"), Var("low"), Var("high")])
// [Knf] build_knf: Var("partition")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("pivot_index")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")]), App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")]))
// [Knf] build_knf: App(Var("quick_sort"), [Var("arr"), Var("low"), Var("pivot")])
// [Knf] build_knf: Var("quick_sort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Var("pivot")
// [Knf] build_knf: App(Var("quick_sort"), [Var("arr"), Prim(Var("pivot"), Int(1), Add, kind=Some(Int)), Var("high")])
// [Knf] build_knf: Var("quick_sort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("pivot"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pivot")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("high")
// [Knf] build_knf: LetRec({name: ("sort", Unit), args: [("x", Array(Int)), ("len", Int)], body: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), [])))
// [Knf] build_knf: App(Var("quick_sort"), [Var("x"), Int(0), Var("len")])
// [Knf] build_knf: Var("quick_sort")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("len")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))))
// [Knf] build_knf: App(Var("read_int"), [])
// [Knf] build_knf: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")])))))
// [Knf] build_knf: Array(Var("len"), Int(0))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("arr"), Var("i"), App(Var("read_int"), []))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("read_int"), [])
// [Knf] build_knf: App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("input")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")])))
// [Knf] build_knf: App(Var("input"), [Int(0)])
// [Knf] build_knf: Var("input")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("sort"), [Var("arr"), Var("len")]), App(Var("output"), [Var("arr"), Int(0), Var("len")]))
// [Knf] build_knf: App(Var("sort"), [Var("arr"), Var("len")])
// [Knf] build_knf: Var("sort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("len")
// [Knf] build_knf: App(Var("output"), [Var("arr"), Int(0), Var("len")])
// [Knf] build_knf: Var("output")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("len")
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Core] b0 control: Panic -> Return(args=[Unit])
// [Core] b1 control: Panic -> Jump(target=b3, args=[Insn(iref=%6)])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Unit])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b3 control: Panic -> Jump(target=b5, args=[Insn(iref=%10)])
// [Core] b4 control: Panic -> Jump(target=b5, args=[Unit])
// [Core] b1 control: Panic -> Branch(cond=Insn(iref=%6), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b5 control: Panic -> Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b2 control: Panic -> Jump(target=b6, args=[Unit])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b6 control: Panic -> Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Core] b1 control: Panic -> Jump(target=b3, args=[Insn(iref=%4)])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Unit])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%1)])
// [Core] b5 control: Panic -> Jump(target=b7, args=[Insn(iref=%11)])
// [Core] b6 control: Panic -> Jump(target=b7, args=[Insn(iref=%19)])
// [Core] b3 control: Panic -> Branch(cond=Insn(iref=%6), t=b5, t_args=[], f=b6, f_args=[])
// [Core] b7 control: Panic -> Jump(target=b8, args=[BlockParam(bref=b7, bpref=$b.0)])
// [Core] b4 control: Panic -> Jump(target=b8, args=[Insn(iref=%21)])
// [Core] b1 control: Panic -> Branch(cond=Insn(iref=%4), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b8 control: Panic -> Jump(target=b9, args=[BlockParam(bref=b8, bpref=$b.0)])
// [Core] b2 control: Panic -> Jump(target=b9, args=[Unit])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b9 control: Panic -> Return(args=[BlockParam(bref=b9, bpref=$b.0)])
// [Core] b1 control: Panic -> Jump(target=b3, args=[Mem(fref=f6, mref=m2)])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Mem(fref=f6, mref=m3)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%12), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b1 control: Panic -> Jump(target=b3, args=[Unit])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Unit])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%2)])
// [Core] b5 control: Panic -> Jump(target=b7, args=[Mem(fref=f9, mref=m1)])
// [Core] b6 control: Panic -> Jump(target=b7, args=[Mem(fref=f9, mref=m2)])
// [Core] b3 control: Panic -> Branch(cond=Insn(iref=%25), t=b5, t_args=[], f=b6, f_args=[])
// [Core] b8 control: Panic -> Jump(target=b10, args=[Mem(fref=f9, mref=m3)])
// [Core] b9 control: Panic -> Jump(target=b10, args=[Mem(fref=f9, mref=m4)])
// [Core] b4 control: Panic -> Branch(cond=Insn(iref=%30), t=b8, t_args=[], f=b9, f_args=[])
// [Core] b7 control: Panic -> Jump(target=b11, args=[BlockParam(bref=b7, bpref=$b.0)])
// [Core] b10 control: Panic -> Jump(target=b11, args=[BlockParam(bref=b10, bpref=$b.0)])
// [Core] b1 control: Panic -> Branch(cond=Insn(iref=%13), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b12 control: Panic -> Jump(target=b14, args=[Mem(fref=f9, mref=m5)])
// [Core] b13 control: Panic -> Jump(target=b14, args=[Mem(fref=f9, mref=m6)])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%34), t=b12, t_args=[], f=b13, f_args=[])
// [Core] b11 control: Panic -> Jump(target=b15, args=[BlockParam(bref=b11, bpref=$b.0)])
// [Core] b14 control: Panic -> Jump(target=b15, args=[BlockParam(bref=b14, bpref=$b.0)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%5), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b15 control: Panic -> Return(args=[BlockParam(bref=b15, bpref=$b.0)])
// [Core] b1 control: Panic -> Jump(target=b3, args=[Insn(iref=%2)])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Insn(iref=%11)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b1 control: Panic -> Jump(target=b3, args=[Insn(iref=%5)])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Unit])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%4)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl sort_3.211
// [Main]   .type sort_3.211, @function
// [Main] # leaf false
// [Main] sort_3.211:
// [Main] .sort_3.211_0:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   mv s2, a2
// [Main]   mv s3, a3
// [Main]   mv s4, a4
// [Main]   mv a0, s0
// [Main]   mv a1, s1
// [Main]   mv a2, s3
// [Main]   mv a3, s4
// [Main]   call sort_2.210
// [Main]   mv a0, s1
// [Main]   mv a1, s2
// [Main]   mv a2, s3
// [Main]   mv a3, s4
// [Main]   call sort_2.210
// [Main]   mv a0, s0
// [Main]   mv a1, s1
// [Main]   mv a2, s3
// [Main]   mv a3, s4
// [Main]   call sort_2.210
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl f.206
// [Main]   .type f.206, @function
// [Main] # leaf false
// [Main] f.206:
// [Main] .f.206_5:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   mv s2, a2
// [Main]   mv s3, a3
// [Main] 
// [Main] .f.206_0:
// [Main]   addi a0, s3, -1
// [Main]   blt a0, s0, .f.206_2
// [Main] 
// [Main] .f.206_1:
// [Main] 
// [Main] .f.206_15:
// [Main]   mv a1, s0
// [Main] 
// [Main] .f.206_7:
// [Main]   addi a0, s2, 1
// [Main]   blt a1, a0, .f.206_9
// [Main] 
// [Main] .f.206_8:
// [Main]   slliw a0, a1, 2
// [Main]   add a0, s1, a0
// [Main]   lw a0, 0(a0)
// [Main]   addi a2, a1, -1
// [Main]   slliw a2, a2, 2
// [Main]   add a2, s1, a2
// [Main]   lw a2, 0(a2)
// [Main]   addi a2, a2, -1
// [Main]   blt a2, a0, .f.206_11
// [Main] 
// [Main] .f.206_10:
// [Main]   addi s4, a1, -1
// [Main]   mv a0, s1
// [Main]   mv a2, s4
// [Main]   call swap.202
// [Main]   mv a1, s4
// [Main]   j .f.206_7
// [Main] 
// [Main] .f.206_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .f.206_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main] .f.206_9:
// [Main]   mv a0, zero
// [Main] 
// [Main] .f.206_13:
// [Main] 
// [Main] .f.206_6:
// [Main]   addi a0, s0, 1
// [Main]   mv s0, a0
// [Main]   j .f.206_0
// [Main] 
// [Main] .f.206_11:
// [Main]   mv a0, zero
// [Main] 
// [Main] .f.206_12:
// [Main]   j .f.206_13
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl insertion_sort.204
// [Main]   .type insertion_sort.204, @function
// [Main] # leaf false
// [Main] insertion_sort.204:
// [Main] .insertion_sort.204_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a3, a0
// [Main]   mv a4, a1
// [Main]   mv a5, a2
// [Main]   addi a0, a4, 1
// [Main]   mv a1, a3
// [Main]   mv a2, a4
// [Main]   mv a3, a5
// [Main]   call f.206
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.213
// [Main]   .type main.213, @function
// [Main] # leaf false
// [Main] main.213:
// [Main] .main.213_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   call minimbt_read_int
// [Main]   mv s0, a0
// [Main]   slliw a0, s0, 2
// [Main]   sub s1, s11, a0
// [Main]   andi s11, s1, -8
// [Main]   mv a1, s0
// [Main]   mv a0, zero
// [Main]   mv a1, s1
// [Main]   mv a2, s0
// [Main]   call input.214
// [Main]   mv a0, s1
// [Main]   mv a1, zero
// [Main]   mv a2, s0
// [Main]   call quick_sort.212
// [Main]   mv a0, s1
// [Main]   mv a1, zero
// [Main]   mv a2, s0
// [Main]   call output.203
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl output.203
// [Main]   .type output.203, @function
// [Main] # leaf false
// [Main] output.203:
// [Main] .output.203_5:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s1, a0
// [Main]   mv s0, a1
// [Main]   mv s2, a2
// [Main] 
// [Main] .output.203_0:
// [Main]   addi a0, s2, -1
// [Main]   blt a0, s0, .output.203_2
// [Main] 
// [Main] .output.203_1:
// [Main]   slliw a0, s0, 2
// [Main]   add a0, s1, a0
// [Main]   lw a0, 0(a0)
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   addi a0, s0, 1
// [Main]   mv s0, a0
// [Main]   j .output.203_0
// [Main] 
// [Main] .output.203_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .output.203_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl quick_sort.212
// [Main]   .type quick_sort.212, @function
// [Main] # leaf false
// [Main] quick_sort.212:
// [Main] .quick_sort.212_5:
// [Main]   addi sp, sp, -64
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   sd s6, 56(sp)
// [Main]   mv s0, a0
// [Main]   mv s3, a1
// [Main]   mv s2, a2
// [Main] 
// [Main] .quick_sort.212_0:
// [Main]   sub a0, s2, s3
// [Main]   li a1, 16
// [Main]   blt a1, a0, .quick_sort.212_2
// [Main] 
// [Main] .quick_sort.212_1:
// [Main]   mv a0, s0
// [Main]   mv a1, s3
// [Main]   mv a2, s2
// [Main]   call insertion_sort.204
// [Main] 
// [Main] .quick_sort.212_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   ld s6, 56(sp)
// [Main]   addi sp, sp, 64
// [Main]   ret
// [Main] 
// [Main] .quick_sort.212_2:
// [Main] 
// [Main] .quick_sort.212_47:
// [Main]   addi s4, s11, -4
// [Main]   andi s11, s4, -8
// [Main]   sw zero, 0(s4)
// [Main]   sub a0, s2, s3
// [Main]   li a1, 4
// [Main]   div a1, a0, a1
// [Main]   li a2, 2
// [Main]   mul a1, a1, a2
// [Main]   add s1, s3, a1
// [Main]   li a1, 8
// [Main]   blt a0, a1, .quick_sort.212_49
// [Main] 
// [Main] .quick_sort.212_48:
// [Main]   li a1, 4
// [Main]   div a1, a0, a1
// [Main]   li a2, 1
// [Main]   mul a2, a1, a2
// [Main]   add s6, s3, a2
// [Main]   li a2, 3
// [Main]   mul a1, a1, a2
// [Main]   add s5, s3, a1
// [Main]   addi a0, a0, -1
// [Main]   li a1, 50
// [Main]   blt a0, a1, .quick_sort.212_51
// [Main] 
// [Main] .quick_sort.212_50:
// [Main]   addi a0, s6, -1
// [Main]   addi a2, s6, 1
// [Main]   mv a1, s6
// [Main]   mv a3, s0
// [Main]   mv a4, s4
// [Main]   call sort_3.211
// [Main]   addi a0, s1, -1
// [Main]   addi a2, s1, 1
// [Main]   mv a1, s1
// [Main]   mv a3, s0
// [Main]   mv a4, s4
// [Main]   call sort_3.211
// [Main]   addi a0, s5, -1
// [Main]   addi a2, s5, 1
// [Main]   mv a1, s5
// [Main]   mv a3, s0
// [Main]   mv a4, s4
// [Main]   call sort_3.211
// [Main]   mv a0, s6
// [Main]   mv a1, s1
// [Main]   mv a2, s5
// [Main]   mv a3, s0
// [Main]   mv a4, s4
// [Main]   call sort_3.211
// [Main]   lw a0, 0(s4)
// [Main]   bne a0, zero, .quick_sort.212_53
// [Main] 
// [Main] .quick_sort.212_52:
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   sw s1, 0(a0)
// [Main]   li a1, 1
// [Main]   sw a1, 4(a0)
// [Main] 
// [Main] .quick_sort.212_54:
// [Main] 
// [Main] .quick_sort.212_58:
// [Main] 
// [Main] .quick_sort.212_62:
// [Main] 
// [Main] .quick_sort.212_6:
// [Main]   lw a1, 0(a0)
// [Main] 
// [Main] .quick_sort.212_11:
// [Main]   addi s1, s2, -1
// [Main]   mv a0, s0
// [Main]   mv a2, s1
// [Main]   call swap.202
// [Main]   slliw a0, s1, 2
// [Main]   add a0, s0, a0
// [Main]   lw a0, 0(a0)
// [Main]   addi s4, s11, -4
// [Main]   andi s11, s4, -8
// [Main]   sw s3, 0(s4)
// [Main]   addi s1, s11, -4
// [Main]   andi s11, s1, -8
// [Main]   li a1, 1
// [Main]   sw a1, 0(s1)
// [Main] 
// [Main] .quick_sort.212_37:
// [Main]   mv s5, s3
// [Main]   mv s6, a0
// [Main] 
// [Main] .quick_sort.212_26:
// [Main]   addi a0, s2, -2
// [Main]   blt a0, s5, .quick_sort.212_28
// [Main] 
// [Main] .quick_sort.212_27:
// [Main]   slliw a0, s5, 2
// [Main]   add a0, s0, a0
// [Main]   lw a0, 0(a0)
// [Main]   addi a1, s6, -1
// [Main]   blt a1, a0, .quick_sort.212_30
// [Main] 
// [Main] .quick_sort.212_29:
// [Main]   lw a0, 0(s4)
// [Main]   beq a0, s5, .quick_sort.212_31
// [Main] 
// [Main] .quick_sort.212_32:
// [Main]   lw a1, 0(s4)
// [Main]   mv a0, s0
// [Main]   mv a2, s5
// [Main]   call swap.202
// [Main]   sw zero, 0(s1)
// [Main]   lw a0, 0(s4)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s4)
// [Main]   addi a0, s5, 1
// [Main]   mv s5, a0
// [Main]   j .quick_sort.212_26
// [Main] 
// [Main] .quick_sort.212_49:
// [Main]   lw a0, 0(s4)
// [Main]   bne a0, zero, .quick_sort.212_60
// [Main] 
// [Main] .quick_sort.212_59:
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   sw s1, 0(a0)
// [Main]   li a1, 1
// [Main]   sw a1, 4(a0)
// [Main] 
// [Main] .quick_sort.212_61:
// [Main]   j .quick_sort.212_62
// [Main] 
// [Main] .quick_sort.212_60:
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   sw s1, 0(a0)
// [Main]   sw zero, 4(a0)
// [Main]   j .quick_sort.212_61
// [Main] 
// [Main] .quick_sort.212_51:
// [Main]   mv a0, s6
// [Main]   mv a1, s1
// [Main]   mv a2, s5
// [Main]   mv a3, s0
// [Main]   mv a4, s4
// [Main]   call sort_3.211
// [Main]   lw a0, 0(s4)
// [Main]   bne a0, zero, .quick_sort.212_56
// [Main] 
// [Main] .quick_sort.212_55:
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   sw s1, 0(a0)
// [Main]   li a1, 1
// [Main]   sw a1, 4(a0)
// [Main] 
// [Main] .quick_sort.212_57:
// [Main]   j .quick_sort.212_58
// [Main] 
// [Main] .quick_sort.212_56:
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   sw s1, 0(a0)
// [Main]   sw zero, 4(a0)
// [Main]   j .quick_sort.212_57
// [Main] 
// [Main] .quick_sort.212_53:
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   sw s1, 0(a0)
// [Main]   sw zero, 4(a0)
// [Main]   j .quick_sort.212_54
// [Main] 
// [Main] .quick_sort.212_28:
// [Main]   mv a0, zero
// [Main] 
// [Main] .quick_sort.212_35:
// [Main] 
// [Main] .quick_sort.212_15:
// [Main]   lw a1, 0(s4)
// [Main]   addi a2, s2, -1
// [Main]   mv a0, s0
// [Main]   call swap.202
// [Main]   lw a0, 0(s4)
// [Main]   lw a1, 0(s1)
// [Main]   li a2, 1
// [Main]   bne a1, a2, .quick_sort.212_13
// [Main] 
// [Main] .quick_sort.212_12:
// [Main]   addi a1, s11, -8
// [Main]   andi s11, a1, -8
// [Main]   sw a0, 0(a1)
// [Main]   li a0, 1
// [Main]   sw a0, 4(a1)
// [Main]   mv a0, a1
// [Main] 
// [Main] .quick_sort.212_14:
// [Main] 
// [Main] .quick_sort.212_7:
// [Main]   lw s1, 0(a0)
// [Main]   mv a0, s0
// [Main]   mv a1, s3
// [Main]   mv a2, s1
// [Main]   call quick_sort.212
// [Main]   addi a0, s1, 1
// [Main]   mv s3, a0
// [Main]   j .quick_sort.212_0
// [Main] 
// [Main] .quick_sort.212_13:
// [Main]   addi a1, s11, -8
// [Main]   andi s11, a1, -8
// [Main]   sw a0, 0(a1)
// [Main]   sw zero, 4(a1)
// [Main]   mv a0, a1
// [Main]   j .quick_sort.212_14
// [Main] 
// [Main] .quick_sort.212_30:
// [Main]   addi a0, s5, 1
// [Main]   mv s5, a0
// [Main]   j .quick_sort.212_26
// [Main] 
// [Main] .quick_sort.212_31:
// [Main]   lw a0, 0(s4)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s4)
// [Main]   addi a0, s5, 1
// [Main]   mv s5, a0
// [Main]   j .quick_sort.212_26
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl input.214
// [Main]   .type input.214, @function
// [Main] # leaf false
// [Main] input.214:
// [Main] .input.214_5:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s1, a0
// [Main]   mv s0, a1
// [Main]   mv s2, a2
// [Main] 
// [Main] .input.214_0:
// [Main]   addi a0, s2, -1
// [Main]   blt a0, s1, .input.214_2
// [Main] 
// [Main] .input.214_1:
// [Main]   call minimbt_read_int
// [Main]   slliw a1, s1, 2
// [Main]   add a1, s0, a1
// [Main]   sw a0, 0(a1)
// [Main]   addi a0, s1, 1
// [Main]   mv s1, a0
// [Main]   j .input.214_0
// [Main] 
// [Main] .input.214_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .input.214_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main.213
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl sort_2.210
// [Main]   .type sort_2.210, @function
// [Main] # leaf false
// [Main] sort_2.210:
// [Main] .sort_2.210_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   mv a4, a0
// [Main]   mv a5, a1
// [Main]   mv a0, a2
// [Main]   mv s0, a3
// [Main]   slliw a1, a5, 2
// [Main]   add a1, a0, a1
// [Main]   lw a1, 0(a1)
// [Main]   slliw a2, a4, 2
// [Main]   add a2, a0, a2
// [Main]   lw a2, 0(a2)
// [Main]   addi a2, a2, -1
// [Main]   blt a2, a1, .sort_2.210_2
// [Main] 
// [Main] .sort_2.210_1:
// [Main]   mv a1, a4
// [Main]   mv a2, a5
// [Main]   call swap.202
// [Main]   lw a0, 0(s0)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s0)
// [Main]   mv a0, zero
// [Main] 
// [Main] .sort_2.210_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .sort_2.210_2:
// [Main]   mv a0, zero
// [Main]   j .sort_2.210_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl swap.202
// [Main]   .type swap.202, @function
// [Main] # leaf true
// [Main] swap.202:
// [Main] .swap.202_0:
// [Main]   slliw a1, a1, 2
// [Main]   add a3, a0, a1
// [Main]   lw a3, 0(a3)
// [Main]   slliw a2, a2, 2
// [Main]   add a4, a0, a2
// [Main]   lw a4, 0(a4)
// [Main]   add a1, a0, a1
// [Main]   sw a4, 0(a1)
// [Main]   add a0, a0, a2
// [Main]   sw a3, 0(a0)
// [Main]   mv a0, zero
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function main.213
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_int", args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Zero])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Mem(fref=f12, mref=m0) -> $f12.m0
// [Wasm] Lowering insn Call(ty=Unit, f=f11, args=[Int32(val=0), Mem(fref=f12, mref=m0), Insn(iref=%0)])
// [Wasm] Get Local name Mem(fref=f12, mref=m0) -> $f12.m0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Call(ty=Unit, f=f10, args=[Mem(fref=f12, mref=m0), Int32(val=0), Insn(iref=%0)])
// [Wasm] Get Local name Mem(fref=f12, mref=m0) -> $f12.m0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Call(ty=Unit, f=f1, args=[Mem(fref=f12, mref=m0), Int32(val=0), Insn(iref=%0)])
// [Wasm] Get Local name Mem(fref=f12, mref=m0) -> $f12.m0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%4)])
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Mem(fref=f12, mref=m0) -> $f12.m0
// [Wasm] Lowered function main.213 to wasm
// [Wasm] Lowering function insertion_sort.204
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f4, fpref=$f.1), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Call(ty=Unit, f=f3, args=[Insn(iref=%0), FnParam(fref=f4, fpref=$f.0), FnParam(fref=f4, fpref=$f.1), FnParam(fref=f4, fpref=$f.2)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Lowering control Return(args=[Insn(iref=%1)])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function insertion_sort.204 to wasm
// [Wasm] Lowering function sort_3.211
// [Wasm] Lowering insn Call(ty=Unit, f=f7, args=[FnParam(fref=f8, fpref=$f.0), FnParam(fref=f8, fpref=$f.1), FnParam(fref=f8, fpref=$f.3), FnParam(fref=f8, fpref=$f.4)])
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.4) -> $$f.4
// [Wasm] Lowering insn Call(ty=Unit, f=f7, args=[FnParam(fref=f8, fpref=$f.1), FnParam(fref=f8, fpref=$f.2), FnParam(fref=f8, fpref=$f.3), FnParam(fref=f8, fpref=$f.4)])
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.4) -> $$f.4
// [Wasm] Lowering insn Call(ty=Unit, f=f7, args=[FnParam(fref=f8, fpref=$f.0), FnParam(fref=f8, fpref=$f.1), FnParam(fref=f8, fpref=$f.3), FnParam(fref=f8, fpref=$f.4)])
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.4) -> $$f.4
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.4) -> $$f.4
// [Wasm] Lowered function sort_3.211 to wasm
// [Wasm] Lowering function swap.202
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f0, fpref=$f.0), offset=FnParam(fref=f0, fpref=$f.1), width=@32))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f0, fpref=$f.0), offset=FnParam(fref=f0, fpref=$f.2), width=@32))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f0, fpref=$f.0), offset=FnParam(fref=f0, fpref=$f.1), width=@32), val=Insn(iref=%1))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f0, fpref=$f.0), offset=FnParam(fref=f0, fpref=$f.2), width=@32), val=Insn(iref=%0))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function swap.202 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f12, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [Wasm] Lowering function output.203
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), offset=BlockParam(bref=b0, bpref=$b.1), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%5), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f1, fpref=$f.0), FnParam(fref=f1, fpref=$f.1), FnParam(fref=f1, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function output.203 to wasm
// [Wasm] Lowering function quick_sort.212
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%2)])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b26, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.1) -> $b26.$b.1
// [Wasm] Get Local name Insn(iref=%33) -> $%33
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%33), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%33) -> $%33
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b26, bpref=$b.1), index=0, width=@32), val=Insn(iref=%34))
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.1) -> $b26.$b.1
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b26, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering control Jump(target=b26, args=[Insn(iref=%36), BlockParam(bref=b26, bpref=$b.1), BlockParam(bref=b26, bpref=$b.2), BlockParam(bref=b26, bpref=$b.3), BlockParam(bref=b26, bpref=$b.4), BlockParam(bref=b26, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.1) -> $b26.$b.1
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.1) -> $b26.$b.1
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.2) -> $b26.$b.2
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.2) -> $b26.$b.2
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.3) -> $b26.$b.3
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.3) -> $b26.$b.3
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.4) -> $b26.$b.4
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.4) -> $b26.$b.4
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.5) -> $b26.$b.5
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.5) -> $b26.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b26, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.1) -> $b26.$b.1
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[BlockParam(bref=b26, bpref=$b.2), Insn(iref=%38), BlockParam(bref=b26, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.2) -> $b26.$b.2
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b26, bpref=$b.5), index=0, width=@32), val=Int32(val=0))
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.5) -> $b26.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b26, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.1) -> $b26.$b.1
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%41), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b26, bpref=$b.1), index=0, width=@32), val=Insn(iref=%42))
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.1) -> $b26.$b.1
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b26, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Get Local name Insn(iref=%44) -> $%44
// [Wasm] Lowering control Jump(target=b26, args=[Insn(iref=%44), BlockParam(bref=b26, bpref=$b.1), BlockParam(bref=b26, bpref=$b.2), BlockParam(bref=b26, bpref=$b.3), BlockParam(bref=b26, bpref=$b.4), BlockParam(bref=b26, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%44) -> $%44
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.1) -> $b26.$b.1
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.1) -> $b26.$b.1
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.2) -> $b26.$b.2
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.2) -> $b26.$b.2
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.3) -> $b26.$b.3
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.3) -> $b26.$b.3
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.4) -> $b26.$b.4
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.4) -> $b26.$b.4
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.5) -> $b26.$b.5
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.5) -> $b26.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b26, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.1) -> $b26.$b.1
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%31), BlockParam(bref=b26, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering control Branch(cond=Insn(iref=%32), t=b31, t_args=[], f=b32, f_args=[])
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b26, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Lowering control Jump(target=b26, args=[Insn(iref=%46), BlockParam(bref=b26, bpref=$b.1), BlockParam(bref=b26, bpref=$b.2), BlockParam(bref=b26, bpref=$b.3), BlockParam(bref=b26, bpref=$b.4), BlockParam(bref=b26, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.1) -> $b26.$b.1
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.1) -> $b26.$b.1
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.2) -> $b26.$b.2
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.2) -> $b26.$b.2
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.3) -> $b26.$b.3
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.3) -> $b26.$b.3
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.4) -> $b26.$b.4
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.4) -> $b26.$b.4
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.5) -> $b26.$b.5
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.5) -> $b26.$b.5
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b26, bpref=$b.2), offset=BlockParam(bref=b26, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.2) -> $b26.$b.2
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b26, bpref=$b.4), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.4) -> $b26.$b.4
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%28), Insn(iref=%29)])
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering control Branch(cond=Insn(iref=%30), t=b29, t_args=[], f=b30, f_args=[])
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b7, bpref=$b.0), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Load(ty=Bool, ma=Field(ty=Bool, val=BlockParam(bref=b7, bpref=$b.0), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Call(ty=Unit, f=f10, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%7)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%7), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%10), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering control Jump(target=b7, args=[BlockParam(bref=b14, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.0) -> $b14.$b.0
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Bool]), mref=m13, fills=[Field(index=0, val=Insn(iref=%21)), Field(index=1, val=Bool(val=true))])
// [Wasm] Get Local name Mem(fref=f10, mref=m13) -> $f10.m13
// [Wasm] Get Local name Mem(fref=f10, mref=m13) -> $f10.m13
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name Mem(fref=f10, mref=m13) -> $f10.m13
// [Wasm] Lowering control Jump(target=b14, args=[Mem(fref=f10, mref=m13)])
// [Wasm] Get Local name Mem(fref=f10, mref=m13) -> $f10.m13
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.0) -> $b14.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Bool]), mref=m14, fills=[Field(index=0, val=Insn(iref=%21)), Field(index=1, val=Bool(val=false))])
// [Wasm] Get Local name Mem(fref=f10, mref=m14) -> $f10.m14
// [Wasm] Get Local name Mem(fref=f10, mref=m14) -> $f10.m14
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name Mem(fref=f10, mref=m14) -> $f10.m14
// [Wasm] Lowering control Jump(target=b14, args=[Mem(fref=f10, mref=m14)])
// [Wasm] Get Local name Mem(fref=f10, mref=m14) -> $f10.m14
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.0) -> $b14.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f10, mref=m11), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f10, mref=m11) -> $f10.m11
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%18), Insn(iref=%19)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f10, mref=m11), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f10, mref=m11) -> $f10.m11
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f10, mref=m12), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f10, mref=m12) -> $f10.m12
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%22), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering control Branch(cond=Insn(iref=%23), t=b12, t_args=[], f=b13, f_args=[])
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering control Jump(target=b15, args=[BlockParam(bref=b35, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b35, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b26, bpref=$b.3), Int32(val=2)])
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.3) -> $b26.$b.3
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b26, bpref=$b.0), Insn(iref=%26)])
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Lowering control Branch(cond=Insn(iref=%27), t=b27, t_args=[], f=b28, f_args=[])
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Lowering control Jump(target=b36, args=[BlockParam(bref=b0, bpref=$b.1), Mem(fref=f10, mref=m11), BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.2), Insn(iref=%14), Mem(fref=f10, mref=m12)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Get Local name Mem(fref=f10, mref=m11) -> $f10.m11
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.1) -> $b26.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.2) -> $b26.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.3) -> $b26.$b.3
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.4) -> $b26.$b.4
// [Wasm] Get Local name Mem(fref=f10, mref=m12) -> $f10.m12
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.5) -> $b26.$b.5
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%4), Insn(iref=%11)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), offset=Insn(iref=%11), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m11, fills=[Init(val=BlockParam(bref=b0, bpref=$b.1))])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Mem(fref=f10, mref=m11) -> $f10.m11
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m12, fills=[Init(val=Int32(val=1))])
// [Wasm] Get Local name Mem(fref=f10, mref=m12) -> $f10.m12
// [Wasm] Lowering control Jump(target=b37, args=[])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b6, bpref=$b.0), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Load(ty=Bool, ma=Field(ty=Bool, val=BlockParam(bref=b6, bpref=$b.0), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b11, args=[])
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b62, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b62, bpref=$b.0) -> $b62.$b.0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b62, args=[BlockParam(bref=b58, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Get Local name BlockParam(bref=b62, bpref=$b.0) -> $b62.$b.0
// [Wasm] Lowering control Jump(target=b58, args=[BlockParam(bref=b54, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.0) -> $b54.$b.0
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Bool]), mref=m48, fills=[Field(index=0, val=Insn(iref=%51)), Field(index=1, val=Bool(val=true))])
// [Wasm] Get Local name Mem(fref=f10, mref=m48) -> $f10.m48
// [Wasm] Get Local name Mem(fref=f10, mref=m48) -> $f10.m48
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Get Local name Mem(fref=f10, mref=m48) -> $f10.m48
// [Wasm] Lowering control Jump(target=b54, args=[Mem(fref=f10, mref=m48)])
// [Wasm] Get Local name Mem(fref=f10, mref=m48) -> $f10.m48
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.0) -> $b54.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Bool]), mref=m49, fills=[Field(index=0, val=Insn(iref=%51)), Field(index=1, val=Bool(val=false))])
// [Wasm] Get Local name Mem(fref=f10, mref=m49) -> $f10.m49
// [Wasm] Get Local name Mem(fref=f10, mref=m49) -> $f10.m49
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Get Local name Mem(fref=f10, mref=m49) -> $f10.m49
// [Wasm] Lowering control Jump(target=b54, args=[Mem(fref=f10, mref=m49)])
// [Wasm] Get Local name Mem(fref=f10, mref=m49) -> $f10.m49
// [Wasm] Get Local name BlockParam(bref=b54, bpref=$b.0) -> $b54.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%55), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%55) -> $%55
// [Wasm] Get Local name Insn(iref=%61) -> $%61
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%55), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%55) -> $%55
// [Wasm] Get Local name Insn(iref=%62) -> $%62
// [Wasm] Lowering insn Call(ty=Unit, f=f8, args=[Insn(iref=%61), Insn(iref=%55), Insn(iref=%62), BlockParam(bref=b0, bpref=$b.0), Mem(fref=f10, mref=m47)])
// [Wasm] Get Local name Insn(iref=%61) -> $%61
// [Wasm] Get Local name Insn(iref=%55) -> $%55
// [Wasm] Get Local name Insn(iref=%62) -> $%62
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Mem(fref=f10, mref=m47) -> $f10.m47
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%51), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Get Local name Insn(iref=%64) -> $%64
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%51), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Get Local name Insn(iref=%65) -> $%65
// [Wasm] Lowering insn Call(ty=Unit, f=f8, args=[Insn(iref=%64), Insn(iref=%51), Insn(iref=%65), BlockParam(bref=b0, bpref=$b.0), Mem(fref=f10, mref=m47)])
// [Wasm] Get Local name Insn(iref=%64) -> $%64
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Get Local name Insn(iref=%65) -> $%65
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Mem(fref=f10, mref=m47) -> $f10.m47
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%58), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%58) -> $%58
// [Wasm] Get Local name Insn(iref=%67) -> $%67
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%58), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%58) -> $%58
// [Wasm] Get Local name Insn(iref=%68) -> $%68
// [Wasm] Lowering insn Call(ty=Unit, f=f8, args=[Insn(iref=%67), Insn(iref=%58), Insn(iref=%68), BlockParam(bref=b0, bpref=$b.0), Mem(fref=f10, mref=m47)])
// [Wasm] Get Local name Insn(iref=%67) -> $%67
// [Wasm] Get Local name Insn(iref=%58) -> $%58
// [Wasm] Get Local name Insn(iref=%68) -> $%68
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Mem(fref=f10, mref=m47) -> $f10.m47
// [Wasm] Lowering insn Call(ty=Unit, f=f8, args=[Insn(iref=%55), Insn(iref=%51), Insn(iref=%58), BlockParam(bref=b0, bpref=$b.0), Mem(fref=f10, mref=m47)])
// [Wasm] Get Local name Insn(iref=%55) -> $%55
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Get Local name Insn(iref=%58) -> $%58
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Mem(fref=f10, mref=m47) -> $f10.m47
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f10, mref=m47), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f10, mref=m47) -> $f10.m47
// [Wasm] Get Local name Insn(iref=%71) -> $%71
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%71), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%71) -> $%71
// [Wasm] Get Local name Insn(iref=%72) -> $%72
// [Wasm] Lowering control Branch(cond=Insn(iref=%72), t=b52, t_args=[], f=b53, f_args=[])
// [Wasm] Get Local name Insn(iref=%72) -> $%72
// [Wasm] Lowering control Jump(target=b58, args=[BlockParam(bref=b57, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b57, bpref=$b.0) -> $b57.$b.0
// [Wasm] Get Local name BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Bool]), mref=m50, fills=[Field(index=0, val=Insn(iref=%51)), Field(index=1, val=Bool(val=true))])
// [Wasm] Get Local name Mem(fref=f10, mref=m50) -> $f10.m50
// [Wasm] Get Local name Mem(fref=f10, mref=m50) -> $f10.m50
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Get Local name Mem(fref=f10, mref=m50) -> $f10.m50
// [Wasm] Lowering control Jump(target=b57, args=[Mem(fref=f10, mref=m50)])
// [Wasm] Get Local name Mem(fref=f10, mref=m50) -> $f10.m50
// [Wasm] Get Local name BlockParam(bref=b57, bpref=$b.0) -> $b57.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Bool]), mref=m51, fills=[Field(index=0, val=Insn(iref=%51)), Field(index=1, val=Bool(val=false))])
// [Wasm] Get Local name Mem(fref=f10, mref=m51) -> $f10.m51
// [Wasm] Get Local name Mem(fref=f10, mref=m51) -> $f10.m51
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Get Local name Mem(fref=f10, mref=m51) -> $f10.m51
// [Wasm] Lowering control Jump(target=b57, args=[Mem(fref=f10, mref=m51)])
// [Wasm] Get Local name Mem(fref=f10, mref=m51) -> $f10.m51
// [Wasm] Get Local name BlockParam(bref=b57, bpref=$b.0) -> $b57.$b.0
// [Wasm] Lowering insn Call(ty=Unit, f=f8, args=[Insn(iref=%55), Insn(iref=%51), Insn(iref=%58), BlockParam(bref=b0, bpref=$b.0), Mem(fref=f10, mref=m47)])
// [Wasm] Get Local name Insn(iref=%55) -> $%55
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Get Local name Insn(iref=%58) -> $%58
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Mem(fref=f10, mref=m47) -> $f10.m47
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f10, mref=m47), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f10, mref=m47) -> $f10.m47
// [Wasm] Get Local name Insn(iref=%76) -> $%76
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%76), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%76) -> $%76
// [Wasm] Get Local name Insn(iref=%77) -> $%77
// [Wasm] Lowering control Branch(cond=Insn(iref=%77), t=b55, t_args=[], f=b56, f_args=[])
// [Wasm] Get Local name Insn(iref=%77) -> $%77
// [Wasm] Lowering insn Op(ty=Int32, op=Div, args=[Insn(iref=%48), Int32(val=4)])
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Get Local name Insn(iref=%53) -> $%53
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%53), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%53) -> $%53
// [Wasm] Get Local name Insn(iref=%54) -> $%54
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%54)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%54) -> $%54
// [Wasm] Get Local name Insn(iref=%55) -> $%55
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%53), Int32(val=3)])
// [Wasm] Get Local name Insn(iref=%53) -> $%53
// [Wasm] Get Local name Insn(iref=%57) -> $%57
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%57)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%57) -> $%57
// [Wasm] Get Local name Insn(iref=%58) -> $%58
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%48), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=50), Insn(iref=%59)])
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Get Local name Insn(iref=%60) -> $%60
// [Wasm] Lowering control Branch(cond=Insn(iref=%60), t=b50, t_args=[], f=b51, f_args=[])
// [Wasm] Get Local name Insn(iref=%60) -> $%60
// [Wasm] Lowering control Jump(target=b62, args=[BlockParam(bref=b61, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b61, bpref=$b.0) -> $b61.$b.0
// [Wasm] Get Local name BlockParam(bref=b62, bpref=$b.0) -> $b62.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Bool]), mref=m52, fills=[Field(index=0, val=Insn(iref=%51)), Field(index=1, val=Bool(val=true))])
// [Wasm] Get Local name Mem(fref=f10, mref=m52) -> $f10.m52
// [Wasm] Get Local name Mem(fref=f10, mref=m52) -> $f10.m52
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Get Local name Mem(fref=f10, mref=m52) -> $f10.m52
// [Wasm] Lowering control Jump(target=b61, args=[Mem(fref=f10, mref=m52)])
// [Wasm] Get Local name Mem(fref=f10, mref=m52) -> $f10.m52
// [Wasm] Get Local name BlockParam(bref=b61, bpref=$b.0) -> $b61.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Bool]), mref=m53, fills=[Field(index=0, val=Insn(iref=%51)), Field(index=1, val=Bool(val=false))])
// [Wasm] Get Local name Mem(fref=f10, mref=m53) -> $f10.m53
// [Wasm] Get Local name Mem(fref=f10, mref=m53) -> $f10.m53
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Get Local name Mem(fref=f10, mref=m53) -> $f10.m53
// [Wasm] Lowering control Jump(target=b61, args=[Mem(fref=f10, mref=m53)])
// [Wasm] Get Local name Mem(fref=f10, mref=m53) -> $f10.m53
// [Wasm] Get Local name BlockParam(bref=b61, bpref=$b.0) -> $b61.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f10, mref=m47), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f10, mref=m47) -> $f10.m47
// [Wasm] Get Local name Insn(iref=%80) -> $%80
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%80), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%80) -> $%80
// [Wasm] Get Local name Insn(iref=%81) -> $%81
// [Wasm] Lowering control Branch(cond=Insn(iref=%81), t=b59, t_args=[], f=b60, f_args=[])
// [Wasm] Get Local name Insn(iref=%81) -> $%81
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m47, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f10, mref=m47) -> $f10.m47
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Lowering insn Op(ty=Int32, op=Div, args=[Insn(iref=%48), Int32(val=4)])
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Insn(iref=%49), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Get Local name Insn(iref=%50) -> $%50
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%50)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%50) -> $%50
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=8), Insn(iref=%48)])
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Get Local name Insn(iref=%52) -> $%52
// [Wasm] Lowering control Branch(cond=Insn(iref=%52), t=b48, t_args=[], f=b49, f_args=[])
// [Wasm] Get Local name Insn(iref=%52) -> $%52
// [Wasm] Lowering control Jump(target=b47, args=[])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%0), Int32(val=16)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f10, fpref=$f.0), FnParam(fref=f10, fpref=$f.1), FnParam(fref=f10, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f10, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f10, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f10, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f10, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f10, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f10, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%41) -> $%41
// [Wasm] Local Mem(fref=f10, mref=m51) -> $f10.m51
// [Wasm] Local Insn(iref=%33) -> $%33
// [Wasm] Local Insn(iref=%76) -> $%76
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%27) -> $%27
// [Wasm] Local BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Local Insn(iref=%59) -> $%59
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%81) -> $%81
// [Wasm] Local Mem(fref=f10, mref=m52) -> $f10.m52
// [Wasm] Local Insn(iref=%49) -> $%49
// [Wasm] Local Insn(iref=%42) -> $%42
// [Wasm] Local BlockParam(bref=b26, bpref=$b.4) -> $b26.$b.4
// [Wasm] Local Insn(iref=%65) -> $%65
// [Wasm] Local Insn(iref=%68) -> $%68
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local Mem(fref=f10, mref=m47) -> $f10.m47
// [Wasm] Local Insn(iref=%31) -> $%31
// [Wasm] Local Insn(iref=%64) -> $%64
// [Wasm] Local Mem(fref=f10, mref=m53) -> $f10.m53
// [Wasm] Local Mem(fref=f10, mref=m48) -> $f10.m48
// [Wasm] Local Insn(iref=%38) -> $%38
// [Wasm] Local Insn(iref=%53) -> $%53
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local Mem(fref=f10, mref=m12) -> $f10.m12
// [Wasm] Local Insn(iref=%54) -> $%54
// [Wasm] Local Mem(fref=f10, mref=m11) -> $f10.m11
// [Wasm] Local Insn(iref=%67) -> $%67
// [Wasm] Local Insn(iref=%60) -> $%60
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local BlockParam(bref=b62, bpref=$b.0) -> $b62.$b.0
// [Wasm] Local Mem(fref=f10, mref=m50) -> $f10.m50
// [Wasm] Local BlockParam(bref=b61, bpref=$b.0) -> $b61.$b.0
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%55) -> $%55
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%71) -> $%71
// [Wasm] Local Insn(iref=%48) -> $%48
// [Wasm] Local Insn(iref=%34) -> $%34
// [Wasm] Local Insn(iref=%36) -> $%36
// [Wasm] Local Mem(fref=f10, mref=m14) -> $f10.m14
// [Wasm] Local BlockParam(bref=b26, bpref=$b.1) -> $b26.$b.1
// [Wasm] Local BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Local BlockParam(bref=b57, bpref=$b.0) -> $b57.$b.0
// [Wasm] Local Insn(iref=%50) -> $%50
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%51) -> $%51
// [Wasm] Local Insn(iref=%77) -> $%77
// [Wasm] Local BlockParam(bref=b14, bpref=$b.0) -> $b14.$b.0
// [Wasm] Local BlockParam(bref=b58, bpref=$b.0) -> $b58.$b.0
// [Wasm] Local Insn(iref=%80) -> $%80
// [Wasm] Local Insn(iref=%52) -> $%52
// [Wasm] Local Insn(iref=%44) -> $%44
// [Wasm] Local Insn(iref=%32) -> $%32
// [Wasm] Local BlockParam(bref=b26, bpref=$b.2) -> $b26.$b.2
// [Wasm] Local Insn(iref=%58) -> $%58
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%57) -> $%57
// [Wasm] Local Insn(iref=%62) -> $%62
// [Wasm] Local Mem(fref=f10, mref=m13) -> $f10.m13
// [Wasm] Local Mem(fref=f10, mref=m49) -> $f10.m49
// [Wasm] Local Insn(iref=%46) -> $%46
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local BlockParam(bref=b54, bpref=$b.0) -> $b54.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b26, bpref=$b.5) -> $b26.$b.5
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%29) -> $%29
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%61) -> $%61
// [Wasm] Local BlockParam(bref=b26, bpref=$b.3) -> $b26.$b.3
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%72) -> $%72
// [Wasm] Local Insn(iref=%30) -> $%30
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Lowered function quick_sort.212 to wasm
// [Wasm] Lowering function input.214
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_int", args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), offset=BlockParam(bref=b0, bpref=$b.0), width=@32), val=Insn(iref=%2))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%4), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f11, fpref=$f.0), FnParam(fref=f11, fpref=$f.1), FnParam(fref=f11, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f11, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f11, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f11, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f11, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f11, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f11, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function input.214 to wasm
// [Wasm] Lowering function f.206
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b7, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[BlockParam(bref=b7, bpref=$b.1), BlockParam(bref=b7, bpref=$b.0), Insn(iref=%11)])
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering control Jump(target=b7, args=[Insn(iref=%11), BlockParam(bref=b7, bpref=$b.1), BlockParam(bref=b7, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.2) -> $b7.$b.2
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.2) -> $b7.$b.2
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%3), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b13, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b13, args=[BlockParam(bref=b12, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b12, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b7, bpref=$b.1), offset=BlockParam(bref=b7, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b7, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b7, bpref=$b.1), offset=Insn(iref=%7), width=@32))
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%8), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%6), Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Branch(cond=Insn(iref=%10), t=b10, t_args=[], f=b11, f_args=[])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Jump(target=b13, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Int32(val=1), BlockParam(bref=b7, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.2) -> $b7.$b.2
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%4), BlockParam(bref=b7, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Branch(cond=Insn(iref=%5), t=b8, t_args=[], f=b9, f_args=[])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b14, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.2) -> $b7.$b.2
// [Wasm] Lowering control Jump(target=b15, args=[])
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.3), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f3, fpref=$f.0), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.3) -> $$f.3
// [Wasm] Local BlockParam(bref=b7, bpref=$b.2) -> $b7.$b.2
// [Wasm] Local BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Local BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Lowered function f.206 to wasm
// [Wasm] Lowering function sort_2.210
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[FnParam(fref=f7, fpref=$f.2), FnParam(fref=f7, fpref=$f.0), FnParam(fref=f7, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.1) -> $$f.1
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f7, fpref=$f.3), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%5), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f7, fpref=$f.3), index=0, width=@32), val=Insn(iref=%6))
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f7, fpref=$f.2), offset=FnParam(fref=f7, fpref=$f.1), width=@32))
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f7, fpref=$f.2), offset=FnParam(fref=f7, fpref=$f.0), width=@32))
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%1), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%0), Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.3) -> $$f.3
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function sort_2.210 to wasm
// [KnfOpt] func_tre: swap.1 false
// [KnfOpt] func_tre: output.9 true
// [KnfOpt] func_tre: insertion_sort.20 false
// [KnfOpt] func_tre: g.24 true
// [KnfOpt] func_tre: f.39 true
// [KnfOpt] func_tre: partition.48 false
// [KnfOpt] func_tre: aux.64 true
// [KnfOpt] func_tre: choose_pivot.100 false
// [KnfOpt] func_tre: sort_2.125 false
// [KnfOpt] func_tre: sort_3.138 false
// [KnfOpt] func_tre: quick_sort.166 false
// [KnfOpt] func_tre: sort.181 false
// [KnfOpt] func_tre: main.185 false
// [KnfOpt] func_tre: input.189 true
// [KnfOpt] freq: {swap.1: Many(5), output.9: Many(2), insertion_sort.20: Once, g.24: Many(2), f.39: Many(2), partition.48: Once, aux.64: Many(2), choose_pivot.100: Once, sort_2.125: Many(3), sort_3.138: Many(4), quick_sort.166: Many(3), sort.181: Once, main.185: Once, input.189: Many(2)}
// [KnfOpt] Inline threshold 17
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision output.9 rejected
// [KnfOpt] Inline threshold 9
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision swap.1 rejected
// [KnfOpt] Inline threshold 31
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision g.24 rejected
// [KnfOpt] Inline threshold 31
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision g.24 rejected
// [KnfOpt] Inline threshold 13
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision f.39 rejected
// [KnfOpt] Inline threshold 13
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision f.39 rejected
// [KnfOpt] Inline threshold 9
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision swap.1 rejected
// [KnfOpt] Inline threshold 51
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision aux.64 rejected
// [KnfOpt] Inline threshold 9
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision swap.1 rejected
// [KnfOpt] Inline threshold 51
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision aux.64 rejected
// [KnfOpt] Inline threshold 51
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision aux.64 rejected
// [KnfOpt] Inline threshold 51
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision aux.64 rejected
// [KnfOpt] Inline threshold 9
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision swap.1 rejected
// [KnfOpt] Inline threshold 9
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision swap.1 rejected
// [KnfOpt] Inline threshold 23
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sort_2.125 rejected
// [KnfOpt] Inline threshold 23
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sort_2.125 rejected
// [KnfOpt] Inline threshold 23
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sort_2.125 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sort_3.138 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sort_3.138 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sort_3.138 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sort_3.138 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sort_3.138 rejected
// [KnfOpt] Inline threshold 51
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision insertion_sort.20 rejected
// [KnfOpt] Inline threshold 123
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision choose_pivot.100 rejected
// [KnfOpt] Inline threshold 101
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision partition.48 rejected
// [KnfOpt] Inline threshold 19
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision quick_sort.166 rejected
// [KnfOpt] Inline threshold 19
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision quick_sort.166 rejected
// [KnfOpt] Inline threshold 19
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision quick_sort.166 rejected
// [KnfOpt] Inline threshold 15
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision input.189 rejected
// [KnfOpt] Inline threshold 15
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision input.189 rejected
// [KnfOpt] Inline threshold 3
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sort.181 accepted
// [KnfOpt] Inline threshold 17
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision output.9 rejected
// [KnfOpt] Knf inline Some(sort) let _199: Unit = Unit
// [KnfOpt] let _200: Int = Int(0)
// [KnfOpt] Apply(output.9, [arr.188, _200, len.186, ])
// [KnfOpt] Inline threshold 17
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision output.9 rejected
// [KnfOpt] Numbers of let rec: 13 13 0
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %6: Call(ty=Unit, f=f1, args=[FnParam(fref=f1, fpref=$f.0), Insn(iref=%5), FnParam(fref=f1, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %11: Call(ty=Unit, f=f10, args=[FnParam(fref=f10, fpref=$f.0), Insn(iref=%10), FnParam(fref=f10, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %5: Call(ty=Unit, f=f11, args=[Insn(iref=%4), FnParam(fref=f11, fpref=$f.1), FnParam(fref=f11, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %21: Call(ty=Unit, f=f5, args=[Insn(iref=%20), FnParam(fref=f5, fpref=$f.1), FnParam(fref=f5, fpref=$f.2), FnParam(fref=f5, fpref=$f.3), FnParam(fref=f5, fpref=$f.4), FnParam(fref=f5, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %19: Call(ty=Unit, f=f5, args=[Insn(iref=%18), FnParam(fref=f5, fpref=$f.1), FnParam(fref=f5, fpref=$f.2), FnParam(fref=f5, fpref=$f.3), FnParam(fref=f5, fpref=$f.4), FnParam(fref=f5, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %11: Call(ty=Unit, f=f5, args=[Insn(iref=%10), FnParam(fref=f5, fpref=$f.1), FnParam(fref=f5, fpref=$f.2), FnParam(fref=f5, fpref=$f.3), FnParam(fref=f5, fpref=$f.4), FnParam(fref=f5, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %10: Call(ty=Unit, f=f2, args=[Insn(iref=%9), FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %4: Call(ty=Unit, f=f3, args=[Insn(iref=%3), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3)])
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f12: Once, f4: Once, f8: Multiple, f9: Once, f0: Multiple, f26: Once, f1: Once, f10: Multiple, f11: Once, f5: Once, f2: Once, f3: Once, f7: Multiple})
// [CoreOpt] post splitting: Insn(iref=%6) -> BlockParam(bref=b4, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%6) -> BlockParam(bref=b4, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%6) -> BlockParam(bref=b4, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%6) -> BlockParam(bref=b4, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%6) -> BlockParam(bref=b7, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%6) -> BlockParam(bref=b7, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%6) -> BlockParam(bref=b7, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%6) -> BlockParam(bref=b7, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%6) -> BlockParam(bref=b7, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%6) -> BlockParam(bref=b7, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] partition.207 is inlining Call(ty=Unit, f=f5, args=[FnParam(fref=f6, fpref=$f.2), Mem(fref=f6, mref=m0), FnParam(fref=f6, fpref=$f.0), FnParam(fref=f6, fpref=$f.3), Insn(iref=%3), Mem(fref=f6, mref=m1)])
// [CoreOpt] shifted callee .fn aux.208 #f5 : fn(int32, array[int32], array[int32], int32, int32, array[int32]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b26 {
// [CoreOpt]   .bb #b15 (int32, array[int32], array[int32], int32, int32, array[int32]) {
// [CoreOpt]     let %15: int32 = sub($b15.3, 2)
// [CoreOpt]     let %16: bool = le($b15.0, %15)
// [CoreOpt]     br %16 b16() b17()
// [CoreOpt]   }
// [CoreOpt]   .bb #b16 () {
// [CoreOpt]     let %17: int32 = load int32 offset($b15.2, $b15.0 * @32)
// [CoreOpt]     let %18: int32 = sub($b15.4, 1)
// [CoreOpt]     let %19: bool = le(%17, %18)
// [CoreOpt]     br %19 b18() b19()
// [CoreOpt]   }
// [CoreOpt]   .bb #b17 () {
// [CoreOpt]     jump b24(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b18 () {
// [CoreOpt]     let %20: int32 = load int32 field($b15.1, 0 * @32)
// [CoreOpt]     let %21: bool = eq(%20, $b15.0)
// [CoreOpt]     br %21 b20() b21()
// [CoreOpt]   }
// [CoreOpt]   .bb #b19 () {
// [CoreOpt]     let %35: int32 = add($b15.0, 1)
// [CoreOpt]     jump b15(%35, $b15.1, $b15.2, $b15.3, $b15.4, $b15.5)
// [CoreOpt]   }
// [CoreOpt]   .bb #b20 () {
// [CoreOpt]     let %22: int32 = load int32 field($b15.1, 0 * @32)
// [CoreOpt]     let %23: int32 = add(%22, 1)
// [CoreOpt]     let _ = store int32 field($b15.1, 0 * @32) <- %23
// [CoreOpt]     let %25: int32 = add($b15.0, 1)
// [CoreOpt]     jump b15(%25, $b15.1, $b15.2, $b15.3, $b15.4, $b15.5)
// [CoreOpt]   }
// [CoreOpt]   .bb #b21 () {
// [CoreOpt]     let %27: int32 = load int32 field($b15.1, 0 * @32)
// [CoreOpt]     let %28: unit = call f0($b15.2, %27, $b15.0)
// [CoreOpt]     let _ = store int32 field($b15.5, 0 * @32) <- 0
// [CoreOpt]     let %30: int32 = load int32 field($b15.1, 0 * @32)
// [CoreOpt]     let %31: int32 = add(%30, 1)
// [CoreOpt]     let _ = store int32 field($b15.1, 0 * @32) <- %31
// [CoreOpt]     let %33: int32 = add($b15.0, 1)
// [CoreOpt]     jump b15(%33, $b15.1, $b15.2, $b15.3, $b15.4, $b15.5)
// [CoreOpt]   }
// [CoreOpt]   .bb #b22 (unit) {
// [CoreOpt]     jump b23($b22.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b23 (unit) {
// [CoreOpt]     jump b24($b23.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b24 (unit) {
// [CoreOpt]     return $b24.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b25 pre #Some(b26) header #b15 {
// [CoreOpt]     .block #b21
// [CoreOpt]     .block #b19
// [CoreOpt]     .block #b23
// [CoreOpt]     .block #b24
// [CoreOpt]     .block #b16
// [CoreOpt]     .block #b20
// [CoreOpt]     .block #b17
// [CoreOpt]     .block #b18
// [CoreOpt]     .block #b22
// [CoreOpt]   }
// [CoreOpt]   .bb #b26 () {
// [CoreOpt]     jump b25($f0, $f1, $f2, $f3, $f4, $f5)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] quick_sort.212 is inlining Call(ty=Tuple(fields=[Int32, Bool]), f=f6, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%4), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [CoreOpt] shifted callee .fn partition.207 #f6 : fn(array[int32], int32, int32, int32) -> (int32, bool)
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b11 {
// [CoreOpt]   .bb #b11 () {
// [CoreOpt]     let %11: int32 = sub($f3, 1)
// [CoreOpt]     let %12: unit = call f0($f0, $f1, %11)
// [CoreOpt]     let %13: int32 = sub($f3, 1)
// [CoreOpt]     let %14: int32 = load int32 offset($f0, %13 * @32)
// [CoreOpt]     let _ = alloc <m11: array[int32] heap(1)> <- [..] = $f2
// [CoreOpt]     let _ = alloc <m12: array[int32] heap(1)> <- [..] = 1
// [CoreOpt]     jump b37()
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 () {
// [CoreOpt]     let _ = alloc <m13: (int32, bool) heap(2)> <- [0] = %21, [1] = true
// [CoreOpt]     jump b14(f6.m13)
// [CoreOpt]   }
// [CoreOpt]   .bb #b13 () {
// [CoreOpt]     let _ = alloc <m14: (int32, bool) heap(2)> <- [0] = %21, [1] = false
// [CoreOpt]     jump b14(f6.m14)
// [CoreOpt]   }
// [CoreOpt]   .bb #b14 ((int32, bool)) {
// [CoreOpt]     return $b14.0
// [CoreOpt]   }
// [CoreOpt]   .bb #b15 (unit) {
// [CoreOpt]     let %18: int32 = load int32 field(f6.m11, 0 * @32)
// [CoreOpt]     let %19: int32 = sub($f3, 1)
// [CoreOpt]     let %20: unit = call f0($f0, %18, %19)
// [CoreOpt]     let %21: int32 = load int32 field(f6.m11, 0 * @32)
// [CoreOpt]     let %22: int32 = load int32 field(f6.m12, 0 * @32)
// [CoreOpt]     let %23: bool = eq(%22, 1)
// [CoreOpt]     br %23 b12() b13()
// [CoreOpt]   }
// [CoreOpt]   .bb #b26 (int32, array[int32], array[int32], int32, int32, array[int32]) {
// [CoreOpt]     let %26: int32 = sub($b26.3, 2)
// [CoreOpt]     let %27: bool = le($b26.0, %26)
// [CoreOpt]     br %27 b27() b28()
// [CoreOpt]   }
// [CoreOpt]   .bb #b27 () {
// [CoreOpt]     let %28: int32 = load int32 offset($b26.2, $b26.0 * @32)
// [CoreOpt]     let %29: int32 = sub($b26.4, 1)
// [CoreOpt]     let %30: bool = le(%28, %29)
// [CoreOpt]     br %30 b29() b30()
// [CoreOpt]   }
// [CoreOpt]   .bb #b28 () {
// [CoreOpt]     jump b35(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b29 () {
// [CoreOpt]     let %31: int32 = load int32 field($b26.1, 0 * @32)
// [CoreOpt]     let %32: bool = eq(%31, $b26.0)
// [CoreOpt]     br %32 b31() b32()
// [CoreOpt]   }
// [CoreOpt]   .bb #b30 () {
// [CoreOpt]     let %46: int32 = add($b26.0, 1)
// [CoreOpt]     jump b26(%46, $b26.1, $b26.2, $b26.3, $b26.4, $b26.5)
// [CoreOpt]   }
// [CoreOpt]   .bb #b31 () {
// [CoreOpt]     let %33: int32 = load int32 field($b26.1, 0 * @32)
// [CoreOpt]     let %34: int32 = add(%33, 1)
// [CoreOpt]     let _ = store int32 field($b26.1, 0 * @32) <- %34
// [CoreOpt]     let %36: int32 = add($b26.0, 1)
// [CoreOpt]     jump b26(%36, $b26.1, $b26.2, $b26.3, $b26.4, $b26.5)
// [CoreOpt]   }
// [CoreOpt]   .bb #b32 () {
// [CoreOpt]     let %38: int32 = load int32 field($b26.1, 0 * @32)
// [CoreOpt]     let %39: unit = call f0($b26.2, %38, $b26.0)
// [CoreOpt]     let _ = store int32 field($b26.5, 0 * @32) <- 0
// [CoreOpt]     let %41: int32 = load int32 field($b26.1, 0 * @32)
// [CoreOpt]     let %42: int32 = add(%41, 1)
// [CoreOpt]     let _ = store int32 field($b26.1, 0 * @32) <- %42
// [CoreOpt]     let %44: int32 = add($b26.0, 1)
// [CoreOpt]     jump b26(%44, $b26.1, $b26.2, $b26.3, $b26.4, $b26.5)
// [CoreOpt]   }
// [CoreOpt]   .bb #b33 (unit) {
// [CoreOpt]     jump b34($b33.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b34 (unit) {
// [CoreOpt]     jump b35($b34.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b35 (unit) {
// [CoreOpt]     jump b15($b35.0)
// [CoreOpt]   }
// [CoreOpt]   .loop #b36 pre #Some(b37) header #b26 {
// [CoreOpt]     .block #b32
// [CoreOpt]     .block #b30
// [CoreOpt]     .block #b34
// [CoreOpt]     .block #b35
// [CoreOpt]     .block #b27
// [CoreOpt]     .block #b31
// [CoreOpt]     .block #b28
// [CoreOpt]     .block #b29
// [CoreOpt]     .block #b33
// [CoreOpt]   }
// [CoreOpt]   .bb #b37 () {
// [CoreOpt]     jump b36($f2, f6.m11, $f0, $f3, %14, f6.m12)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] quick_sort.212 is inlining Call(ty=Tuple(fields=[Int32, Bool]), f=f9, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [CoreOpt] shifted callee .fn choose_pivot.209 #f9 : fn(array[int32], int32, int32) -> (int32, bool)
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b47 {
// [CoreOpt]   .bb #b47 () {
// [CoreOpt]     let _ = alloc <m47: array[int32] heap(1)> <- [..] = 0
// [CoreOpt]     let %48: int32 = sub($f2, $f1)
// [CoreOpt]     let %49: int32 = div(%48, 4)
// [CoreOpt]     let %50: int32 = mul(%49, 2)
// [CoreOpt]     let %51: int32 = add($f1, %50)
// [CoreOpt]     let %52: bool = le(8, %48)
// [CoreOpt]     br %52 b48() b49()
// [CoreOpt]   }
// [CoreOpt]   .bb #b48 () {
// [CoreOpt]     let %53: int32 = div(%48, 4)
// [CoreOpt]     let %54: int32 = mul(%53, 1)
// [CoreOpt]     let %55: int32 = add($f1, %54)
// [CoreOpt]     let %56: int32 = div(%48, 4)
// [CoreOpt]     let %57: int32 = mul(%56, 3)
// [CoreOpt]     let %58: int32 = add($f1, %57)
// [CoreOpt]     let %59: int32 = sub(%48, 1)
// [CoreOpt]     let %60: bool = le(50, %59)
// [CoreOpt]     br %60 b50() b51()
// [CoreOpt]   }
// [CoreOpt]   .bb #b49 () {
// [CoreOpt]     let %80: int32 = load int32 field(f9.m47, 0 * @32)
// [CoreOpt]     let %81: bool = eq(%80, 0)
// [CoreOpt]     br %81 b59() b60()
// [CoreOpt]   }
// [CoreOpt]   .bb #b50 () {
// [CoreOpt]     let %61: int32 = sub(%55, 1)
// [CoreOpt]     let %62: int32 = add(%55, 1)
// [CoreOpt]     let %63: unit = call f8(%61, %55, %62, $f0, f9.m47)
// [CoreOpt]     let %64: int32 = sub(%51, 1)
// [CoreOpt]     let %65: int32 = add(%51, 1)
// [CoreOpt]     let %66: unit = call f8(%64, %51, %65, $f0, f9.m47)
// [CoreOpt]     let %67: int32 = sub(%58, 1)
// [CoreOpt]     let %68: int32 = add(%58, 1)
// [CoreOpt]     let %69: unit = call f8(%67, %58, %68, $f0, f9.m47)
// [CoreOpt]     let %70: unit = call f8(%55, %51, %58, $f0, f9.m47)
// [CoreOpt]     let %71: int32 = load int32 field(f9.m47, 0 * @32)
// [CoreOpt]     let %72: bool = eq(%71, 0)
// [CoreOpt]     br %72 b52() b53()
// [CoreOpt]   }
// [CoreOpt]   .bb #b51 () {
// [CoreOpt]     let %75: unit = call f8(%55, %51, %58, $f0, f9.m47)
// [CoreOpt]     let %76: int32 = load int32 field(f9.m47, 0 * @32)
// [CoreOpt]     let %77: bool = eq(%76, 0)
// [CoreOpt]     br %77 b55() b56()
// [CoreOpt]   }
// [CoreOpt]   .bb #b52 () {
// [CoreOpt]     let _ = alloc <m48: (int32, bool) heap(2)> <- [0] = %51, [1] = true
// [CoreOpt]     jump b54(f9.m48)
// [CoreOpt]   }
// [CoreOpt]   .bb #b53 () {
// [CoreOpt]     let _ = alloc <m49: (int32, bool) heap(2)> <- [0] = %51, [1] = false
// [CoreOpt]     jump b54(f9.m49)
// [CoreOpt]   }
// [CoreOpt]   .bb #b54 ((int32, bool)) {
// [CoreOpt]     jump b58($b54.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b55 () {
// [CoreOpt]     let _ = alloc <m50: (int32, bool) heap(2)> <- [0] = %51, [1] = true
// [CoreOpt]     jump b57(f9.m50)
// [CoreOpt]   }
// [CoreOpt]   .bb #b56 () {
// [CoreOpt]     let _ = alloc <m51: (int32, bool) heap(2)> <- [0] = %51, [1] = false
// [CoreOpt]     jump b57(f9.m51)
// [CoreOpt]   }
// [CoreOpt]   .bb #b57 ((int32, bool)) {
// [CoreOpt]     jump b58($b57.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b58 ((int32, bool)) {
// [CoreOpt]     jump b62($b58.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b59 () {
// [CoreOpt]     let _ = alloc <m52: (int32, bool) heap(2)> <- [0] = %51, [1] = true
// [CoreOpt]     jump b61(f9.m52)
// [CoreOpt]   }
// [CoreOpt]   .bb #b60 () {
// [CoreOpt]     let _ = alloc <m53: (int32, bool) heap(2)> <- [0] = %51, [1] = false
// [CoreOpt]     jump b61(f9.m53)
// [CoreOpt]   }
// [CoreOpt]   .bb #b61 ((int32, bool)) {
// [CoreOpt]     jump b62($b61.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b62 ((int32, bool)) {
// [CoreOpt]     return $b62.0
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] f.206 is inlining Call(ty=Unit, f=f2, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [CoreOpt] shifted callee .fn g.205 #f2 : fn(int32, array[int32], int32) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b15 {
// [CoreOpt]   .bb #b7 (int32, array[int32], int32) {
// [CoreOpt]     let %4: int32 = add(1, $b7.2)
// [CoreOpt]     let %5: bool = le(%4, $b7.0)
// [CoreOpt]     br %5 b8() b9()
// [CoreOpt]   }
// [CoreOpt]   .bb #b8 () {
// [CoreOpt]     let %6: int32 = load int32 offset($b7.1, $b7.0 * @32)
// [CoreOpt]     let %7: int32 = sub($b7.0, 1)
// [CoreOpt]     let %8: int32 = load int32 offset($b7.1, %7 * @32)
// [CoreOpt]     let %9: int32 = sub(%8, 1)
// [CoreOpt]     let %10: bool = le(%6, %9)
// [CoreOpt]     br %10 b10() b11()
// [CoreOpt]   }
// [CoreOpt]   .bb #b9 () {
// [CoreOpt]     jump b13(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b10 () {
// [CoreOpt]     let %11: int32 = sub($b7.0, 1)
// [CoreOpt]     let %12: unit = call f0($b7.1, $b7.0, %11)
// [CoreOpt]     let %13: int32 = sub($b7.0, 1)
// [CoreOpt]     jump b7(%13, $b7.1, $b7.2)
// [CoreOpt]   }
// [CoreOpt]   .bb #b11 () {
// [CoreOpt]     jump b12(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 (unit) {
// [CoreOpt]     jump b13($b12.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b13 (unit) {
// [CoreOpt]     return $b13.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b14 pre #Some(b15) header #b7 {
// [CoreOpt]     .block #b13
// [CoreOpt]     .block #b11
// [CoreOpt]     .block #b8
// [CoreOpt]     .block #b12
// [CoreOpt]     .block #b9
// [CoreOpt]     .block #b10
// [CoreOpt]   }
// [CoreOpt]   .bb #b15 () {
// [CoreOpt]     jump b14($f0, $f1, $f2)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f6
// [CoreOpt] Remove dead function: f9
// [CoreOpt] Remove dead function: f5
// [CoreOpt] Remove dead function: f2
// [CoreOpt] LVN subst Insn(iref=%13) with Insn(iref=%11)
// [CoreOpt] LVN subst Insn(iref=%56) with Insn(iref=%53)
// [CoreOpt] LVN subst Insn(iref=%13) with Insn(iref=%11)
// [CoreOpt2] LVN subst Insn(iref=%10) with Insn(iref=%13)
// [CoreOpt2] LVN subst Insn(iref=%7) with Insn(iref=%12)
