// [Asm] LoweringOrder: [0, 2, 1, 6, 6 -> 9 (0), 8, 9, 4, 3]
// [Asm] LoweringOrder: [[1, 2], [3], [6], [6 -> 9 (0), 8], [9], [9], [4], [3], []]
// [Asm] LoweringOrder: HashMap::of([(b6, 1), (b4, 1), (b1, 1), (b8, 1), (b2, 0), (b9, 1), (b3, 0), (b0, 0)])
// [Asm] LoweringOrder: [b0, b2, b3, b1, b6, b8, b9, b4]
// [Asm] LoweringOrder: HashMap::of([(b6, 1), (b4, 4), (b1, 0), (b8, 2), (b2, 1), (b9, 3), (b3, 2), (b0, 0)])
// [Asm] pre_assigned_registers: FnParam(fref=f1, fpref=$f.0) -> v2, BlockParam(bref=b3, bpref=$b.0) -> v21, Insn(iref=%9) -> v14, Insn(iref=%8) -> v13, Insn(iref=%10) -> v15, Mem(fref=f1, mref=m0) -> v4, Insn(iref=%14) -> v5, Insn(iref=%5) -> v9, Insn(iref=%0) -> v6, Insn(iref=%4) -> v20, Insn(iref=%13) -> v8, FnParam(fref=f1, fpref=$f.1) -> v3, Insn(iref=%7) -> v12, Insn(iref=%2) -> v10, Insn(iref=%1) -> v7, Insn(iref=%11) -> v16, Self(fref=f1) -> v0, BlockParam(bref=b4, bpref=$b.0) -> v18, Insn(iref=%6) -> v11, BlockParam(bref=b9, bpref=$b.0) -> v17, Insn(iref=%12) -> v19
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b4: []
// [Asm] critical color seq for b4: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=FnParam(fref=f1, fpref=$f.0), width=@32))
// [Asm] succs: [4]
// [Asm] critical edges for b9: []
// [Asm] critical color seq for b9: []
// [Asm] succs: [9]
// [Asm] critical edges for b8: []
// [Asm] critical color seq for b8: []
// [Asm] succs: [6 -> 9 (0), 8]
// [Asm] critical edges for b6: [(b6, b9, 0)]
// [Asm] critical color seq for b6: [{color: 1, seq: 3, critical: []}]
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f1, fpref=$f.0), Int32(val=1)])
// [Asm] succs: [6]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: [3]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=FnParam(fref=f1, fpref=$f.0), width=@32))
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=-1919810)])
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=FnParam(fref=f1, fpref=$f.0), width=@32))
// [Asm] defs: [v12]
// [Asm] live_set: [v2, v4, v12, v3]
// [Asm] defined: v12 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v2, v4, v12, v3]
// [Asm] move: s10 <- v4
// [Asm] defined: s10 is X
// [Asm] skip edge 4 -> 2
// [Asm] defs: [v26]
// [Asm] live_set: [v2, v4, v12, v26, v3]
// [Asm] defined: v26 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v12, v26, v3]
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v4, a0, v26, v3]
// [Asm] move: a0 <- v12
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, v4, a0, v3]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v13]
// [Asm] live_set: [v2, v4, v13, v3]
// [Asm] move: v13 <- a0
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v13, v3]
// [Asm] defs: [v14]
// [Asm] live_set: [v2, v4, v14, v13, v3]
// [Asm] defined: v14 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v2, v4, v14, v13, v3]
// [Asm] move: s10 <- v4
// [Asm] defined: s10 is X
// [Asm] skip edge 4 -> 2
// [Asm] defs: [v23]
// [Asm] live_set: [v2, v14, v13, v23, v3]
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v14, v13, v23, v3]
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v2, v13, a0, v23]
// [Asm] move: a0 <- v14
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v3, v13, a0, v2]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v15]
// [Asm] live_set: [v3, v15, v13, v2]
// [Asm] move: v15 <- a0
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v15, v13, v2]
// [Asm] defs: [v16]
// [Asm] live_set: [v3, v16, v2]
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v3, v17, v2]
// [Asm] move: v17 <- v16
// [Asm] defined: v17 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] defined: v9 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v21]
// [Asm] move: v21 <- v9
// [Asm] defined: v21 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v3, v18, v2]
// [Asm] move: v18 <- v17
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [a1, s11, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [a1, s11, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, s11, v3]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v6, s11, v3]
// [Asm] defined: v6 is X
// [Asm] defs: [v33]
// [Asm] live_set: [v2, v6, s11, v33, v3]
// [Asm] defined: v33 is X
// [Asm] defs: []
// [Asm] live_set: [v2, s11, v3]
// [Asm] defs: []
// [Asm] live_set: [v18]
// [Asm] defs: [v21]
// [Asm] live_set: [v21]
// [Asm] move: v21 <- v18
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v21]
// [Asm] defs: [v17]
// [Asm] live_set: [v3, v4, v17, v2]
// [Asm] move: v17 <- v2
// [Asm] defined: v17 is X
// [Asm] skip edge 24 -> 1
// [Asm] defs: [v29]
// [Asm] live_set: [v3, v4, v17, v29, v2]
// [Asm] defined: v29 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v4, v17, v2]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v21
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, v3]
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v4, v3]
// [Asm] defined: s11 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v2, v4, v31, v3]
// [Asm] defined: v31 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v3]
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v3]
// [Asm] Label("memed8.60") clobbered_x: @hashset.of([s2, s0, a1, s3, a0, s1])
// [Asm] Label("memed8.60") clobbered_f: @hashset.of([])
// [Asm] subst   addi v12, v2, -1 ->   addi a0, s0, -1
// [Asm] subst   mv s10, v4 ->   mv s10, s1
// [Asm] subst   ld v26, 0(v4) ->   ld a1, 0(s1)
// [Asm] subst   jalr v26 ->   jalr a1
// [Asm] subst   mv v13, a0 ->   mv s3, a0
// [Asm] subst   addi v14, v2, -2 ->   addi a0, s0, -2
// [Asm] subst   mv s10, v4 ->   mv s10, s1
// [Asm] subst   ld v23, 0(v4) ->   ld a1, 0(s1)
// [Asm] subst   jalr v23 ->   jalr a1
// [Asm] subst   add v16, v13, v15 ->   add a0, s3, a0
// [Asm] subst   th.lurw v9, v3, v2, 2 ->   th.lurw a0, s2, s0, 2
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   mv v3, a1 ->   mv s2, a1
// [Asm] subst   th.lurw v6, v3, v2, 2 ->   th.lurw a0, s2, s0, 2
// [Asm] subst   li v33, -1919810 ->   li a1, -1919810
// [Asm] subst   beq v6, v33, .memed8.60_1 ->   beq a0, a1, .memed8.60_1
// [Asm] subst   th.surw v18, v3, v2, 2 ->   th.surw a0, s2, s0, 2
// [Asm] subst   j .memed8.60_3 ->   j .memed8.60_3
// [Asm] subst   mv v17, v2 ->   mv a0, s0
// [Asm] subst   li v29, 1 ->   li a1, 1
// [Asm] subst   bge v29, v2, .memed8.60_9 ->   bge a1, s0, .memed8.60_9
// [Asm] subst   ret ->   ret
// [Asm] subst   addi v4, s11, -16 ->   addi s1, s11, -16
// [Asm] subst   andi s11, v4, -8 ->   andi s11, s1, -8
// [Asm] subst   la v31, memed8.61 ->   la a0, memed8.61
// [Asm] subst   sd v31, 0(v4) ->   sd a0, 0(s1)
// [Asm] subst   sd v3, 8(v4) ->   sd s2, 8(s1)
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f8) -> v0, Insn(iref=%0) -> v2
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v2
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("T$start") clobbered_x: @hashset.of([a0])
// [Asm] Label("T$start") clobbered_f: @hashset.of([])
// [Asm] subst   call main33.59 ->   call main33.59
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: FreeVar(fvref=^1) -> v3, FnParam(fref=f5, fpref=$f.0) -> v2, Self(fref=f5) -> v0, Insn(iref=%0) -> v4
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [a0, s10]
// [Asm] defs: [v0]
// [Asm] live_set: [v0, a0]
// [Asm] move: v0 <- s10
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v3]
// [Asm] move: a0 <- v2
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0]
// [Asm] move: a1 <- v3
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move: v4 <- a0
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v4
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("memed8.61") clobbered_x: @hashset.of([a1, a0])
// [Asm] Label("memed8.61") clobbered_f: @hashset.of([])
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   ld v3, 8(v0) ->   ld a1, 8(a1)
// [Asm] subst   call memed8.60 ->   call memed8.60
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v7, Insn(iref=%1) -> v4, Self(fref=f2) -> v0, Insn(iref=%3) -> v6, Mem(fref=f2, mref=m0) -> v2, Insn(iref=%5) -> v8, Insn(iref=%0) -> v3, Insn(iref=%2) -> v5
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [s11, zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [s11, zero, v3]
// [Asm] move: v3 <- a0
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v3]
// [Asm] defs: [v4]
// [Asm] live_set: [v4, s11, zero, v3]
// [Asm] defined: v4 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v4, s11, zero, v13, v3]
// [Asm] defined: v13 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] defined: s11 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v3, v4, v15, zero, v2]
// [Asm] defined: v15 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v3, a1, v15, zero, v2]
// [Asm] move: a1 <- v4
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v3, a1, v15, zero, a0, v2]
// [Asm] move: a0 <- v2
// [Asm] defined: a0 is X
// [Asm] skip edge 3 -> 18
// [Asm] defs: [a2]
// [Asm] live_set: [v3, a2, a1, zero, a0, v2]
// [Asm] move: a2 <- v15
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v3, zero, v2]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: []
// [Asm] live_set: [v3, zero, v2]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v2]
// [Asm] move: a0 <- v3
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0]
// [Asm] move: a1 <- v2
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v6, zero]
// [Asm] move: v6 <- a0
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v6
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [zero]
// [Asm] move: v7 <- a0
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v9]
// [Asm] live_set: [zero, v9]
// [Asm] defined: v9 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v9
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [zero]
// [Asm] move: v8 <- a0
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main33.59") clobbered_x: @hashset.of([a2, s0, a1, a0, s1])
// [Asm] Label("main33.59") clobbered_f: @hashset.of([])
// [Asm] subst   call minimbt_read_int ->   call minimbt_read_int
// [Asm] subst   mv v3, a0 ->   mv s0, a0
// [Asm] subst   addi v4, v3, 1 ->   addi a0, s0, 1
// [Asm] subst   slliw v13, v4, 2 ->   slliw a1, a0, 2
// [Asm] subst   sub v2, s11, v13 ->   sub s1, s11, a1
// [Asm] subst   andi s11, v2, -8 ->   andi s11, s1, -8
// [Asm] subst   li v15, -1919810 ->   li a2, -1919810
// [Asm] subst   mv a1, v4 ->   mv a1, a0
// [Asm] subst   mv a0, v2 ->   mv a0, s1
// [Asm] subst   call memseti32 ->   call memseti32
// [Asm] subst   mv a0, v3 ->   mv a0, s0
// [Asm] subst   mv a1, v2 ->   mv a1, s1
// [Asm] subst   call memed8.60 ->   call memed8.60
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v9, 10 ->   li a0, 10
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] memed8.61:
// [Asm] # block info: defs: [v2, t1, v0, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, a0, v0, v4, a1, s10, v3], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .memed8.61_0:
// [Asm]   # save_ctx1  # live: [a0, s10]
// [Asm]   mv v0, s10  # live: [v0, a0]
// [Asm]   mv v2, a0  # live: [v0, v2]
// [Asm]   ld v3, 8(v0)  # live: [v2, v3]
// [Asm]   # save_ctx2  # live: [v2, v3]
// [Asm]   mv a0, v2  # live: [a0, v3]
// [Asm]   mv a1, v3  # live: [a1, a0]
// [Asm]   call memed8.60  # live: [a0]
// [Asm]   mv v4, a0  # live: [v4]
// [Asm]   # restore_ctx2  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main33.59:
// [Asm] # block info: defs: [v2, t1, v13, v7, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, v4, ft5, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15, v3], uses: [v3, v2, a0, v13, zero, v4, a2, a1, v6, s11, v15, v9], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main33.59_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   # save_ctx2  # live: [s11, zero]
// [Asm]   call minimbt_read_int  # live: [s11, zero, a0]
// [Asm]   mv v3, a0  # live: [s11, zero, v3]
// [Asm]   # restore_ctx2  # live: [s11, zero, v3]
// [Asm]   addi v4, v3, 1  # live: [v4, s11, zero, v3]
// [Asm]   slliw v13, v4, 2  # live: [v4, s11, zero, v13, v3]
// [Asm]   sub v2, s11, v13  # live: [v3, v4, zero, v2]
// [Asm]   andi s11, v2, -8  # live: [v3, v4, zero, v2]
// [Asm]   li v15, -1919810  # live: [v3, v4, v15, zero, v2]
// [Asm]   mv a1, v4  # live: [v3, a1, v15, zero, v2]
// [Asm]   mv a0, v2  # live: [v3, a1, v15, zero, a0, v2]
// [Asm]   mv a2, v15  # live: [v3, a2, a1, zero, a0, v2]
// [Asm]   call memseti32  # live: [v3, zero, v2]
// [Asm]   # save_ctx2  # live: [v3, zero, v2]
// [Asm]   mv a0, v3  # live: [zero, a0, v2]
// [Asm]   mv a1, v2  # live: [a1, zero, a0]
// [Asm]   call memed8.60  # live: [zero, a0]
// [Asm]   mv v6, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   # save_ctx2  # live: [v6, zero]
// [Asm]   mv a0, v6  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v7, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   li v9, 10  # live: [zero, v9]
// [Asm]   mv a0, v9  # live: [zero, a0]
// [Asm]   call minimbt_print_char  # live: [zero, a0]
// [Asm]   mv v8, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main33.59  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] memed8.60:
// [Asm] # block info: defs: [v3, v6, v33, v2], uses: [v2, a1, v6, a0, v33, v3], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, s11, a0], live_out: [v2, s11, v3]
// [Asm] # block parameters: []
// [Asm] .memed8.60_0:
// [Asm]   # save_ctx1  # live: [a1, s11, a0]
// [Asm]   mv v2, a0  # live: [a1, s11, v2]
// [Asm]   mv v3, a1  # live: [v2, s11, v3]
// [Asm]   th.lurw v6, v3, v2, 2  # live: [v2, v6, s11, v3]
// [Asm] # control
// [Asm]   li v33, -1919810  # live: [v2, v6, s11, v33, v3]
// [Asm]   beq v6, v33, .memed8.60_1  # live: [v2, s11, v3]
// [Asm] 
// [Asm] # block info: defs: [v21, v9], uses: [v2, v9, v3], upward_exposed: [v2, v3], params_defs: []
// [Asm] # live_in: [v3, v2], live_out: [v21]
// [Asm] # block parameters: []
// [Asm] .memed8.60_2:
// [Asm]   th.lurw v9, v3, v2, 2  # live: [v9]
// [Asm] # control
// [Asm]   mv v21, v9  # live: [v21]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v21, a0], upward_exposed: [v21], params_defs: [v21]
// [Asm] # live_in: [v21], live_out: []
// [Asm] # block parameters: [v21]
// [Asm] .memed8.60_3:
// [Asm] # control
// [Asm]   mv a0, v21  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v4, s11, v31], uses: [v4, s11, v31, v3], upward_exposed: [s11, v3], params_defs: []
// [Asm] # live_in: [v2, s11, v3], live_out: [v3, v4, v2]
// [Asm] # block parameters: []
// [Asm] .memed8.60_1:
// [Asm]   addi v4, s11, -16  # live: [v2, v4, v3]
// [Asm]   andi s11, v4, -8  # live: [v2, v4, v3]
// [Asm]   la v31, memed8.61  # live: [v2, v4, v31, v3]
// [Asm]   sd v31, 0(v4)  # live: [v2, v4, v3]
// [Asm]   sd v3, 8(v4)  # live: [v2, v4, v3]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v17, v29], uses: [v29, v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v3, v4, v2], live_out: [v3, v4, v17, v2]
// [Asm] # block parameters: []
// [Asm] .memed8.60_6:
// [Asm] # control
// [Asm]   mv v17, v2  # live: [v3, v4, v17, v2]
// [Asm]   li v29, 1  # live: [v3, v4, v17, v29, v2]
// [Asm]   bge v29, v2, .memed8.60_9  # live: [v3, v4, v17, v2]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v16, v26, v13, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, s10, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, v23, fa0, t4, t2, v15], uses: [v14, v16, a0, v26, v13, v23, v4, v12, v15, v2], upward_exposed: [v4, v2], params_defs: []
// [Asm] # live_in: [v3, v4, v2], live_out: [v2, v17, v3]
// [Asm] # block parameters: []
// [Asm] .memed8.60_8:
// [Asm]   addi v12, v2, -1  # live: [v2, v4, v12, v3]
// [Asm]   mv s10, v4  # live: [v2, v4, v12, v3]
// [Asm]   ld v26, 0(v4)  # live: [v2, v4, v12, v26, v3]
// [Asm]   # save_ctx2  # live: [v2, v4, v12, v26, v3]
// [Asm]   mv a0, v12  # live: [v2, v4, a0, v26, v3]
// [Asm]   jalr v26  # live: [v2, v4, a0, v3]
// [Asm]   mv v13, a0  # live: [v2, v4, v13, v3]
// [Asm]   # restore_ctx2  # live: [v2, v4, v13, v3]
// [Asm]   addi v14, v2, -2  # live: [v2, v4, v14, v13, v3]
// [Asm]   mv s10, v4  # live: [v2, v4, v14, v13, v3]
// [Asm]   ld v23, 0(v4)  # live: [v2, v14, v13, v23, v3]
// [Asm]   # save_ctx2  # live: [v2, v14, v13, v23, v3]
// [Asm]   mv a0, v14  # live: [v3, v2, v13, a0, v23]
// [Asm]   jalr v23  # live: [v3, v13, a0, v2]
// [Asm]   mv v15, a0  # live: [v3, v15, v13, v2]
// [Asm]   # restore_ctx2  # live: [v3, v15, v13, v2]
// [Asm]   add v16, v13, v15  # live: [v3, v16, v2]
// [Asm] # control
// [Asm]   mv v17, v16  # live: [v3, v17, v2]
// [Asm] 
// [Asm] # block info: defs: [v18], uses: [v17], upward_exposed: [v17], params_defs: [v17]
// [Asm] # live_in: [v3, v17, v2], live_out: [v2, v18, v3]
// [Asm] # block parameters: [v17]
// [Asm] .memed8.60_9:
// [Asm] # control
// [Asm]   mv v18, v17  # live: [v3, v18, v2]
// [Asm] 
// [Asm] # block info: defs: [v21], uses: [v2, v18, v3], upward_exposed: [v2, v18, v3], params_defs: [v18]
// [Asm] # live_in: [v3, v18, v2], live_out: [v21]
// [Asm] # block parameters: [v18]
// [Asm] .memed8.60_4:
// [Asm]   th.surw v18, v3, v2, 2  # live: [v18]
// [Asm] # control
// [Asm]   mv v21, v18  # live: [v21]
// [Asm]   j .memed8.60_3  # live: [v21]
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: Let(("unmem_magic", Int), Neg(Int(1919810), kind=Some(Int)), LetRec({name: ("mem", Fun([Int], Int)), args: [("func", Fun([Fun([Int], Int), Int], Int)), ("max_n", Int)], body: Let(("cache", Var({val: Some(Array(Int))})), Array(Var("max_n"), Var("unmem_magic")), LetRec({name: ("memed", Int), args: [("n", Int)], body: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var({val: Some(Int)})), App(Var("func"), [Var("memed"), Var("n")]), Let(("_", Var({val: Some(Unit)})), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))}, Var("memed")))}, LetRec({name: ("mem_fib", Int), args: [("f", Fun([Int], Int)), ("n", Int)], body: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))]), Add, kind=Some(Int)))}, LetRec({name: ("fib", Int), args: [("n", Int)], body: Let(("f", Var({val: Some(Fun([Int], Int))})), App(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=Some(Int))]), App(Var("f"), [Var("n")]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))}, App(Var("main"), []))))))
// [Knf] build_knf: Neg(Int(1919810), kind=Some(Int))
// [Knf] build_knf: LetRec({name: ("mem", Fun([Int], Int)), args: [("func", Fun([Fun([Int], Int), Int], Int)), ("max_n", Int)], body: Let(("cache", Var({val: Some(Array(Int))})), Array(Var("max_n"), Var("unmem_magic")), LetRec({name: ("memed", Int), args: [("n", Int)], body: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var({val: Some(Int)})), App(Var("func"), [Var("memed"), Var("n")]), Let(("_", Var({val: Some(Unit)})), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))}, Var("memed")))}, LetRec({name: ("mem_fib", Int), args: [("f", Fun([Int], Int)), ("n", Int)], body: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))]), Add, kind=Some(Int)))}, LetRec({name: ("fib", Int), args: [("n", Int)], body: Let(("f", Var({val: Some(Fun([Int], Int))})), App(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=Some(Int))]), App(Var("f"), [Var("n")]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))}, App(Var("main"), [])))))
// [Knf] build_knf: Let(("cache", Var({val: Some(Array(Int))})), Array(Var("max_n"), Var("unmem_magic")), LetRec({name: ("memed", Int), args: [("n", Int)], body: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var({val: Some(Int)})), App(Var("func"), [Var("memed"), Var("n")]), Let(("_", Var({val: Some(Unit)})), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))}, Var("memed")))
// [Knf] build_knf: Array(Var("max_n"), Var("unmem_magic"))
// [Knf] build_knf: Var("max_n")
// [Knf] build_knf: Var("unmem_magic")
// [Knf] build_knf: LetRec({name: ("memed", Int), args: [("n", Int)], body: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var({val: Some(Int)})), App(Var("func"), [Var("memed"), Var("n")]), Let(("_", Var({val: Some(Unit)})), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))}, Var("memed"))
// [Knf] build_knf: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var({val: Some(Int)})), App(Var("func"), [Var("memed"), Var("n")]), Let(("_", Var({val: Some(Unit)})), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))
// [Knf] build_knf: Get(Var("cache"), Var("n"))
// [Knf] build_knf: Var("cache")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("unmem_magic")
// [Knf] build_knf: Let(("res", Var({val: Some(Int)})), App(Var("func"), [Var("memed"), Var("n")]), Let(("_", Var({val: Some(Unit)})), Put(Var("cache"), Var("n"), Var("res")), Var("res")))
// [Knf] build_knf: App(Var("func"), [Var("memed"), Var("n")])
// [Knf] build_knf: Var("func")
// [Knf] build_knf: Var("memed")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("cache"), Var("n"), Var("res")), Var("res"))
// [Knf] build_knf: Put(Var("cache"), Var("n"), Var("res"))
// [Knf] build_knf: Var("cache")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("res")
// [Knf] build_knf: Var("res")
// [Knf] build_knf: Get(Var("cache"), Var("n"))
// [Knf] build_knf: Var("cache")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("memed")
// [Knf] build_knf: LetRec({name: ("mem_fib", Int), args: [("f", Fun([Int], Int)), ("n", Int)], body: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))]), Add, kind=Some(Int)))}, LetRec({name: ("fib", Int), args: [("n", Int)], body: Let(("f", Var({val: Some(Fun([Int], Int))})), App(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=Some(Int))]), App(Var("f"), [Var("n")]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))}, App(Var("main"), []))))
// [Knf] build_knf: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))]), Add, kind=Some(Int)))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Prim(App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))]), Add, kind=Some(Int))
// [Knf] build_knf: App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Prim(Var("n"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Prim(Var("n"), Int(2), Sub, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: LetRec({name: ("fib", Int), args: [("n", Int)], body: Let(("f", Var({val: Some(Fun([Int], Int))})), App(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=Some(Int))]), App(Var("f"), [Var("n")]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))}, App(Var("main"), [])))
// [Knf] build_knf: Let(("f", Var({val: Some(Fun([Int], Int))})), App(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=Some(Int))]), App(Var("f"), [Var("n")]))
// [Knf] build_knf: App(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("mem")
// [Knf] build_knf: Var("mem_fib")
// [Knf] build_knf: Prim(Var("n"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("f"), [Var("n")])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))}, App(Var("main"), []))
// [Knf] build_knf: Let(("n", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))
// [Knf] build_knf: App(Var("read_int"), [])
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit))
// [Knf] build_knf: App(Var("print_int"), [App(Var("fib"), [Var("n")])])
// [Knf] build_knf: App(Var("fib"), [Var("n")])
// [Knf] build_knf: Var("fib")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)
// [Knf] build_knf: App(Var("print_char"), [Int(10)])
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] beta reduce f.49 = memed8.51
// [Main] top int reduce unmem_magic.1 = Int(-1919810)
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memseti32
// [Main]   .type memseti32, @function
// [Main] memseti32:
// [Main]   blez a1, .memseti32_b1
// [Main]   slli a1, a1, 2
// [Main]   add a1, a1, a0
// [Main] .memseti32_b0:
// [Main]   sw a2, 0(a0)
// [Main]   addi a0, a0, 4
// [Main]   bne a0, a1, .memseti32_b0
// [Main] .memseti32_b1:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memed8.61
// [Main]   .type memed8.61, @function
// [Main] # leaf false
// [Main] memed8.61:
// [Main] .memed8.61_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a1, s10
// [Main]   ld a1, 8(a1)
// [Main]   call memed8.60
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main33.59
// [Main]   .type main33.59, @function
// [Main] # leaf false
// [Main] main33.59:
// [Main] .main33.59_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   call minimbt_read_int
// [Main]   mv s0, a0
// [Main]   addi a0, s0, 1
// [Main]   slliw a1, a0, 2
// [Main]   sub s1, s11, a1
// [Main]   andi s11, s1, -8
// [Main]   li a2, -1919810
// [Main]   mv a1, a0
// [Main]   mv a0, s1
// [Main]   call memseti32
// [Main]   mv a0, s0
// [Main]   mv a1, s1
// [Main]   call memed8.60
// [Main]   call minimbt_print_int
// [Main]   li a0, 10
// [Main]   call minimbt_print_char
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main33.59
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memed8.60
// [Main]   .type memed8.60, @function
// [Main] # leaf false
// [Main] memed8.60:
// [Main] .memed8.60_0:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   mv s0, a0
// [Main]   mv s2, a1
// [Main]   th.lurw a0, s2, s0, 2
// [Main]   li a1, -1919810
// [Main]   beq a0, a1, .memed8.60_1
// [Main] 
// [Main] .memed8.60_2:
// [Main]   th.lurw a0, s2, s0, 2
// [Main] 
// [Main] .memed8.60_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main] .memed8.60_1:
// [Main]   addi s1, s11, -16
// [Main]   andi s11, s1, -8
// [Main]   la a0, memed8.61
// [Main]   sd a0, 0(s1)
// [Main]   sd s2, 8(s1)
// [Main] 
// [Main] .memed8.60_6:
// [Main]   mv a0, s0
// [Main]   li a1, 1
// [Main]   bge a1, s0, .memed8.60_9
// [Main] 
// [Main] .memed8.60_8:
// [Main]   addi a0, s0, -1
// [Main]   mv s10, s1
// [Main]   ld a1, 0(s1)
// [Main]   jalr a1
// [Main]   mv s3, a0
// [Main]   addi a0, s0, -2
// [Main]   mv s10, s1
// [Main]   ld a1, 0(s1)
// [Main]   jalr a1
// [Main]   add a0, s3, a0
// [Main] 
// [Main] .memed8.60_9:
// [Main] 
// [Main] .memed8.60_4:
// [Main]   th.surw a0, s2, s0, 2
// [Main]   j .memed8.60_3
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Wasm] LoweringOrder: [0, 2, 1, 6, 6 -> 9 (0), 8, 9, 4, 3]
// [Wasm] LoweringOrder: [[1, 2], [3], [6], [6 -> 9 (0), 8], [9], [9], [4], [3], []]
// [Wasm] LoweringOrder: HashMap::of([(b6, 0), (b4, 0), (b1, 0), (b8, 0), (b9, 0), (b2, 2), (b3, 0), (b0, 0)])
// [Wasm] LoweringOrder: [b0, b1, b6, b8, b9, b4, b3, b2]
// [Wasm] LoweringOrder: HashMap::of([(b6, 2), (b4, 5), (b1, 1), (b8, 3), (b9, 4), (b2, 0), (b3, 6), (b0, 0)])
// [Wasm] Lowering function memed8.60
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f1, fpref=$f.1), offset=FnParam(fref=f1, fpref=$f.0), width=@32), val=BlockParam(bref=b4, bpref=$b.0))
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b4, bpref=$b.0) -> $b4.$b.0
// [Wasm] Lowering control Jump(target=b3, args=[BlockParam(bref=b4, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b4, bpref=$b.0) -> $b4.$b.0
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Jump(target=b4, args=[BlockParam(bref=b9, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Get Local name BlockParam(bref=b4, bpref=$b.0) -> $b4.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f1, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Apply(ty=Int32, f=Mem(fref=f1, mref=m0), args=[Insn(iref=%7)])
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f1, fpref=$f.0), Int32(val=2)])
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Apply(ty=Int32, f=Mem(fref=f1, mref=m0), args=[Insn(iref=%9)])
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%8), Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering control Jump(target=b9, args=[Insn(iref=%11)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FnParam(fref=f1, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Branch(cond=Insn(iref=%6), t=b9, t_args=[FnParam(fref=f1, fpref=$f.0)], f=b8, f_args=[])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Int32), mref=m0, fills=[Field(index=0, val=Fn(fref=f5)), Field(index=1, val=FnParam(fref=f1, fpref=$f.1))])
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Lowering control Jump(target=b6, args=[])
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f1, fpref=$f.1), offset=FnParam(fref=f1, fpref=$f.0), width=@32))
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f1, fpref=$f.1), offset=FnParam(fref=f1, fpref=$f.0), width=@32))
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=-1919810)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Local BlockParam(bref=b4, bpref=$b.0) -> $b4.$b.0
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function memed8.60 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f2, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function memed8.61
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Lowering insn Call(ty=Int32, f=f1, args=[FnParam(fref=f5, fpref=$f.0), FreeVar(fvref=^1)])
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function memed8.61 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function main33.59
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_int", args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Int32(val=-1919810))])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Lowering insn Call(ty=Int32, f=f1, args=[Insn(iref=%0), Mem(fref=f2, mref=m0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Int32(val=10)])
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function main33.59 to wasm
// [KnfOpt] freq: {mem2: Once, memed8: AsClosure, mem_fib15: AsClosure, fib27: Once, main33: Once}
// [KnfOpt] Knf inline Some(mem2)
// [KnfOpt] Knf inline Some(fib27)
// [KnfOpt] Numbers of let rec: 3 4 1
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f1: Multiple, f8: Once, f5: MaybeInClosure, f2: Once, f0: Once})
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b4, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b4, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b4, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b4, bpref=$b.0)
// [CoreOpt] memed8.60 is inlining Call(ty=Int32, f=f0, args=[Mem(fref=f1, mref=m0), FnParam(fref=f1, fpref=$f.0)])
// [CoreOpt] shifted callee .fn mem_fib15.58 #f0 : fn(closure(int32) -> int32, int32) -> int32
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b6 {
// [CoreOpt]   .bb #b6 () {
// [CoreOpt]     let %6: bool = le($f1, 1)
// [CoreOpt]     br %6 b9($f1) b8()
// [CoreOpt]   }
// [CoreOpt]   .bb #b8 () {
// [CoreOpt]     let %7: int32 = sub($f1, 1)
// [CoreOpt]     let %8: int32 = apply $f0(%7)
// [CoreOpt]     let %9: int32 = sub($f1, 2)
// [CoreOpt]     let %10: int32 = apply $f0(%9)
// [CoreOpt]     let %11: int32 = add(%8, %10)
// [CoreOpt]     jump b9(%11)
// [CoreOpt]   }
// [CoreOpt]   .bb #b9 (int32) {
// [CoreOpt]     return $b9.0
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f0
