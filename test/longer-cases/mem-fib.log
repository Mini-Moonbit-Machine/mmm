// [Asm] LoweringOrder: [0, 2, 1, 4, 3, 5, 6]
// [Asm] LoweringOrder: [[1, 2], [6], [3, 4], [5], [5], [6], []]
// [Asm] LoweringOrder: HashMap::of([(b6, 0), (b4, 0), (b1, 0), (b5, 0), (b2, 2), (b3, 1), (b0, 0)])
// [Asm] LoweringOrder: [b0, b1, b4, b5, b6, b3, b2]
// [Asm] LoweringOrder: HashMap::of([(b6, 4), (b4, 2), (b1, 1), (b5, 3), (b2, 0), (b3, 0), (b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0, Insn(iref=%9) -> v8, Insn(iref=%8) -> v17, Insn(iref=%10) -> v16, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%5) -> v12, Insn(iref=%0) -> v5, Insn(iref=%4) -> v11, Insn(iref=%3) -> v10, FnParam(fref=f0, fpref=$f.1) -> v3, Insn(iref=%7) -> v14, BlockParam(bref=b5, bpref=$b.0) -> v15, BlockParam(bref=b6, bpref=$b.0) -> v18, Insn(iref=%2) -> v9, Insn(iref=%1) -> v6, Insn(iref=%11) -> v7, Insn(iref=%6) -> v13, Insn(iref=%12) -> v4
// [Asm] succs: []
// [Asm] critical edges for b6: []
// [Asm] critical color seq for b6: []
// [Asm] succs: [6]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=FnParam(fref=f0, fpref=$f.0), width=@32))
// [Asm] succs: [5]
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [5]
// [Asm] critical edges for b4: []
// [Asm] critical color seq for b4: []
// [Asm] succs: [3, 4]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f0, fpref=$f.0), Int32(val=1)])
// [Asm] succs: [6]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=FnParam(fref=f0, fpref=$f.0), width=@32))
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=-1919810)])
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=FnParam(fref=f0, fpref=$f.0), width=@32))
// [Asm] defs: [v15]
// [Asm] live_set: [v2, v15, v3]
// [Asm] move: v15 <- v2
// [Asm] defined: v15 is X
// [Asm] skip edge 1 -> 0
// [Asm] defs: []
// [Asm] live_set: [v2, v15, v3]
// [Asm] defs: []
// [Asm] live_set: [v15]
// [Asm] defs: [v18]
// [Asm] live_set: [v18]
// [Asm] move: v18 <- v15
// [Asm] defined: v18 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] defined: v8 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v18]
// [Asm] move: v18 <- v8
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v18]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v18
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v10]
// [Asm] live_set: [v3, v10, v2]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v10, v2]
// [Asm] defs: [a0]
// [Asm] live_set: [v3, a0, v2]
// [Asm] move: a0 <- v10
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v3, a1, a0, v2]
// [Asm] move: a1 <- v3
// [Asm] defined: a1 is X
// [Asm] skip edge 7 -> 2
// [Asm] defs: [t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7, ft0, ft1, ft2, ft3]
// [Asm] live_set: [v3, a0, v2]
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v3, v11, v2]
// [Asm] move: v11 <- a0
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v11, v2]
// [Asm] defs: [v12]
// [Asm] live_set: [v3, v11, v12, v2]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v11, v12, v2]
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v11, a0, v2]
// [Asm] move: a0 <- v12
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v3, v11, a1, a0, v2]
// [Asm] move: a1 <- v3
// [Asm] defined: a1 is X
// [Asm] skip edge 7 -> 2
// [Asm] defs: [t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7, ft0, ft1, ft2, ft3]
// [Asm] live_set: [v3, v11, a0, v2]
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defs: [v13]
// [Asm] live_set: [v3, v11, v13, v2]
// [Asm] move: v13 <- a0
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v11, v13, v2]
// [Asm] defs: [v14]
// [Asm] live_set: [v3, v14, v2]
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v3, v15, v2]
// [Asm] move: v15 <- v14
// [Asm] defined: v15 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v3, v24, v2]
// [Asm] defined: v24 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v2]
// [Asm] defs: []
// [Asm] live_set: [a1, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [a1, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v2]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v5, v2]
// [Asm] defined: v5 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v3, v5, v26, v2]
// [Asm] defined: v26 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v2]
// [Asm] Label("memed.66") clobbered_x: @hashset.of([s2, s0, a1, a0, s1])
// [Asm] Label("memed.66") clobbered_f: @hashset.of([])
// [Asm] subst   mv v15, v2 ->   mv a0, s0
// [Asm] subst   j .memed.66_5 ->   j .memed.66_5
// [Asm] subst   th.surw v15, v3, v2, 2 ->   th.surw a0, s1, s0, 2
// [Asm] subst   th.lurw v8, v3, v2, 2 ->   th.lurw a0, s1, s0, 2
// [Asm] subst   j .memed.66_6 ->   j .memed.66_6
// [Asm] subst   ret ->   ret
// [Asm] subst   addi v10, v2, -1 ->   addi a0, s0, -1
// [Asm] subst   mv a1, v3 ->   mv a1, s1
// [Asm] subst   call memed.66 ->   call memed.66
// [Asm] subst   mv v11, a0 ->   mv s2, a0
// [Asm] subst   addi v12, v2, -2 ->   addi a0, s0, -2
// [Asm] subst   mv a1, v3 ->   mv a1, s1
// [Asm] subst   call memed.66 ->   call memed.66
// [Asm] subst   add v14, v11, v13 ->   add a0, s2, a0
// [Asm] subst   li v24, 1 ->   li a0, 1
// [Asm] subst   bge v24, v2, .memed.66_3 ->   bge a0, s0, .memed.66_3
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   mv v3, a1 ->   mv s1, a1
// [Asm] subst   th.lurw v5, v3, v2, 2 ->   th.lurw a0, s1, s0, 2
// [Asm] subst   li v26, -1919810 ->   li a1, -1919810
// [Asm] subst   bne v5, v26, .memed.66_2 ->   bne a0, a1, .memed.66_2
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f4) -> v0, Insn(iref=%0) -> v2
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v7, Insn(iref=%1) -> v4, Mem(fref=f1, mref=m0) -> v2, Insn(iref=%3) -> v6, Self(fref=f1) -> v0, Insn(iref=%5) -> v8, Insn(iref=%0) -> v3, Insn(iref=%2) -> v5
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] defs: [t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7, ft0, ft1, ft2, ft3]
// [Asm] live_set: [s11, zero, a0]
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defs: [v3]
// [Asm] live_set: [s11, zero, v3]
// [Asm] move: v3 <- a0
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v3]
// [Asm] defs: [v4]
// [Asm] live_set: [v4, s11, zero, v3]
// [Asm] defined: v4 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v4, s11, zero, v13, v3]
// [Asm] defined: v13 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] defined: s11 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v3, v4, v15, zero, v2]
// [Asm] defined: v15 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v3, a1, v15, zero, v2]
// [Asm] move: a1 <- v4
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v3, a1, v15, zero, a0, v2]
// [Asm] move: a0 <- v2
// [Asm] defined: a0 is X
// [Asm] skip edge 1 -> 18
// [Asm] defs: [a2]
// [Asm] live_set: [v3, a2, a1, zero, a0, v2]
// [Asm] move: a2 <- v15
// [Asm] defined: a2 is X
// [Asm] defs: [t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7, ft0, ft1, ft2, ft3]
// [Asm] live_set: [v3, zero, v2]
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defs: []
// [Asm] live_set: [v3, zero, v2]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v2]
// [Asm] move: a0 <- v3
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0]
// [Asm] move: a1 <- v2
// [Asm] defined: a1 is X
// [Asm] defs: [t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7, ft0, ft1, ft2, ft3]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v6, zero]
// [Asm] move: v6 <- a0
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v6
// [Asm] defined: a0 is X
// [Asm] defs: [t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7, ft0, ft1, ft2, ft3]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defs: [v7]
// [Asm] live_set: [zero]
// [Asm] move: v7 <- a0
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v9]
// [Asm] live_set: [zero, v9]
// [Asm] defined: v9 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v9
// [Asm] defined: a0 is X
// [Asm] defs: [t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7, ft0, ft1, ft2, ft3]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defs: [v8]
// [Asm] live_set: [zero]
// [Asm] move: v8 <- a0
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main.65") clobbered_x: @hashset.of([a2, s0, a1, a0, s1])
// [Asm] Label("main.65") clobbered_f: @hashset.of([])
// [Asm] subst   call minimbt_read_int ->   call minimbt_read_int
// [Asm] subst   mv v3, a0 ->   mv s0, a0
// [Asm] subst   addi v4, v3, 1 ->   addi a1, s0, 1
// [Asm] subst   slliw v13, v4, 2 ->   slliw a0, a1, 2
// [Asm] subst   sub v2, s11, v13 ->   sub s1, s11, a0
// [Asm] subst   andi s11, v2, -8 ->   andi s11, s1, -8
// [Asm] subst   li v15, -1919810 ->   li a2, -1919810
// [Asm] subst   mv a0, v2 ->   mv a0, s1
// [Asm] subst   call memseti32 ->   call memseti32
// [Asm] subst   mv a0, v3 ->   mv a0, s0
// [Asm] subst   mv a1, v2 ->   mv a1, s1
// [Asm] subst   call memed.66 ->   call memed.66
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v9, 10 ->   li a0, 10
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] memed.66:
// [Asm] # block info: defs: [v3, v5, v26, v2], uses: [v2, a1, v5, a0, v26, v3], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, a0], live_out: [v3, v2]
// [Asm] # block parameters: []
// [Asm] .memed.66_0:
// [Asm]   # save_ctx1  # live: [a1, a0]
// [Asm]   mv v2, a0  # live: [a1, v2]
// [Asm]   mv v3, a1  # live: [v3, v2]
// [Asm]   th.lurw v5, v3, v2, 2  # live: [v3, v5, v2]
// [Asm] # control
// [Asm]   li v26, -1919810  # live: [v3, v5, v26, v2]
// [Asm]   bne v5, v26, .memed.66_2  # live: [v3, v2]
// [Asm] 
// [Asm] # block info: defs: [v24], uses: [v24, v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v3, v2], live_out: [v3, v2]
// [Asm] # block parameters: []
// [Asm] .memed.66_1:
// [Asm] # control
// [Asm]   li v24, 1  # live: [v3, v24, v2]
// [Asm]   bge v24, v2, .memed.66_3  # live: [v3, v2]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v13, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, v10, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v2, v11, v14, v10, a0, v13, a1, v12, v3], upward_exposed: [v3, v2], params_defs: []
// [Asm] # live_in: [v2, v3], live_out: [v2, v15, v3]
// [Asm] # block parameters: []
// [Asm] .memed.66_4:
// [Asm]   addi v10, v2, -1  # live: [v3, v10, v2]
// [Asm]   # save_ctx2  # live: [v3, v10, v2]
// [Asm]   mv a0, v10  # live: [v3, a0, v2]
// [Asm]   mv a1, v3  # live: [v3, a1, a0, v2]
// [Asm]   call memed.66  # live: [v3, a0, v2]
// [Asm]   mv v11, a0  # live: [v3, v11, v2]
// [Asm]   # restore_ctx2  # live: [v3, v11, v2]
// [Asm]   addi v12, v2, -2  # live: [v3, v11, v12, v2]
// [Asm]   # save_ctx2  # live: [v3, v11, v12, v2]
// [Asm]   mv a0, v12  # live: [v3, v11, a0, v2]
// [Asm]   mv a1, v3  # live: [v3, v11, a1, a0, v2]
// [Asm]   call memed.66  # live: [v3, v11, a0, v2]
// [Asm]   mv v13, a0  # live: [v3, v11, v13, v2]
// [Asm]   # restore_ctx2  # live: [v3, v11, v13, v2]
// [Asm]   add v14, v11, v13  # live: [v3, v14, v2]
// [Asm] # control
// [Asm]   mv v15, v14  # live: [v3, v15, v2]
// [Asm] 
// [Asm] # block info: defs: [v18], uses: [v2, v15, v3], upward_exposed: [v2, v15, v3], params_defs: [v15]
// [Asm] # live_in: [v3, v15, v2], live_out: [v18]
// [Asm] # block parameters: [v15]
// [Asm] .memed.66_5:
// [Asm]   th.surw v15, v3, v2, 2  # live: [v15]
// [Asm] # control
// [Asm]   mv v18, v15  # live: [v18]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v18, a0], upward_exposed: [v18], params_defs: [v18]
// [Asm] # live_in: [v18], live_out: []
// [Asm] # block parameters: [v18]
// [Asm] .memed.66_6:
// [Asm] # control
// [Asm]   mv a0, v18  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v15], uses: [v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v3, v2], live_out: [v2, v15, v3]
// [Asm] # block parameters: []
// [Asm] .memed.66_3:
// [Asm] # control
// [Asm]   mv v15, v2  # live: [v2, v15, v3]
// [Asm]   j .memed.66_5  # live: [v2, v15, v3]
// [Asm] 
// [Asm] # block info: defs: [v18, v8], uses: [v2, v8, v3], upward_exposed: [v2, v3], params_defs: []
// [Asm] # live_in: [v3, v2], live_out: [v18]
// [Asm] # block parameters: []
// [Asm] .memed.66_2:
// [Asm]   th.lurw v8, v3, v2, 2  # live: [v8]
// [Asm] # control
// [Asm]   mv v18, v8  # live: [v18]
// [Asm]   j .memed.66_6  # live: [v18]
// [Asm] 
// [Asm] # leaf false
// [Asm] main.65:
// [Asm] # block info: defs: [v2, t1, v13, v7, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, v4, ft5, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15, v3], uses: [v3, v2, a0, v13, zero, v4, a2, a1, v6, s11, v15, v9], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.65_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   # save_ctx2  # live: [s11, zero]
// [Asm]   call minimbt_read_int  # live: [s11, zero, a0]
// [Asm]   mv v3, a0  # live: [s11, zero, v3]
// [Asm]   # restore_ctx2  # live: [s11, zero, v3]
// [Asm]   addi v4, v3, 1  # live: [v4, s11, zero, v3]
// [Asm]   slliw v13, v4, 2  # live: [v4, s11, zero, v13, v3]
// [Asm]   sub v2, s11, v13  # live: [v3, v4, zero, v2]
// [Asm]   andi s11, v2, -8  # live: [v3, v4, zero, v2]
// [Asm]   li v15, -1919810  # live: [v3, v4, v15, zero, v2]
// [Asm]   mv a1, v4  # live: [v3, a1, v15, zero, v2]
// [Asm]   mv a0, v2  # live: [v3, a1, v15, zero, a0, v2]
// [Asm]   mv a2, v15  # live: [v3, a2, a1, zero, a0, v2]
// [Asm]   call memseti32  # live: [v3, zero, v2]
// [Asm]   # save_ctx2  # live: [v3, zero, v2]
// [Asm]   mv a0, v3  # live: [zero, a0, v2]
// [Asm]   mv a1, v2  # live: [a1, zero, a0]
// [Asm]   call memed.66  # live: [zero, a0]
// [Asm]   mv v6, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   # save_ctx2  # live: [v6, zero]
// [Asm]   mv a0, v6  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v7, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   li v9, 10  # live: [zero, v9]
// [Asm]   mv a0, v9  # live: [zero, a0]
// [Asm]   call minimbt_print_char  # live: [zero, a0]
// [Asm]   mv v8, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call main.65  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Main] beta reduce f.49 = memed.51
// [Main] top int reduce unmem_magic.1 = Int(-1919810)
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 2013265920 # 2GB - 128MB
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 67108864 # 64MB
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memseti32
// [Main]   .type memseti32, @function
// [Main] memseti32:
// [Main]   blez a1, .memseti32_b1
// [Main]   slli a1, a1, 2
// [Main]   add a1, a1, a0
// [Main] .memseti32_b0:
// [Main]   sw a2, 0(a0)
// [Main]   addi a0, a0, 4
// [Main]   bne a0, a1, .memseti32_b0
// [Main] .memseti32_b1:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memed.66
// [Main]   .type memed.66, @function
// [Main] # leaf false
// [Main] memed.66:
// [Main] .memed.66_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   th.lurw a0, s1, s0, 2
// [Main]   li a1, -1919810
// [Main]   bne a0, a1, .memed.66_2
// [Main] 
// [Main] .memed.66_1:
// [Main]   li a0, 1
// [Main]   bge a0, s0, .memed.66_3
// [Main] 
// [Main] .memed.66_4:
// [Main]   addi a0, s0, -1
// [Main]   mv a1, s1
// [Main]   call memed.66
// [Main]   mv s2, a0
// [Main]   addi a0, s0, -2
// [Main]   mv a1, s1
// [Main]   call memed.66
// [Main]   add a0, s2, a0
// [Main] 
// [Main] .memed.66_5:
// [Main]   th.surw a0, s1, s0, 2
// [Main] 
// [Main] .memed.66_6:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .memed.66_3:
// [Main]   mv a0, s0
// [Main]   j .memed.66_5
// [Main] 
// [Main] .memed.66_2:
// [Main]   th.lurw a0, s1, s0, 2
// [Main]   j .memed.66_6
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.65
// [Main]   .type main.65, @function
// [Main] # leaf false
// [Main] main.65:
// [Main] .main.65_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   call minimbt_read_int
// [Main]   mv s0, a0
// [Main]   addi a1, s0, 1
// [Main]   slliw a0, a1, 2
// [Main]   sub s1, s11, a0
// [Main]   andi s11, s1, -8
// [Main]   li a2, -1919810
// [Main]   mv a0, s1
// [Main]   call memseti32
// [Main]   mv a0, s0
// [Main]   mv a1, s1
// [Main]   call memed.66
// [Main]   call minimbt_print_int
// [Main]   li a0, 10
// [Main]   call minimbt_print_char
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call main.65
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Typer] resolve: Let(("unmem_magic", Int), Neg(Int(1919810), kind=None), LetRec({tyvars: [], name: ("mem", (Int) -> Int), args: [("func", ((Int) -> Int, Int) -> Int), ("max_n", Int)], body: Let(("cache", Var(None)), Array(Var("max_n"), Var("unmem_magic")), LetRec({tyvars: [], name: ("memed", Int), args: [("n", Int)], body: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var(None)), App(Var("func"), targs=None, [Var("memed"), Var("n")]), Let(("_", Var(None)), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))}, Var("memed")))}, LetRec({tyvars: [], name: ("mem_fib", Int), args: [("f", (Int) -> Int), ("n", Int)], body: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("f"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]), App(Var("f"), targs=None, [Prim(Var("n"), Int(2), Sub, kind=None)]), Add, kind=None))}, LetRec({tyvars: [], name: ("fib", Int), args: [("n", Int)], body: Let(("f", Var(None)), App(Var("mem"), targs=None, [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=None)]), App(Var("f"), targs=None, [Var("n")]))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("n", Var(None)), App(Var("read_int"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("fib"), targs=None, [Var("n")])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Unit)))}, Unit)))))
// [Typer] resolve: Neg(Int(1919810), kind=None)
// [Typer] resolve: Int(1919810)
// [Typer] resolve: LetRec({tyvars: [], name: ("mem", (Int) -> Int), args: [("func", ((Int) -> Int, Int) -> Int), ("max_n", Int)], body: Let(("cache", Var(None)), Array(Var("max_n"), Var("unmem_magic")), LetRec({tyvars: [], name: ("memed", Int), args: [("n", Int)], body: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var(None)), App(Var("func"), targs=None, [Var("memed"), Var("n")]), Let(("_", Var(None)), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))}, Var("memed")))}, LetRec({tyvars: [], name: ("mem_fib", Int), args: [("f", (Int) -> Int), ("n", Int)], body: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("f"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]), App(Var("f"), targs=None, [Prim(Var("n"), Int(2), Sub, kind=None)]), Add, kind=None))}, LetRec({tyvars: [], name: ("fib", Int), args: [("n", Int)], body: Let(("f", Var(None)), App(Var("mem"), targs=None, [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=None)]), App(Var("f"), targs=None, [Var("n")]))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("n", Var(None)), App(Var("read_int"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("fib"), targs=None, [Var("n")])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Unit)))}, Unit))))
// [Typer] resolve: Let(("cache", Var(None)), Array(Var("max_n"), Var("unmem_magic")), LetRec({tyvars: [], name: ("memed", Int), args: [("n", Int)], body: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var(None)), App(Var("func"), targs=None, [Var("memed"), Var("n")]), Let(("_", Var(None)), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))}, Var("memed")))
// [Typer] resolve: Array(Var("max_n"), Var("unmem_magic"))
// [Typer] resolve: Var("max_n")
// [Typer] resolve: Var("unmem_magic")
// [Typer] resolve: LetRec({tyvars: [], name: ("memed", Int), args: [("n", Int)], body: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var(None)), App(Var("func"), targs=None, [Var("memed"), Var("n")]), Let(("_", Var(None)), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))}, Var("memed"))
// [Typer] resolve: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var(None)), App(Var("func"), targs=None, [Var("memed"), Var("n")]), Let(("_", Var(None)), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))
// [Typer] resolve: Eq(Get(Var("cache"), Var("n")), Var("unmem_magic"))
// [Typer] resolve: Get(Var("cache"), Var("n"))
// [Typer] resolve: Var("cache")
// [Typer] resolve: Var("n")
// [Typer] resolve: Var("unmem_magic")
// [Typer] resolve: Let(("res", Var(None)), App(Var("func"), targs=None, [Var("memed"), Var("n")]), Let(("_", Var(None)), Put(Var("cache"), Var("n"), Var("res")), Var("res")))
// [Typer] resolve: App(Var("func"), targs=None, [Var("memed"), Var("n")])
// [Typer] resolve: Var("memed")
// [Typer] resolve: Var("n")
// [Typer] resolve: Var("func")
// [Typer] resolve: Let(("_", Var(None)), Put(Var("cache"), Var("n"), Var("res")), Var("res"))
// [Typer] resolve: Put(Var("cache"), Var("n"), Var("res"))
// [Typer] resolve: Var("cache")
// [Typer] resolve: Var("n")
// [Typer] resolve: Var("res")
// [Typer] resolve: Var("res")
// [Typer] resolve: Get(Var("cache"), Var("n"))
// [Typer] resolve: Var("cache")
// [Typer] resolve: Var("n")
// [Typer] resolve: Var("memed")
// [Typer] resolve: LetRec({tyvars: [], name: ("mem_fib", Int), args: [("f", (Int) -> Int), ("n", Int)], body: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("f"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]), App(Var("f"), targs=None, [Prim(Var("n"), Int(2), Sub, kind=None)]), Add, kind=None))}, LetRec({tyvars: [], name: ("fib", Int), args: [("n", Int)], body: Let(("f", Var(None)), App(Var("mem"), targs=None, [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=None)]), App(Var("f"), targs=None, [Var("n")]))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("n", Var(None)), App(Var("read_int"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("fib"), targs=None, [Var("n")])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Unit)))}, Unit)))
// [Typer] resolve: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("f"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]), App(Var("f"), targs=None, [Prim(Var("n"), Int(2), Sub, kind=None)]), Add, kind=None))
// [Typer] resolve: LE(Var("n"), Int(1))
// [Typer] resolve: Var("n")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("n")
// [Typer] resolve: Prim(App(Var("f"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]), App(Var("f"), targs=None, [Prim(Var("n"), Int(2), Sub, kind=None)]), Add, kind=None)
// [Typer] resolve: App(Var("f"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)])
// [Typer] resolve: Prim(Var("n"), Int(1), Sub, kind=None)
// [Typer] resolve: Var("n")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("f")
// [Typer] resolve: App(Var("f"), targs=None, [Prim(Var("n"), Int(2), Sub, kind=None)])
// [Typer] resolve: Prim(Var("n"), Int(2), Sub, kind=None)
// [Typer] resolve: Var("n")
// [Typer] resolve: Int(2)
// [Typer] resolve: Var("f")
// [Typer] resolve: LetRec({tyvars: [], name: ("fib", Int), args: [("n", Int)], body: Let(("f", Var(None)), App(Var("mem"), targs=None, [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=None)]), App(Var("f"), targs=None, [Var("n")]))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("n", Var(None)), App(Var("read_int"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("fib"), targs=None, [Var("n")])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Unit)))}, Unit))
// [Typer] resolve: Let(("f", Var(None)), App(Var("mem"), targs=None, [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=None)]), App(Var("f"), targs=None, [Var("n")]))
// [Typer] resolve: App(Var("mem"), targs=None, [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=None)])
// [Typer] resolve: Var("mem_fib")
// [Typer] resolve: Prim(Var("n"), Int(1), Add, kind=None)
// [Typer] resolve: Var("n")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("mem")
// [Typer] resolve: App(Var("f"), targs=None, [Var("n")])
// [Typer] resolve: Var("n")
// [Typer] resolve: Var("f")
// [Typer] resolve: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("n", Var(None)), App(Var("read_int"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("fib"), targs=None, [Var("n")])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Unit)))}, Unit)
// [Typer] resolve: Let(("n", Var(None)), App(Var("read_int"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("fib"), targs=None, [Var("n")])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Unit)))
// [Typer] resolve: App(Var("read_int"), targs=None, [])
// [Typer] resolve: Var("read_int")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("fib"), targs=None, [Var("n")])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Unit))
// [Typer] resolve: App(Var("print_int"), targs=None, [App(Var("fib"), targs=None, [Var("n")])])
// [Typer] resolve: App(Var("fib"), targs=None, [Var("n")])
// [Typer] resolve: Var("n")
// [Typer] resolve: Var("fib")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Unit)
// [Typer] resolve: App(Var("print_char"), targs=None, [Int(10)])
// [Typer] resolve: Int(10)
// [Typer] resolve: Var("print_char")
// [Typer] resolve: Unit
// [Typer] resolve: Unit
// [Typer] check: Let(("unmem_magic", Int), Neg(Int(1919810), kind=None), LetRec({tyvars: [], name: ("mem", (Int) -> Int), args: [("func", ((Int) -> Int, Int) -> Int), ("max_n", Int)], body: Let(("cache", Var(None)), Array(Var("max_n"), Var("unmem_magic")), LetRec({tyvars: [], name: ("memed", Int), args: [("n", Int)], body: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var(None)), App(Var("func"), targs=None, [Var("memed"), Var("n")]), Let(("_", Var(None)), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))}, Var("memed")))}, LetRec({tyvars: [], name: ("mem_fib", Int), args: [("f", (Int) -> Int), ("n", Int)], body: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("f"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]), App(Var("f"), targs=None, [Prim(Var("n"), Int(2), Sub, kind=None)]), Add, kind=None))}, LetRec({tyvars: [], name: ("fib", Int), args: [("n", Int)], body: Let(("f", Var(None)), App(Var("mem"), targs=None, [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=None)]), App(Var("f"), targs=None, [Var("n")]))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("n", Var(None)), App(Var("read_int"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("fib"), targs=None, [Var("n")])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Unit)))}, Unit))))) against Unit
// [Typer] check: Neg(Int(1919810), kind=None) against Int
// [Typer] check: Int(1919810) against Int
// [Typer] check: LetRec({tyvars: [], name: ("mem", (Int) -> Int), args: [("func", ((Int) -> Int, Int) -> Int), ("max_n", Int)], body: Let(("cache", Var(None)), Array(Var("max_n"), Var("unmem_magic")), LetRec({tyvars: [], name: ("memed", Int), args: [("n", Int)], body: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var(None)), App(Var("func"), targs=None, [Var("memed"), Var("n")]), Let(("_", Var(None)), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))}, Var("memed")))}, LetRec({tyvars: [], name: ("mem_fib", Int), args: [("f", (Int) -> Int), ("n", Int)], body: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("f"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]), App(Var("f"), targs=None, [Prim(Var("n"), Int(2), Sub, kind=None)]), Add, kind=None))}, LetRec({tyvars: [], name: ("fib", Int), args: [("n", Int)], body: Let(("f", Var(None)), App(Var("mem"), targs=None, [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=None)]), App(Var("f"), targs=None, [Var("n")]))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("n", Var(None)), App(Var("read_int"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("fib"), targs=None, [Var("n")])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Unit)))}, Unit)))) against Unit
// [Typer] typevars: []
// [Typer] check: Let(("cache", Var(None)), Array(Var("max_n"), Var("unmem_magic")), LetRec({tyvars: [], name: ("memed", Int), args: [("n", Int)], body: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var(None)), App(Var("func"), targs=None, [Var("memed"), Var("n")]), Let(("_", Var(None)), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))}, Var("memed"))) against (Int) -> Int
// [Typer] infer: Array(Var("max_n"), Var("unmem_magic"))
// [Typer] infer: Var("unmem_magic")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] check: Var("max_n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Array[Int]
// [Typer] union: Var(None) and Array[Int]
// [Typer] check: LetRec({tyvars: [], name: ("memed", Int), args: [("n", Int)], body: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var(None)), App(Var("func"), targs=None, [Var("memed"), Var("n")]), Let(("_", Var(None)), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))}, Var("memed")) against (Int) -> Int
// [Typer] typevars: []
// [Typer] check: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var(None)), App(Var("func"), targs=None, [Var("memed"), Var("n")]), Let(("_", Var(None)), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n"))) against Int
// [Typer] check: Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")) against Bool
// [Typer] infer: Get(Var("cache"), Var("n"))
// [Typer] infer: Var("cache")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("unmem_magic")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Let(("res", Var(None)), App(Var("func"), targs=None, [Var("memed"), Var("n")]), Let(("_", Var(None)), Put(Var("cache"), Var("n"), Var("res")), Var("res"))) against Int
// [Typer] infer: App(Var("func"), targs=None, [Var("memed"), Var("n")])
// [Typer] inst: TypeScheme(([], ((Int) -> Int, Int) -> Int))
// [Typer] inst result: ((Int) -> Int, Int) -> Int
// [Typer] check: Var("memed") against (Int) -> Int
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("_", Var(None)), Put(Var("cache"), Var("n"), Var("res")), Var("res")) against Int
// [Typer] infer: Put(Var("cache"), Var("n"), Var("res"))
// [Typer] infer: Var("res")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] check: Var("cache") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Var("res") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Get(Var("cache"), Var("n")) against Int
// [Typer] check: Var("cache") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("memed") against (Int) -> Int
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("mem_fib", Int), args: [("f", (Int) -> Int), ("n", Int)], body: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("f"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]), App(Var("f"), targs=None, [Prim(Var("n"), Int(2), Sub, kind=None)]), Add, kind=None))}, LetRec({tyvars: [], name: ("fib", Int), args: [("n", Int)], body: Let(("f", Var(None)), App(Var("mem"), targs=None, [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=None)]), App(Var("f"), targs=None, [Var("n")]))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("n", Var(None)), App(Var("read_int"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("fib"), targs=None, [Var("n")])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Unit)))}, Unit))) against Unit
// [Typer] typevars: []
// [Typer] check: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("f"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]), App(Var("f"), targs=None, [Prim(Var("n"), Int(2), Sub, kind=None)]), Add, kind=None)) against Int
// [Typer] check: LE(Var("n"), Int(1)) against Bool
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Prim(App(Var("f"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]), App(Var("f"), targs=None, [Prim(Var("n"), Int(2), Sub, kind=None)]), Add, kind=None) against Int
// [Typer] check: App(Var("f"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]) against Int
// [Typer] infer: Prim(Var("n"), Int(1), Sub, kind=None)
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("f"), targs=None, [Prim(Var("n"), Int(2), Sub, kind=None)]) against Int
// [Typer] infer: Prim(Var("n"), Int(2), Sub, kind=None)
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(2)
// [Typer] unify: Int and Int
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("fib", Int), args: [("n", Int)], body: Let(("f", Var(None)), App(Var("mem"), targs=None, [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=None)]), App(Var("f"), targs=None, [Var("n")]))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("n", Var(None)), App(Var("read_int"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("fib"), targs=None, [Var("n")])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Unit)))}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: Let(("f", Var(None)), App(Var("mem"), targs=None, [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=None)]), App(Var("f"), targs=None, [Var("n")])) against Int
// [Typer] infer: App(Var("mem"), targs=None, [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=None)])
// [Typer] inst: TypeScheme(([], (((Int) -> Int, Int) -> Int, Int) -> (Int) -> Int))
// [Typer] inst result: (((Int) -> Int, Int) -> Int, Int) -> (Int) -> Int
// [Typer] check: Var("mem_fib") against ((Int) -> Int, Int) -> Int
// [Typer] inst: TypeScheme(([], ((Int) -> Int, Int) -> Int))
// [Typer] inst result: ((Int) -> Int, Int) -> Int
// [Typer] unify: ((Int) -> Int, Int) -> Int and ((Int) -> Int, Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: Prim(Var("n"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and (Int) -> Int
// [Typer] union: Var(None) and (Int) -> Int
// [Typer] check: App(Var("f"), targs=None, [Var("n")]) against Int
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("n", Var(None)), App(Var("read_int"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("fib"), targs=None, [Var("n")])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Unit)))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("n", Var(None)), App(Var("read_int"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("fib"), targs=None, [Var("n")])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Unit)))
// [Typer] infer: App(Var("read_int"), targs=None, [])
// [Typer] inst: TypeScheme(([], () -> Int))
// [Typer] inst result: () -> Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("fib"), targs=None, [Var("n")])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Unit))
// [Typer] infer: App(Var("print_int"), targs=None, [App(Var("fib"), targs=None, [Var("n")])])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("fib"), targs=None, [Var("n")]) against Int
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Unit)
// [Typer] infer: App(Var("print_char"), targs=None, [Int(10)])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Int(10) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Unit
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [KnfOpt] freq: {mem.2: Once, memed.8: AsClosure, mem_fib.15: AsClosure, fib.27: Once, main.33: Once}
// [KnfOpt] Knf inline Some(mem)
// [KnfOpt] Knf inline Some(fib)
// [KnfOpt] freq: {mem_fib.15: Once, main.33: Once, memed.51: AsClosure}
// [KnfOpt] Knf inline Some(mem_fib)
// [KnfOpt] freq: {main.33: Once, memed.51: Many(3)}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 27
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 27
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 27
// [KnfOpt] Inline decision rejected
// [KnfOpt] Numbers of let rec: 2 2 0
// [KnfOpt] Tuple freq: {n.52: MayEscape, _60: MayEscape, cache.50: MayEscape, _63: MayEscape, res.54: MayEscape, _48: MayEscape, _56: MayEscape, n.34: MayEscape, _35: MayEscape, _38: MayEscape}
// [Parser] flags: ["has_read"]
// [CoreOpt] Call frequnce: FnCallFreq({f0: Multiple, f4: Once, f1: Once})
// [CoreOpt] allow_inline: false %4 memed.66 true false true false true
// [CoreOpt] allow_inline: false %6 memed.66 true false true false true
// [CoreOpt] allow_inline: false %0 main.65 false true true false true
// [CoreOpt] allow_inline: false %3 memed.66 false false true false true
// [CoreOpt] allow_inline: false %4 memed.66 true false true false true
// [CoreOpt] allow_inline: false %6 memed.66 true false true false true
// [CoreOpt] allow_inline: false %0 main.65 false true true false true
// [CoreOpt] allow_inline: false %3 memed.66 false false true false true
// [CoreOpt] Call frequnce: FnCallFreq({f0: Multiple, f4: Once, f1: Once})
// [CoreOpt] allow_inline: false %4 memed.66 true false true false true
// [CoreOpt] allow_inline: false %6 memed.66 true false true false true
// [CoreOpt] allow_inline: false %0 main.65 false true true false true
// [CoreOpt] allow_inline: false %3 memed.66 false false true false true
// [CoreOpt] allow_inline: false %4 memed.66 true false true false true
// [CoreOpt] allow_inline: false %6 memed.66 true false true false true
// [CoreOpt] allow_inline: false %0 main.65 false true true false true
// [CoreOpt] allow_inline: false %3 memed.66 false false true false true
// [CoreOpt] Call frequnce: FnCallFreq({f0: Multiple, f4: Once, f1: Once})
// [CoreOpt] allow_inline: false %4 memed.66 true false true false true
// [CoreOpt] allow_inline: false %6 memed.66 true false true false true
// [CoreOpt] allow_inline: false %0 main.65 false true true false true
// [CoreOpt] allow_inline: false %3 memed.66 false false true false true
// [CoreOpt] allow_inline: false %4 memed.66 true false true false true
// [CoreOpt] allow_inline: false %6 memed.66 true false true false true
// [CoreOpt] allow_inline: false %0 main.65 false true true false true
// [CoreOpt] allow_inline: false %3 memed.66 false false true false true
