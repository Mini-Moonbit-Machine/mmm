// [Asm] pre_assigned_registers: BlockParam(bref=b3, bpref=$b.0) -> v20, FnParam(fref=f6, fpref=$f.0) -> v2, Insn(iref=%9) -> v13, Insn(iref=%8) -> v12, FreeVar(fvref=^1) -> v3, Insn(iref=%10) -> v14, Insn(iref=%14) -> v8, Self(fref=f6) -> v0, Insn(iref=%5) -> v9, Insn(iref=%0) -> v5, Insn(iref=%4) -> v19, Insn(iref=%13) -> v4, Insn(iref=%7) -> v11, Insn(iref=%2) -> v7, Insn(iref=%1) -> v6, Insn(iref=%11) -> v15, BlockParam(bref=b4, bpref=$b.0) -> v17, Insn(iref=%6) -> v10, BlockParam(bref=b9, bpref=$b.0) -> v16, Insn(iref=%12) -> v18
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=FnParam(fref=f6, fpref=$f.0), width=@32))
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f6, fpref=$f.0), Int32(val=1)])
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=FnParam(fref=f6, fpref=$f.0), width=@32))
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Insn(iref=%1)])
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=FnParam(fref=f6, fpref=$f.0), width=@32))
// [Asm] defs: [v11]
// [Asm] live_set: [v3, v0, v11, v2]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v3, v0, v11, v2]
// [Asm] move_origin: [v0]
// [Asm] defined: s10 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v3, v0, v25, v11, v2]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v0, v25, v11, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v0, v25, a0, v2]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v3, v0, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v12]
// [Asm] live_set: [v3, v0, v12, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v0, v12, v2]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v3, v0, v12, v13, v2]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v3, v0, v12, v13, v2]
// [Asm] move_origin: [v0]
// [Asm] defined: s10 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v3, v12, v13, v22, v2]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v12, v13, v22, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v12, a0, v22, v2]
// [Asm] move_origin: [v13]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v3, v12, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v14]
// [Asm] live_set: [v3, v14, v12, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v14, v12, v2]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v3, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v3, v16, v2]
// [Asm] move_origin: [v15]
// [Asm] defined: v16 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v20]
// [Asm] move_origin: [v9]
// [Asm] defined: v20 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v20]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v17]
// [Asm] move_origin: []
// [Asm] defs: [v20]
// [Asm] live_set: [v20]
// [Asm] move_origin: [v17]
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v20]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v0, v2]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v0, v5, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v3, v0, v5, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v0, v2]
// [Asm] move_origin: []
// [Asm] defs: [v28]
// [Asm] live_set: [v2, v0, v28, v3]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v0, v3]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v3, v16, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v16, v2]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v3, v17, v2]
// [Asm] move_origin: [v16]
// [Asm] defined: v17 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of memed8.51"];
// [Asm]   r0 [label="v11 ← a0", color=green];
// [Asm]   r20 [label="v13 ← a0", color=green];
// [Asm]   r23 [label="v15 ← a0", color=green];
// [Asm]   r3 [label="v2 ← s2", color=green];
// [Asm]   r9 [label="t2", color=blue];
// [Asm]   r26 [label="v20 ← a0", color=green];
// [Asm]   r27 [label="v5 ← a0", color=green];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r13 [label="a2", color=blue];
// [Asm]   r4 [label="s10", color=blue];
// [Asm]   r29 [label="v28 ← a0", color=green];
// [Asm]   r1 [label="v3 ← s0", color=green];
// [Asm]   r28 [label="v6 ← a1", color=green];
// [Asm]   r11 [label="t4", color=blue];
// [Asm]   r7 [label="t0", color=blue];
// [Asm]   r10 [label="t3", color=blue];
// [Asm]   r22 [label="v14 ← a0", color=green];
// [Asm]   r14 [label="a3", color=blue];
// [Asm]   r8 [label="t1", color=blue];
// [Asm]   r30 [label="v17 ← a0", color=green];
// [Asm]   r5 [label="v25 ← a1", color=green];
// [Asm]   r24 [label="v16 ← a0", color=green];
// [Asm]   r15 [label="a4", color=blue];
// [Asm]   r25 [label="v9 ← a0", color=green];
// [Asm]   r2 [label="v0 ← s1", color=green];
// [Asm]   r16 [label="a5", color=blue];
// [Asm]   r18 [label="a7", color=blue];
// [Asm]   r19 [label="v12 ← s3", color=green];
// [Asm]   r21 [label="v22 ← a1", color=green];
// [Asm]   r17 [label="a6", color=blue];
// [Asm]   r12 [label="a1", color=blue];
// [Asm]   r6 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r30;
// [Asm]   r3 -- r16;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r10 -- r19;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r27 -- r28;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r19 -- r21;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r5;
// [Asm]   r12 -- r19;
// [Asm]   r17 -- r19;
// [Asm]   r11 -- r19;
// [Asm]   r3 -- r8;
// [Asm]   r6 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r14 -- r19;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r30;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r19 -- r22;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r27;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r3 -- r19;
// [Asm]   r6 -- r11;
// [Asm]   r6 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r18;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r23;
// [Asm]   r8 -- r19;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r22;
// [Asm]   r16 -- r19;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r20;
// [Asm]   r6 -- r16;
// [Asm]   r3 -- r28;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r12;
// [Asm]   r13 -- r19;
// [Asm]   r1 -- r28;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r19;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r7 -- r19;
// [Asm]   r18 -- r19;
// [Asm]   r2 -- r14;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r1 -- r29;
// [Asm]   r3 -- r29;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r9 -- r19;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r14;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r3;
// [Asm]   r15 -- r19;
// [Asm]   r20 -- r21;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   r4 -- r19;
// [Asm]   r19 -- r20;
// [Asm]   r1 -- r24;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:v11-> 1:v3-> 2:v0-> 3:v2-> 5:v25-> 6:a0-> 7:t0-> 19:v12-> 8:t1-> 9:t2-> 10:t3-> 11:t4-> 12:a1-> 13:a2-> 14:a3-> 15:a4-> 16:a5-> 17:a6-> 18:a7-> 4:s10-> 20:v13-> 21:v22-> 22:v14-> 27:v5-> 28:v6-> 29:v28-> 23:v15-> 24:v16-> 30:v17-> 25:v9-> 26:v20"
// [Asm]   comment = "v11<-a0;v13<-a0;v15<-a0;v2<-s2;v20<-a0;v5<-a0;v28<-a0;v3<-s0;v6<-a1;v14<-a0;v17<-a0;v25<-a1;v16<-a0;v9<-a0;v0<-s1;v12<-s3;v22<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of memed8.51"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v11, v2, -1 ->   addi a0, s2, -1
// [Asm] subst   mv s10, v0 ->   mv s10, s1
// [Asm] subst   ld v25, 0(v0) ->   ld a1, 0(s1)
// [Asm] subst   jalr v25 ->   jalr a1
// [Asm] subst   mv v12, a0 ->   mv s3, a0
// [Asm] subst   addi v13, v2, -2 ->   addi a0, s2, -2
// [Asm] subst   mv s10, v0 ->   mv s10, s1
// [Asm] subst   ld v22, 0(v0) ->   ld a1, 0(s1)
// [Asm] subst   jalr v22 ->   jalr a1
// [Asm] subst   add v15, v12, v14 ->   add a0, s3, a0
// [Asm] subst   th.lurw v9, v3, v2, 2 ->   th.lurw a0, s0, s2, 2
// [Asm] subst   ret ->   ret
// [Asm] subst   th.surw v17, v3, v2, 2 ->   th.surw a0, s0, s2, 2
// [Asm] subst   j .memed8.51_3 ->   j .memed8.51_3
// [Asm] subst   mv v0, s10 ->   mv s1, s10
// [Asm] subst   mv v2, a0 ->   mv s2, a0
// [Asm] subst   ld v3, 8(v0) ->   ld s0, 8(s1)
// [Asm] subst   th.lurw v5, v3, v2, 2 ->   th.lurw a0, s0, s2, 2
// [Asm] subst   lw v6, unmem_magic.1 ->   lw a1, unmem_magic.1
// [Asm] subst   beq v5, v6, .memed8.51_1 ->   beq a0, a1, .memed8.51_1
// [Asm] subst   li v28, 1 ->   li a0, 1
// [Asm] subst   bge v28, v2, .memed8.51_7 ->   bge a0, s2, .memed8.51_7
// [Asm] subst   mv v16, v2 ->   mv a0, s2
// [Asm] subst   j .memed8.51_9 ->   j .memed8.51_9
// [Asm] pre_assigned_registers: Self(fref=f8) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main33 ->   call main33
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v8, Insn(iref=%3) -> v7, Mem(fref=f3, mref=m0) -> v2, Insn(iref=%7) -> v11, Mem(fref=f3, mref=m1) -> v3, Insn(iref=%2) -> v6, Insn(iref=%1) -> v5, Insn(iref=%6) -> v10, Insn(iref=%5) -> v9, Insn(iref=%0) -> v4, Self(fref=f3) -> v0
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v4, s11, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, s11, zero]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, s11, zero]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v19, v4, v5, s11, zero]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v4, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v4, v5, s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, s11, zero, v2]
// [Asm] move_origin: [v5]
// [Asm] defined: a1 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v2, v4, v18, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v4, zero, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: s10 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v4, v15, zero]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v15, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v15, zero, a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [zero, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v9]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v10]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v12, zero]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v12]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main33"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r20 [label="v3 ← a1", color=green];
// [Asm]   r23 [label="v15 ← a1", color=green];
// [Asm]   r3 [label="a0", color=blue];
// [Asm]   r9 [label="a2", color=blue];
// [Asm]   r26 [label="v12 ← a0", color=green];
// [Asm]   r27 [label="v11 ← a0", color=green];
// [Asm]   r6 [label="t3", color=blue];
// [Asm]   r13 [label="a6", color=blue];
// [Asm]   r4 [label="t1", color=blue];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r11 [label="a4", color=blue];
// [Asm]   r7 [label="t4", color=blue];
// [Asm]   r10 [label="a3", color=blue];
// [Asm]   r22 [label="s10", color=blue];
// [Asm]   r14 [label="a7", color=blue];
// [Asm]   r8 [label="a1", color=blue];
// [Asm]   r5 [label="t2", color=blue];
// [Asm]   r24 [label="v9 ← a0", color=green];
// [Asm]   r15 [label="v4 ← a0", color=green];
// [Asm]   r25 [label="v10 ← a0", color=green];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="v5 ← a1", color=green];
// [Asm]   r18 [label="v19 ← a2", color=green];
// [Asm]   r19 [label="v2 ← a2", color=green];
// [Asm]   r21 [label="v18 ← a3", color=green];
// [Asm]   r17 [label="v6 ← a2", color=green];
// [Asm]   r12 [label="a5", color=blue];
// [Asm]   r2 -- r20;
// [Asm]   r1 -- r12;
// [Asm]   r2 -- r26;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r15 -- r22;
// [Asm]   r8 -- r19;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r16 -- r19;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r1 -- r15;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r2 -- r11;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r19 -- r21;
// [Asm]   r16 -- r18;
// [Asm]   r3 -- r5;
// [Asm]   r16 -- r17;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r15 -- r18;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r15 -- r17;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r15 -- r21;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r3;
// [Asm]   r3 -- r13;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r2 -- r21;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r15 -- r23;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r24;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r15 -- r16;
// [Asm]   r15 -- r20;
// [Asm]   r2 -- r3;
// [Asm]   r15 -- r19;
// [Asm]   r3 -- r23;
// [Asm]   r20 -- r21;
// [Asm]   r2 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   r19 -- r20;
// [Asm]   comment = "0:t0-> 1:s11-> 2:zero-> 3:a0-> 4:t1-> 5:t2-> 6:t3-> 7:t4-> 8:a1-> 9:a2-> 10:a3-> 11:a4-> 12:a5-> 13:a6-> 14:a7-> 15:v4-> 19:v2-> 16:v5-> 17:v6-> 18:v19-> 20:v3-> 21:v18-> 23:v15-> 22:s10-> 24:v9-> 25:v10-> 26:v12-> 27:v11"
// [Asm]   comment = "v3<-a1;v15<-a1;v12<-a0;v11<-a0;v9<-a0;v4<-a0;v10<-a0;v5<-a1;v19<-a2;v2<-a2;v18<-a3;v6<-a2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main33"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call minimbt_read_int ->   call minimbt_read_int
// [Asm] subst   addi v5, v4, 1 ->   addi a1, a0, 1
// [Asm] subst   lw v6, unmem_magic.1 ->   lw a2, unmem_magic.1
// [Asm] subst   slliw v19, v5, 2 ->   slliw a2, a1, 2
// [Asm] subst   sub v2, s11, v19 ->   sub a2, s11, a2
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a2, -8
// [Asm] subst   addi v3, s11, -16 ->   addi a1, s11, -16
// [Asm] subst   andi s11, v3, -8 ->   andi s11, a1, -8
// [Asm] subst   la v18, memed8.51 ->   la a3, memed8.51
// [Asm] subst   sd v18, 0(v3) ->   sd a3, 0(a1)
// [Asm] subst   sd v2, 8(v3) ->   sd a2, 8(a1)
// [Asm] subst   mv s10, v3 ->   mv s10, a1
// [Asm] subst   ld v15, 0(v3) ->   ld a1, 0(a1)
// [Asm] subst   jalr v15 ->   jalr a1
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v12, 10 ->   li a0, 10
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$unmem_magic.1"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   comment = "0:v2-> 1:a0"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$unmem_magic.1"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, -1919810 ->   li a0, -1919810
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] main33:
// [Asm] # block info: defs: [v3, t1, ft0, ft1, a1, s11, v12, fa1, fa2, ft6, a4, fa6, a6, v19, ft10, v4, ft5, v6, ft7, v11, ft4, v5, ft9, v10, a5, fa4, a0, ft2, a2, a3, s10, v9, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v15, v2], uses: [v3, v5, v18, a0, zero, v19, v4, s11, v15, v12, v9, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main33_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   # save_ctx2  # live: [s11, zero]
// [Asm]   call minimbt_read_int  # live: [s11, zero, a0]
// [Asm]   mv v4, a0  # live: [v4, s11, zero]
// [Asm]   # restore_ctx2  # live: [v4, s11, zero]
// [Asm]   addi v5, v4, 1  # live: [v4, v5, s11, zero]
// [Asm]   lw v6, unmem_magic.1  # live: [v4, v5, s11, zero]
// [Asm]   slliw v19, v5, 2  # live: [v19, v4, v5, s11, zero]
// [Asm]   sub v2, s11, v19  # live: [v4, v5, zero, v2]
// [Asm]   andi s11, v2, -8  # live: [v4, v5, s11, zero, v2]
// [Asm]   mv a1, v5  # live: [v4, s11, zero, v2]
// [Asm]   addi v3, s11, -16  # live: [v2, v4, zero, v3]
// [Asm]   andi s11, v3, -8  # live: [v2, v4, zero, v3]
// [Asm]   la v18, memed8.51  # live: [v2, v4, v18, zero, v3]
// [Asm]   sd v18, 0(v3)  # live: [v2, v4, zero, v3]
// [Asm]   sd v2, 8(v3)  # live: [v4, zero, v3]
// [Asm]   mv s10, v3  # live: [v4, zero, v3]
// [Asm]   ld v15, 0(v3)  # live: [v4, v15, zero]
// [Asm]   # save_ctx2  # live: [v4, v15, zero]
// [Asm]   mv a0, v4  # live: [v15, zero, a0]
// [Asm]   jalr v15  # live: [zero, a0]
// [Asm]   mv v9, a0  # live: [zero, v9]
// [Asm]   # restore_ctx2  # live: [zero, v9]
// [Asm]   # save_ctx2  # live: [zero, v9]
// [Asm]   mv a0, v9  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v10, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   li v12, 10  # live: [v12, zero]
// [Asm]   mv a0, v12  # live: [zero, a0]
// [Asm]   call minimbt_print_char  # live: [zero, a0]
// [Asm]   mv v11, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main33  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$unmem_magic.1:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$unmem_magic.1_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, -1919810  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0, sp, s0, ra, s11, t5], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$unmem_magic.1  # live: [s0, a0]
// [Asm]   la t5, unmem_magic.1  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] memed8.51:
// [Asm] # block info: defs: [v3, v0, v5, v6, v2], uses: [v3, v5, a0, v0, v6, s10, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0], live_out: [v2, v0, v3]
// [Asm] # block parameters: []
// [Asm] .memed8.51_0:
// [Asm]   # save_ctx1  # live: [a0, s10]
// [Asm]   mv v0, s10  # live: [v0, a0]
// [Asm]   mv v2, a0  # live: [v0, v2]
// [Asm]   ld v3, 8(v0)  # live: [v3, v0, v2]
// [Asm]   th.lurw v5, v3, v2, 2  # live: [v3, v0, v5, v2]
// [Asm]   lw v6, unmem_magic.1  # live: [v3, v0, v5, v6, v2]
// [Asm] # control
// [Asm]   beq v5, v6, .memed8.51_1  # live: [v3, v0, v2]
// [Asm] 
// [Asm] # block info: defs: [v9, v20], uses: [v2, v9, v3], upward_exposed: [v2, v3], params_defs: []
// [Asm] # live_in: [v3, v2], live_out: [v20]
// [Asm] # block parameters: []
// [Asm] .memed8.51_2:
// [Asm]   th.lurw v9, v3, v2, 2  # live: [v9]
// [Asm] # control
// [Asm]   mv v20, v9  # live: [v20]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v20], upward_exposed: [v20], params_defs: [v20]
// [Asm] # live_in: [v20], live_out: []
// [Asm] # block parameters: [v20]
// [Asm] .memed8.51_3:
// [Asm] # control
// [Asm]   mv a0, v20  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [], uses: [], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v3, v0, v2], live_out: [v3, v0, v2]
// [Asm] # block parameters: []
// [Asm] .memed8.51_1:
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v28], uses: [v28, v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v3, v0, v2], live_out: [v3, v0, v2]
// [Asm] # block parameters: []
// [Asm] .memed8.51_6:
// [Asm] # control
// [Asm]   li v28, 1  # live: [v2, v0, v28, v3]
// [Asm]   bge v28, v2, .memed8.51_7  # live: [v2, v0, v3]
// [Asm] 
// [Asm] # block info: defs: [v25, t1, v14, v16, v13, v22, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v11, v25, v14, a0, v13, v22, v0, v12, v15, v2], upward_exposed: [v0, v2], params_defs: []
// [Asm] # live_in: [v3, v0, v2], live_out: [v2, v16, v3]
// [Asm] # block parameters: []
// [Asm] .memed8.51_8:
// [Asm]   addi v11, v2, -1  # live: [v3, v0, v11, v2]
// [Asm]   mv s10, v0  # live: [v3, v0, v11, v2]
// [Asm]   ld v25, 0(v0)  # live: [v3, v0, v25, v11, v2]
// [Asm]   # save_ctx2  # live: [v3, v0, v25, v11, v2]
// [Asm]   mv a0, v11  # live: [v3, v0, v25, a0, v2]
// [Asm]   jalr v25  # live: [v3, v0, a0, v2]
// [Asm]   mv v12, a0  # live: [v3, v0, v12, v2]
// [Asm]   # restore_ctx2  # live: [v3, v0, v12, v2]
// [Asm]   addi v13, v2, -2  # live: [v3, v0, v12, v13, v2]
// [Asm]   mv s10, v0  # live: [v3, v0, v12, v13, v2]
// [Asm]   ld v22, 0(v0)  # live: [v3, v12, v13, v22, v2]
// [Asm]   # save_ctx2  # live: [v3, v12, v13, v22, v2]
// [Asm]   mv a0, v13  # live: [v3, v12, a0, v22, v2]
// [Asm]   jalr v22  # live: [v3, v12, a0, v2]
// [Asm]   mv v14, a0  # live: [v3, v14, v12, v2]
// [Asm]   # restore_ctx2  # live: [v3, v14, v12, v2]
// [Asm]   add v15, v12, v14  # live: [v3, v15, v2]
// [Asm] # control
// [Asm]   mv v16, v15  # live: [v3, v16, v2]
// [Asm] 
// [Asm] # block info: defs: [v17], uses: [v16], upward_exposed: [v16], params_defs: [v16]
// [Asm] # live_in: [v3, v16, v2], live_out: [v2, v17, v3]
// [Asm] # block parameters: [v16]
// [Asm] .memed8.51_9:
// [Asm] # control
// [Asm]   mv v17, v16  # live: [v3, v17, v2]
// [Asm] 
// [Asm] # block info: defs: [v20], uses: [v2, v17, v3], upward_exposed: [v2, v17, v3], params_defs: [v17]
// [Asm] # live_in: [v3, v17, v2], live_out: [v20]
// [Asm] # block parameters: [v17]
// [Asm] .memed8.51_4:
// [Asm]   th.surw v17, v3, v2, 2  # live: [v17]
// [Asm] # control
// [Asm]   mv v20, v17  # live: [v20]
// [Asm]   j .memed8.51_3  # live: [v20]
// [Asm] 
// [Asm] # block info: defs: [v16], uses: [v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v3, v2], live_out: [v2, v16, v3]
// [Asm] # block parameters: []
// [Asm] .memed8.51_7:
// [Asm] # control
// [Asm]   mv v16, v2  # live: [v3, v16, v2]
// [Asm]   j .memed8.51_9  # live: [v3, v16, v2]
// [Asm] 
// [Asm] unmem_magic.1:
// [Asm]   .zero 4
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: Let(("unmem_magic", Int), Neg(Int(1919810), kind=Some(Int)), LetRec({name: ("mem", Fun([Int], Int)), args: [("func", Fun([Fun([Int], Int), Int], Int)), ("max_n", Int)], body: Let(("cache", Var({val: Some(Array(Int))})), Array(Var("max_n"), Var("unmem_magic")), LetRec({name: ("memed", Int), args: [("n", Int)], body: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var({val: Some(Int)})), App(Var("func"), [Var("memed"), Var("n")]), Let(("_", Var({val: Some(Unit)})), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))}, Var("memed")))}, LetRec({name: ("mem_fib", Int), args: [("f", Fun([Int], Int)), ("n", Int)], body: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))]), Add, kind=Some(Int)))}, LetRec({name: ("fib", Int), args: [("n", Int)], body: Let(("f", Var({val: Some(Fun([Int], Int))})), App(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=Some(Int))]), App(Var("f"), [Var("n")]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))}, App(Var("main"), []))))))
// [Knf] build_knf: Neg(Int(1919810), kind=Some(Int))
// [Knf] build_knf: LetRec({name: ("mem", Fun([Int], Int)), args: [("func", Fun([Fun([Int], Int), Int], Int)), ("max_n", Int)], body: Let(("cache", Var({val: Some(Array(Int))})), Array(Var("max_n"), Var("unmem_magic")), LetRec({name: ("memed", Int), args: [("n", Int)], body: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var({val: Some(Int)})), App(Var("func"), [Var("memed"), Var("n")]), Let(("_", Var({val: Some(Unit)})), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))}, Var("memed")))}, LetRec({name: ("mem_fib", Int), args: [("f", Fun([Int], Int)), ("n", Int)], body: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))]), Add, kind=Some(Int)))}, LetRec({name: ("fib", Int), args: [("n", Int)], body: Let(("f", Var({val: Some(Fun([Int], Int))})), App(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=Some(Int))]), App(Var("f"), [Var("n")]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))}, App(Var("main"), [])))))
// [Knf] build_knf: Let(("cache", Var({val: Some(Array(Int))})), Array(Var("max_n"), Var("unmem_magic")), LetRec({name: ("memed", Int), args: [("n", Int)], body: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var({val: Some(Int)})), App(Var("func"), [Var("memed"), Var("n")]), Let(("_", Var({val: Some(Unit)})), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))}, Var("memed")))
// [Knf] build_knf: Array(Var("max_n"), Var("unmem_magic"))
// [Knf] build_knf: Var("max_n")
// [Knf] build_knf: Var("unmem_magic")
// [Knf] build_knf: LetRec({name: ("memed", Int), args: [("n", Int)], body: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var({val: Some(Int)})), App(Var("func"), [Var("memed"), Var("n")]), Let(("_", Var({val: Some(Unit)})), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))}, Var("memed"))
// [Knf] build_knf: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var({val: Some(Int)})), App(Var("func"), [Var("memed"), Var("n")]), Let(("_", Var({val: Some(Unit)})), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))
// [Knf] build_knf: Get(Var("cache"), Var("n"))
// [Knf] build_knf: Var("cache")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("unmem_magic")
// [Knf] build_knf: Let(("res", Var({val: Some(Int)})), App(Var("func"), [Var("memed"), Var("n")]), Let(("_", Var({val: Some(Unit)})), Put(Var("cache"), Var("n"), Var("res")), Var("res")))
// [Knf] build_knf: App(Var("func"), [Var("memed"), Var("n")])
// [Knf] build_knf: Var("func")
// [Knf] build_knf: Var("memed")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("cache"), Var("n"), Var("res")), Var("res"))
// [Knf] build_knf: Put(Var("cache"), Var("n"), Var("res"))
// [Knf] build_knf: Var("cache")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("res")
// [Knf] build_knf: Var("res")
// [Knf] build_knf: Get(Var("cache"), Var("n"))
// [Knf] build_knf: Var("cache")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("memed")
// [Knf] build_knf: LetRec({name: ("mem_fib", Int), args: [("f", Fun([Int], Int)), ("n", Int)], body: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))]), Add, kind=Some(Int)))}, LetRec({name: ("fib", Int), args: [("n", Int)], body: Let(("f", Var({val: Some(Fun([Int], Int))})), App(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=Some(Int))]), App(Var("f"), [Var("n")]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))}, App(Var("main"), []))))
// [Knf] build_knf: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))]), Add, kind=Some(Int)))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Prim(App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))]), Add, kind=Some(Int))
// [Knf] build_knf: App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Prim(Var("n"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Prim(Var("n"), Int(2), Sub, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: LetRec({name: ("fib", Int), args: [("n", Int)], body: Let(("f", Var({val: Some(Fun([Int], Int))})), App(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=Some(Int))]), App(Var("f"), [Var("n")]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))}, App(Var("main"), [])))
// [Knf] build_knf: Let(("f", Var({val: Some(Fun([Int], Int))})), App(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=Some(Int))]), App(Var("f"), [Var("n")]))
// [Knf] build_knf: App(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("mem")
// [Knf] build_knf: Var("mem_fib")
// [Knf] build_knf: Prim(Var("n"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("f"), [Var("n")])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))}, App(Var("main"), []))
// [Knf] build_knf: Let(("n", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))
// [Knf] build_knf: App(Var("read_int"), [])
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit))
// [Knf] build_knf: App(Var("print_int"), [App(Var("fib"), [Var("n")])])
// [Knf] build_knf: App(Var("fib"), [Var("n")])
// [Knf] build_knf: Var("fib")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)
// [Knf] build_knf: App(Var("print_char"), [Int(10)])
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main33
// [Main]   .type main33, @function
// [Main] # leaf false
// [Main] main33:
// [Main] .main33_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call minimbt_read_int
// [Main]   addi a1, a0, 1
// [Main]   lw a2, unmem_magic.1
// [Main]   slliw a2, a1, 2
// [Main]   sub a2, s11, a2
// [Main]   andi s11, a2, -8
// [Main]   addi a1, s11, -16
// [Main]   andi s11, a1, -8
// [Main]   la a3, memed8.51
// [Main]   sd a3, 0(a1)
// [Main]   sd a2, 8(a1)
// [Main]   mv s10, a1
// [Main]   ld a1, 0(a1)
// [Main]   jalr a1
// [Main]   call minimbt_print_int
// [Main]   li a0, 10
// [Main]   call minimbt_print_char
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main33
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$unmem_magic.1
// [Main]   .type T$unmem_magic.1, @function
// [Main] # leaf true
// [Main] T$unmem_magic.1:
// [Main] .T$unmem_magic.1_0:
// [Main]   li a0, -1919810
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$unmem_magic.1
// [Main]   la t5, unmem_magic.1
// [Main]   sw a0, 0(t5)
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memed8.51
// [Main]   .type memed8.51, @function
// [Main] # leaf false
// [Main] memed8.51:
// [Main] .memed8.51_0:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   mv s1, s10
// [Main]   mv s2, a0
// [Main]   ld s0, 8(s1)
// [Main]   th.lurw a0, s0, s2, 2
// [Main]   lw a1, unmem_magic.1
// [Main]   beq a0, a1, .memed8.51_1
// [Main] 
// [Main] .memed8.51_2:
// [Main]   th.lurw a0, s0, s2, 2
// [Main] 
// [Main] .memed8.51_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main] .memed8.51_1:
// [Main] 
// [Main] .memed8.51_6:
// [Main]   li a0, 1
// [Main]   bge a0, s2, .memed8.51_7
// [Main] 
// [Main] .memed8.51_8:
// [Main]   addi a0, s2, -1
// [Main]   mv s10, s1
// [Main]   ld a1, 0(s1)
// [Main]   jalr a1
// [Main]   mv s3, a0
// [Main]   addi a0, s2, -2
// [Main]   mv s10, s1
// [Main]   ld a1, 0(s1)
// [Main]   jalr a1
// [Main]   add a0, s3, a0
// [Main] 
// [Main] .memed8.51_9:
// [Main] 
// [Main] .memed8.51_4:
// [Main]   th.surw a0, s0, s2, 2
// [Main]   j .memed8.51_3
// [Main] 
// [Main] .memed8.51_7:
// [Main]   mv a0, s2
// [Main]   j .memed8.51_9
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl unmem_magic.1
// [Main]   .type unmem_magic.1, @object
// [Main] unmem_magic.1:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function memed8.51
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^1), offset=FnParam(fref=f6, fpref=$f.0), width=@32), val=BlockParam(bref=b4, bpref=$b.0))
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b4, bpref=$b.0) -> $b4.$b.0
// [Wasm] Lowering control Jump(target=b3, args=[BlockParam(bref=b4, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b4, bpref=$b.0) -> $b4.$b.0
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Jump(target=b4, args=[BlockParam(bref=b9, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Get Local name BlockParam(bref=b4, bpref=$b.0) -> $b4.$b.0
// [Wasm] Lowering control Jump(target=b9, args=[FnParam(fref=f6, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f6, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Apply(ty=Int32, f=Self(fref=f6), args=[Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f6, fpref=$f.0), Int32(val=2)])
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Apply(ty=Int32, f=Self(fref=f6), args=[Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%8), Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering control Jump(target=b9, args=[Insn(iref=%11)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FnParam(fref=f6, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Branch(cond=Insn(iref=%6), t=b7, t_args=[], f=b8, f_args=[])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Jump(target=b6, args=[])
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^1), offset=FnParam(fref=f6, fpref=$f.0), width=@32))
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^1), offset=FnParam(fref=f6, fpref=$f.0), width=@32))
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::0)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local BlockParam(bref=b4, bpref=$b.0) -> $b4.$b.0
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function memed8.51 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f3, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [Wasm] Lowering function main33
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_int", args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::0)
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Insn(iref=%2))])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Int32), mref=m1, fills=[Field(index=0, val=Fn(fref=f6)), Field(index=1, val=Mem(fref=f3, mref=m0))])
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Lowering insn Apply(ty=Int32, f=Mem(fref=f3, mref=m1), args=[Insn(iref=%0)])
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Int32(val=10)])
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Local Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function main33 to wasm
// [Wasm] Lowering function T$unmem_magic.1
// [Wasm] Lowering control Return(args=[Int32(val=-1919810)])
// [Wasm] Lowered function T$unmem_magic.1 to wasm
// [KnfOpt] freq: {mem2: Once, memed8: AsClosure, mem_fib15: AsClosure, fib27: Once, main33: Once}
// [KnfOpt] Knf inline Some(mem2)
// [KnfOpt] Knf inline Some(fib27)
// [KnfOpt] Numbers of let rec: 3 5 2
// [KnfOpt] Give up lambda lifting because of too many let rec produced
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f6: MaybeInClosure, f8: Once, f2: Once, f3: Once, f0: Once})
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b4, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b4, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b4, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b4, bpref=$b.0)
// [CoreOpt] memed8.51 is inlining Call(ty=Int32, f=f2, args=[Self(fref=f6), FnParam(fref=f6, fpref=$f.0)])
// [CoreOpt] shifted callee .fn mem_fib15 #f2 : fn(closure(int32) -> int32, int32) -> int32
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b6 {
// [CoreOpt]   .bb #b6 () {
// [CoreOpt]     let %6: bool = le($f1, 1)
// [CoreOpt]     br %6 b7() b8()
// [CoreOpt]   }
// [CoreOpt]   .bb #b7 () {
// [CoreOpt]     jump b9($f1)
// [CoreOpt]   }
// [CoreOpt]   .bb #b8 () {
// [CoreOpt]     let %7: int32 = sub($f1, 1)
// [CoreOpt]     let %8: int32 = apply $f0(%7)
// [CoreOpt]     let %9: int32 = sub($f1, 2)
// [CoreOpt]     let %10: int32 = apply $f0(%9)
// [CoreOpt]     let %11: int32 = add(%8, %10)
// [CoreOpt]     jump b9(%11)
// [CoreOpt]   }
// [CoreOpt]   .bb #b9 (int32) {
// [CoreOpt]     return $b9.0
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f2
