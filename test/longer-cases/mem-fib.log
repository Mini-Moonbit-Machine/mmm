// [Asm] pre_assigned_registers: Insn(iref=%4) -> v7, Insn(iref=%1) -> v4, Insn(iref=%3) -> v6, FnParam(fref=f4, fpref=$f.0) -> v2, Self(fref=f4) -> v0, Insn(iref=%0) -> v3, Insn(iref=%2) -> v5
// [Asm] defs: []
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [zero, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v4]
// [Asm] live_set: [v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, zero, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.47"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r20 [label="v7 ← a0", color=green];
// [Asm]   r3 [label="a1", color=blue];
// [Asm]   r9 [label="a7", color=blue];
// [Asm]   r6 [label="a4", color=blue];
// [Asm]   r13 [label="t3", color=blue];
// [Asm]   r4 [label="a2", color=blue];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r11 [label="t1", color=blue];
// [Asm]   r7 [label="a5", color=blue];
// [Asm]   r10 [label="t0", color=blue];
// [Asm]   r14 [label="t4", color=blue];
// [Asm]   r8 [label="a6", color=blue];
// [Asm]   r5 [label="a3", color=blue];
// [Asm]   r15 [label="v3 ← a0", color=green];
// [Asm]   r2 [label="a0", color=blue];
// [Asm]   r16 [label="v4 ← a1", color=green];
// [Asm]   r18 [label="v6 ← a0", color=green];
// [Asm]   r19 [label="v8 ← a0", color=green];
// [Asm]   r17 [label="v5 ← a0", color=green];
// [Asm]   r12 [label="t2", color=blue];
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r1 -- r12;
// [Asm]   r2 -- r14;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r4;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r10;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r5;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   comment = "0:v2-> 1:zero-> 2:a0-> 3:a1-> 4:a2-> 5:a3-> 6:a4-> 7:a5-> 8:a6-> 9:a7-> 10:t0-> 11:t1-> 12:t2-> 13:t3-> 14:t4-> 16:v4-> 15:v3-> 17:v5-> 18:v6-> 19:v8-> 20:v7"
// [Asm]   comment = "v2<-a0;v7<-a0;v3<-a0;v4<-a1;v6<-a0;v8<-a0;v5<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.47"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call minimbt_read_int ->   call minimbt_read_int
// [Asm] subst   lw v4, unmem_magic.1 ->   lw a1, unmem_magic.1
// [Asm] subst   call fib.45 ->   call fib.45
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v8, 10 ->   li a0, 10
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v3, Self(fref=f8) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r8 [label="a7", color=blue];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r5 [label="a4", color=blue];
// [Asm]   r3 [label="a2", color=blue];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r9 [label="t0", color=blue];
// [Asm]   r6 [label="a5", color=blue];
// [Asm]   r13 [label="t4", color=blue];
// [Asm]   r4 [label="a3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="t2", color=blue];
// [Asm]   r7 [label="a6", color=blue];
// [Asm]   r10 [label="t1", color=blue];
// [Asm]   r12 [label="t3", color=blue];
// [Asm]   r14 [label="v3 ← a0", color=green];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:v2-> 1:a0-> 2:a1-> 3:a2-> 4:a3-> 5:a4-> 6:a5-> 7:a6-> 8:a7-> 9:t0-> 10:t1-> 11:t2-> 12:t3-> 13:t4-> 14:v3"
// [Asm]   comment = "v2<-a0;v3<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   lw v2, unmem_magic.1 ->   lw a0, unmem_magic.1
// [Asm] subst   call main.47 ->   call main.47
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%8) -> v13, Insn(iref=%10) -> v14, Insn(iref=%5) -> v10, Insn(iref=%0) -> v5, Insn(iref=%4) -> v17, Insn(iref=%3) -> v9, Insn(iref=%13) -> v8, Insn(iref=%7) -> v12, BlockParam(bref=b5, bpref=$b.0) -> v18, BlockParam(bref=b6, bpref=$b.0) -> v19, Insn(iref=%2) -> v7, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%1) -> v6, Insn(iref=%11) -> v15, Insn(iref=%6) -> v11, FnParam(fref=f2, fpref=$f.0) -> v2, Insn(iref=%12) -> v16, FnParam(fref=f2, fpref=$f.2) -> v4
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f2, fpref=$f.0), Int32(val=1)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Insn(iref=%1)])
// [Asm] defs: [v30]
// [Asm] live_set: [v2, v30, v3]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: [v20]
// [Asm] live_set: [v3, v20, v2]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v21, v2]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v18]
// [Asm] move_origin: [v2]
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v18]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v2, v35, v3]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v2, v36, v3]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: [v31]
// [Asm] live_set: [v31, v3]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v32]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v19]
// [Asm] move_origin: [v8]
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v19]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v19]
// [Asm] move_origin: [v18]
// [Asm] defined: v19 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v2, v10, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v2, v11, v10, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v11, v10, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v11, a0, v3]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, v11, a1, a0, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v2, v11, a2, a1, a0, v3]
// [Asm] move_origin: [v11]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, v11, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v12]
// [Asm] live_set: [v2, v11, v12, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v11, v12, v3]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v2, v11, v12, v13, v3]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v11, v12, v13, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v11, v12, a0, v3]
// [Asm] move_origin: [v13]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, v11, a1, v12, a0, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v2, a2, a1, v12, a0, v3]
// [Asm] move_origin: [v11]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, v12, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v14]
// [Asm] live_set: [v2, v14, v12, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v14, v12, v3]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v2, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v15, v22, v3]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v15, v23]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [v15]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v18]
// [Asm] move_origin: [v15]
// [Asm] defined: v18 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v19]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of memed.46"];
// [Asm]   r0 [label="v30 ← a0", color=green];
// [Asm]   r33 [label="v15 ← a0", color=green];
// [Asm]   r9 [label="v35 ← a0", color=green];
// [Asm]   r26 [label="t1", color=blue];
// [Asm]   r6 [label="a2", color=blue];
// [Asm]   r13 [label="v31 ← a0", color=green];
// [Asm]   r4 [label="v21 ← a0", color=green];
// [Asm]   r29 [label="t4", color=blue];
// [Asm]   r35 [label="v23 ← a1", color=green];
// [Asm]   r7 [label="a1", color=blue];
// [Asm]   r10 [label="v36 ← a0", color=green];
// [Asm]   r8 [label="v4 ← a0", color=green];
// [Asm]   r5 [label="v18 ← a0", color=green];
// [Asm]   r15 [label="v8 ← a0", color=green];
// [Asm]   r24 [label="a7", color=blue];
// [Asm]   r32 [label="v14 ← a0", color=green];
// [Asm]   r31 [label="v13 ← a0", color=green];
// [Asm]   r17 [label="v10 ← a0", color=green];
// [Asm]   r12 [label="v6 ← a1", color=green];
// [Asm]   r20 [label="a3", color=blue];
// [Asm]   r23 [label="a6", color=blue];
// [Asm]   r3 [label="v20 ← a0", color=green];
// [Asm]   r27 [label="t2", color=blue];
// [Asm]   r1 [label="v2 ← s0", color=green];
// [Asm]   r28 [label="t3", color=blue];
// [Asm]   r11 [label="v5 ← a0", color=green];
// [Asm]   r34 [label="v22 ← a1", color=green];
// [Asm]   r22 [label="a5", color=blue];
// [Asm]   r14 [label="v32 ← a0", color=green];
// [Asm]   r30 [label="v12 ← s3", color=green];
// [Asm]   r25 [label="t0", color=blue];
// [Asm]   r2 [label="v3 ← s1", color=green];
// [Asm]   r16 [label="v19 ← a0", color=green];
// [Asm]   r18 [label="v11 ← s2", color=green];
// [Asm]   r19 [label="a0", color=blue];
// [Asm]   r21 [label="a4", color=blue];
// [Asm]   r18 -- r24;
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r7;
// [Asm]   r2 -- r32;
// [Asm]   r2 -- r31;
// [Asm]   r17 -- r18;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r26;
// [Asm]   r2 -- r26;
// [Asm]   r1 -- r30;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r18;
// [Asm]   r19 -- r30;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r23;
// [Asm]   r18 -- r29;
// [Asm]   r29 -- r30;
// [Asm]   r1 -- r7;
// [Asm]   r30 -- r32;
// [Asm]   r1 -- r18;
// [Asm]   r18 -- r25;
// [Asm]   r6 -- r30;
// [Asm]   r1 -- r22;
// [Asm]   r1 -- r19;
// [Asm]   r28 -- r30;
// [Asm]   r1 -- r10;
// [Asm]   r1 -- r32;
// [Asm]   r30 -- r31;
// [Asm]   r2 -- r10;
// [Asm]   r11 -- r12;
// [Asm]   r25 -- r30;
// [Asm]   r18 -- r27;
// [Asm]   r19 -- r24;
// [Asm]   r1 -- r17;
// [Asm]   r18 -- r21;
// [Asm]   r1 -- r20;
// [Asm]   r7 -- r30;
// [Asm]   r33 -- r35;
// [Asm]   r2 -- r7;
// [Asm]   r18 -- r22;
// [Asm]   r2 -- r11;
// [Asm]   r1 -- r33;
// [Asm]   r19 -- r21;
// [Asm]   r19 -- r26;
// [Asm]   r1 -- r28;
// [Asm]   r20 -- r30;
// [Asm]   r24 -- r30;
// [Asm]   r27 -- r30;
// [Asm]   r2 -- r34;
// [Asm]   r18 -- r28;
// [Asm]   r33 -- r34;
// [Asm]   r1 -- r31;
// [Asm]   r6 -- r19;
// [Asm]   r1 -- r9;
// [Asm]   r19 -- r28;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r2 -- r33;
// [Asm]   r2 -- r6;
// [Asm]   r18 -- r26;
// [Asm]   r19 -- r29;
// [Asm]   r7 -- r19;
// [Asm]   r18 -- r19;
// [Asm]   r22 -- r30;
// [Asm]   r19 -- r23;
// [Asm]   r19 -- r27;
// [Asm]   r0 -- r2;
// [Asm]   r21 -- r30;
// [Asm]   r1 -- r21;
// [Asm]   r23 -- r30;
// [Asm]   r6 -- r18;
// [Asm]   r1 -- r29;
// [Asm]   r19 -- r22;
// [Asm]   r26 -- r30;
// [Asm]   r2 -- r12;
// [Asm]   r18 -- r30;
// [Asm]   r2 -- r8;
// [Asm]   r1 -- r25;
// [Asm]   r2 -- r21;
// [Asm]   r1 -- r27;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r2 -- r30;
// [Asm]   r18 -- r20;
// [Asm]   r18 -- r31;
// [Asm]   r1 -- r6;
// [Asm]   r2 -- r22;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r24;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r2 -- r3;
// [Asm]   r19 -- r25;
// [Asm]   r2 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   r19 -- r20;
// [Asm]   r1 -- r24;
// [Asm]   r18 -- r23;
// [Asm]   comment = "0:v30-> 1:v2-> 2:v3-> 3:v20-> 6:a2-> 7:a1-> 18:v11-> 19:a0-> 30:v12-> 20:a3-> 21:a4-> 22:a5-> 23:a6-> 24:a7-> 25:t0-> 26:t1-> 27:t2-> 28:t3-> 29:t4-> 31:v13-> 17:v10-> 32:v14-> 8:v4-> 9:v35-> 10:v36-> 11:v5-> 12:v6-> 33:v15-> 34:v22-> 4:v21-> 13:v31-> 35:v23-> 5:v18-> 14:v32-> 15:v8-> 16:v19"
// [Asm]   comment = "v30<-a0;v15<-a0;v35<-a0;v31<-a0;v21<-a0;v23<-a1;v36<-a0;v4<-a0;v18<-a0;v8<-a0;v14<-a0;v13<-a0;v10<-a0;v6<-a1;v20<-a0;v2<-s0;v5<-a0;v22<-a1;v32<-a0;v12<-s3;v3<-s1;v19<-a0;v11<-s2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of memed.46"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v30, 1 ->   li a0, 1
// [Asm] subst   bge v30, v2, .memed.46_3 ->   bge a0, s0, .memed.46_3
// [Asm] subst   slliw v20, v2, 2 ->   slliw a0, s0, 2
// [Asm] subst   add v21, v3, v20 ->   add a0, s1, a0
// [Asm] subst   sw v2, 0(v21) ->   sw s0, 0(a0)
// [Asm] subst   mv v18, v2 ->   mv a0, s0
// [Asm] subst   j .memed.46_5 ->   j .memed.46_5
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   mv v3, a1 ->   mv s1, a1
// [Asm] subst   mv v4, a2 ->   mv a0, a2
// [Asm] subst   slliw v35, v2, 2 ->   slliw a0, s0, 2
// [Asm] subst   add v36, v3, v35 ->   add a0, s1, a0
// [Asm] subst   lw v5, 0(v36) ->   lw a0, 0(a0)
// [Asm] subst   lw v6, unmem_magic.1 ->   lw a1, unmem_magic.1
// [Asm] subst   bne v5, v6, .memed.46_2 ->   bne a0, a1, .memed.46_2
// [Asm] subst   slliw v31, v2, 2 ->   slliw a0, s0, 2
// [Asm] subst   add v32, v3, v31 ->   add a0, s1, a0
// [Asm] subst   lw v8, 0(v32) ->   lw a0, 0(a0)
// [Asm] subst   j .memed.46_6 ->   j .memed.46_6
// [Asm] subst   addi v10, v2, -1 ->   addi a0, s0, -1
// [Asm] subst   lw v11, unmem_magic.1 ->   lw s2, unmem_magic.1
// [Asm] subst   mv a1, v3 ->   mv a1, s1
// [Asm] subst   mv a2, v11 ->   mv a2, s2
// [Asm] subst   call memed.46 ->   call memed.46
// [Asm] subst   mv v12, a0 ->   mv s3, a0
// [Asm] subst   addi v13, v2, -2 ->   addi a0, s0, -2
// [Asm] subst   mv a1, v3 ->   mv a1, s1
// [Asm] subst   mv a2, v11 ->   mv a2, s2
// [Asm] subst   call memed.46 ->   call memed.46
// [Asm] subst   add v15, v12, v14 ->   add a0, s3, a0
// [Asm] subst   slliw v22, v2, 2 ->   slliw a1, s0, 2
// [Asm] subst   add v23, v3, v22 ->   add a1, s1, a1
// [Asm] subst   sw v15, 0(v23) ->   sw a0, 0(a1)
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%2) -> v7, Insn(iref=%4) -> v8, Insn(iref=%1) -> v6, Mem(fref=f3, mref=m0) -> v4, FnParam(fref=f3, fpref=$f.0) -> v2, FnParam(fref=f3, fpref=$f.1) -> v3, Self(fref=f3) -> v0, Insn(iref=%0) -> v5
// [Asm] defs: []
// [Asm] live_set: [a1, s11, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [s11, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6, v5, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v6, v5, s11, v10, v2]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, v6, v5, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v4, v6, v5, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, v6, v2]
// [Asm] move_origin: [v5]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v4, a1, v6, a0, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v4, a2, a1, v6, a0, v2]
// [Asm] move_origin: [v6]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: []
// [Asm] live_set: [v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, v6, a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, v6, a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of fib.45"];
// [Asm]   r0 [label="v2 ← s0", color=green];
// [Asm]   r20 [label="v8 ← a0", color=green];
// [Asm]   r3 [label="v3 ← a0", color=green];
// [Asm]   r9 [label="a2", color=blue];
// [Asm]   r6 [label="v10 ← a1", color=green];
// [Asm]   r13 [label="a6", color=blue];
// [Asm]   r4 [label="v5 ← a0", color=green];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="a4", color=blue];
// [Asm]   r7 [label="v4 ← s2", color=green];
// [Asm]   r10 [label="a3", color=blue];
// [Asm]   r14 [label="a7", color=blue];
// [Asm]   r8 [label="a0", color=blue];
// [Asm]   r5 [label="v6 ← s1", color=green];
// [Asm]   r15 [label="t0", color=blue];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r16 [label="t1", color=blue];
// [Asm]   r18 [label="t3", color=blue];
// [Asm]   r19 [label="t4", color=blue];
// [Asm]   r17 [label="t2", color=blue];
// [Asm]   r12 [label="a5", color=blue];
// [Asm]   r0 -- r15;
// [Asm]   r0 -- r13;
// [Asm]   r4 -- r5;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r10;
// [Asm]   r5 -- r17;
// [Asm]   r0 -- r17;
// [Asm]   r8 -- r19;
// [Asm]   r1 -- r7;
// [Asm]   r8 -- r9;
// [Asm]   r5 -- r13;
// [Asm]   r5 -- r18;
// [Asm]   r7 -- r13;
// [Asm]   r0 -- r14;
// [Asm]   r5 -- r19;
// [Asm]   r2 -- r7;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r0 -- r16;
// [Asm]   r0 -- r19;
// [Asm]   r8 -- r12;
// [Asm]   r0 -- r6;
// [Asm]   r7 -- r17;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r8 -- r17;
// [Asm]   r7 -- r19;
// [Asm]   r8 -- r16;
// [Asm]   r8 -- r13;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r9;
// [Asm]   r0 -- r3;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r7 -- r15;
// [Asm]   r7 -- r10;
// [Asm]   r8 -- r18;
// [Asm]   r7 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r8 -- r10;
// [Asm]   r0 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r5 -- r7;
// [Asm]   r0 -- r12;
// [Asm]   r5 -- r14;
// [Asm]   r0 -- r11;
// [Asm]   r8 -- r11;
// [Asm]   r7 -- r16;
// [Asm]   r1 -- r5;
// [Asm]   r7 -- r18;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r7 -- r12;
// [Asm]   r0 -- r7;
// [Asm]   r2 -- r3;
// [Asm]   r7 -- r14;
// [Asm]   r5 -- r15;
// [Asm]   r0 -- r18;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v2-> 1:a1-> 5:v6-> 7:v4-> 8:a0-> 9:a2-> 10:a3-> 11:a4-> 12:a5-> 13:a6-> 14:a7-> 15:t0-> 16:t1-> 17:t2-> 18:t3-> 19:t4-> 2:s11-> 4:v5-> 6:v10-> 3:v3-> 20:v8"
// [Asm]   comment = "v2<-s0;v8<-a0;v3<-a0;v10<-a1;v5<-a0;v4<-s2;v6<-s1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of fib.45"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   mv v3, a1 ->   mv a0, a1
// [Asm] subst   addi v5, v2, 1 ->   addi a0, s0, 1
// [Asm] subst   lw v6, unmem_magic.1 ->   lw s1, unmem_magic.1
// [Asm] subst   slliw v10, v5, 2 ->   slliw a1, a0, 2
// [Asm] subst   sub v4, s11, v10 ->   sub s2, s11, a1
// [Asm] subst   andi s11, v4, -8 ->   andi s11, s2, -8
// [Asm] subst   mv a1, v5 ->   mv a1, a0
// [Asm] subst   mv a0, v4 ->   mv a0, s2
// [Asm] subst   mv a2, v6 ->   mv a2, s1
// [Asm] subst   call memseti32 ->   call memseti32
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   mv a1, v4 ->   mv a1, s2
// [Asm] subst   mv a2, v6 ->   mv a2, s1
// [Asm] subst   call memed.46 ->   call memed.46
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$unmem_magic.1"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   comment = "0:v2-> 1:a0"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$unmem_magic.1"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, -1919810 ->   li a0, -1919810
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] fib.45:
// [Asm] # block info: defs: [v2, t1, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, v6, ft7, ft4, v5, v10, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v5, v10, a0, v8, v4, a2, v6, a1, s11, v2], upward_exposed: [a1, s11, a0], params_defs: []
// [Asm] # live_in: [a1, s11, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .fib.45_0:
// [Asm]   # save_ctx1  # live: [a1, s11, a0]
// [Asm]   mv v2, a0  # live: [a1, s11, v2]
// [Asm]   mv v3, a1  # live: [s11, v2]
// [Asm]   addi v5, v2, 1  # live: [v5, s11, v2]
// [Asm]   lw v6, unmem_magic.1  # live: [v6, v5, s11, v2]
// [Asm]   slliw v10, v5, 2  # live: [v6, v5, s11, v10, v2]
// [Asm]   sub v4, s11, v10  # live: [v4, v6, v5, v2]
// [Asm]   andi s11, v4, -8  # live: [v4, v6, v5, v2]
// [Asm]   mv a1, v5  # live: [v4, a1, v6, v2]
// [Asm]   mv a0, v4  # live: [v4, a1, v6, a0, v2]
// [Asm]   mv a2, v6  # live: [v4, a2, a1, v6, a0, v2]
// [Asm]   call memseti32  # live: [v4, v6, v2]
// [Asm]   # save_ctx2  # live: [v4, v6, v2]
// [Asm]   mv a0, v2  # live: [v4, v6, a0]
// [Asm]   mv a1, v4  # live: [a1, v6, a0]
// [Asm]   mv a2, v6  # live: [a2, a1, a0]
// [Asm]   call memed.46  # live: [a0]
// [Asm]   mv v8, a0  # live: [v8]
// [Asm]   # restore_ctx2  # live: [v8]
// [Asm] # control
// [Asm]   mv a0, v8  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] memed.46:
// [Asm] # block info: defs: [v2, v5, v35, v36, v4, v6, v3], uses: [v2, v5, a0, v35, v36, a2, a1, v6, v3], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0], live_out: [v3, v2]
// [Asm] # block parameters: []
// [Asm] .memed.46_0:
// [Asm]   # save_ctx1  # live: [a2, a1, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, v3]
// [Asm]   mv v4, a2  # live: [v2, v3]
// [Asm]   slliw v35, v2, 2  # live: [v2, v35, v3]
// [Asm]   add v36, v3, v35  # live: [v2, v36, v3]
// [Asm]   lw v5, 0(v36)  # live: [v2, v5, v3]
// [Asm]   lw v6, unmem_magic.1  # live: [v2, v5, v6, v3]
// [Asm] # control
// [Asm]   bne v5, v6, .memed.46_2  # live: [v2, v3]
// [Asm] 
// [Asm] # block info: defs: [v30], uses: [v30, v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v3, v2], live_out: [v3, v2]
// [Asm] # block parameters: []
// [Asm] .memed.46_1:
// [Asm] # control
// [Asm]   li v30, 1  # live: [v2, v30, v3]
// [Asm]   bge v30, v2, .memed.46_3  # live: [v2, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v13, v22, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, v10, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, v18, fa3, v23, ft3, fa0, t4, t2, v15], uses: [v3, v11, v14, v10, a0, v13, v22, a2, a1, v12, v23, v15, v2], upward_exposed: [v3, v2], params_defs: []
// [Asm] # live_in: [v2, v3], live_out: [v18]
// [Asm] # block parameters: []
// [Asm] .memed.46_4:
// [Asm]   addi v10, v2, -1  # live: [v2, v10, v3]
// [Asm]   lw v11, unmem_magic.1  # live: [v2, v11, v10, v3]
// [Asm]   # save_ctx2  # live: [v2, v11, v10, v3]
// [Asm]   mv a0, v10  # live: [v2, v11, a0, v3]
// [Asm]   mv a1, v3  # live: [v2, v11, a1, a0, v3]
// [Asm]   mv a2, v11  # live: [v2, v11, a2, a1, a0, v3]
// [Asm]   call memed.46  # live: [v2, v11, a0, v3]
// [Asm]   mv v12, a0  # live: [v2, v11, v12, v3]
// [Asm]   # restore_ctx2  # live: [v2, v11, v12, v3]
// [Asm]   addi v13, v2, -2  # live: [v2, v11, v12, v13, v3]
// [Asm]   # save_ctx2  # live: [v2, v11, v12, v13, v3]
// [Asm]   mv a0, v13  # live: [v2, v11, v12, a0, v3]
// [Asm]   mv a1, v3  # live: [v2, v11, a1, v12, a0, v3]
// [Asm]   mv a2, v11  # live: [v2, a2, a1, v12, a0, v3]
// [Asm]   call memed.46  # live: [v2, v12, a0, v3]
// [Asm]   mv v14, a0  # live: [v2, v14, v12, v3]
// [Asm]   # restore_ctx2  # live: [v2, v14, v12, v3]
// [Asm]   add v15, v12, v14  # live: [v2, v15, v3]
// [Asm]   slliw v22, v2, 2  # live: [v15, v22, v3]
// [Asm]   add v23, v3, v22  # live: [v15, v23]
// [Asm]   sw v15, 0(v23)  # live: [v15]
// [Asm] # control
// [Asm]   mv v18, v15  # live: [v18]
// [Asm] 
// [Asm] # block info: defs: [v19], uses: [v18], upward_exposed: [v18], params_defs: [v18]
// [Asm] # live_in: [v18], live_out: [v19]
// [Asm] # block parameters: [v18]
// [Asm] .memed.46_5:
// [Asm] # control
// [Asm]   mv v19, v18  # live: [v19]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v19, a0], upward_exposed: [v19], params_defs: [v19]
// [Asm] # live_in: [v19], live_out: []
// [Asm] # block parameters: [v19]
// [Asm] .memed.46_6:
// [Asm] # control
// [Asm]   mv a0, v19  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v19, v32, v31, v8], uses: [v3, v8, v32, v31, v2], upward_exposed: [v3, v2], params_defs: []
// [Asm] # live_in: [v2, v3], live_out: [v19]
// [Asm] # block parameters: []
// [Asm] .memed.46_2:
// [Asm]   slliw v31, v2, 2  # live: [v31, v3]
// [Asm]   add v32, v3, v31  # live: [v32]
// [Asm]   lw v8, 0(v32)  # live: [v8]
// [Asm] # control
// [Asm]   mv v19, v8  # live: [v19]
// [Asm]   j .memed.46_6  # live: [v19]
// [Asm] 
// [Asm] # block info: defs: [v21, v18, v20], uses: [v3, v21, v20, v2], upward_exposed: [v3, v2], params_defs: []
// [Asm] # live_in: [v2, v3], live_out: [v18]
// [Asm] # block parameters: []
// [Asm] .memed.46_3:
// [Asm]   slliw v20, v2, 2  # live: [v3, v20, v2]
// [Asm]   add v21, v3, v20  # live: [v21, v2]
// [Asm]   sw v2, 0(v21)  # live: [v2]
// [Asm] # control
// [Asm]   mv v18, v2  # live: [v18]
// [Asm]   j .memed.46_5  # live: [v18]
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [v3, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v3, a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   lw v2, unmem_magic.1  # live: [v2]
// [Asm]   # save_ctx2  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   call main.47  # live: [a0]
// [Asm]   mv v3, a0  # live: [v3]
// [Asm]   # restore_ctx2  # live: [v3]
// [Asm] # control
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main.47:
// [Asm] # block info: defs: [v3, t1, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, v4, ft5, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v5, a0, zero, v8, v4, a1, v3], upward_exposed: [a0, zero], params_defs: []
// [Asm] # live_in: [a0, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.47_0:
// [Asm]   # save_ctx1  # live: [zero, a0]
// [Asm]   mv v2, a0  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   call minimbt_read_int  # live: [zero, a0]
// [Asm]   mv v3, a0  # live: [zero, v3]
// [Asm]   # restore_ctx2  # live: [zero, v3]
// [Asm]   lw v4, unmem_magic.1  # live: [v4, zero, v3]
// [Asm]   # save_ctx2  # live: [v4, zero, v3]
// [Asm]   mv a0, v3  # live: [v4, zero, a0]
// [Asm]   mv a1, v4  # live: [a1, zero, a0]
// [Asm]   call fib.45  # live: [zero, a0]
// [Asm]   mv v5, a0  # live: [v5, zero]
// [Asm]   # restore_ctx2  # live: [v5, zero]
// [Asm]   # save_ctx2  # live: [v5, zero]
// [Asm]   mv a0, v5  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v6, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   li v8, 10  # live: [zero, v8]
// [Asm]   mv a0, v8  # live: [zero, a0]
// [Asm]   call minimbt_print_char  # live: [zero, a0]
// [Asm]   mv v7, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$unmem_magic.1:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$unmem_magic.1_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, -1919810  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0, sp, s0, ra, s11, t5], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$unmem_magic.1  # live: [s0, a0]
// [Asm]   la t5, unmem_magic.1  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] unmem_magic.1:
// [Asm]   .zero 4
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: Let(("unmem_magic", Int), Neg(Int(1919810), kind=Some(Int)), LetRec({name: ("mem", Fun([Int], Int)), args: [("func", Fun([Fun([Int], Int), Int], Int)), ("max_n", Int)], body: Let(("cache", Var({val: Some(Array(Int))})), Array(Var("max_n"), Var("unmem_magic")), LetRec({name: ("memed", Int), args: [("n", Int)], body: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var({val: Some(Int)})), App(Var("func"), [Var("memed"), Var("n")]), Let(("_", Var({val: Some(Unit)})), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))}, Var("memed")))}, LetRec({name: ("mem_fib", Int), args: [("f", Fun([Int], Int)), ("n", Int)], body: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))]), Add, kind=Some(Int)))}, LetRec({name: ("fib", Int), args: [("n", Int)], body: Let(("f", Var({val: Some(Fun([Int], Int))})), App(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=Some(Int))]), App(Var("f"), [Var("n")]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))}, App(Var("main"), []))))))
// [Knf] build_knf: Neg(Int(1919810), kind=Some(Int))
// [Knf] build_knf: LetRec({name: ("mem", Fun([Int], Int)), args: [("func", Fun([Fun([Int], Int), Int], Int)), ("max_n", Int)], body: Let(("cache", Var({val: Some(Array(Int))})), Array(Var("max_n"), Var("unmem_magic")), LetRec({name: ("memed", Int), args: [("n", Int)], body: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var({val: Some(Int)})), App(Var("func"), [Var("memed"), Var("n")]), Let(("_", Var({val: Some(Unit)})), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))}, Var("memed")))}, LetRec({name: ("mem_fib", Int), args: [("f", Fun([Int], Int)), ("n", Int)], body: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))]), Add, kind=Some(Int)))}, LetRec({name: ("fib", Int), args: [("n", Int)], body: Let(("f", Var({val: Some(Fun([Int], Int))})), App(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=Some(Int))]), App(Var("f"), [Var("n")]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))}, App(Var("main"), [])))))
// [Knf] build_knf: Let(("cache", Var({val: Some(Array(Int))})), Array(Var("max_n"), Var("unmem_magic")), LetRec({name: ("memed", Int), args: [("n", Int)], body: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var({val: Some(Int)})), App(Var("func"), [Var("memed"), Var("n")]), Let(("_", Var({val: Some(Unit)})), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))}, Var("memed")))
// [Knf] build_knf: Array(Var("max_n"), Var("unmem_magic"))
// [Knf] build_knf: Var("max_n")
// [Knf] build_knf: Var("unmem_magic")
// [Knf] build_knf: LetRec({name: ("memed", Int), args: [("n", Int)], body: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var({val: Some(Int)})), App(Var("func"), [Var("memed"), Var("n")]), Let(("_", Var({val: Some(Unit)})), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))}, Var("memed"))
// [Knf] build_knf: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var({val: Some(Int)})), App(Var("func"), [Var("memed"), Var("n")]), Let(("_", Var({val: Some(Unit)})), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))
// [Knf] build_knf: Get(Var("cache"), Var("n"))
// [Knf] build_knf: Var("cache")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("unmem_magic")
// [Knf] build_knf: Let(("res", Var({val: Some(Int)})), App(Var("func"), [Var("memed"), Var("n")]), Let(("_", Var({val: Some(Unit)})), Put(Var("cache"), Var("n"), Var("res")), Var("res")))
// [Knf] build_knf: App(Var("func"), [Var("memed"), Var("n")])
// [Knf] build_knf: Var("func")
// [Knf] build_knf: Var("memed")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("cache"), Var("n"), Var("res")), Var("res"))
// [Knf] build_knf: Put(Var("cache"), Var("n"), Var("res"))
// [Knf] build_knf: Var("cache")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("res")
// [Knf] build_knf: Var("res")
// [Knf] build_knf: Get(Var("cache"), Var("n"))
// [Knf] build_knf: Var("cache")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("memed")
// [Knf] build_knf: LetRec({name: ("mem_fib", Int), args: [("f", Fun([Int], Int)), ("n", Int)], body: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))]), Add, kind=Some(Int)))}, LetRec({name: ("fib", Int), args: [("n", Int)], body: Let(("f", Var({val: Some(Fun([Int], Int))})), App(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=Some(Int))]), App(Var("f"), [Var("n")]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))}, App(Var("main"), []))))
// [Knf] build_knf: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))]), Add, kind=Some(Int)))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Prim(App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))]), Add, kind=Some(Int))
// [Knf] build_knf: App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Prim(Var("n"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Prim(Var("n"), Int(2), Sub, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: LetRec({name: ("fib", Int), args: [("n", Int)], body: Let(("f", Var({val: Some(Fun([Int], Int))})), App(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=Some(Int))]), App(Var("f"), [Var("n")]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))}, App(Var("main"), [])))
// [Knf] build_knf: Let(("f", Var({val: Some(Fun([Int], Int))})), App(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=Some(Int))]), App(Var("f"), [Var("n")]))
// [Knf] build_knf: App(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("mem")
// [Knf] build_knf: Var("mem_fib")
// [Knf] build_knf: Prim(Var("n"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("f"), [Var("n")])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))}, App(Var("main"), []))
// [Knf] build_knf: Let(("n", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))
// [Knf] build_knf: App(Var("read_int"), [])
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit))
// [Knf] build_knf: App(Var("print_int"), [App(Var("fib"), [Var("n")])])
// [Knf] build_knf: App(Var("fib"), [Var("n")])
// [Knf] build_knf: Var("fib")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)
// [Knf] build_knf: App(Var("print_char"), [Int(10)])
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Core] b0 control: Panic -> Return(args=[Int32(val=-1919810)])
// [Core] b3 control: Panic -> Jump(target=b5, args=[FnParam(fref=f2, fpref=$f.0)])
// [Core] b4 control: Panic -> Jump(target=b5, args=[Insn(iref=%11)])
// [Core] b1 control: Panic -> Branch(cond=Insn(iref=%3), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b5 control: Panic -> Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b2 control: Panic -> Jump(target=b6, args=[Insn(iref=%13)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%2), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b6 control: Panic -> Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%4)])
// [Core] b0 control: Panic -> Return(args=[Unit])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%1)])
// [Main] beta reduce f.25 = memed.33
// [Main] beta reduce res.36 = n.34
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memseti32
// [Main]   .type memseti32, @function
// [Main] memseti32:
// [Main]   blez a1, .memseti32_b1
// [Main]   slli a1, a1, 2
// [Main]   add a1, a1, a0
// [Main] .memseti32_b0:
// [Main]   sw a2, 0(a0)
// [Main]   addi a0, a0, 4
// [Main]   bne a0, a1, .memseti32_b0
// [Main] .memseti32_b1:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl fib.45
// [Main]   .type fib.45, @function
// [Main] # leaf false
// [Main] fib.45:
// [Main] .fib.45_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s0, a0
// [Main]   mv a0, a1
// [Main]   addi a0, s0, 1
// [Main]   lw s1, unmem_magic.1
// [Main]   slliw a1, a0, 2
// [Main]   sub s2, s11, a1
// [Main]   andi s11, s2, -8
// [Main]   mv a1, a0
// [Main]   mv a0, s2
// [Main]   mv a2, s1
// [Main]   call memseti32
// [Main]   mv a0, s0
// [Main]   mv a1, s2
// [Main]   mv a2, s1
// [Main]   call memed.46
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memed.46
// [Main]   .type memed.46, @function
// [Main] # leaf false
// [Main] memed.46:
// [Main] .memed.46_0:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   mv a0, a2
// [Main]   slliw a0, s0, 2
// [Main]   add a0, s1, a0
// [Main]   lw a0, 0(a0)
// [Main]   lw a1, unmem_magic.1
// [Main]   bne a0, a1, .memed.46_2
// [Main] 
// [Main] .memed.46_1:
// [Main]   li a0, 1
// [Main]   bge a0, s0, .memed.46_3
// [Main] 
// [Main] .memed.46_4:
// [Main]   addi a0, s0, -1
// [Main]   lw s2, unmem_magic.1
// [Main]   mv a1, s1
// [Main]   mv a2, s2
// [Main]   call memed.46
// [Main]   mv s3, a0
// [Main]   addi a0, s0, -2
// [Main]   mv a1, s1
// [Main]   mv a2, s2
// [Main]   call memed.46
// [Main]   add a0, s3, a0
// [Main]   slliw a1, s0, 2
// [Main]   add a1, s1, a1
// [Main]   sw a0, 0(a1)
// [Main] 
// [Main] .memed.46_5:
// [Main] 
// [Main] .memed.46_6:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main] .memed.46_2:
// [Main]   slliw a0, s0, 2
// [Main]   add a0, s1, a0
// [Main]   lw a0, 0(a0)
// [Main]   j .memed.46_6
// [Main] 
// [Main] .memed.46_3:
// [Main]   slliw a0, s0, 2
// [Main]   add a0, s1, a0
// [Main]   sw s0, 0(a0)
// [Main]   mv a0, s0
// [Main]   j .memed.46_5
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   lw a0, unmem_magic.1
// [Main]   call main.47
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.47
// [Main]   .type main.47, @function
// [Main] # leaf false
// [Main] main.47:
// [Main] .main.47_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call minimbt_read_int
// [Main]   lw a1, unmem_magic.1
// [Main]   call fib.45
// [Main]   call minimbt_print_int
// [Main]   li a0, 10
// [Main]   call minimbt_print_char
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$unmem_magic.1
// [Main]   .type T$unmem_magic.1, @function
// [Main] # leaf true
// [Main] T$unmem_magic.1:
// [Main] .T$unmem_magic.1_0:
// [Main]   li a0, -1919810
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$unmem_magic.1
// [Main]   la t5, unmem_magic.1
// [Main]   sw a0, 0(t5)
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl unmem_magic.1
// [Main]   .type unmem_magic.1, @object
// [Main] unmem_magic.1:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function main.47
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_int", args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::0)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Call(ty=Int32, f=f3, args=[Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Int32(val=10)])
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function main.47 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::0)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%1)])
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function T$start to wasm
// [Wasm] Lowering function memed.46
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f2, fpref=$f.1), offset=FnParam(fref=f2, fpref=$f.0), width=@32), val=FnParam(fref=f2, fpref=$f.0))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Lowering control Jump(target=b5, args=[FnParam(fref=f2, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f2, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::0)
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Call(ty=Int32, f=f2, args=[Insn(iref=%5), FnParam(fref=f2, fpref=$f.1), Insn(iref=%6)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f2, fpref=$f.0), Int32(val=2)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Call(ty=Int32, f=f2, args=[Insn(iref=%8), FnParam(fref=f2, fpref=$f.1), Insn(iref=%6)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%7), Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f2, fpref=$f.1), offset=FnParam(fref=f2, fpref=$f.0), width=@32), val=Insn(iref=%11))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering control Jump(target=b5, args=[Insn(iref=%11)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FnParam(fref=f2, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f2, fpref=$f.1), offset=FnParam(fref=f2, fpref=$f.0), width=@32))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering control Jump(target=b6, args=[Insn(iref=%13)])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f2, fpref=$f.1), offset=FnParam(fref=f2, fpref=$f.0), width=@32))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::0)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function memed.46 to wasm
// [Wasm] Lowering function fib.45
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f3, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::0)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Insn(iref=%1))])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Lowering insn Call(ty=Int32, f=f2, args=[FnParam(fref=f3, fpref=$f.0), Mem(fref=f3, mref=m0), Insn(iref=%1)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Return(args=[Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Lowered function fib.45 to wasm
// [Wasm] Lowering function T$unmem_magic.1
// [Wasm] Lowering control Return(args=[Int32(val=-1919810)])
// [Wasm] Lowered function T$unmem_magic.1 to wasm
// [KnfOpt] func_tre: mem.2 false
// [KnfOpt] func_tre: memed.6 false
// [KnfOpt] func_tre: mem_fib.11 false
// [KnfOpt] func_tre: fib.21 false
// [KnfOpt] func_tre: main.26 false
// [KnfOpt] freq: {mem.2: Once, memed.6: AsClosure, mem_fib.11: AsClosure, fib.21: Once, main.26: Once}
// [KnfOpt] Inline threshold 13
// [KnfOpt] Fn like 2
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision mem.2 accepted
// [KnfOpt] Knf inline Some(mem) let f.25: Fun([Int], Int) = Unit
// [KnfOpt] Apply(f.25, [n.22, ])
// [KnfOpt] Inline threshold 7
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision fib.21 rejected
// [KnfOpt] freq: {mem_fib.11: Once, fib.21: Once, memed.33: AsClosure, main.26: Once}
// [KnfOpt] Inline threshold 17
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision mem_fib.11 accepted
// [KnfOpt] Knf inline Some(mem_fib) let res.36: Int = Unit
// [KnfOpt] let _37: Unit = Put cache.32[n.34] = res.36
// [KnfOpt] Var(res.36)
// [KnfOpt] Inline threshold 17
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision fib.21 rejected
// [KnfOpt] Numbers of let rec: 3 3 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f4: Once, f8: Once, f2: Multiple, f3: Once, f0: Once})
// [CoreOpt] LVN subst Insn(iref=%9) with Insn(iref=%6)
// [CoreOpt] LVN subst Insn(iref=%3) with Insn(iref=%1)
