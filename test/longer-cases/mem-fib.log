// [Asm] pre_assigned_registers: Insn(iref=%3) -> v7, FnParam(fref=f4, fpref=$f.0) -> v2, Insn(iref=%7) -> v10, Insn(iref=%2) -> v6, Insn(iref=%1) -> v5, Self(fref=f4) -> v0, Insn(iref=%6) -> v9, Mem(fref=f4, mref=m0) -> v3, Insn(iref=%5) -> v8, Insn(iref=%0) -> v4
// [Asm] defs: []
// [Asm] live_set: [zero, a0, s11]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, s11]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [zero, v4, s11]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v4, s11]
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero, v4, s11]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v5, zero, v4, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v5, zero, v4, v6, s11, v15]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v5, zero, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, v4, a1, v6, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v4, a1, v6, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: [a2]
// [Asm] live_set: [zero, a0, v4, a2, a1, v6, v3]
// [Asm] move_origin: [v6]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: []
// [Asm] live_set: [v4, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v6, zero, a0, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, v6, zero, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [zero, v8]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11, zero]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v10]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.48"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r20 [label="v3 ← s2", color=green];
// [Asm]   r23 [label="v11 ← a0", color=green];
// [Asm]   r3 [label="a0", color=blue];
// [Asm]   r9 [label="a6", color=blue];
// [Asm]   r6 [label="a3", color=blue];
// [Asm]   r13 [label="t2", color=blue];
// [Asm]   r4 [label="a1", color=blue];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r11 [label="t0", color=blue];
// [Asm]   r7 [label="a4", color=blue];
// [Asm]   r10 [label="a7", color=blue];
// [Asm]   r22 [label="v9 ← a0", color=green];
// [Asm]   r14 [label="t3", color=blue];
// [Asm]   r8 [label="a5", color=blue];
// [Asm]   r5 [label="a2", color=blue];
// [Asm]   r24 [label="v10 ← a0", color=green];
// [Asm]   r15 [label="t4", color=blue];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r16 [label="v4 ← s0", color=green];
// [Asm]   r18 [label="v6 ← s1", color=green];
// [Asm]   r19 [label="v15 ← a1", color=green];
// [Asm]   r17 [label="v5 ← a0", color=green];
// [Asm]   r21 [label="v8 ← a0", color=green];
// [Asm]   r12 [label="t1", color=blue];
// [Asm]   r17 -- r18;
// [Asm]   r4 -- r16;
// [Asm]   r16 -- r20;
// [Asm]   r14 -- r20;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r15;
// [Asm]   r11 -- r20;
// [Asm]   r14 -- r18;
// [Asm]   r14 -- r16;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r16;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r23;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r11 -- r16;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r22;
// [Asm]   r5 -- r18;
// [Asm]   r1 -- r10;
// [Asm]   r16 -- r19;
// [Asm]   r7 -- r20;
// [Asm]   r13 -- r16;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r1 -- r15;
// [Asm]   r4 -- r20;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r17;
// [Asm]   r6 -- r16;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r18;
// [Asm]   r11 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r18;
// [Asm]   r8 -- r20;
// [Asm]   r5 -- r16;
// [Asm]   r3 -- r5;
// [Asm]   r16 -- r18;
// [Asm]   r13 -- r20;
// [Asm]   r6 -- r20;
// [Asm]   r17 -- r19;
// [Asm]   r10 -- r16;
// [Asm]   r16 -- r17;
// [Asm]   r9 -- r18;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r15 -- r18;
// [Asm]   r12 -- r20;
// [Asm]   r2 -- r6;
// [Asm]   r10 -- r20;
// [Asm]   r3 -- r4;
// [Asm]   r18 -- r19;
// [Asm]   r8 -- r16;
// [Asm]   r2 -- r14;
// [Asm]   r10 -- r18;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r2 -- r12;
// [Asm]   r8 -- r18;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r20;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r14;
// [Asm]   r9 -- r20;
// [Asm]   r2 -- r17;
// [Asm]   r13 -- r18;
// [Asm]   r1 -- r11;
// [Asm]   r9 -- r16;
// [Asm]   r18 -- r20;
// [Asm]   r12 -- r16;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r7 -- r16;
// [Asm]   r1 -- r5;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r15 -- r16;
// [Asm]   r15 -- r20;
// [Asm]   r2 -- r3;
// [Asm]   r12 -- r18;
// [Asm]   r17 -- r20;
// [Asm]   r1 -- r24;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:v2-> 1:zero-> 2:s11-> 3:a0-> 4:a1-> 5:a2-> 16:v4-> 18:v6-> 20:v3-> 6:a3-> 7:a4-> 8:a5-> 9:a6-> 10:a7-> 11:t0-> 12:t1-> 13:t2-> 14:t3-> 15:t4-> 17:v5-> 19:v15-> 21:v8-> 22:v9-> 23:v11-> 24:v10"
// [Asm]   comment = "v2<-a0;v3<-s2;v11<-a0;v9<-a0;v10<-a0;v4<-s0;v6<-s1;v15<-a1;v5<-a0;v8<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.48"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call minimbt_read_int ->   call minimbt_read_int
// [Asm] subst   mv v4, a0 ->   mv s0, a0
// [Asm] subst   addi v5, v4, 1 ->   addi a0, s0, 1
// [Asm] subst   lw v6, unmem_magic.1 ->   lw s1, unmem_magic.1
// [Asm] subst   slliw v15, v5, 2 ->   slliw a1, a0, 2
// [Asm] subst   sub v3, s11, v15 ->   sub s2, s11, a1
// [Asm] subst   andi s11, v3, -8 ->   andi s11, s2, -8
// [Asm] subst   mv a1, v5 ->   mv a1, a0
// [Asm] subst   mv a0, v3 ->   mv a0, s2
// [Asm] subst   mv a2, v6 ->   mv a2, s1
// [Asm] subst   call memseti32 ->   call memseti32
// [Asm] subst   mv a0, v4 ->   mv a0, s0
// [Asm] subst   mv a1, v3 ->   mv a1, s2
// [Asm] subst   mv a2, v6 ->   mv a2, s1
// [Asm] subst   call memed.49 ->   call memed.49
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v11, 10 ->   li a0, 10
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v3, Self(fref=f10) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r8 [label="a7", color=blue];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r5 [label="a4", color=blue];
// [Asm]   r3 [label="a2", color=blue];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r9 [label="t0", color=blue];
// [Asm]   r6 [label="a5", color=blue];
// [Asm]   r13 [label="t4", color=blue];
// [Asm]   r4 [label="a3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="t2", color=blue];
// [Asm]   r7 [label="a6", color=blue];
// [Asm]   r10 [label="t1", color=blue];
// [Asm]   r12 [label="t3", color=blue];
// [Asm]   r14 [label="v3 ← a0", color=green];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:v2-> 1:a0-> 2:a1-> 3:a2-> 4:a3-> 5:a4-> 6:a5-> 7:a6-> 8:a7-> 9:t0-> 10:t1-> 11:t2-> 12:t3-> 13:t4-> 14:v3"
// [Asm]   comment = "v2<-a0;v3<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   lw v2, unmem_magic.1 ->   lw a0, unmem_magic.1
// [Asm] subst   call main.48 ->   call main.48
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f3, fpref=$f.2) -> v4, Mem(fref=f3, mref=m0) -> v5, BlockParam(bref=b3, bpref=$b.0) -> v20, Insn(iref=%9) -> v13, Insn(iref=%8) -> v12, BlockParam(bref=b10, bpref=$b.0) -> v17, Insn(iref=%10) -> v14, FnParam(fref=f3, fpref=$f.0) -> v2, Insn(iref=%5) -> v19, Self(fref=f3) -> v0, Insn(iref=%0) -> v6, Insn(iref=%3) -> v10, Insn(iref=%7) -> v11, FnParam(fref=f3, fpref=$f.1) -> v3, Insn(iref=%2) -> v8, Insn(iref=%1) -> v7, Insn(iref=%11) -> v15, BlockParam(bref=b4, bpref=$b.0) -> v18, Insn(iref=%6) -> v9, Insn(iref=%12) -> v16
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f3, fpref=$f.0), Int32(val=1)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Insn(iref=%1)])
// [Asm] defs: [v21]
// [Asm] live_set: [v18, v21, v3]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v18, v22]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v18]
// [Asm] move_origin: []
// [Asm] defs: [v20]
// [Asm] live_set: [v20]
// [Asm] move_origin: [v18]
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [a2, a1, s11, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, a2, s11, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, s11, v2]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v37]
// [Asm] live_set: [v3, v37, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: [v38]
// [Asm] live_set: [v3, v38, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v38 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v3, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v7, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v3, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v33]
// [Asm] live_set: [v33, v3]
// [Asm] move_origin: []
// [Asm] defined: v33 is X
// [Asm] defs: [v34]
// [Asm] live_set: [v34]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v20]
// [Asm] move_origin: [v9]
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v20]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v2, v17, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v17, v3]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v2, v18, v3]
// [Asm] move_origin: [v17]
// [Asm] defined: v18 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v2, v5, v12, v3]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v2, v5, v12, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: s10 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v2, v5, v12, v27, v3]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, v12, v27, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v5, a0, v27, v3]
// [Asm] move_origin: [v12]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, v5, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v13]
// [Asm] live_set: [v2, v5, v13, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, v13, v3]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v2, v14, v5, v13, v3]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v2, v14, v5, v13, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: s10 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v2, v14, v24, v13, v3]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v14, v24, v13, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v24, v13, a0, v3]
// [Asm] move_origin: [v14]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, v13, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v15]
// [Asm] live_set: [v2, v15, v13, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v15, v13, v3]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v2, v16, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v2, v17, v3]
// [Asm] move_origin: [v16]
// [Asm] defined: v17 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v20]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v5, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v2, v32, v5, v3]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, v3]
// [Asm] move_origin: []
// [Asm] defs: [v30]
// [Asm] live_set: [v2, v5, v30, v3]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, v3]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of memed.49"];
// [Asm]   r0 [label="v21 ← a0", color=green];
// [Asm]   r38 [label="v32 ← a0", color=green];
// [Asm]   r33 [label="v13 ← s3", color=green];
// [Asm]   r9 [label="v4 ← a0", color=green];
// [Asm]   r26 [label="a6", color=blue];
// [Asm]   r6 [label="a2", color=blue];
// [Asm]   r13 [label="v7 ← a1", color=green];
// [Asm]   r4 [label="v20 ← a0", color=green];
// [Asm]   r29 [label="t1", color=blue];
// [Asm]   r35 [label="v24 ← a1", color=green];
// [Asm]   r7 [label="a1", color=blue];
// [Asm]   r10 [label="v37 ← a0", color=green];
// [Asm]   r8 [label="s11", color=blue];
// [Asm]   r5 [label="v2 ← s1", color=green];
// [Asm]   r36 [label="v15 ← a0", color=green];
// [Asm]   r24 [label="a4", color=blue];
// [Asm]   r15 [label="v34 ← a0", color=green];
// [Asm]   r32 [label="t4", color=blue];
// [Asm]   r31 [label="t3", color=blue];
// [Asm]   r39 [label="v30 ← a0", color=green];
// [Asm]   r17 [label="v17 ← a0", color=green];
// [Asm]   r12 [label="v6 ← a0", color=green];
// [Asm]   r37 [label="v16 ← a0", color=green];
// [Asm]   r20 [label="s10", color=blue];
// [Asm]   r23 [label="a3", color=blue];
// [Asm]   r3 [label="v22 ← a0", color=green];
// [Asm]   r27 [label="a7", color=blue];
// [Asm]   r1 [label="v18 ← a1", color=green];
// [Asm]   r28 [label="t0", color=blue];
// [Asm]   r11 [label="v38 ← a0", color=green];
// [Asm]   r34 [label="v14 ← a0", color=green];
// [Asm]   r22 [label="a0", color=blue];
// [Asm]   r14 [label="v33 ← a0", color=green];
// [Asm]   r30 [label="t2", color=blue];
// [Asm]   r25 [label="a5", color=blue];
// [Asm]   r2 [label="v3 ← s0", color=green];
// [Asm]   r16 [label="v9 ← a0", color=green];
// [Asm]   r18 [label="v12 ← a0", color=green];
// [Asm]   r19 [label="v5 ← s2", color=green];
// [Asm]   r21 [label="v27 ← a1", color=green];
// [Asm]   r2 -- r39;
// [Asm]   r2 -- r32;
// [Asm]   r20 -- r33;
// [Asm]   r2 -- r31;
// [Asm]   r26 -- r33;
// [Asm]   r2 -- r38;
// [Asm]   r5 -- r21;
// [Asm]   r5 -- r33;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r10;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r19 -- r38;
// [Asm]   r19 -- r39;
// [Asm]   r5 -- r18;
// [Asm]   r2 -- r10;
// [Asm]   r20 -- r34;
// [Asm]   r19 -- r31;
// [Asm]   r5 -- r29;
// [Asm]   r22 -- r31;
// [Asm]   r18 -- r21;
// [Asm]   r2 -- r37;
// [Asm]   r2 -- r7;
// [Asm]   r19 -- r21;
// [Asm]   r8 -- r12;
// [Asm]   r2 -- r34;
// [Asm]   r5 -- r31;
// [Asm]   r2 -- r25;
// [Asm]   r22 -- r25;
// [Asm]   r2 -- r33;
// [Asm]   r5 -- r35;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r19 -- r29;
// [Asm]   r19 -- r27;
// [Asm]   r0 -- r2;
// [Asm]   r29 -- r33;
// [Asm]   r19 -- r22;
// [Asm]   r2 -- r12;
// [Asm]   r22 -- r27;
// [Asm]   r2 -- r8;
// [Asm]   r5 -- r32;
// [Asm]   r1 -- r2;
// [Asm]   r28 -- r33;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r5 -- r7;
// [Asm]   r2 -- r36;
// [Asm]   r18 -- r20;
// [Asm]   r8 -- r11;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r2 -- r24;
// [Asm]   r21 -- r22;
// [Asm]   r2 -- r23;
// [Asm]   r30 -- r33;
// [Asm]   r5 -- r34;
// [Asm]   r5 -- r36;
// [Asm]   r25 -- r33;
// [Asm]   r23 -- r33;
// [Asm]   r2 -- r26;
// [Asm]   r34 -- r35;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r18;
// [Asm]   r19 -- r30;
// [Asm]   r5 -- r23;
// [Asm]   r8 -- r19;
// [Asm]   r8 -- r9;
// [Asm]   r6 -- r33;
// [Asm]   r5 -- r13;
// [Asm]   r22 -- r29;
// [Asm]   r19 -- r34;
// [Asm]   r33 -- r36;
// [Asm]   r5 -- r19;
// [Asm]   r22 -- r26;
// [Asm]   r19 -- r24;
// [Asm]   r33 -- r35;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r19 -- r26;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r38;
// [Asm]   r22 -- r24;
// [Asm]   r33 -- r34;
// [Asm]   r6 -- r19;
// [Asm]   r22 -- r35;
// [Asm]   r19 -- r28;
// [Asm]   r7 -- r22;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r19 -- r32;
// [Asm]   r7 -- r19;
// [Asm]   r18 -- r19;
// [Asm]   r22 -- r30;
// [Asm]   r12 -- r13;
// [Asm]   r19 -- r23;
// [Asm]   r5 -- r28;
// [Asm]   r8 -- r13;
// [Asm]   r2 -- r14;
// [Asm]   r32 -- r33;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r5 -- r9;
// [Asm]   r7 -- r33;
// [Asm]   r5 -- r37;
// [Asm]   r22 -- r28;
// [Asm]   r22 -- r23;
// [Asm]   r2 -- r21;
// [Asm]   r19 -- r33;
// [Asm]   r2 -- r17;
// [Asm]   r8 -- r10;
// [Asm]   r22 -- r32;
// [Asm]   r2 -- r30;
// [Asm]   r5 -- r39;
// [Asm]   r5 -- r25;
// [Asm]   r27 -- r33;
// [Asm]   r5 -- r27;
// [Asm]   r31 -- r33;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r35;
// [Asm]   r22 -- r33;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r5 -- r30;
// [Asm]   r19 -- r25;
// [Asm]   r2 -- r27;
// [Asm]   r24 -- r33;
// [Asm]   r5 -- r12;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:v21-> 1:v18-> 2:v3-> 5:v2-> 6:a2-> 19:v5-> 22:a0-> 33:v13-> 7:a1-> 23:a3-> 24:a4-> 25:a5-> 26:a6-> 27:a7-> 28:t0-> 29:t1-> 30:t2-> 31:t3-> 32:t4-> 21:v27-> 18:v12-> 20:s10-> 34:v14-> 35:v24-> 8:s11-> 9:v4-> 10:v37-> 11:v38-> 12:v6-> 13:v7-> 36:v15-> 38:v32-> 39:v30-> 17:v17-> 37:v16-> 3:v22-> 14:v33-> 4:v20-> 15:v34-> 16:v9"
// [Asm]   comment = "v21<-a0;v32<-a0;v13<-s3;v4<-a0;v7<-a1;v20<-a0;v24<-a1;v37<-a0;v2<-s1;v15<-a0;v34<-a0;v30<-a0;v17<-a0;v6<-a0;v16<-a0;v22<-a0;v18<-a1;v38<-a0;v14<-a0;v33<-a0;v3<-s0;v9<-a0;v12<-a0;v5<-s2;v27<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of memed.49"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   slliw v21, v2, 2 ->   slliw a0, s1, 2
// [Asm] subst   add v22, v3, v21 ->   add a0, s0, a0
// [Asm] subst   sw v18, 0(v22) ->   sw a1, 0(a0)
// [Asm] subst   mv v20, v18 ->   mv a0, a1
// [Asm] subst   mv v2, a0 ->   mv s1, a0
// [Asm] subst   mv v3, a1 ->   mv s0, a1
// [Asm] subst   mv v4, a2 ->   mv a0, a2
// [Asm] subst   slliw v37, v2, 2 ->   slliw a0, s1, 2
// [Asm] subst   add v38, v3, v37 ->   add a0, s0, a0
// [Asm] subst   lw v6, 0(v38) ->   lw a0, 0(a0)
// [Asm] subst   lw v7, unmem_magic.1 ->   lw a1, unmem_magic.1
// [Asm] subst   bne v6, v7, .memed.49_2 ->   bne a0, a1, .memed.49_2
// [Asm] subst   slliw v33, v2, 2 ->   slliw a0, s1, 2
// [Asm] subst   add v34, v3, v33 ->   add a0, s0, a0
// [Asm] subst   lw v9, 0(v34) ->   lw a0, 0(a0)
// [Asm] subst   j .memed.49_3 ->   j .memed.49_3
// [Asm] subst   mv v17, v2 ->   mv a0, s1
// [Asm] subst   j .memed.49_10 ->   j .memed.49_10
// [Asm] subst   mv v18, v17 ->   mv a1, a0
// [Asm] subst   addi v12, v2, -1 ->   addi a0, s1, -1
// [Asm] subst   mv s10, v5 ->   mv s10, s2
// [Asm] subst   ld v27, 0(v5) ->   ld a1, 0(s2)
// [Asm] subst   jalr v27 ->   jalr a1
// [Asm] subst   mv v13, a0 ->   mv s3, a0
// [Asm] subst   addi v14, v2, -2 ->   addi a0, s1, -2
// [Asm] subst   mv s10, v5 ->   mv s10, s2
// [Asm] subst   ld v24, 0(v5) ->   ld a1, 0(s2)
// [Asm] subst   jalr v24 ->   jalr a1
// [Asm] subst   add v16, v13, v15 ->   add a0, s3, a0
// [Asm] subst   ret ->   ret
// [Asm] subst   addi v5, s11, -16 ->   addi s2, s11, -16
// [Asm] subst   andi s11, v5, -8 ->   andi s11, s2, -8
// [Asm] subst   la v32, memed.50 ->   la a0, memed.50
// [Asm] subst   sd v32, 0(v5) ->   sd a0, 0(s2)
// [Asm] subst   sd v3, 8(v5) ->   sd s0, 8(s2)
// [Asm] subst   li v30, 1 ->   li a0, 1
// [Asm] subst   bge v30, v2, .memed.49_8 ->   bge a0, s1, .memed.49_8
// [Asm] pre_assigned_registers: FreeVar(fvref=^1) -> v3, Insn(iref=%1) -> v5, Self(fref=f7) -> v0, FnParam(fref=f7, fpref=$f.0) -> v2, Insn(iref=%0) -> v4
// [Asm] defs: []
// [Asm] live_set: [a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of memed.50"];
// [Asm]   r0 [label="v0 ← a1", color=green];
// [Asm]   r3 [label="v3 ← a1", color=green];
// [Asm]   r9 [label="a5", color=blue];
// [Asm]   r6 [label="a2", color=blue];
// [Asm]   r13 [label="t1", color=blue];
// [Asm]   r4 [label="v4 ← a2", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a7", color=blue];
// [Asm]   r7 [label="a3", color=blue];
// [Asm]   r10 [label="a6", color=blue];
// [Asm]   r14 [label="t2", color=blue];
// [Asm]   r8 [label="a4", color=blue];
// [Asm]   r5 [label="a1", color=blue];
// [Asm]   r15 [label="t3", color=blue];
// [Asm]   r2 [label="v2 ← a0", color=green];
// [Asm]   r16 [label="t4", color=blue];
// [Asm]   r17 [label="v5 ← a0", color=green];
// [Asm]   r12 [label="t0", color=blue];
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r5 -- r6;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r5;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r8;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r5;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r2 -- r3;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:v0-> 1:a0-> 2:v2-> 3:v3-> 4:v4-> 5:a1-> 6:a2-> 7:a3-> 8:a4-> 9:a5-> 10:a6-> 11:a7-> 12:t0-> 13:t1-> 14:t2-> 15:t3-> 16:t4-> 17:v5"
// [Asm]   comment = "v0<-a1;v3<-a1;v4<-a2;v2<-a0;v5<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of memed.50"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   ld v3, 8(v0) ->   ld a1, 8(a1)
// [Asm] subst   lw v4, unmem_magic.1 ->   lw a2, unmem_magic.1
// [Asm] subst   call memed.49 ->   call memed.49
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$unmem_magic.1"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   comment = "0:v2-> 1:a0"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$unmem_magic.1"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, -1919810 ->   li a0, -1919810
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] main.48:
// [Asm] # block info: defs: [v3, t1, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, v4, ft5, v6, ft7, v11, ft4, v5, ft9, v10, a5, fa4, a0, ft2, a2, a3, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15, v2], uses: [v11, v5, a0, zero, v8, v4, a2, a1, v6, s11, v15, v3], upward_exposed: [s11, a0, zero], params_defs: []
// [Asm] # live_in: [s11, a0, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.48_0:
// [Asm]   # save_ctx1  # live: [zero, a0, s11]
// [Asm]   mv v2, a0  # live: [zero, s11]
// [Asm]   # save_ctx2  # live: [zero, s11]
// [Asm]   call minimbt_read_int  # live: [zero, a0, s11]
// [Asm]   mv v4, a0  # live: [zero, v4, s11]
// [Asm]   # restore_ctx2  # live: [zero, v4, s11]
// [Asm]   addi v5, v4, 1  # live: [v5, zero, v4, s11]
// [Asm]   lw v6, unmem_magic.1  # live: [v5, zero, v4, v6, s11]
// [Asm]   slliw v15, v5, 2  # live: [v5, zero, v4, v6, s11, v15]
// [Asm]   sub v3, s11, v15  # live: [v5, zero, v4, v6, v3]
// [Asm]   andi s11, v3, -8  # live: [v5, zero, v4, v6, v3]
// [Asm]   mv a1, v5  # live: [zero, v4, a1, v6, v3]
// [Asm]   mv a0, v3  # live: [zero, a0, v4, a1, v6, v3]
// [Asm]   mv a2, v6  # live: [zero, a0, v4, a2, a1, v6, v3]
// [Asm]   call memseti32  # live: [v4, v6, zero, v3]
// [Asm]   # save_ctx2  # live: [v4, v6, zero, v3]
// [Asm]   mv a0, v4  # live: [v6, zero, a0, v3]
// [Asm]   mv a1, v3  # live: [a1, v6, zero, a0]
// [Asm]   mv a2, v6  # live: [a2, a1, zero, a0]
// [Asm]   call memed.49  # live: [zero, a0]
// [Asm]   mv v8, a0  # live: [zero, v8]
// [Asm]   # restore_ctx2  # live: [zero, v8]
// [Asm]   # save_ctx2  # live: [zero, v8]
// [Asm]   mv a0, v8  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v9, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   li v11, 10  # live: [v11, zero]
// [Asm]   mv a0, v11  # live: [zero, a0]
// [Asm]   call minimbt_print_char  # live: [zero, a0]
// [Asm]   mv v10, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [v3, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v3, a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   lw v2, unmem_magic.1  # live: [v2]
// [Asm]   # save_ctx2  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   call main.48  # live: [a0]
// [Asm]   mv v3, a0  # live: [v3]
// [Asm]   # restore_ctx2  # live: [v3]
// [Asm] # control
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] memed.50:
// [Asm] # block info: defs: [v2, t1, v0, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, v4, ft5, ft10, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, v5, a0, v0, v4, a2, a1, s10, v3], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .memed.50_0:
// [Asm]   # save_ctx1  # live: [a0, s10]
// [Asm]   mv v0, s10  # live: [v0, a0]
// [Asm]   mv v2, a0  # live: [v0, v2]
// [Asm]   ld v3, 8(v0)  # live: [v2, v3]
// [Asm]   lw v4, unmem_magic.1  # live: [v2, v4, v3]
// [Asm]   # save_ctx2  # live: [v2, v4, v3]
// [Asm]   mv a0, v2  # live: [v4, a0, v3]
// [Asm]   mv a1, v3  # live: [v4, a1, a0]
// [Asm]   mv a2, v4  # live: [a2, a1, a0]
// [Asm]   call memed.49  # live: [a0]
// [Asm]   mv v5, a0  # live: [v5]
// [Asm]   # restore_ctx2  # live: [v5]
// [Asm] # control
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] memed.49:
// [Asm] # block info: defs: [v2, v7, v4, v37, v38, v6, v3], uses: [v2, a0, v7, a2, v37, v38, a1, v6, v3], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, s11, a0], live_out: [v2, s11, v3]
// [Asm] # block parameters: []
// [Asm] .memed.49_0:
// [Asm]   # save_ctx1  # live: [a2, a1, s11, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, s11, v2]
// [Asm]   mv v3, a1  # live: [v3, a2, s11, v2]
// [Asm]   mv v4, a2  # live: [v3, s11, v2]
// [Asm]   slliw v37, v2, 2  # live: [v3, v37, s11, v2]
// [Asm]   add v38, v3, v37  # live: [v3, v38, s11, v2]
// [Asm]   lw v6, 0(v38)  # live: [v3, v6, s11, v2]
// [Asm]   lw v7, unmem_magic.1  # live: [v3, v7, v6, s11, v2]
// [Asm] # control
// [Asm]   bne v6, v7, .memed.49_2  # live: [v3, s11, v2]
// [Asm] 
// [Asm] # block info: defs: [v32, v5, s11], uses: [v32, v5, s11, v3], upward_exposed: [s11, v3], params_defs: []
// [Asm] # live_in: [v2, s11, v3], live_out: [v3, v5, v2]
// [Asm] # block parameters: []
// [Asm] .memed.49_1:
// [Asm]   addi v5, s11, -16  # live: [v2, v5, v3]
// [Asm]   andi s11, v5, -8  # live: [v2, v5, v3]
// [Asm]   la v32, memed.50  # live: [v2, v32, v5, v3]
// [Asm]   sd v32, 0(v5)  # live: [v2, v5, v3]
// [Asm]   sd v3, 8(v5)  # live: [v2, v5, v3]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v30], uses: [v30, v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v3, v5, v2], live_out: [v3, v5, v2]
// [Asm] # block parameters: []
// [Asm] .memed.49_7:
// [Asm] # control
// [Asm]   li v30, 1  # live: [v2, v5, v30, v3]
// [Asm]   bge v30, v2, .memed.49_8  # live: [v2, v5, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v16, v13, ft0, ft1, a1, v12, fa1, fa2, ft6, v27, a4, fa6, a6, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, v24, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v5, v14, v16, a0, v13, v27, v12, v24, v15, v2], upward_exposed: [v5, v2], params_defs: []
// [Asm] # live_in: [v3, v5, v2], live_out: [v3, v17, v2]
// [Asm] # block parameters: []
// [Asm] .memed.49_9:
// [Asm]   addi v12, v2, -1  # live: [v2, v5, v12, v3]
// [Asm]   mv s10, v5  # live: [v2, v5, v12, v3]
// [Asm]   ld v27, 0(v5)  # live: [v2, v5, v12, v27, v3]
// [Asm]   # save_ctx2  # live: [v2, v5, v12, v27, v3]
// [Asm]   mv a0, v12  # live: [v2, v5, a0, v27, v3]
// [Asm]   jalr v27  # live: [v2, v5, a0, v3]
// [Asm]   mv v13, a0  # live: [v2, v5, v13, v3]
// [Asm]   # restore_ctx2  # live: [v2, v5, v13, v3]
// [Asm]   addi v14, v2, -2  # live: [v2, v14, v5, v13, v3]
// [Asm]   mv s10, v5  # live: [v2, v14, v5, v13, v3]
// [Asm]   ld v24, 0(v5)  # live: [v2, v14, v24, v13, v3]
// [Asm]   # save_ctx2  # live: [v2, v14, v24, v13, v3]
// [Asm]   mv a0, v14  # live: [v2, v24, v13, a0, v3]
// [Asm]   jalr v24  # live: [v2, v13, a0, v3]
// [Asm]   mv v15, a0  # live: [v2, v15, v13, v3]
// [Asm]   # restore_ctx2  # live: [v2, v15, v13, v3]
// [Asm]   add v16, v13, v15  # live: [v2, v16, v3]
// [Asm] # control
// [Asm]   mv v17, v16  # live: [v2, v17, v3]
// [Asm] 
// [Asm] # block info: defs: [v18], uses: [v17], upward_exposed: [v17], params_defs: [v17]
// [Asm] # live_in: [v2, v17, v3], live_out: [v3, v18, v2]
// [Asm] # block parameters: [v17]
// [Asm] .memed.49_10:
// [Asm] # control
// [Asm]   mv v18, v17  # live: [v2, v18, v3]
// [Asm] 
// [Asm] # block info: defs: [v21, v22, v20], uses: [v3, v21, v18, v22, v2], upward_exposed: [v3, v18, v2], params_defs: [v18]
// [Asm] # live_in: [v2, v18, v3], live_out: [v20]
// [Asm] # block parameters: [v18]
// [Asm] .memed.49_4:
// [Asm]   slliw v21, v2, 2  # live: [v18, v21, v3]
// [Asm]   add v22, v3, v21  # live: [v18, v22]
// [Asm]   sw v18, 0(v22)  # live: [v18]
// [Asm] # control
// [Asm]   mv v20, v18  # live: [v20]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v20], upward_exposed: [v20], params_defs: [v20]
// [Asm] # live_in: [v20], live_out: []
// [Asm] # block parameters: [v20]
// [Asm] .memed.49_3:
// [Asm] # control
// [Asm]   mv a0, v20  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v20, v33, v34, v9], uses: [v3, v2, v33, v34, v9], upward_exposed: [v3, v2], params_defs: []
// [Asm] # live_in: [v2, v3], live_out: [v20]
// [Asm] # block parameters: []
// [Asm] .memed.49_2:
// [Asm]   slliw v33, v2, 2  # live: [v33, v3]
// [Asm]   add v34, v3, v33  # live: [v34]
// [Asm]   lw v9, 0(v34)  # live: [v9]
// [Asm] # control
// [Asm]   mv v20, v9  # live: [v20]
// [Asm]   j .memed.49_3  # live: [v20]
// [Asm] 
// [Asm] # block info: defs: [v17], uses: [v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v3, v2], live_out: [v3, v17, v2]
// [Asm] # block parameters: []
// [Asm] .memed.49_8:
// [Asm] # control
// [Asm]   mv v17, v2  # live: [v2, v17, v3]
// [Asm]   j .memed.49_10  # live: [v2, v17, v3]
// [Asm] 
// [Asm] # leaf true
// [Asm] T$unmem_magic.1:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$unmem_magic.1_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, -1919810  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0, sp, s0, ra, s11, t5], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$unmem_magic.1  # live: [s0, a0]
// [Asm]   la t5, unmem_magic.1  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] unmem_magic.1:
// [Asm]   .zero 4
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: Let(("unmem_magic", Int), Neg(Int(1919810), kind=Some(Int)), LetRec({name: ("mem", Fun([Int], Int)), args: [("func", Fun([Fun([Int], Int), Int], Int)), ("max_n", Int)], body: Let(("cache", Var({val: Some(Array(Int))})), Array(Var("max_n"), Var("unmem_magic")), LetRec({name: ("memed", Int), args: [("n", Int)], body: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var({val: Some(Int)})), App(Var("func"), [Var("memed"), Var("n")]), Let(("_", Var({val: Some(Unit)})), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))}, Var("memed")))}, LetRec({name: ("mem_fib", Int), args: [("f", Fun([Int], Int)), ("n", Int)], body: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))]), Add, kind=Some(Int)))}, LetRec({name: ("fib", Int), args: [("n", Int)], body: Let(("f", Var({val: Some(Fun([Int], Int))})), App(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=Some(Int))]), App(Var("f"), [Var("n")]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))}, App(Var("main"), []))))))
// [Knf] build_knf: Neg(Int(1919810), kind=Some(Int))
// [Knf] build_knf: LetRec({name: ("mem", Fun([Int], Int)), args: [("func", Fun([Fun([Int], Int), Int], Int)), ("max_n", Int)], body: Let(("cache", Var({val: Some(Array(Int))})), Array(Var("max_n"), Var("unmem_magic")), LetRec({name: ("memed", Int), args: [("n", Int)], body: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var({val: Some(Int)})), App(Var("func"), [Var("memed"), Var("n")]), Let(("_", Var({val: Some(Unit)})), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))}, Var("memed")))}, LetRec({name: ("mem_fib", Int), args: [("f", Fun([Int], Int)), ("n", Int)], body: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))]), Add, kind=Some(Int)))}, LetRec({name: ("fib", Int), args: [("n", Int)], body: Let(("f", Var({val: Some(Fun([Int], Int))})), App(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=Some(Int))]), App(Var("f"), [Var("n")]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))}, App(Var("main"), [])))))
// [Knf] build_knf: Let(("cache", Var({val: Some(Array(Int))})), Array(Var("max_n"), Var("unmem_magic")), LetRec({name: ("memed", Int), args: [("n", Int)], body: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var({val: Some(Int)})), App(Var("func"), [Var("memed"), Var("n")]), Let(("_", Var({val: Some(Unit)})), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))}, Var("memed")))
// [Knf] build_knf: Array(Var("max_n"), Var("unmem_magic"))
// [Knf] build_knf: Var("max_n")
// [Knf] build_knf: Var("unmem_magic")
// [Knf] build_knf: LetRec({name: ("memed", Int), args: [("n", Int)], body: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var({val: Some(Int)})), App(Var("func"), [Var("memed"), Var("n")]), Let(("_", Var({val: Some(Unit)})), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))}, Var("memed"))
// [Knf] build_knf: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var({val: Some(Int)})), App(Var("func"), [Var("memed"), Var("n")]), Let(("_", Var({val: Some(Unit)})), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))
// [Knf] build_knf: Get(Var("cache"), Var("n"))
// [Knf] build_knf: Var("cache")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("unmem_magic")
// [Knf] build_knf: Let(("res", Var({val: Some(Int)})), App(Var("func"), [Var("memed"), Var("n")]), Let(("_", Var({val: Some(Unit)})), Put(Var("cache"), Var("n"), Var("res")), Var("res")))
// [Knf] build_knf: App(Var("func"), [Var("memed"), Var("n")])
// [Knf] build_knf: Var("func")
// [Knf] build_knf: Var("memed")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("cache"), Var("n"), Var("res")), Var("res"))
// [Knf] build_knf: Put(Var("cache"), Var("n"), Var("res"))
// [Knf] build_knf: Var("cache")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("res")
// [Knf] build_knf: Var("res")
// [Knf] build_knf: Get(Var("cache"), Var("n"))
// [Knf] build_knf: Var("cache")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("memed")
// [Knf] build_knf: LetRec({name: ("mem_fib", Int), args: [("f", Fun([Int], Int)), ("n", Int)], body: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))]), Add, kind=Some(Int)))}, LetRec({name: ("fib", Int), args: [("n", Int)], body: Let(("f", Var({val: Some(Fun([Int], Int))})), App(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=Some(Int))]), App(Var("f"), [Var("n")]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))}, App(Var("main"), []))))
// [Knf] build_knf: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))]), Add, kind=Some(Int)))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Prim(App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))]), Add, kind=Some(Int))
// [Knf] build_knf: App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Prim(Var("n"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Prim(Var("n"), Int(2), Sub, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: LetRec({name: ("fib", Int), args: [("n", Int)], body: Let(("f", Var({val: Some(Fun([Int], Int))})), App(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=Some(Int))]), App(Var("f"), [Var("n")]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))}, App(Var("main"), [])))
// [Knf] build_knf: Let(("f", Var({val: Some(Fun([Int], Int))})), App(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=Some(Int))]), App(Var("f"), [Var("n")]))
// [Knf] build_knf: App(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("mem")
// [Knf] build_knf: Var("mem_fib")
// [Knf] build_knf: Prim(Var("n"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("f"), [Var("n")])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))}, App(Var("main"), []))
// [Knf] build_knf: Let(("n", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))
// [Knf] build_knf: App(Var("read_int"), [])
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit))
// [Knf] build_knf: App(Var("print_int"), [App(Var("fib"), [Var("n")])])
// [Knf] build_knf: App(Var("fib"), [Var("n")])
// [Knf] build_knf: Var("fib")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)
// [Knf] build_knf: App(Var("print_char"), [Int(10)])
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Core] b0 control: Panic -> Return(args=[Int32(val=-1919810)])
// [Core] b1 control: Panic -> Jump(target=b3, args=[FnParam(fref=f2, fpref=$f.1)])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Insn(iref=%5)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%1)])
// [Core] b1 control: Panic -> Jump(target=b3, args=[Insn(iref=%4)])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Insn(iref=%6)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%2), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b0 control: Panic -> Return(args=[Unit])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%1)])
// [Main] beta reduce f.40 = memed.42
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memseti32
// [Main]   .type memseti32, @function
// [Main] memseti32:
// [Main]   blez a1, .memseti32_b1
// [Main]   slli a1, a1, 2
// [Main]   add a1, a1, a0
// [Main] .memseti32_b0:
// [Main]   sw a2, 0(a0)
// [Main]   addi a0, a0, 4
// [Main]   bne a0, a1, .memseti32_b0
// [Main] .memseti32_b1:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.48
// [Main]   .type main.48, @function
// [Main] # leaf false
// [Main] main.48:
// [Main] .main.48_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   call minimbt_read_int
// [Main]   mv s0, a0
// [Main]   addi a0, s0, 1
// [Main]   lw s1, unmem_magic.1
// [Main]   slliw a1, a0, 2
// [Main]   sub s2, s11, a1
// [Main]   andi s11, s2, -8
// [Main]   mv a1, a0
// [Main]   mv a0, s2
// [Main]   mv a2, s1
// [Main]   call memseti32
// [Main]   mv a0, s0
// [Main]   mv a1, s2
// [Main]   mv a2, s1
// [Main]   call memed.49
// [Main]   call minimbt_print_int
// [Main]   li a0, 10
// [Main]   call minimbt_print_char
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   lw a0, unmem_magic.1
// [Main]   call main.48
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memed.50
// [Main]   .type memed.50, @function
// [Main] # leaf false
// [Main] memed.50:
// [Main] .memed.50_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a1, s10
// [Main]   ld a1, 8(a1)
// [Main]   lw a2, unmem_magic.1
// [Main]   call memed.49
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memed.49
// [Main]   .type memed.49, @function
// [Main] # leaf false
// [Main] memed.49:
// [Main] .memed.49_0:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   mv s1, a0
// [Main]   mv s0, a1
// [Main]   mv a0, a2
// [Main]   slliw a0, s1, 2
// [Main]   add a0, s0, a0
// [Main]   lw a0, 0(a0)
// [Main]   lw a1, unmem_magic.1
// [Main]   bne a0, a1, .memed.49_2
// [Main] 
// [Main] .memed.49_1:
// [Main]   addi s2, s11, -16
// [Main]   andi s11, s2, -8
// [Main]   la a0, memed.50
// [Main]   sd a0, 0(s2)
// [Main]   sd s0, 8(s2)
// [Main] 
// [Main] .memed.49_7:
// [Main]   li a0, 1
// [Main]   bge a0, s1, .memed.49_8
// [Main] 
// [Main] .memed.49_9:
// [Main]   addi a0, s1, -1
// [Main]   mv s10, s2
// [Main]   ld a1, 0(s2)
// [Main]   jalr a1
// [Main]   mv s3, a0
// [Main]   addi a0, s1, -2
// [Main]   mv s10, s2
// [Main]   ld a1, 0(s2)
// [Main]   jalr a1
// [Main]   add a0, s3, a0
// [Main] 
// [Main] .memed.49_10:
// [Main]   mv a1, a0
// [Main] 
// [Main] .memed.49_4:
// [Main]   slliw a0, s1, 2
// [Main]   add a0, s0, a0
// [Main]   sw a1, 0(a0)
// [Main]   mv a0, a1
// [Main] 
// [Main] .memed.49_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main] .memed.49_2:
// [Main]   slliw a0, s1, 2
// [Main]   add a0, s0, a0
// [Main]   lw a0, 0(a0)
// [Main]   j .memed.49_3
// [Main] 
// [Main] .memed.49_8:
// [Main]   mv a0, s1
// [Main]   j .memed.49_10
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$unmem_magic.1
// [Main]   .type T$unmem_magic.1, @function
// [Main] # leaf true
// [Main] T$unmem_magic.1:
// [Main] .T$unmem_magic.1_0:
// [Main]   li a0, -1919810
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$unmem_magic.1
// [Main]   la t5, unmem_magic.1
// [Main]   sw a0, 0(t5)
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl unmem_magic.1
// [Main]   .type unmem_magic.1, @object
// [Main] unmem_magic.1:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function main.48
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_int", args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::0)
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Insn(iref=%2))])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Lowering insn Call(ty=Int32, f=f3, args=[Insn(iref=%0), Mem(fref=f4, mref=m0), Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Int32(val=10)])
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function main.48 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::0)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%1)])
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function T$start to wasm
// [Wasm] Lowering function memed.49
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f3, fpref=$f.1), offset=FnParam(fref=f3, fpref=$f.0), width=@32), val=BlockParam(bref=b4, bpref=$b.0))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b4, bpref=$b.0) -> $b4.$b.0
// [Wasm] Lowering control Jump(target=b3, args=[BlockParam(bref=b4, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b4, bpref=$b.0) -> $b4.$b.0
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Jump(target=b4, args=[BlockParam(bref=b10, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Get Local name BlockParam(bref=b4, bpref=$b.0) -> $b4.$b.0
// [Wasm] Lowering control Jump(target=b10, args=[FnParam(fref=f3, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f3, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Apply(ty=Int32, f=Mem(fref=f3, mref=m0), args=[Insn(iref=%8)])
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f3, fpref=$f.0), Int32(val=2)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Apply(ty=Int32, f=Mem(fref=f3, mref=m0), args=[Insn(iref=%10)])
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%9), Insn(iref=%11)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering control Jump(target=b10, args=[Insn(iref=%12)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FnParam(fref=f3, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Branch(cond=Insn(iref=%7), t=b8, t_args=[], f=b9, f_args=[])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Int32), mref=m0, fills=[Field(index=0, val=Fn(fref=f7)), Field(index=1, val=FnParam(fref=f3, fpref=$f.1))])
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Lowering control Jump(target=b7, args=[])
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f3, fpref=$f.1), offset=FnParam(fref=f3, fpref=$f.0), width=@32))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%6)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f3, fpref=$f.1), offset=FnParam(fref=f3, fpref=$f.0), width=@32))
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::0)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Local Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local BlockParam(bref=b4, bpref=$b.0) -> $b4.$b.0
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function memed.49 to wasm
// [Wasm] Lowering function memed.50
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::0)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Call(ty=Int32, f=f3, args=[FnParam(fref=f7, fpref=$f.0), FreeVar(fvref=^1), Insn(iref=%0)])
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Return(args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.0) -> $$f.0
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function memed.50 to wasm
// [Wasm] Lowering function T$unmem_magic.1
// [Wasm] Lowering control Return(args=[Int32(val=-1919810)])
// [Wasm] Lowered function T$unmem_magic.1 to wasm
// [KnfOpt] func_tre: mem.2 false
// [KnfOpt] func_tre: memed.6 false
// [KnfOpt] func_tre: mem_fib.11 false
// [KnfOpt] func_tre: fib.21 false
// [KnfOpt] func_tre: main.26 false
// [KnfOpt] freq: {mem.2: Once, memed.6: AsClosure, mem_fib.11: AsClosure, fib.21: Once, main.26: Once}
// [KnfOpt] Knf inline Some(mem) let f.25: Fun([Int], Int) = Unit
// [KnfOpt] Apply(f.25, [n.22, ])
// [KnfOpt] Knf inline Some(fib) let _28: Int = Unit
// [KnfOpt] let _29: Unit = ExtApply(minimbt_print_int, [_28, ])
// [KnfOpt] let _30: Int = Int(10)
// [KnfOpt] let _31: Unit = ExtApply(minimbt_print_char, [_30, ])
// [KnfOpt] Unit
// [KnfOpt] freq: {mem.2: Once, memed.6: AsClosure, mem_fib.11: AsClosure, main.26: Once}
// [KnfOpt] Knf inline Some(mem) let f.40: Fun([Int], Int) = Unit
// [KnfOpt] let _28: Int = Apply(f.40, [n.27, ])
// [KnfOpt] let _29: Unit = ExtApply(minimbt_print_int, [_28, ])
// [KnfOpt] let _30: Int = Int(10)
// [KnfOpt] let _31: Unit = ExtApply(minimbt_print_char, [_30, ])
// [KnfOpt] Unit
// [KnfOpt] Numbers of let rec: 3 4 1
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f4: Once, f10: Once, f2: Once, f3: Multiple, f7: MaybeInClosure, f0: Once})
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b4, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b4, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b4, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b4, bpref=$b.0)
// [CoreOpt] memed.49 is inlining Call(ty=Int32, f=f2, args=[Mem(fref=f3, mref=m0), FnParam(fref=f3, fpref=$f.0)])
// [CoreOpt] shifted callee .fn mem_fib.47 #f2 : fn(closure(int32) -> int32, int32) -> int32
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b7 {
// [CoreOpt]   .bb #b7 () {
// [CoreOpt]     let %7: bool = le($f1, 1)
// [CoreOpt]     br %7 b8() b9()
// [CoreOpt]   }
// [CoreOpt]   .bb #b8 () {
// [CoreOpt]     jump b10($f1)
// [CoreOpt]   }
// [CoreOpt]   .bb #b9 () {
// [CoreOpt]     let %8: int32 = sub($f1, 1)
// [CoreOpt]     let %9: int32 = apply $f0(%8)
// [CoreOpt]     let %10: int32 = sub($f1, 2)
// [CoreOpt]     let %11: int32 = apply $f0(%10)
// [CoreOpt]     let %12: int32 = add(%9, %11)
// [CoreOpt]     jump b10(%12)
// [CoreOpt]   }
// [CoreOpt]   .bb #b10 (int32) {
// [CoreOpt]     return $b10.0
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f2
// [CoreOpt] LVN subst Insn(iref=%4) with Insn(iref=%2)
