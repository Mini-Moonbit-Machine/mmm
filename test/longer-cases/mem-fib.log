// [Asm] pre_assigned_registers: Insn(iref=%3) -> v9, BlockParam(bref=b3, bpref=$b.0) -> v11, Insn(iref=%2) -> v7, FnParam(fref=f6, fpref=$f.0) -> v2, Insn(iref=%1) -> v6, FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, Self(fref=f6) -> v0, Insn(iref=%5) -> v8, Insn(iref=%0) -> v5, Insn(iref=%4) -> v10
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Insn(iref=%1)])
// [Asm] defs: []
// [Asm] live_set: [a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v0, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v0, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v2, v0, v4, v20, v3]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v2, v0, v4, v21, v3]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v0, v4, v5, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v0, v4, v5, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v0, v4, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v2, v0, v4, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: s10 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v2, v0, v14, v3]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v0, v14, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v14, a0, v3]
// [Asm] move_origin: [v0]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, a1, v14, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v2, v9, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v12, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v9, v13]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v9]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: [v9]
// [Asm] defined: v11 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v16, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v17]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: [v8]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of memed8_6"];
// [Asm]   r0 [label="v0 ← a1", color=green];
// [Asm]   r20 [label="a5", color=blue];
// [Asm]   r23 [label="v9 ← a0", color=green];
// [Asm]   r3 [label="v3 ← s1", color=green];
// [Asm]   r9 [label="s10", color=blue];
// [Asm]   r26 [label="v11 ← a0", color=green];
// [Asm]   r27 [label="v16 ← a0", color=green];
// [Asm]   r6 [label="v21 ← a2", color=green];
// [Asm]   r13 [label="t1", color=blue];
// [Asm]   r4 [label="v4 ← a0", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r29 [label="v8 ← a0", color=green];
// [Asm]   r28 [label="v17 ← a0", color=green];
// [Asm]   r11 [label="a1", color=blue];
// [Asm]   r7 [label="v5 ← a2", color=green];
// [Asm]   r10 [label="v14 ← a2", color=green];
// [Asm]   r22 [label="a7", color=blue];
// [Asm]   r14 [label="t2", color=blue];
// [Asm]   r8 [label="v6 ← a3", color=green];
// [Asm]   r5 [label="v20 ← a2", color=green];
// [Asm]   r24 [label="v12 ← a1", color=green];
// [Asm]   r15 [label="t3", color=blue];
// [Asm]   r25 [label="v13 ← a1", color=green];
// [Asm]   r2 [label="v2 ← s0", color=green];
// [Asm]   r16 [label="t4", color=blue];
// [Asm]   r18 [label="a3", color=blue];
// [Asm]   r19 [label="a4", color=blue];
// [Asm]   r17 [label="a2", color=blue];
// [Asm]   r21 [label="a6", color=blue];
// [Asm]   r12 [label="t0", color=blue];
// [Asm]   r3 -- r19;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r16;
// [Asm]   r2 -- r18;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r18;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r22;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r1 -- r15;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r22;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r2 -- r6;
// [Asm]   r23 -- r25;
// [Asm]   r3 -- r4;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r3 -- r21;
// [Asm]   r1 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r3 -- r13;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r3 -- r10;
// [Asm]   r2 -- r21;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r14;
// [Asm]   r3 -- r27;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r23 -- r24;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r8;
// [Asm]   r3 -- r7;
// [Asm]   r2 -- r22;
// [Asm]   r2 -- r9;
// [Asm]   r0 -- r4;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r6;
// [Asm]   r7 -- r8;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r0 -- r7;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r23;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:v0-> 1:a0-> 2:v2-> 3:v3-> 10:v14-> 11:a1-> 4:v4-> 5:v20-> 6:v21-> 7:v5-> 8:v6-> 9:s10-> 12:t0-> 13:t1-> 14:t2-> 15:t3-> 16:t4-> 17:a2-> 18:a3-> 19:a4-> 20:a5-> 21:a6-> 22:a7-> 23:v9-> 24:v12-> 25:v13-> 27:v16-> 26:v11-> 28:v17-> 29:v8"
// [Asm]   comment = "v0<-a1;v9<-a0;v3<-s1;v11<-a0;v16<-a0;v21<-a2;v4<-a0;v8<-a0;v17<-a0;v5<-a2;v14<-a2;v6<-a3;v20<-a2;v12<-a1;v13<-a1;v2<-s0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of memed8_6"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   ld v3, 8(v0) ->   ld s1, 8(a1)
// [Asm] subst   ld v4, 16(v0) ->   ld a0, 16(a1)
// [Asm] subst   slliw v20, v2, 2 ->   slliw a2, s0, 2
// [Asm] subst   add v21, v3, v20 ->   add a2, s1, a2
// [Asm] subst   lw v5, 0(v21) ->   lw a2, 0(a2)
// [Asm] subst   lw v6, unmem_magic.1 ->   lw a3, unmem_magic.1
// [Asm] subst   bne v5, v6, .memed8_6_2 ->   bne a2, a3, .memed8_6_2
// [Asm] subst   ret ->   ret
// [Asm] subst   mv s10, v4 ->   mv s10, a0
// [Asm] subst   ld v14, 0(v4) ->   ld a2, 0(a0)
// [Asm] subst   mv a0, v0 ->   mv a0, a1
// [Asm] subst   mv a1, v2 ->   mv a1, s0
// [Asm] subst   jalr v14 ->   jalr a2
// [Asm] subst   slliw v12, v2, 2 ->   slliw a1, s0, 2
// [Asm] subst   add v13, v3, v12 ->   add a1, s1, a1
// [Asm] subst   sw v9, 0(v13) ->   sw a0, 0(a1)
// [Asm] subst   slliw v16, v2, 2 ->   slliw a0, s0, 2
// [Asm] subst   add v17, v3, v16 ->   add a0, s1, a0
// [Asm] subst   lw v8, 0(v17) ->   lw a0, 0(a0)
// [Asm] subst   j .memed8_6_3 ->   j .memed8_6_3
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v6, Insn(iref=%2) -> v5, Insn(iref=%1) -> v4, Self(fref=f4) -> v0, Insn(iref=%6) -> v9, Mem(fref=f4, mref=m0) -> v2, Insn(iref=%5) -> v8, Insn(iref=%0) -> v3, Insn(iref=%4) -> v7
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [s11, zero, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v4]
// [Asm] live_set: [v4, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v2, v4, v17, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, zero, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v6, zero, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v6, zero, v3]
// [Asm] move_origin: [v6]
// [Asm] defined: s10 is X
// [Asm] defs: [v13]
// [Asm] live_set: [zero, v13, v3]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v13, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v13]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [zero, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v7]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10, zero]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main33_4"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r20 [label="s10", color=blue];
// [Asm]   r23 [label="v8 ← a0", color=green];
// [Asm]   r3 [label="a0", color=blue];
// [Asm]   r9 [label="a2", color=blue];
// [Asm]   r6 [label="t3", color=blue];
// [Asm]   r13 [label="a6", color=blue];
// [Asm]   r4 [label="t1", color=blue];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r11 [label="a4", color=blue];
// [Asm]   r7 [label="t4", color=blue];
// [Asm]   r10 [label="a3", color=blue];
// [Asm]   r22 [label="v7 ← a0", color=green];
// [Asm]   r14 [label="a7", color=blue];
// [Asm]   r8 [label="a1", color=blue];
// [Asm]   r5 [label="t2", color=blue];
// [Asm]   r24 [label="v10 ← a0", color=green];
// [Asm]   r15 [label="v3 ← s0", color=green];
// [Asm]   r25 [label="v9 ← a0", color=green];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="v4 ← a1", color=green];
// [Asm]   r18 [label="v17 ← a2", color=green];
// [Asm]   r19 [label="v6 ← a0", color=green];
// [Asm]   r17 [label="v2 ← a0", color=green];
// [Asm]   r21 [label="v13 ← a1", color=green];
// [Asm]   r12 [label="a5", color=blue];
// [Asm]   r17 -- r18;
// [Asm]   r0 -- r15;
// [Asm]   r13 -- r15;
// [Asm]   r1 -- r12;
// [Asm]   r3 -- r15;
// [Asm]   r6 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r16;
// [Asm]   r2 -- r18;
// [Asm]   r9 -- r15;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r12 -- r15;
// [Asm]   r1 -- r7;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r1 -- r15;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r17;
// [Asm]   r2 -- r16;
// [Asm]   r2 -- r11;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r5;
// [Asm]   r16 -- r18;
// [Asm]   r16 -- r17;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r15 -- r18;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r3 -- r4;
// [Asm]   r15 -- r17;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r15 -- r21;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r8 -- r15;
// [Asm]   r3 -- r13;
// [Asm]   r7 -- r15;
// [Asm]   r10 -- r15;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r2 -- r21;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r11 -- r15;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r24;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r15 -- r16;
// [Asm]   r15 -- r20;
// [Asm]   r15 -- r19;
// [Asm]   r2 -- r3;
// [Asm]   r2 -- r23;
// [Asm]   r14 -- r15;
// [Asm]   r5 -- r15;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:t0-> 1:s11-> 2:zero-> 3:a0-> 15:v3-> 4:t1-> 5:t2-> 6:t3-> 7:t4-> 8:a1-> 9:a2-> 10:a3-> 11:a4-> 12:a5-> 13:a6-> 14:a7-> 16:v4-> 17:v2-> 18:v17-> 21:v13-> 19:v6-> 20:s10-> 22:v7-> 23:v8-> 24:v10-> 25:v9"
// [Asm]   comment = "v8<-a0;v7<-a0;v10<-a0;v3<-s0;v9<-a0;v4<-a1;v17<-a2;v6<-a0;v2<-a0;v13<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main33_4"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call minimbt_read_int ->   call minimbt_read_int
// [Asm] subst   mv v3, a0 ->   mv s0, a0
// [Asm] subst   addi v4, v3, 1 ->   addi a1, s0, 1
// [Asm] subst   addi v2, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a0, -8
// [Asm] subst   la v17, mem_fib15_3 ->   la a2, mem_fib15_3
// [Asm] subst   sd v17, 0(v2) ->   sd a2, 0(a0)
// [Asm] subst   call mem2_2 ->   call mem2_2
// [Asm] subst   mv s10, v6 ->   mv s10, a0
// [Asm] subst   ld v13, 0(v6) ->   ld a1, 0(a0)
// [Asm] subst   mv a0, v3 ->   mv a0, s0
// [Asm] subst   jalr v13 ->   jalr a1
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v10, 10 ->   li a0, 10
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f10) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_10"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_10"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main33_4 ->   call main33_4
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%1) -> v7, Mem(fref=f2, mref=m1) -> v5, Mem(fref=f2, mref=m0) -> v4, FnParam(fref=f2, fpref=$f.0) -> v2, Insn(iref=%0) -> v6, Insn(iref=%2) -> v8
// [Asm] defs: []
// [Asm] live_set: [a1, s11, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, s11, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v3, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v3, v11, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, v6, s11, v2]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v4, a1, v6, s11, a0, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v4, a2, a1, s11, a0, v2]
// [Asm] move_origin: [v6]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v4, v5, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v4, v5, v10, v2]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of mem2_2"];
// [Asm]   r0 [label="v2 ← s0", color=green];
// [Asm]   r20 [label="v10 ← a1", color=green];
// [Asm]   r3 [label="v3 ← a0", color=green];
// [Asm]   r9 [label="t0", color=blue];
// [Asm]   r6 [label="v4 ← s1", color=green];
// [Asm]   r13 [label="t4", color=blue];
// [Asm]   r4 [label="v6 ← a2", color=green];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t2", color=blue];
// [Asm]   r7 [label="a0", color=blue];
// [Asm]   r10 [label="t1", color=blue];
// [Asm]   r14 [label="a3", color=blue];
// [Asm]   r8 [label="a2", color=blue];
// [Asm]   r5 [label="v11 ← a1", color=green];
// [Asm]   r15 [label="a4", color=blue];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r16 [label="a5", color=blue];
// [Asm]   r18 [label="a7", color=blue];
// [Asm]   r19 [label="v5 ← a0", color=green];
// [Asm]   r17 [label="a6", color=blue];
// [Asm]   r12 [label="t3", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r0 -- r15;
// [Asm]   r0 -- r13;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r4;
// [Asm]   r6 -- r14;
// [Asm]   r3 -- r6;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r0 -- r14;
// [Asm]   r2 -- r10;
// [Asm]   r6 -- r16;
// [Asm]   r2 -- r16;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r12;
// [Asm]   r0 -- r16;
// [Asm]   r0 -- r19;
// [Asm]   r3 -- r5;
// [Asm]   r6 -- r20;
// [Asm]   r6 -- r8;
// [Asm]   r0 -- r6;
// [Asm]   r6 -- r13;
// [Asm]   r6 -- r19;
// [Asm]   r2 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r8;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r6 -- r17;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r17;
// [Asm]   r0 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r7 -- r8;
// [Asm]   r2 -- r19;
// [Asm]   r0 -- r7;
// [Asm]   r2 -- r3;
// [Asm]   r0 -- r20;
// [Asm]   r0 -- r18;
// [Asm]   r19 -- r20;
// [Asm]   comment = "0:v2-> 1:a1-> 2:s11-> 4:v6-> 6:v4-> 7:a0-> 8:a2-> 3:v3-> 5:v11-> 9:t0-> 10:t1-> 11:t2-> 12:t3-> 13:t4-> 14:a3-> 15:a4-> 16:a5-> 17:a6-> 18:a7-> 19:v5-> 20:v10"
// [Asm]   comment = "v2<-s0;v10<-a1;v3<-a0;v4<-s1;v6<-a2;v11<-a1;v5<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of mem2_2"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   mv v3, a1 ->   mv a0, a1
// [Asm] subst   lw v6, unmem_magic.1 ->   lw a2, unmem_magic.1
// [Asm] subst   slliw v11, v3, 2 ->   slliw a1, a0, 2
// [Asm] subst   sub v4, s11, v11 ->   sub s1, s11, a1
// [Asm] subst   andi s11, v4, -8 ->   andi s11, s1, -8
// [Asm] subst   mv a1, v3 ->   mv a1, a0
// [Asm] subst   mv a0, v4 ->   mv a0, s1
// [Asm] subst   call memseti32 ->   call memseti32
// [Asm] subst   addi v5, s11, -24 ->   addi a0, s11, -24
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a0, -8
// [Asm] subst   la v10, memed8_6 ->   la a1, memed8_6
// [Asm] subst   sd v10, 0(v5) ->   sd a1, 0(a0)
// [Asm] subst   sd v4, 8(v5) ->   sd s1, 8(a0)
// [Asm] subst   sd v2, 16(v5) ->   sd s0, 16(a0)
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v8, Insn(iref=%3) -> v7, FnParam(fref=f3, fpref=$f.1) -> v3, BlockParam(bref=b3, bpref=$b.0) -> v10, Insn(iref=%2) -> v6, Insn(iref=%1) -> v5, FnParam(fref=f3, fpref=$f.0) -> v2, Insn(iref=%5) -> v9, Self(fref=f3) -> v0, Insn(iref=%0) -> v4
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f3, fpref=$f.1), Int32(val=1)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v3, v18, v2]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v2]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [v3]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v10]
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v5, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v3, v5, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: s10 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v3, v5, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v5, v15, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v15, a0, v2]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v3, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v3, v6, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v6, v2]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v6, v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v2, v6, v7]
// [Asm] move_origin: [v2]
// [Asm] defined: s10 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v6, v12, v7]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v12, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v6, v12, a0]
// [Asm] move_origin: [v7]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v6, v8]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v8]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [v9]
// [Asm] defined: v10 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of mem_fib15_3"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="v6 ← s2", color=green];
// [Asm]   r23 [label="v8 ← a0", color=green];
// [Asm]   r3 [label="v3 ← s1", color=green];
// [Asm]   r9 [label="t0", color=blue];
// [Asm]   r6 [label="v5 ← a0", color=green];
// [Asm]   r13 [label="t4", color=blue];
// [Asm]   r4 [label="v18 ← a0", color=green];
// [Asm]   r1 [label="v2 ← s0", color=green];
// [Asm]   r11 [label="t2", color=blue];
// [Asm]   r7 [label="s10", color=blue];
// [Asm]   r10 [label="t1", color=blue];
// [Asm]   r22 [label="v12 ← a1", color=green];
// [Asm]   r14 [label="a2", color=blue];
// [Asm]   r8 [label="v15 ← a1", color=green];
// [Asm]   r5 [label="v10 ← a0", color=green];
// [Asm]   r24 [label="v9 ← a0", color=green];
// [Asm]   r15 [label="a3", color=blue];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="a4", color=blue];
// [Asm]   r18 [label="a6", color=blue];
// [Asm]   r19 [label="a7", color=blue];
// [Asm]   r21 [label="v7 ← a0", color=green];
// [Asm]   r17 [label="a5", color=blue];
// [Asm]   r12 [label="t3", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r0 -- r15;
// [Asm]   r3 -- r19;
// [Asm]   r0 -- r13;
// [Asm]   r14 -- r20;
// [Asm]   r16 -- r20;
// [Asm]   r1 -- r12;
// [Asm]   r7 -- r21;
// [Asm]   r3 -- r15;
// [Asm]   r11 -- r20;
// [Asm]   r1 -- r8;
// [Asm]   r3 -- r16;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r18;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r0 -- r14;
// [Asm]   r7 -- r20;
// [Asm]   r3 -- r9;
// [Asm]   r1 -- r15;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r0 -- r22;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r18;
// [Asm]   r0 -- r19;
// [Asm]   r0 -- r16;
// [Asm]   r13 -- r20;
// [Asm]   r6 -- r8;
// [Asm]   r3 -- r8;
// [Asm]   r20 -- r23;
// [Asm]   r1 -- r9;
// [Asm]   r12 -- r20;
// [Asm]   r20 -- r22;
// [Asm]   r10 -- r20;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r1 -- r21;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r8;
// [Asm]   r3 -- r13;
// [Asm]   r3 -- r20;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r14;
// [Asm]   r9 -- r20;
// [Asm]   r0 -- r10;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r0 -- r12;
// [Asm]   r18 -- r20;
// [Asm]   r0 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r21 -- r22;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r15 -- r20;
// [Asm]   r2 -- r3;
// [Asm]   r0 -- r20;
// [Asm]   r20 -- r21;
// [Asm]   r17 -- r20;
// [Asm]   r0 -- r18;
// [Asm]   r19 -- r20;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:a0-> 1:v2-> 2:a1-> 3:v3-> 20:v6-> 9:t0-> 10:t1-> 11:t2-> 12:t3-> 13:t4-> 14:a2-> 15:a3-> 16:a4-> 17:a5-> 18:a6-> 19:a7-> 8:v15-> 6:v5-> 7:s10-> 21:v7-> 22:v12-> 4:v18-> 23:v8-> 5:v10-> 24:v9"
// [Asm]   comment = "v6<-s2;v8<-a0;v3<-s1;v5<-a0;v18<-a0;v2<-s0;v12<-a1;v15<-a1;v10<-a0;v9<-a0;v7<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of mem_fib15_3"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v5, v3, -1 ->   addi a0, s1, -1
// [Asm] subst   mv s10, v2 ->   mv s10, s0
// [Asm] subst   ld v15, 0(v2) ->   ld a1, 0(s0)
// [Asm] subst   jalr v15 ->   jalr a1
// [Asm] subst   mv v6, a0 ->   mv s2, a0
// [Asm] subst   addi v7, v3, -2 ->   addi a0, s1, -2
// [Asm] subst   mv s10, v2 ->   mv s10, s0
// [Asm] subst   ld v12, 0(v2) ->   ld a1, 0(s0)
// [Asm] subst   jalr v12 ->   jalr a1
// [Asm] subst   add v9, v6, v8 ->   add a0, s2, a0
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   mv v3, a1 ->   mv s1, a1
// [Asm] subst   li v18, 1 ->   li a0, 1
// [Asm] subst   bge v18, v3, .mem_fib15_3_1 ->   bge a0, s1, .mem_fib15_3_1
// [Asm] subst   mv v10, v3 ->   mv a0, s1
// [Asm] subst   j .mem_fib15_3_3 ->   j .mem_fib15_3_3
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$unmem_magic.1_0"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   comment = "0:v2-> 1:a0"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$unmem_magic.1_0"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, -1919810 ->   li a0, -1919810
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] mem_fib15_3:
// [Asm] # block info: defs: [v3, v18, v2], uses: [a1, v18, a0, v3], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, a0], live_out: [v2, v3]
// [Asm] # block parameters: []
// [Asm] .mem_fib15_3_0:
// [Asm]   # save_ctx1  # live: [a1, a0]
// [Asm]   mv v2, a0  # live: [a1, v2]
// [Asm]   mv v3, a1  # live: [v3, v2]
// [Asm] # control
// [Asm]   li v18, 1  # live: [v3, v18, v2]
// [Asm]   bge v18, v3, .mem_fib15_3_1  # live: [v3, v2]
// [Asm] 
// [Asm] # block info: defs: [t1, v7, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, v6, ft7, ft4, v5, ft9, v10, a5, fa4, a0, ft2, a2, a3, s10, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v3, v5, a0, v7, v8, v6, v15, v12, v9, v2], upward_exposed: [v2, v3], params_defs: []
// [Asm] # live_in: [v3, v2], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .mem_fib15_3_2:
// [Asm]   addi v5, v3, -1  # live: [v3, v5, v2]
// [Asm]   mv s10, v2  # live: [v3, v5, v2]
// [Asm]   ld v15, 0(v2)  # live: [v3, v5, v15, v2]
// [Asm]   # save_ctx2  # live: [v3, v5, v15, v2]
// [Asm]   mv a0, v5  # live: [v3, v15, a0, v2]
// [Asm]   jalr v15  # live: [v3, a0, v2]
// [Asm]   mv v6, a0  # live: [v3, v6, v2]
// [Asm]   # restore_ctx2  # live: [v3, v6, v2]
// [Asm]   addi v7, v3, -2  # live: [v2, v6, v7]
// [Asm]   mv s10, v2  # live: [v2, v6, v7]
// [Asm]   ld v12, 0(v2)  # live: [v6, v12, v7]
// [Asm]   # save_ctx2  # live: [v6, v12, v7]
// [Asm]   mv a0, v7  # live: [v6, v12, a0]
// [Asm]   jalr v12  # live: [v6, a0]
// [Asm]   mv v8, a0  # live: [v6, v8]
// [Asm]   # restore_ctx2  # live: [v6, v8]
// [Asm]   add v9, v6, v8  # live: [v9]
// [Asm] # control
// [Asm]   mv v10, v9  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .mem_fib15_3_3:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [v3], upward_exposed: [v3], params_defs: []
// [Asm] # live_in: [v3], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .mem_fib15_3_1:
// [Asm] # control
// [Asm]   mv v10, v3  # live: [v10]
// [Asm]   j .mem_fib15_3_3  # live: [v10]
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_10:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_10_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main33_4  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] mem2_2:
// [Asm] # block info: defs: [v2, t1, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, v4, ft5, ft10, v6, ft7, v11, ft4, v5, ft9, v10, a5, fa4, a0, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, v11, v5, v10, a0, v4, a2, v6, a1, s11, v3], upward_exposed: [a1, s11, a0], params_defs: []
// [Asm] # live_in: [a1, s11, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .mem2_2_0:
// [Asm]   # save_ctx1  # live: [a1, s11, a0]
// [Asm]   mv v2, a0  # live: [a1, s11, v2]
// [Asm]   mv v3, a1  # live: [v3, s11, v2]
// [Asm]   lw v6, unmem_magic.1  # live: [v3, v6, s11, v2]
// [Asm]   slliw v11, v3, 2  # live: [v3, v11, v6, s11, v2]
// [Asm]   sub v4, s11, v11  # live: [v3, v4, v6, v2]
// [Asm]   andi s11, v4, -8  # live: [v3, v4, v6, s11, v2]
// [Asm]   mv a1, v3  # live: [v4, a1, v6, s11, v2]
// [Asm]   mv a0, v4  # live: [v4, a1, v6, s11, a0, v2]
// [Asm]   mv a2, v6  # live: [v4, a2, a1, s11, a0, v2]
// [Asm]   call memseti32  # live: [v4, s11, v2]
// [Asm]   addi v5, s11, -24  # live: [v4, v5, v2]
// [Asm]   andi s11, v5, -8  # live: [v4, v5, v2]
// [Asm]   la v10, memed8_6  # live: [v4, v5, v10, v2]
// [Asm]   sd v10, 0(v5)  # live: [v4, v5, v2]
// [Asm]   sd v4, 8(v5)  # live: [v5, v2]
// [Asm]   sd v2, 16(v5)  # live: [v5]
// [Asm] # control
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] memed8_6:
// [Asm] # block info: defs: [v2, v5, v21, v20, v0, v4, v6, v3], uses: [v2, v5, v21, a0, v20, v0, v6, s10, v3], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0], live_out: [v3, v0, v4, v2]
// [Asm] # block parameters: []
// [Asm] .memed8_6_0:
// [Asm]   # save_ctx1  # live: [a0, s10]
// [Asm]   mv v0, s10  # live: [v0, a0]
// [Asm]   mv v2, a0  # live: [v0, v2]
// [Asm]   ld v3, 8(v0)  # live: [v2, v0, v3]
// [Asm]   ld v4, 16(v0)  # live: [v2, v0, v4, v3]
// [Asm]   slliw v20, v2, 2  # live: [v2, v0, v4, v20, v3]
// [Asm]   add v21, v3, v20  # live: [v2, v0, v4, v21, v3]
// [Asm]   lw v5, 0(v21)  # live: [v2, v0, v4, v5, v3]
// [Asm]   lw v6, unmem_magic.1  # live: [v2, v0, v4, v5, v6, v3]
// [Asm] # control
// [Asm]   bne v5, v6, .memed8_6_2  # live: [v2, v0, v4, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v13, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, a3, s10, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v3, v14, a0, v13, v0, v4, a1, v12, v9, v2], upward_exposed: [v3, v0, v4, v2], params_defs: []
// [Asm] # live_in: [v2, v0, v4, v3], live_out: [v11]
// [Asm] # block parameters: []
// [Asm] .memed8_6_1:
// [Asm]   mv s10, v4  # live: [v2, v0, v4, v3]
// [Asm]   ld v14, 0(v4)  # live: [v2, v0, v14, v3]
// [Asm]   # save_ctx2  # live: [v2, v0, v14, v3]
// [Asm]   mv a0, v0  # live: [v2, v14, a0, v3]
// [Asm]   mv a1, v2  # live: [v2, a1, v14, a0, v3]
// [Asm]   jalr v14  # live: [v2, a0, v3]
// [Asm]   mv v9, a0  # live: [v2, v9, v3]
// [Asm]   # restore_ctx2  # live: [v2, v9, v3]
// [Asm]   slliw v12, v2, 2  # live: [v12, v9, v3]
// [Asm]   add v13, v3, v12  # live: [v9, v13]
// [Asm]   sw v9, 0(v13)  # live: [v9]
// [Asm] # control
// [Asm]   mv v11, v9  # live: [v11]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v11, a0], upward_exposed: [v11], params_defs: [v11]
// [Asm] # live_in: [v11], live_out: []
// [Asm] # block parameters: [v11]
// [Asm] .memed8_6_3:
// [Asm] # control
// [Asm]   mv a0, v11  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v11, v16, v17, v8], uses: [v3, v8, v16, v17, v2], upward_exposed: [v3, v2], params_defs: []
// [Asm] # live_in: [v2, v3], live_out: [v11]
// [Asm] # block parameters: []
// [Asm] .memed8_6_2:
// [Asm]   slliw v16, v2, 2  # live: [v16, v3]
// [Asm]   add v17, v3, v16  # live: [v17]
// [Asm]   lw v8, 0(v17)  # live: [v8]
// [Asm] # control
// [Asm]   mv v11, v8  # live: [v11]
// [Asm]   j .memed8_6_3  # live: [v11]
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0, sp, s0, ra, s11, t5], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$unmem_magic.1_0  # live: [s0, a0]
// [Asm]   la t5, unmem_magic.1  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$start_10  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$unmem_magic.1_0:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$unmem_magic.1_0_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, -1919810  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main33_4:
// [Asm] # block info: defs: [v2, t1, v13, v7, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, v4, ft5, v6, ft7, ft4, ft9, v10, a5, fa4, a0, ft2, a2, v17, a3, s10, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v3, v10, a0, v13, zero, v7, v4, v17, a1, v6, s11, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main33_4_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   # save_ctx2  # live: [s11, zero]
// [Asm]   call minimbt_read_int  # live: [s11, zero, a0]
// [Asm]   mv v3, a0  # live: [s11, zero, v3]
// [Asm]   # restore_ctx2  # live: [s11, zero, v3]
// [Asm]   addi v4, v3, 1  # live: [v4, s11, zero, v3]
// [Asm]   addi v2, s11, -8  # live: [v2, v4, zero, v3]
// [Asm]   andi s11, v2, -8  # live: [v2, v4, zero, v3]
// [Asm]   la v17, mem_fib15_3  # live: [v2, v4, v17, zero, v3]
// [Asm]   sd v17, 0(v2)  # live: [v2, v4, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, v4, zero, v3]
// [Asm]   mv a0, v2  # live: [v4, zero, a0, v3]
// [Asm]   mv a1, v4  # live: [a1, zero, a0, v3]
// [Asm]   call mem2_2  # live: [zero, a0, v3]
// [Asm]   mv v6, a0  # live: [v6, zero, v3]
// [Asm]   # restore_ctx2  # live: [v6, zero, v3]
// [Asm]   mv s10, v6  # live: [v6, zero, v3]
// [Asm]   ld v13, 0(v6)  # live: [zero, v13, v3]
// [Asm]   # save_ctx2  # live: [zero, v13, v3]
// [Asm]   mv a0, v3  # live: [zero, a0, v13]
// [Asm]   jalr v13  # live: [zero, a0]
// [Asm]   mv v7, a0  # live: [zero, v7]
// [Asm]   # restore_ctx2  # live: [zero, v7]
// [Asm]   # save_ctx2  # live: [zero, v7]
// [Asm]   mv a0, v7  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v8, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   li v10, 10  # live: [v10, zero]
// [Asm]   mv a0, v10  # live: [zero, a0]
// [Asm]   call minimbt_print_char  # live: [zero, a0]
// [Asm]   mv v9, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] unmem_magic.1:
// [Asm]   .zero 4
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: Let(("unmem_magic", Int), Neg(Int(1919810), kind=Some(Int)), LetRec({name: ("mem", Fun([Int], Int)), args: [("func", Fun([Fun([Int], Int), Int], Int)), ("max_n", Int)], body: Let(("cache", Var({val: Some(Array(Int))})), Array(Var("max_n"), Var("unmem_magic")), LetRec({name: ("memed", Int), args: [("n", Int)], body: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var({val: Some(Int)})), App(Var("func"), [Var("memed"), Var("n")]), Let(("_", Var({val: Some(Unit)})), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))}, Var("memed")))}, LetRec({name: ("mem_fib", Int), args: [("f", Fun([Int], Int)), ("n", Int)], body: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))]), Add, kind=Some(Int)))}, LetRec({name: ("fib", Int), args: [("n", Int)], body: Let(("f", Var({val: Some(Fun([Int], Int))})), App(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=Some(Int))]), App(Var("f"), [Var("n")]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))}, App(Var("main"), []))))))
// [Knf] build_knf: Neg(Int(1919810), kind=Some(Int))
// [Knf] build_knf: LetRec({name: ("mem", Fun([Int], Int)), args: [("func", Fun([Fun([Int], Int), Int], Int)), ("max_n", Int)], body: Let(("cache", Var({val: Some(Array(Int))})), Array(Var("max_n"), Var("unmem_magic")), LetRec({name: ("memed", Int), args: [("n", Int)], body: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var({val: Some(Int)})), App(Var("func"), [Var("memed"), Var("n")]), Let(("_", Var({val: Some(Unit)})), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))}, Var("memed")))}, LetRec({name: ("mem_fib", Int), args: [("f", Fun([Int], Int)), ("n", Int)], body: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))]), Add, kind=Some(Int)))}, LetRec({name: ("fib", Int), args: [("n", Int)], body: Let(("f", Var({val: Some(Fun([Int], Int))})), App(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=Some(Int))]), App(Var("f"), [Var("n")]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))}, App(Var("main"), [])))))
// [Knf] build_knf: Let(("cache", Var({val: Some(Array(Int))})), Array(Var("max_n"), Var("unmem_magic")), LetRec({name: ("memed", Int), args: [("n", Int)], body: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var({val: Some(Int)})), App(Var("func"), [Var("memed"), Var("n")]), Let(("_", Var({val: Some(Unit)})), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))}, Var("memed")))
// [Knf] build_knf: Array(Var("max_n"), Var("unmem_magic"))
// [Knf] build_knf: Var("max_n")
// [Knf] build_knf: Var("unmem_magic")
// [Knf] build_knf: LetRec({name: ("memed", Int), args: [("n", Int)], body: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var({val: Some(Int)})), App(Var("func"), [Var("memed"), Var("n")]), Let(("_", Var({val: Some(Unit)})), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))}, Var("memed"))
// [Knf] build_knf: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var({val: Some(Int)})), App(Var("func"), [Var("memed"), Var("n")]), Let(("_", Var({val: Some(Unit)})), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))
// [Knf] build_knf: Get(Var("cache"), Var("n"))
// [Knf] build_knf: Var("cache")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("unmem_magic")
// [Knf] build_knf: Let(("res", Var({val: Some(Int)})), App(Var("func"), [Var("memed"), Var("n")]), Let(("_", Var({val: Some(Unit)})), Put(Var("cache"), Var("n"), Var("res")), Var("res")))
// [Knf] build_knf: App(Var("func"), [Var("memed"), Var("n")])
// [Knf] build_knf: Var("func")
// [Knf] build_knf: Var("memed")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("cache"), Var("n"), Var("res")), Var("res"))
// [Knf] build_knf: Put(Var("cache"), Var("n"), Var("res"))
// [Knf] build_knf: Var("cache")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("res")
// [Knf] build_knf: Var("res")
// [Knf] build_knf: Get(Var("cache"), Var("n"))
// [Knf] build_knf: Var("cache")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("memed")
// [Knf] build_knf: LetRec({name: ("mem_fib", Int), args: [("f", Fun([Int], Int)), ("n", Int)], body: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))]), Add, kind=Some(Int)))}, LetRec({name: ("fib", Int), args: [("n", Int)], body: Let(("f", Var({val: Some(Fun([Int], Int))})), App(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=Some(Int))]), App(Var("f"), [Var("n")]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))}, App(Var("main"), []))))
// [Knf] build_knf: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))]), Add, kind=Some(Int)))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Prim(App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))]), Add, kind=Some(Int))
// [Knf] build_knf: App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Prim(Var("n"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Prim(Var("n"), Int(2), Sub, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: LetRec({name: ("fib", Int), args: [("n", Int)], body: Let(("f", Var({val: Some(Fun([Int], Int))})), App(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=Some(Int))]), App(Var("f"), [Var("n")]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))}, App(Var("main"), [])))
// [Knf] build_knf: Let(("f", Var({val: Some(Fun([Int], Int))})), App(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=Some(Int))]), App(Var("f"), [Var("n")]))
// [Knf] build_knf: App(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("mem")
// [Knf] build_knf: Var("mem_fib")
// [Knf] build_knf: Prim(Var("n"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("f"), [Var("n")])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("n", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))}, App(Var("main"), []))
// [Knf] build_knf: Let(("n", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))
// [Knf] build_knf: App(Var("read_int"), [])
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit))
// [Knf] build_knf: App(Var("print_int"), [App(Var("fib"), [Var("n")])])
// [Knf] build_knf: App(Var("fib"), [Var("n")])
// [Knf] build_knf: Var("fib")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)
// [Knf] build_knf: App(Var("print_char"), [Int(10)])
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memseti32
// [Main]   .type memseti32, @function
// [Main] memseti32:
// [Main]   blez a1, .memseti32_b1
// [Main]   slli a1, a1, 2
// [Main]   add a1, a1, a0
// [Main] .memseti32_b0:
// [Main]   sw a2, 0(a0)
// [Main]   addi a0, a0, 4
// [Main]   bne a0, a1, .memseti32_b0
// [Main] .memseti32_b1:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl mem_fib15_3
// [Main]   .type mem_fib15_3, @function
// [Main] # leaf false
// [Main] mem_fib15_3:
// [Main] .mem_fib15_3_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   li a0, 1
// [Main]   bge a0, s1, .mem_fib15_3_1
// [Main] 
// [Main] .mem_fib15_3_2:
// [Main]   addi a0, s1, -1
// [Main]   mv s10, s0
// [Main]   ld a1, 0(s0)
// [Main]   jalr a1
// [Main]   mv s2, a0
// [Main]   addi a0, s1, -2
// [Main]   mv s10, s0
// [Main]   ld a1, 0(s0)
// [Main]   jalr a1
// [Main]   add a0, s2, a0
// [Main] 
// [Main] .mem_fib15_3_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .mem_fib15_3_1:
// [Main]   mv a0, s1
// [Main]   j .mem_fib15_3_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_10
// [Main]   .type T$start_10, @function
// [Main] # leaf false
// [Main] T$start_10:
// [Main] .T$start_10_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main33_4
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl mem2_2
// [Main]   .type mem2_2, @function
// [Main] # leaf false
// [Main] mem2_2:
// [Main] .mem2_2_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   mv s0, a0
// [Main]   mv a0, a1
// [Main]   lw a2, unmem_magic.1
// [Main]   slliw a1, a0, 2
// [Main]   sub s1, s11, a1
// [Main]   andi s11, s1, -8
// [Main]   mv a1, a0
// [Main]   mv a0, s1
// [Main]   call memseti32
// [Main]   addi a0, s11, -24
// [Main]   andi s11, a0, -8
// [Main]   la a1, memed8_6
// [Main]   sd a1, 0(a0)
// [Main]   sd s1, 8(a0)
// [Main]   sd s0, 16(a0)
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memed8_6
// [Main]   .type memed8_6, @function
// [Main] # leaf false
// [Main] memed8_6:
// [Main] .memed8_6_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   mv a1, s10
// [Main]   mv s0, a0
// [Main]   ld s1, 8(a1)
// [Main]   ld a0, 16(a1)
// [Main]   slliw a2, s0, 2
// [Main]   add a2, s1, a2
// [Main]   lw a2, 0(a2)
// [Main]   lw a3, unmem_magic.1
// [Main]   bne a2, a3, .memed8_6_2
// [Main] 
// [Main] .memed8_6_1:
// [Main]   mv s10, a0
// [Main]   ld a2, 0(a0)
// [Main]   mv a0, a1
// [Main]   mv a1, s0
// [Main]   jalr a2
// [Main]   slliw a1, s0, 2
// [Main]   add a1, s1, a1
// [Main]   sw a0, 0(a1)
// [Main] 
// [Main] .memed8_6_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .memed8_6_2:
// [Main]   slliw a0, s0, 2
// [Main]   add a0, s1, a0
// [Main]   lw a0, 0(a0)
// [Main]   j .memed8_6_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$unmem_magic.1_0
// [Main]   la t5, unmem_magic.1
// [Main]   sw a0, 0(t5)
// [Main]   call T$start_10
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$unmem_magic.1_0
// [Main]   .type T$unmem_magic.1_0, @function
// [Main] # leaf true
// [Main] T$unmem_magic.1_0:
// [Main] .T$unmem_magic.1_0_0:
// [Main]   li a0, -1919810
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main33_4
// [Main]   .type main33_4, @function
// [Main] # leaf false
// [Main] main33_4:
// [Main] .main33_4_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   call minimbt_read_int
// [Main]   mv s0, a0
// [Main]   addi a1, s0, 1
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   la a2, mem_fib15_3
// [Main]   sd a2, 0(a0)
// [Main]   call mem2_2
// [Main]   mv s10, a0
// [Main]   ld a1, 0(a0)
// [Main]   mv a0, s0
// [Main]   jalr a1
// [Main]   call minimbt_print_int
// [Main]   li a0, 10
// [Main]   call minimbt_print_char
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl unmem_magic.1
// [Main]   .type unmem_magic.1, @object
// [Main] unmem_magic.1:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function memed8_6
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Apply(ty=Int32, f=FreeVar(fvref=^2), args=[Self(fref=f6), FnParam(fref=f6, fpref=$f.0)])
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^1), offset=FnParam(fref=f6, fpref=$f.0), width=@32), val=Insn(iref=%3))
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^1), offset=FnParam(fref=f6, fpref=$f.0), width=@32))
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FreeVar(fvref=^1), offset=FnParam(fref=f6, fpref=$f.0), width=@32))
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::0)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function memed8_6 to wasm
// [Wasm] Lowering function main33_4
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_int", args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[ClosureFn(params=[Int32], ty=Int32), Int32], ty=Int32), mref=m0, fills=[Field(index=0, val=Fn(fref=f3))])
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Lowering insn Call(ty=ClosureFn(params=[Int32], ty=Int32), f=f2, args=[Mem(fref=f4, mref=m0), Insn(iref=%1)])
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Apply(ty=Int32, f=Insn(iref=%3), args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Int32(val=10)])
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function main33_4 to wasm
// [Wasm] Lowering function T$start_10
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start_10 to wasm
// [Wasm] Lowering function mem2_2
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::0)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Insn(iref=%0))])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Int32), mref=m1, fills=[Field(index=0, val=Fn(fref=f6)), Field(index=1, val=Mem(fref=f2, mref=m0)), Field(index=2, val=FnParam(fref=f2, fpref=$f.0))])
// [Wasm] Get Local name Mem(fref=f2, mref=m1) -> $f2.m1
// [Wasm] Get Local name Mem(fref=f2, mref=m1) -> $f2.m1
// [Wasm] Get Local name Mem(fref=f2, mref=m1) -> $f2.m1
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Mem(fref=f2, mref=m1) -> $f2.m1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Lowering control Return(args=[Mem(fref=f2, mref=m1)])
// [Wasm] Get Local name Mem(fref=f2, mref=m1) -> $f2.m1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Local Mem(fref=f2, mref=m1) -> $f2.m1
// [Wasm] Local Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function mem2_2 to wasm
// [Wasm] Lowering function mem_fib15_3
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Jump(target=b3, args=[FnParam(fref=f3, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f3, fpref=$f.1), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Apply(ty=Int32, f=FnParam(fref=f3, fpref=$f.0), args=[Insn(iref=%1)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f3, fpref=$f.1), Int32(val=2)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Apply(ty=Int32, f=FnParam(fref=f3, fpref=$f.0), args=[Insn(iref=%3)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%2), Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FnParam(fref=f3, fpref=$f.1), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function mem_fib15_3 to wasm
// [Wasm] Lowering function T$unmem_magic.1_0
// [Wasm] Lowering control Return(args=[Int32(val=-1919810)])
// [Wasm] Lowered function T$unmem_magic.1_0 to wasm
// [KnfOpt] freq: {mem2: Once, memed8: AsClosure, mem_fib15: AsClosure, fib27: Once, main33: Once}
// [KnfOpt] Knf inline Some(mem2)
// [KnfOpt] Knf inline Some(fib27)
// [KnfOpt] Numbers of let rec: 4 7 3
// [KnfOpt] Give up lambda lifting because of too many let rec produced
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f6: MaybeInClosure, f4: Once, f10: Once, f2: Once, f3: MaybeInClosure, f0: Once})
