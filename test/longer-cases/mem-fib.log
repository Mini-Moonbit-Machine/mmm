// [Main] function thunk_main(k) {
// [Main]   const unmem_magic_1 = -1919810;
// [Main]   function mem_2(func_4, max_n_6, k) {
// [Main]     const cache_7 = minimbt_create_array($force(max_n_6), $force(unmem_magic_1));
// [Main]     function memed_8(n_10, k) {
// [Main]       const _11 = cache_7[n_10];
// [Main]       if (_11 === unmem_magic_1) {
// [Main]         return $thunk(() => func_4(memed_8, n_10, function (res_12) {
// [Main]           const _14 = cache_7[n_10] = res_12;
// [Main]           return $thunk(() => k(res_12))
// [Main]         }
// [Main]         ))
// [Main]       } else {
// [Main]         return k(cache_7[n_10])
// [Main]       }
// [Main]     }
// [Main]     return k(memed_8)
// [Main]   }
// [Main]   function mem_fib_15(f_17, n_19, k) {
// [Main]     const _20 = 1;
// [Main]     if (n_19 <= _20) {
// [Main]       return k(n_19)
// [Main]     } else {
// [Main]       const _21 = 1;
// [Main]       const _22 = n_19 - _21;
// [Main]       return $thunk(() => f_17(_22, function (_23) {
// [Main]         const _24 = 2;
// [Main]         const _25 = n_19 - _24;
// [Main]         return $thunk(() => f_17(_25, function (_26) {
// [Main]           return $thunk(() => $thunk(() => k(_23 + _26)))
// [Main]         }
// [Main]         ))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]   }
// [Main]   function fib_27(n_29, k) {
// [Main]     const _30 = 1;
// [Main]     const _31 = n_29 + _30;
// [Main]     return $thunk(() => mem_2(mem_fib_15, _31, function (f_32) {
// [Main]       return $thunk(() => f_32(n_29, k))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   function main_33(k) {
// [Main]     const n_34 = minimbt_read_int();
// [Main]     return $thunk(() => fib_27(n_34, function (_35) {
// [Main]       const _37 = minimbt_print_int($force(_35));
// [Main]       const _38 = 10;
// [Main]       const _40 = minimbt_print_char($force(_38));
// [Main]       return $thunk(() => k(null))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main_33(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: Let(("unmem_magic", Int), Neg(Int(1919810), kind=None), LetRec({tyvars: [], name: ("mem", Fun([Int], Int)), args: [("func", Fun([Fun([Int], Int), Int], Int)), ("max_n", Int)], body: Let(("cache", Var({val: None})), Array(Var("max_n"), Var("unmem_magic")), LetRec({tyvars: [], name: ("memed", Int), args: [("n", Int)], body: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var({val: None})), App(Var("func"), [Var("memed"), Var("n")]), Let(("_", Var({val: None})), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))}, Var("memed")))}, LetRec({tyvars: [], name: ("mem_fib", Int), args: [("f", Fun([Int], Int)), ("n", Int)], body: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=None)]), App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=None)]), Add, kind=None))}, LetRec({tyvars: [], name: ("fib", Int), args: [("n", Int)], body: Let(("f", Var({val: None})), App(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=None)]), App(Var("f"), [Var("n")]))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("n", Var({val: None})), App(Var("read_int"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: None})), App(Var("print_char"), [Int(10)]), Unit)))}, Unit))))) against Unit
// [Typer] check: Neg(Int(1919810), kind=None) against Int
// [Typer] check: Int(1919810) against Int
// [Typer] check: LetRec({tyvars: [], name: ("mem", Fun([Int], Int)), args: [("func", Fun([Fun([Int], Int), Int], Int)), ("max_n", Int)], body: Let(("cache", Var({val: None})), Array(Var("max_n"), Var("unmem_magic")), LetRec({tyvars: [], name: ("memed", Int), args: [("n", Int)], body: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var({val: None})), App(Var("func"), [Var("memed"), Var("n")]), Let(("_", Var({val: None})), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))}, Var("memed")))}, LetRec({tyvars: [], name: ("mem_fib", Int), args: [("f", Fun([Int], Int)), ("n", Int)], body: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=None)]), App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=None)]), Add, kind=None))}, LetRec({tyvars: [], name: ("fib", Int), args: [("n", Int)], body: Let(("f", Var({val: None})), App(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=None)]), App(Var("f"), [Var("n")]))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("n", Var({val: None})), App(Var("read_int"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: None})), App(Var("print_char"), [Int(10)]), Unit)))}, Unit)))) against Unit
// [Typer] typevars: []
// [Typer] check: Let(("cache", Var({val: None})), Array(Var("max_n"), Var("unmem_magic")), LetRec({tyvars: [], name: ("memed", Int), args: [("n", Int)], body: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var({val: None})), App(Var("func"), [Var("memed"), Var("n")]), Let(("_", Var({val: None})), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))}, Var("memed"))) against Fun([Int], Int)
// [Typer] infer: Array(Var("max_n"), Var("unmem_magic"))
// [Typer] infer: Var("unmem_magic")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] check: Var("max_n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Array(Int)
// [Typer] union: Var({val: None}) and Array(Int)
// [Typer] check: LetRec({tyvars: [], name: ("memed", Int), args: [("n", Int)], body: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var({val: None})), App(Var("func"), [Var("memed"), Var("n")]), Let(("_", Var({val: None})), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n")))}, Var("memed")) against Fun([Int], Int)
// [Typer] typevars: []
// [Typer] check: If(Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")), Let(("res", Var({val: None})), App(Var("func"), [Var("memed"), Var("n")]), Let(("_", Var({val: None})), Put(Var("cache"), Var("n"), Var("res")), Var("res"))), Get(Var("cache"), Var("n"))) against Int
// [Typer] check: Eq(Get(Var("cache"), Var("n")), Var("unmem_magic")) against Bool
// [Typer] infer: Get(Var("cache"), Var("n"))
// [Typer] infer: Var("cache")
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Int))})))
// [Typer] inst result: Array(Int)
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("unmem_magic")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Let(("res", Var({val: None})), App(Var("func"), [Var("memed"), Var("n")]), Let(("_", Var({val: None})), Put(Var("cache"), Var("n"), Var("res")), Var("res"))) against Int
// [Typer] infer: App(Var("func"), [Var("memed"), Var("n")])
// [Typer] infer: Var("func")
// [Typer] inst: TypeScheme(([], Fun([Fun([Int], Int), Int], Int)))
// [Typer] inst result: Fun([Fun([Int], Int), Int], Int)
// [Typer] check: Var("memed") against Fun([Int], Int)
// [Typer] inst: TypeScheme(([], Fun([Int], Int)))
// [Typer] inst result: Fun([Int], Int)
// [Typer] unify: Fun([Int], Int) and Fun([Int], Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("_", Var({val: None})), Put(Var("cache"), Var("n"), Var("res")), Var("res")) against Int
// [Typer] infer: Put(Var("cache"), Var("n"), Var("res"))
// [Typer] infer: Var("res")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] check: Var("cache") against Array(Int)
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Int))})))
// [Typer] inst result: Array(Int)
// [Typer] unify: Array(Int) and Array(Int)
// [Typer] unify: Int and Int
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] check: Var("res") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Get(Var("cache"), Var("n")) against Int
// [Typer] check: Var("cache") against Array(Int)
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Int))})))
// [Typer] inst result: Array(Int)
// [Typer] unify: Array(Int) and Array(Int)
// [Typer] unify: Int and Int
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("memed") against Fun([Int], Int)
// [Typer] inst: TypeScheme(([], Fun([Int], Int)))
// [Typer] inst result: Fun([Int], Int)
// [Typer] unify: Fun([Int], Int) and Fun([Int], Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("mem_fib", Int), args: [("f", Fun([Int], Int)), ("n", Int)], body: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=None)]), App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=None)]), Add, kind=None))}, LetRec({tyvars: [], name: ("fib", Int), args: [("n", Int)], body: Let(("f", Var({val: None})), App(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=None)]), App(Var("f"), [Var("n")]))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("n", Var({val: None})), App(Var("read_int"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: None})), App(Var("print_char"), [Int(10)]), Unit)))}, Unit))) against Unit
// [Typer] typevars: []
// [Typer] check: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=None)]), App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=None)]), Add, kind=None)) against Int
// [Typer] check: LE(Var("n"), Int(1)) against Bool
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Prim(App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=None)]), App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=None)]), Add, kind=None) against Int
// [Typer] check: App(Var("f"), [Prim(Var("n"), Int(1), Sub, kind=None)]) against Int
// [Typer] infer: Prim(Var("n"), Int(1), Sub, kind=None)
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("f") against Fun([Int], Int)
// [Typer] inst: TypeScheme(([], Fun([Int], Int)))
// [Typer] inst result: Fun([Int], Int)
// [Typer] unify: Fun([Int], Int) and Fun([Int], Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("f"), [Prim(Var("n"), Int(2), Sub, kind=None)]) against Int
// [Typer] infer: Prim(Var("n"), Int(2), Sub, kind=None)
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(2)
// [Typer] unify: Int and Int
// [Typer] check: Var("f") against Fun([Int], Int)
// [Typer] inst: TypeScheme(([], Fun([Int], Int)))
// [Typer] inst result: Fun([Int], Int)
// [Typer] unify: Fun([Int], Int) and Fun([Int], Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("fib", Int), args: [("n", Int)], body: Let(("f", Var({val: None})), App(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=None)]), App(Var("f"), [Var("n")]))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("n", Var({val: None})), App(Var("read_int"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: None})), App(Var("print_char"), [Int(10)]), Unit)))}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: Let(("f", Var({val: None})), App(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=None)]), App(Var("f"), [Var("n")])) against Int
// [Typer] infer: App(Var("mem"), [Var("mem_fib"), Prim(Var("n"), Int(1), Add, kind=None)])
// [Typer] infer: Var("mem")
// [Typer] inst: TypeScheme(([], Fun([Fun([Fun([Int], Int), Int], Int), Int], Fun([Int], Int))))
// [Typer] inst result: Fun([Fun([Fun([Int], Int), Int], Int), Int], Fun([Int], Int))
// [Typer] check: Var("mem_fib") against Fun([Fun([Int], Int), Int], Int)
// [Typer] inst: TypeScheme(([], Fun([Fun([Int], Int), Int], Int)))
// [Typer] inst result: Fun([Fun([Int], Int), Int], Int)
// [Typer] unify: Fun([Fun([Int], Int), Int], Int) and Fun([Fun([Int], Int), Int], Int)
// [Typer] unify: Fun([Int], Int) and Fun([Int], Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: Prim(Var("n"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var({val: None}) and Fun([Int], Int)
// [Typer] union: Var({val: None}) and Fun([Int], Int)
// [Typer] check: App(Var("f"), [Var("n")]) against Int
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] check: Var("f") against Fun([Int], Int)
// [Typer] inst: TypeScheme(([], Var({val: Some(Fun([Int], Int))})))
// [Typer] inst result: Fun([Int], Int)
// [Typer] unify: Fun([Int], Int) and Fun([Int], Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("n", Var({val: None})), App(Var("read_int"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: None})), App(Var("print_char"), [Int(10)]), Unit)))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("n", Var({val: None})), App(Var("read_int"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: None})), App(Var("print_char"), [Int(10)]), Unit)))
// [Typer] infer: App(Var("read_int"), [])
// [Typer] infer: Var("read_int")
// [Typer] inst: TypeScheme(([], Fun([], Int)))
// [Typer] inst result: Fun([], Int)
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] infer: Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("fib"), [Var("n")])]), Let(("_", Var({val: None})), App(Var("print_char"), [Int(10)]), Unit))
// [Typer] infer: App(Var("print_int"), [App(Var("fib"), [Var("n")])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: App(Var("fib"), [Var("n")]) against Int
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] check: Var("fib") against Fun([Int], Int)
// [Typer] inst: TypeScheme(([], Fun([Int], Int)))
// [Typer] inst result: Fun([Int], Int)
// [Typer] unify: Fun([Int], Int) and Fun([Int], Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), App(Var("print_char"), [Int(10)]), Unit)
// [Typer] infer: App(Var("print_char"), [Int(10)])
// [Typer] infer: Var("print_char")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: Int(10) against Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Unit
// [Typer] unify: Unit and Var({val: None})
// [Typer] union: Unit and Var({val: None})
// [Typer] check: Unit against Unit
// [Parser] flags: []
