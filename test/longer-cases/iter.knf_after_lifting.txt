let rec do.125: Bool = (yield.80: Var({val: Some(Fun([Int], Bool))}), _44: Int, arr.28: Array(Int)) {
  let _92: Int = Int(0)
  let join next.100: Bool = (i.101: Var({val: Some(Int)})) {
    let _102: Int = Int(1)
    let _103: Int = Sub(_44, _102)
    if (i.101 <= _103) then {
      let _104: Int = Get arr.28[i.101]
      let _105: Bool = Apply(yield.80, [_104, ])
      let _106: Bool = Bool(true)
      if (_105 == _106) then {
        let _107: Int = Int(1)
        let _108: Int = Add(i.101, _107)
        Jump(next.100, [_108, ])
      } else {
        Bool(false)
      }
    } else {
      Bool(false)
    }
  }
  Jump(next.100, [_92, ])
}
let rec yield.126: Bool = (x.94: Var({val: Some(Int)})) {
  let _95: Unit = ExtApply(minimbt_print_int, [x.94, ])
  Bool(true)
}
let rec main.124: Var({val: Some(Unit)}) = () {
  let _26: Int = Int(5)
  let _27: Int = Int(1)
  let arr.28: Array(Int) = ExtApply(minimbt_create_array, [_26, _27, ])
  let _29: Int = Int(0)
  let _30: Int = Int(1)
  let _31: Unit = Put arr.28[_29] = _30
  let _32: Int = Int(1)
  let _33: Int = Int(2)
  let _34: Unit = Put arr.28[_32] = _33
  let _35: Int = Int(2)
  let _36: Int = Int(3)
  let _37: Unit = Put arr.28[_35] = _36
  let _38: Int = Int(3)
  let _39: Int = Int(4)
  let _40: Unit = Put arr.28[_38] = _39
  let _41: Int = Int(4)
  let _42: Int = Int(5)
  let _43: Unit = Put arr.28[_41] = _42
  let _44: Int = Int(5)
  let join do.121: Var({val: Some(Unit)}) = () {
    let rec yield.127: Bool = (x.94: Var({val: Some(Int)})) {
      Apply(yield.126, [x.94, ])
    }
    let _122: Bool = Apply(do.125, [yield.127, _44, arr.28, ])
    let _123: Bool = Bool(true)
    if (_122 == _123) then {
      Jump(do.121, [])
    } else {
      Unit
    }
  }
  Jump(do.121, [])
}
Apply(main.124, [])