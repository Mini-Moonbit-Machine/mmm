let rec next9.82: Bool = (i10.65: Var({val: Some(Int)}), _57: Int, arr.36: Array(Int), yield7.63: Var({val: Some(Fun([Int], Bool))})) {
  let _66: Int = Int(1)
  let _67: Int = Sub(_57, _66)
  if (i10.65 <= _67) then {
    let _68: Int = Get arr.36[i10.65]
    let _69: Bool = Apply(yield7.63, [_68, ])
    let _70: Bool = Bool(true)
    if (_69 == _70) then {
      let _71: Int = Int(1)
      let _72: Int = Add(i10.65, _71)
      Apply(next9.82, [_72, _57, arr.36, yield7.63, ])
    } else {
      Bool(false)
    }
  } else {
    Bool(false)
  }
}
let rec do6.81: Bool = (yield7.63: Var({val: Some(Fun([Int], Bool))}), _57: Int, arr.36: Array(Int)) {
  let _73: Int = Int(0)
  Apply(next9.82, [_73, _57, arr.36, yield7.63, ])
}
let rec print59.83: Unit = (x60.61: Var({val: Some(Int)})) {
  ExtApply(minimbt_print_int, [x60.61, ])
}
let rec yield25.84: Bool = (x26.75: Var({val: Some(Int)})) {
  let _76: Unit = Apply(print59.83, [x26.75, ])
  Bool(true)
}
let rec do30.85: Var({val: Some(Unit)}) = (_57: Int, arr.36: Array(Int)) {
  let rec yield25.86: Bool = (x26.75: Var({val: Some(Int)})) {
    Apply(yield25.84, [x26.75, ])
  }
  let _78: Bool = Apply(do6.81, [yield25.86, _57, arr.36, ])
  let _79: Bool = Bool(true)
  if (_78 == _79) then {
    Apply(do30.85, [_57, arr.36, ])
  } else {
    Unit
  }
}
let rec main33.80: Var({val: Some(Unit)}) = () {
  let _34: Int = Int(5)
  let _35: Int = Int(1)
  let arr.36: Array(Int) = ExtApply(minimbt_create_array, [_34, _35, ])
  let _37: Int = Int(0)
  let _38: Int = Int(1)
  let _40: Unit = Put arr.36[_37] = _38
  let _41: Int = Int(1)
  let _42: Int = Int(2)
  let _44: Unit = Put arr.36[_41] = _42
  let _45: Int = Int(2)
  let _46: Int = Int(3)
  let _48: Unit = Put arr.36[_45] = _46
  let _49: Int = Int(3)
  let _50: Int = Int(4)
  let _52: Unit = Put arr.36[_49] = _50
  let _53: Int = Int(4)
  let _54: Int = Int(5)
  let _56: Unit = Put arr.36[_53] = _54
  let _57: Int = Int(5)
  Apply(do30.85, [_57, arr.36, ])
}
Apply(main33.80, [])
