// [Main] function thunk_main(k) {
// [Main]   function iter_1(arr_3, len_5, k) {
// [Main]     function do_6(yield_8, k) {
// [Main]       function next_9(i_11, k) {
// [Main]         const _12 = 1;
// [Main]         const _13 = len_5 - _12;
// [Main]         if (i_11 <= _13) {
// [Main]           const _14 = arr_3[i_11];
// [Main]           return $thunk(() => yield_8(_14, function (_15) {
// [Main]             const _18 = true;
// [Main]             if (_15 === _18) {
// [Main]               const _16 = 1;
// [Main]               const _17 = i_11 + _16;
// [Main]               return $thunk(() => next_9(_17, function (x) {
// [Main]                 return $thunk(() => k(x))
// [Main]               }
// [Main]               ))
// [Main]             } else {
// [Main]               return $thunk(() => k(false))
// [Main]             }
// [Main]           }
// [Main]           ))
// [Main]         } else {
// [Main]           return $thunk(() => k(false))
// [Main]         }
// [Main]       }
// [Main]       const _19 = 0;
// [Main]       return $thunk(() => next_9(_19, function (x) {
// [Main]         return $thunk(() => k(x))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]     return $thunk(() => k(do_6))
// [Main]   }
// [Main]   function each_20(iter_22, f_24, k) {
// [Main]     function yield_25(x_27, k) {
// [Main]       return $thunk(() => f_24(x_27, function (_29) {
// [Main]         return $thunk(() => k(true))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]     function do_30(k) {
// [Main]       return $thunk(() => iter_22(yield_25, function (_31) {
// [Main]         const _32 = true;
// [Main]         if (_31 === _32) {
// [Main]           return $thunk(() => do_30(function (x) {
// [Main]             return $thunk(() => k(x))
// [Main]           }
// [Main]           ))
// [Main]         } else {
// [Main]           return $thunk(() => k(null))
// [Main]         }
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]     return $thunk(() => do_30(function (x) {
// [Main]       return $thunk(() => k(x))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   function main_33(k) {
// [Main]     const _34 = 5;
// [Main]     const _35 = 1;
// [Main]     return $thunk(() => $external(minimbt_create_array, function (arr_36) {
// [Main]       const _37 = 0;
// [Main]       const _38 = 1;
// [Main]       const _40 = arr_36[_37] = _38;
// [Main]       const _41 = 1;
// [Main]       const _42 = 2;
// [Main]       const _44 = arr_36[_41] = _42;
// [Main]       const _45 = 2;
// [Main]       const _46 = 3;
// [Main]       const _48 = arr_36[_45] = _46;
// [Main]       const _49 = 3;
// [Main]       const _50 = 4;
// [Main]       const _52 = arr_36[_49] = _50;
// [Main]       const _53 = 4;
// [Main]       const _54 = 5;
// [Main]       const _56 = arr_36[_53] = _54;
// [Main]       const _57 = 5;
// [Main]       return $thunk(() => iter_1(arr_36, _57, function (int_arr_iter_58) {
// [Main]         function print_i_59(x_61, k) {
// [Main]           return $thunk(() => $external(minimbt_print_int, function (x) {
// [Main]             return $thunk(() => k(x))
// [Main]           }
// [Main]           , x_61))
// [Main]         }
// [Main]         return $thunk(() => each_20(int_arr_iter_58, print_i_59, function (_63) {
// [Main]           const _64 = 6;
// [Main]           const _65 = 0;
// [Main]           return $thunk(() => $external(minimbt_create_float_array, function (arr_66) {
// [Main]             const _67 = 0;
// [Main]             const _68 = 1;
// [Main]             const _70 = arr_66[_67] = _68;
// [Main]             const _71 = 1;
// [Main]             const _72 = 2;
// [Main]             const _74 = arr_66[_71] = _72;
// [Main]             const _75 = 2;
// [Main]             const _76 = 3;
// [Main]             const _78 = arr_66[_75] = _76;
// [Main]             const _79 = 3;
// [Main]             const _80 = 4;
// [Main]             const _82 = arr_66[_79] = _80;
// [Main]             const _83 = 4;
// [Main]             const _84 = 5;
// [Main]             const _86 = arr_66[_83] = _84;
// [Main]             const _87 = 5;
// [Main]             const _88 = 6;
// [Main]             const _90 = arr_66[_87] = _88;
// [Main]             const _91 = 6;
// [Main]             return $thunk(() => iter_1(arr_66, _91, function (double_arr_iter_92) {
// [Main]               function print_d_93(x_95, k) {
// [Main]                 return $thunk(() => $external(minimbt_int_of_float, function (_96) {
// [Main]                   return $thunk(() => $external(minimbt_print_int, function (x) {
// [Main]                     return $thunk(() => k(x))
// [Main]                   }
// [Main]                   , _96))
// [Main]                 }
// [Main]                 , x_95))
// [Main]               }
// [Main]               return $thunk(() => each_20(double_arr_iter_92, print_d_93, function (x) {
// [Main]                 return $thunk(() => k(x))
// [Main]               }
// [Main]               ))
// [Main]             }
// [Main]             ))
// [Main]           }
// [Main]           , _64, _65))
// [Main]         }
// [Main]         ))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]     , _34, _35))
// [Main]   }
// [Main]   return $thunk(() => main_33(function (x) {
// [Main]     return $thunk(() => k(x))
// [Main]   }
// [Main]   ))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $external(f, k, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $thunk(() => k(x));
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] resolve: LetRec({tyvars: [("T", None)], name: ("iter", ((T) -> Bool) -> Bool), args: [("arr", Array[T]), ("len", Int)], body: LetRec({tyvars: [], name: ("do", Var(None)), args: [("yield", Var(None))], body: LetRec({tyvars: [], name: ("next", Var(None)), args: [("i", Var(None))], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=None)), If(App(Var("yield"), targs=None, [Get(Var("arr"), Var("i"))]), App(Var("next"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Bool(false)), Bool(false))}, App(Var("next"), targs=None, [Int(0)]))}, Var("do"))}, LetRec({tyvars: [("T", None)], name: ("each", Unit), args: [("iter", ((T) -> Bool) -> Bool), ("f", (T) -> Unit)], body: LetRec({tyvars: [], name: ("yield", Var(None)), args: [("x", Var(None))], body: Let(("_", Var(None)), App(Var("f"), targs=None, [Var("x")]), Bool(true))}, LetRec({tyvars: [], name: ("do", Var(None)), args: [], body: If(App(Var("iter"), targs=None, [Var("yield")]), App(Var("do"), targs=None, []), Unit)}, App(Var("do"), targs=None, [])))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("arr", Var(None)), Array(Int(5), Int(1)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Int(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Int(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Int(5)), Let(("int_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print_i", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, Let(("_", Var(None)), App(Var("each"), targs=None, [Var("int_arr_iter"), Var("print_i")]), Let(("arr", Var(None)), Array(Int(6), Double(0)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Double(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Double(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Double(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Double(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Double(5)), Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")])))))))))))))))))))}, Unit)))
// [Typer] resolve: LetRec({tyvars: [], name: ("do", Var(None)), args: [("yield", Var(None))], body: LetRec({tyvars: [], name: ("next", Var(None)), args: [("i", Var(None))], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=None)), If(App(Var("yield"), targs=None, [Get(Var("arr"), Var("i"))]), App(Var("next"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Bool(false)), Bool(false))}, App(Var("next"), targs=None, [Int(0)]))}, Var("do"))
// [Typer] resolve: LetRec({tyvars: [], name: ("next", Var(None)), args: [("i", Var(None))], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=None)), If(App(Var("yield"), targs=None, [Get(Var("arr"), Var("i"))]), App(Var("next"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Bool(false)), Bool(false))}, App(Var("next"), targs=None, [Int(0)]))
// [Typer] resolve: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=None)), If(App(Var("yield"), targs=None, [Get(Var("arr"), Var("i"))]), App(Var("next"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Bool(false)), Bool(false))
// [Typer] resolve: LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=None))
// [Typer] resolve: Var("i")
// [Typer] resolve: Prim(Var("len"), Int(1), Sub, kind=None)
// [Typer] resolve: Var("len")
// [Typer] resolve: Int(1)
// [Typer] resolve: If(App(Var("yield"), targs=None, [Get(Var("arr"), Var("i"))]), App(Var("next"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Bool(false))
// [Typer] resolve: App(Var("yield"), targs=None, [Get(Var("arr"), Var("i"))])
// [Typer] resolve: Get(Var("arr"), Var("i"))
// [Typer] resolve: Var("arr")
// [Typer] resolve: Var("i")
// [Typer] resolve: Var("yield")
// [Typer] resolve: App(Var("next"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])
// [Typer] resolve: Prim(Var("i"), Int(1), Add, kind=None)
// [Typer] resolve: Var("i")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("next")
// [Typer] resolve: Bool(false)
// [Typer] resolve: Bool(false)
// [Typer] resolve: App(Var("next"), targs=None, [Int(0)])
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("next")
// [Typer] resolve: Var("do")
// [Typer] resolve: LetRec({tyvars: [("T", None)], name: ("each", Unit), args: [("iter", ((T) -> Bool) -> Bool), ("f", (T) -> Unit)], body: LetRec({tyvars: [], name: ("yield", Var(None)), args: [("x", Var(None))], body: Let(("_", Var(None)), App(Var("f"), targs=None, [Var("x")]), Bool(true))}, LetRec({tyvars: [], name: ("do", Var(None)), args: [], body: If(App(Var("iter"), targs=None, [Var("yield")]), App(Var("do"), targs=None, []), Unit)}, App(Var("do"), targs=None, [])))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("arr", Var(None)), Array(Int(5), Int(1)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Int(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Int(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Int(5)), Let(("int_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print_i", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, Let(("_", Var(None)), App(Var("each"), targs=None, [Var("int_arr_iter"), Var("print_i")]), Let(("arr", Var(None)), Array(Int(6), Double(0)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Double(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Double(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Double(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Double(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Double(5)), Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")])))))))))))))))))))}, Unit))
// [Typer] resolve: LetRec({tyvars: [], name: ("yield", Var(None)), args: [("x", Var(None))], body: Let(("_", Var(None)), App(Var("f"), targs=None, [Var("x")]), Bool(true))}, LetRec({tyvars: [], name: ("do", Var(None)), args: [], body: If(App(Var("iter"), targs=None, [Var("yield")]), App(Var("do"), targs=None, []), Unit)}, App(Var("do"), targs=None, [])))
// [Typer] resolve: Let(("_", Var(None)), App(Var("f"), targs=None, [Var("x")]), Bool(true))
// [Typer] resolve: App(Var("f"), targs=None, [Var("x")])
// [Typer] resolve: Var("x")
// [Typer] resolve: Var("f")
// [Typer] resolve: Bool(true)
// [Typer] resolve: LetRec({tyvars: [], name: ("do", Var(None)), args: [], body: If(App(Var("iter"), targs=None, [Var("yield")]), App(Var("do"), targs=None, []), Unit)}, App(Var("do"), targs=None, []))
// [Typer] resolve: If(App(Var("iter"), targs=None, [Var("yield")]), App(Var("do"), targs=None, []), Unit)
// [Typer] resolve: App(Var("iter"), targs=None, [Var("yield")])
// [Typer] resolve: Var("yield")
// [Typer] resolve: Var("iter")
// [Typer] resolve: App(Var("do"), targs=None, [])
// [Typer] resolve: Var("do")
// [Typer] resolve: Unit
// [Typer] resolve: App(Var("do"), targs=None, [])
// [Typer] resolve: Var("do")
// [Typer] resolve: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("arr", Var(None)), Array(Int(5), Int(1)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Int(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Int(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Int(5)), Let(("int_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print_i", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, Let(("_", Var(None)), App(Var("each"), targs=None, [Var("int_arr_iter"), Var("print_i")]), Let(("arr", Var(None)), Array(Int(6), Double(0)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Double(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Double(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Double(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Double(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Double(5)), Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")])))))))))))))))))))}, Unit)
// [Typer] resolve: Let(("arr", Var(None)), Array(Int(5), Int(1)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Int(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Int(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Int(5)), Let(("int_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print_i", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, Let(("_", Var(None)), App(Var("each"), targs=None, [Var("int_arr_iter"), Var("print_i")]), Let(("arr", Var(None)), Array(Int(6), Double(0)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Double(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Double(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Double(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Double(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Double(5)), Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")])))))))))))))))))))
// [Typer] resolve: Array(Int(5), Int(1))
// [Typer] resolve: Int(5)
// [Typer] resolve: Int(1)
// [Typer] resolve: Let(("_", Var(None)), Put(Var("arr"), Int(0), Int(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Int(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Int(5)), Let(("int_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print_i", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, Let(("_", Var(None)), App(Var("each"), targs=None, [Var("int_arr_iter"), Var("print_i")]), Let(("arr", Var(None)), Array(Int(6), Double(0)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Double(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Double(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Double(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Double(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Double(5)), Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")]))))))))))))))))))
// [Typer] resolve: Put(Var("arr"), Int(0), Int(1))
// [Typer] resolve: Var("arr")
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(1)
// [Typer] resolve: Let(("_", Var(None)), Put(Var("arr"), Int(1), Int(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Int(5)), Let(("int_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print_i", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, Let(("_", Var(None)), App(Var("each"), targs=None, [Var("int_arr_iter"), Var("print_i")]), Let(("arr", Var(None)), Array(Int(6), Double(0)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Double(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Double(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Double(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Double(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Double(5)), Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")])))))))))))))))))
// [Typer] resolve: Put(Var("arr"), Int(1), Int(2))
// [Typer] resolve: Var("arr")
// [Typer] resolve: Int(1)
// [Typer] resolve: Int(2)
// [Typer] resolve: Let(("_", Var(None)), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Int(5)), Let(("int_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print_i", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, Let(("_", Var(None)), App(Var("each"), targs=None, [Var("int_arr_iter"), Var("print_i")]), Let(("arr", Var(None)), Array(Int(6), Double(0)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Double(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Double(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Double(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Double(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Double(5)), Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")]))))))))))))))))
// [Typer] resolve: Put(Var("arr"), Int(2), Int(3))
// [Typer] resolve: Var("arr")
// [Typer] resolve: Int(2)
// [Typer] resolve: Int(3)
// [Typer] resolve: Let(("_", Var(None)), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Int(5)), Let(("int_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print_i", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, Let(("_", Var(None)), App(Var("each"), targs=None, [Var("int_arr_iter"), Var("print_i")]), Let(("arr", Var(None)), Array(Int(6), Double(0)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Double(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Double(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Double(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Double(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Double(5)), Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")])))))))))))))))
// [Typer] resolve: Put(Var("arr"), Int(3), Int(4))
// [Typer] resolve: Var("arr")
// [Typer] resolve: Int(3)
// [Typer] resolve: Int(4)
// [Typer] resolve: Let(("_", Var(None)), Put(Var("arr"), Int(4), Int(5)), Let(("int_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print_i", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, Let(("_", Var(None)), App(Var("each"), targs=None, [Var("int_arr_iter"), Var("print_i")]), Let(("arr", Var(None)), Array(Int(6), Double(0)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Double(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Double(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Double(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Double(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Double(5)), Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")]))))))))))))))
// [Typer] resolve: Put(Var("arr"), Int(4), Int(5))
// [Typer] resolve: Var("arr")
// [Typer] resolve: Int(4)
// [Typer] resolve: Int(5)
// [Typer] resolve: Let(("int_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print_i", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, Let(("_", Var(None)), App(Var("each"), targs=None, [Var("int_arr_iter"), Var("print_i")]), Let(("arr", Var(None)), Array(Int(6), Double(0)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Double(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Double(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Double(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Double(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Double(5)), Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")])))))))))))))
// [Typer] resolve: App(Var("iter"), targs=None, [Var("arr"), Int(5)])
// [Typer] resolve: Var("arr")
// [Typer] resolve: Int(5)
// [Typer] resolve: Var("iter")
// [Typer] resolve: LetRec({tyvars: [], name: ("print_i", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, Let(("_", Var(None)), App(Var("each"), targs=None, [Var("int_arr_iter"), Var("print_i")]), Let(("arr", Var(None)), Array(Int(6), Double(0)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Double(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Double(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Double(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Double(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Double(5)), Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")]))))))))))))
// [Typer] resolve: App(Var("print_int"), targs=None, [Var("x")])
// [Typer] resolve: Var("x")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Let(("_", Var(None)), App(Var("each"), targs=None, [Var("int_arr_iter"), Var("print_i")]), Let(("arr", Var(None)), Array(Int(6), Double(0)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Double(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Double(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Double(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Double(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Double(5)), Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")])))))))))))
// [Typer] resolve: App(Var("each"), targs=None, [Var("int_arr_iter"), Var("print_i")])
// [Typer] resolve: Var("int_arr_iter")
// [Typer] resolve: Var("print_i")
// [Typer] resolve: Var("each")
// [Typer] resolve: Let(("arr", Var(None)), Array(Int(6), Double(0)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Double(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Double(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Double(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Double(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Double(5)), Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")]))))))))))
// [Typer] resolve: Array(Int(6), Double(0))
// [Typer] resolve: Int(6)
// [Typer] resolve: Double(0)
// [Typer] resolve: Let(("_", Var(None)), Put(Var("arr"), Int(0), Double(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Double(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Double(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Double(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Double(5)), Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")])))))))))
// [Typer] resolve: Put(Var("arr"), Int(0), Double(1))
// [Typer] resolve: Var("arr")
// [Typer] resolve: Int(0)
// [Typer] resolve: Double(1)
// [Typer] resolve: Let(("_", Var(None)), Put(Var("arr"), Int(1), Double(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Double(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Double(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Double(5)), Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")]))))))))
// [Typer] resolve: Put(Var("arr"), Int(1), Double(2))
// [Typer] resolve: Var("arr")
// [Typer] resolve: Int(1)
// [Typer] resolve: Double(2)
// [Typer] resolve: Let(("_", Var(None)), Put(Var("arr"), Int(2), Double(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Double(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Double(5)), Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")])))))))
// [Typer] resolve: Put(Var("arr"), Int(2), Double(3))
// [Typer] resolve: Var("arr")
// [Typer] resolve: Int(2)
// [Typer] resolve: Double(3)
// [Typer] resolve: Let(("_", Var(None)), Put(Var("arr"), Int(3), Double(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Double(5)), Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")]))))))
// [Typer] resolve: Put(Var("arr"), Int(3), Double(4))
// [Typer] resolve: Var("arr")
// [Typer] resolve: Int(3)
// [Typer] resolve: Double(4)
// [Typer] resolve: Let(("_", Var(None)), Put(Var("arr"), Int(4), Double(5)), Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")])))))
// [Typer] resolve: Put(Var("arr"), Int(4), Double(5))
// [Typer] resolve: Var("arr")
// [Typer] resolve: Int(4)
// [Typer] resolve: Double(5)
// [Typer] resolve: Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")]))))
// [Typer] resolve: Put(Var("arr"), Int(5), Double(6))
// [Typer] resolve: Var("arr")
// [Typer] resolve: Int(5)
// [Typer] resolve: Double(6)
// [Typer] resolve: Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")])))
// [Typer] resolve: App(Var("iter"), targs=None, [Var("arr"), Int(6)])
// [Typer] resolve: Var("arr")
// [Typer] resolve: Int(6)
// [Typer] resolve: Var("iter")
// [Typer] resolve: LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")]))
// [Typer] resolve: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])
// [Typer] resolve: App(Var("int_of_float"), targs=None, [Var("x")])
// [Typer] resolve: Var("x")
// [Typer] resolve: Var("int_of_float")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")])
// [Typer] resolve: Var("double_arr_iter")
// [Typer] resolve: Var("print_d")
// [Typer] resolve: Var("each")
// [Typer] resolve: Unit
// [Typer] check: LetRec({tyvars: [("T", None)], name: ("iter", ((T) -> Bool) -> Bool), args: [("arr", Array[T]), ("len", Int)], body: LetRec({tyvars: [], name: ("do", Var(None)), args: [("yield", Var(None))], body: LetRec({tyvars: [], name: ("next", Var(None)), args: [("i", Var(None))], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=None)), If(App(Var("yield"), targs=None, [Get(Var("arr"), Var("i"))]), App(Var("next"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Bool(false)), Bool(false))}, App(Var("next"), targs=None, [Int(0)]))}, Var("do"))}, LetRec({tyvars: [("T", None)], name: ("each", Unit), args: [("iter", ((T) -> Bool) -> Bool), ("f", (T) -> Unit)], body: LetRec({tyvars: [], name: ("yield", Var(None)), args: [("x", Var(None))], body: Let(("_", Var(None)), App(Var("f"), targs=None, [Var("x")]), Bool(true))}, LetRec({tyvars: [], name: ("do", Var(None)), args: [], body: If(App(Var("iter"), targs=None, [Var("yield")]), App(Var("do"), targs=None, []), Unit)}, App(Var("do"), targs=None, [])))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("arr", Var(None)), Array(Int(5), Int(1)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Int(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Int(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Int(5)), Let(("int_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print_i", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, Let(("_", Var(None)), App(Var("each"), targs=None, [Var("int_arr_iter"), Var("print_i")]), Let(("arr", Var(None)), Array(Int(6), Double(0)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Double(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Double(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Double(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Double(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Double(5)), Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")])))))))))))))))))))}, Unit))) against Unit
// [Typer] typevars: [("T", None)]
// [Typer] check: LetRec({tyvars: [], name: ("do", Var(None)), args: [("yield", Var(None))], body: LetRec({tyvars: [], name: ("next", Var(None)), args: [("i", Var(None))], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=None)), If(App(Var("yield"), targs=None, [Get(Var("arr"), Var("i"))]), App(Var("next"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Bool(false)), Bool(false))}, App(Var("next"), targs=None, [Int(0)]))}, Var("do")) against ((T) -> Bool) -> Bool
// [Typer] typevars: []
// [Typer] infer: LetRec({tyvars: [], name: ("next", Var(None)), args: [("i", Var(None))], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=None)), If(App(Var("yield"), targs=None, [Get(Var("arr"), Var("i"))]), App(Var("next"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Bool(false)), Bool(false))}, App(Var("next"), targs=None, [Int(0)]))
// [Typer] typevars: []
// [Typer] infer: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=None)), If(App(Var("yield"), targs=None, [Get(Var("arr"), Var("i"))]), App(Var("next"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Bool(false)), Bool(false))
// [Typer] check: LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=None)) against Bool
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Var(None)))
// [Typer] inst result: Var(None)
// [Typer] infer: Prim(Var("len"), Int(1), Sub, kind=None)
// [Typer] infer: Var("len")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: If(App(Var("yield"), targs=None, [Get(Var("arr"), Var("i"))]), App(Var("next"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Bool(false))
// [Typer] check: App(Var("yield"), targs=None, [Get(Var("arr"), Var("i"))]) against Bool
// [Typer] infer: Get(Var("arr"), Var("i"))
// [Typer] infer: Var("arr")
// [Typer] inst: TypeScheme(([], Array[T]))
// [Typer] inst result: Array[T]
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] inst: TypeScheme(([], Var(None)))
// [Typer] inst result: Var(None)
// [Typer] unify: Var(None) and (T) -> Bool
// [Typer] union: Var(None) and (T) -> Bool
// [Typer] infer: App(Var("next"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])
// [Typer] inst: TypeScheme(([], (Int) -> Var(None)))
// [Typer] inst result: (Int) -> Var(None)
// [Typer] check: Prim(Var("i"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] infer: Bool(false)
// [Typer] unify: Var(None) and Bool
// [Typer] union: Var(None) and Bool
// [Typer] infer: Bool(false)
// [Typer] unify: Bool and Bool
// [Typer] unify: Bool and Bool
// [Typer] infer: App(Var("next"), targs=None, [Int(0)])
// [Typer] inst: TypeScheme(([], (Int) -> Bool))
// [Typer] inst result: (Int) -> Bool
// [Typer] check: Int(0) against Int
// [Typer] unify: Bool and Var(None)
// [Typer] union: Bool and Var(None)
// [Typer] check: Var("do") against ((T) -> Bool) -> Bool
// [Typer] inst: TypeScheme(([], ((T) -> Bool) -> Bool))
// [Typer] inst result: ((T) -> Bool) -> Bool
// [Typer] unify: ((T) -> Bool) -> Bool and ((T) -> Bool) -> Bool
// [Typer] unify: (T) -> Bool and (T) -> Bool
// [Typer] unify: T and T
// [Typer] unify: Bool and Bool
// [Typer] unify: Bool and Bool
// [Typer] check: LetRec({tyvars: [("T", None)], name: ("each", Unit), args: [("iter", ((T) -> Bool) -> Bool), ("f", (T) -> Unit)], body: LetRec({tyvars: [], name: ("yield", Var(None)), args: [("x", Var(None))], body: Let(("_", Var(None)), App(Var("f"), targs=None, [Var("x")]), Bool(true))}, LetRec({tyvars: [], name: ("do", Var(None)), args: [], body: If(App(Var("iter"), targs=None, [Var("yield")]), App(Var("do"), targs=None, []), Unit)}, App(Var("do"), targs=None, [])))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("arr", Var(None)), Array(Int(5), Int(1)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Int(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Int(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Int(5)), Let(("int_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print_i", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, Let(("_", Var(None)), App(Var("each"), targs=None, [Var("int_arr_iter"), Var("print_i")]), Let(("arr", Var(None)), Array(Int(6), Double(0)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Double(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Double(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Double(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Double(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Double(5)), Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")])))))))))))))))))))}, Unit)) against Unit
// [Typer] typevars: [("T", None)]
// [Typer] check: LetRec({tyvars: [], name: ("yield", Var(None)), args: [("x", Var(None))], body: Let(("_", Var(None)), App(Var("f"), targs=None, [Var("x")]), Bool(true))}, LetRec({tyvars: [], name: ("do", Var(None)), args: [], body: If(App(Var("iter"), targs=None, [Var("yield")]), App(Var("do"), targs=None, []), Unit)}, App(Var("do"), targs=None, []))) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("_", Var(None)), App(Var("f"), targs=None, [Var("x")]), Bool(true))
// [Typer] infer: App(Var("f"), targs=None, [Var("x")])
// [Typer] inst: TypeScheme(([], (T) -> Unit))
// [Typer] inst result: (T) -> Unit
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Var(None)))
// [Typer] inst result: Var(None)
// [Typer] unify: T and Var(None)
// [Typer] union: T and Var(None)
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Bool(true)
// [Typer] unify: Bool and Var(None)
// [Typer] union: Bool and Var(None)
// [Typer] check: LetRec({tyvars: [], name: ("do", Var(None)), args: [], body: If(App(Var("iter"), targs=None, [Var("yield")]), App(Var("do"), targs=None, []), Unit)}, App(Var("do"), targs=None, [])) against Unit
// [Typer] typevars: []
// [Typer] infer: If(App(Var("iter"), targs=None, [Var("yield")]), App(Var("do"), targs=None, []), Unit)
// [Typer] check: App(Var("iter"), targs=None, [Var("yield")]) against Bool
// [Typer] infer: Var("yield")
// [Typer] inst: TypeScheme(([], (T) -> Bool))
// [Typer] inst result: (T) -> Bool
// [Typer] inst: TypeScheme(([], ((T) -> Bool) -> Bool))
// [Typer] inst result: ((T) -> Bool) -> Bool
// [Typer] unify: ((T) -> Bool) -> Bool and ((T) -> Bool) -> Bool
// [Typer] unify: (T) -> Bool and (T) -> Bool
// [Typer] unify: T and T
// [Typer] unify: Bool and Bool
// [Typer] unify: Bool and Bool
// [Typer] infer: App(Var("do"), targs=None, [])
// [Typer] inst: TypeScheme(([], () -> Var(None)))
// [Typer] inst result: () -> Var(None)
// [Typer] infer: Unit
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] unify: Unit and Unit
// [Typer] check: App(Var("do"), targs=None, []) against Unit
// [Typer] inst: TypeScheme(([], () -> Unit))
// [Typer] inst result: () -> Unit
// [Typer] unify: () -> Unit and () -> Unit
// [Typer] unify: Unit and Unit
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("arr", Var(None)), Array(Int(5), Int(1)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Int(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Int(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Int(5)), Let(("int_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print_i", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, Let(("_", Var(None)), App(Var("each"), targs=None, [Var("int_arr_iter"), Var("print_i")]), Let(("arr", Var(None)), Array(Int(6), Double(0)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Double(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Double(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Double(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Double(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Double(5)), Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")])))))))))))))))))))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("arr", Var(None)), Array(Int(5), Int(1)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Int(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Int(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Int(5)), Let(("int_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print_i", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, Let(("_", Var(None)), App(Var("each"), targs=None, [Var("int_arr_iter"), Var("print_i")]), Let(("arr", Var(None)), Array(Int(6), Double(0)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Double(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Double(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Double(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Double(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Double(5)), Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")])))))))))))))))))))
// [Typer] infer: Array(Int(5), Int(1))
// [Typer] infer: Int(1)
// [Typer] check: Int(5) against Int
// [Typer] unify: Var(None) and Array[Int]
// [Typer] union: Var(None) and Array[Int]
// [Typer] infer: Let(("_", Var(None)), Put(Var("arr"), Int(0), Int(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Int(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Int(5)), Let(("int_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print_i", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, Let(("_", Var(None)), App(Var("each"), targs=None, [Var("int_arr_iter"), Var("print_i")]), Let(("arr", Var(None)), Array(Int(6), Double(0)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Double(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Double(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Double(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Double(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Double(5)), Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")]))))))))))))))))))
// [Typer] infer: Put(Var("arr"), Int(0), Int(1))
// [Typer] infer: Int(1)
// [Typer] check: Var("arr") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Var("arr"), Int(1), Int(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Int(5)), Let(("int_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print_i", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, Let(("_", Var(None)), App(Var("each"), targs=None, [Var("int_arr_iter"), Var("print_i")]), Let(("arr", Var(None)), Array(Int(6), Double(0)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Double(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Double(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Double(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Double(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Double(5)), Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")])))))))))))))))))
// [Typer] infer: Put(Var("arr"), Int(1), Int(2))
// [Typer] infer: Int(2)
// [Typer] check: Var("arr") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Int(5)), Let(("int_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print_i", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, Let(("_", Var(None)), App(Var("each"), targs=None, [Var("int_arr_iter"), Var("print_i")]), Let(("arr", Var(None)), Array(Int(6), Double(0)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Double(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Double(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Double(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Double(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Double(5)), Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")]))))))))))))))))
// [Typer] infer: Put(Var("arr"), Int(2), Int(3))
// [Typer] infer: Int(3)
// [Typer] check: Var("arr") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(2) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Int(5)), Let(("int_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print_i", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, Let(("_", Var(None)), App(Var("each"), targs=None, [Var("int_arr_iter"), Var("print_i")]), Let(("arr", Var(None)), Array(Int(6), Double(0)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Double(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Double(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Double(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Double(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Double(5)), Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")])))))))))))))))
// [Typer] infer: Put(Var("arr"), Int(3), Int(4))
// [Typer] infer: Int(4)
// [Typer] check: Var("arr") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(3) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Var("arr"), Int(4), Int(5)), Let(("int_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print_i", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, Let(("_", Var(None)), App(Var("each"), targs=None, [Var("int_arr_iter"), Var("print_i")]), Let(("arr", Var(None)), Array(Int(6), Double(0)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Double(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Double(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Double(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Double(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Double(5)), Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")]))))))))))))))
// [Typer] infer: Put(Var("arr"), Int(4), Int(5))
// [Typer] infer: Int(5)
// [Typer] check: Var("arr") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(4) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("int_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print_i", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, Let(("_", Var(None)), App(Var("each"), targs=None, [Var("int_arr_iter"), Var("print_i")]), Let(("arr", Var(None)), Array(Int(6), Double(0)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Double(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Double(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Double(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Double(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Double(5)), Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")])))))))))))))
// [Typer] infer: App(Var("iter"), targs=None, [Var("arr"), Int(5)])
// [Typer] inst: TypeScheme((["T"], (Array[T], Int) -> ((T) -> Bool) -> Bool))
// [Typer] inst result: (Array[Var(None)], Int) -> ((Var(None)) -> Bool) -> Bool
// [Typer] check: Var("arr") against Array[Var(None)]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Var(None)]
// [Typer] unify: Int and Var(None)
// [Typer] union: Int and Var(None)
// [Typer] check: Int(5) against Int
// [Typer] unify: Var(None) and ((Int) -> Bool) -> Bool
// [Typer] union: Var(None) and ((Int) -> Bool) -> Bool
// [Typer] infer: LetRec({tyvars: [], name: ("print_i", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, Let(("_", Var(None)), App(Var("each"), targs=None, [Var("int_arr_iter"), Var("print_i")]), Let(("arr", Var(None)), Array(Int(6), Double(0)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Double(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Double(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Double(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Double(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Double(5)), Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")]))))))))))))
// [Typer] typevars: []
// [Typer] check: App(Var("print_int"), targs=None, [Var("x")]) against Unit
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Var(None)))
// [Typer] inst result: Var(None)
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] unify: (Int) -> Unit and (Var(None)) -> Unit
// [Typer] unify: Int and Var(None)
// [Typer] union: Int and Var(None)
// [Typer] unify: Unit and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("each"), targs=None, [Var("int_arr_iter"), Var("print_i")]), Let(("arr", Var(None)), Array(Int(6), Double(0)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Double(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Double(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Double(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Double(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Double(5)), Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")])))))))))))
// [Typer] infer: App(Var("each"), targs=None, [Var("int_arr_iter"), Var("print_i")])
// [Typer] inst: TypeScheme((["T"], (((T) -> Bool) -> Bool, (T) -> Unit) -> Unit))
// [Typer] inst result: (((Var(None)) -> Bool) -> Bool, (Var(None)) -> Unit) -> Unit
// [Typer] check: Var("int_arr_iter") against ((Var(None)) -> Bool) -> Bool
// [Typer] inst: TypeScheme(([], ((Int) -> Bool) -> Bool))
// [Typer] inst result: ((Int) -> Bool) -> Bool
// [Typer] unify: ((Int) -> Bool) -> Bool and ((Var(None)) -> Bool) -> Bool
// [Typer] unify: (Int) -> Bool and (Var(None)) -> Bool
// [Typer] unify: Int and Var(None)
// [Typer] union: Int and Var(None)
// [Typer] unify: Bool and Bool
// [Typer] unify: Bool and Bool
// [Typer] check: Var("print_i") against (Int) -> Unit
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] unify: (Int) -> Unit and (Int) -> Unit
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("arr", Var(None)), Array(Int(6), Double(0)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Double(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Double(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Double(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Double(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Double(5)), Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")]))))))))))
// [Typer] infer: Array(Int(6), Double(0))
// [Typer] infer: Double(0)
// [Typer] check: Int(6) against Int
// [Typer] unify: Var(None) and Array[Double]
// [Typer] union: Var(None) and Array[Double]
// [Typer] infer: Let(("_", Var(None)), Put(Var("arr"), Int(0), Double(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Double(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Double(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Double(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Double(5)), Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")])))))))))
// [Typer] infer: Put(Var("arr"), Int(0), Double(1))
// [Typer] infer: Double(1)
// [Typer] check: Var("arr") against Array[Double]
// [Typer] inst: TypeScheme(([], Array[Double]))
// [Typer] inst result: Array[Double]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Var("arr"), Int(1), Double(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Double(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Double(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Double(5)), Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")]))))))))
// [Typer] infer: Put(Var("arr"), Int(1), Double(2))
// [Typer] infer: Double(2)
// [Typer] check: Var("arr") against Array[Double]
// [Typer] inst: TypeScheme(([], Array[Double]))
// [Typer] inst result: Array[Double]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Var("arr"), Int(2), Double(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Double(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Double(5)), Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")])))))))
// [Typer] infer: Put(Var("arr"), Int(2), Double(3))
// [Typer] infer: Double(3)
// [Typer] check: Var("arr") against Array[Double]
// [Typer] inst: TypeScheme(([], Array[Double]))
// [Typer] inst result: Array[Double]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Int(2) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Var("arr"), Int(3), Double(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Double(5)), Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")]))))))
// [Typer] infer: Put(Var("arr"), Int(3), Double(4))
// [Typer] infer: Double(4)
// [Typer] check: Var("arr") against Array[Double]
// [Typer] inst: TypeScheme(([], Array[Double]))
// [Typer] inst result: Array[Double]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Int(3) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Var("arr"), Int(4), Double(5)), Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")])))))
// [Typer] infer: Put(Var("arr"), Int(4), Double(5))
// [Typer] infer: Double(5)
// [Typer] check: Var("arr") against Array[Double]
// [Typer] inst: TypeScheme(([], Array[Double]))
// [Typer] inst result: Array[Double]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Int(4) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Var("arr"), Int(5), Double(6)), Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")]))))
// [Typer] infer: Put(Var("arr"), Int(5), Double(6))
// [Typer] infer: Double(6)
// [Typer] check: Var("arr") against Array[Double]
// [Typer] inst: TypeScheme(([], Array[Double]))
// [Typer] inst result: Array[Double]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Int(5) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("double_arr_iter", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(6)]), LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")])))
// [Typer] infer: App(Var("iter"), targs=None, [Var("arr"), Int(6)])
// [Typer] inst: TypeScheme((["T"], (Array[T], Int) -> ((T) -> Bool) -> Bool))
// [Typer] inst result: (Array[Var(None)], Int) -> ((Var(None)) -> Bool) -> Bool
// [Typer] check: Var("arr") against Array[Var(None)]
// [Typer] inst: TypeScheme(([], Array[Double]))
// [Typer] inst result: Array[Double]
// [Typer] unify: Array[Double] and Array[Var(None)]
// [Typer] unify: Double and Var(None)
// [Typer] union: Double and Var(None)
// [Typer] check: Int(6) against Int
// [Typer] unify: Var(None) and ((Double) -> Bool) -> Bool
// [Typer] union: Var(None) and ((Double) -> Bool) -> Bool
// [Typer] infer: LetRec({tyvars: [], name: ("print_d", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])])}, App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")]))
// [Typer] typevars: []
// [Typer] check: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [Var("x")])]) against Unit
// [Typer] infer: App(Var("int_of_float"), targs=None, [Var("x")])
// [Typer] inst: TypeScheme(([], (Double) -> Int))
// [Typer] inst result: (Double) -> Int
// [Typer] check: Var("x") against Double
// [Typer] inst: TypeScheme(([], Var(None)))
// [Typer] inst result: Var(None)
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] unify: (Int) -> Unit and (Int) -> Unit
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] infer: App(Var("each"), targs=None, [Var("double_arr_iter"), Var("print_d")])
// [Typer] inst: TypeScheme((["T"], (((T) -> Bool) -> Bool, (T) -> Unit) -> Unit))
// [Typer] inst result: (((Var(None)) -> Bool) -> Bool, (Var(None)) -> Unit) -> Unit
// [Typer] check: Var("double_arr_iter") against ((Var(None)) -> Bool) -> Bool
// [Typer] inst: TypeScheme(([], ((Double) -> Bool) -> Bool))
// [Typer] inst result: ((Double) -> Bool) -> Bool
// [Typer] unify: ((Double) -> Bool) -> Bool and ((Var(None)) -> Bool) -> Bool
// [Typer] unify: (Double) -> Bool and (Var(None)) -> Bool
// [Typer] unify: Double and Var(None)
// [Typer] union: Double and Var(None)
// [Typer] unify: Bool and Bool
// [Typer] unify: Bool and Bool
// [Typer] check: Var("print_d") against (Double) -> Unit
// [Typer] inst: TypeScheme(([], (Double) -> Unit))
// [Typer] inst result: (Double) -> Unit
// [Typer] unify: (Double) -> Unit and (Double) -> Unit
// [Typer] unify: Double and Double
// [Typer] unify: Unit and Unit
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [Parser] flags: ["extension"]
