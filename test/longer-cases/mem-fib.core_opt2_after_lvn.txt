# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn fib.45 #f3 : fn(int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add($f0, 1)
    let %1: int32 = load_symbol ::0
    let _ = alloc <m0: array[int32] heap(%0)> <- [..] = %1
    let %4: int32 = call f2($f0, f3.m0, %1)
    return %4
  }
}
.fn memed.46 #f2 : fn(int32, array[int32], int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 offset($f1, $f0 * @32)
    let %1: int32 = load_symbol ::0
    let %2: bool = eq(%0, %1)
    br %2 b1() b2()
  }
  .bb #b1 () {
    let %3: bool = le($f0, 1)
    br %3 b3() b4()
  }
  .bb #b2 () {
    let %13: int32 = load int32 offset($f1, $f0 * @32)
    jump b6(%13)
  }
  .bb #b3 () {
    let _ = store int32 offset($f1, $f0 * @32) <- $f0
    jump b5($f0)
  }
  .bb #b4 () {
    let %5: int32 = sub($f0, 1)
    let %6: int32 = load_symbol ::0
    let %7: int32 = call f2(%5, $f1, %6)
    let %8: int32 = sub($f0, 2)
    let %10: int32 = call f2(%8, $f1, %6)
    let %11: int32 = add(%7, %10)
    let _ = store int32 offset($f1, $f0 * @32) <- %11
    jump b5(%11)
  }
  .bb #b5 (int32) {
    jump b6($b5.0)
  }
  .bb #b6 (int32) {
    return $b6.0
  }
}
.fn T$start #f8 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::0
    let %1: unit = call f4(%0)
    return %1
  }
}
.fn main.47 #f4 : fn(int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = ext_call minimbt_read_int()
    let %1: int32 = load_symbol ::0
    let %2: int32 = call f3(%0, %1)
    let %3: unit = ext_call minimbt_print_int(%2)
    let %4: unit = ext_call minimbt_print_char(10)
    return ()
  }
}
.fn T$unmem_magic.1 #f0 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return -1919810
  }
}
.thunk ::0 unmem_magic.1
.thunk ::1 start
