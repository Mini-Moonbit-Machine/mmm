# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn T$start #f10 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::0
    let %1: unit = call f4(%0)
    return %1
  }
}
.fn main.47 #f4 : fn(int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = ext_call minimbt_read_int()
    let %1: int32 = add(%0, 1)
    let %2: int32 = load_symbol ::0
    let _ = alloc <m0: array[int32] heap(%1)> <- [..] = %2
    let %5: int32 = call f3(%0, f4.m0, %2)
    let %6: unit = ext_call minimbt_print_int(%5)
    let %7: unit = ext_call minimbt_print_char(10)
    return ()
  }
}
.fn T$unmem_magic.1 #f0 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return -1919810
  }
}
.fn memed.49 #f7 : closure(int32) -> int32
.freevars (array[int32])
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::0
    let %1: int32 = call f3($f0, ^1, %0)
    return %1
  }
}
.fn memed.48 #f3 : fn(int32, array[int32], int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %14: ptr = compute_address unit offset(0, $f0 * @32)
    let %0: int32 = load int32 raw($f1, %14)
    let %1: int32 = load_symbol ::0
    let %2: bool = eq(%0, %1)
    br %2 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: closure(int32) -> int32 heap(2)> <- [0] = f7, [1] = $f1
    jump b7()
  }
  .bb #b2 () {
    let %15: ptr = compute_address unit offset(0, $f0 * @32)
    let %6: int32 = load int32 raw($f1, %15)
    jump b3(%6)
  }
  .bb #b3 (int32) {
    return $b3.0
  }
  .bb #b4 (int32) {
    let %13: ptr = compute_address unit offset(0, $f0 * @32)
    let _ = store int32 raw($f1, %13) <- $b4.0
    jump b3($b4.0)
  }
  .bb #b7 () {
    let %7: bool = le($f0, 1)
    br %7 b8() b9()
  }
  .bb #b8 () {
    jump b10($f0)
  }
  .bb #b9 () {
    let %8: int32 = sub($f0, 1)
    let %9: int32 = apply f3.m0(%8)
    let %10: int32 = sub($f0, 2)
    let %11: int32 = apply f3.m0(%10)
    let %12: int32 = add(%9, %11)
    jump b10(%12)
  }
  .bb #b10 (int32) {
    jump b4($b10.0)
  }
}
.thunk ::0 unmem_magic.1
.thunk ::1 start
