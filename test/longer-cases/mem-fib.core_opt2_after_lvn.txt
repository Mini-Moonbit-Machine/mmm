# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn main33 #f3 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = ext_call minimbt_read_int()
    let %1: int32 = add(%0, 1)
    let %2: int32 = load_symbol ::0
    let _ = alloc <m0: array[int32] heap(%1)> <- [..] = %2
    let _ = alloc <m1: closure(int32) -> int32 heap(2)> <- [0] = f6, [1] = f3.m0
    let %5: int32 = apply f3.m1(%0)
    let %6: unit = ext_call minimbt_print_int(%5)
    let %7: unit = ext_call minimbt_print_char(10)
    return ()
  }
}
.fn T$start #f8 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f3()
    return %0
  }
}
.fn T$unmem_magic.1 #f0 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return -1919810
  }
}
.fn memed8.51 #f6 : closure(int32) -> int32
.freevars (array[int32])
.entry b0 {
  .bb #b0 () {
    let %13: ptr = compute_address unit offset(0, $f0 * @32)
    let %0: int32 = load int32 raw(^1, %13)
    let %1: int32 = load_symbol ::0
    let %2: bool = eq(%0, %1)
    br %2 b1() b2()
  }
  .bb #b1 () {
    jump b6()
  }
  .bb #b2 () {
    let %14: ptr = compute_address unit offset(0, $f0 * @32)
    let %5: int32 = load int32 raw(^1, %14)
    jump b3(%5)
  }
  .bb #b3 (int32) {
    return $b3.0
  }
  .bb #b4 (int32) {
    let %12: ptr = compute_address unit offset(0, $f0 * @32)
    let _ = store int32 raw(^1, %12) <- $b4.0
    jump b3($b4.0)
  }
  .bb #b6 () {
    let %6: bool = le($f0, 1)
    br %6 b7() b8()
  }
  .bb #b7 () {
    jump b9($f0)
  }
  .bb #b8 () {
    let %7: int32 = sub($f0, 1)
    let %8: int32 = apply self(%7)
    let %9: int32 = sub($f0, 2)
    let %10: int32 = apply self(%9)
    let %11: int32 = add(%8, %10)
    jump b9(%11)
  }
  .bb #b9 (int32) {
    jump b4($b9.0)
  }
}
.thunk ::0 unmem_magic.1
.thunk ::1 start
