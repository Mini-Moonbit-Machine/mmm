// [Main] function thunk_main(k) {
// [Main]   function rec_1(x_3, y_5, k) {
// [Main]     if (x_3 === y_5) {
// [Main]       const _6 = 1;
// [Main]       const _7 = x_3 + _6;
// [Main]       return $thunk(() => rec_1(y_5, _7, function (x) {
// [Main]         return $thunk(() => k(x))
// [Main]       }
// [Main]       ))
// [Main]     } else {
// [Main]       return $thunk(() => k(null))
// [Main]     }
// [Main]   }
// [Main]   function main_8(k) {
// [Main]     const _9 = 0;
// [Main]     const _10 = 0;
// [Main]     return $thunk(() => rec_1(_9, _10, function (_12) {
// [Main]       return $thunk(() => k(null))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main_8(function (x) {
// [Main]     return $thunk(() => k(x))
// [Main]   }
// [Main]   ))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $external(f, k, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $thunk(() => k(x));
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: [], name: ("rec", Unit), args: [("x", Int), ("y", Int)], body: If(Eq(Var("x"), Var("y")), App(Var("rec"), [Var("y"), Prim(Var("x"), Int(1), Add, kind=None)]), Unit)}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("rec"), [Int(0), Int(0)]), Unit)}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: If(Eq(Var("x"), Var("y")), App(Var("rec"), [Var("y"), Prim(Var("x"), Int(1), Add, kind=None)]), Unit) against Unit
// [Typer] check: Eq(Var("x"), Var("y")) against Bool
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("y")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("rec"), [Var("y"), Prim(Var("x"), Int(1), Add, kind=None)]) against Unit
// [Typer] infer: Var("y")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Prim(Var("x"), Int(1), Add, kind=None)
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("rec") against (Int, Int) -> Unit
// [Typer] inst: TypeScheme(([], (Int, Int) -> Unit))
// [Typer] inst result: (Int, Int) -> Unit
// [Typer] unify: (Int, Int) -> Unit and (Int, Int) -> Unit
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: Unit against Unit
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("rec"), [Int(0), Int(0)]), Unit)}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("_", Var(None)), App(Var("rec"), [Int(0), Int(0)]), Unit)
// [Typer] infer: App(Var("rec"), [Int(0), Int(0)])
// [Typer] infer: Var("rec")
// [Typer] inst: TypeScheme(([], (Int, Int) -> Unit))
// [Typer] inst result: (Int, Int) -> Unit
// [Typer] check: Int(0) against Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Unit
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [Parser] flags: []
