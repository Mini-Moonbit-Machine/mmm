// [Asm] LoweringOrder: [5, 0, 2, 3, 1]
// [Asm] LoweringOrder: [[4], [1, 2], [3], [], [0]]
// [Asm] LoweringOrder: HashMap::of([(b1, 0), (b5, 0), (b2, 1), (b3, 1), (b0, 0)])
// [Asm] LoweringOrder: [b5, b0, b1, b2, b3]
// [Asm] LoweringOrder: HashMap::of([(b1, 2), (b5, 0), (b2, 0), (b3, 1), (b0, 1)])
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v8, FnParam(fref=f0, fpref=$f.1) -> v3, BlockParam(bref=b0, bpref=$b.0) -> v4, BlockParam(bref=b0, bpref=$b.1) -> v5, Self(fref=f0) -> v0, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%0) -> v6, BlockParam(bref=b3, bpref=$b.0) -> v7
// [Asm] succs: [0]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1)])
// [Asm] succs: [4]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] move: v7 <- zero
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [a1, zero, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [a1, zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, zero, v3]
// [Asm] move: v4 <- v2
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero]
// [Asm] move: v5 <- v3
// [Asm] defined: v5 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v7
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v8]
// [Asm] defined: v8 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, zero, v8]
// [Asm] move: v4 <- v5
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero]
// [Asm] move: v5 <- v8
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] Label("rec.13") clobbered_x: @hashset.of([a2, a1, a0])
// [Asm] Label("rec.13") clobbered_f: @hashset.of([])
// [Asm] subst   mv v7, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] subst   bne v4, v5, .rec.13_2 ->   bne a0, a1, .rec.13_2
// [Asm] subst   addi v8, v4, 1 ->   addi a2, a0, 1
// [Asm] subst   mv v4, v5 ->   mv a0, a1
// [Asm] subst   mv v5, v8 ->   mv a1, a2
// [Asm] subst   j .rec.13_0 ->   j .rec.13_0
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f4) -> v0, Insn(iref=%0) -> v2
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%0) -> v2, Self(fref=f1) -> v0
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] skip edge 1 -> 0
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0]
// [Asm] move: a1 <- zero
// [Asm] defined: a1 is X
// [Asm] skip edge 2 -> 0
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [zero]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main.14") clobbered_x: @hashset.of([a0])
// [Asm] Label("main.14") clobbered_f: @hashset.of([])
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, zero ->   mv a1, zero
// [Asm] subst   call rec.13 ->   call rec.13
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] main.14:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a1, zero, a0], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.14_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   mv a0, zero  # live: [zero, a0]
// [Asm]   mv a1, zero  # live: [a1, zero, a0]
// [Asm]   call rec.13  # live: [zero, a0]
// [Asm]   mv v2, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] rec.13:
// [Asm] # block info: defs: [v3, v4, v5, v2], uses: [v3, a1, a0, v2], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, a0, zero], live_out: [v4, v5, zero]
// [Asm] # block parameters: []
// [Asm] .rec.13_5:
// [Asm]   # save_ctx1  # live: [a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, zero, v3]
// [Asm] # control
// [Asm]   mv v4, v2  # live: [v4, zero, v3]
// [Asm]   mv v5, v3  # live: [v4, v5, zero]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v4, v5], upward_exposed: [v4, v5], params_defs: [v4, v5]
// [Asm] # live_in: [v4, v5, zero], live_out: [v4, v5, zero]
// [Asm] # block parameters: [v4, v5]
// [Asm] .rec.13_0:
// [Asm] # control
// [Asm]   bne v4, v5, .rec.13_2  # live: [v4, v5, zero]
// [Asm] 
// [Asm] # block info: defs: [v4, v5, v8], uses: [v4, v5, v8], upward_exposed: [v4, v5], params_defs: []
// [Asm] # live_in: [v4, v5, zero], live_out: [v4, v5, zero]
// [Asm] # block parameters: []
// [Asm] .rec.13_1:
// [Asm]   addi v8, v4, 1  # live: [v5, zero, v8]
// [Asm] # control
// [Asm]   mv v4, v5  # live: [v4, zero, v8]
// [Asm]   mv v5, v8  # live: [v4, v5, zero]
// [Asm]   j .rec.13_0  # live: [v4, v5, zero]
// [Asm] 
// [Asm] # block info: defs: [v7], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v7]
// [Asm] # block parameters: []
// [Asm] .rec.13_2:
// [Asm] # control
// [Asm]   mv v7, zero  # live: [v7]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v7], upward_exposed: [v7], params_defs: [v7]
// [Asm] # live_in: [v7], live_out: []
// [Asm] # block parameters: [v7]
// [Asm] .rec.13_3:
// [Asm] # control
// [Asm]   mv a0, v7  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call main.14  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 2013265920 # 2GB - 128MB
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 67108864 # 64MB
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.14
// [Main]   .type main.14, @function
// [Main] # leaf false
// [Main] main.14:
// [Main] .main.14_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a0, zero
// [Main]   mv a1, zero
// [Main]   call rec.13
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl rec.13
// [Main]   .type rec.13, @function
// [Main] # leaf true
// [Main] rec.13:
// [Main] .rec.13_5:
// [Main] 
// [Main] .rec.13_0:
// [Main]   bne a0, a1, .rec.13_2
// [Main] 
// [Main] .rec.13_1:
// [Main]   addi a2, a0, 1
// [Main]   mv a0, a1
// [Main]   mv a1, a2
// [Main]   j .rec.13_0
// [Main] 
// [Main] .rec.13_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .rec.13_3:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call main.14
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Typer] resolve: LetRec({tyvars: [], name: ("rec", Unit), args: [("x", Int), ("y", Int)], body: If(Eq(Var("x"), Var("y")), App(Var("rec"), targs=None, [Var("y"), Prim(Var("x"), Int(1), Add, kind=None)]), Unit)}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("rec"), targs=None, [Int(0), Int(0)]), Unit)}, Unit))
// [Typer] resolve: If(Eq(Var("x"), Var("y")), App(Var("rec"), targs=None, [Var("y"), Prim(Var("x"), Int(1), Add, kind=None)]), Unit)
// [Typer] resolve: Eq(Var("x"), Var("y"))
// [Typer] resolve: Var("x")
// [Typer] resolve: Var("y")
// [Typer] resolve: App(Var("rec"), targs=None, [Var("y"), Prim(Var("x"), Int(1), Add, kind=None)])
// [Typer] resolve: Var("y")
// [Typer] resolve: Prim(Var("x"), Int(1), Add, kind=None)
// [Typer] resolve: Var("x")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("rec")
// [Typer] resolve: Unit
// [Typer] resolve: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("rec"), targs=None, [Int(0), Int(0)]), Unit)}, Unit)
// [Typer] resolve: Let(("_", Var(None)), App(Var("rec"), targs=None, [Int(0), Int(0)]), Unit)
// [Typer] resolve: App(Var("rec"), targs=None, [Int(0), Int(0)])
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("rec")
// [Typer] resolve: Unit
// [Typer] resolve: Unit
// [Typer] check: LetRec({tyvars: [], name: ("rec", Unit), args: [("x", Int), ("y", Int)], body: If(Eq(Var("x"), Var("y")), App(Var("rec"), targs=None, [Var("y"), Prim(Var("x"), Int(1), Add, kind=None)]), Unit)}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("rec"), targs=None, [Int(0), Int(0)]), Unit)}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: If(Eq(Var("x"), Var("y")), App(Var("rec"), targs=None, [Var("y"), Prim(Var("x"), Int(1), Add, kind=None)]), Unit) against Unit
// [Typer] check: Eq(Var("x"), Var("y")) against Bool
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("y")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("rec"), targs=None, [Var("y"), Prim(Var("x"), Int(1), Add, kind=None)]) against Unit
// [Typer] infer: Var("y")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Prim(Var("x"), Int(1), Add, kind=None)
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] inst: TypeScheme(([], (Int, Int) -> Unit))
// [Typer] inst result: (Int, Int) -> Unit
// [Typer] unify: (Int, Int) -> Unit and (Int, Int) -> Unit
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: Unit against Unit
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("rec"), targs=None, [Int(0), Int(0)]), Unit)}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("_", Var(None)), App(Var("rec"), targs=None, [Int(0), Int(0)]), Unit)
// [Typer] infer: App(Var("rec"), targs=None, [Int(0), Int(0)])
// [Typer] inst: TypeScheme(([], (Int, Int) -> Unit))
// [Typer] inst result: (Int, Int) -> Unit
// [Typer] check: Int(0) against Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Unit
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [KnfOpt] freq: {rec.1: Many(2), main.8: Once}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 7
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 7
// [KnfOpt] Inline decision rejected
// [KnfOpt] freq: {rec.1: Many(2), main.8: Once}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 7
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 7
// [KnfOpt] Inline decision rejected
// [KnfOpt] freq: {rec.1: Many(2), main.8: Once}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 7
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 7
// [KnfOpt] Inline decision rejected
// [KnfOpt] Numbers of let rec: 2 2 0
// [KnfOpt] Tuple freq: {y.5: MayEscape, _7: MayEscape, _9: MayEscape, _10: MayEscape}
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %2: Call(ty=Unit, f=f0, args=[FnParam(fref=f0, fpref=$f.1), Insn(iref=%1)])
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f4: Once, f1: Once})
// [CoreOpt] allow_inline: false %0 main.14 false true true true true
// [CoreOpt] allow_inline: false %0 rec.13 false true true false true
// [CoreOpt] allow_inline: false %0 main.14 false true true true true
// [CoreOpt] allow_inline: false %0 rec.13 false true true false true
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f4: Once, f1: Once})
// [CoreOpt] allow_inline: false %0 main.14 false true true true true
// [CoreOpt] allow_inline: false %0 rec.13 false true true false true
// [CoreOpt] allow_inline: false %0 main.14 false true true true true
// [CoreOpt] allow_inline: false %0 rec.13 false true true false true
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f4: Once, f1: Once})
// [CoreOpt] allow_inline: false %0 main.14 false true true true true
// [CoreOpt] allow_inline: false %0 rec.13 false true true false true
// [CoreOpt] allow_inline: false %0 main.14 false true true true true
// [CoreOpt] allow_inline: false %0 rec.13 false true true false true
