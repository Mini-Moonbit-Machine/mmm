# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn aux.12705 #f8 : fn(unit, int32, int32, int32, int32, int32, array[int32], array[int32]) -> (int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1($f0)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
    .block #b6
    .block #b7
    .block #b8
  }
  .bb #b2 (unit) {
    jump b15()
  }
  .bb #b3 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b8(f8.m0)
  }
  .bb #b4 () {
    jump b11()
  }
  .bb #b5 () {
    let _ = alloc <m1: (int32, int32) heap(2)> <- [0] = 1, [1] = %2
    jump b7(f8.m1)
  }
  .bb #b6 () {
    jump b2(())
  }
  .bb #b7 ((int32, int32)) {
    jump b8($b7.0)
  }
  .bb #b8 ((int32, int32)) {
    return $b8.0
  }
  .bb #b9 (int32) {
    let %6: bool = eq($b9.0, 0)
    br %6 b5() b6()
  }
  .bb #b10 ((int32, int32)) {
    let %1: int32 = load int32 field($b10.0, 0 * @(@32, @(@32, @32)))
    let %2: int32 = load int32 field($b10.0, 1 * @(@32, @(@32, @32)))
    let %3: bool = eq(%1, 0)
    br %3 b3() b4()
  }
  .bb #b11 () {
    let %8: bool = le(%2, $f5)
    br %8 b12() b13()
  }
  .bb #b12 () {
    jump b14(0)
  }
  .bb #b13 () {
    jump b14(1)
  }
  .bb #b14 (int32) {
    jump b9($b14.0)
  }
  .bb #b15 () {
    jump b16(())
  }
  .loop #b16 pre #Some(b15) header #b17 {
    .block #b18
    .block #b19
    .block #b20
    .block #b21
    .block #b22
    .block #b23
  }
  .bb #b17 (unit) {
    jump b30()
  }
  .bb #b18 () {
    let _ = alloc <m15: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b23(f8.m15)
  }
  .bb #b19 () {
    jump b26()
  }
  .bb #b20 () {
    let _ = alloc <m16: (int32, int32) heap(2)> <- [0] = 1, [1] = %11
    jump b22(f8.m16)
  }
  .bb #b21 () {
    jump b17(())
  }
  .bb #b22 ((int32, int32)) {
    jump b23($b22.0)
  }
  .bb #b23 ((int32, int32)) {
    jump b10($b23.0)
  }
  .bb #b24 (int32) {
    let %15: bool = eq($b24.0, 0)
    br %15 b20() b21()
  }
  .bb #b25 ((int32, int32)) {
    let %10: int32 = load int32 field($b25.0, 0 * @(@32, @(@32, @32)))
    let %11: int32 = load int32 field($b25.0, 1 * @(@32, @(@32, @32)))
    let %12: bool = eq(%10, 0)
    br %12 b18() b19()
  }
  .bb #b26 () {
    let %17: bool = le($f4, %11)
    br %17 b27() b28()
  }
  .bb #b27 () {
    jump b29(0)
  }
  .bb #b28 () {
    jump b29(1)
  }
  .bb #b29 (int32) {
    jump b24($b29.0)
  }
  .bb #b30 () {
    let %18: (int32, int32) = call f2((), $f1, $f2, $f6, $f7)
    jump b34(%18)
  }
  .bb #b31 () {
    let _ = alloc <m30: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b33(f8.m30)
  }
  .bb #b32 () {
    let %23: int32 = call f3(%20, $f3)
    jump b35(%23)
  }
  .bb #b33 ((int32, int32)) {
    jump b25($b33.0)
  }
  .bb #b34 ((int32, int32)) {
    let %19: int32 = load int32 field($b34.0, 0 * @(@32, @(@32, @32)))
    let %20: int32 = load int32 field($b34.0, 1 * @(@32, @(@32, @32)))
    let %21: bool = eq(%19, 0)
    br %21 b31() b32()
  }
  .bb #b35 (int32) {
    let _ = alloc <m31: (int32, int32) heap(2)> <- [0] = 1, [1] = $b35.0
    jump b33(f8.m31)
  }
}
.fn aux.12701 #f4 : fn(unit, int32, int32, int32, array[int32], array[int32]) -> (int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b8()
  }
  .bb #b1 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b3(f4.m0)
  }
  .bb #b2 () {
    jump b7()
  }
  .bb #b3 ((int32, int32)) {
    return $b3.0
  }
  .bb #b4 ((int32, int32)) {
    let %1: int32 = load int32 field($b4.0, 0 * @(@32, @(@32, @32)))
    let %2: int32 = load int32 field($b4.0, 1 * @(@32, @(@32, @32)))
    let %3: bool = eq(%1, 0)
    br %3 b1() b2()
  }
  .bb #b5 (int32) {
    let _ = alloc <m1: (int32, int32) heap(2)> <- [0] = 1, [1] = $b5.0
    jump b3(f4.m1)
  }
  .bb #b7 () {
    let %7: int32 = add($f3, %2)
    jump b5(%7)
  }
  .bb #b8 () {
    let %8: (int32, int32) = call f0((), $f1, $f4)
    jump b12(%8)
  }
  .bb #b9 () {
    let %12: (int32, int32) = call f1((), $f2, $f5)
    jump b11(%12)
  }
  .bb #b10 () {
    let _ = alloc <m8: (int32, int32) heap(2)> <- [0] = 1, [1] = %10
    jump b11(f4.m8)
  }
  .bb #b11 ((int32, int32)) {
    jump b4($b11.0)
  }
  .bb #b12 ((int32, int32)) {
    let %9: int32 = load int32 field($b12.0, 0 * @(@32, @(@32, @32)))
    let %10: int32 = load int32 field($b12.0, 1 * @(@32, @(@32, @32)))
    let %11: bool = eq(%9, 0)
    br %11 b9() b10()
  }
}
.fn aux.12698 #f1 : fn(unit, int32, array[int32]) -> (int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 field($f2, 0 * @32)
    let %1: bool = eq(%0, $f1)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b3(f1.m0)
  }
  .bb #b2 () {
    let %3: int32 = add(%0, 1)
    let _ = store int32 field($f2, 0 * @32) <- %3
    let _ = alloc <m1: (int32, int32) heap(2)> <- [0] = 1, [1] = %0
    jump b3(f1.m1)
  }
  .bb #b3 ((int32, int32)) {
    return $b3.0
  }
}
.fn aux.12703 #f6 : fn(unit, int32, int32, int32, int32, array[int32], array[int32]) -> (int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1($f0)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
    .block #b6
    .block #b7
    .block #b8
  }
  .bb #b2 (unit) {
    jump b15()
  }
  .bb #b3 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b8(f6.m0)
  }
  .bb #b4 () {
    jump b11()
  }
  .bb #b5 () {
    let _ = alloc <m1: (int32, int32) heap(2)> <- [0] = 1, [1] = %2
    jump b7(f6.m1)
  }
  .bb #b6 () {
    jump b2(())
  }
  .bb #b7 ((int32, int32)) {
    jump b8($b7.0)
  }
  .bb #b8 ((int32, int32)) {
    return $b8.0
  }
  .bb #b9 (int32) {
    let %6: bool = eq($b9.0, 0)
    br %6 b5() b6()
  }
  .bb #b10 ((int32, int32)) {
    let %1: int32 = load int32 field($b10.0, 0 * @(@32, @(@32, @32)))
    let %2: int32 = load int32 field($b10.0, 1 * @(@32, @(@32, @32)))
    let %3: bool = eq(%1, 0)
    br %3 b3() b4()
  }
  .bb #b11 () {
    let %8: bool = le($f4, %2)
    br %8 b12() b13()
  }
  .bb #b12 () {
    jump b14(0)
  }
  .bb #b13 () {
    jump b14(1)
  }
  .bb #b14 (int32) {
    jump b9($b14.0)
  }
  .bb #b15 () {
    let %9: (int32, int32) = call f2((), $f1, $f2, $f5, $f6)
    jump b19(%9)
  }
  .bb #b16 () {
    let _ = alloc <m15: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b18(f6.m15)
  }
  .bb #b17 () {
    let %14: int32 = call f3(%11, $f3)
    jump b20(%14)
  }
  .bb #b18 ((int32, int32)) {
    jump b10($b18.0)
  }
  .bb #b19 ((int32, int32)) {
    let %10: int32 = load int32 field($b19.0, 0 * @(@32, @(@32, @32)))
    let %11: int32 = load int32 field($b19.0, 1 * @(@32, @(@32, @32)))
    let %12: bool = eq(%10, 0)
    br %12 b16() b17()
  }
  .bb #b20 (int32) {
    let _ = alloc <m16: (int32, int32) heap(2)> <- [0] = 1, [1] = $b20.0
    jump b18(f6.m16)
  }
}
.fn aux.12704 #f7 : fn(int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le($f0, $f1)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3(0)
  }
  .bb #b2 () {
    jump b3(1)
  }
  .bb #b3 (int32) {
    return $b3.0
  }
}
.fn aux.12699 #f2 : fn(unit, int32, int32, array[int32], array[int32]) -> (int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b6()
  }
  .bb #b1 () {
    let %4: (int32, int32) = call f1((), $f2, $f4)
    jump b3(%4)
  }
  .bb #b2 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 1, [1] = %2
    jump b3(f2.m0)
  }
  .bb #b3 ((int32, int32)) {
    return $b3.0
  }
  .bb #b4 ((int32, int32)) {
    let %1: int32 = load int32 field($b4.0, 0 * @(@32, @(@32, @32)))
    let %2: int32 = load int32 field($b4.0, 1 * @(@32, @(@32, @32)))
    let %3: bool = eq(%1, 0)
    br %3 b1() b2()
  }
  .bb #b6 () {
    let %6: int32 = load int32 field($f3, 0 * @32)
    let %7: bool = eq(%6, $f1)
    br %7 b7() b8()
  }
  .bb #b7 () {
    let _ = alloc <m6: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b9(f2.m6)
  }
  .bb #b8 () {
    let %9: int32 = add(%6, 1)
    let _ = store int32 field($f3, 0 * @32) <- %9
    let _ = alloc <m7: (int32, int32) heap(2)> <- [0] = 1, [1] = %6
    jump b9(f2.m7)
  }
  .bb #b9 ((int32, int32)) {
    jump b4($b9.0)
  }
}
.fn aux.12702 #f5 : fn(int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le($f1, $f0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3(0)
  }
  .bb #b2 () {
    jump b3(1)
  }
  .bb #b3 (int32) {
    return $b3.0
  }
}
.fn main.12696 #f10 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m1: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m2: closure(unit) -> (int32, int32) heap(8)> <- [0] = f22, [1] = 100, [2] = 1000, [3] = 1, [4] = 50, [5] = 1200, [6] = f10.m0, [7] = f10.m1
    let _ = alloc <m3: closure(int32, int32) -> int32 heap(1)> <- [0] = f24
    jump b1(f10.m2, f10.m3, 0)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
  }
  .bb #b2 (closure(unit) -> (int32, int32), closure(int32, int32) -> int32, int32) {
    let %2: (int32, int32) = apply $b2.0(())
    let %3: int32 = load int32 field(%2, 0 * @(@32, @(@32, @32)))
    let %4: int32 = load int32 field(%2, 1 * @(@32, @(@32, @32)))
    let %5: bool = eq(%3, 0)
    br %5 b3() b4()
  }
  .bb #b3 () {
    let %6: unit = ext_call minimbt_print_int($b2.2)
    let %7: unit = ext_call minimbt_print_char(10)
    jump b5(())
  }
  .bb #b4 () {
    let %8: int32 = apply $b2.1($b2.2, %4)
    jump b2($b2.0, $b2.1, %8)
  }
  .bb #b5 (unit) {
    return $b5.0
  }
}
.fn aux.12707 #f22 : closure(unit) -> (int32, int32)
.freevars (int32, int32, int32, int32, int32, array[int32], array[int32])
.entry b0 {
  .bb #b0 () {
    let %0: (int32, int32) = call f8($f0, ^1, ^2, ^3, ^4, ^5, ^6, ^7)
    return %0
  }
}
.fn add.12708 #f24 : closure(int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f9($f0, $f1)
    return %0
  }
}
.fn T$start #f26 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f10()
    return %0
  }
}
.fn add.12706 #f9 : fn(int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add($f0, $f1)
    return %0
  }
}
.fn aux.12700 #f3 : fn(int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add($f1, $f0)
    return %0
  }
}
.fn aux.12697 #f0 : fn(unit, int32, array[int32]) -> (int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 field($f2, 0 * @32)
    let %1: bool = eq(%0, $f1)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b3(f0.m0)
  }
  .bb #b2 () {
    let %3: int32 = add(%0, 1)
    let _ = store int32 field($f2, 0 * @32) <- %3
    let _ = alloc <m1: (int32, int32) heap(2)> <- [0] = 1, [1] = %0
    jump b3(f0.m1)
  }
  .bb #b3 ((int32, int32)) {
    return $b3.0
  }
}
.thunk ::0 start
