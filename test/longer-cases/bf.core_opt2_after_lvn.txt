# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn main.263 #f5 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap(1024)> <- [..] = 0
    let %1: unit = call f4(0, f5.m0)
    return ()
  }
}
.fn read_prog.264 #f4 : fn(int32, array[int32]) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (int32, array[int32]) {
    let %0: int32 = call f0()
    let %1: bool = eq(%0, -1)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m1: array[int32] heap(1048576)> <- [..] = 0
    let _ = alloc <m2: array[int32] heap(1)> <- [..] = 0
    let %5: int32 = call f3(0, $b0.0, f4.m0, $b0.1, f4.m1, f4.m2)
    jump b3(())
  }
  .bb #b2 () {
    let %8: ptr = compute_address unit offset(0, $b0.0 * @32)
    let _ = store int32 raw($b0.1, %8) <- %0
    let %7: int32 = add($b0.0, 1)
    jump b0(%7, $b0.1)
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1)
  }
}
.fn aux.266 #f3 : fn(int32, int32, array[int32], array[int32], array[int32], array[int32]) -> int32
.freevars ()
.entry b29 {
  .bb #b0 (int32, int32, array[int32], array[int32], array[int32], array[int32]) {
    let %0: bool = le($b0.1, $b0.0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b27($b0.0)
  }
  .bb #b2 () {
    let %75: ptr = compute_address unit offset(0, $b0.0 * @32)
    let %1: int32 = load int32 raw($b0.3, %75)
    let %2: bool = eq(%1, 62)
    br %2 b3() b4()
  }
  .bb #b3 () {
    let %3: int32 = load int32 field($b0.2, 0 * @32)
    let %4: int32 = add(%3, 1)
    let _ = store int32 field($b0.2, 0 * @32) <- %4
    let %6: int32 = add($b0.0, 1)
    jump b0(%6, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b4 () {
    let %8: bool = eq(%1, 60)
    br %8 b5() b6()
  }
  .bb #b5 () {
    let %9: int32 = load int32 field($b0.2, 0 * @32)
    let %10: int32 = sub(%9, 1)
    let _ = store int32 field($b0.2, 0 * @32) <- %10
    let %12: int32 = add($b0.0, 1)
    jump b0(%12, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b6 () {
    let %14: bool = eq(%1, 43)
    br %14 b7() b8()
  }
  .bb #b7 () {
    let %15: int32 = load int32 field($b0.2, 0 * @32)
    let %79: ptr = compute_address unit offset(0, %15 * @32)
    let %17: int32 = load int32 raw($b0.4, %79)
    let %18: int32 = add(%17, 1)
    let _ = store int32 raw($b0.4, %79) <- %18
    let %20: int32 = add($b0.0, 1)
    jump b0(%20, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b8 () {
    let %22: bool = eq(%1, 45)
    br %22 b9() b10()
  }
  .bb #b9 () {
    let %23: int32 = load int32 field($b0.2, 0 * @32)
    let %72: ptr = compute_address unit offset(0, %23 * @32)
    let %25: int32 = load int32 raw($b0.4, %72)
    let %26: int32 = sub(%25, 1)
    let _ = store int32 raw($b0.4, %72) <- %26
    let %28: int32 = add($b0.0, 1)
    jump b0(%28, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b10 () {
    let %30: bool = eq(%1, 46)
    br %30 b11() b12()
  }
  .bb #b11 () {
    let %31: int32 = load int32 field($b0.2, 0 * @32)
    let %76: ptr = compute_address unit offset(0, %31 * @32)
    let %32: int32 = load int32 raw($b0.4, %76)
    let %33: unit = ext_call minimbt_print_char(%32)
    let %34: int32 = add($b0.0, 1)
    jump b0(%34, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b12 () {
    let %36: bool = eq(%1, 44)
    br %36 b13() b14()
  }
  .bb #b13 () {
    let %37: int32 = load int32 field($b0.2, 0 * @32)
    let %38: int32 = call f0()
    let %74: ptr = compute_address unit offset(0, %37 * @32)
    let _ = store int32 raw($b0.4, %74) <- %38
    let %40: int32 = add($b0.0, 1)
    jump b0(%40, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b14 () {
    let %42: bool = eq(%1, 91)
    br %42 b15() b16()
  }
  .bb #b15 () {
    let _ = store int32 field($b0.5, 0 * @32) <- $b0.0
    jump b54()
  }
  .bb #b16 () {
    let %48: bool = eq(%1, 93)
    br %48 b17() b18()
  }
  .bb #b17 () {
    jump b19($b0.0)
  }
  .bb #b18 () {
    jump b19($b0.0)
  }
  .bb #b19 (int32) {
    jump b20($b19.0)
  }
  .bb #b20 (int32) {
    jump b21($b20.0)
  }
  .bb #b21 (int32) {
    jump b22($b21.0)
  }
  .bb #b22 (int32) {
    jump b23($b22.0)
  }
  .bb #b23 (int32) {
    jump b24($b23.0)
  }
  .bb #b24 (int32) {
    jump b25($b24.0)
  }
  .bb #b25 (int32) {
    jump b26($b25.0)
  }
  .bb #b26 (int32) {
    jump b27($b26.0)
  }
  .bb #b27 (int32) {
    return $b27.0
  }
  .loop #b28 pre #Some(b29) header #b0 {
    .block #b23
    .block #b8
    .block #b9
    .block #b16
    .block #b13
    .block #b19
    .block #b26
    .block #b15
    .block #b1
    .block #b11
    .block #b2
    .block #b18
    .block #b24
    .block #b21
    .block #b22
    .block #b20
    .block #b6
    .block #b12
    .block #b4
    .block #b17
    .block #b10
    .block #b25
    .block #b5
    .block #b3
    .block #b14
    .block #b7
    .block #b27
  }
  .bb #b29 () {
    jump b28($f0, $f1, $f2, $f3, $f4, $f5)
  }
  .bb #b30 (unit) {
    let %45: int32 = load int32 field($b0.5, 0 * @32)
    let %46: int32 = add(%45, 1)
    jump b0(%46, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b49 (int32, int32, array[int32], array[int32], array[int32], array[int32]) {
    let %49: int32 = load int32 field($b49.2, 0 * @32)
    let %80: ptr = compute_address unit offset(0, %49 * @32)
    let %50: int32 = load int32 raw($b49.4, %80)
    let %51: bool = eq(%50, 0)
    br %51 b50() b51()
  }
  .bb #b50 () {
    let %52: int32 = add($b49.1, 1)
    jump b72()
  }
  .bb #b51 () {
    let %55: int32 = add($b49.1, 1)
    let %56: int32 = call f3(%55, $b49.0, $b49.2, $b49.3, $b49.4, $b49.5)
    let _ = store int32 field($b49.5, 0 * @32) <- %56
    jump b49($b49.0, $b49.1, $b49.2, $b49.3, $b49.4, $b49.5)
  }
  .bb #b52 (unit) {
    jump b30($b52.0)
  }
  .loop #b53 pre #Some(b54) header #b49 {
    .block #b50
    .block #b51
    .block #b52
  }
  .bb #b54 () {
    jump b53($b0.1, $b0.0, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b55 (int32) {
    let _ = store int32 field($b49.5, 0 * @32) <- $b55.0
    jump b52(())
  }
  .bb #b58 (int32, int32, int32, array[int32]) {
    let %58: bool = le($b58.2, $b58.0)
    br %58 b59() b60()
  }
  .bb #b59 () {
    jump b70($b58.0)
  }
  .bb #b60 () {
    let %73: ptr = compute_address unit offset(0, $b58.0 * @32)
    let %59: int32 = load int32 raw($b58.3, %73)
    let %60: bool = eq(%59, 91)
    br %60 b61() b62()
  }
  .bb #b61 () {
    let %61: int32 = add($b58.0, 1)
    let %62: int32 = add($b58.1, 1)
    jump b58(%61, %62, $b58.2, $b58.3)
  }
  .bb #b62 () {
    let %64: bool = eq(%59, 93)
    br %64 b63() b64()
  }
  .bb #b63 () {
    let %65: bool = eq($b58.1, 0)
    br %65 b65() b66()
  }
  .bb #b64 () {
    let %69: int32 = add($b58.0, 1)
    jump b58(%69, $b58.1, $b58.2, $b58.3)
  }
  .bb #b65 () {
    jump b67($b58.0)
  }
  .bb #b66 () {
    let %66: int32 = add($b58.0, 1)
    let %67: int32 = sub($b58.1, 1)
    jump b58(%66, %67, $b58.2, $b58.3)
  }
  .bb #b67 (int32) {
    jump b68($b67.0)
  }
  .bb #b68 (int32) {
    jump b69($b68.0)
  }
  .bb #b69 (int32) {
    jump b70($b69.0)
  }
  .bb #b70 (int32) {
    jump b55($b70.0)
  }
  .loop #b71 pre #Some(b72) header #b58 {
    .block #b64
    .block #b70
    .block #b62
    .block #b66
    .block #b67
    .block #b59
    .block #b68
    .block #b69
    .block #b63
    .block #b60
    .block #b61
    .block #b65
  }
  .bb #b72 () {
    jump b71(%52, 0, $b49.0, $b49.3)
  }
}
.fn T$start #f12 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f5()
    return %0
  }
}
.fn read_ch_until_newline_or_eof.262 #f0 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = ext_call minimbt_read_char()
    let %1: bool = eq(%0, 10)
    br %1 b1() b2()
  }
  .bb #b1 () {
    jump b6(-1)
  }
  .bb #b2 () {
    let %2: bool = eq(%0, 13)
    br %2 b3() b4()
  }
  .bb #b3 () {
    jump b5(-1)
  }
  .bb #b4 () {
    jump b5(%0)
  }
  .bb #b5 (int32) {
    jump b6($b5.0)
  }
  .bb #b6 (int32) {
    return $b6.0
  }
}
.thunk ::0 start

