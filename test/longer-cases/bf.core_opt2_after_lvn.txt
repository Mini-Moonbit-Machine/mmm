# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn main136l2_9 #f9 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap(1024)> <- [..] = 0
    let %1: int32 = call f0()
    let %2: bool = eq(%1, -1)
    br %2 b1() b2()
  }
  .bb #b1 () {
    let %3: unit = call f4(0, f9.m0)
    jump b3(%3)
  }
  .bb #b2 () {
    let _ = store int32 field(f9.m0, 0 * @32) <- %1
    let %5: int32 = add(0, 1)
    let %6: unit = call f8(%5, f9.m0)
    jump b3(%6)
  }
  .bb #b3 (unit) {
    return ()
  }
}
.fn bf5l1_4 #f4 : fn(int32, array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = 0
    let %1: int32 = mul(1024, 1024)
    let _ = alloc <m1: array[int32] heap(%1)> <- [..] = 0
    let _ = alloc <m2: array[int32] heap(1)> <- [..] = 0
    let %4: int32 = call f3(0, f4.m0, $f0, f4.m1, $f1, f4.m2)
    return ()
  }
}
.fn T$start_20 #f20 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f9()
    return %0
  }
}
.fn read_ch_until_newline_or_eof1l0_0 #f0 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = ext_call minimbt_read_char()
    let %1: bool = eq(%0, 10)
    br %1 b1() b2()
  }
  .bb #b1 () {
    jump b6(-1)
  }
  .bb #b2 () {
    let %2: bool = eq(%0, 13)
    br %2 b3() b4()
  }
  .bb #b3 () {
    jump b5(-1)
  }
  .bb #b4 () {
    jump b5(%0)
  }
  .bb #b5 (int32) {
    jump b6($b5.0)
  }
  .bb #b6 (int32) {
    return $b6.0
  }
}
.fn aux40l3_3 #f3 : fn(int32, array[int32], int32, array[int32], array[int32], array[int32]) -> int32
.freevars ()
.entry b35 {
  .bb #b0 (int32, array[int32], int32, array[int32], array[int32], array[int32]) {
    let %0: bool = le($b0.2, $b0.0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b33($b0.0)
  }
  .bb #b2 () {
    let %1: int32 = load int32 offset($b0.4, $b0.0 * @32)
    let %2: bool = eq(%1, 62)
    br %2 b3() b4()
  }
  .bb #b3 () {
    let %3: int32 = load int32 field($b0.1, 0 * @32)
    let %4: int32 = add(%3, 1)
    let _ = store int32 field($b0.1, 0 * @32) <- %4
    let %6: int32 = add($b0.0, 1)
    jump b0(%6, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b4 () {
    let %8: bool = eq(%1, 60)
    br %8 b5() b6()
  }
  .bb #b5 () {
    let %9: int32 = load int32 field($b0.1, 0 * @32)
    let %10: int32 = sub(%9, 1)
    let _ = store int32 field($b0.1, 0 * @32) <- %10
    let %12: int32 = add($b0.0, 1)
    jump b0(%12, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b6 () {
    let %14: bool = eq(%1, 43)
    br %14 b7() b8()
  }
  .bb #b7 () {
    let %15: int32 = load int32 field($b0.1, 0 * @32)
    let %17: int32 = load int32 offset($b0.3, %15 * @32)
    let %18: int32 = add(%17, 1)
    let _ = store int32 offset($b0.3, %15 * @32) <- %18
    let %20: int32 = add($b0.0, 1)
    jump b0(%20, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b8 () {
    let %22: bool = eq(%1, 45)
    br %22 b9() b10()
  }
  .bb #b9 () {
    let %23: int32 = load int32 field($b0.1, 0 * @32)
    let %25: int32 = load int32 offset($b0.3, %23 * @32)
    let %26: int32 = sub(%25, 1)
    let _ = store int32 offset($b0.3, %23 * @32) <- %26
    let %28: int32 = add($b0.0, 1)
    jump b0(%28, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b10 () {
    let %30: bool = eq(%1, 46)
    br %30 b11() b12()
  }
  .bb #b11 () {
    let %31: int32 = load int32 field($b0.1, 0 * @32)
    let %32: int32 = load int32 offset($b0.3, %31 * @32)
    let %33: unit = ext_call minimbt_print_char(%32)
    let %34: int32 = add($b0.0, 1)
    jump b0(%34, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b12 () {
    let %36: bool = eq(%1, 44)
    br %36 b13() b14()
  }
  .bb #b13 () {
    let %37: int32 = load int32 field($b0.1, 0 * @32)
    let %38: int32 = ext_call minimbt_read_char()
    let %39: bool = eq(%38, 10)
    br %39 b15() b16()
  }
  .bb #b14 () {
    let %44: bool = eq(%1, 91)
    br %44 b21() b22()
  }
  .bb #b15 () {
    jump b20(-1)
  }
  .bb #b16 () {
    let %40: bool = eq(%38, 13)
    br %40 b17() b18()
  }
  .bb #b17 () {
    jump b19(-1)
  }
  .bb #b18 () {
    jump b19(%38)
  }
  .bb #b19 (int32) {
    jump b20($b19.0)
  }
  .bb #b20 (int32) {
    let _ = store int32 offset($b0.3, %37 * @32) <- $b20.0
    let %42: int32 = add($b0.0, 1)
    jump b0(%42, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b21 () {
    let _ = store int32 field($b0.5, 0 * @32) <- $b0.0
    jump b56()
  }
  .bb #b22 () {
    let %50: bool = eq(%1, 93)
    br %50 b23() b24()
  }
  .bb #b23 () {
    jump b25($b0.0)
  }
  .bb #b24 () {
    jump b25($b0.0)
  }
  .bb #b25 (int32) {
    jump b26($b25.0)
  }
  .bb #b26 (int32) {
    jump b27($b26.0)
  }
  .bb #b27 (int32) {
    jump b28($b27.0)
  }
  .bb #b28 (int32) {
    jump b29($b28.0)
  }
  .bb #b29 (int32) {
    jump b30($b29.0)
  }
  .bb #b30 (int32) {
    jump b31($b30.0)
  }
  .bb #b31 (int32) {
    jump b32($b31.0)
  }
  .bb #b32 (int32) {
    jump b33($b32.0)
  }
  .bb #b33 (int32) {
    return $b33.0
  }
  .loop #b34 pre #Some(b35) header #b0 {
    .block #b9
    .block #b28
    .block #b13
    .block #b26
    .block #b32
    .block #b15
    .block #b1
    .block #b2
    .block #b22
    .block #b6
    .block #b12
    .block #b31
    .block #b10
    .block #b25
    .block #b5
    .block #b29
    .block #b14
    .block #b30
    .block #b27
    .block #b23
    .block #b8
    .block #b16
    .block #b19
    .block #b11
    .block #b18
    .block #b24
    .block #b21
    .block #b20
    .block #b4
    .block #b17
    .block #b33
    .block #b3
    .block #b7
  }
  .bb #b35 () {
    jump b34($f0, $f1, $f2, $f3, $f4, $f5)
  }
  .bb #b36 (unit) {
    let %47: int32 = load int32 field($b0.5, 0 * @32)
    let %48: int32 = add(%47, 1)
    jump b0(%48, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b51 (array[int32], int32, int32, array[int32], array[int32], array[int32]) {
    let %51: int32 = load int32 field($b51.0, 0 * @32)
    let %52: int32 = load int32 offset($b51.3, %51 * @32)
    let %53: bool = eq(%52, 0)
    br %53 b52() b53()
  }
  .bb #b52 () {
    let %54: int32 = add($b51.2, 1)
    jump b74()
  }
  .bb #b53 () {
    let %57: int32 = add($b51.2, 1)
    let %58: int32 = call f3(%57, $b51.0, $b51.1, $b51.3, $b51.4, $b51.5)
    let _ = store int32 field($b51.5, 0 * @32) <- %58
    jump b51($b51.0, $b51.1, $b51.2, $b51.3, $b51.4, $b51.5)
  }
  .bb #b54 (unit) {
    jump b36($b54.0)
  }
  .loop #b55 pre #Some(b56) header #b51 {
    .block #b52
    .block #b53
    .block #b54
  }
  .bb #b56 () {
    jump b55($b0.1, $b0.2, $b0.0, $b0.3, $b0.4, $b0.5)
  }
  .bb #b57 (int32) {
    let _ = store int32 field($b51.5, 0 * @32) <- $b57.0
    jump b54(())
  }
  .bb #b60 (int32, int32, int32, array[int32]) {
    let %60: bool = le($b60.2, $b60.0)
    br %60 b61() b62()
  }
  .bb #b61 () {
    jump b72($b60.0)
  }
  .bb #b62 () {
    let %61: int32 = load int32 offset($b60.3, $b60.0 * @32)
    let %62: bool = eq(%61, 91)
    br %62 b63() b64()
  }
  .bb #b63 () {
    let %63: int32 = add($b60.0, 1)
    let %64: int32 = add($b60.1, 1)
    jump b60(%63, %64, $b60.2, $b60.3)
  }
  .bb #b64 () {
    let %66: bool = eq(%61, 93)
    br %66 b65() b66()
  }
  .bb #b65 () {
    let %67: bool = eq($b60.1, 0)
    br %67 b67() b68()
  }
  .bb #b66 () {
    let %71: int32 = add($b60.0, 1)
    jump b60(%71, $b60.1, $b60.2, $b60.3)
  }
  .bb #b67 () {
    jump b69($b60.0)
  }
  .bb #b68 () {
    let %68: int32 = add($b60.0, 1)
    let %69: int32 = sub($b60.1, 1)
    jump b60(%68, %69, $b60.2, $b60.3)
  }
  .bb #b69 (int32) {
    jump b70($b69.0)
  }
  .bb #b70 (int32) {
    jump b71($b70.0)
  }
  .bb #b71 (int32) {
    jump b72($b71.0)
  }
  .bb #b72 (int32) {
    jump b57($b72.0)
  }
  .loop #b73 pre #Some(b74) header #b60 {
    .block #b66
    .block #b72
    .block #b64
    .block #b68
    .block #b69
    .block #b61
    .block #b70
    .block #b71
    .block #b65
    .block #b62
    .block #b63
    .block #b67
  }
  .bb #b74 () {
    jump b73(%54, 0, $b51.1, $b51.4)
  }
}
.fn read_prog140l3_8 #f8 : fn(int32, array[int32]) -> unit
.freevars ()
.entry b14 {
  .bb #b0 (int32, array[int32]) {
    let %0: int32 = ext_call minimbt_read_char()
    let %1: bool = eq(%0, 10)
    br %1 b1() b2()
  }
  .bb #b1 () {
    jump b6(-1)
  }
  .bb #b2 () {
    let %2: bool = eq(%0, 13)
    br %2 b3() b4()
  }
  .bb #b3 () {
    jump b5(-1)
  }
  .bb #b4 () {
    jump b5(%0)
  }
  .bb #b5 (int32) {
    jump b6($b5.0)
  }
  .bb #b6 (int32) {
    let %3: bool = eq($b6.0, -1)
    br %3 b7() b8()
  }
  .bb #b7 () {
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = 0
    let %5: int32 = mul(1024, 1024)
    let _ = alloc <m1: array[int32] heap(%5)> <- [..] = 0
    let _ = alloc <m2: array[int32] heap(1)> <- [..] = 0
    let %8: int32 = call f7(0, f8.m0, $b0.0, $b0.1, f8.m1, f8.m2)
    jump b12(())
  }
  .bb #b8 () {
    let _ = store int32 offset($b0.1, $b0.0 * @32) <- $b6.0
    let %10: int32 = add($b0.0, 1)
    let %11: int32 = call f0()
    let %12: bool = eq(%11, -1)
    br %12 b9() b10()
  }
  .bb #b9 () {
    let %13: unit = call f4(%10, $b0.1)
    jump b11(%13)
  }
  .bb #b10 () {
    let _ = store int32 offset($b0.1, %10 * @32) <- %11
    let %15: int32 = add(%10, 1)
    jump b0(%15, $b0.1)
  }
  .bb #b11 (unit) {
    jump b12($b11.0)
  }
  .bb #b12 (unit) {
    return $b12.0
  }
  .loop #b13 pre #Some(b14) header #b0 {
    .block #b6
    .block #b12
    .block #b4
    .block #b8
    .block #b9
    .block #b1
    .block #b10
    .block #b11
    .block #b5
    .block #b2
    .block #b3
    .block #b7
  }
  .bb #b14 () {
    jump b13($f0, $f1)
  }
}
.fn aux40.186l5_7 #f7 : fn(int32, array[int32], int32, array[int32], array[int32], array[int32]) -> int32
.freevars ()
.entry b29 {
  .bb #b0 (int32, array[int32], int32, array[int32], array[int32], array[int32]) {
    let %0: bool = le($b0.2, $b0.0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b27($b0.0)
  }
  .bb #b2 () {
    let %1: int32 = load int32 offset($b0.3, $b0.0 * @32)
    let %2: bool = eq(%1, 62)
    br %2 b3() b4()
  }
  .bb #b3 () {
    let %3: int32 = load int32 field($b0.1, 0 * @32)
    let %4: int32 = add(%3, 1)
    let _ = store int32 field($b0.1, 0 * @32) <- %4
    let %6: int32 = add($b0.0, 1)
    jump b0(%6, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b4 () {
    let %8: bool = eq(%1, 60)
    br %8 b5() b6()
  }
  .bb #b5 () {
    let %9: int32 = load int32 field($b0.1, 0 * @32)
    let %10: int32 = sub(%9, 1)
    let _ = store int32 field($b0.1, 0 * @32) <- %10
    let %12: int32 = add($b0.0, 1)
    jump b0(%12, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b6 () {
    let %14: bool = eq(%1, 43)
    br %14 b7() b8()
  }
  .bb #b7 () {
    let %15: int32 = load int32 field($b0.1, 0 * @32)
    let %17: int32 = load int32 offset($b0.4, %15 * @32)
    let %18: int32 = add(%17, 1)
    let _ = store int32 offset($b0.4, %15 * @32) <- %18
    let %20: int32 = add($b0.0, 1)
    jump b0(%20, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b8 () {
    let %22: bool = eq(%1, 45)
    br %22 b9() b10()
  }
  .bb #b9 () {
    let %23: int32 = load int32 field($b0.1, 0 * @32)
    let %25: int32 = load int32 offset($b0.4, %23 * @32)
    let %26: int32 = sub(%25, 1)
    let _ = store int32 offset($b0.4, %23 * @32) <- %26
    let %28: int32 = add($b0.0, 1)
    jump b0(%28, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b10 () {
    let %30: bool = eq(%1, 46)
    br %30 b11() b12()
  }
  .bb #b11 () {
    let %31: int32 = load int32 field($b0.1, 0 * @32)
    let %32: int32 = load int32 offset($b0.4, %31 * @32)
    let %33: unit = ext_call minimbt_print_char(%32)
    let %34: int32 = add($b0.0, 1)
    jump b0(%34, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b12 () {
    let %36: bool = eq(%1, 44)
    br %36 b13() b14()
  }
  .bb #b13 () {
    let %37: int32 = load int32 field($b0.1, 0 * @32)
    let %38: int32 = call f0()
    let _ = store int32 offset($b0.4, %37 * @32) <- %38
    let %40: int32 = add($b0.0, 1)
    jump b0(%40, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b14 () {
    let %42: bool = eq(%1, 91)
    br %42 b15() b16()
  }
  .bb #b15 () {
    let _ = store int32 field($b0.5, 0 * @32) <- $b0.0
    jump b54()
  }
  .bb #b16 () {
    let %48: bool = eq(%1, 93)
    br %48 b17() b18()
  }
  .bb #b17 () {
    jump b19($b0.0)
  }
  .bb #b18 () {
    jump b19($b0.0)
  }
  .bb #b19 (int32) {
    jump b20($b19.0)
  }
  .bb #b20 (int32) {
    jump b21($b20.0)
  }
  .bb #b21 (int32) {
    jump b22($b21.0)
  }
  .bb #b22 (int32) {
    jump b23($b22.0)
  }
  .bb #b23 (int32) {
    jump b24($b23.0)
  }
  .bb #b24 (int32) {
    jump b25($b24.0)
  }
  .bb #b25 (int32) {
    jump b26($b25.0)
  }
  .bb #b26 (int32) {
    jump b27($b26.0)
  }
  .bb #b27 (int32) {
    return $b27.0
  }
  .loop #b28 pre #Some(b29) header #b0 {
    .block #b23
    .block #b8
    .block #b9
    .block #b16
    .block #b13
    .block #b19
    .block #b26
    .block #b15
    .block #b1
    .block #b11
    .block #b2
    .block #b18
    .block #b24
    .block #b21
    .block #b22
    .block #b20
    .block #b6
    .block #b12
    .block #b4
    .block #b17
    .block #b10
    .block #b25
    .block #b5
    .block #b3
    .block #b14
    .block #b7
    .block #b27
  }
  .bb #b29 () {
    jump b28($f0, $f1, $f2, $f3, $f4, $f5)
  }
  .bb #b30 (unit) {
    let %45: int32 = load int32 field($b0.5, 0 * @32)
    let %46: int32 = add(%45, 1)
    jump b0(%46, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b49 (array[int32], int32, int32, array[int32], array[int32], array[int32]) {
    let %49: int32 = load int32 field($b49.0, 0 * @32)
    let %50: int32 = load int32 offset($b49.4, %49 * @32)
    let %51: bool = eq(%50, 0)
    br %51 b50() b51()
  }
  .bb #b50 () {
    let %52: int32 = add($b49.2, 1)
    jump b72()
  }
  .bb #b51 () {
    let %55: int32 = add($b49.2, 1)
    let %56: int32 = call f7(%55, $b49.0, $b49.1, $b49.3, $b49.4, $b49.5)
    let _ = store int32 field($b49.5, 0 * @32) <- %56
    jump b49($b49.0, $b49.1, $b49.2, $b49.3, $b49.4, $b49.5)
  }
  .bb #b52 (unit) {
    jump b30($b52.0)
  }
  .loop #b53 pre #Some(b54) header #b49 {
    .block #b50
    .block #b51
    .block #b52
  }
  .bb #b54 () {
    jump b53($b0.1, $b0.2, $b0.0, $b0.3, $b0.4, $b0.5)
  }
  .bb #b55 (int32) {
    let _ = store int32 field($b49.5, 0 * @32) <- $b55.0
    jump b52(())
  }
  .bb #b58 (int32, int32, int32, array[int32]) {
    let %58: bool = le($b58.2, $b58.0)
    br %58 b59() b60()
  }
  .bb #b59 () {
    jump b70($b58.0)
  }
  .bb #b60 () {
    let %59: int32 = load int32 offset($b58.3, $b58.0 * @32)
    let %60: bool = eq(%59, 91)
    br %60 b61() b62()
  }
  .bb #b61 () {
    let %61: int32 = add($b58.0, 1)
    let %62: int32 = add($b58.1, 1)
    jump b58(%61, %62, $b58.2, $b58.3)
  }
  .bb #b62 () {
    let %64: bool = eq(%59, 93)
    br %64 b63() b64()
  }
  .bb #b63 () {
    let %65: bool = eq($b58.1, 0)
    br %65 b65() b66()
  }
  .bb #b64 () {
    let %69: int32 = add($b58.0, 1)
    jump b58(%69, $b58.1, $b58.2, $b58.3)
  }
  .bb #b65 () {
    jump b67($b58.0)
  }
  .bb #b66 () {
    let %66: int32 = add($b58.0, 1)
    let %67: int32 = sub($b58.1, 1)
    jump b58(%66, %67, $b58.2, $b58.3)
  }
  .bb #b67 (int32) {
    jump b68($b67.0)
  }
  .bb #b68 (int32) {
    jump b69($b68.0)
  }
  .bb #b69 (int32) {
    jump b70($b69.0)
  }
  .bb #b70 (int32) {
    jump b55($b70.0)
  }
  .loop #b71 pre #Some(b72) header #b58 {
    .block #b64
    .block #b70
    .block #b62
    .block #b66
    .block #b67
    .block #b59
    .block #b68
    .block #b69
    .block #b63
    .block #b60
    .block #b61
    .block #b65
  }
  .bb #b72 () {
    jump b71(%52, 0, $b49.1, $b49.3)
  }
}
.thunk ::0 start
