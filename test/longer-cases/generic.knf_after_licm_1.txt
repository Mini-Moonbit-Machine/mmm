let rec next.159: Bool = (i.134: Var({val: Some(Int)}), arr.36: Array(Int)) {
  let _135: Int = Int(1)
  let _136: Int = Int(4)
  if (i.134 <= _136) then {
    let _137: Named("T") = Get arr.36[i.134]
    let _154: Unit = ExtApply(minimbt_print_int, [_137, ])
    let _138: Bool = Bool(true)
    let _139: Bool = Bool(true)
    if (_138 == _139) then {
      let _140: Int = Int(1)
      let _141: Int = Add(i.134, _140)
      Apply(next.159, [_141, arr.36, ])
    } else {
      Bool(false)
    }
  } else {
    Bool(false)
  }
}
let rec do.158: Var({val: Some(Unit)}) = (arr.36: Array(Int)) {
  let _142: Int = Int(0)
  let _113: Bool = Apply(next.159, [_142, arr.36, ])
  let _114: Bool = Bool(true)
  if (_113 == _114) then {
    Apply(do.158, [arr.36, ])
  } else {
    Unit
  }
}
let rec next.161: Bool = (i.145: Var({val: Some(Int)}), arr.66: Array(Double)) {
  let _146: Int = Int(1)
  let _147: Int = Int(5)
  if (i.145 <= _147) then {
    let _148: Named("T") = Get arr.66[i.145]
    let _155: Int = ExtApply(minimbt_int_of_float, [_148, ])
    let _156: Unit = ExtApply(minimbt_print_int, [_155, ])
    let _149: Bool = Bool(true)
    let _150: Bool = Bool(true)
    if (_149 == _150) then {
      let _151: Int = Int(1)
      let _152: Int = Add(i.145, _151)
      Apply(next.161, [_152, arr.66, ])
    } else {
      Bool(false)
    }
  } else {
    Bool(false)
  }
}
let rec do.160: Var({val: Some(Unit)}) = (arr.66: Array(Double)) {
  let _153: Int = Int(0)
  let _131: Bool = Apply(next.161, [_153, arr.66, ])
  let _132: Bool = Bool(true)
  if (_131 == _132) then {
    Apply(do.160, [arr.66, ])
  } else {
    Unit
  }
}
let rec main.157: Var({val: Some(Unit)}) = () {
  let _34: Int = Int(5)
  let _35: Int = Int(1)
  let arr.36: Array(Int) = ExtApply(minimbt_create_array, [_34, _35, ])
  let _37: Int = Int(0)
  let _38: Int = Int(1)
  let _40: Unit = Put arr.36[_37] = _38
  let _41: Int = Int(1)
  let _42: Int = Int(2)
  let _44: Unit = Put arr.36[_41] = _42
  let _45: Int = Int(2)
  let _46: Int = Int(3)
  let _48: Unit = Put arr.36[_45] = _46
  let _49: Int = Int(3)
  let _50: Int = Int(4)
  let _52: Unit = Put arr.36[_49] = _50
  let _53: Int = Int(4)
  let _54: Int = Int(5)
  let _56: Unit = Put arr.36[_53] = _54
  let _57: Int = Int(5)
  let _63: Unit = Apply(do.158, [arr.36, ])
  let _64: Int = Int(6)
  let _65: Double = Double(0)
  let arr.66: Array(Double) = ExtApply(minimbt_create_float_array, [_64, _65, ])
  let _67: Int = Int(0)
  let _68: Double = Double(1)
  let _70: Unit = Put arr.66[_67] = _68
  let _71: Int = Int(1)
  let _72: Double = Double(2)
  let _74: Unit = Put arr.66[_71] = _72
  let _75: Int = Int(2)
  let _76: Double = Double(3)
  let _78: Unit = Put arr.66[_75] = _76
  let _79: Int = Int(3)
  let _80: Double = Double(4)
  let _82: Unit = Put arr.66[_79] = _80
  let _83: Int = Int(4)
  let _84: Double = Double(5)
  let _86: Unit = Put arr.66[_83] = _84
  let _87: Int = Int(5)
  let _88: Double = Double(6)
  let _90: Unit = Put arr.66[_87] = _88
  let _91: Int = Int(6)
  Apply(do.160, [arr.66, ])
}
Apply(main.157, [])
