# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn aux117.218_18 #f18 : closure(int32) -> int32
.freevars (int32)
.entry b0 {
  .bb #b0 () {
    let %0: bool = le($f0, ^1)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3(0)
  }
  .bb #b2 () {
    jump b3(1)
  }
  .bb #b3 (int32) {
    return $b3.0
  }
}
.fn add102.233_22 #f22 : closure(int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add($f0, $f1)
    return %0
  }
}
.fn aux6.192_12 #f12 : closure(unit) -> (int32, int32)
.freevars (closure(unit) -> (int32, int32), closure(int32) -> int32)
.entry b0 {
  .bb #b0 () {
    let %0: (int32, int32) = apply ^1(())
    let %1: int32 = load int32 field(%0, 0 * @(@32, @(@32, @32)))
    let %2: int32 = load int32 field(%0, 1 * @(@32, @(@32, @32)))
    let %3: bool = eq(%1, 0)
    br %3 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b3(f12.m0)
  }
  .bb #b2 () {
    let %5: int32 = apply ^2(%2)
    let _ = alloc <m1: (int32, int32) heap(2)> <- [0] = 1, [1] = %5
    jump b3(f12.m1)
  }
  .bb #b3 ((int32, int32)) {
    return $b3.0
  }
}
.fn aux65.170_6 #f6 : closure(unit) -> (int32, int32)
.freevars (array[int32], int32)
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 field(^1, 0 * @32)
    let %1: bool = eq(%0, ^2)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b3(f6.m0)
  }
  .bb #b2 () {
    let %3: int32 = add(%0, 1)
    let _ = store int32 field(^1, 0 * @32) <- %3
    let _ = alloc <m1: (int32, int32) heap(2)> <- [0] = 1, [1] = %0
    jump b3(f6.m1)
  }
  .bb #b3 ((int32, int32)) {
    return $b3.0
  }
}
.fn aux25.205_16 #f16 : closure(unit) -> (int32, int32)
.freevars (closure(unit) -> (int32, int32), closure(int32) -> int32)
.entry b8 {
  .bb #b0 (unit) {
    let %0: (int32, int32) = apply ^1(())
    let %1: int32 = load int32 field(%0, 0 * @(@32, @(@32, @32)))
    let %2: int32 = load int32 field(%0, 1 * @(@32, @(@32, @32)))
    let %3: bool = eq(%1, 0)
    br %3 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b6(f16.m0)
  }
  .bb #b2 () {
    let %5: int32 = apply ^2(%2)
    let %6: bool = eq(%5, 0)
    br %6 b3() b4()
  }
  .bb #b3 () {
    let _ = alloc <m1: (int32, int32) heap(2)> <- [0] = 1, [1] = %2
    jump b5(f16.m1)
  }
  .bb #b4 () {
    jump b0(())
  }
  .bb #b5 ((int32, int32)) {
    jump b6($b5.0)
  }
  .bb #b6 ((int32, int32)) {
    return $b6.0
  }
  .loop #b7 header #b0 {
    .block #b6
    .block #b4
    .block #b1
    .block #b5
    .block #b2
    .block #b3
  }
  .bb #b8 () {
    jump b7($f0)
  }
}
.fn T$start_24 #f24 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f1()
    return %0
  }
}
.fn aux111.203_14 #f14 : closure(int32) -> int32
.freevars (int32)
.entry b0 {
  .bb #b0 () {
    let %0: bool = le(^1, $f0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3(0)
  }
  .bb #b2 () {
    jump b3(1)
  }
  .bb #b3 (int32) {
    return $b3.0
  }
}
.fn aux65.157_4 #f4 : closure(unit) -> (int32, int32)
.freevars (array[int32], int32)
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 field(^1, 0 * @32)
    let %1: bool = eq(%0, ^2)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b3(f4.m0)
  }
  .bb #b2 () {
    let %3: int32 = add(%0, 1)
    let _ = store int32 field(^1, 0 * @32) <- %3
    let _ = alloc <m1: (int32, int32) heap(2)> <- [0] = 1, [1] = %0
    jump b3(f4.m1)
  }
  .bb #b3 ((int32, int32)) {
    return $b3.0
  }
}
.fn fold84_0 #f0 : fn(closure(unit) -> (int32, int32), closure(int32, int32) -> int32, int32) -> int32
.freevars ()
.entry b8 {
  .bb #b0 (closure(unit) -> (int32, int32), closure(int32, int32) -> int32, int32) {
    let %0: (int32, int32) = apply $b0.0(())
    let %1: int32 = load int32 field(%0, 0 * @(@32, @(@32, @32)))
    let %2: int32 = load int32 field(%0, 1 * @(@32, @(@32, @32)))
    let %3: bool = eq(%1, 0)
    br %3 b1() b2()
  }
  .bb #b1 () {
    jump b6($b0.2)
  }
  .bb #b2 () {
    let %4: int32 = apply $b0.1($b0.2, %2)
    let %5: (int32, int32) = apply $b0.0(())
    let %6: int32 = load int32 field(%5, 0 * @(@32, @(@32, @32)))
    let %7: int32 = load int32 field(%5, 1 * @(@32, @(@32, @32)))
    let %8: bool = eq(%6, 0)
    br %8 b3() b4()
  }
  .bb #b3 () {
    jump b5(%4)
  }
  .bb #b4 () {
    let %9: int32 = apply $b0.1(%4, %7)
    jump b0($b0.0, $b0.1, %9)
  }
  .bb #b5 (int32) {
    jump b6($b5.0)
  }
  .bb #b6 (int32) {
    return $b6.0
  }
  .loop #b7 header #b0 {
    .block #b6
    .block #b4
    .block #b1
    .block #b5
    .block #b2
    .block #b3
  }
  .bb #b8 () {
    jump b7($f0, $f1, $f2)
  }
}
.fn aux46.181_8 #f8 : closure(unit) -> (int32, int32)
.freevars (closure(unit) -> (int32, int32), closure(unit) -> (int32, int32))
.entry b0 {
  .bb #b0 () {
    let %0: (int32, int32) = apply ^1(())
    let %1: int32 = load int32 field(%0, 0 * @(@32, @(@32, @32)))
    let %2: int32 = load int32 field(%0, 1 * @(@32, @(@32, @32)))
    let %3: bool = eq(%1, 0)
    br %3 b1() b2()
  }
  .bb #b1 () {
    let %4: (int32, int32) = apply ^2(())
    jump b3(%4)
  }
  .bb #b2 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 1, [1] = %2
    jump b3(f8.m0)
  }
  .bb #b3 ((int32, int32)) {
    return $b3.0
  }
}
.fn main120_1 #f1 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m1: closure(unit) -> (int32, int32) heap(3)> <- [0] = f4, [1] = f1.m0, [2] = 100
    let _ = alloc <m2: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m3: closure(unit) -> (int32, int32) heap(3)> <- [0] = f6, [1] = f1.m2, [2] = 1000
    let _ = alloc <m4: closure(unit) -> (int32, int32) heap(3)> <- [0] = f8, [1] = f1.m1, [2] = f1.m3
    let _ = alloc <m5: closure(int32) -> int32 heap(2)> <- [0] = f10, [1] = 1
    let _ = alloc <m6: closure(unit) -> (int32, int32) heap(3)> <- [0] = f12, [1] = f1.m4, [2] = f1.m5
    let _ = alloc <m7: closure(int32) -> int32 heap(2)> <- [0] = f14, [1] = 50
    let _ = alloc <m8: closure(unit) -> (int32, int32) heap(3)> <- [0] = f16, [1] = f1.m6, [2] = f1.m7
    let _ = alloc <m9: closure(int32) -> int32 heap(2)> <- [0] = f18, [1] = 1200
    let _ = alloc <m10: closure(unit) -> (int32, int32) heap(3)> <- [0] = f20, [1] = f1.m8, [2] = f1.m9
    let _ = alloc <m11: closure(int32, int32) -> int32 heap(1)> <- [0] = f22
    let %12: int32 = call f0(f1.m10, f1.m11, 0)
    let %13: unit = ext_call minimbt_print_int(%12)
    let %14: unit = ext_call minimbt_print_char(10)
    return ()
  }
}
.fn aux25.220_20 #f20 : closure(unit) -> (int32, int32)
.freevars (closure(unit) -> (int32, int32), closure(int32) -> int32)
.entry b8 {
  .bb #b0 (unit) {
    let %0: (int32, int32) = apply ^1(())
    let %1: int32 = load int32 field(%0, 0 * @(@32, @(@32, @32)))
    let %2: int32 = load int32 field(%0, 1 * @(@32, @(@32, @32)))
    let %3: bool = eq(%1, 0)
    br %3 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
    jump b6(f20.m0)
  }
  .bb #b2 () {
    let %5: int32 = apply ^2(%2)
    let %6: bool = eq(%5, 0)
    br %6 b3() b4()
  }
  .bb #b3 () {
    let _ = alloc <m1: (int32, int32) heap(2)> <- [0] = 1, [1] = %2
    jump b5(f20.m1)
  }
  .bb #b4 () {
    jump b0(())
  }
  .bb #b5 ((int32, int32)) {
    jump b6($b5.0)
  }
  .bb #b6 ((int32, int32)) {
    return $b6.0
  }
  .loop #b7 header #b0 {
    .block #b6
    .block #b4
    .block #b1
    .block #b5
    .block #b2
    .block #b3
  }
  .bb #b8 () {
    jump b7($f0)
  }
}
.fn aux81.190_10 #f10 : closure(int32) -> int32
.freevars (int32)
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add(^1, $f0)
    return %0
  }
}
.thunk ::0 start
