let unmem_magic.1: Int = Int(-1919810)
let rec fib.21: Int = (n.22: Int) {
  let _23: Int = Int(1)
  let _24: Int = Add(n.22, _23)
  let cache.32: Array(Int) = ExtApply(minimbt_create_array, [_24, unmem_magic.1, ])
  let rec memed.33: Int = (n.34: Int) {
    let _35: Int = Get cache.32[n.34]
    if (_35 == unmem_magic.1) then {
      let _38: Int = Int(1)
      if (n.34 <= _38) then {
        let res.36: Int = Var(n.34)
        let _37: Unit = Put cache.32[n.34] = res.36
        Var(res.36)
      } else {
        let _39: Int = Int(1)
        let _40: Int = Sub(n.34, _39)
        let _41: Int = Apply(memed.33, [_40, ])
        let _42: Int = Int(2)
        let _43: Int = Sub(n.34, _42)
        let _44: Int = Apply(memed.33, [_43, ])
        let res.36: Int = Add(_41, _44)
        let _37: Unit = Put cache.32[n.34] = res.36
        Var(res.36)
      }
    } else {
      Get cache.32[n.34]
    }
  }
  Apply(memed.33, [n.22, ])
}
let rec main.26: Var({val: Some(Unit)}) = () {
  let n.27: Int = ExtApply(minimbt_read_int, [])
  let _28: Int = Apply(fib.21, [n.27, ])
  let _29: Unit = ExtApply(minimbt_print_int, [_28, ])
  let _30: Int = Int(10)
  let _31: Unit = ExtApply(minimbt_print_char, [_30, ])
  Unit
}
Apply(main.26, [])