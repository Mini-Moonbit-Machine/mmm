# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn input.272 #f9 : fn(int32, array[int32], int32) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (int32, array[int32], int32) {
    let %0: int32 = sub($b0.2, 1)
    let %1: bool = le($b0.0, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = ext_call minimbt_read_int()
    let _ = store int32 offset($b0.1, $b0.0 * @32) <- %2
    let %4: int32 = add($b0.0, 1)
    jump b0(%4, $b0.1, $b0.2)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1, $f2)
  }
}
.fn sort_2.269 #f6 : fn(int32, int32, array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 offset($f2, $f1 * @32)
    let %1: int32 = load int32 offset($f2, $f0 * @32)
    let %2: int32 = sub(%1, 1)
    let %3: bool = le(%0, %2)
    br %3 b1() b2()
  }
  .bb #b1 () {
    let %4: int32 = load int32 offset($f2, $f0 * @32)
    let %5: int32 = load int32 offset($f2, $f1 * @32)
    let _ = store int32 offset($f2, $f0 * @32) <- %5
    let _ = store int32 offset($f2, $f1 * @32) <- %4
    let %8: int32 = load int32 field($f3, 0 * @32)
    let %9: int32 = add(%8, 1)
    let _ = store int32 field($f3, 0 * @32) <- %9
    jump b3(())
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn main.271 #f10 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = ext_call minimbt_read_int()
    let _ = alloc <m0: array[int32] heap(%0)> <- [..] = 0
    let %2: unit = call f9(0, f10.m0, %0)
    let %3: unit = call f8(f10.m0, 0, %0)
    let %4: unit = call f0(f10.m0, 0, %0)
    return %4
  }
}
.fn f.265 #f2 : fn(int32, array[int32], int32, int32) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (int32, array[int32], int32, int32) {
    let %0: int32 = sub($b0.3, 1)
    let %1: bool = le($b0.0, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    jump b15()
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1, $f2, $f3)
  }
  .bb #b6 (unit) {
    let %3: int32 = add($b0.0, 1)
    jump b0(%3, $b0.1, $b0.2, $b0.3)
  }
  .bb #b7 (int32, array[int32], int32) {
    let %4: int32 = add(1, $b7.2)
    let %5: bool = le(%4, $b7.0)
    br %5 b8() b9()
  }
  .bb #b8 () {
    let %6: int32 = load int32 offset($b7.1, $b7.0 * @32)
    let %7: int32 = sub($b7.0, 1)
    let %8: int32 = load int32 offset($b7.1, %7 * @32)
    let %9: int32 = sub(%8, 1)
    let %10: bool = le(%6, %9)
    br %10 b10() b11()
  }
  .bb #b9 () {
    jump b13(())
  }
  .bb #b10 () {
    let %11: int32 = sub($b7.0, 1)
    let %12: int32 = load int32 offset($b7.1, $b7.0 * @32)
    let %13: int32 = load int32 offset($b7.1, %11 * @32)
    let _ = store int32 offset($b7.1, $b7.0 * @32) <- %13
    let _ = store int32 offset($b7.1, %11 * @32) <- %12
    let %16: int32 = sub($b7.0, 1)
    jump b7(%16, $b7.1, $b7.2)
  }
  .bb #b11 () {
    jump b12(())
  }
  .bb #b12 (unit) {
    jump b13($b12.0)
  }
  .bb #b13 (unit) {
    jump b6($b13.0)
  }
  .loop #b14 pre #Some(b15) header #b7 {
    .block #b13
    .block #b11
    .block #b8
    .block #b12
    .block #b9
    .block #b10
  }
  .bb #b15 () {
    jump b14($b0.0, $b0.1, $b0.2)
  }
}
.fn quick_sort.270 #f8 : fn(array[int32], int32, int32) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (array[int32], int32, int32) {
    let %0: int32 = sub($b0.2, $b0.1)
    let %1: bool = le(%0, 16)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: unit = call f3($b0.0, $b0.1, $b0.2)
    jump b3(%2)
  }
  .bb #b2 () {
    jump b32()
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1, $f2)
  }
  .bb #b6 ((int32, bool)) {
    let %4: int32 = load int32 field($b6.0, 0 * @(@32, @(@32, @32)))
    let %5: bool = load bool field($b6.0, 1 * @(@32, @(@32, @32)))
    jump b11()
  }
  .bb #b7 ((int32, bool)) {
    let %7: int32 = load int32 field($b7.0, 0 * @(@32, @(@32, @32)))
    let %8: bool = load bool field($b7.0, 1 * @(@32, @(@32, @32)))
    let %9: unit = call f8($b0.0, $b0.1, %7)
    let %10: int32 = add(%7, 1)
    jump b0($b0.0, %10, $b0.2)
  }
  .bb #b11 () {
    let %11: int32 = sub($b0.2, 1)
    let %12: int32 = load int32 offset($b0.0, %4 * @32)
    let %13: int32 = load int32 offset($b0.0, %11 * @32)
    let _ = store int32 offset($b0.0, %4 * @32) <- %13
    let _ = store int32 offset($b0.0, %11 * @32) <- %12
    let %16: int32 = sub($b0.2, 1)
    let %17: int32 = load int32 offset($b0.0, %16 * @32)
    let _ = alloc <m11: array[int32] heap(1)> <- [..] = $b0.1
    let _ = alloc <m12: array[int32] heap(1)> <- [..] = 1
    let %20: unit = call f4($b0.1, f8.m11, $b0.0, $b0.2, %17, f8.m12)
    jump b15(%20)
  }
  .bb #b12 () {
    let _ = alloc <m13: (int32, bool) heap(2)> <- [0] = %27, [1] = true
    jump b14(f8.m13)
  }
  .bb #b13 () {
    let _ = alloc <m14: (int32, bool) heap(2)> <- [0] = %27, [1] = false
    jump b14(f8.m14)
  }
  .bb #b14 ((int32, bool)) {
    jump b7($b14.0)
  }
  .bb #b15 (unit) {
    let %21: int32 = load int32 field(f8.m11, 0 * @32)
    let %22: int32 = sub($b0.2, 1)
    let %23: int32 = load int32 offset($b0.0, %21 * @32)
    let %24: int32 = load int32 offset($b0.0, %22 * @32)
    let _ = store int32 offset($b0.0, %21 * @32) <- %24
    let _ = store int32 offset($b0.0, %22 * @32) <- %23
    let %27: int32 = load int32 field(f8.m11, 0 * @32)
    let %28: int32 = load int32 field(f8.m12, 0 * @32)
    let %29: bool = eq(%28, 1)
    br %29 b12() b13()
  }
  .bb #b32 () {
    let _ = alloc <m32: array[int32] heap(1)> <- [..] = 0
    let %33: int32 = sub($b0.2, $b0.1)
    let %34: int32 = div(%33, 4)
    let %35: int32 = mul(%34, 2)
    let %36: int32 = add($b0.1, %35)
    let %37: bool = le(8, %33)
    br %37 b33() b34()
  }
  .bb #b33 () {
    let %38: int32 = div(%33, 4)
    let %39: int32 = mul(%38, 1)
    let %40: int32 = add($b0.1, %39)
    let %41: int32 = div(%33, 4)
    let %42: int32 = mul(%41, 3)
    let %43: int32 = add($b0.1, %42)
    let %44: int32 = sub(%33, 1)
    let %45: bool = le(50, %44)
    br %45 b35() b36()
  }
  .bb #b34 () {
    let %75: int32 = load int32 field(f8.m32, 0 * @32)
    let %76: bool = eq(%75, 0)
    br %76 b44() b45()
  }
  .bb #b35 () {
    let %46: int32 = sub(%40, 1)
    let %47: int32 = add(%40, 1)
    let %48: unit = call f6(%46, %40, $b0.0, f8.m32)
    let %49: unit = call f6(%40, %47, $b0.0, f8.m32)
    let %50: unit = call f6(%46, %40, $b0.0, f8.m32)
    let %51: int32 = sub(%36, 1)
    let %52: int32 = add(%36, 1)
    let %53: unit = call f6(%51, %36, $b0.0, f8.m32)
    let %54: unit = call f6(%36, %52, $b0.0, f8.m32)
    let %55: unit = call f6(%51, %36, $b0.0, f8.m32)
    let %56: int32 = sub(%43, 1)
    let %57: int32 = add(%43, 1)
    let %58: unit = call f6(%56, %43, $b0.0, f8.m32)
    let %59: unit = call f6(%43, %57, $b0.0, f8.m32)
    let %60: unit = call f6(%56, %43, $b0.0, f8.m32)
    let %61: unit = call f6(%40, %36, $b0.0, f8.m32)
    let %62: unit = call f6(%36, %43, $b0.0, f8.m32)
    let %63: unit = call f6(%40, %36, $b0.0, f8.m32)
    let %64: int32 = load int32 field(f8.m32, 0 * @32)
    let %65: bool = eq(%64, 0)
    br %65 b37() b38()
  }
  .bb #b36 () {
    let %68: unit = call f6(%40, %36, $b0.0, f8.m32)
    let %69: unit = call f6(%36, %43, $b0.0, f8.m32)
    let %70: unit = call f6(%40, %36, $b0.0, f8.m32)
    let %71: int32 = load int32 field(f8.m32, 0 * @32)
    let %72: bool = eq(%71, 0)
    br %72 b40() b41()
  }
  .bb #b37 () {
    let _ = alloc <m33: (int32, bool) heap(2)> <- [0] = %36, [1] = true
    jump b39(f8.m33)
  }
  .bb #b38 () {
    let _ = alloc <m34: (int32, bool) heap(2)> <- [0] = %36, [1] = false
    jump b39(f8.m34)
  }
  .bb #b39 ((int32, bool)) {
    jump b43($b39.0)
  }
  .bb #b40 () {
    let _ = alloc <m35: (int32, bool) heap(2)> <- [0] = %36, [1] = true
    jump b42(f8.m35)
  }
  .bb #b41 () {
    let _ = alloc <m36: (int32, bool) heap(2)> <- [0] = %36, [1] = false
    jump b42(f8.m36)
  }
  .bb #b42 ((int32, bool)) {
    jump b43($b42.0)
  }
  .bb #b43 ((int32, bool)) {
    jump b47($b43.0)
  }
  .bb #b44 () {
    let _ = alloc <m37: (int32, bool) heap(2)> <- [0] = %36, [1] = true
    jump b46(f8.m37)
  }
  .bb #b45 () {
    let _ = alloc <m38: (int32, bool) heap(2)> <- [0] = %36, [1] = false
    jump b46(f8.m38)
  }
  .bb #b46 ((int32, bool)) {
    jump b47($b46.0)
  }
  .bb #b47 ((int32, bool)) {
    jump b6($b47.0)
  }
}
.fn output.262 #f0 : fn(array[int32], int32, int32) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (array[int32], int32, int32) {
    let %0: int32 = sub($b0.2, 1)
    let %1: bool = le($b0.1, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = load int32 offset($b0.0, $b0.1 * @32)
    let %3: unit = ext_call minimbt_print_int(%2)
    let %4: unit = ext_call minimbt_print_endline()
    let %5: int32 = add($b0.1, 1)
    jump b0($b0.0, %5, $b0.2)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1, $f2)
  }
}
.fn g.264 #f1 : fn(int32, array[int32], int32) -> unit
.freevars ()
.entry b8 {
  .bb #b0 (int32, array[int32], int32) {
    let %0: int32 = add(1, $b0.2)
    let %1: bool = le(%0, $b0.0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = load int32 offset($b0.1, $b0.0 * @32)
    let %3: int32 = sub($b0.0, 1)
    let %4: int32 = load int32 offset($b0.1, %3 * @32)
    let %5: int32 = sub(%4, 1)
    let %6: bool = le(%2, %5)
    br %6 b3() b4()
  }
  .bb #b2 () {
    jump b6(())
  }
  .bb #b3 () {
    let %7: int32 = sub($b0.0, 1)
    let %8: int32 = load int32 offset($b0.1, $b0.0 * @32)
    let %9: int32 = load int32 offset($b0.1, %7 * @32)
    let _ = store int32 offset($b0.1, $b0.0 * @32) <- %9
    let _ = store int32 offset($b0.1, %7 * @32) <- %8
    let %12: int32 = sub($b0.0, 1)
    jump b0(%12, $b0.1, $b0.2)
  }
  .bb #b4 () {
    jump b5(())
  }
  .bb #b5 (unit) {
    jump b6($b5.0)
  }
  .bb #b6 (unit) {
    return $b6.0
  }
  .loop #b7 pre #Some(b8) header #b0 {
    .block #b6
    .block #b4
    .block #b1
    .block #b5
    .block #b2
    .block #b3
  }
  .bb #b8 () {
    jump b7($f0, $f1, $f2)
  }
}
.fn insertion_sort.263 #f3 : fn(array[int32], int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add($f1, 1)
    let %1: unit = call f2(%0, $f0, $f1, $f2)
    return %1
  }
}
.fn partition.266 #f5 : fn(array[int32], int32, int32, int32) -> (int32, bool)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = sub($f3, 1)
    let %1: int32 = load int32 offset($f0, $f1 * @32)
    let %2: int32 = load int32 offset($f0, %0 * @32)
    let _ = store int32 offset($f0, $f1 * @32) <- %2
    let _ = store int32 offset($f0, %0 * @32) <- %1
    let %5: int32 = sub($f3, 1)
    let %6: int32 = load int32 offset($f0, %5 * @32)
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = $f2
    let _ = alloc <m1: array[int32] heap(1)> <- [..] = 1
    jump b32()
  }
  .bb #b1 () {
    let _ = alloc <m2: (int32, bool) heap(2)> <- [0] = %16, [1] = true
    jump b3(f5.m2)
  }
  .bb #b2 () {
    let _ = alloc <m3: (int32, bool) heap(2)> <- [0] = %16, [1] = false
    jump b3(f5.m3)
  }
  .bb #b3 ((int32, bool)) {
    return $b3.0
  }
  .bb #b4 (unit) {
    let %10: int32 = load int32 field(f5.m0, 0 * @32)
    let %11: int32 = sub($f3, 1)
    let %12: int32 = load int32 offset($f0, %10 * @32)
    let %13: int32 = load int32 offset($f0, %11 * @32)
    let _ = store int32 offset($f0, %10 * @32) <- %13
    let _ = store int32 offset($f0, %11 * @32) <- %12
    let %16: int32 = load int32 field(f5.m0, 0 * @32)
    let %17: int32 = load int32 field(f5.m1, 0 * @32)
    let %18: bool = eq(%17, 1)
    br %18 b1() b2()
  }
  .bb #b21 (int32, array[int32], array[int32], int32, int32, array[int32]) {
    let %21: int32 = sub($b21.3, 2)
    let %22: bool = le($b21.0, %21)
    br %22 b22() b23()
  }
  .bb #b22 () {
    let %23: int32 = load int32 offset($b21.2, $b21.0 * @32)
    let %24: int32 = sub($b21.4, 1)
    let %25: bool = le(%23, %24)
    br %25 b24() b25()
  }
  .bb #b23 () {
    jump b30(())
  }
  .bb #b24 () {
    let %26: int32 = load int32 field($b21.1, 0 * @32)
    let %27: bool = eq(%26, $b21.0)
    br %27 b26() b27()
  }
  .bb #b25 () {
    let %44: int32 = add($b21.0, 1)
    jump b21(%44, $b21.1, $b21.2, $b21.3, $b21.4, $b21.5)
  }
  .bb #b26 () {
    let %28: int32 = load int32 field($b21.1, 0 * @32)
    let %29: int32 = add(%28, 1)
    let _ = store int32 field($b21.1, 0 * @32) <- %29
    let %31: int32 = add($b21.0, 1)
    jump b21(%31, $b21.1, $b21.2, $b21.3, $b21.4, $b21.5)
  }
  .bb #b27 () {
    let %33: int32 = load int32 field($b21.1, 0 * @32)
    let %34: int32 = load int32 offset($b21.2, %33 * @32)
    let %35: int32 = load int32 offset($b21.2, $b21.0 * @32)
    let _ = store int32 offset($b21.2, %33 * @32) <- %35
    let _ = store int32 offset($b21.2, $b21.0 * @32) <- %34
    let _ = store int32 field($b21.5, 0 * @32) <- 0
    let %39: int32 = load int32 field($b21.1, 0 * @32)
    let %40: int32 = add(%39, 1)
    let _ = store int32 field($b21.1, 0 * @32) <- %40
    let %42: int32 = add($b21.0, 1)
    jump b21(%42, $b21.1, $b21.2, $b21.3, $b21.4, $b21.5)
  }
  .bb #b28 (unit) {
    jump b29($b28.0)
  }
  .bb #b29 (unit) {
    jump b30($b29.0)
  }
  .bb #b30 (unit) {
    jump b4($b30.0)
  }
  .loop #b31 pre #Some(b32) header #b21 {
    .block #b27
    .block #b25
    .block #b29
    .block #b30
    .block #b22
    .block #b26
    .block #b23
    .block #b24
    .block #b28
  }
  .bb #b32 () {
    jump b31($f2, f5.m0, $f0, $f3, %6, f5.m1)
  }
}
.fn T$start #f22 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f10()
    return %0
  }
}
.fn aux.267 #f4 : fn(int32, array[int32], array[int32], int32, int32, array[int32]) -> unit
.freevars ()
.entry b11 {
  .bb #b0 (int32, array[int32], array[int32], int32, int32, array[int32]) {
    let %0: int32 = sub($b0.3, 2)
    let %1: bool = le($b0.0, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = load int32 offset($b0.2, $b0.0 * @32)
    let %3: int32 = sub($b0.4, 1)
    let %4: bool = le(%2, %3)
    br %4 b3() b4()
  }
  .bb #b2 () {
    jump b9(())
  }
  .bb #b3 () {
    let %5: int32 = load int32 field($b0.1, 0 * @32)
    let %6: bool = eq(%5, $b0.0)
    br %6 b5() b6()
  }
  .bb #b4 () {
    let %23: int32 = add($b0.0, 1)
    jump b0(%23, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b5 () {
    let %7: int32 = load int32 field($b0.1, 0 * @32)
    let %8: int32 = add(%7, 1)
    let _ = store int32 field($b0.1, 0 * @32) <- %8
    let %10: int32 = add($b0.0, 1)
    jump b0(%10, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b6 () {
    let %12: int32 = load int32 field($b0.1, 0 * @32)
    let %13: int32 = load int32 offset($b0.2, %12 * @32)
    let %14: int32 = load int32 offset($b0.2, $b0.0 * @32)
    let _ = store int32 offset($b0.2, %12 * @32) <- %14
    let _ = store int32 offset($b0.2, $b0.0 * @32) <- %13
    let _ = store int32 field($b0.5, 0 * @32) <- 0
    let %18: int32 = load int32 field($b0.1, 0 * @32)
    let %19: int32 = add(%18, 1)
    let _ = store int32 field($b0.1, 0 * @32) <- %19
    let %21: int32 = add($b0.0, 1)
    jump b0(%21, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b7 (unit) {
    jump b8($b7.0)
  }
  .bb #b8 (unit) {
    jump b9($b8.0)
  }
  .bb #b9 (unit) {
    return $b9.0
  }
  .loop #b10 pre #Some(b11) header #b0 {
    .block #b6
    .block #b4
    .block #b8
    .block #b9
    .block #b1
    .block #b5
    .block #b2
    .block #b3
    .block #b7
  }
  .bb #b11 () {
    jump b10($f0, $f1, $f2, $f3, $f4, $f5)
  }
}
.fn choose_pivot.268 #f7 : fn(array[int32], int32, int32) -> (int32, bool)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = 0
    let %1: int32 = sub($f2, $f1)
    let %2: int32 = div(%1, 4)
    let %3: int32 = mul(%2, 2)
    let %4: int32 = add($f1, %3)
    let %5: bool = le(8, %1)
    br %5 b1() b2()
  }
  .bb #b1 () {
    let %6: int32 = div(%1, 4)
    let %7: int32 = mul(%6, 1)
    let %8: int32 = add($f1, %7)
    let %9: int32 = div(%1, 4)
    let %10: int32 = mul(%9, 3)
    let %11: int32 = add($f1, %10)
    let %12: int32 = sub(%1, 1)
    let %13: bool = le(50, %12)
    br %13 b3() b4()
  }
  .bb #b2 () {
    let %43: int32 = load int32 field(f7.m0, 0 * @32)
    let %44: bool = eq(%43, 0)
    br %44 b12() b13()
  }
  .bb #b3 () {
    let %14: int32 = sub(%8, 1)
    let %15: int32 = add(%8, 1)
    let %16: unit = call f6(%14, %8, $f0, f7.m0)
    let %17: unit = call f6(%8, %15, $f0, f7.m0)
    let %18: unit = call f6(%14, %8, $f0, f7.m0)
    let %19: int32 = sub(%4, 1)
    let %20: int32 = add(%4, 1)
    let %21: unit = call f6(%19, %4, $f0, f7.m0)
    let %22: unit = call f6(%4, %20, $f0, f7.m0)
    let %23: unit = call f6(%19, %4, $f0, f7.m0)
    let %24: int32 = sub(%11, 1)
    let %25: int32 = add(%11, 1)
    let %26: unit = call f6(%24, %11, $f0, f7.m0)
    let %27: unit = call f6(%11, %25, $f0, f7.m0)
    let %28: unit = call f6(%24, %11, $f0, f7.m0)
    let %29: unit = call f6(%8, %4, $f0, f7.m0)
    let %30: unit = call f6(%4, %11, $f0, f7.m0)
    let %31: unit = call f6(%8, %4, $f0, f7.m0)
    let %32: int32 = load int32 field(f7.m0, 0 * @32)
    let %33: bool = eq(%32, 0)
    br %33 b5() b6()
  }
  .bb #b4 () {
    let %36: unit = call f6(%8, %4, $f0, f7.m0)
    let %37: unit = call f6(%4, %11, $f0, f7.m0)
    let %38: unit = call f6(%8, %4, $f0, f7.m0)
    let %39: int32 = load int32 field(f7.m0, 0 * @32)
    let %40: bool = eq(%39, 0)
    br %40 b8() b9()
  }
  .bb #b5 () {
    let _ = alloc <m1: (int32, bool) heap(2)> <- [0] = %4, [1] = true
    jump b7(f7.m1)
  }
  .bb #b6 () {
    let _ = alloc <m2: (int32, bool) heap(2)> <- [0] = %4, [1] = false
    jump b7(f7.m2)
  }
  .bb #b7 ((int32, bool)) {
    jump b11($b7.0)
  }
  .bb #b8 () {
    let _ = alloc <m3: (int32, bool) heap(2)> <- [0] = %4, [1] = true
    jump b10(f7.m3)
  }
  .bb #b9 () {
    let _ = alloc <m4: (int32, bool) heap(2)> <- [0] = %4, [1] = false
    jump b10(f7.m4)
  }
  .bb #b10 ((int32, bool)) {
    jump b11($b10.0)
  }
  .bb #b11 ((int32, bool)) {
    jump b15($b11.0)
  }
  .bb #b12 () {
    let _ = alloc <m5: (int32, bool) heap(2)> <- [0] = %4, [1] = true
    jump b14(f7.m5)
  }
  .bb #b13 () {
    let _ = alloc <m6: (int32, bool) heap(2)> <- [0] = %4, [1] = false
    jump b14(f7.m6)
  }
  .bb #b14 ((int32, bool)) {
    jump b15($b14.0)
  }
  .bb #b15 ((int32, bool)) {
    return $b15.0
  }
}
.thunk ::0 start
