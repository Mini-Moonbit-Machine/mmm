let rec main.33: Unit = () {
  let n.34: Int = ExtApply(minimbt_read_int, [])
  let _47: Int = Int(1)
  let _48: Int = Add(n.34, _47)
  let _56: Int = Int(-1919810)
  let cache.50: Array[Int] = ExtApply(minimbt_create_array, [_48, _56, ])
  let rec memed.51: Int = (n.52: Int) {
    let _53: Int = Get cache.50[n.52]
    let _57: Int = Int(-1919810)
    if (_53 == _57) then {
      let _58: Int = Int(1)
      let res.54: Int = if (n.52 <= _58) then {
        Var(n.52)
      } else {
        let _59: Int = Int(1)
        let _60: Int = Sub(n.52, _59)
        let _61: Int = Apply(memed.51, [_60, ])
        let _62: Int = Int(2)
        let _63: Int = Sub(n.52, _62)
        let _64: Int = Apply(memed.51, [_63, ])
        Add(_61, _64)
      }
      let _55: Unit = Put cache.50[n.52] = res.54
      Var(res.54)
    } else {
      Get cache.50[n.52]
    }
  }
  let _35: Int = Apply(memed.51, [n.34, ])
  let _37: Unit = ExtApply(minimbt_print_int, [_35, ])
  let _38: Int = Int(10)
  let _40: Unit = ExtApply(minimbt_print_char, [_38, ])
  Unit
}
Apply(main.33, [])
