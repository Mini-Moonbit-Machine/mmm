// [Asm] pre_assigned_registers: FnParam(fref=f6, fpref=$f.0) -> v2, FnParam(fref=f6, fpref=$f.1) -> v3, Self(fref=f6) -> v0, Insn(iref=%0) -> v4, BlockParam(bref=b3, bpref=$b.0) -> v5
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f6, fpref=$f.1), FnParam(fref=f6, fpref=$f.0)])
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [zero]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, zero, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [v6]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux111.203l7_6"];
// [Asm]   r0 [label="v5 ← a0", color=green];
// [Asm]   r6 [label="v6 ← a0", color=green];
// [Asm]   r5 [label="a0", color=blue];
// [Asm]   r4 [label="v3 ← a1", color=green];
// [Asm]   r1 [label="v2 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r3 -- r4;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r2;
// [Asm]   comment = "0:v5-> 1:v2-> 2:a1-> 3:zero-> 4:v3-> 5:a0-> 6:v6"
// [Asm]   comment = "v5<-a0;v6<-a0;v3<-a1;v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux111.203l7_6"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v5, zero ->   mv a0, zero
// [Asm] subst   blt v2, v3, .aux111.203l7_6_2 ->   blt a0, a1, .aux111.203l7_6_2
// [Asm] subst   ret ->   ret
// [Asm] subst   li v6, 1 ->   li a0, 1
// [Asm] subst   j .aux111.203l7_6_3 ->   j .aux111.203l7_6_3
// [Asm] pre_assigned_registers: BlockParam(bref=b0, bpref=$b.7) -> v21, Insn(iref=%15) -> v37, Mem(fref=f9, mref=m11) -> v13, Self(fref=f9) -> v0, BlockParam(bref=b0, bpref=$b.5) -> v19, BlockParam(bref=b11, bpref=$b.4) -> v26, Insn(iref=%8) -> v29, BlockParam(bref=b10, bpref=$b.0) -> v47, Insn(iref=%10) -> v32, BlockParam(bref=b11, bpref=$b.3) -> v25, BlockParam(bref=b0, bpref=$b.4) -> v18, BlockParam(bref=b0, bpref=$b.3) -> v17, Mem(fref=f9, mref=m12) -> v11, Insn(iref=%14) -> v36, BlockParam(bref=b11, bpref=$b.5) -> v27, Insn(iref=%4) -> v51, BlockParam(bref=b25, bpref=$b.0) -> v46, FnParam(fref=f9, fpref=$f.5) -> v7, BlockParam(bref=b6, bpref=$b.0) -> v52, Insn(iref=%1) -> v42, Insn(iref=%11) -> v33, Mem(fref=f9, mref=m0) -> v10, BlockParam(bref=b11, bpref=$b.1) -> v23, BlockParam(bref=b0, bpref=$b.6) -> v20, Insn(iref=%6) -> v48, BlockParam(bref=b9, bpref=$b.0) -> v41, BlockParam(bref=b16, bpref=$b.0) -> v38, BlockParam(bref=b17, bpref=$b.0) -> v40, Insn(iref=%9) -> v31, Insn(iref=%16) -> v45, FnParam(fref=f9, fpref=$f.4) -> v6, FnParam(fref=f9, fpref=$f.1) -> v3, BlockParam(bref=b0, bpref=$b.0) -> v14, BlockParam(bref=b0, bpref=$b.1) -> v15, BlockParam(bref=b0, bpref=$b.2) -> v16, FnParam(fref=f9, fpref=$f.6) -> v8, FnParam(fref=f9, fpref=$f.3) -> v5, Insn(iref=%3) -> v44, Insn(iref=%13) -> v34, BlockParam(bref=b11, bpref=$b.0) -> v22, Insn(iref=%7) -> v49, BlockParam(bref=b11, bpref=$b.2) -> v24, FnParam(fref=f9, fpref=$f.7) -> v9, Mem(fref=f9, mref=m1) -> v12, BlockParam(bref=b5, bpref=$b.0) -> v50, Insn(iref=%2) -> v43, BlockParam(bref=b11, bpref=$b.6) -> v28, FnParam(fref=f9, fpref=$f.2) -> v4, BlockParam(bref=b21, bpref=$b.0) -> v35, BlockParam(bref=b20, bpref=$b.0) -> v30, FnParam(fref=f9, fpref=$f.0) -> v2, Insn(iref=%12) -> v39
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b10, bpref=$b.0), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%2), BlockParam(bref=b0, bpref=$b.5)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b21, bpref=$b.0), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%9), Int32(val=0)])
// [Asm] defs: []
// [Asm] live_set: [v25, v16, v21, v26, v32, v17, s11, v24, v28, v18, zero, v23, v27, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v25, v16, v21, v26, a0, v32, v17, s11, v24, v28, v18, zero, v23, v27, v20, v19, v15]
// [Asm] move_origin: [v32]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v25, v16, v21, v26, a0, v32, v17, a1, s11, v24, v28, v18, zero, v23, v27, v20, v19, v15]
// [Asm] move_origin: [v26]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v25, v16, v21, v26, a0, v32, v17, v24, s11, v28, v18, zero, v23, v27, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v34]
// [Asm] live_set: [v25, v16, v21, v26, v32, v17, v24, s11, v28, v18, zero, v23, v27, v20, v19, v15, v34]
// [Asm] move_origin: [a0]
// [Asm] defined: v34 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v16, v21, v26, v32, v17, v24, s11, v28, v18, zero, v23, v27, v20, v19, v15, v34]
// [Asm] move_origin: []
// [Asm] defs: [v35]
// [Asm] live_set: [v25, v16, v21, v26, v32, v17, v24, s11, v28, v18, zero, v23, v27, v20, v35, v19, v15]
// [Asm] move_origin: [v34]
// [Asm] defined: v35 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v25, v16, v21, v26, v30, v17, s11, v24, v28, v31, v18, zero, v27, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v25, v16, v21, v26, v32, v17, s11, v24, v28, v31, v18, zero, v27, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v16, v21, v26, v32, v17, s11, v24, v28, v18, zero, v27, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v22]
// [Asm] live_set: [v16, v21, v22, v17, s11, v18, zero, v20, v19, v15]
// [Asm] move_origin: [zero]
// [Asm] defined: v22 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: [v15]
// [Asm] defined: v23 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v16, v21, v22, v17, s11, v24, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: [v16]
// [Asm] defined: v24 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v16, v21, v22, v17, s11, v24, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: [v17]
// [Asm] defined: v25 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v25, v16, v21, v26, v22, v17, s11, v24, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: [v18]
// [Asm] defined: v26 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v25, v16, v21, v26, v22, v17, s11, v24, v18, zero, v23, v27, v20, v19, v15]
// [Asm] move_origin: [v20]
// [Asm] defined: v27 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v25, v16, v21, v26, v22, v17, s11, v24, v28, v18, zero, v23, v27, v20, v19, v15]
// [Asm] move_origin: [v21]
// [Asm] defined: v28 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v14, v16, v18, v21, zero, v20, v19, v17, v15, s11]
// [Asm] move_origin: [zero]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v14, v16, v18, v21, zero, v20, v19, v17, v15, s11]
// [Asm] move_origin: [v15]
// [Asm] defs: []
// [Asm] live_set: [v14, v16, v18, v21, zero, v20, v19, v17, v15, s11]
// [Asm] move_origin: [v16]
// [Asm] defs: []
// [Asm] live_set: [v14, v16, v18, v21, zero, v20, v19, v17, v15, s11]
// [Asm] move_origin: [v17]
// [Asm] defs: []
// [Asm] live_set: [v14, v16, v18, v21, zero, v20, v19, v17, v15, s11]
// [Asm] move_origin: [v18]
// [Asm] defs: []
// [Asm] live_set: [v14, v16, v18, v21, zero, v20, v19, v17, v15, s11]
// [Asm] move_origin: [v19]
// [Asm] defs: []
// [Asm] live_set: [v14, v16, v18, v21, zero, v20, v19, v17, v15, s11]
// [Asm] move_origin: [v20]
// [Asm] defs: []
// [Asm] live_set: [v14, v16, v18, v21, zero, v20, v19, v17, v15, s11]
// [Asm] move_origin: [v21]
// [Asm] defs: []
// [Asm] live_set: [v14, v16, v18, v21, zero, v20, v19, v17, v15, s11]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v16, v18, v21, zero, v13, v20, v19, v17, v15]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v16, v18, v21, zero, v13, v20, v19, v17, s11, v15]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v13, v20, v19, v17, s11, v15]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v13, v20, v19, v17, s11, v15]
// [Asm] move_origin: []
// [Asm] defs: [v40]
// [Asm] live_set: [v16, v18, v21, zero, v20, v19, v17, s11, v15, v40]
// [Asm] move_origin: [v13]
// [Asm] defined: v40 is X
// [Asm] defs: [v41]
// [Asm] live_set: [v16, v18, v21, zero, v20, v19, v41, v17, s11, v15]
// [Asm] move_origin: [v40]
// [Asm] defined: v41 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v20, v19, v43, v17, s11, v15]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v16, v18, v21, zero, v20, v19, v32, v17, v15]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v16, v18, v21, zero, v20, v19, v32, v17, s11, v15]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v61]
// [Asm] live_set: [v11, v16, v18, v21, zero, v20, v19, v32, v17, s11, v15, v61]
// [Asm] move_origin: []
// [Asm] defined: v61 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v18, v21, zero, v20, v19, v32, v17, s11, v15]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v18, v21, zero, v20, v19, v17, s11, v15]
// [Asm] move_origin: []
// [Asm] defs: [v38]
// [Asm] live_set: [v16, v18, v21, zero, v20, v19, v38, v17, s11, v15]
// [Asm] move_origin: [v11]
// [Asm] defined: v38 is X
// [Asm] defs: [v40]
// [Asm] live_set: [v16, v18, v21, zero, v20, v19, v17, s11, v15, v40]
// [Asm] move_origin: [v38]
// [Asm] defined: v40 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v20, v19, v17, s11, v15, v40]
// [Asm] move_origin: []
// [Asm] defs: [v52]
// [Asm] live_set: [v52]
// [Asm] move_origin: [v50]
// [Asm] defined: v52 is X
// [Asm] defs: []
// [Asm] live_set: [v52]
// [Asm] move_origin: []
// [Asm] defs: [v46]
// [Asm] live_set: [v46, v16, v18, v21, zero, v20, v19, v43, v17, s11, v15]
// [Asm] move_origin: [zero]
// [Asm] defined: v46 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v25, v16, v21, v26, v22, v17, s11, v24, v28, v18, zero, v23, v27, v20, v19, v15]
// [Asm] move_origin: [zero]
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v16, v21, v26, v22, v17, s11, v24, v28, v18, zero, v23, v27, v20, v19, v15]
// [Asm] move_origin: [v23]
// [Asm] defs: []
// [Asm] live_set: [v25, v16, v21, v26, v22, v17, s11, v24, v28, v18, zero, v23, v27, v20, v19, v15]
// [Asm] move_origin: [v24]
// [Asm] defs: []
// [Asm] live_set: [v25, v16, v21, v26, v22, v17, s11, v24, v28, v18, zero, v23, v27, v20, v19, v15]
// [Asm] move_origin: [v25]
// [Asm] defs: []
// [Asm] live_set: [v25, v16, v21, v26, v22, v17, s11, v24, v28, v18, zero, v23, v27, v20, v19, v15]
// [Asm] move_origin: [v26]
// [Asm] defs: []
// [Asm] live_set: [v25, v16, v21, v26, v22, v17, s11, v24, v28, v18, zero, v23, v27, v20, v19, v15]
// [Asm] move_origin: [v27]
// [Asm] defs: []
// [Asm] live_set: [v25, v16, v21, v26, v22, v17, s11, v24, v28, v18, zero, v23, v27, v20, v19, v15]
// [Asm] move_origin: [v28]
// [Asm] defs: []
// [Asm] live_set: [v25, v16, v21, v26, v22, v17, s11, v24, v28, v18, zero, v23, v27, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v20, v19, v43, v17, s11, v15]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10, zero]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v10, zero]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v10, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v10]
// [Asm] move_origin: []
// [Asm] defs: [v52]
// [Asm] live_set: [v52]
// [Asm] move_origin: [v10]
// [Asm] defined: v52 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v43, v12]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v43, v12]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v55]
// [Asm] live_set: [v43, v12, v55]
// [Asm] move_origin: []
// [Asm] defined: v55 is X
// [Asm] defs: []
// [Asm] live_set: [v43, v12]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v12]
// [Asm] move_origin: []
// [Asm] defs: [v50]
// [Asm] live_set: [v50]
// [Asm] move_origin: [v12]
// [Asm] defined: v50 is X
// [Asm] defs: [v42]
// [Asm] live_set: [v16, v18, v21, zero, v42, v20, v19, v41, v17, s11, v15]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: [v43]
// [Asm] live_set: [v16, v18, v21, zero, v42, v20, v19, v43, v17, s11, v15]
// [Asm] move_origin: []
// [Asm] defined: v43 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v18, v21, zero, v20, v19, v43, v17, s11, v15]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a7, a5, zero, a0, a4, a6, a2, a1, s11, a3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a7, a5, zero, a4, a6, a2, a1, s11, a3, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a7, a5, zero, a4, a6, a2, s11, a3, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, a7, a5, zero, a4, a6, v4, s11, a3, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, a7, v5, a5, zero, a4, a6, v4, s11, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, a7, v5, a5, zero, a6, v4, v6, s11, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, a7, v5, zero, v7, a6, v4, v6, s11, v3]
// [Asm] move_origin: [a5]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v2, a7, v5, zero, v8, v7, v4, v6, s11, v3]
// [Asm] move_origin: [a6]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v2, v5, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm] move_origin: [a7]
// [Asm] defined: v9 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v14, v5, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v14, v5, zero, v8, v7, v4, v6, s11, v15, v9]
// [Asm] move_origin: [v3]
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v14, v16, v5, zero, v8, v7, v6, s11, v15, v9]
// [Asm] move_origin: [v4]
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v14, v16, zero, v8, v7, v17, v6, s11, v15, v9]
// [Asm] move_origin: [v5]
// [Asm] defined: v17 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v14, v16, v18, zero, v8, v7, v17, v15, s11, v9]
// [Asm] move_origin: [v6]
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v14, v16, v18, zero, v8, v19, v17, v15, s11, v9]
// [Asm] move_origin: [v7]
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v14, v16, v18, zero, v20, v19, v17, v15, s11, v9]
// [Asm] move_origin: [v8]
// [Asm] defined: v20 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v14, v16, v18, v21, zero, v20, v19, v17, v15, s11]
// [Asm] move_origin: [v9]
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v16, v21, v26, v17, s11, v24, v28, v18, zero, v23, v20, v27, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v25, v16, v21, v26, a0, v17, s11, v24, v28, v18, zero, v23, v20, v27, v19, v15]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v25, v16, v21, v26, a0, v17, a1, s11, v24, v28, v18, zero, v23, v20, v27, v19, v15]
// [Asm] move_origin: [v23]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v25, v16, v21, v26, a0, a2, v17, a1, s11, v24, v28, v18, zero, v23, v20, v27, v19, v15]
// [Asm] move_origin: [v24]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v25, v16, v21, v26, a0, a2, v17, a1, s11, v24, a3, v28, v18, zero, v23, v20, v27, v19, v15]
// [Asm] move_origin: [v25]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v25, v16, v21, v26, a0, a2, v17, a1, s11, v24, a3, v28, v18, zero, v23, v20, v27, a4, v19, v15]
// [Asm] move_origin: [v27]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [v25, v16, v21, a5, v26, a0, a2, v17, a1, s11, v24, a3, v28, v18, zero, v23, v20, v27, a4, v19, v15]
// [Asm] move_origin: [v28]
// [Asm] defined: a5 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v25, v16, v21, v26, a0, v17, v24, s11, v28, v18, zero, v23, v20, v27, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v29]
// [Asm] live_set: [v25, v16, v21, v26, v17, v24, s11, v28, v18, zero, v29, v23, v20, v27, v19, v15]
// [Asm] move_origin: [a0]
// [Asm] defined: v29 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v16, v21, v26, v17, v24, s11, v28, v18, zero, v29, v23, v20, v27, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v30]
// [Asm] live_set: [v25, v16, v21, v26, v30, v17, v24, s11, v28, v18, zero, v27, v23, v20, v19, v15]
// [Asm] move_origin: [v29]
// [Asm] defined: v30 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v52]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v56]
// [Asm] live_set: [v16, v18, v21, v56, zero, v20, v19, v43, v17, s11, v15]
// [Asm] move_origin: []
// [Asm] defined: v56 is X
// [Asm] defs: [v46]
// [Asm] live_set: [v46, v16, v18, v21, zero, v20, v19, v43, v17, s11, v15]
// [Asm] move_origin: [v56]
// [Asm] defined: v46 is X
// [Asm] defs: []
// [Asm] live_set: [v46, v16, v18, v21, zero, v20, v19, v43, v17, s11, v15]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v25, v16, v21, v26, v32, v17, s11, v24, v28, v18, zero, v23, v27, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defs: [v47]
// [Asm] live_set: [v16, v18, v21, zero, v20, v19, v47, v43, v17, s11, v15]
// [Asm] move_origin: [v46]
// [Asm] defined: v47 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux25.220l10_9"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r46 [label="v55 ← a2", color=green];
// [Asm]   r38 [label="v11 ← a0", color=green];
// [Asm]   r33 [label="v22 ← a0", color=green];
// [Asm]   r59 [label="v47 ← a1", color=green];
// [Asm]   r9 [label="v28 ← s2", color=green];
// [Asm]   r26 [label="t2", color=blue];
// [Asm]   r47 [label="v50 ← a0", color=green];
// [Asm]   r6 [label="v17 ← s0", color=green];
// [Asm]   r44 [label="v10 ← a0", color=green];
// [Asm]   r13 [label="v27 ← s6", color=green];
// [Asm]   r42 [label="v46 ← a1", color=green];
// [Asm]   r53 [label="v6 ← a4", color=green];
// [Asm]   r4 [label="v26 ← s3", color=green];
// [Asm]   r29 [label="v34 ← a0", color=green];
// [Asm]   r35 [label="v13 ← a0", color=green];
// [Asm]   r56 [label="v9 ← a7", color=green];
// [Asm]   r7 [label="s11", color=blue];
// [Asm]   r10 [label="v18 ← s3", color=green];
// [Asm]   r8 [label="v24 ← s1", color=green];
// [Asm]   r5 [label="v32 ← s4", color=green];
// [Asm]   r36 [label="v40 ← a0", color=green];
// [Asm]   r54 [label="v7 ← a5", color=green];
// [Asm]   r32 [label="v30 ← a1", color=green];
// [Asm]   r15 [label="v19 ← s7", color=green];
// [Asm]   r24 [label="t0", color=blue];
// [Asm]   r49 [label="v2 ← a0", color=green];
// [Asm]   r57 [label="v29 ← a0", color=green];
// [Asm]   r43 [label="v43 ← a0", color=green];
// [Asm]   r31 [label="v31 ← a0", color=green];
// [Asm]   r39 [label="v61 ← a1", color=green];
// [Asm]   r17 [label="a1", color=blue];
// [Asm]   r52 [label="v5 ← a3", color=green];
// [Asm]   r12 [label="v23 ← s5", color=green];
// [Asm]   r48 [label="v42 ← a1", color=green];
// [Asm]   r37 [label="v41 ← a0", color=green];
// [Asm]   r20 [label="a4", color=blue];
// [Asm]   r23 [label="a7", color=blue];
// [Asm]   r3 [label="v21 ← s2", color=green];
// [Asm]   r27 [label="t3", color=blue];
// [Asm]   r1 [label="v25 ← s0", color=green];
// [Asm]   r40 [label="v38 ← a0", color=green];
// [Asm]   r28 [label="t4", color=blue];
// [Asm]   r41 [label="v52 ← a0", color=green];
// [Asm]   r11 [label="zero", color=blue];
// [Asm]   r58 [label="v56 ← a1", color=green];
// [Asm]   r34 [label="v14 ← a0", color=green];
// [Asm]   r22 [label="a6", color=blue];
// [Asm]   r14 [label="v20 ← s6", color=green];
// [Asm]   r50 [label="v3 ← a1", color=green];
// [Asm]   r30 [label="v35 ← a0", color=green];
// [Asm]   r51 [label="v4 ← a2", color=green];
// [Asm]   r45 [label="v12 ← a1", color=green];
// [Asm]   r25 [label="t1", color=blue];
// [Asm]   r55 [label="v8 ← a6", color=green];
// [Asm]   r2 [label="v16 ← s1", color=green];
// [Asm]   r16 [label="v15 ← s5", color=green];
// [Asm]   r18 [label="a2", color=blue];
// [Asm]   r19 [label="a3", color=blue];
// [Asm]   r21 [label="a5", color=blue];
// [Asm]   r12 -- r25;
// [Asm]   r15 -- r39;
// [Asm]   r18 -- r49;
// [Asm]   r2 -- r38;
// [Asm]   r2 -- r31;
// [Asm]   r6 -- r48;
// [Asm]   r16 -- r20;
// [Asm]   r15 -- r43;
// [Asm]   r1 -- r26;
// [Asm]   r11 -- r35;
// [Asm]   r3 -- r15;
// [Asm]   r23 -- r51;
// [Asm]   r3 -- r16;
// [Asm]   r12 -- r57;
// [Asm]   r15 -- r31;
// [Asm]   r43 -- r48;
// [Asm]   r7 -- r25;
// [Asm]   r0 -- r28;
// [Asm]   r14 -- r40;
// [Asm]   r15 -- r42;
// [Asm]   r3 -- r11;
// [Asm]   r9 -- r26;
// [Asm]   r11 -- r55;
// [Asm]   r2 -- r7;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r31;
// [Asm]   r0 -- r16;
// [Asm]   r2 -- r42;
// [Asm]   r15 -- r25;
// [Asm]   r7 -- r35;
// [Asm]   r7 -- r32;
// [Asm]   r4 -- r57;
// [Asm]   r17 -- r19;
// [Asm]   r11 -- r19;
// [Asm]   r14 -- r34;
// [Asm]   r50 -- r55;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r48;
// [Asm]   r9 -- r14;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r16 -- r36;
// [Asm]   r13 -- r30;
// [Asm]   r5 -- r6;
// [Asm]   r13 -- r33;
// [Asm]   r0 -- r26;
// [Asm]   r8 -- r16;
// [Asm]   r2 -- r48;
// [Asm]   r10 -- r18;
// [Asm]   r3 -- r39;
// [Asm]   r16 -- r33;
// [Asm]   r10 -- r33;
// [Asm]   r34 -- r56;
// [Asm]   r9 -- r12;
// [Asm]   r7 -- r59;
// [Asm]   r8 -- r23;
// [Asm]   r10 -- r22;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r29;
// [Asm]   r3 -- r33;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r11 -- r43;
// [Asm]   r15 -- r37;
// [Asm]   r14 -- r59;
// [Asm]   r12 -- r23;
// [Asm]   r11 -- r15;
// [Asm]   r18 -- r20;
// [Asm]   r14 -- r36;
// [Asm]   r23 -- r55;
// [Asm]   r3 -- r35;
// [Asm]   r2 -- r22;
// [Asm]   r8 -- r32;
// [Asm]   r1 -- r5;
// [Asm]   r6 -- r56;
// [Asm]   r49 -- r54;
// [Asm]   r6 -- r25;
// [Asm]   r4 -- r13;
// [Asm]   r0 -- r15;
// [Asm]   r7 -- r44;
// [Asm]   r16 -- r30;
// [Asm]   r3 -- r25;
// [Asm]   r14 -- r26;
// [Asm]   r2 -- r4;
// [Asm]   r23 -- r50;
// [Asm]   r16 -- r32;
// [Asm]   r16 -- r51;
// [Asm]   r15 -- r35;
// [Asm]   r20 -- r52;
// [Asm]   r16 -- r43;
// [Asm]   r7 -- r20;
// [Asm]   r13 -- r16;
// [Asm]   r5 -- r19;
// [Asm]   r6 -- r53;
// [Asm]   r11 -- r23;
// [Asm]   r9 -- r30;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r43 -- r45;
// [Asm]   r5 -- r11;
// [Asm]   r8 -- r25;
// [Asm]   r11 -- r51;
// [Asm]   r0 -- r19;
// [Asm]   r5 -- r38;
// [Asm]   r11 -- r37;
// [Asm]   r16 -- r18;
// [Asm]   r6 -- r59;
// [Asm]   r13 -- r19;
// [Asm]   r10 -- r16;
// [Asm]   r3 -- r22;
// [Asm]   r19 -- r50;
// [Asm]   r6 -- r19;
// [Asm]   r7 -- r22;
// [Asm]   r14 -- r33;
// [Asm]   r49 -- r53;
// [Asm]   r9 -- r11;
// [Asm]   r7 -- r19;
// [Asm]   r2 -- r14;
// [Asm]   r11 -- r52;
// [Asm]   r14 -- r25;
// [Asm]   r16 -- r56;
// [Asm]   r9 -- r24;
// [Asm]   r10 -- r15;
// [Asm]   r12 -- r22;
// [Asm]   r8 -- r18;
// [Asm]   r3 -- r29;
// [Asm]   r7 -- r36;
// [Asm]   r10 -- r57;
// [Asm]   r15 -- r34;
// [Asm]   r15 -- r24;
// [Asm]   r4 -- r7;
// [Asm]   r15 -- r33;
// [Asm]   r6 -- r39;
// [Asm]   r5 -- r25;
// [Asm]   r10 -- r36;
// [Asm]   r12 -- r17;
// [Asm]   r6 -- r38;
// [Asm]   r10 -- r32;
// [Asm]   r54 -- r56;
// [Asm]   r0 -- r20;
// [Asm]   r15 -- r19;
// [Asm]   r11 -- r28;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   r11 -- r56;
// [Asm]   r11 -- r29;
// [Asm]   r9 -- r21;
// [Asm]   r1 -- r24;
// [Asm]   r2 -- r58;
// [Asm]   r5 -- r12;
// [Asm]   r11 -- r44;
// [Asm]   r9 -- r25;
// [Asm]   r14 -- r20;
// [Asm]   r34 -- r50;
// [Asm]   r6 -- r36;
// [Asm]   r16 -- r55;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r22 -- r54;
// [Asm]   r7 -- r56;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r10 -- r13;
// [Asm]   r10 -- r19;
// [Asm]   r3 -- r32;
// [Asm]   r6 -- r54;
// [Asm]   r1 -- r17;
// [Asm]   r9 -- r31;
// [Asm]   r2 -- r16;
// [Asm]   r42 -- r43;
// [Asm]   r51 -- r53;
// [Asm]   r13 -- r28;
// [Asm]   r11 -- r24;
// [Asm]   r34 -- r51;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r18;
// [Asm]   r14 -- r39;
// [Asm]   r11 -- r53;
// [Asm]   r37 -- r48;
// [Asm]   r14 -- r30;
// [Asm]   r1 -- r31;
// [Asm]   r14 -- r28;
// [Asm]   r2 -- r59;
// [Asm]   r2 -- r54;
// [Asm]   r14 -- r19;
// [Asm]   r4 -- r33;
// [Asm]   r10 -- r56;
// [Asm]   r10 -- r20;
// [Asm]   r3 -- r30;
// [Asm]   r50 -- r51;
// [Asm]   r11 -- r48;
// [Asm]   r12 -- r28;
// [Asm]   r9 -- r28;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r43;
// [Asm]   r4 -- r28;
// [Asm]   r6 -- r10;
// [Asm]   r43 -- r46;
// [Asm]   r3 -- r40;
// [Asm]   r11 -- r54;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r3 -- r27;
// [Asm]   r13 -- r18;
// [Asm]   r8 -- r29;
// [Asm]   r5 -- r7;
// [Asm]   r13 -- r57;
// [Asm]   r0 -- r11;
// [Asm]   r13 -- r22;
// [Asm]   r8 -- r11;
// [Asm]   r10 -- r25;
// [Asm]   r3 -- r7;
// [Asm]   r16 -- r42;
// [Asm]   r52 -- r54;
// [Asm]   r10 -- r35;
// [Asm]   r16 -- r23;
// [Asm]   r7 -- r54;
// [Asm]   r2 -- r23;
// [Asm]   r14 -- r22;
// [Asm]   r15 -- r38;
// [Asm]   r55 -- r56;
// [Asm]   r6 -- r32;
// [Asm]   r11 -- r25;
// [Asm]   r17 -- r20;
// [Asm]   r10 -- r17;
// [Asm]   r13 -- r24;
// [Asm]   r16 -- r31;
// [Asm]   r53 -- r55;
// [Asm]   r4 -- r16;
// [Asm]   r7 -- r52;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r34 -- r52;
// [Asm]   r9 -- r57;
// [Asm]   r23 -- r49;
// [Asm]   r15 -- r26;
// [Asm]   r11 -- r57;
// [Asm]   r0 -- r24;
// [Asm]   r49 -- r55;
// [Asm]   r1 -- r23;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r23;
// [Asm]   r15 -- r22;
// [Asm]   r9 -- r29;
// [Asm]   r11 -- r49;
// [Asm]   r8 -- r19;
// [Asm]   r14 -- r42;
// [Asm]   r13 -- r26;
// [Asm]   r16 -- r19;
// [Asm]   r34 -- r53;
// [Asm]   r1 -- r15;
// [Asm]   r4 -- r20;
// [Asm]   r6 -- r16;
// [Asm]   r4 -- r30;
// [Asm]   r16 -- r40;
// [Asm]   r2 -- r55;
// [Asm]   r10 -- r27;
// [Asm]   r16 -- r28;
// [Asm]   r6 -- r12;
// [Asm]   r13 -- r25;
// [Asm]   r6 -- r24;
// [Asm]   r43 -- r59;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r7 -- r37;
// [Asm]   r6 -- r37;
// [Asm]   r2 -- r57;
// [Asm]   r4 -- r11;
// [Asm]   r10 -- r28;
// [Asm]   r15 -- r17;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r0 -- r8;
// [Asm]   r7 -- r33;
// [Asm]   r9 -- r33;
// [Asm]   r6 -- r28;
// [Asm]   r11 -- r39;
// [Asm]   r49 -- r51;
// [Asm]   r15 -- r55;
// [Asm]   r10 -- r23;
// [Asm]   r11 -- r50;
// [Asm]   r7 -- r11;
// [Asm]   r7 -- r39;
// [Asm]   r7 -- r43;
// [Asm]   r12 -- r30;
// [Asm]   r11 -- r26;
// [Asm]   r20 -- r49;
// [Asm]   r9 -- r16;
// [Asm]   r9 -- r32;
// [Asm]   r0 -- r12;
// [Asm]   r11 -- r58;
// [Asm]   r3 -- r36;
// [Asm]   r12 -- r14;
// [Asm]   r9 -- r19;
// [Asm]   r12 -- r27;
// [Asm]   r31 -- r32;
// [Asm]   r11 -- r27;
// [Asm]   r7 -- r50;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r5 -- r30;
// [Asm]   r16 -- r48;
// [Asm]   r49 -- r50;
// [Asm]   r10 -- r21;
// [Asm]   r16 -- r52;
// [Asm]   r12 -- r18;
// [Asm]   r11 -- r21;
// [Asm]   r4 -- r19;
// [Asm]   r52 -- r53;
// [Asm]   r8 -- r31;
// [Asm]   r7 -- r51;
// [Asm]   r2 -- r32;
// [Asm]   r12 -- r29;
// [Asm]   r12 -- r32;
// [Asm]   r5 -- r21;
// [Asm]   r6 -- r35;
// [Asm]   r1 -- r30;
// [Asm]   r14 -- r43;
// [Asm]   r1 -- r57;
// [Asm]   r5 -- r10;
// [Asm]   r14 -- r57;
// [Asm]   r13 -- r32;
// [Asm]   r3 -- r6;
// [Asm]   r11 -- r14;
// [Asm]   r5 -- r17;
// [Asm]   r3 -- r42;
// [Asm]   r5 -- r22;
// [Asm]   r22 -- r52;
// [Asm]   r2 -- r43;
// [Asm]   r51 -- r55;
// [Asm]   r5 -- r18;
// [Asm]   r15 -- r36;
// [Asm]   r13 -- r31;
// [Asm]   r5 -- r29;
// [Asm]   r0 -- r23;
// [Asm]   r18 -- r21;
// [Asm]   r3 -- r37;
// [Asm]   r2 -- r37;
// [Asm]   r9 -- r17;
// [Asm]   r11 -- r18;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r15 -- r58;
// [Asm]   r10 -- r40;
// [Asm]   r7 -- r27;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r31;
// [Asm]   r8 -- r12;
// [Asm]   r23 -- r53;
// [Asm]   r2 -- r34;
// [Asm]   r5 -- r31;
// [Asm]   r8 -- r24;
// [Asm]   r52 -- r55;
// [Asm]   r16 -- r29;
// [Asm]   r43 -- r58;
// [Asm]   r2 -- r25;
// [Asm]   r22 -- r53;
// [Asm]   r2 -- r6;
// [Asm]   r17 -- r49;
// [Asm]   r11 -- r13;
// [Asm]   r10 -- r38;
// [Asm]   r10 -- r12;
// [Asm]   r0 -- r9;
// [Asm]   r9 -- r23;
// [Asm]   r16 -- r37;
// [Asm]   r7 -- r38;
// [Asm]   r2 -- r12;
// [Asm]   r23 -- r54;
// [Asm]   r10 -- r31;
// [Asm]   r20 -- r50;
// [Asm]   r51 -- r54;
// [Asm]   r21 -- r50;
// [Asm]   r0 -- r1;
// [Asm]   r9 -- r20;
// [Asm]   r10 -- r42;
// [Asm]   r0 -- r10;
// [Asm]   r4 -- r25;
// [Asm]   r2 -- r36;
// [Asm]   r15 -- r23;
// [Asm]   r16 -- r21;
// [Asm]   r6 -- r55;
// [Asm]   r12 -- r21;
// [Asm]   r6 -- r23;
// [Asm]   r0 -- r4;
// [Asm]   r7 -- r42;
// [Asm]   r16 -- r24;
// [Asm]   r11 -- r36;
// [Asm]   r16 -- r38;
// [Asm]   r4 -- r14;
// [Asm]   r15 -- r30;
// [Asm]   r14 -- r37;
// [Asm]   r14 -- r15;
// [Asm]   r49 -- r56;
// [Asm]   r8 -- r30;
// [Asm]   r14 -- r32;
// [Asm]   r0 -- r18;
// [Asm]   r10 -- r59;
// [Asm]   r51 -- r52;
// [Asm]   r20 -- r51;
// [Asm]   r3 -- r19;
// [Asm]   r7 -- r29;
// [Asm]   r53 -- r54;
// [Asm]   r13 -- r15;
// [Asm]   r2 -- r26;
// [Asm]   r50 -- r56;
// [Asm]   r16 -- r58;
// [Asm]   r11 -- r20;
// [Asm]   r4 -- r23;
// [Asm]   r1 -- r8;
// [Asm]   r3 -- r38;
// [Asm]   r7 -- r24;
// [Asm]   r8 -- r27;
// [Asm]   r6 -- r33;
// [Asm]   r8 -- r9;
// [Asm]   r15 -- r59;
// [Asm]   r11 -- r16;
// [Asm]   r6 -- r30;
// [Asm]   r1 -- r22;
// [Asm]   r0 -- r14;
// [Asm]   r2 -- r52;
// [Asm]   r11 -- r12;
// [Asm]   r10 -- r29;
// [Asm]   r1 -- r13;
// [Asm]   r50 -- r54;
// [Asm]   r11 -- r22;
// [Asm]   r10 -- r48;
// [Asm]   r7 -- r48;
// [Asm]   r6 -- r22;
// [Asm]   r7 -- r49;
// [Asm]   r8 -- r20;
// [Asm]   r6 -- r20;
// [Asm]   r7 -- r17;
// [Asm]   r14 -- r35;
// [Asm]   r3 -- r57;
// [Asm]   r6 -- r27;
// [Asm]   r2 -- r40;
// [Asm]   r12 -- r20;
// [Asm]   r4 -- r15;
// [Asm]   r12 -- r13;
// [Asm]   r5 -- r28;
// [Asm]   r12 -- r33;
// [Asm]   r10 -- r43;
// [Asm]   r16 -- r57;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r8 -- r15;
// [Asm]   r49 -- r52;
// [Asm]   r13 -- r23;
// [Asm]   r50 -- r53;
// [Asm]   r4 -- r32;
// [Asm]   r11 -- r59;
// [Asm]   r7 -- r15;
// [Asm]   r14 -- r21;
// [Asm]   r1 -- r29;
// [Asm]   r6 -- r57;
// [Asm]   r16 -- r35;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r13 -- r17;
// [Asm]   r1 -- r25;
// [Asm]   r2 -- r17;
// [Asm]   r8 -- r10;
// [Asm]   r11 -- r34;
// [Asm]   r2 -- r30;
// [Asm]   r5 -- r39;
// [Asm]   r8 -- r26;
// [Asm]   r15 -- r48;
// [Asm]   r7 -- r57;
// [Asm]   r10 -- r54;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r35;
// [Asm]   r4 -- r6;
// [Asm]   r7 -- r12;
// [Asm]   r9 -- r13;
// [Asm]   r15 -- r20;
// [Asm]   r7 -- r14;
// [Asm]   r20 -- r21;
// [Asm]   r2 -- r20;
// [Asm]   r2 -- r39;
// [Asm]   r6 -- r21;
// [Asm]   r8 -- r57;
// [Asm]   r0 -- r13;
// [Asm]   r16 -- r25;
// [Asm]   r17 -- r21;
// [Asm]   r7 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r14 -- r27;
// [Asm]   r14 -- r16;
// [Asm]   r14 -- r38;
// [Asm]   r3 -- r43;
// [Asm]   r21 -- r53;
// [Asm]   r9 -- r27;
// [Asm]   r7 -- r40;
// [Asm]   r10 -- r26;
// [Asm]   r1 -- r4;
// [Asm]   r19 -- r51;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r0 -- r25;
// [Asm]   r6 -- r29;
// [Asm]   r11 -- r31;
// [Asm]   r7 -- r53;
// [Asm]   r2 -- r10;
// [Asm]   r11 -- r32;
// [Asm]   r23 -- r52;
// [Asm]   r1 -- r20;
// [Asm]   r16 -- r59;
// [Asm]   r0 -- r22;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r19 -- r21;
// [Asm]   r10 -- r58;
// [Asm]   r3 -- r34;
// [Asm]   r22 -- r50;
// [Asm]   r12 -- r19;
// [Asm]   r16 -- r17;
// [Asm]   r9 -- r18;
// [Asm]   r18 -- r50;
// [Asm]   r4 -- r21;
// [Asm]   r12 -- r24;
// [Asm]   r6 -- r13;
// [Asm]   r16 -- r34;
// [Asm]   r15 -- r18;
// [Asm]   r7 -- r34;
// [Asm]   r15 -- r57;
// [Asm]   r7 -- r55;
// [Asm]   r2 -- r33;
// [Asm]   r10 -- r37;
// [Asm]   r8 -- r17;
// [Asm]   r14 -- r56;
// [Asm]   r54 -- r55;
// [Asm]   r3 -- r4;
// [Asm]   r34 -- r55;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r7 -- r10;
// [Asm]   r15 -- r56;
// [Asm]   r50 -- r52;
// [Asm]   r1 -- r27;
// [Asm]   r6 -- r31;
// [Asm]   r10 -- r30;
// [Asm]   r8 -- r22;
// [Asm]   r8 -- r21;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r14 -- r31;
// [Asm]   r16 -- r39;
// [Asm]   r2 -- r24;
// [Asm]   r8 -- r14;
// [Asm]   r13 -- r21;
// [Asm]   r7 -- r8;
// [Asm]   r11 -- r30;
// [Asm]   r15 -- r28;
// [Asm]   r10 -- r55;
// [Asm]   r13 -- r29;
// [Asm]   r51 -- r56;
// [Asm]   r4 -- r9;
// [Asm]   r3 -- r58;
// [Asm]   r16 -- r27;
// [Asm]   r16 -- r22;
// [Asm]   r2 -- r53;
// [Asm]   r6 -- r58;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r17 -- r18;
// [Asm]   r4 -- r24;
// [Asm]   r14 -- r18;
// [Asm]   r11 -- r40;
// [Asm]   r14 -- r17;
// [Asm]   r6 -- r15;
// [Asm]   r11 -- r17;
// [Asm]   r15 -- r29;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r18;
// [Asm]   r7 -- r45;
// [Asm]   r9 -- r15;
// [Asm]   r14 -- r58;
// [Asm]   r12 -- r15;
// [Asm]   r14 -- r23;
// [Asm]   r3 -- r12;
// [Asm]   r7 -- r26;
// [Asm]   r5 -- r13;
// [Asm]   r7 -- r13;
// [Asm]   r1 -- r32;
// [Asm]   r0 -- r21;
// [Asm]   r45 -- r46;
// [Asm]   r3 -- r28;
// [Asm]   r7 -- r30;
// [Asm]   r14 -- r29;
// [Asm]   r8 -- r33;
// [Asm]   r14 -- r24;
// [Asm]   r16 -- r26;
// [Asm]   r16 -- r53;
// [Asm]   r7 -- r9;
// [Asm]   r6 -- r26;
// [Asm]   r5 -- r16;
// [Asm]   r10 -- r34;
// [Asm]   r6 -- r40;
// [Asm]   r15 -- r27;
// [Asm]   r22 -- r49;
// [Asm]   r13 -- r20;
// [Asm]   r1 -- r28;
// [Asm]   r7 -- r28;
// [Asm]   r15 -- r32;
// [Asm]   r52 -- r56;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r34;
// [Asm]   r21 -- r52;
// [Asm]   r8 -- r28;
// [Asm]   r9 -- r22;
// [Asm]   r53 -- r56;
// [Asm]   r34 -- r54;
// [Asm]   r11 -- r42;
// [Asm]   r18 -- r19;
// [Asm]   r19 -- r49;
// [Asm]   r8 -- r13;
// [Asm]   r15 -- r21;
// [Asm]   r12 -- r31;
// [Asm]   r2 -- r56;
// [Asm]   r16 -- r54;
// [Asm]   r15 -- r40;
// [Asm]   r6 -- r42;
// [Asm]   r10 -- r39;
// [Asm]   r2 -- r21;
// [Asm]   r21 -- r49;
// [Asm]   r21 -- r51;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r7 -- r58;
// [Asm]   r3 -- r59;
// [Asm]   r11 -- r38;
// [Asm]   r7 -- r31;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r38 -- r39;
// [Asm]   r7 -- r23;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r26;
// [Asm]   r2 -- r19;
// [Asm]   r0 -- r27;
// [Asm]   r15 -- r16;
// [Asm]   r22 -- r51;
// [Asm]   r2 -- r3;
// [Asm]   r14 -- r48;
// [Asm]   r10 -- r24;
// [Asm]   r13 -- r27;
// [Asm]   r12 -- r26;
// [Asm]   r5 -- r15;
// [Asm]   r19 -- r20;
// [Asm]   r10 -- r14;
// [Asm]   comment = "0:a0-> 1:v25-> 2:v16-> 3:v21-> 4:v26-> 5:v32-> 7:s11-> 11:zero-> 12:v23-> 13:v27-> 15:v19-> 17:a1-> 18:a2-> 19:a3-> 20:a4-> 21:a5-> 6:v17-> 8:v24-> 9:v28-> 10:v18-> 14:v20-> 16:v15-> 22:a6-> 23:a7-> 24:t0-> 25:t1-> 26:t2-> 27:t3-> 28:t4-> 29:v34-> 30:v35-> 31:v31-> 32:v30-> 57:v29-> 33:v22-> 38:v11-> 39:v61-> 34:v14-> 35:v13-> 36:v40-> 37:v41-> 48:v42-> 43:v43-> 42:v46-> 58:v56-> 59:v47-> 40:v38-> 49:v2-> 50:v3-> 51:v4-> 52:v5-> 53:v6-> 54:v7-> 55:v8-> 56:v9-> 44:v10-> 45:v12-> 46:v55-> 41:v52-> 47:v50"
// [Asm]   comment = "v55<-a2;v11<-a0;v22<-a0;v47<-a1;v28<-s2;v50<-a0;v17<-s0;v10<-a0;v27<-s6;v46<-a1;v6<-a4;v26<-s3;v34<-a0;v13<-a0;v9<-a7;v18<-s3;v24<-s1;v32<-s4;v40<-a0;v7<-a5;v30<-a1;v19<-s7;v2<-a0;v29<-a0;v43<-a0;v31<-a0;v61<-a1;v5<-a3;v23<-s5;v42<-a1;v41<-a0;v21<-s2;v25<-s0;v38<-a0;v52<-a0;v56<-a1;v14<-a0;v20<-s6;v3<-a1;v35<-a0;v4<-a2;v12<-a1;v8<-a6;v16<-s1;v15<-s5;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux25.220l10_9"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv a0, v32 ->   mv a0, s4
// [Asm] subst   mv a1, v26 ->   mv a1, s3
// [Asm] subst   call aux111.203l7_6 ->   call aux111.203l7_6
// [Asm] subst   lw v31, 0(v30) ->   lw a0, 0(a1)
// [Asm] subst   lw v32, 4(v30) ->   lw s4, 4(a1)
// [Asm] subst   bne v31, zero, .aux25.220l10_9_13 ->   bne a0, zero, .aux25.220l10_9_13
// [Asm] subst   mv v22, zero ->   mv a0, zero
// [Asm] subst   mv v14, zero ->   mv a0, zero
// [Asm] subst   j .aux25.220l10_9_0 ->   j .aux25.220l10_9_0
// [Asm] subst   addi v13, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v13, -8 ->   andi s11, a0, -8
// [Asm] subst   sw zero, 0(v13) ->   sw zero, 0(a0)
// [Asm] subst   sw zero, 4(v13) ->   sw zero, 4(a0)
// [Asm] subst   bne v47, zero, .aux25.220l10_9_4 ->   bne a1, zero, .aux25.220l10_9_4
// [Asm] subst   addi v11, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v11, -8 ->   andi s11, a0, -8
// [Asm] subst   li v61, 1 ->   li a1, 1
// [Asm] subst   sw v61, 0(v11) ->   sw a1, 0(a0)
// [Asm] subst   sw v32, 4(v11) ->   sw s4, 4(a0)
// [Asm] subst   j .aux25.220l10_9_17 ->   j .aux25.220l10_9_17
// [Asm] subst   j .aux25.220l10_9_6 ->   j .aux25.220l10_9_6
// [Asm] subst   mv v46, zero ->   mv a1, zero
// [Asm] subst   mv v22, zero ->   mv a0, zero
// [Asm] subst   j .aux25.220l10_9_11 ->   j .aux25.220l10_9_11
// [Asm] subst   blt v19, v43, .aux25.220l10_9_24 ->   blt s7, a0, .aux25.220l10_9_24
// [Asm] subst   addi v10, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v10, -8 ->   andi s11, a0, -8
// [Asm] subst   sw zero, 0(v10) ->   sw zero, 0(a0)
// [Asm] subst   sw zero, 4(v10) ->   sw zero, 4(a0)
// [Asm] subst   addi v12, s11, -8 ->   addi a1, s11, -8
// [Asm] subst   andi s11, v12, -8 ->   andi s11, a1, -8
// [Asm] subst   li v55, 1 ->   li a2, 1
// [Asm] subst   sw v55, 0(v12) ->   sw a2, 0(a1)
// [Asm] subst   sw v43, 4(v12) ->   sw a0, 4(a1)
// [Asm] subst   mv v50, v12 ->   mv a0, a1
// [Asm] subst   lw v42, 0(v41) ->   lw a1, 0(a0)
// [Asm] subst   lw v43, 4(v41) ->   lw a0, 4(a0)
// [Asm] subst   bne v42, zero, .aux25.220l10_9_2 ->   bne a1, zero, .aux25.220l10_9_2
// [Asm] subst   mv v15, v3 ->   mv s5, a1
// [Asm] subst   mv v16, v4 ->   mv s1, a2
// [Asm] subst   mv v17, v5 ->   mv s0, a3
// [Asm] subst   mv v18, v6 ->   mv s3, a4
// [Asm] subst   mv v19, v7 ->   mv s7, a5
// [Asm] subst   mv v20, v8 ->   mv s6, a6
// [Asm] subst   mv v21, v9 ->   mv s2, a7
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v23 ->   mv a1, s5
// [Asm] subst   mv a2, v24 ->   mv a2, s1
// [Asm] subst   mv a3, v25 ->   mv a3, s0
// [Asm] subst   mv a4, v27 ->   mv a4, s6
// [Asm] subst   mv a5, v28 ->   mv a5, s2
// [Asm] subst   call aux6.192l6_5 ->   call aux6.192l6_5
// [Asm] subst   mv v30, v29 ->   mv a1, a0
// [Asm] subst   ret ->   ret
// [Asm] subst   li v56, 1 ->   li a1, 1
// [Asm] subst   j .aux25.220l10_9_25 ->   j .aux25.220l10_9_25
// [Asm] subst   bne v35, zero, .aux25.220l10_9_15 ->   bne a0, zero, .aux25.220l10_9_15
// [Asm] pre_assigned_registers: Self(fref=f28) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_28"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_28"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main120l1_11 ->   call main120l1_11
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0, Insn(iref=%9) -> v17, Insn(iref=%8) -> v16, BlockParam(bref=b0, bpref=$b.0) -> v5, BlockParam(bref=b0, bpref=$b.1) -> v6, BlockParam(bref=b0, bpref=$b.2) -> v7, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%5) -> v13, Insn(iref=%0) -> v8, Insn(iref=%4) -> v12, Insn(iref=%3) -> v11, FnParam(fref=f0, fpref=$f.1) -> v3, FnParam(fref=f0, fpref=$f.2) -> v4, Insn(iref=%7) -> v15, BlockParam(bref=b5, bpref=$b.0) -> v18, BlockParam(bref=b6, bpref=$b.0) -> v19, Insn(iref=%2) -> v10, Insn(iref=%1) -> v9, Insn(iref=%6) -> v14
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%6), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Asm] defs: [s10]
// [Asm] live_set: [v5, zero, v7, v6]
// [Asm] move_origin: [v5]
// [Asm] defined: s10 is X
// [Asm] defs: [v30]
// [Asm] live_set: [v5, zero, v30, v7, v6]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v30, v7, v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v30, v7, v6]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0, v7, v6]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v7, v8, v6]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v6]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero, v7, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, v10, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v19]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v19]
// [Asm] move_origin: [v7]
// [Asm] defined: v19 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v19]
// [Asm] move_origin: [v18]
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v19]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v5, v10, zero, v7, v6]
// [Asm] move_origin: [v6]
// [Asm] defined: s10 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v5, v10, zero, v26, v7, v6]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v26, v7, v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, v10, zero, a0, v26, v6]
// [Asm] move_origin: [v7]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, a0, v26, v6, a1]
// [Asm] move_origin: [v10]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0, v6]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v12]
// [Asm] live_set: [v5, zero, v6, v12]
// [Asm] move_origin: [a0]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v6, v12]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v5, zero, v6, v12]
// [Asm] move_origin: [v5]
// [Asm] defined: s10 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v5, zero, v6, v12, v24]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v6, v12, v24]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v6, v12, v24]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0, v6, v12]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v13]
// [Asm] live_set: [v5, zero, v13, v6, v12]
// [Asm] move_origin: [a0]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v13, v6, v12]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v5, v14, zero, v13, v6, v12]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v5, v14, zero, v6, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, v12, v15, zero]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v18]
// [Asm] move_origin: [v12]
// [Asm] defined: v18 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v5, v6, v15, v12, zero]
// [Asm] move_origin: [v6]
// [Asm] defined: s10 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v5, v6, v15, v12, zero, v20]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v15, v12, zero, v20]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, v6, v15, zero, a0, v20]
// [Asm] move_origin: [v12]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, v6, a1, zero, a0, v20]
// [Asm] move_origin: [v15]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v17]
// [Asm] live_set: [v5, v6, v17, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v17, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v17, zero]
// [Asm] move_origin: [v5]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v17, zero]
// [Asm] move_origin: [v6]
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v17]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move_origin: [v3]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v4]
// [Asm] defined: v7 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of fold84l0_0"];
// [Asm]   r0 [label="s10", color=blue];
// [Asm]   r33 [label="v3 ← a1", color=green];
// [Asm]   r9 [label="a3", color=blue];
// [Asm]   r26 [label="v13 ← a1", color=green];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r13 [label="a7", color=blue];
// [Asm]   r4 [label="v6 ← s2", color=green];
// [Asm]   r29 [label="v18 ← a0", color=green];
// [Asm]   r7 [label="a1", color=blue];
// [Asm]   r10 [label="a4", color=blue];
// [Asm]   r8 [label="a2", color=blue];
// [Asm]   r5 [label="v30 ← a1", color=green];
// [Asm]   r32 [label="v2 ← a0", color=green];
// [Asm]   r15 [label="t1", color=blue];
// [Asm]   r24 [label="v12 ← s1", color=green];
// [Asm]   r31 [label="v17 ← a0", color=green];
// [Asm]   r17 [label="t3", color=blue];
// [Asm]   r12 [label="a6", color=blue];
// [Asm]   r20 [label="v9 ← a0", color=green];
// [Asm]   r23 [label="v26 ← a2", color=green];
// [Asm]   r3 [label="v7 ← s1", color=green];
// [Asm]   r27 [label="v14 ← a0", color=green];
// [Asm]   r1 [label="v5 ← s0", color=green];
// [Asm]   r28 [label="v15 ← a1", color=green];
// [Asm]   r11 [label="a5", color=blue];
// [Asm]   r34 [label="v4 ← a2", color=green];
// [Asm]   r22 [label="v19 ← a0", color=green];
// [Asm]   r14 [label="t0", color=blue];
// [Asm]   r30 [label="v20 ← a2", color=green];
// [Asm]   r25 [label="v24 ← a1", color=green];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="t2", color=blue];
// [Asm]   r18 [label="t4", color=blue];
// [Asm]   r19 [label="v8 ← a1", color=green];
// [Asm]   r21 [label="v10 ← a1", color=green];
// [Asm]   r6 -- r21;
// [Asm]   r2 -- r32;
// [Asm]   r2 -- r31;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r4 -- r34;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r30;
// [Asm]   r3 -- r16;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r0 -- r28;
// [Asm]   r28 -- r30;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r27;
// [Asm]   r27 -- r28;
// [Asm]   r11 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r3 -- r18;
// [Asm]   r7 -- r32;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r31;
// [Asm]   r2 -- r34;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r8 -- r24;
// [Asm]   r1 -- r31;
// [Asm]   r12 -- r24;
// [Asm]   r6 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r26 -- r27;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r33;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r4 -- r28;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r24 -- r27;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r25;
// [Asm]   r4 -- r8;
// [Asm]   r32 -- r34;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r8 -- r32;
// [Asm]   r6 -- r23;
// [Asm]   r2 -- r24;
// [Asm]   r0 -- r4;
// [Asm]   r16 -- r24;
// [Asm]   r24 -- r25;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r23;
// [Asm]   r6 -- r25;
// [Asm]   r18 -- r24;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r13 -- r24;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r26;
// [Asm]   r6 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r34;
// [Asm]   r0 -- r24;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r23;
// [Asm]   r7 -- r24;
// [Asm]   r3 -- r12;
// [Asm]   r6 -- r30;
// [Asm]   r0 -- r21;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r20;
// [Asm]   r17 -- r24;
// [Asm]   r6 -- r16;
// [Asm]   r7 -- r30;
// [Asm]   r4 -- r30;
// [Asm]   r4 -- r18;
// [Asm]   r8 -- r33;
// [Asm]   r14 -- r24;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r12;
// [Asm]   r24 -- r28;
// [Asm]   r6 -- r24;
// [Asm]   r24 -- r26;
// [Asm]   r1 -- r28;
// [Asm]   r24 -- r30;
// [Asm]   r21 -- r23;
// [Asm]   r6 -- r8;
// [Asm]   r33 -- r34;
// [Asm]   r2 -- r28;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r2 -- r14;
// [Asm]   r32 -- r33;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r6 -- r28;
// [Asm]   r9 -- r24;
// [Asm]   r3 -- r20;
// [Asm]   r1 -- r25;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r15 -- r24;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r30;
// [Asm]   r4 -- r17;
// [Asm]   r7 -- r23;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r14;
// [Asm]   r2 -- r19;
// [Asm]   r4 -- r26;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r3;
// [Asm]   r20 -- r21;
// [Asm]   r3 -- r23;
// [Asm]   r10 -- r24;
// [Asm]   r2 -- r27;
// [Asm]   r4 -- r19;
// [Asm]   r19 -- r20;
// [Asm]   r1 -- r24;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:s10-> 1:v5-> 2:zero-> 3:v7-> 4:v6-> 21:v10-> 6:a0-> 23:v26-> 7:a1-> 24:v12-> 8:a2-> 9:a3-> 10:a4-> 11:a5-> 12:a6-> 13:a7-> 14:t0-> 15:t1-> 16:t2-> 17:t3-> 18:t4-> 28:v15-> 30:v20-> 5:v30-> 20:v9-> 19:v8-> 25:v24-> 27:v14-> 26:v13-> 31:v17-> 32:v2-> 33:v3-> 34:v4-> 22:v19-> 29:v18"
// [Asm]   comment = "v3<-a1;v13<-a1;v6<-s2;v18<-a0;v30<-a1;v2<-a0;v12<-s1;v17<-a0;v9<-a0;v26<-a2;v7<-s1;v14<-a0;v5<-s0;v15<-a1;v4<-a2;v19<-a0;v20<-a2;v24<-a1;v8<-a1;v10<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of fold84l0_0"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv s10, v5 ->   mv s10, s0
// [Asm] subst   ld v30, 0(v5) ->   ld a1, 0(s0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   jalr v30 ->   jalr a1
// [Asm] subst   mv v8, a0 ->   mv a1, a0
// [Asm] subst   lw v9, 0(v8) ->   lw a0, 0(a1)
// [Asm] subst   lw v10, 4(v8) ->   lw a1, 4(a1)
// [Asm] subst   beq v9, zero, .fold84l0_0_1 ->   beq a0, zero, .fold84l0_0_1
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v19, v7 ->   mv a0, s1
// [Asm] subst   j .fold84l0_0_6 ->   j .fold84l0_0_6
// [Asm] subst   mv s10, v6 ->   mv s10, s2
// [Asm] subst   ld v26, 0(v6) ->   ld a2, 0(s2)
// [Asm] subst   mv a0, v7 ->   mv a0, s1
// [Asm] subst   jalr v26 ->   jalr a2
// [Asm] subst   mv v12, a0 ->   mv s1, a0
// [Asm] subst   mv s10, v5 ->   mv s10, s0
// [Asm] subst   ld v24, 0(v5) ->   ld a1, 0(s0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   jalr v24 ->   jalr a1
// [Asm] subst   mv v13, a0 ->   mv a1, a0
// [Asm] subst   lw v14, 0(v13) ->   lw a0, 0(a1)
// [Asm] subst   lw v15, 4(v13) ->   lw a1, 4(a1)
// [Asm] subst   beq v14, zero, .fold84l0_0_3 ->   beq a0, zero, .fold84l0_0_3
// [Asm] subst   mv v18, v12 ->   mv a0, s1
// [Asm] subst   mv s10, v6 ->   mv s10, s2
// [Asm] subst   ld v20, 0(v6) ->   ld a2, 0(s2)
// [Asm] subst   mv a0, v12 ->   mv a0, s1
// [Asm] subst   jalr v20 ->   jalr a2
// [Asm] subst   mv v7, v17 ->   mv s1, a0
// [Asm] subst   j .fold84l0_0_0 ->   j .fold84l0_0_0
// [Asm] subst   mv v5, v2 ->   mv s0, a0
// [Asm] subst   mv v6, v3 ->   mv s2, a1
// [Asm] subst   mv v7, v4 ->   mv s1, a2
// [Asm] pre_assigned_registers: FnParam(fref=f26, fpref=$f.1) -> v3, Self(fref=f26) -> v0, FnParam(fref=f26, fpref=$f.0) -> v2, Insn(iref=%0) -> v4
// [Asm] defs: []
// [Asm] live_set: [a1, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [a1, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of add102.233l11c0_26"];
// [Asm]   r0 [label="v0 ← a2", color=green];
// [Asm]   r3 [label="v2 ← a0", color=green];
// [Asm]   r9 [label="a6", color=blue];
// [Asm]   r6 [label="a3", color=blue];
// [Asm]   r13 [label="t2", color=blue];
// [Asm]   r4 [label="v3 ← a1", color=green];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t0", color=blue];
// [Asm]   r7 [label="a4", color=blue];
// [Asm]   r10 [label="a7", color=blue];
// [Asm]   r14 [label="t3", color=blue];
// [Asm]   r8 [label="a5", color=blue];
// [Asm]   r5 [label="a2", color=blue];
// [Asm]   r15 [label="t4", color=blue];
// [Asm]   r2 [label="a0", color=blue];
// [Asm]   r16 [label="v4 ← a0", color=green];
// [Asm]   r12 [label="t1", color=blue];
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r10;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r2 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r2 -- r14;
// [Asm]   r2 -- r15;
// [Asm]   r0 -- r2;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r1 -- r2;
// [Asm]   comment = "0:v0-> 1:a1-> 2:a0-> 3:v2-> 4:v3-> 5:a2-> 6:a3-> 7:a4-> 8:a5-> 9:a6-> 10:a7-> 11:t0-> 12:t1-> 13:t2-> 14:t3-> 15:t4-> 16:v4"
// [Asm]   comment = "v0<-a2;v2<-a0;v3<-a1;v4<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of add102.233l11c0_26"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v0, s10 ->   mv a2, s10
// [Asm] subst   call add102.233l11_10 ->   call add102.233l11_10
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v9, FnParam(fref=f1, fpref=$f.1) -> v3, FnParam(fref=f1, fpref=$f.0) -> v2, FnParam(fref=f1, fpref=$f.2) -> v4, BlockParam(bref=b3, bpref=$b.0) -> v13, Insn(iref=%2) -> v12, Insn(iref=%1) -> v8, Mem(fref=f1, mref=m0) -> v5, Self(fref=f1) -> v0, Mem(fref=f1, mref=m1) -> v6, Insn(iref=%5) -> v11, Insn(iref=%0) -> v7, Insn(iref=%4) -> v10
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), FnParam(fref=f1, fpref=$f.1)])
// [Asm] defs: []
// [Asm] live_set: [a2, a1, s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, s11, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [a2, s11, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, s11, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v4, s11, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v13]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v4, s11, v9, v7]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [s11, v7]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6, v7]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v6, v7]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v6, v16, v7]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move_origin: [v6]
// [Asm] defined: v13 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move_origin: [v5]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v13]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux65.157l2_1"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r5 [label="v3 ← a0", color=green];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r9 [label="v9 ← a0", color=green];
// [Asm]   r6 [label="v4 ← a1", color=green];
// [Asm]   r13 [label="v5 ← a0", color=green];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r1 [label="a2", color=blue];
// [Asm]   r11 [label="v16 ← a1", color=green];
// [Asm]   r7 [label="v7 ← a2", color=green];
// [Asm]   r10 [label="v6 ← a0", color=green];
// [Asm]   r12 [label="v13 ← a0", color=green];
// [Asm]   r8 [label="a0", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r4 -- r7;
// [Asm]   r5 -- r6;
// [Asm]   r5 -- r7;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r7;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r3;
// [Asm]   r7 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r3 -- r13;
// [Asm]   r3 -- r6;
// [Asm]   r7 -- r10;
// [Asm]   r3 -- r5;
// [Asm]   r10 -- r11;
// [Asm]   r7 -- r11;
// [Asm]   r3 -- r10;
// [Asm]   comment = "0:v2-> 1:a2-> 2:a1-> 3:s11-> 4:zero-> 5:v3-> 6:v4-> 7:v7-> 9:v9-> 10:v6-> 11:v16-> 13:v5-> 8:a0-> 12:v13"
// [Asm]   comment = "v2<-a0;v3<-a0;v9<-a0;v4<-a1;v5<-a0;v16<-a1;v7<-a2;v6<-a0;v13<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux65.157l2_1"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v3, a1 ->   mv a0, a1
// [Asm] subst   mv v4, a2 ->   mv a1, a2
// [Asm] subst   lw v7, 0(v4) ->   lw a2, 0(a1)
// [Asm] subst   beq v7, v3, .aux65.157l2_1_1 ->   beq a2, a0, .aux65.157l2_1_1
// [Asm] subst   ret ->   ret
// [Asm] subst   addi v9, v7, 1 ->   addi a0, a2, 1
// [Asm] subst   sw v9, 0(v4) ->   sw a0, 0(a1)
// [Asm] subst   addi v6, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v6, -8 ->   andi s11, a0, -8
// [Asm] subst   li v16, 1 ->   li a1, 1
// [Asm] subst   sw v16, 0(v6) ->   sw a1, 0(a0)
// [Asm] subst   sw v7, 4(v6) ->   sw a2, 4(a0)
// [Asm] subst   addi v5, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a0, -8
// [Asm] subst   sw zero, 0(v5) ->   sw zero, 0(a0)
// [Asm] subst   sw zero, 4(v5) ->   sw zero, 4(a0)
// [Asm] subst   j .aux65.157l2_1_3 ->   j .aux65.157l2_1_3
// [Asm] pre_assigned_registers: FnParam(fref=f10, fpref=$f.0) -> v2, FnParam(fref=f10, fpref=$f.1) -> v3, Self(fref=f10) -> v0, Insn(iref=%0) -> v4
// [Asm] defs: []
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of add102.233l11_10"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a0", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r3 [label="v4 ← a0", color=green];
// [Asm]   r2 [label="v3 ← a1", color=green];
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:v2-> 1:a1-> 2:v3-> 3:v4-> 4:a0"
// [Asm]   comment = "v2<-a0;v4<-a0;v3<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of add102.233l11_10"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   add v4, v2, v3 ->   add a0, a0, a1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v9, Mem(fref=f11, mref=m3) -> v5, Self(fref=f11) -> v0, Mem(fref=f11, mref=m2) -> v4, Insn(iref=%2) -> v8, Insn(iref=%1) -> v7, Mem(fref=f11, mref=m0) -> v2, Mem(fref=f11, mref=m1) -> v3, Insn(iref=%6) -> v12, Insn(iref=%5) -> v11, Insn(iref=%0) -> v6, Insn(iref=%4) -> v10
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [zero, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v3]
// [Asm] live_set: [v3, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, zero, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v3, zero, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v4]
// [Asm] live_set: [v3, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, zero, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v3, zero, v20, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v3, zero, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v3, v21, zero, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v3, zero, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v22]
// [Asm] live_set: [v3, zero, v22, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v3, zero, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v23]
// [Asm] live_set: [v3, zero, v23, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [v3, zero, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v24]
// [Asm] live_set: [v3, zero, v4, s11, v24, v2]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: []
// [Asm] live_set: [v3, zero, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v3, v25, zero, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v4, v5, v18, zero]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v10]
// [Asm] live_set: [v10, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v10, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v10, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [zero, v13]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v13]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v12]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main120l1_11"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r20 [label="a7", color=blue];
// [Asm]   r23 [label="t2", color=blue];
// [Asm]   r3 [label="v3 ← a1", color=green];
// [Asm]   r9 [label="v24 ← a3", color=green];
// [Asm]   r26 [label="v10 ← a0", color=green];
// [Asm]   r27 [label="v11 ← a0", color=green];
// [Asm]   r6 [label="v21 ← a3", color=green];
// [Asm]   r13 [label="a0", color=blue];
// [Asm]   r4 [label="v4 ← a2", color=green];
// [Asm]   r29 [label="v12 ← a0", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r28 [label="v13 ← a0", color=green];
// [Asm]   r11 [label="v5 ← a1", color=green];
// [Asm]   r7 [label="v22 ← a3", color=green];
// [Asm]   r10 [label="v25 ← a3", color=green];
// [Asm]   r22 [label="t1", color=blue];
// [Asm]   r14 [label="a1", color=blue];
// [Asm]   r8 [label="v23 ← a3", color=green];
// [Asm]   r5 [label="v20 ← a3", color=green];
// [Asm]   r24 [label="t3", color=blue];
// [Asm]   r15 [label="a2", color=blue];
// [Asm]   r25 [label="t4", color=blue];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r16 [label="a3", color=blue];
// [Asm]   r18 [label="a5", color=blue];
// [Asm]   r19 [label="a6", color=blue];
// [Asm]   r17 [label="a4", color=blue];
// [Asm]   r21 [label="t0", color=blue];
// [Asm]   r12 [label="v18 ← a0", color=green];
// [Asm]   r13 -- r24;
// [Asm]   r13 -- r15;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r26;
// [Asm]   r4 -- r5;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r23;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r22;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r13 -- r16;
// [Asm]   r11 -- r12;
// [Asm]   r3 -- r9;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r1 -- r16;
// [Asm]   r13 -- r25;
// [Asm]   r3 -- r5;
// [Asm]   r13 -- r20;
// [Asm]   r13 -- r19;
// [Asm]   r1 -- r28;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r11 -- r13;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r1 -- r21;
// [Asm]   r13 -- r23;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r1 -- r29;
// [Asm]   r13 -- r14;
// [Asm]   r2 -- r8;
// [Asm]   r0 -- r5;
// [Asm]   r3 -- r10;
// [Asm]   r13 -- r17;
// [Asm]   r1 -- r25;
// [Asm]   r1 -- r27;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r4 -- r7;
// [Asm]   r13 -- r18;
// [Asm]   r0 -- r10;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r8;
// [Asm]   r13 -- r22;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r2 -- r9;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r14;
// [Asm]   r13 -- r21;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r2 -- r3;
// [Asm]   r14 -- r15;
// [Asm]   r4 -- r9;
// [Asm]   r1 -- r24;
// [Asm]   comment = "0:v2-> 1:zero-> 2:s11-> 3:v3-> 4:v4-> 5:v20-> 6:v21-> 7:v22-> 8:v23-> 9:v24-> 10:v25-> 11:v5-> 12:v18-> 13:a0-> 14:a1-> 15:a2-> 16:a3-> 17:a4-> 18:a5-> 19:a6-> 20:a7-> 21:t0-> 22:t1-> 23:t2-> 24:t3-> 25:t4-> 26:v10-> 27:v11-> 28:v13-> 29:v12"
// [Asm]   comment = "v2<-a0;v3<-a1;v24<-a3;v10<-a0;v11<-a0;v21<-a3;v4<-a2;v12<-a0;v13<-a0;v5<-a1;v22<-a3;v25<-a3;v23<-a3;v20<-a3;v18<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main120l1_11"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v2, s11, -4 ->   addi a0, s11, -4
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a0, -8
// [Asm] subst   sw zero, 0(v2) ->   sw zero, 0(a0)
// [Asm] subst   addi v3, s11, -4 ->   addi a1, s11, -4
// [Asm] subst   andi s11, v3, -8 ->   andi s11, a1, -8
// [Asm] subst   sw zero, 0(v3) ->   sw zero, 0(a1)
// [Asm] subst   addi v4, s11, -64 ->   addi a2, s11, -64
// [Asm] subst   andi s11, v4, -8 ->   andi s11, a2, -8
// [Asm] subst   la v20, aux25.220l10c0_24 ->   la a3, aux25.220l10c0_24
// [Asm] subst   sd v20, 0(v4) ->   sd a3, 0(a2)
// [Asm] subst   li v21, 100 ->   li a3, 100
// [Asm] subst   sd v21, 8(v4) ->   sd a3, 8(a2)
// [Asm] subst   li v22, 1000 ->   li a3, 1000
// [Asm] subst   sd v22, 16(v4) ->   sd a3, 16(a2)
// [Asm] subst   li v23, 1 ->   li a3, 1
// [Asm] subst   sd v23, 24(v4) ->   sd a3, 24(a2)
// [Asm] subst   li v24, 50 ->   li a3, 50
// [Asm] subst   sd v24, 32(v4) ->   sd a3, 32(a2)
// [Asm] subst   li v25, 1200 ->   li a3, 1200
// [Asm] subst   sd v25, 40(v4) ->   sd a3, 40(a2)
// [Asm] subst   sd v2, 48(v4) ->   sd a0, 48(a2)
// [Asm] subst   sd v3, 56(v4) ->   sd a1, 56(a2)
// [Asm] subst   addi v5, s11, -8 ->   addi a1, s11, -8
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a1, -8
// [Asm] subst   la v18, add102.233l11c0_26 ->   la a0, add102.233l11c0_26
// [Asm] subst   sd v18, 0(v5) ->   sd a0, 0(a1)
// [Asm] subst   mv a0, v4 ->   mv a0, a2
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   call fold84l0_0 ->   call fold84l0_0
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v13, 10 ->   li a0, 10
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: BlockParam(bref=b12, bpref=$b.0) -> v12, FnParam(fref=f5, fpref=$f.3) -> v5, Mem(fref=f5, mref=m8) -> v10, FnParam(fref=f5, fpref=$f.2) -> v4, BlockParam(bref=b3, bpref=$b.0) -> v27, Insn(iref=%9) -> v13, Insn(iref=%8) -> v11, Insn(iref=%10) -> v14, FnParam(fref=f5, fpref=$f.5) -> v7, Insn(iref=%4) -> v26, Mem(fref=f5, mref=m1) -> v9, Insn(iref=%3) -> v22, Insn(iref=%13) -> v16, FnParam(fref=f5, fpref=$f.0) -> v2, Mem(fref=f5, mref=m0) -> v8, Self(fref=f5) -> v0, BlockParam(bref=b11, bpref=$b.0) -> v18, Insn(iref=%7) -> v23, BlockParam(bref=b5, bpref=$b.0) -> v24, Insn(iref=%2) -> v21, Insn(iref=%1) -> v20, Insn(iref=%11) -> v15, BlockParam(bref=b4, bpref=$b.0) -> v19, Insn(iref=%6) -> v25, FnParam(fref=f5, fpref=$f.4) -> v6, FnParam(fref=f5, fpref=$f.1) -> v3, Insn(iref=%12) -> v17
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%9), Int32(val=0)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v27]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v23]
// [Asm] live_set: [s11, v23]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v24, s11]
// [Asm] move_origin: [v23]
// [Asm] defined: v24 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, s11, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, v5, s11, zero, a0, v7]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, a1, s11, zero, a0, v7]
// [Asm] move_origin: [v4]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, v5, a1, s11, zero, a0]
// [Asm] move_origin: [v7]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v17]
// [Asm] live_set: [v5, v17, s11, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v17, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v5, v18, s11, zero]
// [Asm] move_origin: [v17]
// [Asm] defined: v18 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v14, v10, zero]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, v14, v10, zero, s11]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v5, v14, v10, zero, v36, s11]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v14, v10, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, s11, v10, zero]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v5, v18, s11, zero]
// [Asm] move_origin: [v10]
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v18, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v8]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defs: [v27]
// [Asm] live_set: [v27]
// [Asm] move_origin: [v8]
// [Asm] defined: v27 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v19, v5, s11, zero, v20]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v5, s11, v21, zero, v20]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v5, s11, v21, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a5, zero, a0, a4, a2, a1, s11, a3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a5, zero, a4, a2, a1, s11, a3]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [a5, zero, a4, a2, s11, a3, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [a5, zero, a4, v4, s11, a3, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, a5, zero, a4, v4, s11, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v5, a5, zero, v4, v6, s11, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, zero, v7, v4, v6, s11, v3]
// [Asm] move_origin: [a5]
// [Asm] defined: v7 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v24, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v24, v9]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v30]
// [Asm] live_set: [v24, v9, v30]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: []
// [Asm] live_set: [v24, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v9]
// [Asm] move_origin: []
// [Asm] defs: [v27]
// [Asm] live_set: [v27]
// [Asm] move_origin: [v9]
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v27]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v5, zero, v13, v7, v4, s11, v12]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v14, v5, zero, v13, v7, v4, s11]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v14, v5, s11, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v7, v4, v6, s11, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, a0, v7, v4, a1, v6, s11]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, zero, a0, v7, v4, a2, a1, s11]
// [Asm] move_origin: [v6]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, v5, s11, zero, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v4, v5, s11, zero, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v4, v5, s11, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v4, v5, v12, s11, zero, v7]
// [Asm] move_origin: [v11]
// [Asm] defined: v12 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v19, v5, s11, zero]
// [Asm] move_origin: [v18]
// [Asm] defined: v19 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux6.192l6_5"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r33 [label="v9 ← a1", color=green];
// [Asm]   r9 [label="a2", color=blue];
// [Asm]   r26 [label="v27 ← a0", color=green];
// [Asm]   r6 [label="zero", color=blue];
// [Asm]   r13 [label="a6", color=blue];
// [Asm]   r4 [label="v4 ← s0", color=green];
// [Asm]   r29 [label="v21 ← a1", color=green];
// [Asm]   r35 [label="v13 ← a1", color=green];
// [Asm]   r7 [label="v7 ← s2", color=green];
// [Asm]   r10 [label="a3", color=blue];
// [Asm]   r8 [label="a1", color=blue];
// [Asm]   r5 [label="v5 ← s1", color=green];
// [Asm]   r36 [label="v12 ← a0", color=green];
// [Asm]   r32 [label="v6 ← a2", color=green];
// [Asm]   r24 [label="v36 ← a2", color=green];
// [Asm]   r15 [label="t0", color=blue];
// [Asm]   r31 [label="v3 ← a1", color=green];
// [Asm]   r17 [label="t2", color=blue];
// [Asm]   r12 [label="a5", color=blue];
// [Asm]   r37 [label="v11 ← a0", color=green];
// [Asm]   r20 [label="v17 ← a0", color=green];
// [Asm]   r23 [label="v14 ← a0", color=green];
// [Asm]   r3 [label="v24 ← a0", color=green];
// [Asm]   r27 [label="v20 ← a0", color=green];
// [Asm]   r1 [label="v23 ← a0", color=green];
// [Asm]   r28 [label="v19 ← a1", color=green];
// [Asm]   r11 [label="a4", color=blue];
// [Asm]   r34 [label="v30 ← a2", color=green];
// [Asm]   r22 [label="v10 ← a1", color=green];
// [Asm]   r14 [label="a7", color=blue];
// [Asm]   r30 [label="v2 ← a0", color=green];
// [Asm]   r25 [label="v8 ← a0", color=green];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r16 [label="t1", color=blue];
// [Asm]   r18 [label="t3", color=blue];
// [Asm]   r19 [label="t4", color=blue];
// [Asm]   r21 [label="v18 ← a0", color=green];
// [Asm]   r6 -- r21;
// [Asm]   r2 -- r32;
// [Asm]   r2 -- r31;
// [Asm]   r0 -- r13;
// [Asm]   r12 -- r32;
// [Asm]   r5 -- r21;
// [Asm]   r0 -- r32;
// [Asm]   r6 -- r36;
// [Asm]   r6 -- r35;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r10;
// [Asm]   r27 -- r29;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r0 -- r17;
// [Asm]   r5 -- r18;
// [Asm]   r2 -- r10;
// [Asm]   r6 -- r29;
// [Asm]   r11 -- r31;
// [Asm]   r23 -- r35;
// [Asm]   r5 -- r29;
// [Asm]   r9 -- r31;
// [Asm]   r2 -- r16;
// [Asm]   r27 -- r28;
// [Asm]   r2 -- r37;
// [Asm]   r2 -- r7;
// [Asm]   r0 -- r16;
// [Asm]   r3 -- r34;
// [Asm]   r7 -- r32;
// [Asm]   r7 -- r35;
// [Asm]   r4 -- r35;
// [Asm]   r4 -- r31;
// [Asm]   r0 -- r6;
// [Asm]   r5 -- r31;
// [Asm]   r6 -- r13;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r33;
// [Asm]   r5 -- r35;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r9;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r7 -- r10;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r5 -- r32;
// [Asm]   r10 -- r31;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r6 -- r31;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r33;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r10;
// [Asm]   r23 -- r24;
// [Asm]   r10 -- r30;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r2 -- r36;
// [Asm]   r5 -- r14;
// [Asm]   r0 -- r11;
// [Asm]   r2 -- r22;
// [Asm]   r8 -- r32;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r24;
// [Asm]   r6 -- r23;
// [Asm]   r7 -- r8;
// [Asm]   r11 -- r30;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r6 -- r32;
// [Asm]   r8 -- r30;
// [Asm]   r5 -- r36;
// [Asm]   r0 -- r18;
// [Asm]   r6 -- r25;
// [Asm]   r35 -- r36;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r0 -- r15;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r4 -- r23;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r4 -- r37;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r23;
// [Asm]   r8 -- r9;
// [Asm]   r6 -- r30;
// [Asm]   r5 -- r13;
// [Asm]   r7 -- r13;
// [Asm]   r0 -- r14;
// [Asm]   r5 -- r19;
// [Asm]   r9 -- r30;
// [Asm]   r6 -- r16;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r12;
// [Asm]   r0 -- r19;
// [Asm]   r22 -- r24;
// [Asm]   r6 -- r24;
// [Asm]   r6 -- r20;
// [Asm]   r0 -- r31;
// [Asm]   r6 -- r8;
// [Asm]   r33 -- r34;
// [Asm]   r7 -- r17;
// [Asm]   r6 -- r19;
// [Asm]   r6 -- r27;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r4 -- r15;
// [Asm]   r7 -- r37;
// [Asm]   r6 -- r37;
// [Asm]   r4 -- r11;
// [Asm]   r7 -- r19;
// [Asm]   r5 -- r28;
// [Asm]   r2 -- r14;
// [Asm]   r5 -- r9;
// [Asm]   r5 -- r24;
// [Asm]   r12 -- r31;
// [Asm]   r0 -- r8;
// [Asm]   r4 -- r32;
// [Asm]   r5 -- r37;
// [Asm]   r6 -- r28;
// [Asm]   r7 -- r15;
// [Asm]   r22 -- r23;
// [Asm]   r7 -- r11;
// [Asm]   r7 -- r36;
// [Asm]   r0 -- r5;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r4 -- r36;
// [Asm]   r2 -- r17;
// [Asm]   r12 -- r30;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r30;
// [Asm]   r7 -- r31;
// [Asm]   r0 -- r12;
// [Asm]   r5 -- r27;
// [Asm]   r31 -- r32;
// [Asm]   r4 -- r17;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r23;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r35;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r2 -- r19;
// [Asm]   r0 -- r7;
// [Asm]   r7 -- r12;
// [Asm]   r2 -- r3;
// [Asm]   r7 -- r14;
// [Asm]   r2 -- r27;
// [Asm]   r5 -- r15;
// [Asm]   r4 -- r19;
// [Asm]   r5 -- r12;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:a0-> 2:s11-> 4:v4-> 5:v5-> 6:zero-> 7:v7-> 8:a1-> 9:a2-> 31:v3-> 32:v6-> 12:a5-> 10:a3-> 11:a4-> 30:v2-> 13:a6-> 14:a7-> 15:t0-> 16:t1-> 17:t2-> 18:t3-> 19:t4-> 23:v14-> 35:v13-> 36:v12-> 37:v11-> 22:v10-> 24:v36-> 20:v17-> 21:v18-> 27:v20-> 28:v19-> 29:v21-> 25:v8-> 1:v23-> 3:v24-> 33:v9-> 34:v30-> 26:v27"
// [Asm]   comment = "v9<-a1;v27<-a0;v4<-s0;v21<-a1;v13<-a1;v7<-s2;v5<-s1;v12<-a0;v6<-a2;v36<-a2;v3<-a1;v11<-a0;v17<-a0;v14<-a0;v24<-a0;v20<-a0;v23<-a0;v19<-a1;v30<-a2;v10<-a1;v2<-a0;v8<-a0;v18<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux6.192l6_5"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   add v23, v5, v21 ->   add a0, s1, a1
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v4 ->   mv a1, s0
// [Asm] subst   mv a2, v7 ->   mv a2, s2
// [Asm] subst   call aux65.170l3_2 ->   call aux65.170l3_2
// [Asm] subst   addi v10, s11, -8 ->   addi a1, s11, -8
// [Asm] subst   andi s11, v10, -8 ->   andi s11, a1, -8
// [Asm] subst   li v36, 1 ->   li a2, 1
// [Asm] subst   sw v36, 0(v10) ->   sw a2, 0(a1)
// [Asm] subst   sw v14, 4(v10) ->   sw a0, 4(a1)
// [Asm] subst   mv v18, v10 ->   mv a0, a1
// [Asm] subst   j .aux6.192l6_5_11 ->   j .aux6.192l6_5_11
// [Asm] subst   addi v8, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v8, -8 ->   andi s11, a0, -8
// [Asm] subst   sw zero, 0(v8) ->   sw zero, 0(a0)
// [Asm] subst   sw zero, 4(v8) ->   sw zero, 4(a0)
// [Asm] subst   lw v20, 0(v19) ->   lw a0, 0(a1)
// [Asm] subst   lw v21, 4(v19) ->   lw a1, 4(a1)
// [Asm] subst   bne v20, zero, .aux6.192l6_5_2 ->   bne a0, zero, .aux6.192l6_5_2
// [Asm] subst   mv v4, a2 ->   mv s0, a2
// [Asm] subst   mv v5, a3 ->   mv s1, a3
// [Asm] subst   mv v6, a4 ->   mv a2, a4
// [Asm] subst   mv v7, a5 ->   mv s2, a5
// [Asm] subst   addi v9, s11, -8 ->   addi a1, s11, -8
// [Asm] subst   andi s11, v9, -8 ->   andi s11, a1, -8
// [Asm] subst   li v30, 1 ->   li a2, 1
// [Asm] subst   sw v30, 0(v9) ->   sw a2, 0(a1)
// [Asm] subst   sw v24, 4(v9) ->   sw a0, 4(a1)
// [Asm] subst   mv v27, v9 ->   mv a0, a1
// [Asm] subst   j .aux6.192l6_5_3 ->   j .aux6.192l6_5_3
// [Asm] subst   lw v13, 0(v12) ->   lw a1, 0(a0)
// [Asm] subst   lw v14, 4(v12) ->   lw a0, 4(a0)
// [Asm] subst   bne v13, zero, .aux6.192l6_5_10 ->   bne a1, zero, .aux6.192l6_5_10
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   call aux65.157l2_1 ->   call aux65.157l2_1
// [Asm] subst   mv v19, v18 ->   mv a1, a0
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v10, Mem(fref=f2, mref=m1) -> v6, Insn(iref=%3) -> v9, Mem(fref=f2, mref=m0) -> v5, BlockParam(bref=b3, bpref=$b.0) -> v13, Insn(iref=%2) -> v12, Self(fref=f2) -> v0, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%1) -> v8, FnParam(fref=f2, fpref=$f.0) -> v2, Insn(iref=%5) -> v11, FnParam(fref=f2, fpref=$f.2) -> v4, Insn(iref=%0) -> v7
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), FnParam(fref=f2, fpref=$f.1)])
// [Asm] defs: [v9]
// [Asm] live_set: [v4, s11, v9, v7]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [s11, v7]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6, v7]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v6, v7]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v6, v16, v7]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move_origin: [v6]
// [Asm] defined: v13 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v13]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, s11, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [a2, s11, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, s11, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v4, s11, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move_origin: [v5]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v13]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux65.170l3_2"];
// [Asm]   r0 [label="v9 ← a0", color=green];
// [Asm]   r5 [label="v16 ← a1", color=green];
// [Asm]   r3 [label="v7 ← a2", color=green];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r9 [label="a2", color=blue];
// [Asm]   r6 [label="v13 ← a0", color=green];
// [Asm]   r13 [label="v5 ← a0", color=green];
// [Asm]   r4 [label="v6 ← a0", color=green];
// [Asm]   r1 [label="v4 ← a1", color=green];
// [Asm]   r11 [label="zero", color=blue];
// [Asm]   r7 [label="a0", color=blue];
// [Asm]   r10 [label="a1", color=blue];
// [Asm]   r12 [label="v3 ← a0", color=green];
// [Asm]   r8 [label="v2 ← a0", color=green];
// [Asm]   r0 -- r1;
// [Asm]   r11 -- r12;
// [Asm]   r2 -- r13;
// [Asm]   r8 -- r10;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r5;
// [Asm]   r8 -- r11;
// [Asm]   r11 -- r13;
// [Asm]   r2 -- r11;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r9 -- r12;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r8 -- r9;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   comment = "0:v9-> 1:v4-> 2:s11-> 3:v7-> 11:zero-> 12:v3-> 4:v6-> 5:v16-> 8:v2-> 9:a2-> 13:v5-> 10:a1-> 6:v13-> 7:a0"
// [Asm]   comment = "v9<-a0;v16<-a1;v7<-a2;v13<-a0;v5<-a0;v6<-a0;v4<-a1;v3<-a0;v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux65.170l3_2"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v9, v7, 1 ->   addi a0, a2, 1
// [Asm] subst   sw v9, 0(v4) ->   sw a0, 0(a1)
// [Asm] subst   addi v6, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v6, -8 ->   andi s11, a0, -8
// [Asm] subst   li v16, 1 ->   li a1, 1
// [Asm] subst   sw v16, 0(v6) ->   sw a1, 0(a0)
// [Asm] subst   sw v7, 4(v6) ->   sw a2, 4(a0)
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v3, a1 ->   mv a0, a1
// [Asm] subst   mv v4, a2 ->   mv a1, a2
// [Asm] subst   lw v7, 0(v4) ->   lw a2, 0(a1)
// [Asm] subst   beq v7, v3, .aux65.170l3_2_1 ->   beq a2, a0, .aux65.170l3_2_1
// [Asm] subst   addi v5, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a0, -8
// [Asm] subst   sw zero, 0(v5) ->   sw zero, 0(a0)
// [Asm] subst   sw zero, 4(v5) ->   sw zero, 4(a0)
// [Asm] subst   j .aux65.170l3_2_3 ->   j .aux65.170l3_2_3
// [Asm] pre_assigned_registers: FreeVar(fvref=^6) -> v8, FreeVar(fvref=^5) -> v7, FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, FreeVar(fvref=^4) -> v6, FreeVar(fvref=^3) -> v5, FreeVar(fvref=^7) -> v9, FnParam(fref=f24, fpref=$f.0) -> v2, Self(fref=f24) -> v0, Insn(iref=%0) -> v10
// [Asm] defs: []
// [Asm] live_set: [a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [a0, v0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v0, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v0, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, v0, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, v0, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, v7, v0, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v2, v5, v8, v7, v0, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v2, v5, v8, v7, v4, v6, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, v8, v7, v4, v6, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, a0, v8, v7, v4, v6, v9, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, a0, v8, v7, v4, a1, v6, v9]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, a0, v8, v7, a2, a1, v6, v9]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [a0, v8, v7, a2, a1, v6, a3, v9]
// [Asm] move_origin: [v5]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [a0, a4, v8, v7, a2, a1, a3, v9]
// [Asm] move_origin: [v6]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [a5, a0, a4, v8, a2, a1, a3, v9]
// [Asm] move_origin: [v7]
// [Asm] defined: a5 is X
// [Asm] defs: [a6]
// [Asm] live_set: [a5, a0, a4, a6, a2, a1, a3, v9]
// [Asm] move_origin: [v8]
// [Asm] defined: a6 is X
// [Asm] defs: [a7]
// [Asm] live_set: [a7, a5, a0, a4, a6, a2, a1, a3]
// [Asm] move_origin: [v9]
// [Asm] defined: a7 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [a0]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v10]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux25.220l10c0_24"];
// [Asm]   r0 [label="v0 ← a1", color=green];
// [Asm]   r20 [label="t3", color=blue];
// [Asm]   r3 [label="v3 ← a2", color=green];
// [Asm]   r9 [label="v9 ← t0", color=green];
// [Asm]   r6 [label="v6 ← a5", color=green];
// [Asm]   r13 [label="a4", color=blue];
// [Asm]   r4 [label="v4 ← a3", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a2", color=blue];
// [Asm]   r7 [label="v7 ← a6", color=green];
// [Asm]   r10 [label="a1", color=blue];
// [Asm]   r22 [label="v10 ← a0", color=green];
// [Asm]   r14 [label="a5", color=blue];
// [Asm]   r8 [label="v8 ← a7", color=green];
// [Asm]   r5 [label="v5 ← a4", color=green];
// [Asm]   r15 [label="a6", color=blue];
// [Asm]   r2 [label="v2 ← a0", color=green];
// [Asm]   r16 [label="a7", color=blue];
// [Asm]   r18 [label="t1", color=blue];
// [Asm]   r19 [label="t2", color=blue];
// [Asm]   r17 [label="t0", color=blue];
// [Asm]   r21 [label="t4", color=blue];
// [Asm]   r12 [label="a3", color=blue];
// [Asm]   r14 -- r15;
// [Asm]   r10 -- r14;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r6 -- r11;
// [Asm]   r13 -- r15;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r5;
// [Asm]   r14 -- r16;
// [Asm]   r1 -- r8;
// [Asm]   r5 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r10;
// [Asm]   r9 -- r15;
// [Asm]   r3 -- r6;
// [Asm]   r11 -- r14;
// [Asm]   r1 -- r4;
// [Asm]   r12 -- r15;
// [Asm]   r1 -- r7;
// [Asm]   r8 -- r9;
// [Asm]   r1 -- r18;
// [Asm]   r11 -- r16;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r7 -- r13;
// [Asm]   r10 -- r13;
// [Asm]   r13 -- r16;
// [Asm]   r3 -- r9;
// [Asm]   r11 -- r12;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r11;
// [Asm]   r6 -- r12;
// [Asm]   r3 -- r5;
// [Asm]   r10 -- r16;
// [Asm]   r8 -- r12;
// [Asm]   r6 -- r8;
// [Asm]   r0 -- r6;
// [Asm]   r9 -- r14;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r9 -- r11;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r12 -- r13;
// [Asm]   r8 -- r13;
// [Asm]   r11 -- r13;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r9;
// [Asm]   r0 -- r3;
// [Asm]   r10 -- r12;
// [Asm]   r1 -- r21;
// [Asm]   r0 -- r8;
// [Asm]   r6 -- r10;
// [Asm]   r7 -- r10;
// [Asm]   r13 -- r14;
// [Asm]   r10 -- r15;
// [Asm]   r9 -- r12;
// [Asm]   r10 -- r11;
// [Asm]   r2 -- r8;
// [Asm]   r7 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r1 -- r11;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r11 -- r15;
// [Asm]   r8 -- r11;
// [Asm]   r12 -- r14;
// [Asm]   r12 -- r16;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r14;
// [Asm]   r8 -- r14;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r3;
// [Asm]   r7 -- r8;
// [Asm]   r0 -- r7;
// [Asm]   r7 -- r12;
// [Asm]   r9 -- r13;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r4 -- r9;
// [Asm]   comment = "0:v0-> 1:a0-> 3:v3-> 4:v4-> 5:v5-> 6:v6-> 7:v7-> 8:v8-> 2:v2-> 9:v9-> 10:a1-> 11:a2-> 12:a3-> 13:a4-> 14:a5-> 15:a6-> 16:a7-> 17:t0-> 18:t1-> 19:t2-> 20:t3-> 21:t4-> 22:v10"
// [Asm]   comment = "v0<-a1;v3<-a2;v9<-t0;v6<-a5;v4<-a3;v7<-a6;v10<-a0;v8<-a7;v5<-a4;v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux25.220l10c0_24"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   lw v3, 8(v0) ->   lw a2, 8(a1)
// [Asm] subst   lw v4, 16(v0) ->   lw a3, 16(a1)
// [Asm] subst   lw v5, 24(v0) ->   lw a4, 24(a1)
// [Asm] subst   lw v6, 32(v0) ->   lw a5, 32(a1)
// [Asm] subst   lw v7, 40(v0) ->   lw a6, 40(a1)
// [Asm] subst   ld v8, 48(v0) ->   ld a7, 48(a1)
// [Asm] subst   ld v9, 56(v0) ->   ld t0, 56(a1)
// [Asm] subst   mv a1, v3 ->   mv a1, a2
// [Asm] subst   mv a2, v4 ->   mv a2, a3
// [Asm] subst   mv a3, v5 ->   mv a3, a4
// [Asm] subst   mv a4, v6 ->   mv a4, a5
// [Asm] subst   mv a5, v7 ->   mv a5, a6
// [Asm] subst   mv a6, v8 ->   mv a6, a7
// [Asm] subst   mv a7, v9 ->   mv a7, t0
// [Asm] subst   call aux25.220l10_9 ->   call aux25.220l10_9
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf true
// [Asm] aux111.203l7_6:
// [Asm] # block info: defs: [v3, v2], uses: [v3, a1, a0, v2], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, a0, zero], live_out: [zero]
// [Asm] # block parameters: []
// [Asm] .aux111.203l7_6_0:
// [Asm]   # save_ctx1  # live: [a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v3, zero, v2]
// [Asm] # control
// [Asm]   blt v2, v3, .aux111.203l7_6_2  # live: [zero]
// [Asm] 
// [Asm] # block info: defs: [v5], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .aux111.203l7_6_1:
// [Asm] # control
// [Asm]   mv v5, zero  # live: [v5]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v5, a0], upward_exposed: [v5], params_defs: [v5]
// [Asm] # live_in: [v5], live_out: []
// [Asm] # block parameters: [v5]
// [Asm] .aux111.203l7_6_3:
// [Asm] # control
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v6, v5], uses: [v6], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .aux111.203l7_6_2:
// [Asm] # control
// [Asm]   li v6, 1  # live: [v6]
// [Asm]   mv v5, v6  # live: [v5]
// [Asm]   j .aux111.203l7_6_3  # live: [v5]
// [Asm] 
// [Asm] # leaf false
// [Asm] aux6.192l6_5:
// [Asm] # block info: defs: [v3, v7, v4, v6, v5, v2], uses: [a2, a1, a3, a5, a0, a4], upward_exposed: [a2, a1, a3, a5, a0, a4], params_defs: []
// [Asm] # live_in: [a5, a0, zero, a4, a2, a1, a3, s11], live_out: [v5, zero, v7, v4, v6, s11, v3]
// [Asm] # block parameters: []
// [Asm] .aux6.192l6_5_0:
// [Asm]   # save_ctx1  # live: [a5, zero, a0, a4, a2, a1, s11, a3]
// [Asm]   mv v2, a0  # live: [a5, zero, a4, a2, a1, s11, a3]
// [Asm]   mv v3, a1  # live: [a5, zero, a4, a2, s11, a3, v3]
// [Asm]   mv v4, a2  # live: [a5, zero, a4, v4, s11, a3, v3]
// [Asm]   mv v5, a3  # live: [v5, a5, zero, a4, v4, s11, v3]
// [Asm]   mv v6, a4  # live: [v5, a5, zero, v4, v6, s11, v3]
// [Asm]   mv v7, a5  # live: [v5, zero, v7, v4, v6, s11, v3]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v11, zero, a0, a2, v6, a1, v3], upward_exposed: [v6, zero, v3], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v4, v6, s11, v3], live_out: [v5, zero, v7, v4, v12, s11]
// [Asm] # block parameters: []
// [Asm] .aux6.192l6_5_8:
// [Asm]   # save_ctx2  # live: [v5, zero, v7, v4, v6, s11, v3]
// [Asm]   mv a0, zero  # live: [v5, zero, a0, v7, v4, v6, s11, v3]
// [Asm]   mv a1, v3  # live: [v5, zero, a0, v7, v4, a1, v6, s11]
// [Asm]   mv a2, v6  # live: [v5, zero, a0, v7, v4, a2, a1, s11]
// [Asm]   call aux65.157l2_1  # live: [v4, v5, s11, zero, a0, v7]
// [Asm]   mv v11, a0  # live: [v11, v4, v5, s11, zero, v7]
// [Asm]   # restore_ctx2  # live: [v11, v4, v5, s11, zero, v7]
// [Asm] # control
// [Asm]   mv v12, v11  # live: [v4, v5, v12, s11, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v14, v13], uses: [v12, v13, zero], upward_exposed: [v12, zero], params_defs: [v12]
// [Asm] # live_in: [v5, zero, v7, v4, v12, s11], live_out: [v14, v5, zero, v7, v4, s11]
// [Asm] # block parameters: [v12]
// [Asm] .aux6.192l6_5_12:
// [Asm]   lw v13, 0(v12)  # live: [v5, zero, v13, v7, v4, s11, v12]
// [Asm]   lw v14, 4(v12)  # live: [v14, v5, zero, v13, v7, v4, s11]
// [Asm] # control
// [Asm]   bne v13, zero, .aux6.192l6_5_10  # live: [v4, v14, v5, s11, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, ft8, a7, t3, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [zero, a0, v7, v4, a2, a1, v17], upward_exposed: [v4, zero, v7], params_defs: []
// [Asm] # live_in: [v4, v5, s11, zero, v7], live_out: [v5, v18, s11, zero]
// [Asm] # block parameters: []
// [Asm] .aux6.192l6_5_9:
// [Asm]   # save_ctx2  # live: [v4, v5, s11, zero, v7]
// [Asm]   mv a0, zero  # live: [v4, v5, s11, zero, a0, v7]
// [Asm]   mv a1, v4  # live: [v5, a1, s11, zero, a0, v7]
// [Asm]   mv a2, v7  # live: [a2, v5, a1, s11, zero, a0]
// [Asm]   call aux65.170l3_2  # live: [v5, s11, zero, a0]
// [Asm]   mv v17, a0  # live: [v5, v17, s11, zero]
// [Asm]   # restore_ctx2  # live: [v5, v17, s11, zero]
// [Asm] # control
// [Asm]   mv v18, v17  # live: [v5, v18, s11, zero]
// [Asm] 
// [Asm] # block info: defs: [v19], uses: [v18], upward_exposed: [v18], params_defs: [v18]
// [Asm] # live_in: [v5, v18, s11, zero], live_out: [v19, v5, s11, zero]
// [Asm] # block parameters: [v18]
// [Asm] .aux6.192l6_5_11:
// [Asm] # control
// [Asm]   mv v19, v18  # live: [v19, v5, s11, zero]
// [Asm] 
// [Asm] # block info: defs: [v21, v20], uses: [v19, zero, v20], upward_exposed: [v19, zero], params_defs: [v19]
// [Asm] # live_in: [v19, v5, s11, zero], live_out: [v5, s11, v21, zero]
// [Asm] # block parameters: [v19]
// [Asm] .aux6.192l6_5_4:
// [Asm]   lw v20, 0(v19)  # live: [v19, v5, s11, zero, v20]
// [Asm]   lw v21, 4(v19)  # live: [v5, s11, v21, zero, v20]
// [Asm] # control
// [Asm]   bne v20, zero, .aux6.192l6_5_2  # live: [v5, s11, v21, zero]
// [Asm] 
// [Asm] # block info: defs: [s11, v27, v8], uses: [s11, zero, v8], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: [v27]
// [Asm] # block parameters: []
// [Asm] .aux6.192l6_5_1:
// [Asm]   addi v8, s11, -8  # live: [zero, v8]
// [Asm]   andi s11, v8, -8  # live: [zero, v8]
// [Asm]   sw zero, 0(v8)  # live: [zero, v8]
// [Asm]   sw zero, 4(v8)  # live: [v8]
// [Asm] # control
// [Asm]   mv v27, v8  # live: [v27]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v27], upward_exposed: [v27], params_defs: [v27]
// [Asm] # live_in: [v27], live_out: []
// [Asm] # block parameters: [v27]
// [Asm] .aux6.192l6_5_3:
// [Asm] # control
// [Asm]   mv a0, v27  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v10, s11, v18, v36], uses: [v14, s11, v10, v36], upward_exposed: [v14, s11], params_defs: []
// [Asm] # live_in: [v14, v5, s11, zero], live_out: [v5, v18, s11, zero]
// [Asm] # block parameters: []
// [Asm] .aux6.192l6_5_10:
// [Asm]   addi v10, s11, -8  # live: [v5, v14, v10, zero]
// [Asm]   andi s11, v10, -8  # live: [v5, v14, v10, zero, s11]
// [Asm]   li v36, 1  # live: [v5, v14, v10, zero, v36, s11]
// [Asm]   sw v36, 0(v10)  # live: [v5, v14, v10, s11, zero]
// [Asm]   sw v14, 4(v10)  # live: [v5, s11, v10, zero]
// [Asm] # control
// [Asm]   mv v18, v10  # live: [v5, v18, s11, zero]
// [Asm]   j .aux6.192l6_5_11  # live: [v5, v18, s11, zero]
// [Asm] 
// [Asm] # block info: defs: [], uses: [], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v5, v21, s11], live_out: [v5, v21, s11]
// [Asm] # block parameters: []
// [Asm] .aux6.192l6_5_2:
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v24, v23], uses: [v5, v21, v23], upward_exposed: [v5, v21], params_defs: []
// [Asm] # live_in: [v5, v21, s11], live_out: [v24, s11]
// [Asm] # block parameters: []
// [Asm] .aux6.192l6_5_7:
// [Asm]   add v23, v5, v21  # live: [s11, v23]
// [Asm] # control
// [Asm]   mv v24, v23  # live: [v24, s11]
// [Asm] 
// [Asm] # block info: defs: [s11, v9, v30, v27], uses: [s11, v24, v9, v30], upward_exposed: [s11, v24], params_defs: [v24]
// [Asm] # live_in: [v24, s11], live_out: [v27]
// [Asm] # block parameters: [v24]
// [Asm] .aux6.192l6_5_5:
// [Asm]   addi v9, s11, -8  # live: [v24, v9]
// [Asm]   andi s11, v9, -8  # live: [v24, v9]
// [Asm]   li v30, 1  # live: [v24, v9, v30]
// [Asm]   sw v30, 0(v9)  # live: [v24, v9]
// [Asm]   sw v24, 4(v9)  # live: [v9]
// [Asm] # control
// [Asm]   mv v27, v9  # live: [v27]
// [Asm]   j .aux6.192l6_5_3  # live: [v27]
// [Asm] 
// [Asm] # leaf true
// [Asm] aux65.157l2_1:
// [Asm] # block info: defs: [v3, v7, v4, v2], uses: [v3, a2, v4, a1, a0, v7], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, s11, a0, zero], live_out: [v4, s11, zero, v7]
// [Asm] # block parameters: []
// [Asm] .aux65.157l2_1_0:
// [Asm]   # save_ctx1  # live: [a2, a1, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, s11, zero]
// [Asm]   mv v3, a1  # live: [a2, s11, zero, v3]
// [Asm]   mv v4, a2  # live: [v4, s11, zero, v3]
// [Asm]   lw v7, 0(v4)  # live: [v3, v4, s11, zero, v7]
// [Asm] # control
// [Asm]   beq v7, v3, .aux65.157l2_1_1  # live: [v4, s11, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v6, v16, s11, v9, v13], uses: [v16, v7, v4, v6, s11, v9], upward_exposed: [v4, s11, v7], params_defs: []
// [Asm] # live_in: [v4, s11, v7], live_out: [v13]
// [Asm] # block parameters: []
// [Asm] .aux65.157l2_1_2:
// [Asm]   addi v9, v7, 1  # live: [v4, s11, v9, v7]
// [Asm]   sw v9, 0(v4)  # live: [s11, v7]
// [Asm]   addi v6, s11, -8  # live: [v6, v7]
// [Asm]   andi s11, v6, -8  # live: [v6, v7]
// [Asm]   li v16, 1  # live: [v6, v16, v7]
// [Asm]   sw v16, 0(v6)  # live: [v6, v7]
// [Asm]   sw v7, 4(v6)  # live: [v6]
// [Asm] # control
// [Asm]   mv v13, v6  # live: [v13]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v13, a0], upward_exposed: [v13], params_defs: [v13]
// [Asm] # live_in: [v13], live_out: []
// [Asm] # block parameters: [v13]
// [Asm] .aux65.157l2_1_3:
// [Asm] # control
// [Asm]   mv a0, v13  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v5, s11, v13], uses: [v5, s11, zero], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: [v13]
// [Asm] # block parameters: []
// [Asm] .aux65.157l2_1_1:
// [Asm]   addi v5, s11, -8  # live: [v5, zero]
// [Asm]   andi s11, v5, -8  # live: [v5, zero]
// [Asm]   sw zero, 0(v5)  # live: [v5, zero]
// [Asm]   sw zero, 4(v5)  # live: [v5]
// [Asm] # control
// [Asm]   mv v13, v5  # live: [v13]
// [Asm]   j .aux65.157l2_1_3  # live: [v13]
// [Asm] 
// [Asm] # leaf false
// [Asm] main120l1_11:
// [Asm] # block info: defs: [v2, v25, t1, v13, v22, ft0, ft1, a1, s11, v12, fa1, fa2, ft6, v20, a4, fa6, a6, ft5, ft10, v4, ft7, v11, ft4, v5, v21, ft9, v10, a5, fa4, a0, ft2, a2, v24, a3, ft8, a7, t3, fa7, t0, fa5, v18, fa3, ft3, v23, fa0, t4, t2, v3], uses: [v3, v25, v5, v21, v10, a0, v13, v22, a2, a1, s11, v24, v18, zero, v20, v23, v4, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main120l1_11_0:
// [Asm]   # save_ctx1  # live: [zero, s11]
// [Asm]   addi v2, s11, -4  # live: [zero, v2]
// [Asm]   andi s11, v2, -8  # live: [zero, s11, v2]
// [Asm]   sw zero, 0(v2)  # live: [zero, s11, v2]
// [Asm]   addi v3, s11, -4  # live: [v3, zero, v2]
// [Asm]   andi s11, v3, -8  # live: [v3, zero, s11, v2]
// [Asm]   sw zero, 0(v3)  # live: [v3, zero, s11, v2]
// [Asm]   addi v4, s11, -64  # live: [v3, zero, v4, v2]
// [Asm]   andi s11, v4, -8  # live: [v3, zero, v4, s11, v2]
// [Asm]   la v20, aux25.220l10c0_24  # live: [v3, zero, v20, v4, s11, v2]
// [Asm]   sd v20, 0(v4)  # live: [v3, zero, v4, s11, v2]
// [Asm]   li v21, 100  # live: [v3, v21, zero, v4, s11, v2]
// [Asm]   sd v21, 8(v4)  # live: [v3, zero, v4, s11, v2]
// [Asm]   li v22, 1000  # live: [v3, zero, v22, v4, s11, v2]
// [Asm]   sd v22, 16(v4)  # live: [v3, zero, v4, s11, v2]
// [Asm]   li v23, 1  # live: [v3, zero, v23, v4, s11, v2]
// [Asm]   sd v23, 24(v4)  # live: [v3, zero, v4, s11, v2]
// [Asm]   li v24, 50  # live: [v3, zero, v4, s11, v24, v2]
// [Asm]   sd v24, 32(v4)  # live: [v3, zero, v4, s11, v2]
// [Asm]   li v25, 1200  # live: [v3, v25, zero, v4, s11, v2]
// [Asm]   sd v25, 40(v4)  # live: [v2, v4, s11, zero, v3]
// [Asm]   sd v2, 48(v4)  # live: [v4, s11, zero, v3]
// [Asm]   sd v3, 56(v4)  # live: [v4, s11, zero]
// [Asm]   addi v5, s11, -8  # live: [v4, v5, zero]
// [Asm]   andi s11, v5, -8  # live: [v4, v5, zero]
// [Asm]   la v18, add102.233l11c0_26  # live: [v4, v5, v18, zero]
// [Asm]   sd v18, 0(v5)  # live: [v4, v5, zero]
// [Asm]   # save_ctx2  # live: [v4, v5, zero]
// [Asm]   mv a0, v4  # live: [v5, zero, a0]
// [Asm]   mv a1, v5  # live: [a1, zero, a0]
// [Asm]   mv a2, zero  # live: [a2, a1, zero, a0]
// [Asm]   call fold84l0_0  # live: [zero, a0]
// [Asm]   mv v10, a0  # live: [v10, zero]
// [Asm]   # restore_ctx2  # live: [v10, zero]
// [Asm]   # save_ctx2  # live: [v10, zero]
// [Asm]   mv a0, v10  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v11, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   li v13, 10  # live: [zero, v13]
// [Asm]   mv a0, v13  # live: [zero, a0]
// [Asm]   call minimbt_print_char  # live: [zero, a0]
// [Asm]   mv v12, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] fold84l0_0:
// [Asm] # block info: defs: [v3, v7, v4, v6, v5, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .fold84l0_0_8:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm]   mv v6, v3  # live: [v4, v5, v6, zero]
// [Asm]   mv v7, v4  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, ft4, ft9, v10, a5, fa4, a0, v30, ft2, a2, a3, s10, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v5, zero, a0, v30, v8, v9], upward_exposed: [v5, zero], params_defs: [v5, v6, v7]
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v6, v5, v10, zero, v7]
// [Asm] # block parameters: [v5, v6, v7]
// [Asm] .fold84l0_0_0:
// [Asm]   mv s10, v5  # live: [v5, zero, v7, v6]
// [Asm]   ld v30, 0(v5)  # live: [v5, zero, v30, v7, v6]
// [Asm]   # save_ctx2  # live: [v5, zero, v30, v7, v6]
// [Asm]   mv a0, zero  # live: [v5, zero, a0, v30, v7, v6]
// [Asm]   jalr v30  # live: [v5, zero, a0, v7, v6]
// [Asm]   mv v8, a0  # live: [v5, zero, v7, v8, v6]
// [Asm]   # restore_ctx2  # live: [v5, zero, v7, v8, v6]
// [Asm]   lw v9, 0(v8)  # live: [v5, zero, v7, v8, v6, v9]
// [Asm]   lw v10, 4(v8)  # live: [v5, v10, zero, v7, v6, v9]
// [Asm] # control
// [Asm]   beq v9, zero, .fold84l0_0_1  # live: [v6, v5, v10, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v26, v13, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v24, s10, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v5, v14, v10, a0, v26, zero, v13, v7, v6, a1, v24], upward_exposed: [v6, v5, v10, zero, v7], params_defs: []
// [Asm] # live_in: [v6, v5, v10, zero, v7], live_out: [v6, v5, v12, v15, zero]
// [Asm] # block parameters: []
// [Asm] .fold84l0_0_2:
// [Asm]   mv s10, v6  # live: [v5, v10, zero, v7, v6]
// [Asm]   ld v26, 0(v6)  # live: [v5, v10, zero, v26, v7, v6]
// [Asm]   # save_ctx2  # live: [v5, v10, zero, v26, v7, v6]
// [Asm]   mv a0, v7  # live: [v5, v10, zero, a0, v26, v6]
// [Asm]   mv a1, v10  # live: [v5, zero, a0, v26, v6, a1]
// [Asm]   jalr v26  # live: [v5, zero, a0, v6]
// [Asm]   mv v12, a0  # live: [v5, zero, v6, v12]
// [Asm]   # restore_ctx2  # live: [v5, zero, v6, v12]
// [Asm]   mv s10, v5  # live: [v5, zero, v6, v12]
// [Asm]   ld v24, 0(v5)  # live: [v5, zero, v6, v12, v24]
// [Asm]   # save_ctx2  # live: [v5, zero, v6, v12, v24]
// [Asm]   mv a0, zero  # live: [v5, zero, a0, v6, v12, v24]
// [Asm]   jalr v24  # live: [v5, zero, a0, v6, v12]
// [Asm]   mv v13, a0  # live: [v5, zero, v13, v6, v12]
// [Asm]   # restore_ctx2  # live: [v5, zero, v13, v6, v12]
// [Asm]   lw v14, 0(v13)  # live: [v5, v14, zero, v13, v6, v12]
// [Asm]   lw v15, 4(v13)  # live: [v5, v14, zero, v6, v15, v12]
// [Asm] # control
// [Asm]   beq v14, zero, .fold84l0_0_3  # live: [v6, v5, v12, v15, zero]
// [Asm] 
// [Asm] # block info: defs: [t1, v7, ft0, ft1, a1, fa1, fa2, ft6, v20, a4, fa6, a6, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, s10, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v5, a0, v20, v6, a1, v17, v12, v15], upward_exposed: [v6, v5, v15, v12], params_defs: []
// [Asm] # live_in: [v6, v5, v15, v12, zero], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .fold84l0_0_4:
// [Asm]   mv s10, v6  # live: [v5, v6, v15, v12, zero]
// [Asm]   ld v20, 0(v6)  # live: [v5, v6, v15, v12, zero, v20]
// [Asm]   # save_ctx2  # live: [v5, v6, v15, v12, zero, v20]
// [Asm]   mv a0, v12  # live: [v5, v6, v15, zero, a0, v20]
// [Asm]   mv a1, v15  # live: [v5, v6, a1, zero, a0, v20]
// [Asm]   jalr v20  # live: [v5, v6, zero, a0]
// [Asm]   mv v17, a0  # live: [v5, v6, v17, zero]
// [Asm]   # restore_ctx2  # live: [v5, v6, v17, zero]
// [Asm] # control
// [Asm]   mv v5, v5  # live: [v5, v6, v17, zero]
// [Asm]   mv v6, v6  # live: [v5, v6, v17, zero]
// [Asm]   mv v7, v17  # live: [v5, v6, zero, v7]
// [Asm]   j .fold84l0_0_0  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v19], uses: [v7], upward_exposed: [v7], params_defs: []
// [Asm] # live_in: [v7], live_out: [v19]
// [Asm] # block parameters: []
// [Asm] .fold84l0_0_1:
// [Asm] # control
// [Asm]   mv v19, v7  # live: [v19]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v19, a0], upward_exposed: [v19], params_defs: [v19]
// [Asm] # live_in: [v19], live_out: []
// [Asm] # block parameters: [v19]
// [Asm] .fold84l0_0_6:
// [Asm] # control
// [Asm]   mv a0, v19  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v18], uses: [v12], upward_exposed: [v12], params_defs: []
// [Asm] # live_in: [v12], live_out: [v18]
// [Asm] # block parameters: []
// [Asm] .fold84l0_0_3:
// [Asm] # control
// [Asm]   mv v18, v12  # live: [v18]
// [Asm] 
// [Asm] # block info: defs: [v19], uses: [v18], upward_exposed: [v18], params_defs: [v18]
// [Asm] # live_in: [v18], live_out: [v19]
// [Asm] # block parameters: [v18]
// [Asm] .fold84l0_0_5:
// [Asm] # control
// [Asm]   mv v19, v18  # live: [v19]
// [Asm]   j .fold84l0_0_6  # live: [v19]
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_28:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_28_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main120l1_11  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] add102.233l11_10:
// [Asm] # block info: defs: [v3, v4, a0, v2], uses: [v3, v4, a1, a0, v2], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .add102.233l11_10_0:
// [Asm]   # save_ctx1  # live: [a1, a0]
// [Asm]   mv v2, a0  # live: [a1, v2]
// [Asm]   mv v3, a1  # live: [v3, v2]
// [Asm]   add v4, v2, v3  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] aux25.220l10_9:
// [Asm] # block info: defs: [v3, v5, v14, v16, v21, v7, v17, v9, v18, v20, v8, v19, v4, v6, v15, v2], uses: [v2, v5, a5, a0, v7, a2, a1, a3, v9, a7, a4, v8, a6, v4, v6, v3], upward_exposed: [a7, a5, a0, a4, a6, a2, a1, a3], params_defs: []
// [Asm] # live_in: [a7, a5, a0, zero, a4, a6, a2, a1, a3, s11], live_out: [v14, v16, v18, v21, zero, v20, v19, v17, v15, s11]
// [Asm] # block parameters: []
// [Asm] .aux25.220l10_9_8:
// [Asm]   # save_ctx1  # live: [a7, a5, zero, a0, a4, a6, a2, a1, s11, a3]
// [Asm]   mv v2, a0  # live: [a7, a5, zero, a4, a6, a2, a1, s11, a3, v2]
// [Asm]   mv v3, a1  # live: [v2, a7, a5, zero, a4, a6, a2, s11, a3, v3]
// [Asm]   mv v4, a2  # live: [v2, a7, a5, zero, a4, a6, v4, s11, a3, v3]
// [Asm]   mv v5, a3  # live: [v2, a7, v5, a5, zero, a4, a6, v4, s11, v3]
// [Asm]   mv v6, a4  # live: [v2, a7, v5, a5, zero, a6, v4, v6, s11, v3]
// [Asm]   mv v7, a5  # live: [v2, a7, v5, zero, v7, a6, v4, v6, s11, v3]
// [Asm]   mv v8, a6  # live: [v2, a7, v5, zero, v8, v7, v4, v6, s11, v3]
// [Asm]   mv v9, a7  # live: [v2, v5, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm] # control
// [Asm]   mv v14, v2  # live: [v14, v5, zero, v8, v7, v4, v6, s11, v9, v3]
// [Asm]   mv v15, v3  # live: [v14, v5, zero, v8, v7, v4, v6, s11, v15, v9]
// [Asm]   mv v16, v4  # live: [v14, v16, v5, zero, v8, v7, v6, s11, v15, v9]
// [Asm]   mv v17, v5  # live: [v14, v16, zero, v8, v7, v17, v6, s11, v15, v9]
// [Asm]   mv v18, v6  # live: [v14, v16, v18, zero, v8, v7, v17, v15, s11, v9]
// [Asm]   mv v19, v7  # live: [v14, v16, v18, zero, v8, v19, v17, v15, s11, v9]
// [Asm]   mv v20, v8  # live: [v14, v16, v18, zero, v20, v19, v17, v15, s11, v9]
// [Asm]   mv v21, v9  # live: [v14, v16, v18, v21, zero, v20, v19, v17, v15, s11]
// [Asm] 
// [Asm] # block info: defs: [], uses: [], upward_exposed: [], params_defs: [v14, v16, v18, v21, v20, v19, v17, v15]
// [Asm] # live_in: [v14, v16, v18, v21, zero, v20, v19, v17, v15, s11], live_out: [v16, v18, v21, zero, v20, v19, v17, v15, s11]
// [Asm] # block parameters: [v14, v15, v16, v17, v18, v19, v20, v21]
// [Asm] .aux25.220l10_9_0:
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v25, v26, v27, v22, v23, v24, v28], uses: [v16, v18, v21, zero, v20, v17, v15], upward_exposed: [v16, v18, v21, zero, v20, v17, v15], params_defs: []
// [Asm] # live_in: [v16, v21, v18, zero, v20, v19, v17, v15, s11], live_out: [v25, v16, v21, v26, v22, v17, s11, v24, v28, v18, zero, v23, v27, v20, v19, v15]
// [Asm] # block parameters: []
// [Asm] .aux25.220l10_9_19:
// [Asm] # control
// [Asm]   mv v22, zero  # live: [v16, v21, v22, v17, s11, v18, zero, v20, v19, v15]
// [Asm]   mv v23, v15  # live: [v16, v21, v22, v17, s11, v18, zero, v23, v20, v19, v15]
// [Asm]   mv v24, v16  # live: [v16, v21, v22, v17, s11, v24, v18, zero, v23, v20, v19, v15]
// [Asm]   mv v25, v17  # live: [v25, v16, v21, v22, v17, s11, v24, v18, zero, v23, v20, v19, v15]
// [Asm]   mv v26, v18  # live: [v25, v16, v21, v26, v22, v17, s11, v24, v18, zero, v23, v20, v19, v15]
// [Asm]   mv v27, v20  # live: [v25, v16, v21, v26, v22, v17, s11, v24, v18, zero, v23, v27, v20, v19, v15]
// [Asm]   mv v28, v21  # live: [v25, v16, v21, v26, v22, v17, s11, v24, v28, v18, zero, v23, v27, v20, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, v29, fa6, a4, a6, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, v30, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v25, a5, zero, a0, v29, v23, a4, v27, a2, a1, v24, a3, v28], upward_exposed: [v25, v24, v28, zero, v23, v27], params_defs: [v25, v26, v27, v22, v23, v24, v28]
// [Asm] # live_in: [v25, v16, v21, v26, v22, v17, s11, v24, v28, v18, zero, v27, v23, v20, v19, v15], live_out: [v25, v16, v21, v26, v30, v17, v24, s11, v28, v18, zero, v27, v23, v20, v19, v15]
// [Asm] # block parameters: [v22, v23, v24, v25, v26, v27, v28]
// [Asm] .aux25.220l10_9_11:
// [Asm]   # save_ctx2  # live: [v25, v16, v21, v26, v17, s11, v24, v28, v18, zero, v23, v20, v27, v19, v15]
// [Asm]   mv a0, zero  # live: [v25, v16, v21, v26, a0, v17, s11, v24, v28, v18, zero, v23, v20, v27, v19, v15]
// [Asm]   mv a1, v23  # live: [v25, v16, v21, v26, a0, v17, a1, s11, v24, v28, v18, zero, v23, v20, v27, v19, v15]
// [Asm]   mv a2, v24  # live: [v25, v16, v21, v26, a0, a2, v17, a1, s11, v24, v28, v18, zero, v23, v20, v27, v19, v15]
// [Asm]   mv a3, v25  # live: [v25, v16, v21, v26, a0, a2, v17, a1, s11, v24, a3, v28, v18, zero, v23, v20, v27, v19, v15]
// [Asm]   mv a4, v27  # live: [v25, v16, v21, v26, a0, a2, v17, a1, s11, v24, a3, v28, v18, zero, v23, v20, v27, a4, v19, v15]
// [Asm]   mv a5, v28  # live: [v25, v16, v21, a5, v26, a0, a2, v17, a1, s11, v24, a3, v28, v18, zero, v23, v20, v27, a4, v19, v15]
// [Asm]   call aux6.192l6_5  # live: [v25, v16, v21, v26, a0, v17, v24, s11, v28, v18, zero, v23, v20, v27, v19, v15]
// [Asm]   mv v29, a0  # live: [v25, v16, v21, v26, v17, v24, s11, v28, v18, zero, v29, v23, v20, v27, v19, v15]
// [Asm]   # restore_ctx2  # live: [v25, v16, v21, v26, v17, v24, s11, v28, v18, zero, v29, v23, v20, v27, v19, v15]
// [Asm] # control
// [Asm]   mv v30, v29  # live: [v25, v16, v21, v26, v30, v17, v24, s11, v28, v18, zero, v27, v23, v20, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [v32, v31], uses: [v31, zero, v30], upward_exposed: [zero, v30], params_defs: [v30]
// [Asm] # live_in: [v25, v16, v21, v26, v30, v17, v24, s11, v28, v18, zero, v27, v23, v20, v19, v15], live_out: [v25, v16, v21, v26, v32, v17, s11, v24, v28, v18, zero, v27, v23, v20, v19, v15]
// [Asm] # block parameters: [v30]
// [Asm] .aux25.220l10_9_20:
// [Asm]   lw v31, 0(v30)  # live: [v25, v16, v21, v26, v30, v17, s11, v24, v28, v31, v18, zero, v27, v23, v20, v19, v15]
// [Asm]   lw v32, 4(v30)  # live: [v25, v16, v21, v26, v32, v17, s11, v24, v28, v31, v18, zero, v27, v23, v20, v19, v15]
// [Asm] # control
// [Asm]   bne v31, zero, .aux25.220l10_9_13  # live: [v25, v16, v21, v26, v32, v17, s11, v24, v28, v18, zero, v27, v23, v20, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [s11, v13, v40], uses: [s11, v13, zero], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [v16, v18, v21, zero, v20, v19, v17, s11, v15], live_out: [v16, v18, v21, zero, v20, v19, v17, s11, v15, v40]
// [Asm] # block parameters: []
// [Asm] .aux25.220l10_9_12:
// [Asm]   addi v13, s11, -8  # live: [v16, v18, v21, zero, v13, v20, v19, v17, v15]
// [Asm]   andi s11, v13, -8  # live: [v16, v18, v21, zero, v13, v20, v19, v17, s11, v15]
// [Asm]   sw zero, 0(v13)  # live: [v16, v18, v21, zero, v13, v20, v19, v17, s11, v15]
// [Asm]   sw zero, 4(v13)  # live: [v16, v18, v21, zero, v13, v20, v19, v17, s11, v15]
// [Asm] # control
// [Asm]   mv v40, v13  # live: [v16, v18, v21, zero, v20, v19, v17, s11, v15, v40]
// [Asm] 
// [Asm] # block info: defs: [v41], uses: [v40], upward_exposed: [v40], params_defs: [v40]
// [Asm] # live_in: [v16, v18, v21, zero, v20, v19, v17, s11, v15, v40], live_out: [v16, v18, v21, zero, v20, v19, v41, v17, s11, v15]
// [Asm] # block parameters: [v40]
// [Asm] .aux25.220l10_9_17:
// [Asm] # control
// [Asm]   mv v41, v40  # live: [v16, v18, v21, zero, v20, v19, v41, v17, s11, v15]
// [Asm] 
// [Asm] # block info: defs: [v43, v42], uses: [v41, v42, zero], upward_exposed: [v41, zero], params_defs: [v41]
// [Asm] # live_in: [v16, v18, v21, zero, v20, v19, v41, v17, s11, v15], live_out: [v16, v18, v21, zero, v20, v19, v43, v17, s11, v15]
// [Asm] # block parameters: [v41]
// [Asm] .aux25.220l10_9_9:
// [Asm]   lw v42, 0(v41)  # live: [v16, v18, v21, zero, v42, v20, v19, v41, v17, s11, v15]
// [Asm]   lw v43, 4(v41)  # live: [v16, v18, v21, zero, v42, v20, v19, v43, v17, s11, v15]
// [Asm] # control
// [Asm]   bne v42, zero, .aux25.220l10_9_2  # live: [v16, v18, v21, zero, v20, v19, v43, v17, s11, v15]
// [Asm] 
// [Asm] # block info: defs: [v10, s11, v52], uses: [s11, v10, zero], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: [v52]
// [Asm] # block parameters: []
// [Asm] .aux25.220l10_9_1:
// [Asm]   addi v10, s11, -8  # live: [v10, zero]
// [Asm]   andi s11, v10, -8  # live: [v10, zero]
// [Asm]   sw zero, 0(v10)  # live: [v10, zero]
// [Asm]   sw zero, 4(v10)  # live: [v10]
// [Asm] # control
// [Asm]   mv v52, v10  # live: [v52]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v52, a0], upward_exposed: [v52], params_defs: [v52]
// [Asm] # live_in: [v52], live_out: []
// [Asm] # block parameters: [v52]
// [Asm] .aux25.220l10_9_6:
// [Asm] # control
// [Asm]   mv a0, v52  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v34, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, v35, t4, t2], uses: [v32, a1, v26, a0, v34], upward_exposed: [v32, v26], params_defs: []
// [Asm] # live_in: [v25, v16, v21, v26, v32, v17, v24, s11, v28, v18, zero, v27, v23, v20, v19, v15], live_out: [v25, v16, v21, v26, v32, v17, v24, s11, v28, v18, zero, v23, v27, v20, v35, v19, v15]
// [Asm] # block parameters: []
// [Asm] .aux25.220l10_9_13:
// [Asm]   # save_ctx2  # live: [v25, v16, v21, v26, v32, v17, s11, v24, v28, v18, zero, v23, v27, v20, v19, v15]
// [Asm]   mv a0, v32  # live: [v25, v16, v21, v26, a0, v32, v17, s11, v24, v28, v18, zero, v23, v27, v20, v19, v15]
// [Asm]   mv a1, v26  # live: [v25, v16, v21, v26, a0, v32, v17, a1, s11, v24, v28, v18, zero, v23, v27, v20, v19, v15]
// [Asm]   call aux111.203l7_6  # live: [v25, v16, v21, v26, a0, v32, v17, v24, s11, v28, v18, zero, v23, v27, v20, v19, v15]
// [Asm]   mv v34, a0  # live: [v25, v16, v21, v26, v32, v17, v24, s11, v28, v18, zero, v23, v27, v20, v19, v15, v34]
// [Asm]   # restore_ctx2  # live: [v25, v16, v21, v26, v32, v17, v24, s11, v28, v18, zero, v23, v27, v20, v19, v15, v34]
// [Asm] # control
// [Asm]   mv v35, v34  # live: [v25, v16, v21, v26, v32, v17, v24, s11, v28, v18, zero, v23, v27, v20, v35, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [], uses: [zero, v35], upward_exposed: [zero, v35], params_defs: [v35]
// [Asm] # live_in: [v25, v16, v21, v26, v32, v17, v24, s11, v28, v18, zero, v27, v23, v20, v35, v19, v15], live_out: [v25, v16, v21, v26, v32, v17, s11, v24, v28, v18, zero, v23, v27, v20, v19, v15]
// [Asm] # block parameters: [v35]
// [Asm] .aux25.220l10_9_21:
// [Asm] # control
// [Asm]   bne v35, zero, .aux25.220l10_9_15  # live: [v25, v16, v21, v26, v32, v17, s11, v24, v28, v18, zero, v23, v27, v20, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [v11, v38, s11, v61], uses: [v11, v32, s11, v61], upward_exposed: [v32, s11], params_defs: []
// [Asm] # live_in: [v16, v18, v21, zero, v20, v19, v32, v17, s11, v15], live_out: [v16, v18, v21, zero, v20, v19, v38, v17, s11, v15]
// [Asm] # block parameters: []
// [Asm] .aux25.220l10_9_14:
// [Asm]   addi v11, s11, -8  # live: [v11, v16, v18, v21, zero, v20, v19, v32, v17, v15]
// [Asm]   andi s11, v11, -8  # live: [v11, v16, v18, v21, zero, v20, v19, v32, v17, s11, v15]
// [Asm]   li v61, 1  # live: [v11, v16, v18, v21, zero, v20, v19, v32, v17, s11, v15, v61]
// [Asm]   sw v61, 0(v11)  # live: [v11, v16, v18, v21, zero, v20, v19, v32, v17, s11, v15]
// [Asm]   sw v32, 4(v11)  # live: [v11, v16, v18, v21, zero, v20, v19, v17, s11, v15]
// [Asm] # control
// [Asm]   mv v38, v11  # live: [v16, v18, v21, zero, v20, v19, v38, v17, s11, v15]
// [Asm] 
// [Asm] # block info: defs: [v40], uses: [v38], upward_exposed: [v38], params_defs: [v38]
// [Asm] # live_in: [v16, v18, v21, zero, v20, v19, v38, v17, s11, v15], live_out: [v16, v18, v21, zero, v20, v19, v17, s11, v15, v40]
// [Asm] # block parameters: [v38]
// [Asm] .aux25.220l10_9_16:
// [Asm] # control
// [Asm]   mv v40, v38  # live: [v16, v18, v21, zero, v20, v19, v17, s11, v15, v40]
// [Asm]   j .aux25.220l10_9_17  # live: [v16, v18, v21, zero, v20, v19, v17, s11, v15, v40]
// [Asm] 
// [Asm] # block info: defs: [v22], uses: [v25, zero, v26, v27, v23, v24, v28], upward_exposed: [v25, zero, v26, v27, v23, v24, v28], params_defs: []
// [Asm] # live_in: [v25, v16, v21, v26, v17, v24, s11, v28, v18, zero, v23, v27, v20, v19, v15], live_out: [v25, v16, v21, v26, v22, v17, s11, v24, v28, v18, zero, v23, v27, v20, v19, v15]
// [Asm] # block parameters: []
// [Asm] .aux25.220l10_9_15:
// [Asm] # control
// [Asm]   mv v22, zero  # live: [v25, v16, v21, v26, v22, v17, s11, v24, v28, v18, zero, v23, v27, v20, v19, v15]
// [Asm]   mv v23, v23  # live: [v25, v16, v21, v26, v22, v17, s11, v24, v28, v18, zero, v23, v27, v20, v19, v15]
// [Asm]   mv v24, v24  # live: [v25, v16, v21, v26, v22, v17, s11, v24, v28, v18, zero, v23, v27, v20, v19, v15]
// [Asm]   mv v25, v25  # live: [v25, v16, v21, v26, v22, v17, s11, v24, v28, v18, zero, v23, v27, v20, v19, v15]
// [Asm]   mv v26, v26  # live: [v25, v16, v21, v26, v22, v17, s11, v24, v28, v18, zero, v23, v27, v20, v19, v15]
// [Asm]   mv v27, v27  # live: [v25, v16, v21, v26, v22, v17, s11, v24, v28, v18, zero, v23, v27, v20, v19, v15]
// [Asm]   mv v28, v28  # live: [v25, v16, v21, v26, v22, v17, s11, v24, v28, v18, zero, v23, v27, v20, v19, v15]
// [Asm]   j .aux25.220l10_9_11  # live: [v25, v16, v21, v26, v22, v17, s11, v24, v28, v18, zero, v23, v27, v20, v19, v15]
// [Asm] 
// [Asm] # block info: defs: [], uses: [], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v16, v18, v21, zero, v20, v19, v43, v17, s11, v15], live_out: [v16, v18, v21, zero, v20, v19, v43, v17, s11, v15]
// [Asm] # block parameters: []
// [Asm] .aux25.220l10_9_2:
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [], uses: [v19, v43], upward_exposed: [v19, v43], params_defs: []
// [Asm] # live_in: [v16, v18, v21, zero, v20, v19, v43, v17, s11, v15], live_out: [v16, v18, v21, zero, v20, v19, v43, v17, s11, v15]
// [Asm] # block parameters: []
// [Asm] .aux25.220l10_9_22:
// [Asm] # control
// [Asm]   blt v19, v43, .aux25.220l10_9_24  # live: [v16, v18, v21, zero, v20, v19, v43, v17, s11, v15]
// [Asm] 
// [Asm] # block info: defs: [v46], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v16, v18, v21, zero, v20, v19, v43, v17, s11, v15], live_out: [v46, v16, v18, v21, zero, v20, v19, v43, v17, s11, v15]
// [Asm] # block parameters: []
// [Asm] .aux25.220l10_9_23:
// [Asm] # control
// [Asm]   mv v46, zero  # live: [v46, v16, v18, v21, zero, v20, v19, v43, v17, s11, v15]
// [Asm] 
// [Asm] # block info: defs: [v47], uses: [v46], upward_exposed: [v46], params_defs: [v46]
// [Asm] # live_in: [v46, v16, v18, v21, zero, v20, v19, v43, v17, s11, v15], live_out: [v16, v18, v21, zero, v20, v19, v47, v43, v17, s11, v15]
// [Asm] # block parameters: [v46]
// [Asm] .aux25.220l10_9_25:
// [Asm] # control
// [Asm]   mv v47, v46  # live: [v16, v18, v21, zero, v20, v19, v47, v43, v17, s11, v15]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v47, zero], upward_exposed: [v47, zero], params_defs: [v47]
// [Asm] # live_in: [v16, v18, v21, zero, v20, v19, v47, v43, v17, s11, v15], live_out: [v16, v18, v21, zero, v20, v19, v43, v17, s11, v15]
// [Asm] # block parameters: [v47]
// [Asm] .aux25.220l10_9_10:
// [Asm] # control
// [Asm]   bne v47, zero, .aux25.220l10_9_4  # live: [v16, v18, v21, zero, v20, v19, v43, v17, s11, v15]
// [Asm] 
// [Asm] # block info: defs: [v12, s11, v55, v50], uses: [v43, s11, v12, v55], upward_exposed: [v43, s11], params_defs: []
// [Asm] # live_in: [v43, s11], live_out: [v50]
// [Asm] # block parameters: []
// [Asm] .aux25.220l10_9_3:
// [Asm]   addi v12, s11, -8  # live: [v43, v12]
// [Asm]   andi s11, v12, -8  # live: [v43, v12]
// [Asm]   li v55, 1  # live: [v43, v12, v55]
// [Asm]   sw v55, 0(v12)  # live: [v43, v12]
// [Asm]   sw v43, 4(v12)  # live: [v12]
// [Asm] # control
// [Asm]   mv v50, v12  # live: [v50]
// [Asm] 
// [Asm] # block info: defs: [v52], uses: [v50], upward_exposed: [v50], params_defs: [v50]
// [Asm] # live_in: [v50], live_out: [v52]
// [Asm] # block parameters: [v50]
// [Asm] .aux25.220l10_9_5:
// [Asm] # control
// [Asm]   mv v52, v50  # live: [v52]
// [Asm]   j .aux25.220l10_9_6  # live: [v52]
// [Asm] 
// [Asm] # block info: defs: [v46, v56], uses: [v56], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v16, v18, v21, zero, v20, v19, v43, v17, s11, v15], live_out: [v46, v16, v18, v21, zero, v20, v19, v43, v17, s11, v15]
// [Asm] # block parameters: []
// [Asm] .aux25.220l10_9_24:
// [Asm] # control
// [Asm]   li v56, 1  # live: [v16, v18, v21, v56, zero, v20, v19, v43, v17, s11, v15]
// [Asm]   mv v46, v56  # live: [v46, v16, v18, v21, zero, v20, v19, v43, v17, s11, v15]
// [Asm]   j .aux25.220l10_9_25  # live: [v46, v16, v18, v21, zero, v20, v19, v43, v17, s11, v15]
// [Asm] 
// [Asm] # block info: defs: [v14], uses: [v16, v18, v21, zero, v20, v19, v17, v15], upward_exposed: [v16, v18, v21, zero, v20, v19, v17, v15], params_defs: []
// [Asm] # live_in: [v16, v18, v21, zero, v20, v19, v17, v15, s11], live_out: [v14, v16, v18, v21, zero, v20, v19, v17, v15, s11]
// [Asm] # block parameters: []
// [Asm] .aux25.220l10_9_4:
// [Asm] # control
// [Asm]   mv v14, zero  # live: [v14, v16, v18, v21, zero, v20, v19, v17, v15, s11]
// [Asm]   mv v15, v15  # live: [v14, v16, v18, v21, zero, v20, v19, v17, v15, s11]
// [Asm]   mv v16, v16  # live: [v14, v16, v18, v21, zero, v20, v19, v17, v15, s11]
// [Asm]   mv v17, v17  # live: [v14, v16, v18, v21, zero, v20, v19, v17, v15, s11]
// [Asm]   mv v18, v18  # live: [v14, v16, v18, v21, zero, v20, v19, v17, v15, s11]
// [Asm]   mv v19, v19  # live: [v14, v16, v18, v21, zero, v20, v19, v17, v15, s11]
// [Asm]   mv v20, v20  # live: [v14, v16, v18, v21, zero, v20, v19, v17, v15, s11]
// [Asm]   mv v21, v21  # live: [v14, v16, v18, v21, zero, v20, v19, v17, v15, s11]
// [Asm]   j .aux25.220l10_9_0  # live: [v14, v16, v18, v21, zero, v20, v19, v17, v15, s11]
// [Asm] 
// [Asm] # leaf true
// [Asm] aux65.170l3_2:
// [Asm] # block info: defs: [v3, v7, v4, v2], uses: [v3, a2, v4, a1, a0, v7], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, s11, a0, zero], live_out: [v4, s11, zero, v7]
// [Asm] # block parameters: []
// [Asm] .aux65.170l3_2_0:
// [Asm]   # save_ctx1  # live: [a2, a1, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, s11, zero]
// [Asm]   mv v3, a1  # live: [a2, s11, zero, v3]
// [Asm]   mv v4, a2  # live: [v4, s11, zero, v3]
// [Asm]   lw v7, 0(v4)  # live: [v3, v4, s11, zero, v7]
// [Asm] # control
// [Asm]   beq v7, v3, .aux65.170l3_2_1  # live: [v4, s11, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v6, v16, s11, v9, v13], uses: [v16, v7, v4, v6, s11, v9], upward_exposed: [v4, s11, v7], params_defs: []
// [Asm] # live_in: [v4, s11, v7], live_out: [v13]
// [Asm] # block parameters: []
// [Asm] .aux65.170l3_2_2:
// [Asm]   addi v9, v7, 1  # live: [v4, s11, v9, v7]
// [Asm]   sw v9, 0(v4)  # live: [s11, v7]
// [Asm]   addi v6, s11, -8  # live: [v6, v7]
// [Asm]   andi s11, v6, -8  # live: [v6, v7]
// [Asm]   li v16, 1  # live: [v6, v16, v7]
// [Asm]   sw v16, 0(v6)  # live: [v6, v7]
// [Asm]   sw v7, 4(v6)  # live: [v6]
// [Asm] # control
// [Asm]   mv v13, v6  # live: [v13]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v13, a0], upward_exposed: [v13], params_defs: [v13]
// [Asm] # live_in: [v13], live_out: []
// [Asm] # block parameters: [v13]
// [Asm] .aux65.170l3_2_3:
// [Asm] # control
// [Asm]   mv a0, v13  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v5, s11, v13], uses: [v5, s11, zero], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: [v13]
// [Asm] # block parameters: []
// [Asm] .aux65.170l3_2_1:
// [Asm]   addi v5, s11, -8  # live: [v5, zero]
// [Asm]   andi s11, v5, -8  # live: [v5, zero]
// [Asm]   sw zero, 0(v5)  # live: [v5, zero]
// [Asm]   sw zero, 4(v5)  # live: [v5]
// [Asm] # control
// [Asm]   mv v13, v5  # live: [v13]
// [Asm]   j .aux65.170l3_2_3  # live: [v13]
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_28  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] aux25.220l10c0_24:
// [Asm] # block info: defs: [v2, t1, v7, v0, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, v6, ft7, ft4, v5, ft9, v10, a5, fa4, a0, ft2, a2, a3, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v3, v5, v10, a5, a0, v7, v0, a2, a1, a3, v9, s10, a7, a4, v8, a6, v4, v6, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .aux25.220l10c0_24_0:
// [Asm]   # save_ctx1  # live: [a0, s10]
// [Asm]   mv v0, s10  # live: [a0, v0]
// [Asm]   mv v2, a0  # live: [v0, v2]
// [Asm]   lw v3, 8(v0)  # live: [v2, v0, v3]
// [Asm]   lw v4, 16(v0)  # live: [v2, v0, v4, v3]
// [Asm]   lw v5, 24(v0)  # live: [v2, v5, v0, v4, v3]
// [Asm]   lw v6, 32(v0)  # live: [v2, v5, v0, v4, v6, v3]
// [Asm]   lw v7, 40(v0)  # live: [v2, v5, v7, v0, v4, v6, v3]
// [Asm]   ld v8, 48(v0)  # live: [v2, v5, v8, v7, v0, v4, v6, v3]
// [Asm]   ld v9, 56(v0)  # live: [v2, v5, v8, v7, v4, v6, v9, v3]
// [Asm]   # save_ctx2  # live: [v2, v5, v8, v7, v4, v6, v9, v3]
// [Asm]   mv a0, v2  # live: [v5, a0, v8, v7, v4, v6, v9, v3]
// [Asm]   mv a1, v3  # live: [v5, a0, v8, v7, v4, a1, v6, v9]
// [Asm]   mv a2, v4  # live: [v5, a0, v8, v7, a2, a1, v6, v9]
// [Asm]   mv a3, v5  # live: [a0, v8, v7, a2, a1, v6, a3, v9]
// [Asm]   mv a4, v6  # live: [a0, a4, v8, v7, a2, a1, a3, v9]
// [Asm]   mv a5, v7  # live: [a5, a0, a4, v8, a2, a1, a3, v9]
// [Asm]   mv a6, v8  # live: [a5, a0, a4, a6, a2, a1, a3, v9]
// [Asm]   mv a7, v9  # live: [a7, a5, a0, a4, a6, a2, a1, a3]
// [Asm]   call aux25.220l10_9  # live: [a0]
// [Asm]   mv v10, a0  # live: [v10]
// [Asm]   # restore_ctx2  # live: [v10]
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] add102.233l11c0_26:
// [Asm] # block info: defs: [v2, t1, v0, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, a0, v4, a1, s10, v3], upward_exposed: [a1, s10, a0], params_defs: []
// [Asm] # live_in: [a1, s10, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .add102.233l11c0_26_0:
// [Asm]   # save_ctx1  # live: [a1, a0, s10]
// [Asm]   mv v0, s10  # live: [a1, a0]
// [Asm]   mv v2, a0  # live: [a1, v2]
// [Asm]   mv v3, a1  # live: [v2, v3]
// [Asm]   # save_ctx2  # live: [v2, v3]
// [Asm]   mv a0, v2  # live: [a0, v3]
// [Asm]   mv a1, v3  # live: [a1, a0]
// [Asm]   call add102.233l11_10  # live: [a0]
// [Asm]   mv v4, a0  # live: [v4]
// [Asm]   # restore_ctx2  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("map", Fun([Unit], Tuple([Int, Int]))), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int], Int))], body: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Tuple([Int(1), App(Var("f"), [Var("val")])])))}, Var("aux"))}, LetRec({name: ("filter", Fun([Unit], Tuple([Int, Int]))), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int], Int))], body: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Let(("r", Var({val: Some(Int)})), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit])))))}, Var("aux"))}, LetRec({name: ("concat", Fun([Unit], Tuple([Int, Int]))), args: [("stream1", Fun([Unit], Tuple([Int, Int]))), ("stream2", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream1"), [Unit]), If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")])))}, Var("aux"))}, LetRec({name: ("range", Fun([Unit], Tuple([Int, Int]))), args: [("from", Int), ("to", Int)], body: Let(("state", Var({val: Some(Array(Int))})), Array(Int(1), Var("from")), LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: Let(("val", Var({val: Some(Int)})), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))))}, Var("aux")))}, LetRec({name: ("addx", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, Var("aux"))}, LetRec({name: ("fold", Int), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int, Int], Int)), ("acc", Int)], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({name: ("sum", Int), args: [("stream", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), [])))))))))))
// [Knf] build_knf: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Tuple([Int(1), App(Var("f"), [Var("val")])])))}, Var("aux"))
// [Knf] build_knf: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Tuple([Int(1), App(Var("f"), [Var("val")])])))
// [Knf] build_knf: App(Var("stream"), [Unit])
// [Knf] build_knf: Var("stream")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Tuple([Int(1), App(Var("f"), [Var("val")])]))
// [Knf] build_knf: Var("ok")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Tuple([Int(0), Int(0)])
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Tuple([Int(1), App(Var("f"), [Var("val")])])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("f"), [Var("val")])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("val")
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: LetRec({name: ("filter", Fun([Unit], Tuple([Int, Int]))), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int], Int))], body: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Let(("r", Var({val: Some(Int)})), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit])))))}, Var("aux"))}, LetRec({name: ("concat", Fun([Unit], Tuple([Int, Int]))), args: [("stream1", Fun([Unit], Tuple([Int, Int]))), ("stream2", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream1"), [Unit]), If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")])))}, Var("aux"))}, LetRec({name: ("range", Fun([Unit], Tuple([Int, Int]))), args: [("from", Int), ("to", Int)], body: Let(("state", Var({val: Some(Array(Int))})), Array(Int(1), Var("from")), LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: Let(("val", Var({val: Some(Int)})), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))))}, Var("aux")))}, LetRec({name: ("addx", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, Var("aux"))}, LetRec({name: ("fold", Int), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int, Int], Int)), ("acc", Int)], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({name: ("sum", Int), args: [("stream", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), []))))))))))
// [Knf] build_knf: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Let(("r", Var({val: Some(Int)})), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit])))))}, Var("aux"))
// [Knf] build_knf: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Let(("r", Var({val: Some(Int)})), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit])))))
// [Knf] build_knf: App(Var("stream"), [Unit])
// [Knf] build_knf: Var("stream")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Let(("r", Var({val: Some(Int)})), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit]))))
// [Knf] build_knf: Var("ok")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Tuple([Int(0), Int(0)])
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("r", Var({val: Some(Int)})), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit])))
// [Knf] build_knf: App(Var("f"), [Var("val")])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("val")
// [Knf] build_knf: If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit]))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Tuple([Int(1), Var("val")])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("val")
// [Knf] build_knf: App(Var("aux"), [Unit])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Unit
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: LetRec({name: ("concat", Fun([Unit], Tuple([Int, Int]))), args: [("stream1", Fun([Unit], Tuple([Int, Int]))), ("stream2", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream1"), [Unit]), If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")])))}, Var("aux"))}, LetRec({name: ("range", Fun([Unit], Tuple([Int, Int]))), args: [("from", Int), ("to", Int)], body: Let(("state", Var({val: Some(Array(Int))})), Array(Int(1), Var("from")), LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: Let(("val", Var({val: Some(Int)})), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))))}, Var("aux")))}, LetRec({name: ("addx", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, Var("aux"))}, LetRec({name: ("fold", Int), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int, Int], Int)), ("acc", Int)], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({name: ("sum", Int), args: [("stream", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), [])))))))))
// [Knf] build_knf: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream1"), [Unit]), If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")])))}, Var("aux"))
// [Knf] build_knf: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream1"), [Unit]), If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")])))
// [Knf] build_knf: App(Var("stream1"), [Unit])
// [Knf] build_knf: Var("stream1")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")]))
// [Knf] build_knf: Var("ok")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("stream2"), [Unit])
// [Knf] build_knf: Var("stream2")
// [Knf] build_knf: Unit
// [Knf] build_knf: Tuple([Int(1), Var("val")])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("val")
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: LetRec({name: ("range", Fun([Unit], Tuple([Int, Int]))), args: [("from", Int), ("to", Int)], body: Let(("state", Var({val: Some(Array(Int))})), Array(Int(1), Var("from")), LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: Let(("val", Var({val: Some(Int)})), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))))}, Var("aux")))}, LetRec({name: ("addx", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, Var("aux"))}, LetRec({name: ("fold", Int), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int, Int], Int)), ("acc", Int)], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({name: ("sum", Int), args: [("stream", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), []))))))))
// [Knf] build_knf: Let(("state", Var({val: Some(Array(Int))})), Array(Int(1), Var("from")), LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: Let(("val", Var({val: Some(Int)})), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))))}, Var("aux")))
// [Knf] build_knf: Array(Int(1), Var("from"))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("from")
// [Knf] build_knf: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: Let(("val", Var({val: Some(Int)})), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))))}, Var("aux"))
// [Knf] build_knf: Let(("val", Var({val: Some(Int)})), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))))
// [Knf] build_knf: Get(Var("state"), Int(0))
// [Knf] build_knf: Var("state")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")])))
// [Knf] build_knf: Var("val")
// [Knf] build_knf: Var("to")
// [Knf] build_knf: Tuple([Int(0), Int(0)])
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))
// [Knf] build_knf: Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("state")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Var("val"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("val")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Tuple([Int(1), Var("val")])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("val")
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: LetRec({name: ("addx", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, Var("aux"))}, LetRec({name: ("fold", Int), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int, Int], Int)), ("acc", Int)], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({name: ("sum", Int), args: [("stream", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), [])))))))
// [Knf] build_knf: LetRec({name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, Var("aux"))
// [Knf] build_knf: Prim(Var("x"), Var("y"), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: LetRec({name: ("fold", Int), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int, Int], Int)), ("acc", Int)], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({name: ("sum", Int), args: [("stream", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), []))))))
// [Knf] build_knf: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))
// [Knf] build_knf: App(Var("stream"), [Unit])
// [Knf] build_knf: Var("stream")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])]))
// [Knf] build_knf: Var("ok")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("acc")
// [Knf] build_knf: App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])
// [Knf] build_knf: Var("fold")
// [Knf] build_knf: Var("stream")
// [Knf] build_knf: Var("f")
// [Knf] build_knf: App(Var("f"), [Var("acc"), Var("val")])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("acc")
// [Knf] build_knf: Var("val")
// [Knf] build_knf: LetRec({name: ("sum", Int), args: [("stream", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), [])))))
// [Knf] build_knf: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))
// [Knf] build_knf: Prim(Var("x"), Var("y"), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: App(Var("fold"), [Var("stream"), Var("add"), Int(0)])
// [Knf] build_knf: Var("fold")
// [Knf] build_knf: Var("stream")
// [Knf] build_knf: Var("add")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), []))))
// [Knf] build_knf: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))
// [Knf] build_knf: If(LE(Var("x"), Var("y")), Int(0), Int(1))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), [])))
// [Knf] build_knf: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))
// [Knf] build_knf: If(LE(Var("y"), Var("x")), Int(0), Int(1))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))
// [Knf] build_knf: App(Var("range"), [Int(0), Int(100)])
// [Knf] build_knf: Var("range")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(100)
// [Knf] build_knf: Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit))))))))
// [Knf] build_knf: App(Var("range"), [Int(0), Int(1000)])
// [Knf] build_knf: Var("range")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1000)
// [Knf] build_knf: Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))
// [Knf] build_knf: App(Var("concat"), [Var("range100"), Var("range1000")])
// [Knf] build_knf: Var("concat")
// [Knf] build_knf: Var("range100")
// [Knf] build_knf: Var("range1000")
// [Knf] build_knf: Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit))))))
// [Knf] build_knf: App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])])
// [Knf] build_knf: Var("map")
// [Knf] build_knf: Var("catt")
// [Knf] build_knf: App(Var("addx"), [Int(1)])
// [Knf] build_knf: Var("addx")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))
// [Knf] build_knf: App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])])
// [Knf] build_knf: Var("filter")
// [Knf] build_knf: Var("addone")
// [Knf] build_knf: App(Var("gt"), [Int(50)])
// [Knf] build_knf: Var("gt")
// [Knf] build_knf: Int(50)
// [Knf] build_knf: Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit))))
// [Knf] build_knf: App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])])
// [Knf] build_knf: Var("filter")
// [Knf] build_knf: Var("over50")
// [Knf] build_knf: App(Var("le"), [Int(1200)])
// [Knf] build_knf: Var("le")
// [Knf] build_knf: Int(1200)
// [Knf] build_knf: Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))
// [Knf] build_knf: App(Var("sum"), [Var("under1200")])
// [Knf] build_knf: Var("sum")
// [Knf] build_knf: Var("under1200")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit))
// [Knf] build_knf: App(Var("print_int"), [Var("sum")])
// [Knf] build_knf: Var("sum")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)
// [Knf] build_knf: App(Var("print_char"), [Int(10)])
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] beta reduce range100.123 = aux65.157
// [Main] beta reduce range1000.126 = aux65.170
// [Main] beta reduce catt.127 = aux46.181
// [Main] beta reduce _129 = aux81.190
// [Main] beta reduce addone.130 = aux6.192
// [Main] beta reduce _132 = aux111.203
// [Main] beta reduce over50.133 = aux25.205
// [Main] beta reduce _135 = aux117.218
// [Main] beta reduce under1200.136 = aux25.220
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux111.203l7_6
// [Main]   .type aux111.203l7_6, @function
// [Main] # leaf true
// [Main] aux111.203l7_6:
// [Main] .aux111.203l7_6_0:
// [Main]   blt a0, a1, .aux111.203l7_6_2
// [Main] 
// [Main] .aux111.203l7_6_1:
// [Main]   mv a0, zero
// [Main] 
// [Main] .aux111.203l7_6_3:
// [Main]   ret
// [Main] 
// [Main] .aux111.203l7_6_2:
// [Main]   li a0, 1
// [Main]   j .aux111.203l7_6_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux6.192l6_5
// [Main]   .type aux6.192l6_5, @function
// [Main] # leaf false
// [Main] aux6.192l6_5:
// [Main] .aux6.192l6_5_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s0, a2
// [Main]   mv s1, a3
// [Main]   mv a2, a4
// [Main]   mv s2, a5
// [Main] 
// [Main] .aux6.192l6_5_8:
// [Main]   mv a0, zero
// [Main]   call aux65.157l2_1
// [Main] 
// [Main] .aux6.192l6_5_12:
// [Main]   lw a1, 0(a0)
// [Main]   lw a0, 4(a0)
// [Main]   bne a1, zero, .aux6.192l6_5_10
// [Main] 
// [Main] .aux6.192l6_5_9:
// [Main]   mv a0, zero
// [Main]   mv a1, s0
// [Main]   mv a2, s2
// [Main]   call aux65.170l3_2
// [Main] 
// [Main] .aux6.192l6_5_11:
// [Main]   mv a1, a0
// [Main] 
// [Main] .aux6.192l6_5_4:
// [Main]   lw a0, 0(a1)
// [Main]   lw a1, 4(a1)
// [Main]   bne a0, zero, .aux6.192l6_5_2
// [Main] 
// [Main] .aux6.192l6_5_1:
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   sw zero, 0(a0)
// [Main]   sw zero, 4(a0)
// [Main] 
// [Main] .aux6.192l6_5_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .aux6.192l6_5_10:
// [Main]   addi a1, s11, -8
// [Main]   andi s11, a1, -8
// [Main]   li a2, 1
// [Main]   sw a2, 0(a1)
// [Main]   sw a0, 4(a1)
// [Main]   mv a0, a1
// [Main]   j .aux6.192l6_5_11
// [Main] 
// [Main] .aux6.192l6_5_2:
// [Main] 
// [Main] .aux6.192l6_5_7:
// [Main]   add a0, s1, a1
// [Main] 
// [Main] .aux6.192l6_5_5:
// [Main]   addi a1, s11, -8
// [Main]   andi s11, a1, -8
// [Main]   li a2, 1
// [Main]   sw a2, 0(a1)
// [Main]   sw a0, 4(a1)
// [Main]   mv a0, a1
// [Main]   j .aux6.192l6_5_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux65.157l2_1
// [Main]   .type aux65.157l2_1, @function
// [Main] # leaf true
// [Main] aux65.157l2_1:
// [Main] .aux65.157l2_1_0:
// [Main]   mv a0, a1
// [Main]   mv a1, a2
// [Main]   lw a2, 0(a1)
// [Main]   beq a2, a0, .aux65.157l2_1_1
// [Main] 
// [Main] .aux65.157l2_1_2:
// [Main]   addi a0, a2, 1
// [Main]   sw a0, 0(a1)
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   li a1, 1
// [Main]   sw a1, 0(a0)
// [Main]   sw a2, 4(a0)
// [Main] 
// [Main] .aux65.157l2_1_3:
// [Main]   ret
// [Main] 
// [Main] .aux65.157l2_1_1:
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   sw zero, 0(a0)
// [Main]   sw zero, 4(a0)
// [Main]   j .aux65.157l2_1_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main120l1_11
// [Main]   .type main120l1_11, @function
// [Main] # leaf false
// [Main] main120l1_11:
// [Main] .main120l1_11_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   addi a0, s11, -4
// [Main]   andi s11, a0, -8
// [Main]   sw zero, 0(a0)
// [Main]   addi a1, s11, -4
// [Main]   andi s11, a1, -8
// [Main]   sw zero, 0(a1)
// [Main]   addi a2, s11, -64
// [Main]   andi s11, a2, -8
// [Main]   la a3, aux25.220l10c0_24
// [Main]   sd a3, 0(a2)
// [Main]   li a3, 100
// [Main]   sd a3, 8(a2)
// [Main]   li a3, 1000
// [Main]   sd a3, 16(a2)
// [Main]   li a3, 1
// [Main]   sd a3, 24(a2)
// [Main]   li a3, 50
// [Main]   sd a3, 32(a2)
// [Main]   li a3, 1200
// [Main]   sd a3, 40(a2)
// [Main]   sd a0, 48(a2)
// [Main]   sd a1, 56(a2)
// [Main]   addi a1, s11, -8
// [Main]   andi s11, a1, -8
// [Main]   la a0, add102.233l11c0_26
// [Main]   sd a0, 0(a1)
// [Main]   mv a0, a2
// [Main]   mv a2, zero
// [Main]   call fold84l0_0
// [Main]   call minimbt_print_int
// [Main]   li a0, 10
// [Main]   call minimbt_print_char
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl fold84l0_0
// [Main]   .type fold84l0_0, @function
// [Main] # leaf false
// [Main] fold84l0_0:
// [Main] .fold84l0_0_8:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s0, a0
// [Main]   mv s2, a1
// [Main]   mv s1, a2
// [Main] 
// [Main] .fold84l0_0_0:
// [Main]   mv s10, s0
// [Main]   ld a1, 0(s0)
// [Main]   mv a0, zero
// [Main]   jalr a1
// [Main]   mv a1, a0
// [Main]   lw a0, 0(a1)
// [Main]   lw a1, 4(a1)
// [Main]   beq a0, zero, .fold84l0_0_1
// [Main] 
// [Main] .fold84l0_0_2:
// [Main]   mv s10, s2
// [Main]   ld a2, 0(s2)
// [Main]   mv a0, s1
// [Main]   jalr a2
// [Main]   mv s1, a0
// [Main]   mv s10, s0
// [Main]   ld a1, 0(s0)
// [Main]   mv a0, zero
// [Main]   jalr a1
// [Main]   mv a1, a0
// [Main]   lw a0, 0(a1)
// [Main]   lw a1, 4(a1)
// [Main]   beq a0, zero, .fold84l0_0_3
// [Main] 
// [Main] .fold84l0_0_4:
// [Main]   mv s10, s2
// [Main]   ld a2, 0(s2)
// [Main]   mv a0, s1
// [Main]   jalr a2
// [Main]   mv s1, a0
// [Main]   j .fold84l0_0_0
// [Main] 
// [Main] .fold84l0_0_1:
// [Main]   mv a0, s1
// [Main] 
// [Main] .fold84l0_0_6:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .fold84l0_0_3:
// [Main]   mv a0, s1
// [Main] 
// [Main] .fold84l0_0_5:
// [Main]   j .fold84l0_0_6
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_28
// [Main]   .type T$start_28, @function
// [Main] # leaf false
// [Main] T$start_28:
// [Main] .T$start_28_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main120l1_11
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl add102.233l11_10
// [Main]   .type add102.233l11_10, @function
// [Main] # leaf true
// [Main] add102.233l11_10:
// [Main] .add102.233l11_10_0:
// [Main]   add a0, a0, a1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux25.220l10_9
// [Main]   .type aux25.220l10_9, @function
// [Main] # leaf false
// [Main] aux25.220l10_9:
// [Main] .aux25.220l10_9_8:
// [Main]   addi sp, sp, -80
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   sd s6, 56(sp)
// [Main]   sd s7, 64(sp)
// [Main]   mv s5, a1
// [Main]   mv s1, a2
// [Main]   mv s0, a3
// [Main]   mv s3, a4
// [Main]   mv s7, a5
// [Main]   mv s6, a6
// [Main]   mv s2, a7
// [Main] 
// [Main] .aux25.220l10_9_0:
// [Main] 
// [Main] .aux25.220l10_9_19:
// [Main]   mv a0, zero
// [Main] 
// [Main] .aux25.220l10_9_11:
// [Main]   mv a0, zero
// [Main]   mv a1, s5
// [Main]   mv a2, s1
// [Main]   mv a3, s0
// [Main]   mv a4, s6
// [Main]   mv a5, s2
// [Main]   call aux6.192l6_5
// [Main]   mv a1, a0
// [Main] 
// [Main] .aux25.220l10_9_20:
// [Main]   lw a0, 0(a1)
// [Main]   lw s4, 4(a1)
// [Main]   bne a0, zero, .aux25.220l10_9_13
// [Main] 
// [Main] .aux25.220l10_9_12:
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   sw zero, 0(a0)
// [Main]   sw zero, 4(a0)
// [Main] 
// [Main] .aux25.220l10_9_17:
// [Main] 
// [Main] .aux25.220l10_9_9:
// [Main]   lw a1, 0(a0)
// [Main]   lw a0, 4(a0)
// [Main]   bne a1, zero, .aux25.220l10_9_2
// [Main] 
// [Main] .aux25.220l10_9_1:
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   sw zero, 0(a0)
// [Main]   sw zero, 4(a0)
// [Main] 
// [Main] .aux25.220l10_9_6:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   ld s6, 56(sp)
// [Main]   ld s7, 64(sp)
// [Main]   addi sp, sp, 80
// [Main]   ret
// [Main] 
// [Main] .aux25.220l10_9_13:
// [Main]   mv a0, s4
// [Main]   mv a1, s3
// [Main]   call aux111.203l7_6
// [Main] 
// [Main] .aux25.220l10_9_21:
// [Main]   bne a0, zero, .aux25.220l10_9_15
// [Main] 
// [Main] .aux25.220l10_9_14:
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   li a1, 1
// [Main]   sw a1, 0(a0)
// [Main]   sw s4, 4(a0)
// [Main] 
// [Main] .aux25.220l10_9_16:
// [Main]   j .aux25.220l10_9_17
// [Main] 
// [Main] .aux25.220l10_9_15:
// [Main]   mv a0, zero
// [Main]   j .aux25.220l10_9_11
// [Main] 
// [Main] .aux25.220l10_9_2:
// [Main] 
// [Main] .aux25.220l10_9_22:
// [Main]   blt s7, a0, .aux25.220l10_9_24
// [Main] 
// [Main] .aux25.220l10_9_23:
// [Main]   mv a1, zero
// [Main] 
// [Main] .aux25.220l10_9_25:
// [Main] 
// [Main] .aux25.220l10_9_10:
// [Main]   bne a1, zero, .aux25.220l10_9_4
// [Main] 
// [Main] .aux25.220l10_9_3:
// [Main]   addi a1, s11, -8
// [Main]   andi s11, a1, -8
// [Main]   li a2, 1
// [Main]   sw a2, 0(a1)
// [Main]   sw a0, 4(a1)
// [Main]   mv a0, a1
// [Main] 
// [Main] .aux25.220l10_9_5:
// [Main]   j .aux25.220l10_9_6
// [Main] 
// [Main] .aux25.220l10_9_24:
// [Main]   li a1, 1
// [Main]   j .aux25.220l10_9_25
// [Main] 
// [Main] .aux25.220l10_9_4:
// [Main]   mv a0, zero
// [Main]   j .aux25.220l10_9_0
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux65.170l3_2
// [Main]   .type aux65.170l3_2, @function
// [Main] # leaf true
// [Main] aux65.170l3_2:
// [Main] .aux65.170l3_2_0:
// [Main]   mv a0, a1
// [Main]   mv a1, a2
// [Main]   lw a2, 0(a1)
// [Main]   beq a2, a0, .aux65.170l3_2_1
// [Main] 
// [Main] .aux65.170l3_2_2:
// [Main]   addi a0, a2, 1
// [Main]   sw a0, 0(a1)
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   li a1, 1
// [Main]   sw a1, 0(a0)
// [Main]   sw a2, 4(a0)
// [Main] 
// [Main] .aux65.170l3_2_3:
// [Main]   ret
// [Main] 
// [Main] .aux65.170l3_2_1:
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   sw zero, 0(a0)
// [Main]   sw zero, 4(a0)
// [Main]   j .aux65.170l3_2_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_28
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux25.220l10c0_24
// [Main]   .type aux25.220l10c0_24, @function
// [Main] # leaf false
// [Main] aux25.220l10c0_24:
// [Main] .aux25.220l10c0_24_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a1, s10
// [Main]   lw a2, 8(a1)
// [Main]   lw a3, 16(a1)
// [Main]   lw a4, 24(a1)
// [Main]   lw a5, 32(a1)
// [Main]   lw a6, 40(a1)
// [Main]   ld a7, 48(a1)
// [Main]   ld t0, 56(a1)
// [Main]   mv a1, a2
// [Main]   mv a2, a3
// [Main]   mv a3, a4
// [Main]   mv a4, a5
// [Main]   mv a5, a6
// [Main]   mv a6, a7
// [Main]   mv a7, t0
// [Main]   call aux25.220l10_9
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl add102.233l11c0_26
// [Main]   .type add102.233l11c0_26, @function
// [Main] # leaf false
// [Main] add102.233l11c0_26:
// [Main] .add102.233l11c0_26_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a2, s10
// [Main]   call add102.233l11_10
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function aux111.203l7_6
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Jump(target=b3, args=[Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Jump(target=b3, args=[Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FnParam(fref=f6, fpref=$f.1), FnParam(fref=f6, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function aux111.203l7_6 to wasm
// [Wasm] Lowering function aux25.220l10_9
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m0, fills=[Field(index=0, val=Int32(val=0)), Field(index=1, val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f9, mref=m0) -> $f9.m0
// [Wasm] Get Local name Mem(fref=f9, mref=m0) -> $f9.m0
// [Wasm] Get Local name Mem(fref=f9, mref=m0) -> $f9.m0
// [Wasm] Lowering control Jump(target=b6, args=[Mem(fref=f9, mref=m0)])
// [Wasm] Get Local name Mem(fref=f9, mref=m0) -> $f9.m0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m1, fills=[Field(index=0, val=Int32(val=1)), Field(index=1, val=Insn(iref=%2))])
// [Wasm] Get Local name Mem(fref=f9, mref=m1) -> $f9.m1
// [Wasm] Get Local name Mem(fref=f9, mref=m1) -> $f9.m1
// [Wasm] Get Local name Mem(fref=f9, mref=m1) -> $f9.m1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Jump(target=b5, args=[Mem(fref=f9, mref=m1)])
// [Wasm] Get Local name Mem(fref=f9, mref=m1) -> $f9.m1
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering control Jump(target=b0, args=[Unit, BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5), BlockParam(bref=b0, bpref=$b.6), BlockParam(bref=b0, bpref=$b.7)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.7) -> $b0.$b.7
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.7) -> $b0.$b.7
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b10, bpref=$b.0), Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Branch(cond=Insn(iref=%6), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Jump(target=b10, args=[BlockParam(bref=b25, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.0) -> $b25.$b.0
// [Wasm] Get Local name BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Lowering control Jump(target=b25, args=[Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.0) -> $b25.$b.0
// [Wasm] Lowering control Jump(target=b25, args=[Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.0) -> $b25.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%2), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering control Branch(cond=Insn(iref=%16), t=b23, t_args=[], f=b24, f_args=[])
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering control Jump(target=b22, args=[])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b9, bpref=$b.0), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b9, bpref=$b.0), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b9, args=[BlockParam(bref=b17, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b17, bpref=$b.0) -> $b17.$b.0
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m11, fills=[Field(index=0, val=Int32(val=0)), Field(index=1, val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f9, mref=m11) -> $f9.m11
// [Wasm] Get Local name Mem(fref=f9, mref=m11) -> $f9.m11
// [Wasm] Get Local name Mem(fref=f9, mref=m11) -> $f9.m11
// [Wasm] Lowering control Jump(target=b17, args=[Mem(fref=f9, mref=m11)])
// [Wasm] Get Local name Mem(fref=f9, mref=m11) -> $f9.m11
// [Wasm] Get Local name BlockParam(bref=b17, bpref=$b.0) -> $b17.$b.0
// [Wasm] Lowering control Jump(target=b17, args=[BlockParam(bref=b16, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.0) -> $b16.$b.0
// [Wasm] Get Local name BlockParam(bref=b17, bpref=$b.0) -> $b17.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m12, fills=[Field(index=0, val=Int32(val=1)), Field(index=1, val=Insn(iref=%10))])
// [Wasm] Get Local name Mem(fref=f9, mref=m12) -> $f9.m12
// [Wasm] Get Local name Mem(fref=f9, mref=m12) -> $f9.m12
// [Wasm] Get Local name Mem(fref=f9, mref=m12) -> $f9.m12
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Jump(target=b16, args=[Mem(fref=f9, mref=m12)])
// [Wasm] Get Local name Mem(fref=f9, mref=m12) -> $f9.m12
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.0) -> $b16.$b.0
// [Wasm] Lowering control Jump(target=b11, args=[Unit, BlockParam(bref=b11, bpref=$b.1), BlockParam(bref=b11, bpref=$b.2), BlockParam(bref=b11, bpref=$b.3), BlockParam(bref=b11, bpref=$b.4), BlockParam(bref=b11, bpref=$b.5), BlockParam(bref=b11, bpref=$b.6)])
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.1) -> $b11.$b.1
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.1) -> $b11.$b.1
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.2) -> $b11.$b.2
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.2) -> $b11.$b.2
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.3) -> $b11.$b.3
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.3) -> $b11.$b.3
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.4) -> $b11.$b.4
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.4) -> $b11.$b.4
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.5) -> $b11.$b.5
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.5) -> $b11.$b.5
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.6) -> $b11.$b.6
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.6) -> $b11.$b.6
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b21, bpref=$b.0), Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.0) -> $b21.$b.0
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering control Branch(cond=Insn(iref=%14), t=b14, t_args=[], f=b15, f_args=[])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Call(ty=Int32, f=f6, args=[Insn(iref=%10), BlockParam(bref=b11, bpref=$b.4)])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.4) -> $b11.$b.4
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering control Jump(target=b21, args=[Insn(iref=%13)])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.0) -> $b21.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b20, bpref=$b.0), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b20, bpref=$b.0), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%9), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering control Branch(cond=Insn(iref=%11), t=b12, t_args=[], f=b13, f_args=[])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Call(ty=Tuple(fields=[Int32, Int32]), f=f5, args=[Unit, BlockParam(bref=b11, bpref=$b.1), BlockParam(bref=b11, bpref=$b.2), BlockParam(bref=b11, bpref=$b.3), BlockParam(bref=b11, bpref=$b.5), BlockParam(bref=b11, bpref=$b.6)])
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.1) -> $b11.$b.1
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.2) -> $b11.$b.2
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.3) -> $b11.$b.3
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.5) -> $b11.$b.5
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.6) -> $b11.$b.6
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering control Jump(target=b20, args=[Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Lowering control Jump(target=b18, args=[Unit, BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.6), BlockParam(bref=b0, bpref=$b.7)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.1) -> $b11.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.2) -> $b11.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.3) -> $b11.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.4) -> $b11.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.5) -> $b11.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.7) -> $b0.$b.7
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.6) -> $b11.$b.6
// [Wasm] Lowering control Jump(target=b19, args=[])
// [Wasm] Lowering control Jump(target=b7, args=[FnParam(fref=f9, fpref=$f.0), FnParam(fref=f9, fpref=$f.1), FnParam(fref=f9, fpref=$f.2), FnParam(fref=f9, fpref=$f.3), FnParam(fref=f9, fpref=$f.4), FnParam(fref=f9, fpref=$f.5), FnParam(fref=f9, fpref=$f.6), FnParam(fref=f9, fpref=$f.7)])
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.6) -> $$f.6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.7) -> $$f.7
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.7) -> $b0.$b.7
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.6) -> $$f.6
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.7) -> $$f.7
// [Wasm] Local BlockParam(bref=b0, bpref=$b.7) -> $b0.$b.7
// [Wasm] Local Mem(fref=f9, mref=m11) -> $f9.m11
// [Wasm] Local BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Local BlockParam(bref=b11, bpref=$b.4) -> $b11.$b.4
// [Wasm] Local BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b11, bpref=$b.3) -> $b11.$b.3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local Mem(fref=f9, mref=m12) -> $f9.m12
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local BlockParam(bref=b11, bpref=$b.5) -> $b11.$b.5
// [Wasm] Local BlockParam(bref=b25, bpref=$b.0) -> $b25.$b.0
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Mem(fref=f9, mref=m0) -> $f9.m0
// [Wasm] Local BlockParam(bref=b11, bpref=$b.1) -> $b11.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Local BlockParam(bref=b17, bpref=$b.0) -> $b17.$b.0
// [Wasm] Local BlockParam(bref=b16, bpref=$b.0) -> $b16.$b.0
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local BlockParam(bref=b11, bpref=$b.2) -> $b11.$b.2
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local Mem(fref=f9, mref=m1) -> $f9.m1
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local BlockParam(bref=b11, bpref=$b.6) -> $b11.$b.6
// [Wasm] Local BlockParam(bref=b21, bpref=$b.0) -> $b21.$b.0
// [Wasm] Local BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Lowered function aux25.220l10_9 to wasm
// [Wasm] Lowering function T$start_28
// [Wasm] Lowering insn Call(ty=Unit, f=f11, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start_28 to wasm
// [Wasm] Lowering function fold84l0_0
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Apply(ty=Int32, f=BlockParam(bref=b0, bpref=$b.1), args=[Insn(iref=%4), Insn(iref=%7)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%9)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering insn Apply(ty=Int32, f=BlockParam(bref=b0, bpref=$b.1), args=[BlockParam(bref=b0, bpref=$b.2), Insn(iref=%2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Apply(ty=Tuple(fields=[Int32, Int32]), f=BlockParam(bref=b0, bpref=$b.0), args=[Unit])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%5), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%5), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%6), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering control Branch(cond=Insn(iref=%8), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Apply(ty=Tuple(fields=[Int32, Int32]), f=BlockParam(bref=b0, bpref=$b.0), args=[Unit])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b7, args=[FnParam(fref=f0, fpref=$f.0), FnParam(fref=f0, fpref=$f.1), FnParam(fref=f0, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function fold84l0_0 to wasm
// [Wasm] Lowering function add102.233l11c0_26
// [Wasm] Lowering insn Call(ty=Int32, f=f10, args=[FnParam(fref=f26, fpref=$f.0), FnParam(fref=f26, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f26, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f26, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f26, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f26, fpref=$f.1) -> $$f.1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function add102.233l11c0_26 to wasm
// [Wasm] Lowering function aux65.157l2_1
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m0, fills=[Field(index=0, val=Int32(val=0)), Field(index=1, val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Lowering control Jump(target=b3, args=[Mem(fref=f1, mref=m0)])
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f1, fpref=$f.2), index=0, width=@32), val=Insn(iref=%3))
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m1, fills=[Field(index=0, val=Int32(val=1)), Field(index=1, val=Insn(iref=%0))])
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b3, args=[Mem(fref=f1, mref=m1)])
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f1, fpref=$f.2), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), FnParam(fref=f1, fpref=$f.1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function aux65.157l2_1 to wasm
// [Wasm] Lowering function add102.233l11_10
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f10, fpref=$f.0), FnParam(fref=f10, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f10, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f10, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f10, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f10, fpref=$f.1) -> $$f.1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function add102.233l11_10 to wasm
// [Wasm] Lowering function main120l1_11
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f11, mref=m0) -> $f11.m0
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m1, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f11, mref=m1) -> $f11.m1
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Unit], ty=Tuple(fields=[Int32, Int32])), mref=m2, fills=[Field(index=0, val=Fn(fref=f24)), Field(index=1, val=Int32(val=100)), Field(index=2, val=Int32(val=1000)), Field(index=3, val=Int32(val=1)), Field(index=4, val=Int32(val=50)), Field(index=5, val=Int32(val=1200)), Field(index=6, val=Mem(fref=f11, mref=m0)), Field(index=7, val=Mem(fref=f11, mref=m1))])
// [Wasm] Get Local name Mem(fref=f11, mref=m2) -> $f11.m2
// [Wasm] Get Local name Mem(fref=f11, mref=m2) -> $f11.m2
// [Wasm] Get Local name Mem(fref=f11, mref=m2) -> $f11.m2
// [Wasm] Get Local name Mem(fref=f11, mref=m2) -> $f11.m2
// [Wasm] Get Local name Mem(fref=f11, mref=m2) -> $f11.m2
// [Wasm] Get Local name Mem(fref=f11, mref=m2) -> $f11.m2
// [Wasm] Get Local name Mem(fref=f11, mref=m2) -> $f11.m2
// [Wasm] Get Local name Mem(fref=f11, mref=m2) -> $f11.m2
// [Wasm] Get Local name Mem(fref=f11, mref=m0) -> $f11.m0
// [Wasm] Get Local name Mem(fref=f11, mref=m2) -> $f11.m2
// [Wasm] Get Local name Mem(fref=f11, mref=m1) -> $f11.m1
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32, Int32], ty=Int32), mref=m3, fills=[Field(index=0, val=Fn(fref=f26))])
// [Wasm] Get Local name Mem(fref=f11, mref=m3) -> $f11.m3
// [Wasm] Get Local name Mem(fref=f11, mref=m3) -> $f11.m3
// [Wasm] Lowering insn Call(ty=Int32, f=f0, args=[Mem(fref=f11, mref=m2), Mem(fref=f11, mref=m3), Int32(val=0)])
// [Wasm] Get Local name Mem(fref=f11, mref=m2) -> $f11.m2
// [Wasm] Get Local name Mem(fref=f11, mref=m3) -> $f11.m3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Int32(val=10)])
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Local Mem(fref=f11, mref=m0) -> $f11.m0
// [Wasm] Local Mem(fref=f11, mref=m3) -> $f11.m3
// [Wasm] Local Mem(fref=f11, mref=m1) -> $f11.m1
// [Wasm] Local Mem(fref=f11, mref=m2) -> $f11.m2
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function main120l1_11 to wasm
// [Wasm] Lowering function aux6.192l6_5
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m0, fills=[Field(index=0, val=Int32(val=0)), Field(index=1, val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Lowering control Jump(target=b3, args=[Mem(fref=f5, mref=m0)])
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m1, fills=[Field(index=0, val=Int32(val=1)), Field(index=1, val=BlockParam(bref=b5, bpref=$b.0))])
// [Wasm] Get Local name Mem(fref=f5, mref=m1) -> $f5.m1
// [Wasm] Get Local name Mem(fref=f5, mref=m1) -> $f5.m1
// [Wasm] Get Local name Mem(fref=f5, mref=m1) -> $f5.m1
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering control Jump(target=b3, args=[Mem(fref=f5, mref=m1)])
// [Wasm] Get Local name Mem(fref=f5, mref=m1) -> $f5.m1
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f5, fpref=$f.3), Insn(iref=%2)])
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Jump(target=b5, args=[Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering control Jump(target=b7, args=[])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b4, bpref=$b.0), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name BlockParam(bref=b4, bpref=$b.0) -> $b4.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b4, bpref=$b.0), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name BlockParam(bref=b4, bpref=$b.0) -> $b4.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b4, args=[BlockParam(bref=b11, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Get Local name BlockParam(bref=b4, bpref=$b.0) -> $b4.$b.0
// [Wasm] Lowering insn Call(ty=Tuple(fields=[Int32, Int32]), f=f2, args=[Unit, FnParam(fref=f5, fpref=$f.2), FnParam(fref=f5, fpref=$f.5)])
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering control Jump(target=b11, args=[Insn(iref=%12)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m8, fills=[Field(index=0, val=Int32(val=1)), Field(index=1, val=Insn(iref=%10))])
// [Wasm] Get Local name Mem(fref=f5, mref=m8) -> $f5.m8
// [Wasm] Get Local name Mem(fref=f5, mref=m8) -> $f5.m8
// [Wasm] Get Local name Mem(fref=f5, mref=m8) -> $f5.m8
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Jump(target=b11, args=[Mem(fref=f5, mref=m8)])
// [Wasm] Get Local name Mem(fref=f5, mref=m8) -> $f5.m8
// [Wasm] Get Local name BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b12, bpref=$b.0), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name BlockParam(bref=b12, bpref=$b.0) -> $b12.$b.0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b12, bpref=$b.0), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name BlockParam(bref=b12, bpref=$b.0) -> $b12.$b.0
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%9), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering control Branch(cond=Insn(iref=%11), t=b9, t_args=[], f=b10, f_args=[])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Call(ty=Tuple(fields=[Int32, Int32]), f=f1, args=[Unit, FnParam(fref=f5, fpref=$f.1), FnParam(fref=f5, fpref=$f.4)])
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering control Jump(target=b12, args=[Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name BlockParam(bref=b12, bpref=$b.0) -> $b12.$b.0
// [Wasm] Lowering control Jump(target=b8, args=[])
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.5) -> $$f.5
// [Wasm] Local BlockParam(bref=b12, bpref=$b.0) -> $b12.$b.0
// [Wasm] Local Mem(fref=f5, mref=m8) -> $f5.m8
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Mem(fref=f5, mref=m1) -> $f5.m1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Local BlockParam(bref=b11, bpref=$b.0) -> $b11.$b.0
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local BlockParam(bref=b4, bpref=$b.0) -> $b4.$b.0
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function aux6.192l6_5 to wasm
// [Wasm] Lowering function aux65.170l3_2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m0, fills=[Field(index=0, val=Int32(val=0)), Field(index=1, val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Lowering control Jump(target=b3, args=[Mem(fref=f2, mref=m0)])
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f2, fpref=$f.2), index=0, width=@32), val=Insn(iref=%3))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m1, fills=[Field(index=0, val=Int32(val=1)), Field(index=1, val=Insn(iref=%0))])
// [Wasm] Get Local name Mem(fref=f2, mref=m1) -> $f2.m1
// [Wasm] Get Local name Mem(fref=f2, mref=m1) -> $f2.m1
// [Wasm] Get Local name Mem(fref=f2, mref=m1) -> $f2.m1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b3, args=[Mem(fref=f2, mref=m1)])
// [Wasm] Get Local name Mem(fref=f2, mref=m1) -> $f2.m1
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f2, fpref=$f.2), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), FnParam(fref=f2, fpref=$f.1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Mem(fref=f2, mref=m1) -> $f2.m1
// [Wasm] Local Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function aux65.170l3_2 to wasm
// [Wasm] Lowering function aux25.220l10c0_24
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Get Local name FreeVar(fvref=^5) -> $^5
// [Wasm] Get Local name FreeVar(fvref=^6) -> $^6
// [Wasm] Get Local name FreeVar(fvref=^7) -> $^7
// [Wasm] Lowering insn Call(ty=Tuple(fields=[Int32, Int32]), f=f9, args=[FnParam(fref=f24, fpref=$f.0), FreeVar(fvref=^1), FreeVar(fvref=^2), FreeVar(fvref=^3), FreeVar(fvref=^4), FreeVar(fvref=^5), FreeVar(fvref=^6), FreeVar(fvref=^7)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Get Local name FreeVar(fvref=^5) -> $^5
// [Wasm] Get Local name FreeVar(fvref=^6) -> $^6
// [Wasm] Get Local name FreeVar(fvref=^7) -> $^7
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local FreeVar(fvref=^6) -> $^6
// [Wasm] Local FreeVar(fvref=^5) -> $^5
// [Wasm] Local FreeVar(fvref=^4) -> $^4
// [Wasm] Local FreeVar(fvref=^3) -> $^3
// [Wasm] Local FreeVar(fvref=^7) -> $^7
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function aux25.220l10c0_24 to wasm
// [KnfOpt] freq: {map1: Once, aux6: AsClosure, filter20: Many(2), aux25: AsClosure, concat41: Once, aux46: AsClosure, range58: Many(2), aux65: AsClosure, addx78: Once, aux81: AsClosure, fold84: Many(2), sum99: Once, add102: AsClosure, gt108: Once, aux111: AsClosure, le114: Once, aux117: AsClosure, main120: Once}
// [KnfOpt] Inline threshold 2 12
// [KnfOpt] Fn like 2
// [KnfOpt] Inline decision fold84 accepted
// [KnfOpt] Knf inline Some(fold84)
// [KnfOpt] Inline threshold 2 12
// [KnfOpt] Fn like 2
// [KnfOpt] Inline decision fold84 accepted
// [KnfOpt] Knf inline Some(fold84)
// [KnfOpt] Inline threshold 2 27
// [KnfOpt] Fn like 1
// [KnfOpt] Inline decision range58 accepted
// [KnfOpt] Knf inline Some(range58)
// [KnfOpt] Inline threshold 2 27
// [KnfOpt] Fn like 1
// [KnfOpt] Inline decision range58 accepted
// [KnfOpt] Knf inline Some(range58)
// [KnfOpt] Knf inline Some(concat41)
// [KnfOpt] Knf inline Some(addx78)
// [KnfOpt] Knf inline Some(map1)
// [KnfOpt] Knf inline Some(gt108)
// [KnfOpt] Inline threshold 2 26
// [KnfOpt] Fn like 3
// [KnfOpt] Inline decision filter20 accepted
// [KnfOpt] Knf inline Some(filter20)
// [KnfOpt] Knf inline Some(le114)
// [KnfOpt] Inline threshold 2 26
// [KnfOpt] Fn like 3
// [KnfOpt] Inline decision filter20 accepted
// [KnfOpt] Knf inline Some(filter20)
// [KnfOpt] Knf inline Some(sum99)
// [KnfOpt] Numbers of let rec: 12 14 2
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %8: Call(ty=Tuple(fields=[Int32, Int32]), f=f9, args=[Unit, FnParam(fref=f9, fpref=$f.1), FnParam(fref=f9, fpref=$f.2), FnParam(fref=f9, fpref=$f.3), FnParam(fref=f9, fpref=$f.4), FnParam(fref=f9, fpref=$f.5), FnParam(fref=f9, fpref=$f.6), FnParam(fref=f9, fpref=$f.7)])
// [CoreOpt] eliminated tail rec call %10: Call(ty=Int32, f=f0, args=[FnParam(fref=f0, fpref=$f.0), FnParam(fref=f0, fpref=$f.1), Insn(iref=%9)])
// [CoreOpt] eliminated tail rec call %8: Call(ty=Tuple(fields=[Int32, Int32]), f=f7, args=[Unit, FnParam(fref=f7, fpref=$f.1), FnParam(fref=f7, fpref=$f.2), FnParam(fref=f7, fpref=$f.3), FnParam(fref=f7, fpref=$f.4), FnParam(fref=f7, fpref=$f.5), FnParam(fref=f7, fpref=$f.6)])
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f4: Once, f8: Once, f9: Once, f28: Once, f0: Once, f26: MaybeInClosure, f1: Once, f10: Once, f11: Once, f5: Once, f2: Once, f3: Once, f24: MaybeInClosure, f7: Once})
// [CoreOpt] post splitting: Insn(iref=%0) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%0) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%0) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%0) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%0) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%0) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%0) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%0) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%0) -> BlockParam(bref=b4, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%0) -> BlockParam(bref=b4, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%0) -> BlockParam(bref=b4, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%0) -> BlockParam(bref=b4, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b5, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b5, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b5, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b5, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b5, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%0) -> BlockParam(bref=b4, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%0) -> BlockParam(bref=b4, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%0) -> BlockParam(bref=b4, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%0) -> BlockParam(bref=b4, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%0) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%0) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%0) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%0) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%0) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%0) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%0) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%0) -> BlockParam(bref=b9, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b10, bpref=$b.0)
// [CoreOpt] aux25.220l10_9 is inlining Call(ty=Tuple(fields=[Int32, Int32]), f=f7, args=[Unit, BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.6), BlockParam(bref=b0, bpref=$b.7)])
// [CoreOpt] shifted callee .fn aux25.205l8_7 #f7 : fn(unit, int32, int32, int32, int32, array[int32], array[int32]) -> (int32, int32)
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b19 {
// [CoreOpt]   .bb #b11 (unit, int32, int32, int32, int32, array[int32], array[int32]) {
// [CoreOpt]     let %8: (int32, int32) = call f5((), $b11.1, $b11.2, $b11.3, $b11.5, $b11.6)
// [CoreOpt]     jump b20(%8)
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 () {
// [CoreOpt]     let _ = alloc <m11: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
// [CoreOpt]     jump b17(f7.m11)
// [CoreOpt]   }
// [CoreOpt]   .bb #b13 () {
// [CoreOpt]     let %13: int32 = call f6(%10, $b11.4)
// [CoreOpt]     jump b21(%13)
// [CoreOpt]   }
// [CoreOpt]   .bb #b14 () {
// [CoreOpt]     let _ = alloc <m12: (int32, int32) heap(2)> <- [0] = 1, [1] = %10
// [CoreOpt]     jump b16(f7.m12)
// [CoreOpt]   }
// [CoreOpt]   .bb #b15 () {
// [CoreOpt]     jump b11((), $b11.1, $b11.2, $b11.3, $b11.4, $b11.5, $b11.6)
// [CoreOpt]   }
// [CoreOpt]   .bb #b16 ((int32, int32)) {
// [CoreOpt]     jump b17($b16.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b17 ((int32, int32)) {
// [CoreOpt]     return $b17.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b18 pre #Some(b19) header #b11 {
// [CoreOpt]     .block #b17
// [CoreOpt]     .block #b15
// [CoreOpt]     .block #b12
// [CoreOpt]     .block #b16
// [CoreOpt]     .block #b13
// [CoreOpt]     .block #b14
// [CoreOpt]   }
// [CoreOpt]   .bb #b19 () {
// [CoreOpt]     jump b18($f0, $f1, $f2, $f3, $f4, $f5, $f6)
// [CoreOpt]   }
// [CoreOpt]   .bb #b20 ((int32, int32)) {
// [CoreOpt]     let %9: int32 = load int32 field($b20.0, 0 * @(@32, @(@32, @32)))
// [CoreOpt]     let %10: int32 = load int32 field($b20.0, 1 * @(@32, @(@32, @32)))
// [CoreOpt]     let %11: bool = eq(%9, 0)
// [CoreOpt]     br %11 b12() b13()
// [CoreOpt]   }
// [CoreOpt]   .bb #b21 (int32) {
// [CoreOpt]     let %14: bool = eq($b21.0, 0)
// [CoreOpt]     br %14 b14() b15()
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] aux25.220l10_9 is inlining Call(ty=Int32, f=f8, args=[Insn(iref=%2), BlockParam(bref=b0, bpref=$b.5)])
// [CoreOpt] shifted callee .fn aux117.218l9_8 #f8 : fn(int32, int32) -> int32
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b22 {
// [CoreOpt]   .bb #b22 () {
// [CoreOpt]     let %16: bool = le($f0, $f1)
// [CoreOpt]     br %16 b23() b24()
// [CoreOpt]   }
// [CoreOpt]   .bb #b23 () {
// [CoreOpt]     jump b25(0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b24 () {
// [CoreOpt]     jump b25(1)
// [CoreOpt]   }
// [CoreOpt]   .bb #b25 (int32) {
// [CoreOpt]     return $b25.0
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] aux6.192l6_5 is inlining Call(ty=Int32, f=f4, args=[Insn(iref=%2), FnParam(fref=f5, fpref=$f.3)])
// [CoreOpt] shifted callee .fn aux81.190l5_4 #f4 : fn(int32, int32) -> int32
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b7 {
// [CoreOpt]   .bb #b7 () {
// [CoreOpt]     let %7: int32 = add($f1, $f0)
// [CoreOpt]     return %7
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] aux6.192l6_5 is inlining Call(ty=Tuple(fields=[Int32, Int32]), f=f3, args=[Unit, FnParam(fref=f5, fpref=$f.1), FnParam(fref=f5, fpref=$f.2), FnParam(fref=f5, fpref=$f.4), FnParam(fref=f5, fpref=$f.5)])
// [CoreOpt] shifted callee .fn aux46.181l4_3 #f3 : fn(unit, int32, int32, array[int32], array[int32]) -> (int32, int32)
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b8 {
// [CoreOpt]   .bb #b8 () {
// [CoreOpt]     let %8: (int32, int32) = call f1((), $f1, $f3)
// [CoreOpt]     jump b12(%8)
// [CoreOpt]   }
// [CoreOpt]   .bb #b9 () {
// [CoreOpt]     let %12: (int32, int32) = call f2((), $f2, $f4)
// [CoreOpt]     jump b11(%12)
// [CoreOpt]   }
// [CoreOpt]   .bb #b10 () {
// [CoreOpt]     let _ = alloc <m8: (int32, int32) heap(2)> <- [0] = 1, [1] = %10
// [CoreOpt]     jump b11(f3.m8)
// [CoreOpt]   }
// [CoreOpt]   .bb #b11 ((int32, int32)) {
// [CoreOpt]     return $b11.0
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 ((int32, int32)) {
// [CoreOpt]     let %9: int32 = load int32 field($b12.0, 0 * @(@32, @(@32, @32)))
// [CoreOpt]     let %10: int32 = load int32 field($b12.0, 1 * @(@32, @(@32, @32)))
// [CoreOpt]     let %11: bool = eq(%9, 0)
// [CoreOpt]     br %11 b9() b10()
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] aux46.181l4_3 is inlining Call(ty=Tuple(fields=[Int32, Int32]), f=f1, args=[Unit, FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.3)])
// [CoreOpt] shifted callee .fn aux65.157l2_1 #f1 : fn(unit, int32, array[int32]) -> (int32, int32)
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b6 {
// [CoreOpt]   .bb #b6 () {
// [CoreOpt]     let %6: int32 = load int32 field($f2, 0 * @32)
// [CoreOpt]     let %7: bool = eq(%6, $f1)
// [CoreOpt]     br %7 b7() b8()
// [CoreOpt]   }
// [CoreOpt]   .bb #b7 () {
// [CoreOpt]     let _ = alloc <m6: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
// [CoreOpt]     jump b9(f1.m6)
// [CoreOpt]   }
// [CoreOpt]   .bb #b8 () {
// [CoreOpt]     let %9: int32 = add(%6, 1)
// [CoreOpt]     let _ = store int32 field($f2, 0 * @32) <- %9
// [CoreOpt]     let _ = alloc <m7: (int32, int32) heap(2)> <- [0] = 1, [1] = %6
// [CoreOpt]     jump b9(f1.m7)
// [CoreOpt]   }
// [CoreOpt]   .bb #b9 ((int32, int32)) {
// [CoreOpt]     return $b9.0
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] aux25.205l8_7 is inlining Call(ty=Tuple(fields=[Int32, Int32]), f=f5, args=[Unit, BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.5), BlockParam(bref=b0, bpref=$b.6)])
// [CoreOpt] shifted callee .fn aux6.192l6_5 #f5 : fn(unit, int32, int32, int32, array[int32], array[int32]) -> (int32, int32)
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b11 {
// [CoreOpt]   .bb #b11 () {
// [CoreOpt]     jump b19()
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 () {
// [CoreOpt]     let _ = alloc <m11: (int32, int32) heap(2)> <- [0] = 0, [1] = 0
// [CoreOpt]     jump b14(f5.m11)
// [CoreOpt]   }
// [CoreOpt]   .bb #b13 () {
// [CoreOpt]     jump b18()
// [CoreOpt]   }
// [CoreOpt]   .bb #b14 ((int32, int32)) {
// [CoreOpt]     return $b14.0
// [CoreOpt]   }
// [CoreOpt]   .bb #b15 ((int32, int32)) {
// [CoreOpt]     let %9: int32 = load int32 field($b15.0, 0 * @(@32, @(@32, @32)))
// [CoreOpt]     let %10: int32 = load int32 field($b15.0, 1 * @(@32, @(@32, @32)))
// [CoreOpt]     let %11: bool = eq(%9, 0)
// [CoreOpt]     br %11 b12() b13()
// [CoreOpt]   }
// [CoreOpt]   .bb #b16 (int32) {
// [CoreOpt]     let _ = alloc <m12: (int32, int32) heap(2)> <- [0] = 1, [1] = $b16.0
// [CoreOpt]     jump b14(f5.m12)
// [CoreOpt]   }
// [CoreOpt]   .bb #b18 () {
// [CoreOpt]     let %15: int32 = add($f3, %10)
// [CoreOpt]     jump b16(%15)
// [CoreOpt]   }
// [CoreOpt]   .bb #b19 () {
// [CoreOpt]     let %16: (int32, int32) = call f1((), $f1, $f4)
// [CoreOpt]     jump b23(%16)
// [CoreOpt]   }
// [CoreOpt]   .bb #b20 () {
// [CoreOpt]     let %20: (int32, int32) = call f2((), $f2, $f5)
// [CoreOpt]     jump b22(%20)
// [CoreOpt]   }
// [CoreOpt]   .bb #b21 () {
// [CoreOpt]     let _ = alloc <m19: (int32, int32) heap(2)> <- [0] = 1, [1] = %18
// [CoreOpt]     jump b22(f5.m19)
// [CoreOpt]   }
// [CoreOpt]   .bb #b22 ((int32, int32)) {
// [CoreOpt]     jump b15($b22.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b23 ((int32, int32)) {
// [CoreOpt]     let %17: int32 = load int32 field($b23.0, 0 * @(@32, @(@32, @32)))
// [CoreOpt]     let %18: int32 = load int32 field($b23.0, 1 * @(@32, @(@32, @32)))
// [CoreOpt]     let %19: bool = eq(%17, 0)
// [CoreOpt]     br %19 b20() b21()
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] aux25.205l8_7 is inlining Call(ty=Int32, f=f6, args=[Insn(iref=%2), BlockParam(bref=b0, bpref=$b.4)])
// [CoreOpt] shifted callee .fn aux111.203l7_6 #f6 : fn(int32, int32) -> int32
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b24 {
// [CoreOpt]   .bb #b24 () {
// [CoreOpt]     let %22: bool = le($f1, $f0)
// [CoreOpt]     br %22 b25() b26()
// [CoreOpt]   }
// [CoreOpt]   .bb #b25 () {
// [CoreOpt]     jump b27(0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b26 () {
// [CoreOpt]     jump b27(1)
// [CoreOpt]   }
// [CoreOpt]   .bb #b27 (int32) {
// [CoreOpt]     return $b27.0
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f4
// [CoreOpt] Remove dead function: f8
// [CoreOpt] Remove dead function: f3
// [CoreOpt] Remove dead function: f7
