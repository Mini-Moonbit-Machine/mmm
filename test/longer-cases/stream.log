// [Asm] LoweringOrder: [11, 0, 2, 4, 3, 5, 7, 6, 8, 1, 9]
// [Asm] LoweringOrder: [[10], [1, 2], [3, 4], [5], [5], [6, 7], [0], [8], [9], [9], []]
// [Asm] LoweringOrder: HashMap::of([(b6, 0), (b4, 2), (b8, 0), (b9, 0), (b0, 0), (b11, 0), (b1, 3), (b5, 0), (b2, 0), (b3, 0), (b7, 1)])
// [Asm] LoweringOrder: [b11, b0, b2, b3, b5, b6, b8, b9, b7, b4, b1]
// [Asm] LoweringOrder: HashMap::of([(b6, 5), (b4, 0), (b8, 6), (b9, 7), (b0, 1), (b11, 0), (b1, 0), (b5, 4), (b2, 2), (b3, 3), (b7, 0)])
// [Asm] pre_assigned_registers: Mem(fref=f6, mref=m0) -> v5, FnParam(fref=f6, fpref=$f.0) -> v2, FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, BlockParam(bref=b0, bpref=$b.0) -> v7, Self(fref=f6) -> v0, BlockParam(bref=b8, bpref=$b.0) -> v16, Insn(iref=%5) -> v12, Insn(iref=%0) -> v8, Insn(iref=%4) -> v17, Insn(iref=%3) -> v11, Insn(iref=%7) -> v15, Mem(fref=f6, mref=m1) -> v6, BlockParam(bref=b5, bpref=$b.0) -> v13, Insn(iref=%2) -> v10, Insn(iref=%1) -> v9, Insn(iref=%6) -> v14, BlockParam(bref=b9, bpref=$b.0) -> v18
// [Asm] succs: []
// [Asm] critical edges for b9: []
// [Asm] critical color seq for b9: []
// [Asm] succs: [9]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: [9]
// [Asm] critical edges for b8: []
// [Asm] critical color seq for b8: []
// [Asm] succs: [8]
// [Asm] critical edges for b6: []
// [Asm] critical color seq for b6: []
// [Asm] succs: [0]
// [Asm] critical edges for b7: []
// [Asm] critical color seq for b7: []
// [Asm] succs: [6, 7]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b5, bpref=$b.0), Int32(val=0)])
// [Asm] succs: [5]
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [5]
// [Asm] critical edges for b4: []
// [Asm] critical color seq for b4: []
// [Asm] succs: [3, 4]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%2), FreeVar(fvref=^2)])
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Asm] succs: [10]
// [Asm] critical edges for b11: []
// [Asm] critical color seq for b11: []
// [Asm] defs: [v22]
// [Asm] live_set: [v4, v10, s11, zero, v22, v3]
// [Asm] defined: v22 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v4, v10, s11, v13, zero, v3]
// [Asm] move: v13 <- v22
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v10, s11, v13, zero, v3]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v18
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6, v10]
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v6, v10]
// [Asm] defined: s11 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v6, v10, v21]
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v10]
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] defs: [v16]
// [Asm] live_set: [v16]
// [Asm] move: v16 <- v6
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, v10, zero, v3]
// [Asm] defs: [v7]
// [Asm] live_set: [v7, v4, s11, zero, v3]
// [Asm] move: v7 <- zero
// [Asm] defined: v7 is X
// [Asm] skip edge 12 -> 4
// [Asm] defs: []
// [Asm] live_set: [v7, v4, s11, zero, v3]
// [Asm] defs: [v25]
// [Asm] live_set: [v25, zero, a0, v4, s11, v3]
// [Asm] defined: v25 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v25, zero, a0, v4, s11, v3]
// [Asm] move: s10 <- v3
// [Asm] defined: s10 is X
// [Asm] skip edge 14 -> 5
// [Asm] defs: []
// [Asm] live_set: [v25, zero, a0, v4, s11, v3]
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, v4, s11, v3]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [zero, v8, v4, s11, v3]
// [Asm] move: v8 <- a0
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v8, v4, s11, v3]
// [Asm] defs: [v9]
// [Asm] live_set: [zero, v8, v4, s11, v9, v3]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v10, zero, v4, s11, v9, v3]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, v10, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [v4, s11, v10, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [s11, zero, a0, s10]
// [Asm] defs: [v0]
// [Asm] live_set: [v0, s11, zero, a0]
// [Asm] move: v0 <- s10
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, s11, zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v0, s11, zero, v3]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, s11, zero, v3]
// [Asm] defined: v4 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v4, s11, zero, v7]
// [Asm] move: v7 <- v2
// [Asm] defined: v7 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5]
// [Asm] defined: s11 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v18]
// [Asm] move: v18 <- v5
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v18]
// [Asm] defs: [v18]
// [Asm] live_set: [v18]
// [Asm] move: v18 <- v16
// [Asm] defined: v18 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v4, v10, s11, v13, zero, v3]
// [Asm] move: v13 <- zero
// [Asm] defined: v13 is X
// [Asm] skip edge 6 -> 4
// [Asm] Label("aux.208") clobbered_x: @hashset.of([a2, s0, a1, a0, s1])
// [Asm] Label("aux.208") clobbered_f: @hashset.of([])
// [Asm] subst   mv v13, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] subst   addi v6, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v6, -8 ->   andi s11, a0, -8
// [Asm] subst   li v21, 1 ->   li a2, 1
// [Asm] subst   sw v21, 0(v6) ->   sw a2, 0(a0)
// [Asm] subst   sw v10, 4(v6) ->   sw a1, 4(a0)
// [Asm] subst   bne v13, zero, .aux.208_7 ->   bne a0, zero, .aux.208_7
// [Asm] subst   mv v7, zero ->   mv a0, zero
// [Asm] subst   j .aux.208_0 ->   j .aux.208_0
// [Asm] subst   ld v25, 0(v3) ->   ld a1, 0(s1)
// [Asm] subst   mv s10, v3 ->   mv s10, s1
// [Asm] subst   jalr v25 ->   jalr a1
// [Asm] subst   mv v8, a0 ->   mv a1, a0
// [Asm] subst   lw v9, 0(v8) ->   lw a0, 0(a1)
// [Asm] subst   lw v10, 4(v8) ->   lw a1, 4(a1)
// [Asm] subst   beq v9, zero, .aux.208_1 ->   beq a0, zero, .aux.208_1
// [Asm] subst   blt v4, v10, .aux.208_4 ->   blt s0, a1, .aux.208_4
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   ld v3, 8(v0) ->   ld s1, 8(a1)
// [Asm] subst   lw v4, 16(v0) ->   lw s0, 16(a1)
// [Asm] subst   addi v5, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a0, -8
// [Asm] subst   j .aux.208_9 ->   j .aux.208_9
// [Asm] subst   li v22, 1 ->   li a0, 1
// [Asm] subst   j .aux.208_5 ->   j .aux.208_5
// [Asm] LoweringOrder: [23, 0, 2, 1, 3, 5, 4, 7, 6, 8, 9, 11, 10, 12, 14, 16, 15, 17, 19, 18, 20, 13, 21]
// [Asm] LoweringOrder: [[22], [1, 2], [3], [3], [4, 5], [9], [6, 7], [8], [8], [9], [10, 11], [12], [12], [13, 14], [15, 16], [17], [17], [18, 19], [0], [20], [21], [21], []]
// [Asm] LoweringOrder: HashMap::of([(b23, 0), (b8, 0), (b9, 0), (b16, 2), (b19, 1), (b13, 3), (b15, 0), (b11, 0), (b1, 7), (b2, 0), (b18, 0), (b21, 0), (b20, 0), (b6, 5), (b12, 0), (b4, 0), (b17, 0), (b0, 0), (b10, 4), (b5, 6), (b14, 0), (b3, 0), (b7, 0)])
// [Asm] LoweringOrder: [b23, b0, b2, b3, b4, b7, b8, b9, b11, b12, b14, b15, b17, b18, b20, b21, b19, b16, b13, b10, b6, b5, b1]
// [Asm] LoweringOrder: HashMap::of([(b23, 0), (b8, 6), (b9, 7), (b16, 0), (b19, 0), (b13, 0), (b15, 11), (b11, 8), (b1, 0), (b2, 2), (b18, 13), (b21, 15), (b20, 14), (b6, 0), (b12, 9), (b4, 4), (b17, 12), (b0, 1), (b10, 0), (b5, 0), (b14, 10), (b3, 3), (b7, 5)])
// [Asm] pre_assigned_registers: BlockParam(bref=b12, bpref=$b.0) -> [v47, v48], Insn(iref=%15) -> [v25, v26], FreeVar(fvref=^5) -> v7, FreeVar(fvref=^2) -> v4, Insn(iref=%8) -> v24, FreeVar(fvref=^1) -> v3, Insn(iref=%10) -> v28, Insn(iref=%27) -> v54, Insn(iref=%14) -> [v31, v32], Insn(iref=%25) -> v57, FreeVar(fvref=^4) -> v6, Insn(iref=%4) -> v15, Insn(iref=%1) -> v13, Insn(iref=%11) -> [v33, v34], Insn(iref=%26) -> v52, Insn(iref=%6) -> v22, Mem(fref=f4, mref=m0) -> v9, BlockParam(bref=b9, bpref=$b.0) -> [v37, v38], FnParam(fref=f4, fpref=$f.0) -> v2, BlockParam(bref=b17, bpref=$b.0) -> v53, Insn(iref=%28) -> v55, BlockParam(bref=b3, bpref=$b.0) -> [v20, v21], Insn(iref=%9) -> v27, Insn(iref=%16) -> v39, Insn(iref=%24) -> v51, BlockParam(bref=b0, bpref=$b.0) -> v11, BlockParam(bref=b8, bpref=$b.0) -> [v35, v36], Insn(iref=%5) -> [v16, v17], Insn(iref=%0) -> v12, Insn(iref=%19) -> [v45, v46], FreeVar(fvref=^6) -> v8, Insn(iref=%3) -> v14, Insn(iref=%18) -> v41, Insn(iref=%13) -> v30, Insn(iref=%7) -> v23, Insn(iref=%22) -> v49, Insn(iref=%17) -> v40, Insn(iref=%23) -> v50, Insn(iref=%2) -> [v18, v19], Insn(iref=%20) -> v42, Mem(fref=f4, mref=m1) -> v10, Self(fref=f4) -> v0, BlockParam(bref=b21, bpref=$b.0) -> v58, FreeVar(fvref=^3) -> v5, Insn(iref=%21) -> [v43, v44], BlockParam(bref=b20, bpref=$b.0) -> v56, Insn(iref=%12) -> v29
// [Asm] succs: []
// [Asm] critical edges for b21: []
// [Asm] critical color seq for b21: []
// [Asm] succs: [21]
// [Asm] critical edges for b13: []
// [Asm] critical color seq for b13: []
// [Asm] succs: [21]
// [Asm] critical edges for b20: []
// [Asm] critical color seq for b20: []
// [Asm] succs: [20]
// [Asm] critical edges for b18: []
// [Asm] critical color seq for b18: []
// [Asm] succs: [0]
// [Asm] critical edges for b19: []
// [Asm] critical color seq for b19: []
// [Asm] succs: [18, 19]
// [Asm] critical edges for b17: []
// [Asm] critical color seq for b17: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b17, bpref=$b.0), Int32(val=0)])
// [Asm] succs: [17]
// [Asm] critical edges for b15: []
// [Asm] critical color seq for b15: []
// [Asm] succs: [17]
// [Asm] critical edges for b16: []
// [Asm] critical color seq for b16: []
// [Asm] succs: [15, 16]
// [Asm] critical edges for b14: []
// [Asm] critical color seq for b14: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[FreeVar(fvref=^6), Insn(iref=%23)])
// [Asm] succs: [13, 14]
// [Asm] critical edges for b12: []
// [Asm] critical color seq for b12: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%22), Int32(val=0)])
// [Asm] succs: [12]
// [Asm] critical edges for b10: []
// [Asm] critical color seq for b10: []
// [Asm] succs: [12]
// [Asm] critical edges for b11: []
// [Asm] critical color seq for b11: []
// [Asm] succs: [10, 11]
// [Asm] critical edges for b9: []
// [Asm] critical color seq for b9: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%16), Int32(val=0)])
// [Asm] succs: [9]
// [Asm] critical edges for b8: []
// [Asm] critical color seq for b8: []
// [Asm] succs: [8]
// [Asm] critical edges for b6: []
// [Asm] critical color seq for b6: []
// [Asm] succs: [8]
// [Asm] critical edges for b7: []
// [Asm] critical color seq for b7: []
// [Asm] succs: [6, 7]
// [Asm] critical edges for b4: []
// [Asm] critical color seq for b4: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%9), FreeVar(fvref=^4)])
// [Asm] succs: [9]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] succs: [4, 5]
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%6), Int32(val=0)])
// [Asm] succs: [3]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: [3]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), FreeVar(fvref=^2)])
// [Asm] succs: [22]
// [Asm] critical edges for b23: []
// [Asm] critical color seq for b23: []
// [Asm] defs: [v62]
// [Asm] live_set: [v62, v5, v46, v7, s11, v33, v18, zero, v50, v45, v8, v19, v4, v6, v34, v3]
// [Asm] defined: v62 is X
// [Asm] defs: [v53]
// [Asm] live_set: [v5, v46, v53, v7, s11, v33, v18, zero, v50, v45, v8, v19, v4, v6, v34, v3]
// [Asm] move: v53 <- v62
// [Asm] defined: v53 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v46, v53, v7, s11, v33, v18, zero, v50, v45, v8, v19, v4, v6, v34, v3]
// [Asm] defs: [v22]
// [Asm] live_set: [v5, v46, v22, v7, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] move: v22 <- v18
// [Asm] defined: v22 is X
// [Asm] skip edge 17 -> 6
// [Asm] defs: [v26]
// [Asm] live_set: [v5, v46, v26, v22, v7, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] move: v26 <- v19
// [Asm] defined: v26 is X
// [Asm] skip edge 18 -> 11
// [Asm] defs: []
// [Asm] live_set: [v5, v46, v26, v22, v7, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] defs: [v44]
// [Asm] live_set: [v5, v46, v7, s11, v44, v33, v18, zero, v8, v45, v19, v4, v6, v34, v3]
// [Asm] defined: v44 is X
// [Asm] defs: [v43]
// [Asm] live_set: [v5, v46, v7, v43, s11, v44, v33, v18, zero, v8, v45, v19, v4, v6, v34, v3]
// [Asm] defined: v43 is X
// [Asm] defs: [v49]
// [Asm] live_set: [v5, v46, v49, v7, s11, v44, v33, v18, zero, v8, v45, v19, v4, v6, v34, v3]
// [Asm] move: v49 <- v43
// [Asm] defined: v49 is X
// [Asm] defs: [v50]
// [Asm] live_set: [v5, v46, v49, v7, s11, v33, v18, zero, v50, v8, v45, v19, v4, v6, v34, v3]
// [Asm] move: v50 <- v44
// [Asm] defined: v50 is X
// [Asm] defs: [v58]
// [Asm] live_set: [v58]
// [Asm] move: v58 <- v56
// [Asm] defined: v58 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] defined: v9 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v9]
// [Asm] defined: s11 is X
// [Asm] defs: [v58]
// [Asm] live_set: [v58]
// [Asm] move: v58 <- v9
// [Asm] defined: v58 is X
// [Asm] defs: []
// [Asm] live_set: [v58]
// [Asm] defs: [v14]
// [Asm] live_set: [v5, v46, v14, v7, v17, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v46, v7, v17, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] defs: [v16]
// [Asm] live_set: [v5, v46, v16, v7, v17, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] defined: v16 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v5, v46, v22, v7, v17, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] move: v22 <- v16
// [Asm] defined: v22 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v5, v46, v26, v22, v7, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] move: v26 <- v17
// [Asm] defined: v26 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v46, v7, s11, v33, v18, zero, v50, v45, v8, v19, v4, v6, v34, v3]
// [Asm] defs: [v35]
// [Asm] live_set: [v46, v5, v7, s11, v33, v18, zero, v45, v35, v8, v19, v4, v6, v34, v3]
// [Asm] move: v35 <- v33
// [Asm] defined: v35 is X
// [Asm] skip edge 29 -> 5
// [Asm] defs: [v36]
// [Asm] live_set: [v46, v5, v36, v7, s11, v33, v18, zero, v45, v35, v8, v19, v4, v6, v34, v3]
// [Asm] move: v36 <- v34
// [Asm] defined: v36 is X
// [Asm] skip edge 30 -> 14
// [Asm] defs: []
// [Asm] live_set: [v46, v5, v36, v7, s11, v33, v18, zero, v45, v35, v8, v19, v4, v6, v34, v3]
// [Asm] defs: [v29]
// [Asm] live_set: [v46, v5, v7, v32, s11, v33, v18, zero, v29, v45, v8, v19, v4, v6, v34, v3]
// [Asm] defined: v29 is X
// [Asm] defs: []
// [Asm] live_set: [v46, v5, v7, v32, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] defs: [v31]
// [Asm] live_set: [v46, v5, v7, v32, s11, v31, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] defined: v31 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v46, v5, v7, v32, s11, v33, v18, zero, v45, v35, v8, v19, v4, v6, v34, v3]
// [Asm] move: v35 <- v31
// [Asm] defined: v35 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v46, v5, v7, v36, s11, v33, v18, zero, v45, v35, v8, v19, v4, v6, v34, v3]
// [Asm] move: v36 <- v32
// [Asm] defined: v36 is X
// [Asm] defs: [v39]
// [Asm] live_set: [v46, v5, v7, v36, s11, v33, v39, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] move: v39 <- v35
// [Asm] defined: v39 is X
// [Asm] defs: [v40]
// [Asm] live_set: [v3, v46, v5, v7, s11, v33, v39, v18, zero, v45, v8, v19, v4, v6, v34, v40]
// [Asm] move: v40 <- v36
// [Asm] defined: v40 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v46, v7, s11, v33, v18, zero, v50, v8, v45, v19, v4, v6, v34, v3]
// [Asm] defs: [v49]
// [Asm] live_set: [v5, v46, v49, v7, s11, v33, v18, zero, v8, v45, v19, v4, v6, v34, v3]
// [Asm] move: v49 <- v45
// [Asm] defined: v49 is X
// [Asm] skip edge 22 -> 9
// [Asm] defs: [v50]
// [Asm] live_set: [v5, v46, v49, v7, s11, v33, v18, zero, v50, v8, v45, v19, v4, v6, v34, v3]
// [Asm] move: v50 <- v46
// [Asm] defined: v50 is X
// [Asm] skip edge 8 -> 2
// [Asm] defs: []
// [Asm] live_set: [v5, v46, v49, v7, s11, v33, v18, zero, v50, v8, v45, v19, v4, v6, v34, v3]
// [Asm] defs: []
// [Asm] live_set: [v5, v46, v7, s11, v33, v18, zero, v50, v45, v8, v19, v4, v6, v34, v3]
// [Asm] defs: []
// [Asm] live_set: [v46, a0, s11, v33, s10, v18, zero, v45, v19, v34]
// [Asm] defs: [v0]
// [Asm] live_set: [v46, a0, v0, s11, v33, v18, zero, v45, v19, v34]
// [Asm] move: v0 <- s10
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v46, v0, s11, v33, v18, zero, v45, v19, v34, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v46, v0, s11, v33, v18, zero, v45, v19, v34, v3]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v46, v0, s11, v33, v18, zero, v45, v19, v4, v34, v3]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, v46, v0, s11, v33, v18, zero, v45, v19, v4, v34, v3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, v46, v0, s11, v33, v18, zero, v45, v19, v4, v6, v34, v3]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, v46, v7, v0, s11, v33, v18, zero, v45, v19, v4, v6, v34, v3]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v2, v5, v46, v7, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] defined: v8 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, v46, v7, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] move: v11 <- v2
// [Asm] defined: v11 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v5, v46, v7, v32, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] defined: v32 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v46, v7, v32, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] defs: []
// [Asm] live_set: [v40, v46, v5, v7, s11, v33, v18, zero, v8, v45, v19, v4, v6, v34, v3]
// [Asm] defs: [v10]
// [Asm] live_set: [v10, v50]
// [Asm] defined: v10 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v10, v50]
// [Asm] defined: s11 is X
// [Asm] defs: [v61]
// [Asm] live_set: [v10, v61, v50]
// [Asm] defined: v61 is X
// [Asm] defs: []
// [Asm] live_set: [v10, v50]
// [Asm] defs: []
// [Asm] live_set: [v10]
// [Asm] defs: [v56]
// [Asm] live_set: [v56]
// [Asm] move: v56 <- v10
// [Asm] defined: v56 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v46, v5, v26, v7, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] defined: v25 is X
// [Asm] defs: [v39]
// [Asm] live_set: [v46, v5, v26, v7, s11, v33, v39, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] move: v39 <- v25
// [Asm] defined: v39 is X
// [Asm] defs: [v40]
// [Asm] live_set: [v40, v46, v5, v7, s11, v33, v39, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] move: v40 <- v26
// [Asm] defined: v40 is X
// [Asm] defs: []
// [Asm] live_set: [v40, v46, v5, v7, s11, v33, v39, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] defs: []
// [Asm] live_set: [v5, v46, v26, v7, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, v46, v7, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] move: v11 <- zero
// [Asm] defined: v11 is X
// [Asm] skip edge 39 -> 7
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v46, v7, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] defs: [v17]
// [Asm] live_set: [v5, v46, v7, v17, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v46, v7, v17, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] defs: [v53]
// [Asm] live_set: [v5, v46, v53, v7, s11, v33, v18, zero, v50, v45, v8, v19, v4, v6, v34, v3]
// [Asm] move: v53 <- zero
// [Asm] defined: v53 is X
// [Asm] skip edge 16 -> 7
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v58
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("aux.193") clobbered_x: @hashset.of([a7, t0, a5, a0, a4, a6, a2, a1, a3])
// [Asm] Label("aux.193") clobbered_f: @hashset.of([])
// [Asm] subst   li v62, 1 ->   li a0, 1
// [Asm] subst   j .aux.193_17 ->   j .aux.193_17
// [Asm] subst   mv v22, v18 ->   mv a0, a2
// [Asm] subst   mv v26, v19 ->   mv a4, a2
// [Asm] subst   j .aux.193_3 ->   j .aux.193_3
// [Asm] subst   add v44, v7, v40 ->   add a4, a3, a4
// [Asm] subst   li v43, 1 ->   li a0, 1
// [Asm] subst   addi v9, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v9, -8 ->   andi s11, a0, -8
// [Asm] subst   j .aux.193_21 ->   j .aux.193_21
// [Asm] subst   addi v14, v17, 1 ->   addi a0, a4, 1
// [Asm] subst   sw v14, 0(v3) ->   sw a0, 0(t0)
// [Asm] subst   li v16, 1 ->   li a0, 1
// [Asm] subst   bne v53, zero, .aux.193_19 ->   bne a0, zero, .aux.193_19
// [Asm] subst   mv v35, v33 ->   mv a0, a2
// [Asm] subst   mv v36, v34 ->   mv a4, a2
// [Asm] subst   j .aux.193_8 ->   j .aux.193_8
// [Asm] subst   addi v29, v32, 1 ->   addi a0, a4, 1
// [Asm] subst   sw v29, 0(v5) ->   sw a0, 0(a1)
// [Asm] subst   li v31, 1 ->   li a0, 1
// [Asm] subst   beq v49, zero, .aux.193_13 ->   beq a0, zero, .aux.193_13
// [Asm] subst   mv v49, v45 ->   mv a0, a2
// [Asm] subst   mv v50, v46 ->   mv a4, a2
// [Asm] subst   j .aux.193_12 ->   j .aux.193_12
// [Asm] subst   blt v50, v8, .aux.193_16 ->   blt a4, a5, .aux.193_16
// [Asm] subst   mv v0, s10 ->   mv a4, s10
// [Asm] subst   ld v3, 8(v0) ->   ld t0, 8(a4)
// [Asm] subst   lw v4, 16(v0) ->   lw a6, 16(a4)
// [Asm] subst   ld v5, 24(v0) ->   ld a1, 24(a4)
// [Asm] subst   lw v6, 32(v0) ->   lw a7, 32(a4)
// [Asm] subst   lw v7, 40(v0) ->   lw a3, 40(a4)
// [Asm] subst   lw v8, 48(v0) ->   lw a5, 48(a4)
// [Asm] subst   lw v32, 0(v5) ->   lw a4, 0(a1)
// [Asm] subst   beq v32, v6, .aux.193_6 ->   beq a4, a7, .aux.193_6
// [Asm] subst   beq v39, zero, .aux.193_10 ->   beq a0, zero, .aux.193_10
// [Asm] subst   addi v10, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v10, -8 ->   andi s11, a0, -8
// [Asm] subst   li v61, 1 ->   li a1, 1
// [Asm] subst   sw v61, 0(v10) ->   sw a1, 0(a0)
// [Asm] subst   sw v50, 4(v10) ->   sw a4, 4(a0)
// [Asm] subst   li v25, 1 ->   li a0, 1
// [Asm] subst   j .aux.193_9 ->   j .aux.193_9
// [Asm] subst   bne v22, zero, .aux.193_5 ->   bne a0, zero, .aux.193_5
// [Asm] subst   mv v11, zero ->   mv a0, zero
// [Asm] subst   j .aux.193_0 ->   j .aux.193_0
// [Asm] subst   lw v17, 0(v3) ->   lw a4, 0(t0)
// [Asm] subst   beq v17, v4, .aux.193_1 ->   beq a4, a6, .aux.193_1
// [Asm] subst   mv v53, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v11, Insn(iref=%3) -> v10, Insn(iref=%7) -> v14, Insn(iref=%2) -> v9, Mem(fref=f1, mref=m2) -> v4, Insn(iref=%1) -> v8, Mem(fref=f1, mref=m0) -> v6, Mem(fref=f1, mref=m4) -> v2, Self(fref=f1) -> v0, Mem(fref=f1, mref=m1) -> v3, Insn(iref=%6) -> v13, Mem(fref=f1, mref=m3) -> v5, Insn(iref=%5) -> v12, Insn(iref=%0) -> v7
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] defs: [v6]
// [Asm] live_set: [zero, v6]
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v6, s11]
// [Asm] defined: s11 is X
// [Asm] defs: [v3]
// [Asm] live_set: [zero, v6, v3]
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v6, s11, v3]
// [Asm] defined: s11 is X
// [Asm] defs: [v4]
// [Asm] live_set: [zero, v4, v6, v3]
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v4, v6, s11, v3]
// [Asm] defined: s11 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v25, zero, v4, v6, s11, v3]
// [Asm] defined: v25 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v6, s11, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [v4, s11, zero, v3]
// [Asm] defs: [v26]
// [Asm] live_set: [v4, s11, zero, v26, v3]
// [Asm] defined: v26 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [v4, s11, zero]
// [Asm] defs: [v27]
// [Asm] live_set: [v4, s11, zero, v27]
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, zero]
// [Asm] defs: [v28]
// [Asm] live_set: [v4, s11, v28, zero]
// [Asm] defined: v28 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, zero]
// [Asm] defs: [v29]
// [Asm] live_set: [v4, s11, zero, v29]
// [Asm] defined: v29 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, zero]
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero]
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v4, v5, s11, zero]
// [Asm] defined: s11 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v4, v5, s11, zero, v22]
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, s11, zero]
// [Asm] defs: []
// [Asm] live_set: [v5, s11, zero]
// [Asm] defs: [v23]
// [Asm] live_set: [v5, s11, zero, v23]
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [v5, s11, zero]
// [Asm] defs: [v2]
// [Asm] live_set: [v5, zero, v2]
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero, v2]
// [Asm] defined: s11 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v5, zero, v20, v2]
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v2]
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v2]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v2]
// [Asm] move: a0 <- v5
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0]
// [Asm] move: a1 <- v2
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move: a2 <- zero
// [Asm] defined: a2 is X
// [Asm] skip edge 17 -> 2
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v12]
// [Asm] live_set: [v12, zero]
// [Asm] move: v12 <- a0
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v12, zero]
// [Asm] defs: []
// [Asm] live_set: [v12, zero]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v12
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v13]
// [Asm] live_set: [zero]
// [Asm] move: v13 <- a0
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v15]
// [Asm] live_set: [v15, zero]
// [Asm] defined: v15 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v15
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v14]
// [Asm] live_set: [zero]
// [Asm] move: v14 <- a0
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main.120") clobbered_x: @hashset.of([a2, a1, a3, a0])
// [Asm] Label("main.120") clobbered_f: @hashset.of([])
// [Asm] subst   addi v6, s11, -4 ->   addi a0, s11, -4
// [Asm] subst   andi s11, v6, -8 ->   andi s11, a0, -8
// [Asm] subst   addi v3, s11, -4 ->   addi a1, s11, -4
// [Asm] subst   andi s11, v3, -8 ->   andi s11, a1, -8
// [Asm] subst   addi v4, s11, -56 ->   addi a2, s11, -56
// [Asm] subst   andi s11, v4, -8 ->   andi s11, a2, -8
// [Asm] subst   la v25, aux.193 ->   la a3, aux.193
// [Asm] subst   sd v25, 0(v4) ->   sd a3, 0(a2)
// [Asm] subst   sd v6, 8(v4) ->   sd a0, 8(a2)
// [Asm] subst   li v26, 100 ->   li a0, 100
// [Asm] subst   sd v26, 16(v4) ->   sd a0, 16(a2)
// [Asm] subst   sd v3, 24(v4) ->   sd a1, 24(a2)
// [Asm] subst   li v27, 1000 ->   li a0, 1000
// [Asm] subst   sd v27, 32(v4) ->   sd a0, 32(a2)
// [Asm] subst   li v28, 1 ->   li a0, 1
// [Asm] subst   sd v28, 40(v4) ->   sd a0, 40(a2)
// [Asm] subst   li v29, 50 ->   li a0, 50
// [Asm] subst   sd v29, 48(v4) ->   sd a0, 48(a2)
// [Asm] subst   addi v5, s11, -24 ->   addi a0, s11, -24
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a0, -8
// [Asm] subst   la v22, aux.208 ->   la a1, aux.208
// [Asm] subst   sd v22, 0(v5) ->   sd a1, 0(a0)
// [Asm] subst   sd v4, 8(v5) ->   sd a2, 8(a0)
// [Asm] subst   li v23, 1200 ->   li a1, 1200
// [Asm] subst   sd v23, 16(v5) ->   sd a1, 16(a0)
// [Asm] subst   addi v2, s11, -8 ->   addi a1, s11, -8
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a1, -8
// [Asm] subst   la v20, add.221 ->   la a2, add.221
// [Asm] subst   sd v20, 0(v2) ->   sd a2, 0(a1)
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   call fold.84 ->   call fold.84
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v15, 10 ->   li a0, 10
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f10) -> v0, Insn(iref=%0) -> v2
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f8) -> v0, FnParam(fref=f8, fpref=$f.1) -> v3, FnParam(fref=f8, fpref=$f.0) -> v2, Insn(iref=%0) -> v4
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [a1, a0, s10]
// [Asm] defs: [v0]
// [Asm] live_set: [a1, a0]
// [Asm] move: v0 <- s10
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [a1, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v2]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] defined: v4 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v4
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("add.221") clobbered_x: @hashset.of([a2, a1, a0])
// [Asm] Label("add.221") clobbered_f: @hashset.of([])
// [Asm] subst   mv v0, s10 ->   mv a2, s10
// [Asm] subst   add v4, v2, v3 ->   add a0, a0, a1
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [5, 0, 2, 1, 3]
// [Asm] LoweringOrder: [[4], [1, 2], [0], [3], []]
// [Asm] LoweringOrder: HashMap::of([(b1, 1), (b5, 0), (b2, 0), (b3, 1), (b0, 0)])
// [Asm] LoweringOrder: [b5, b0, b2, b1, b3]
// [Asm] LoweringOrder: HashMap::of([(b1, 0), (b5, 0), (b2, 2), (b3, 1), (b0, 1)])
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v11, FnParam(fref=f0, fpref=$f.1) -> v3, FnParam(fref=f0, fpref=$f.2) -> v4, Self(fref=f0) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v13, Insn(iref=%2) -> v10, Insn(iref=%1) -> v9, BlockParam(bref=b0, bpref=$b.0) -> v5, BlockParam(bref=b0, bpref=$b.1) -> v6, BlockParam(bref=b0, bpref=$b.2) -> v7, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%0) -> v8, Insn(iref=%4) -> v12
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: [0]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Asm] succs: [4]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] defs: [v18]
// [Asm] live_set: [v5, v18, zero, a0, v7, v6]
// [Asm] defined: v18 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v5, v18, zero, a0, v7, v6]
// [Asm] move: s10 <- v5
// [Asm] defined: s10 is X
// [Asm] skip edge 6 -> 0
// [Asm] defs: []
// [Asm] live_set: [v5, v18, zero, a0, v7, v6]
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0, v7, v6]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v7, v8, v6]
// [Asm] move: v8 <- a0
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v6]
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v7, v8, v6, v9]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero, v7, v6, v9]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, v10, zero, v7]
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move: v4 <- a2
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move: v5 <- v2
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move: v6 <- v3
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move: v7 <- v4
// [Asm] defined: v7 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v13
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move: v13 <- v7
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v5, v14, v10, zero, v7, v6]
// [Asm] defined: v14 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v5, v6, v14, v10, zero, v7]
// [Asm] move: s10 <- v6
// [Asm] defined: s10 is X
// [Asm] skip edge 6 -> 5
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v14, v10, zero, v7]
// [Asm] defs: [a0]
// [Asm] live_set: [v5, v6, v14, v10, zero, a0]
// [Asm] move: a0 <- v7
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, v6, a1, v14, a0, zero]
// [Asm] move: a1 <- v10
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, v6, zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v12]
// [Asm] live_set: [v5, v6, v12, zero]
// [Asm] move: v12 <- a0
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v12, zero]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v12, zero]
// [Asm] move: v5 <- v5
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v12, zero]
// [Asm] move: v6 <- v6
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move: v7 <- v12
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] Label("fold.84") clobbered_x: @hashset.of([s2, a2, s0, a1, a0, s1])
// [Asm] Label("fold.84") clobbered_f: @hashset.of([])
// [Asm] subst   ld v18, 0(v5) ->   ld a1, 0(s0)
// [Asm] subst   mv s10, v5 ->   mv s10, s0
// [Asm] subst   jalr v18 ->   jalr a1
// [Asm] subst   mv v8, a0 ->   mv a1, a0
// [Asm] subst   lw v9, 0(v8) ->   lw a0, 0(a1)
// [Asm] subst   lw v10, 4(v8) ->   lw a1, 4(a1)
// [Asm] subst   beq v9, zero, .fold.84_1 ->   beq a0, zero, .fold.84_1
// [Asm] subst   mv v5, v2 ->   mv s0, a0
// [Asm] subst   mv v6, v3 ->   mv s2, a1
// [Asm] subst   mv v7, v4 ->   mv s1, a2
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v13, v7 ->   mv a0, s1
// [Asm] subst   ld v14, 0(v6) ->   ld a2, 0(s2)
// [Asm] subst   mv s10, v6 ->   mv s10, s2
// [Asm] subst   mv a0, v7 ->   mv a0, s1
// [Asm] subst   jalr v14 ->   jalr a2
// [Asm] subst   mv v7, v12 ->   mv s1, a0
// [Asm] subst   j .fold.84_0 ->   j .fold.84_0
// [Asm] before colored: # leaf false
// [Asm] fold.84:
// [Asm] # block info: defs: [v3, v7, v4, v6, v5, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .fold.84_5:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm]   mv v6, v3  # live: [v4, v5, v6, zero]
// [Asm]   mv v7, v4  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, s10, v9, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v8, v5, v18, a0, v9, zero], upward_exposed: [v5, zero], params_defs: [v5, v6, v7]
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v6, v5, v10, zero, v7]
// [Asm] # block parameters: [v5, v6, v7]
// [Asm] .fold.84_0:
// [Asm]   ld v18, 0(v5)  # live: [v5, v18, zero, a0, v7, v6]
// [Asm]   mv s10, v5  # live: [v5, v18, zero, a0, v7, v6]
// [Asm]   # save_ctx2  # live: [v5, v18, zero, a0, v7, v6]
// [Asm]   jalr v18  # live: [v5, zero, a0, v7, v6]
// [Asm]   mv v8, a0  # live: [v5, zero, v7, v8, v6]
// [Asm]   # restore_ctx2  # live: [v5, zero, v7, v8, v6]
// [Asm]   lw v9, 0(v8)  # live: [v5, zero, v7, v8, v6, v9]
// [Asm]   lw v10, 4(v8)  # live: [v5, v10, zero, v7, v6, v9]
// [Asm] # control
// [Asm]   beq v9, zero, .fold.84_1  # live: [v6, v5, v10, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v7, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v14, v5, v10, a0, v7, v6, a1, v12], upward_exposed: [v6, v5, v10, v7], params_defs: []
// [Asm] # live_in: [v6, v5, v10, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .fold.84_2:
// [Asm]   ld v14, 0(v6)  # live: [v5, v14, v10, zero, v7, v6]
// [Asm]   mv s10, v6  # live: [v5, v6, v14, v10, zero, v7]
// [Asm]   # save_ctx2  # live: [v5, v6, v14, v10, zero, v7]
// [Asm]   mv a0, v7  # live: [v5, v6, v14, v10, zero, a0]
// [Asm]   mv a1, v10  # live: [v5, v6, a1, v14, a0, zero]
// [Asm]   jalr v14  # live: [v5, v6, zero, a0]
// [Asm]   mv v12, a0  # live: [v5, v6, v12, zero]
// [Asm]   # restore_ctx2  # live: [v5, v6, v12, zero]
// [Asm] # control
// [Asm]   mv v5, v5  # live: [v5, v6, v12, zero]
// [Asm]   mv v6, v6  # live: [v5, v6, v12, zero]
// [Asm]   mv v7, v12  # live: [v5, v6, zero, v7]
// [Asm]   j .fold.84_0  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v13], uses: [v7], upward_exposed: [v7], params_defs: []
// [Asm] # live_in: [v7], live_out: [v13]
// [Asm] # block parameters: []
// [Asm] .fold.84_1:
// [Asm] # control
// [Asm]   mv v13, v7  # live: [v13]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v13, a0], upward_exposed: [v13], params_defs: [v13]
// [Asm] # live_in: [v13], live_out: []
// [Asm] # block parameters: [v13]
// [Asm] .fold.84_3:
// [Asm] # control
// [Asm]   mv a0, v13  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] aux.193:
// [Asm] # block info: defs: [v2, v11, v5, v7, v8, v0, v4, v6, v3], uses: [v0, s10, a0, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [v46, v18, a0, zero, v45, v19, s11, v33, s10, v34], live_out: [v11, v5, v46, v7, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] # block parameters: []
// [Asm] .aux.193_23:
// [Asm]   # save_ctx1  # live: [v46, a0, s11, v33, s10, v18, zero, v45, v19, v34]
// [Asm]   mv v0, s10  # live: [v46, a0, v0, s11, v33, v18, zero, v45, v19, v34]
// [Asm]   mv v2, a0  # live: [v46, v0, s11, v33, v18, zero, v45, v19, v34, v2]
// [Asm]   ld v3, 8(v0)  # live: [v2, v46, v0, s11, v33, v18, zero, v45, v19, v34, v3]
// [Asm]   lw v4, 16(v0)  # live: [v2, v46, v0, s11, v33, v18, zero, v45, v19, v4, v34, v3]
// [Asm]   ld v5, 24(v0)  # live: [v2, v5, v46, v0, s11, v33, v18, zero, v45, v19, v4, v34, v3]
// [Asm]   lw v6, 32(v0)  # live: [v2, v5, v46, v0, s11, v33, v18, zero, v45, v19, v4, v6, v34, v3]
// [Asm]   lw v7, 40(v0)  # live: [v2, v5, v46, v7, v0, s11, v33, v18, zero, v45, v19, v4, v6, v34, v3]
// [Asm]   lw v8, 48(v0)  # live: [v2, v5, v46, v7, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] # control
// [Asm]   mv v11, v2  # live: [v11, v5, v46, v7, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] 
// [Asm] # block info: defs: [v17], uses: [v4, v17, v3], upward_exposed: [v4, v3], params_defs: [v11]
// [Asm] # live_in: [v11, v5, v46, v7, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3], live_out: [v5, v46, v7, v17, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] # block parameters: [v11]
// [Asm] .aux.193_0:
// [Asm]   lw v17, 0(v3)  # live: [v5, v46, v7, v17, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] # control
// [Asm]   beq v17, v4, .aux.193_1  # live: [v5, v46, v7, v17, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] 
// [Asm] # block info: defs: [v14, v16, v26, v22], uses: [v17, v14, v16, v3], upward_exposed: [v17, v3], params_defs: []
// [Asm] # live_in: [v5, v46, v7, v17, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3], live_out: [v5, v46, v26, v22, v7, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] # block parameters: []
// [Asm] .aux.193_2:
// [Asm]   addi v14, v17, 1  # live: [v5, v46, v14, v7, v17, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm]   sw v14, 0(v3)  # live: [v5, v46, v7, v17, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm]   li v16, 1  # live: [v5, v46, v16, v7, v17, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] # control
// [Asm]   mv v22, v16  # live: [v5, v46, v22, v7, v17, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm]   mv v26, v17  # live: [v5, v46, v26, v22, v7, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [zero, v22], upward_exposed: [zero, v22], params_defs: [v26, v22]
// [Asm] # live_in: [v5, v46, v26, v22, v7, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3], live_out: [v5, v46, v26, v7, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] # block parameters: [[v22, v26]]
// [Asm] .aux.193_3:
// [Asm] # control
// [Asm]   bne v22, zero, .aux.193_5  # live: [v5, v46, v26, v7, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] 
// [Asm] # block info: defs: [v32], uses: [v32, v5, v6], upward_exposed: [v5, v6], params_defs: []
// [Asm] # live_in: [v5, v46, v7, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3], live_out: [v5, v46, v7, v32, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] # block parameters: []
// [Asm] .aux.193_4:
// [Asm]   lw v32, 0(v5)  # live: [v5, v46, v7, v32, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] # control
// [Asm]   beq v32, v6, .aux.193_6  # live: [v5, v46, v7, v32, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] 
// [Asm] # block info: defs: [v36, v31, v29, v35], uses: [v32, v5, v31, v29], upward_exposed: [v32, v5], params_defs: []
// [Asm] # live_in: [v5, v46, v7, v32, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3], live_out: [v46, v5, v36, v7, s11, v33, v18, zero, v45, v35, v8, v19, v4, v6, v34, v3]
// [Asm] # block parameters: []
// [Asm] .aux.193_7:
// [Asm]   addi v29, v32, 1  # live: [v46, v5, v7, v32, s11, v33, v18, zero, v29, v45, v8, v19, v4, v6, v34, v3]
// [Asm]   sw v29, 0(v5)  # live: [v46, v5, v7, v32, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm]   li v31, 1  # live: [v46, v5, v7, v32, s11, v31, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] # control
// [Asm]   mv v35, v31  # live: [v46, v5, v7, v32, s11, v33, v18, zero, v45, v35, v8, v19, v4, v6, v34, v3]
// [Asm]   mv v36, v32  # live: [v46, v5, v7, v36, s11, v33, v18, zero, v45, v35, v8, v19, v4, v6, v34, v3]
// [Asm] 
// [Asm] # block info: defs: [v39, v40], uses: [v36, v35], upward_exposed: [v36, v35], params_defs: [v36, v35]
// [Asm] # live_in: [v46, v5, v7, v36, s11, v33, v18, zero, v35, v45, v8, v19, v4, v6, v34, v3], live_out: [v40, v46, v5, v7, s11, v33, v39, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] # block parameters: [[v35, v36]]
// [Asm] .aux.193_8:
// [Asm] # control
// [Asm]   mv v39, v35  # live: [v46, v5, v7, v36, s11, v33, v39, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm]   mv v40, v36  # live: [v3, v46, v5, v7, s11, v33, v39, v18, zero, v45, v8, v19, v4, v6, v34, v40]
// [Asm] 
// [Asm] # block info: defs: [], uses: [zero, v39], upward_exposed: [zero, v39], params_defs: [v39, v40]
// [Asm] # live_in: [v40, v46, v5, v7, s11, v33, v39, v18, zero, v45, v8, v19, v4, v6, v34, v3], live_out: [v40, v46, v5, v7, s11, v33, v18, zero, v8, v45, v19, v4, v6, v34, v3]
// [Asm] # block parameters: [[v39, v40]]
// [Asm] .aux.193_9:
// [Asm] # control
// [Asm]   beq v39, zero, .aux.193_10  # live: [v40, v46, v5, v7, s11, v33, v18, zero, v8, v45, v19, v4, v6, v34, v3]
// [Asm] 
// [Asm] # block info: defs: [v43, v49, v44, v50], uses: [v40, v43, v44, v7], upward_exposed: [v40, v7], params_defs: []
// [Asm] # live_in: [v40, v5, v46, v7, s11, v33, v18, zero, v8, v45, v19, v4, v6, v34, v3], live_out: [v5, v46, v49, v7, s11, v33, v18, zero, v50, v8, v45, v19, v4, v6, v34, v3]
// [Asm] # block parameters: []
// [Asm] .aux.193_11:
// [Asm]   add v44, v7, v40  # live: [v5, v46, v7, s11, v44, v33, v18, zero, v8, v45, v19, v4, v6, v34, v3]
// [Asm]   li v43, 1  # live: [v5, v46, v7, v43, s11, v44, v33, v18, zero, v8, v45, v19, v4, v6, v34, v3]
// [Asm] # control
// [Asm]   mv v49, v43  # live: [v5, v46, v49, v7, s11, v44, v33, v18, zero, v8, v45, v19, v4, v6, v34, v3]
// [Asm]   mv v50, v44  # live: [v5, v46, v49, v7, s11, v33, v18, zero, v50, v8, v45, v19, v4, v6, v34, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v49, zero], upward_exposed: [v49, zero], params_defs: [v49, v50]
// [Asm] # live_in: [v5, v46, v49, v7, s11, v33, v18, zero, v50, v8, v45, v19, v4, v6, v34, v3], live_out: [v5, v46, v7, s11, v33, v18, zero, v50, v8, v45, v19, v4, v6, v34, v3]
// [Asm] # block parameters: [[v49, v50]]
// [Asm] .aux.193_12:
// [Asm] # control
// [Asm]   beq v49, zero, .aux.193_13  # live: [v5, v46, v7, s11, v33, v18, zero, v50, v8, v45, v19, v4, v6, v34, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v50, v8], upward_exposed: [v50, v8], params_defs: []
// [Asm] # live_in: [v5, v46, v7, s11, v33, v18, zero, v50, v8, v45, v19, v4, v6, v34, v3], live_out: [v5, v46, v7, s11, v33, v18, zero, v50, v45, v8, v19, v4, v6, v34, v3]
// [Asm] # block parameters: []
// [Asm] .aux.193_14:
// [Asm] # control
// [Asm]   blt v50, v8, .aux.193_16  # live: [v5, v46, v7, s11, v33, v18, zero, v50, v45, v8, v19, v4, v6, v34, v3]
// [Asm] 
// [Asm] # block info: defs: [v53], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v5, v46, v7, s11, v33, v18, zero, v50, v45, v8, v19, v4, v6, v34, v3], live_out: [v5, v46, v53, v7, s11, v33, v18, zero, v50, v45, v8, v19, v4, v6, v34, v3]
// [Asm] # block parameters: []
// [Asm] .aux.193_15:
// [Asm] # control
// [Asm]   mv v53, zero  # live: [v5, v46, v53, v7, s11, v33, v18, zero, v50, v45, v8, v19, v4, v6, v34, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v53, zero], upward_exposed: [v53, zero], params_defs: [v53]
// [Asm] # live_in: [v5, v46, v53, v7, s11, v33, v18, zero, v50, v45, v8, v19, v4, v6, v34, v3], live_out: [v5, v46, v7, s11, v33, v18, zero, v50, v45, v8, v19, v4, v6, v34, v3]
// [Asm] # block parameters: [v53]
// [Asm] .aux.193_17:
// [Asm] # control
// [Asm]   bne v53, zero, .aux.193_19  # live: [v5, v46, v7, s11, v33, v18, zero, v50, v45, v8, v19, v4, v6, v34, v3]
// [Asm] 
// [Asm] # block info: defs: [v10, s11, v61, v56], uses: [s11, v10, v61, v50], upward_exposed: [s11, v50], params_defs: []
// [Asm] # live_in: [s11, v50], live_out: [v56]
// [Asm] # block parameters: []
// [Asm] .aux.193_18:
// [Asm]   addi v10, s11, -8  # live: [v10, v50]
// [Asm]   andi s11, v10, -8  # live: [v10, v50]
// [Asm]   li v61, 1  # live: [v10, v61, v50]
// [Asm]   sw v61, 0(v10)  # live: [v10, v50]
// [Asm]   sw v50, 4(v10)  # live: [v10]
// [Asm] # control
// [Asm]   mv v56, v10  # live: [v56]
// [Asm] 
// [Asm] # block info: defs: [v58], uses: [v56], upward_exposed: [v56], params_defs: [v56]
// [Asm] # live_in: [v56], live_out: [v58]
// [Asm] # block parameters: [v56]
// [Asm] .aux.193_20:
// [Asm] # control
// [Asm]   mv v58, v56  # live: [v58]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v58, a0], upward_exposed: [v58], params_defs: [v58]
// [Asm] # live_in: [v58], live_out: []
// [Asm] # block parameters: [v58]
// [Asm] .aux.193_21:
// [Asm] # control
// [Asm]   mv a0, v58  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v11], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v5, v46, v7, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3], live_out: [v11, v5, v46, v7, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] # block parameters: []
// [Asm] .aux.193_19:
// [Asm] # control
// [Asm]   mv v11, zero  # live: [v11, v5, v46, v7, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm]   j .aux.193_0  # live: [v11, v5, v46, v7, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] 
// [Asm] # block info: defs: [v62, v53], uses: [v62], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v5, v46, v7, s11, v33, v18, zero, v50, v45, v8, v19, v4, v6, v34, v3], live_out: [v5, v46, v53, v7, s11, v33, v18, zero, v50, v45, v8, v19, v4, v6, v34, v3]
// [Asm] # block parameters: []
// [Asm] .aux.193_16:
// [Asm] # control
// [Asm]   li v62, 1  # live: [v62, v5, v46, v7, s11, v33, v18, zero, v50, v45, v8, v19, v4, v6, v34, v3]
// [Asm]   mv v53, v62  # live: [v5, v46, v53, v7, s11, v33, v18, zero, v50, v45, v8, v19, v4, v6, v34, v3]
// [Asm]   j .aux.193_17  # live: [v5, v46, v53, v7, s11, v33, v18, zero, v50, v45, v8, v19, v4, v6, v34, v3]
// [Asm] 
// [Asm] # block info: defs: [v58, s11, v9], uses: [s11, v9], upward_exposed: [s11], params_defs: []
// [Asm] # live_in: [s11], live_out: [v58]
// [Asm] # block parameters: []
// [Asm] .aux.193_13:
// [Asm]   addi v9, s11, -8  # live: [v9]
// [Asm]   andi s11, v9, -8  # live: [v9]
// [Asm] # control
// [Asm]   mv v58, v9  # live: [v58]
// [Asm]   j .aux.193_21  # live: [v58]
// [Asm] 
// [Asm] # block info: defs: [v49, v50], uses: [v46, v45], upward_exposed: [v46, v45], params_defs: []
// [Asm] # live_in: [v46, v5, v7, s11, v33, v18, zero, v8, v45, v19, v4, v6, v34, v3], live_out: [v5, v46, v49, v7, s11, v33, v18, zero, v50, v8, v45, v19, v4, v6, v34, v3]
// [Asm] # block parameters: []
// [Asm] .aux.193_10:
// [Asm] # control
// [Asm]   mv v49, v45  # live: [v5, v46, v49, v7, s11, v33, v18, zero, v8, v45, v19, v4, v6, v34, v3]
// [Asm]   mv v50, v46  # live: [v5, v46, v49, v7, s11, v33, v18, zero, v50, v8, v45, v19, v4, v6, v34, v3]
// [Asm]   j .aux.193_12  # live: [v5, v46, v49, v7, s11, v33, v18, zero, v50, v8, v45, v19, v4, v6, v34, v3]
// [Asm] 
// [Asm] # block info: defs: [v36, v35], uses: [v33, v34], upward_exposed: [v33, v34], params_defs: []
// [Asm] # live_in: [v46, v5, v7, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3], live_out: [v46, v5, v36, v7, s11, v33, v18, zero, v45, v35, v8, v19, v4, v6, v34, v3]
// [Asm] # block parameters: []
// [Asm] .aux.193_6:
// [Asm] # control
// [Asm]   mv v35, v33  # live: [v46, v5, v7, s11, v33, v18, zero, v45, v35, v8, v19, v4, v6, v34, v3]
// [Asm]   mv v36, v34  # live: [v46, v5, v36, v7, s11, v33, v18, zero, v45, v35, v8, v19, v4, v6, v34, v3]
// [Asm]   j .aux.193_8  # live: [v46, v5, v36, v7, s11, v33, v18, zero, v45, v35, v8, v19, v4, v6, v34, v3]
// [Asm] 
// [Asm] # block info: defs: [v25, v39, v40], uses: [v25, v26], upward_exposed: [v26], params_defs: []
// [Asm] # live_in: [v46, v5, v26, v7, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3], live_out: [v40, v46, v5, v7, s11, v33, v39, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] # block parameters: []
// [Asm] .aux.193_5:
// [Asm]   li v25, 1  # live: [v25, v46, v5, v26, v7, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] # control
// [Asm]   mv v39, v25  # live: [v46, v5, v26, v7, s11, v33, v39, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm]   mv v40, v26  # live: [v40, v46, v5, v7, s11, v33, v39, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm]   j .aux.193_9  # live: [v40, v46, v5, v7, s11, v33, v39, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] 
// [Asm] # block info: defs: [v26, v22], uses: [v19, v18], upward_exposed: [v19, v18], params_defs: []
// [Asm] # live_in: [v5, v46, v7, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3], live_out: [v5, v46, v26, v22, v7, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] # block parameters: []
// [Asm] .aux.193_1:
// [Asm] # control
// [Asm]   mv v22, v18  # live: [v5, v46, v22, v7, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm]   mv v26, v19  # live: [v5, v46, v26, v22, v7, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm]   j .aux.193_3  # live: [v5, v46, v26, v22, v7, s11, v33, v18, zero, v45, v8, v19, v4, v6, v34, v3]
// [Asm] 
// [Asm] # leaf false
// [Asm] main.120:
// [Asm] # block info: defs: [v2, v25, t1, v14, v26, v13, v22, ft0, ft1, a1, s11, v12, v28, fa1, fa2, v29, ft6, v20, a4, v27, fa6, a6, v4, ft10, ft5, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, v23, ft3, fa0, t4, t2, v15, v3], uses: [v3, v25, v5, v26, a0, v22, a2, a1, s11, v12, v28, v29, zero, v23, v20, v27, v4, v6, v15, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.120_0:
// [Asm]   # save_ctx1  # live: [zero, s11]
// [Asm]   addi v6, s11, -4  # live: [zero, v6]
// [Asm]   andi s11, v6, -8  # live: [zero, v6, s11]
// [Asm]   addi v3, s11, -4  # live: [zero, v6, v3]
// [Asm]   andi s11, v3, -8  # live: [zero, v6, s11, v3]
// [Asm]   addi v4, s11, -56  # live: [zero, v4, v6, v3]
// [Asm]   andi s11, v4, -8  # live: [zero, v4, v6, s11, v3]
// [Asm]   la v25, aux.193  # live: [v25, zero, v4, v6, s11, v3]
// [Asm]   sd v25, 0(v4)  # live: [v4, v6, s11, zero, v3]
// [Asm]   sd v6, 8(v4)  # live: [v4, s11, zero, v3]
// [Asm]   li v26, 100  # live: [v4, s11, zero, v26, v3]
// [Asm]   sd v26, 16(v4)  # live: [v4, s11, zero, v3]
// [Asm]   sd v3, 24(v4)  # live: [v4, s11, zero]
// [Asm]   li v27, 1000  # live: [v4, s11, zero, v27]
// [Asm]   sd v27, 32(v4)  # live: [v4, s11, zero]
// [Asm]   li v28, 1  # live: [v4, s11, v28, zero]
// [Asm]   sd v28, 40(v4)  # live: [v4, s11, zero]
// [Asm]   li v29, 50  # live: [v4, s11, zero, v29]
// [Asm]   sd v29, 48(v4)  # live: [v4, s11, zero]
// [Asm]   addi v5, s11, -24  # live: [v4, v5, zero]
// [Asm]   andi s11, v5, -8  # live: [v4, v5, s11, zero]
// [Asm]   la v22, aux.208  # live: [v4, v5, s11, zero, v22]
// [Asm]   sd v22, 0(v5)  # live: [v4, v5, s11, zero]
// [Asm]   sd v4, 8(v5)  # live: [v5, s11, zero]
// [Asm]   li v23, 1200  # live: [v5, s11, zero, v23]
// [Asm]   sd v23, 16(v5)  # live: [v5, s11, zero]
// [Asm]   addi v2, s11, -8  # live: [v5, zero, v2]
// [Asm]   andi s11, v2, -8  # live: [v5, zero, v2]
// [Asm]   la v20, add.221  # live: [v5, zero, v20, v2]
// [Asm]   sd v20, 0(v2)  # live: [v5, zero, v2]
// [Asm]   # save_ctx2  # live: [v5, zero, v2]
// [Asm]   mv a0, v5  # live: [zero, a0, v2]
// [Asm]   mv a1, v2  # live: [a1, zero, a0]
// [Asm]   mv a2, zero  # live: [a2, a1, zero, a0]
// [Asm]   call fold.84  # live: [zero, a0]
// [Asm]   mv v12, a0  # live: [v12, zero]
// [Asm]   # restore_ctx2  # live: [v12, zero]
// [Asm]   # save_ctx2  # live: [v12, zero]
// [Asm]   mv a0, v12  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v13, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   li v15, 10  # live: [v15, zero]
// [Asm]   mv a0, v15  # live: [zero, a0]
// [Asm]   call minimbt_print_char  # live: [zero, a0]
// [Asm]   mv v14, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] add.221:
// [Asm] # block info: defs: [v3, v0, v4, a0, v2], uses: [v2, a0, v4, a1, s10, v3], upward_exposed: [a1, s10, a0], params_defs: []
// [Asm] # live_in: [a1, s10, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .add.221_0:
// [Asm]   # save_ctx1  # live: [a1, a0, s10]
// [Asm]   mv v0, s10  # live: [a1, a0]
// [Asm]   mv v2, a0  # live: [a1, v2]
// [Asm]   mv v3, a1  # live: [v3, v2]
// [Asm]   add v4, v2, v3  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] aux.208:
// [Asm] # block info: defs: [v3, v7, v0, v4, v2], uses: [v0, s10, a0, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s11, s10, a0, zero], live_out: [v7, v4, s11, zero, v3]
// [Asm] # block parameters: []
// [Asm] .aux.208_11:
// [Asm]   # save_ctx1  # live: [s11, zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, s11, zero, v2]
// [Asm]   ld v3, 8(v0)  # live: [v2, v0, s11, zero, v3]
// [Asm]   lw v4, 16(v0)  # live: [v2, v4, s11, zero, v3]
// [Asm] # control
// [Asm]   mv v7, v2  # live: [v3, v4, s11, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v25, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, s10, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v8, v3, v25, a0, v9, zero], upward_exposed: [zero, v3], params_defs: [v7]
// [Asm] # live_in: [v3, v4, s11, zero, v7], live_out: [v4, s11, v10, zero, v3]
// [Asm] # block parameters: [v7]
// [Asm] .aux.208_0:
// [Asm]   ld v25, 0(v3)  # live: [v25, zero, a0, v4, s11, v3]
// [Asm]   mv s10, v3  # live: [v25, zero, a0, v4, s11, v3]
// [Asm]   # save_ctx2  # live: [v25, zero, a0, v4, s11, v3]
// [Asm]   jalr v25  # live: [zero, a0, v4, s11, v3]
// [Asm]   mv v8, a0  # live: [zero, v8, v4, s11, v3]
// [Asm]   # restore_ctx2  # live: [zero, v8, v4, s11, v3]
// [Asm]   lw v9, 0(v8)  # live: [zero, v8, v4, s11, v9, v3]
// [Asm]   lw v10, 4(v8)  # live: [v10, zero, v4, s11, v9, v3]
// [Asm] # control
// [Asm]   beq v9, zero, .aux.208_1  # live: [v4, s11, v10, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v4, v10], upward_exposed: [v4, v10], params_defs: []
// [Asm] # live_in: [v4, v10, s11, zero, v3], live_out: [v4, s11, v10, zero, v3]
// [Asm] # block parameters: []
// [Asm] .aux.208_2:
// [Asm] # control
// [Asm]   blt v4, v10, .aux.208_4  # live: [v4, s11, v10, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v13], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v4, s11, v10, zero, v3], live_out: [v10, v13, zero, v4, s11, v3]
// [Asm] # block parameters: []
// [Asm] .aux.208_3:
// [Asm] # control
// [Asm]   mv v13, zero  # live: [v4, v10, s11, v13, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v13, zero], upward_exposed: [v13, zero], params_defs: [v13]
// [Asm] # live_in: [v10, v13, zero, v4, s11, v3], live_out: [v4, s11, v10, zero, v3]
// [Asm] # block parameters: [v13]
// [Asm] .aux.208_5:
// [Asm] # control
// [Asm]   bne v13, zero, .aux.208_7  # live: [v4, s11, v10, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v6, v16, v21, s11], uses: [v6, s11, v21, v10], upward_exposed: [s11, v10], params_defs: []
// [Asm] # live_in: [s11, v10], live_out: [v16]
// [Asm] # block parameters: []
// [Asm] .aux.208_6:
// [Asm]   addi v6, s11, -8  # live: [v6, v10]
// [Asm]   andi s11, v6, -8  # live: [v6, v10]
// [Asm]   li v21, 1  # live: [v6, v10, v21]
// [Asm]   sw v21, 0(v6)  # live: [v6, v10]
// [Asm]   sw v10, 4(v6)  # live: [v6]
// [Asm] # control
// [Asm]   mv v16, v6  # live: [v16]
// [Asm] 
// [Asm] # block info: defs: [v18], uses: [v16], upward_exposed: [v16], params_defs: [v16]
// [Asm] # live_in: [v16], live_out: [v18]
// [Asm] # block parameters: [v16]
// [Asm] .aux.208_8:
// [Asm] # control
// [Asm]   mv v18, v16  # live: [v18]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v18, a0], upward_exposed: [v18], params_defs: [v18]
// [Asm] # live_in: [v18], live_out: []
// [Asm] # block parameters: [v18]
// [Asm] .aux.208_9:
// [Asm] # control
// [Asm]   mv a0, v18  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v7], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v4, s11, zero, v3], live_out: [v7, v4, s11, zero, v3]
// [Asm] # block parameters: []
// [Asm] .aux.208_7:
// [Asm] # control
// [Asm]   mv v7, zero  # live: [v7, v4, s11, zero, v3]
// [Asm]   j .aux.208_0  # live: [v7, v4, s11, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v13, v22], uses: [v22], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v4, s11, v10, zero, v3], live_out: [v10, v13, zero, v4, s11, v3]
// [Asm] # block parameters: []
// [Asm] .aux.208_4:
// [Asm] # control
// [Asm]   li v22, 1  # live: [v4, v10, s11, zero, v22, v3]
// [Asm]   mv v13, v22  # live: [v4, v10, s11, v13, zero, v3]
// [Asm]   j .aux.208_5  # live: [v4, v10, s11, v13, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v5, s11, v18], uses: [v5, s11], upward_exposed: [s11], params_defs: []
// [Asm] # live_in: [s11], live_out: [v18]
// [Asm] # block parameters: []
// [Asm] .aux.208_1:
// [Asm]   addi v5, s11, -8  # live: [v5]
// [Asm]   andi s11, v5, -8  # live: [v5]
// [Asm] # control
// [Asm]   mv v18, v5  # live: [v18]
// [Asm]   j .aux.208_9  # live: [v18]
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call main.120  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Main] beta reduce range100.123 = aux.145
// [Main] beta reduce range1000.126 = aux.158
// [Main] beta reduce catt.127 = aux.169
// [Main] beta reduce _129 = aux.178
// [Main] beta reduce addone.130 = aux.180
// [Main] beta reduce _132 = aux.191
// [Main] beta reduce over50.133 = aux.193
// [Main] beta reduce _135 = aux.206
// [Main] beta reduce under1200.136 = aux.208
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl fold.84
// [Main]   .type fold.84, @function
// [Main] # leaf false
// [Main] fold.84:
// [Main] .fold.84_5:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s0, a0
// [Main]   mv s2, a1
// [Main]   mv s1, a2
// [Main] 
// [Main] .fold.84_0:
// [Main]   ld a1, 0(s0)
// [Main]   mv s10, s0
// [Main]   jalr a1
// [Main]   mv a1, a0
// [Main]   lw a0, 0(a1)
// [Main]   lw a1, 4(a1)
// [Main]   beq a0, zero, .fold.84_1
// [Main] 
// [Main] .fold.84_2:
// [Main]   ld a2, 0(s2)
// [Main]   mv s10, s2
// [Main]   mv a0, s1
// [Main]   jalr a2
// [Main]   mv s1, a0
// [Main]   j .fold.84_0
// [Main] 
// [Main] .fold.84_1:
// [Main]   mv a0, s1
// [Main] 
// [Main] .fold.84_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux.193
// [Main]   .type aux.193, @function
// [Main] # leaf true
// [Main] aux.193:
// [Main] .aux.193_23:
// [Main]   mv a4, s10
// [Main]   ld t0, 8(a4)
// [Main]   lw a6, 16(a4)
// [Main]   ld a1, 24(a4)
// [Main]   lw a7, 32(a4)
// [Main]   lw a3, 40(a4)
// [Main]   lw a5, 48(a4)
// [Main] 
// [Main] .aux.193_0:
// [Main]   lw a4, 0(t0)
// [Main]   beq a4, a6, .aux.193_1
// [Main] 
// [Main] .aux.193_2:
// [Main]   addi a0, a4, 1
// [Main]   sw a0, 0(t0)
// [Main]   li a0, 1
// [Main] 
// [Main] .aux.193_3:
// [Main]   bne a0, zero, .aux.193_5
// [Main] 
// [Main] .aux.193_4:
// [Main]   lw a4, 0(a1)
// [Main]   beq a4, a7, .aux.193_6
// [Main] 
// [Main] .aux.193_7:
// [Main]   addi a0, a4, 1
// [Main]   sw a0, 0(a1)
// [Main]   li a0, 1
// [Main] 
// [Main] .aux.193_8:
// [Main] 
// [Main] .aux.193_9:
// [Main]   beq a0, zero, .aux.193_10
// [Main] 
// [Main] .aux.193_11:
// [Main]   add a4, a3, a4
// [Main]   li a0, 1
// [Main] 
// [Main] .aux.193_12:
// [Main]   beq a0, zero, .aux.193_13
// [Main] 
// [Main] .aux.193_14:
// [Main]   blt a4, a5, .aux.193_16
// [Main] 
// [Main] .aux.193_15:
// [Main]   mv a0, zero
// [Main] 
// [Main] .aux.193_17:
// [Main]   bne a0, zero, .aux.193_19
// [Main] 
// [Main] .aux.193_18:
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   li a1, 1
// [Main]   sw a1, 0(a0)
// [Main]   sw a4, 4(a0)
// [Main] 
// [Main] .aux.193_20:
// [Main] 
// [Main] .aux.193_21:
// [Main]   ret
// [Main] 
// [Main] .aux.193_19:
// [Main]   mv a0, zero
// [Main]   j .aux.193_0
// [Main] 
// [Main] .aux.193_16:
// [Main]   li a0, 1
// [Main]   j .aux.193_17
// [Main] 
// [Main] .aux.193_13:
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   j .aux.193_21
// [Main] 
// [Main] .aux.193_10:
// [Main]   mv a0, a2
// [Main]   mv a4, a2
// [Main]   j .aux.193_12
// [Main] 
// [Main] .aux.193_6:
// [Main]   mv a0, a2
// [Main]   mv a4, a2
// [Main]   j .aux.193_8
// [Main] 
// [Main] .aux.193_5:
// [Main]   li a0, 1
// [Main]   j .aux.193_9
// [Main] 
// [Main] .aux.193_1:
// [Main]   mv a0, a2
// [Main]   mv a4, a2
// [Main]   j .aux.193_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.120
// [Main]   .type main.120, @function
// [Main] # leaf false
// [Main] main.120:
// [Main] .main.120_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   addi a0, s11, -4
// [Main]   andi s11, a0, -8
// [Main]   addi a1, s11, -4
// [Main]   andi s11, a1, -8
// [Main]   addi a2, s11, -56
// [Main]   andi s11, a2, -8
// [Main]   la a3, aux.193
// [Main]   sd a3, 0(a2)
// [Main]   sd a0, 8(a2)
// [Main]   li a0, 100
// [Main]   sd a0, 16(a2)
// [Main]   sd a1, 24(a2)
// [Main]   li a0, 1000
// [Main]   sd a0, 32(a2)
// [Main]   li a0, 1
// [Main]   sd a0, 40(a2)
// [Main]   li a0, 50
// [Main]   sd a0, 48(a2)
// [Main]   addi a0, s11, -24
// [Main]   andi s11, a0, -8
// [Main]   la a1, aux.208
// [Main]   sd a1, 0(a0)
// [Main]   sd a2, 8(a0)
// [Main]   li a1, 1200
// [Main]   sd a1, 16(a0)
// [Main]   addi a1, s11, -8
// [Main]   andi s11, a1, -8
// [Main]   la a2, add.221
// [Main]   sd a2, 0(a1)
// [Main]   mv a2, zero
// [Main]   call fold.84
// [Main]   call minimbt_print_int
// [Main]   li a0, 10
// [Main]   call minimbt_print_char
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl add.221
// [Main]   .type add.221, @function
// [Main] # leaf true
// [Main] add.221:
// [Main] .add.221_0:
// [Main]   mv a2, s10
// [Main]   add a0, a0, a1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux.208
// [Main]   .type aux.208, @function
// [Main] # leaf false
// [Main] aux.208:
// [Main] .aux.208_11:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   mv a1, s10
// [Main]   ld s1, 8(a1)
// [Main]   lw s0, 16(a1)
// [Main] 
// [Main] .aux.208_0:
// [Main]   ld a1, 0(s1)
// [Main]   mv s10, s1
// [Main]   jalr a1
// [Main]   mv a1, a0
// [Main]   lw a0, 0(a1)
// [Main]   lw a1, 4(a1)
// [Main]   beq a0, zero, .aux.208_1
// [Main] 
// [Main] .aux.208_2:
// [Main]   blt s0, a1, .aux.208_4
// [Main] 
// [Main] .aux.208_3:
// [Main]   mv a0, zero
// [Main] 
// [Main] .aux.208_5:
// [Main]   bne a0, zero, .aux.208_7
// [Main] 
// [Main] .aux.208_6:
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   li a2, 1
// [Main]   sw a2, 0(a0)
// [Main]   sw a1, 4(a0)
// [Main] 
// [Main] .aux.208_8:
// [Main] 
// [Main] .aux.208_9:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .aux.208_7:
// [Main]   mv a0, zero
// [Main]   j .aux.208_0
// [Main] 
// [Main] .aux.208_4:
// [Main]   li a0, 1
// [Main]   j .aux.208_5
// [Main] 
// [Main] .aux.208_1:
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   j .aux.208_9
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call main.120
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Typer] resolve: LetRec({tyvars: [], name: ("map", (Unit) -> (Int, Int)), args: [("stream", (Unit) -> (Int, Int)), ("f", (Int) -> Int)], body: LetRec({tyvars: [], name: ("aux", (Int, Int)), args: [("u", Var(None))], body: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Tuple([Int(1), App(Var("f"), [Var("val")])])))}, Var("aux"))}, LetRec({tyvars: [], name: ("filter", (Unit) -> (Int, Int)), args: [("stream", (Unit) -> (Int, Int)), ("f", (Int) -> Int)], body: LetRec({tyvars: [], name: ("aux", (Int, Int)), args: [("u", Var(None))], body: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Let(("r", Var(None)), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit])))))}, Var("aux"))}, LetRec({tyvars: [], name: ("concat", (Unit) -> (Int, Int)), args: [("stream1", (Unit) -> (Int, Int)), ("stream2", (Unit) -> (Int, Int))], body: LetRec({tyvars: [], name: ("aux", (Int, Int)), args: [("u", Var(None))], body: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream1"), [Unit]), If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")])))}, Var("aux"))}, LetRec({tyvars: [], name: ("range", (Unit) -> (Int, Int)), args: [("from", Int), ("to", Int)], body: Let(("state", Var(None)), Array(Int(1), Var("from")), LetRec({tyvars: [], name: ("aux", (Int, Int)), args: [("u", Var(None))], body: Let(("val", Var(None)), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var(None)), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=None)), Tuple([Int(1), Var("val")]))))}, Var("aux")))}, LetRec({tyvars: [], name: ("addx", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=None)}, Var("aux"))}, LetRec({tyvars: [], name: ("fold", Int), args: [("stream", (Unit) -> (Int, Int)), ("f", (Int, Int) -> Int), ("acc", Int)], body: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({tyvars: [], name: ("sum", Int), args: [("stream", (Unit) -> (Int, Int))], body: LetRec({tyvars: [], name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=None)}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({tyvars: [], name: ("gt", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({tyvars: [], name: ("le", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("range100", Var(None)), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var(None)), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var(None)), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var(None)), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var(None)), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var(None)), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var(None)), App(Var("sum"), [Var("under1200")]), Let(("_", Var(None)), App(Var("print_int"), [Var("sum")]), Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit)))))))))}, Unit))))))))))
// [Typer] resolve: LetRec({tyvars: [], name: ("aux", (Int, Int)), args: [("u", Var(None))], body: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Tuple([Int(1), App(Var("f"), [Var("val")])])))}, Var("aux"))
// [Typer] resolve: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Tuple([Int(1), App(Var("f"), [Var("val")])])))
// [Typer] resolve: App(Var("stream"), [Unit])
// [Typer] resolve: Unit
// [Typer] resolve: Var("stream")
// [Typer] resolve: If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Tuple([Int(1), App(Var("f"), [Var("val")])]))
// [Typer] resolve: Eq(Var("ok"), Int(0))
// [Typer] resolve: Var("ok")
// [Typer] resolve: Int(0)
// [Typer] resolve: Tuple([Int(0), Int(0)])
// [Typer] resolve: Tuple([Int(1), App(Var("f"), [Var("val")])])
// [Typer] resolve: Var("aux")
// [Typer] resolve: LetRec({tyvars: [], name: ("filter", (Unit) -> (Int, Int)), args: [("stream", (Unit) -> (Int, Int)), ("f", (Int) -> Int)], body: LetRec({tyvars: [], name: ("aux", (Int, Int)), args: [("u", Var(None))], body: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Let(("r", Var(None)), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit])))))}, Var("aux"))}, LetRec({tyvars: [], name: ("concat", (Unit) -> (Int, Int)), args: [("stream1", (Unit) -> (Int, Int)), ("stream2", (Unit) -> (Int, Int))], body: LetRec({tyvars: [], name: ("aux", (Int, Int)), args: [("u", Var(None))], body: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream1"), [Unit]), If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")])))}, Var("aux"))}, LetRec({tyvars: [], name: ("range", (Unit) -> (Int, Int)), args: [("from", Int), ("to", Int)], body: Let(("state", Var(None)), Array(Int(1), Var("from")), LetRec({tyvars: [], name: ("aux", (Int, Int)), args: [("u", Var(None))], body: Let(("val", Var(None)), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var(None)), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=None)), Tuple([Int(1), Var("val")]))))}, Var("aux")))}, LetRec({tyvars: [], name: ("addx", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=None)}, Var("aux"))}, LetRec({tyvars: [], name: ("fold", Int), args: [("stream", (Unit) -> (Int, Int)), ("f", (Int, Int) -> Int), ("acc", Int)], body: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({tyvars: [], name: ("sum", Int), args: [("stream", (Unit) -> (Int, Int))], body: LetRec({tyvars: [], name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=None)}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({tyvars: [], name: ("gt", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({tyvars: [], name: ("le", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("range100", Var(None)), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var(None)), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var(None)), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var(None)), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var(None)), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var(None)), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var(None)), App(Var("sum"), [Var("under1200")]), Let(("_", Var(None)), App(Var("print_int"), [Var("sum")]), Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit)))))))))}, Unit)))))))))
// [Typer] resolve: LetRec({tyvars: [], name: ("aux", (Int, Int)), args: [("u", Var(None))], body: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Let(("r", Var(None)), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit])))))}, Var("aux"))
// [Typer] resolve: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Let(("r", Var(None)), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit])))))
// [Typer] resolve: App(Var("stream"), [Unit])
// [Typer] resolve: Unit
// [Typer] resolve: Var("stream")
// [Typer] resolve: If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Let(("r", Var(None)), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit]))))
// [Typer] resolve: Eq(Var("ok"), Int(0))
// [Typer] resolve: Var("ok")
// [Typer] resolve: Int(0)
// [Typer] resolve: Tuple([Int(0), Int(0)])
// [Typer] resolve: Let(("r", Var(None)), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit])))
// [Typer] resolve: App(Var("f"), [Var("val")])
// [Typer] resolve: Var("val")
// [Typer] resolve: Var("f")
// [Typer] resolve: If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit]))
// [Typer] resolve: Eq(Var("r"), Int(0))
// [Typer] resolve: Var("r")
// [Typer] resolve: Int(0)
// [Typer] resolve: Tuple([Int(1), Var("val")])
// [Typer] resolve: App(Var("aux"), [Unit])
// [Typer] resolve: Unit
// [Typer] resolve: Var("aux")
// [Typer] resolve: Var("aux")
// [Typer] resolve: LetRec({tyvars: [], name: ("concat", (Unit) -> (Int, Int)), args: [("stream1", (Unit) -> (Int, Int)), ("stream2", (Unit) -> (Int, Int))], body: LetRec({tyvars: [], name: ("aux", (Int, Int)), args: [("u", Var(None))], body: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream1"), [Unit]), If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")])))}, Var("aux"))}, LetRec({tyvars: [], name: ("range", (Unit) -> (Int, Int)), args: [("from", Int), ("to", Int)], body: Let(("state", Var(None)), Array(Int(1), Var("from")), LetRec({tyvars: [], name: ("aux", (Int, Int)), args: [("u", Var(None))], body: Let(("val", Var(None)), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var(None)), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=None)), Tuple([Int(1), Var("val")]))))}, Var("aux")))}, LetRec({tyvars: [], name: ("addx", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=None)}, Var("aux"))}, LetRec({tyvars: [], name: ("fold", Int), args: [("stream", (Unit) -> (Int, Int)), ("f", (Int, Int) -> Int), ("acc", Int)], body: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({tyvars: [], name: ("sum", Int), args: [("stream", (Unit) -> (Int, Int))], body: LetRec({tyvars: [], name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=None)}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({tyvars: [], name: ("gt", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({tyvars: [], name: ("le", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("range100", Var(None)), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var(None)), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var(None)), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var(None)), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var(None)), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var(None)), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var(None)), App(Var("sum"), [Var("under1200")]), Let(("_", Var(None)), App(Var("print_int"), [Var("sum")]), Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit)))))))))}, Unit))))))))
// [Typer] resolve: LetRec({tyvars: [], name: ("aux", (Int, Int)), args: [("u", Var(None))], body: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream1"), [Unit]), If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")])))}, Var("aux"))
// [Typer] resolve: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream1"), [Unit]), If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")])))
// [Typer] resolve: App(Var("stream1"), [Unit])
// [Typer] resolve: Unit
// [Typer] resolve: Var("stream1")
// [Typer] resolve: If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")]))
// [Typer] resolve: Eq(Var("ok"), Int(0))
// [Typer] resolve: Var("ok")
// [Typer] resolve: Int(0)
// [Typer] resolve: App(Var("stream2"), [Unit])
// [Typer] resolve: Unit
// [Typer] resolve: Var("stream2")
// [Typer] resolve: Tuple([Int(1), Var("val")])
// [Typer] resolve: Var("aux")
// [Typer] resolve: LetRec({tyvars: [], name: ("range", (Unit) -> (Int, Int)), args: [("from", Int), ("to", Int)], body: Let(("state", Var(None)), Array(Int(1), Var("from")), LetRec({tyvars: [], name: ("aux", (Int, Int)), args: [("u", Var(None))], body: Let(("val", Var(None)), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var(None)), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=None)), Tuple([Int(1), Var("val")]))))}, Var("aux")))}, LetRec({tyvars: [], name: ("addx", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=None)}, Var("aux"))}, LetRec({tyvars: [], name: ("fold", Int), args: [("stream", (Unit) -> (Int, Int)), ("f", (Int, Int) -> Int), ("acc", Int)], body: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({tyvars: [], name: ("sum", Int), args: [("stream", (Unit) -> (Int, Int))], body: LetRec({tyvars: [], name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=None)}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({tyvars: [], name: ("gt", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({tyvars: [], name: ("le", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("range100", Var(None)), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var(None)), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var(None)), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var(None)), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var(None)), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var(None)), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var(None)), App(Var("sum"), [Var("under1200")]), Let(("_", Var(None)), App(Var("print_int"), [Var("sum")]), Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit)))))))))}, Unit)))))))
// [Typer] resolve: Let(("state", Var(None)), Array(Int(1), Var("from")), LetRec({tyvars: [], name: ("aux", (Int, Int)), args: [("u", Var(None))], body: Let(("val", Var(None)), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var(None)), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=None)), Tuple([Int(1), Var("val")]))))}, Var("aux")))
// [Typer] resolve: Array(Int(1), Var("from"))
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("from")
// [Typer] resolve: LetRec({tyvars: [], name: ("aux", (Int, Int)), args: [("u", Var(None))], body: Let(("val", Var(None)), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var(None)), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=None)), Tuple([Int(1), Var("val")]))))}, Var("aux"))
// [Typer] resolve: Let(("val", Var(None)), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var(None)), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=None)), Tuple([Int(1), Var("val")]))))
// [Typer] resolve: Get(Var("state"), Int(0))
// [Typer] resolve: Var("state")
// [Typer] resolve: Int(0)
// [Typer] resolve: If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var(None)), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=None)), Tuple([Int(1), Var("val")])))
// [Typer] resolve: Eq(Var("val"), Var("to"))
// [Typer] resolve: Var("val")
// [Typer] resolve: Var("to")
// [Typer] resolve: Tuple([Int(0), Int(0)])
// [Typer] resolve: Let(("_", Var(None)), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=None)), Tuple([Int(1), Var("val")]))
// [Typer] resolve: Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=None))
// [Typer] resolve: Var("state")
// [Typer] resolve: Int(0)
// [Typer] resolve: Prim(Var("val"), Int(1), Add, kind=None)
// [Typer] resolve: Var("val")
// [Typer] resolve: Int(1)
// [Typer] resolve: Tuple([Int(1), Var("val")])
// [Typer] resolve: Var("aux")
// [Typer] resolve: LetRec({tyvars: [], name: ("addx", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=None)}, Var("aux"))}, LetRec({tyvars: [], name: ("fold", Int), args: [("stream", (Unit) -> (Int, Int)), ("f", (Int, Int) -> Int), ("acc", Int)], body: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({tyvars: [], name: ("sum", Int), args: [("stream", (Unit) -> (Int, Int))], body: LetRec({tyvars: [], name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=None)}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({tyvars: [], name: ("gt", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({tyvars: [], name: ("le", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("range100", Var(None)), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var(None)), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var(None)), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var(None)), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var(None)), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var(None)), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var(None)), App(Var("sum"), [Var("under1200")]), Let(("_", Var(None)), App(Var("print_int"), [Var("sum")]), Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit)))))))))}, Unit))))))
// [Typer] resolve: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=None)}, Var("aux"))
// [Typer] resolve: Prim(Var("x"), Var("y"), Add, kind=None)
// [Typer] resolve: Var("x")
// [Typer] resolve: Var("y")
// [Typer] resolve: Var("aux")
// [Typer] resolve: LetRec({tyvars: [], name: ("fold", Int), args: [("stream", (Unit) -> (Int, Int)), ("f", (Int, Int) -> Int), ("acc", Int)], body: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({tyvars: [], name: ("sum", Int), args: [("stream", (Unit) -> (Int, Int))], body: LetRec({tyvars: [], name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=None)}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({tyvars: [], name: ("gt", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({tyvars: [], name: ("le", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("range100", Var(None)), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var(None)), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var(None)), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var(None)), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var(None)), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var(None)), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var(None)), App(Var("sum"), [Var("under1200")]), Let(("_", Var(None)), App(Var("print_int"), [Var("sum")]), Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit)))))))))}, Unit)))))
// [Typer] resolve: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))
// [Typer] resolve: App(Var("stream"), [Unit])
// [Typer] resolve: Unit
// [Typer] resolve: Var("stream")
// [Typer] resolve: If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])]))
// [Typer] resolve: Eq(Var("ok"), Int(0))
// [Typer] resolve: Var("ok")
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("acc")
// [Typer] resolve: App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])
// [Typer] resolve: Var("stream")
// [Typer] resolve: Var("f")
// [Typer] resolve: App(Var("f"), [Var("acc"), Var("val")])
// [Typer] resolve: Var("acc")
// [Typer] resolve: Var("val")
// [Typer] resolve: Var("f")
// [Typer] resolve: Var("fold")
// [Typer] resolve: LetRec({tyvars: [], name: ("sum", Int), args: [("stream", (Unit) -> (Int, Int))], body: LetRec({tyvars: [], name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=None)}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({tyvars: [], name: ("gt", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({tyvars: [], name: ("le", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("range100", Var(None)), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var(None)), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var(None)), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var(None)), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var(None)), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var(None)), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var(None)), App(Var("sum"), [Var("under1200")]), Let(("_", Var(None)), App(Var("print_int"), [Var("sum")]), Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit)))))))))}, Unit))))
// [Typer] resolve: LetRec({tyvars: [], name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=None)}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))
// [Typer] resolve: Prim(Var("x"), Var("y"), Add, kind=None)
// [Typer] resolve: Var("x")
// [Typer] resolve: Var("y")
// [Typer] resolve: App(Var("fold"), [Var("stream"), Var("add"), Int(0)])
// [Typer] resolve: Var("stream")
// [Typer] resolve: Var("add")
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("fold")
// [Typer] resolve: LetRec({tyvars: [], name: ("gt", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({tyvars: [], name: ("le", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("range100", Var(None)), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var(None)), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var(None)), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var(None)), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var(None)), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var(None)), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var(None)), App(Var("sum"), [Var("under1200")]), Let(("_", Var(None)), App(Var("print_int"), [Var("sum")]), Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit)))))))))}, Unit)))
// [Typer] resolve: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))
// [Typer] resolve: If(LE(Var("x"), Var("y")), Int(0), Int(1))
// [Typer] resolve: LE(Var("x"), Var("y"))
// [Typer] resolve: Var("x")
// [Typer] resolve: Var("y")
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("aux")
// [Typer] resolve: LetRec({tyvars: [], name: ("le", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("range100", Var(None)), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var(None)), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var(None)), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var(None)), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var(None)), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var(None)), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var(None)), App(Var("sum"), [Var("under1200")]), Let(("_", Var(None)), App(Var("print_int"), [Var("sum")]), Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit)))))))))}, Unit))
// [Typer] resolve: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))
// [Typer] resolve: If(LE(Var("y"), Var("x")), Int(0), Int(1))
// [Typer] resolve: LE(Var("y"), Var("x"))
// [Typer] resolve: Var("y")
// [Typer] resolve: Var("x")
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("aux")
// [Typer] resolve: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("range100", Var(None)), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var(None)), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var(None)), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var(None)), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var(None)), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var(None)), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var(None)), App(Var("sum"), [Var("under1200")]), Let(("_", Var(None)), App(Var("print_int"), [Var("sum")]), Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit)))))))))}, Unit)
// [Typer] resolve: Let(("range100", Var(None)), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var(None)), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var(None)), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var(None)), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var(None)), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var(None)), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var(None)), App(Var("sum"), [Var("under1200")]), Let(("_", Var(None)), App(Var("print_int"), [Var("sum")]), Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit)))))))))
// [Typer] resolve: App(Var("range"), [Int(0), Int(100)])
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(100)
// [Typer] resolve: Var("range")
// [Typer] resolve: Let(("range1000", Var(None)), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var(None)), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var(None)), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var(None)), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var(None)), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var(None)), App(Var("sum"), [Var("under1200")]), Let(("_", Var(None)), App(Var("print_int"), [Var("sum")]), Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit))))))))
// [Typer] resolve: App(Var("range"), [Int(0), Int(1000)])
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(1000)
// [Typer] resolve: Var("range")
// [Typer] resolve: Let(("catt", Var(None)), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var(None)), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var(None)), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var(None)), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var(None)), App(Var("sum"), [Var("under1200")]), Let(("_", Var(None)), App(Var("print_int"), [Var("sum")]), Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit)))))))
// [Typer] resolve: App(Var("concat"), [Var("range100"), Var("range1000")])
// [Typer] resolve: Var("range100")
// [Typer] resolve: Var("range1000")
// [Typer] resolve: Var("concat")
// [Typer] resolve: Let(("addone", Var(None)), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var(None)), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var(None)), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var(None)), App(Var("sum"), [Var("under1200")]), Let(("_", Var(None)), App(Var("print_int"), [Var("sum")]), Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit))))))
// [Typer] resolve: App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])])
// [Typer] resolve: Var("catt")
// [Typer] resolve: App(Var("addx"), [Int(1)])
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("addx")
// [Typer] resolve: Var("map")
// [Typer] resolve: Let(("over50", Var(None)), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var(None)), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var(None)), App(Var("sum"), [Var("under1200")]), Let(("_", Var(None)), App(Var("print_int"), [Var("sum")]), Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit)))))
// [Typer] resolve: App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])])
// [Typer] resolve: Var("addone")
// [Typer] resolve: App(Var("gt"), [Int(50)])
// [Typer] resolve: Int(50)
// [Typer] resolve: Var("gt")
// [Typer] resolve: Var("filter")
// [Typer] resolve: Let(("under1200", Var(None)), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var(None)), App(Var("sum"), [Var("under1200")]), Let(("_", Var(None)), App(Var("print_int"), [Var("sum")]), Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit))))
// [Typer] resolve: App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])])
// [Typer] resolve: Var("over50")
// [Typer] resolve: App(Var("le"), [Int(1200)])
// [Typer] resolve: Int(1200)
// [Typer] resolve: Var("le")
// [Typer] resolve: Var("filter")
// [Typer] resolve: Let(("sum", Var(None)), App(Var("sum"), [Var("under1200")]), Let(("_", Var(None)), App(Var("print_int"), [Var("sum")]), Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit)))
// [Typer] resolve: App(Var("sum"), [Var("under1200")])
// [Typer] resolve: Var("under1200")
// [Typer] resolve: Var("sum")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), [Var("sum")]), Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit))
// [Typer] resolve: App(Var("print_int"), [Var("sum")])
// [Typer] resolve: Var("sum")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit)
// [Typer] resolve: App(Var("print_char"), [Int(10)])
// [Typer] resolve: Int(10)
// [Typer] resolve: Var("print_char")
// [Typer] resolve: Unit
// [Typer] resolve: Unit
// [Typer] check: LetRec({tyvars: [], name: ("map", (Unit) -> (Int, Int)), args: [("stream", (Unit) -> (Int, Int)), ("f", (Int) -> Int)], body: LetRec({tyvars: [], name: ("aux", (Int, Int)), args: [("u", Var(None))], body: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Tuple([Int(1), App(Var("f"), [Var("val")])])))}, Var("aux"))}, LetRec({tyvars: [], name: ("filter", (Unit) -> (Int, Int)), args: [("stream", (Unit) -> (Int, Int)), ("f", (Int) -> Int)], body: LetRec({tyvars: [], name: ("aux", (Int, Int)), args: [("u", Var(None))], body: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Let(("r", Var(None)), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit])))))}, Var("aux"))}, LetRec({tyvars: [], name: ("concat", (Unit) -> (Int, Int)), args: [("stream1", (Unit) -> (Int, Int)), ("stream2", (Unit) -> (Int, Int))], body: LetRec({tyvars: [], name: ("aux", (Int, Int)), args: [("u", Var(None))], body: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream1"), [Unit]), If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")])))}, Var("aux"))}, LetRec({tyvars: [], name: ("range", (Unit) -> (Int, Int)), args: [("from", Int), ("to", Int)], body: Let(("state", Var(None)), Array(Int(1), Var("from")), LetRec({tyvars: [], name: ("aux", (Int, Int)), args: [("u", Var(None))], body: Let(("val", Var(None)), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var(None)), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=None)), Tuple([Int(1), Var("val")]))))}, Var("aux")))}, LetRec({tyvars: [], name: ("addx", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=None)}, Var("aux"))}, LetRec({tyvars: [], name: ("fold", Int), args: [("stream", (Unit) -> (Int, Int)), ("f", (Int, Int) -> Int), ("acc", Int)], body: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({tyvars: [], name: ("sum", Int), args: [("stream", (Unit) -> (Int, Int))], body: LetRec({tyvars: [], name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=None)}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({tyvars: [], name: ("gt", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({tyvars: [], name: ("le", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("range100", Var(None)), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var(None)), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var(None)), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var(None)), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var(None)), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var(None)), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var(None)), App(Var("sum"), [Var("under1200")]), Let(("_", Var(None)), App(Var("print_int"), [Var("sum")]), Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit)))))))))}, Unit)))))))))) against Unit
// [Typer] typevars: []
// [Typer] check: LetRec({tyvars: [], name: ("aux", (Int, Int)), args: [("u", Var(None))], body: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Tuple([Int(1), App(Var("f"), [Var("val")])])))}, Var("aux")) against (Unit) -> (Int, Int)
// [Typer] typevars: []
// [Typer] check: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Tuple([Int(1), App(Var("f"), [Var("val")])]))) against (Int, Int)
// [Typer] infer: App(Var("stream"), [Unit])
// [Typer] infer: Var("stream")
// [Typer] inst: TypeScheme(([], (Unit) -> (Int, Int)))
// [Typer] inst result: (Unit) -> (Int, Int)
// [Typer] check: Unit against Unit
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Tuple([Int(1), App(Var("f"), [Var("val")])])) against (Int, Int)
// [Typer] check: Eq(Var("ok"), Int(0)) against Bool
// [Typer] infer: Var("ok")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(0)
// [Typer] unify: Int and Int
// [Typer] check: Tuple([Int(0), Int(0)]) against (Int, Int)
// [Typer] check: Int(0) against Int
// [Typer] check: Int(0) against Int
// [Typer] check: Tuple([Int(1), App(Var("f"), [Var("val")])]) against (Int, Int)
// [Typer] check: Int(1) against Int
// [Typer] check: App(Var("f"), [Var("val")]) against Int
// [Typer] infer: Var("val")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] check: Var("f") against (Int) -> Int
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: Var("aux") against (Unit) -> (Int, Int)
// [Typer] inst: TypeScheme(([], (Var(None)) -> (Int, Int)))
// [Typer] inst result: (Var(None)) -> (Int, Int)
// [Typer] unify: (Var(None)) -> (Int, Int) and (Unit) -> (Int, Int)
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] unify: (Int, Int) and (Int, Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("filter", (Unit) -> (Int, Int)), args: [("stream", (Unit) -> (Int, Int)), ("f", (Int) -> Int)], body: LetRec({tyvars: [], name: ("aux", (Int, Int)), args: [("u", Var(None))], body: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Let(("r", Var(None)), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit])))))}, Var("aux"))}, LetRec({tyvars: [], name: ("concat", (Unit) -> (Int, Int)), args: [("stream1", (Unit) -> (Int, Int)), ("stream2", (Unit) -> (Int, Int))], body: LetRec({tyvars: [], name: ("aux", (Int, Int)), args: [("u", Var(None))], body: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream1"), [Unit]), If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")])))}, Var("aux"))}, LetRec({tyvars: [], name: ("range", (Unit) -> (Int, Int)), args: [("from", Int), ("to", Int)], body: Let(("state", Var(None)), Array(Int(1), Var("from")), LetRec({tyvars: [], name: ("aux", (Int, Int)), args: [("u", Var(None))], body: Let(("val", Var(None)), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var(None)), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=None)), Tuple([Int(1), Var("val")]))))}, Var("aux")))}, LetRec({tyvars: [], name: ("addx", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=None)}, Var("aux"))}, LetRec({tyvars: [], name: ("fold", Int), args: [("stream", (Unit) -> (Int, Int)), ("f", (Int, Int) -> Int), ("acc", Int)], body: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({tyvars: [], name: ("sum", Int), args: [("stream", (Unit) -> (Int, Int))], body: LetRec({tyvars: [], name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=None)}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({tyvars: [], name: ("gt", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({tyvars: [], name: ("le", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("range100", Var(None)), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var(None)), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var(None)), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var(None)), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var(None)), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var(None)), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var(None)), App(Var("sum"), [Var("under1200")]), Let(("_", Var(None)), App(Var("print_int"), [Var("sum")]), Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit)))))))))}, Unit))))))))) against Unit
// [Typer] typevars: []
// [Typer] check: LetRec({tyvars: [], name: ("aux", (Int, Int)), args: [("u", Var(None))], body: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Let(("r", Var(None)), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit])))))}, Var("aux")) against (Unit) -> (Int, Int)
// [Typer] typevars: []
// [Typer] check: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Let(("r", Var(None)), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit]))))) against (Int, Int)
// [Typer] infer: App(Var("stream"), [Unit])
// [Typer] infer: Var("stream")
// [Typer] inst: TypeScheme(([], (Unit) -> (Int, Int)))
// [Typer] inst result: (Unit) -> (Int, Int)
// [Typer] check: Unit against Unit
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Let(("r", Var(None)), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit])))) against (Int, Int)
// [Typer] check: Eq(Var("ok"), Int(0)) against Bool
// [Typer] infer: Var("ok")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(0)
// [Typer] unify: Int and Int
// [Typer] check: Tuple([Int(0), Int(0)]) against (Int, Int)
// [Typer] check: Int(0) against Int
// [Typer] check: Int(0) against Int
// [Typer] check: Let(("r", Var(None)), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit]))) against (Int, Int)
// [Typer] infer: App(Var("f"), [Var("val")])
// [Typer] infer: Var("f")
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] check: Var("val") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit])) against (Int, Int)
// [Typer] check: Eq(Var("r"), Int(0)) against Bool
// [Typer] infer: Var("r")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(0)
// [Typer] unify: Int and Int
// [Typer] check: Tuple([Int(1), Var("val")]) against (Int, Int)
// [Typer] check: Int(1) against Int
// [Typer] check: Var("val") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("aux"), [Unit]) against (Int, Int)
// [Typer] infer: Unit
// [Typer] check: Var("aux") against (Unit) -> (Int, Int)
// [Typer] inst: TypeScheme(([], (Var(None)) -> (Int, Int)))
// [Typer] inst result: (Var(None)) -> (Int, Int)
// [Typer] unify: (Var(None)) -> (Int, Int) and (Unit) -> (Int, Int)
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] unify: (Int, Int) and (Int, Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: Var("aux") against (Unit) -> (Int, Int)
// [Typer] inst: TypeScheme(([], (Unit) -> (Int, Int)))
// [Typer] inst result: (Unit) -> (Int, Int)
// [Typer] unify: (Unit) -> (Int, Int) and (Unit) -> (Int, Int)
// [Typer] unify: Unit and Unit
// [Typer] unify: (Int, Int) and (Int, Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("concat", (Unit) -> (Int, Int)), args: [("stream1", (Unit) -> (Int, Int)), ("stream2", (Unit) -> (Int, Int))], body: LetRec({tyvars: [], name: ("aux", (Int, Int)), args: [("u", Var(None))], body: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream1"), [Unit]), If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")])))}, Var("aux"))}, LetRec({tyvars: [], name: ("range", (Unit) -> (Int, Int)), args: [("from", Int), ("to", Int)], body: Let(("state", Var(None)), Array(Int(1), Var("from")), LetRec({tyvars: [], name: ("aux", (Int, Int)), args: [("u", Var(None))], body: Let(("val", Var(None)), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var(None)), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=None)), Tuple([Int(1), Var("val")]))))}, Var("aux")))}, LetRec({tyvars: [], name: ("addx", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=None)}, Var("aux"))}, LetRec({tyvars: [], name: ("fold", Int), args: [("stream", (Unit) -> (Int, Int)), ("f", (Int, Int) -> Int), ("acc", Int)], body: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({tyvars: [], name: ("sum", Int), args: [("stream", (Unit) -> (Int, Int))], body: LetRec({tyvars: [], name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=None)}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({tyvars: [], name: ("gt", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({tyvars: [], name: ("le", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("range100", Var(None)), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var(None)), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var(None)), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var(None)), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var(None)), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var(None)), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var(None)), App(Var("sum"), [Var("under1200")]), Let(("_", Var(None)), App(Var("print_int"), [Var("sum")]), Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit)))))))))}, Unit)))))))) against Unit
// [Typer] typevars: []
// [Typer] check: LetRec({tyvars: [], name: ("aux", (Int, Int)), args: [("u", Var(None))], body: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream1"), [Unit]), If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")])))}, Var("aux")) against (Unit) -> (Int, Int)
// [Typer] typevars: []
// [Typer] check: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream1"), [Unit]), If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")]))) against (Int, Int)
// [Typer] infer: App(Var("stream1"), [Unit])
// [Typer] infer: Var("stream1")
// [Typer] inst: TypeScheme(([], (Unit) -> (Int, Int)))
// [Typer] inst result: (Unit) -> (Int, Int)
// [Typer] check: Unit against Unit
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")])) against (Int, Int)
// [Typer] check: Eq(Var("ok"), Int(0)) against Bool
// [Typer] infer: Var("ok")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(0)
// [Typer] unify: Int and Int
// [Typer] check: App(Var("stream2"), [Unit]) against (Int, Int)
// [Typer] infer: Unit
// [Typer] check: Var("stream2") against (Unit) -> (Int, Int)
// [Typer] inst: TypeScheme(([], (Unit) -> (Int, Int)))
// [Typer] inst result: (Unit) -> (Int, Int)
// [Typer] unify: (Unit) -> (Int, Int) and (Unit) -> (Int, Int)
// [Typer] unify: Unit and Unit
// [Typer] unify: (Int, Int) and (Int, Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: Tuple([Int(1), Var("val")]) against (Int, Int)
// [Typer] check: Int(1) against Int
// [Typer] check: Var("val") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("aux") against (Unit) -> (Int, Int)
// [Typer] inst: TypeScheme(([], (Var(None)) -> (Int, Int)))
// [Typer] inst result: (Var(None)) -> (Int, Int)
// [Typer] unify: (Var(None)) -> (Int, Int) and (Unit) -> (Int, Int)
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] unify: (Int, Int) and (Int, Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("range", (Unit) -> (Int, Int)), args: [("from", Int), ("to", Int)], body: Let(("state", Var(None)), Array(Int(1), Var("from")), LetRec({tyvars: [], name: ("aux", (Int, Int)), args: [("u", Var(None))], body: Let(("val", Var(None)), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var(None)), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=None)), Tuple([Int(1), Var("val")]))))}, Var("aux")))}, LetRec({tyvars: [], name: ("addx", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=None)}, Var("aux"))}, LetRec({tyvars: [], name: ("fold", Int), args: [("stream", (Unit) -> (Int, Int)), ("f", (Int, Int) -> Int), ("acc", Int)], body: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({tyvars: [], name: ("sum", Int), args: [("stream", (Unit) -> (Int, Int))], body: LetRec({tyvars: [], name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=None)}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({tyvars: [], name: ("gt", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({tyvars: [], name: ("le", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("range100", Var(None)), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var(None)), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var(None)), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var(None)), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var(None)), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var(None)), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var(None)), App(Var("sum"), [Var("under1200")]), Let(("_", Var(None)), App(Var("print_int"), [Var("sum")]), Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit)))))))))}, Unit))))))) against Unit
// [Typer] typevars: []
// [Typer] check: Let(("state", Var(None)), Array(Int(1), Var("from")), LetRec({tyvars: [], name: ("aux", (Int, Int)), args: [("u", Var(None))], body: Let(("val", Var(None)), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var(None)), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=None)), Tuple([Int(1), Var("val")]))))}, Var("aux"))) against (Unit) -> (Int, Int)
// [Typer] infer: Array(Int(1), Var("from"))
// [Typer] infer: Var("from")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Array[Int]
// [Typer] union: Var(None) and Array[Int]
// [Typer] check: LetRec({tyvars: [], name: ("aux", (Int, Int)), args: [("u", Var(None))], body: Let(("val", Var(None)), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var(None)), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=None)), Tuple([Int(1), Var("val")]))))}, Var("aux")) against (Unit) -> (Int, Int)
// [Typer] typevars: []
// [Typer] check: Let(("val", Var(None)), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var(None)), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=None)), Tuple([Int(1), Var("val")])))) against (Int, Int)
// [Typer] infer: Get(Var("state"), Int(0))
// [Typer] infer: Var("state")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var(None)), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=None)), Tuple([Int(1), Var("val")]))) against (Int, Int)
// [Typer] check: Eq(Var("val"), Var("to")) against Bool
// [Typer] infer: Var("val")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("to")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Tuple([Int(0), Int(0)]) against (Int, Int)
// [Typer] check: Int(0) against Int
// [Typer] check: Int(0) against Int
// [Typer] check: Let(("_", Var(None)), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=None)), Tuple([Int(1), Var("val")])) against (Int, Int)
// [Typer] infer: Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=None))
// [Typer] infer: Prim(Var("val"), Int(1), Add, kind=None)
// [Typer] infer: Var("val")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("state") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Tuple([Int(1), Var("val")]) against (Int, Int)
// [Typer] check: Int(1) against Int
// [Typer] check: Var("val") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("aux") against (Unit) -> (Int, Int)
// [Typer] inst: TypeScheme(([], (Var(None)) -> (Int, Int)))
// [Typer] inst result: (Var(None)) -> (Int, Int)
// [Typer] unify: (Var(None)) -> (Int, Int) and (Unit) -> (Int, Int)
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] unify: (Int, Int) and (Int, Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("addx", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=None)}, Var("aux"))}, LetRec({tyvars: [], name: ("fold", Int), args: [("stream", (Unit) -> (Int, Int)), ("f", (Int, Int) -> Int), ("acc", Int)], body: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({tyvars: [], name: ("sum", Int), args: [("stream", (Unit) -> (Int, Int))], body: LetRec({tyvars: [], name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=None)}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({tyvars: [], name: ("gt", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({tyvars: [], name: ("le", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("range100", Var(None)), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var(None)), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var(None)), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var(None)), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var(None)), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var(None)), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var(None)), App(Var("sum"), [Var("under1200")]), Let(("_", Var(None)), App(Var("print_int"), [Var("sum")]), Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit)))))))))}, Unit)))))) against Unit
// [Typer] typevars: []
// [Typer] check: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=None)}, Var("aux")) against (Int) -> Int
// [Typer] typevars: []
// [Typer] check: Prim(Var("x"), Var("y"), Add, kind=None) against Int
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("y") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("aux") against (Int) -> Int
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("fold", Int), args: [("stream", (Unit) -> (Int, Int)), ("f", (Int, Int) -> Int), ("acc", Int)], body: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({tyvars: [], name: ("sum", Int), args: [("stream", (Unit) -> (Int, Int))], body: LetRec({tyvars: [], name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=None)}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({tyvars: [], name: ("gt", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({tyvars: [], name: ("le", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("range100", Var(None)), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var(None)), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var(None)), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var(None)), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var(None)), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var(None)), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var(None)), App(Var("sum"), [Var("under1200")]), Let(("_", Var(None)), App(Var("print_int"), [Var("sum")]), Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit)))))))))}, Unit))))) against Unit
// [Typer] typevars: []
// [Typer] check: LetTuple([("ok", Var(None)), ("val", Var(None))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])]))) against Int
// [Typer] infer: App(Var("stream"), [Unit])
// [Typer] infer: Var("stream")
// [Typer] inst: TypeScheme(([], (Unit) -> (Int, Int)))
// [Typer] inst result: (Unit) -> (Int, Int)
// [Typer] check: Unit against Unit
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])) against Int
// [Typer] check: Eq(Var("ok"), Int(0)) against Bool
// [Typer] infer: Var("ok")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(0)
// [Typer] unify: Int and Int
// [Typer] check: Var("acc") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])]) against Int
// [Typer] infer: Var("stream")
// [Typer] inst: TypeScheme(([], (Unit) -> (Int, Int)))
// [Typer] inst result: (Unit) -> (Int, Int)
// [Typer] infer: Var("f")
// [Typer] inst: TypeScheme(([], (Int, Int) -> Int))
// [Typer] inst result: (Int, Int) -> Int
// [Typer] infer: App(Var("f"), [Var("acc"), Var("val")])
// [Typer] infer: Var("f")
// [Typer] inst: TypeScheme(([], (Int, Int) -> Int))
// [Typer] inst result: (Int, Int) -> Int
// [Typer] check: Var("acc") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("val") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("fold") against ((Unit) -> (Int, Int), (Int, Int) -> Int, Int) -> Int
// [Typer] inst: TypeScheme(([], ((Unit) -> (Int, Int), (Int, Int) -> Int, Int) -> Int))
// [Typer] inst result: ((Unit) -> (Int, Int), (Int, Int) -> Int, Int) -> Int
// [Typer] unify: ((Unit) -> (Int, Int), (Int, Int) -> Int, Int) -> Int and ((Unit) -> (Int, Int), (Int, Int) -> Int, Int) -> Int
// [Typer] unify: (Unit) -> (Int, Int) and (Unit) -> (Int, Int)
// [Typer] unify: Unit and Unit
// [Typer] unify: (Int, Int) and (Int, Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: (Int, Int) -> Int and (Int, Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("sum", Int), args: [("stream", (Unit) -> (Int, Int))], body: LetRec({tyvars: [], name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=None)}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({tyvars: [], name: ("gt", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({tyvars: [], name: ("le", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("range100", Var(None)), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var(None)), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var(None)), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var(None)), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var(None)), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var(None)), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var(None)), App(Var("sum"), [Var("under1200")]), Let(("_", Var(None)), App(Var("print_int"), [Var("sum")]), Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit)))))))))}, Unit)))) against Unit
// [Typer] typevars: []
// [Typer] check: LetRec({tyvars: [], name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=None)}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)])) against Int
// [Typer] typevars: []
// [Typer] check: Prim(Var("x"), Var("y"), Add, kind=None) against Int
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("y") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("fold"), [Var("stream"), Var("add"), Int(0)]) against Int
// [Typer] infer: Var("stream")
// [Typer] inst: TypeScheme(([], (Unit) -> (Int, Int)))
// [Typer] inst result: (Unit) -> (Int, Int)
// [Typer] infer: Var("add")
// [Typer] inst: TypeScheme(([], (Int, Int) -> Int))
// [Typer] inst result: (Int, Int) -> Int
// [Typer] infer: Int(0)
// [Typer] check: Var("fold") against ((Unit) -> (Int, Int), (Int, Int) -> Int, Int) -> Int
// [Typer] inst: TypeScheme(([], ((Unit) -> (Int, Int), (Int, Int) -> Int, Int) -> Int))
// [Typer] inst result: ((Unit) -> (Int, Int), (Int, Int) -> Int, Int) -> Int
// [Typer] unify: ((Unit) -> (Int, Int), (Int, Int) -> Int, Int) -> Int and ((Unit) -> (Int, Int), (Int, Int) -> Int, Int) -> Int
// [Typer] unify: (Unit) -> (Int, Int) and (Unit) -> (Int, Int)
// [Typer] unify: Unit and Unit
// [Typer] unify: (Int, Int) and (Int, Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: (Int, Int) -> Int and (Int, Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("gt", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({tyvars: [], name: ("le", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("range100", Var(None)), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var(None)), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var(None)), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var(None)), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var(None)), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var(None)), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var(None)), App(Var("sum"), [Var("under1200")]), Let(("_", Var(None)), App(Var("print_int"), [Var("sum")]), Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit)))))))))}, Unit))) against Unit
// [Typer] typevars: []
// [Typer] check: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux")) against (Int) -> Int
// [Typer] typevars: []
// [Typer] check: If(LE(Var("x"), Var("y")), Int(0), Int(1)) against Int
// [Typer] check: LE(Var("x"), Var("y")) against Bool
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("y")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] check: Int(1) against Int
// [Typer] check: Var("aux") against (Int) -> Int
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("le", (Int) -> Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("range100", Var(None)), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var(None)), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var(None)), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var(None)), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var(None)), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var(None)), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var(None)), App(Var("sum"), [Var("under1200")]), Let(("_", Var(None)), App(Var("print_int"), [Var("sum")]), Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit)))))))))}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: LetRec({tyvars: [], name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux")) against (Int) -> Int
// [Typer] typevars: []
// [Typer] check: If(LE(Var("y"), Var("x")), Int(0), Int(1)) against Int
// [Typer] check: LE(Var("y"), Var("x")) against Bool
// [Typer] infer: Var("y")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] check: Int(1) against Int
// [Typer] check: Var("aux") against (Int) -> Int
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("range100", Var(None)), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var(None)), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var(None)), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var(None)), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var(None)), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var(None)), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var(None)), App(Var("sum"), [Var("under1200")]), Let(("_", Var(None)), App(Var("print_int"), [Var("sum")]), Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit)))))))))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("range100", Var(None)), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var(None)), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var(None)), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var(None)), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var(None)), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var(None)), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var(None)), App(Var("sum"), [Var("under1200")]), Let(("_", Var(None)), App(Var("print_int"), [Var("sum")]), Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit)))))))))
// [Typer] infer: App(Var("range"), [Int(0), Int(100)])
// [Typer] infer: Var("range")
// [Typer] inst: TypeScheme(([], (Int, Int) -> (Unit) -> (Int, Int)))
// [Typer] inst result: (Int, Int) -> (Unit) -> (Int, Int)
// [Typer] check: Int(0) against Int
// [Typer] check: Int(100) against Int
// [Typer] unify: Var(None) and (Unit) -> (Int, Int)
// [Typer] union: Var(None) and (Unit) -> (Int, Int)
// [Typer] infer: Let(("range1000", Var(None)), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var(None)), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var(None)), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var(None)), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var(None)), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var(None)), App(Var("sum"), [Var("under1200")]), Let(("_", Var(None)), App(Var("print_int"), [Var("sum")]), Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit))))))))
// [Typer] infer: App(Var("range"), [Int(0), Int(1000)])
// [Typer] infer: Var("range")
// [Typer] inst: TypeScheme(([], (Int, Int) -> (Unit) -> (Int, Int)))
// [Typer] inst result: (Int, Int) -> (Unit) -> (Int, Int)
// [Typer] check: Int(0) against Int
// [Typer] check: Int(1000) against Int
// [Typer] unify: Var(None) and (Unit) -> (Int, Int)
// [Typer] union: Var(None) and (Unit) -> (Int, Int)
// [Typer] infer: Let(("catt", Var(None)), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var(None)), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var(None)), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var(None)), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var(None)), App(Var("sum"), [Var("under1200")]), Let(("_", Var(None)), App(Var("print_int"), [Var("sum")]), Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit)))))))
// [Typer] infer: App(Var("concat"), [Var("range100"), Var("range1000")])
// [Typer] infer: Var("concat")
// [Typer] inst: TypeScheme(([], ((Unit) -> (Int, Int), (Unit) -> (Int, Int)) -> (Unit) -> (Int, Int)))
// [Typer] inst result: ((Unit) -> (Int, Int), (Unit) -> (Int, Int)) -> (Unit) -> (Int, Int)
// [Typer] check: Var("range100") against (Unit) -> (Int, Int)
// [Typer] inst: TypeScheme(([], (Unit) -> (Int, Int)))
// [Typer] inst result: (Unit) -> (Int, Int)
// [Typer] unify: (Unit) -> (Int, Int) and (Unit) -> (Int, Int)
// [Typer] unify: Unit and Unit
// [Typer] unify: (Int, Int) and (Int, Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: Var("range1000") against (Unit) -> (Int, Int)
// [Typer] inst: TypeScheme(([], (Unit) -> (Int, Int)))
// [Typer] inst result: (Unit) -> (Int, Int)
// [Typer] unify: (Unit) -> (Int, Int) and (Unit) -> (Int, Int)
// [Typer] unify: Unit and Unit
// [Typer] unify: (Int, Int) and (Int, Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and (Unit) -> (Int, Int)
// [Typer] union: Var(None) and (Unit) -> (Int, Int)
// [Typer] infer: Let(("addone", Var(None)), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var(None)), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var(None)), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var(None)), App(Var("sum"), [Var("under1200")]), Let(("_", Var(None)), App(Var("print_int"), [Var("sum")]), Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit))))))
// [Typer] infer: App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])])
// [Typer] infer: Var("map")
// [Typer] inst: TypeScheme(([], ((Unit) -> (Int, Int), (Int) -> Int) -> (Unit) -> (Int, Int)))
// [Typer] inst result: ((Unit) -> (Int, Int), (Int) -> Int) -> (Unit) -> (Int, Int)
// [Typer] check: Var("catt") against (Unit) -> (Int, Int)
// [Typer] inst: TypeScheme(([], (Unit) -> (Int, Int)))
// [Typer] inst result: (Unit) -> (Int, Int)
// [Typer] unify: (Unit) -> (Int, Int) and (Unit) -> (Int, Int)
// [Typer] unify: Unit and Unit
// [Typer] unify: (Int, Int) and (Int, Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("addx"), [Int(1)]) against (Int) -> Int
// [Typer] infer: Int(1)
// [Typer] check: Var("addx") against (Int) -> (Int) -> Int
// [Typer] inst: TypeScheme(([], (Int) -> (Int) -> Int))
// [Typer] inst result: (Int) -> (Int) -> Int
// [Typer] unify: (Int) -> (Int) -> Int and (Int) -> (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and (Unit) -> (Int, Int)
// [Typer] union: Var(None) and (Unit) -> (Int, Int)
// [Typer] infer: Let(("over50", Var(None)), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var(None)), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var(None)), App(Var("sum"), [Var("under1200")]), Let(("_", Var(None)), App(Var("print_int"), [Var("sum")]), Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit)))))
// [Typer] infer: App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])])
// [Typer] infer: Var("filter")
// [Typer] inst: TypeScheme(([], ((Unit) -> (Int, Int), (Int) -> Int) -> (Unit) -> (Int, Int)))
// [Typer] inst result: ((Unit) -> (Int, Int), (Int) -> Int) -> (Unit) -> (Int, Int)
// [Typer] check: Var("addone") against (Unit) -> (Int, Int)
// [Typer] inst: TypeScheme(([], (Unit) -> (Int, Int)))
// [Typer] inst result: (Unit) -> (Int, Int)
// [Typer] unify: (Unit) -> (Int, Int) and (Unit) -> (Int, Int)
// [Typer] unify: Unit and Unit
// [Typer] unify: (Int, Int) and (Int, Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("gt"), [Int(50)]) against (Int) -> Int
// [Typer] infer: Int(50)
// [Typer] check: Var("gt") against (Int) -> (Int) -> Int
// [Typer] inst: TypeScheme(([], (Int) -> (Int) -> Int))
// [Typer] inst result: (Int) -> (Int) -> Int
// [Typer] unify: (Int) -> (Int) -> Int and (Int) -> (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and (Unit) -> (Int, Int)
// [Typer] union: Var(None) and (Unit) -> (Int, Int)
// [Typer] infer: Let(("under1200", Var(None)), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var(None)), App(Var("sum"), [Var("under1200")]), Let(("_", Var(None)), App(Var("print_int"), [Var("sum")]), Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit))))
// [Typer] infer: App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])])
// [Typer] infer: Var("filter")
// [Typer] inst: TypeScheme(([], ((Unit) -> (Int, Int), (Int) -> Int) -> (Unit) -> (Int, Int)))
// [Typer] inst result: ((Unit) -> (Int, Int), (Int) -> Int) -> (Unit) -> (Int, Int)
// [Typer] check: Var("over50") against (Unit) -> (Int, Int)
// [Typer] inst: TypeScheme(([], (Unit) -> (Int, Int)))
// [Typer] inst result: (Unit) -> (Int, Int)
// [Typer] unify: (Unit) -> (Int, Int) and (Unit) -> (Int, Int)
// [Typer] unify: Unit and Unit
// [Typer] unify: (Int, Int) and (Int, Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("le"), [Int(1200)]) against (Int) -> Int
// [Typer] infer: Int(1200)
// [Typer] check: Var("le") against (Int) -> (Int) -> Int
// [Typer] inst: TypeScheme(([], (Int) -> (Int) -> Int))
// [Typer] inst result: (Int) -> (Int) -> Int
// [Typer] unify: (Int) -> (Int) -> Int and (Int) -> (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and (Unit) -> (Int, Int)
// [Typer] union: Var(None) and (Unit) -> (Int, Int)
// [Typer] infer: Let(("sum", Var(None)), App(Var("sum"), [Var("under1200")]), Let(("_", Var(None)), App(Var("print_int"), [Var("sum")]), Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit)))
// [Typer] infer: App(Var("sum"), [Var("under1200")])
// [Typer] infer: Var("sum")
// [Typer] inst: TypeScheme(([], ((Unit) -> (Int, Int)) -> Int))
// [Typer] inst result: ((Unit) -> (Int, Int)) -> Int
// [Typer] check: Var("under1200") against (Unit) -> (Int, Int)
// [Typer] inst: TypeScheme(([], (Unit) -> (Int, Int)))
// [Typer] inst result: (Unit) -> (Int, Int)
// [Typer] unify: (Unit) -> (Int, Int) and (Unit) -> (Int, Int)
// [Typer] unify: Unit and Unit
// [Typer] unify: (Int, Int) and (Int, Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), [Var("sum")]), Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit))
// [Typer] infer: App(Var("print_int"), [Var("sum")])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("sum") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_char"), [Int(10)]), Unit)
// [Typer] infer: App(Var("print_char"), [Int(10)])
// [Typer] infer: Var("print_char")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Int(10) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Unit
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [KnfOpt] freq: {map.1: Once, aux.6: AsClosure, filter.20: Many(2), aux.25: AsClosure, concat.41: Once, aux.46: AsClosure, range.58: Many(2), aux.65: AsClosure, addx.78: Once, aux.81: AsClosure, fold.84: Many(2), sum.99: Once, add.102: AsClosure, gt.108: Once, aux.111: AsClosure, le.114: Once, aux.117: AsClosure, main.120: Once}
// [KnfOpt] Fn like 2
// [KnfOpt] Inline threshold 2 12
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 2
// [KnfOpt] Inline threshold 2 12
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 1
// [KnfOpt] Inline threshold 2 27
// [KnfOpt] Inline decision accepted
// [KnfOpt] Knf inline Some(range)
// [KnfOpt] Fn like 1
// [KnfOpt] Inline threshold 2 27
// [KnfOpt] Inline decision accepted
// [KnfOpt] Knf inline Some(range)
// [KnfOpt] Knf inline Some(concat)
// [KnfOpt] Knf inline Some(addx)
// [KnfOpt] Knf inline Some(map)
// [KnfOpt] Knf inline Some(gt)
// [KnfOpt] Fn like 3
// [KnfOpt] Inline threshold 2 26
// [KnfOpt] Inline decision accepted
// [KnfOpt] Knf inline Some(filter)
// [KnfOpt] Knf inline Some(le)
// [KnfOpt] Fn like 3
// [KnfOpt] Inline threshold 2 26
// [KnfOpt] Inline decision accepted
// [KnfOpt] Knf inline Some(filter)
// [KnfOpt] Knf inline Some(sum)
// [KnfOpt] freq: {fold.84: Many(2), main.120: Once, aux.145: Once, aux.158: Once, aux.169: Once, aux.178: Once, aux.180: Once, aux.191: Once, aux.193: Many(2), aux.206: Once, aux.208: AsClosure, add.221: AsClosure}
// [KnfOpt] Fn like 2
// [KnfOpt] Inline threshold 2 12
// [KnfOpt] Inline decision rejected
// [KnfOpt] Knf inline Some(aux)
// [KnfOpt] Knf inline Some(aux)
// [KnfOpt] Knf inline Some(aux)
// [KnfOpt] Knf inline Some(aux)
// [KnfOpt] Knf inline Some(aux)
// [KnfOpt] Knf inline Some(aux)
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 24
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 96
// [KnfOpt] Inline decision rejected
// [KnfOpt] Knf inline Some(aux)
// [KnfOpt] Fn like 2
// [KnfOpt] Inline threshold 2 12
// [KnfOpt] Inline decision rejected
// [KnfOpt] freq: {fold.84: Many(2), main.120: Once, aux.193: Many(2), aux.208: AsClosure, add.221: AsClosure}
// [KnfOpt] Fn like 2
// [KnfOpt] Inline threshold 2 12
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 96
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 96
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 2
// [KnfOpt] Inline threshold 2 12
// [KnfOpt] Inline decision rejected
// [KnfOpt] Numbers of let rec: 5 7 2
// [KnfOpt] Give up lambda lifting because of too many let rec produced
// [KnfOpt] Tuple freq: {_91: MayEscape, _92: Destructed, acc.90: MayEscape, val.96: MayEscape, stream.86: MayEscape, f.88: MayEscape, _98: MayEscape, _143: MayEscape, _121: MayEscape, _156: MayEscape, _124: MayEscape, _274: MayEscape, _275: MayEscape, _278: MayEscape, _280: MayEscape, val.273: MayEscape, _271: Destructed, _287: MayEscape, _288: MayEscape, _291: MayEscape, _293: MayEscape, val.286: MayEscape, _294: MayEscape, val.282: MayEscape, _269: Destructed, _298: MayEscape, _299: MayEscape, _300: MayEscape, _301: MayEscape, _196: Destructed, _200: MayEscape, _201: MayEscape, _204: MayEscape, val.198: MayEscape, _205: MayEscape, _210: MayEscape, _211: Destructed, _215: MayEscape, _216: MayEscape, _219: MayEscape, val.213: MayEscape, _220: MayEscape, aux.208: MayEscape, add.221: MayEscape, _224: MayEscape, sum.137: MayEscape, _140: MayEscape}
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %8: Apply(ty=Tuple(fields=[Int32, Int32]), f=Self(fref=f6), args=[Unit])
// [CoreOpt] eliminated tail rec call %29: Apply(ty=Tuple(fields=[Int32, Int32]), f=Self(fref=f4), args=[Unit])
// [CoreOpt] eliminated tail rec call %5: Call(ty=Int32, f=f0, args=[FnParam(fref=f0, fpref=$f.0), FnParam(fref=f0, fpref=$f.1), Insn(iref=%4)])
// [CoreOpt] Call frequnce: FnCallFreq({f6: MaybeInClosure, f4: MaybeInClosure, f1: Once, f10: Once, f8: MaybeInClosure, f0: Once})
// [CoreOpt] allow_inline: false %5 fold.84 false true true false true
// [CoreOpt] allow_inline: false %0 main.120 false true true false true
// [CoreOpt] allow_inline: false %5 fold.84 false true true false true
// [CoreOpt] allow_inline: false %0 main.120 false true true false true
// [CoreOpt] allow_inline: false %5 fold.84 false true true false true
// [CoreOpt] allow_inline: false %0 main.120 false true true false true
// [CoreOpt] allow_inline: false %5 fold.84 false true true false true
// [CoreOpt] allow_inline: false %0 main.120 false true true false true
// [CoreOpt] allow_inline: false %5 fold.84 false true true false true
// [CoreOpt] allow_inline: false %0 main.120 false true true false true
// [CoreOpt] allow_inline: false %5 fold.84 false true true false true
// [CoreOpt] allow_inline: false %0 main.120 false true true false true
