// [Asm] pre_assigned_registers: FreeVar(fvref=^1) -> v3, FnParam(fref=f45, fpref=$f.0) -> v2, Self(fref=f45) -> v0, Insn(iref=%0) -> v4
// [Asm] defs: []
// [Asm] live_set: [a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux111l8c0_45"];
// [Asm]   r0 [label="v0 ← a1", color=green];
// [Asm]   r3 [label="v3 ← a1", color=green];
// [Asm]   r9 [label="t4", color=blue];
// [Asm]   r6 [label="t1", color=blue];
// [Asm]   r13 [label="a5", color=blue];
// [Asm]   r4 [label="a1", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a3", color=blue];
// [Asm]   r7 [label="t2", color=blue];
// [Asm]   r10 [label="a2", color=blue];
// [Asm]   r14 [label="a6", color=blue];
// [Asm]   r8 [label="t3", color=blue];
// [Asm]   r5 [label="t0", color=blue];
// [Asm]   r15 [label="a7", color=blue];
// [Asm]   r2 [label="v2 ← a0", color=green];
// [Asm]   r16 [label="v4 ← a0", color=green];
// [Asm]   r12 [label="a4", color=blue];
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r2 -- r3;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:v0-> 1:a0-> 2:v2-> 3:v3-> 4:a1-> 5:t0-> 6:t1-> 7:t2-> 8:t3-> 9:t4-> 10:a2-> 11:a3-> 12:a4-> 13:a5-> 14:a6-> 15:a7-> 16:v4"
// [Asm]   comment = "v0<-a1;v3<-a1;v2<-a0;v4<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux111l8c0_45"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   lw v3, 8(v0) ->   lw a1, 8(a1)
// [Asm] subst   call aux111l8_13 ->   call aux111l8_13
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f8) -> v0, FnParam(fref=f8, fpref=$f.1) -> v3, FnParam(fref=f8, fpref=$f.0) -> v2, Insn(iref=%0) -> v4
// [Asm] defs: []
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux81l5_8"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a0", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r3 [label="v4 ← a0", color=green];
// [Asm]   r2 [label="v3 ← a1", color=green];
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:v2-> 1:a1-> 2:v3-> 3:v4-> 4:a0"
// [Asm]   comment = "v2<-a0;v4<-a0;v3<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux81l5_8"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   add v4, v3, v2 ->   add a0, a1, a0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Mem(fref=f9, mref=m0) -> v3, Self(fref=f9) -> v0, FnParam(fref=f9, fpref=$f.0) -> v2, Insn(iref=%0) -> v4
// [Asm] defs: []
// [Asm] live_set: [s11, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: s11 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v7, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of addx78l4_9"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r5 [label="a0", color=blue];
// [Asm]   r4 [label="v7 ← a2", color=green];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r3 [label="v3 ← a1", color=green];
// [Asm]   r2 [label="v5 ← a1", color=green];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:v2-> 1:s11-> 2:v5-> 3:v3-> 4:v7-> 5:a0"
// [Asm]   comment = "v2<-a0;v7<-a2;v3<-a1;v5<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of addx78l4_9"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v5, s11, -16 ->   addi a1, s11, -16
// [Asm] subst   andi v3, v5, -8 ->   andi a1, a1, -8
// [Asm] subst   mv s11, v3 ->   mv s11, a1
// [Asm] subst   la v7, aux81l5c0_36 ->   la a2, aux81l5c0_36
// [Asm] subst   sd v7, 0(v3) ->   sd a2, 0(a1)
// [Asm] subst   sd v2, 8(v3) ->   sd a0, 8(a1)
// [Asm] subst   mv a0, v3 ->   mv a0, a1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, Self(fref=f28) -> v0, FnParam(fref=f28, fpref=$f.0) -> v2, Insn(iref=%0) -> v5
// [Asm] defs: []
// [Asm] live_set: [a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v0, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux46l3c0_28"];
// [Asm]   r0 [label="v0 ← a1", color=green];
// [Asm]   r3 [label="v3 ← a2", color=green];
// [Asm]   r9 [label="t2", color=blue];
// [Asm]   r6 [label="a2", color=blue];
// [Asm]   r13 [label="a4", color=blue];
// [Asm]   r4 [label="v4 ← a3", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="t4", color=blue];
// [Asm]   r7 [label="t0", color=blue];
// [Asm]   r10 [label="t3", color=blue];
// [Asm]   r14 [label="a5", color=blue];
// [Asm]   r8 [label="t1", color=blue];
// [Asm]   r5 [label="a1", color=blue];
// [Asm]   r15 [label="a6", color=blue];
// [Asm]   r2 [label="v2 ← a0", color=green];
// [Asm]   r16 [label="a7", color=blue];
// [Asm]   r17 [label="v5 ← a0", color=green];
// [Asm]   r12 [label="a3", color=blue];
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r5 -- r6;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r5;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r16;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r3;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r2 -- r3;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:v0-> 1:a0-> 3:v3-> 2:v2-> 4:v4-> 5:a1-> 6:a2-> 7:t0-> 8:t1-> 9:t2-> 10:t3-> 11:t4-> 12:a3-> 13:a4-> 14:a5-> 15:a6-> 16:a7-> 17:v5"
// [Asm]   comment = "v0<-a1;v3<-a2;v4<-a3;v2<-a0;v5<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux46l3c0_28"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   ld v3, 8(v0) ->   ld a2, 8(a1)
// [Asm] subst   ld v4, 16(v0) ->   ld a3, 16(a1)
// [Asm] subst   mv a1, v3 ->   mv a1, a2
// [Asm] subst   mv a2, v4 ->   mv a2, a3
// [Asm] subst   call aux46l3_4 ->   call aux46l3_4
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%0) -> v4, Self(fref=f16) -> v0, FnParam(fref=f16, fpref=$f.0) -> v2, Mem(fref=f16, mref=m0) -> v3
// [Asm] defs: []
// [Asm] live_set: [s11, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: s11 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v7, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of le114l8_16"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r5 [label="a0", color=blue];
// [Asm]   r4 [label="v7 ← a2", color=green];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r3 [label="v3 ← a1", color=green];
// [Asm]   r2 [label="v5 ← a1", color=green];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:v2-> 1:s11-> 2:v5-> 3:v3-> 4:v7-> 5:a0"
// [Asm]   comment = "v2<-a0;v7<-a2;v3<-a1;v5<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of le114l8_16"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v5, s11, -16 ->   addi a1, s11, -16
// [Asm] subst   andi v3, v5, -8 ->   andi a1, a1, -8
// [Asm] subst   mv s11, v3 ->   mv s11, a1
// [Asm] subst   la v7, aux117l9c0_49 ->   la a2, aux117l9c0_49
// [Asm] subst   sd v7, 0(v3) ->   sd a2, 0(a1)
// [Asm] subst   sd v2, 8(v3) ->   sd a0, 8(a1)
// [Asm] subst   mv a0, v3 ->   mv a0, a1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f13, fpref=$f.0) -> v2, Self(fref=f13) -> v0, FnParam(fref=f13, fpref=$f.1) -> v3, Insn(iref=%0) -> v4, BlockParam(bref=b3, bpref=$b.0) -> v5
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f13, fpref=$f.1), FnParam(fref=f13, fpref=$f.0)])
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [v6]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, zero, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [zero]
// [Asm] defined: v5 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux111l8_13"];
// [Asm]   r0 [label="v6 ← a0", color=green];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r5 [label="v3 ← a1", color=green];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r1 [label="v5 ← a0", color=green];
// [Asm]   r3 [label="a1", color=blue];
// [Asm]   r2 [label="v2 ← a0", color=green];
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r5;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r3;
// [Asm]   comment = "0:v6-> 1:v5-> 2:v2-> 3:a1-> 4:zero-> 5:v3-> 6:a0"
// [Asm]   comment = "v6<-a0;v3<-a1;v5<-a0;v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux111l8_13"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v6, 1 ->   li a0, 1
// [Asm] subst   j .aux111l8_13_3 ->   j .aux111l8_13_3
// [Asm] subst   blt v2, v3, .aux111l8_13_2 ->   blt a0, a1, .aux111l8_13_2
// [Asm] subst   mv v5, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, Self(fref=f32) -> v0, FnParam(fref=f32, fpref=$f.0) -> v2, Insn(iref=%0) -> v5
// [Asm] defs: []
// [Asm] live_set: [a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v0, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux65l4c0_32"];
// [Asm]   r0 [label="v0 ← a1", color=green];
// [Asm]   r3 [label="v3 ← a2", color=green];
// [Asm]   r9 [label="t2", color=blue];
// [Asm]   r6 [label="a2", color=blue];
// [Asm]   r13 [label="a4", color=blue];
// [Asm]   r4 [label="v4 ← a3", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="t4", color=blue];
// [Asm]   r7 [label="t0", color=blue];
// [Asm]   r10 [label="t3", color=blue];
// [Asm]   r14 [label="a5", color=blue];
// [Asm]   r8 [label="t1", color=blue];
// [Asm]   r5 [label="a1", color=blue];
// [Asm]   r15 [label="a6", color=blue];
// [Asm]   r2 [label="v2 ← a0", color=green];
// [Asm]   r16 [label="a7", color=blue];
// [Asm]   r17 [label="v5 ← a0", color=green];
// [Asm]   r12 [label="a3", color=blue];
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r5 -- r6;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r5;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r16;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r3;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r2 -- r3;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:v0-> 1:a0-> 3:v3-> 2:v2-> 4:v4-> 5:a1-> 6:a2-> 7:t0-> 8:t1-> 9:t2-> 10:t3-> 11:t4-> 12:a3-> 13:a4-> 14:a5-> 15:a6-> 16:a7-> 17:v5"
// [Asm]   comment = "v0<-a1;v3<-a2;v4<-a3;v2<-a0;v5<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux65l4c0_32"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   lw v3, 8(v0) ->   lw a2, 8(a1)
// [Asm] subst   ld v4, 16(v0) ->   ld a3, 16(a1)
// [Asm] subst   mv a1, v3 ->   mv a1, a2
// [Asm] subst   mv a2, v4 ->   mv a2, a3
// [Asm] subst   call aux65l4_6 ->   call aux65l4_6
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f15, fpref=$f.1) -> v3, FnParam(fref=f15, fpref=$f.0) -> v2, Self(fref=f15) -> v0, Insn(iref=%0) -> v4, BlockParam(bref=b3, bpref=$b.0) -> v5
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f15, fpref=$f.0), FnParam(fref=f15, fpref=$f.1)])
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [zero]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [v6]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux117l9_15"];
// [Asm]   r0 [label="v5 ← a0", color=green];
// [Asm]   r5 [label="v6 ← a0", color=green];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r4 [label="v3 ← a1", color=green];
// [Asm]   r1 [label="v2 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r3 -- r4;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r2;
// [Asm]   comment = "0:v5-> 1:v2-> 2:a1-> 3:zero-> 4:v3-> 5:v6-> 6:a0"
// [Asm]   comment = "v5<-a0;v6<-a0;v3<-a1;v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux117l9_15"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v5, zero ->   mv a0, zero
// [Asm] subst   blt v3, v2, .aux117l9_15_2 ->   blt a1, a0, .aux117l9_15_2
// [Asm] subst   li v6, 1 ->   li a0, 1
// [Asm] subst   j .aux117l9_15_3 ->   j .aux117l9_15_3
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Mem(fref=f1, mref=m0) -> v4, FnParam(fref=f1, fpref=$f.1) -> v3, Self(fref=f1) -> v0, FnParam(fref=f1, fpref=$f.0) -> v2, Insn(iref=%0) -> v5
// [Asm] defs: []
// [Asm] live_set: [a1, s11, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, s11, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v3, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v4, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: s11 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v3, v8, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of map1l0_1"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r5 [label="v4 ← a2", color=green];
// [Asm]   r6 [label="v8 ← a3", color=green];
// [Asm]   r4 [label="v6 ← a2", color=green];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r3 [label="v3 ← a1", color=green];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r7 [label="a0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r6;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:v2-> 1:a1-> 2:s11-> 3:v3-> 4:v6-> 5:v4-> 6:v8-> 7:a0"
// [Asm]   comment = "v2<-a0;v4<-a2;v8<-a3;v6<-a2;v3<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of map1l0_1"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v6, s11, -24 ->   addi a2, s11, -24
// [Asm] subst   andi v4, v6, -8 ->   andi a2, a2, -8
// [Asm] subst   mv s11, v4 ->   mv s11, a2
// [Asm] subst   la v8, aux6l1c0_20 ->   la a3, aux6l1c0_20
// [Asm] subst   sd v8, 0(v4) ->   sd a3, 0(a2)
// [Asm] subst   sd v3, 8(v4) ->   sd a1, 8(a2)
// [Asm] subst   sd v2, 16(v4) ->   sd a0, 16(a2)
// [Asm] subst   mv a0, v4 ->   mv a0, a2
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f11, fpref=$f.1) -> v3, FnParam(fref=f11, fpref=$f.0) -> v2, Self(fref=f11) -> v0, Insn(iref=%0) -> v4
// [Asm] defs: []
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of add102l7_11"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a0", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r3 [label="v4 ← a0", color=green];
// [Asm]   r2 [label="v3 ← a1", color=green];
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:v2-> 1:a1-> 2:v3-> 3:v4-> 4:a0"
// [Asm]   comment = "v2<-a0;v4<-a0;v3<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of add102l7_11"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   add v4, v2, v3 ->   add a0, a0, a1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, BlockParam(bref=b0, bpref=$b.0) -> v7, BlockParam(bref=b0, bpref=$b.1) -> v8, BlockParam(bref=b0, bpref=$b.2) -> v9, Insn(iref=%5) -> v14, Insn(iref=%0) -> v10, Insn(iref=%4) -> v18, Mem(fref=f2, mref=m1) -> v6, Insn(iref=%3) -> v13, Mem(fref=f2, mref=m0) -> v5, Insn(iref=%7) -> v16, BlockParam(bref=b5, bpref=$b.0) -> v17, BlockParam(bref=b6, bpref=$b.0) -> v19, Insn(iref=%2) -> v12, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%1) -> v11, Insn(iref=%6) -> v15, FnParam(fref=f2, fpref=$f.0) -> v2, FnParam(fref=f2, fpref=$f.2) -> v4
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%5), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Asm] defs: [v20]
// [Asm] live_set: [zero, v20]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: [v5]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v19]
// [Asm] move_origin: [v5]
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v19]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [zero, v8, s11, v9]
// [Asm] move_origin: [v9]
// [Asm] defined: s10 is X
// [Asm] defs: [v29]
// [Asm] live_set: [zero, v29, v8, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v29, v8, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v29, v8, s11, v9]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, v8, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v10]
// [Asm] live_set: [v10, zero, v8, s11, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v10, zero, v8, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v10, zero, v8, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, zero, v8, s11, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [s11, v12, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v19]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v19]
// [Asm] move_origin: [v17]
// [Asm] defined: v19 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v7, s11, v9, zero, v8]
// [Asm] move_origin: [zero]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7, s11, v9, zero, v8]
// [Asm] move_origin: [v8]
// [Asm] defs: []
// [Asm] live_set: [v7, s11, v9, zero, v8]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v7, s11, v9, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [zero, v8, s11, v12, v9]
// [Asm] move_origin: [v8]
// [Asm] defined: s10 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v25, zero, v8, s11, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: []
// [Asm] live_set: [v25, zero, v8, s11, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v25, zero, a0, v8, s11, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, v8, s11, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v14]
// [Asm] live_set: [v14, zero, v8, s11, v12, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v14, zero, v8, s11, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, v12, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, s11, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, s11, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v4, s11, zero, v7]
// [Asm] move_origin: [v2]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v4, s11, zero, v8]
// [Asm] move_origin: [v3]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v7, s11, v9, zero, v8]
// [Asm] move_origin: [v4]
// [Asm] defined: v9 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v12, v22]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6, v12]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v6, v12]
// [Asm] move_origin: [v6]
// [Asm] defined: s11 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v6, v12, v24]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v12]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v17]
// [Asm] move_origin: [v6]
// [Asm] defined: v17 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux25l2_2"];
// [Asm]   r0 [label="v20 ← a0", color=green];
// [Asm]   r33 [label="v24 ← a1", color=green];
// [Asm]   r9 [label="a0", color=blue];
// [Asm]   r26 [label="v25 ← a1", color=green];
// [Asm]   r6 [label="v8 ← s0", color=green];
// [Asm]   r13 [label="t3", color=blue];
// [Asm]   r4 [label="v19 ← a0", color=green];
// [Asm]   r29 [label="v3 ← a1", color=green];
// [Asm]   r7 [label="v9 ← s1", color=green];
// [Asm]   r10 [label="t0", color=blue];
// [Asm]   r8 [label="v29 ← a1", color=green];
// [Asm]   r5 [label="s10", color=blue];
// [Asm]   r24 [label="v12 ← s2", color=green];
// [Asm]   r32 [label="v6 ← a0", color=green];
// [Asm]   r15 [label="a1", color=blue];
// [Asm]   r31 [label="v22 ← a0", color=green];
// [Asm]   r17 [label="a3", color=blue];
// [Asm]   r12 [label="t2", color=blue];
// [Asm]   r20 [label="a6", color=blue];
// [Asm]   r23 [label="v11 ← a0", color=green];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r27 [label="v14 ← a0", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r28 [label="v2 ← a0", color=green];
// [Asm]   r11 [label="t1", color=blue];
// [Asm]   r34 [label="v17 ← a0", color=green];
// [Asm]   r22 [label="v10 ← a1", color=green];
// [Asm]   r14 [label="t4", color=blue];
// [Asm]   r30 [label="v4 ← a2", color=green];
// [Asm]   r25 [label="v7 ← a0", color=green];
// [Asm]   r2 [label="v5 ← a0", color=green];
// [Asm]   r16 [label="a2", color=blue];
// [Asm]   r18 [label="a4", color=blue];
// [Asm]   r19 [label="a5", color=blue];
// [Asm]   r21 [label="a7", color=blue];
// [Asm]   r6 -- r21;
// [Asm]   r21 -- r24;
// [Asm]   r1 -- r12;
// [Asm]   r7 -- r21;
// [Asm]   r1 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r1 -- r30;
// [Asm]   r3 -- r16;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r7 -- r25;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r28 -- r30;
// [Asm]   r24 -- r32;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r9 -- r26;
// [Asm]   r1 -- r20;
// [Asm]   r3 -- r24;
// [Asm]   r9 -- r17;
// [Asm]   r11 -- r24;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r7 -- r27;
// [Asm]   r3 -- r5;
// [Asm]   r9 -- r18;
// [Asm]   r9 -- r14;
// [Asm]   r3 -- r8;
// [Asm]   r12 -- r24;
// [Asm]   r6 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r16 -- r29;
// [Asm]   r24 -- r31;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r30;
// [Asm]   r25 -- r29;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r7 -- r10;
// [Asm]   r9 -- r12;
// [Asm]   r24 -- r27;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r1 -- r2;
// [Asm]   r28 -- r29;
// [Asm]   r0 -- r1;
// [Asm]   r9 -- r20;
// [Asm]   r3 -- r27;
// [Asm]   r23 -- r24;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r5 -- r7;
// [Asm]   r9 -- r10;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r6 -- r23;
// [Asm]   r7 -- r8;
// [Asm]   r16 -- r24;
// [Asm]   r15 -- r28;
// [Asm]   r6 -- r25;
// [Asm]   r18 -- r24;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r13 -- r24;
// [Asm]   r3 -- r19;
// [Asm]   r6 -- r11;
// [Asm]   r20 -- r24;
// [Asm]   r3 -- r25;
// [Asm]   r6 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r9 -- r15;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r23;
// [Asm]   r7 -- r24;
// [Asm]   r29 -- r30;
// [Asm]   r8 -- r9;
// [Asm]   r3 -- r12;
// [Asm]   r7 -- r26;
// [Asm]   r6 -- r30;
// [Asm]   r1 -- r22;
// [Asm]   r7 -- r13;
// [Asm]   r7 -- r20;
// [Asm]   r1 -- r15;
// [Asm]   r25 -- r30;
// [Asm]   r17 -- r24;
// [Asm]   r1 -- r13;
// [Asm]   r19 -- r24;
// [Asm]   r6 -- r16;
// [Asm]   r3 -- r28;
// [Asm]   r6 -- r22;
// [Asm]   r14 -- r24;
// [Asm]   r7 -- r9;
// [Asm]   r6 -- r26;
// [Asm]   r16 -- r28;
// [Asm]   r6 -- r12;
// [Asm]   r6 -- r24;
// [Asm]   r24 -- r26;
// [Asm]   r6 -- r20;
// [Asm]   r1 -- r28;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r8;
// [Asm]   r7 -- r17;
// [Asm]   r6 -- r19;
// [Asm]   r6 -- r27;
// [Asm]   r7 -- r22;
// [Asm]   r9 -- r11;
// [Asm]   r7 -- r19;
// [Asm]   r32 -- r33;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r24;
// [Asm]   r7 -- r15;
// [Asm]   r1 -- r29;
// [Asm]   r9 -- r24;
// [Asm]   r22 -- r23;
// [Asm]   r3 -- r29;
// [Asm]   r3 -- r20;
// [Asm]   r7 -- r11;
// [Asm]   r1 -- r25;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r15 -- r24;
// [Asm]   r9 -- r16;
// [Asm]   r9 -- r19;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r7 -- r23;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r9 -- r13;
// [Asm]   r7 -- r12;
// [Asm]   r3 -- r23;
// [Asm]   r7 -- r14;
// [Asm]   r10 -- r24;
// [Asm]   r24 -- r33;
// [Asm]   r9 -- r21;
// [Asm]   r1 -- r24;
// [Asm]   comment = "0:v20-> 1:zero-> 2:v5-> 3:s11-> 5:s10-> 6:v8-> 7:v9-> 24:v12-> 9:a0-> 10:t0-> 11:t1-> 12:t2-> 13:t3-> 14:t4-> 15:a1-> 16:a2-> 17:a3-> 18:a4-> 19:a5-> 20:a6-> 21:a7-> 26:v25-> 8:v29-> 23:v11-> 22:v10-> 27:v14-> 25:v7-> 28:v2-> 29:v3-> 30:v4-> 31:v22-> 32:v6-> 33:v24-> 4:v19-> 34:v17"
// [Asm]   comment = "v20<-a0;v24<-a1;v25<-a1;v8<-s0;v19<-a0;v3<-a1;v9<-s1;v29<-a1;v12<-s2;v6<-a0;v22<-a0;v11<-a0;v14<-a0;v2<-a0;v17<-a0;v10<-a1;v4<-a2;v7<-a0;v5<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux25l2_2"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v20, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi v5, v20, -8 ->   andi a0, a0, -8
// [Asm] subst   mv s11, v5 ->   mv s11, a0
// [Asm] subst   sw zero, 0(v5) ->   sw zero, 0(a0)
// [Asm] subst   sw zero, 4(v5) ->   sw zero, 4(a0)
// [Asm] subst   j .aux25l2_2_6 ->   j .aux25l2_2_6
// [Asm] subst   mv s10, v9 ->   mv s10, s1
// [Asm] subst   ld v29, 0(v9) ->   ld a1, 0(s1)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   jalr v29 ->   jalr a1
// [Asm] subst   mv v10, a0 ->   mv a1, a0
// [Asm] subst   lw v11, 0(v10) ->   lw a0, 0(a1)
// [Asm] subst   lw v12, 4(v10) ->   lw s2, 4(a1)
// [Asm] subst   beq v11, zero, .aux25l2_2_1 ->   beq a0, zero, .aux25l2_2_1
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v7, zero ->   mv a0, zero
// [Asm] subst   j .aux25l2_2_0 ->   j .aux25l2_2_0
// [Asm] subst   mv s10, v8 ->   mv s10, s0
// [Asm] subst   ld v25, 0(v8) ->   ld a1, 0(s0)
// [Asm] subst   mv a0, v12 ->   mv a0, s2
// [Asm] subst   jalr v25 ->   jalr a1
// [Asm] subst   bne v14, zero, .aux25l2_2_4 ->   bne a0, zero, .aux25l2_2_4
// [Asm] subst   mv v8, v3 ->   mv s0, a1
// [Asm] subst   mv v9, v4 ->   mv s1, a2
// [Asm] subst   addi v22, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi v6, v22, -8 ->   andi a0, a0, -8
// [Asm] subst   mv s11, v6 ->   mv s11, a0
// [Asm] subst   li v24, 1 ->   li a1, 1
// [Asm] subst   sw v24, 0(v6) ->   sw a1, 0(a0)
// [Asm] subst   sw v12, 4(v6) ->   sw s2, 4(a0)
// [Asm] pre_assigned_registers: FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, FnParam(fref=f24, fpref=$f.0) -> v2, Self(fref=f24) -> v0, Insn(iref=%0) -> v5
// [Asm] defs: []
// [Asm] live_set: [a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v0, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux25l2c0_24"];
// [Asm]   r0 [label="v0 ← a1", color=green];
// [Asm]   r3 [label="v3 ← a2", color=green];
// [Asm]   r9 [label="t2", color=blue];
// [Asm]   r6 [label="a2", color=blue];
// [Asm]   r13 [label="a4", color=blue];
// [Asm]   r4 [label="v4 ← a3", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="t4", color=blue];
// [Asm]   r7 [label="t0", color=blue];
// [Asm]   r10 [label="t3", color=blue];
// [Asm]   r14 [label="a5", color=blue];
// [Asm]   r8 [label="t1", color=blue];
// [Asm]   r5 [label="a1", color=blue];
// [Asm]   r15 [label="a6", color=blue];
// [Asm]   r2 [label="v2 ← a0", color=green];
// [Asm]   r16 [label="a7", color=blue];
// [Asm]   r17 [label="v5 ← a0", color=green];
// [Asm]   r12 [label="a3", color=blue];
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r5 -- r6;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r5;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r16;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r3;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r2 -- r3;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:v0-> 1:a0-> 3:v3-> 2:v2-> 4:v4-> 5:a1-> 6:a2-> 7:t0-> 8:t1-> 9:t2-> 10:t3-> 11:t4-> 12:a3-> 13:a4-> 14:a5-> 15:a6-> 16:a7-> 17:v5"
// [Asm]   comment = "v0<-a1;v3<-a2;v4<-a3;v2<-a0;v5<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux25l2c0_24"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   ld v3, 8(v0) ->   ld a2, 8(a1)
// [Asm] subst   ld v4, 16(v0) ->   ld a3, 16(a1)
// [Asm] subst   mv a1, v3 ->   mv a1, a2
// [Asm] subst   mv a2, v4 ->   mv a2, a3
// [Asm] subst   call aux25l2_2 ->   call aux25l2_2
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f20, fpref=$f.0) -> v2, FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, Self(fref=f20) -> v0, Insn(iref=%0) -> v5
// [Asm] defs: []
// [Asm] live_set: [a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v0, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux6l1c0_20"];
// [Asm]   r0 [label="v0 ← a1", color=green];
// [Asm]   r3 [label="v3 ← a2", color=green];
// [Asm]   r9 [label="t2", color=blue];
// [Asm]   r6 [label="a2", color=blue];
// [Asm]   r13 [label="a4", color=blue];
// [Asm]   r4 [label="v4 ← a3", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="t4", color=blue];
// [Asm]   r7 [label="t0", color=blue];
// [Asm]   r10 [label="t3", color=blue];
// [Asm]   r14 [label="a5", color=blue];
// [Asm]   r8 [label="t1", color=blue];
// [Asm]   r5 [label="a1", color=blue];
// [Asm]   r15 [label="a6", color=blue];
// [Asm]   r2 [label="v2 ← a0", color=green];
// [Asm]   r16 [label="a7", color=blue];
// [Asm]   r17 [label="v5 ← a0", color=green];
// [Asm]   r12 [label="a3", color=blue];
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r5 -- r6;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r5;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r16;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r3;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r2 -- r3;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:v0-> 1:a0-> 3:v3-> 2:v2-> 4:v4-> 5:a1-> 6:a2-> 7:t0-> 8:t1-> 9:t2-> 10:t3-> 11:t4-> 12:a3-> 13:a4-> 14:a5-> 15:a6-> 16:a7-> 17:v5"
// [Asm]   comment = "v0<-a1;v3<-a2;v4<-a3;v2<-a0;v5<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux6l1c0_20"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   ld v3, 8(v0) ->   ld a2, 8(a1)
// [Asm] subst   ld v4, 16(v0) ->   ld a3, 16(a1)
// [Asm] subst   mv a1, v3 ->   mv a1, a2
// [Asm] subst   mv a2, v4 ->   mv a2, a3
// [Asm] subst   call aux6l1_0 ->   call aux6l1_0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f6, fpref=$f.1) -> v3, Insn(iref=%3) -> v9, Mem(fref=f6, mref=m1) -> v6, Mem(fref=f6, mref=m0) -> v5, BlockParam(bref=b3, bpref=$b.0) -> v13, Insn(iref=%2) -> v12, FnParam(fref=f6, fpref=$f.0) -> v2, FnParam(fref=f6, fpref=$f.2) -> v4, Insn(iref=%1) -> v8, Self(fref=f6) -> v0, Insn(iref=%5) -> v11, Insn(iref=%0) -> v7, Insn(iref=%4) -> v10
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), FnParam(fref=f6, fpref=$f.1)])
// [Asm] defs: [v14]
// [Asm] live_set: [v14, zero]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: [v5]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move_origin: [v5]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v13]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, s11, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [a2, s11, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, s11, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v4, s11, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v13]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v4, s11, v9, v7]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [s11, v7]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v16, v7]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6, v7]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v6, v7]
// [Asm] move_origin: [v6]
// [Asm] defined: s11 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v6, v18, v7]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move_origin: [v6]
// [Asm] defined: v13 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux65l4_6"];
// [Asm]   r8 [label="v3 ← a0", color=green];
// [Asm]   r0 [label="v14 ← a0", color=green];
// [Asm]   r5 [label="v2 ← a0", color=green];
// [Asm]   r15 [label="v18 ← a1", color=green];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r2 [label="v5 ← a0", color=green];
// [Asm]   r9 [label="v4 ← a1", color=green];
// [Asm]   r6 [label="a2", color=blue];
// [Asm]   r13 [label="v16 ← a0", color=green];
// [Asm]   r4 [label="v13 ← a0", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r11 [label="a0", color=blue];
// [Asm]   r7 [label="a1", color=blue];
// [Asm]   r10 [label="v7 ← a2", color=green];
// [Asm]   r14 [label="v6 ← a0", color=green];
// [Asm]   r12 [label="v9 ← a0", color=green];
// [Asm]   r10 -- r14;
// [Asm]   r1 -- r2;
// [Asm]   r10 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r3 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r8 -- r10;
// [Asm]   r5 -- r6;
// [Asm]   r5 -- r7;
// [Asm]   r9 -- r10;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r8;
// [Asm]   r10 -- r12;
// [Asm]   r1 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r9 -- r12;
// [Asm]   r10 -- r15;
// [Asm]   r14 -- r15;
// [Asm]   r8 -- r9;
// [Asm]   r6 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r3 -- r12;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:v14-> 1:zero-> 2:v5-> 3:s11-> 5:v2-> 8:v3-> 9:v4-> 10:v7-> 12:v9-> 6:a2-> 7:a1-> 13:v16-> 14:v6-> 15:v18-> 4:v13-> 11:a0"
// [Asm]   comment = "v3<-a0;v14<-a0;v2<-a0;v18<-a1;v5<-a0;v4<-a1;v16<-a0;v13<-a0;v7<-a2;v6<-a0;v9<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux65l4_6"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v14, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi v5, v14, -8 ->   andi a0, a0, -8
// [Asm] subst   mv s11, v5 ->   mv s11, a0
// [Asm] subst   sw zero, 0(v5) ->   sw zero, 0(a0)
// [Asm] subst   sw zero, 4(v5) ->   sw zero, 4(a0)
// [Asm] subst   j .aux65l4_6_3 ->   j .aux65l4_6_3
// [Asm] subst   mv v3, a1 ->   mv a0, a1
// [Asm] subst   mv v4, a2 ->   mv a1, a2
// [Asm] subst   lw v7, 0(v4) ->   lw a2, 0(a1)
// [Asm] subst   beq v7, v3, .aux65l4_6_1 ->   beq a2, a0, .aux65l4_6_1
// [Asm] subst   ret ->   ret
// [Asm] subst   addi v9, v7, 1 ->   addi a0, a2, 1
// [Asm] subst   sw v9, 0(v4) ->   sw a0, 0(a1)
// [Asm] subst   addi v16, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi v6, v16, -8 ->   andi a0, a0, -8
// [Asm] subst   mv s11, v6 ->   mv s11, a0
// [Asm] subst   li v18, 1 ->   li a1, 1
// [Asm] subst   sw v18, 0(v6) ->   sw a1, 0(a0)
// [Asm] subst   sw v7, 4(v6) ->   sw a2, 4(a0)
// [Asm] pre_assigned_registers: Self(fref=f12) -> v0, Insn(iref=%1) -> v5, Mem(fref=f12, mref=m0) -> v3, FnParam(fref=f12, fpref=$f.0) -> v2, Insn(iref=%0) -> v4
// [Asm] defs: []
// [Asm] live_set: [s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v7, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: s11 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v2, zero, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0, zero]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of sum99l6_12"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r3 [label="v7 ← a1", color=green];
// [Asm]   r9 [label="t0", color=blue];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r13 [label="t4", color=blue];
// [Asm]   r4 [label="v3 ← a1", color=green];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r11 [label="t2", color=blue];
// [Asm]   r7 [label="a1", color=blue];
// [Asm]   r10 [label="t1", color=blue];
// [Asm]   r14 [label="a3", color=blue];
// [Asm]   r8 [label="a2", color=blue];
// [Asm]   r5 [label="v9 ← a2", color=green];
// [Asm]   r15 [label="a4", color=blue];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="a5", color=blue];
// [Asm]   r18 [label="a7", color=blue];
// [Asm]   r19 [label="v5 ← a0", color=green];
// [Asm]   r17 [label="a6", color=blue];
// [Asm]   r12 [label="t3", color=blue];
// [Asm]   r6 -- r13;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r2 -- r5;
// [Asm]   r6 -- r17;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r6;
// [Asm]   r6 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r7;
// [Asm]   r6 -- r15;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r4;
// [Asm]   r0 -- r3;
// [Asm]   r4 -- r6;
// [Asm]   r7 -- r8;
// [Asm]   r6 -- r12;
// [Asm]   r6 -- r14;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r2 -- r3;
// [Asm]   r6 -- r8;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r2;
// [Asm]   comment = "0:v2-> 1:s11-> 2:zero-> 3:v7-> 4:v3-> 5:v9-> 6:a0-> 7:a1-> 8:a2-> 9:t0-> 10:t1-> 11:t2-> 12:t3-> 13:t4-> 14:a3-> 15:a4-> 16:a5-> 17:a6-> 18:a7-> 19:v5"
// [Asm]   comment = "v2<-a0;v7<-a1;v3<-a1;v9<-a2;v5<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of sum99l6_12"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v7, s11, -8 ->   addi a1, s11, -8
// [Asm] subst   andi v3, v7, -8 ->   andi a1, a1, -8
// [Asm] subst   mv s11, v3 ->   mv s11, a1
// [Asm] subst   la v9, add102l7c0_41 ->   la a2, add102l7c0_41
// [Asm] subst   sd v9, 0(v3) ->   sd a2, 0(a1)
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   call fold84l5_10 ->   call fold84l5_10
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v11, Insn(iref=%3) -> v9, FnParam(fref=f4, fpref=$f.0) -> v2, BlockParam(bref=b3, bpref=$b.0) -> v12, Insn(iref=%2) -> v8, FnParam(fref=f4, fpref=$f.2) -> v4, Insn(iref=%1) -> v7, Self(fref=f4) -> v0, Mem(fref=f4, mref=m0) -> v5, FnParam(fref=f4, fpref=$f.1) -> v3, Insn(iref=%5) -> v10, Insn(iref=%0) -> v6
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v12]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, s11, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [a2, s11, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, s11, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v4, s11, zero, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: s10 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v4, s11, zero, v20]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, zero, v20]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, s11, zero, a0, v20]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, s11, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v6, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v4, v6, s11, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v4, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v15, v8]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v8]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, v8]
// [Asm] move_origin: [v5]
// [Asm] defined: s11 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v5, v17, v8]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v12]
// [Asm] move_origin: [v5]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v12]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v4, zero]
// [Asm] move_origin: [v4]
// [Asm] defined: s10 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v13, zero]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v13, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v13]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: [a0]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v12]
// [Asm] move_origin: [v11]
// [Asm] defined: v12 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux46l3_4"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="v6 ← a0", color=green];
// [Asm]   r23 [label="v15 ← a1", color=green];
// [Asm]   r3 [label="a1", color=blue];
// [Asm]   r9 [label="v20 ← a1", color=green];
// [Asm]   r26 [label="v12 ← a0", color=green];
// [Asm]   r27 [label="v13 ← a1", color=green];
// [Asm]   r6 [label="v3 ← a0", color=green];
// [Asm]   r13 [label="t3", color=blue];
// [Asm]   r4 [label="s11", color=blue];
// [Asm]   r1 [label="v2 ← a0", color=green];
// [Asm]   r28 [label="v11 ← a0", color=green];
// [Asm]   r11 [label="t1", color=blue];
// [Asm]   r7 [label="v4 ← s0", color=green];
// [Asm]   r10 [label="t0", color=blue];
// [Asm]   r22 [label="v8 ← a0", color=green];
// [Asm]   r14 [label="t4", color=blue];
// [Asm]   r8 [label="s10", color=blue];
// [Asm]   r5 [label="zero", color=blue];
// [Asm]   r24 [label="v5 ← a1", color=green];
// [Asm]   r15 [label="a3", color=blue];
// [Asm]   r25 [label="v17 ← a2", color=green];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r16 [label="a4", color=blue];
// [Asm]   r18 [label="a6", color=blue];
// [Asm]   r19 [label="a7", color=blue];
// [Asm]   r21 [label="v7 ← a1", color=green];
// [Asm]   r17 [label="a5", color=blue];
// [Asm]   r12 [label="t2", color=blue];
// [Asm]   r4 -- r9;
// [Asm]   r4 -- r19;
// [Asm]   r5 -- r15;
// [Asm]   r0 -- r18;
// [Asm]   r5 -- r12;
// [Asm]   r6 -- r7;
// [Asm]   r4 -- r13;
// [Asm]   r0 -- r15;
// [Asm]   r0 -- r13;
// [Asm]   r4 -- r16;
// [Asm]   r5 -- r21;
// [Asm]   r7 -- r21;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r20;
// [Asm]   r5 -- r10;
// [Asm]   r1 -- r4;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r0 -- r17;
// [Asm]   r5 -- r13;
// [Asm]   r5 -- r18;
// [Asm]   r7 -- r13;
// [Asm]   r0 -- r14;
// [Asm]   r7 -- r20;
// [Asm]   r5 -- r19;
// [Asm]   r4 -- r20;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r7;
// [Asm]   r4 -- r22;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r0 -- r16;
// [Asm]   r0 -- r19;
// [Asm]   r3 -- r5;
// [Asm]   r22 -- r24;
// [Asm]   r7 -- r17;
// [Asm]   r4 -- r21;
// [Asm]   r7 -- r22;
// [Asm]   r22 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r7 -- r19;
// [Asm]   r5 -- r9;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r9;
// [Asm]   r7 -- r15;
// [Asm]   r7 -- r10;
// [Asm]   r22 -- r23;
// [Asm]   r7 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r2 -- r5;
// [Asm]   r4 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r0 -- r12;
// [Asm]   r5 -- r14;
// [Asm]   r0 -- r11;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r7 -- r16;
// [Asm]   r3 -- r7;
// [Asm]   r7 -- r18;
// [Asm]   r1 -- r5;
// [Asm]   r21 -- r22;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r3;
// [Asm]   r7 -- r8;
// [Asm]   r0 -- r7;
// [Asm]   r24 -- r25;
// [Asm]   r7 -- r12;
// [Asm]   r4 -- r14;
// [Asm]   r0 -- r27;
// [Asm]   r7 -- r14;
// [Asm]   r20 -- r21;
// [Asm]   comment = "0:a0-> 2:a2-> 4:s11-> 7:v4-> 3:a1-> 5:zero-> 1:v2-> 6:v3-> 9:v20-> 10:t0-> 11:t1-> 12:t2-> 13:t3-> 14:t4-> 15:a3-> 16:a4-> 17:a5-> 18:a6-> 19:a7-> 8:s10-> 20:v6-> 21:v7-> 22:v8-> 27:v13-> 23:v15-> 24:v5-> 25:v17-> 26:v12-> 28:v11"
// [Asm]   comment = "v6<-a0;v15<-a1;v20<-a1;v12<-a0;v13<-a1;v3<-a0;v2<-a0;v11<-a0;v4<-s0;v8<-a0;v5<-a1;v17<-a2;v7<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux46l3_4"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v3, a1 ->   mv a0, a1
// [Asm] subst   mv v4, a2 ->   mv s0, a2
// [Asm] subst   mv s10, v3 ->   mv s10, a0
// [Asm] subst   ld v20, 0(v3) ->   ld a1, 0(a0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   jalr v20 ->   jalr a1
// [Asm] subst   lw v7, 0(v6) ->   lw a1, 0(a0)
// [Asm] subst   lw v8, 4(v6) ->   lw a0, 4(a0)
// [Asm] subst   bne v7, zero, .aux46l3_4_2 ->   bne a1, zero, .aux46l3_4_2
// [Asm] subst   addi v15, s11, -8 ->   addi a1, s11, -8
// [Asm] subst   andi v5, v15, -8 ->   andi a1, a1, -8
// [Asm] subst   mv s11, v5 ->   mv s11, a1
// [Asm] subst   li v17, 1 ->   li a2, 1
// [Asm] subst   sw v17, 0(v5) ->   sw a2, 0(a1)
// [Asm] subst   sw v8, 4(v5) ->   sw a0, 4(a1)
// [Asm] subst   mv v12, v5 ->   mv a0, a1
// [Asm] subst   j .aux46l3_4_3 ->   j .aux46l3_4_3
// [Asm] subst   mv s10, v4 ->   mv s10, s0
// [Asm] subst   ld v13, 0(v4) ->   ld a1, 0(s0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   jalr v13 ->   jalr a1
// [Asm] pre_assigned_registers: Self(fref=f41) -> v0, FnParam(fref=f41, fpref=$f.1) -> v3, Insn(iref=%0) -> v4, FnParam(fref=f41, fpref=$f.0) -> v2
// [Asm] defs: []
// [Asm] live_set: [a1, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [a1, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of add102l7c0_41"];
// [Asm]   r0 [label="v0 ← a2", color=green];
// [Asm]   r3 [label="v2 ← a0", color=green];
// [Asm]   r9 [label="t4", color=blue];
// [Asm]   r6 [label="t1", color=blue];
// [Asm]   r13 [label="a5", color=blue];
// [Asm]   r4 [label="v3 ← a1", color=green];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="a3", color=blue];
// [Asm]   r7 [label="t2", color=blue];
// [Asm]   r10 [label="a2", color=blue];
// [Asm]   r14 [label="a6", color=blue];
// [Asm]   r8 [label="t3", color=blue];
// [Asm]   r5 [label="t0", color=blue];
// [Asm]   r15 [label="a7", color=blue];
// [Asm]   r2 [label="a0", color=blue];
// [Asm]   r16 [label="v4 ← a0", color=green];
// [Asm]   r12 [label="a4", color=blue];
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r10;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r2 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r2 -- r14;
// [Asm]   r2 -- r15;
// [Asm]   r0 -- r2;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r1 -- r2;
// [Asm]   comment = "0:v0-> 1:a1-> 2:a0-> 3:v2-> 4:v3-> 5:t0-> 6:t1-> 7:t2-> 8:t3-> 9:t4-> 10:a2-> 11:a3-> 12:a4-> 13:a5-> 14:a6-> 15:a7-> 16:v4"
// [Asm]   comment = "v0<-a2;v2<-a0;v3<-a1;v4<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of add102l7c0_41"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v0, s10 ->   mv a2, s10
// [Asm] subst   call add102l7_11 ->   call add102l7_11
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v5, Insn(iref=%7) -> v9, Self(fref=f17) -> v0, Insn(iref=%2) -> v4, Insn(iref=%9) -> v11, Insn(iref=%8) -> v10, Insn(iref=%1) -> v3, Insn(iref=%10) -> v12, Insn(iref=%11) -> v13, Insn(iref=%6) -> v8, Insn(iref=%5) -> v7, Insn(iref=%0) -> v2, Insn(iref=%4) -> v6
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [v30]
// [Asm] live_set: [zero, a0, v30]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: [v30]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v28, zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0, v2]
// [Asm] move_origin: [v28]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v4, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, zero]
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v4, zero]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v4, zero, a0]
// [Asm] move_origin: [v25]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [v22]
// [Asm] live_set: [v6, zero, v22]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: [v22]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v6, zero, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v7]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: [v7]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [zero, v8]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v19, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v8]
// [Asm] move_origin: [v19]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, v8]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [zero, v9, v8]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v9]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: [v9]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v10]
// [Asm] live_set: [v10, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v10, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v10, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v11, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v12]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14, zero]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v14]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v13]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main120l9_17"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="v5 ← a1", color=green];
// [Asm]   r23 [label="v7 ← a1", color=green];
// [Asm]   r3 [label="a1", color=blue];
// [Asm]   r9 [label="a2", color=blue];
// [Asm]   r26 [label="v9 ← a1", color=green];
// [Asm]   r27 [label="v10 ← a0", color=green];
// [Asm]   r6 [label="t2", color=blue];
// [Asm]   r13 [label="a6", color=blue];
// [Asm]   r4 [label="t0", color=blue];
// [Asm]   r29 [label="v12 ← a0", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r28 [label="v11 ← a0", color=green];
// [Asm]   r11 [label="a4", color=blue];
// [Asm]   r7 [label="t3", color=blue];
// [Asm]   r10 [label="a3", color=blue];
// [Asm]   r22 [label="v22 ← a0", color=green];
// [Asm]   r14 [label="a7", color=blue];
// [Asm]   r8 [label="t4", color=blue];
// [Asm]   r30 [label="v14 ← a0", color=green];
// [Asm]   r5 [label="t1", color=blue];
// [Asm]   r15 [label="v2 ← s0", color=green];
// [Asm]   r24 [label="v8 ← s0", color=green];
// [Asm]   r25 [label="v19 ← a0", color=green];
// [Asm]   r2 [label="v30 ← a1", color=green];
// [Asm]   r16 [label="v28 ← a1", color=green];
// [Asm]   r18 [label="v4 ← s0", color=green];
// [Asm]   r19 [label="v25 ← a0", color=green];
// [Asm]   r31 [label="v13 ← a0", color=green];
// [Asm]   r21 [label="v6 ← s0", color=green];
// [Asm]   r17 [label="v3 ← a1", color=green];
// [Asm]   r12 [label="a5", color=blue];
// [Asm]   r6 -- r21;
// [Asm]   r0 -- r13;
// [Asm]   r5 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r7 -- r21;
// [Asm]   r1 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r1 -- r30;
// [Asm]   r1 -- r4;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r5 -- r18;
// [Asm]   r1 -- r10;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r0 -- r23;
// [Asm]   r3 -- r24;
// [Asm]   r11 -- r24;
// [Asm]   r11 -- r18;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r18;
// [Asm]   r0 -- r16;
// [Asm]   r9 -- r18;
// [Asm]   r0 -- r6;
// [Asm]   r4 -- r21;
// [Asm]   r8 -- r24;
// [Asm]   r1 -- r31;
// [Asm]   r12 -- r24;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r26;
// [Asm]   r10 -- r18;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r0 -- r9;
// [Asm]   r6 -- r18;
// [Asm]   r1 -- r27;
// [Asm]   r1 -- r2;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r10;
// [Asm]   r13 -- r18;
// [Asm]   r1 -- r11;
// [Asm]   r8 -- r21;
// [Asm]   r11 -- r15;
// [Asm]   r18 -- r20;
// [Asm]   r0 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r12 -- r21;
// [Asm]   r21 -- r22;
// [Asm]   r0 -- r4;
// [Asm]   r13 -- r21;
// [Asm]   r24 -- r25;
// [Asm]   r14 -- r15;
// [Asm]   r0 -- r18;
// [Asm]   r13 -- r24;
// [Asm]   r0 -- r15;
// [Asm]   r13 -- r15;
// [Asm]   r4 -- r24;
// [Asm]   r14 -- r18;
// [Asm]   r6 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r9 -- r15;
// [Asm]   r0 -- r24;
// [Asm]   r1 -- r23;
// [Asm]   r7 -- r24;
// [Asm]   r12 -- r15;
// [Asm]   r1 -- r22;
// [Asm]   r0 -- r14;
// [Asm]   r0 -- r21;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r18;
// [Asm]   r14 -- r24;
// [Asm]   r6 -- r24;
// [Asm]   r24 -- r26;
// [Asm]   r1 -- r28;
// [Asm]   r21 -- r23;
// [Asm]   r4 -- r15;
// [Asm]   r18 -- r19;
// [Asm]   r15 -- r17;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r24;
// [Asm]   r0 -- r3;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r8;
// [Asm]   r14 -- r21;
// [Asm]   r7 -- r15;
// [Asm]   r1 -- r29;
// [Asm]   r9 -- r24;
// [Asm]   r10 -- r15;
// [Asm]   r8 -- r18;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r0 -- r12;
// [Asm]   r7 -- r18;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r15 -- r16;
// [Asm]   r0 -- r20;
// [Asm]   r10 -- r21;
// [Asm]   r10 -- r24;
// [Asm]   r12 -- r18;
// [Asm]   r11 -- r21;
// [Asm]   r5 -- r15;
// [Asm]   r1 -- r24;
// [Asm]   r9 -- r21;
// [Asm]   comment = "0:a0-> 1:zero-> 2:v30-> 3:a1-> 15:v2-> 4:t0-> 18:v4-> 5:t1-> 21:v6-> 6:t2-> 24:v8-> 7:t3-> 8:t4-> 9:a2-> 10:a3-> 11:a4-> 12:a5-> 13:a6-> 14:a7-> 16:v28-> 17:v3-> 20:v5-> 23:v7-> 26:v9-> 19:v25-> 22:v22-> 25:v19-> 27:v10-> 28:v11-> 29:v12-> 30:v14-> 31:v13"
// [Asm]   comment = "v5<-a1;v7<-a1;v9<-a1;v10<-a0;v12<-a0;v11<-a0;v22<-a0;v14<-a0;v2<-s0;v8<-s0;v19<-a0;v30<-a1;v28<-a1;v4<-s0;v25<-a0;v13<-a0;v6<-s0;v3<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main120l9_17"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   li v30, 100 ->   li a1, 100
// [Asm] subst   call range58l3_7 ->   call range58l3_7
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   li v28, 1000 ->   li a1, 1000
// [Asm] subst   call range58l3_7 ->   call range58l3_7
// [Asm] subst   mv v3, a0 ->   mv a1, a0
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   call concat41l2_5 ->   call concat41l2_5
// [Asm] subst   mv v4, a0 ->   mv s0, a0
// [Asm] subst   li v25, 1 ->   li a0, 1
// [Asm] subst   call addx78l4_9 ->   call addx78l4_9
// [Asm] subst   mv v5, a0 ->   mv a1, a0
// [Asm] subst   mv a0, v4 ->   mv a0, s0
// [Asm] subst   call map1l0_1 ->   call map1l0_1
// [Asm] subst   mv v6, a0 ->   mv s0, a0
// [Asm] subst   li v22, 50 ->   li a0, 50
// [Asm] subst   call gt108l7_14 ->   call gt108l7_14
// [Asm] subst   mv v7, a0 ->   mv a1, a0
// [Asm] subst   mv a0, v6 ->   mv a0, s0
// [Asm] subst   call filter20l1_3 ->   call filter20l1_3
// [Asm] subst   mv v8, a0 ->   mv s0, a0
// [Asm] subst   li v19, 1200 ->   li a0, 1200
// [Asm] subst   call le114l8_16 ->   call le114l8_16
// [Asm] subst   mv v9, a0 ->   mv a1, a0
// [Asm] subst   mv a0, v8 ->   mv a0, s0
// [Asm] subst   call filter20l1_3 ->   call filter20l1_3
// [Asm] subst   call sum99l6_12 ->   call sum99l6_12
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v14, 10 ->   li a0, 10
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v10, FnParam(fref=f0, fpref=$f.1) -> v3, FnParam(fref=f0, fpref=$f.2) -> v4, Mem(fref=f0, mref=m1) -> v6, Self(fref=f0) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v14, Mem(fref=f0, mref=m0) -> v5, Insn(iref=%2) -> v9, Insn(iref=%1) -> v8, Insn(iref=%6) -> v12, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%5) -> v11, Insn(iref=%0) -> v7, Insn(iref=%4) -> v13
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Asm] defs: [s10]
// [Asm] live_set: [s11, v9, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: s10 is X
// [Asm] defs: [v20]
// [Asm] live_set: [s11, v9, v20]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [s11, v9, v20]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [s11, a0, v20]
// [Asm] move_origin: [v9]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [s11, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v11, s11]
// [Asm] move_origin: [a0]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, s11]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v11, v17]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v11, v6]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v6]
// [Asm] move_origin: [v6]
// [Asm] defined: s11 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v11, v19, v6]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v6]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move_origin: [v6]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [a2, a1, s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, s11, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [a2, s11, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, s11, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v4, s11, zero, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: s10 is X
// [Asm] defs: [v24]
// [Asm] live_set: [s11, v24, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: []
// [Asm] live_set: [s11, v24, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [s11, v24, zero, a0, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [s11, zero, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v7, s11, zero, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v7, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v8, s11, zero, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v15, zero]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: [v5]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move_origin: [v5]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v14]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v14]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux6l1_0"];
// [Asm]   r0 [label="s10", color=blue];
// [Asm]   r20 [label="v6 ← a1", color=green];
// [Asm]   r23 [label="v2 ← a0", color=green];
// [Asm]   r3 [label="v3 ← s0", color=green];
// [Asm]   r9 [label="t3", color=blue];
// [Asm]   r26 [label="v24 ← a1", color=green];
// [Asm]   r27 [label="v7 ← a0", color=green];
// [Asm]   r6 [label="t0", color=blue];
// [Asm]   r13 [label="a3", color=blue];
// [Asm]   r4 [label="v20 ← a1", color=green];
// [Asm]   r29 [label="v15 ← a0", color=green];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r28 [label="v8 ← a1", color=green];
// [Asm]   r11 [label="a1", color=blue];
// [Asm]   r7 [label="t1", color=blue];
// [Asm]   r10 [label="t4", color=blue];
// [Asm]   r22 [label="v14 ← a0", color=green];
// [Asm]   r14 [label="a4", color=blue];
// [Asm]   r8 [label="t2", color=blue];
// [Asm]   r30 [label="v5 ← a0", color=green];
// [Asm]   r5 [label="a0", color=blue];
// [Asm]   r15 [label="a5", color=blue];
// [Asm]   r24 [label="zero", color=blue];
// [Asm]   r25 [label="v4 ← a0", color=green];
// [Asm]   r2 [label="v9 ← a0", color=green];
// [Asm]   r16 [label="a6", color=blue];
// [Asm]   r18 [label="v11 ← a0", color=green];
// [Asm]   r19 [label="v17 ← a1", color=green];
// [Asm]   r21 [label="v19 ← a2", color=green];
// [Asm]   r17 [label="a7", color=blue];
// [Asm]   r12 [label="a2", color=blue];
// [Asm]   r13 -- r24;
// [Asm]   r3 -- r25;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r26;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r5 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r0 -- r24;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r23;
// [Asm]   r7 -- r24;
// [Asm]   r5 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r11 -- r23;
// [Asm]   r3 -- r11;
// [Asm]   r17 -- r24;
// [Asm]   r1 -- r17;
// [Asm]   r18 -- r21;
// [Asm]   r3 -- r28;
// [Asm]   r27 -- r28;
// [Asm]   r3 -- r24;
// [Asm]   r11 -- r24;
// [Asm]   r14 -- r24;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r26;
// [Asm]   r5 -- r16;
// [Asm]   r5 -- r11;
// [Asm]   r24 -- r28;
// [Asm]   r24 -- r29;
// [Asm]   r24 -- r26;
// [Asm]   r3 -- r5;
// [Asm]   r6 -- r24;
// [Asm]   r1 -- r28;
// [Asm]   r24 -- r30;
// [Asm]   r8 -- r24;
// [Asm]   r3 -- r8;
// [Asm]   r12 -- r24;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r28;
// [Asm]   r5 -- r6;
// [Asm]   r18 -- r19;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r9;
// [Asm]   r5 -- r26;
// [Asm]   r5 -- r24;
// [Asm]   r0 -- r3;
// [Asm]   r3 -- r13;
// [Asm]   r9 -- r24;
// [Asm]   r24 -- r27;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r25;
// [Asm]   r1 -- r27;
// [Asm]   r1 -- r2;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r14;
// [Asm]   r3 -- r27;
// [Asm]   r15 -- r24;
// [Asm]   r23 -- r24;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r5 -- r7;
// [Asm]   r12 -- r23;
// [Asm]   r5 -- r14;
// [Asm]   r18 -- r20;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r2 -- r24;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r16 -- r24;
// [Asm]   r24 -- r25;
// [Asm]   r2 -- r3;
// [Asm]   r20 -- r21;
// [Asm]   r10 -- r24;
// [Asm]   r5 -- r15;
// [Asm]   r1 -- r24;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:s10-> 1:s11-> 2:v9-> 3:v3-> 24:zero-> 28:v8-> 27:v7-> 5:a0-> 6:t0-> 7:t1-> 8:t2-> 9:t3-> 10:t4-> 11:a1-> 12:a2-> 13:a3-> 14:a4-> 15:a5-> 16:a6-> 17:a7-> 23:v2-> 26:v24-> 4:v20-> 25:v4-> 18:v11-> 19:v17-> 20:v6-> 21:v19-> 29:v15-> 30:v5-> 22:v14"
// [Asm]   comment = "v6<-a1;v2<-a0;v3<-s0;v24<-a1;v7<-a0;v20<-a1;v15<-a0;v8<-a1;v14<-a0;v5<-a0;v4<-a0;v9<-a0;v11<-a0;v17<-a1;v19<-a2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux6l1_0"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv s10, v3 ->   mv s10, s0
// [Asm] subst   ld v20, 0(v3) ->   ld a1, 0(s0)
// [Asm] subst   jalr v20 ->   jalr a1
// [Asm] subst   addi v17, s11, -8 ->   addi a1, s11, -8
// [Asm] subst   andi v6, v17, -8 ->   andi a1, a1, -8
// [Asm] subst   mv s11, v6 ->   mv s11, a1
// [Asm] subst   li v19, 1 ->   li a2, 1
// [Asm] subst   sw v19, 0(v6) ->   sw a2, 0(a1)
// [Asm] subst   sw v11, 4(v6) ->   sw a0, 4(a1)
// [Asm] subst   mv v14, v6 ->   mv a0, a1
// [Asm] subst   mv v3, a1 ->   mv s0, a1
// [Asm] subst   mv v4, a2 ->   mv a0, a2
// [Asm] subst   mv s10, v4 ->   mv s10, a0
// [Asm] subst   ld v24, 0(v4) ->   ld a1, 0(a0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   jalr v24 ->   jalr a1
// [Asm] subst   lw v8, 0(v7) ->   lw a1, 0(a0)
// [Asm] subst   lw v9, 4(v7) ->   lw a0, 4(a0)
// [Asm] subst   beq v8, zero, .aux6l1_0_1 ->   beq a1, zero, .aux6l1_0_1
// [Asm] subst   addi v15, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi v5, v15, -8 ->   andi a0, a0, -8
// [Asm] subst   mv s11, v5 ->   mv s11, a0
// [Asm] subst   sw zero, 0(v5) ->   sw zero, 0(a0)
// [Asm] subst   sw zero, 4(v5) ->   sw zero, 4(a0)
// [Asm] subst   j .aux6l1_0_3 ->   j .aux6l1_0_3
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f52) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_52"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_52"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main120l9_17 ->   call main120l9_17
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f10, fpref=$f.2) -> v4, Insn(iref=%3) -> v11, FnParam(fref=f10, fpref=$f.0) -> v2, FnParam(fref=f10, fpref=$f.1) -> v3, BlockParam(bref=b3, bpref=$b.0) -> v13, Insn(iref=%2) -> v10, Insn(iref=%1) -> v9, Self(fref=f10) -> v0, BlockParam(bref=b0, bpref=$b.0) -> v5, BlockParam(bref=b0, bpref=$b.1) -> v6, BlockParam(bref=b0, bpref=$b.2) -> v7, Insn(iref=%0) -> v8, Insn(iref=%4) -> v12
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Asm] defs: [s10]
// [Asm] live_set: [v5, zero, v7, v6]
// [Asm] move_origin: [v5]
// [Asm] defined: s10 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v5, v18, zero, v7, v6]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v18, zero, v7, v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, v18, zero, a0, v7, v6]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0, v7, v6]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v7, v8, v6]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v6]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero, v7, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, v10, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v13]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v5, v6, v10, zero, v7]
// [Asm] move_origin: [v6]
// [Asm] defined: s10 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v5, v6, v14, v10, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v14, v10, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, v6, v14, v10, zero, a0]
// [Asm] move_origin: [v7]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, v6, a1, v14, a0, zero]
// [Asm] move_origin: [v10]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v12]
// [Asm] live_set: [v5, v6, v12, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v12, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v12, zero]
// [Asm] move_origin: [v5]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v12, zero]
// [Asm] move_origin: [v6]
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v12]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move_origin: [v3]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v4]
// [Asm] defined: v7 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move_origin: [v7]
// [Asm] defined: v13 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of fold84l5_10"];
// [Asm]   r0 [label="s10", color=blue];
// [Asm]   r20 [label="v9 ← a0", color=green];
// [Asm]   r23 [label="v12 ← a0", color=green];
// [Asm]   r3 [label="v7 ← s1", color=green];
// [Asm]   r9 [label="t2", color=blue];
// [Asm]   r26 [label="v4 ← a2", color=green];
// [Asm]   r27 [label="v13 ← a0", color=green];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r13 [label="a2", color=blue];
// [Asm]   r4 [label="v6 ← s2", color=green];
// [Asm]   r1 [label="v5 ← s0", color=green];
// [Asm]   r11 [label="t4", color=blue];
// [Asm]   r7 [label="t0", color=blue];
// [Asm]   r10 [label="t3", color=blue];
// [Asm]   r22 [label="v14 ← a2", color=green];
// [Asm]   r14 [label="a3", color=blue];
// [Asm]   r8 [label="t1", color=blue];
// [Asm]   r5 [label="v18 ← a1", color=green];
// [Asm]   r24 [label="v2 ← a0", color=green];
// [Asm]   r15 [label="a4", color=blue];
// [Asm]   r25 [label="v3 ← a1", color=green];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="a5", color=blue];
// [Asm]   r18 [label="a7", color=blue];
// [Asm]   r19 [label="v8 ← a1", color=green];
// [Asm]   r17 [label="a6", color=blue];
// [Asm]   r21 [label="v10 ← a1", color=green];
// [Asm]   r12 [label="a1", color=blue];
// [Asm]   r6 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r2 -- r7;
// [Asm]   r4 -- r22;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r12 -- r24;
// [Asm]   r6 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r8;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r21 -- r22;
// [Asm]   r2 -- r24;
// [Asm]   r24 -- r25;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r23;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r13 -- r24;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r26;
// [Asm]   r6 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r23;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r22;
// [Asm]   r0 -- r21;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r20;
// [Asm]   r6 -- r16;
// [Asm]   r25 -- r26;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r6 -- r12;
// [Asm]   r13 -- r25;
// [Asm]   r24 -- r26;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r8;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r2 -- r14;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r12 -- r22;
// [Asm]   r3 -- r20;
// [Asm]   r1 -- r25;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r4 -- r17;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r4 -- r26;
// [Asm]   r2 -- r3;
// [Asm]   r20 -- r21;
// [Asm]   r4 -- r19;
// [Asm]   r19 -- r20;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:s10-> 1:v5-> 2:zero-> 3:v7-> 4:v6-> 21:v10-> 6:a0-> 22:v14-> 12:a1-> 5:v18-> 7:t0-> 8:t1-> 9:t2-> 10:t3-> 11:t4-> 13:a2-> 14:a3-> 15:a4-> 16:a5-> 17:a6-> 18:a7-> 20:v9-> 19:v8-> 23:v12-> 24:v2-> 25:v3-> 26:v4-> 27:v13"
// [Asm]   comment = "v9<-a0;v12<-a0;v7<-s1;v4<-a2;v13<-a0;v6<-s2;v5<-s0;v14<-a2;v18<-a1;v2<-a0;v3<-a1;v8<-a1;v10<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of fold84l5_10"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv s10, v5 ->   mv s10, s0
// [Asm] subst   ld v18, 0(v5) ->   ld a1, 0(s0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   jalr v18 ->   jalr a1
// [Asm] subst   mv v8, a0 ->   mv a1, a0
// [Asm] subst   lw v9, 0(v8) ->   lw a0, 0(a1)
// [Asm] subst   lw v10, 4(v8) ->   lw a1, 4(a1)
// [Asm] subst   beq v9, zero, .fold84l5_10_1 ->   beq a0, zero, .fold84l5_10_1
// [Asm] subst   ret ->   ret
// [Asm] subst   mv s10, v6 ->   mv s10, s2
// [Asm] subst   ld v14, 0(v6) ->   ld a2, 0(s2)
// [Asm] subst   mv a0, v7 ->   mv a0, s1
// [Asm] subst   jalr v14 ->   jalr a2
// [Asm] subst   mv v7, v12 ->   mv s1, a0
// [Asm] subst   j .fold84l5_10_0 ->   j .fold84l5_10_0
// [Asm] subst   mv v5, v2 ->   mv s0, a0
// [Asm] subst   mv v6, v3 ->   mv s2, a1
// [Asm] subst   mv v7, v4 ->   mv s1, a2
// [Asm] subst   mv v13, v7 ->   mv a0, s1
// [Asm] pre_assigned_registers: FnParam(fref=f5, fpref=$f.0) -> v2, Mem(fref=f5, mref=m0) -> v4, Self(fref=f5) -> v0, FnParam(fref=f5, fpref=$f.1) -> v3, Insn(iref=%0) -> v5
// [Asm] defs: []
// [Asm] live_set: [a1, s11, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, s11, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v4, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: s11 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v2, v8, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of concat41l2_5"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r5 [label="v4 ← a2", color=green];
// [Asm]   r6 [label="v8 ← a3", color=green];
// [Asm]   r4 [label="v6 ← a2", color=green];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r3 [label="v3 ← a1", color=green];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r7 [label="a0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r6;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:v2-> 1:a1-> 2:s11-> 3:v3-> 4:v6-> 5:v4-> 6:v8-> 7:a0"
// [Asm]   comment = "v2<-a0;v4<-a2;v8<-a3;v6<-a2;v3<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of concat41l2_5"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v6, s11, -24 ->   addi a2, s11, -24
// [Asm] subst   andi v4, v6, -8 ->   andi a2, a2, -8
// [Asm] subst   mv s11, v4 ->   mv s11, a2
// [Asm] subst   la v8, aux46l3c0_28 ->   la a3, aux46l3c0_28
// [Asm] subst   sd v8, 0(v4) ->   sd a3, 0(a2)
// [Asm] subst   sd v2, 8(v4) ->   sd a0, 8(a2)
// [Asm] subst   sd v3, 16(v4) ->   sd a1, 16(a2)
// [Asm] subst   mv a0, v4 ->   mv a0, a2
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FreeVar(fvref=^1) -> v3, Self(fref=f36) -> v0, FnParam(fref=f36, fpref=$f.0) -> v2, Insn(iref=%0) -> v4
// [Asm] defs: []
// [Asm] live_set: [a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux81l5c0_36"];
// [Asm]   r0 [label="v0 ← a1", color=green];
// [Asm]   r3 [label="v3 ← a1", color=green];
// [Asm]   r9 [label="t4", color=blue];
// [Asm]   r6 [label="t1", color=blue];
// [Asm]   r13 [label="a5", color=blue];
// [Asm]   r4 [label="a1", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a3", color=blue];
// [Asm]   r7 [label="t2", color=blue];
// [Asm]   r10 [label="a2", color=blue];
// [Asm]   r14 [label="a6", color=blue];
// [Asm]   r8 [label="t3", color=blue];
// [Asm]   r5 [label="t0", color=blue];
// [Asm]   r15 [label="a7", color=blue];
// [Asm]   r2 [label="v2 ← a0", color=green];
// [Asm]   r16 [label="v4 ← a0", color=green];
// [Asm]   r12 [label="a4", color=blue];
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r2 -- r3;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:v0-> 1:a0-> 2:v2-> 3:v3-> 4:a1-> 5:t0-> 6:t1-> 7:t2-> 8:t3-> 9:t4-> 10:a2-> 11:a3-> 12:a4-> 13:a5-> 14:a6-> 15:a7-> 16:v4"
// [Asm]   comment = "v0<-a1;v3<-a1;v2<-a0;v4<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux81l5c0_36"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   lw v3, 8(v0) ->   lw a1, 8(a1)
// [Asm] subst   call aux81l5_8 ->   call aux81l5_8
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Mem(fref=f3, mref=m0) -> v4, FnParam(fref=f3, fpref=$f.0) -> v2, FnParam(fref=f3, fpref=$f.1) -> v3, Self(fref=f3) -> v0, Insn(iref=%0) -> v5
// [Asm] defs: []
// [Asm] live_set: [a1, s11, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, s11, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v3, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v4, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: s11 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v3, v8, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of filter20l1_3"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r5 [label="v4 ← a2", color=green];
// [Asm]   r6 [label="v8 ← a3", color=green];
// [Asm]   r4 [label="v6 ← a2", color=green];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r3 [label="v3 ← a1", color=green];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r7 [label="a0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r6;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:v2-> 1:a1-> 2:s11-> 3:v3-> 4:v6-> 5:v4-> 6:v8-> 7:a0"
// [Asm]   comment = "v2<-a0;v4<-a2;v8<-a3;v6<-a2;v3<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of filter20l1_3"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v6, s11, -24 ->   addi a2, s11, -24
// [Asm] subst   andi v4, v6, -8 ->   andi a2, a2, -8
// [Asm] subst   mv s11, v4 ->   mv s11, a2
// [Asm] subst   la v8, aux25l2c0_24 ->   la a3, aux25l2c0_24
// [Asm] subst   sd v8, 0(v4) ->   sd a3, 0(a2)
// [Asm] subst   sd v3, 8(v4) ->   sd a1, 8(a2)
// [Asm] subst   sd v2, 16(v4) ->   sd a0, 16(a2)
// [Asm] subst   mv a0, v4 ->   mv a0, a2
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f14, fpref=$f.0) -> v2, Self(fref=f14) -> v0, Mem(fref=f14, mref=m0) -> v3, Insn(iref=%0) -> v4
// [Asm] defs: []
// [Asm] live_set: [s11, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: s11 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v7, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of gt108l7_14"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r5 [label="a0", color=blue];
// [Asm]   r4 [label="v7 ← a2", color=green];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r3 [label="v3 ← a1", color=green];
// [Asm]   r2 [label="v5 ← a1", color=green];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:v2-> 1:s11-> 2:v5-> 3:v3-> 4:v7-> 5:a0"
// [Asm]   comment = "v2<-a0;v7<-a2;v3<-a1;v5<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of gt108l7_14"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v5, s11, -16 ->   addi a1, s11, -16
// [Asm] subst   andi v3, v5, -8 ->   andi a1, a1, -8
// [Asm] subst   mv s11, v3 ->   mv s11, a1
// [Asm] subst   la v7, aux111l8c0_45 ->   la a2, aux111l8c0_45
// [Asm] subst   sd v7, 0(v3) ->   sd a2, 0(a1)
// [Asm] subst   sd v2, 8(v3) ->   sd a0, 8(a1)
// [Asm] subst   mv a0, v3 ->   mv a0, a1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Mem(fref=f7, mref=m0) -> v4, Insn(iref=%1) -> v7, FnParam(fref=f7, fpref=$f.1) -> v3, Mem(fref=f7, mref=m1) -> v5, Self(fref=f7) -> v0, FnParam(fref=f7, fpref=$f.0) -> v2, Insn(iref=%0) -> v6
// [Asm] defs: []
// [Asm] live_set: [a1, s11, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, s11, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v2, v11, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v4, s11, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v4, v5, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: s11 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v4, v5, v10, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, v5]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of range58l3_7"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r5 [label="v4 ← a2", color=green];
// [Asm]   r3 [label="v3 ← a1", color=green];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r9 [label="a0", color=blue];
// [Asm]   r6 [label="v8 ← a0", color=green];
// [Asm]   r4 [label="v11 ← a2", color=green];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r7 [label="v5 ← a0", color=green];
// [Asm]   r8 [label="v10 ← a3", color=green];
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r5 -- r6;
// [Asm]   r5 -- r7;
// [Asm]   r3 -- r4;
// [Asm]   r3 -- r7;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r5 -- r8;
// [Asm]   r7 -- r8;
// [Asm]   r3 -- r6;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r0 -- r5;
// [Asm]   r3 -- r8;
// [Asm]   comment = "0:v2-> 1:a1-> 2:s11-> 3:v3-> 5:v4-> 4:v11-> 6:v8-> 7:v5-> 8:v10-> 9:a0"
// [Asm]   comment = "v2<-a0;v4<-a2;v3<-a1;v8<-a0;v11<-a2;v5<-a0;v10<-a3;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of range58l3_7"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v11, s11, -4 ->   addi a2, s11, -4
// [Asm] subst   andi v4, v11, -8 ->   andi a2, a2, -8
// [Asm] subst   mv s11, v4 ->   mv s11, a2
// [Asm] subst   sw v2, 0(v4) ->   sw a0, 0(a2)
// [Asm] subst   addi v8, s11, -24 ->   addi a0, s11, -24
// [Asm] subst   andi v5, v8, -8 ->   andi a0, a0, -8
// [Asm] subst   mv s11, v5 ->   mv s11, a0
// [Asm] subst   la v10, aux65l4c0_32 ->   la a3, aux65l4c0_32
// [Asm] subst   sd v10, 0(v5) ->   sd a3, 0(a0)
// [Asm] subst   sd v3, 8(v5) ->   sd a1, 8(a0)
// [Asm] subst   sd v4, 16(v5) ->   sd a2, 16(a0)
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FreeVar(fvref=^1) -> v3, FnParam(fref=f49, fpref=$f.0) -> v2, Self(fref=f49) -> v0, Insn(iref=%0) -> v4
// [Asm] defs: []
// [Asm] live_set: [a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux117l9c0_49"];
// [Asm]   r0 [label="v0 ← a1", color=green];
// [Asm]   r3 [label="v3 ← a1", color=green];
// [Asm]   r9 [label="t4", color=blue];
// [Asm]   r6 [label="t1", color=blue];
// [Asm]   r13 [label="a5", color=blue];
// [Asm]   r4 [label="a1", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a3", color=blue];
// [Asm]   r7 [label="t2", color=blue];
// [Asm]   r10 [label="a2", color=blue];
// [Asm]   r14 [label="a6", color=blue];
// [Asm]   r8 [label="t3", color=blue];
// [Asm]   r5 [label="t0", color=blue];
// [Asm]   r15 [label="a7", color=blue];
// [Asm]   r2 [label="v2 ← a0", color=green];
// [Asm]   r16 [label="v4 ← a0", color=green];
// [Asm]   r12 [label="a4", color=blue];
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r2 -- r3;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:v0-> 1:a0-> 2:v2-> 3:v3-> 4:a1-> 5:t0-> 6:t1-> 7:t2-> 8:t3-> 9:t4-> 10:a2-> 11:a3-> 12:a4-> 13:a5-> 14:a6-> 15:a7-> 16:v4"
// [Asm]   comment = "v0<-a1;v3<-a1;v2<-a0;v4<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux117l9c0_49"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   lw v3, 8(v0) ->   lw a1, 8(a1)
// [Asm] subst   call aux117l9_15 ->   call aux117l9_15
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] main120l9_17:
// [Asm] # block info: defs: [v3, v25, t1, v14, v13, v22, v7, ft0, ft1, a1, v12, v28, fa1, fa2, ft6, a4, fa6, v8, a6, v19, v4, ft5, ft10, v6, ft7, v11, ft4, v5, ft9, v10, a5, fa4, a0, v30, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v2, v25, v11, v5, v14, v10, a0, v22, v30, v7, a1, v28, v9, zero, v8, v19, v4, v6, v3], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main120l9_17_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   mv a0, zero  # live: [zero, a0]
// [Asm]   li v30, 100  # live: [zero, a0, v30]
// [Asm]   mv a1, v30  # live: [a1, zero, a0]
// [Asm]   call range58l3_7  # live: [zero, a0]
// [Asm]   mv v2, a0  # live: [zero, v2]
// [Asm]   # restore_ctx2  # live: [zero, v2]
// [Asm]   # save_ctx2  # live: [zero, v2]
// [Asm]   mv a0, zero  # live: [zero, a0, v2]
// [Asm]   li v28, 1000  # live: [v28, zero, a0, v2]
// [Asm]   mv a1, v28  # live: [a1, zero, a0, v2]
// [Asm]   call range58l3_7  # live: [zero, a0, v2]
// [Asm]   mv v3, a0  # live: [v2, zero, v3]
// [Asm]   # restore_ctx2  # live: [v2, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, v3]
// [Asm]   mv a0, v2  # live: [zero, a0, v3]
// [Asm]   mv a1, v3  # live: [a1, zero, a0]
// [Asm]   call concat41l2_5  # live: [zero, a0]
// [Asm]   mv v4, a0  # live: [v4, zero]
// [Asm]   # restore_ctx2  # live: [v4, zero]
// [Asm]   # save_ctx2  # live: [v4, zero]
// [Asm]   li v25, 1  # live: [v25, v4, zero]
// [Asm]   mv a0, v25  # live: [v4, zero, a0]
// [Asm]   call addx78l4_9  # live: [v4, zero, a0]
// [Asm]   mv v5, a0  # live: [v4, v5, zero]
// [Asm]   # restore_ctx2  # live: [v4, v5, zero]
// [Asm]   # save_ctx2  # live: [v4, v5, zero]
// [Asm]   mv a0, v4  # live: [v5, zero, a0]
// [Asm]   mv a1, v5  # live: [a1, zero, a0]
// [Asm]   call map1l0_1  # live: [zero, a0]
// [Asm]   mv v6, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   # save_ctx2  # live: [v6, zero]
// [Asm]   li v22, 50  # live: [v6, zero, v22]
// [Asm]   mv a0, v22  # live: [v6, zero, a0]
// [Asm]   call gt108l7_14  # live: [v6, zero, a0]
// [Asm]   mv v7, a0  # live: [v6, zero, v7]
// [Asm]   # restore_ctx2  # live: [v6, zero, v7]
// [Asm]   # save_ctx2  # live: [v6, zero, v7]
// [Asm]   mv a0, v6  # live: [zero, a0, v7]
// [Asm]   mv a1, v7  # live: [a1, zero, a0]
// [Asm]   call filter20l1_3  # live: [zero, a0]
// [Asm]   mv v8, a0  # live: [zero, v8]
// [Asm]   # restore_ctx2  # live: [zero, v8]
// [Asm]   # save_ctx2  # live: [zero, v8]
// [Asm]   li v19, 1200  # live: [v19, zero, v8]
// [Asm]   mv a0, v19  # live: [zero, a0, v8]
// [Asm]   call le114l8_16  # live: [zero, a0, v8]
// [Asm]   mv v9, a0  # live: [zero, v9, v8]
// [Asm]   # restore_ctx2  # live: [zero, v9, v8]
// [Asm]   # save_ctx2  # live: [zero, v9, v8]
// [Asm]   mv a0, v8  # live: [zero, a0, v9]
// [Asm]   mv a1, v9  # live: [a1, zero, a0]
// [Asm]   call filter20l1_3  # live: [zero, a0]
// [Asm]   mv v10, a0  # live: [v10, zero]
// [Asm]   # restore_ctx2  # live: [v10, zero]
// [Asm]   # save_ctx2  # live: [v10, zero]
// [Asm]   mv a0, v10  # live: [zero, a0]
// [Asm]   call sum99l6_12  # live: [zero, a0]
// [Asm]   mv v11, a0  # live: [v11, zero]
// [Asm]   # restore_ctx2  # live: [v11, zero]
// [Asm]   # save_ctx2  # live: [v11, zero]
// [Asm]   mv a0, v11  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v12, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   li v14, 10  # live: [v14, zero]
// [Asm]   mv a0, v14  # live: [zero, a0]
// [Asm]   call minimbt_print_char  # live: [zero, a0]
// [Asm]   mv v13, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] sum99l6_12:
// [Asm] # block info: defs: [v2, t1, v7, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, v5, a0, zero, v7, a2, a1, s11, v9, v3], upward_exposed: [s11, a0, zero], params_defs: []
// [Asm] # live_in: [s11, a0, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .sum99l6_12_0:
// [Asm]   # save_ctx1  # live: [s11, zero, a0]
// [Asm]   mv v2, a0  # live: [s11, zero, v2]
// [Asm]   addi v7, s11, -8  # live: [v7, zero, v2]
// [Asm]   andi v3, v7, -8  # live: [v2, zero, v3]
// [Asm]   mv s11, v3  # live: [v2, zero, v3]
// [Asm]   la v9, add102l7c0_41  # live: [v2, zero, v9, v3]
// [Asm]   sd v9, 0(v3)  # live: [v2, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, v3]
// [Asm]   mv a0, v2  # live: [a0, zero, v3]
// [Asm]   mv a1, v3  # live: [a1, a0, zero]
// [Asm]   mv a2, zero  # live: [a2, a1, a0]
// [Asm]   call fold84l5_10  # live: [a0]
// [Asm]   mv v5, a0  # live: [v5]
// [Asm]   # restore_ctx2  # live: [v5]
// [Asm] # control
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] filter20l1_3:
// [Asm] # block info: defs: [v2, a0, v8, v4, v6, s11, v3], uses: [v2, a0, v8, v4, a1, v6, s11, v3], upward_exposed: [a1, s11, a0], params_defs: []
// [Asm] # live_in: [a1, s11, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .filter20l1_3_0:
// [Asm]   # save_ctx1  # live: [a1, s11, a0]
// [Asm]   mv v2, a0  # live: [a1, s11, v2]
// [Asm]   mv v3, a1  # live: [v3, s11, v2]
// [Asm]   addi v6, s11, -24  # live: [v3, v6, v2]
// [Asm]   andi v4, v6, -8  # live: [v3, v4, v2]
// [Asm]   mv s11, v4  # live: [v3, v4, v2]
// [Asm]   la v8, aux25l2c0_24  # live: [v3, v8, v4, v2]
// [Asm]   sd v8, 0(v4)  # live: [v3, v4, v2]
// [Asm]   sd v3, 8(v4)  # live: [v4, v2]
// [Asm]   sd v2, 16(v4)  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] aux6l1c0_20:
// [Asm] # block info: defs: [v2, t1, v0, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, v4, ft5, ft10, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, v5, a0, v0, v4, a2, a1, s10, v3], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .aux6l1c0_20_0:
// [Asm]   # save_ctx1  # live: [a0, s10]
// [Asm]   mv v0, s10  # live: [v0, a0]
// [Asm]   mv v2, a0  # live: [v0, v2]
// [Asm]   ld v3, 8(v0)  # live: [v2, v0, v3]
// [Asm]   ld v4, 16(v0)  # live: [v2, v4, v3]
// [Asm]   # save_ctx2  # live: [v2, v4, v3]
// [Asm]   mv a0, v2  # live: [v4, a0, v3]
// [Asm]   mv a1, v3  # live: [v4, a1, a0]
// [Asm]   mv a2, v4  # live: [a2, a1, a0]
// [Asm]   call aux6l1_0  # live: [a0]
// [Asm]   mv v5, a0  # live: [v5]
// [Asm]   # restore_ctx2  # live: [v5]
// [Asm] # control
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] add102l7_11:
// [Asm] # block info: defs: [v3, v4, a0, v2], uses: [v3, v4, a1, a0, v2], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .add102l7_11_0:
// [Asm]   # save_ctx1  # live: [a1, a0]
// [Asm]   mv v2, a0  # live: [a1, v2]
// [Asm]   mv v3, a1  # live: [v3, v2]
// [Asm]   add v4, v2, v3  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] map1l0_1:
// [Asm] # block info: defs: [v2, a0, v8, v4, v6, s11, v3], uses: [v2, a0, v8, v4, a1, v6, s11, v3], upward_exposed: [a1, s11, a0], params_defs: []
// [Asm] # live_in: [a1, s11, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .map1l0_1_0:
// [Asm]   # save_ctx1  # live: [a1, s11, a0]
// [Asm]   mv v2, a0  # live: [a1, s11, v2]
// [Asm]   mv v3, a1  # live: [v3, s11, v2]
// [Asm]   addi v6, s11, -24  # live: [v3, v6, v2]
// [Asm]   andi v4, v6, -8  # live: [v3, v4, v2]
// [Asm]   mv s11, v4  # live: [v3, v4, v2]
// [Asm]   la v8, aux6l1c0_20  # live: [v3, v8, v4, v2]
// [Asm]   sd v8, 0(v4)  # live: [v3, v4, v2]
// [Asm]   sd v3, 8(v4)  # live: [v4, v2]
// [Asm]   sd v2, 16(v4)  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] gt108l7_14:
// [Asm] # block info: defs: [v3, v7, v5, s11, a0, v2], uses: [v3, v5, a0, v7, s11, v2], upward_exposed: [s11, a0], params_defs: []
// [Asm] # live_in: [s11, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .gt108l7_14_0:
// [Asm]   # save_ctx1  # live: [s11, a0]
// [Asm]   mv v2, a0  # live: [s11, v2]
// [Asm]   addi v5, s11, -16  # live: [v5, v2]
// [Asm]   andi v3, v5, -8  # live: [v2, v3]
// [Asm]   mv s11, v3  # live: [v2, v3]
// [Asm]   la v7, aux111l8c0_45  # live: [v2, v7, v3]
// [Asm]   sd v7, 0(v3)  # live: [v2, v3]
// [Asm]   sd v2, 8(v3)  # live: [v3]
// [Asm] # control
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] aux6l1_0:
// [Asm] # block info: defs: [v2, t1, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v24, a3, s10, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [a0, zero, v7, v8, a2, v4, a1, v24], upward_exposed: [a2, a1, a0, zero], params_defs: []
// [Asm] # live_in: [a2, a1, s11, a0, zero], live_out: [s11, zero, v9, v3]
// [Asm] # block parameters: []
// [Asm] .aux6l1_0_0:
// [Asm]   # save_ctx1  # live: [a2, a1, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, s11, zero]
// [Asm]   mv v3, a1  # live: [a2, s11, zero, v3]
// [Asm]   mv v4, a2  # live: [v4, s11, zero, v3]
// [Asm]   mv s10, v4  # live: [v4, s11, zero, v3]
// [Asm]   ld v24, 0(v4)  # live: [s11, v24, zero, v3]
// [Asm]   # save_ctx2  # live: [s11, v24, zero, v3]
// [Asm]   mv a0, zero  # live: [s11, v24, zero, a0, v3]
// [Asm]   jalr v24  # live: [s11, zero, a0, v3]
// [Asm]   mv v7, a0  # live: [v7, s11, zero, v3]
// [Asm]   # restore_ctx2  # live: [v7, s11, zero, v3]
// [Asm]   lw v8, 0(v7)  # live: [v8, v7, s11, zero, v3]
// [Asm]   lw v9, 4(v7)  # live: [v8, s11, zero, v9, v3]
// [Asm] # control
// [Asm]   beq v8, zero, .aux6l1_0_1  # live: [s11, zero, v9, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, ft0, ft1, a1, s11, fa1, fa2, ft6, v20, a4, fa6, a6, v19, ft5, ft10, v6, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v11, a0, v20, v19, v17, v6, s11, v9, v3], upward_exposed: [s11, v9, v3], params_defs: []
// [Asm] # live_in: [s11, v9, v3], live_out: [v14]
// [Asm] # block parameters: []
// [Asm] .aux6l1_0_2:
// [Asm]   mv s10, v3  # live: [s11, v9, v3]
// [Asm]   ld v20, 0(v3)  # live: [s11, v9, v20]
// [Asm]   # save_ctx2  # live: [s11, v9, v20]
// [Asm]   mv a0, v9  # live: [s11, a0, v20]
// [Asm]   jalr v20  # live: [s11, a0]
// [Asm]   mv v11, a0  # live: [v11, s11]
// [Asm]   # restore_ctx2  # live: [v11, s11]
// [Asm]   addi v17, s11, -8  # live: [v11, v17]
// [Asm]   andi v6, v17, -8  # live: [v11, v6]
// [Asm]   mv s11, v6  # live: [v11, v6]
// [Asm]   li v19, 1  # live: [v11, v19, v6]
// [Asm]   sw v19, 0(v6)  # live: [v11, v6]
// [Asm]   sw v11, 4(v6)  # live: [v6]
// [Asm] # control
// [Asm]   mv v14, v6  # live: [v14]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v14, a0], upward_exposed: [v14], params_defs: [v14]
// [Asm] # live_in: [v14], live_out: []
// [Asm] # block parameters: [v14]
// [Asm] .aux6l1_0_3:
// [Asm] # control
// [Asm]   mv a0, v14  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v5, v14, s11, v15], uses: [v5, s11, v15, zero], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: [v14]
// [Asm] # block parameters: []
// [Asm] .aux6l1_0_1:
// [Asm]   addi v15, s11, -8  # live: [v15, zero]
// [Asm]   andi v5, v15, -8  # live: [v5, zero]
// [Asm]   mv s11, v5  # live: [v5, zero]
// [Asm]   sw zero, 0(v5)  # live: [v5, zero]
// [Asm]   sw zero, 4(v5)  # live: [v5]
// [Asm] # control
// [Asm]   mv v14, v5  # live: [v14]
// [Asm]   j .aux6l1_0_3  # live: [v14]
// [Asm] 
// [Asm] # leaf false
// [Asm] aux117l9c0_49:
// [Asm] # block info: defs: [v2, t1, v0, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, a0, v0, v4, a1, s10, v3], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .aux117l9c0_49_0:
// [Asm]   # save_ctx1  # live: [a0, s10]
// [Asm]   mv v0, s10  # live: [v0, a0]
// [Asm]   mv v2, a0  # live: [v0, v2]
// [Asm]   lw v3, 8(v0)  # live: [v2, v3]
// [Asm]   # save_ctx2  # live: [v2, v3]
// [Asm]   mv a0, v2  # live: [a0, v3]
// [Asm]   mv a1, v3  # live: [a1, a0]
// [Asm]   call aux117l9_15  # live: [a0]
// [Asm]   mv v4, a0  # live: [v4]
// [Asm]   # restore_ctx2  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] add102l7c0_41:
// [Asm] # block info: defs: [v2, t1, v0, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, a0, v4, a1, s10, v3], upward_exposed: [a1, s10, a0], params_defs: []
// [Asm] # live_in: [a1, s10, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .add102l7c0_41_0:
// [Asm]   # save_ctx1  # live: [a1, a0, s10]
// [Asm]   mv v0, s10  # live: [a1, a0]
// [Asm]   mv v2, a0  # live: [a1, v2]
// [Asm]   mv v3, a1  # live: [v2, v3]
// [Asm]   # save_ctx2  # live: [v2, v3]
// [Asm]   mv a0, v2  # live: [a0, v3]
// [Asm]   mv a1, v3  # live: [a1, a0]
// [Asm]   call add102l7_11  # live: [a0]
// [Asm]   mv v4, a0  # live: [v4]
// [Asm]   # restore_ctx2  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] aux46l3c0_28:
// [Asm] # block info: defs: [v2, t1, v0, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, v4, ft5, ft10, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, v5, a0, v0, v4, a2, a1, s10, v3], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .aux46l3c0_28_0:
// [Asm]   # save_ctx1  # live: [a0, s10]
// [Asm]   mv v0, s10  # live: [v0, a0]
// [Asm]   mv v2, a0  # live: [v0, v2]
// [Asm]   ld v3, 8(v0)  # live: [v2, v0, v3]
// [Asm]   ld v4, 16(v0)  # live: [v2, v4, v3]
// [Asm]   # save_ctx2  # live: [v2, v4, v3]
// [Asm]   mv a0, v2  # live: [v4, a0, v3]
// [Asm]   mv a1, v3  # live: [v4, a1, a0]
// [Asm]   mv a2, v4  # live: [a2, a1, a0]
// [Asm]   call aux46l3_4  # live: [a0]
// [Asm]   mv v5, a0  # live: [v5]
// [Asm]   # restore_ctx2  # live: [v5]
// [Asm] # control
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] addx78l4_9:
// [Asm] # block info: defs: [v3, v7, v5, s11, a0, v2], uses: [v3, v5, a0, v7, s11, v2], upward_exposed: [s11, a0], params_defs: []
// [Asm] # live_in: [s11, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .addx78l4_9_0:
// [Asm]   # save_ctx1  # live: [s11, a0]
// [Asm]   mv v2, a0  # live: [s11, v2]
// [Asm]   addi v5, s11, -16  # live: [v5, v2]
// [Asm]   andi v3, v5, -8  # live: [v2, v3]
// [Asm]   mv s11, v3  # live: [v2, v3]
// [Asm]   la v7, aux81l5c0_36  # live: [v2, v7, v3]
// [Asm]   sd v7, 0(v3)  # live: [v2, v3]
// [Asm]   sd v2, 8(v3)  # live: [v3]
// [Asm] # control
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_52  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] aux111l8c0_45:
// [Asm] # block info: defs: [v2, t1, v0, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, a0, v0, v4, a1, s10, v3], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .aux111l8c0_45_0:
// [Asm]   # save_ctx1  # live: [a0, s10]
// [Asm]   mv v0, s10  # live: [v0, a0]
// [Asm]   mv v2, a0  # live: [v0, v2]
// [Asm]   lw v3, 8(v0)  # live: [v2, v3]
// [Asm]   # save_ctx2  # live: [v2, v3]
// [Asm]   mv a0, v2  # live: [a0, v3]
// [Asm]   mv a1, v3  # live: [a1, a0]
// [Asm]   call aux111l8_13  # live: [a0]
// [Asm]   mv v4, a0  # live: [v4]
// [Asm]   # restore_ctx2  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] aux65l4_6:
// [Asm] # block info: defs: [v3, v7, v4, v2], uses: [v3, a2, v4, a1, a0, v7], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, s11, a0, zero], live_out: [v4, s11, zero, v7]
// [Asm] # block parameters: []
// [Asm] .aux65l4_6_0:
// [Asm]   # save_ctx1  # live: [a2, a1, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, s11, zero]
// [Asm]   mv v3, a1  # live: [a2, s11, zero, v3]
// [Asm]   mv v4, a2  # live: [v4, s11, zero, v3]
// [Asm]   lw v7, 0(v4)  # live: [v3, v4, s11, zero, v7]
// [Asm] # control
// [Asm]   beq v7, v3, .aux65l4_6_1  # live: [v4, s11, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v16, v6, s11, v18, v9, v13], uses: [v16, v18, v7, v4, v6, s11, v9], upward_exposed: [v4, s11, v7], params_defs: []
// [Asm] # live_in: [v4, s11, v7], live_out: [v13]
// [Asm] # block parameters: []
// [Asm] .aux65l4_6_2:
// [Asm]   addi v9, v7, 1  # live: [v4, s11, v9, v7]
// [Asm]   sw v9, 0(v4)  # live: [s11, v7]
// [Asm]   addi v16, s11, -8  # live: [v16, v7]
// [Asm]   andi v6, v16, -8  # live: [v6, v7]
// [Asm]   mv s11, v6  # live: [v6, v7]
// [Asm]   li v18, 1  # live: [v6, v18, v7]
// [Asm]   sw v18, 0(v6)  # live: [v6, v7]
// [Asm]   sw v7, 4(v6)  # live: [v6]
// [Asm] # control
// [Asm]   mv v13, v6  # live: [v13]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v13, a0], upward_exposed: [v13], params_defs: [v13]
// [Asm] # live_in: [v13], live_out: []
// [Asm] # block parameters: [v13]
// [Asm] .aux65l4_6_3:
// [Asm] # control
// [Asm]   mv a0, v13  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v14, v5, s11, v13], uses: [v14, v5, s11, zero], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: [v13]
// [Asm] # block parameters: []
// [Asm] .aux65l4_6_1:
// [Asm]   addi v14, s11, -8  # live: [v14, zero]
// [Asm]   andi v5, v14, -8  # live: [v5, zero]
// [Asm]   mv s11, v5  # live: [v5, zero]
// [Asm]   sw zero, 0(v5)  # live: [v5, zero]
// [Asm]   sw zero, 4(v5)  # live: [v5]
// [Asm] # control
// [Asm]   mv v13, v5  # live: [v13]
// [Asm]   j .aux65l4_6_3  # live: [v13]
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_52:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_52_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main120l9_17  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] aux81l5_8:
// [Asm] # block info: defs: [v3, v4, a0, v2], uses: [v2, v4, a1, a0, v3], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .aux81l5_8_0:
// [Asm]   # save_ctx1  # live: [a1, a0]
// [Asm]   mv v2, a0  # live: [a1, v2]
// [Asm]   mv v3, a1  # live: [v2, v3]
// [Asm]   add v4, v3, v2  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] range58l3_7:
// [Asm] # block info: defs: [v2, v11, v5, v10, a0, v8, v4, s11, v3], uses: [v3, v11, v5, v10, a0, v8, v4, a1, s11, v2], upward_exposed: [a1, s11, a0], params_defs: []
// [Asm] # live_in: [a1, s11, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .range58l3_7_0:
// [Asm]   # save_ctx1  # live: [a1, s11, a0]
// [Asm]   mv v2, a0  # live: [a1, s11, v2]
// [Asm]   mv v3, a1  # live: [v2, s11, v3]
// [Asm]   addi v11, s11, -4  # live: [v2, v11, v3]
// [Asm]   andi v4, v11, -8  # live: [v2, v4, v3]
// [Asm]   mv s11, v4  # live: [v2, v4, s11, v3]
// [Asm]   sw v2, 0(v4)  # live: [v4, s11, v3]
// [Asm]   addi v8, s11, -24  # live: [v8, v4, v3]
// [Asm]   andi v5, v8, -8  # live: [v4, v5, v3]
// [Asm]   mv s11, v5  # live: [v4, v5, v3]
// [Asm]   la v10, aux65l4c0_32  # live: [v4, v5, v10, v3]
// [Asm]   sd v10, 0(v5)  # live: [v4, v5, v3]
// [Asm]   sd v3, 8(v5)  # live: [v4, v5]
// [Asm]   sd v4, 16(v5)  # live: [v5]
// [Asm] # control
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] fold84l5_10:
// [Asm] # block info: defs: [v3, v7, v4, v6, v5, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .fold84l5_10_5:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm]   mv v6, v3  # live: [v4, v5, v6, zero]
// [Asm]   mv v7, v4  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, s10, v9, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v5, v18, zero, a0, v8, v9], upward_exposed: [v5, zero], params_defs: [v5, v6, v7]
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v6, v5, v10, zero, v7]
// [Asm] # block parameters: [v5, v6, v7]
// [Asm] .fold84l5_10_0:
// [Asm]   mv s10, v5  # live: [v5, zero, v7, v6]
// [Asm]   ld v18, 0(v5)  # live: [v5, v18, zero, v7, v6]
// [Asm]   # save_ctx2  # live: [v5, v18, zero, v7, v6]
// [Asm]   mv a0, zero  # live: [v5, v18, zero, a0, v7, v6]
// [Asm]   jalr v18  # live: [v5, zero, a0, v7, v6]
// [Asm]   mv v8, a0  # live: [v5, zero, v7, v8, v6]
// [Asm]   # restore_ctx2  # live: [v5, zero, v7, v8, v6]
// [Asm]   lw v9, 0(v8)  # live: [v5, zero, v7, v8, v6, v9]
// [Asm]   lw v10, 4(v8)  # live: [v5, v10, zero, v7, v6, v9]
// [Asm] # control
// [Asm]   beq v9, zero, .fold84l5_10_1  # live: [v6, v5, v10, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v7, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v14, v5, v10, a0, v7, v6, a1, v12], upward_exposed: [v6, v5, v10, v7], params_defs: []
// [Asm] # live_in: [v6, v5, v10, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .fold84l5_10_2:
// [Asm]   mv s10, v6  # live: [v5, v6, v10, zero, v7]
// [Asm]   ld v14, 0(v6)  # live: [v5, v6, v14, v10, zero, v7]
// [Asm]   # save_ctx2  # live: [v5, v6, v14, v10, zero, v7]
// [Asm]   mv a0, v7  # live: [v5, v6, v14, v10, zero, a0]
// [Asm]   mv a1, v10  # live: [v5, v6, a1, v14, a0, zero]
// [Asm]   jalr v14  # live: [v5, v6, zero, a0]
// [Asm]   mv v12, a0  # live: [v5, v6, v12, zero]
// [Asm]   # restore_ctx2  # live: [v5, v6, v12, zero]
// [Asm] # control
// [Asm]   mv v5, v5  # live: [v5, v6, v12, zero]
// [Asm]   mv v6, v6  # live: [v5, v6, v12, zero]
// [Asm]   mv v7, v12  # live: [v5, v6, zero, v7]
// [Asm]   j .fold84l5_10_0  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v13], uses: [v7], upward_exposed: [v7], params_defs: []
// [Asm] # live_in: [v7], live_out: [v13]
// [Asm] # block parameters: []
// [Asm] .fold84l5_10_1:
// [Asm] # control
// [Asm]   mv v13, v7  # live: [v13]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v13, a0], upward_exposed: [v13], params_defs: [v13]
// [Asm] # live_in: [v13], live_out: []
// [Asm] # block parameters: [v13]
// [Asm] .fold84l5_10_3:
// [Asm] # control
// [Asm]   mv a0, v13  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] aux81l5c0_36:
// [Asm] # block info: defs: [v2, t1, v0, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, a0, v0, v4, a1, s10, v3], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .aux81l5c0_36_0:
// [Asm]   # save_ctx1  # live: [a0, s10]
// [Asm]   mv v0, s10  # live: [v0, a0]
// [Asm]   mv v2, a0  # live: [v0, v2]
// [Asm]   lw v3, 8(v0)  # live: [v2, v3]
// [Asm]   # save_ctx2  # live: [v2, v3]
// [Asm]   mv a0, v2  # live: [a0, v3]
// [Asm]   mv a1, v3  # live: [a1, a0]
// [Asm]   call aux81l5_8  # live: [a0]
// [Asm]   mv v4, a0  # live: [v4]
// [Asm]   # restore_ctx2  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] aux65l4c0_32:
// [Asm] # block info: defs: [v2, t1, v0, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, v4, ft5, ft10, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, v5, a0, v0, v4, a2, a1, s10, v3], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .aux65l4c0_32_0:
// [Asm]   # save_ctx1  # live: [a0, s10]
// [Asm]   mv v0, s10  # live: [v0, a0]
// [Asm]   mv v2, a0  # live: [v0, v2]
// [Asm]   lw v3, 8(v0)  # live: [v2, v0, v3]
// [Asm]   ld v4, 16(v0)  # live: [v2, v4, v3]
// [Asm]   # save_ctx2  # live: [v2, v4, v3]
// [Asm]   mv a0, v2  # live: [v4, a0, v3]
// [Asm]   mv a1, v3  # live: [v4, a1, a0]
// [Asm]   mv a2, v4  # live: [a2, a1, a0]
// [Asm]   call aux65l4_6  # live: [a0]
// [Asm]   mv v5, a0  # live: [v5]
// [Asm]   # restore_ctx2  # live: [v5]
// [Asm] # control
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] aux117l9_15:
// [Asm] # block info: defs: [v3, v2], uses: [v2, a1, a0, v3], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, a0, zero], live_out: [zero]
// [Asm] # block parameters: []
// [Asm] .aux117l9_15_0:
// [Asm]   # save_ctx1  # live: [a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, zero, v3]
// [Asm] # control
// [Asm]   blt v3, v2, .aux117l9_15_2  # live: [zero]
// [Asm] 
// [Asm] # block info: defs: [v5], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .aux117l9_15_1:
// [Asm] # control
// [Asm]   mv v5, zero  # live: [v5]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v5, a0], upward_exposed: [v5], params_defs: [v5]
// [Asm] # live_in: [v5], live_out: []
// [Asm] # block parameters: [v5]
// [Asm] .aux117l9_15_3:
// [Asm] # control
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v6, v5], uses: [v6], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .aux117l9_15_2:
// [Asm] # control
// [Asm]   li v6, 1  # live: [v6]
// [Asm]   mv v5, v6  # live: [v5]
// [Asm]   j .aux117l9_15_3  # live: [v5]
// [Asm] 
// [Asm] # leaf false
// [Asm] aux46l3_4:
// [Asm] # block info: defs: [v2, t1, v7, ft0, ft1, a1, fa1, fa2, ft6, v20, a4, fa6, v8, a6, ft10, v4, ft5, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [a0, zero, v20, v7, a2, a1, v6, v3], upward_exposed: [a2, a1, a0, zero], params_defs: []
// [Asm] # live_in: [a2, a1, s11, a0, zero], live_out: [v4, s11, zero, v8]
// [Asm] # block parameters: []
// [Asm] .aux46l3_4_0:
// [Asm]   # save_ctx1  # live: [a2, a1, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, s11, zero]
// [Asm]   mv v3, a1  # live: [a2, s11, zero, v3]
// [Asm]   mv v4, a2  # live: [v4, s11, zero, v3]
// [Asm]   mv s10, v3  # live: [v4, s11, zero, v3]
// [Asm]   ld v20, 0(v3)  # live: [v4, s11, zero, v20]
// [Asm]   # save_ctx2  # live: [v4, s11, zero, v20]
// [Asm]   mv a0, zero  # live: [v4, s11, zero, a0, v20]
// [Asm]   jalr v20  # live: [v4, s11, zero, a0]
// [Asm]   mv v6, a0  # live: [v4, v6, s11, zero]
// [Asm]   # restore_ctx2  # live: [v4, v6, s11, zero]
// [Asm]   lw v7, 0(v6)  # live: [v4, v6, s11, zero, v7]
// [Asm]   lw v8, 4(v6)  # live: [v7, v4, s11, zero, v8]
// [Asm] # control
// [Asm]   bne v7, zero, .aux46l3_4_2  # live: [v4, s11, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [t1, v13, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v11, v4, zero, a0, v13], upward_exposed: [v4, zero], params_defs: []
// [Asm] # live_in: [v4, zero], live_out: [v12]
// [Asm] # block parameters: []
// [Asm] .aux46l3_4_1:
// [Asm]   mv s10, v4  # live: [v4, zero]
// [Asm]   ld v13, 0(v4)  # live: [v13, zero]
// [Asm]   # save_ctx2  # live: [v13, zero]
// [Asm]   mv a0, zero  # live: [a0, v13]
// [Asm]   jalr v13  # live: [a0]
// [Asm]   mv v11, a0  # live: [v11]
// [Asm]   # restore_ctx2  # live: [v11]
// [Asm] # control
// [Asm]   mv v12, v11  # live: [v12]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v12, a0], upward_exposed: [v12], params_defs: [v12]
// [Asm] # live_in: [v12], live_out: []
// [Asm] # block parameters: [v12]
// [Asm] .aux46l3_4_3:
// [Asm] # control
// [Asm]   mv a0, v12  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v5, v17, s11, v15, v12], uses: [v5, v17, v15, s11, v8], upward_exposed: [s11, v8], params_defs: []
// [Asm] # live_in: [s11, v8], live_out: [v12]
// [Asm] # block parameters: []
// [Asm] .aux46l3_4_2:
// [Asm]   addi v15, s11, -8  # live: [v15, v8]
// [Asm]   andi v5, v15, -8  # live: [v5, v8]
// [Asm]   mv s11, v5  # live: [v5, v8]
// [Asm]   li v17, 1  # live: [v5, v17, v8]
// [Asm]   sw v17, 0(v5)  # live: [v5, v8]
// [Asm]   sw v8, 4(v5)  # live: [v5]
// [Asm] # control
// [Asm]   mv v12, v5  # live: [v12]
// [Asm]   j .aux46l3_4_3  # live: [v12]
// [Asm] 
// [Asm] # leaf true
// [Asm] concat41l2_5:
// [Asm] # block info: defs: [v2, a0, v8, v4, v6, s11, v3], uses: [v3, a0, v8, v4, a1, v6, s11, v2], upward_exposed: [a1, s11, a0], params_defs: []
// [Asm] # live_in: [a1, s11, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .concat41l2_5_0:
// [Asm]   # save_ctx1  # live: [a1, s11, a0]
// [Asm]   mv v2, a0  # live: [a1, s11, v2]
// [Asm]   mv v3, a1  # live: [v2, s11, v3]
// [Asm]   addi v6, s11, -24  # live: [v2, v6, v3]
// [Asm]   andi v4, v6, -8  # live: [v2, v4, v3]
// [Asm]   mv s11, v4  # live: [v2, v4, v3]
// [Asm]   la v8, aux46l3c0_28  # live: [v2, v8, v4, v3]
// [Asm]   sd v8, 0(v4)  # live: [v2, v4, v3]
// [Asm]   sd v2, 8(v4)  # live: [v4, v3]
// [Asm]   sd v3, 16(v4)  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] aux25l2c0_24:
// [Asm] # block info: defs: [v2, t1, v0, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, v4, ft5, ft10, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, v5, a0, v0, v4, a2, a1, s10, v3], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .aux25l2c0_24_0:
// [Asm]   # save_ctx1  # live: [a0, s10]
// [Asm]   mv v0, s10  # live: [v0, a0]
// [Asm]   mv v2, a0  # live: [v0, v2]
// [Asm]   ld v3, 8(v0)  # live: [v2, v0, v3]
// [Asm]   ld v4, 16(v0)  # live: [v2, v4, v3]
// [Asm]   # save_ctx2  # live: [v2, v4, v3]
// [Asm]   mv a0, v2  # live: [v4, a0, v3]
// [Asm]   mv a1, v3  # live: [v4, a1, a0]
// [Asm]   mv a2, v4  # live: [a2, a1, a0]
// [Asm]   call aux25l2_2  # live: [a0]
// [Asm]   mv v5, a0  # live: [v5]
// [Asm]   # restore_ctx2  # live: [v5]
// [Asm] # control
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] le114l8_16:
// [Asm] # block info: defs: [v3, v7, v5, s11, a0, v2], uses: [v3, v5, a0, v7, s11, v2], upward_exposed: [s11, a0], params_defs: []
// [Asm] # live_in: [s11, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .le114l8_16_0:
// [Asm]   # save_ctx1  # live: [s11, a0]
// [Asm]   mv v2, a0  # live: [s11, v2]
// [Asm]   addi v5, s11, -16  # live: [v5, v2]
// [Asm]   andi v3, v5, -8  # live: [v2, v3]
// [Asm]   mv s11, v3  # live: [v2, v3]
// [Asm]   la v7, aux117l9c0_49  # live: [v2, v7, v3]
// [Asm]   sd v7, 0(v3)  # live: [v2, v3]
// [Asm]   sd v2, 8(v3)  # live: [v3]
// [Asm] # control
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] aux25l2_2:
// [Asm] # block info: defs: [v3, v7, v8, v4, v9, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, s11, a0, zero], live_out: [v8, s11, v9, zero, v7]
// [Asm] # block parameters: []
// [Asm] .aux25l2_2_8:
// [Asm]   # save_ctx1  # live: [a2, a1, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, s11, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, s11, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, s11, zero, v3]
// [Asm] # control
// [Asm]   mv v7, v2  # live: [v3, v4, s11, zero, v7]
// [Asm]   mv v8, v3  # live: [v7, v4, s11, zero, v8]
// [Asm]   mv v9, v4  # live: [v7, s11, v9, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, v12, fa1, fa2, v29, ft6, a4, fa6, a6, ft10, ft5, ft7, v11, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v11, v10, v29, zero, a0, v9], upward_exposed: [v9, zero], params_defs: [v8, v9, v7]
// [Asm] # live_in: [v7, s11, v9, zero, v8], live_out: [s11, v12, zero, v9, v8]
// [Asm] # block parameters: [v7, v8, v9]
// [Asm] .aux25l2_2_0:
// [Asm]   mv s10, v9  # live: [zero, v8, s11, v9]
// [Asm]   ld v29, 0(v9)  # live: [zero, v29, v8, s11, v9]
// [Asm]   # save_ctx2  # live: [zero, v29, v8, s11, v9]
// [Asm]   mv a0, zero  # live: [zero, a0, v29, v8, s11, v9]
// [Asm]   jalr v29  # live: [zero, a0, v8, s11, v9]
// [Asm]   mv v10, a0  # live: [v10, zero, v8, s11, v9]
// [Asm]   # restore_ctx2  # live: [v10, zero, v8, s11, v9]
// [Asm]   lw v11, 0(v10)  # live: [v11, v10, zero, v8, s11, v9]
// [Asm]   lw v12, 4(v10)  # live: [v11, zero, v8, s11, v12, v9]
// [Asm] # control
// [Asm]   beq v11, zero, .aux25l2_2_1  # live: [s11, v12, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [v25, t1, v14, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v25, v14, v12, a0, zero, v8], upward_exposed: [v12, zero, v8], params_defs: []
// [Asm] # live_in: [v12, s11, zero, v9, v8], live_out: [s11, v12, zero, v9, v8]
// [Asm] # block parameters: []
// [Asm] .aux25l2_2_2:
// [Asm]   mv s10, v8  # live: [zero, v8, s11, v12, v9]
// [Asm]   ld v25, 0(v8)  # live: [v25, zero, v8, s11, v12, v9]
// [Asm]   # save_ctx2  # live: [v25, zero, v8, s11, v12, v9]
// [Asm]   mv a0, v12  # live: [v25, zero, a0, v8, s11, v12, v9]
// [Asm]   jalr v25  # live: [zero, a0, v8, s11, v12, v9]
// [Asm]   mv v14, a0  # live: [v14, zero, v8, s11, v12, v9]
// [Asm]   # restore_ctx2  # live: [v14, zero, v8, s11, v12, v9]
// [Asm] # control
// [Asm]   bne v14, zero, .aux25l2_2_4  # live: [s11, v12, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [v6, v17, v24, s11, v22], uses: [v6, s11, v24, v12, v22], upward_exposed: [s11, v12], params_defs: []
// [Asm] # live_in: [s11, v12], live_out: [v17]
// [Asm] # block parameters: []
// [Asm] .aux25l2_2_3:
// [Asm]   addi v22, s11, -8  # live: [v12, v22]
// [Asm]   andi v6, v22, -8  # live: [v6, v12]
// [Asm]   mv s11, v6  # live: [v6, v12]
// [Asm]   li v24, 1  # live: [v6, v12, v24]
// [Asm]   sw v24, 0(v6)  # live: [v6, v12]
// [Asm]   sw v12, 4(v6)  # live: [v6]
// [Asm] # control
// [Asm]   mv v17, v6  # live: [v17]
// [Asm] 
// [Asm] # block info: defs: [v19], uses: [v17], upward_exposed: [v17], params_defs: [v17]
// [Asm] # live_in: [v17], live_out: [v19]
// [Asm] # block parameters: [v17]
// [Asm] .aux25l2_2_5:
// [Asm] # control
// [Asm]   mv v19, v17  # live: [v19]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v19, a0], upward_exposed: [v19], params_defs: [v19]
// [Asm] # live_in: [v19], live_out: []
// [Asm] # block parameters: [v19]
// [Asm] .aux25l2_2_6:
// [Asm] # control
// [Asm]   mv a0, v19  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v19, v5, s11, v20], uses: [v5, s11, zero, v20], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: [v19]
// [Asm] # block parameters: []
// [Asm] .aux25l2_2_1:
// [Asm]   addi v20, s11, -8  # live: [zero, v20]
// [Asm]   andi v5, v20, -8  # live: [v5, zero]
// [Asm]   mv s11, v5  # live: [v5, zero]
// [Asm]   sw zero, 0(v5)  # live: [v5, zero]
// [Asm]   sw zero, 4(v5)  # live: [v5]
// [Asm] # control
// [Asm]   mv v19, v5  # live: [v19]
// [Asm]   j .aux25l2_2_6  # live: [v19]
// [Asm] 
// [Asm] # block info: defs: [v7], uses: [zero, v9, v8], upward_exposed: [zero, v9, v8], params_defs: []
// [Asm] # live_in: [s11, zero, v9, v8], live_out: [v8, s11, v9, zero, v7]
// [Asm] # block parameters: []
// [Asm] .aux25l2_2_4:
// [Asm] # control
// [Asm]   mv v7, zero  # live: [v7, s11, v9, zero, v8]
// [Asm]   mv v8, v8  # live: [v7, s11, v9, zero, v8]
// [Asm]   mv v9, v9  # live: [v7, s11, v9, zero, v8]
// [Asm]   j .aux25l2_2_0  # live: [v7, s11, v9, zero, v8]
// [Asm] 
// [Asm] # leaf true
// [Asm] aux111l8_13:
// [Asm] # block info: defs: [v3, v2], uses: [v3, a1, a0, v2], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, a0, zero], live_out: [zero]
// [Asm] # block parameters: []
// [Asm] .aux111l8_13_0:
// [Asm]   # save_ctx1  # live: [a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v3, zero, v2]
// [Asm] # control
// [Asm]   blt v2, v3, .aux111l8_13_2  # live: [zero]
// [Asm] 
// [Asm] # block info: defs: [v5], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .aux111l8_13_1:
// [Asm] # control
// [Asm]   mv v5, zero  # live: [v5]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v5, a0], upward_exposed: [v5], params_defs: [v5]
// [Asm] # live_in: [v5], live_out: []
// [Asm] # block parameters: [v5]
// [Asm] .aux111l8_13_3:
// [Asm] # control
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v6, v5], uses: [v6], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .aux111l8_13_2:
// [Asm] # control
// [Asm]   li v6, 1  # live: [v6]
// [Asm]   mv v5, v6  # live: [v5]
// [Asm]   j .aux111l8_13_3  # live: [v5]
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("map", Fun([Unit], Tuple([Int, Int]))), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int], Int))], body: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Tuple([Int(1), App(Var("f"), [Var("val")])])))}, Var("aux"))}, LetRec({name: ("filter", Fun([Unit], Tuple([Int, Int]))), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int], Int))], body: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Let(("r", Var({val: Some(Int)})), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit])))))}, Var("aux"))}, LetRec({name: ("concat", Fun([Unit], Tuple([Int, Int]))), args: [("stream1", Fun([Unit], Tuple([Int, Int]))), ("stream2", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream1"), [Unit]), If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")])))}, Var("aux"))}, LetRec({name: ("range", Fun([Unit], Tuple([Int, Int]))), args: [("from", Int), ("to", Int)], body: Let(("state", Var({val: Some(Array(Int))})), Array(Int(1), Var("from")), LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: Let(("val", Var({val: Some(Int)})), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))))}, Var("aux")))}, LetRec({name: ("addx", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, Var("aux"))}, LetRec({name: ("fold", Int), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int, Int], Int)), ("acc", Int)], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({name: ("sum", Int), args: [("stream", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), [])))))))))))
// [Knf] build_knf: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Tuple([Int(1), App(Var("f"), [Var("val")])])))}, Var("aux"))
// [Knf] build_knf: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Tuple([Int(1), App(Var("f"), [Var("val")])])))
// [Knf] build_knf: App(Var("stream"), [Unit])
// [Knf] build_knf: Var("stream")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Tuple([Int(1), App(Var("f"), [Var("val")])]))
// [Knf] build_knf: Var("ok")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Tuple([Int(0), Int(0)])
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Tuple([Int(1), App(Var("f"), [Var("val")])])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("f"), [Var("val")])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("val")
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: LetRec({name: ("filter", Fun([Unit], Tuple([Int, Int]))), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int], Int))], body: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Let(("r", Var({val: Some(Int)})), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit])))))}, Var("aux"))}, LetRec({name: ("concat", Fun([Unit], Tuple([Int, Int]))), args: [("stream1", Fun([Unit], Tuple([Int, Int]))), ("stream2", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream1"), [Unit]), If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")])))}, Var("aux"))}, LetRec({name: ("range", Fun([Unit], Tuple([Int, Int]))), args: [("from", Int), ("to", Int)], body: Let(("state", Var({val: Some(Array(Int))})), Array(Int(1), Var("from")), LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: Let(("val", Var({val: Some(Int)})), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))))}, Var("aux")))}, LetRec({name: ("addx", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, Var("aux"))}, LetRec({name: ("fold", Int), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int, Int], Int)), ("acc", Int)], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({name: ("sum", Int), args: [("stream", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), []))))))))))
// [Knf] build_knf: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Let(("r", Var({val: Some(Int)})), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit])))))}, Var("aux"))
// [Knf] build_knf: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Let(("r", Var({val: Some(Int)})), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit])))))
// [Knf] build_knf: App(Var("stream"), [Unit])
// [Knf] build_knf: Var("stream")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Let(("r", Var({val: Some(Int)})), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit]))))
// [Knf] build_knf: Var("ok")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Tuple([Int(0), Int(0)])
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("r", Var({val: Some(Int)})), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit])))
// [Knf] build_knf: App(Var("f"), [Var("val")])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("val")
// [Knf] build_knf: If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit]))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Tuple([Int(1), Var("val")])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("val")
// [Knf] build_knf: App(Var("aux"), [Unit])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Unit
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: LetRec({name: ("concat", Fun([Unit], Tuple([Int, Int]))), args: [("stream1", Fun([Unit], Tuple([Int, Int]))), ("stream2", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream1"), [Unit]), If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")])))}, Var("aux"))}, LetRec({name: ("range", Fun([Unit], Tuple([Int, Int]))), args: [("from", Int), ("to", Int)], body: Let(("state", Var({val: Some(Array(Int))})), Array(Int(1), Var("from")), LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: Let(("val", Var({val: Some(Int)})), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))))}, Var("aux")))}, LetRec({name: ("addx", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, Var("aux"))}, LetRec({name: ("fold", Int), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int, Int], Int)), ("acc", Int)], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({name: ("sum", Int), args: [("stream", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), [])))))))))
// [Knf] build_knf: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream1"), [Unit]), If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")])))}, Var("aux"))
// [Knf] build_knf: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream1"), [Unit]), If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")])))
// [Knf] build_knf: App(Var("stream1"), [Unit])
// [Knf] build_knf: Var("stream1")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")]))
// [Knf] build_knf: Var("ok")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("stream2"), [Unit])
// [Knf] build_knf: Var("stream2")
// [Knf] build_knf: Unit
// [Knf] build_knf: Tuple([Int(1), Var("val")])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("val")
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: LetRec({name: ("range", Fun([Unit], Tuple([Int, Int]))), args: [("from", Int), ("to", Int)], body: Let(("state", Var({val: Some(Array(Int))})), Array(Int(1), Var("from")), LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: Let(("val", Var({val: Some(Int)})), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))))}, Var("aux")))}, LetRec({name: ("addx", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, Var("aux"))}, LetRec({name: ("fold", Int), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int, Int], Int)), ("acc", Int)], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({name: ("sum", Int), args: [("stream", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), []))))))))
// [Knf] build_knf: Let(("state", Var({val: Some(Array(Int))})), Array(Int(1), Var("from")), LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: Let(("val", Var({val: Some(Int)})), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))))}, Var("aux")))
// [Knf] build_knf: Array(Int(1), Var("from"))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("from")
// [Knf] build_knf: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: Let(("val", Var({val: Some(Int)})), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))))}, Var("aux"))
// [Knf] build_knf: Let(("val", Var({val: Some(Int)})), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))))
// [Knf] build_knf: Get(Var("state"), Int(0))
// [Knf] build_knf: Var("state")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")])))
// [Knf] build_knf: Var("val")
// [Knf] build_knf: Var("to")
// [Knf] build_knf: Tuple([Int(0), Int(0)])
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))
// [Knf] build_knf: Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("state")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Var("val"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("val")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Tuple([Int(1), Var("val")])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("val")
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: LetRec({name: ("addx", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, Var("aux"))}, LetRec({name: ("fold", Int), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int, Int], Int)), ("acc", Int)], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({name: ("sum", Int), args: [("stream", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), [])))))))
// [Knf] build_knf: LetRec({name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, Var("aux"))
// [Knf] build_knf: Prim(Var("x"), Var("y"), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: LetRec({name: ("fold", Int), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int, Int], Int)), ("acc", Int)], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({name: ("sum", Int), args: [("stream", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), []))))))
// [Knf] build_knf: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))
// [Knf] build_knf: App(Var("stream"), [Unit])
// [Knf] build_knf: Var("stream")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])]))
// [Knf] build_knf: Var("ok")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("acc")
// [Knf] build_knf: App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])
// [Knf] build_knf: Var("fold")
// [Knf] build_knf: Var("stream")
// [Knf] build_knf: Var("f")
// [Knf] build_knf: App(Var("f"), [Var("acc"), Var("val")])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("acc")
// [Knf] build_knf: Var("val")
// [Knf] build_knf: LetRec({name: ("sum", Int), args: [("stream", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), [])))))
// [Knf] build_knf: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))
// [Knf] build_knf: Prim(Var("x"), Var("y"), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: App(Var("fold"), [Var("stream"), Var("add"), Int(0)])
// [Knf] build_knf: Var("fold")
// [Knf] build_knf: Var("stream")
// [Knf] build_knf: Var("add")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), []))))
// [Knf] build_knf: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))
// [Knf] build_knf: If(LE(Var("x"), Var("y")), Int(0), Int(1))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), [])))
// [Knf] build_knf: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))
// [Knf] build_knf: If(LE(Var("y"), Var("x")), Int(0), Int(1))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))
// [Knf] build_knf: App(Var("range"), [Int(0), Int(100)])
// [Knf] build_knf: Var("range")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(100)
// [Knf] build_knf: Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit))))))))
// [Knf] build_knf: App(Var("range"), [Int(0), Int(1000)])
// [Knf] build_knf: Var("range")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1000)
// [Knf] build_knf: Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))
// [Knf] build_knf: App(Var("concat"), [Var("range100"), Var("range1000")])
// [Knf] build_knf: Var("concat")
// [Knf] build_knf: Var("range100")
// [Knf] build_knf: Var("range1000")
// [Knf] build_knf: Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit))))))
// [Knf] build_knf: App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])])
// [Knf] build_knf: Var("map")
// [Knf] build_knf: Var("catt")
// [Knf] build_knf: App(Var("addx"), [Int(1)])
// [Knf] build_knf: Var("addx")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))
// [Knf] build_knf: App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])])
// [Knf] build_knf: Var("filter")
// [Knf] build_knf: Var("addone")
// [Knf] build_knf: App(Var("gt"), [Int(50)])
// [Knf] build_knf: Var("gt")
// [Knf] build_knf: Int(50)
// [Knf] build_knf: Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit))))
// [Knf] build_knf: App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])])
// [Knf] build_knf: Var("filter")
// [Knf] build_knf: Var("over50")
// [Knf] build_knf: App(Var("le"), [Int(1200)])
// [Knf] build_knf: Var("le")
// [Knf] build_knf: Int(1200)
// [Knf] build_knf: Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))
// [Knf] build_knf: App(Var("sum"), [Var("under1200")])
// [Knf] build_knf: Var("sum")
// [Knf] build_knf: Var("under1200")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit))
// [Knf] build_knf: App(Var("print_int"), [Var("sum")])
// [Knf] build_knf: Var("sum")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)
// [Knf] build_knf: App(Var("print_char"), [Int(10)])
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main120l9_17
// [Main]   .type main120l9_17, @function
// [Main] # leaf false
// [Main] main120l9_17:
// [Main] .main120l9_17_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   mv a0, zero
// [Main]   li a1, 100
// [Main]   call range58l3_7
// [Main]   mv s0, a0
// [Main]   mv a0, zero
// [Main]   li a1, 1000
// [Main]   call range58l3_7
// [Main]   mv a1, a0
// [Main]   mv a0, s0
// [Main]   call concat41l2_5
// [Main]   mv s0, a0
// [Main]   li a0, 1
// [Main]   call addx78l4_9
// [Main]   mv a1, a0
// [Main]   mv a0, s0
// [Main]   call map1l0_1
// [Main]   mv s0, a0
// [Main]   li a0, 50
// [Main]   call gt108l7_14
// [Main]   mv a1, a0
// [Main]   mv a0, s0
// [Main]   call filter20l1_3
// [Main]   mv s0, a0
// [Main]   li a0, 1200
// [Main]   call le114l8_16
// [Main]   mv a1, a0
// [Main]   mv a0, s0
// [Main]   call filter20l1_3
// [Main]   call sum99l6_12
// [Main]   call minimbt_print_int
// [Main]   li a0, 10
// [Main]   call minimbt_print_char
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl sum99l6_12
// [Main]   .type sum99l6_12, @function
// [Main] # leaf false
// [Main] sum99l6_12:
// [Main] .sum99l6_12_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   addi a1, s11, -8
// [Main]   andi a1, a1, -8
// [Main]   mv s11, a1
// [Main]   la a2, add102l7c0_41
// [Main]   sd a2, 0(a1)
// [Main]   mv a2, zero
// [Main]   call fold84l5_10
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl filter20l1_3
// [Main]   .type filter20l1_3, @function
// [Main] # leaf true
// [Main] filter20l1_3:
// [Main] .filter20l1_3_0:
// [Main]   addi a2, s11, -24
// [Main]   andi a2, a2, -8
// [Main]   mv s11, a2
// [Main]   la a3, aux25l2c0_24
// [Main]   sd a3, 0(a2)
// [Main]   sd a1, 8(a2)
// [Main]   sd a0, 16(a2)
// [Main]   mv a0, a2
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux6l1c0_20
// [Main]   .type aux6l1c0_20, @function
// [Main] # leaf false
// [Main] aux6l1c0_20:
// [Main] .aux6l1c0_20_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a1, s10
// [Main]   ld a2, 8(a1)
// [Main]   ld a3, 16(a1)
// [Main]   mv a1, a2
// [Main]   mv a2, a3
// [Main]   call aux6l1_0
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl add102l7_11
// [Main]   .type add102l7_11, @function
// [Main] # leaf true
// [Main] add102l7_11:
// [Main] .add102l7_11_0:
// [Main]   add a0, a0, a1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl map1l0_1
// [Main]   .type map1l0_1, @function
// [Main] # leaf true
// [Main] map1l0_1:
// [Main] .map1l0_1_0:
// [Main]   addi a2, s11, -24
// [Main]   andi a2, a2, -8
// [Main]   mv s11, a2
// [Main]   la a3, aux6l1c0_20
// [Main]   sd a3, 0(a2)
// [Main]   sd a1, 8(a2)
// [Main]   sd a0, 16(a2)
// [Main]   mv a0, a2
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl gt108l7_14
// [Main]   .type gt108l7_14, @function
// [Main] # leaf true
// [Main] gt108l7_14:
// [Main] .gt108l7_14_0:
// [Main]   addi a1, s11, -16
// [Main]   andi a1, a1, -8
// [Main]   mv s11, a1
// [Main]   la a2, aux111l8c0_45
// [Main]   sd a2, 0(a1)
// [Main]   sd a0, 8(a1)
// [Main]   mv a0, a1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux6l1_0
// [Main]   .type aux6l1_0, @function
// [Main] # leaf false
// [Main] aux6l1_0:
// [Main] .aux6l1_0_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   mv s0, a1
// [Main]   mv a0, a2
// [Main]   mv s10, a0
// [Main]   ld a1, 0(a0)
// [Main]   mv a0, zero
// [Main]   jalr a1
// [Main]   lw a1, 0(a0)
// [Main]   lw a0, 4(a0)
// [Main]   beq a1, zero, .aux6l1_0_1
// [Main] 
// [Main] .aux6l1_0_2:
// [Main]   mv s10, s0
// [Main]   ld a1, 0(s0)
// [Main]   jalr a1
// [Main]   addi a1, s11, -8
// [Main]   andi a1, a1, -8
// [Main]   mv s11, a1
// [Main]   li a2, 1
// [Main]   sw a2, 0(a1)
// [Main]   sw a0, 4(a1)
// [Main]   mv a0, a1
// [Main] 
// [Main] .aux6l1_0_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .aux6l1_0_1:
// [Main]   addi a0, s11, -8
// [Main]   andi a0, a0, -8
// [Main]   mv s11, a0
// [Main]   sw zero, 0(a0)
// [Main]   sw zero, 4(a0)
// [Main]   j .aux6l1_0_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux117l9c0_49
// [Main]   .type aux117l9c0_49, @function
// [Main] # leaf false
// [Main] aux117l9c0_49:
// [Main] .aux117l9c0_49_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a1, s10
// [Main]   lw a1, 8(a1)
// [Main]   call aux117l9_15
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl add102l7c0_41
// [Main]   .type add102l7c0_41, @function
// [Main] # leaf false
// [Main] add102l7c0_41:
// [Main] .add102l7c0_41_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a2, s10
// [Main]   call add102l7_11
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux46l3c0_28
// [Main]   .type aux46l3c0_28, @function
// [Main] # leaf false
// [Main] aux46l3c0_28:
// [Main] .aux46l3c0_28_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a1, s10
// [Main]   ld a2, 8(a1)
// [Main]   ld a3, 16(a1)
// [Main]   mv a1, a2
// [Main]   mv a2, a3
// [Main]   call aux46l3_4
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl addx78l4_9
// [Main]   .type addx78l4_9, @function
// [Main] # leaf true
// [Main] addx78l4_9:
// [Main] .addx78l4_9_0:
// [Main]   addi a1, s11, -16
// [Main]   andi a1, a1, -8
// [Main]   mv s11, a1
// [Main]   la a2, aux81l5c0_36
// [Main]   sd a2, 0(a1)
// [Main]   sd a0, 8(a1)
// [Main]   mv a0, a1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_52
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux111l8c0_45
// [Main]   .type aux111l8c0_45, @function
// [Main] # leaf false
// [Main] aux111l8c0_45:
// [Main] .aux111l8c0_45_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a1, s10
// [Main]   lw a1, 8(a1)
// [Main]   call aux111l8_13
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux65l4_6
// [Main]   .type aux65l4_6, @function
// [Main] # leaf true
// [Main] aux65l4_6:
// [Main] .aux65l4_6_0:
// [Main]   mv a0, a1
// [Main]   mv a1, a2
// [Main]   lw a2, 0(a1)
// [Main]   beq a2, a0, .aux65l4_6_1
// [Main] 
// [Main] .aux65l4_6_2:
// [Main]   addi a0, a2, 1
// [Main]   sw a0, 0(a1)
// [Main]   addi a0, s11, -8
// [Main]   andi a0, a0, -8
// [Main]   mv s11, a0
// [Main]   li a1, 1
// [Main]   sw a1, 0(a0)
// [Main]   sw a2, 4(a0)
// [Main] 
// [Main] .aux65l4_6_3:
// [Main]   ret
// [Main] 
// [Main] .aux65l4_6_1:
// [Main]   addi a0, s11, -8
// [Main]   andi a0, a0, -8
// [Main]   mv s11, a0
// [Main]   sw zero, 0(a0)
// [Main]   sw zero, 4(a0)
// [Main]   j .aux65l4_6_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_52
// [Main]   .type T$start_52, @function
// [Main] # leaf false
// [Main] T$start_52:
// [Main] .T$start_52_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main120l9_17
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux81l5_8
// [Main]   .type aux81l5_8, @function
// [Main] # leaf true
// [Main] aux81l5_8:
// [Main] .aux81l5_8_0:
// [Main]   add a0, a1, a0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl range58l3_7
// [Main]   .type range58l3_7, @function
// [Main] # leaf true
// [Main] range58l3_7:
// [Main] .range58l3_7_0:
// [Main]   addi a2, s11, -4
// [Main]   andi a2, a2, -8
// [Main]   mv s11, a2
// [Main]   sw a0, 0(a2)
// [Main]   addi a0, s11, -24
// [Main]   andi a0, a0, -8
// [Main]   mv s11, a0
// [Main]   la a3, aux65l4c0_32
// [Main]   sd a3, 0(a0)
// [Main]   sd a1, 8(a0)
// [Main]   sd a2, 16(a0)
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl fold84l5_10
// [Main]   .type fold84l5_10, @function
// [Main] # leaf false
// [Main] fold84l5_10:
// [Main] .fold84l5_10_5:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s0, a0
// [Main]   mv s2, a1
// [Main]   mv s1, a2
// [Main] 
// [Main] .fold84l5_10_0:
// [Main]   mv s10, s0
// [Main]   ld a1, 0(s0)
// [Main]   mv a0, zero
// [Main]   jalr a1
// [Main]   mv a1, a0
// [Main]   lw a0, 0(a1)
// [Main]   lw a1, 4(a1)
// [Main]   beq a0, zero, .fold84l5_10_1
// [Main] 
// [Main] .fold84l5_10_2:
// [Main]   mv s10, s2
// [Main]   ld a2, 0(s2)
// [Main]   mv a0, s1
// [Main]   jalr a2
// [Main]   mv s1, a0
// [Main]   j .fold84l5_10_0
// [Main] 
// [Main] .fold84l5_10_1:
// [Main]   mv a0, s1
// [Main] 
// [Main] .fold84l5_10_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux81l5c0_36
// [Main]   .type aux81l5c0_36, @function
// [Main] # leaf false
// [Main] aux81l5c0_36:
// [Main] .aux81l5c0_36_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a1, s10
// [Main]   lw a1, 8(a1)
// [Main]   call aux81l5_8
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux65l4c0_32
// [Main]   .type aux65l4c0_32, @function
// [Main] # leaf false
// [Main] aux65l4c0_32:
// [Main] .aux65l4c0_32_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a1, s10
// [Main]   lw a2, 8(a1)
// [Main]   ld a3, 16(a1)
// [Main]   mv a1, a2
// [Main]   mv a2, a3
// [Main]   call aux65l4_6
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux117l9_15
// [Main]   .type aux117l9_15, @function
// [Main] # leaf true
// [Main] aux117l9_15:
// [Main] .aux117l9_15_0:
// [Main]   blt a1, a0, .aux117l9_15_2
// [Main] 
// [Main] .aux117l9_15_1:
// [Main]   mv a0, zero
// [Main] 
// [Main] .aux117l9_15_3:
// [Main]   ret
// [Main] 
// [Main] .aux117l9_15_2:
// [Main]   li a0, 1
// [Main]   j .aux117l9_15_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux46l3_4
// [Main]   .type aux46l3_4, @function
// [Main] # leaf false
// [Main] aux46l3_4:
// [Main] .aux46l3_4_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   mv a0, a1
// [Main]   mv s0, a2
// [Main]   mv s10, a0
// [Main]   ld a1, 0(a0)
// [Main]   mv a0, zero
// [Main]   jalr a1
// [Main]   lw a1, 0(a0)
// [Main]   lw a0, 4(a0)
// [Main]   bne a1, zero, .aux46l3_4_2
// [Main] 
// [Main] .aux46l3_4_1:
// [Main]   mv s10, s0
// [Main]   ld a1, 0(s0)
// [Main]   mv a0, zero
// [Main]   jalr a1
// [Main] 
// [Main] .aux46l3_4_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .aux46l3_4_2:
// [Main]   addi a1, s11, -8
// [Main]   andi a1, a1, -8
// [Main]   mv s11, a1
// [Main]   li a2, 1
// [Main]   sw a2, 0(a1)
// [Main]   sw a0, 4(a1)
// [Main]   mv a0, a1
// [Main]   j .aux46l3_4_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl concat41l2_5
// [Main]   .type concat41l2_5, @function
// [Main] # leaf true
// [Main] concat41l2_5:
// [Main] .concat41l2_5_0:
// [Main]   addi a2, s11, -24
// [Main]   andi a2, a2, -8
// [Main]   mv s11, a2
// [Main]   la a3, aux46l3c0_28
// [Main]   sd a3, 0(a2)
// [Main]   sd a0, 8(a2)
// [Main]   sd a1, 16(a2)
// [Main]   mv a0, a2
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux25l2c0_24
// [Main]   .type aux25l2c0_24, @function
// [Main] # leaf false
// [Main] aux25l2c0_24:
// [Main] .aux25l2c0_24_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a1, s10
// [Main]   ld a2, 8(a1)
// [Main]   ld a3, 16(a1)
// [Main]   mv a1, a2
// [Main]   mv a2, a3
// [Main]   call aux25l2_2
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl le114l8_16
// [Main]   .type le114l8_16, @function
// [Main] # leaf true
// [Main] le114l8_16:
// [Main] .le114l8_16_0:
// [Main]   addi a1, s11, -16
// [Main]   andi a1, a1, -8
// [Main]   mv s11, a1
// [Main]   la a2, aux117l9c0_49
// [Main]   sd a2, 0(a1)
// [Main]   sd a0, 8(a1)
// [Main]   mv a0, a1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux25l2_2
// [Main]   .type aux25l2_2, @function
// [Main] # leaf false
// [Main] aux25l2_2:
// [Main] .aux25l2_2_8:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s0, a1
// [Main]   mv s1, a2
// [Main] 
// [Main] .aux25l2_2_0:
// [Main]   mv s10, s1
// [Main]   ld a1, 0(s1)
// [Main]   mv a0, zero
// [Main]   jalr a1
// [Main]   mv a1, a0
// [Main]   lw a0, 0(a1)
// [Main]   lw s2, 4(a1)
// [Main]   beq a0, zero, .aux25l2_2_1
// [Main] 
// [Main] .aux25l2_2_2:
// [Main]   mv s10, s0
// [Main]   ld a1, 0(s0)
// [Main]   mv a0, s2
// [Main]   jalr a1
// [Main]   bne a0, zero, .aux25l2_2_4
// [Main] 
// [Main] .aux25l2_2_3:
// [Main]   addi a0, s11, -8
// [Main]   andi a0, a0, -8
// [Main]   mv s11, a0
// [Main]   li a1, 1
// [Main]   sw a1, 0(a0)
// [Main]   sw s2, 4(a0)
// [Main] 
// [Main] .aux25l2_2_5:
// [Main] 
// [Main] .aux25l2_2_6:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .aux25l2_2_1:
// [Main]   addi a0, s11, -8
// [Main]   andi a0, a0, -8
// [Main]   mv s11, a0
// [Main]   sw zero, 0(a0)
// [Main]   sw zero, 4(a0)
// [Main]   j .aux25l2_2_6
// [Main] 
// [Main] .aux25l2_2_4:
// [Main]   mv a0, zero
// [Main]   j .aux25l2_2_0
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux111l8_13
// [Main]   .type aux111l8_13, @function
// [Main] # leaf true
// [Main] aux111l8_13:
// [Main] .aux111l8_13_0:
// [Main]   blt a0, a1, .aux111l8_13_2
// [Main] 
// [Main] .aux111l8_13_1:
// [Main]   mv a0, zero
// [Main] 
// [Main] .aux111l8_13_3:
// [Main]   ret
// [Main] 
// [Main] .aux111l8_13_2:
// [Main]   li a0, 1
// [Main]   j .aux111l8_13_3
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function aux111l8c0_45
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Lowering insn Call(ty=Int32, f=f13, args=[FnParam(fref=f45, fpref=$f.0), FreeVar(fvref=^1)])
// [Wasm] Get Local name FnParam(fref=f45, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f45, fpref=$f.0) -> $$f.0
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function aux111l8c0_45 to wasm
// [Wasm] Lowering function aux81l5_8
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f8, fpref=$f.1), FnParam(fref=f8, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.1) -> $$f.1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function aux81l5_8 to wasm
// [Wasm] Lowering function addx78l4_9
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Int32), mref=m0, fills=[Field(index=0, val=Fn(fref=f36)), Field(index=1, val=FnParam(fref=f9, fpref=$f.0))])
// [Wasm] Get Local name Mem(fref=f9, mref=m0) -> $f9.m0
// [Wasm] Get Local name Mem(fref=f9, mref=m0) -> $f9.m0
// [Wasm] Get Local name Mem(fref=f9, mref=m0) -> $f9.m0
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.0) -> $$f.0
// [Wasm] Lowering control Return(args=[Mem(fref=f9, mref=m0)])
// [Wasm] Get Local name Mem(fref=f9, mref=m0) -> $f9.m0
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.0) -> $$f.0
// [Wasm] Local Mem(fref=f9, mref=m0) -> $f9.m0
// [Wasm] Lowered function addx78l4_9 to wasm
// [Wasm] Lowering function aux46l3c0_28
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Lowering insn Call(ty=Tuple(fields=[Int32, Int32]), f=f4, args=[FnParam(fref=f28, fpref=$f.0), FreeVar(fvref=^1), FreeVar(fvref=^2)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function aux46l3c0_28 to wasm
// [Wasm] Lowering function le114l8_16
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Int32), mref=m0, fills=[Field(index=0, val=Fn(fref=f49)), Field(index=1, val=FnParam(fref=f16, fpref=$f.0))])
// [Wasm] Get Local name Mem(fref=f16, mref=m0) -> $f16.m0
// [Wasm] Get Local name Mem(fref=f16, mref=m0) -> $f16.m0
// [Wasm] Get Local name Mem(fref=f16, mref=m0) -> $f16.m0
// [Wasm] Get Local name FnParam(fref=f16, fpref=$f.0) -> $$f.0
// [Wasm] Lowering control Return(args=[Mem(fref=f16, mref=m0)])
// [Wasm] Get Local name Mem(fref=f16, mref=m0) -> $f16.m0
// [Wasm] Get Local name FnParam(fref=f16, fpref=$f.0) -> $$f.0
// [Wasm] Local Mem(fref=f16, mref=m0) -> $f16.m0
// [Wasm] Lowered function le114l8_16 to wasm
// [Wasm] Lowering function aux111l8_13
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Jump(target=b3, args=[Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Jump(target=b3, args=[Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FnParam(fref=f13, fpref=$f.1), FnParam(fref=f13, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f13, fpref=$f.1) -> $$f.1
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function aux111l8_13 to wasm
// [Wasm] Lowering function aux65l4c0_32
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Lowering insn Call(ty=Tuple(fields=[Int32, Int32]), f=f6, args=[FnParam(fref=f32, fpref=$f.0), FreeVar(fvref=^1), FreeVar(fvref=^2)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function aux65l4c0_32 to wasm
// [Wasm] Lowering function aux117l9_15
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Jump(target=b3, args=[Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Jump(target=b3, args=[Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FnParam(fref=f15, fpref=$f.0), FnParam(fref=f15, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f15, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f15, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f15, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f15, fpref=$f.1) -> $$f.1
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function aux117l9_15 to wasm
// [Wasm] Lowering function map1l0_1
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Unit], ty=Tuple(fields=[Int32, Int32])), mref=m0, fills=[Field(index=0, val=Fn(fref=f20)), Field(index=1, val=FnParam(fref=f1, fpref=$f.1)), Field(index=2, val=FnParam(fref=f1, fpref=$f.0))])
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Lowering control Return(args=[Mem(fref=f1, mref=m0)])
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Local Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Lowered function map1l0_1 to wasm
// [Wasm] Lowering function add102l7_11
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f11, fpref=$f.0), FnParam(fref=f11, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f11, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f11, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f11, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f11, fpref=$f.1) -> $$f.1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function add102l7_11 to wasm
// [Wasm] Lowering function aux25l2_2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m0, fills=[Field(index=0, val=Int32(val=0)), Field(index=1, val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Lowering control Jump(target=b6, args=[Mem(fref=f2, mref=m0)])
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m1, fills=[Field(index=0, val=Int32(val=1)), Field(index=1, val=Insn(iref=%2))])
// [Wasm] Get Local name Mem(fref=f2, mref=m1) -> $f2.m1
// [Wasm] Get Local name Mem(fref=f2, mref=m1) -> $f2.m1
// [Wasm] Get Local name Mem(fref=f2, mref=m1) -> $f2.m1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Jump(target=b5, args=[Mem(fref=f2, mref=m1)])
// [Wasm] Get Local name Mem(fref=f2, mref=m1) -> $f2.m1
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering control Jump(target=b0, args=[Unit, BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering insn Apply(ty=Int32, f=BlockParam(bref=b0, bpref=$b.1), args=[Insn(iref=%2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%5), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Branch(cond=Insn(iref=%6), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Apply(ty=Tuple(fields=[Int32, Int32]), f=BlockParam(bref=b0, bpref=$b.2), args=[Unit])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b7, args=[FnParam(fref=f2, fpref=$f.0), FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Local Mem(fref=f2, mref=m1) -> $f2.m1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function aux25l2_2 to wasm
// [Wasm] Lowering function aux25l2c0_24
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Lowering insn Call(ty=Tuple(fields=[Int32, Int32]), f=f2, args=[FnParam(fref=f24, fpref=$f.0), FreeVar(fvref=^1), FreeVar(fvref=^2)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function aux25l2c0_24 to wasm
// [Wasm] Lowering function aux6l1c0_20
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Lowering insn Call(ty=Tuple(fields=[Int32, Int32]), f=f0, args=[FnParam(fref=f20, fpref=$f.0), FreeVar(fvref=^1), FreeVar(fvref=^2)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function aux6l1c0_20 to wasm
// [Wasm] Lowering function aux65l4_6
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m0, fills=[Field(index=0, val=Int32(val=0)), Field(index=1, val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f6, mref=m0) -> $f6.m0
// [Wasm] Get Local name Mem(fref=f6, mref=m0) -> $f6.m0
// [Wasm] Get Local name Mem(fref=f6, mref=m0) -> $f6.m0
// [Wasm] Lowering control Jump(target=b3, args=[Mem(fref=f6, mref=m0)])
// [Wasm] Get Local name Mem(fref=f6, mref=m0) -> $f6.m0
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f6, fpref=$f.2), index=0, width=@32), val=Insn(iref=%3))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m1, fills=[Field(index=0, val=Int32(val=1)), Field(index=1, val=Insn(iref=%0))])
// [Wasm] Get Local name Mem(fref=f6, mref=m1) -> $f6.m1
// [Wasm] Get Local name Mem(fref=f6, mref=m1) -> $f6.m1
// [Wasm] Get Local name Mem(fref=f6, mref=m1) -> $f6.m1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b3, args=[Mem(fref=f6, mref=m1)])
// [Wasm] Get Local name Mem(fref=f6, mref=m1) -> $f6.m1
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f6, fpref=$f.2), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), FnParam(fref=f6, fpref=$f.1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.2) -> $$f.2
// [Wasm] Local Mem(fref=f6, mref=m0) -> $f6.m0
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Mem(fref=f6, mref=m1) -> $f6.m1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowered function aux65l4_6 to wasm
// [Wasm] Lowering function sum99l6_12
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32, Int32], ty=Int32), mref=m0, fills=[Field(index=0, val=Fn(fref=f41))])
// [Wasm] Get Local name Mem(fref=f12, mref=m0) -> $f12.m0
// [Wasm] Get Local name Mem(fref=f12, mref=m0) -> $f12.m0
// [Wasm] Lowering insn Call(ty=Int32, f=f10, args=[FnParam(fref=f12, fpref=$f.0), Mem(fref=f12, mref=m0), Int32(val=0)])
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f12, mref=m0) -> $f12.m0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Return(args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Mem(fref=f12, mref=m0) -> $f12.m0
// [Wasm] Lowered function sum99l6_12 to wasm
// [Wasm] Lowering function aux46l3_4
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Apply(ty=Tuple(fields=[Int32, Int32]), f=FnParam(fref=f4, fpref=$f.2), args=[Unit])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m0, fills=[Field(index=0, val=Int32(val=1)), Field(index=1, val=Insn(iref=%2))])
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Jump(target=b3, args=[Mem(fref=f4, mref=m0)])
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Apply(ty=Tuple(fields=[Int32, Int32]), f=FnParam(fref=f4, fpref=$f.1), args=[Unit])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function aux46l3_4 to wasm
// [Wasm] Lowering function add102l7c0_41
// [Wasm] Lowering insn Call(ty=Int32, f=f11, args=[FnParam(fref=f41, fpref=$f.0), FnParam(fref=f41, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f41, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f41, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f41, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f41, fpref=$f.1) -> $$f.1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function add102l7c0_41 to wasm
// [Wasm] Lowering function main120l9_17
// [Wasm] Lowering insn Call(ty=ClosureFn(params=[Unit], ty=Tuple(fields=[Int32, Int32])), f=f7, args=[Int32(val=0), Int32(val=100)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Call(ty=ClosureFn(params=[Unit], ty=Tuple(fields=[Int32, Int32])), f=f7, args=[Int32(val=0), Int32(val=1000)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Call(ty=ClosureFn(params=[Unit], ty=Tuple(fields=[Int32, Int32])), f=f5, args=[Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Call(ty=ClosureFn(params=[Int32], ty=Int32), f=f9, args=[Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Call(ty=ClosureFn(params=[Unit], ty=Tuple(fields=[Int32, Int32])), f=f1, args=[Insn(iref=%2), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Call(ty=ClosureFn(params=[Int32], ty=Int32), f=f14, args=[Int32(val=50)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Call(ty=ClosureFn(params=[Unit], ty=Tuple(fields=[Int32, Int32])), f=f3, args=[Insn(iref=%4), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Call(ty=ClosureFn(params=[Int32], ty=Int32), f=f16, args=[Int32(val=1200)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Call(ty=ClosureFn(params=[Unit], ty=Tuple(fields=[Int32, Int32])), f=f3, args=[Insn(iref=%6), Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Call(ty=Int32, f=f12, args=[Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Int32(val=10)])
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function main120l9_17 to wasm
// [Wasm] Lowering function aux6l1_0
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m0, fills=[Field(index=0, val=Int32(val=0)), Field(index=1, val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Lowering control Jump(target=b3, args=[Mem(fref=f0, mref=m0)])
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Apply(ty=Int32, f=FnParam(fref=f0, fpref=$f.1), args=[Insn(iref=%2)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m1, fills=[Field(index=0, val=Int32(val=1)), Field(index=1, val=Insn(iref=%5))])
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b3, args=[Mem(fref=f0, mref=m1)])
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Apply(ty=Tuple(fields=[Int32, Int32]), f=FnParam(fref=f0, fpref=$f.2), args=[Unit])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Local Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function aux6l1_0 to wasm
// [Wasm] Lowering function T$start_52
// [Wasm] Lowering insn Call(ty=Unit, f=f17, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start_52 to wasm
// [Wasm] Lowering function fold84l5_10
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Jump(target=b3, args=[BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Apply(ty=Int32, f=BlockParam(bref=b0, bpref=$b.1), args=[BlockParam(bref=b0, bpref=$b.2), Insn(iref=%2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%4)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering insn Apply(ty=Tuple(fields=[Int32, Int32]), f=BlockParam(bref=b0, bpref=$b.0), args=[Unit])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f10, fpref=$f.0), FnParam(fref=f10, fpref=$f.1), FnParam(fref=f10, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f10, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f10, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f10, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f10, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f10, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f10, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function fold84l5_10 to wasm
// [Wasm] Lowering function concat41l2_5
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Unit], ty=Tuple(fields=[Int32, Int32])), mref=m0, fills=[Field(index=0, val=Fn(fref=f28)), Field(index=1, val=FnParam(fref=f5, fpref=$f.0)), Field(index=2, val=FnParam(fref=f5, fpref=$f.1))])
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.1) -> $$f.1
// [Wasm] Lowering control Return(args=[Mem(fref=f5, mref=m0)])
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.1) -> $$f.1
// [Wasm] Local Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Lowered function concat41l2_5 to wasm
// [Wasm] Lowering function aux81l5c0_36
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Lowering insn Call(ty=Int32, f=f8, args=[FnParam(fref=f36, fpref=$f.0), FreeVar(fvref=^1)])
// [Wasm] Get Local name FnParam(fref=f36, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f36, fpref=$f.0) -> $$f.0
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function aux81l5c0_36 to wasm
// [Wasm] Lowering function filter20l1_3
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Unit], ty=Tuple(fields=[Int32, Int32])), mref=m0, fills=[Field(index=0, val=Fn(fref=f24)), Field(index=1, val=FnParam(fref=f3, fpref=$f.1)), Field(index=2, val=FnParam(fref=f3, fpref=$f.0))])
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Lowering control Return(args=[Mem(fref=f3, mref=m0)])
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Local Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Lowered function filter20l1_3 to wasm
// [Wasm] Lowering function gt108l7_14
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Int32), mref=m0, fills=[Field(index=0, val=Fn(fref=f45)), Field(index=1, val=FnParam(fref=f14, fpref=$f.0))])
// [Wasm] Get Local name Mem(fref=f14, mref=m0) -> $f14.m0
// [Wasm] Get Local name Mem(fref=f14, mref=m0) -> $f14.m0
// [Wasm] Get Local name Mem(fref=f14, mref=m0) -> $f14.m0
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.0) -> $$f.0
// [Wasm] Lowering control Return(args=[Mem(fref=f14, mref=m0)])
// [Wasm] Get Local name Mem(fref=f14, mref=m0) -> $f14.m0
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.0) -> $$f.0
// [Wasm] Local Mem(fref=f14, mref=m0) -> $f14.m0
// [Wasm] Lowered function gt108l7_14 to wasm
// [Wasm] Lowering function range58l3_7
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=FnParam(fref=f7, fpref=$f.0))])
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Unit], ty=Tuple(fields=[Int32, Int32])), mref=m1, fills=[Field(index=0, val=Fn(fref=f32)), Field(index=1, val=FnParam(fref=f7, fpref=$f.1)), Field(index=2, val=Mem(fref=f7, mref=m0))])
// [Wasm] Get Local name Mem(fref=f7, mref=m1) -> $f7.m1
// [Wasm] Get Local name Mem(fref=f7, mref=m1) -> $f7.m1
// [Wasm] Get Local name Mem(fref=f7, mref=m1) -> $f7.m1
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Mem(fref=f7, mref=m1) -> $f7.m1
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Lowering control Return(args=[Mem(fref=f7, mref=m1)])
// [Wasm] Get Local name Mem(fref=f7, mref=m1) -> $f7.m1
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.1) -> $$f.1
// [Wasm] Local Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Local Mem(fref=f7, mref=m1) -> $f7.m1
// [Wasm] Lowered function range58l3_7 to wasm
// [Wasm] Lowering function aux117l9c0_49
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Lowering insn Call(ty=Int32, f=f15, args=[FnParam(fref=f49, fpref=$f.0), FreeVar(fvref=^1)])
// [Wasm] Get Local name FnParam(fref=f49, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f49, fpref=$f.0) -> $$f.0
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function aux117l9c0_49 to wasm
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %8: Call(ty=Tuple(fields=[Int32, Int32]), f=f2, args=[Unit, FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %5: Call(ty=Int32, f=f10, args=[FnParam(fref=f10, fpref=$f.0), FnParam(fref=f10, fpref=$f.1), Insn(iref=%4)])
// [CoreOpt] Call frequnce: FnCallFreq({f45: MaybeInClosure, f8: Once, f9: Once, f28: MaybeInClosure, f16: Once, f13: Once, f32: MaybeInClosure, f15: Once, f1: Once, f11: Once, f2: Once, f24: MaybeInClosure, f20: MaybeInClosure, f6: Once, f12: Once, f4: Once, f41: MaybeInClosure, f17: Once, f0: Once, f52: Once, f10: Once, f5: Once, f36: MaybeInClosure, f3: Multiple, f14: Once, f7: Multiple, f49: MaybeInClosure})
