// [Asm] pre_assigned_registers: Insn(iref=%3) -> v9, FnParam(fref=f12, fpref=$f.0) -> v2, BlockParam(bref=b3, bpref=$b.0) -> v12, Insn(iref=%2) -> v8, Self(fref=f12) -> v0, FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, Insn(iref=%1) -> v7, Mem(fref=f12, mref=m0) -> v5, Insn(iref=%5) -> v10, Insn(iref=%0) -> v6, Insn(iref=%4) -> v11
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v12]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, s11, zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, s11, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v0, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v4, s11, zero, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: s10 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v19, v4, s11, zero]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v19, v4, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v19, v4, s11, zero, a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, s11, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v6, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v4, v6, s11, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v4, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v4, zero]
// [Asm] move_origin: [v4]
// [Asm] defined: s10 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v13, zero]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v13, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v13]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: [a0]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v12]
// [Asm] move_origin: [v11]
// [Asm] defined: v12 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v8]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, v8]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v5, v16, v8]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v12]
// [Asm] move_origin: [v5]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v12]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux.430"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="t4", color=blue];
// [Asm]   r23 [label="v8 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="a1", color=blue];
// [Asm]   r26 [label="v12 ← a0", color=green];
// [Asm]   r27 [label="v5 ← a1", color=green];
// [Asm]   r6 [label="v4 ← s0", color=green];
// [Asm]   r13 [label="a5", color=blue];
// [Asm]   r4 [label="v2 ← a0", color=green];
// [Asm]   r1 [label="v0 ← a1", color=green];
// [Asm]   r28 [label="v16 ← a2", color=green];
// [Asm]   r11 [label="a3", color=blue];
// [Asm]   r7 [label="s10", color=blue];
// [Asm]   r10 [label="a2", color=blue];
// [Asm]   r22 [label="v7 ← a1", color=green];
// [Asm]   r14 [label="a6", color=blue];
// [Asm]   r8 [label="v19 ← a1", color=green];
// [Asm]   r5 [label="v3 ← a0", color=green];
// [Asm]   r24 [label="v13 ← a1", color=green];
// [Asm]   r15 [label="a7", color=blue];
// [Asm]   r25 [label="v11 ← a0", color=green];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r16 [label="t0", color=blue];
// [Asm]   r18 [label="t2", color=blue];
// [Asm]   r19 [label="t3", color=blue];
// [Asm]   r17 [label="t1", color=blue];
// [Asm]   r21 [label="v6 ← a0", color=green];
// [Asm]   r12 [label="a4", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r21;
// [Asm]   r6 -- r9;
// [Asm]   r0 -- r15;
// [Asm]   r3 -- r19;
// [Asm]   r0 -- r13;
// [Asm]   r6 -- r11;
// [Asm]   r3 -- r15;
// [Asm]   r6 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r16;
// [Asm]   r2 -- r18;
// [Asm]   r0 -- r24;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r0 -- r17;
// [Asm]   r3 -- r12;
// [Asm]   r0 -- r14;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r6 -- r16;
// [Asm]   r2 -- r16;
// [Asm]   r27 -- r28;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r23 -- r27;
// [Asm]   r3 -- r18;
// [Asm]   r6 -- r12;
// [Asm]   r0 -- r16;
// [Asm]   r0 -- r19;
// [Asm]   r3 -- r5;
// [Asm]   r6 -- r20;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r8;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r6 -- r13;
// [Asm]   r6 -- r19;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r23 -- r28;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r22 -- r23;
// [Asm]   r3 -- r20;
// [Asm]   r3 -- r10;
// [Asm]   r2 -- r21;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r6 -- r17;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r14;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r17;
// [Asm]   r0 -- r10;
// [Asm]   r3 -- r17;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r21 -- r22;
// [Asm]   r2 -- r9;
// [Asm]   r6 -- r23;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r0 -- r20;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   r0 -- r18;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:a0-> 1:v0-> 2:s11-> 3:zero-> 4:v2-> 5:v3-> 6:v4-> 8:v19-> 9:a1-> 10:a2-> 11:a3-> 12:a4-> 13:a5-> 14:a6-> 15:a7-> 16:t0-> 17:t1-> 18:t2-> 19:t3-> 20:t4-> 7:s10-> 21:v6-> 22:v7-> 23:v8-> 24:v13-> 27:v5-> 28:v16-> 25:v11-> 26:v12"
// [Asm]   comment = "v8<-a0;v12<-a0;v5<-a1;v4<-s0;v2<-a0;v0<-a1;v16<-a2;v7<-a1;v19<-a1;v3<-a0;v13<-a1;v11<-a0;v6<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux.430"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   ld v3, 8(v0) ->   ld a0, 8(a1)
// [Asm] subst   ld v4, 16(v0) ->   ld s0, 16(a1)
// [Asm] subst   mv s10, v3 ->   mv s10, a0
// [Asm] subst   ld v19, 0(v3) ->   ld a1, 0(a0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   jalr v19 ->   jalr a1
// [Asm] subst   lw v7, 0(v6) ->   lw a1, 0(a0)
// [Asm] subst   lw v8, 4(v6) ->   lw a0, 4(a0)
// [Asm] subst   bne v7, zero, .aux.430_2 ->   bne a1, zero, .aux.430_2
// [Asm] subst   mv s10, v4 ->   mv s10, s0
// [Asm] subst   ld v13, 0(v4) ->   ld a1, 0(s0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   jalr v13 ->   jalr a1
// [Asm] subst   addi v5, s11, -8 ->   addi a1, s11, -8
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a1, -8
// [Asm] subst   li v16, 1 ->   li a2, 1
// [Asm] subst   sw v16, 0(v5) ->   sw a2, 0(a1)
// [Asm] subst   sw v8, 4(v5) ->   sw a0, 4(a1)
// [Asm] subst   mv v12, v5 ->   mv a0, a1
// [Asm] subst   j .aux.430_3 ->   j .aux.430_3
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v10, Insn(iref=%3) -> v9, FnParam(fref=f8, fpref=$f.0) -> v2, Mem(fref=f8, mref=m0) -> v5, BlockParam(bref=b3, bpref=$b.0) -> v13, Insn(iref=%2) -> v12, FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, Insn(iref=%1) -> v8, Self(fref=f8) -> v0, Insn(iref=%5) -> v11, Mem(fref=f8, mref=m1) -> v6, Insn(iref=%0) -> v7
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), FreeVar(fvref=^2)])
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move_origin: [v5]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v13]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v13]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, s11, zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, s11, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v0, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v7, v4, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v3, s11, v9, v7]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [s11, v7]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6, v7]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v6, v7]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v6, v16, v7]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move_origin: [v6]
// [Asm] defined: v13 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux.48"];
// [Asm]   r0 [label="v5 ← a0", color=green];
// [Asm]   r5 [label="v0 ← a1", color=green];
// [Asm]   r3 [label="v13 ← a0", color=green];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r9 [label="v7 ← a2", color=green];
// [Asm]   r6 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a0", color=blue];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r11 [label="v6 ← a0", color=green];
// [Asm]   r7 [label="v3 ← a0", color=green];
// [Asm]   r10 [label="v9 ← a1", color=green];
// [Asm]   r12 [label="v16 ← a1", color=green];
// [Asm]   r8 [label="v4 ← a1", color=green];
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r10;
// [Asm]   r0 -- r1;
// [Asm]   r11 -- r12;
// [Asm]   r2 -- r6;
// [Asm]   r9 -- r11;
// [Asm]   r5 -- r6;
// [Asm]   r5 -- r7;
// [Asm]   r9 -- r10;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r7 -- r9;
// [Asm]   r2 -- r9;
// [Asm]   r7 -- r8;
// [Asm]   r7 -- r10;
// [Asm]   r9 -- r12;
// [Asm]   r1 -- r7;
// [Asm]   r2 -- r8;
// [Asm]   r8 -- r9;
// [Asm]   r1 -- r2;
// [Asm]   comment = "0:v5-> 1:zero-> 2:s11-> 5:v0-> 6:v2-> 7:v3-> 8:v4-> 9:v7-> 10:v9-> 11:v6-> 12:v16-> 4:a0-> 3:v13"
// [Asm]   comment = "v5<-a0;v0<-a1;v13<-a0;v7<-a2;v2<-a0;v6<-a0;v3<-a0;v9<-a1;v16<-a1;v4<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux.48"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v9, v7, 1 ->   addi a1, a2, 1
// [Asm] subst   sw v9, 0(v3) ->   sw a1, 0(a0)
// [Asm] subst   addi v6, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v6, -8 ->   andi s11, a0, -8
// [Asm] subst   li v16, 1 ->   li a1, 1
// [Asm] subst   sw v16, 0(v6) ->   sw a1, 0(a0)
// [Asm] subst   sw v7, 4(v6) ->   sw a2, 4(a0)
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   ld v3, 8(v0) ->   ld a0, 8(a1)
// [Asm] subst   lw v4, 16(v0) ->   lw a1, 16(a1)
// [Asm] subst   lw v7, 0(v3) ->   lw a2, 0(a0)
// [Asm] subst   beq v7, v4, .aux.48_1 ->   beq a2, a1, .aux.48_1
// [Asm] subst   addi v5, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a0, -8
// [Asm] subst   sw zero, 0(v5) ->   sw zero, 0(a0)
// [Asm] subst   sw zero, 4(v5) ->   sw zero, 4(a0)
// [Asm] subst   j .aux.48_3 ->   j .aux.48_3
// [Asm] pre_assigned_registers: FnParam(fref=f16, fpref=$f.0) -> v2, Insn(iref=%4) -> v13, Insn(iref=%3) -> v10, Self(fref=f16) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v14, Insn(iref=%2) -> v9, FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, Insn(iref=%1) -> v8, Mem(fref=f16, mref=m0) -> v5, Insn(iref=%6) -> v12, Mem(fref=f16, mref=m1) -> v6, Insn(iref=%5) -> v11, Insn(iref=%0) -> v7
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v14]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move_origin: [v5]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v14]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v4, s11, v9]
// [Asm] move_origin: [v4]
// [Asm] defined: s10 is X
// [Asm] defs: [v18]
// [Asm] live_set: [s11, v18, v9]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [s11, v18, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [s11, v18, a0]
// [Asm] move_origin: [v9]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [s11, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v11, s11]
// [Asm] move_origin: [a0]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, s11]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v11, v6]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v6]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v11, v6, v17]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v6]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move_origin: [v6]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, s11, zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, s11, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v0, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v4, s11, zero, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: s10 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v4, s11, zero, v22]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, zero, v22]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, s11, zero, a0, v22]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v4, s11, zero, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v4, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v4, s11, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, zero, v9]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux.662"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="t4", color=blue];
// [Asm]   r23 [label="v17 ← a2", color=green];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r9 [label="a1", color=blue];
// [Asm]   r26 [label="v3 ← a0", color=green];
// [Asm]   r27 [label="v22 ← a1", color=green];
// [Asm]   r6 [label="v4 ← s0", color=green];
// [Asm]   r13 [label="a5", color=blue];
// [Asm]   r4 [label="v14 ← a0", color=green];
// [Asm]   r1 [label="v5 ← a0", color=green];
// [Asm]   r29 [label="v8 ← a1", color=green];
// [Asm]   r28 [label="v7 ← a0", color=green];
// [Asm]   r11 [label="a3", color=blue];
// [Asm]   r7 [label="v9 ← a0", color=green];
// [Asm]   r10 [label="a2", color=blue];
// [Asm]   r22 [label="v6 ← a1", color=green];
// [Asm]   r14 [label="a6", color=blue];
// [Asm]   r8 [label="v18 ← a1", color=green];
// [Asm]   r5 [label="s10", color=blue];
// [Asm]   r15 [label="a7", color=blue];
// [Asm]   r24 [label="v0 ← a1", color=green];
// [Asm]   r25 [label="v2 ← a0", color=green];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="t0", color=blue];
// [Asm]   r18 [label="t2", color=blue];
// [Asm]   r19 [label="t3", color=blue];
// [Asm]   r17 [label="t1", color=blue];
// [Asm]   r21 [label="v11 ← a0", color=green];
// [Asm]   r12 [label="a4", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r0 -- r15;
// [Asm]   r3 -- r19;
// [Asm]   r0 -- r13;
// [Asm]   r7 -- r29;
// [Asm]   r6 -- r11;
// [Asm]   r3 -- r25;
// [Asm]   r2 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r6 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r2 -- r18;
// [Asm]   r0 -- r24;
// [Asm]   r3 -- r6;
// [Asm]   r6 -- r14;
// [Asm]   r0 -- r17;
// [Asm]   r3 -- r12;
// [Asm]   r0 -- r14;
// [Asm]   r2 -- r10;
// [Asm]   r6 -- r29;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r6 -- r16;
// [Asm]   r2 -- r16;
// [Asm]   r3 -- r28;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r11;
// [Asm]   r2 -- r7;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r6 -- r26;
// [Asm]   r6 -- r12;
// [Asm]   r0 -- r16;
// [Asm]   r0 -- r19;
// [Asm]   r24 -- r26;
// [Asm]   r3 -- r5;
// [Asm]   r6 -- r20;
// [Asm]   r21 -- r23;
// [Asm]   r3 -- r22;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r6 -- r13;
// [Asm]   r6 -- r19;
// [Asm]   r6 -- r27;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r2 -- r14;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r28;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r2 -- r12;
// [Asm]   r22 -- r23;
// [Asm]   r3 -- r29;
// [Asm]   r3 -- r20;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r6 -- r17;
// [Asm]   r28 -- r29;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r14;
// [Asm]   r3 -- r27;
// [Asm]   r2 -- r17;
// [Asm]   r0 -- r10;
// [Asm]   r3 -- r17;
// [Asm]   r5 -- r7;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r21 -- r22;
// [Asm]   r2 -- r24;
// [Asm]   r2 -- r9;
// [Asm]   r7 -- r8;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r24 -- r25;
// [Asm]   r0 -- r27;
// [Asm]   r2 -- r3;
// [Asm]   r0 -- r20;
// [Asm]   r2 -- r27;
// [Asm]   r0 -- r18;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:a0-> 2:zero-> 3:s11-> 6:v4-> 9:a1-> 10:a2-> 11:a3-> 12:a4-> 13:a5-> 14:a6-> 15:a7-> 16:t0-> 17:t1-> 18:t2-> 19:t3-> 20:t4-> 27:v22-> 5:s10-> 7:v9-> 29:v8-> 28:v7-> 8:v18-> 24:v0-> 26:v3-> 25:v2-> 1:v5-> 21:v11-> 22:v6-> 23:v17-> 4:v14"
// [Asm]   comment = "v17<-a2;v3<-a0;v22<-a1;v4<-s0;v14<-a0;v5<-a0;v8<-a1;v7<-a0;v9<-a0;v6<-a1;v18<-a1;v0<-a1;v2<-a0;v11<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux.662"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   addi v5, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a0, -8
// [Asm] subst   sw zero, 0(v5) ->   sw zero, 0(a0)
// [Asm] subst   sw zero, 4(v5) ->   sw zero, 4(a0)
// [Asm] subst   j .aux.662_3 ->   j .aux.662_3
// [Asm] subst   mv s10, v4 ->   mv s10, s0
// [Asm] subst   ld v18, 0(v4) ->   ld a1, 0(s0)
// [Asm] subst   jalr v18 ->   jalr a1
// [Asm] subst   addi v6, s11, -8 ->   addi a1, s11, -8
// [Asm] subst   andi s11, v6, -8 ->   andi s11, a1, -8
// [Asm] subst   li v17, 1 ->   li a2, 1
// [Asm] subst   sw v17, 0(v6) ->   sw a2, 0(a1)
// [Asm] subst   sw v11, 4(v6) ->   sw a0, 4(a1)
// [Asm] subst   mv v14, v6 ->   mv a0, a1
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   ld v3, 8(v0) ->   ld a0, 8(a1)
// [Asm] subst   ld v4, 16(v0) ->   ld s0, 16(a1)
// [Asm] subst   mv s10, v3 ->   mv s10, a0
// [Asm] subst   ld v22, 0(v3) ->   ld a1, 0(a0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   jalr v22 ->   jalr a1
// [Asm] subst   lw v8, 0(v7) ->   lw a1, 0(a0)
// [Asm] subst   lw v9, 4(v7) ->   lw a0, 4(a0)
// [Asm] subst   beq v8, zero, .aux.662_1 ->   beq a1, zero, .aux.662_1
// [Asm] pre_assigned_registers: FnParam(fref=f0, fpref=$f.1) -> v3, Self(fref=f0) -> v0, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%0) -> v5, Mem(fref=f0, mref=m0) -> v4
// [Asm] defs: []
// [Asm] live_set: [a1, s11, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, s11, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v7, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of filter.15"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r5 [label="v7 ← a3", color=green];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r4 [label="v4 ← a2", color=green];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r3 [label="v3 ← a1", color=green];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r4;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:v2-> 1:a1-> 2:s11-> 3:v3-> 4:v4-> 5:v7-> 6:a0"
// [Asm]   comment = "v2<-a0;v7<-a3;v4<-a2;v3<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of filter.15"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v4, s11, -24 ->   addi a2, s11, -24
// [Asm] subst   andi s11, v4, -8 ->   andi s11, a2, -8
// [Asm] subst   la v7, aux.18 ->   la a3, aux.18
// [Asm] subst   sd v7, 0(v4) ->   sd a3, 0(a2)
// [Asm] subst   sd v2, 8(v4) ->   sd a0, 8(a2)
// [Asm] subst   sd v3, 16(v4) ->   sd a1, 16(a2)
// [Asm] subst   mv a0, v4 ->   mv a0, a2
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v7, Mem(fref=f1, mref=m0) -> v4, FnParam(fref=f1, fpref=$f.1) -> v3, Self(fref=f1) -> v0, FnParam(fref=f1, fpref=$f.0) -> v2, Mem(fref=f1, mref=m1) -> v5, Insn(iref=%0) -> v6
// [Asm] defs: []
// [Asm] live_set: [a1, s11, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, s11, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v4, v5, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v4, v5, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of range.43"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r6 [label="v9 ← a3", color=green];
// [Asm]   r5 [label="v5 ← a0", color=green];
// [Asm]   r4 [label="v4 ← a2", color=green];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r3 [label="v3 ← a1", color=green];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r7 [label="a0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r5;
// [Asm]   r4 -- r6;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r6;
// [Asm]   r2 -- r3;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:v2-> 1:a1-> 2:s11-> 3:v3-> 4:v4-> 5:v5-> 6:v9-> 7:a0"
// [Asm]   comment = "v2<-a0;v9<-a3;v5<-a0;v4<-a2;v3<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of range.43"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v4, s11, -4 ->   addi a2, s11, -4
// [Asm] subst   andi s11, v4, -8 ->   andi s11, a2, -8
// [Asm] subst   sw v2, 0(v4) ->   sw a0, 0(a2)
// [Asm] subst   addi v5, s11, -24 ->   addi a0, s11, -24
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a0, -8
// [Asm] subst   la v9, aux.48 ->   la a3, aux.48
// [Asm] subst   sd v9, 0(v5) ->   sd a3, 0(a0)
// [Asm] subst   sd v4, 8(v5) ->   sd a2, 8(a0)
// [Asm] subst   sd v3, 16(v5) ->   sd a1, 16(a0)
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, BlockParam(bref=b0, bpref=$b.0) -> v7, Insn(iref=%5) -> v12, Insn(iref=%0) -> v8, Insn(iref=%4) -> v16, Mem(fref=f5, mref=m1) -> v6, Insn(iref=%3) -> v11, FnParam(fref=f5, fpref=$f.0) -> v2, Mem(fref=f5, mref=m0) -> v5, Self(fref=f5) -> v0, Insn(iref=%7) -> v14, BlockParam(bref=b5, bpref=$b.0) -> v15, BlockParam(bref=b6, bpref=$b.0) -> v17, Insn(iref=%2) -> v10, Insn(iref=%1) -> v9, Insn(iref=%6) -> v13
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%5), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Asm] defs: [s10]
// [Asm] live_set: [zero, v4, s11, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: s10 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v25, zero, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: []
// [Asm] live_set: [v25, zero, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v25, zero, a0, v4, s11, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [zero, v8, v4, s11, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v8, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [zero, v8, v4, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v10, zero, v4, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, v10, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6, v10]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v6, v10]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v6, v10, v20]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v10]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v15]
// [Asm] move_origin: [v6]
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, s11, zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v0, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v4, s11, zero, v7]
// [Asm] move_origin: [v2]
// [Asm] defined: v7 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v10, zero, v4, s11, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: s10 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v10, v21, zero, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v10, v21, zero, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v10, v21, zero, a0, v4, s11, v3]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v10, zero, a0, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v12]
// [Asm] live_set: [v10, zero, v4, s11, v12, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v10, zero, v4, s11, v12, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, s11, v10, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v17]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v4, s11, zero, v7]
// [Asm] move_origin: [zero]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v4, s11, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v17]
// [Asm] move_origin: [v5]
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v17]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v17]
// [Asm] move_origin: [v15]
// [Asm] defined: v17 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux.18"];
// [Asm]   r0 [label="s10", color=blue];
// [Asm]   r20 [label="v9 ← a0", color=green];
// [Asm]   r23 [label="v20 ← a1", color=green];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r9 [label="a3", color=blue];
// [Asm]   r26 [label="v2 ← a0", color=green];
// [Asm]   r27 [label="v7 ← a0", color=green];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r13 [label="a7", color=blue];
// [Asm]   r4 [label="v3 ← s1", color=green];
// [Asm]   r29 [label="v12 ← a0", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r28 [label="v21 ← a1", color=green];
// [Asm]   r11 [label="a5", color=blue];
// [Asm]   r7 [label="a1", color=blue];
// [Asm]   r10 [label="a4", color=blue];
// [Asm]   r22 [label="v6 ← a0", color=green];
// [Asm]   r14 [label="t0", color=blue];
// [Asm]   r8 [label="a2", color=blue];
// [Asm]   r30 [label="v5 ← a0", color=green];
// [Asm]   r5 [label="v25 ← a1", color=green];
// [Asm]   r15 [label="t1", color=blue];
// [Asm]   r24 [label="v15 ← a0", color=green];
// [Asm]   r25 [label="v0 ← a1", color=green];
// [Asm]   r2 [label="v4 ← s0", color=green];
// [Asm]   r16 [label="t2", color=blue];
// [Asm]   r18 [label="t4", color=blue];
// [Asm]   r19 [label="v8 ← a1", color=green];
// [Asm]   r31 [label="v17 ← a0", color=green];
// [Asm]   r17 [label="t3", color=blue];
// [Asm]   r21 [label="v10 ← s2", color=green];
// [Asm]   r12 [label="a6", color=blue];
// [Asm]   r6 -- r21;
// [Asm]   r17 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r26;
// [Asm]   r7 -- r21;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r30;
// [Asm]   r3 -- r16;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r18 -- r21;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r27;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r6 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r30;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r4 -- r28;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r29;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r27;
// [Asm]   r2 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r25;
// [Asm]   r4 -- r8;
// [Asm]   r8 -- r21;
// [Asm]   r16 -- r21;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r12 -- r21;
// [Asm]   r0 -- r4;
// [Asm]   r21 -- r22;
// [Asm]   r13 -- r21;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r6 -- r25;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r26;
// [Asm]   r6 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r6 -- r14;
// [Asm]   r21 -- r28;
// [Asm]   r21 -- r29;
// [Asm]   r3 -- r12;
// [Asm]   r0 -- r21;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r20;
// [Asm]   r6 -- r16;
// [Asm]   r25 -- r26;
// [Asm]   r3 -- r28;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r12;
// [Asm]   r1 -- r28;
// [Asm]   r21 -- r23;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r8;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r2 -- r14;
// [Asm]   r3 -- r21;
// [Asm]   r15 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r6 -- r28;
// [Asm]   r14 -- r21;
// [Asm]   r1 -- r29;
// [Asm]   r22 -- r23;
// [Asm]   r3 -- r29;
// [Asm]   r3 -- r20;
// [Asm]   r1 -- r25;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r4 -- r17;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r10;
// [Asm]   r2 -- r19;
// [Asm]   r4 -- r26;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r3;
// [Asm]   r20 -- r21;
// [Asm]   r10 -- r21;
// [Asm]   r2 -- r27;
// [Asm]   r11 -- r21;
// [Asm]   r4 -- r19;
// [Asm]   r19 -- r20;
// [Asm]   r9 -- r21;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:s10-> 1:zero-> 2:v4-> 3:s11-> 4:v3-> 21:v10-> 6:a0-> 7:a1-> 8:a2-> 9:a3-> 10:a4-> 11:a5-> 12:a6-> 13:a7-> 14:t0-> 15:t1-> 16:t2-> 17:t3-> 18:t4-> 28:v21-> 5:v25-> 20:v9-> 19:v8-> 29:v12-> 25:v0-> 26:v2-> 27:v7-> 22:v6-> 23:v20-> 30:v5-> 24:v15-> 31:v17"
// [Asm]   comment = "v9<-a0;v20<-a1;v2<-a0;v7<-a0;v3<-s1;v12<-a0;v21<-a1;v6<-a0;v5<-a0;v25<-a1;v15<-a0;v0<-a1;v4<-s0;v8<-a1;v17<-a0;v10<-s2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux.18"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv s10, v3 ->   mv s10, s1
// [Asm] subst   ld v25, 0(v3) ->   ld a1, 0(s1)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   jalr v25 ->   jalr a1
// [Asm] subst   mv v8, a0 ->   mv a1, a0
// [Asm] subst   lw v9, 0(v8) ->   lw a0, 0(a1)
// [Asm] subst   lw v10, 4(v8) ->   lw s2, 4(a1)
// [Asm] subst   beq v9, zero, .aux.18_1 ->   beq a0, zero, .aux.18_1
// [Asm] subst   addi v6, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v6, -8 ->   andi s11, a0, -8
// [Asm] subst   li v20, 1 ->   li a1, 1
// [Asm] subst   sw v20, 0(v6) ->   sw a1, 0(a0)
// [Asm] subst   sw v10, 4(v6) ->   sw s2, 4(a0)
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   ld v3, 8(v0) ->   ld s1, 8(a1)
// [Asm] subst   ld v4, 16(v0) ->   ld s0, 16(a1)
// [Asm] subst   mv s10, v4 ->   mv s10, s0
// [Asm] subst   ld v21, 0(v4) ->   ld a1, 0(s0)
// [Asm] subst   mv a0, v10 ->   mv a0, s2
// [Asm] subst   jalr v21 ->   jalr a1
// [Asm] subst   bne v12, zero, .aux.18_4 ->   bne a0, zero, .aux.18_4
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v7, zero ->   mv a0, zero
// [Asm] subst   j .aux.18_0 ->   j .aux.18_0
// [Asm] subst   addi v5, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a0, -8
// [Asm] subst   sw zero, 0(v5) ->   sw zero, 0(a0)
// [Asm] subst   sw zero, 4(v5) ->   sw zero, 4(a0)
// [Asm] subst   j .aux.18_6 ->   j .aux.18_6
// [Asm] pre_assigned_registers: Insn(iref=%9) -> v17, Self(fref=f2) -> v0, Insn(iref=%8) -> v16, BlockParam(bref=b0, bpref=$b.0) -> v5, BlockParam(bref=b0, bpref=$b.1) -> v6, BlockParam(bref=b0, bpref=$b.2) -> v7, Insn(iref=%5) -> v13, Insn(iref=%0) -> v8, Insn(iref=%4) -> v12, Insn(iref=%3) -> v11, Insn(iref=%7) -> v15, BlockParam(bref=b5, bpref=$b.0) -> v18, BlockParam(bref=b6, bpref=$b.0) -> v19, Insn(iref=%2) -> v10, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%1) -> v9, Insn(iref=%6) -> v14, FnParam(fref=f2, fpref=$f.0) -> v2, FnParam(fref=f2, fpref=$f.2) -> v4
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%6), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Asm] defs: [v19]
// [Asm] live_set: [v19]
// [Asm] move_origin: [v7]
// [Asm] defined: v19 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v5, zero, v7, v6]
// [Asm] move_origin: [v5]
// [Asm] defined: s10 is X
// [Asm] defs: [v30]
// [Asm] live_set: [v5, zero, v30, v7, v6]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v30, v7, v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v30, v7, v6]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0, v7, v6]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v7, v8, v6]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v6]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero, v7, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, v10, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v19]
// [Asm] move_origin: [v18]
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v19]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v19]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v18]
// [Asm] move_origin: [v12]
// [Asm] defined: v18 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v5, v6, v15, v12, zero]
// [Asm] move_origin: [v6]
// [Asm] defined: s10 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v5, v6, v15, v12, zero, v20]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v15, v12, zero, v20]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, v6, v15, zero, a0, v20]
// [Asm] move_origin: [v12]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, v6, a1, zero, a0, v20]
// [Asm] move_origin: [v15]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v17]
// [Asm] live_set: [v5, v6, v17, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v17, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v17, zero]
// [Asm] move_origin: [v5]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v17, zero]
// [Asm] move_origin: [v6]
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v17]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v5, v10, zero, v7, v6]
// [Asm] move_origin: [v6]
// [Asm] defined: s10 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v5, v10, zero, v26, v7, v6]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v26, v7, v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, v10, zero, a0, v26, v6]
// [Asm] move_origin: [v7]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, a0, v26, v6, a1]
// [Asm] move_origin: [v10]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0, v6]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v12]
// [Asm] live_set: [v5, zero, v6, v12]
// [Asm] move_origin: [a0]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v6, v12]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v5, zero, v6, v12]
// [Asm] move_origin: [v5]
// [Asm] defined: s10 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v5, zero, v6, v12, v24]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v6, v12, v24]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v6, v12, v24]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0, v6, v12]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v13]
// [Asm] live_set: [v5, zero, v13, v6, v12]
// [Asm] move_origin: [a0]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v13, v6, v12]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v5, v14, zero, v13, v6, v12]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v5, v14, zero, v6, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, v12, v15, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move_origin: [v3]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v4]
// [Asm] defined: v7 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of fold.63"];
// [Asm]   r0 [label="v19 ← a0", color=green];
// [Asm]   r33 [label="v3 ← a1", color=green];
// [Asm]   r9 [label="a2", color=blue];
// [Asm]   r26 [label="v20 ← a2", color=green];
// [Asm]   r6 [label="v30 ← a1", color=green];
// [Asm]   r13 [label="a6", color=blue];
// [Asm]   r4 [label="v7 ← s1", color=green];
// [Asm]   r29 [label="v24 ← a1", color=green];
// [Asm]   r7 [label="a0", color=blue];
// [Asm]   r10 [label="a3", color=blue];
// [Asm]   r8 [label="a1", color=blue];
// [Asm]   r5 [label="v6 ← s2", color=green];
// [Asm]   r32 [label="v2 ← a0", color=green];
// [Asm]   r24 [label="v15 ← a1", color=green];
// [Asm]   r15 [label="t0", color=blue];
// [Asm]   r31 [label="v14 ← a0", color=green];
// [Asm]   r17 [label="t2", color=blue];
// [Asm]   r12 [label="a5", color=blue];
// [Asm]   r20 [label="v8 ← a1", color=green];
// [Asm]   r23 [label="v18 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r27 [label="v17 ← a0", color=green];
// [Asm]   r1 [label="s10", color=blue];
// [Asm]   r28 [label="v26 ← a2", color=green];
// [Asm]   r11 [label="a4", color=blue];
// [Asm]   r34 [label="v4 ← a2", color=green];
// [Asm]   r22 [label="v10 ← a1", color=green];
// [Asm]   r14 [label="a7", color=blue];
// [Asm]   r30 [label="v13 ← a1", color=green];
// [Asm]   r25 [label="v12 ← s1", color=green];
// [Asm]   r2 [label="v5 ← s0", color=green];
// [Asm]   r16 [label="t1", color=blue];
// [Asm]   r18 [label="t3", color=blue];
// [Asm]   r19 [label="t4", color=blue];
// [Asm]   r21 [label="v9 ← a0", color=green];
// [Asm]   r2 -- r20;
// [Asm]   r12 -- r25;
// [Asm]   r2 -- r31;
// [Asm]   r5 -- r21;
// [Asm]   r9 -- r25;
// [Asm]   r16 -- r25;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r7 -- r25;
// [Asm]   r18 -- r25;
// [Asm]   r5 -- r18;
// [Asm]   r30 -- r31;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r32;
// [Asm]   r3 -- r11;
// [Asm]   r5 -- r29;
// [Asm]   r2 -- r16;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r31;
// [Asm]   r3 -- r34;
// [Asm]   r15 -- r25;
// [Asm]   r3 -- r5;
// [Asm]   r2 -- r34;
// [Asm]   r5 -- r31;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r33;
// [Asm]   r2 -- r6;
// [Asm]   r24 -- r31;
// [Asm]   r25 -- r29;
// [Asm]   r3 -- r30;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r3 -- r13;
// [Asm]   r7 -- r10;
// [Asm]   r4 -- r28;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r3 -- r33;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r27;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r17;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r32 -- r34;
// [Asm]   r5 -- r14;
// [Asm]   r3 -- r7;
// [Asm]   r2 -- r22;
// [Asm]   r10 -- r25;
// [Asm]   r1 -- r5;
// [Asm]   r8 -- r32;
// [Asm]   r2 -- r24;
// [Asm]   r21 -- r22;
// [Asm]   r7 -- r8;
// [Asm]   r24 -- r25;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r11 -- r25;
// [Asm]   r5 -- r34;
// [Asm]   r6 -- r7;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r7 -- r29;
// [Asm]   r3 -- r25;
// [Asm]   r2 -- r26;
// [Asm]   r4 -- r5;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r7 -- r24;
// [Asm]   r3 -- r12;
// [Asm]   r7 -- r26;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r22;
// [Asm]   r7 -- r13;
// [Asm]   r5 -- r19;
// [Asm]   r25 -- r30;
// [Asm]   r4 -- r20;
// [Asm]   r25 -- r26;
// [Asm]   r3 -- r28;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r17 -- r25;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r8 -- r25;
// [Asm]   r13 -- r25;
// [Asm]   r24 -- r26;
// [Asm]   r7 -- r28;
// [Asm]   r3 -- r22;
// [Asm]   r7 -- r17;
// [Asm]   r33 -- r34;
// [Asm]   r8 -- r28;
// [Asm]   r2 -- r28;
// [Asm]   r7 -- r22;
// [Asm]   r2 -- r29;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r7 -- r19;
// [Asm]   r5 -- r28;
// [Asm]   r2 -- r14;
// [Asm]   r32 -- r33;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r26;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r9;
// [Asm]   r9 -- r33;
// [Asm]   r14 -- r25;
// [Asm]   r22 -- r28;
// [Asm]   r7 -- r15;
// [Asm]   r3 -- r29;
// [Asm]   r7 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r25 -- r31;
// [Asm]   r1 -- r25;
// [Asm]   r2 -- r21;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r30;
// [Asm]   r9 -- r32;
// [Asm]   r8 -- r26;
// [Asm]   r5 -- r25;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r7 -- r12;
// [Asm]   r5 -- r30;
// [Asm]   r19 -- r25;
// [Asm]   r2 -- r3;
// [Asm]   r20 -- r21;
// [Asm]   r7 -- r14;
// [Asm]   r2 -- r27;
// [Asm]   r5 -- r15;
// [Asm]   r4 -- r19;
// [Asm]   r1 -- r24;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v19-> 1:s10-> 2:v5-> 3:zero-> 4:v7-> 5:v6-> 22:v10-> 7:a0-> 28:v26-> 8:a1-> 25:v12-> 9:a2-> 10:a3-> 11:a4-> 12:a5-> 13:a6-> 14:a7-> 15:t0-> 16:t1-> 17:t2-> 18:t3-> 19:t4-> 24:v15-> 26:v20-> 6:v30-> 21:v9-> 20:v8-> 29:v24-> 31:v14-> 30:v13-> 27:v17-> 32:v2-> 33:v3-> 34:v4-> 23:v18"
// [Asm]   comment = "v19<-a0;v3<-a1;v20<-a2;v30<-a1;v7<-s1;v24<-a1;v6<-s2;v2<-a0;v15<-a1;v14<-a0;v8<-a1;v18<-a0;v17<-a0;v26<-a2;v4<-a2;v10<-a1;v13<-a1;v12<-s1;v5<-s0;v9<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of fold.63"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v19, v7 ->   mv a0, s1
// [Asm] subst   mv s10, v5 ->   mv s10, s0
// [Asm] subst   ld v30, 0(v5) ->   ld a1, 0(s0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   jalr v30 ->   jalr a1
// [Asm] subst   mv v8, a0 ->   mv a1, a0
// [Asm] subst   lw v9, 0(v8) ->   lw a0, 0(a1)
// [Asm] subst   lw v10, 4(v8) ->   lw a1, 4(a1)
// [Asm] subst   beq v9, zero, .fold.63_1 ->   beq a0, zero, .fold.63_1
// [Asm] subst   j .fold.63_6 ->   j .fold.63_6
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v18, v12 ->   mv a0, s1
// [Asm] subst   mv s10, v6 ->   mv s10, s2
// [Asm] subst   ld v20, 0(v6) ->   ld a2, 0(s2)
// [Asm] subst   mv a0, v12 ->   mv a0, s1
// [Asm] subst   jalr v20 ->   jalr a2
// [Asm] subst   mv v7, v17 ->   mv s1, a0
// [Asm] subst   j .fold.63_0 ->   j .fold.63_0
// [Asm] subst   mv s10, v6 ->   mv s10, s2
// [Asm] subst   ld v26, 0(v6) ->   ld a2, 0(s2)
// [Asm] subst   mv a0, v7 ->   mv a0, s1
// [Asm] subst   jalr v26 ->   jalr a2
// [Asm] subst   mv v12, a0 ->   mv s1, a0
// [Asm] subst   mv s10, v5 ->   mv s10, s0
// [Asm] subst   ld v24, 0(v5) ->   ld a1, 0(s0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   jalr v24 ->   jalr a1
// [Asm] subst   mv v13, a0 ->   mv a1, a0
// [Asm] subst   lw v14, 0(v13) ->   lw a0, 0(a1)
// [Asm] subst   lw v15, 4(v13) ->   lw a1, 4(a1)
// [Asm] subst   beq v14, zero, .fold.63_3 ->   beq a0, zero, .fold.63_3
// [Asm] subst   mv v5, v2 ->   mv s0, a0
// [Asm] subst   mv v6, v3 ->   mv s2, a1
// [Asm] subst   mv v7, v4 ->   mv s1, a2
// [Asm] pre_assigned_registers: FreeVar(fvref=^1) -> v3, Self(fref=f18) -> v0, FnParam(fref=f18, fpref=$f.0) -> v2, Insn(iref=%0) -> v4, BlockParam(bref=b3, bpref=$b.0) -> v5
// [Asm] skipping Op(ty=Bool, op=Le, args=[FreeVar(fvref=^1), FnParam(fref=f18, fpref=$f.0)])
// [Asm] defs: []
// [Asm] live_set: [zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [zero]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [v6]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux.707"];
// [Asm]   r0 [label="v0 ← a1", color=green];
// [Asm]   r6 [label="v6 ← a0", color=green];
// [Asm]   r5 [label="v5 ← a0", color=green];
// [Asm]   r4 [label="v3 ← a1", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r3 [label="v2 ← a0", color=green];
// [Asm]   r2 [label="a0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:v0-> 1:zero-> 3:v2-> 4:v3-> 2:a0-> 5:v5-> 6:v6"
// [Asm]   comment = "v0<-a1;v6<-a0;v5<-a0;v3<-a1;v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux.707"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   lw v3, 8(v0) ->   lw a1, 8(a1)
// [Asm] subst   blt v2, v3, .aux.707_2 ->   blt a0, a1, .aux.707_2
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v5, zero ->   mv a0, zero
// [Asm] subst   li v6, 1 ->   li a0, 1
// [Asm] subst   j .aux.707_3 ->   j .aux.707_3
// [Asm] pre_assigned_registers: FreeVar(fvref=^1) -> v3, FnParam(fref=f14, fpref=$f.0) -> v2, Self(fref=f14) -> v0, Insn(iref=%0) -> v4
// [Asm] defs: []
// [Asm] live_set: [a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux.590"];
// [Asm]   r0 [label="v0 ← a1", color=green];
// [Asm]   r4 [label="v4 ← a0", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r3 [label="v3 ← a1", color=green];
// [Asm]   r2 [label="v2 ← a0", color=green];
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r3;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:v0-> 1:a0-> 2:v2-> 3:v3-> 4:v4"
// [Asm]   comment = "v0<-a1;v4<-a0;v3<-a1;v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux.590"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   lw v3, 8(v0) ->   lw a1, 8(a1)
// [Asm] subst   add v4, v3, v2 ->   add a0, a1, a0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v35, Mem(fref=f3, mref=m4) -> v2, Insn(iref=%8) -> v16, Insn(iref=%10) -> v18, Insn(iref=%25) -> v29, Insn(iref=%14) -> v34, Self(fref=f3) -> v0, Insn(iref=%4) -> v12, BlockParam(bref=b6, bpref=$b.0) -> v36, Insn(iref=%1) -> v9, Insn(iref=%11) -> v19, Insn(iref=%26) -> v30, Insn(iref=%6) -> v14, Mem(fref=f3, mref=m0) -> v7, Insn(iref=%9) -> v17, Insn(iref=%16) -> v22, Insn(iref=%24) -> v28, Mem(fref=f3, mref=m3) -> v6, Insn(iref=%5) -> v13, Insn(iref=%0) -> v8, Insn(iref=%19) -> v25, Insn(iref=%18) -> v24, Insn(iref=%3) -> v11, Insn(iref=%13) -> v21, Insn(iref=%7) -> v15, BlockParam(bref=b5, bpref=$b.0) -> v33, Insn(iref=%22) -> v32, Insn(iref=%17) -> v23, Insn(iref=%23) -> v27, Mem(fref=f3, mref=m1) -> v3, Insn(iref=%2) -> v10, Mem(fref=f3, mref=m5) -> v4, Insn(iref=%20) -> v26, Insn(iref=%21) -> v31, Mem(fref=f3, mref=m2) -> v5, Insn(iref=%12) -> v20
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%18), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%11), Int32(val=0)])
// [Asm] defs: []
// [Asm] live_set: [zero, v22]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v22]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v31]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v31 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v40]
// [Asm] live_set: [zero, v40]
// [Asm] move_origin: []
// [Asm] defined: v40 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v40]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v32]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v32 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v33]
// [Asm] live_set: [v33]
// [Asm] move_origin: [zero]
// [Asm] defined: v33 is X
// [Asm] defs: []
// [Asm] live_set: [v33]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, s11]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [v78]
// [Asm] live_set: [zero, a0, v78, s11]
// [Asm] move_origin: []
// [Asm] defined: v78 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, a0, a1, s11]
// [Asm] move_origin: [v78]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, s11]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [zero, v8, s11]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v8, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v8, s11]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v8, s11]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [v76]
// [Asm] live_set: [zero, a0, v8, s11, v76]
// [Asm] move_origin: []
// [Asm] defined: v76 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, a0, v8, a1, s11]
// [Asm] move_origin: [v76]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, v8, s11]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [zero, v8, s11, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v8, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [zero, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v7, v8, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v75]
// [Asm] live_set: [v75, zero, v7, v8, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: v75 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v7, v8, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v7, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v7, s11]
// [Asm] move_origin: []
// [Asm] defs: [v3]
// [Asm] live_set: [zero, v7, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v7, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v72]
// [Asm] live_set: [v72, zero, v7, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v72 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v7, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v73]
// [Asm] live_set: [v73, zero, v7, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v73 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v7, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero, v7, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero, v7, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v70]
// [Asm] live_set: [v5, zero, v7, v70, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v70 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v5, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6, v5, zero]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v6, v5, s11, zero]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v67]
// [Asm] live_set: [v6, v5, s11, zero, v67]
// [Asm] move_origin: []
// [Asm] defined: v67 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v68]
// [Asm] live_set: [v6, v5, s11, zero, v68]
// [Asm] move_origin: []
// [Asm] defined: v68 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6, v5, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v6, s11, zero, a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, s11, zero, a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v14]
// [Asm] live_set: [v14, s11, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v14, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v14, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v14, s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v63]
// [Asm] live_set: [v63, v14, s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v63 is X
// [Asm] defs: []
// [Asm] live_set: [v14, s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v64]
// [Asm] live_set: [v14, s11, zero, v64, v2]
// [Asm] move_origin: []
// [Asm] defined: v64 is X
// [Asm] defs: []
// [Asm] live_set: [v14, s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v14, s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [s11, zero, a0, v2]
// [Asm] move_origin: [v14]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, s11, zero, a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v16]
// [Asm] live_set: [v16, s11, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v16, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v4]
// [Asm] live_set: [v4, v16, zero]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v4, v16, zero]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v60]
// [Asm] live_set: [v4, v16, zero, v60]
// [Asm] move_origin: []
// [Asm] defined: v60 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v16, zero]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v4, v16, zero]
// [Asm] move_origin: [v16]
// [Asm] defined: s10 is X
// [Asm] defs: [v57]
// [Asm] live_set: [v4, v16, v57, zero]
// [Asm] move_origin: []
// [Asm] defined: v57 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v16, v57, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, v16, v57, zero, a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, v16, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v18]
// [Asm] live_set: [v4, v16, v18, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v16, v18, zero]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v19, v4, v16, v18, zero]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v19, v4, v16, zero, v20]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v16, zero, v20]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v25, v4, v16, zero, v22]
// [Asm] move_origin: [v4]
// [Asm] defined: s10 is X
// [Asm] defs: [v47]
// [Asm] live_set: [v25, v4, v47, v16, zero, v22]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v4, v47, v16, zero, v22]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v25, v4, v47, v16, zero, a0]
// [Asm] move_origin: [v22]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, v47, a1, v16, zero, a0]
// [Asm] move_origin: [v25]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, v16, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v27]
// [Asm] live_set: [v4, v16, zero, v27]
// [Asm] move_origin: [a0]
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v16, zero, v27]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, v16, zero, v27]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, zero, a0, v27]
// [Asm] move_origin: [v16]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0, v27]
// [Asm] move_origin: [v4]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: [v27]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v28]
// [Asm] live_set: [v28, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v28 is X
// [Asm] defs: []
// [Asm] live_set: [v28, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v28, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v28]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v29]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v29 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v43]
// [Asm] live_set: [v43, zero]
// [Asm] move_origin: []
// [Asm] defined: v43 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v43]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v30]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v30 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v33]
// [Asm] live_set: [v33]
// [Asm] move_origin: [zero]
// [Asm] defined: v33 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v36]
// [Asm] move_origin: [v33]
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v34]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v34 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v37]
// [Asm] live_set: [v37, zero]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v37]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v35]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v36]
// [Asm] live_set: [v36]
// [Asm] move_origin: [zero]
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [v36]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v36]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v16, zero, v20, v4]
// [Asm] move_origin: [v4]
// [Asm] defined: s10 is X
// [Asm] defs: [v53]
// [Asm] live_set: [v16, v53, zero, v20, v4]
// [Asm] move_origin: []
// [Asm] defined: v53 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v53, zero, v20, v4]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v16, v53, zero, a0, v20, v4]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v16, v53, zero, a0, v4, a1]
// [Asm] move_origin: [v20]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v16, zero, a0, v4]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v22]
// [Asm] live_set: [v16, zero, v22, v4]
// [Asm] move_origin: [a0]
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v16, zero, v22, v4]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v16, zero, v22, v4]
// [Asm] move_origin: [v16]
// [Asm] defined: s10 is X
// [Asm] defs: [v51]
// [Asm] live_set: [v16, zero, v22, v4, v51]
// [Asm] move_origin: []
// [Asm] defined: v51 is X
// [Asm] defs: []
// [Asm] live_set: [v16, zero, v22, v4, v51]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v16, zero, a0, v22, v4, v51]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v16, zero, a0, v22, v4]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v23]
// [Asm] live_set: [v16, zero, v22, v23, v4]
// [Asm] move_origin: [a0]
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [v16, zero, v22, v23, v4]
// [Asm] move_origin: []
// [Asm] defs: [v24]
// [Asm] live_set: [v16, zero, v22, v23, v4, v24]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v16, zero, v22, v4, v24]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v4, v16, zero, v22]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.87"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r46 [label="v22 ← s2", color=green];
// [Asm]   r38 [label="v4 ← s1", color=green];
// [Asm]   r33 [label="v14 ← a0", color=green];
// [Asm]   r59 [label="v23 ← a1", color=green];
// [Asm]   r9 [label="t0", color=blue];
// [Asm]   r26 [label="v72 ← a2", color=green];
// [Asm]   r47 [label="v47 ← a2", color=green];
// [Asm]   r6 [label="a5", color=blue];
// [Asm]   r44 [label="v20 ← a1", color=green];
// [Asm]   r13 [label="t4", color=blue];
// [Asm]   r42 [label="v18 ← a1", color=green];
// [Asm]   r53 [label="v36 ← a0", color=green];
// [Asm]   r4 [label="a3", color=blue];
// [Asm]   r29 [label="v70 ← a3", color=green];
// [Asm]   r35 [label="v63 ← a2", color=green];
// [Asm]   r56 [label="v35 ← a0", color=green];
// [Asm]   r7 [label="a6", color=blue];
// [Asm]   r10 [label="t1", color=blue];
// [Asm]   r8 [label="a7", color=blue];
// [Asm]   r5 [label="a4", color=blue];
// [Asm]   r54 [label="v34 ← a0", color=green];
// [Asm]   r36 [label="v64 ← a2", color=green];
// [Asm]   r15 [label="v40 ← a0", color=green];
// [Asm]   r32 [label="v68 ← a0", color=green];
// [Asm]   r24 [label="v75 ← a2", color=green];
// [Asm]   r49 [label="v28 ← a0", color=green];
// [Asm]   r57 [label="v53 ← a2", color=green];
// [Asm]   r43 [label="v19 ← a0", color=green];
// [Asm]   r31 [label="v67 ← a0", color=green];
// [Asm]   r39 [label="v60 ← a0", color=green];
// [Asm]   r17 [label="v33 ← a0", color=green];
// [Asm]   r52 [label="v30 ← a0", color=green];
// [Asm]   r12 [label="t3", color=blue];
// [Asm]   r48 [label="v27 ← a2", color=green];
// [Asm]   r37 [label="v16 ← s0", color=green];
// [Asm]   r20 [label="v8 ← s0", color=green];
// [Asm]   r23 [label="v7 ← a1", color=green];
// [Asm]   r3 [label="a2", color=blue];
// [Asm]   r27 [label="v73 ← a2", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r40 [label="s10", color=blue];
// [Asm]   r28 [label="v5 ← a2", color=green];
// [Asm]   r41 [label="v57 ← a1", color=green];
// [Asm]   r11 [label="t2", color=blue];
// [Asm]   r58 [label="v51 ← a1", color=green];
// [Asm]   r34 [label="v2 ← a1", color=green];
// [Asm]   r22 [label="v9 ← a0", color=green];
// [Asm]   r14 [label="v31 ← a0", color=green];
// [Asm]   r50 [label="v29 ← a0", color=green];
// [Asm]   r51 [label="v43 ← a0", color=green];
// [Asm]   r30 [label="v6 ← a1", color=green];
// [Asm]   r45 [label="v25 ← a1", color=green];
// [Asm]   r25 [label="v3 ← a0", color=green];
// [Asm]   r55 [label="v37 ← a0", color=green];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="v32 ← a0", color=green];
// [Asm]   r18 [label="s11", color=blue];
// [Asm]   r19 [label="v78 ← a1", color=green];
// [Asm]   r21 [label="v76 ← a1", color=green];
// [Asm]   r60 [label="v24 ← a0", color=green];
// [Asm]   r37 -- r39;
// [Asm]   r2 -- r38;
// [Asm]   r1 -- r26;
// [Asm]   r28 -- r32;
// [Asm]   r0 -- r48;
// [Asm]   r1 -- r30;
// [Asm]   r1 -- r57;
// [Asm]   r38 -- r42;
// [Asm]   r28 -- r30;
// [Asm]   r5 -- r18;
// [Asm]   r1 -- r45;
// [Asm]   r38 -- r46;
// [Asm]   r1 -- r52;
// [Asm]   r18 -- r21;
// [Asm]   r3 -- r37;
// [Asm]   r2 -- r37;
// [Asm]   r11 -- r18;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r18 -- r35;
// [Asm]   r18 -- r34;
// [Asm]   r1 -- r50;
// [Asm]   r0 -- r6;
// [Asm]   r18 -- r28;
// [Asm]   r20 -- r23;
// [Asm]   r13 -- r38;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r58;
// [Asm]   r40 -- r46;
// [Asm]   r20 -- r22;
// [Asm]   r25 -- r29;
// [Asm]   r46 -- r59;
// [Asm]   r1 -- r48;
// [Asm]   r2 -- r48;
// [Asm]   r10 -- r38;
// [Asm]   r59 -- r60;
// [Asm]   r0 -- r57;
// [Asm]   r10 -- r18;
// [Asm]   r0 -- r9;
// [Asm]   r1 -- r40;
// [Asm]   r7 -- r38;
// [Asm]   r37 -- r60;
// [Asm]   r1 -- r2;
// [Asm]   r0 -- r38;
// [Asm]   r38 -- r57;
// [Asm]   r9 -- r20;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r51;
// [Asm]   r0 -- r10;
// [Asm]   r23 -- r24;
// [Asm]   r1 -- r11;
// [Asm]   r0 -- r47;
// [Asm]   r18 -- r33;
// [Asm]   r18 -- r20;
// [Asm]   r1 -- r41;
// [Asm]   r1 -- r38;
// [Asm]   r18 -- r37;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r1 -- r35;
// [Asm]   r0 -- r44;
// [Asm]   r3 -- r46;
// [Asm]   r38 -- r45;
// [Asm]   r0 -- r18;
// [Asm]   r18 -- r24;
// [Asm]   r23 -- r29;
// [Asm]   r38 -- r59;
// [Asm]   r11 -- r20;
// [Asm]   r34 -- r35;
// [Asm]   r1 -- r43;
// [Asm]   r37 -- r43;
// [Asm]   r28 -- r31;
// [Asm]   r1 -- r8;
// [Asm]   r3 -- r38;
// [Asm]   r1 -- r34;
// [Asm]   r1 -- r47;
// [Asm]   r1 -- r55;
// [Asm]   r44 -- r57;
// [Asm]   r30 -- r32;
// [Asm]   r0 -- r34;
// [Asm]   r37 -- r57;
// [Asm]   r1 -- r22;
// [Asm]   r40 -- r44;
// [Asm]   r7 -- r20;
// [Asm]   r33 -- r36;
// [Asm]   r6 -- r46;
// [Asm]   r1 -- r13;
// [Asm]   r33 -- r35;
// [Asm]   r37 -- r47;
// [Asm]   r4 -- r18;
// [Asm]   r8 -- r20;
// [Asm]   r11 -- r46;
// [Asm]   r0 -- r19;
// [Asm]   r5 -- r38;
// [Asm]   r11 -- r37;
// [Asm]   r6 -- r20;
// [Asm]   r23 -- r26;
// [Asm]   r12 -- r20;
// [Asm]   r23 -- r25;
// [Asm]   r46 -- r60;
// [Asm]   r38 -- r41;
// [Asm]   r0 -- r3;
// [Asm]   r38 -- r40;
// [Asm]   r1 -- r29;
// [Asm]   r0 -- r45;
// [Asm]   r8 -- r18;
// [Asm]   r0 -- r37;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r10 -- r46;
// [Asm]   r38 -- r58;
// [Asm]   r6 -- r38;
// [Asm]   r9 -- r46;
// [Asm]   r7 -- r18;
// [Asm]   r0 -- r30;
// [Asm]   r43 -- r44;
// [Asm]   r0 -- r20;
// [Asm]   r20 -- r21;
// [Asm]   r1 -- r54;
// [Asm]   r7 -- r46;
// [Asm]   r1 -- r24;
// [Asm]   r1 -- r42;
// [Asm]   r18 -- r23;
// [Asm]   r2 -- r20;
// [Asm]   r38 -- r43;
// [Asm]   r4 -- r38;
// [Asm]   r25 -- r28;
// [Asm]   r37 -- r46;
// [Asm]   r0 -- r13;
// [Asm]   r1 -- r12;
// [Asm]   r40 -- r45;
// [Asm]   r38 -- r48;
// [Asm]   r1 -- r37;
// [Asm]   r1 -- r4;
// [Asm]   r37 -- r38;
// [Asm]   r1 -- r7;
// [Asm]   r37 -- r59;
// [Asm]   r1 -- r18;
// [Asm]   r18 -- r25;
// [Asm]   r1 -- r56;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r30 -- r31;
// [Asm]   r38 -- r44;
// [Asm]   r18 -- r27;
// [Asm]   r1 -- r20;
// [Asm]   r42 -- r43;
// [Asm]   r3 -- r18;
// [Asm]   r38 -- r47;
// [Asm]   r37 -- r48;
// [Asm]   r38 -- r60;
// [Asm]   r9 -- r18;
// [Asm]   r13 -- r37;
// [Asm]   r37 -- r40;
// [Asm]   r37 -- r42;
// [Asm]   r1 -- r46;
// [Asm]   r1 -- r31;
// [Asm]   r10 -- r20;
// [Asm]   r18 -- r26;
// [Asm]   r10 -- r37;
// [Asm]   r0 -- r2;
// [Asm]   r12 -- r46;
// [Asm]   r1 -- r21;
// [Asm]   r2 -- r46;
// [Asm]   r8 -- r37;
// [Asm]   r6 -- r18;
// [Asm]   r2 -- r47;
// [Asm]   r18 -- r30;
// [Asm]   r1 -- r27;
// [Asm]   r28 -- r29;
// [Asm]   r13 -- r18;
// [Asm]   r0 -- r11;
// [Asm]   r1 -- r49;
// [Asm]   r18 -- r31;
// [Asm]   r1 -- r44;
// [Asm]   r1 -- r6;
// [Asm]   r45 -- r47;
// [Asm]   r37 -- r58;
// [Asm]   r1 -- r58;
// [Asm]   r20 -- r24;
// [Asm]   r12 -- r38;
// [Asm]   r5 -- r20;
// [Asm]   r4 -- r37;
// [Asm]   r2 -- r18;
// [Asm]   r13 -- r46;
// [Asm]   r1 -- r23;
// [Asm]   r18 -- r29;
// [Asm]   r0 -- r41;
// [Asm]   r25 -- r27;
// [Asm]   r46 -- r47;
// [Asm]   r1 -- r32;
// [Asm]   r0 -- r21;
// [Asm]   r1 -- r15;
// [Asm]   r4 -- r20;
// [Asm]   r1 -- r60;
// [Asm]   r25 -- r26;
// [Asm]   r45 -- r46;
// [Asm]   r8 -- r38;
// [Asm]   r18 -- r22;
// [Asm]   r23 -- r27;
// [Asm]   r18 -- r36;
// [Asm]   r13 -- r20;
// [Asm]   r22 -- r24;
// [Asm]   r1 -- r28;
// [Asm]   r1 -- r39;
// [Asm]   r33 -- r34;
// [Asm]   r18 -- r32;
// [Asm]   r7 -- r37;
// [Asm]   r6 -- r37;
// [Asm]   r2 -- r57;
// [Asm]   r4 -- r46;
// [Asm]   r18 -- r19;
// [Asm]   r0 -- r46;
// [Asm]   r9 -- r38;
// [Asm]   r5 -- r46;
// [Asm]   r0 -- r8;
// [Asm]   r5 -- r37;
// [Asm]   r37 -- r44;
// [Asm]   r1 -- r59;
// [Asm]   r23 -- r28;
// [Asm]   r34 -- r36;
// [Asm]   r22 -- r23;
// [Asm]   r9 -- r37;
// [Asm]   r12 -- r37;
// [Asm]   r37 -- r45;
// [Asm]   r11 -- r38;
// [Asm]   r0 -- r12;
// [Asm]   r46 -- r58;
// [Asm]   r18 -- r38;
// [Asm]   r38 -- r39;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r36;
// [Asm]   r1 -- r3;
// [Asm]   r45 -- r60;
// [Asm]   r0 -- r7;
// [Asm]   r2 -- r3;
// [Asm]   r8 -- r46;
// [Asm]   r37 -- r41;
// [Asm]   r12 -- r18;
// [Asm]   comment = "0:a0-> 1:zero-> 2:a1-> 3:a2-> 18:s11-> 20:v8-> 37:v16-> 38:v4-> 4:a3-> 46:v22-> 5:a4-> 6:a5-> 7:a6-> 8:a7-> 9:t0-> 10:t1-> 11:t2-> 12:t3-> 13:t4-> 47:v47-> 45:v25-> 40:s10-> 44:v20-> 57:v53-> 48:v27-> 58:v51-> 60:v24-> 59:v23-> 21:v76-> 41:v57-> 43:v19-> 42:v18-> 19:v78-> 22:v9-> 23:v7-> 24:v75-> 25:v3-> 26:v72-> 27:v73-> 28:v5-> 29:v70-> 30:v6-> 31:v67-> 32:v68-> 34:v2-> 33:v14-> 35:v63-> 36:v64-> 39:v60-> 14:v31-> 15:v40-> 16:v32-> 49:v28-> 50:v29-> 51:v43-> 52:v30-> 54:v34-> 55:v37-> 56:v35-> 17:v33-> 53:v36"
// [Asm]   comment = "v22<-s2;v4<-s1;v14<-a0;v23<-a1;v72<-a2;v47<-a2;v20<-a1;v18<-a1;v36<-a0;v70<-a3;v63<-a2;v35<-a0;v34<-a0;v64<-a2;v40<-a0;v68<-a0;v75<-a2;v28<-a0;v53<-a2;v19<-a0;v67<-a0;v60<-a0;v33<-a0;v30<-a0;v27<-a2;v16<-s0;v8<-s0;v7<-a1;v73<-a2;v5<-a2;v57<-a1;v51<-a1;v2<-a1;v9<-a0;v31<-a0;v29<-a0;v43<-a0;v6<-a1;v25<-a1;v3<-a0;v37<-a0;v32<-a0;v78<-a1;v76<-a1;v24<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.87"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv a0, v22 ->   mv a0, s2
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v40, 10 ->   li a0, 10
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   mv v33, zero ->   mv a0, zero
// [Asm] subst   j .main.87_5 ->   j .main.87_5
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   li v78, 100 ->   li a1, 100
// [Asm] subst   call range.43 ->   call range.43
// [Asm] subst   mv v8, a0 ->   mv s0, a0
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   li v76, 1000 ->   li a1, 1000
// [Asm] subst   call range.43 ->   call range.43
// [Asm] subst   addi v7, s11, -24 ->   addi a1, s11, -24
// [Asm] subst   andi s11, v7, -8 ->   andi s11, a1, -8
// [Asm] subst   la v75, aux.430 ->   la a2, aux.430
// [Asm] subst   sd v75, 0(v7) ->   sd a2, 0(a1)
// [Asm] subst   sd v8, 8(v7) ->   sd s0, 8(a1)
// [Asm] subst   sd v9, 16(v7) ->   sd a0, 16(a1)
// [Asm] subst   addi v3, s11, -16 ->   addi a0, s11, -16
// [Asm] subst   andi s11, v3, -8 ->   andi s11, a0, -8
// [Asm] subst   la v72, aux.590 ->   la a2, aux.590
// [Asm] subst   sd v72, 0(v3) ->   sd a2, 0(a0)
// [Asm] subst   li v73, 1 ->   li a2, 1
// [Asm] subst   sd v73, 8(v3) ->   sd a2, 8(a0)
// [Asm] subst   addi v5, s11, -24 ->   addi a2, s11, -24
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a2, -8
// [Asm] subst   la v70, aux.662 ->   la a3, aux.662
// [Asm] subst   sd v70, 0(v5) ->   sd a3, 0(a2)
// [Asm] subst   sd v7, 8(v5) ->   sd a1, 8(a2)
// [Asm] subst   sd v3, 16(v5) ->   sd a0, 16(a2)
// [Asm] subst   addi v6, s11, -16 ->   addi a1, s11, -16
// [Asm] subst   andi s11, v6, -8 ->   andi s11, a1, -8
// [Asm] subst   la v67, aux.707 ->   la a0, aux.707
// [Asm] subst   sd v67, 0(v6) ->   sd a0, 0(a1)
// [Asm] subst   li v68, 50 ->   li a0, 50
// [Asm] subst   sd v68, 8(v6) ->   sd a0, 8(a1)
// [Asm] subst   mv a0, v5 ->   mv a0, a2
// [Asm] subst   call filter.15 ->   call filter.15
// [Asm] subst   addi v2, s11, -16 ->   addi a1, s11, -16
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a1, -8
// [Asm] subst   la v63, aux.725 ->   la a2, aux.725
// [Asm] subst   sd v63, 0(v2) ->   sd a2, 0(a1)
// [Asm] subst   li v64, 1200 ->   li a2, 1200
// [Asm] subst   sd v64, 8(v2) ->   sd a2, 8(a1)
// [Asm] subst   call filter.15 ->   call filter.15
// [Asm] subst   mv v16, a0 ->   mv s0, a0
// [Asm] subst   addi v4, s11, -8 ->   addi s1, s11, -8
// [Asm] subst   andi s11, v4, -8 ->   andi s11, s1, -8
// [Asm] subst   la v60, add.727 ->   la a0, add.727
// [Asm] subst   sd v60, 0(v4) ->   sd a0, 0(s1)
// [Asm] subst   mv s10, v16 ->   mv s10, s0
// [Asm] subst   ld v57, 0(v16) ->   ld a1, 0(s0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   jalr v57 ->   jalr a1
// [Asm] subst   mv v18, a0 ->   mv a1, a0
// [Asm] subst   lw v19, 0(v18) ->   lw a0, 0(a1)
// [Asm] subst   lw v20, 4(v18) ->   lw a1, 4(a1)
// [Asm] subst   beq v19, zero, .main.87_1 ->   beq a0, zero, .main.87_1
// [Asm] subst   mv s10, v4 ->   mv s10, s1
// [Asm] subst   ld v47, 0(v4) ->   ld a2, 0(s1)
// [Asm] subst   mv a0, v22 ->   mv a0, s2
// [Asm] subst   jalr v47 ->   jalr a2
// [Asm] subst   mv v27, a0 ->   mv a2, a0
// [Asm] subst   mv a0, v16 ->   mv a0, s0
// [Asm] subst   mv a1, v4 ->   mv a1, s1
// [Asm] subst   call fold.63 ->   call fold.63
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v43, 10 ->   li a0, 10
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   mv v33, zero ->   mv a0, zero
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v37, 10 ->   li a0, 10
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   mv v36, zero ->   mv a0, zero
// [Asm] subst   j .main.87_6 ->   j .main.87_6
// [Asm] subst   ret ->   ret
// [Asm] subst   mv s10, v4 ->   mv s10, s1
// [Asm] subst   ld v53, 0(v4) ->   ld a2, 0(s1)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   jalr v53 ->   jalr a2
// [Asm] subst   mv v22, a0 ->   mv s2, a0
// [Asm] subst   mv s10, v16 ->   mv s10, s0
// [Asm] subst   ld v51, 0(v16) ->   ld a1, 0(s0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   jalr v51 ->   jalr a1
// [Asm] subst   mv v23, a0 ->   mv a1, a0
// [Asm] subst   lw v24, 0(v23) ->   lw a0, 0(a1)
// [Asm] subst   lw v25, 4(v23) ->   lw a1, 4(a1)
// [Asm] subst   beq v24, zero, .main.87_3 ->   beq a0, zero, .main.87_3
// [Asm] pre_assigned_registers: Self(fref=f24) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main.87 ->   call main.87
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f22) -> v0, FnParam(fref=f22, fpref=$f.0) -> v2, FnParam(fref=f22, fpref=$f.1) -> v3, Insn(iref=%0) -> v4
// [Asm] defs: []
// [Asm] live_set: [a1, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [a1, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of add.727"];
// [Asm]   r0 [label="v0 ← a2", color=green];
// [Asm]   r5 [label="v4 ← a0", color=green];
// [Asm]   r4 [label="v3 ← a1", color=green];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r3 [label="v2 ← a0", color=green];
// [Asm]   r2 [label="a0", color=blue];
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:v0-> 1:a1-> 2:a0-> 3:v2-> 4:v3-> 5:v4"
// [Asm]   comment = "v0<-a2;v4<-a0;v3<-a1;v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of add.727"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v0, s10 ->   mv a2, s10
// [Asm] subst   add v4, v2, v3 ->   add a0, a0, a1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f20, fpref=$f.0) -> v2, FreeVar(fvref=^1) -> v3, Self(fref=f20) -> v0, Insn(iref=%0) -> v4, BlockParam(bref=b3, bpref=$b.0) -> v5
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f20, fpref=$f.0), FreeVar(fvref=^1)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [v6]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [zero]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux.725"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="v2 ← a0", color=green];
// [Asm]   r6 [label="v3 ← a1", color=green];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r1 [label="v6 ← a0", color=green];
// [Asm]   r3 [label="v0 ← a1", color=green];
// [Asm]   r2 [label="v5 ← a0", color=green];
// [Asm]   r0 -- r3;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r5;
// [Asm]   r5 -- r6;
// [Asm]   comment = "0:a0-> 3:v0-> 4:zero-> 5:v2-> 6:v3-> 1:v6-> 2:v5"
// [Asm]   comment = "v2<-a0;v3<-a1;v6<-a0;v0<-a1;v5<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux.725"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   li v6, 1 ->   li a0, 1
// [Asm] subst   j .aux.725_3 ->   j .aux.725_3
// [Asm] subst   mv v5, zero ->   mv a0, zero
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   lw v3, 8(v0) ->   lw a1, 8(a1)
// [Asm] subst   blt v3, v2, .aux.725_2 ->   blt a1, a0, .aux.725_2
// [Asm] before colored: # leaf false
// [Asm] main.87:
// [Asm] # block info: defs: [v76, v67, a1, s11, fa1, v64, v60, v73, v63, fa2, ft6, a4, fa6, v20, a6, ft5, ft10, v6, ft4, v5, ft9, fa4, ft2, a3, a7, fa7, v75, fa3, v68, ft3, t2, v3, t1, v14, v16, v7, ft0, ft1, v8, v19, v4, v57, ft7, a5, a0, v78, a2, v9, s10, ft8, t3, t0, v72, fa5, v18, fa0, t4, v70, v2], uses: [v2, v3, v14, v16, v67, v7, a1, s11, v64, v60, v73, v63, zero, v8, v19, v4, v6, v57, v5, a0, v78, v9, v72, v75, v18, v68, v70, v76], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: [v4, v16, zero, v20]
// [Asm] # block parameters: []
// [Asm] .main.87_0:
// [Asm]   # save_ctx1  # live: [zero, s11]
// [Asm]   # save_ctx2  # live: [zero, s11]
// [Asm]   mv a0, zero  # live: [zero, a0, s11]
// [Asm]   li v78, 100  # live: [zero, a0, v78, s11]
// [Asm]   mv a1, v78  # live: [zero, a0, a1, s11]
// [Asm]   call range.43  # live: [zero, a0, s11]
// [Asm]   mv v8, a0  # live: [zero, v8, s11]
// [Asm]   # restore_ctx2  # live: [zero, v8, s11]
// [Asm]   # save_ctx2  # live: [zero, v8, s11]
// [Asm]   mv a0, zero  # live: [zero, a0, v8, s11]
// [Asm]   li v76, 1000  # live: [zero, a0, v8, s11, v76]
// [Asm]   mv a1, v76  # live: [zero, a0, v8, a1, s11]
// [Asm]   call range.43  # live: [zero, a0, v8, s11]
// [Asm]   mv v9, a0  # live: [zero, v8, s11, v9]
// [Asm]   # restore_ctx2  # live: [zero, v8, s11, v9]
// [Asm]   addi v7, s11, -24  # live: [zero, v7, v8, v9]
// [Asm]   andi s11, v7, -8  # live: [zero, v7, v8, s11, v9]
// [Asm]   la v75, aux.430  # live: [v75, zero, v7, v8, s11, v9]
// [Asm]   sd v75, 0(v7)  # live: [zero, v7, v8, s11, v9]
// [Asm]   sd v8, 8(v7)  # live: [zero, v7, s11, v9]
// [Asm]   sd v9, 16(v7)  # live: [zero, v7, s11]
// [Asm]   addi v3, s11, -16  # live: [zero, v7, v3]
// [Asm]   andi s11, v3, -8  # live: [zero, v7, s11, v3]
// [Asm]   la v72, aux.590  # live: [v72, zero, v7, s11, v3]
// [Asm]   sd v72, 0(v3)  # live: [zero, v7, s11, v3]
// [Asm]   li v73, 1  # live: [v73, zero, v7, s11, v3]
// [Asm]   sd v73, 8(v3)  # live: [zero, v7, s11, v3]
// [Asm]   addi v5, s11, -24  # live: [v5, zero, v7, v3]
// [Asm]   andi s11, v5, -8  # live: [v5, zero, v7, s11, v3]
// [Asm]   la v70, aux.662  # live: [v5, zero, v7, v70, s11, v3]
// [Asm]   sd v70, 0(v5)  # live: [v7, v5, s11, zero, v3]
// [Asm]   sd v7, 8(v5)  # live: [v5, s11, zero, v3]
// [Asm]   sd v3, 16(v5)  # live: [v5, s11, zero]
// [Asm]   addi v6, s11, -16  # live: [v6, v5, zero]
// [Asm]   andi s11, v6, -8  # live: [v6, v5, s11, zero]
// [Asm]   la v67, aux.707  # live: [v6, v5, s11, zero, v67]
// [Asm]   sd v67, 0(v6)  # live: [v6, v5, s11, zero]
// [Asm]   li v68, 50  # live: [v6, v5, s11, zero, v68]
// [Asm]   sd v68, 8(v6)  # live: [v6, v5, s11, zero]
// [Asm]   # save_ctx2  # live: [v6, v5, s11, zero]
// [Asm]   mv a0, v5  # live: [v6, s11, zero, a0]
// [Asm]   mv a1, v6  # live: [a1, s11, zero, a0]
// [Asm]   call filter.15  # live: [s11, zero, a0]
// [Asm]   mv v14, a0  # live: [v14, s11, zero]
// [Asm]   # restore_ctx2  # live: [v14, s11, zero]
// [Asm]   addi v2, s11, -16  # live: [v14, zero, v2]
// [Asm]   andi s11, v2, -8  # live: [v14, s11, zero, v2]
// [Asm]   la v63, aux.725  # live: [v63, v14, s11, zero, v2]
// [Asm]   sd v63, 0(v2)  # live: [v14, s11, zero, v2]
// [Asm]   li v64, 1200  # live: [v14, s11, zero, v64, v2]
// [Asm]   sd v64, 8(v2)  # live: [v14, s11, zero, v2]
// [Asm]   # save_ctx2  # live: [v14, s11, zero, v2]
// [Asm]   mv a0, v14  # live: [s11, zero, a0, v2]
// [Asm]   mv a1, v2  # live: [a1, s11, zero, a0]
// [Asm]   call filter.15  # live: [s11, zero, a0]
// [Asm]   mv v16, a0  # live: [v16, s11, zero]
// [Asm]   # restore_ctx2  # live: [v16, s11, zero]
// [Asm]   addi v4, s11, -8  # live: [v4, v16, zero]
// [Asm]   andi s11, v4, -8  # live: [v4, v16, zero]
// [Asm]   la v60, add.727  # live: [v4, v16, zero, v60]
// [Asm]   sd v60, 0(v4)  # live: [v4, v16, zero]
// [Asm]   mv s10, v16  # live: [v4, v16, zero]
// [Asm]   ld v57, 0(v16)  # live: [v4, v16, v57, zero]
// [Asm]   # save_ctx2  # live: [v4, v16, v57, zero]
// [Asm]   mv a0, zero  # live: [v4, v16, v57, zero, a0]
// [Asm]   jalr v57  # live: [v4, v16, zero, a0]
// [Asm]   mv v18, a0  # live: [v4, v16, v18, zero]
// [Asm]   # restore_ctx2  # live: [v4, v16, v18, zero]
// [Asm]   lw v19, 0(v18)  # live: [v19, v4, v16, v18, zero]
// [Asm]   lw v20, 4(v18)  # live: [v19, v4, v16, zero, v20]
// [Asm] # control
// [Asm]   beq v19, zero, .main.87_1  # live: [v4, v16, zero, v20]
// [Asm] 
// [Asm] # block info: defs: [v25, t1, v22, ft0, ft1, a1, fa1, v51, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, v53, ft9, a5, a0, fa4, ft2, a2, a3, v24, s10, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, v23, fa0, t4, t2], uses: [v16, v53, zero, a0, v20, v23, v4, a1, v24, v51], upward_exposed: [v4, v16, zero, v20], params_defs: []
// [Asm] # live_in: [v4, v16, zero, v20], live_out: [v25, v4, v16, zero, v22]
// [Asm] # block parameters: []
// [Asm] .main.87_2:
// [Asm]   mv s10, v4  # live: [v16, zero, v20, v4]
// [Asm]   ld v53, 0(v4)  # live: [v16, v53, zero, v20, v4]
// [Asm]   # save_ctx2  # live: [v16, v53, zero, v20, v4]
// [Asm]   mv a0, zero  # live: [v16, v53, zero, a0, v20, v4]
// [Asm]   mv a1, v20  # live: [v16, v53, zero, a0, v4, a1]
// [Asm]   jalr v53  # live: [v16, zero, a0, v4]
// [Asm]   mv v22, a0  # live: [v16, zero, v22, v4]
// [Asm]   # restore_ctx2  # live: [v16, zero, v22, v4]
// [Asm]   mv s10, v16  # live: [v16, zero, v22, v4]
// [Asm]   ld v51, 0(v16)  # live: [v16, zero, v22, v4, v51]
// [Asm]   # save_ctx2  # live: [v16, zero, v22, v4, v51]
// [Asm]   mv a0, zero  # live: [v16, zero, a0, v22, v4, v51]
// [Asm]   jalr v51  # live: [v16, zero, a0, v22, v4]
// [Asm]   mv v23, a0  # live: [v16, zero, v22, v23, v4]
// [Asm]   # restore_ctx2  # live: [v16, zero, v22, v23, v4]
// [Asm]   lw v24, 0(v23)  # live: [v16, zero, v22, v23, v4, v24]
// [Asm]   lw v25, 4(v23)  # live: [v25, v16, zero, v22, v4, v24]
// [Asm] # control
// [Asm]   beq v24, zero, .main.87_3  # live: [v25, v4, v16, zero, v22]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, v28, fa1, v33, fa2, ft6, v29, fa6, v27, a4, a6, ft10, v47, ft5, ft7, ft4, ft9, a5, a0, fa4, v30, ft2, a2, v43, a3, s10, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v25, v16, a0, zero, v27, v22, v4, v47, a2, a1, v43, v28], upward_exposed: [v25, v4, v16, zero, v22], params_defs: []
// [Asm] # live_in: [v25, v4, v16, zero, v22], live_out: [v33]
// [Asm] # block parameters: []
// [Asm] .main.87_4:
// [Asm]   mv s10, v4  # live: [v25, v4, v16, zero, v22]
// [Asm]   ld v47, 0(v4)  # live: [v25, v4, v47, v16, zero, v22]
// [Asm]   # save_ctx2  # live: [v25, v4, v47, v16, zero, v22]
// [Asm]   mv a0, v22  # live: [v25, v4, v47, v16, zero, a0]
// [Asm]   mv a1, v25  # live: [v4, v47, a1, v16, zero, a0]
// [Asm]   jalr v47  # live: [v4, v16, zero, a0]
// [Asm]   mv v27, a0  # live: [v4, v16, zero, v27]
// [Asm]   # restore_ctx2  # live: [v4, v16, zero, v27]
// [Asm]   # save_ctx2  # live: [v4, v16, zero, v27]
// [Asm]   mv a0, v16  # live: [v4, zero, a0, v27]
// [Asm]   mv a1, v4  # live: [a1, zero, a0, v27]
// [Asm]   mv a2, v27  # live: [a2, a1, zero, a0]
// [Asm]   call fold.63  # live: [zero, a0]
// [Asm]   mv v28, a0  # live: [v28, zero]
// [Asm]   # restore_ctx2  # live: [v28, zero]
// [Asm]   # save_ctx2  # live: [v28, zero]
// [Asm]   mv a0, v28  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v29, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   li v43, 10  # live: [v43, zero]
// [Asm]   mv a0, v43  # live: [zero, a0]
// [Asm]   call minimbt_print_char  # live: [zero, a0]
// [Asm]   mv v30, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv v33, zero  # live: [v33]
// [Asm] 
// [Asm] # block info: defs: [v36], uses: [v33], upward_exposed: [v33], params_defs: [v33]
// [Asm] # live_in: [v33], live_out: [v36]
// [Asm] # block parameters: [v33]
// [Asm] .main.87_5:
// [Asm] # control
// [Asm]   mv v36, v33  # live: [v36]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v36], upward_exposed: [v36], params_defs: [v36]
// [Asm] # live_in: [v36], live_out: []
// [Asm] # block parameters: [v36]
// [Asm] .main.87_6:
// [Asm] # control
// [Asm]   mv a0, v36  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v34, ft7, ft4, ft9, a5, a0, fa4, v36, ft2, a2, v37, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, v35, t4, t2], uses: [v37, zero, a0], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v36]
// [Asm] # block parameters: []
// [Asm] .main.87_1:
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   mv a0, zero  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v34, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   li v37, 10  # live: [v37, zero]
// [Asm]   mv a0, v37  # live: [zero, a0]
// [Asm]   call minimbt_print_char  # live: [zero, a0]
// [Asm]   mv v35, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv v36, zero  # live: [v36]
// [Asm]   j .main.87_6  # live: [v36]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, v32, a1, fa1, v33, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v31, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v40], uses: [v40, a0, zero, v22], upward_exposed: [zero, v22], params_defs: []
// [Asm] # live_in: [zero, v22], live_out: [v33]
// [Asm] # block parameters: []
// [Asm] .main.87_3:
// [Asm]   # save_ctx2  # live: [zero, v22]
// [Asm]   mv a0, v22  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v31, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   li v40, 10  # live: [zero, v40]
// [Asm]   mv a0, v40  # live: [zero, a0]
// [Asm]   call minimbt_print_char  # live: [zero, a0]
// [Asm]   mv v32, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv v33, zero  # live: [v33]
// [Asm]   j .main.87_5  # live: [v33]
// [Asm] 
// [Asm] # leaf true
// [Asm] add.727:
// [Asm] # block info: defs: [v3, v0, v4, a0, v2], uses: [v2, a0, v4, a1, s10, v3], upward_exposed: [a1, s10, a0], params_defs: []
// [Asm] # live_in: [a1, s10, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .add.727_0:
// [Asm]   # save_ctx1  # live: [a1, a0, s10]
// [Asm]   mv v0, s10  # live: [a1, a0]
// [Asm]   mv v2, a0  # live: [a1, v2]
// [Asm]   mv v3, a1  # live: [v3, v2]
// [Asm]   add v4, v2, v3  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] aux.725:
// [Asm] # block info: defs: [v3, v0, v2], uses: [v2, v0, s10, a0, v3], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0, zero], live_out: [zero]
// [Asm] # block parameters: []
// [Asm] .aux.725_0:
// [Asm]   # save_ctx1  # live: [zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, zero, v2]
// [Asm]   lw v3, 8(v0)  # live: [v2, zero, v3]
// [Asm] # control
// [Asm]   blt v3, v2, .aux.725_2  # live: [zero]
// [Asm] 
// [Asm] # block info: defs: [v5], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .aux.725_1:
// [Asm] # control
// [Asm]   mv v5, zero  # live: [v5]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v5, a0], upward_exposed: [v5], params_defs: [v5]
// [Asm] # live_in: [v5], live_out: []
// [Asm] # block parameters: [v5]
// [Asm] .aux.725_3:
// [Asm] # control
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v6, v5], uses: [v6], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .aux.725_2:
// [Asm] # control
// [Asm]   li v6, 1  # live: [v6]
// [Asm]   mv v5, v6  # live: [v5]
// [Asm]   j .aux.725_3  # live: [v5]
// [Asm] 
// [Asm] # leaf true
// [Asm] filter.15:
// [Asm] # block info: defs: [v3, v7, v4, s11, a0, v2], uses: [v3, a0, v7, v4, a1, s11, v2], upward_exposed: [a1, s11, a0], params_defs: []
// [Asm] # live_in: [a1, s11, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .filter.15_0:
// [Asm]   # save_ctx1  # live: [a1, s11, a0]
// [Asm]   mv v2, a0  # live: [a1, s11, v2]
// [Asm]   mv v3, a1  # live: [v2, s11, v3]
// [Asm]   addi v4, s11, -24  # live: [v2, v4, v3]
// [Asm]   andi s11, v4, -8  # live: [v2, v4, v3]
// [Asm]   la v7, aux.18  # live: [v2, v7, v4, v3]
// [Asm]   sd v7, 0(v4)  # live: [v2, v4, v3]
// [Asm]   sd v2, 8(v4)  # live: [v4, v3]
// [Asm]   sd v3, 16(v4)  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] range.43:
// [Asm] # block info: defs: [v2, v5, a0, v4, s11, v9, v3], uses: [v3, v5, a0, v4, a1, s11, v9, v2], upward_exposed: [a1, s11, a0], params_defs: []
// [Asm] # live_in: [a1, s11, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .range.43_0:
// [Asm]   # save_ctx1  # live: [a1, s11, a0]
// [Asm]   mv v2, a0  # live: [a1, s11, v2]
// [Asm]   mv v3, a1  # live: [v2, s11, v3]
// [Asm]   addi v4, s11, -4  # live: [v2, v4, v3]
// [Asm]   andi s11, v4, -8  # live: [v2, v4, s11, v3]
// [Asm]   sw v2, 0(v4)  # live: [v4, s11, v3]
// [Asm]   addi v5, s11, -24  # live: [v4, v5, v3]
// [Asm]   andi s11, v5, -8  # live: [v4, v5, v3]
// [Asm]   la v9, aux.48  # live: [v4, v5, v9, v3]
// [Asm]   sd v9, 0(v5)  # live: [v4, v5, v3]
// [Asm]   sd v4, 8(v5)  # live: [v5, v3]
// [Asm]   sd v3, 16(v5)  # live: [v5]
// [Asm] # control
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] fold.63:
// [Asm] # block info: defs: [v3, v7, v4, v6, v5, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .fold.63_8:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm]   mv v6, v3  # live: [v4, v5, v6, zero]
// [Asm]   mv v7, v4  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, ft4, ft9, v10, a5, fa4, a0, v30, ft2, a2, a3, s10, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v5, zero, a0, v30, v8, v9], upward_exposed: [v5, zero], params_defs: [v5, v6, v7]
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v6, v5, v10, zero, v7]
// [Asm] # block parameters: [v5, v6, v7]
// [Asm] .fold.63_0:
// [Asm]   mv s10, v5  # live: [v5, zero, v7, v6]
// [Asm]   ld v30, 0(v5)  # live: [v5, zero, v30, v7, v6]
// [Asm]   # save_ctx2  # live: [v5, zero, v30, v7, v6]
// [Asm]   mv a0, zero  # live: [v5, zero, a0, v30, v7, v6]
// [Asm]   jalr v30  # live: [v5, zero, a0, v7, v6]
// [Asm]   mv v8, a0  # live: [v5, zero, v7, v8, v6]
// [Asm]   # restore_ctx2  # live: [v5, zero, v7, v8, v6]
// [Asm]   lw v9, 0(v8)  # live: [v5, zero, v7, v8, v6, v9]
// [Asm]   lw v10, 4(v8)  # live: [v5, v10, zero, v7, v6, v9]
// [Asm] # control
// [Asm]   beq v9, zero, .fold.63_1  # live: [v6, v5, v10, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v26, v13, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v24, s10, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v5, v14, v10, a0, v26, zero, v13, v7, v6, a1, v24], upward_exposed: [v6, v5, v10, zero, v7], params_defs: []
// [Asm] # live_in: [v6, v5, v10, zero, v7], live_out: [v6, v5, v12, v15, zero]
// [Asm] # block parameters: []
// [Asm] .fold.63_2:
// [Asm]   mv s10, v6  # live: [v5, v10, zero, v7, v6]
// [Asm]   ld v26, 0(v6)  # live: [v5, v10, zero, v26, v7, v6]
// [Asm]   # save_ctx2  # live: [v5, v10, zero, v26, v7, v6]
// [Asm]   mv a0, v7  # live: [v5, v10, zero, a0, v26, v6]
// [Asm]   mv a1, v10  # live: [v5, zero, a0, v26, v6, a1]
// [Asm]   jalr v26  # live: [v5, zero, a0, v6]
// [Asm]   mv v12, a0  # live: [v5, zero, v6, v12]
// [Asm]   # restore_ctx2  # live: [v5, zero, v6, v12]
// [Asm]   mv s10, v5  # live: [v5, zero, v6, v12]
// [Asm]   ld v24, 0(v5)  # live: [v5, zero, v6, v12, v24]
// [Asm]   # save_ctx2  # live: [v5, zero, v6, v12, v24]
// [Asm]   mv a0, zero  # live: [v5, zero, a0, v6, v12, v24]
// [Asm]   jalr v24  # live: [v5, zero, a0, v6, v12]
// [Asm]   mv v13, a0  # live: [v5, zero, v13, v6, v12]
// [Asm]   # restore_ctx2  # live: [v5, zero, v13, v6, v12]
// [Asm]   lw v14, 0(v13)  # live: [v5, v14, zero, v13, v6, v12]
// [Asm]   lw v15, 4(v13)  # live: [v5, v14, zero, v6, v15, v12]
// [Asm] # control
// [Asm]   beq v14, zero, .fold.63_3  # live: [v6, v5, v12, v15, zero]
// [Asm] 
// [Asm] # block info: defs: [t1, v7, ft0, ft1, a1, fa1, fa2, ft6, v20, a4, fa6, a6, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, s10, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v5, a0, v20, v6, a1, v17, v12, v15], upward_exposed: [v6, v5, v15, v12], params_defs: []
// [Asm] # live_in: [v6, v5, v15, v12, zero], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .fold.63_4:
// [Asm]   mv s10, v6  # live: [v5, v6, v15, v12, zero]
// [Asm]   ld v20, 0(v6)  # live: [v5, v6, v15, v12, zero, v20]
// [Asm]   # save_ctx2  # live: [v5, v6, v15, v12, zero, v20]
// [Asm]   mv a0, v12  # live: [v5, v6, v15, zero, a0, v20]
// [Asm]   mv a1, v15  # live: [v5, v6, a1, zero, a0, v20]
// [Asm]   jalr v20  # live: [v5, v6, zero, a0]
// [Asm]   mv v17, a0  # live: [v5, v6, v17, zero]
// [Asm]   # restore_ctx2  # live: [v5, v6, v17, zero]
// [Asm] # control
// [Asm]   mv v5, v5  # live: [v5, v6, v17, zero]
// [Asm]   mv v6, v6  # live: [v5, v6, v17, zero]
// [Asm]   mv v7, v17  # live: [v5, v6, zero, v7]
// [Asm]   j .fold.63_0  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v19], uses: [v7], upward_exposed: [v7], params_defs: []
// [Asm] # live_in: [v7], live_out: [v19]
// [Asm] # block parameters: []
// [Asm] .fold.63_1:
// [Asm] # control
// [Asm]   mv v19, v7  # live: [v19]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v19, a0], upward_exposed: [v19], params_defs: [v19]
// [Asm] # live_in: [v19], live_out: []
// [Asm] # block parameters: [v19]
// [Asm] .fold.63_6:
// [Asm] # control
// [Asm]   mv a0, v19  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v18], uses: [v12], upward_exposed: [v12], params_defs: []
// [Asm] # live_in: [v12], live_out: [v18]
// [Asm] # block parameters: []
// [Asm] .fold.63_3:
// [Asm] # control
// [Asm]   mv v18, v12  # live: [v18]
// [Asm] 
// [Asm] # block info: defs: [v19], uses: [v18], upward_exposed: [v18], params_defs: [v18]
// [Asm] # live_in: [v18], live_out: [v19]
// [Asm] # block parameters: [v18]
// [Asm] .fold.63_5:
// [Asm] # control
// [Asm]   mv v19, v18  # live: [v19]
// [Asm]   j .fold.63_6  # live: [v19]
// [Asm] 
// [Asm] # leaf true
// [Asm] aux.48:
// [Asm] # block info: defs: [v3, v7, v0, v4, v2], uses: [v7, v0, v4, s10, a0, v3], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s11, s10, a0, zero], live_out: [v3, s11, zero, v7]
// [Asm] # block parameters: []
// [Asm] .aux.48_0:
// [Asm]   # save_ctx1  # live: [s11, zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, s11, zero]
// [Asm]   ld v3, 8(v0)  # live: [v0, s11, zero, v3]
// [Asm]   lw v4, 16(v0)  # live: [v4, s11, zero, v3]
// [Asm]   lw v7, 0(v3)  # live: [v7, v4, s11, zero, v3]
// [Asm] # control
// [Asm]   beq v7, v4, .aux.48_1  # live: [v7, s11, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v6, v16, s11, v9, v13], uses: [v16, v7, v6, s11, v9, v3], upward_exposed: [v3, s11, v7], params_defs: []
// [Asm] # live_in: [v7, s11, v3], live_out: [v13]
// [Asm] # block parameters: []
// [Asm] .aux.48_2:
// [Asm]   addi v9, v7, 1  # live: [v3, s11, v9, v7]
// [Asm]   sw v9, 0(v3)  # live: [s11, v7]
// [Asm]   addi v6, s11, -8  # live: [v6, v7]
// [Asm]   andi s11, v6, -8  # live: [v6, v7]
// [Asm]   li v16, 1  # live: [v6, v16, v7]
// [Asm]   sw v16, 0(v6)  # live: [v6, v7]
// [Asm]   sw v7, 4(v6)  # live: [v6]
// [Asm] # control
// [Asm]   mv v13, v6  # live: [v13]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v13, a0], upward_exposed: [v13], params_defs: [v13]
// [Asm] # live_in: [v13], live_out: []
// [Asm] # block parameters: [v13]
// [Asm] .aux.48_3:
// [Asm] # control
// [Asm]   mv a0, v13  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v5, s11, v13], uses: [v5, s11, zero], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: [v13]
// [Asm] # block parameters: []
// [Asm] .aux.48_1:
// [Asm]   addi v5, s11, -8  # live: [v5, zero]
// [Asm]   andi s11, v5, -8  # live: [v5, zero]
// [Asm]   sw zero, 0(v5)  # live: [v5, zero]
// [Asm]   sw zero, 4(v5)  # live: [v5]
// [Asm] # control
// [Asm]   mv v13, v5  # live: [v13]
// [Asm]   j .aux.48_3  # live: [v13]
// [Asm] 
// [Asm] # leaf false
// [Asm] aux.430:
// [Asm] # block info: defs: [v2, t1, v7, v0, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, v19, ft5, ft10, v4, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [a0, zero, v7, v0, v19, v6, s10, v3], upward_exposed: [s10, a0, zero], params_defs: []
// [Asm] # live_in: [s11, s10, a0, zero], live_out: [v4, s11, zero, v8]
// [Asm] # block parameters: []
// [Asm] .aux.430_0:
// [Asm]   # save_ctx1  # live: [s11, zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, s11, zero]
// [Asm]   ld v3, 8(v0)  # live: [v0, s11, zero, v3]
// [Asm]   ld v4, 16(v0)  # live: [v4, s11, zero, v3]
// [Asm]   mv s10, v3  # live: [v4, s11, zero, v3]
// [Asm]   ld v19, 0(v3)  # live: [v19, v4, s11, zero]
// [Asm]   # save_ctx2  # live: [v19, v4, s11, zero]
// [Asm]   mv a0, zero  # live: [v19, v4, s11, zero, a0]
// [Asm]   jalr v19  # live: [v4, s11, zero, a0]
// [Asm]   mv v6, a0  # live: [v4, v6, s11, zero]
// [Asm]   # restore_ctx2  # live: [v4, v6, s11, zero]
// [Asm]   lw v7, 0(v6)  # live: [v4, v6, s11, zero, v7]
// [Asm]   lw v8, 4(v6)  # live: [v7, v4, s11, zero, v8]
// [Asm] # control
// [Asm]   bne v7, zero, .aux.430_2  # live: [v4, s11, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [t1, v13, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v11, v4, zero, a0, v13], upward_exposed: [v4, zero], params_defs: []
// [Asm] # live_in: [v4, zero], live_out: [v12]
// [Asm] # block parameters: []
// [Asm] .aux.430_1:
// [Asm]   mv s10, v4  # live: [v4, zero]
// [Asm]   ld v13, 0(v4)  # live: [v13, zero]
// [Asm]   # save_ctx2  # live: [v13, zero]
// [Asm]   mv a0, zero  # live: [a0, v13]
// [Asm]   jalr v13  # live: [a0]
// [Asm]   mv v11, a0  # live: [v11]
// [Asm]   # restore_ctx2  # live: [v11]
// [Asm] # control
// [Asm]   mv v12, v11  # live: [v12]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v12, a0], upward_exposed: [v12], params_defs: [v12]
// [Asm] # live_in: [v12], live_out: []
// [Asm] # block parameters: [v12]
// [Asm] .aux.430_3:
// [Asm] # control
// [Asm]   mv a0, v12  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v5, v16, s11, v12], uses: [v5, v16, s11, v8], upward_exposed: [s11, v8], params_defs: []
// [Asm] # live_in: [s11, v8], live_out: [v12]
// [Asm] # block parameters: []
// [Asm] .aux.430_2:
// [Asm]   addi v5, s11, -8  # live: [v5, v8]
// [Asm]   andi s11, v5, -8  # live: [v5, v8]
// [Asm]   li v16, 1  # live: [v5, v16, v8]
// [Asm]   sw v16, 0(v5)  # live: [v5, v8]
// [Asm]   sw v8, 4(v5)  # live: [v5]
// [Asm] # control
// [Asm]   mv v12, v5  # live: [v12]
// [Asm]   j .aux.430_3  # live: [v12]
// [Asm] 
// [Asm] # leaf true
// [Asm] aux.590:
// [Asm] # block info: defs: [v3, v0, v4, a0, v2], uses: [v3, a0, v0, v4, s10, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .aux.590_0:
// [Asm]   # save_ctx1  # live: [a0, s10]
// [Asm]   mv v0, s10  # live: [v0, a0]
// [Asm]   mv v2, a0  # live: [v0, v2]
// [Asm]   lw v3, 8(v0)  # live: [v2, v3]
// [Asm]   add v4, v3, v2  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] aux.707:
// [Asm] # block info: defs: [v3, v0, v2], uses: [v3, v0, s10, a0, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0, zero], live_out: [zero]
// [Asm] # block parameters: []
// [Asm] .aux.707_0:
// [Asm]   # save_ctx1  # live: [zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, zero, v2]
// [Asm]   lw v3, 8(v0)  # live: [v3, zero, v2]
// [Asm] # control
// [Asm]   blt v2, v3, .aux.707_2  # live: [zero]
// [Asm] 
// [Asm] # block info: defs: [v5], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .aux.707_1:
// [Asm] # control
// [Asm]   mv v5, zero  # live: [v5]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v5, a0], upward_exposed: [v5], params_defs: [v5]
// [Asm] # live_in: [v5], live_out: []
// [Asm] # block parameters: [v5]
// [Asm] .aux.707_3:
// [Asm] # control
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v6, v5], uses: [v6], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .aux.707_2:
// [Asm] # control
// [Asm]   li v6, 1  # live: [v6]
// [Asm]   mv v5, v6  # live: [v5]
// [Asm]   j .aux.707_3  # live: [v5]
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main.87  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] aux.18:
// [Asm] # block info: defs: [v3, v7, v0, v4, v2], uses: [v0, s10, a0, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s11, s10, a0, zero], live_out: [v7, v4, s11, zero, v3]
// [Asm] # block parameters: []
// [Asm] .aux.18_8:
// [Asm]   # save_ctx1  # live: [s11, zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, s11, zero, v2]
// [Asm]   ld v3, 8(v0)  # live: [v2, v0, s11, zero, v3]
// [Asm]   ld v4, 16(v0)  # live: [v2, v4, s11, zero, v3]
// [Asm] # control
// [Asm]   mv v7, v2  # live: [v3, v4, s11, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v25, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, s10, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v25, zero, a0, v8, v9, v3], upward_exposed: [zero, v3], params_defs: [v7]
// [Asm] # live_in: [v3, v4, s11, zero, v7], live_out: [v4, s11, v10, zero, v3]
// [Asm] # block parameters: [v7]
// [Asm] .aux.18_0:
// [Asm]   mv s10, v3  # live: [zero, v4, s11, v3]
// [Asm]   ld v25, 0(v3)  # live: [v25, zero, v4, s11, v3]
// [Asm]   # save_ctx2  # live: [v25, zero, v4, s11, v3]
// [Asm]   mv a0, zero  # live: [v25, zero, a0, v4, s11, v3]
// [Asm]   jalr v25  # live: [zero, a0, v4, s11, v3]
// [Asm]   mv v8, a0  # live: [zero, v8, v4, s11, v3]
// [Asm]   # restore_ctx2  # live: [zero, v8, v4, s11, v3]
// [Asm]   lw v9, 0(v8)  # live: [zero, v8, v4, s11, v9, v3]
// [Asm]   lw v10, 4(v8)  # live: [v10, zero, v4, s11, v9, v3]
// [Asm] # control
// [Asm]   beq v9, zero, .aux.18_1  # live: [v4, s11, v10, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, v21, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v4, v10, v21, v12, a0, zero], upward_exposed: [v4, v10, zero], params_defs: []
// [Asm] # live_in: [v4, v10, s11, zero, v3], live_out: [v4, s11, v10, zero, v3]
// [Asm] # block parameters: []
// [Asm] .aux.18_2:
// [Asm]   mv s10, v4  # live: [v10, zero, v4, s11, v3]
// [Asm]   ld v21, 0(v4)  # live: [v10, v21, zero, v4, s11, v3]
// [Asm]   # save_ctx2  # live: [v10, v21, zero, v4, s11, v3]
// [Asm]   mv a0, v10  # live: [v10, v21, zero, a0, v4, s11, v3]
// [Asm]   jalr v21  # live: [v10, zero, a0, v4, s11, v3]
// [Asm]   mv v12, a0  # live: [v10, zero, v4, s11, v12, v3]
// [Asm]   # restore_ctx2  # live: [v10, zero, v4, s11, v12, v3]
// [Asm] # control
// [Asm]   bne v12, zero, .aux.18_4  # live: [v4, s11, v10, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v6, s11, v15, v20], uses: [v6, s11, v10, v20], upward_exposed: [s11, v10], params_defs: []
// [Asm] # live_in: [s11, v10], live_out: [v15]
// [Asm] # block parameters: []
// [Asm] .aux.18_3:
// [Asm]   addi v6, s11, -8  # live: [v6, v10]
// [Asm]   andi s11, v6, -8  # live: [v6, v10]
// [Asm]   li v20, 1  # live: [v6, v10, v20]
// [Asm]   sw v20, 0(v6)  # live: [v6, v10]
// [Asm]   sw v10, 4(v6)  # live: [v6]
// [Asm] # control
// [Asm]   mv v15, v6  # live: [v15]
// [Asm] 
// [Asm] # block info: defs: [v17], uses: [v15], upward_exposed: [v15], params_defs: [v15]
// [Asm] # live_in: [v15], live_out: [v17]
// [Asm] # block parameters: [v15]
// [Asm] .aux.18_5:
// [Asm] # control
// [Asm]   mv v17, v15  # live: [v17]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v17, a0], upward_exposed: [v17], params_defs: [v17]
// [Asm] # live_in: [v17], live_out: []
// [Asm] # block parameters: [v17]
// [Asm] .aux.18_6:
// [Asm] # control
// [Asm]   mv a0, v17  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v5, v17, s11], uses: [v5, s11, zero], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: [v17]
// [Asm] # block parameters: []
// [Asm] .aux.18_1:
// [Asm]   addi v5, s11, -8  # live: [v5, zero]
// [Asm]   andi s11, v5, -8  # live: [v5, zero]
// [Asm]   sw zero, 0(v5)  # live: [v5, zero]
// [Asm]   sw zero, 4(v5)  # live: [v5]
// [Asm] # control
// [Asm]   mv v17, v5  # live: [v17]
// [Asm]   j .aux.18_6  # live: [v17]
// [Asm] 
// [Asm] # block info: defs: [v7], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v4, s11, zero, v3], live_out: [v7, v4, s11, zero, v3]
// [Asm] # block parameters: []
// [Asm] .aux.18_4:
// [Asm] # control
// [Asm]   mv v7, zero  # live: [v3, v4, s11, zero, v7]
// [Asm]   j .aux.18_0  # live: [v3, v4, s11, zero, v7]
// [Asm] 
// [Asm] # leaf false
// [Asm] aux.662:
// [Asm] # block info: defs: [v2, t1, v22, v7, v0, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, s10, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [a0, zero, v22, v7, v8, v0, s10, v3], upward_exposed: [s10, a0, zero], params_defs: []
// [Asm] # live_in: [s11, s10, a0, zero], live_out: [v4, s11, zero, v9]
// [Asm] # block parameters: []
// [Asm] .aux.662_0:
// [Asm]   # save_ctx1  # live: [s11, zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, s11, zero]
// [Asm]   ld v3, 8(v0)  # live: [v0, s11, zero, v3]
// [Asm]   ld v4, 16(v0)  # live: [v4, s11, zero, v3]
// [Asm]   mv s10, v3  # live: [v4, s11, zero, v3]
// [Asm]   ld v22, 0(v3)  # live: [v4, s11, zero, v22]
// [Asm]   # save_ctx2  # live: [v4, s11, zero, v22]
// [Asm]   mv a0, zero  # live: [v4, s11, zero, a0, v22]
// [Asm]   jalr v22  # live: [v4, s11, zero, a0]
// [Asm]   mv v7, a0  # live: [v4, s11, zero, v7]
// [Asm]   # restore_ctx2  # live: [v4, s11, zero, v7]
// [Asm]   lw v8, 0(v7)  # live: [v7, v4, s11, zero, v8]
// [Asm]   lw v9, 4(v7)  # live: [v4, s11, zero, v9, v8]
// [Asm] # control
// [Asm]   beq v8, zero, .aux.662_1  # live: [v4, s11, zero, v9]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v6, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, s10, ft8, a7, t3, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v11, v18, a0, v4, v6, v17, s11, v9], upward_exposed: [v4, s11, v9], params_defs: []
// [Asm] # live_in: [v4, s11, v9], live_out: [v14]
// [Asm] # block parameters: []
// [Asm] .aux.662_2:
// [Asm]   mv s10, v4  # live: [v4, s11, v9]
// [Asm]   ld v18, 0(v4)  # live: [s11, v18, v9]
// [Asm]   # save_ctx2  # live: [s11, v18, v9]
// [Asm]   mv a0, v9  # live: [s11, v18, a0]
// [Asm]   jalr v18  # live: [s11, a0]
// [Asm]   mv v11, a0  # live: [v11, s11]
// [Asm]   # restore_ctx2  # live: [v11, s11]
// [Asm]   addi v6, s11, -8  # live: [v11, v6]
// [Asm]   andi s11, v6, -8  # live: [v11, v6]
// [Asm]   li v17, 1  # live: [v11, v6, v17]
// [Asm]   sw v17, 0(v6)  # live: [v11, v6]
// [Asm]   sw v11, 4(v6)  # live: [v6]
// [Asm] # control
// [Asm]   mv v14, v6  # live: [v14]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v14, a0], upward_exposed: [v14], params_defs: [v14]
// [Asm] # live_in: [v14], live_out: []
// [Asm] # block parameters: [v14]
// [Asm] .aux.662_3:
// [Asm] # control
// [Asm]   mv a0, v14  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v5, v14, s11], uses: [v5, s11, zero], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: [v14]
// [Asm] # block parameters: []
// [Asm] .aux.662_1:
// [Asm]   addi v5, s11, -8  # live: [v5, zero]
// [Asm]   andi s11, v5, -8  # live: [v5, zero]
// [Asm]   sw zero, 0(v5)  # live: [v5, zero]
// [Asm]   sw zero, 4(v5)  # live: [v5]
// [Asm] # control
// [Asm]   mv v14, v5  # live: [v14]
// [Asm]   j .aux.662_3  # live: [v14]
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("map", Fun([Unit], Tuple([Int, Int]))), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int], Int))], body: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Tuple([Int(1), App(Var("f"), [Var("val")])])))}, Var("aux"))}, LetRec({name: ("filter", Fun([Unit], Tuple([Int, Int]))), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int], Int))], body: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Let(("r", Var({val: Some(Int)})), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit])))))}, Var("aux"))}, LetRec({name: ("concat", Fun([Unit], Tuple([Int, Int]))), args: [("stream1", Fun([Unit], Tuple([Int, Int]))), ("stream2", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream1"), [Unit]), If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")])))}, Var("aux"))}, LetRec({name: ("range", Fun([Unit], Tuple([Int, Int]))), args: [("from", Int), ("to", Int)], body: Let(("state", Var({val: Some(Array(Int))})), Array(Int(1), Var("from")), LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: Let(("val", Var({val: Some(Int)})), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))))}, Var("aux")))}, LetRec({name: ("addx", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, Var("aux"))}, LetRec({name: ("fold", Int), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int, Int], Int)), ("acc", Int)], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({name: ("sum", Int), args: [("stream", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), [])))))))))))
// [Knf] build_knf: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Tuple([Int(1), App(Var("f"), [Var("val")])])))}, Var("aux"))
// [Knf] build_knf: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Tuple([Int(1), App(Var("f"), [Var("val")])])))
// [Knf] build_knf: App(Var("stream"), [Unit])
// [Knf] build_knf: Var("stream")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Tuple([Int(1), App(Var("f"), [Var("val")])]))
// [Knf] build_knf: Var("ok")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Tuple([Int(0), Int(0)])
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Tuple([Int(1), App(Var("f"), [Var("val")])])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("f"), [Var("val")])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("val")
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: LetRec({name: ("filter", Fun([Unit], Tuple([Int, Int]))), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int], Int))], body: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Let(("r", Var({val: Some(Int)})), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit])))))}, Var("aux"))}, LetRec({name: ("concat", Fun([Unit], Tuple([Int, Int]))), args: [("stream1", Fun([Unit], Tuple([Int, Int]))), ("stream2", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream1"), [Unit]), If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")])))}, Var("aux"))}, LetRec({name: ("range", Fun([Unit], Tuple([Int, Int]))), args: [("from", Int), ("to", Int)], body: Let(("state", Var({val: Some(Array(Int))})), Array(Int(1), Var("from")), LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: Let(("val", Var({val: Some(Int)})), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))))}, Var("aux")))}, LetRec({name: ("addx", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, Var("aux"))}, LetRec({name: ("fold", Int), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int, Int], Int)), ("acc", Int)], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({name: ("sum", Int), args: [("stream", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), []))))))))))
// [Knf] build_knf: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Let(("r", Var({val: Some(Int)})), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit])))))}, Var("aux"))
// [Knf] build_knf: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Let(("r", Var({val: Some(Int)})), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit])))))
// [Knf] build_knf: App(Var("stream"), [Unit])
// [Knf] build_knf: Var("stream")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Let(("r", Var({val: Some(Int)})), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit]))))
// [Knf] build_knf: Var("ok")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Tuple([Int(0), Int(0)])
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("r", Var({val: Some(Int)})), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit])))
// [Knf] build_knf: App(Var("f"), [Var("val")])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("val")
// [Knf] build_knf: If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit]))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Tuple([Int(1), Var("val")])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("val")
// [Knf] build_knf: App(Var("aux"), [Unit])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Unit
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: LetRec({name: ("concat", Fun([Unit], Tuple([Int, Int]))), args: [("stream1", Fun([Unit], Tuple([Int, Int]))), ("stream2", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream1"), [Unit]), If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")])))}, Var("aux"))}, LetRec({name: ("range", Fun([Unit], Tuple([Int, Int]))), args: [("from", Int), ("to", Int)], body: Let(("state", Var({val: Some(Array(Int))})), Array(Int(1), Var("from")), LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: Let(("val", Var({val: Some(Int)})), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))))}, Var("aux")))}, LetRec({name: ("addx", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, Var("aux"))}, LetRec({name: ("fold", Int), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int, Int], Int)), ("acc", Int)], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({name: ("sum", Int), args: [("stream", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), [])))))))))
// [Knf] build_knf: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream1"), [Unit]), If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")])))}, Var("aux"))
// [Knf] build_knf: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream1"), [Unit]), If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")])))
// [Knf] build_knf: App(Var("stream1"), [Unit])
// [Knf] build_knf: Var("stream1")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")]))
// [Knf] build_knf: Var("ok")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("stream2"), [Unit])
// [Knf] build_knf: Var("stream2")
// [Knf] build_knf: Unit
// [Knf] build_knf: Tuple([Int(1), Var("val")])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("val")
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: LetRec({name: ("range", Fun([Unit], Tuple([Int, Int]))), args: [("from", Int), ("to", Int)], body: Let(("state", Var({val: Some(Array(Int))})), Array(Int(1), Var("from")), LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: Let(("val", Var({val: Some(Int)})), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))))}, Var("aux")))}, LetRec({name: ("addx", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, Var("aux"))}, LetRec({name: ("fold", Int), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int, Int], Int)), ("acc", Int)], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({name: ("sum", Int), args: [("stream", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), []))))))))
// [Knf] build_knf: Let(("state", Var({val: Some(Array(Int))})), Array(Int(1), Var("from")), LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: Let(("val", Var({val: Some(Int)})), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))))}, Var("aux")))
// [Knf] build_knf: Array(Int(1), Var("from"))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("from")
// [Knf] build_knf: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: Let(("val", Var({val: Some(Int)})), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))))}, Var("aux"))
// [Knf] build_knf: Let(("val", Var({val: Some(Int)})), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))))
// [Knf] build_knf: Get(Var("state"), Int(0))
// [Knf] build_knf: Var("state")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")])))
// [Knf] build_knf: Var("val")
// [Knf] build_knf: Var("to")
// [Knf] build_knf: Tuple([Int(0), Int(0)])
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))
// [Knf] build_knf: Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("state")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Var("val"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("val")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Tuple([Int(1), Var("val")])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("val")
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: LetRec({name: ("addx", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, Var("aux"))}, LetRec({name: ("fold", Int), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int, Int], Int)), ("acc", Int)], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({name: ("sum", Int), args: [("stream", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), [])))))))
// [Knf] build_knf: LetRec({name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, Var("aux"))
// [Knf] build_knf: Prim(Var("x"), Var("y"), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: LetRec({name: ("fold", Int), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int, Int], Int)), ("acc", Int)], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({name: ("sum", Int), args: [("stream", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), []))))))
// [Knf] build_knf: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))
// [Knf] build_knf: App(Var("stream"), [Unit])
// [Knf] build_knf: Var("stream")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])]))
// [Knf] build_knf: Var("ok")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("acc")
// [Knf] build_knf: App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])
// [Knf] build_knf: Var("fold")
// [Knf] build_knf: Var("stream")
// [Knf] build_knf: Var("f")
// [Knf] build_knf: App(Var("f"), [Var("acc"), Var("val")])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("acc")
// [Knf] build_knf: Var("val")
// [Knf] build_knf: LetRec({name: ("sum", Int), args: [("stream", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), [])))))
// [Knf] build_knf: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))
// [Knf] build_knf: Prim(Var("x"), Var("y"), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: App(Var("fold"), [Var("stream"), Var("add"), Int(0)])
// [Knf] build_knf: Var("fold")
// [Knf] build_knf: Var("stream")
// [Knf] build_knf: Var("add")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), []))))
// [Knf] build_knf: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))
// [Knf] build_knf: If(LE(Var("x"), Var("y")), Int(0), Int(1))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), [])))
// [Knf] build_knf: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))
// [Knf] build_knf: If(LE(Var("y"), Var("x")), Int(0), Int(1))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))
// [Knf] build_knf: App(Var("range"), [Int(0), Int(100)])
// [Knf] build_knf: Var("range")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(100)
// [Knf] build_knf: Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit))))))))
// [Knf] build_knf: App(Var("range"), [Int(0), Int(1000)])
// [Knf] build_knf: Var("range")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1000)
// [Knf] build_knf: Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))
// [Knf] build_knf: App(Var("concat"), [Var("range100"), Var("range1000")])
// [Knf] build_knf: Var("concat")
// [Knf] build_knf: Var("range100")
// [Knf] build_knf: Var("range1000")
// [Knf] build_knf: Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit))))))
// [Knf] build_knf: App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])])
// [Knf] build_knf: Var("map")
// [Knf] build_knf: Var("catt")
// [Knf] build_knf: App(Var("addx"), [Int(1)])
// [Knf] build_knf: Var("addx")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))
// [Knf] build_knf: App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])])
// [Knf] build_knf: Var("filter")
// [Knf] build_knf: Var("addone")
// [Knf] build_knf: App(Var("gt"), [Int(50)])
// [Knf] build_knf: Var("gt")
// [Knf] build_knf: Int(50)
// [Knf] build_knf: Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit))))
// [Knf] build_knf: App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])])
// [Knf] build_knf: Var("filter")
// [Knf] build_knf: Var("over50")
// [Knf] build_knf: App(Var("le"), [Int(1200)])
// [Knf] build_knf: Var("le")
// [Knf] build_knf: Int(1200)
// [Knf] build_knf: Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))
// [Knf] build_knf: App(Var("sum"), [Var("under1200")])
// [Knf] build_knf: Var("sum")
// [Knf] build_knf: Var("under1200")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit))
// [Knf] build_knf: App(Var("print_int"), [Var("sum")])
// [Knf] build_knf: Var("sum")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)
// [Knf] build_knf: App(Var("print_char"), [Int(10)])
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Core] b3 control: Panic -> Jump(target=b5, args=[Mem(fref=f5, mref=m1)])
// [Core] b4 control: Panic -> Jump(target=b5, args=[Insn(iref=%8)])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%6), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b1 control: Panic -> Jump(target=b6, args=[Mem(fref=f5, mref=m0)])
// [Core] b5 control: Panic -> Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b6 control: Panic -> Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Core] b0 control: Panic -> Return(args=[Mem(fref=f0, mref=m0)])
// [Core] b1 control: Panic -> Jump(target=b3, args=[Mem(fref=f8, mref=m0)])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Mem(fref=f8, mref=m1)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b0 control: Panic -> Return(args=[Mem(fref=f1, mref=m1)])
// [Core] b3 control: Panic -> Jump(target=b5, args=[Insn(iref=%4)])
// [Core] b4 control: Panic -> Jump(target=b5, args=[Insn(iref=%10)])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%8), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b1 control: Panic -> Jump(target=b6, args=[FnParam(fref=f2, fpref=$f.2)])
// [Core] b5 control: Panic -> Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b6 control: Panic -> Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Core] b1 control: Panic -> Jump(target=b3, args=[Insn(iref=%4)])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Mem(fref=f12, mref=m0)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Core] b1 control: Panic -> Jump(target=b3, args=[Mem(fref=f16, mref=m0)])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Mem(fref=f16, mref=m1)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b1 control: Panic -> Jump(target=b3, args=[Int32(val=0)])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Int32(val=1)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b1 control: Panic -> Jump(target=b3, args=[Int32(val=0)])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Int32(val=1)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Core] b3 control: Panic -> Jump(target=b5, args=[Unit])
// [Core] b4 control: Panic -> Jump(target=b5, args=[Unit])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%20), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b1 control: Panic -> Jump(target=b6, args=[Unit])
// [Core] b5 control: Panic -> Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%13), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b6 control: Panic -> Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Main] beta reduce catt.94 = aux.430
// [Main] beta reduce _96 = aux.590
// [Main] beta reduce addone.97 = aux.662
// [Main] beta reduce _99 = aux.707
// [Main] beta reduce _102 = aux.725
// [Main] beta reduce sum.104 = _730
// [Main] beta reduce sum.104 = _736
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.87
// [Main]   .type main.87, @function
// [Main] # leaf false
// [Main] main.87:
// [Main] .main.87_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv a0, zero
// [Main]   li a1, 100
// [Main]   call range.43
// [Main]   mv s0, a0
// [Main]   mv a0, zero
// [Main]   li a1, 1000
// [Main]   call range.43
// [Main]   addi a1, s11, -24
// [Main]   andi s11, a1, -8
// [Main]   la a2, aux.430
// [Main]   sd a2, 0(a1)
// [Main]   sd s0, 8(a1)
// [Main]   sd a0, 16(a1)
// [Main]   addi a0, s11, -16
// [Main]   andi s11, a0, -8
// [Main]   la a2, aux.590
// [Main]   sd a2, 0(a0)
// [Main]   li a2, 1
// [Main]   sd a2, 8(a0)
// [Main]   addi a2, s11, -24
// [Main]   andi s11, a2, -8
// [Main]   la a3, aux.662
// [Main]   sd a3, 0(a2)
// [Main]   sd a1, 8(a2)
// [Main]   sd a0, 16(a2)
// [Main]   addi a1, s11, -16
// [Main]   andi s11, a1, -8
// [Main]   la a0, aux.707
// [Main]   sd a0, 0(a1)
// [Main]   li a0, 50
// [Main]   sd a0, 8(a1)
// [Main]   mv a0, a2
// [Main]   call filter.15
// [Main]   addi a1, s11, -16
// [Main]   andi s11, a1, -8
// [Main]   la a2, aux.725
// [Main]   sd a2, 0(a1)
// [Main]   li a2, 1200
// [Main]   sd a2, 8(a1)
// [Main]   call filter.15
// [Main]   mv s0, a0
// [Main]   addi s1, s11, -8
// [Main]   andi s11, s1, -8
// [Main]   la a0, add.727
// [Main]   sd a0, 0(s1)
// [Main]   mv s10, s0
// [Main]   ld a1, 0(s0)
// [Main]   mv a0, zero
// [Main]   jalr a1
// [Main]   mv a1, a0
// [Main]   lw a0, 0(a1)
// [Main]   lw a1, 4(a1)
// [Main]   beq a0, zero, .main.87_1
// [Main] 
// [Main] .main.87_2:
// [Main]   mv s10, s1
// [Main]   ld a2, 0(s1)
// [Main]   mv a0, zero
// [Main]   jalr a2
// [Main]   mv s2, a0
// [Main]   mv s10, s0
// [Main]   ld a1, 0(s0)
// [Main]   mv a0, zero
// [Main]   jalr a1
// [Main]   mv a1, a0
// [Main]   lw a0, 0(a1)
// [Main]   lw a1, 4(a1)
// [Main]   beq a0, zero, .main.87_3
// [Main] 
// [Main] .main.87_4:
// [Main]   mv s10, s1
// [Main]   ld a2, 0(s1)
// [Main]   mv a0, s2
// [Main]   jalr a2
// [Main]   mv a2, a0
// [Main]   mv a0, s0
// [Main]   mv a1, s1
// [Main]   call fold.63
// [Main]   call minimbt_print_int
// [Main]   li a0, 10
// [Main]   call minimbt_print_char
// [Main]   mv a0, zero
// [Main] 
// [Main] .main.87_5:
// [Main] 
// [Main] .main.87_6:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .main.87_1:
// [Main]   mv a0, zero
// [Main]   call minimbt_print_int
// [Main]   li a0, 10
// [Main]   call minimbt_print_char
// [Main]   mv a0, zero
// [Main]   j .main.87_6
// [Main] 
// [Main] .main.87_3:
// [Main]   mv a0, s2
// [Main]   call minimbt_print_int
// [Main]   li a0, 10
// [Main]   call minimbt_print_char
// [Main]   mv a0, zero
// [Main]   j .main.87_5
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl add.727
// [Main]   .type add.727, @function
// [Main] # leaf true
// [Main] add.727:
// [Main] .add.727_0:
// [Main]   mv a2, s10
// [Main]   add a0, a0, a1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux.725
// [Main]   .type aux.725, @function
// [Main] # leaf true
// [Main] aux.725:
// [Main] .aux.725_0:
// [Main]   mv a1, s10
// [Main]   lw a1, 8(a1)
// [Main]   blt a1, a0, .aux.725_2
// [Main] 
// [Main] .aux.725_1:
// [Main]   mv a0, zero
// [Main] 
// [Main] .aux.725_3:
// [Main]   ret
// [Main] 
// [Main] .aux.725_2:
// [Main]   li a0, 1
// [Main]   j .aux.725_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl filter.15
// [Main]   .type filter.15, @function
// [Main] # leaf true
// [Main] filter.15:
// [Main] .filter.15_0:
// [Main]   addi a2, s11, -24
// [Main]   andi s11, a2, -8
// [Main]   la a3, aux.18
// [Main]   sd a3, 0(a2)
// [Main]   sd a0, 8(a2)
// [Main]   sd a1, 16(a2)
// [Main]   mv a0, a2
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl range.43
// [Main]   .type range.43, @function
// [Main] # leaf true
// [Main] range.43:
// [Main] .range.43_0:
// [Main]   addi a2, s11, -4
// [Main]   andi s11, a2, -8
// [Main]   sw a0, 0(a2)
// [Main]   addi a0, s11, -24
// [Main]   andi s11, a0, -8
// [Main]   la a3, aux.48
// [Main]   sd a3, 0(a0)
// [Main]   sd a2, 8(a0)
// [Main]   sd a1, 16(a0)
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl fold.63
// [Main]   .type fold.63, @function
// [Main] # leaf false
// [Main] fold.63:
// [Main] .fold.63_8:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s0, a0
// [Main]   mv s2, a1
// [Main]   mv s1, a2
// [Main] 
// [Main] .fold.63_0:
// [Main]   mv s10, s0
// [Main]   ld a1, 0(s0)
// [Main]   mv a0, zero
// [Main]   jalr a1
// [Main]   mv a1, a0
// [Main]   lw a0, 0(a1)
// [Main]   lw a1, 4(a1)
// [Main]   beq a0, zero, .fold.63_1
// [Main] 
// [Main] .fold.63_2:
// [Main]   mv s10, s2
// [Main]   ld a2, 0(s2)
// [Main]   mv a0, s1
// [Main]   jalr a2
// [Main]   mv s1, a0
// [Main]   mv s10, s0
// [Main]   ld a1, 0(s0)
// [Main]   mv a0, zero
// [Main]   jalr a1
// [Main]   mv a1, a0
// [Main]   lw a0, 0(a1)
// [Main]   lw a1, 4(a1)
// [Main]   beq a0, zero, .fold.63_3
// [Main] 
// [Main] .fold.63_4:
// [Main]   mv s10, s2
// [Main]   ld a2, 0(s2)
// [Main]   mv a0, s1
// [Main]   jalr a2
// [Main]   mv s1, a0
// [Main]   j .fold.63_0
// [Main] 
// [Main] .fold.63_1:
// [Main]   mv a0, s1
// [Main] 
// [Main] .fold.63_6:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .fold.63_3:
// [Main]   mv a0, s1
// [Main] 
// [Main] .fold.63_5:
// [Main]   j .fold.63_6
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux.48
// [Main]   .type aux.48, @function
// [Main] # leaf true
// [Main] aux.48:
// [Main] .aux.48_0:
// [Main]   mv a1, s10
// [Main]   ld a0, 8(a1)
// [Main]   lw a1, 16(a1)
// [Main]   lw a2, 0(a0)
// [Main]   beq a2, a1, .aux.48_1
// [Main] 
// [Main] .aux.48_2:
// [Main]   addi a1, a2, 1
// [Main]   sw a1, 0(a0)
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   li a1, 1
// [Main]   sw a1, 0(a0)
// [Main]   sw a2, 4(a0)
// [Main] 
// [Main] .aux.48_3:
// [Main]   ret
// [Main] 
// [Main] .aux.48_1:
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   sw zero, 0(a0)
// [Main]   sw zero, 4(a0)
// [Main]   j .aux.48_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux.430
// [Main]   .type aux.430, @function
// [Main] # leaf false
// [Main] aux.430:
// [Main] .aux.430_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   mv a1, s10
// [Main]   ld a0, 8(a1)
// [Main]   ld s0, 16(a1)
// [Main]   mv s10, a0
// [Main]   ld a1, 0(a0)
// [Main]   mv a0, zero
// [Main]   jalr a1
// [Main]   lw a1, 0(a0)
// [Main]   lw a0, 4(a0)
// [Main]   bne a1, zero, .aux.430_2
// [Main] 
// [Main] .aux.430_1:
// [Main]   mv s10, s0
// [Main]   ld a1, 0(s0)
// [Main]   mv a0, zero
// [Main]   jalr a1
// [Main] 
// [Main] .aux.430_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .aux.430_2:
// [Main]   addi a1, s11, -8
// [Main]   andi s11, a1, -8
// [Main]   li a2, 1
// [Main]   sw a2, 0(a1)
// [Main]   sw a0, 4(a1)
// [Main]   mv a0, a1
// [Main]   j .aux.430_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux.590
// [Main]   .type aux.590, @function
// [Main] # leaf true
// [Main] aux.590:
// [Main] .aux.590_0:
// [Main]   mv a1, s10
// [Main]   lw a1, 8(a1)
// [Main]   add a0, a1, a0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux.707
// [Main]   .type aux.707, @function
// [Main] # leaf true
// [Main] aux.707:
// [Main] .aux.707_0:
// [Main]   mv a1, s10
// [Main]   lw a1, 8(a1)
// [Main]   blt a0, a1, .aux.707_2
// [Main] 
// [Main] .aux.707_1:
// [Main]   mv a0, zero
// [Main] 
// [Main] .aux.707_3:
// [Main]   ret
// [Main] 
// [Main] .aux.707_2:
// [Main]   li a0, 1
// [Main]   j .aux.707_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main.87
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux.18
// [Main]   .type aux.18, @function
// [Main] # leaf false
// [Main] aux.18:
// [Main] .aux.18_8:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv a1, s10
// [Main]   ld s1, 8(a1)
// [Main]   ld s0, 16(a1)
// [Main] 
// [Main] .aux.18_0:
// [Main]   mv s10, s1
// [Main]   ld a1, 0(s1)
// [Main]   mv a0, zero
// [Main]   jalr a1
// [Main]   mv a1, a0
// [Main]   lw a0, 0(a1)
// [Main]   lw s2, 4(a1)
// [Main]   beq a0, zero, .aux.18_1
// [Main] 
// [Main] .aux.18_2:
// [Main]   mv s10, s0
// [Main]   ld a1, 0(s0)
// [Main]   mv a0, s2
// [Main]   jalr a1
// [Main]   bne a0, zero, .aux.18_4
// [Main] 
// [Main] .aux.18_3:
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   li a1, 1
// [Main]   sw a1, 0(a0)
// [Main]   sw s2, 4(a0)
// [Main] 
// [Main] .aux.18_5:
// [Main] 
// [Main] .aux.18_6:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .aux.18_1:
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   sw zero, 0(a0)
// [Main]   sw zero, 4(a0)
// [Main]   j .aux.18_6
// [Main] 
// [Main] .aux.18_4:
// [Main]   mv a0, zero
// [Main]   j .aux.18_0
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux.662
// [Main]   .type aux.662, @function
// [Main] # leaf false
// [Main] aux.662:
// [Main] .aux.662_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   mv a1, s10
// [Main]   ld a0, 8(a1)
// [Main]   ld s0, 16(a1)
// [Main]   mv s10, a0
// [Main]   ld a1, 0(a0)
// [Main]   mv a0, zero
// [Main]   jalr a1
// [Main]   lw a1, 0(a0)
// [Main]   lw a0, 4(a0)
// [Main]   beq a1, zero, .aux.662_1
// [Main] 
// [Main] .aux.662_2:
// [Main]   mv s10, s0
// [Main]   ld a1, 0(s0)
// [Main]   jalr a1
// [Main]   addi a1, s11, -8
// [Main]   andi s11, a1, -8
// [Main]   li a2, 1
// [Main]   sw a2, 0(a1)
// [Main]   sw a0, 4(a1)
// [Main]   mv a0, a1
// [Main] 
// [Main] .aux.662_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .aux.662_1:
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   sw zero, 0(a0)
// [Main]   sw zero, 4(a0)
// [Main]   j .aux.662_3
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function aux.430
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Apply(ty=Tuple(fields=[Int32, Int32]), f=FreeVar(fvref=^2), args=[Unit])
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m0, fills=[Field(index=0, val=Int32(val=1)), Field(index=1, val=Insn(iref=%2))])
// [Wasm] Get Local name Mem(fref=f12, mref=m0) -> $f12.m0
// [Wasm] Get Local name Mem(fref=f12, mref=m0) -> $f12.m0
// [Wasm] Get Local name Mem(fref=f12, mref=m0) -> $f12.m0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Jump(target=b3, args=[Mem(fref=f12, mref=m0)])
// [Wasm] Get Local name Mem(fref=f12, mref=m0) -> $f12.m0
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Apply(ty=Tuple(fields=[Int32, Int32]), f=FreeVar(fvref=^1), args=[Unit])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Mem(fref=f12, mref=m0) -> $f12.m0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function aux.430 to wasm
// [Wasm] Lowering function aux.48
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m0, fills=[Field(index=0, val=Int32(val=0)), Field(index=1, val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f8, mref=m0) -> $f8.m0
// [Wasm] Get Local name Mem(fref=f8, mref=m0) -> $f8.m0
// [Wasm] Get Local name Mem(fref=f8, mref=m0) -> $f8.m0
// [Wasm] Lowering control Jump(target=b3, args=[Mem(fref=f8, mref=m0)])
// [Wasm] Get Local name Mem(fref=f8, mref=m0) -> $f8.m0
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^1), index=0, width=@32), val=Insn(iref=%3))
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m1, fills=[Field(index=0, val=Int32(val=1)), Field(index=1, val=Insn(iref=%0))])
// [Wasm] Get Local name Mem(fref=f8, mref=m1) -> $f8.m1
// [Wasm] Get Local name Mem(fref=f8, mref=m1) -> $f8.m1
// [Wasm] Get Local name Mem(fref=f8, mref=m1) -> $f8.m1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b3, args=[Mem(fref=f8, mref=m1)])
// [Wasm] Get Local name Mem(fref=f8, mref=m1) -> $f8.m1
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^1), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), FreeVar(fvref=^2)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Local Mem(fref=f8, mref=m1) -> $f8.m1
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Mem(fref=f8, mref=m0) -> $f8.m0
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function aux.48 to wasm
// [Wasm] Lowering function aux.662
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m0, fills=[Field(index=0, val=Int32(val=0)), Field(index=1, val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f16, mref=m0) -> $f16.m0
// [Wasm] Get Local name Mem(fref=f16, mref=m0) -> $f16.m0
// [Wasm] Get Local name Mem(fref=f16, mref=m0) -> $f16.m0
// [Wasm] Lowering control Jump(target=b3, args=[Mem(fref=f16, mref=m0)])
// [Wasm] Get Local name Mem(fref=f16, mref=m0) -> $f16.m0
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Apply(ty=Int32, f=FreeVar(fvref=^2), args=[Insn(iref=%2)])
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m1, fills=[Field(index=0, val=Int32(val=1)), Field(index=1, val=Insn(iref=%5))])
// [Wasm] Get Local name Mem(fref=f16, mref=m1) -> $f16.m1
// [Wasm] Get Local name Mem(fref=f16, mref=m1) -> $f16.m1
// [Wasm] Get Local name Mem(fref=f16, mref=m1) -> $f16.m1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b3, args=[Mem(fref=f16, mref=m1)])
// [Wasm] Get Local name Mem(fref=f16, mref=m1) -> $f16.m1
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Apply(ty=Tuple(fields=[Int32, Int32]), f=FreeVar(fvref=^1), args=[Unit])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Mem(fref=f16, mref=m0) -> $f16.m0
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Mem(fref=f16, mref=m1) -> $f16.m1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function aux.662 to wasm
// [Wasm] Lowering function filter.15
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Unit], ty=Tuple(fields=[Int32, Int32])), mref=m0, fills=[Field(index=0, val=Fn(fref=f5)), Field(index=1, val=FnParam(fref=f0, fpref=$f.0)), Field(index=2, val=FnParam(fref=f0, fpref=$f.1))])
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Lowering control Return(args=[Mem(fref=f0, mref=m0)])
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Local Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Lowered function filter.15 to wasm
// [Wasm] Lowering function range.43
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=FnParam(fref=f1, fpref=$f.0))])
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Unit], ty=Tuple(fields=[Int32, Int32])), mref=m1, fills=[Field(index=0, val=Fn(fref=f8)), Field(index=1, val=Mem(fref=f1, mref=m0)), Field(index=2, val=FnParam(fref=f1, fpref=$f.1))])
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Lowering control Return(args=[Mem(fref=f1, mref=m1)])
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Local Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Local Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Lowered function range.43 to wasm
// [Wasm] Lowering function aux.18
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m0, fills=[Field(index=0, val=Int32(val=0)), Field(index=1, val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Lowering control Jump(target=b6, args=[Mem(fref=f5, mref=m0)])
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m1, fills=[Field(index=0, val=Int32(val=1)), Field(index=1, val=Insn(iref=%2))])
// [Wasm] Get Local name Mem(fref=f5, mref=m1) -> $f5.m1
// [Wasm] Get Local name Mem(fref=f5, mref=m1) -> $f5.m1
// [Wasm] Get Local name Mem(fref=f5, mref=m1) -> $f5.m1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Jump(target=b5, args=[Mem(fref=f5, mref=m1)])
// [Wasm] Get Local name Mem(fref=f5, mref=m1) -> $f5.m1
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering control Jump(target=b0, args=[Unit])
// [Wasm] Lowering insn Apply(ty=Int32, f=FreeVar(fvref=^2), args=[Insn(iref=%2)])
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%5), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Branch(cond=Insn(iref=%6), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Apply(ty=Tuple(fields=[Int32, Int32]), f=FreeVar(fvref=^1), args=[Unit])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b7, args=[FnParam(fref=f5, fpref=$f.0)])
// [Wasm] Local Mem(fref=f5, mref=m1) -> $f5.m1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function aux.18 to wasm
// [Wasm] Lowering function fold.63
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Apply(ty=Int32, f=BlockParam(bref=b0, bpref=$b.1), args=[Insn(iref=%4), Insn(iref=%7)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%9)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering insn Apply(ty=Int32, f=BlockParam(bref=b0, bpref=$b.1), args=[BlockParam(bref=b0, bpref=$b.2), Insn(iref=%2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Apply(ty=Tuple(fields=[Int32, Int32]), f=BlockParam(bref=b0, bpref=$b.0), args=[Unit])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%5), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%5), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%6), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering control Branch(cond=Insn(iref=%8), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Apply(ty=Tuple(fields=[Int32, Int32]), f=BlockParam(bref=b0, bpref=$b.0), args=[Unit])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b7, args=[FnParam(fref=f2, fpref=$f.0), FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function fold.63 to wasm
// [Wasm] Lowering function aux.707
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Jump(target=b3, args=[Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Jump(target=b3, args=[Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FreeVar(fvref=^1), FnParam(fref=f18, fpref=$f.0)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FnParam(fref=f18, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f18, fpref=$f.0) -> $$f.0
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function aux.707 to wasm
// [Wasm] Lowering function aux.590
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FreeVar(fvref=^1), FnParam(fref=f14, fpref=$f.0)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.0) -> $$f.0
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function aux.590 to wasm
// [Wasm] Lowering function main.87
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Int32(val=0)])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Int32(val=10)])
// [Wasm] Lowering control Jump(target=b6, args=[Unit])
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%16)])
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Int32(val=10)])
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering insn Apply(ty=Int32, f=Mem(fref=f3, mref=m5), args=[Insn(iref=%16), Insn(iref=%19)])
// [Wasm] Get Local name Mem(fref=f3, mref=m5) -> $f3.m5
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name Mem(fref=f3, mref=m5) -> $f3.m5
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Call(ty=Int32, f=f2, args=[Insn(iref=%8), Mem(fref=f3, mref=m5), Insn(iref=%23)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Mem(fref=f3, mref=m5) -> $f3.m5
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%24)])
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Int32(val=10)])
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering insn Apply(ty=Int32, f=Mem(fref=f3, mref=m5), args=[Int32(val=0), Insn(iref=%12)])
// [Wasm] Get Local name Mem(fref=f3, mref=m5) -> $f3.m5
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Mem(fref=f3, mref=m5) -> $f3.m5
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Apply(ty=Tuple(fields=[Int32, Int32]), f=Insn(iref=%8), args=[Unit])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%17), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%17), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%18), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering control Branch(cond=Insn(iref=%20), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Call(ty=ClosureFn(params=[Unit], ty=Tuple(fields=[Int32, Int32])), f=f1, args=[Int32(val=0), Int32(val=100)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Call(ty=ClosureFn(params=[Unit], ty=Tuple(fields=[Int32, Int32])), f=f1, args=[Int32(val=0), Int32(val=1000)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Unit], ty=Tuple(fields=[Int32, Int32])), mref=m0, fills=[Field(index=0, val=Fn(fref=f12)), Field(index=1, val=Insn(iref=%0)), Field(index=2, val=Insn(iref=%1))])
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Int32), mref=m1, fills=[Field(index=0, val=Fn(fref=f14)), Field(index=1, val=Int32(val=1))])
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Unit], ty=Tuple(fields=[Int32, Int32])), mref=m2, fills=[Field(index=0, val=Fn(fref=f16)), Field(index=1, val=Mem(fref=f3, mref=m0)), Field(index=2, val=Mem(fref=f3, mref=m1))])
// [Wasm] Get Local name Mem(fref=f3, mref=m2) -> $f3.m2
// [Wasm] Get Local name Mem(fref=f3, mref=m2) -> $f3.m2
// [Wasm] Get Local name Mem(fref=f3, mref=m2) -> $f3.m2
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Mem(fref=f3, mref=m2) -> $f3.m2
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Int32), mref=m3, fills=[Field(index=0, val=Fn(fref=f18)), Field(index=1, val=Int32(val=50))])
// [Wasm] Get Local name Mem(fref=f3, mref=m3) -> $f3.m3
// [Wasm] Get Local name Mem(fref=f3, mref=m3) -> $f3.m3
// [Wasm] Get Local name Mem(fref=f3, mref=m3) -> $f3.m3
// [Wasm] Lowering insn Call(ty=ClosureFn(params=[Unit], ty=Tuple(fields=[Int32, Int32])), f=f0, args=[Mem(fref=f3, mref=m2), Mem(fref=f3, mref=m3)])
// [Wasm] Get Local name Mem(fref=f3, mref=m2) -> $f3.m2
// [Wasm] Get Local name Mem(fref=f3, mref=m3) -> $f3.m3
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Int32), mref=m4, fills=[Field(index=0, val=Fn(fref=f20)), Field(index=1, val=Int32(val=1200))])
// [Wasm] Get Local name Mem(fref=f3, mref=m4) -> $f3.m4
// [Wasm] Get Local name Mem(fref=f3, mref=m4) -> $f3.m4
// [Wasm] Get Local name Mem(fref=f3, mref=m4) -> $f3.m4
// [Wasm] Lowering insn Call(ty=ClosureFn(params=[Unit], ty=Tuple(fields=[Int32, Int32])), f=f0, args=[Insn(iref=%6), Mem(fref=f3, mref=m4)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Mem(fref=f3, mref=m4) -> $f3.m4
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32, Int32], ty=Int32), mref=m5, fills=[Field(index=0, val=Fn(fref=f22))])
// [Wasm] Get Local name Mem(fref=f3, mref=m5) -> $f3.m5
// [Wasm] Get Local name Mem(fref=f3, mref=m5) -> $f3.m5
// [Wasm] Lowering insn Apply(ty=Tuple(fields=[Int32, Int32]), f=Insn(iref=%8), args=[Unit])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%10), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%10), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%11), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering control Branch(cond=Insn(iref=%13), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Local Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Local Insn(iref=%24) -> $%24
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Mem(fref=f3, mref=m4) -> $f3.m4
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Mem(fref=f3, mref=m3) -> $f3.m3
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Local Mem(fref=f3, mref=m5) -> $f3.m5
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Mem(fref=f3, mref=m2) -> $f3.m2
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function main.87 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f3, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [Wasm] Lowering function add.727
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f22, fpref=$f.0), FnParam(fref=f22, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f22, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f22, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f22, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f22, fpref=$f.1) -> $$f.1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function add.727 to wasm
// [Wasm] Lowering function aux.725
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Jump(target=b3, args=[Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Jump(target=b3, args=[Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FnParam(fref=f20, fpref=$f.0), FreeVar(fvref=^1)])
// [Wasm] Get Local name FnParam(fref=f20, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f20, fpref=$f.0) -> $$f.0
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function aux.725 to wasm
// [KnfOpt] func_tre: map.1 false
// [KnfOpt] func_tre: aux.4 false
// [KnfOpt] func_tre: filter.15 false
// [KnfOpt] func_tre: aux.18 true
// [KnfOpt] func_tre: concat.31 false
// [KnfOpt] func_tre: aux.34 false
// [KnfOpt] func_tre: range.43 false
// [KnfOpt] func_tre: aux.48 false
// [KnfOpt] func_tre: addx.59 false
// [KnfOpt] func_tre: aux.61 false
// [KnfOpt] func_tre: fold.63 true
// [KnfOpt] func_tre: sum.73 false
// [KnfOpt] func_tre: add.75 false
// [KnfOpt] func_tre: gt.79 false
// [KnfOpt] func_tre: aux.81 false
// [KnfOpt] func_tre: le.83 false
// [KnfOpt] func_tre: aux.85 false
// [KnfOpt] func_tre: main.87 false
// [KnfOpt] freq: {map.1: Once, aux.4: AsClosure, filter.15: Many(2), aux.18: AsClosure, concat.31: Once, aux.34: AsClosure, range.43: Many(2), aux.48: AsClosure, addx.59: Once, aux.61: AsClosure, fold.63: Many(2), sum.73: Once, add.75: AsClosure, gt.79: Once, aux.81: AsClosure, le.83: Once, aux.85: AsClosure, main.87: Once}
// [KnfOpt] Inline threshold 12
// [KnfOpt] Fn like 2
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision fold.63 accepted
// [KnfOpt] Knf inline Some(fold) Unit
// [KnfOpt] Inline threshold 23
// [KnfOpt] Fn like 2
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision fold.63 accepted
// [KnfOpt] Knf inline Some(fold) Unit
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision range.43 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision range.43 rejected
// [KnfOpt] Inline threshold 16
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision concat.31 accepted
// [KnfOpt] Inline threshold 3
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision addx.59 accepted
// [KnfOpt] Inline threshold 20
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision map.1 accepted
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision gt.79 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision le.83 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(le) let _102: Fun([Int], Int) = Unit
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.126: Int = (x.127: Int, y.128: Int) {
// [KnfOpt]   Add(x.127, y.128)
// [KnfOpt] }
// [KnfOpt] let _129: Int = Int(0)
// [KnfOpt] let _130: Unit = Unit
// [KnfOpt] let _131: Tuple([Int, Int]) = Apply(under1200.103, [_130, ])
// [KnfOpt] let (ok.132: Var({val: Some(Int)}), val.133: Var({val: Some(Int)})) = _131
// [KnfOpt] let _134: Int = Int(0)
// [KnfOpt] if (ok.132 == _134) then {
// [KnfOpt]   let sum.104: Int = Var(_129)
// [KnfOpt]   let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]   let _106: Int = Int(10)
// [KnfOpt]   let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]   Unit
// [KnfOpt] } else {
// [KnfOpt]   let _135: Int = Apply(add.126, [_129, val.133, ])
// [KnfOpt]   let _136: Unit = Unit
// [KnfOpt]   let _137: Tuple([Int, Int]) = Apply(under1200.103, [_136, ])
// [KnfOpt]   let (ok.138: Var({val: Some(Int)}), val.139: Var({val: Some(Int)})) = _137
// [KnfOpt]   let _140: Int = Int(0)
// [KnfOpt]   if (ok.138 == _140) then {
// [KnfOpt]     let sum.104: Int = Var(_135)
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _141: Int = Apply(add.126, [_135, val.139, ])
// [KnfOpt]     let sum.104: Int = Apply(fold.63, [under1200.103, add.126, _141, ])
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(gt) let _99: Fun([Int], Int) = Unit
// [KnfOpt] let over50.100: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [addone.97, _99, ])
// [KnfOpt] let _101: Int = Int(1200)
// [KnfOpt] let rec aux.142: Int = (y.143: Int) {
// [KnfOpt]   if (y.143 <= _101) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _102: Fun([Int], Int) = Var(aux.142)
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.144: Int = (x.145: Int, y.146: Int) {
// [KnfOpt]   Add(x.145, y.146)
// [KnfOpt] }
// [KnfOpt] let _147: Int = Int(0)
// [KnfOpt] let _148: Unit = Unit
// [KnfOpt] let _149: Tuple([Int, Int]) = Apply(under1200.103, [_148, ])
// [KnfOpt] let (ok.150: Var({val: Some(Int)}), val.151: Var({val: Some(Int)})) = _149
// [KnfOpt] let _152: Int = Int(0)
// [KnfOpt] if (ok.150 == _152) then {
// [KnfOpt]   let sum.104: Int = Var(_147)
// [KnfOpt]   let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]   let _106: Int = Int(10)
// [KnfOpt]   let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]   Unit
// [KnfOpt] } else {
// [KnfOpt]   let _153: Int = Apply(add.144, [_147, val.151, ])
// [KnfOpt]   let _154: Unit = Unit
// [KnfOpt]   let _155: Tuple([Int, Int]) = Apply(under1200.103, [_154, ])
// [KnfOpt]   let (ok.156: Var({val: Some(Int)}), val.157: Var({val: Some(Int)})) = _155
// [KnfOpt]   let _158: Int = Int(0)
// [KnfOpt]   if (ok.156 == _158) then {
// [KnfOpt]     let sum.104: Int = Var(_153)
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _159: Int = Apply(add.144, [_153, val.157, ])
// [KnfOpt]     let sum.104: Int = Apply(fold.63, [under1200.103, add.144, _159, ])
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision le.83 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(le) let _102: Fun([Int], Int) = Unit
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.162: Int = (x.163: Int, y.164: Int) {
// [KnfOpt]   Add(x.163, y.164)
// [KnfOpt] }
// [KnfOpt] let _165: Int = Int(0)
// [KnfOpt] let _166: Unit = Unit
// [KnfOpt] let _167: Tuple([Int, Int]) = Apply(under1200.103, [_166, ])
// [KnfOpt] let (ok.168: Var({val: Some(Int)}), val.169: Var({val: Some(Int)})) = _167
// [KnfOpt] let _170: Int = Int(0)
// [KnfOpt] if (ok.168 == _170) then {
// [KnfOpt]   let sum.104: Int = Var(_165)
// [KnfOpt]   let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]   let _106: Int = Int(10)
// [KnfOpt]   let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]   Unit
// [KnfOpt] } else {
// [KnfOpt]   let _171: Int = Apply(add.162, [_165, val.169, ])
// [KnfOpt]   let _172: Unit = Unit
// [KnfOpt]   let _173: Tuple([Int, Int]) = Apply(under1200.103, [_172, ])
// [KnfOpt]   let (ok.174: Var({val: Some(Int)}), val.175: Var({val: Some(Int)})) = _173
// [KnfOpt]   let _176: Int = Int(0)
// [KnfOpt]   if (ok.174 == _176) then {
// [KnfOpt]     let sum.104: Int = Var(_171)
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _177: Int = Apply(add.162, [_171, val.175, ])
// [KnfOpt]     let sum.104: Int = Apply(fold.63, [under1200.103, add.162, _177, ])
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(map) let addone.97: Fun([Unit], Tuple([Int, Int])) = Unit
// [KnfOpt] let _98: Int = Int(50)
// [KnfOpt] let rec aux.160: Int = (y.161: Int) {
// [KnfOpt]   if (_98 <= y.161) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _99: Fun([Int], Int) = Var(aux.160)
// [KnfOpt] let over50.100: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [addone.97, _99, ])
// [KnfOpt] let _101: Int = Int(1200)
// [KnfOpt] let rec aux.178: Int = (y.179: Int) {
// [KnfOpt]   if (y.179 <= _101) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _102: Fun([Int], Int) = Var(aux.178)
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.180: Int = (x.181: Int, y.182: Int) {
// [KnfOpt]   Add(x.181, y.182)
// [KnfOpt] }
// [KnfOpt] let _183: Int = Int(0)
// [KnfOpt] let _184: Unit = Unit
// [KnfOpt] let _185: Tuple([Int, Int]) = Apply(under1200.103, [_184, ])
// [KnfOpt] let (ok.186: Var({val: Some(Int)}), val.187: Var({val: Some(Int)})) = _185
// [KnfOpt] let _188: Int = Int(0)
// [KnfOpt] if (ok.186 == _188) then {
// [KnfOpt]   let sum.104: Int = Var(_183)
// [KnfOpt]   let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]   let _106: Int = Int(10)
// [KnfOpt]   let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]   Unit
// [KnfOpt] } else {
// [KnfOpt]   let _189: Int = Apply(add.180, [_183, val.187, ])
// [KnfOpt]   let _190: Unit = Unit
// [KnfOpt]   let _191: Tuple([Int, Int]) = Apply(under1200.103, [_190, ])
// [KnfOpt]   let (ok.192: Var({val: Some(Int)}), val.193: Var({val: Some(Int)})) = _191
// [KnfOpt]   let _194: Int = Int(0)
// [KnfOpt]   if (ok.192 == _194) then {
// [KnfOpt]     let sum.104: Int = Var(_189)
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _195: Int = Apply(add.180, [_189, val.193, ])
// [KnfOpt]     let sum.104: Int = Apply(fold.63, [under1200.103, add.180, _195, ])
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision gt.79 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision le.83 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(le) let _102: Fun([Int], Int) = Unit
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.207: Int = (x.208: Int, y.209: Int) {
// [KnfOpt]   Add(x.208, y.209)
// [KnfOpt] }
// [KnfOpt] let _210: Int = Int(0)
// [KnfOpt] let _211: Unit = Unit
// [KnfOpt] let _212: Tuple([Int, Int]) = Apply(under1200.103, [_211, ])
// [KnfOpt] let (ok.213: Var({val: Some(Int)}), val.214: Var({val: Some(Int)})) = _212
// [KnfOpt] let _215: Int = Int(0)
// [KnfOpt] if (ok.213 == _215) then {
// [KnfOpt]   let sum.104: Int = Var(_210)
// [KnfOpt]   let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]   let _106: Int = Int(10)
// [KnfOpt]   let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]   Unit
// [KnfOpt] } else {
// [KnfOpt]   let _216: Int = Apply(add.207, [_210, val.214, ])
// [KnfOpt]   let _217: Unit = Unit
// [KnfOpt]   let _218: Tuple([Int, Int]) = Apply(under1200.103, [_217, ])
// [KnfOpt]   let (ok.219: Var({val: Some(Int)}), val.220: Var({val: Some(Int)})) = _218
// [KnfOpt]   let _221: Int = Int(0)
// [KnfOpt]   if (ok.219 == _221) then {
// [KnfOpt]     let sum.104: Int = Var(_216)
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _222: Int = Apply(add.207, [_216, val.220, ])
// [KnfOpt]     let sum.104: Int = Apply(fold.63, [under1200.103, add.207, _222, ])
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(gt) let _99: Fun([Int], Int) = Unit
// [KnfOpt] let over50.100: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [addone.97, _99, ])
// [KnfOpt] let _101: Int = Int(1200)
// [KnfOpt] let rec aux.223: Int = (y.224: Int) {
// [KnfOpt]   if (y.224 <= _101) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _102: Fun([Int], Int) = Var(aux.223)
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.225: Int = (x.226: Int, y.227: Int) {
// [KnfOpt]   Add(x.226, y.227)
// [KnfOpt] }
// [KnfOpt] let _228: Int = Int(0)
// [KnfOpt] let _229: Unit = Unit
// [KnfOpt] let _230: Tuple([Int, Int]) = Apply(under1200.103, [_229, ])
// [KnfOpt] let (ok.231: Var({val: Some(Int)}), val.232: Var({val: Some(Int)})) = _230
// [KnfOpt] let _233: Int = Int(0)
// [KnfOpt] if (ok.231 == _233) then {
// [KnfOpt]   let sum.104: Int = Var(_228)
// [KnfOpt]   let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]   let _106: Int = Int(10)
// [KnfOpt]   let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]   Unit
// [KnfOpt] } else {
// [KnfOpt]   let _234: Int = Apply(add.225, [_228, val.232, ])
// [KnfOpt]   let _235: Unit = Unit
// [KnfOpt]   let _236: Tuple([Int, Int]) = Apply(under1200.103, [_235, ])
// [KnfOpt]   let (ok.237: Var({val: Some(Int)}), val.238: Var({val: Some(Int)})) = _236
// [KnfOpt]   let _239: Int = Int(0)
// [KnfOpt]   if (ok.237 == _239) then {
// [KnfOpt]     let sum.104: Int = Var(_234)
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _240: Int = Apply(add.225, [_234, val.238, ])
// [KnfOpt]     let sum.104: Int = Apply(fold.63, [under1200.103, add.225, _240, ])
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision le.83 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(le) let _102: Fun([Int], Int) = Unit
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.243: Int = (x.244: Int, y.245: Int) {
// [KnfOpt]   Add(x.244, y.245)
// [KnfOpt] }
// [KnfOpt] let _246: Int = Int(0)
// [KnfOpt] let _247: Unit = Unit
// [KnfOpt] let _248: Tuple([Int, Int]) = Apply(under1200.103, [_247, ])
// [KnfOpt] let (ok.249: Var({val: Some(Int)}), val.250: Var({val: Some(Int)})) = _248
// [KnfOpt] let _251: Int = Int(0)
// [KnfOpt] if (ok.249 == _251) then {
// [KnfOpt]   let sum.104: Int = Var(_246)
// [KnfOpt]   let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]   let _106: Int = Int(10)
// [KnfOpt]   let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]   Unit
// [KnfOpt] } else {
// [KnfOpt]   let _252: Int = Apply(add.243, [_246, val.250, ])
// [KnfOpt]   let _253: Unit = Unit
// [KnfOpt]   let _254: Tuple([Int, Int]) = Apply(under1200.103, [_253, ])
// [KnfOpt]   let (ok.255: Var({val: Some(Int)}), val.256: Var({val: Some(Int)})) = _254
// [KnfOpt]   let _257: Int = Int(0)
// [KnfOpt]   if (ok.255 == _257) then {
// [KnfOpt]     let sum.104: Int = Var(_252)
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _258: Int = Apply(add.243, [_252, val.256, ])
// [KnfOpt]     let sum.104: Int = Apply(fold.63, [under1200.103, add.243, _258, ])
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(addx) let _96: Fun([Int], Int) = Unit
// [KnfOpt] let rec aux.196: Tuple([Int, Int]) = (u.197: Var({val: Some(Unit)})) {
// [KnfOpt]   let _198: Unit = Unit
// [KnfOpt]   let _199: Tuple([Int, Int]) = Apply(catt.94, [_198, ])
// [KnfOpt]   let (ok.200: Var({val: Some(Int)}), val.201: Var({val: Some(Int)})) = _199
// [KnfOpt]   let _202: Int = Int(0)
// [KnfOpt]   if (ok.200 == _202) then {
// [KnfOpt]     let _203: Int = Int(0)
// [KnfOpt]     let _204: Int = Int(0)
// [KnfOpt]     Tuple([_203, _204, ])
// [KnfOpt]   } else {
// [KnfOpt]     let _205: Int = Int(1)
// [KnfOpt]     let _206: Int = Apply(_96, [val.201, ])
// [KnfOpt]     Tuple([_205, _206, ])
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let addone.97: Fun([Unit], Tuple([Int, Int])) = Var(aux.196)
// [KnfOpt] let _98: Int = Int(50)
// [KnfOpt] let rec aux.241: Int = (y.242: Int) {
// [KnfOpt]   if (_98 <= y.242) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _99: Fun([Int], Int) = Var(aux.241)
// [KnfOpt] let over50.100: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [addone.97, _99, ])
// [KnfOpt] let _101: Int = Int(1200)
// [KnfOpt] let rec aux.259: Int = (y.260: Int) {
// [KnfOpt]   if (y.260 <= _101) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _102: Fun([Int], Int) = Var(aux.259)
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.261: Int = (x.262: Int, y.263: Int) {
// [KnfOpt]   Add(x.262, y.263)
// [KnfOpt] }
// [KnfOpt] let _264: Int = Int(0)
// [KnfOpt] let _265: Unit = Unit
// [KnfOpt] let _266: Tuple([Int, Int]) = Apply(under1200.103, [_265, ])
// [KnfOpt] let (ok.267: Var({val: Some(Int)}), val.268: Var({val: Some(Int)})) = _266
// [KnfOpt] let _269: Int = Int(0)
// [KnfOpt] if (ok.267 == _269) then {
// [KnfOpt]   let sum.104: Int = Var(_264)
// [KnfOpt]   let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]   let _106: Int = Int(10)
// [KnfOpt]   let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]   Unit
// [KnfOpt] } else {
// [KnfOpt]   let _270: Int = Apply(add.261, [_264, val.268, ])
// [KnfOpt]   let _271: Unit = Unit
// [KnfOpt]   let _272: Tuple([Int, Int]) = Apply(under1200.103, [_271, ])
// [KnfOpt]   let (ok.273: Var({val: Some(Int)}), val.274: Var({val: Some(Int)})) = _272
// [KnfOpt]   let _275: Int = Int(0)
// [KnfOpt]   if (ok.273 == _275) then {
// [KnfOpt]     let sum.104: Int = Var(_270)
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _276: Int = Apply(add.261, [_270, val.274, ])
// [KnfOpt]     let sum.104: Int = Apply(fold.63, [under1200.103, add.261, _276, ])
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Inline threshold 20
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision map.1 accepted
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision gt.79 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision le.83 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(le) let _102: Fun([Int], Int) = Unit
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.279: Int = (x.280: Int, y.281: Int) {
// [KnfOpt]   Add(x.280, y.281)
// [KnfOpt] }
// [KnfOpt] let _282: Int = Int(0)
// [KnfOpt] let _283: Unit = Unit
// [KnfOpt] let _284: Tuple([Int, Int]) = Apply(under1200.103, [_283, ])
// [KnfOpt] let (ok.285: Var({val: Some(Int)}), val.286: Var({val: Some(Int)})) = _284
// [KnfOpt] let _287: Int = Int(0)
// [KnfOpt] if (ok.285 == _287) then {
// [KnfOpt]   let sum.104: Int = Var(_282)
// [KnfOpt]   let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]   let _106: Int = Int(10)
// [KnfOpt]   let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]   Unit
// [KnfOpt] } else {
// [KnfOpt]   let _288: Int = Apply(add.279, [_282, val.286, ])
// [KnfOpt]   let _289: Unit = Unit
// [KnfOpt]   let _290: Tuple([Int, Int]) = Apply(under1200.103, [_289, ])
// [KnfOpt]   let (ok.291: Var({val: Some(Int)}), val.292: Var({val: Some(Int)})) = _290
// [KnfOpt]   let _293: Int = Int(0)
// [KnfOpt]   if (ok.291 == _293) then {
// [KnfOpt]     let sum.104: Int = Var(_288)
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _294: Int = Apply(add.279, [_288, val.292, ])
// [KnfOpt]     let sum.104: Int = Apply(fold.63, [under1200.103, add.279, _294, ])
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(gt) let _99: Fun([Int], Int) = Unit
// [KnfOpt] let over50.100: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [addone.97, _99, ])
// [KnfOpt] let _101: Int = Int(1200)
// [KnfOpt] let rec aux.295: Int = (y.296: Int) {
// [KnfOpt]   if (y.296 <= _101) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _102: Fun([Int], Int) = Var(aux.295)
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.297: Int = (x.298: Int, y.299: Int) {
// [KnfOpt]   Add(x.298, y.299)
// [KnfOpt] }
// [KnfOpt] let _300: Int = Int(0)
// [KnfOpt] let _301: Unit = Unit
// [KnfOpt] let _302: Tuple([Int, Int]) = Apply(under1200.103, [_301, ])
// [KnfOpt] let (ok.303: Var({val: Some(Int)}), val.304: Var({val: Some(Int)})) = _302
// [KnfOpt] let _305: Int = Int(0)
// [KnfOpt] if (ok.303 == _305) then {
// [KnfOpt]   let sum.104: Int = Var(_300)
// [KnfOpt]   let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]   let _106: Int = Int(10)
// [KnfOpt]   let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]   Unit
// [KnfOpt] } else {
// [KnfOpt]   let _306: Int = Apply(add.297, [_300, val.304, ])
// [KnfOpt]   let _307: Unit = Unit
// [KnfOpt]   let _308: Tuple([Int, Int]) = Apply(under1200.103, [_307, ])
// [KnfOpt]   let (ok.309: Var({val: Some(Int)}), val.310: Var({val: Some(Int)})) = _308
// [KnfOpt]   let _311: Int = Int(0)
// [KnfOpt]   if (ok.309 == _311) then {
// [KnfOpt]     let sum.104: Int = Var(_306)
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _312: Int = Apply(add.297, [_306, val.310, ])
// [KnfOpt]     let sum.104: Int = Apply(fold.63, [under1200.103, add.297, _312, ])
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision le.83 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(le) let _102: Fun([Int], Int) = Unit
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.315: Int = (x.316: Int, y.317: Int) {
// [KnfOpt]   Add(x.316, y.317)
// [KnfOpt] }
// [KnfOpt] let _318: Int = Int(0)
// [KnfOpt] let _319: Unit = Unit
// [KnfOpt] let _320: Tuple([Int, Int]) = Apply(under1200.103, [_319, ])
// [KnfOpt] let (ok.321: Var({val: Some(Int)}), val.322: Var({val: Some(Int)})) = _320
// [KnfOpt] let _323: Int = Int(0)
// [KnfOpt] if (ok.321 == _323) then {
// [KnfOpt]   let sum.104: Int = Var(_318)
// [KnfOpt]   let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]   let _106: Int = Int(10)
// [KnfOpt]   let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]   Unit
// [KnfOpt] } else {
// [KnfOpt]   let _324: Int = Apply(add.315, [_318, val.322, ])
// [KnfOpt]   let _325: Unit = Unit
// [KnfOpt]   let _326: Tuple([Int, Int]) = Apply(under1200.103, [_325, ])
// [KnfOpt]   let (ok.327: Var({val: Some(Int)}), val.328: Var({val: Some(Int)})) = _326
// [KnfOpt]   let _329: Int = Int(0)
// [KnfOpt]   if (ok.327 == _329) then {
// [KnfOpt]     let sum.104: Int = Var(_324)
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _330: Int = Apply(add.315, [_324, val.328, ])
// [KnfOpt]     let sum.104: Int = Apply(fold.63, [under1200.103, add.315, _330, ])
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(map) let addone.97: Fun([Unit], Tuple([Int, Int])) = Unit
// [KnfOpt] let _98: Int = Int(50)
// [KnfOpt] let rec aux.313: Int = (y.314: Int) {
// [KnfOpt]   if (_98 <= y.314) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _99: Fun([Int], Int) = Var(aux.313)
// [KnfOpt] let over50.100: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [addone.97, _99, ])
// [KnfOpt] let _101: Int = Int(1200)
// [KnfOpt] let rec aux.331: Int = (y.332: Int) {
// [KnfOpt]   if (y.332 <= _101) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _102: Fun([Int], Int) = Var(aux.331)
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.333: Int = (x.334: Int, y.335: Int) {
// [KnfOpt]   Add(x.334, y.335)
// [KnfOpt] }
// [KnfOpt] let _336: Int = Int(0)
// [KnfOpt] let _337: Unit = Unit
// [KnfOpt] let _338: Tuple([Int, Int]) = Apply(under1200.103, [_337, ])
// [KnfOpt] let (ok.339: Var({val: Some(Int)}), val.340: Var({val: Some(Int)})) = _338
// [KnfOpt] let _341: Int = Int(0)
// [KnfOpt] if (ok.339 == _341) then {
// [KnfOpt]   let sum.104: Int = Var(_336)
// [KnfOpt]   let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]   let _106: Int = Int(10)
// [KnfOpt]   let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]   Unit
// [KnfOpt] } else {
// [KnfOpt]   let _342: Int = Apply(add.333, [_336, val.340, ])
// [KnfOpt]   let _343: Unit = Unit
// [KnfOpt]   let _344: Tuple([Int, Int]) = Apply(under1200.103, [_343, ])
// [KnfOpt]   let (ok.345: Var({val: Some(Int)}), val.346: Var({val: Some(Int)})) = _344
// [KnfOpt]   let _347: Int = Int(0)
// [KnfOpt]   if (ok.345 == _347) then {
// [KnfOpt]     let sum.104: Int = Var(_342)
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _348: Int = Apply(add.333, [_342, val.346, ])
// [KnfOpt]     let sum.104: Int = Apply(fold.63, [under1200.103, add.333, _348, ])
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision gt.79 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision le.83 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(le) let _102: Fun([Int], Int) = Unit
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.360: Int = (x.361: Int, y.362: Int) {
// [KnfOpt]   Add(x.361, y.362)
// [KnfOpt] }
// [KnfOpt] let _363: Int = Int(0)
// [KnfOpt] let _364: Unit = Unit
// [KnfOpt] let _365: Tuple([Int, Int]) = Apply(under1200.103, [_364, ])
// [KnfOpt] let (ok.366: Var({val: Some(Int)}), val.367: Var({val: Some(Int)})) = _365
// [KnfOpt] let _368: Int = Int(0)
// [KnfOpt] if (ok.366 == _368) then {
// [KnfOpt]   let sum.104: Int = Var(_363)
// [KnfOpt]   let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]   let _106: Int = Int(10)
// [KnfOpt]   let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]   Unit
// [KnfOpt] } else {
// [KnfOpt]   let _369: Int = Apply(add.360, [_363, val.367, ])
// [KnfOpt]   let _370: Unit = Unit
// [KnfOpt]   let _371: Tuple([Int, Int]) = Apply(under1200.103, [_370, ])
// [KnfOpt]   let (ok.372: Var({val: Some(Int)}), val.373: Var({val: Some(Int)})) = _371
// [KnfOpt]   let _374: Int = Int(0)
// [KnfOpt]   if (ok.372 == _374) then {
// [KnfOpt]     let sum.104: Int = Var(_369)
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _375: Int = Apply(add.360, [_369, val.373, ])
// [KnfOpt]     let sum.104: Int = Apply(fold.63, [under1200.103, add.360, _375, ])
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(gt) let _99: Fun([Int], Int) = Unit
// [KnfOpt] let over50.100: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [addone.97, _99, ])
// [KnfOpt] let _101: Int = Int(1200)
// [KnfOpt] let rec aux.376: Int = (y.377: Int) {
// [KnfOpt]   if (y.377 <= _101) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _102: Fun([Int], Int) = Var(aux.376)
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.378: Int = (x.379: Int, y.380: Int) {
// [KnfOpt]   Add(x.379, y.380)
// [KnfOpt] }
// [KnfOpt] let _381: Int = Int(0)
// [KnfOpt] let _382: Unit = Unit
// [KnfOpt] let _383: Tuple([Int, Int]) = Apply(under1200.103, [_382, ])
// [KnfOpt] let (ok.384: Var({val: Some(Int)}), val.385: Var({val: Some(Int)})) = _383
// [KnfOpt] let _386: Int = Int(0)
// [KnfOpt] if (ok.384 == _386) then {
// [KnfOpt]   let sum.104: Int = Var(_381)
// [KnfOpt]   let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]   let _106: Int = Int(10)
// [KnfOpt]   let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]   Unit
// [KnfOpt] } else {
// [KnfOpt]   let _387: Int = Apply(add.378, [_381, val.385, ])
// [KnfOpt]   let _388: Unit = Unit
// [KnfOpt]   let _389: Tuple([Int, Int]) = Apply(under1200.103, [_388, ])
// [KnfOpt]   let (ok.390: Var({val: Some(Int)}), val.391: Var({val: Some(Int)})) = _389
// [KnfOpt]   let _392: Int = Int(0)
// [KnfOpt]   if (ok.390 == _392) then {
// [KnfOpt]     let sum.104: Int = Var(_387)
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _393: Int = Apply(add.378, [_387, val.391, ])
// [KnfOpt]     let sum.104: Int = Apply(fold.63, [under1200.103, add.378, _393, ])
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision le.83 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(le) let _102: Fun([Int], Int) = Unit
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.396: Int = (x.397: Int, y.398: Int) {
// [KnfOpt]   Add(x.397, y.398)
// [KnfOpt] }
// [KnfOpt] let _399: Int = Int(0)
// [KnfOpt] let _400: Unit = Unit
// [KnfOpt] let _401: Tuple([Int, Int]) = Apply(under1200.103, [_400, ])
// [KnfOpt] let (ok.402: Var({val: Some(Int)}), val.403: Var({val: Some(Int)})) = _401
// [KnfOpt] let _404: Int = Int(0)
// [KnfOpt] if (ok.402 == _404) then {
// [KnfOpt]   let sum.104: Int = Var(_399)
// [KnfOpt]   let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]   let _106: Int = Int(10)
// [KnfOpt]   let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]   Unit
// [KnfOpt] } else {
// [KnfOpt]   let _405: Int = Apply(add.396, [_399, val.403, ])
// [KnfOpt]   let _406: Unit = Unit
// [KnfOpt]   let _407: Tuple([Int, Int]) = Apply(under1200.103, [_406, ])
// [KnfOpt]   let (ok.408: Var({val: Some(Int)}), val.409: Var({val: Some(Int)})) = _407
// [KnfOpt]   let _410: Int = Int(0)
// [KnfOpt]   if (ok.408 == _410) then {
// [KnfOpt]     let sum.104: Int = Var(_405)
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _411: Int = Apply(add.396, [_405, val.409, ])
// [KnfOpt]     let sum.104: Int = Apply(fold.63, [under1200.103, add.396, _411, ])
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(concat) let catt.94: Fun([Unit], Tuple([Int, Int])) = Unit
// [KnfOpt] let _95: Int = Int(1)
// [KnfOpt] let rec aux.277: Int = (y.278: Int) {
// [KnfOpt]   Add(_95, y.278)
// [KnfOpt] }
// [KnfOpt] let _96: Fun([Int], Int) = Var(aux.277)
// [KnfOpt] let rec aux.349: Tuple([Int, Int]) = (u.350: Var({val: Some(Unit)})) {
// [KnfOpt]   let _351: Unit = Unit
// [KnfOpt]   let _352: Tuple([Int, Int]) = Apply(catt.94, [_351, ])
// [KnfOpt]   let (ok.353: Var({val: Some(Int)}), val.354: Var({val: Some(Int)})) = _352
// [KnfOpt]   let _355: Int = Int(0)
// [KnfOpt]   if (ok.353 == _355) then {
// [KnfOpt]     let _356: Int = Int(0)
// [KnfOpt]     let _357: Int = Int(0)
// [KnfOpt]     Tuple([_356, _357, ])
// [KnfOpt]   } else {
// [KnfOpt]     let _358: Int = Int(1)
// [KnfOpt]     let _359: Int = Apply(_96, [val.354, ])
// [KnfOpt]     Tuple([_358, _359, ])
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let addone.97: Fun([Unit], Tuple([Int, Int])) = Var(aux.349)
// [KnfOpt] let _98: Int = Int(50)
// [KnfOpt] let rec aux.394: Int = (y.395: Int) {
// [KnfOpt]   if (_98 <= y.395) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _99: Fun([Int], Int) = Var(aux.394)
// [KnfOpt] let over50.100: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [addone.97, _99, ])
// [KnfOpt] let _101: Int = Int(1200)
// [KnfOpt] let rec aux.412: Int = (y.413: Int) {
// [KnfOpt]   if (y.413 <= _101) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _102: Fun([Int], Int) = Var(aux.412)
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.414: Int = (x.415: Int, y.416: Int) {
// [KnfOpt]   Add(x.415, y.416)
// [KnfOpt] }
// [KnfOpt] let _417: Int = Int(0)
// [KnfOpt] let _418: Unit = Unit
// [KnfOpt] let _419: Tuple([Int, Int]) = Apply(under1200.103, [_418, ])
// [KnfOpt] let (ok.420: Var({val: Some(Int)}), val.421: Var({val: Some(Int)})) = _419
// [KnfOpt] let _422: Int = Int(0)
// [KnfOpt] if (ok.420 == _422) then {
// [KnfOpt]   let sum.104: Int = Var(_417)
// [KnfOpt]   let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]   let _106: Int = Int(10)
// [KnfOpt]   let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]   Unit
// [KnfOpt] } else {
// [KnfOpt]   let _423: Int = Apply(add.414, [_417, val.421, ])
// [KnfOpt]   let _424: Unit = Unit
// [KnfOpt]   let _425: Tuple([Int, Int]) = Apply(under1200.103, [_424, ])
// [KnfOpt]   let (ok.426: Var({val: Some(Int)}), val.427: Var({val: Some(Int)})) = _425
// [KnfOpt]   let _428: Int = Int(0)
// [KnfOpt]   if (ok.426 == _428) then {
// [KnfOpt]     let sum.104: Int = Var(_423)
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _429: Int = Apply(add.414, [_423, val.427, ])
// [KnfOpt]     let sum.104: Int = Apply(fold.63, [under1200.103, add.414, _429, ])
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Inline threshold 3
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision addx.59 accepted
// [KnfOpt] Inline threshold 20
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision map.1 accepted
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision gt.79 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision le.83 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(le) let _102: Fun([Int], Int) = Unit
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.439: Int = (x.440: Int, y.441: Int) {
// [KnfOpt]   Add(x.440, y.441)
// [KnfOpt] }
// [KnfOpt] let _442: Int = Int(0)
// [KnfOpt] let _443: Unit = Unit
// [KnfOpt] let _444: Tuple([Int, Int]) = Apply(under1200.103, [_443, ])
// [KnfOpt] let (ok.445: Var({val: Some(Int)}), val.446: Var({val: Some(Int)})) = _444
// [KnfOpt] let _447: Int = Int(0)
// [KnfOpt] if (ok.445 == _447) then {
// [KnfOpt]   let sum.104: Int = Var(_442)
// [KnfOpt]   let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]   let _106: Int = Int(10)
// [KnfOpt]   let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]   Unit
// [KnfOpt] } else {
// [KnfOpt]   let _448: Int = Apply(add.439, [_442, val.446, ])
// [KnfOpt]   let _449: Unit = Unit
// [KnfOpt]   let _450: Tuple([Int, Int]) = Apply(under1200.103, [_449, ])
// [KnfOpt]   let (ok.451: Var({val: Some(Int)}), val.452: Var({val: Some(Int)})) = _450
// [KnfOpt]   let _453: Int = Int(0)
// [KnfOpt]   if (ok.451 == _453) then {
// [KnfOpt]     let sum.104: Int = Var(_448)
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _454: Int = Apply(add.439, [_448, val.452, ])
// [KnfOpt]     let sum.104: Int = Apply(fold.63, [under1200.103, add.439, _454, ])
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(gt) let _99: Fun([Int], Int) = Unit
// [KnfOpt] let over50.100: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [addone.97, _99, ])
// [KnfOpt] let _101: Int = Int(1200)
// [KnfOpt] let rec aux.455: Int = (y.456: Int) {
// [KnfOpt]   if (y.456 <= _101) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _102: Fun([Int], Int) = Var(aux.455)
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.457: Int = (x.458: Int, y.459: Int) {
// [KnfOpt]   Add(x.458, y.459)
// [KnfOpt] }
// [KnfOpt] let _460: Int = Int(0)
// [KnfOpt] let _461: Unit = Unit
// [KnfOpt] let _462: Tuple([Int, Int]) = Apply(under1200.103, [_461, ])
// [KnfOpt] let (ok.463: Var({val: Some(Int)}), val.464: Var({val: Some(Int)})) = _462
// [KnfOpt] let _465: Int = Int(0)
// [KnfOpt] if (ok.463 == _465) then {
// [KnfOpt]   let sum.104: Int = Var(_460)
// [KnfOpt]   let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]   let _106: Int = Int(10)
// [KnfOpt]   let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]   Unit
// [KnfOpt] } else {
// [KnfOpt]   let _466: Int = Apply(add.457, [_460, val.464, ])
// [KnfOpt]   let _467: Unit = Unit
// [KnfOpt]   let _468: Tuple([Int, Int]) = Apply(under1200.103, [_467, ])
// [KnfOpt]   let (ok.469: Var({val: Some(Int)}), val.470: Var({val: Some(Int)})) = _468
// [KnfOpt]   let _471: Int = Int(0)
// [KnfOpt]   if (ok.469 == _471) then {
// [KnfOpt]     let sum.104: Int = Var(_466)
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _472: Int = Apply(add.457, [_466, val.470, ])
// [KnfOpt]     let sum.104: Int = Apply(fold.63, [under1200.103, add.457, _472, ])
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision le.83 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(le) let _102: Fun([Int], Int) = Unit
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.475: Int = (x.476: Int, y.477: Int) {
// [KnfOpt]   Add(x.476, y.477)
// [KnfOpt] }
// [KnfOpt] let _478: Int = Int(0)
// [KnfOpt] let _479: Unit = Unit
// [KnfOpt] let _480: Tuple([Int, Int]) = Apply(under1200.103, [_479, ])
// [KnfOpt] let (ok.481: Var({val: Some(Int)}), val.482: Var({val: Some(Int)})) = _480
// [KnfOpt] let _483: Int = Int(0)
// [KnfOpt] if (ok.481 == _483) then {
// [KnfOpt]   let sum.104: Int = Var(_478)
// [KnfOpt]   let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]   let _106: Int = Int(10)
// [KnfOpt]   let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]   Unit
// [KnfOpt] } else {
// [KnfOpt]   let _484: Int = Apply(add.475, [_478, val.482, ])
// [KnfOpt]   let _485: Unit = Unit
// [KnfOpt]   let _486: Tuple([Int, Int]) = Apply(under1200.103, [_485, ])
// [KnfOpt]   let (ok.487: Var({val: Some(Int)}), val.488: Var({val: Some(Int)})) = _486
// [KnfOpt]   let _489: Int = Int(0)
// [KnfOpt]   if (ok.487 == _489) then {
// [KnfOpt]     let sum.104: Int = Var(_484)
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _490: Int = Apply(add.475, [_484, val.488, ])
// [KnfOpt]     let sum.104: Int = Apply(fold.63, [under1200.103, add.475, _490, ])
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(map) let addone.97: Fun([Unit], Tuple([Int, Int])) = Unit
// [KnfOpt] let _98: Int = Int(50)
// [KnfOpt] let rec aux.473: Int = (y.474: Int) {
// [KnfOpt]   if (_98 <= y.474) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _99: Fun([Int], Int) = Var(aux.473)
// [KnfOpt] let over50.100: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [addone.97, _99, ])
// [KnfOpt] let _101: Int = Int(1200)
// [KnfOpt] let rec aux.491: Int = (y.492: Int) {
// [KnfOpt]   if (y.492 <= _101) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _102: Fun([Int], Int) = Var(aux.491)
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.493: Int = (x.494: Int, y.495: Int) {
// [KnfOpt]   Add(x.494, y.495)
// [KnfOpt] }
// [KnfOpt] let _496: Int = Int(0)
// [KnfOpt] let _497: Unit = Unit
// [KnfOpt] let _498: Tuple([Int, Int]) = Apply(under1200.103, [_497, ])
// [KnfOpt] let (ok.499: Var({val: Some(Int)}), val.500: Var({val: Some(Int)})) = _498
// [KnfOpt] let _501: Int = Int(0)
// [KnfOpt] if (ok.499 == _501) then {
// [KnfOpt]   let sum.104: Int = Var(_496)
// [KnfOpt]   let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]   let _106: Int = Int(10)
// [KnfOpt]   let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]   Unit
// [KnfOpt] } else {
// [KnfOpt]   let _502: Int = Apply(add.493, [_496, val.500, ])
// [KnfOpt]   let _503: Unit = Unit
// [KnfOpt]   let _504: Tuple([Int, Int]) = Apply(under1200.103, [_503, ])
// [KnfOpt]   let (ok.505: Var({val: Some(Int)}), val.506: Var({val: Some(Int)})) = _504
// [KnfOpt]   let _507: Int = Int(0)
// [KnfOpt]   if (ok.505 == _507) then {
// [KnfOpt]     let sum.104: Int = Var(_502)
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _508: Int = Apply(add.493, [_502, val.506, ])
// [KnfOpt]     let sum.104: Int = Apply(fold.63, [under1200.103, add.493, _508, ])
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision gt.79 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision le.83 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(le) let _102: Fun([Int], Int) = Unit
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.520: Int = (x.521: Int, y.522: Int) {
// [KnfOpt]   Add(x.521, y.522)
// [KnfOpt] }
// [KnfOpt] let _523: Int = Int(0)
// [KnfOpt] let _524: Unit = Unit
// [KnfOpt] let _525: Tuple([Int, Int]) = Apply(under1200.103, [_524, ])
// [KnfOpt] let (ok.526: Var({val: Some(Int)}), val.527: Var({val: Some(Int)})) = _525
// [KnfOpt] let _528: Int = Int(0)
// [KnfOpt] if (ok.526 == _528) then {
// [KnfOpt]   let sum.104: Int = Var(_523)
// [KnfOpt]   let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]   let _106: Int = Int(10)
// [KnfOpt]   let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]   Unit
// [KnfOpt] } else {
// [KnfOpt]   let _529: Int = Apply(add.520, [_523, val.527, ])
// [KnfOpt]   let _530: Unit = Unit
// [KnfOpt]   let _531: Tuple([Int, Int]) = Apply(under1200.103, [_530, ])
// [KnfOpt]   let (ok.532: Var({val: Some(Int)}), val.533: Var({val: Some(Int)})) = _531
// [KnfOpt]   let _534: Int = Int(0)
// [KnfOpt]   if (ok.532 == _534) then {
// [KnfOpt]     let sum.104: Int = Var(_529)
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _535: Int = Apply(add.520, [_529, val.533, ])
// [KnfOpt]     let sum.104: Int = Apply(fold.63, [under1200.103, add.520, _535, ])
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(gt) let _99: Fun([Int], Int) = Unit
// [KnfOpt] let over50.100: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [addone.97, _99, ])
// [KnfOpt] let _101: Int = Int(1200)
// [KnfOpt] let rec aux.536: Int = (y.537: Int) {
// [KnfOpt]   if (y.537 <= _101) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _102: Fun([Int], Int) = Var(aux.536)
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.538: Int = (x.539: Int, y.540: Int) {
// [KnfOpt]   Add(x.539, y.540)
// [KnfOpt] }
// [KnfOpt] let _541: Int = Int(0)
// [KnfOpt] let _542: Unit = Unit
// [KnfOpt] let _543: Tuple([Int, Int]) = Apply(under1200.103, [_542, ])
// [KnfOpt] let (ok.544: Var({val: Some(Int)}), val.545: Var({val: Some(Int)})) = _543
// [KnfOpt] let _546: Int = Int(0)
// [KnfOpt] if (ok.544 == _546) then {
// [KnfOpt]   let sum.104: Int = Var(_541)
// [KnfOpt]   let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]   let _106: Int = Int(10)
// [KnfOpt]   let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]   Unit
// [KnfOpt] } else {
// [KnfOpt]   let _547: Int = Apply(add.538, [_541, val.545, ])
// [KnfOpt]   let _548: Unit = Unit
// [KnfOpt]   let _549: Tuple([Int, Int]) = Apply(under1200.103, [_548, ])
// [KnfOpt]   let (ok.550: Var({val: Some(Int)}), val.551: Var({val: Some(Int)})) = _549
// [KnfOpt]   let _552: Int = Int(0)
// [KnfOpt]   if (ok.550 == _552) then {
// [KnfOpt]     let sum.104: Int = Var(_547)
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _553: Int = Apply(add.538, [_547, val.551, ])
// [KnfOpt]     let sum.104: Int = Apply(fold.63, [under1200.103, add.538, _553, ])
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision le.83 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(le) let _102: Fun([Int], Int) = Unit
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.556: Int = (x.557: Int, y.558: Int) {
// [KnfOpt]   Add(x.557, y.558)
// [KnfOpt] }
// [KnfOpt] let _559: Int = Int(0)
// [KnfOpt] let _560: Unit = Unit
// [KnfOpt] let _561: Tuple([Int, Int]) = Apply(under1200.103, [_560, ])
// [KnfOpt] let (ok.562: Var({val: Some(Int)}), val.563: Var({val: Some(Int)})) = _561
// [KnfOpt] let _564: Int = Int(0)
// [KnfOpt] if (ok.562 == _564) then {
// [KnfOpt]   let sum.104: Int = Var(_559)
// [KnfOpt]   let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]   let _106: Int = Int(10)
// [KnfOpt]   let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]   Unit
// [KnfOpt] } else {
// [KnfOpt]   let _565: Int = Apply(add.556, [_559, val.563, ])
// [KnfOpt]   let _566: Unit = Unit
// [KnfOpt]   let _567: Tuple([Int, Int]) = Apply(under1200.103, [_566, ])
// [KnfOpt]   let (ok.568: Var({val: Some(Int)}), val.569: Var({val: Some(Int)})) = _567
// [KnfOpt]   let _570: Int = Int(0)
// [KnfOpt]   if (ok.568 == _570) then {
// [KnfOpt]     let sum.104: Int = Var(_565)
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _571: Int = Apply(add.556, [_565, val.569, ])
// [KnfOpt]     let sum.104: Int = Apply(fold.63, [under1200.103, add.556, _571, ])
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(addx) let _96: Fun([Int], Int) = Unit
// [KnfOpt] let rec aux.509: Tuple([Int, Int]) = (u.510: Var({val: Some(Unit)})) {
// [KnfOpt]   let _511: Unit = Unit
// [KnfOpt]   let _512: Tuple([Int, Int]) = Apply(catt.94, [_511, ])
// [KnfOpt]   let (ok.513: Var({val: Some(Int)}), val.514: Var({val: Some(Int)})) = _512
// [KnfOpt]   let _515: Int = Int(0)
// [KnfOpt]   if (ok.513 == _515) then {
// [KnfOpt]     let _516: Int = Int(0)
// [KnfOpt]     let _517: Int = Int(0)
// [KnfOpt]     Tuple([_516, _517, ])
// [KnfOpt]   } else {
// [KnfOpt]     let _518: Int = Int(1)
// [KnfOpt]     let _519: Int = Apply(_96, [val.514, ])
// [KnfOpt]     Tuple([_518, _519, ])
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let addone.97: Fun([Unit], Tuple([Int, Int])) = Var(aux.509)
// [KnfOpt] let _98: Int = Int(50)
// [KnfOpt] let rec aux.554: Int = (y.555: Int) {
// [KnfOpt]   if (_98 <= y.555) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _99: Fun([Int], Int) = Var(aux.554)
// [KnfOpt] let over50.100: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [addone.97, _99, ])
// [KnfOpt] let _101: Int = Int(1200)
// [KnfOpt] let rec aux.572: Int = (y.573: Int) {
// [KnfOpt]   if (y.573 <= _101) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _102: Fun([Int], Int) = Var(aux.572)
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.574: Int = (x.575: Int, y.576: Int) {
// [KnfOpt]   Add(x.575, y.576)
// [KnfOpt] }
// [KnfOpt] let _577: Int = Int(0)
// [KnfOpt] let _578: Unit = Unit
// [KnfOpt] let _579: Tuple([Int, Int]) = Apply(under1200.103, [_578, ])
// [KnfOpt] let (ok.580: Var({val: Some(Int)}), val.581: Var({val: Some(Int)})) = _579
// [KnfOpt] let _582: Int = Int(0)
// [KnfOpt] if (ok.580 == _582) then {
// [KnfOpt]   let sum.104: Int = Var(_577)
// [KnfOpt]   let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]   let _106: Int = Int(10)
// [KnfOpt]   let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]   Unit
// [KnfOpt] } else {
// [KnfOpt]   let _583: Int = Apply(add.574, [_577, val.581, ])
// [KnfOpt]   let _584: Unit = Unit
// [KnfOpt]   let _585: Tuple([Int, Int]) = Apply(under1200.103, [_584, ])
// [KnfOpt]   let (ok.586: Var({val: Some(Int)}), val.587: Var({val: Some(Int)})) = _585
// [KnfOpt]   let _588: Int = Int(0)
// [KnfOpt]   if (ok.586 == _588) then {
// [KnfOpt]     let sum.104: Int = Var(_583)
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _589: Int = Apply(add.574, [_583, val.587, ])
// [KnfOpt]     let sum.104: Int = Apply(fold.63, [under1200.103, add.574, _589, ])
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Inline threshold 20
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision map.1 accepted
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision gt.79 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision le.83 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(le) let _102: Fun([Int], Int) = Unit
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.592: Int = (x.593: Int, y.594: Int) {
// [KnfOpt]   Add(x.593, y.594)
// [KnfOpt] }
// [KnfOpt] let _595: Int = Int(0)
// [KnfOpt] let _596: Unit = Unit
// [KnfOpt] let _597: Tuple([Int, Int]) = Apply(under1200.103, [_596, ])
// [KnfOpt] let (ok.598: Var({val: Some(Int)}), val.599: Var({val: Some(Int)})) = _597
// [KnfOpt] let _600: Int = Int(0)
// [KnfOpt] if (ok.598 == _600) then {
// [KnfOpt]   let sum.104: Int = Var(_595)
// [KnfOpt]   let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]   let _106: Int = Int(10)
// [KnfOpt]   let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]   Unit
// [KnfOpt] } else {
// [KnfOpt]   let _601: Int = Apply(add.592, [_595, val.599, ])
// [KnfOpt]   let _602: Unit = Unit
// [KnfOpt]   let _603: Tuple([Int, Int]) = Apply(under1200.103, [_602, ])
// [KnfOpt]   let (ok.604: Var({val: Some(Int)}), val.605: Var({val: Some(Int)})) = _603
// [KnfOpt]   let _606: Int = Int(0)
// [KnfOpt]   if (ok.604 == _606) then {
// [KnfOpt]     let sum.104: Int = Var(_601)
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _607: Int = Apply(add.592, [_601, val.605, ])
// [KnfOpt]     let sum.104: Int = Apply(fold.63, [under1200.103, add.592, _607, ])
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(gt) let _99: Fun([Int], Int) = Unit
// [KnfOpt] let over50.100: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [addone.97, _99, ])
// [KnfOpt] let _101: Int = Int(1200)
// [KnfOpt] let rec aux.608: Int = (y.609: Int) {
// [KnfOpt]   if (y.609 <= _101) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _102: Fun([Int], Int) = Var(aux.608)
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.610: Int = (x.611: Int, y.612: Int) {
// [KnfOpt]   Add(x.611, y.612)
// [KnfOpt] }
// [KnfOpt] let _613: Int = Int(0)
// [KnfOpt] let _614: Unit = Unit
// [KnfOpt] let _615: Tuple([Int, Int]) = Apply(under1200.103, [_614, ])
// [KnfOpt] let (ok.616: Var({val: Some(Int)}), val.617: Var({val: Some(Int)})) = _615
// [KnfOpt] let _618: Int = Int(0)
// [KnfOpt] if (ok.616 == _618) then {
// [KnfOpt]   let sum.104: Int = Var(_613)
// [KnfOpt]   let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]   let _106: Int = Int(10)
// [KnfOpt]   let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]   Unit
// [KnfOpt] } else {
// [KnfOpt]   let _619: Int = Apply(add.610, [_613, val.617, ])
// [KnfOpt]   let _620: Unit = Unit
// [KnfOpt]   let _621: Tuple([Int, Int]) = Apply(under1200.103, [_620, ])
// [KnfOpt]   let (ok.622: Var({val: Some(Int)}), val.623: Var({val: Some(Int)})) = _621
// [KnfOpt]   let _624: Int = Int(0)
// [KnfOpt]   if (ok.622 == _624) then {
// [KnfOpt]     let sum.104: Int = Var(_619)
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _625: Int = Apply(add.610, [_619, val.623, ])
// [KnfOpt]     let sum.104: Int = Apply(fold.63, [under1200.103, add.610, _625, ])
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision le.83 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(le) let _102: Fun([Int], Int) = Unit
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.628: Int = (x.629: Int, y.630: Int) {
// [KnfOpt]   Add(x.629, y.630)
// [KnfOpt] }
// [KnfOpt] let _631: Int = Int(0)
// [KnfOpt] let _632: Unit = Unit
// [KnfOpt] let _633: Tuple([Int, Int]) = Apply(under1200.103, [_632, ])
// [KnfOpt] let (ok.634: Var({val: Some(Int)}), val.635: Var({val: Some(Int)})) = _633
// [KnfOpt] let _636: Int = Int(0)
// [KnfOpt] if (ok.634 == _636) then {
// [KnfOpt]   let sum.104: Int = Var(_631)
// [KnfOpt]   let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]   let _106: Int = Int(10)
// [KnfOpt]   let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]   Unit
// [KnfOpt] } else {
// [KnfOpt]   let _637: Int = Apply(add.628, [_631, val.635, ])
// [KnfOpt]   let _638: Unit = Unit
// [KnfOpt]   let _639: Tuple([Int, Int]) = Apply(under1200.103, [_638, ])
// [KnfOpt]   let (ok.640: Var({val: Some(Int)}), val.641: Var({val: Some(Int)})) = _639
// [KnfOpt]   let _642: Int = Int(0)
// [KnfOpt]   if (ok.640 == _642) then {
// [KnfOpt]     let sum.104: Int = Var(_637)
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _643: Int = Apply(add.628, [_637, val.641, ])
// [KnfOpt]     let sum.104: Int = Apply(fold.63, [under1200.103, add.628, _643, ])
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(map) let addone.97: Fun([Unit], Tuple([Int, Int])) = Unit
// [KnfOpt] let _98: Int = Int(50)
// [KnfOpt] let rec aux.626: Int = (y.627: Int) {
// [KnfOpt]   if (_98 <= y.627) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _99: Fun([Int], Int) = Var(aux.626)
// [KnfOpt] let over50.100: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [addone.97, _99, ])
// [KnfOpt] let _101: Int = Int(1200)
// [KnfOpt] let rec aux.644: Int = (y.645: Int) {
// [KnfOpt]   if (y.645 <= _101) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _102: Fun([Int], Int) = Var(aux.644)
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.646: Int = (x.647: Int, y.648: Int) {
// [KnfOpt]   Add(x.647, y.648)
// [KnfOpt] }
// [KnfOpt] let _649: Int = Int(0)
// [KnfOpt] let _650: Unit = Unit
// [KnfOpt] let _651: Tuple([Int, Int]) = Apply(under1200.103, [_650, ])
// [KnfOpt] let (ok.652: Var({val: Some(Int)}), val.653: Var({val: Some(Int)})) = _651
// [KnfOpt] let _654: Int = Int(0)
// [KnfOpt] if (ok.652 == _654) then {
// [KnfOpt]   let sum.104: Int = Var(_649)
// [KnfOpt]   let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]   let _106: Int = Int(10)
// [KnfOpt]   let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]   Unit
// [KnfOpt] } else {
// [KnfOpt]   let _655: Int = Apply(add.646, [_649, val.653, ])
// [KnfOpt]   let _656: Unit = Unit
// [KnfOpt]   let _657: Tuple([Int, Int]) = Apply(under1200.103, [_656, ])
// [KnfOpt]   let (ok.658: Var({val: Some(Int)}), val.659: Var({val: Some(Int)})) = _657
// [KnfOpt]   let _660: Int = Int(0)
// [KnfOpt]   if (ok.658 == _660) then {
// [KnfOpt]     let sum.104: Int = Var(_655)
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _661: Int = Apply(add.646, [_655, val.659, ])
// [KnfOpt]     let sum.104: Int = Apply(fold.63, [under1200.103, add.646, _661, ])
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision gt.79 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision le.83 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(le) let _102: Fun([Int], Int) = Unit
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.673: Int = (x.674: Int, y.675: Int) {
// [KnfOpt]   Add(x.674, y.675)
// [KnfOpt] }
// [KnfOpt] let _676: Int = Int(0)
// [KnfOpt] let _677: Unit = Unit
// [KnfOpt] let _678: Tuple([Int, Int]) = Apply(under1200.103, [_677, ])
// [KnfOpt] let (ok.679: Var({val: Some(Int)}), val.680: Var({val: Some(Int)})) = _678
// [KnfOpt] let _681: Int = Int(0)
// [KnfOpt] if (ok.679 == _681) then {
// [KnfOpt]   let sum.104: Int = Var(_676)
// [KnfOpt]   let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]   let _106: Int = Int(10)
// [KnfOpt]   let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]   Unit
// [KnfOpt] } else {
// [KnfOpt]   let _682: Int = Apply(add.673, [_676, val.680, ])
// [KnfOpt]   let _683: Unit = Unit
// [KnfOpt]   let _684: Tuple([Int, Int]) = Apply(under1200.103, [_683, ])
// [KnfOpt]   let (ok.685: Var({val: Some(Int)}), val.686: Var({val: Some(Int)})) = _684
// [KnfOpt]   let _687: Int = Int(0)
// [KnfOpt]   if (ok.685 == _687) then {
// [KnfOpt]     let sum.104: Int = Var(_682)
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _688: Int = Apply(add.673, [_682, val.686, ])
// [KnfOpt]     let sum.104: Int = Apply(fold.63, [under1200.103, add.673, _688, ])
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(gt) let _99: Fun([Int], Int) = Unit
// [KnfOpt] let over50.100: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [addone.97, _99, ])
// [KnfOpt] let _101: Int = Int(1200)
// [KnfOpt] let rec aux.689: Int = (y.690: Int) {
// [KnfOpt]   if (y.690 <= _101) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _102: Fun([Int], Int) = Var(aux.689)
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.691: Int = (x.692: Int, y.693: Int) {
// [KnfOpt]   Add(x.692, y.693)
// [KnfOpt] }
// [KnfOpt] let _694: Int = Int(0)
// [KnfOpt] let _695: Unit = Unit
// [KnfOpt] let _696: Tuple([Int, Int]) = Apply(under1200.103, [_695, ])
// [KnfOpt] let (ok.697: Var({val: Some(Int)}), val.698: Var({val: Some(Int)})) = _696
// [KnfOpt] let _699: Int = Int(0)
// [KnfOpt] if (ok.697 == _699) then {
// [KnfOpt]   let sum.104: Int = Var(_694)
// [KnfOpt]   let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]   let _106: Int = Int(10)
// [KnfOpt]   let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]   Unit
// [KnfOpt] } else {
// [KnfOpt]   let _700: Int = Apply(add.691, [_694, val.698, ])
// [KnfOpt]   let _701: Unit = Unit
// [KnfOpt]   let _702: Tuple([Int, Int]) = Apply(under1200.103, [_701, ])
// [KnfOpt]   let (ok.703: Var({val: Some(Int)}), val.704: Var({val: Some(Int)})) = _702
// [KnfOpt]   let _705: Int = Int(0)
// [KnfOpt]   if (ok.703 == _705) then {
// [KnfOpt]     let sum.104: Int = Var(_700)
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _706: Int = Apply(add.691, [_700, val.704, ])
// [KnfOpt]     let sum.104: Int = Apply(fold.63, [under1200.103, add.691, _706, ])
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision le.83 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(le) let _102: Fun([Int], Int) = Unit
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.709: Int = (x.710: Int, y.711: Int) {
// [KnfOpt]   Add(x.710, y.711)
// [KnfOpt] }
// [KnfOpt] let _712: Int = Int(0)
// [KnfOpt] let _713: Unit = Unit
// [KnfOpt] let _714: Tuple([Int, Int]) = Apply(under1200.103, [_713, ])
// [KnfOpt] let (ok.715: Var({val: Some(Int)}), val.716: Var({val: Some(Int)})) = _714
// [KnfOpt] let _717: Int = Int(0)
// [KnfOpt] if (ok.715 == _717) then {
// [KnfOpt]   let sum.104: Int = Var(_712)
// [KnfOpt]   let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]   let _106: Int = Int(10)
// [KnfOpt]   let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]   Unit
// [KnfOpt] } else {
// [KnfOpt]   let _718: Int = Apply(add.709, [_712, val.716, ])
// [KnfOpt]   let _719: Unit = Unit
// [KnfOpt]   let _720: Tuple([Int, Int]) = Apply(under1200.103, [_719, ])
// [KnfOpt]   let (ok.721: Var({val: Some(Int)}), val.722: Var({val: Some(Int)})) = _720
// [KnfOpt]   let _723: Int = Int(0)
// [KnfOpt]   if (ok.721 == _723) then {
// [KnfOpt]     let sum.104: Int = Var(_718)
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   } else {
// [KnfOpt]     let _724: Int = Apply(add.709, [_718, val.722, ])
// [KnfOpt]     let sum.104: Int = Apply(fold.63, [under1200.103, add.709, _724, ])
// [KnfOpt]     let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt]     let _106: Int = Int(10)
// [KnfOpt]     let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt]     Unit
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Numbers of let rec: 12 18 6
// [KnfOpt] Give up lambda lifting because of too many let rec produced
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %8: Apply(ty=Tuple(fields=[Int32, Int32]), f=Self(fref=f5), args=[Unit])
// [CoreOpt] eliminated tail rec call %10: Call(ty=Int32, f=f2, args=[FnParam(fref=f2, fpref=$f.0), FnParam(fref=f2, fpref=$f.1), Insn(iref=%9)])
// [CoreOpt] Call frequnce: FnCallFreq({f12: MaybeInClosure, f8: MaybeInClosure, f16: MaybeInClosure, f0: Multiple, f1: Multiple, f5: MaybeInClosure, f2: Once, f18: MaybeInClosure, f14: MaybeInClosure, f3: Once, f24: Once, f22: MaybeInClosure, f20: MaybeInClosure})
