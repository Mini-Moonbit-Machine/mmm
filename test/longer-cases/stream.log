// [Asm] LoweringOrder: [0, 2, 1, 3, 5, 4, 6]
// [Asm] LoweringOrder: [[1, 2], [3], [3], [4, 5], [6], [6], []]
// [Asm] LoweringOrder: HashMap::of([(b6, 0), (b4, 1), (b1, 0), (b5, 0), (b2, 2), (b3, 0), (b0, 0)])
// [Asm] LoweringOrder: [b0, b1, b3, b5, b6, b4, b2]
// [Asm] LoweringOrder: HashMap::of([(b6, 4), (b4, 0), (b1, 1), (b5, 3), (b2, 0), (b3, 2), (b0, 0)])
// [Asm] pre_assigned_registers: BlockParam(bref=b3, bpref=$b.0) -> v15, Insn(iref=%9) -> v21, FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, Self(fref=f12) -> v0, Insn(iref=%8) -> v18, Insn(iref=%10) -> v19, Mem(fref=f12, mref=m0) -> v6, Insn(iref=%5) -> v13, Insn(iref=%0) -> v9, Mem(fref=f12, mref=m1) -> v7, Insn(iref=%4) -> v14, Mem(fref=f12, mref=m2) -> v8, Insn(iref=%3) -> v12, Insn(iref=%7) -> v17, FnParam(fref=f12, fpref=$f.0) -> v2, BlockParam(bref=b6, bpref=$b.0) -> v22, Insn(iref=%2) -> v11, Insn(iref=%1) -> v10, Insn(iref=%11) -> v20, FreeVar(fvref=^3) -> v5, Insn(iref=%6) -> v16
// [Asm] succs: []
// [Asm] critical edges for b6: []
// [Asm] critical color seq for b6: []
// [Asm] succs: [6]
// [Asm] critical edges for b4: []
// [Asm] critical color seq for b4: []
// [Asm] succs: [6]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] succs: [4, 5]
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%6), Int32(val=0)])
// [Asm] succs: [3]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: [3]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Asm] defs: [v19]
// [Asm] live_set: [v19, s11]
// [Asm] defined: v19 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v19, v8]
// [Asm] defined: v8 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v19, v8]
// [Asm] defined: s11 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v19, v25, v8]
// [Asm] defined: v25 is X
// [Asm] defs: []
// [Asm] live_set: [v19, v8]
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] defs: [v22]
// [Asm] live_set: [v22]
// [Asm] move: v22 <- v8
// [Asm] defined: v22 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v4, v5, s11, zero, a0]
// [Asm] move: s10 <- v4
// [Asm] defined: s10 is X
// [Asm] skip edge 5 -> 6
// [Asm] defs: [v29]
// [Asm] live_set: [v5, s11, zero, a0, v29]
// [Asm] defined: v29 is X
// [Asm] defs: []
// [Asm] live_set: [v5, s11, zero, a0, v29]
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, s11, zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v14]
// [Asm] live_set: [v5, v14, s11, zero]
// [Asm] move: v14 <- a0
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v14, s11, zero]
// [Asm] defs: [v15]
// [Asm] live_set: [v5, v15, s11, zero]
// [Asm] move: v15 <- v14
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [zero, a0, s11, s10]
// [Asm] defs: [v0]
// [Asm] live_set: [zero, a0, v0, s11]
// [Asm] move: v0 <- s10
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [zero, a0, v0, s11]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] skip edge 26 -> 9
// [Asm] defs: [v3]
// [Asm] live_set: [zero, a0, v0, s11, v3]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [zero, a0, v0, v4, s11, v3]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero, a0, v4, s11, v3]
// [Asm] defined: v5 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v5, zero, a0, v4, s11, v3]
// [Asm] move: s10 <- v3
// [Asm] defined: s10 is X
// [Asm] skip edge 5 -> 27
// [Asm] defs: [v35]
// [Asm] live_set: [v5, zero, a0, v35, v4, s11]
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, a0, v35, v4, s11]
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0, v4, s11]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v4, s11, v9]
// [Asm] move: v9 <- a0
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, s11, v9]
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero, v4, s11, v9]
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, v10, zero, v4, s11]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v4, v5, s11, zero]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v22
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v7]
// [Asm] live_set: [zero, v7]
// [Asm] defined: v7 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v7]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v7]
// [Asm] defs: []
// [Asm] live_set: [v7]
// [Asm] defs: [v22]
// [Asm] live_set: [v22]
// [Asm] move: v22 <- v7
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v22]
// [Asm] defs: [v6]
// [Asm] live_set: [v11, v5, zero, v6]
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v5, zero, v6, s11]
// [Asm] defined: s11 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v11, v5, zero, v32, v6, s11]
// [Asm] defined: v32 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v6, s11, zero]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, s11, zero]
// [Asm] defs: [v15]
// [Asm] live_set: [v5, v15, s11, zero]
// [Asm] move: v15 <- v6
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v15, s11, zero]
// [Asm] defs: [v16]
// [Asm] live_set: [v5, v16, s11, v15, zero]
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v5, v17, v16, s11, zero]
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v17, s11, zero]
// [Asm] Label("aux6.154") clobbered_x: @hashset.of([a2, s0, a1, a0, s1])
// [Asm] Label("aux6.154") clobbered_f: @hashset.of([])
// [Asm] subst   add v19, v5, v17 ->   add a0, s1, a0
// [Asm] subst   addi v8, s11, -8 ->   addi a1, s11, -8
// [Asm] subst   andi s11, v8, -8 ->   andi s11, a1, -8
// [Asm] subst   li v25, 1 ->   li a2, 1
// [Asm] subst   sw v25, 0(v8) ->   sw a2, 0(a1)
// [Asm] subst   sw v19, 4(v8) ->   sw a0, 4(a1)
// [Asm] subst   mv v22, v8 ->   mv a0, a1
// [Asm] subst   mv s10, v4 ->   mv s10, s0
// [Asm] subst   ld v29, 0(v4) ->   ld a1, 0(s0)
// [Asm] subst   jalr v29 ->   jalr a1
// [Asm] subst   mv v0, s10 ->   mv a2, s10
// [Asm] subst   ld v3, 8(v0) ->   ld a1, 8(a2)
// [Asm] subst   ld v4, 16(v0) ->   ld s0, 16(a2)
// [Asm] subst   lw v5, 24(v0) ->   lw s1, 24(a2)
// [Asm] subst   mv s10, v3 ->   mv s10, a1
// [Asm] subst   ld v35, 0(v3) ->   ld a1, 0(a1)
// [Asm] subst   jalr v35 ->   jalr a1
// [Asm] subst   lw v10, 0(v9) ->   lw a1, 0(a0)
// [Asm] subst   lw v11, 4(v9) ->   lw a0, 4(a0)
// [Asm] subst   bne v10, zero, .aux6.154_2 ->   bne a1, zero, .aux6.154_2
// [Asm] subst   ret ->   ret
// [Asm] subst   addi v7, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v7, -8 ->   andi s11, a0, -8
// [Asm] subst   sw zero, 0(v7) ->   sw zero, 0(a0)
// [Asm] subst   sw zero, 4(v7) ->   sw zero, 4(a0)
// [Asm] subst   j .aux6.154_6 ->   j .aux6.154_6
// [Asm] subst   addi v6, s11, -8 ->   addi a1, s11, -8
// [Asm] subst   andi s11, v6, -8 ->   andi s11, a1, -8
// [Asm] subst   li v32, 1 ->   li a2, 1
// [Asm] subst   sw v32, 0(v6) ->   sw a2, 0(a1)
// [Asm] subst   sw v11, 4(v6) ->   sw a0, 4(a1)
// [Asm] subst   mv v15, v6 ->   mv a0, a1
// [Asm] subst   j .aux6.154_3 ->   j .aux6.154_3
// [Asm] subst   lw v16, 0(v15) ->   lw a1, 0(a0)
// [Asm] subst   lw v17, 4(v15) ->   lw a0, 4(a0)
// [Asm] subst   beq v16, zero, .aux6.154_4 ->   beq a1, zero, .aux6.154_4
// [Asm] LoweringOrder: [0, 2, 1, 3]
// [Asm] LoweringOrder: [[1, 2], [3], [3], []]
// [Asm] LoweringOrder: HashMap::of([(b0, 0), (b1, 1), (b2, 0), (b3, 0)])
// [Asm] LoweringOrder: [b0, b2, b3, b1]
// [Asm] LoweringOrder: HashMap::of([(b0, 0), (b1, 0), (b2, 1), (b3, 2)])
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v10, Insn(iref=%3) -> v9, FnParam(fref=f8, fpref=$f.0) -> v2, Mem(fref=f8, mref=m0) -> v5, BlockParam(bref=b3, bpref=$b.0) -> v13, Insn(iref=%2) -> v12, FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, Insn(iref=%1) -> v8, Self(fref=f8) -> v0, Insn(iref=%5) -> v11, Mem(fref=f8, mref=m1) -> v6, Insn(iref=%0) -> v7
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: [3]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), FreeVar(fvref=^2)])
// [Asm] defs: [v9]
// [Asm] live_set: [v3, s11, v9, v7]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [s11, v7]
// [Asm] defs: [v6]
// [Asm] live_set: [v6, v7]
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v6, v7]
// [Asm] defined: s11 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v6, v16, v7]
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v7]
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move: v13 <- v6
// [Asm] defined: v13 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v13
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero]
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero]
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move: v13 <- v5
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v13]
// [Asm] defs: []
// [Asm] live_set: [s11, zero, a0, s10]
// [Asm] defs: [v0]
// [Asm] live_set: [v0, s11, zero, a0]
// [Asm] move: v0 <- s10
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, s11, zero]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v0, s11, zero, v3]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, s11, zero, v3]
// [Asm] defined: v4 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v4, s11, zero, v7]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v3, s11, zero, v7]
// [Asm] Label("aux65") clobbered_x: @hashset.of([a2, a1, a0])
// [Asm] Label("aux65") clobbered_f: @hashset.of([])
// [Asm] subst   addi v9, v7, 1 ->   addi a0, a2, 1
// [Asm] subst   sw v9, 0(v3) ->   sw a0, 0(a1)
// [Asm] subst   addi v6, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v6, -8 ->   andi s11, a0, -8
// [Asm] subst   li v16, 1 ->   li a1, 1
// [Asm] subst   sw v16, 0(v6) ->   sw a1, 0(a0)
// [Asm] subst   sw v7, 4(v6) ->   sw a2, 4(a0)
// [Asm] subst   ret ->   ret
// [Asm] subst   addi v5, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a0, -8
// [Asm] subst   sw zero, 0(v5) ->   sw zero, 0(a0)
// [Asm] subst   sw zero, 4(v5) ->   sw zero, 4(a0)
// [Asm] subst   j .aux65_3 ->   j .aux65_3
// [Asm] subst   mv v0, s10 ->   mv a2, s10
// [Asm] subst   ld v3, 8(v0) ->   ld a1, 8(a2)
// [Asm] subst   lw v4, 16(v0) ->   lw a0, 16(a2)
// [Asm] subst   lw v7, 0(v3) ->   lw a2, 0(a1)
// [Asm] subst   beq v7, v4, .aux65_1 ->   beq a2, a0, .aux65_1
// [Asm] LoweringOrder: [0, 2, 1, 3]
// [Asm] LoweringOrder: [[1, 2], [3], [3], []]
// [Asm] LoweringOrder: HashMap::of([(b0, 0), (b1, 0), (b2, 1), (b3, 0)])
// [Asm] LoweringOrder: [b0, b1, b3, b2]
// [Asm] LoweringOrder: HashMap::of([(b0, 0), (b1, 1), (b2, 0), (b3, 2)])
// [Asm] pre_assigned_registers: BlockParam(bref=b3, bpref=$b.0) -> v5, FreeVar(fvref=^1) -> v3, Self(fref=f16) -> v0, FnParam(fref=f16, fpref=$f.0) -> v2, Insn(iref=%0) -> v4
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: [3]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f16, fpref=$f.0), FreeVar(fvref=^1)])
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] defined: v6 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move: v5 <- v6
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] defs: []
// [Asm] live_set: [zero, a0, s10]
// [Asm] defs: [v0]
// [Asm] live_set: [v0, zero, a0]
// [Asm] move: v0 <- s10
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move: v5 <- zero
// [Asm] defined: v5 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v5
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("aux117.167") clobbered_x: @hashset.of([a1, a0])
// [Asm] Label("aux117.167") clobbered_f: @hashset.of([])
// [Asm] subst   li v6, 1 ->   li a0, 1
// [Asm] subst   j .aux117.167_3 ->   j .aux117.167_3
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   lw v3, 8(v0) ->   lw a1, 8(a1)
// [Asm] subst   blt v3, v2, .aux117.167_2 ->   blt a1, a0, .aux117.167_2
// [Asm] subst   mv v5, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: FnParam(fref=f0, fpref=$f.1) -> v3, Self(fref=f0) -> v0, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%0) -> v5, Mem(fref=f0, mref=m0) -> v4
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [a1, s11, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [a1, s11, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, s11, v3]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, v3]
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v4, v3]
// [Asm] defined: s11 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v7, v4, v3]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v3]
// [Asm] defs: []
// [Asm] live_set: [v4, v3]
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v4
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("filter20") clobbered_x: @hashset.of([a2, a1, a3, a0])
// [Asm] Label("filter20") clobbered_f: @hashset.of([])
// [Asm] subst   addi v4, s11, -24 ->   addi a2, s11, -24
// [Asm] subst   andi s11, v4, -8 ->   andi s11, a2, -8
// [Asm] subst   la v7, aux25 ->   la a3, aux25
// [Asm] subst   sd v7, 0(v4) ->   sd a3, 0(a2)
// [Asm] subst   sd v2, 8(v4) ->   sd a0, 8(a2)
// [Asm] subst   sd v3, 16(v4) ->   sd a1, 16(a2)
// [Asm] subst   mv a0, v4 ->   mv a0, a2
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v7, Mem(fref=f1, mref=m0) -> v4, FnParam(fref=f1, fpref=$f.1) -> v3, Self(fref=f1) -> v0, FnParam(fref=f1, fpref=$f.0) -> v2, Mem(fref=f1, mref=m1) -> v5, Insn(iref=%0) -> v6
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [a1, s11, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [a1, s11, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, s11, v3]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, v3]
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v4, s11, v3]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, v3]
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, v3]
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v4, v5, v3]
// [Asm] defined: s11 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v4, v5, v9, v3]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v3]
// [Asm] defs: []
// [Asm] live_set: [v5, v3]
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v5
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("range58") clobbered_x: @hashset.of([a2, a1, a3, a0])
// [Asm] Label("range58") clobbered_f: @hashset.of([])
// [Asm] subst   addi v4, s11, -4 ->   addi a2, s11, -4
// [Asm] subst   andi s11, v4, -8 ->   andi s11, a2, -8
// [Asm] subst   sw v2, 0(v4) ->   sw a0, 0(a2)
// [Asm] subst   addi v5, s11, -24 ->   addi a0, s11, -24
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a0, -8
// [Asm] subst   la v9, aux65 ->   la a3, aux65
// [Asm] subst   sd v9, 0(v5) ->   sd a3, 0(a0)
// [Asm] subst   sd v4, 8(v5) ->   sd a2, 8(a0)
// [Asm] subst   sd v3, 16(v5) ->   sd a1, 16(a0)
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [8, 0, 2, 4, 3, 5, 1, 6]
// [Asm] LoweringOrder: [[7], [1, 2], [3, 4], [0], [5], [6], [6], []]
// [Asm] LoweringOrder: HashMap::of([(b6, 0), (b4, 1), (b1, 2), (b8, 0), (b5, 0), (b2, 0), (b3, 0), (b0, 0)])
// [Asm] LoweringOrder: [b8, b0, b2, b3, b5, b6, b4, b1]
// [Asm] LoweringOrder: HashMap::of([(b6, 5), (b4, 0), (b1, 0), (b8, 0), (b5, 4), (b2, 2), (b3, 3), (b0, 1)])
// [Asm] pre_assigned_registers: FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, BlockParam(bref=b0, bpref=$b.0) -> v7, Insn(iref=%5) -> v12, Insn(iref=%0) -> v8, Insn(iref=%4) -> v16, Mem(fref=f5, mref=m1) -> v6, Insn(iref=%3) -> v11, FnParam(fref=f5, fpref=$f.0) -> v2, Mem(fref=f5, mref=m0) -> v5, Self(fref=f5) -> v0, Insn(iref=%7) -> v14, BlockParam(bref=b5, bpref=$b.0) -> v15, BlockParam(bref=b6, bpref=$b.0) -> v17, Insn(iref=%2) -> v10, Insn(iref=%1) -> v9, Insn(iref=%6) -> v13
// [Asm] succs: []
// [Asm] critical edges for b6: []
// [Asm] critical color seq for b6: []
// [Asm] succs: [6]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: [6]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] succs: [5]
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [0]
// [Asm] critical edges for b4: []
// [Asm] critical color seq for b4: []
// [Asm] succs: [3, 4]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%5), Int32(val=0)])
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Asm] succs: [7]
// [Asm] critical edges for b8: []
// [Asm] critical color seq for b8: []
// [Asm] defs: [s10]
// [Asm] live_set: [zero, a0, v4, s11, v3]
// [Asm] move: s10 <- v3
// [Asm] defined: s10 is X
// [Asm] skip edge 0 -> 1
// [Asm] defs: [v25]
// [Asm] live_set: [v25, zero, a0, v4, s11, v3]
// [Asm] defined: v25 is X
// [Asm] defs: []
// [Asm] live_set: [v25, zero, a0, v4, s11, v3]
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, v4, s11, v3]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [zero, v8, v4, s11, v3]
// [Asm] move: v8 <- a0
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v8, v4, s11, v3]
// [Asm] defs: [v9]
// [Asm] live_set: [zero, v8, v4, s11, v9, v3]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v10, zero, v4, s11, v9, v3]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, v10, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [s11, zero, a0, s10]
// [Asm] defs: [v0]
// [Asm] live_set: [v0, s11, zero, a0]
// [Asm] move: v0 <- s10
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, s11, zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v0, s11, zero, v3]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, s11, zero, v3]
// [Asm] defined: v4 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v4, s11, zero, v7]
// [Asm] move: v7 <- v2
// [Asm] defined: v7 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v10, zero, v4, s11, v3]
// [Asm] move: s10 <- v4
// [Asm] defined: s10 is X
// [Asm] skip edge 0 -> 4
// [Asm] defs: [v21]
// [Asm] live_set: [v10, v21, zero, v4, s11, v3]
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v10, v21, zero, v4, s11, v3]
// [Asm] defs: [a0]
// [Asm] live_set: [v10, v21, zero, a0, v4, s11, v3]
// [Asm] move: a0 <- v10
// [Asm] defined: a0 is X
// [Asm] skip edge 3 -> 21
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v10, zero, a0, v4, s11, v3]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v12]
// [Asm] live_set: [v10, zero, v4, s11, v12, v3]
// [Asm] move: v12 <- a0
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v10, zero, v4, s11, v12, v3]
// [Asm] defs: []
// [Asm] live_set: [v4, s11, v10, zero, v3]
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero]
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero]
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] defs: [v17]
// [Asm] live_set: [v17]
// [Asm] move: v17 <- v5
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v17]
// [Asm] defs: [v17]
// [Asm] live_set: [v17]
// [Asm] move: v17 <- v15
// [Asm] defined: v17 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v7, v4, s11, zero, v3]
// [Asm] move: v7 <- zero
// [Asm] defined: v7 is X
// [Asm] skip edge 24 -> 2
// [Asm] defs: []
// [Asm] live_set: [v7, v4, s11, zero, v3]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v17
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6, v10]
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v6, v10]
// [Asm] defined: s11 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v6, v10, v20]
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v10]
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] defs: [v15]
// [Asm] live_set: [v15]
// [Asm] move: v15 <- v6
// [Asm] defined: v15 is X
// [Asm] Label("aux25") clobbered_x: @hashset.of([s2, s0, a1, a0, s1])
// [Asm] Label("aux25") clobbered_f: @hashset.of([])
// [Asm] subst   mv s10, v3 ->   mv s10, s0
// [Asm] subst   ld v25, 0(v3) ->   ld a1, 0(s0)
// [Asm] subst   jalr v25 ->   jalr a1
// [Asm] subst   mv v8, a0 ->   mv a1, a0
// [Asm] subst   lw v9, 0(v8) ->   lw a0, 0(a1)
// [Asm] subst   lw v10, 4(v8) ->   lw s2, 4(a1)
// [Asm] subst   beq v9, zero, .aux25_1 ->   beq a0, zero, .aux25_1
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   ld v3, 8(v0) ->   ld s0, 8(a1)
// [Asm] subst   ld v4, 16(v0) ->   ld s1, 16(a1)
// [Asm] subst   mv s10, v4 ->   mv s10, s1
// [Asm] subst   ld v21, 0(v4) ->   ld a1, 0(s1)
// [Asm] subst   mv a0, v10 ->   mv a0, s2
// [Asm] subst   jalr v21 ->   jalr a1
// [Asm] subst   bne v12, zero, .aux25_4 ->   bne a0, zero, .aux25_4
// [Asm] subst   addi v5, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a0, -8
// [Asm] subst   sw zero, 0(v5) ->   sw zero, 0(a0)
// [Asm] subst   sw zero, 4(v5) ->   sw zero, 4(a0)
// [Asm] subst   j .aux25_6 ->   j .aux25_6
// [Asm] subst   mv v7, zero ->   mv a0, zero
// [Asm] subst   j .aux25_0 ->   j .aux25_0
// [Asm] subst   ret ->   ret
// [Asm] subst   addi v6, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v6, -8 ->   andi s11, a0, -8
// [Asm] subst   li v20, 1 ->   li a1, 1
// [Asm] subst   sw v20, 0(v6) ->   sw a1, 0(a0)
// [Asm] subst   sw v10, 4(v6) ->   sw s2, 4(a0)
// [Asm] LoweringOrder: [5, 0, 2, 1, 3]
// [Asm] LoweringOrder: [[4], [1, 2], [0], [3], []]
// [Asm] LoweringOrder: HashMap::of([(b1, 1), (b5, 0), (b2, 0), (b3, 1), (b0, 0)])
// [Asm] LoweringOrder: [b5, b0, b2, b1, b3]
// [Asm] LoweringOrder: HashMap::of([(b1, 0), (b5, 0), (b2, 2), (b3, 1), (b0, 1)])
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v12, Insn(iref=%3) -> v11, BlockParam(bref=b3, bpref=$b.0) -> v13, Insn(iref=%2) -> v10, Self(fref=f2) -> v0, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%1) -> v9, BlockParam(bref=b0, bpref=$b.0) -> v5, BlockParam(bref=b0, bpref=$b.1) -> v6, BlockParam(bref=b0, bpref=$b.2) -> v7, FnParam(fref=f2, fpref=$f.0) -> v2, FnParam(fref=f2, fpref=$f.2) -> v4, Insn(iref=%0) -> v8
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: [0]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Asm] succs: [4]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v13
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [s10]
// [Asm] live_set: [v5, zero, a0, v7, v6]
// [Asm] move: s10 <- v5
// [Asm] defined: s10 is X
// [Asm] skip edge 2 -> 3
// [Asm] defs: [v18]
// [Asm] live_set: [v5, v18, zero, a0, v7, v6]
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v18, zero, a0, v7, v6]
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0, v7, v6]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v7, v8, v6]
// [Asm] move: v8 <- a0
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v6]
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v7, v8, v6, v9]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero, v7, v6, v9]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, v10, zero, v7]
// [Asm] defs: [s10]
// [Asm] live_set: [v5, v6, v10, zero, v7]
// [Asm] move: s10 <- v6
// [Asm] defined: s10 is X
// [Asm] skip edge 2 -> 6
// [Asm] defs: [v14]
// [Asm] live_set: [v5, v6, v14, v10, zero, v7]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v14, v10, zero, v7]
// [Asm] defs: [a0]
// [Asm] live_set: [v5, v6, v14, v10, zero, a0]
// [Asm] move: a0 <- v7
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, v6, a1, v14, a0, zero]
// [Asm] move: a1 <- v10
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, v6, zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v12]
// [Asm] live_set: [v5, v6, v12, zero]
// [Asm] move: v12 <- a0
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v12, zero]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v12, zero]
// [Asm] move: v5 <- v5
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v12, zero]
// [Asm] move: v6 <- v6
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move: v7 <- v12
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move: v13 <- v7
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move: v4 <- a2
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move: v5 <- v2
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move: v6 <- v3
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move: v7 <- v4
// [Asm] defined: v7 is X
// [Asm] Label("fold84") clobbered_x: @hashset.of([s2, a2, s0, a1, a0, s1])
// [Asm] Label("fold84") clobbered_f: @hashset.of([])
// [Asm] subst   ret ->   ret
// [Asm] subst   mv s10, v5 ->   mv s10, s0
// [Asm] subst   ld v18, 0(v5) ->   ld a1, 0(s0)
// [Asm] subst   jalr v18 ->   jalr a1
// [Asm] subst   mv v8, a0 ->   mv a1, a0
// [Asm] subst   lw v9, 0(v8) ->   lw a0, 0(a1)
// [Asm] subst   lw v10, 4(v8) ->   lw a1, 4(a1)
// [Asm] subst   beq v9, zero, .fold84_1 ->   beq a0, zero, .fold84_1
// [Asm] subst   mv s10, v6 ->   mv s10, s2
// [Asm] subst   ld v14, 0(v6) ->   ld a2, 0(s2)
// [Asm] subst   mv a0, v7 ->   mv a0, s1
// [Asm] subst   jalr v14 ->   jalr a2
// [Asm] subst   mv v7, v12 ->   mv s1, a0
// [Asm] subst   j .fold84_0 ->   j .fold84_0
// [Asm] subst   mv v13, v7 ->   mv a0, s1
// [Asm] subst   mv v5, v2 ->   mv s0, a0
// [Asm] subst   mv v6, v3 ->   mv s2, a1
// [Asm] subst   mv v7, v4 ->   mv s1, a2
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f18) -> v0, FnParam(fref=f18, fpref=$f.0) -> v2, FnParam(fref=f18, fpref=$f.1) -> v3, Insn(iref=%0) -> v4
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [a1, a0, s10]
// [Asm] defs: [v0]
// [Asm] live_set: [a1, a0]
// [Asm] move: v0 <- s10
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [a1, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v2]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] defined: v4 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v4
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("add102.169") clobbered_x: @hashset.of([a2, a1, a0])
// [Asm] Label("add102.169") clobbered_f: @hashset.of([])
// [Asm] subst   mv v0, s10 ->   mv a2, s10
// [Asm] subst   add v4, v2, v3 ->   add a0, a0, a1
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0, 2, 1, 3]
// [Asm] LoweringOrder: [[1, 2], [3], [3], []]
// [Asm] LoweringOrder: HashMap::of([(b0, 0), (b1, 0), (b2, 1), (b3, 0)])
// [Asm] LoweringOrder: [b0, b1, b3, b2]
// [Asm] LoweringOrder: HashMap::of([(b0, 0), (b1, 1), (b2, 0), (b3, 2)])
// [Asm] pre_assigned_registers: FreeVar(fvref=^1) -> v3, FnParam(fref=f14, fpref=$f.0) -> v2, Self(fref=f14) -> v0, Insn(iref=%0) -> v4, BlockParam(bref=b3, bpref=$b.0) -> v5
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: [3]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[FreeVar(fvref=^1), FnParam(fref=f14, fpref=$f.0)])
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move: v5 <- zero
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] defined: v6 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move: v5 <- v6
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] defs: []
// [Asm] live_set: [zero, a0, s10]
// [Asm] defs: [v0]
// [Asm] live_set: [v0, zero, a0]
// [Asm] move: v0 <- s10
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, zero, v2]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v5
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("aux111.165") clobbered_x: @hashset.of([a1, a0])
// [Asm] Label("aux111.165") clobbered_f: @hashset.of([])
// [Asm] subst   mv v5, zero ->   mv a0, zero
// [Asm] subst   li v6, 1 ->   li a0, 1
// [Asm] subst   j .aux111.165_3 ->   j .aux111.165_3
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   lw v3, 8(v0) ->   lw a1, 8(a1)
// [Asm] subst   blt v2, v3, .aux111.165_2 ->   blt a0, a1, .aux111.165_2
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%0) -> v6, Insn(iref=%4) -> v10, Insn(iref=%3) -> v9, Mem(fref=f3, mref=m0) -> v2, Insn(iref=%7) -> v13, Mem(fref=f3, mref=m1) -> v3, Insn(iref=%2) -> v8, Insn(iref=%9) -> v15, Insn(iref=%8) -> v14, Insn(iref=%1) -> v7, Insn(iref=%10) -> v16, Insn(iref=%6) -> v12, Mem(fref=f3, mref=m2) -> v4, Mem(fref=f3, mref=m3) -> v5, Insn(iref=%5) -> v11, Self(fref=f3) -> v0
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, s11]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] skip edge 0 -> 1
// [Asm] defs: [v36]
// [Asm] live_set: [zero, a0, v36, s11]
// [Asm] defined: v36 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, a0, a1, s11]
// [Asm] move: a1 <- v36
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, s11]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [zero, v6, s11]
// [Asm] move: v6 <- a0
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v6, s11]
// [Asm] defs: []
// [Asm] live_set: [zero, v6, s11]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v6, s11]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] skip edge 0 -> 1
// [Asm] defs: [v34]
// [Asm] live_set: [zero, a0, v6, s11, v34]
// [Asm] defined: v34 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, a0, v6, a1, s11]
// [Asm] move: a1 <- v34
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, v6, s11]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [zero, v7, v6, s11]
// [Asm] move: v7 <- a0
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v7, v6, s11]
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v7, v6, v2]
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v7, v6, s11, v2]
// [Asm] defined: s11 is X
// [Asm] defs: [v32]
// [Asm] live_set: [zero, v7, v32, v6, s11, v2]
// [Asm] defined: v32 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, s11, zero, v2]
// [Asm] defs: []
// [Asm] live_set: [v7, s11, zero, v2]
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v2]
// [Asm] defs: [v33]
// [Asm] live_set: [s11, zero, v33, v2]
// [Asm] defined: v33 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v2]
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, s11, zero, v3]
// [Asm] defined: s11 is X
// [Asm] defs: [v29]
// [Asm] live_set: [v2, s11, zero, v29, v3]
// [Asm] defined: v29 is X
// [Asm] defs: []
// [Asm] live_set: [v2, s11, zero, v3]
// [Asm] defs: [v30]
// [Asm] live_set: [v2, s11, zero, v30, v3]
// [Asm] defined: v30 is X
// [Asm] defs: []
// [Asm] live_set: [v2, s11, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [v2, s11, zero, v3]
// [Asm] defs: [a0]
// [Asm] live_set: [s11, zero, a0, v3]
// [Asm] move: a0 <- v2
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, s11, zero, a0]
// [Asm] move: a1 <- v3
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [s11, zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v10]
// [Asm] live_set: [v10, s11, zero]
// [Asm] move: v10 <- a0
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v10, s11, zero]
// [Asm] defs: [v4]
// [Asm] live_set: [v4, v10, zero]
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v4, s11, v10, zero]
// [Asm] defined: s11 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v4, s11, v10, zero]
// [Asm] defined: v25 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, v10, zero]
// [Asm] defs: [v26]
// [Asm] live_set: [v4, s11, v10, zero, v26]
// [Asm] defined: v26 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, v10, zero]
// [Asm] defs: []
// [Asm] live_set: [v4, s11, v10, zero]
// [Asm] defs: [a0]
// [Asm] live_set: [v4, s11, zero, a0]
// [Asm] move: a0 <- v10
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, s11, zero, a0]
// [Asm] move: a1 <- v4
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [s11, zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v12]
// [Asm] live_set: [v12, s11, zero]
// [Asm] move: v12 <- a0
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v12, s11, zero]
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v12, zero]
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, v12, zero]
// [Asm] defined: s11 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v5, v12, zero, v22]
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v12, zero]
// [Asm] defs: []
// [Asm] live_set: [v5, v12, zero]
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0]
// [Asm] move: a0 <- v12
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0]
// [Asm] move: a1 <- v5
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move: a2 <- zero
// [Asm] defined: a2 is X
// [Asm] skip edge 10 -> 1
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v14]
// [Asm] live_set: [v14, zero]
// [Asm] move: v14 <- a0
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v14, zero]
// [Asm] defs: []
// [Asm] live_set: [v14, zero]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v14
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v15]
// [Asm] live_set: [zero]
// [Asm] move: v15 <- a0
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v17]
// [Asm] live_set: [v17, zero]
// [Asm] defined: v17 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v17
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v16]
// [Asm] live_set: [zero]
// [Asm] move: v16 <- a0
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main120") clobbered_x: @hashset.of([a2, s0, a1, a0])
// [Asm] Label("main120") clobbered_f: @hashset.of([])
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   li v36, 100 ->   li a1, 100
// [Asm] subst   call range58 ->   call range58
// [Asm] subst   mv v6, a0 ->   mv s0, a0
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   li v34, 1000 ->   li a1, 1000
// [Asm] subst   call range58 ->   call range58
// [Asm] subst   addi v2, s11, -32 ->   addi a1, s11, -32
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a1, -8
// [Asm] subst   la v32, aux6.154 ->   la a2, aux6.154
// [Asm] subst   sd v32, 0(v2) ->   sd a2, 0(a1)
// [Asm] subst   sd v6, 8(v2) ->   sd s0, 8(a1)
// [Asm] subst   sd v7, 16(v2) ->   sd a0, 16(a1)
// [Asm] subst   li v33, 1 ->   li a0, 1
// [Asm] subst   sd v33, 24(v2) ->   sd a0, 24(a1)
// [Asm] subst   addi v3, s11, -16 ->   addi a2, s11, -16
// [Asm] subst   andi s11, v3, -8 ->   andi s11, a2, -8
// [Asm] subst   la v29, aux111.165 ->   la a0, aux111.165
// [Asm] subst   sd v29, 0(v3) ->   sd a0, 0(a2)
// [Asm] subst   li v30, 50 ->   li a0, 50
// [Asm] subst   sd v30, 8(v3) ->   sd a0, 8(a2)
// [Asm] subst   mv a0, v2 ->   mv a0, a1
// [Asm] subst   mv a1, v3 ->   mv a1, a2
// [Asm] subst   call filter20 ->   call filter20
// [Asm] subst   addi v4, s11, -16 ->   addi a1, s11, -16
// [Asm] subst   andi s11, v4, -8 ->   andi s11, a1, -8
// [Asm] subst   la v25, aux117.167 ->   la a2, aux117.167
// [Asm] subst   sd v25, 0(v4) ->   sd a2, 0(a1)
// [Asm] subst   li v26, 1200 ->   li a2, 1200
// [Asm] subst   sd v26, 8(v4) ->   sd a2, 8(a1)
// [Asm] subst   call filter20 ->   call filter20
// [Asm] subst   addi v5, s11, -8 ->   addi a1, s11, -8
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a1, -8
// [Asm] subst   la v22, add102.169 ->   la a2, add102.169
// [Asm] subst   sd v22, 0(v5) ->   sd a2, 0(a1)
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   call fold84 ->   call fold84
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v17, 10 ->   li a0, 10
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f20) -> v0, Insn(iref=%0) -> v2
// [Asm] before colored: # leaf true
// [Asm] range58:
// [Asm] # block info: defs: [v2, v5, a0, v4, s11, v9, v3], uses: [v3, v5, a0, v4, a1, s11, v9, v2], upward_exposed: [a1, s11, a0], params_defs: []
// [Asm] # live_in: [a1, s11, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .range58_0:
// [Asm]   # save_ctx1  # live: [a1, s11, a0]
// [Asm]   mv v2, a0  # live: [a1, s11, v2]
// [Asm]   mv v3, a1  # live: [v2, s11, v3]
// [Asm]   addi v4, s11, -4  # live: [v2, v4, v3]
// [Asm]   andi s11, v4, -8  # live: [v2, v4, s11, v3]
// [Asm]   sw v2, 0(v4)  # live: [v4, s11, v3]
// [Asm]   addi v5, s11, -24  # live: [v4, v5, v3]
// [Asm]   andi s11, v5, -8  # live: [v4, v5, v3]
// [Asm]   la v9, aux65  # live: [v4, v5, v9, v3]
// [Asm]   sd v9, 0(v5)  # live: [v4, v5, v3]
// [Asm]   sd v4, 8(v5)  # live: [v5, v3]
// [Asm]   sd v3, 16(v5)  # live: [v5]
// [Asm] # control
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] aux6.154:
// [Asm] # block info: defs: [v2, t1, v0, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, v4, ft5, ft10, ft7, v11, ft4, v5, ft9, v10, a5, fa4, a0, ft2, a2, a3, s10, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, v35, fa0, t4, t2, v3], uses: [v10, a0, zero, v35, v0, s10, v9, v3], upward_exposed: [s10, a0, zero], params_defs: []
// [Asm] # live_in: [s11, s10, a0, zero], live_out: [v11, v4, v5, s11, zero]
// [Asm] # block parameters: []
// [Asm] .aux6.154_0:
// [Asm]   # save_ctx1  # live: [zero, a0, s11, s10]
// [Asm]   mv v0, s10  # live: [zero, a0, v0, s11]
// [Asm]   mv v2, a0  # live: [zero, a0, v0, s11]
// [Asm]   ld v3, 8(v0)  # live: [zero, a0, v0, s11, v3]
// [Asm]   ld v4, 16(v0)  # live: [zero, a0, v0, v4, s11, v3]
// [Asm]   lw v5, 24(v0)  # live: [v5, zero, a0, v4, s11, v3]
// [Asm]   mv s10, v3  # live: [v5, zero, a0, v4, s11, v3]
// [Asm]   ld v35, 0(v3)  # live: [v5, zero, a0, v35, v4, s11]
// [Asm]   # save_ctx2  # live: [v5, zero, a0, v35, v4, s11]
// [Asm]   jalr v35  # live: [v5, zero, a0, v4, s11]
// [Asm]   mv v9, a0  # live: [v5, zero, v4, s11, v9]
// [Asm]   # restore_ctx2  # live: [v5, zero, v4, s11, v9]
// [Asm]   lw v10, 0(v9)  # live: [v5, v10, zero, v4, s11, v9]
// [Asm]   lw v11, 4(v9)  # live: [v11, v5, v10, zero, v4, s11]
// [Asm] # control
// [Asm]   bne v10, zero, .aux6.154_2  # live: [v11, v4, v5, s11, zero]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, ft0, ft1, a1, fa1, fa2, v29, ft6, a4, fa6, a6, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v4, v14, a0, v29], upward_exposed: [v4], params_defs: []
// [Asm] # live_in: [v4, v5, s11, zero], live_out: [v5, v15, s11, zero]
// [Asm] # block parameters: []
// [Asm] .aux6.154_1:
// [Asm]   mv s10, v4  # live: [v4, v5, s11, zero, a0]
// [Asm]   ld v29, 0(v4)  # live: [v5, s11, zero, a0, v29]
// [Asm]   # save_ctx2  # live: [v5, s11, zero, a0, v29]
// [Asm]   jalr v29  # live: [v5, s11, zero, a0]
// [Asm]   mv v14, a0  # live: [v5, v14, s11, zero]
// [Asm]   # restore_ctx2  # live: [v5, v14, s11, zero]
// [Asm] # control
// [Asm]   mv v15, v14  # live: [v5, v15, s11, zero]
// [Asm] 
// [Asm] # block info: defs: [v16, v17], uses: [v16, v15, zero], upward_exposed: [v15, zero], params_defs: [v15]
// [Asm] # live_in: [v5, v15, s11, zero], live_out: [v5, v17, s11, zero]
// [Asm] # block parameters: [v15]
// [Asm] .aux6.154_3:
// [Asm]   lw v16, 0(v15)  # live: [v5, v16, s11, v15, zero]
// [Asm]   lw v17, 4(v15)  # live: [v5, v17, v16, s11, zero]
// [Asm] # control
// [Asm]   beq v16, zero, .aux6.154_4  # live: [v5, v17, s11, zero]
// [Asm] 
// [Asm] # block info: defs: [v19, v25, s11, v22, v8], uses: [v25, v5, v8, v19, v17, s11], upward_exposed: [v5, v17, s11], params_defs: []
// [Asm] # live_in: [v5, v17, s11], live_out: [v22]
// [Asm] # block parameters: []
// [Asm] .aux6.154_5:
// [Asm]   add v19, v5, v17  # live: [v19, s11]
// [Asm]   addi v8, s11, -8  # live: [v19, v8]
// [Asm]   andi s11, v8, -8  # live: [v19, v8]
// [Asm]   li v25, 1  # live: [v19, v25, v8]
// [Asm]   sw v25, 0(v8)  # live: [v19, v8]
// [Asm]   sw v19, 4(v8)  # live: [v8]
// [Asm] # control
// [Asm]   mv v22, v8  # live: [v22]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v22], upward_exposed: [v22], params_defs: [v22]
// [Asm] # live_in: [v22], live_out: []
// [Asm] # block parameters: [v22]
// [Asm] .aux6.154_6:
// [Asm] # control
// [Asm]   mv a0, v22  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [s11, v22, v7], uses: [s11, zero, v7], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: [v22]
// [Asm] # block parameters: []
// [Asm] .aux6.154_4:
// [Asm]   addi v7, s11, -8  # live: [zero, v7]
// [Asm]   andi s11, v7, -8  # live: [zero, v7]
// [Asm]   sw zero, 0(v7)  # live: [zero, v7]
// [Asm]   sw zero, 4(v7)  # live: [v7]
// [Asm] # control
// [Asm]   mv v22, v7  # live: [v22]
// [Asm]   j .aux6.154_6  # live: [v22]
// [Asm] 
// [Asm] # block info: defs: [v32, v6, s11, v15], uses: [v11, v32, v6, s11], upward_exposed: [v11, s11], params_defs: []
// [Asm] # live_in: [v11, v5, s11, zero], live_out: [v5, v15, s11, zero]
// [Asm] # block parameters: []
// [Asm] .aux6.154_2:
// [Asm]   addi v6, s11, -8  # live: [v11, v5, zero, v6]
// [Asm]   andi s11, v6, -8  # live: [v11, v5, zero, v6, s11]
// [Asm]   li v32, 1  # live: [v11, v5, zero, v32, v6, s11]
// [Asm]   sw v32, 0(v6)  # live: [v11, v5, v6, s11, zero]
// [Asm]   sw v11, 4(v6)  # live: [v5, v6, s11, zero]
// [Asm] # control
// [Asm]   mv v15, v6  # live: [v5, v15, s11, zero]
// [Asm]   j .aux6.154_3  # live: [v5, v15, s11, zero]
// [Asm] 
// [Asm] # leaf false
// [Asm] aux25:
// [Asm] # block info: defs: [v3, v7, v0, v4, v2], uses: [v0, s10, a0, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s11, s10, a0, zero], live_out: [v7, v4, s11, zero, v3]
// [Asm] # block parameters: []
// [Asm] .aux25_8:
// [Asm]   # save_ctx1  # live: [s11, zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, s11, zero, v2]
// [Asm]   ld v3, 8(v0)  # live: [v2, v0, s11, zero, v3]
// [Asm]   ld v4, 16(v0)  # live: [v2, v4, s11, zero, v3]
// [Asm] # control
// [Asm]   mv v7, v2  # live: [v3, v4, s11, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v25, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, s10, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v8, v3, v25, a0, v9, zero], upward_exposed: [zero, v3], params_defs: [v7]
// [Asm] # live_in: [v3, v4, s11, zero, v7], live_out: [v4, s11, v10, zero, v3]
// [Asm] # block parameters: [v7]
// [Asm] .aux25_0:
// [Asm]   mv s10, v3  # live: [zero, a0, v4, s11, v3]
// [Asm]   ld v25, 0(v3)  # live: [v25, zero, a0, v4, s11, v3]
// [Asm]   # save_ctx2  # live: [v25, zero, a0, v4, s11, v3]
// [Asm]   jalr v25  # live: [zero, a0, v4, s11, v3]
// [Asm]   mv v8, a0  # live: [zero, v8, v4, s11, v3]
// [Asm]   # restore_ctx2  # live: [zero, v8, v4, s11, v3]
// [Asm]   lw v9, 0(v8)  # live: [zero, v8, v4, s11, v9, v3]
// [Asm]   lw v10, 4(v8)  # live: [v10, zero, v4, s11, v9, v3]
// [Asm] # control
// [Asm]   beq v9, zero, .aux25_1  # live: [v4, s11, v10, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, v21, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v4, v10, v21, v12, a0, zero], upward_exposed: [v4, v10, zero], params_defs: []
// [Asm] # live_in: [v4, v10, s11, zero, v3], live_out: [v4, s11, v10, zero, v3]
// [Asm] # block parameters: []
// [Asm] .aux25_2:
// [Asm]   mv s10, v4  # live: [v10, zero, v4, s11, v3]
// [Asm]   ld v21, 0(v4)  # live: [v10, v21, zero, v4, s11, v3]
// [Asm]   # save_ctx2  # live: [v10, v21, zero, v4, s11, v3]
// [Asm]   mv a0, v10  # live: [v10, v21, zero, a0, v4, s11, v3]
// [Asm]   jalr v21  # live: [v10, zero, a0, v4, s11, v3]
// [Asm]   mv v12, a0  # live: [v10, zero, v4, s11, v12, v3]
// [Asm]   # restore_ctx2  # live: [v10, zero, v4, s11, v12, v3]
// [Asm] # control
// [Asm]   bne v12, zero, .aux25_4  # live: [v4, s11, v10, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v6, s11, v15, v20], uses: [v6, s11, v10, v20], upward_exposed: [s11, v10], params_defs: []
// [Asm] # live_in: [s11, v10], live_out: [v15]
// [Asm] # block parameters: []
// [Asm] .aux25_3:
// [Asm]   addi v6, s11, -8  # live: [v6, v10]
// [Asm]   andi s11, v6, -8  # live: [v6, v10]
// [Asm]   li v20, 1  # live: [v6, v10, v20]
// [Asm]   sw v20, 0(v6)  # live: [v6, v10]
// [Asm]   sw v10, 4(v6)  # live: [v6]
// [Asm] # control
// [Asm]   mv v15, v6  # live: [v15]
// [Asm] 
// [Asm] # block info: defs: [v17], uses: [v15], upward_exposed: [v15], params_defs: [v15]
// [Asm] # live_in: [v15], live_out: [v17]
// [Asm] # block parameters: [v15]
// [Asm] .aux25_5:
// [Asm] # control
// [Asm]   mv v17, v15  # live: [v17]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v17, a0], upward_exposed: [v17], params_defs: [v17]
// [Asm] # live_in: [v17], live_out: []
// [Asm] # block parameters: [v17]
// [Asm] .aux25_6:
// [Asm] # control
// [Asm]   mv a0, v17  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v7], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v4, s11, zero, v3], live_out: [v7, v4, s11, zero, v3]
// [Asm] # block parameters: []
// [Asm] .aux25_4:
// [Asm] # control
// [Asm]   mv v7, zero  # live: [v7, v4, s11, zero, v3]
// [Asm]   j .aux25_0  # live: [v7, v4, s11, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v5, v17, s11], uses: [v5, s11, zero], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: [v17]
// [Asm] # block parameters: []
// [Asm] .aux25_1:
// [Asm]   addi v5, s11, -8  # live: [v5, zero]
// [Asm]   andi s11, v5, -8  # live: [v5, zero]
// [Asm]   sw zero, 0(v5)  # live: [v5, zero]
// [Asm]   sw zero, 4(v5)  # live: [v5]
// [Asm] # control
// [Asm]   mv v17, v5  # live: [v17]
// [Asm]   j .aux25_6  # live: [v17]
// [Asm] 
// [Asm] # leaf false
// [Asm] fold84:
// [Asm] # block info: defs: [v3, v7, v4, v6, v5, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .fold84_5:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm]   mv v6, v3  # live: [v4, v5, v6, zero]
// [Asm]   mv v7, v4  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, s10, v9, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v8, v5, v18, a0, v9, zero], upward_exposed: [v5, zero], params_defs: [v5, v6, v7]
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v6, v5, v10, zero, v7]
// [Asm] # block parameters: [v5, v6, v7]
// [Asm] .fold84_0:
// [Asm]   mv s10, v5  # live: [v5, zero, a0, v7, v6]
// [Asm]   ld v18, 0(v5)  # live: [v5, v18, zero, a0, v7, v6]
// [Asm]   # save_ctx2  # live: [v5, v18, zero, a0, v7, v6]
// [Asm]   jalr v18  # live: [v5, zero, a0, v7, v6]
// [Asm]   mv v8, a0  # live: [v5, zero, v7, v8, v6]
// [Asm]   # restore_ctx2  # live: [v5, zero, v7, v8, v6]
// [Asm]   lw v9, 0(v8)  # live: [v5, zero, v7, v8, v6, v9]
// [Asm]   lw v10, 4(v8)  # live: [v5, v10, zero, v7, v6, v9]
// [Asm] # control
// [Asm]   beq v9, zero, .fold84_1  # live: [v6, v5, v10, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v7, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v14, v5, v10, a0, v7, v6, a1, v12], upward_exposed: [v6, v5, v10, v7], params_defs: []
// [Asm] # live_in: [v6, v5, v10, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .fold84_2:
// [Asm]   mv s10, v6  # live: [v5, v6, v10, zero, v7]
// [Asm]   ld v14, 0(v6)  # live: [v5, v6, v14, v10, zero, v7]
// [Asm]   # save_ctx2  # live: [v5, v6, v14, v10, zero, v7]
// [Asm]   mv a0, v7  # live: [v5, v6, v14, v10, zero, a0]
// [Asm]   mv a1, v10  # live: [v5, v6, a1, v14, a0, zero]
// [Asm]   jalr v14  # live: [v5, v6, zero, a0]
// [Asm]   mv v12, a0  # live: [v5, v6, v12, zero]
// [Asm]   # restore_ctx2  # live: [v5, v6, v12, zero]
// [Asm] # control
// [Asm]   mv v5, v5  # live: [v5, v6, v12, zero]
// [Asm]   mv v6, v6  # live: [v5, v6, v12, zero]
// [Asm]   mv v7, v12  # live: [v5, v6, zero, v7]
// [Asm]   j .fold84_0  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v13], uses: [v7], upward_exposed: [v7], params_defs: []
// [Asm] # live_in: [v7], live_out: [v13]
// [Asm] # block parameters: []
// [Asm] .fold84_1:
// [Asm] # control
// [Asm]   mv v13, v7  # live: [v13]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v13, a0], upward_exposed: [v13], params_defs: [v13]
// [Asm] # live_in: [v13], live_out: []
// [Asm] # block parameters: [v13]
// [Asm] .fold84_3:
// [Asm] # control
// [Asm]   mv a0, v13  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] aux111.165:
// [Asm] # block info: defs: [v3, v0, v2], uses: [v3, v0, s10, a0, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0, zero], live_out: [zero]
// [Asm] # block parameters: []
// [Asm] .aux111.165_0:
// [Asm]   # save_ctx1  # live: [zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, zero, v2]
// [Asm]   lw v3, 8(v0)  # live: [v3, zero, v2]
// [Asm] # control
// [Asm]   blt v2, v3, .aux111.165_2  # live: [zero]
// [Asm] 
// [Asm] # block info: defs: [v5], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .aux111.165_1:
// [Asm] # control
// [Asm]   mv v5, zero  # live: [v5]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v5, a0], upward_exposed: [v5], params_defs: [v5]
// [Asm] # live_in: [v5], live_out: []
// [Asm] # block parameters: [v5]
// [Asm] .aux111.165_3:
// [Asm] # control
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v6, v5], uses: [v6], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .aux111.165_2:
// [Asm] # control
// [Asm]   li v6, 1  # live: [v6]
// [Asm]   mv v5, v6  # live: [v5]
// [Asm]   j .aux111.165_3  # live: [v5]
// [Asm] 
// [Asm] # leaf true
// [Asm] aux117.167:
// [Asm] # block info: defs: [v3, v0, v2], uses: [v2, v0, s10, a0, v3], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0, zero], live_out: [zero]
// [Asm] # block parameters: []
// [Asm] .aux117.167_0:
// [Asm]   # save_ctx1  # live: [zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, zero, v2]
// [Asm]   lw v3, 8(v0)  # live: [v2, zero, v3]
// [Asm] # control
// [Asm]   blt v3, v2, .aux117.167_2  # live: [zero]
// [Asm] 
// [Asm] # block info: defs: [v5], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .aux117.167_1:
// [Asm] # control
// [Asm]   mv v5, zero  # live: [v5]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v5, a0], upward_exposed: [v5], params_defs: [v5]
// [Asm] # live_in: [v5], live_out: []
// [Asm] # block parameters: [v5]
// [Asm] .aux117.167_3:
// [Asm] # control
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v6, v5], uses: [v6], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .aux117.167_2:
// [Asm] # control
// [Asm]   li v6, 1  # live: [v6]
// [Asm]   mv v5, v6  # live: [v5]
// [Asm]   j .aux117.167_3  # live: [v5]
// [Asm] 
// [Asm] # leaf true
// [Asm] aux65:
// [Asm] # block info: defs: [v3, v7, v0, v4, v2], uses: [v7, v0, v4, s10, a0, v3], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s11, s10, a0, zero], live_out: [v3, s11, zero, v7]
// [Asm] # block parameters: []
// [Asm] .aux65_0:
// [Asm]   # save_ctx1  # live: [s11, zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, s11, zero]
// [Asm]   ld v3, 8(v0)  # live: [v0, s11, zero, v3]
// [Asm]   lw v4, 16(v0)  # live: [v4, s11, zero, v3]
// [Asm]   lw v7, 0(v3)  # live: [v3, v4, s11, zero, v7]
// [Asm] # control
// [Asm]   beq v7, v4, .aux65_1  # live: [v3, s11, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v6, v16, s11, v9, v13], uses: [v16, v7, v6, s11, v9, v3], upward_exposed: [v3, s11, v7], params_defs: []
// [Asm] # live_in: [v7, s11, v3], live_out: [v13]
// [Asm] # block parameters: []
// [Asm] .aux65_2:
// [Asm]   addi v9, v7, 1  # live: [v3, s11, v9, v7]
// [Asm]   sw v9, 0(v3)  # live: [s11, v7]
// [Asm]   addi v6, s11, -8  # live: [v6, v7]
// [Asm]   andi s11, v6, -8  # live: [v6, v7]
// [Asm]   li v16, 1  # live: [v6, v16, v7]
// [Asm]   sw v16, 0(v6)  # live: [v6, v7]
// [Asm]   sw v7, 4(v6)  # live: [v6]
// [Asm] # control
// [Asm]   mv v13, v6  # live: [v13]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v13, a0], upward_exposed: [v13], params_defs: [v13]
// [Asm] # live_in: [v13], live_out: []
// [Asm] # block parameters: [v13]
// [Asm] .aux65_3:
// [Asm] # control
// [Asm]   mv a0, v13  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v5, s11, v13], uses: [v5, s11, zero], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: [v13]
// [Asm] # block parameters: []
// [Asm] .aux65_1:
// [Asm]   addi v5, s11, -8  # live: [v5, zero]
// [Asm]   andi s11, v5, -8  # live: [v5, zero]
// [Asm]   sw zero, 0(v5)  # live: [v5, zero]
// [Asm]   sw zero, 4(v5)  # live: [v5]
// [Asm] # control
// [Asm]   mv v13, v5  # live: [v13]
// [Asm]   j .aux65_3  # live: [v13]
// [Asm] 
// [Asm] # leaf true
// [Asm] add102.169:
// [Asm] # block info: defs: [v3, v0, v4, a0, v2], uses: [v2, a0, v4, a1, s10, v3], upward_exposed: [a1, s10, a0], params_defs: []
// [Asm] # live_in: [a1, s10, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .add102.169_0:
// [Asm]   # save_ctx1  # live: [a1, a0, s10]
// [Asm]   mv v0, s10  # live: [a1, a0]
// [Asm]   mv v2, a0  # live: [a1, v2]
// [Asm]   mv v3, a1  # live: [v3, v2]
// [Asm]   add v4, v2, v3  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main120:
// [Asm] # block info: defs: [v22, a1, s11, v33, fa1, fa2, ft6, fa6, a4, a6, ft10, ft5, v6, ft4, v5, ft9, v10, fa4, ft2, v17, a3, a7, fa7, fa3, ft3, t2, v3, v25, t1, v14, v16, v26, v7, ft0, ft1, v32, v12, v29, v4, v34, ft7, a5, a0, v30, v36, a2, ft8, t3, t0, fa5, fa0, t4, v15, v2], uses: [v2, v25, v5, v14, v10, a0, v26, v30, v22, v7, v36, v32, a2, a1, v17, s11, v12, v33, zero, v29, v4, v6, v34, v3], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main120_0:
// [Asm]   # save_ctx1  # live: [zero, s11]
// [Asm]   # save_ctx2  # live: [zero, s11]
// [Asm]   mv a0, zero  # live: [zero, a0, s11]
// [Asm]   li v36, 100  # live: [zero, a0, v36, s11]
// [Asm]   mv a1, v36  # live: [zero, a0, a1, s11]
// [Asm]   call range58  # live: [zero, a0, s11]
// [Asm]   mv v6, a0  # live: [zero, v6, s11]
// [Asm]   # restore_ctx2  # live: [zero, v6, s11]
// [Asm]   # save_ctx2  # live: [zero, v6, s11]
// [Asm]   mv a0, zero  # live: [zero, a0, v6, s11]
// [Asm]   li v34, 1000  # live: [zero, a0, v6, s11, v34]
// [Asm]   mv a1, v34  # live: [zero, a0, v6, a1, s11]
// [Asm]   call range58  # live: [zero, a0, v6, s11]
// [Asm]   mv v7, a0  # live: [zero, v7, v6, s11]
// [Asm]   # restore_ctx2  # live: [zero, v7, v6, s11]
// [Asm]   addi v2, s11, -32  # live: [zero, v7, v6, v2]
// [Asm]   andi s11, v2, -8  # live: [zero, v7, v6, s11, v2]
// [Asm]   la v32, aux6.154  # live: [zero, v7, v32, v6, s11, v2]
// [Asm]   sd v32, 0(v2)  # live: [v7, v6, s11, zero, v2]
// [Asm]   sd v6, 8(v2)  # live: [v7, s11, zero, v2]
// [Asm]   sd v7, 16(v2)  # live: [s11, zero, v2]
// [Asm]   li v33, 1  # live: [s11, zero, v33, v2]
// [Asm]   sd v33, 24(v2)  # live: [s11, zero, v2]
// [Asm]   addi v3, s11, -16  # live: [v2, zero, v3]
// [Asm]   andi s11, v3, -8  # live: [v2, s11, zero, v3]
// [Asm]   la v29, aux111.165  # live: [v2, s11, zero, v29, v3]
// [Asm]   sd v29, 0(v3)  # live: [v2, s11, zero, v3]
// [Asm]   li v30, 50  # live: [v2, s11, zero, v30, v3]
// [Asm]   sd v30, 8(v3)  # live: [v2, s11, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, s11, zero, v3]
// [Asm]   mv a0, v2  # live: [s11, zero, a0, v3]
// [Asm]   mv a1, v3  # live: [a1, s11, zero, a0]
// [Asm]   call filter20  # live: [s11, zero, a0]
// [Asm]   mv v10, a0  # live: [v10, s11, zero]
// [Asm]   # restore_ctx2  # live: [v10, s11, zero]
// [Asm]   addi v4, s11, -16  # live: [v4, v10, zero]
// [Asm]   andi s11, v4, -8  # live: [v4, s11, v10, zero]
// [Asm]   la v25, aux117.167  # live: [v25, v4, s11, v10, zero]
// [Asm]   sd v25, 0(v4)  # live: [v4, s11, v10, zero]
// [Asm]   li v26, 1200  # live: [v4, s11, v10, zero, v26]
// [Asm]   sd v26, 8(v4)  # live: [v4, s11, v10, zero]
// [Asm]   # save_ctx2  # live: [v4, s11, v10, zero]
// [Asm]   mv a0, v10  # live: [v4, s11, zero, a0]
// [Asm]   mv a1, v4  # live: [a1, s11, zero, a0]
// [Asm]   call filter20  # live: [s11, zero, a0]
// [Asm]   mv v12, a0  # live: [v12, s11, zero]
// [Asm]   # restore_ctx2  # live: [v12, s11, zero]
// [Asm]   addi v5, s11, -8  # live: [v5, v12, zero]
// [Asm]   andi s11, v5, -8  # live: [v5, v12, zero]
// [Asm]   la v22, add102.169  # live: [v5, v12, zero, v22]
// [Asm]   sd v22, 0(v5)  # live: [v5, v12, zero]
// [Asm]   # save_ctx2  # live: [v5, v12, zero]
// [Asm]   mv a0, v12  # live: [v5, zero, a0]
// [Asm]   mv a1, v5  # live: [a1, zero, a0]
// [Asm]   mv a2, zero  # live: [a2, a1, zero, a0]
// [Asm]   call fold84  # live: [zero, a0]
// [Asm]   mv v14, a0  # live: [v14, zero]
// [Asm]   # restore_ctx2  # live: [v14, zero]
// [Asm]   # save_ctx2  # live: [v14, zero]
// [Asm]   mv a0, v14  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v15, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   li v17, 10  # live: [v17, zero]
// [Asm]   mv a0, v17  # live: [zero, a0]
// [Asm]   call minimbt_print_char  # live: [zero, a0]
// [Asm]   mv v16, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call main120  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] filter20:
// [Asm] # block info: defs: [v3, v7, v4, s11, a0, v2], uses: [v3, a0, v7, v4, a1, s11, v2], upward_exposed: [a1, s11, a0], params_defs: []
// [Asm] # live_in: [a1, s11, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .filter20_0:
// [Asm]   # save_ctx1  # live: [a1, s11, a0]
// [Asm]   mv v2, a0  # live: [a1, s11, v2]
// [Asm]   mv v3, a1  # live: [v2, s11, v3]
// [Asm]   addi v4, s11, -24  # live: [v2, v4, v3]
// [Asm]   andi s11, v4, -8  # live: [v2, v4, v3]
// [Asm]   la v7, aux25  # live: [v2, v7, v4, v3]
// [Asm]   sd v7, 0(v4)  # live: [v2, v4, v3]
// [Asm]   sd v2, 8(v4)  # live: [v4, v3]
// [Asm]   sd v3, 16(v4)  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("map", Fun([Unit], Tuple([Int, Int]))), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int], Int))], body: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Tuple([Int(1), App(Var("f"), [Var("val")])])))}, Var("aux"))}, LetRec({name: ("filter", Fun([Unit], Tuple([Int, Int]))), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int], Int))], body: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Let(("r", Var({val: Some(Int)})), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit])))))}, Var("aux"))}, LetRec({name: ("concat", Fun([Unit], Tuple([Int, Int]))), args: [("stream1", Fun([Unit], Tuple([Int, Int]))), ("stream2", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream1"), [Unit]), If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")])))}, Var("aux"))}, LetRec({name: ("range", Fun([Unit], Tuple([Int, Int]))), args: [("from", Int), ("to", Int)], body: Let(("state", Var({val: Some(Array(Int))})), Array(Int(1), Var("from")), LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: Let(("val", Var({val: Some(Int)})), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))))}, Var("aux")))}, LetRec({name: ("addx", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, Var("aux"))}, LetRec({name: ("fold", Int), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int, Int], Int)), ("acc", Int)], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({name: ("sum", Int), args: [("stream", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), [])))))))))))
// [Knf] build_knf: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Tuple([Int(1), App(Var("f"), [Var("val")])])))}, Var("aux"))
// [Knf] build_knf: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Tuple([Int(1), App(Var("f"), [Var("val")])])))
// [Knf] build_knf: App(Var("stream"), [Unit])
// [Knf] build_knf: Var("stream")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Tuple([Int(1), App(Var("f"), [Var("val")])]))
// [Knf] build_knf: Var("ok")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Tuple([Int(0), Int(0)])
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Tuple([Int(1), App(Var("f"), [Var("val")])])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("f"), [Var("val")])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("val")
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: LetRec({name: ("filter", Fun([Unit], Tuple([Int, Int]))), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int], Int))], body: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Let(("r", Var({val: Some(Int)})), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit])))))}, Var("aux"))}, LetRec({name: ("concat", Fun([Unit], Tuple([Int, Int]))), args: [("stream1", Fun([Unit], Tuple([Int, Int]))), ("stream2", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream1"), [Unit]), If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")])))}, Var("aux"))}, LetRec({name: ("range", Fun([Unit], Tuple([Int, Int]))), args: [("from", Int), ("to", Int)], body: Let(("state", Var({val: Some(Array(Int))})), Array(Int(1), Var("from")), LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: Let(("val", Var({val: Some(Int)})), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))))}, Var("aux")))}, LetRec({name: ("addx", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, Var("aux"))}, LetRec({name: ("fold", Int), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int, Int], Int)), ("acc", Int)], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({name: ("sum", Int), args: [("stream", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), []))))))))))
// [Knf] build_knf: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Let(("r", Var({val: Some(Int)})), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit])))))}, Var("aux"))
// [Knf] build_knf: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Let(("r", Var({val: Some(Int)})), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit])))))
// [Knf] build_knf: App(Var("stream"), [Unit])
// [Knf] build_knf: Var("stream")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Let(("r", Var({val: Some(Int)})), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit]))))
// [Knf] build_knf: Var("ok")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Tuple([Int(0), Int(0)])
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("r", Var({val: Some(Int)})), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit])))
// [Knf] build_knf: App(Var("f"), [Var("val")])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("val")
// [Knf] build_knf: If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit]))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Tuple([Int(1), Var("val")])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("val")
// [Knf] build_knf: App(Var("aux"), [Unit])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Unit
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: LetRec({name: ("concat", Fun([Unit], Tuple([Int, Int]))), args: [("stream1", Fun([Unit], Tuple([Int, Int]))), ("stream2", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream1"), [Unit]), If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")])))}, Var("aux"))}, LetRec({name: ("range", Fun([Unit], Tuple([Int, Int]))), args: [("from", Int), ("to", Int)], body: Let(("state", Var({val: Some(Array(Int))})), Array(Int(1), Var("from")), LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: Let(("val", Var({val: Some(Int)})), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))))}, Var("aux")))}, LetRec({name: ("addx", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, Var("aux"))}, LetRec({name: ("fold", Int), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int, Int], Int)), ("acc", Int)], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({name: ("sum", Int), args: [("stream", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), [])))))))))
// [Knf] build_knf: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream1"), [Unit]), If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")])))}, Var("aux"))
// [Knf] build_knf: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream1"), [Unit]), If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")])))
// [Knf] build_knf: App(Var("stream1"), [Unit])
// [Knf] build_knf: Var("stream1")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")]))
// [Knf] build_knf: Var("ok")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("stream2"), [Unit])
// [Knf] build_knf: Var("stream2")
// [Knf] build_knf: Unit
// [Knf] build_knf: Tuple([Int(1), Var("val")])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("val")
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: LetRec({name: ("range", Fun([Unit], Tuple([Int, Int]))), args: [("from", Int), ("to", Int)], body: Let(("state", Var({val: Some(Array(Int))})), Array(Int(1), Var("from")), LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: Let(("val", Var({val: Some(Int)})), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))))}, Var("aux")))}, LetRec({name: ("addx", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, Var("aux"))}, LetRec({name: ("fold", Int), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int, Int], Int)), ("acc", Int)], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({name: ("sum", Int), args: [("stream", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), []))))))))
// [Knf] build_knf: Let(("state", Var({val: Some(Array(Int))})), Array(Int(1), Var("from")), LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: Let(("val", Var({val: Some(Int)})), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))))}, Var("aux")))
// [Knf] build_knf: Array(Int(1), Var("from"))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("from")
// [Knf] build_knf: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: Let(("val", Var({val: Some(Int)})), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))))}, Var("aux"))
// [Knf] build_knf: Let(("val", Var({val: Some(Int)})), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))))
// [Knf] build_knf: Get(Var("state"), Int(0))
// [Knf] build_knf: Var("state")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")])))
// [Knf] build_knf: Var("val")
// [Knf] build_knf: Var("to")
// [Knf] build_knf: Tuple([Int(0), Int(0)])
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))
// [Knf] build_knf: Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("state")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Var("val"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("val")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Tuple([Int(1), Var("val")])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("val")
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: LetRec({name: ("addx", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, Var("aux"))}, LetRec({name: ("fold", Int), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int, Int], Int)), ("acc", Int)], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({name: ("sum", Int), args: [("stream", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), [])))))))
// [Knf] build_knf: LetRec({name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, Var("aux"))
// [Knf] build_knf: Prim(Var("x"), Var("y"), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: LetRec({name: ("fold", Int), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int, Int], Int)), ("acc", Int)], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({name: ("sum", Int), args: [("stream", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), []))))))
// [Knf] build_knf: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))
// [Knf] build_knf: App(Var("stream"), [Unit])
// [Knf] build_knf: Var("stream")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])]))
// [Knf] build_knf: Var("ok")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("acc")
// [Knf] build_knf: App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])
// [Knf] build_knf: Var("fold")
// [Knf] build_knf: Var("stream")
// [Knf] build_knf: Var("f")
// [Knf] build_knf: App(Var("f"), [Var("acc"), Var("val")])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("acc")
// [Knf] build_knf: Var("val")
// [Knf] build_knf: LetRec({name: ("sum", Int), args: [("stream", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), [])))))
// [Knf] build_knf: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))
// [Knf] build_knf: Prim(Var("x"), Var("y"), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: App(Var("fold"), [Var("stream"), Var("add"), Int(0)])
// [Knf] build_knf: Var("fold")
// [Knf] build_knf: Var("stream")
// [Knf] build_knf: Var("add")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), []))))
// [Knf] build_knf: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))
// [Knf] build_knf: If(LE(Var("x"), Var("y")), Int(0), Int(1))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), [])))
// [Knf] build_knf: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))
// [Knf] build_knf: If(LE(Var("y"), Var("x")), Int(0), Int(1))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))
// [Knf] build_knf: App(Var("range"), [Int(0), Int(100)])
// [Knf] build_knf: Var("range")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(100)
// [Knf] build_knf: Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit))))))))
// [Knf] build_knf: App(Var("range"), [Int(0), Int(1000)])
// [Knf] build_knf: Var("range")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1000)
// [Knf] build_knf: Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))
// [Knf] build_knf: App(Var("concat"), [Var("range100"), Var("range1000")])
// [Knf] build_knf: Var("concat")
// [Knf] build_knf: Var("range100")
// [Knf] build_knf: Var("range1000")
// [Knf] build_knf: Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit))))))
// [Knf] build_knf: App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])])
// [Knf] build_knf: Var("map")
// [Knf] build_knf: Var("catt")
// [Knf] build_knf: App(Var("addx"), [Int(1)])
// [Knf] build_knf: Var("addx")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))
// [Knf] build_knf: App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])])
// [Knf] build_knf: Var("filter")
// [Knf] build_knf: Var("addone")
// [Knf] build_knf: App(Var("gt"), [Int(50)])
// [Knf] build_knf: Var("gt")
// [Knf] build_knf: Int(50)
// [Knf] build_knf: Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit))))
// [Knf] build_knf: App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])])
// [Knf] build_knf: Var("filter")
// [Knf] build_knf: Var("over50")
// [Knf] build_knf: App(Var("le"), [Int(1200)])
// [Knf] build_knf: Var("le")
// [Knf] build_knf: Int(1200)
// [Knf] build_knf: Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))
// [Knf] build_knf: App(Var("sum"), [Var("under1200")])
// [Knf] build_knf: Var("sum")
// [Knf] build_knf: Var("under1200")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit))
// [Knf] build_knf: App(Var("print_int"), [Var("sum")])
// [Knf] build_knf: Var("sum")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)
// [Knf] build_knf: App(Var("print_char"), [Int(10)])
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] beta reduce catt.127 = aux46.143
// [Main] beta reduce _129 = aux81.152
// [Main] beta reduce addone.130 = aux6.154
// [Main] beta reduce _132 = aux111.165
// [Main] beta reduce _135 = aux117.167
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl range58
// [Main]   .type range58, @function
// [Main] # leaf true
// [Main] range58:
// [Main] .range58_0:
// [Main]   addi a2, s11, -4
// [Main]   andi s11, a2, -8
// [Main]   sw a0, 0(a2)
// [Main]   addi a0, s11, -24
// [Main]   andi s11, a0, -8
// [Main]   la a3, aux65
// [Main]   sd a3, 0(a0)
// [Main]   sd a2, 8(a0)
// [Main]   sd a1, 16(a0)
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux6.154
// [Main]   .type aux6.154, @function
// [Main] # leaf false
// [Main] aux6.154:
// [Main] .aux6.154_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   mv a2, s10
// [Main]   ld a1, 8(a2)
// [Main]   ld s0, 16(a2)
// [Main]   lw s1, 24(a2)
// [Main]   mv s10, a1
// [Main]   ld a1, 0(a1)
// [Main]   jalr a1
// [Main]   lw a1, 0(a0)
// [Main]   lw a0, 4(a0)
// [Main]   bne a1, zero, .aux6.154_2
// [Main] 
// [Main] .aux6.154_1:
// [Main]   mv s10, s0
// [Main]   ld a1, 0(s0)
// [Main]   jalr a1
// [Main] 
// [Main] .aux6.154_3:
// [Main]   lw a1, 0(a0)
// [Main]   lw a0, 4(a0)
// [Main]   beq a1, zero, .aux6.154_4
// [Main] 
// [Main] .aux6.154_5:
// [Main]   add a0, s1, a0
// [Main]   addi a1, s11, -8
// [Main]   andi s11, a1, -8
// [Main]   li a2, 1
// [Main]   sw a2, 0(a1)
// [Main]   sw a0, 4(a1)
// [Main]   mv a0, a1
// [Main] 
// [Main] .aux6.154_6:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .aux6.154_4:
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   sw zero, 0(a0)
// [Main]   sw zero, 4(a0)
// [Main]   j .aux6.154_6
// [Main] 
// [Main] .aux6.154_2:
// [Main]   addi a1, s11, -8
// [Main]   andi s11, a1, -8
// [Main]   li a2, 1
// [Main]   sw a2, 0(a1)
// [Main]   sw a0, 4(a1)
// [Main]   mv a0, a1
// [Main]   j .aux6.154_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux25
// [Main]   .type aux25, @function
// [Main] # leaf false
// [Main] aux25:
// [Main] .aux25_8:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv a1, s10
// [Main]   ld s0, 8(a1)
// [Main]   ld s1, 16(a1)
// [Main] 
// [Main] .aux25_0:
// [Main]   mv s10, s0
// [Main]   ld a1, 0(s0)
// [Main]   jalr a1
// [Main]   mv a1, a0
// [Main]   lw a0, 0(a1)
// [Main]   lw s2, 4(a1)
// [Main]   beq a0, zero, .aux25_1
// [Main] 
// [Main] .aux25_2:
// [Main]   mv s10, s1
// [Main]   ld a1, 0(s1)
// [Main]   mv a0, s2
// [Main]   jalr a1
// [Main]   bne a0, zero, .aux25_4
// [Main] 
// [Main] .aux25_3:
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   li a1, 1
// [Main]   sw a1, 0(a0)
// [Main]   sw s2, 4(a0)
// [Main] 
// [Main] .aux25_5:
// [Main] 
// [Main] .aux25_6:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .aux25_4:
// [Main]   mv a0, zero
// [Main]   j .aux25_0
// [Main] 
// [Main] .aux25_1:
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   sw zero, 0(a0)
// [Main]   sw zero, 4(a0)
// [Main]   j .aux25_6
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl fold84
// [Main]   .type fold84, @function
// [Main] # leaf false
// [Main] fold84:
// [Main] .fold84_5:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s0, a0
// [Main]   mv s2, a1
// [Main]   mv s1, a2
// [Main] 
// [Main] .fold84_0:
// [Main]   mv s10, s0
// [Main]   ld a1, 0(s0)
// [Main]   jalr a1
// [Main]   mv a1, a0
// [Main]   lw a0, 0(a1)
// [Main]   lw a1, 4(a1)
// [Main]   beq a0, zero, .fold84_1
// [Main] 
// [Main] .fold84_2:
// [Main]   mv s10, s2
// [Main]   ld a2, 0(s2)
// [Main]   mv a0, s1
// [Main]   jalr a2
// [Main]   mv s1, a0
// [Main]   j .fold84_0
// [Main] 
// [Main] .fold84_1:
// [Main]   mv a0, s1
// [Main] 
// [Main] .fold84_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux111.165
// [Main]   .type aux111.165, @function
// [Main] # leaf true
// [Main] aux111.165:
// [Main] .aux111.165_0:
// [Main]   mv a1, s10
// [Main]   lw a1, 8(a1)
// [Main]   blt a0, a1, .aux111.165_2
// [Main] 
// [Main] .aux111.165_1:
// [Main]   mv a0, zero
// [Main] 
// [Main] .aux111.165_3:
// [Main]   ret
// [Main] 
// [Main] .aux111.165_2:
// [Main]   li a0, 1
// [Main]   j .aux111.165_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux117.167
// [Main]   .type aux117.167, @function
// [Main] # leaf true
// [Main] aux117.167:
// [Main] .aux117.167_0:
// [Main]   mv a1, s10
// [Main]   lw a1, 8(a1)
// [Main]   blt a1, a0, .aux117.167_2
// [Main] 
// [Main] .aux117.167_1:
// [Main]   mv a0, zero
// [Main] 
// [Main] .aux117.167_3:
// [Main]   ret
// [Main] 
// [Main] .aux117.167_2:
// [Main]   li a0, 1
// [Main]   j .aux117.167_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux65
// [Main]   .type aux65, @function
// [Main] # leaf true
// [Main] aux65:
// [Main] .aux65_0:
// [Main]   mv a2, s10
// [Main]   ld a1, 8(a2)
// [Main]   lw a0, 16(a2)
// [Main]   lw a2, 0(a1)
// [Main]   beq a2, a0, .aux65_1
// [Main] 
// [Main] .aux65_2:
// [Main]   addi a0, a2, 1
// [Main]   sw a0, 0(a1)
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   li a1, 1
// [Main]   sw a1, 0(a0)
// [Main]   sw a2, 4(a0)
// [Main] 
// [Main] .aux65_3:
// [Main]   ret
// [Main] 
// [Main] .aux65_1:
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   sw zero, 0(a0)
// [Main]   sw zero, 4(a0)
// [Main]   j .aux65_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl add102.169
// [Main]   .type add102.169, @function
// [Main] # leaf true
// [Main] add102.169:
// [Main] .add102.169_0:
// [Main]   mv a2, s10
// [Main]   add a0, a0, a1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main120
// [Main]   .type main120, @function
// [Main] # leaf false
// [Main] main120:
// [Main] .main120_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   mv a0, zero
// [Main]   li a1, 100
// [Main]   call range58
// [Main]   mv s0, a0
// [Main]   mv a0, zero
// [Main]   li a1, 1000
// [Main]   call range58
// [Main]   addi a1, s11, -32
// [Main]   andi s11, a1, -8
// [Main]   la a2, aux6.154
// [Main]   sd a2, 0(a1)
// [Main]   sd s0, 8(a1)
// [Main]   sd a0, 16(a1)
// [Main]   li a0, 1
// [Main]   sd a0, 24(a1)
// [Main]   addi a2, s11, -16
// [Main]   andi s11, a2, -8
// [Main]   la a0, aux111.165
// [Main]   sd a0, 0(a2)
// [Main]   li a0, 50
// [Main]   sd a0, 8(a2)
// [Main]   mv a0, a1
// [Main]   mv a1, a2
// [Main]   call filter20
// [Main]   addi a1, s11, -16
// [Main]   andi s11, a1, -8
// [Main]   la a2, aux117.167
// [Main]   sd a2, 0(a1)
// [Main]   li a2, 1200
// [Main]   sd a2, 8(a1)
// [Main]   call filter20
// [Main]   addi a1, s11, -8
// [Main]   andi s11, a1, -8
// [Main]   la a2, add102.169
// [Main]   sd a2, 0(a1)
// [Main]   mv a2, zero
// [Main]   call fold84
// [Main]   call minimbt_print_int
// [Main]   li a0, 10
// [Main]   call minimbt_print_char
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call main120
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl filter20
// [Main]   .type filter20, @function
// [Main] # leaf true
// [Main] filter20:
// [Main] .filter20_0:
// [Main]   addi a2, s11, -24
// [Main]   andi s11, a2, -8
// [Main]   la a3, aux25
// [Main]   sd a3, 0(a2)
// [Main]   sd a0, 8(a2)
// [Main]   sd a1, 16(a2)
// [Main]   mv a0, a2
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Wasm] LoweringOrder: [0, 2, 1, 3, 5, 4, 6]
// [Wasm] LoweringOrder: [[1, 2], [3], [3], [4, 5], [6], [6], []]
// [Wasm] LoweringOrder: HashMap::of([(b6, 0), (b4, 1), (b1, 0), (b5, 0), (b2, 2), (b3, 0), (b0, 0)])
// [Wasm] LoweringOrder: [b0, b1, b3, b5, b6, b4, b2]
// [Wasm] LoweringOrder: HashMap::of([(b6, 4), (b4, 0), (b1, 1), (b5, 3), (b2, 0), (b3, 2), (b0, 0)])
// [Wasm] Lowering function aux6.154
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m1, fills=[Field(index=0, val=Int32(val=0)), Field(index=1, val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f12, mref=m1) -> $f12.m1
// [Wasm] Get Local name Mem(fref=f12, mref=m1) -> $f12.m1
// [Wasm] Get Local name Mem(fref=f12, mref=m1) -> $f12.m1
// [Wasm] Lowering control Jump(target=b6, args=[Mem(fref=f12, mref=m1)])
// [Wasm] Get Local name Mem(fref=f12, mref=m1) -> $f12.m1
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FreeVar(fvref=^3), Insn(iref=%7)])
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m2, fills=[Field(index=0, val=Int32(val=1)), Field(index=1, val=Insn(iref=%10))])
// [Wasm] Get Local name Mem(fref=f12, mref=m2) -> $f12.m2
// [Wasm] Get Local name Mem(fref=f12, mref=m2) -> $f12.m2
// [Wasm] Get Local name Mem(fref=f12, mref=m2) -> $f12.m2
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Jump(target=b6, args=[Mem(fref=f12, mref=m2)])
// [Wasm] Get Local name Mem(fref=f12, mref=m2) -> $f12.m2
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b3, bpref=$b.0), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b3, bpref=$b.0), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%6), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering control Branch(cond=Insn(iref=%8), t=b4, t_args=[], f=b5, f_args=[])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Apply(ty=Tuple(fields=[Int32, Int32]), f=FreeVar(fvref=^2), args=[Unit])
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m0, fills=[Field(index=0, val=Int32(val=1)), Field(index=1, val=Insn(iref=%2))])
// [Wasm] Get Local name Mem(fref=f12, mref=m0) -> $f12.m0
// [Wasm] Get Local name Mem(fref=f12, mref=m0) -> $f12.m0
// [Wasm] Get Local name Mem(fref=f12, mref=m0) -> $f12.m0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Jump(target=b3, args=[Mem(fref=f12, mref=m0)])
// [Wasm] Get Local name Mem(fref=f12, mref=m0) -> $f12.m0
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Apply(ty=Tuple(fields=[Int32, Int32]), f=FreeVar(fvref=^1), args=[Unit])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Mem(fref=f12, mref=m0) -> $f12.m0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Mem(fref=f12, mref=m1) -> $f12.m1
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Mem(fref=f12, mref=m2) -> $f12.m2
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local FreeVar(fvref=^3) -> $^3
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Lowered function aux6.154 to wasm
// [Wasm] LoweringOrder: [0, 2, 1, 3]
// [Wasm] LoweringOrder: [[1, 2], [3], [3], []]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0), (b1, 1), (b2, 0), (b3, 0)])
// [Wasm] LoweringOrder: [b0, b2, b3, b1]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0), (b1, 0), (b2, 1), (b3, 2)])
// [Wasm] Lowering function aux65
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m0, fills=[Field(index=0, val=Int32(val=0)), Field(index=1, val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f8, mref=m0) -> $f8.m0
// [Wasm] Get Local name Mem(fref=f8, mref=m0) -> $f8.m0
// [Wasm] Get Local name Mem(fref=f8, mref=m0) -> $f8.m0
// [Wasm] Lowering control Jump(target=b3, args=[Mem(fref=f8, mref=m0)])
// [Wasm] Get Local name Mem(fref=f8, mref=m0) -> $f8.m0
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^1), index=0, width=@32), val=Insn(iref=%3))
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m1, fills=[Field(index=0, val=Int32(val=1)), Field(index=1, val=Insn(iref=%0))])
// [Wasm] Get Local name Mem(fref=f8, mref=m1) -> $f8.m1
// [Wasm] Get Local name Mem(fref=f8, mref=m1) -> $f8.m1
// [Wasm] Get Local name Mem(fref=f8, mref=m1) -> $f8.m1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b3, args=[Mem(fref=f8, mref=m1)])
// [Wasm] Get Local name Mem(fref=f8, mref=m1) -> $f8.m1
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^1), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), FreeVar(fvref=^2)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Local Mem(fref=f8, mref=m1) -> $f8.m1
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Mem(fref=f8, mref=m0) -> $f8.m0
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function aux65 to wasm
// [Wasm] LoweringOrder: [0, 2, 1, 3]
// [Wasm] LoweringOrder: [[1, 2], [3], [3], []]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0), (b1, 0), (b2, 1), (b3, 0)])
// [Wasm] LoweringOrder: [b0, b1, b3, b2]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0), (b1, 1), (b2, 0), (b3, 2)])
// [Wasm] Lowering function aux117.167
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Jump(target=b3, args=[Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Jump(target=b3, args=[Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FnParam(fref=f16, fpref=$f.0), FreeVar(fvref=^1)])
// [Wasm] Get Local name FnParam(fref=f16, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f16, fpref=$f.0) -> $$f.0
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function aux117.167 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function filter20
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Unit], ty=Tuple(fields=[Int32, Int32])), mref=m0, fills=[Field(index=0, val=Fn(fref=f5)), Field(index=1, val=FnParam(fref=f0, fpref=$f.0)), Field(index=2, val=FnParam(fref=f0, fpref=$f.1))])
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Lowering control Return(args=[Mem(fref=f0, mref=m0)])
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Local Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Lowered function filter20 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function range58
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=FnParam(fref=f1, fpref=$f.0))])
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Unit], ty=Tuple(fields=[Int32, Int32])), mref=m1, fills=[Field(index=0, val=Fn(fref=f8)), Field(index=1, val=Mem(fref=f1, mref=m0)), Field(index=2, val=FnParam(fref=f1, fpref=$f.1))])
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Lowering control Return(args=[Mem(fref=f1, mref=m1)])
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Local Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Local Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Lowered function range58 to wasm
// [Wasm] LoweringOrder: [8, 0, 2, 4, 3, 5, 1, 6]
// [Wasm] LoweringOrder: [[7], [1, 2], [3, 4], [0], [5], [6], [6], []]
// [Wasm] LoweringOrder: HashMap::of([(b6, 0), (b4, 1), (b1, 2), (b8, 0), (b5, 0), (b2, 0), (b3, 0), (b0, 0)])
// [Wasm] LoweringOrder: [b8, b0, b2, b3, b5, b6, b4, b1]
// [Wasm] LoweringOrder: HashMap::of([(b6, 5), (b4, 0), (b1, 0), (b8, 0), (b5, 4), (b2, 2), (b3, 3), (b0, 1)])
// [Wasm] Lowering function aux25
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m0, fills=[Field(index=0, val=Int32(val=0)), Field(index=1, val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Lowering control Jump(target=b6, args=[Mem(fref=f5, mref=m0)])
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m1, fills=[Field(index=0, val=Int32(val=1)), Field(index=1, val=Insn(iref=%2))])
// [Wasm] Get Local name Mem(fref=f5, mref=m1) -> $f5.m1
// [Wasm] Get Local name Mem(fref=f5, mref=m1) -> $f5.m1
// [Wasm] Get Local name Mem(fref=f5, mref=m1) -> $f5.m1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Jump(target=b5, args=[Mem(fref=f5, mref=m1)])
// [Wasm] Get Local name Mem(fref=f5, mref=m1) -> $f5.m1
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering control Jump(target=b0, args=[Unit])
// [Wasm] Lowering insn Apply(ty=Int32, f=FreeVar(fvref=^2), args=[Insn(iref=%2)])
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%5), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Branch(cond=Insn(iref=%6), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Apply(ty=Tuple(fields=[Int32, Int32]), f=FreeVar(fvref=^1), args=[Unit])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b7, args=[FnParam(fref=f5, fpref=$f.0)])
// [Wasm] Local Mem(fref=f5, mref=m1) -> $f5.m1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function aux25 to wasm
// [Wasm] LoweringOrder: [5, 0, 2, 1, 3]
// [Wasm] LoweringOrder: [[4], [1, 2], [0], [3], []]
// [Wasm] LoweringOrder: HashMap::of([(b1, 1), (b5, 0), (b2, 0), (b3, 1), (b0, 0)])
// [Wasm] LoweringOrder: [b5, b0, b2, b1, b3]
// [Wasm] LoweringOrder: HashMap::of([(b1, 0), (b5, 0), (b2, 2), (b3, 1), (b0, 1)])
// [Wasm] Lowering function fold84
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Jump(target=b3, args=[BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Apply(ty=Int32, f=BlockParam(bref=b0, bpref=$b.1), args=[BlockParam(bref=b0, bpref=$b.2), Insn(iref=%2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%4)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering insn Apply(ty=Tuple(fields=[Int32, Int32]), f=BlockParam(bref=b0, bpref=$b.0), args=[Unit])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f2, fpref=$f.0), FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function fold84 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function add102.169
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f18, fpref=$f.0), FnParam(fref=f18, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f18, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f18, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f18, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f18, fpref=$f.1) -> $$f.1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function add102.169 to wasm
// [Wasm] LoweringOrder: [0, 2, 1, 3]
// [Wasm] LoweringOrder: [[1, 2], [3], [3], []]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0), (b1, 0), (b2, 1), (b3, 0)])
// [Wasm] LoweringOrder: [b0, b1, b3, b2]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0), (b1, 1), (b2, 0), (b3, 2)])
// [Wasm] Lowering function aux111.165
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Jump(target=b3, args=[Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Jump(target=b3, args=[Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FreeVar(fvref=^1), FnParam(fref=f14, fpref=$f.0)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.0) -> $$f.0
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function aux111.165 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function main120
// [Wasm] Lowering insn Call(ty=ClosureFn(params=[Unit], ty=Tuple(fields=[Int32, Int32])), f=f1, args=[Int32(val=0), Int32(val=100)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Call(ty=ClosureFn(params=[Unit], ty=Tuple(fields=[Int32, Int32])), f=f1, args=[Int32(val=0), Int32(val=1000)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Unit], ty=Tuple(fields=[Int32, Int32])), mref=m0, fills=[Field(index=0, val=Fn(fref=f12)), Field(index=1, val=Insn(iref=%0)), Field(index=2, val=Insn(iref=%1)), Field(index=3, val=Int32(val=1))])
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Int32), mref=m1, fills=[Field(index=0, val=Fn(fref=f14)), Field(index=1, val=Int32(val=50))])
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Lowering insn Call(ty=ClosureFn(params=[Unit], ty=Tuple(fields=[Int32, Int32])), f=f0, args=[Mem(fref=f3, mref=m0), Mem(fref=f3, mref=m1)])
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Int32), mref=m2, fills=[Field(index=0, val=Fn(fref=f16)), Field(index=1, val=Int32(val=1200))])
// [Wasm] Get Local name Mem(fref=f3, mref=m2) -> $f3.m2
// [Wasm] Get Local name Mem(fref=f3, mref=m2) -> $f3.m2
// [Wasm] Get Local name Mem(fref=f3, mref=m2) -> $f3.m2
// [Wasm] Lowering insn Call(ty=ClosureFn(params=[Unit], ty=Tuple(fields=[Int32, Int32])), f=f0, args=[Insn(iref=%4), Mem(fref=f3, mref=m2)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Mem(fref=f3, mref=m2) -> $f3.m2
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32, Int32], ty=Int32), mref=m3, fills=[Field(index=0, val=Fn(fref=f18))])
// [Wasm] Get Local name Mem(fref=f3, mref=m3) -> $f3.m3
// [Wasm] Get Local name Mem(fref=f3, mref=m3) -> $f3.m3
// [Wasm] Lowering insn Call(ty=Int32, f=f2, args=[Insn(iref=%6), Mem(fref=f3, mref=m3), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Mem(fref=f3, mref=m3) -> $f3.m3
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Int32(val=10)])
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Local Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Local Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Mem(fref=f3, mref=m2) -> $f3.m2
// [Wasm] Local Mem(fref=f3, mref=m3) -> $f3.m3
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function main120 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f3, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [KnfOpt] freq: {map1: Once, aux6: AsClosure, filter20: Many(2), aux25: AsClosure, concat41: Once, aux46: AsClosure, range58: Many(2), aux65: AsClosure, addx78: Once, aux81: AsClosure, fold84: Many(2), sum99: Once, add102: AsClosure, gt108: Once, aux111: AsClosure, le114: Once, aux117: AsClosure, main120: Once}
// [KnfOpt] Inline threshold 2 12
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 12
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 27
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 27
// [KnfOpt] Inline decision rejected
// [KnfOpt] Knf inline Some(concat41)
// [KnfOpt] Knf inline Some(addx78)
// [KnfOpt] Knf inline Some(map1)
// [KnfOpt] Knf inline Some(gt108)
// [KnfOpt] Inline threshold 2 26
// [KnfOpt] Inline decision rejected
// [KnfOpt] Knf inline Some(le114)
// [KnfOpt] Inline threshold 2 26
// [KnfOpt] Inline decision rejected
// [KnfOpt] Knf inline Some(sum99)
// [KnfOpt] freq: {filter20: Many(2), aux25: AsClosure, range58: Many(2), aux65: AsClosure, fold84: Many(2), main120: Once, aux46.143: Once, aux81.152: Once, aux6.154: AsClosure, aux111.165: AsClosure, aux117.167: AsClosure, add102.169: AsClosure}
// [KnfOpt] Inline threshold 2 12
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 27
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 27
// [KnfOpt] Inline decision rejected
// [KnfOpt] Knf inline Some(aux46)
// [KnfOpt] Knf inline Some(aux81)
// [KnfOpt] Inline threshold 2 26
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 26
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 12
// [KnfOpt] Inline decision rejected
// [KnfOpt] freq: {filter20: Many(2), aux25: AsClosure, range58: Many(2), aux65: AsClosure, fold84: Many(2), main120: Once, aux6.154: AsClosure, aux111.165: AsClosure, aux117.167: AsClosure, add102.169: AsClosure}
// [KnfOpt] Inline threshold 2 12
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 27
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 27
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 26
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 26
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 12
// [KnfOpt] Inline decision rejected
// [KnfOpt] Numbers of let rec: 10 16 6
// [KnfOpt] Give up lambda lifting because of too many let rec produced
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %8: Apply(ty=Tuple(fields=[Int32, Int32]), f=Self(fref=f5), args=[Unit])
// [CoreOpt] eliminated tail rec call %5: Call(ty=Int32, f=f2, args=[FnParam(fref=f2, fpref=$f.0), FnParam(fref=f2, fpref=$f.1), Insn(iref=%4)])
// [CoreOpt] Call frequnce: FnCallFreq({f12: MaybeInClosure, f8: MaybeInClosure, f16: MaybeInClosure, f0: Multiple, f1: Multiple, f5: MaybeInClosure, f2: Once, f18: MaybeInClosure, f14: MaybeInClosure, f3: Once, f20: Once})
