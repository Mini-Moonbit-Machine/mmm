// [Asm] pre_assigned_registers: Insn(iref=%3) -> v9, FnParam(fref=f12, fpref=$f.0) -> v2, BlockParam(bref=b3, bpref=$b.0) -> v12, Insn(iref=%2) -> v8, Self(fref=f12) -> v0, FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, Insn(iref=%1) -> v7, Mem(fref=f12, mref=m0) -> v5, Insn(iref=%5) -> v10, Insn(iref=%0) -> v6, Insn(iref=%4) -> v11
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Asm] defs: [s10]
// [Asm] live_set: [v4, zero]
// [Asm] move_origin: [v4]
// [Asm] defined: s10 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v13, zero]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v13, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v13]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: [a0]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v12]
// [Asm] move_origin: [v11]
// [Asm] defined: v12 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v8]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, v8]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v5, v16, v8]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v12]
// [Asm] move_origin: [v5]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v12]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, s11, zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, s11, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v0, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v4, s11, zero, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: s10 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v19, v4, s11, zero]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v19, v4, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v19, v4, s11, zero, a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, s11, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v6, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v4, v6, s11, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v4, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v12]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux.232"];
// [Asm]   r0 [label="s10", color=blue];
// [Asm]   r20 [label="v8 ← a0", color=green];
// [Asm]   r23 [label="v0 ← a1", color=green];
// [Asm]   r3 [label="v13 ← a1", color=green];
// [Asm]   r9 [label="a5", color=blue];
// [Asm]   r26 [label="v19 ← a1", color=green];
// [Asm]   r27 [label="v6 ← a0", color=green];
// [Asm]   r6 [label="a2", color=blue];
// [Asm]   r13 [label="t1", color=blue];
// [Asm]   r4 [label="a0", color=blue];
// [Asm]   r1 [label="v4 ← s0", color=green];
// [Asm]   r28 [label="v7 ← a1", color=green];
// [Asm]   r11 [label="a7", color=blue];
// [Asm]   r7 [label="a3", color=blue];
// [Asm]   r10 [label="a6", color=blue];
// [Asm]   r22 [label="v16 ← a2", color=green];
// [Asm]   r14 [label="t2", color=blue];
// [Asm]   r8 [label="a4", color=blue];
// [Asm]   r5 [label="a1", color=blue];
// [Asm]   r24 [label="v2 ← a0", color=green];
// [Asm]   r15 [label="t3", color=blue];
// [Asm]   r25 [label="v3 ← a0", color=green];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="t4", color=blue];
// [Asm]   r18 [label="v12 ← a0", color=green];
// [Asm]   r19 [label="v5 ← a1", color=green];
// [Asm]   r17 [label="v11 ← a0", color=green];
// [Asm]   r21 [label="s11", color=blue];
// [Asm]   r12 [label="t0", color=blue];
// [Asm]   r9 -- r21;
// [Asm]   r19 -- r20;
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r21;
// [Asm]   r21 -- r24;
// [Asm]   r4 -- r13;
// [Asm]   r5 -- r21;
// [Asm]   r4 -- r16;
// [Asm]   r1 -- r26;
// [Asm]   r7 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r26;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r4;
// [Asm]   r21 -- r28;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r0 -- r21;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r27 -- r28;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r19 -- r21;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r28;
// [Asm]   r21 -- r23;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r28;
// [Asm]   r20 -- r22;
// [Asm]   r2 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r23 -- r25;
// [Asm]   r3 -- r4;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r15 -- r21;
// [Asm]   r1 -- r21;
// [Asm]   r21 -- r27;
// [Asm]   r14 -- r21;
// [Asm]   r19 -- r22;
// [Asm]   r21 -- r25;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r1 -- r25;
// [Asm]   r1 -- r27;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r21 -- r26;
// [Asm]   r2 -- r13;
// [Asm]   r4 -- r7;
// [Asm]   r23 -- r24;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r8;
// [Asm]   r8 -- r21;
// [Asm]   r20 -- r28;
// [Asm]   r16 -- r21;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r12 -- r21;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r24;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r13 -- r21;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r26;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r20 -- r21;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r23;
// [Asm]   r10 -- r21;
// [Asm]   r2 -- r27;
// [Asm]   r11 -- r21;
// [Asm]   comment = "0:s10-> 1:v4-> 2:zero-> 4:a0-> 5:a1-> 21:s11-> 6:a2-> 7:a3-> 8:a4-> 9:a5-> 10:a6-> 11:a7-> 12:t0-> 13:t1-> 14:t2-> 15:t3-> 16:t4-> 26:v19-> 20:v8-> 28:v7-> 27:v6-> 23:v0-> 25:v3-> 24:v2-> 3:v13-> 19:v5-> 22:v16-> 17:v11-> 18:v12"
// [Asm]   comment = "v8<-a0;v0<-a1;v13<-a1;v19<-a1;v6<-a0;v4<-s0;v7<-a1;v16<-a2;v2<-a0;v3<-a0;v12<-a0;v5<-a1;v11<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux.232"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv s10, v4 ->   mv s10, s0
// [Asm] subst   ld v13, 0(v4) ->   ld a1, 0(s0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   jalr v13 ->   jalr a1
// [Asm] subst   addi v5, s11, -8 ->   addi a1, s11, -8
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a1, -8
// [Asm] subst   li v16, 1 ->   li a2, 1
// [Asm] subst   sw v16, 0(v5) ->   sw a2, 0(a1)
// [Asm] subst   sw v8, 4(v5) ->   sw a0, 4(a1)
// [Asm] subst   mv v12, v5 ->   mv a0, a1
// [Asm] subst   j .aux.232_3 ->   j .aux.232_3
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   ld v3, 8(v0) ->   ld a0, 8(a1)
// [Asm] subst   ld v4, 16(v0) ->   ld s0, 16(a1)
// [Asm] subst   mv s10, v3 ->   mv s10, a0
// [Asm] subst   ld v19, 0(v3) ->   ld a1, 0(a0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   jalr v19 ->   jalr a1
// [Asm] subst   lw v7, 0(v6) ->   lw a1, 0(a0)
// [Asm] subst   lw v8, 4(v6) ->   lw a0, 4(a0)
// [Asm] subst   bne v7, zero, .aux.232_2 ->   bne a1, zero, .aux.232_2
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v10, Insn(iref=%3) -> v9, FnParam(fref=f8, fpref=$f.0) -> v2, Mem(fref=f8, mref=m0) -> v5, BlockParam(bref=b3, bpref=$b.0) -> v13, Insn(iref=%2) -> v12, FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, Insn(iref=%1) -> v8, Self(fref=f8) -> v0, Insn(iref=%5) -> v11, Mem(fref=f8, mref=m1) -> v6, Insn(iref=%0) -> v7
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), FreeVar(fvref=^2)])
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move_origin: [v5]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v13]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v13]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, s11, zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, s11, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v0, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v7, v4, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v3, s11, v9, v7]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [s11, v7]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6, v7]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v6, v7]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v6, v16, v7]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move_origin: [v6]
// [Asm] defined: v13 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux.48"];
// [Asm]   r0 [label="v5 ← a0", color=green];
// [Asm]   r5 [label="v0 ← a1", color=green];
// [Asm]   r3 [label="v13 ← a0", color=green];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r9 [label="v7 ← a2", color=green];
// [Asm]   r6 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a0", color=blue];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r11 [label="v6 ← a0", color=green];
// [Asm]   r7 [label="v3 ← a0", color=green];
// [Asm]   r10 [label="v9 ← a1", color=green];
// [Asm]   r12 [label="v16 ← a1", color=green];
// [Asm]   r8 [label="v4 ← a1", color=green];
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r10;
// [Asm]   r0 -- r1;
// [Asm]   r11 -- r12;
// [Asm]   r2 -- r6;
// [Asm]   r9 -- r11;
// [Asm]   r5 -- r6;
// [Asm]   r5 -- r7;
// [Asm]   r9 -- r10;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r7 -- r9;
// [Asm]   r2 -- r9;
// [Asm]   r7 -- r8;
// [Asm]   r7 -- r10;
// [Asm]   r9 -- r12;
// [Asm]   r1 -- r7;
// [Asm]   r2 -- r8;
// [Asm]   r8 -- r9;
// [Asm]   r1 -- r2;
// [Asm]   comment = "0:v5-> 1:zero-> 2:s11-> 5:v0-> 6:v2-> 7:v3-> 8:v4-> 9:v7-> 10:v9-> 11:v6-> 12:v16-> 4:a0-> 3:v13"
// [Asm]   comment = "v5<-a0;v0<-a1;v13<-a0;v7<-a2;v2<-a0;v6<-a0;v3<-a0;v9<-a1;v16<-a1;v4<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux.48"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v9, v7, 1 ->   addi a1, a2, 1
// [Asm] subst   sw v9, 0(v3) ->   sw a1, 0(a0)
// [Asm] subst   addi v6, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v6, -8 ->   andi s11, a0, -8
// [Asm] subst   li v16, 1 ->   li a1, 1
// [Asm] subst   sw v16, 0(v6) ->   sw a1, 0(a0)
// [Asm] subst   sw v7, 4(v6) ->   sw a2, 4(a0)
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   ld v3, 8(v0) ->   ld a0, 8(a1)
// [Asm] subst   lw v4, 16(v0) ->   lw a1, 16(a1)
// [Asm] subst   lw v7, 0(v3) ->   lw a2, 0(a0)
// [Asm] subst   beq v7, v4, .aux.48_1 ->   beq a2, a1, .aux.48_1
// [Asm] subst   addi v5, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a0, -8
// [Asm] subst   sw zero, 0(v5) ->   sw zero, 0(a0)
// [Asm] subst   sw zero, 4(v5) ->   sw zero, 4(a0)
// [Asm] subst   j .aux.48_3 ->   j .aux.48_3
// [Asm] pre_assigned_registers: FnParam(fref=f16, fpref=$f.0) -> v2, Insn(iref=%4) -> v13, Insn(iref=%3) -> v10, Self(fref=f16) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v14, Insn(iref=%2) -> v9, FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, Insn(iref=%1) -> v8, Mem(fref=f16, mref=m0) -> v5, Insn(iref=%6) -> v12, Mem(fref=f16, mref=m1) -> v6, Insn(iref=%5) -> v11, Insn(iref=%0) -> v7
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v14]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move_origin: [v5]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v14]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, s11, zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, s11, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v0, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v4, s11, zero, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: s10 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v4, s11, zero, v22]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, zero, v22]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, s11, zero, a0, v22]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v4, s11, zero, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v4, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v4, s11, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, zero, v9]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v4, s11, v9]
// [Asm] move_origin: [v4]
// [Asm] defined: s10 is X
// [Asm] defs: [v18]
// [Asm] live_set: [s11, v18, v9]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [s11, v18, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [s11, v18, a0]
// [Asm] move_origin: [v9]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [s11, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v11, s11]
// [Asm] move_origin: [a0]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, s11]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v11, v6]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v6]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v11, v6, v17]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v6]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move_origin: [v6]
// [Asm] defined: v14 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux.320"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="t2", color=blue];
// [Asm]   r23 [label="v7 ← a0", color=green];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r9 [label="s10", color=blue];
// [Asm]   r26 [label="v18 ← a1", color=green];
// [Asm]   r27 [label="v11 ← a0", color=green];
// [Asm]   r6 [label="v2 ← a0", color=green];
// [Asm]   r13 [label="a3", color=blue];
// [Asm]   r4 [label="v14 ← a0", color=green];
// [Asm]   r1 [label="v5 ← a0", color=green];
// [Asm]   r29 [label="v17 ← a2", color=green];
// [Asm]   r28 [label="v6 ← a1", color=green];
// [Asm]   r11 [label="a1", color=blue];
// [Asm]   r7 [label="v3 ← a0", color=green];
// [Asm]   r10 [label="v22 ← a1", color=green];
// [Asm]   r22 [label="t4", color=blue];
// [Asm]   r14 [label="a4", color=blue];
// [Asm]   r8 [label="v4 ← s0", color=green];
// [Asm]   r5 [label="v0 ← a1", color=green];
// [Asm]   r15 [label="a5", color=blue];
// [Asm]   r24 [label="v8 ← a1", color=green];
// [Asm]   r25 [label="v9 ← a0", color=green];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="a6", color=blue];
// [Asm]   r18 [label="t0", color=blue];
// [Asm]   r19 [label="t1", color=blue];
// [Asm]   r21 [label="t3", color=blue];
// [Asm]   r17 [label="a7", color=blue];
// [Asm]   r12 [label="a2", color=blue];
// [Asm]   r0 -- r15;
// [Asm]   r3 -- r19;
// [Asm]   r0 -- r13;
// [Asm]   r9 -- r25;
// [Asm]   r3 -- r25;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r2 -- r18;
// [Asm]   r27 -- r29;
// [Asm]   r3 -- r6;
// [Asm]   r0 -- r17;
// [Asm]   r8 -- r19;
// [Asm]   r8 -- r9;
// [Asm]   r3 -- r12;
// [Asm]   r0 -- r14;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r0 -- r21;
// [Asm]   r3 -- r11;
// [Asm]   r25 -- r26;
// [Asm]   r2 -- r16;
// [Asm]   r0 -- r22;
// [Asm]   r3 -- r28;
// [Asm]   r27 -- r28;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r8 -- r20;
// [Asm]   r8 -- r25;
// [Asm]   r0 -- r19;
// [Asm]   r0 -- r16;
// [Asm]   r3 -- r5;
// [Asm]   r8 -- r12;
// [Asm]   r3 -- r22;
// [Asm]   r3 -- r8;
// [Asm]   r8 -- r24;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r8 -- r17;
// [Asm]   r0 -- r26;
// [Asm]   r8 -- r16;
// [Asm]   r8 -- r13;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r8;
// [Asm]   r3 -- r13;
// [Asm]   r2 -- r12;
// [Asm]   r8 -- r18;
// [Asm]   r2 -- r8;
// [Asm]   r8 -- r23;
// [Asm]   r3 -- r20;
// [Asm]   r3 -- r10;
// [Asm]   r0 -- r5;
// [Asm]   r2 -- r21;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r28 -- r29;
// [Asm]   r3 -- r14;
// [Asm]   r3 -- r27;
// [Asm]   r2 -- r13;
// [Asm]   r8 -- r10;
// [Asm]   r2 -- r17;
// [Asm]   r0 -- r10;
// [Asm]   r23 -- r24;
// [Asm]   r3 -- r17;
// [Asm]   r8 -- r22;
// [Asm]   r5 -- r7;
// [Asm]   r8 -- r21;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r8 -- r11;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r7;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r24;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r24 -- r25;
// [Asm]   r0 -- r20;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r23;
// [Asm]   r0 -- r18;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:a0-> 2:zero-> 3:s11-> 5:v0-> 6:v2-> 7:v3-> 8:v4-> 10:v22-> 11:a1-> 12:a2-> 13:a3-> 14:a4-> 15:a5-> 16:a6-> 17:a7-> 18:t0-> 19:t1-> 20:t2-> 21:t3-> 22:t4-> 9:s10-> 25:v9-> 24:v8-> 23:v7-> 26:v18-> 1:v5-> 27:v11-> 28:v6-> 29:v17-> 4:v14"
// [Asm]   comment = "v7<-a0;v18<-a1;v11<-a0;v2<-a0;v14<-a0;v5<-a0;v17<-a2;v6<-a1;v3<-a0;v22<-a1;v4<-s0;v0<-a1;v8<-a1;v9<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux.320"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   addi v5, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a0, -8
// [Asm] subst   sw zero, 0(v5) ->   sw zero, 0(a0)
// [Asm] subst   sw zero, 4(v5) ->   sw zero, 4(a0)
// [Asm] subst   j .aux.320_3 ->   j .aux.320_3
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   ld v3, 8(v0) ->   ld a0, 8(a1)
// [Asm] subst   ld v4, 16(v0) ->   ld s0, 16(a1)
// [Asm] subst   mv s10, v3 ->   mv s10, a0
// [Asm] subst   ld v22, 0(v3) ->   ld a1, 0(a0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   jalr v22 ->   jalr a1
// [Asm] subst   lw v8, 0(v7) ->   lw a1, 0(a0)
// [Asm] subst   lw v9, 4(v7) ->   lw a0, 4(a0)
// [Asm] subst   beq v8, zero, .aux.320_1 ->   beq a1, zero, .aux.320_1
// [Asm] subst   mv s10, v4 ->   mv s10, s0
// [Asm] subst   ld v18, 0(v4) ->   ld a1, 0(s0)
// [Asm] subst   jalr v18 ->   jalr a1
// [Asm] subst   addi v6, s11, -8 ->   addi a1, s11, -8
// [Asm] subst   andi s11, v6, -8 ->   andi s11, a1, -8
// [Asm] subst   li v17, 1 ->   li a2, 1
// [Asm] subst   sw v17, 0(v6) ->   sw a2, 0(a1)
// [Asm] subst   sw v11, 4(v6) ->   sw a0, 4(a1)
// [Asm] subst   mv v14, v6 ->   mv a0, a1
// [Asm] pre_assigned_registers: FnParam(fref=f0, fpref=$f.1) -> v3, Self(fref=f0) -> v0, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%0) -> v5, Mem(fref=f0, mref=m0) -> v4
// [Asm] defs: []
// [Asm] live_set: [a1, s11, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, s11, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v7, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of filter.15"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r5 [label="v7 ← a3", color=green];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r4 [label="v4 ← a2", color=green];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r3 [label="v3 ← a1", color=green];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r4;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:v2-> 1:a1-> 2:s11-> 3:v3-> 4:v4-> 5:v7-> 6:a0"
// [Asm]   comment = "v2<-a0;v7<-a3;v4<-a2;v3<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of filter.15"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v4, s11, -24 ->   addi a2, s11, -24
// [Asm] subst   andi s11, v4, -8 ->   andi s11, a2, -8
// [Asm] subst   la v7, aux.18 ->   la a3, aux.18
// [Asm] subst   sd v7, 0(v4) ->   sd a3, 0(a2)
// [Asm] subst   sd v2, 8(v4) ->   sd a0, 8(a2)
// [Asm] subst   sd v3, 16(v4) ->   sd a1, 16(a2)
// [Asm] subst   mv a0, v4 ->   mv a0, a2
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v7, Mem(fref=f1, mref=m0) -> v4, FnParam(fref=f1, fpref=$f.1) -> v3, Self(fref=f1) -> v0, FnParam(fref=f1, fpref=$f.0) -> v2, Mem(fref=f1, mref=m1) -> v5, Insn(iref=%0) -> v6
// [Asm] defs: []
// [Asm] live_set: [a1, s11, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, s11, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v4, v5, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v4, v5, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of range.43"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r6 [label="v9 ← a3", color=green];
// [Asm]   r5 [label="v5 ← a0", color=green];
// [Asm]   r4 [label="v4 ← a2", color=green];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r3 [label="v3 ← a1", color=green];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r7 [label="a0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r5;
// [Asm]   r4 -- r6;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r6;
// [Asm]   r2 -- r3;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:v2-> 1:a1-> 2:s11-> 3:v3-> 4:v4-> 5:v5-> 6:v9-> 7:a0"
// [Asm]   comment = "v2<-a0;v9<-a3;v5<-a0;v4<-a2;v3<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of range.43"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v4, s11, -4 ->   addi a2, s11, -4
// [Asm] subst   andi s11, v4, -8 ->   andi s11, a2, -8
// [Asm] subst   sw v2, 0(v4) ->   sw a0, 0(a2)
// [Asm] subst   addi v5, s11, -24 ->   addi a0, s11, -24
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a0, -8
// [Asm] subst   la v9, aux.48 ->   la a3, aux.48
// [Asm] subst   sd v9, 0(v5) ->   sd a3, 0(a0)
// [Asm] subst   sd v4, 8(v5) ->   sd a2, 8(a0)
// [Asm] subst   sd v3, 16(v5) ->   sd a1, 16(a0)
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, BlockParam(bref=b0, bpref=$b.0) -> v7, Insn(iref=%5) -> v12, Insn(iref=%0) -> v8, Insn(iref=%4) -> v16, Mem(fref=f5, mref=m1) -> v6, Insn(iref=%3) -> v11, FnParam(fref=f5, fpref=$f.0) -> v2, Mem(fref=f5, mref=m0) -> v5, Self(fref=f5) -> v0, Insn(iref=%7) -> v14, BlockParam(bref=b5, bpref=$b.0) -> v15, BlockParam(bref=b6, bpref=$b.0) -> v17, Insn(iref=%2) -> v10, Insn(iref=%1) -> v9, Insn(iref=%6) -> v13
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%5), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Asm] defs: [s10]
// [Asm] live_set: [zero, v4, s11, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: s10 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v25, zero, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: []
// [Asm] live_set: [v25, zero, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v25, zero, a0, v4, s11, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [zero, v8, v4, s11, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v8, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [zero, v8, v4, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v10, zero, v4, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, v10, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6, v10]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v6, v10]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v6, v10, v20]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v10]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v15]
// [Asm] move_origin: [v6]
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, s11, zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v0, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v4, s11, zero, v7]
// [Asm] move_origin: [v2]
// [Asm] defined: v7 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v10, zero, v4, s11, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: s10 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v10, v21, zero, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v10, v21, zero, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v10, v21, zero, a0, v4, s11, v3]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v10, zero, a0, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v12]
// [Asm] live_set: [v10, zero, v4, s11, v12, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v10, zero, v4, s11, v12, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, s11, v10, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v17]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v4, s11, zero, v7]
// [Asm] move_origin: [zero]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v4, s11, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v17]
// [Asm] move_origin: [v5]
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v17]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v17]
// [Asm] move_origin: [v15]
// [Asm] defined: v17 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux.18"];
// [Asm]   r0 [label="s10", color=blue];
// [Asm]   r20 [label="v9 ← a0", color=green];
// [Asm]   r23 [label="v20 ← a1", color=green];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r9 [label="a3", color=blue];
// [Asm]   r26 [label="v2 ← a0", color=green];
// [Asm]   r27 [label="v7 ← a0", color=green];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r13 [label="a7", color=blue];
// [Asm]   r4 [label="v3 ← s1", color=green];
// [Asm]   r29 [label="v12 ← a0", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r28 [label="v21 ← a1", color=green];
// [Asm]   r11 [label="a5", color=blue];
// [Asm]   r7 [label="a1", color=blue];
// [Asm]   r10 [label="a4", color=blue];
// [Asm]   r22 [label="v6 ← a0", color=green];
// [Asm]   r14 [label="t0", color=blue];
// [Asm]   r8 [label="a2", color=blue];
// [Asm]   r30 [label="v5 ← a0", color=green];
// [Asm]   r5 [label="v25 ← a1", color=green];
// [Asm]   r15 [label="t1", color=blue];
// [Asm]   r24 [label="v15 ← a0", color=green];
// [Asm]   r25 [label="v0 ← a1", color=green];
// [Asm]   r2 [label="v4 ← s0", color=green];
// [Asm]   r16 [label="t2", color=blue];
// [Asm]   r18 [label="t4", color=blue];
// [Asm]   r19 [label="v8 ← a1", color=green];
// [Asm]   r31 [label="v17 ← a0", color=green];
// [Asm]   r17 [label="t3", color=blue];
// [Asm]   r21 [label="v10 ← s2", color=green];
// [Asm]   r12 [label="a6", color=blue];
// [Asm]   r6 -- r21;
// [Asm]   r17 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r26;
// [Asm]   r7 -- r21;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r30;
// [Asm]   r3 -- r16;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r18 -- r21;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r27;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r6 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r30;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r4 -- r28;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r29;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r27;
// [Asm]   r2 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r25;
// [Asm]   r4 -- r8;
// [Asm]   r8 -- r21;
// [Asm]   r16 -- r21;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r12 -- r21;
// [Asm]   r0 -- r4;
// [Asm]   r21 -- r22;
// [Asm]   r13 -- r21;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r6 -- r25;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r26;
// [Asm]   r6 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r6 -- r14;
// [Asm]   r21 -- r28;
// [Asm]   r21 -- r29;
// [Asm]   r3 -- r12;
// [Asm]   r0 -- r21;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r20;
// [Asm]   r6 -- r16;
// [Asm]   r25 -- r26;
// [Asm]   r3 -- r28;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r12;
// [Asm]   r1 -- r28;
// [Asm]   r21 -- r23;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r8;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r2 -- r14;
// [Asm]   r3 -- r21;
// [Asm]   r15 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r6 -- r28;
// [Asm]   r14 -- r21;
// [Asm]   r1 -- r29;
// [Asm]   r22 -- r23;
// [Asm]   r3 -- r29;
// [Asm]   r3 -- r20;
// [Asm]   r1 -- r25;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r4 -- r17;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r10;
// [Asm]   r2 -- r19;
// [Asm]   r4 -- r26;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r3;
// [Asm]   r20 -- r21;
// [Asm]   r10 -- r21;
// [Asm]   r2 -- r27;
// [Asm]   r11 -- r21;
// [Asm]   r4 -- r19;
// [Asm]   r19 -- r20;
// [Asm]   r9 -- r21;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:s10-> 1:zero-> 2:v4-> 3:s11-> 4:v3-> 21:v10-> 6:a0-> 7:a1-> 8:a2-> 9:a3-> 10:a4-> 11:a5-> 12:a6-> 13:a7-> 14:t0-> 15:t1-> 16:t2-> 17:t3-> 18:t4-> 28:v21-> 5:v25-> 20:v9-> 19:v8-> 29:v12-> 25:v0-> 26:v2-> 27:v7-> 22:v6-> 23:v20-> 30:v5-> 24:v15-> 31:v17"
// [Asm]   comment = "v9<-a0;v20<-a1;v2<-a0;v7<-a0;v3<-s1;v12<-a0;v21<-a1;v6<-a0;v5<-a0;v25<-a1;v15<-a0;v0<-a1;v4<-s0;v8<-a1;v17<-a0;v10<-s2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux.18"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv s10, v3 ->   mv s10, s1
// [Asm] subst   ld v25, 0(v3) ->   ld a1, 0(s1)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   jalr v25 ->   jalr a1
// [Asm] subst   mv v8, a0 ->   mv a1, a0
// [Asm] subst   lw v9, 0(v8) ->   lw a0, 0(a1)
// [Asm] subst   lw v10, 4(v8) ->   lw s2, 4(a1)
// [Asm] subst   beq v9, zero, .aux.18_1 ->   beq a0, zero, .aux.18_1
// [Asm] subst   addi v6, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v6, -8 ->   andi s11, a0, -8
// [Asm] subst   li v20, 1 ->   li a1, 1
// [Asm] subst   sw v20, 0(v6) ->   sw a1, 0(a0)
// [Asm] subst   sw v10, 4(v6) ->   sw s2, 4(a0)
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   ld v3, 8(v0) ->   ld s1, 8(a1)
// [Asm] subst   ld v4, 16(v0) ->   ld s0, 16(a1)
// [Asm] subst   mv s10, v4 ->   mv s10, s0
// [Asm] subst   ld v21, 0(v4) ->   ld a1, 0(s0)
// [Asm] subst   mv a0, v10 ->   mv a0, s2
// [Asm] subst   jalr v21 ->   jalr a1
// [Asm] subst   bne v12, zero, .aux.18_4 ->   bne a0, zero, .aux.18_4
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v7, zero ->   mv a0, zero
// [Asm] subst   j .aux.18_0 ->   j .aux.18_0
// [Asm] subst   addi v5, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a0, -8
// [Asm] subst   sw zero, 0(v5) ->   sw zero, 0(a0)
// [Asm] subst   sw zero, 4(v5) ->   sw zero, 4(a0)
// [Asm] subst   j .aux.18_6 ->   j .aux.18_6
// [Asm] pre_assigned_registers: Insn(iref=%9) -> v17, Self(fref=f2) -> v0, Insn(iref=%8) -> v16, BlockParam(bref=b0, bpref=$b.0) -> v5, BlockParam(bref=b0, bpref=$b.1) -> v6, BlockParam(bref=b0, bpref=$b.2) -> v7, Insn(iref=%5) -> v13, Insn(iref=%0) -> v8, Insn(iref=%4) -> v12, Insn(iref=%3) -> v11, Insn(iref=%7) -> v15, BlockParam(bref=b5, bpref=$b.0) -> v18, BlockParam(bref=b6, bpref=$b.0) -> v19, Insn(iref=%2) -> v10, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%1) -> v9, Insn(iref=%6) -> v14, FnParam(fref=f2, fpref=$f.0) -> v2, FnParam(fref=f2, fpref=$f.2) -> v4
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%6), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Asm] defs: [v19]
// [Asm] live_set: [v19]
// [Asm] move_origin: [v7]
// [Asm] defined: v19 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v5, zero, v7, v6]
// [Asm] move_origin: [v5]
// [Asm] defined: s10 is X
// [Asm] defs: [v30]
// [Asm] live_set: [v5, zero, v30, v7, v6]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v30, v7, v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v30, v7, v6]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0, v7, v6]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v7, v8, v6]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v6]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero, v7, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, v10, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v19]
// [Asm] move_origin: [v18]
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v19]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v19]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v18]
// [Asm] move_origin: [v12]
// [Asm] defined: v18 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v5, v6, v15, v12, zero]
// [Asm] move_origin: [v6]
// [Asm] defined: s10 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v5, v6, v15, v12, zero, v20]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v15, v12, zero, v20]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, v6, v15, zero, a0, v20]
// [Asm] move_origin: [v12]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, v6, a1, zero, a0, v20]
// [Asm] move_origin: [v15]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v17]
// [Asm] live_set: [v5, v6, v17, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v17, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v17, zero]
// [Asm] move_origin: [v5]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, v17, zero]
// [Asm] move_origin: [v6]
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v17]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v5, v10, zero, v7, v6]
// [Asm] move_origin: [v6]
// [Asm] defined: s10 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v5, v10, zero, v26, v7, v6]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v26, v7, v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, v10, zero, a0, v26, v6]
// [Asm] move_origin: [v7]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, a0, v26, v6, a1]
// [Asm] move_origin: [v10]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0, v6]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v12]
// [Asm] live_set: [v5, zero, v6, v12]
// [Asm] move_origin: [a0]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v6, v12]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v5, zero, v6, v12]
// [Asm] move_origin: [v5]
// [Asm] defined: s10 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v5, zero, v6, v12, v24]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v6, v12, v24]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v6, v12, v24]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0, v6, v12]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v13]
// [Asm] live_set: [v5, zero, v13, v6, v12]
// [Asm] move_origin: [a0]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v13, v6, v12]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v5, v14, zero, v13, v6, v12]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v5, v14, zero, v6, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, v12, v15, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move_origin: [v3]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v4]
// [Asm] defined: v7 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of fold.63"];
// [Asm]   r0 [label="v19 ← a0", color=green];
// [Asm]   r33 [label="v3 ← a1", color=green];
// [Asm]   r9 [label="a2", color=blue];
// [Asm]   r26 [label="v20 ← a2", color=green];
// [Asm]   r6 [label="v30 ← a1", color=green];
// [Asm]   r13 [label="a6", color=blue];
// [Asm]   r4 [label="v7 ← s1", color=green];
// [Asm]   r29 [label="v24 ← a1", color=green];
// [Asm]   r7 [label="a0", color=blue];
// [Asm]   r10 [label="a3", color=blue];
// [Asm]   r8 [label="a1", color=blue];
// [Asm]   r5 [label="v6 ← s2", color=green];
// [Asm]   r32 [label="v2 ← a0", color=green];
// [Asm]   r24 [label="v15 ← a1", color=green];
// [Asm]   r15 [label="t0", color=blue];
// [Asm]   r31 [label="v14 ← a0", color=green];
// [Asm]   r17 [label="t2", color=blue];
// [Asm]   r12 [label="a5", color=blue];
// [Asm]   r20 [label="v8 ← a1", color=green];
// [Asm]   r23 [label="v18 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r27 [label="v17 ← a0", color=green];
// [Asm]   r1 [label="s10", color=blue];
// [Asm]   r28 [label="v26 ← a2", color=green];
// [Asm]   r11 [label="a4", color=blue];
// [Asm]   r34 [label="v4 ← a2", color=green];
// [Asm]   r22 [label="v10 ← a1", color=green];
// [Asm]   r14 [label="a7", color=blue];
// [Asm]   r30 [label="v13 ← a1", color=green];
// [Asm]   r25 [label="v12 ← s1", color=green];
// [Asm]   r2 [label="v5 ← s0", color=green];
// [Asm]   r16 [label="t1", color=blue];
// [Asm]   r18 [label="t3", color=blue];
// [Asm]   r19 [label="t4", color=blue];
// [Asm]   r21 [label="v9 ← a0", color=green];
// [Asm]   r2 -- r20;
// [Asm]   r12 -- r25;
// [Asm]   r2 -- r31;
// [Asm]   r5 -- r21;
// [Asm]   r9 -- r25;
// [Asm]   r16 -- r25;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r7 -- r25;
// [Asm]   r18 -- r25;
// [Asm]   r5 -- r18;
// [Asm]   r30 -- r31;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r32;
// [Asm]   r3 -- r11;
// [Asm]   r5 -- r29;
// [Asm]   r2 -- r16;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r31;
// [Asm]   r3 -- r34;
// [Asm]   r15 -- r25;
// [Asm]   r3 -- r5;
// [Asm]   r2 -- r34;
// [Asm]   r5 -- r31;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r33;
// [Asm]   r2 -- r6;
// [Asm]   r24 -- r31;
// [Asm]   r25 -- r29;
// [Asm]   r3 -- r30;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r3 -- r13;
// [Asm]   r7 -- r10;
// [Asm]   r4 -- r28;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r3 -- r33;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r27;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r17;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r32 -- r34;
// [Asm]   r5 -- r14;
// [Asm]   r3 -- r7;
// [Asm]   r2 -- r22;
// [Asm]   r10 -- r25;
// [Asm]   r1 -- r5;
// [Asm]   r8 -- r32;
// [Asm]   r2 -- r24;
// [Asm]   r21 -- r22;
// [Asm]   r7 -- r8;
// [Asm]   r24 -- r25;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r11 -- r25;
// [Asm]   r5 -- r34;
// [Asm]   r6 -- r7;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r7 -- r29;
// [Asm]   r3 -- r25;
// [Asm]   r2 -- r26;
// [Asm]   r4 -- r5;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r7 -- r24;
// [Asm]   r3 -- r12;
// [Asm]   r7 -- r26;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r22;
// [Asm]   r7 -- r13;
// [Asm]   r5 -- r19;
// [Asm]   r25 -- r30;
// [Asm]   r4 -- r20;
// [Asm]   r25 -- r26;
// [Asm]   r3 -- r28;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r17 -- r25;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r8 -- r25;
// [Asm]   r13 -- r25;
// [Asm]   r24 -- r26;
// [Asm]   r7 -- r28;
// [Asm]   r3 -- r22;
// [Asm]   r7 -- r17;
// [Asm]   r33 -- r34;
// [Asm]   r8 -- r28;
// [Asm]   r2 -- r28;
// [Asm]   r7 -- r22;
// [Asm]   r2 -- r29;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r7 -- r19;
// [Asm]   r5 -- r28;
// [Asm]   r2 -- r14;
// [Asm]   r32 -- r33;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r26;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r9;
// [Asm]   r9 -- r33;
// [Asm]   r14 -- r25;
// [Asm]   r22 -- r28;
// [Asm]   r7 -- r15;
// [Asm]   r3 -- r29;
// [Asm]   r7 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r25 -- r31;
// [Asm]   r1 -- r25;
// [Asm]   r2 -- r21;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r30;
// [Asm]   r9 -- r32;
// [Asm]   r8 -- r26;
// [Asm]   r5 -- r25;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r7 -- r12;
// [Asm]   r5 -- r30;
// [Asm]   r19 -- r25;
// [Asm]   r2 -- r3;
// [Asm]   r20 -- r21;
// [Asm]   r7 -- r14;
// [Asm]   r2 -- r27;
// [Asm]   r5 -- r15;
// [Asm]   r4 -- r19;
// [Asm]   r1 -- r24;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v19-> 1:s10-> 2:v5-> 3:zero-> 4:v7-> 5:v6-> 22:v10-> 7:a0-> 28:v26-> 8:a1-> 25:v12-> 9:a2-> 10:a3-> 11:a4-> 12:a5-> 13:a6-> 14:a7-> 15:t0-> 16:t1-> 17:t2-> 18:t3-> 19:t4-> 24:v15-> 26:v20-> 6:v30-> 21:v9-> 20:v8-> 29:v24-> 31:v14-> 30:v13-> 27:v17-> 32:v2-> 33:v3-> 34:v4-> 23:v18"
// [Asm]   comment = "v19<-a0;v3<-a1;v20<-a2;v30<-a1;v7<-s1;v24<-a1;v6<-s2;v2<-a0;v15<-a1;v14<-a0;v8<-a1;v18<-a0;v17<-a0;v26<-a2;v4<-a2;v10<-a1;v13<-a1;v12<-s1;v5<-s0;v9<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of fold.63"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v19, v7 ->   mv a0, s1
// [Asm] subst   mv s10, v5 ->   mv s10, s0
// [Asm] subst   ld v30, 0(v5) ->   ld a1, 0(s0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   jalr v30 ->   jalr a1
// [Asm] subst   mv v8, a0 ->   mv a1, a0
// [Asm] subst   lw v9, 0(v8) ->   lw a0, 0(a1)
// [Asm] subst   lw v10, 4(v8) ->   lw a1, 4(a1)
// [Asm] subst   beq v9, zero, .fold.63_1 ->   beq a0, zero, .fold.63_1
// [Asm] subst   j .fold.63_6 ->   j .fold.63_6
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v18, v12 ->   mv a0, s1
// [Asm] subst   mv s10, v6 ->   mv s10, s2
// [Asm] subst   ld v20, 0(v6) ->   ld a2, 0(s2)
// [Asm] subst   mv a0, v12 ->   mv a0, s1
// [Asm] subst   jalr v20 ->   jalr a2
// [Asm] subst   mv v7, v17 ->   mv s1, a0
// [Asm] subst   j .fold.63_0 ->   j .fold.63_0
// [Asm] subst   mv s10, v6 ->   mv s10, s2
// [Asm] subst   ld v26, 0(v6) ->   ld a2, 0(s2)
// [Asm] subst   mv a0, v7 ->   mv a0, s1
// [Asm] subst   jalr v26 ->   jalr a2
// [Asm] subst   mv v12, a0 ->   mv s1, a0
// [Asm] subst   mv s10, v5 ->   mv s10, s0
// [Asm] subst   ld v24, 0(v5) ->   ld a1, 0(s0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   jalr v24 ->   jalr a1
// [Asm] subst   mv v13, a0 ->   mv a1, a0
// [Asm] subst   lw v14, 0(v13) ->   lw a0, 0(a1)
// [Asm] subst   lw v15, 4(v13) ->   lw a1, 4(a1)
// [Asm] subst   beq v14, zero, .fold.63_3 ->   beq a0, zero, .fold.63_3
// [Asm] subst   mv v5, v2 ->   mv s0, a0
// [Asm] subst   mv v6, v3 ->   mv s2, a1
// [Asm] subst   mv v7, v4 ->   mv s1, a2
// [Asm] pre_assigned_registers: FreeVar(fvref=^1) -> v3, Self(fref=f18) -> v0, FnParam(fref=f18, fpref=$f.0) -> v2, Insn(iref=%0) -> v4, BlockParam(bref=b3, bpref=$b.0) -> v5
// [Asm] skipping Op(ty=Bool, op=Le, args=[FreeVar(fvref=^1), FnParam(fref=f18, fpref=$f.0)])
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [zero]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [v6]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux.341"];
// [Asm]   r0 [label="v5 ← a0", color=green];
// [Asm]   r6 [label="v6 ← a0", color=green];
// [Asm]   r5 [label="v3 ← a1", color=green];
// [Asm]   r4 [label="v2 ← a0", color=green];
// [Asm]   r1 [label="v0 ← a1", color=green];
// [Asm]   r3 [label="a0", color=blue];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r5;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r1 -- r2;
// [Asm]   comment = "0:v5-> 1:v0-> 2:zero-> 4:v2-> 5:v3-> 3:a0-> 6:v6"
// [Asm]   comment = "v5<-a0;v6<-a0;v3<-a1;v2<-a0;v0<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux.341"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v5, zero ->   mv a0, zero
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   lw v3, 8(v0) ->   lw a1, 8(a1)
// [Asm] subst   blt v2, v3, .aux.341_2 ->   blt a0, a1, .aux.341_2
// [Asm] subst   ret ->   ret
// [Asm] subst   li v6, 1 ->   li a0, 1
// [Asm] subst   j .aux.341_3 ->   j .aux.341_3
// [Asm] pre_assigned_registers: FreeVar(fvref=^1) -> v3, FnParam(fref=f14, fpref=$f.0) -> v2, Self(fref=f14) -> v0, Insn(iref=%0) -> v4
// [Asm] defs: []
// [Asm] live_set: [a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux.296"];
// [Asm]   r0 [label="v0 ← a1", color=green];
// [Asm]   r4 [label="v4 ← a0", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r3 [label="v3 ← a1", color=green];
// [Asm]   r2 [label="v2 ← a0", color=green];
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r3;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:v0-> 1:a0-> 2:v2-> 3:v3-> 4:v4"
// [Asm]   comment = "v0<-a1;v4<-a0;v3<-a1;v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux.296"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   lw v3, 8(v0) ->   lw a1, 8(a1)
// [Asm] subst   add v4, v3, v2 ->   add a0, a1, a0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Mem(fref=f3, mref=m0) -> v7, Mem(fref=f3, mref=m4) -> v2, Insn(iref=%9) -> v17, Insn(iref=%8) -> v16, Insn(iref=%10) -> v18, Mem(fref=f3, mref=m3) -> v6, Insn(iref=%5) -> v13, Insn(iref=%0) -> v8, Self(fref=f3) -> v0, Insn(iref=%4) -> v12, Insn(iref=%3) -> v11, Insn(iref=%7) -> v15, Mem(fref=f3, mref=m1) -> v3, Insn(iref=%2) -> v10, Insn(iref=%1) -> v9, Mem(fref=f3, mref=m5) -> v4, Insn(iref=%11) -> v19, Insn(iref=%6) -> v14, Mem(fref=f3, mref=m2) -> v5, Insn(iref=%12) -> v20
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, s11]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [v44]
// [Asm] live_set: [zero, a0, s11, v44]
// [Asm] move_origin: []
// [Asm] defined: v44 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, a0, a1, s11]
// [Asm] move_origin: [v44]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, s11]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [zero, v8, s11]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v8, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v8, s11]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v8, s11]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [v42]
// [Asm] live_set: [zero, a0, v42, v8, s11]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, a0, v8, a1, s11]
// [Asm] move_origin: [v42]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, v8, s11]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [zero, v8, s11, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v8, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [zero, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v7, v8, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v41]
// [Asm] live_set: [zero, v7, v8, v41, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v7, v8, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v7, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v7, s11]
// [Asm] move_origin: []
// [Asm] defs: [v3]
// [Asm] live_set: [zero, v7, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v7, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v38]
// [Asm] live_set: [zero, v7, v38, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v38 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v7, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v39]
// [Asm] live_set: [zero, v7, s11, v39, v3]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v7, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero, v7, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero, v7, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v5, zero, v7, v36, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v5, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6, v5, zero]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v6, v5, s11, zero]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v33]
// [Asm] live_set: [v6, v5, s11, zero, v33]
// [Asm] move_origin: []
// [Asm] defined: v33 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v34]
// [Asm] live_set: [v6, v5, s11, zero, v34]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6, v5, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v6, s11, zero, a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, s11, zero, a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v14]
// [Asm] live_set: [v14, s11, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v14, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v14, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v14, s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v29]
// [Asm] live_set: [v14, s11, zero, v29, v2]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: []
// [Asm] live_set: [v14, s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v30]
// [Asm] live_set: [v14, s11, zero, v30, v2]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: []
// [Asm] live_set: [v14, s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v14, s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [s11, zero, a0, v2]
// [Asm] move_origin: [v14]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, s11, zero, a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v16]
// [Asm] live_set: [v16, s11, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v16, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v4]
// [Asm] live_set: [v4, v16, zero]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v4, v16, zero]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v4, v16, zero, v26]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v16, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, v16, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, zero, a0]
// [Asm] move_origin: [v16]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v18]
// [Asm] live_set: [v18, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v18, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v18, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v18]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v19]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v21, zero]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v21]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v20]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.87"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r38 [label="v21 ← a0", color=green];
// [Asm]   r33 [label="v16 ← a0", color=green];
// [Asm]   r9 [label="a6", color=blue];
// [Asm]   r26 [label="v6 ← a1", color=green];
// [Asm]   r6 [label="a3", color=blue];
// [Asm]   r13 [label="t2", color=blue];
// [Asm]   r4 [label="a1", color=blue];
// [Asm]   r29 [label="v14 ← a0", color=green];
// [Asm]   r35 [label="v26 ← a2", color=green];
// [Asm]   r7 [label="a4", color=blue];
// [Asm]   r10 [label="a7", color=blue];
// [Asm]   r8 [label="a5", color=blue];
// [Asm]   r5 [label="a2", color=blue];
// [Asm]   r36 [label="v18 ← a0", color=green];
// [Asm]   r32 [label="v30 ← a2", color=green];
// [Asm]   r24 [label="v5 ← a2", color=green];
// [Asm]   r15 [label="t4", color=blue];
// [Asm]   r31 [label="v29 ← a2", color=green];
// [Asm]   r39 [label="v20 ← a0", color=green];
// [Asm]   r17 [label="v42 ← a1", color=green];
// [Asm]   r12 [label="t1", color=blue];
// [Asm]   r37 [label="v19 ← a0", color=green];
// [Asm]   r20 [label="v41 ← a2", color=green];
// [Asm]   r23 [label="v39 ← a2", color=green];
// [Asm]   r3 [label="v44 ← a1", color=green];
// [Asm]   r27 [label="v33 ← a0", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r28 [label="v34 ← a0", color=green];
// [Asm]   r11 [label="t0", color=blue];
// [Asm]   r34 [label="v4 ← a1", color=green];
// [Asm]   r22 [label="v38 ← a2", color=green];
// [Asm]   r14 [label="t3", color=blue];
// [Asm]   r30 [label="v2 ← a1", color=green];
// [Asm]   r25 [label="v36 ← a3", color=green];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r16 [label="v8 ← s0", color=green];
// [Asm]   r18 [label="v9 ← a0", color=green];
// [Asm]   r19 [label="v7 ← a1", color=green];
// [Asm]   r21 [label="v3 ← a0", color=green];
// [Asm]   r21 -- r24;
// [Asm]   r2 -- r32;
// [Asm]   r2 -- r31;
// [Asm]   r0 -- r13;
// [Asm]   r16 -- r20;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r26;
// [Asm]   r1 -- r37;
// [Asm]   r2 -- r15;
// [Asm]   r14 -- r16;
// [Asm]   r1 -- r30;
// [Asm]   r1 -- r4;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r30 -- r31;
// [Asm]   r2 -- r10;
// [Asm]   r29 -- r31;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r19 -- r21;
// [Asm]   r1 -- r33;
// [Asm]   r0 -- r16;
// [Asm]   r16 -- r17;
// [Asm]   r2 -- r34;
// [Asm]   r0 -- r6;
// [Asm]   r1 -- r31;
// [Asm]   r1 -- r9;
// [Asm]   r26 -- r28;
// [Asm]   r2 -- r25;
// [Asm]   r26 -- r27;
// [Asm]   r2 -- r33;
// [Asm]   r2 -- r6;
// [Asm]   r0 -- r26;
// [Asm]   r8 -- r16;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r0 -- r9;
// [Asm]   r19 -- r22;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r24 -- r27;
// [Asm]   r1 -- r27;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r10;
// [Asm]   r1 -- r11;
// [Asm]   r18 -- r20;
// [Asm]   r0 -- r11;
// [Asm]   r1 -- r38;
// [Asm]   r1 -- r6;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r21 -- r22;
// [Asm]   r2 -- r24;
// [Asm]   r1 -- r35;
// [Asm]   r24 -- r25;
// [Asm]   r2 -- r23;
// [Asm]   r0 -- r15;
// [Asm]   r4 -- r16;
// [Asm]   r29 -- r32;
// [Asm]   r2 -- r26;
// [Asm]   r4 -- r5;
// [Asm]   r34 -- r35;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r34;
// [Asm]   r1 -- r23;
// [Asm]   r29 -- r30;
// [Asm]   r30 -- r32;
// [Asm]   r0 -- r34;
// [Asm]   r11 -- r16;
// [Asm]   r1 -- r22;
// [Asm]   r16 -- r19;
// [Asm]   r1 -- r32;
// [Asm]   r0 -- r14;
// [Asm]   r13 -- r16;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r6 -- r16;
// [Asm]   r19 -- r24;
// [Asm]   r33 -- r35;
// [Asm]   r2 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r24 -- r28;
// [Asm]   r16 -- r18;
// [Asm]   r24 -- r26;
// [Asm]   r1 -- r28;
// [Asm]   r10 -- r16;
// [Asm]   r1 -- r39;
// [Asm]   r21 -- r23;
// [Asm]   r33 -- r34;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r18 -- r19;
// [Asm]   r19 -- r23;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r8;
// [Asm]   r1 -- r29;
// [Asm]   r21 -- r25;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r2 -- r21;
// [Asm]   r2 -- r17;
// [Asm]   r2 -- r30;
// [Asm]   r9 -- r16;
// [Asm]   r0 -- r12;
// [Asm]   r12 -- r16;
// [Asm]   r7 -- r16;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r36;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r30;
// [Asm]   r2 -- r19;
// [Asm]   r0 -- r7;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r19 -- r25;
// [Asm]   r2 -- r27;
// [Asm]   r1 -- r24;
// [Asm]   r19 -- r20;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:a0-> 1:zero-> 2:s11-> 3:v44-> 4:a1-> 5:a2-> 16:v8-> 6:a3-> 7:a4-> 8:a5-> 9:a6-> 10:a7-> 11:t0-> 12:t1-> 13:t2-> 14:t3-> 15:t4-> 17:v42-> 18:v9-> 19:v7-> 20:v41-> 21:v3-> 22:v38-> 23:v39-> 24:v5-> 25:v36-> 26:v6-> 27:v33-> 28:v34-> 30:v2-> 29:v14-> 31:v29-> 32:v30-> 34:v4-> 33:v16-> 35:v26-> 36:v18-> 37:v19-> 38:v21-> 39:v20"
// [Asm]   comment = "v21<-a0;v16<-a0;v6<-a1;v14<-a0;v26<-a2;v18<-a0;v30<-a2;v5<-a2;v29<-a2;v20<-a0;v42<-a1;v19<-a0;v41<-a2;v39<-a2;v44<-a1;v33<-a0;v34<-a0;v4<-a1;v38<-a2;v2<-a1;v36<-a3;v8<-s0;v9<-a0;v7<-a1;v3<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.87"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   li v44, 100 ->   li a1, 100
// [Asm] subst   call range.43 ->   call range.43
// [Asm] subst   mv v8, a0 ->   mv s0, a0
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   li v42, 1000 ->   li a1, 1000
// [Asm] subst   call range.43 ->   call range.43
// [Asm] subst   addi v7, s11, -24 ->   addi a1, s11, -24
// [Asm] subst   andi s11, v7, -8 ->   andi s11, a1, -8
// [Asm] subst   la v41, aux.232 ->   la a2, aux.232
// [Asm] subst   sd v41, 0(v7) ->   sd a2, 0(a1)
// [Asm] subst   sd v8, 8(v7) ->   sd s0, 8(a1)
// [Asm] subst   sd v9, 16(v7) ->   sd a0, 16(a1)
// [Asm] subst   addi v3, s11, -16 ->   addi a0, s11, -16
// [Asm] subst   andi s11, v3, -8 ->   andi s11, a0, -8
// [Asm] subst   la v38, aux.296 ->   la a2, aux.296
// [Asm] subst   sd v38, 0(v3) ->   sd a2, 0(a0)
// [Asm] subst   li v39, 1 ->   li a2, 1
// [Asm] subst   sd v39, 8(v3) ->   sd a2, 8(a0)
// [Asm] subst   addi v5, s11, -24 ->   addi a2, s11, -24
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a2, -8
// [Asm] subst   la v36, aux.320 ->   la a3, aux.320
// [Asm] subst   sd v36, 0(v5) ->   sd a3, 0(a2)
// [Asm] subst   sd v7, 8(v5) ->   sd a1, 8(a2)
// [Asm] subst   sd v3, 16(v5) ->   sd a0, 16(a2)
// [Asm] subst   addi v6, s11, -16 ->   addi a1, s11, -16
// [Asm] subst   andi s11, v6, -8 ->   andi s11, a1, -8
// [Asm] subst   la v33, aux.341 ->   la a0, aux.341
// [Asm] subst   sd v33, 0(v6) ->   sd a0, 0(a1)
// [Asm] subst   li v34, 50 ->   li a0, 50
// [Asm] subst   sd v34, 8(v6) ->   sd a0, 8(a1)
// [Asm] subst   mv a0, v5 ->   mv a0, a2
// [Asm] subst   call filter.15 ->   call filter.15
// [Asm] subst   addi v2, s11, -16 ->   addi a1, s11, -16
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a1, -8
// [Asm] subst   la v29, aux.347 ->   la a2, aux.347
// [Asm] subst   sd v29, 0(v2) ->   sd a2, 0(a1)
// [Asm] subst   li v30, 1200 ->   li a2, 1200
// [Asm] subst   sd v30, 8(v2) ->   sd a2, 8(a1)
// [Asm] subst   call filter.15 ->   call filter.15
// [Asm] subst   addi v4, s11, -8 ->   addi a1, s11, -8
// [Asm] subst   andi s11, v4, -8 ->   andi s11, a1, -8
// [Asm] subst   la v26, add.349 ->   la a2, add.349
// [Asm] subst   sd v26, 0(v4) ->   sd a2, 0(a1)
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   call fold.63 ->   call fold.63
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v21, 10 ->   li a0, 10
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f24) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main.87 ->   call main.87
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f22) -> v0, FnParam(fref=f22, fpref=$f.0) -> v2, FnParam(fref=f22, fpref=$f.1) -> v3, Insn(iref=%0) -> v4
// [Asm] defs: []
// [Asm] live_set: [a1, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [a1, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of add.349"];
// [Asm]   r0 [label="v0 ← a2", color=green];
// [Asm]   r5 [label="v4 ← a0", color=green];
// [Asm]   r4 [label="v3 ← a1", color=green];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r3 [label="v2 ← a0", color=green];
// [Asm]   r2 [label="a0", color=blue];
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:v0-> 1:a1-> 2:a0-> 3:v2-> 4:v3-> 5:v4"
// [Asm]   comment = "v0<-a2;v4<-a0;v3<-a1;v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of add.349"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v0, s10 ->   mv a2, s10
// [Asm] subst   add v4, v2, v3 ->   add a0, a0, a1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f20, fpref=$f.0) -> v2, FreeVar(fvref=^1) -> v3, Self(fref=f20) -> v0, Insn(iref=%0) -> v4, BlockParam(bref=b3, bpref=$b.0) -> v5
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f20, fpref=$f.0), FreeVar(fvref=^1)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [v6]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [zero]
// [Asm] defined: v5 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux.347"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="v2 ← a0", color=green];
// [Asm]   r6 [label="v3 ← a1", color=green];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r1 [label="v6 ← a0", color=green];
// [Asm]   r3 [label="v0 ← a1", color=green];
// [Asm]   r2 [label="v5 ← a0", color=green];
// [Asm]   r0 -- r3;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r5;
// [Asm]   r5 -- r6;
// [Asm]   comment = "0:a0-> 3:v0-> 4:zero-> 5:v2-> 6:v3-> 1:v6-> 2:v5"
// [Asm]   comment = "v2<-a0;v3<-a1;v6<-a0;v0<-a1;v5<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux.347"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v5, zero ->   mv a0, zero
// [Asm] subst   li v6, 1 ->   li a0, 1
// [Asm] subst   j .aux.347_3 ->   j .aux.347_3
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   lw v3, 8(v0) ->   lw a1, 8(a1)
// [Asm] subst   blt v3, v2, .aux.347_2 ->   blt a1, a0, .aux.347_2
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf true
// [Asm] add.349:
// [Asm] # block info: defs: [v3, v0, v4, a0, v2], uses: [v2, a0, v4, a1, s10, v3], upward_exposed: [a1, s10, a0], params_defs: []
// [Asm] # live_in: [a1, s10, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .add.349_0:
// [Asm]   # save_ctx1  # live: [a1, a0, s10]
// [Asm]   mv v0, s10  # live: [a1, a0]
// [Asm]   mv v2, a0  # live: [a1, v2]
// [Asm]   mv v3, a1  # live: [v3, v2]
// [Asm]   add v4, v2, v3  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] filter.15:
// [Asm] # block info: defs: [v3, v7, v4, s11, a0, v2], uses: [v3, a0, v7, v4, a1, s11, v2], upward_exposed: [a1, s11, a0], params_defs: []
// [Asm] # live_in: [a1, s11, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .filter.15_0:
// [Asm]   # save_ctx1  # live: [a1, s11, a0]
// [Asm]   mv v2, a0  # live: [a1, s11, v2]
// [Asm]   mv v3, a1  # live: [v2, s11, v3]
// [Asm]   addi v4, s11, -24  # live: [v2, v4, v3]
// [Asm]   andi s11, v4, -8  # live: [v2, v4, v3]
// [Asm]   la v7, aux.18  # live: [v2, v7, v4, v3]
// [Asm]   sd v7, 0(v4)  # live: [v2, v4, v3]
// [Asm]   sd v2, 8(v4)  # live: [v4, v3]
// [Asm]   sd v3, 16(v4)  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] range.43:
// [Asm] # block info: defs: [v2, v5, a0, v4, s11, v9, v3], uses: [v3, v5, a0, v4, a1, s11, v9, v2], upward_exposed: [a1, s11, a0], params_defs: []
// [Asm] # live_in: [a1, s11, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .range.43_0:
// [Asm]   # save_ctx1  # live: [a1, s11, a0]
// [Asm]   mv v2, a0  # live: [a1, s11, v2]
// [Asm]   mv v3, a1  # live: [v2, s11, v3]
// [Asm]   addi v4, s11, -4  # live: [v2, v4, v3]
// [Asm]   andi s11, v4, -8  # live: [v2, v4, s11, v3]
// [Asm]   sw v2, 0(v4)  # live: [v4, s11, v3]
// [Asm]   addi v5, s11, -24  # live: [v4, v5, v3]
// [Asm]   andi s11, v5, -8  # live: [v4, v5, v3]
// [Asm]   la v9, aux.48  # live: [v4, v5, v9, v3]
// [Asm]   sd v9, 0(v5)  # live: [v4, v5, v3]
// [Asm]   sd v4, 8(v5)  # live: [v5, v3]
// [Asm]   sd v3, 16(v5)  # live: [v5]
// [Asm] # control
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] fold.63:
// [Asm] # block info: defs: [v3, v7, v4, v6, v5, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .fold.63_8:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm]   mv v6, v3  # live: [v4, v5, v6, zero]
// [Asm]   mv v7, v4  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, ft4, ft9, v10, a5, fa4, a0, v30, ft2, a2, a3, s10, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v5, zero, a0, v30, v8, v9], upward_exposed: [v5, zero], params_defs: [v5, v6, v7]
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v6, v5, v10, zero, v7]
// [Asm] # block parameters: [v5, v6, v7]
// [Asm] .fold.63_0:
// [Asm]   mv s10, v5  # live: [v5, zero, v7, v6]
// [Asm]   ld v30, 0(v5)  # live: [v5, zero, v30, v7, v6]
// [Asm]   # save_ctx2  # live: [v5, zero, v30, v7, v6]
// [Asm]   mv a0, zero  # live: [v5, zero, a0, v30, v7, v6]
// [Asm]   jalr v30  # live: [v5, zero, a0, v7, v6]
// [Asm]   mv v8, a0  # live: [v5, zero, v7, v8, v6]
// [Asm]   # restore_ctx2  # live: [v5, zero, v7, v8, v6]
// [Asm]   lw v9, 0(v8)  # live: [v5, zero, v7, v8, v6, v9]
// [Asm]   lw v10, 4(v8)  # live: [v5, v10, zero, v7, v6, v9]
// [Asm] # control
// [Asm]   beq v9, zero, .fold.63_1  # live: [v6, v5, v10, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v26, v13, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v24, s10, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v5, v14, v10, a0, v26, zero, v13, v7, v6, a1, v24], upward_exposed: [v6, v5, v10, zero, v7], params_defs: []
// [Asm] # live_in: [v6, v5, v10, zero, v7], live_out: [v6, v5, v12, v15, zero]
// [Asm] # block parameters: []
// [Asm] .fold.63_2:
// [Asm]   mv s10, v6  # live: [v5, v10, zero, v7, v6]
// [Asm]   ld v26, 0(v6)  # live: [v5, v10, zero, v26, v7, v6]
// [Asm]   # save_ctx2  # live: [v5, v10, zero, v26, v7, v6]
// [Asm]   mv a0, v7  # live: [v5, v10, zero, a0, v26, v6]
// [Asm]   mv a1, v10  # live: [v5, zero, a0, v26, v6, a1]
// [Asm]   jalr v26  # live: [v5, zero, a0, v6]
// [Asm]   mv v12, a0  # live: [v5, zero, v6, v12]
// [Asm]   # restore_ctx2  # live: [v5, zero, v6, v12]
// [Asm]   mv s10, v5  # live: [v5, zero, v6, v12]
// [Asm]   ld v24, 0(v5)  # live: [v5, zero, v6, v12, v24]
// [Asm]   # save_ctx2  # live: [v5, zero, v6, v12, v24]
// [Asm]   mv a0, zero  # live: [v5, zero, a0, v6, v12, v24]
// [Asm]   jalr v24  # live: [v5, zero, a0, v6, v12]
// [Asm]   mv v13, a0  # live: [v5, zero, v13, v6, v12]
// [Asm]   # restore_ctx2  # live: [v5, zero, v13, v6, v12]
// [Asm]   lw v14, 0(v13)  # live: [v5, v14, zero, v13, v6, v12]
// [Asm]   lw v15, 4(v13)  # live: [v5, v14, zero, v6, v15, v12]
// [Asm] # control
// [Asm]   beq v14, zero, .fold.63_3  # live: [v6, v5, v12, v15, zero]
// [Asm] 
// [Asm] # block info: defs: [t1, v7, ft0, ft1, a1, fa1, fa2, ft6, v20, a4, fa6, a6, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, s10, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v5, a0, v20, v6, a1, v17, v12, v15], upward_exposed: [v6, v5, v15, v12], params_defs: []
// [Asm] # live_in: [v6, v5, v15, v12, zero], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .fold.63_4:
// [Asm]   mv s10, v6  # live: [v5, v6, v15, v12, zero]
// [Asm]   ld v20, 0(v6)  # live: [v5, v6, v15, v12, zero, v20]
// [Asm]   # save_ctx2  # live: [v5, v6, v15, v12, zero, v20]
// [Asm]   mv a0, v12  # live: [v5, v6, v15, zero, a0, v20]
// [Asm]   mv a1, v15  # live: [v5, v6, a1, zero, a0, v20]
// [Asm]   jalr v20  # live: [v5, v6, zero, a0]
// [Asm]   mv v17, a0  # live: [v5, v6, v17, zero]
// [Asm]   # restore_ctx2  # live: [v5, v6, v17, zero]
// [Asm] # control
// [Asm]   mv v5, v5  # live: [v5, v6, v17, zero]
// [Asm]   mv v6, v6  # live: [v5, v6, v17, zero]
// [Asm]   mv v7, v17  # live: [v5, v6, zero, v7]
// [Asm]   j .fold.63_0  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v19], uses: [v7], upward_exposed: [v7], params_defs: []
// [Asm] # live_in: [v7], live_out: [v19]
// [Asm] # block parameters: []
// [Asm] .fold.63_1:
// [Asm] # control
// [Asm]   mv v19, v7  # live: [v19]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v19, a0], upward_exposed: [v19], params_defs: [v19]
// [Asm] # live_in: [v19], live_out: []
// [Asm] # block parameters: [v19]
// [Asm] .fold.63_6:
// [Asm] # control
// [Asm]   mv a0, v19  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v18], uses: [v12], upward_exposed: [v12], params_defs: []
// [Asm] # live_in: [v12], live_out: [v18]
// [Asm] # block parameters: []
// [Asm] .fold.63_3:
// [Asm] # control
// [Asm]   mv v18, v12  # live: [v18]
// [Asm] 
// [Asm] # block info: defs: [v19], uses: [v18], upward_exposed: [v18], params_defs: [v18]
// [Asm] # live_in: [v18], live_out: [v19]
// [Asm] # block parameters: [v18]
// [Asm] .fold.63_5:
// [Asm] # control
// [Asm]   mv v19, v18  # live: [v19]
// [Asm]   j .fold.63_6  # live: [v19]
// [Asm] 
// [Asm] # leaf false
// [Asm] aux.320:
// [Asm] # block info: defs: [v2, t1, v22, v7, v0, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, s10, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [a0, zero, v22, v7, v8, v0, s10, v3], upward_exposed: [s10, a0, zero], params_defs: []
// [Asm] # live_in: [s11, s10, a0, zero], live_out: [v4, s11, zero, v9]
// [Asm] # block parameters: []
// [Asm] .aux.320_0:
// [Asm]   # save_ctx1  # live: [s11, zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, s11, zero]
// [Asm]   ld v3, 8(v0)  # live: [v0, s11, zero, v3]
// [Asm]   ld v4, 16(v0)  # live: [v4, s11, zero, v3]
// [Asm]   mv s10, v3  # live: [v4, s11, zero, v3]
// [Asm]   ld v22, 0(v3)  # live: [v4, s11, zero, v22]
// [Asm]   # save_ctx2  # live: [v4, s11, zero, v22]
// [Asm]   mv a0, zero  # live: [v4, s11, zero, a0, v22]
// [Asm]   jalr v22  # live: [v4, s11, zero, a0]
// [Asm]   mv v7, a0  # live: [v4, s11, zero, v7]
// [Asm]   # restore_ctx2  # live: [v4, s11, zero, v7]
// [Asm]   lw v8, 0(v7)  # live: [v7, v4, s11, zero, v8]
// [Asm]   lw v9, 4(v7)  # live: [v4, s11, zero, v9, v8]
// [Asm] # control
// [Asm]   beq v8, zero, .aux.320_1  # live: [v4, s11, zero, v9]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v6, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, s10, ft8, a7, t3, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v11, v18, a0, v4, v6, v17, s11, v9], upward_exposed: [v4, s11, v9], params_defs: []
// [Asm] # live_in: [v4, s11, v9], live_out: [v14]
// [Asm] # block parameters: []
// [Asm] .aux.320_2:
// [Asm]   mv s10, v4  # live: [v4, s11, v9]
// [Asm]   ld v18, 0(v4)  # live: [s11, v18, v9]
// [Asm]   # save_ctx2  # live: [s11, v18, v9]
// [Asm]   mv a0, v9  # live: [s11, v18, a0]
// [Asm]   jalr v18  # live: [s11, a0]
// [Asm]   mv v11, a0  # live: [v11, s11]
// [Asm]   # restore_ctx2  # live: [v11, s11]
// [Asm]   addi v6, s11, -8  # live: [v11, v6]
// [Asm]   andi s11, v6, -8  # live: [v11, v6]
// [Asm]   li v17, 1  # live: [v11, v6, v17]
// [Asm]   sw v17, 0(v6)  # live: [v11, v6]
// [Asm]   sw v11, 4(v6)  # live: [v6]
// [Asm] # control
// [Asm]   mv v14, v6  # live: [v14]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v14, a0], upward_exposed: [v14], params_defs: [v14]
// [Asm] # live_in: [v14], live_out: []
// [Asm] # block parameters: [v14]
// [Asm] .aux.320_3:
// [Asm] # control
// [Asm]   mv a0, v14  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v5, v14, s11], uses: [v5, s11, zero], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: [v14]
// [Asm] # block parameters: []
// [Asm] .aux.320_1:
// [Asm]   addi v5, s11, -8  # live: [v5, zero]
// [Asm]   andi s11, v5, -8  # live: [v5, zero]
// [Asm]   sw zero, 0(v5)  # live: [v5, zero]
// [Asm]   sw zero, 4(v5)  # live: [v5]
// [Asm] # control
// [Asm]   mv v14, v5  # live: [v14]
// [Asm]   j .aux.320_3  # live: [v14]
// [Asm] 
// [Asm] # leaf true
// [Asm] aux.48:
// [Asm] # block info: defs: [v3, v7, v0, v4, v2], uses: [v7, v0, v4, s10, a0, v3], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s11, s10, a0, zero], live_out: [v3, s11, zero, v7]
// [Asm] # block parameters: []
// [Asm] .aux.48_0:
// [Asm]   # save_ctx1  # live: [s11, zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, s11, zero]
// [Asm]   ld v3, 8(v0)  # live: [v0, s11, zero, v3]
// [Asm]   lw v4, 16(v0)  # live: [v4, s11, zero, v3]
// [Asm]   lw v7, 0(v3)  # live: [v7, v4, s11, zero, v3]
// [Asm] # control
// [Asm]   beq v7, v4, .aux.48_1  # live: [v7, s11, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v6, v16, s11, v9, v13], uses: [v16, v7, v6, s11, v9, v3], upward_exposed: [v3, s11, v7], params_defs: []
// [Asm] # live_in: [v7, s11, v3], live_out: [v13]
// [Asm] # block parameters: []
// [Asm] .aux.48_2:
// [Asm]   addi v9, v7, 1  # live: [v3, s11, v9, v7]
// [Asm]   sw v9, 0(v3)  # live: [s11, v7]
// [Asm]   addi v6, s11, -8  # live: [v6, v7]
// [Asm]   andi s11, v6, -8  # live: [v6, v7]
// [Asm]   li v16, 1  # live: [v6, v16, v7]
// [Asm]   sw v16, 0(v6)  # live: [v6, v7]
// [Asm]   sw v7, 4(v6)  # live: [v6]
// [Asm] # control
// [Asm]   mv v13, v6  # live: [v13]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v13, a0], upward_exposed: [v13], params_defs: [v13]
// [Asm] # live_in: [v13], live_out: []
// [Asm] # block parameters: [v13]
// [Asm] .aux.48_3:
// [Asm] # control
// [Asm]   mv a0, v13  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v5, s11, v13], uses: [v5, s11, zero], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: [v13]
// [Asm] # block parameters: []
// [Asm] .aux.48_1:
// [Asm]   addi v5, s11, -8  # live: [v5, zero]
// [Asm]   andi s11, v5, -8  # live: [v5, zero]
// [Asm]   sw zero, 0(v5)  # live: [v5, zero]
// [Asm]   sw zero, 4(v5)  # live: [v5]
// [Asm] # control
// [Asm]   mv v13, v5  # live: [v13]
// [Asm]   j .aux.48_3  # live: [v13]
// [Asm] 
// [Asm] # leaf true
// [Asm] aux.296:
// [Asm] # block info: defs: [v3, v0, v4, a0, v2], uses: [v3, a0, v0, v4, s10, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .aux.296_0:
// [Asm]   # save_ctx1  # live: [a0, s10]
// [Asm]   mv v0, s10  # live: [v0, a0]
// [Asm]   mv v2, a0  # live: [v0, v2]
// [Asm]   lw v3, 8(v0)  # live: [v2, v3]
// [Asm]   add v4, v3, v2  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] aux.347:
// [Asm] # block info: defs: [v3, v0, v2], uses: [v2, v0, s10, a0, v3], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0, zero], live_out: [zero]
// [Asm] # block parameters: []
// [Asm] .aux.347_0:
// [Asm]   # save_ctx1  # live: [zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, zero, v2]
// [Asm]   lw v3, 8(v0)  # live: [v2, zero, v3]
// [Asm] # control
// [Asm]   blt v3, v2, .aux.347_2  # live: [zero]
// [Asm] 
// [Asm] # block info: defs: [v5], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .aux.347_1:
// [Asm] # control
// [Asm]   mv v5, zero  # live: [v5]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v5, a0], upward_exposed: [v5], params_defs: [v5]
// [Asm] # live_in: [v5], live_out: []
// [Asm] # block parameters: [v5]
// [Asm] .aux.347_3:
// [Asm] # control
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v6, v5], uses: [v6], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .aux.347_2:
// [Asm] # control
// [Asm]   li v6, 1  # live: [v6]
// [Asm]   mv v5, v6  # live: [v5]
// [Asm]   j .aux.347_3  # live: [v5]
// [Asm] 
// [Asm] # leaf false
// [Asm] aux.232:
// [Asm] # block info: defs: [v2, t1, v7, v0, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, v19, ft5, ft10, v4, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [a0, zero, v7, v0, v19, v6, s10, v3], upward_exposed: [s10, a0, zero], params_defs: []
// [Asm] # live_in: [s11, s10, a0, zero], live_out: [v4, s11, zero, v8]
// [Asm] # block parameters: []
// [Asm] .aux.232_0:
// [Asm]   # save_ctx1  # live: [s11, zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, s11, zero]
// [Asm]   ld v3, 8(v0)  # live: [v0, s11, zero, v3]
// [Asm]   ld v4, 16(v0)  # live: [v4, s11, zero, v3]
// [Asm]   mv s10, v3  # live: [v4, s11, zero, v3]
// [Asm]   ld v19, 0(v3)  # live: [v19, v4, s11, zero]
// [Asm]   # save_ctx2  # live: [v19, v4, s11, zero]
// [Asm]   mv a0, zero  # live: [v19, v4, s11, zero, a0]
// [Asm]   jalr v19  # live: [v4, s11, zero, a0]
// [Asm]   mv v6, a0  # live: [v4, v6, s11, zero]
// [Asm]   # restore_ctx2  # live: [v4, v6, s11, zero]
// [Asm]   lw v7, 0(v6)  # live: [v4, v6, s11, zero, v7]
// [Asm]   lw v8, 4(v6)  # live: [v7, v4, s11, zero, v8]
// [Asm] # control
// [Asm]   bne v7, zero, .aux.232_2  # live: [v4, s11, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [t1, v13, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v11, v4, zero, a0, v13], upward_exposed: [v4, zero], params_defs: []
// [Asm] # live_in: [v4, zero], live_out: [v12]
// [Asm] # block parameters: []
// [Asm] .aux.232_1:
// [Asm]   mv s10, v4  # live: [v4, zero]
// [Asm]   ld v13, 0(v4)  # live: [v13, zero]
// [Asm]   # save_ctx2  # live: [v13, zero]
// [Asm]   mv a0, zero  # live: [a0, v13]
// [Asm]   jalr v13  # live: [a0]
// [Asm]   mv v11, a0  # live: [v11]
// [Asm]   # restore_ctx2  # live: [v11]
// [Asm] # control
// [Asm]   mv v12, v11  # live: [v12]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v12, a0], upward_exposed: [v12], params_defs: [v12]
// [Asm] # live_in: [v12], live_out: []
// [Asm] # block parameters: [v12]
// [Asm] .aux.232_3:
// [Asm] # control
// [Asm]   mv a0, v12  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v5, v16, s11, v12], uses: [v5, v16, s11, v8], upward_exposed: [s11, v8], params_defs: []
// [Asm] # live_in: [s11, v8], live_out: [v12]
// [Asm] # block parameters: []
// [Asm] .aux.232_2:
// [Asm]   addi v5, s11, -8  # live: [v5, v8]
// [Asm]   andi s11, v5, -8  # live: [v5, v8]
// [Asm]   li v16, 1  # live: [v5, v16, v8]
// [Asm]   sw v16, 0(v5)  # live: [v5, v8]
// [Asm]   sw v8, 4(v5)  # live: [v5]
// [Asm] # control
// [Asm]   mv v12, v5  # live: [v12]
// [Asm]   j .aux.232_3  # live: [v12]
// [Asm] 
// [Asm] # leaf true
// [Asm] aux.341:
// [Asm] # block info: defs: [v3, v0, v2], uses: [v3, v0, s10, a0, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0, zero], live_out: [zero]
// [Asm] # block parameters: []
// [Asm] .aux.341_0:
// [Asm]   # save_ctx1  # live: [zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, zero, v2]
// [Asm]   lw v3, 8(v0)  # live: [v3, zero, v2]
// [Asm] # control
// [Asm]   blt v2, v3, .aux.341_2  # live: [zero]
// [Asm] 
// [Asm] # block info: defs: [v5], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .aux.341_1:
// [Asm] # control
// [Asm]   mv v5, zero  # live: [v5]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v5, a0], upward_exposed: [v5], params_defs: [v5]
// [Asm] # live_in: [v5], live_out: []
// [Asm] # block parameters: [v5]
// [Asm] .aux.341_3:
// [Asm] # control
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v6, v5], uses: [v6], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .aux.341_2:
// [Asm] # control
// [Asm]   li v6, 1  # live: [v6]
// [Asm]   mv v5, v6  # live: [v5]
// [Asm]   j .aux.341_3  # live: [v5]
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main.87  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] aux.18:
// [Asm] # block info: defs: [v3, v7, v0, v4, v2], uses: [v0, s10, a0, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s11, s10, a0, zero], live_out: [v7, v4, s11, zero, v3]
// [Asm] # block parameters: []
// [Asm] .aux.18_8:
// [Asm]   # save_ctx1  # live: [s11, zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, s11, zero, v2]
// [Asm]   ld v3, 8(v0)  # live: [v2, v0, s11, zero, v3]
// [Asm]   ld v4, 16(v0)  # live: [v2, v4, s11, zero, v3]
// [Asm] # control
// [Asm]   mv v7, v2  # live: [v3, v4, s11, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v25, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, s10, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v25, zero, a0, v8, v9, v3], upward_exposed: [zero, v3], params_defs: [v7]
// [Asm] # live_in: [v3, v4, s11, zero, v7], live_out: [v4, s11, v10, zero, v3]
// [Asm] # block parameters: [v7]
// [Asm] .aux.18_0:
// [Asm]   mv s10, v3  # live: [zero, v4, s11, v3]
// [Asm]   ld v25, 0(v3)  # live: [v25, zero, v4, s11, v3]
// [Asm]   # save_ctx2  # live: [v25, zero, v4, s11, v3]
// [Asm]   mv a0, zero  # live: [v25, zero, a0, v4, s11, v3]
// [Asm]   jalr v25  # live: [zero, a0, v4, s11, v3]
// [Asm]   mv v8, a0  # live: [zero, v8, v4, s11, v3]
// [Asm]   # restore_ctx2  # live: [zero, v8, v4, s11, v3]
// [Asm]   lw v9, 0(v8)  # live: [zero, v8, v4, s11, v9, v3]
// [Asm]   lw v10, 4(v8)  # live: [v10, zero, v4, s11, v9, v3]
// [Asm] # control
// [Asm]   beq v9, zero, .aux.18_1  # live: [v4, s11, v10, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, v21, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v4, v10, v21, v12, a0, zero], upward_exposed: [v4, v10, zero], params_defs: []
// [Asm] # live_in: [v4, v10, s11, zero, v3], live_out: [v4, s11, v10, zero, v3]
// [Asm] # block parameters: []
// [Asm] .aux.18_2:
// [Asm]   mv s10, v4  # live: [v10, zero, v4, s11, v3]
// [Asm]   ld v21, 0(v4)  # live: [v10, v21, zero, v4, s11, v3]
// [Asm]   # save_ctx2  # live: [v10, v21, zero, v4, s11, v3]
// [Asm]   mv a0, v10  # live: [v10, v21, zero, a0, v4, s11, v3]
// [Asm]   jalr v21  # live: [v10, zero, a0, v4, s11, v3]
// [Asm]   mv v12, a0  # live: [v10, zero, v4, s11, v12, v3]
// [Asm]   # restore_ctx2  # live: [v10, zero, v4, s11, v12, v3]
// [Asm] # control
// [Asm]   bne v12, zero, .aux.18_4  # live: [v4, s11, v10, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v6, s11, v15, v20], uses: [v6, s11, v10, v20], upward_exposed: [s11, v10], params_defs: []
// [Asm] # live_in: [s11, v10], live_out: [v15]
// [Asm] # block parameters: []
// [Asm] .aux.18_3:
// [Asm]   addi v6, s11, -8  # live: [v6, v10]
// [Asm]   andi s11, v6, -8  # live: [v6, v10]
// [Asm]   li v20, 1  # live: [v6, v10, v20]
// [Asm]   sw v20, 0(v6)  # live: [v6, v10]
// [Asm]   sw v10, 4(v6)  # live: [v6]
// [Asm] # control
// [Asm]   mv v15, v6  # live: [v15]
// [Asm] 
// [Asm] # block info: defs: [v17], uses: [v15], upward_exposed: [v15], params_defs: [v15]
// [Asm] # live_in: [v15], live_out: [v17]
// [Asm] # block parameters: [v15]
// [Asm] .aux.18_5:
// [Asm] # control
// [Asm]   mv v17, v15  # live: [v17]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v17, a0], upward_exposed: [v17], params_defs: [v17]
// [Asm] # live_in: [v17], live_out: []
// [Asm] # block parameters: [v17]
// [Asm] .aux.18_6:
// [Asm] # control
// [Asm]   mv a0, v17  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v5, v17, s11], uses: [v5, s11, zero], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: [v17]
// [Asm] # block parameters: []
// [Asm] .aux.18_1:
// [Asm]   addi v5, s11, -8  # live: [v5, zero]
// [Asm]   andi s11, v5, -8  # live: [v5, zero]
// [Asm]   sw zero, 0(v5)  # live: [v5, zero]
// [Asm]   sw zero, 4(v5)  # live: [v5]
// [Asm] # control
// [Asm]   mv v17, v5  # live: [v17]
// [Asm]   j .aux.18_6  # live: [v17]
// [Asm] 
// [Asm] # block info: defs: [v7], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v4, s11, zero, v3], live_out: [v7, v4, s11, zero, v3]
// [Asm] # block parameters: []
// [Asm] .aux.18_4:
// [Asm] # control
// [Asm]   mv v7, zero  # live: [v3, v4, s11, zero, v7]
// [Asm]   j .aux.18_0  # live: [v3, v4, s11, zero, v7]
// [Asm] 
// [Asm] # leaf false
// [Asm] main.87:
// [Asm] # block info: defs: [a1, s11, v44, fa1, v33, fa2, ft6, fa6, a4, v20, a6, ft10, ft5, v6, ft4, v5, ft9, fa4, ft2, a3, a7, fa7, fa3, ft3, t2, v3, t1, v14, v16, v42, v26, v7, ft0, ft1, v41, v29, v8, v19, v4, v34, ft7, v21, a5, a0, v30, v36, a2, v9, v39, ft8, t3, t0, fa5, v18, fa0, t4, v38, v2], uses: [v3, v14, v16, v42, v26, v7, v41, a1, s11, v44, v33, zero, v29, v8, v4, v6, v34, v5, v21, a0, v30, v36, a2, v9, v39, v18, v38, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.87_0:
// [Asm]   # save_ctx1  # live: [zero, s11]
// [Asm]   # save_ctx2  # live: [zero, s11]
// [Asm]   mv a0, zero  # live: [zero, a0, s11]
// [Asm]   li v44, 100  # live: [zero, a0, s11, v44]
// [Asm]   mv a1, v44  # live: [zero, a0, a1, s11]
// [Asm]   call range.43  # live: [zero, a0, s11]
// [Asm]   mv v8, a0  # live: [zero, v8, s11]
// [Asm]   # restore_ctx2  # live: [zero, v8, s11]
// [Asm]   # save_ctx2  # live: [zero, v8, s11]
// [Asm]   mv a0, zero  # live: [zero, a0, v8, s11]
// [Asm]   li v42, 1000  # live: [zero, a0, v42, v8, s11]
// [Asm]   mv a1, v42  # live: [zero, a0, v8, a1, s11]
// [Asm]   call range.43  # live: [zero, a0, v8, s11]
// [Asm]   mv v9, a0  # live: [zero, v8, s11, v9]
// [Asm]   # restore_ctx2  # live: [zero, v8, s11, v9]
// [Asm]   addi v7, s11, -24  # live: [zero, v7, v8, v9]
// [Asm]   andi s11, v7, -8  # live: [zero, v7, v8, s11, v9]
// [Asm]   la v41, aux.232  # live: [zero, v7, v8, v41, s11, v9]
// [Asm]   sd v41, 0(v7)  # live: [zero, v7, v8, s11, v9]
// [Asm]   sd v8, 8(v7)  # live: [zero, v7, s11, v9]
// [Asm]   sd v9, 16(v7)  # live: [zero, v7, s11]
// [Asm]   addi v3, s11, -16  # live: [zero, v7, v3]
// [Asm]   andi s11, v3, -8  # live: [zero, v7, s11, v3]
// [Asm]   la v38, aux.296  # live: [zero, v7, v38, s11, v3]
// [Asm]   sd v38, 0(v3)  # live: [zero, v7, s11, v3]
// [Asm]   li v39, 1  # live: [zero, v7, s11, v39, v3]
// [Asm]   sd v39, 8(v3)  # live: [zero, v7, s11, v3]
// [Asm]   addi v5, s11, -24  # live: [v5, zero, v7, v3]
// [Asm]   andi s11, v5, -8  # live: [v5, zero, v7, s11, v3]
// [Asm]   la v36, aux.320  # live: [v5, zero, v7, v36, s11, v3]
// [Asm]   sd v36, 0(v5)  # live: [v7, v5, s11, zero, v3]
// [Asm]   sd v7, 8(v5)  # live: [v5, s11, zero, v3]
// [Asm]   sd v3, 16(v5)  # live: [v5, s11, zero]
// [Asm]   addi v6, s11, -16  # live: [v6, v5, zero]
// [Asm]   andi s11, v6, -8  # live: [v6, v5, s11, zero]
// [Asm]   la v33, aux.341  # live: [v6, v5, s11, zero, v33]
// [Asm]   sd v33, 0(v6)  # live: [v6, v5, s11, zero]
// [Asm]   li v34, 50  # live: [v6, v5, s11, zero, v34]
// [Asm]   sd v34, 8(v6)  # live: [v6, v5, s11, zero]
// [Asm]   # save_ctx2  # live: [v6, v5, s11, zero]
// [Asm]   mv a0, v5  # live: [v6, s11, zero, a0]
// [Asm]   mv a1, v6  # live: [a1, s11, zero, a0]
// [Asm]   call filter.15  # live: [s11, zero, a0]
// [Asm]   mv v14, a0  # live: [v14, s11, zero]
// [Asm]   # restore_ctx2  # live: [v14, s11, zero]
// [Asm]   addi v2, s11, -16  # live: [v14, zero, v2]
// [Asm]   andi s11, v2, -8  # live: [v14, s11, zero, v2]
// [Asm]   la v29, aux.347  # live: [v14, s11, zero, v29, v2]
// [Asm]   sd v29, 0(v2)  # live: [v14, s11, zero, v2]
// [Asm]   li v30, 1200  # live: [v14, s11, zero, v30, v2]
// [Asm]   sd v30, 8(v2)  # live: [v14, s11, zero, v2]
// [Asm]   # save_ctx2  # live: [v14, s11, zero, v2]
// [Asm]   mv a0, v14  # live: [s11, zero, a0, v2]
// [Asm]   mv a1, v2  # live: [a1, s11, zero, a0]
// [Asm]   call filter.15  # live: [s11, zero, a0]
// [Asm]   mv v16, a0  # live: [v16, s11, zero]
// [Asm]   # restore_ctx2  # live: [v16, s11, zero]
// [Asm]   addi v4, s11, -8  # live: [v4, v16, zero]
// [Asm]   andi s11, v4, -8  # live: [v4, v16, zero]
// [Asm]   la v26, add.349  # live: [v4, v16, zero, v26]
// [Asm]   sd v26, 0(v4)  # live: [v4, v16, zero]
// [Asm]   # save_ctx2  # live: [v4, v16, zero]
// [Asm]   mv a0, v16  # live: [v4, zero, a0]
// [Asm]   mv a1, v4  # live: [a1, zero, a0]
// [Asm]   mv a2, zero  # live: [a2, a1, zero, a0]
// [Asm]   call fold.63  # live: [zero, a0]
// [Asm]   mv v18, a0  # live: [v18, zero]
// [Asm]   # restore_ctx2  # live: [v18, zero]
// [Asm]   # save_ctx2  # live: [v18, zero]
// [Asm]   mv a0, v18  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v19, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   li v21, 10  # live: [v21, zero]
// [Asm]   mv a0, v21  # live: [zero, a0]
// [Asm]   call minimbt_print_char  # live: [zero, a0]
// [Asm]   mv v20, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("map", Fun([Unit], Tuple([Int, Int]))), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int], Int))], body: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Tuple([Int(1), App(Var("f"), [Var("val")])])))}, Var("aux"))}, LetRec({name: ("filter", Fun([Unit], Tuple([Int, Int]))), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int], Int))], body: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Let(("r", Var({val: Some(Int)})), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit])))))}, Var("aux"))}, LetRec({name: ("concat", Fun([Unit], Tuple([Int, Int]))), args: [("stream1", Fun([Unit], Tuple([Int, Int]))), ("stream2", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream1"), [Unit]), If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")])))}, Var("aux"))}, LetRec({name: ("range", Fun([Unit], Tuple([Int, Int]))), args: [("from", Int), ("to", Int)], body: Let(("state", Var({val: Some(Array(Int))})), Array(Int(1), Var("from")), LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: Let(("val", Var({val: Some(Int)})), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))))}, Var("aux")))}, LetRec({name: ("addx", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, Var("aux"))}, LetRec({name: ("fold", Int), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int, Int], Int)), ("acc", Int)], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({name: ("sum", Int), args: [("stream", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), [])))))))))))
// [Knf] build_knf: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Tuple([Int(1), App(Var("f"), [Var("val")])])))}, Var("aux"))
// [Knf] build_knf: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Tuple([Int(1), App(Var("f"), [Var("val")])])))
// [Knf] build_knf: App(Var("stream"), [Unit])
// [Knf] build_knf: Var("stream")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Tuple([Int(1), App(Var("f"), [Var("val")])]))
// [Knf] build_knf: Var("ok")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Tuple([Int(0), Int(0)])
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Tuple([Int(1), App(Var("f"), [Var("val")])])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("f"), [Var("val")])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("val")
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: LetRec({name: ("filter", Fun([Unit], Tuple([Int, Int]))), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int], Int))], body: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Let(("r", Var({val: Some(Int)})), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit])))))}, Var("aux"))}, LetRec({name: ("concat", Fun([Unit], Tuple([Int, Int]))), args: [("stream1", Fun([Unit], Tuple([Int, Int]))), ("stream2", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream1"), [Unit]), If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")])))}, Var("aux"))}, LetRec({name: ("range", Fun([Unit], Tuple([Int, Int]))), args: [("from", Int), ("to", Int)], body: Let(("state", Var({val: Some(Array(Int))})), Array(Int(1), Var("from")), LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: Let(("val", Var({val: Some(Int)})), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))))}, Var("aux")))}, LetRec({name: ("addx", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, Var("aux"))}, LetRec({name: ("fold", Int), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int, Int], Int)), ("acc", Int)], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({name: ("sum", Int), args: [("stream", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), []))))))))))
// [Knf] build_knf: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Let(("r", Var({val: Some(Int)})), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit])))))}, Var("aux"))
// [Knf] build_knf: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Let(("r", Var({val: Some(Int)})), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit])))))
// [Knf] build_knf: App(Var("stream"), [Unit])
// [Knf] build_knf: Var("stream")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("ok"), Int(0)), Tuple([Int(0), Int(0)]), Let(("r", Var({val: Some(Int)})), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit]))))
// [Knf] build_knf: Var("ok")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Tuple([Int(0), Int(0)])
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("r", Var({val: Some(Int)})), App(Var("f"), [Var("val")]), If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit])))
// [Knf] build_knf: App(Var("f"), [Var("val")])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("val")
// [Knf] build_knf: If(Eq(Var("r"), Int(0)), Tuple([Int(1), Var("val")]), App(Var("aux"), [Unit]))
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Tuple([Int(1), Var("val")])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("val")
// [Knf] build_knf: App(Var("aux"), [Unit])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Unit
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: LetRec({name: ("concat", Fun([Unit], Tuple([Int, Int]))), args: [("stream1", Fun([Unit], Tuple([Int, Int]))), ("stream2", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream1"), [Unit]), If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")])))}, Var("aux"))}, LetRec({name: ("range", Fun([Unit], Tuple([Int, Int]))), args: [("from", Int), ("to", Int)], body: Let(("state", Var({val: Some(Array(Int))})), Array(Int(1), Var("from")), LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: Let(("val", Var({val: Some(Int)})), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))))}, Var("aux")))}, LetRec({name: ("addx", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, Var("aux"))}, LetRec({name: ("fold", Int), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int, Int], Int)), ("acc", Int)], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({name: ("sum", Int), args: [("stream", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), [])))))))))
// [Knf] build_knf: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream1"), [Unit]), If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")])))}, Var("aux"))
// [Knf] build_knf: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream1"), [Unit]), If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")])))
// [Knf] build_knf: App(Var("stream1"), [Unit])
// [Knf] build_knf: Var("stream1")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("ok"), Int(0)), App(Var("stream2"), [Unit]), Tuple([Int(1), Var("val")]))
// [Knf] build_knf: Var("ok")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("stream2"), [Unit])
// [Knf] build_knf: Var("stream2")
// [Knf] build_knf: Unit
// [Knf] build_knf: Tuple([Int(1), Var("val")])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("val")
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: LetRec({name: ("range", Fun([Unit], Tuple([Int, Int]))), args: [("from", Int), ("to", Int)], body: Let(("state", Var({val: Some(Array(Int))})), Array(Int(1), Var("from")), LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: Let(("val", Var({val: Some(Int)})), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))))}, Var("aux")))}, LetRec({name: ("addx", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, Var("aux"))}, LetRec({name: ("fold", Int), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int, Int], Int)), ("acc", Int)], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({name: ("sum", Int), args: [("stream", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), []))))))))
// [Knf] build_knf: Let(("state", Var({val: Some(Array(Int))})), Array(Int(1), Var("from")), LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: Let(("val", Var({val: Some(Int)})), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))))}, Var("aux")))
// [Knf] build_knf: Array(Int(1), Var("from"))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("from")
// [Knf] build_knf: LetRec({name: ("aux", Tuple([Int, Int])), args: [("u", Var({val: Some(Unit)}))], body: Let(("val", Var({val: Some(Int)})), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))))}, Var("aux"))
// [Knf] build_knf: Let(("val", Var({val: Some(Int)})), Get(Var("state"), Int(0)), If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))))
// [Knf] build_knf: Get(Var("state"), Int(0))
// [Knf] build_knf: Var("state")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: If(Eq(Var("val"), Var("to")), Tuple([Int(0), Int(0)]), Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")])))
// [Knf] build_knf: Var("val")
// [Knf] build_knf: Var("to")
// [Knf] build_knf: Tuple([Int(0), Int(0)])
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int))), Tuple([Int(1), Var("val")]))
// [Knf] build_knf: Put(Var("state"), Int(0), Prim(Var("val"), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("state")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Var("val"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("val")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Tuple([Int(1), Var("val")])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("val")
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: LetRec({name: ("addx", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, Var("aux"))}, LetRec({name: ("fold", Int), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int, Int], Int)), ("acc", Int)], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({name: ("sum", Int), args: [("stream", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), [])))))))
// [Knf] build_knf: LetRec({name: ("aux", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, Var("aux"))
// [Knf] build_knf: Prim(Var("x"), Var("y"), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: LetRec({name: ("fold", Int), args: [("stream", Fun([Unit], Tuple([Int, Int]))), ("f", Fun([Int, Int], Int)), ("acc", Int)], body: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))}, LetRec({name: ("sum", Int), args: [("stream", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), []))))))
// [Knf] build_knf: LetTuple([("ok", Var({val: Some(Int)})), ("val", Var({val: Some(Int)}))], App(Var("stream"), [Unit]), If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])))
// [Knf] build_knf: App(Var("stream"), [Unit])
// [Knf] build_knf: Var("stream")
// [Knf] build_knf: Unit
// [Knf] build_knf: If(Eq(Var("ok"), Int(0)), Var("acc"), App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])]))
// [Knf] build_knf: Var("ok")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("acc")
// [Knf] build_knf: App(Var("fold"), [Var("stream"), Var("f"), App(Var("f"), [Var("acc"), Var("val")])])
// [Knf] build_knf: Var("fold")
// [Knf] build_knf: Var("stream")
// [Knf] build_knf: Var("f")
// [Knf] build_knf: App(Var("f"), [Var("acc"), Var("val")])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("acc")
// [Knf] build_knf: Var("val")
// [Knf] build_knf: LetRec({name: ("sum", Int), args: [("stream", Fun([Unit], Tuple([Int, Int])))], body: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))}, LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), [])))))
// [Knf] build_knf: LetRec({name: ("add", Int), args: [("x", Int), ("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, App(Var("fold"), [Var("stream"), Var("add"), Int(0)]))
// [Knf] build_knf: Prim(Var("x"), Var("y"), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: App(Var("fold"), [Var("stream"), Var("add"), Int(0)])
// [Knf] build_knf: Var("fold")
// [Knf] build_knf: Var("stream")
// [Knf] build_knf: Var("add")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("gt", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), []))))
// [Knf] build_knf: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("x"), Var("y")), Int(0), Int(1))}, Var("aux"))
// [Knf] build_knf: If(LE(Var("x"), Var("y")), Int(0), Int(1))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: LetRec({name: ("le", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), [])))
// [Knf] build_knf: LetRec({name: ("aux", Int), args: [("y", Int)], body: If(LE(Var("y"), Var("x")), Int(0), Int(1))}, Var("aux"))
// [Knf] build_knf: If(LE(Var("y"), Var("x")), Int(0), Int(1))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("range100", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(100)]), Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))))
// [Knf] build_knf: App(Var("range"), [Int(0), Int(100)])
// [Knf] build_knf: Var("range")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(100)
// [Knf] build_knf: Let(("range1000", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("range"), [Int(0), Int(1000)]), Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit))))))))
// [Knf] build_knf: App(Var("range"), [Int(0), Int(1000)])
// [Knf] build_knf: Var("range")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1000)
// [Knf] build_knf: Let(("catt", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("concat"), [Var("range100"), Var("range1000")]), Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))))
// [Knf] build_knf: App(Var("concat"), [Var("range100"), Var("range1000")])
// [Knf] build_knf: Var("concat")
// [Knf] build_knf: Var("range100")
// [Knf] build_knf: Var("range1000")
// [Knf] build_knf: Let(("addone", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])]), Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit))))))
// [Knf] build_knf: App(Var("map"), [Var("catt"), App(Var("addx"), [Int(1)])])
// [Knf] build_knf: Var("map")
// [Knf] build_knf: Var("catt")
// [Knf] build_knf: App(Var("addx"), [Int(1)])
// [Knf] build_knf: Var("addx")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("over50", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])]), Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))))
// [Knf] build_knf: App(Var("filter"), [Var("addone"), App(Var("gt"), [Int(50)])])
// [Knf] build_knf: Var("filter")
// [Knf] build_knf: Var("addone")
// [Knf] build_knf: App(Var("gt"), [Int(50)])
// [Knf] build_knf: Var("gt")
// [Knf] build_knf: Int(50)
// [Knf] build_knf: Let(("under1200", Var({val: Some(Fun([Unit], Tuple([Int, Int])))})), App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])]), Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit))))
// [Knf] build_knf: App(Var("filter"), [Var("over50"), App(Var("le"), [Int(1200)])])
// [Knf] build_knf: Var("filter")
// [Knf] build_knf: Var("over50")
// [Knf] build_knf: App(Var("le"), [Int(1200)])
// [Knf] build_knf: Var("le")
// [Knf] build_knf: Int(1200)
// [Knf] build_knf: Let(("sum", Var({val: Some(Int)})), App(Var("sum"), [Var("under1200")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)))
// [Knf] build_knf: App(Var("sum"), [Var("under1200")])
// [Knf] build_knf: Var("sum")
// [Knf] build_knf: Var("under1200")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("sum")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit))
// [Knf] build_knf: App(Var("print_int"), [Var("sum")])
// [Knf] build_knf: Var("sum")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Int(10)]), Unit)
// [Knf] build_knf: App(Var("print_char"), [Int(10)])
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Core] b3 control: Panic -> Jump(target=b5, args=[Mem(fref=f5, mref=m1)])
// [Core] b4 control: Panic -> Jump(target=b5, args=[Insn(iref=%8)])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%6), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b1 control: Panic -> Jump(target=b6, args=[Mem(fref=f5, mref=m0)])
// [Core] b5 control: Panic -> Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b6 control: Panic -> Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Core] b0 control: Panic -> Return(args=[Mem(fref=f0, mref=m0)])
// [Core] b1 control: Panic -> Jump(target=b3, args=[Mem(fref=f8, mref=m0)])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Mem(fref=f8, mref=m1)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b0 control: Panic -> Return(args=[Mem(fref=f1, mref=m1)])
// [Core] b3 control: Panic -> Jump(target=b5, args=[Insn(iref=%4)])
// [Core] b4 control: Panic -> Jump(target=b5, args=[Insn(iref=%10)])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%8), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b1 control: Panic -> Jump(target=b6, args=[FnParam(fref=f2, fpref=$f.2)])
// [Core] b5 control: Panic -> Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b6 control: Panic -> Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Core] b1 control: Panic -> Jump(target=b3, args=[Insn(iref=%4)])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Mem(fref=f12, mref=m0)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Core] b1 control: Panic -> Jump(target=b3, args=[Mem(fref=f16, mref=m0)])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Mem(fref=f16, mref=m1)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b1 control: Panic -> Jump(target=b3, args=[Int32(val=0)])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Int32(val=1)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b1 control: Panic -> Jump(target=b3, args=[Int32(val=0)])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Int32(val=1)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Core] b0 control: Panic -> Return(args=[Unit])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Main] beta reduce catt.94 = aux.232
// [Main] beta reduce _96 = aux.296
// [Main] beta reduce addone.97 = aux.320
// [Main] beta reduce _99 = aux.341
// [Main] beta reduce _102 = aux.347
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl add.349
// [Main]   .type add.349, @function
// [Main] # leaf true
// [Main] add.349:
// [Main] .add.349_0:
// [Main]   mv a2, s10
// [Main]   add a0, a0, a1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl filter.15
// [Main]   .type filter.15, @function
// [Main] # leaf true
// [Main] filter.15:
// [Main] .filter.15_0:
// [Main]   addi a2, s11, -24
// [Main]   andi s11, a2, -8
// [Main]   la a3, aux.18
// [Main]   sd a3, 0(a2)
// [Main]   sd a0, 8(a2)
// [Main]   sd a1, 16(a2)
// [Main]   mv a0, a2
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl range.43
// [Main]   .type range.43, @function
// [Main] # leaf true
// [Main] range.43:
// [Main] .range.43_0:
// [Main]   addi a2, s11, -4
// [Main]   andi s11, a2, -8
// [Main]   sw a0, 0(a2)
// [Main]   addi a0, s11, -24
// [Main]   andi s11, a0, -8
// [Main]   la a3, aux.48
// [Main]   sd a3, 0(a0)
// [Main]   sd a2, 8(a0)
// [Main]   sd a1, 16(a0)
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl fold.63
// [Main]   .type fold.63, @function
// [Main] # leaf false
// [Main] fold.63:
// [Main] .fold.63_8:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s0, a0
// [Main]   mv s2, a1
// [Main]   mv s1, a2
// [Main] 
// [Main] .fold.63_0:
// [Main]   mv s10, s0
// [Main]   ld a1, 0(s0)
// [Main]   mv a0, zero
// [Main]   jalr a1
// [Main]   mv a1, a0
// [Main]   lw a0, 0(a1)
// [Main]   lw a1, 4(a1)
// [Main]   beq a0, zero, .fold.63_1
// [Main] 
// [Main] .fold.63_2:
// [Main]   mv s10, s2
// [Main]   ld a2, 0(s2)
// [Main]   mv a0, s1
// [Main]   jalr a2
// [Main]   mv s1, a0
// [Main]   mv s10, s0
// [Main]   ld a1, 0(s0)
// [Main]   mv a0, zero
// [Main]   jalr a1
// [Main]   mv a1, a0
// [Main]   lw a0, 0(a1)
// [Main]   lw a1, 4(a1)
// [Main]   beq a0, zero, .fold.63_3
// [Main] 
// [Main] .fold.63_4:
// [Main]   mv s10, s2
// [Main]   ld a2, 0(s2)
// [Main]   mv a0, s1
// [Main]   jalr a2
// [Main]   mv s1, a0
// [Main]   j .fold.63_0
// [Main] 
// [Main] .fold.63_1:
// [Main]   mv a0, s1
// [Main] 
// [Main] .fold.63_6:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .fold.63_3:
// [Main]   mv a0, s1
// [Main] 
// [Main] .fold.63_5:
// [Main]   j .fold.63_6
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux.320
// [Main]   .type aux.320, @function
// [Main] # leaf false
// [Main] aux.320:
// [Main] .aux.320_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   mv a1, s10
// [Main]   ld a0, 8(a1)
// [Main]   ld s0, 16(a1)
// [Main]   mv s10, a0
// [Main]   ld a1, 0(a0)
// [Main]   mv a0, zero
// [Main]   jalr a1
// [Main]   lw a1, 0(a0)
// [Main]   lw a0, 4(a0)
// [Main]   beq a1, zero, .aux.320_1
// [Main] 
// [Main] .aux.320_2:
// [Main]   mv s10, s0
// [Main]   ld a1, 0(s0)
// [Main]   jalr a1
// [Main]   addi a1, s11, -8
// [Main]   andi s11, a1, -8
// [Main]   li a2, 1
// [Main]   sw a2, 0(a1)
// [Main]   sw a0, 4(a1)
// [Main]   mv a0, a1
// [Main] 
// [Main] .aux.320_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .aux.320_1:
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   sw zero, 0(a0)
// [Main]   sw zero, 4(a0)
// [Main]   j .aux.320_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux.48
// [Main]   .type aux.48, @function
// [Main] # leaf true
// [Main] aux.48:
// [Main] .aux.48_0:
// [Main]   mv a1, s10
// [Main]   ld a0, 8(a1)
// [Main]   lw a1, 16(a1)
// [Main]   lw a2, 0(a0)
// [Main]   beq a2, a1, .aux.48_1
// [Main] 
// [Main] .aux.48_2:
// [Main]   addi a1, a2, 1
// [Main]   sw a1, 0(a0)
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   li a1, 1
// [Main]   sw a1, 0(a0)
// [Main]   sw a2, 4(a0)
// [Main] 
// [Main] .aux.48_3:
// [Main]   ret
// [Main] 
// [Main] .aux.48_1:
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   sw zero, 0(a0)
// [Main]   sw zero, 4(a0)
// [Main]   j .aux.48_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux.296
// [Main]   .type aux.296, @function
// [Main] # leaf true
// [Main] aux.296:
// [Main] .aux.296_0:
// [Main]   mv a1, s10
// [Main]   lw a1, 8(a1)
// [Main]   add a0, a1, a0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux.347
// [Main]   .type aux.347, @function
// [Main] # leaf true
// [Main] aux.347:
// [Main] .aux.347_0:
// [Main]   mv a1, s10
// [Main]   lw a1, 8(a1)
// [Main]   blt a1, a0, .aux.347_2
// [Main] 
// [Main] .aux.347_1:
// [Main]   mv a0, zero
// [Main] 
// [Main] .aux.347_3:
// [Main]   ret
// [Main] 
// [Main] .aux.347_2:
// [Main]   li a0, 1
// [Main]   j .aux.347_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux.232
// [Main]   .type aux.232, @function
// [Main] # leaf false
// [Main] aux.232:
// [Main] .aux.232_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   mv a1, s10
// [Main]   ld a0, 8(a1)
// [Main]   ld s0, 16(a1)
// [Main]   mv s10, a0
// [Main]   ld a1, 0(a0)
// [Main]   mv a0, zero
// [Main]   jalr a1
// [Main]   lw a1, 0(a0)
// [Main]   lw a0, 4(a0)
// [Main]   bne a1, zero, .aux.232_2
// [Main] 
// [Main] .aux.232_1:
// [Main]   mv s10, s0
// [Main]   ld a1, 0(s0)
// [Main]   mv a0, zero
// [Main]   jalr a1
// [Main] 
// [Main] .aux.232_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .aux.232_2:
// [Main]   addi a1, s11, -8
// [Main]   andi s11, a1, -8
// [Main]   li a2, 1
// [Main]   sw a2, 0(a1)
// [Main]   sw a0, 4(a1)
// [Main]   mv a0, a1
// [Main]   j .aux.232_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux.341
// [Main]   .type aux.341, @function
// [Main] # leaf true
// [Main] aux.341:
// [Main] .aux.341_0:
// [Main]   mv a1, s10
// [Main]   lw a1, 8(a1)
// [Main]   blt a0, a1, .aux.341_2
// [Main] 
// [Main] .aux.341_1:
// [Main]   mv a0, zero
// [Main] 
// [Main] .aux.341_3:
// [Main]   ret
// [Main] 
// [Main] .aux.341_2:
// [Main]   li a0, 1
// [Main]   j .aux.341_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main.87
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux.18
// [Main]   .type aux.18, @function
// [Main] # leaf false
// [Main] aux.18:
// [Main] .aux.18_8:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv a1, s10
// [Main]   ld s1, 8(a1)
// [Main]   ld s0, 16(a1)
// [Main] 
// [Main] .aux.18_0:
// [Main]   mv s10, s1
// [Main]   ld a1, 0(s1)
// [Main]   mv a0, zero
// [Main]   jalr a1
// [Main]   mv a1, a0
// [Main]   lw a0, 0(a1)
// [Main]   lw s2, 4(a1)
// [Main]   beq a0, zero, .aux.18_1
// [Main] 
// [Main] .aux.18_2:
// [Main]   mv s10, s0
// [Main]   ld a1, 0(s0)
// [Main]   mv a0, s2
// [Main]   jalr a1
// [Main]   bne a0, zero, .aux.18_4
// [Main] 
// [Main] .aux.18_3:
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   li a1, 1
// [Main]   sw a1, 0(a0)
// [Main]   sw s2, 4(a0)
// [Main] 
// [Main] .aux.18_5:
// [Main] 
// [Main] .aux.18_6:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .aux.18_1:
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   sw zero, 0(a0)
// [Main]   sw zero, 4(a0)
// [Main]   j .aux.18_6
// [Main] 
// [Main] .aux.18_4:
// [Main]   mv a0, zero
// [Main]   j .aux.18_0
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.87
// [Main]   .type main.87, @function
// [Main] # leaf false
// [Main] main.87:
// [Main] .main.87_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   mv a0, zero
// [Main]   li a1, 100
// [Main]   call range.43
// [Main]   mv s0, a0
// [Main]   mv a0, zero
// [Main]   li a1, 1000
// [Main]   call range.43
// [Main]   addi a1, s11, -24
// [Main]   andi s11, a1, -8
// [Main]   la a2, aux.232
// [Main]   sd a2, 0(a1)
// [Main]   sd s0, 8(a1)
// [Main]   sd a0, 16(a1)
// [Main]   addi a0, s11, -16
// [Main]   andi s11, a0, -8
// [Main]   la a2, aux.296
// [Main]   sd a2, 0(a0)
// [Main]   li a2, 1
// [Main]   sd a2, 8(a0)
// [Main]   addi a2, s11, -24
// [Main]   andi s11, a2, -8
// [Main]   la a3, aux.320
// [Main]   sd a3, 0(a2)
// [Main]   sd a1, 8(a2)
// [Main]   sd a0, 16(a2)
// [Main]   addi a1, s11, -16
// [Main]   andi s11, a1, -8
// [Main]   la a0, aux.341
// [Main]   sd a0, 0(a1)
// [Main]   li a0, 50
// [Main]   sd a0, 8(a1)
// [Main]   mv a0, a2
// [Main]   call filter.15
// [Main]   addi a1, s11, -16
// [Main]   andi s11, a1, -8
// [Main]   la a2, aux.347
// [Main]   sd a2, 0(a1)
// [Main]   li a2, 1200
// [Main]   sd a2, 8(a1)
// [Main]   call filter.15
// [Main]   addi a1, s11, -8
// [Main]   andi s11, a1, -8
// [Main]   la a2, add.349
// [Main]   sd a2, 0(a1)
// [Main]   mv a2, zero
// [Main]   call fold.63
// [Main]   call minimbt_print_int
// [Main]   li a0, 10
// [Main]   call minimbt_print_char
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function aux.232
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Apply(ty=Tuple(fields=[Int32, Int32]), f=FreeVar(fvref=^2), args=[Unit])
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m0, fills=[Field(index=0, val=Int32(val=1)), Field(index=1, val=Insn(iref=%2))])
// [Wasm] Get Local name Mem(fref=f12, mref=m0) -> $f12.m0
// [Wasm] Get Local name Mem(fref=f12, mref=m0) -> $f12.m0
// [Wasm] Get Local name Mem(fref=f12, mref=m0) -> $f12.m0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Jump(target=b3, args=[Mem(fref=f12, mref=m0)])
// [Wasm] Get Local name Mem(fref=f12, mref=m0) -> $f12.m0
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Apply(ty=Tuple(fields=[Int32, Int32]), f=FreeVar(fvref=^1), args=[Unit])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Mem(fref=f12, mref=m0) -> $f12.m0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function aux.232 to wasm
// [Wasm] Lowering function aux.48
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m0, fills=[Field(index=0, val=Int32(val=0)), Field(index=1, val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f8, mref=m0) -> $f8.m0
// [Wasm] Get Local name Mem(fref=f8, mref=m0) -> $f8.m0
// [Wasm] Get Local name Mem(fref=f8, mref=m0) -> $f8.m0
// [Wasm] Lowering control Jump(target=b3, args=[Mem(fref=f8, mref=m0)])
// [Wasm] Get Local name Mem(fref=f8, mref=m0) -> $f8.m0
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^1), index=0, width=@32), val=Insn(iref=%3))
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m1, fills=[Field(index=0, val=Int32(val=1)), Field(index=1, val=Insn(iref=%0))])
// [Wasm] Get Local name Mem(fref=f8, mref=m1) -> $f8.m1
// [Wasm] Get Local name Mem(fref=f8, mref=m1) -> $f8.m1
// [Wasm] Get Local name Mem(fref=f8, mref=m1) -> $f8.m1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b3, args=[Mem(fref=f8, mref=m1)])
// [Wasm] Get Local name Mem(fref=f8, mref=m1) -> $f8.m1
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FreeVar(fvref=^1), index=0, width=@32))
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), FreeVar(fvref=^2)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Local Mem(fref=f8, mref=m1) -> $f8.m1
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Mem(fref=f8, mref=m0) -> $f8.m0
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function aux.48 to wasm
// [Wasm] Lowering function aux.320
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m0, fills=[Field(index=0, val=Int32(val=0)), Field(index=1, val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f16, mref=m0) -> $f16.m0
// [Wasm] Get Local name Mem(fref=f16, mref=m0) -> $f16.m0
// [Wasm] Get Local name Mem(fref=f16, mref=m0) -> $f16.m0
// [Wasm] Lowering control Jump(target=b3, args=[Mem(fref=f16, mref=m0)])
// [Wasm] Get Local name Mem(fref=f16, mref=m0) -> $f16.m0
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Apply(ty=Int32, f=FreeVar(fvref=^2), args=[Insn(iref=%2)])
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m1, fills=[Field(index=0, val=Int32(val=1)), Field(index=1, val=Insn(iref=%5))])
// [Wasm] Get Local name Mem(fref=f16, mref=m1) -> $f16.m1
// [Wasm] Get Local name Mem(fref=f16, mref=m1) -> $f16.m1
// [Wasm] Get Local name Mem(fref=f16, mref=m1) -> $f16.m1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b3, args=[Mem(fref=f16, mref=m1)])
// [Wasm] Get Local name Mem(fref=f16, mref=m1) -> $f16.m1
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Apply(ty=Tuple(fields=[Int32, Int32]), f=FreeVar(fvref=^1), args=[Unit])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Mem(fref=f16, mref=m0) -> $f16.m0
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Mem(fref=f16, mref=m1) -> $f16.m1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function aux.320 to wasm
// [Wasm] Lowering function filter.15
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Unit], ty=Tuple(fields=[Int32, Int32])), mref=m0, fills=[Field(index=0, val=Fn(fref=f5)), Field(index=1, val=FnParam(fref=f0, fpref=$f.0)), Field(index=2, val=FnParam(fref=f0, fpref=$f.1))])
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Lowering control Return(args=[Mem(fref=f0, mref=m0)])
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Local Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Lowered function filter.15 to wasm
// [Wasm] Lowering function range.43
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=FnParam(fref=f1, fpref=$f.0))])
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Unit], ty=Tuple(fields=[Int32, Int32])), mref=m1, fills=[Field(index=0, val=Fn(fref=f8)), Field(index=1, val=Mem(fref=f1, mref=m0)), Field(index=2, val=FnParam(fref=f1, fpref=$f.1))])
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Lowering control Return(args=[Mem(fref=f1, mref=m1)])
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Local Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Local Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Lowered function range.43 to wasm
// [Wasm] Lowering function aux.18
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m0, fills=[Field(index=0, val=Int32(val=0)), Field(index=1, val=Int32(val=0))])
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Lowering control Jump(target=b6, args=[Mem(fref=f5, mref=m0)])
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32]), mref=m1, fills=[Field(index=0, val=Int32(val=1)), Field(index=1, val=Insn(iref=%2))])
// [Wasm] Get Local name Mem(fref=f5, mref=m1) -> $f5.m1
// [Wasm] Get Local name Mem(fref=f5, mref=m1) -> $f5.m1
// [Wasm] Get Local name Mem(fref=f5, mref=m1) -> $f5.m1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Jump(target=b5, args=[Mem(fref=f5, mref=m1)])
// [Wasm] Get Local name Mem(fref=f5, mref=m1) -> $f5.m1
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering control Jump(target=b0, args=[Unit])
// [Wasm] Lowering insn Apply(ty=Int32, f=FreeVar(fvref=^2), args=[Insn(iref=%2)])
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%5), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Branch(cond=Insn(iref=%6), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Apply(ty=Tuple(fields=[Int32, Int32]), f=FreeVar(fvref=^1), args=[Unit])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b7, args=[FnParam(fref=f5, fpref=$f.0)])
// [Wasm] Local Mem(fref=f5, mref=m1) -> $f5.m1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function aux.18 to wasm
// [Wasm] Lowering function fold.63
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Apply(ty=Int32, f=BlockParam(bref=b0, bpref=$b.1), args=[Insn(iref=%4), Insn(iref=%7)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%9)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering insn Apply(ty=Int32, f=BlockParam(bref=b0, bpref=$b.1), args=[BlockParam(bref=b0, bpref=$b.2), Insn(iref=%2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Apply(ty=Tuple(fields=[Int32, Int32]), f=BlockParam(bref=b0, bpref=$b.0), args=[Unit])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%5), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%5), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%6), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering control Branch(cond=Insn(iref=%8), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Apply(ty=Tuple(fields=[Int32, Int32]), f=BlockParam(bref=b0, bpref=$b.0), args=[Unit])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=0, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=1, width=@(@32, @(@32, @32))))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b7, args=[FnParam(fref=f2, fpref=$f.0), FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function fold.63 to wasm
// [Wasm] Lowering function aux.341
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Jump(target=b3, args=[Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Jump(target=b3, args=[Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FreeVar(fvref=^1), FnParam(fref=f18, fpref=$f.0)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FnParam(fref=f18, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f18, fpref=$f.0) -> $$f.0
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function aux.341 to wasm
// [Wasm] Lowering function aux.296
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FreeVar(fvref=^1), FnParam(fref=f14, fpref=$f.0)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.0) -> $$f.0
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function aux.296 to wasm
// [Wasm] Lowering function main.87
// [Wasm] Lowering insn Call(ty=ClosureFn(params=[Unit], ty=Tuple(fields=[Int32, Int32])), f=f1, args=[Int32(val=0), Int32(val=100)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Call(ty=ClosureFn(params=[Unit], ty=Tuple(fields=[Int32, Int32])), f=f1, args=[Int32(val=0), Int32(val=1000)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Unit], ty=Tuple(fields=[Int32, Int32])), mref=m0, fills=[Field(index=0, val=Fn(fref=f12)), Field(index=1, val=Insn(iref=%0)), Field(index=2, val=Insn(iref=%1))])
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Int32), mref=m1, fills=[Field(index=0, val=Fn(fref=f14)), Field(index=1, val=Int32(val=1))])
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Unit], ty=Tuple(fields=[Int32, Int32])), mref=m2, fills=[Field(index=0, val=Fn(fref=f16)), Field(index=1, val=Mem(fref=f3, mref=m0)), Field(index=2, val=Mem(fref=f3, mref=m1))])
// [Wasm] Get Local name Mem(fref=f3, mref=m2) -> $f3.m2
// [Wasm] Get Local name Mem(fref=f3, mref=m2) -> $f3.m2
// [Wasm] Get Local name Mem(fref=f3, mref=m2) -> $f3.m2
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Mem(fref=f3, mref=m2) -> $f3.m2
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Int32), mref=m3, fills=[Field(index=0, val=Fn(fref=f18)), Field(index=1, val=Int32(val=50))])
// [Wasm] Get Local name Mem(fref=f3, mref=m3) -> $f3.m3
// [Wasm] Get Local name Mem(fref=f3, mref=m3) -> $f3.m3
// [Wasm] Get Local name Mem(fref=f3, mref=m3) -> $f3.m3
// [Wasm] Lowering insn Call(ty=ClosureFn(params=[Unit], ty=Tuple(fields=[Int32, Int32])), f=f0, args=[Mem(fref=f3, mref=m2), Mem(fref=f3, mref=m3)])
// [Wasm] Get Local name Mem(fref=f3, mref=m2) -> $f3.m2
// [Wasm] Get Local name Mem(fref=f3, mref=m3) -> $f3.m3
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Int32), mref=m4, fills=[Field(index=0, val=Fn(fref=f20)), Field(index=1, val=Int32(val=1200))])
// [Wasm] Get Local name Mem(fref=f3, mref=m4) -> $f3.m4
// [Wasm] Get Local name Mem(fref=f3, mref=m4) -> $f3.m4
// [Wasm] Get Local name Mem(fref=f3, mref=m4) -> $f3.m4
// [Wasm] Lowering insn Call(ty=ClosureFn(params=[Unit], ty=Tuple(fields=[Int32, Int32])), f=f0, args=[Insn(iref=%6), Mem(fref=f3, mref=m4)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Mem(fref=f3, mref=m4) -> $f3.m4
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32, Int32], ty=Int32), mref=m5, fills=[Field(index=0, val=Fn(fref=f22))])
// [Wasm] Get Local name Mem(fref=f3, mref=m5) -> $f3.m5
// [Wasm] Get Local name Mem(fref=f3, mref=m5) -> $f3.m5
// [Wasm] Lowering insn Call(ty=Int32, f=f2, args=[Insn(iref=%8), Mem(fref=f3, mref=m5), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Mem(fref=f3, mref=m5) -> $f3.m5
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Int32(val=10)])
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Local Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Local Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Local Mem(fref=f3, mref=m4) -> $f3.m4
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Mem(fref=f3, mref=m5) -> $f3.m5
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Mem(fref=f3, mref=m2) -> $f3.m2
// [Wasm] Local Mem(fref=f3, mref=m3) -> $f3.m3
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function main.87 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f3, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [Wasm] Lowering function add.349
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f22, fpref=$f.0), FnParam(fref=f22, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f22, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f22, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f22, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f22, fpref=$f.1) -> $$f.1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function add.349 to wasm
// [Wasm] Lowering function aux.347
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Jump(target=b3, args=[Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Jump(target=b3, args=[Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FnParam(fref=f20, fpref=$f.0), FreeVar(fvref=^1)])
// [Wasm] Get Local name FnParam(fref=f20, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f20, fpref=$f.0) -> $$f.0
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function aux.347 to wasm
// [KnfOpt] func_tre: map.1 false
// [KnfOpt] func_tre: aux.4 false
// [KnfOpt] func_tre: filter.15 false
// [KnfOpt] func_tre: aux.18 true
// [KnfOpt] func_tre: concat.31 false
// [KnfOpt] func_tre: aux.34 false
// [KnfOpt] func_tre: range.43 false
// [KnfOpt] func_tre: aux.48 false
// [KnfOpt] func_tre: addx.59 false
// [KnfOpt] func_tre: aux.61 false
// [KnfOpt] func_tre: fold.63 true
// [KnfOpt] func_tre: sum.73 false
// [KnfOpt] func_tre: add.75 false
// [KnfOpt] func_tre: gt.79 false
// [KnfOpt] func_tre: aux.81 false
// [KnfOpt] func_tre: le.83 false
// [KnfOpt] func_tre: aux.85 false
// [KnfOpt] func_tre: main.87 false
// [KnfOpt] freq: {map.1: Once, aux.4: AsClosure, filter.15: Many(2), aux.18: AsClosure, concat.31: Once, aux.34: AsClosure, range.43: Many(2), aux.48: AsClosure, addx.59: Once, aux.61: AsClosure, fold.63: Many(2), sum.73: Once, add.75: AsClosure, gt.79: Once, aux.81: AsClosure, le.83: Once, aux.85: AsClosure, main.87: Once}
// [KnfOpt] Inline threshold 12
// [KnfOpt] Fn like 2
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision fold.63 accepted
// [KnfOpt] Knf inline Some(fold) Unit
// [KnfOpt] Inline threshold 12
// [KnfOpt] Fn like 2
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision fold.63 accepted
// [KnfOpt] Knf inline Some(fold) Unit
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision range.43 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision range.43 rejected
// [KnfOpt] Inline threshold 16
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision concat.31 accepted
// [KnfOpt] Inline threshold 3
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision addx.59 accepted
// [KnfOpt] Inline threshold 20
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision map.1 accepted
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision gt.79 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision le.83 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(le) let _102: Fun([Int], Int) = Unit
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.120: Int = (x.121: Int, y.122: Int) {
// [KnfOpt]   Add(x.121, y.122)
// [KnfOpt] }
// [KnfOpt] let _123: Int = Int(0)
// [KnfOpt] let sum.104: Int = Apply(fold.63, [under1200.103, add.120, _123, ])
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(gt) let _99: Fun([Int], Int) = Unit
// [KnfOpt] let over50.100: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [addone.97, _99, ])
// [KnfOpt] let _101: Int = Int(1200)
// [KnfOpt] let rec aux.124: Int = (y.125: Int) {
// [KnfOpt]   if (y.125 <= _101) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _102: Fun([Int], Int) = Var(aux.124)
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.126: Int = (x.127: Int, y.128: Int) {
// [KnfOpt]   Add(x.127, y.128)
// [KnfOpt] }
// [KnfOpt] let _129: Int = Int(0)
// [KnfOpt] let sum.104: Int = Apply(fold.63, [under1200.103, add.126, _129, ])
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision le.83 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(le) let _102: Fun([Int], Int) = Unit
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.132: Int = (x.133: Int, y.134: Int) {
// [KnfOpt]   Add(x.133, y.134)
// [KnfOpt] }
// [KnfOpt] let _135: Int = Int(0)
// [KnfOpt] let sum.104: Int = Apply(fold.63, [under1200.103, add.132, _135, ])
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(map) let addone.97: Fun([Unit], Tuple([Int, Int])) = Unit
// [KnfOpt] let _98: Int = Int(50)
// [KnfOpt] let rec aux.130: Int = (y.131: Int) {
// [KnfOpt]   if (_98 <= y.131) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _99: Fun([Int], Int) = Var(aux.130)
// [KnfOpt] let over50.100: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [addone.97, _99, ])
// [KnfOpt] let _101: Int = Int(1200)
// [KnfOpt] let rec aux.136: Int = (y.137: Int) {
// [KnfOpt]   if (y.137 <= _101) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _102: Fun([Int], Int) = Var(aux.136)
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.138: Int = (x.139: Int, y.140: Int) {
// [KnfOpt]   Add(x.139, y.140)
// [KnfOpt] }
// [KnfOpt] let _141: Int = Int(0)
// [KnfOpt] let sum.104: Int = Apply(fold.63, [under1200.103, add.138, _141, ])
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision gt.79 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision le.83 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(le) let _102: Fun([Int], Int) = Unit
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.153: Int = (x.154: Int, y.155: Int) {
// [KnfOpt]   Add(x.154, y.155)
// [KnfOpt] }
// [KnfOpt] let _156: Int = Int(0)
// [KnfOpt] let sum.104: Int = Apply(fold.63, [under1200.103, add.153, _156, ])
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(gt) let _99: Fun([Int], Int) = Unit
// [KnfOpt] let over50.100: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [addone.97, _99, ])
// [KnfOpt] let _101: Int = Int(1200)
// [KnfOpt] let rec aux.157: Int = (y.158: Int) {
// [KnfOpt]   if (y.158 <= _101) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _102: Fun([Int], Int) = Var(aux.157)
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.159: Int = (x.160: Int, y.161: Int) {
// [KnfOpt]   Add(x.160, y.161)
// [KnfOpt] }
// [KnfOpt] let _162: Int = Int(0)
// [KnfOpt] let sum.104: Int = Apply(fold.63, [under1200.103, add.159, _162, ])
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision le.83 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(le) let _102: Fun([Int], Int) = Unit
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.165: Int = (x.166: Int, y.167: Int) {
// [KnfOpt]   Add(x.166, y.167)
// [KnfOpt] }
// [KnfOpt] let _168: Int = Int(0)
// [KnfOpt] let sum.104: Int = Apply(fold.63, [under1200.103, add.165, _168, ])
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(addx) let _96: Fun([Int], Int) = Unit
// [KnfOpt] let rec aux.142: Tuple([Int, Int]) = (u.143: Var({val: Some(Unit)})) {
// [KnfOpt]   let _144: Unit = Unit
// [KnfOpt]   let _145: Tuple([Int, Int]) = Apply(catt.94, [_144, ])
// [KnfOpt]   let (ok.146: Var({val: Some(Int)}), val.147: Var({val: Some(Int)})) = _145
// [KnfOpt]   let _148: Int = Int(0)
// [KnfOpt]   if (ok.146 == _148) then {
// [KnfOpt]     let _149: Int = Int(0)
// [KnfOpt]     let _150: Int = Int(0)
// [KnfOpt]     Tuple([_149, _150, ])
// [KnfOpt]   } else {
// [KnfOpt]     let _151: Int = Int(1)
// [KnfOpt]     let _152: Int = Apply(_96, [val.147, ])
// [KnfOpt]     Tuple([_151, _152, ])
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let addone.97: Fun([Unit], Tuple([Int, Int])) = Var(aux.142)
// [KnfOpt] let _98: Int = Int(50)
// [KnfOpt] let rec aux.163: Int = (y.164: Int) {
// [KnfOpt]   if (_98 <= y.164) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _99: Fun([Int], Int) = Var(aux.163)
// [KnfOpt] let over50.100: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [addone.97, _99, ])
// [KnfOpt] let _101: Int = Int(1200)
// [KnfOpt] let rec aux.169: Int = (y.170: Int) {
// [KnfOpt]   if (y.170 <= _101) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _102: Fun([Int], Int) = Var(aux.169)
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.171: Int = (x.172: Int, y.173: Int) {
// [KnfOpt]   Add(x.172, y.173)
// [KnfOpt] }
// [KnfOpt] let _174: Int = Int(0)
// [KnfOpt] let sum.104: Int = Apply(fold.63, [under1200.103, add.171, _174, ])
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Inline threshold 20
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision map.1 accepted
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision gt.79 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision le.83 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(le) let _102: Fun([Int], Int) = Unit
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.177: Int = (x.178: Int, y.179: Int) {
// [KnfOpt]   Add(x.178, y.179)
// [KnfOpt] }
// [KnfOpt] let _180: Int = Int(0)
// [KnfOpt] let sum.104: Int = Apply(fold.63, [under1200.103, add.177, _180, ])
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(gt) let _99: Fun([Int], Int) = Unit
// [KnfOpt] let over50.100: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [addone.97, _99, ])
// [KnfOpt] let _101: Int = Int(1200)
// [KnfOpt] let rec aux.181: Int = (y.182: Int) {
// [KnfOpt]   if (y.182 <= _101) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _102: Fun([Int], Int) = Var(aux.181)
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.183: Int = (x.184: Int, y.185: Int) {
// [KnfOpt]   Add(x.184, y.185)
// [KnfOpt] }
// [KnfOpt] let _186: Int = Int(0)
// [KnfOpt] let sum.104: Int = Apply(fold.63, [under1200.103, add.183, _186, ])
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision le.83 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(le) let _102: Fun([Int], Int) = Unit
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.189: Int = (x.190: Int, y.191: Int) {
// [KnfOpt]   Add(x.190, y.191)
// [KnfOpt] }
// [KnfOpt] let _192: Int = Int(0)
// [KnfOpt] let sum.104: Int = Apply(fold.63, [under1200.103, add.189, _192, ])
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(map) let addone.97: Fun([Unit], Tuple([Int, Int])) = Unit
// [KnfOpt] let _98: Int = Int(50)
// [KnfOpt] let rec aux.187: Int = (y.188: Int) {
// [KnfOpt]   if (_98 <= y.188) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _99: Fun([Int], Int) = Var(aux.187)
// [KnfOpt] let over50.100: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [addone.97, _99, ])
// [KnfOpt] let _101: Int = Int(1200)
// [KnfOpt] let rec aux.193: Int = (y.194: Int) {
// [KnfOpt]   if (y.194 <= _101) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _102: Fun([Int], Int) = Var(aux.193)
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.195: Int = (x.196: Int, y.197: Int) {
// [KnfOpt]   Add(x.196, y.197)
// [KnfOpt] }
// [KnfOpt] let _198: Int = Int(0)
// [KnfOpt] let sum.104: Int = Apply(fold.63, [under1200.103, add.195, _198, ])
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision gt.79 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision le.83 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(le) let _102: Fun([Int], Int) = Unit
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.210: Int = (x.211: Int, y.212: Int) {
// [KnfOpt]   Add(x.211, y.212)
// [KnfOpt] }
// [KnfOpt] let _213: Int = Int(0)
// [KnfOpt] let sum.104: Int = Apply(fold.63, [under1200.103, add.210, _213, ])
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(gt) let _99: Fun([Int], Int) = Unit
// [KnfOpt] let over50.100: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [addone.97, _99, ])
// [KnfOpt] let _101: Int = Int(1200)
// [KnfOpt] let rec aux.214: Int = (y.215: Int) {
// [KnfOpt]   if (y.215 <= _101) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _102: Fun([Int], Int) = Var(aux.214)
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.216: Int = (x.217: Int, y.218: Int) {
// [KnfOpt]   Add(x.217, y.218)
// [KnfOpt] }
// [KnfOpt] let _219: Int = Int(0)
// [KnfOpt] let sum.104: Int = Apply(fold.63, [under1200.103, add.216, _219, ])
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision le.83 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(le) let _102: Fun([Int], Int) = Unit
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.222: Int = (x.223: Int, y.224: Int) {
// [KnfOpt]   Add(x.223, y.224)
// [KnfOpt] }
// [KnfOpt] let _225: Int = Int(0)
// [KnfOpt] let sum.104: Int = Apply(fold.63, [under1200.103, add.222, _225, ])
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(concat) let catt.94: Fun([Unit], Tuple([Int, Int])) = Unit
// [KnfOpt] let _95: Int = Int(1)
// [KnfOpt] let rec aux.175: Int = (y.176: Int) {
// [KnfOpt]   Add(_95, y.176)
// [KnfOpt] }
// [KnfOpt] let _96: Fun([Int], Int) = Var(aux.175)
// [KnfOpt] let rec aux.199: Tuple([Int, Int]) = (u.200: Var({val: Some(Unit)})) {
// [KnfOpt]   let _201: Unit = Unit
// [KnfOpt]   let _202: Tuple([Int, Int]) = Apply(catt.94, [_201, ])
// [KnfOpt]   let (ok.203: Var({val: Some(Int)}), val.204: Var({val: Some(Int)})) = _202
// [KnfOpt]   let _205: Int = Int(0)
// [KnfOpt]   if (ok.203 == _205) then {
// [KnfOpt]     let _206: Int = Int(0)
// [KnfOpt]     let _207: Int = Int(0)
// [KnfOpt]     Tuple([_206, _207, ])
// [KnfOpt]   } else {
// [KnfOpt]     let _208: Int = Int(1)
// [KnfOpt]     let _209: Int = Apply(_96, [val.204, ])
// [KnfOpt]     Tuple([_208, _209, ])
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let addone.97: Fun([Unit], Tuple([Int, Int])) = Var(aux.199)
// [KnfOpt] let _98: Int = Int(50)
// [KnfOpt] let rec aux.220: Int = (y.221: Int) {
// [KnfOpt]   if (_98 <= y.221) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _99: Fun([Int], Int) = Var(aux.220)
// [KnfOpt] let over50.100: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [addone.97, _99, ])
// [KnfOpt] let _101: Int = Int(1200)
// [KnfOpt] let rec aux.226: Int = (y.227: Int) {
// [KnfOpt]   if (y.227 <= _101) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _102: Fun([Int], Int) = Var(aux.226)
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.228: Int = (x.229: Int, y.230: Int) {
// [KnfOpt]   Add(x.229, y.230)
// [KnfOpt] }
// [KnfOpt] let _231: Int = Int(0)
// [KnfOpt] let sum.104: Int = Apply(fold.63, [under1200.103, add.228, _231, ])
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Inline threshold 3
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision addx.59 accepted
// [KnfOpt] Inline threshold 20
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision map.1 accepted
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision gt.79 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision le.83 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(le) let _102: Fun([Int], Int) = Unit
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.241: Int = (x.242: Int, y.243: Int) {
// [KnfOpt]   Add(x.242, y.243)
// [KnfOpt] }
// [KnfOpt] let _244: Int = Int(0)
// [KnfOpt] let sum.104: Int = Apply(fold.63, [under1200.103, add.241, _244, ])
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(gt) let _99: Fun([Int], Int) = Unit
// [KnfOpt] let over50.100: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [addone.97, _99, ])
// [KnfOpt] let _101: Int = Int(1200)
// [KnfOpt] let rec aux.245: Int = (y.246: Int) {
// [KnfOpt]   if (y.246 <= _101) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _102: Fun([Int], Int) = Var(aux.245)
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.247: Int = (x.248: Int, y.249: Int) {
// [KnfOpt]   Add(x.248, y.249)
// [KnfOpt] }
// [KnfOpt] let _250: Int = Int(0)
// [KnfOpt] let sum.104: Int = Apply(fold.63, [under1200.103, add.247, _250, ])
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision le.83 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(le) let _102: Fun([Int], Int) = Unit
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.253: Int = (x.254: Int, y.255: Int) {
// [KnfOpt]   Add(x.254, y.255)
// [KnfOpt] }
// [KnfOpt] let _256: Int = Int(0)
// [KnfOpt] let sum.104: Int = Apply(fold.63, [under1200.103, add.253, _256, ])
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(map) let addone.97: Fun([Unit], Tuple([Int, Int])) = Unit
// [KnfOpt] let _98: Int = Int(50)
// [KnfOpt] let rec aux.251: Int = (y.252: Int) {
// [KnfOpt]   if (_98 <= y.252) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _99: Fun([Int], Int) = Var(aux.251)
// [KnfOpt] let over50.100: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [addone.97, _99, ])
// [KnfOpt] let _101: Int = Int(1200)
// [KnfOpt] let rec aux.257: Int = (y.258: Int) {
// [KnfOpt]   if (y.258 <= _101) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _102: Fun([Int], Int) = Var(aux.257)
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.259: Int = (x.260: Int, y.261: Int) {
// [KnfOpt]   Add(x.260, y.261)
// [KnfOpt] }
// [KnfOpt] let _262: Int = Int(0)
// [KnfOpt] let sum.104: Int = Apply(fold.63, [under1200.103, add.259, _262, ])
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision gt.79 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision le.83 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(le) let _102: Fun([Int], Int) = Unit
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.274: Int = (x.275: Int, y.276: Int) {
// [KnfOpt]   Add(x.275, y.276)
// [KnfOpt] }
// [KnfOpt] let _277: Int = Int(0)
// [KnfOpt] let sum.104: Int = Apply(fold.63, [under1200.103, add.274, _277, ])
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(gt) let _99: Fun([Int], Int) = Unit
// [KnfOpt] let over50.100: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [addone.97, _99, ])
// [KnfOpt] let _101: Int = Int(1200)
// [KnfOpt] let rec aux.278: Int = (y.279: Int) {
// [KnfOpt]   if (y.279 <= _101) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _102: Fun([Int], Int) = Var(aux.278)
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.280: Int = (x.281: Int, y.282: Int) {
// [KnfOpt]   Add(x.281, y.282)
// [KnfOpt] }
// [KnfOpt] let _283: Int = Int(0)
// [KnfOpt] let sum.104: Int = Apply(fold.63, [under1200.103, add.280, _283, ])
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision le.83 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(le) let _102: Fun([Int], Int) = Unit
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.286: Int = (x.287: Int, y.288: Int) {
// [KnfOpt]   Add(x.287, y.288)
// [KnfOpt] }
// [KnfOpt] let _289: Int = Int(0)
// [KnfOpt] let sum.104: Int = Apply(fold.63, [under1200.103, add.286, _289, ])
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(addx) let _96: Fun([Int], Int) = Unit
// [KnfOpt] let rec aux.263: Tuple([Int, Int]) = (u.264: Var({val: Some(Unit)})) {
// [KnfOpt]   let _265: Unit = Unit
// [KnfOpt]   let _266: Tuple([Int, Int]) = Apply(catt.94, [_265, ])
// [KnfOpt]   let (ok.267: Var({val: Some(Int)}), val.268: Var({val: Some(Int)})) = _266
// [KnfOpt]   let _269: Int = Int(0)
// [KnfOpt]   if (ok.267 == _269) then {
// [KnfOpt]     let _270: Int = Int(0)
// [KnfOpt]     let _271: Int = Int(0)
// [KnfOpt]     Tuple([_270, _271, ])
// [KnfOpt]   } else {
// [KnfOpt]     let _272: Int = Int(1)
// [KnfOpt]     let _273: Int = Apply(_96, [val.268, ])
// [KnfOpt]     Tuple([_272, _273, ])
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let addone.97: Fun([Unit], Tuple([Int, Int])) = Var(aux.263)
// [KnfOpt] let _98: Int = Int(50)
// [KnfOpt] let rec aux.284: Int = (y.285: Int) {
// [KnfOpt]   if (_98 <= y.285) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _99: Fun([Int], Int) = Var(aux.284)
// [KnfOpt] let over50.100: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [addone.97, _99, ])
// [KnfOpt] let _101: Int = Int(1200)
// [KnfOpt] let rec aux.290: Int = (y.291: Int) {
// [KnfOpt]   if (y.291 <= _101) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _102: Fun([Int], Int) = Var(aux.290)
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.292: Int = (x.293: Int, y.294: Int) {
// [KnfOpt]   Add(x.293, y.294)
// [KnfOpt] }
// [KnfOpt] let _295: Int = Int(0)
// [KnfOpt] let sum.104: Int = Apply(fold.63, [under1200.103, add.292, _295, ])
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Inline threshold 20
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision map.1 accepted
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision gt.79 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision le.83 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(le) let _102: Fun([Int], Int) = Unit
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.298: Int = (x.299: Int, y.300: Int) {
// [KnfOpt]   Add(x.299, y.300)
// [KnfOpt] }
// [KnfOpt] let _301: Int = Int(0)
// [KnfOpt] let sum.104: Int = Apply(fold.63, [under1200.103, add.298, _301, ])
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(gt) let _99: Fun([Int], Int) = Unit
// [KnfOpt] let over50.100: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [addone.97, _99, ])
// [KnfOpt] let _101: Int = Int(1200)
// [KnfOpt] let rec aux.302: Int = (y.303: Int) {
// [KnfOpt]   if (y.303 <= _101) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _102: Fun([Int], Int) = Var(aux.302)
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.304: Int = (x.305: Int, y.306: Int) {
// [KnfOpt]   Add(x.305, y.306)
// [KnfOpt] }
// [KnfOpt] let _307: Int = Int(0)
// [KnfOpt] let sum.104: Int = Apply(fold.63, [under1200.103, add.304, _307, ])
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision le.83 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(le) let _102: Fun([Int], Int) = Unit
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.310: Int = (x.311: Int, y.312: Int) {
// [KnfOpt]   Add(x.311, y.312)
// [KnfOpt] }
// [KnfOpt] let _313: Int = Int(0)
// [KnfOpt] let sum.104: Int = Apply(fold.63, [under1200.103, add.310, _313, ])
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(map) let addone.97: Fun([Unit], Tuple([Int, Int])) = Unit
// [KnfOpt] let _98: Int = Int(50)
// [KnfOpt] let rec aux.308: Int = (y.309: Int) {
// [KnfOpt]   if (_98 <= y.309) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _99: Fun([Int], Int) = Var(aux.308)
// [KnfOpt] let over50.100: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [addone.97, _99, ])
// [KnfOpt] let _101: Int = Int(1200)
// [KnfOpt] let rec aux.314: Int = (y.315: Int) {
// [KnfOpt]   if (y.315 <= _101) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _102: Fun([Int], Int) = Var(aux.314)
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.316: Int = (x.317: Int, y.318: Int) {
// [KnfOpt]   Add(x.317, y.318)
// [KnfOpt] }
// [KnfOpt] let _319: Int = Int(0)
// [KnfOpt] let sum.104: Int = Apply(fold.63, [under1200.103, add.316, _319, ])
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision gt.79 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision le.83 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(le) let _102: Fun([Int], Int) = Unit
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.331: Int = (x.332: Int, y.333: Int) {
// [KnfOpt]   Add(x.332, y.333)
// [KnfOpt] }
// [KnfOpt] let _334: Int = Int(0)
// [KnfOpt] let sum.104: Int = Apply(fold.63, [under1200.103, add.331, _334, ])
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(gt) let _99: Fun([Int], Int) = Unit
// [KnfOpt] let over50.100: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [addone.97, _99, ])
// [KnfOpt] let _101: Int = Int(1200)
// [KnfOpt] let rec aux.335: Int = (y.336: Int) {
// [KnfOpt]   if (y.336 <= _101) then {
// [KnfOpt]     Int(0)
// [KnfOpt]   } else {
// [KnfOpt]     Int(1)
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _102: Fun([Int], Int) = Var(aux.335)
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.337: Int = (x.338: Int, y.339: Int) {
// [KnfOpt]   Add(x.338, y.339)
// [KnfOpt] }
// [KnfOpt] let _340: Int = Int(0)
// [KnfOpt] let sum.104: Int = Apply(fold.63, [under1200.103, add.337, _340, ])
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision le.83 accepted
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(le) let _102: Fun([Int], Int) = Unit
// [KnfOpt] let under1200.103: Fun([Unit], Tuple([Int, Int])) = Apply(filter.15, [over50.100, _102, ])
// [KnfOpt] let rec add.343: Int = (x.344: Int, y.345: Int) {
// [KnfOpt]   Add(x.344, y.345)
// [KnfOpt] }
// [KnfOpt] let _346: Int = Int(0)
// [KnfOpt] let sum.104: Int = Apply(fold.63, [under1200.103, add.343, _346, ])
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Inline threshold 26
// [KnfOpt] Fn like 3
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision filter.15 rejected
// [KnfOpt] Inline threshold 5
// [KnfOpt] Fn like 1
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum.73 accepted
// [KnfOpt] Knf inline Some(sum) let sum.104: Int = Unit
// [KnfOpt] let _105: Unit = ExtApply(minimbt_print_int, [sum.104, ])
// [KnfOpt] let _106: Int = Int(10)
// [KnfOpt] let _107: Unit = ExtApply(minimbt_print_char, [_106, ])
// [KnfOpt] Unit
// [KnfOpt] Numbers of let rec: 12 18 6
// [KnfOpt] Give up lambda lifting because of too many let rec produced
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %8: Apply(ty=Tuple(fields=[Int32, Int32]), f=Self(fref=f5), args=[Unit])
// [CoreOpt] eliminated tail rec call %10: Call(ty=Int32, f=f2, args=[FnParam(fref=f2, fpref=$f.0), FnParam(fref=f2, fpref=$f.1), Insn(iref=%9)])
// [CoreOpt] Call frequnce: FnCallFreq({f12: MaybeInClosure, f8: MaybeInClosure, f16: MaybeInClosure, f0: Multiple, f1: Multiple, f5: MaybeInClosure, f2: Once, f18: MaybeInClosure, f14: MaybeInClosure, f3: Once, f24: Once, f22: MaybeInClosure, f20: MaybeInClosure})
