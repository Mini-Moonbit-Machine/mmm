# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn l.165 #f0 : fn(int32, array[int32], array[int32], int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1($f0)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
    .block #b6
    .block #b7
    .block #b8
  }
  .bb #b2 (int32) {
    let %0: int32 = sub($f3, 1)
    let %1: bool = le($b2.0, %0)
    br %1 b3() b4()
  }
  .bb #b3 () {
    let %2: int32 = load int32 offset($f2, $b2.0 * @32)
    let %3: bool = le(%2, $f4)
    br %3 b5() b6()
  }
  .bb #b4 () {
    jump b8(())
  }
  .bb #b5 () {
    let %4: int32 = load int32 field($f1, 0 * @32)
    let %5: int32 = add(%4, 1)
    let _ = store int32 field($f1, 0 * @32) <- %5
    let %7: int32 = load int32 field($f1, 0 * @32)
    let %8: int32 = load int32 offset($f2, %7 * @32)
    let %9: int32 = load int32 offset($f2, $b2.0 * @32)
    let _ = store int32 offset($f2, %7 * @32) <- %9
    let _ = store int32 offset($f2, $b2.0 * @32) <- %8
    let %12: int32 = add($b2.0, 1)
    jump b2(%12)
  }
  .bb #b6 () {
    let %13: int32 = add($b2.0, 1)
    jump b2(%13)
  }
  .bb #b7 (any) {
    jump b8($b7.0)
  }
  .bb #b8 (any) {
    return $b8.0
  }
}
.fn main.167 #f3 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = ext_call minimbt_read_int()
    let _ = alloc <m0: array[int32] heap(%0)> <- [..] = 0
    jump b1(0)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b10
  }
  .bb #b2 (int32) {
    let %2: int32 = sub(%0, 1)
    let %3: bool = le($b2.0, %2)
    br %3 b3() b4()
  }
  .bb #b3 () {
    let %4: int32 = ext_call minimbt_read_int()
    let _ = store int32 offset(f3.m0, $b2.0 * @32) <- %4
    let %6: int32 = add($b2.0, 1)
    jump b2(%6)
  }
  .bb #b4 () {
    let %7: int32 = sub(%0, 1)
    let %8: unit = call f2(f3.m0, 0, %7)
    jump b5(0)
  }
  .loop #b5 pre #Some(b4) header #b6 {
    .block #b7
    .block #b8
    .block #b9
  }
  .bb #b6 (int32) {
    let %9: int32 = sub(%0, 1)
    let %10: bool = le($b6.0, %9)
    br %10 b7() b8()
  }
  .bb #b7 () {
    let %11: int32 = load int32 offset(f3.m0, $b6.0 * @32)
    let %12: unit = ext_call minimbt_print_int(%11)
    let %13: unit = ext_call minimbt_print_endline()
    let %14: int32 = add($b6.0, 1)
    jump b6(%14)
  }
  .bb #b8 () {
    jump b9(())
  }
  .bb #b9 (any) {
    return $b9.0
  }
  .bb #b10 (any) {
    return $b10.0
  }
}
.fn partition.164 #f1 : fn(array[int32], int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 offset($f0, $f2 * @32)
    let %1: int32 = sub($f1, 1)
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = %1
    let %3: unit = call f0($f1, f1.m0, $f0, $f2, %0)
    jump b1(%3)
  }
  .bb #b1 (unit) {
    let %4: int32 = load int32 field(f1.m0, 0 * @32)
    let %5: int32 = add(%4, 1)
    let _ = store int32 field(f1.m0, 0 * @32) <- %5
    let %7: int32 = load int32 field(f1.m0, 0 * @32)
    let %8: int32 = load int32 offset($f0, %7 * @32)
    let %9: int32 = load int32 offset($f0, $f2 * @32)
    let _ = store int32 offset($f0, %7 * @32) <- %9
    let _ = store int32 offset($f0, $f2 * @32) <- %8
    let %12: int32 = load int32 field(f1.m0, 0 * @32)
    return %12
  }
}
.fn quicksort.166 #f2 : fn(array[int32], int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1($f0, $f1, $f2)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
  }
  .bb #b2 (array[int32], int32, int32) {
    let %0: int32 = sub($b2.2, 1)
    let %1: bool = le($b2.1, %0)
    br %1 b3() b4()
  }
  .bb #b3 () {
    let %2: int32 = call f1($b2.0, $b2.1, $b2.2)
    jump b6(%2)
  }
  .bb #b4 () {
    jump b5(())
  }
  .bb #b5 (any) {
    return $b5.0
  }
  .bb #b6 (int32) {
    let %3: int32 = sub($b6.0, 1)
    let %4: unit = call f2($b2.0, $b2.1, %3)
    let %5: int32 = add($b6.0, 1)
    jump b2($b2.0, %5, $b2.2)
  }
}
.fn T$start #f8 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f3()
    return %0
  }
}
.thunk ::0 start
