let rec main33: Var({val: Some(Unit)}) = () {
  let _34: Int = Int(5)
  let _35: Int = Int(1)
  let arr.36: Array(Int) = ExtApply(minimbt_create_array, [_34, _35, ])
  let _37: Int = Int(0)
  let _38: Int = Int(1)
  let _40: Unit = Put arr.36[_37] = _38
  let _41: Int = Int(1)
  let _42: Int = Int(2)
  let _44: Unit = Put arr.36[_41] = _42
  let _45: Int = Int(2)
  let _46: Int = Int(3)
  let _48: Unit = Put arr.36[_45] = _46
  let _49: Int = Int(3)
  let _50: Int = Int(4)
  let _52: Unit = Put arr.36[_49] = _50
  let _53: Int = Int(4)
  let _54: Int = Int(5)
  let _56: Unit = Put arr.36[_53] = _54
  let _57: Int = Int(5)
  let rec yield25.74: Bool = (x26.75: Var({val: Some(Int)})) {
    let _76: Unit = ExtApply(minimbt_print_int, [x26.75, ])
    Bool(true)
  }
  let rec do30.77: Var({val: Some(Unit)}) = () {
    let rec next9.80: Bool = (i10.81: Var({val: Some(Int)})) {
      let _82: Int = Int(1)
      let _83: Int = Sub(_57, _82)
      if (i10.81 <= _83) then {
        let _84: Int = Get arr.36[i10.81]
        let _85: Bool = Apply(yield25.74, [_84, ])
        let _86: Bool = Bool(true)
        if (_85 == _86) then {
          let _87: Int = Int(1)
          let _88: Int = Add(i10.81, _87)
          Apply(next9.80, [_88, ])
        } else {
          Bool(false)
        }
      } else {
        Bool(false)
      }
    }
    let _89: Int = Int(0)
    let _78: Bool = Apply(next9.80, [_89, ])
    let _79: Bool = Bool(true)
    if (_78 == _79) then {
      Apply(do30.77, [])
    } else {
      Unit
    }
  }
  Apply(do30.77, [])
}
Apply(main33, [])
