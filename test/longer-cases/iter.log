// [Asm] pre_assigned_registers: Insn(iref=%2) -> v7, Insn(iref=%1) -> v6, FnParam(fref=f4, fpref=$f.0) -> v2, BlockParam(bref=b0, bpref=$b.0) -> v4, Self(fref=f4) -> v0, Mem(fref=f4, mref=m0) -> v3, Insn(iref=%0) -> v5, BlockParam(bref=b3, bpref=$b.0) -> v8
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Bool(val=true)])
// [Asm] defs: []
// [Asm] live_set: [v4, s11, zero]
// [Asm] move_origin: [v4]
// [Asm] defs: []
// [Asm] live_set: [v4, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, s11, zero]
// [Asm] move_origin: [v2]
// [Asm] defined: v4 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: [zero]
// [Asm] defined: v8 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v4, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v4, s11, zero, v13, v3]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v4, s11, zero, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: s10 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v4, s11, v10, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, v10, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, s11, v10, zero, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, s11, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v6, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v4, v6, s11, zero, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of do30.86"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r20 [label="a6", color=blue];
// [Asm]   r23 [label="v9 ← a1", color=green];
// [Asm]   r3 [label="v4 ← s0", color=green];
// [Asm]   r9 [label="a0", color=blue];
// [Asm]   r6 [label="v13 ← a1", color=green];
// [Asm]   r13 [label="t3", color=blue];
// [Asm]   r4 [label="v8 ← a0", color=green];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r11 [label="t1", color=blue];
// [Asm]   r7 [label="s10", color=blue];
// [Asm]   r10 [label="t0", color=blue];
// [Asm]   r22 [label="v6 ← a0", color=green];
// [Asm]   r14 [label="t4", color=blue];
// [Asm]   r8 [label="v10 ← a1", color=green];
// [Asm]   r5 [label="v3 ← a0", color=green];
// [Asm]   r15 [label="a1", color=blue];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="a2", color=blue];
// [Asm]   r18 [label="a4", color=blue];
// [Asm]   r19 [label="a5", color=blue];
// [Asm]   r17 [label="a3", color=blue];
// [Asm]   r21 [label="a7", color=blue];
// [Asm]   r12 [label="t2", color=blue];
// [Asm]   r3 -- r19;
// [Asm]   r1 -- r12;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r16;
// [Asm]   r9 -- r15;
// [Asm]   r2 -- r18;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r23;
// [Asm]   r1 -- r7;
// [Asm]   r8 -- r9;
// [Asm]   r1 -- r18;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r22;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r9 -- r17;
// [Asm]   r2 -- r11;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r5;
// [Asm]   r9 -- r18;
// [Asm]   r3 -- r22;
// [Asm]   r9 -- r14;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r9 -- r11;
// [Asm]   r5 -- r6;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r3 -- r21;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r9 -- r12;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r22 -- r23;
// [Asm]   r3 -- r20;
// [Asm]   r3 -- r10;
// [Asm]   r2 -- r21;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r14;
// [Asm]   r9 -- r20;
// [Asm]   r2 -- r17;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r5 -- r7;
// [Asm]   r9 -- r10;
// [Asm]   r9 -- r16;
// [Asm]   r9 -- r19;
// [Asm]   r1 -- r6;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r14;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r9 -- r13;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r23;
// [Asm]   r9 -- r21;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:v2-> 1:s11-> 2:zero-> 3:v4-> 5:v3-> 6:v13-> 8:v10-> 9:a0-> 10:t0-> 11:t1-> 12:t2-> 13:t3-> 14:t4-> 15:a1-> 16:a2-> 17:a3-> 18:a4-> 19:a5-> 20:a6-> 21:a7-> 7:s10-> 22:v6-> 23:v9-> 4:v8"
// [Asm]   comment = "v2<-a0;v9<-a1;v4<-s0;v13<-a1;v8<-a0;v6<-a0;v10<-a1;v3<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of do30.86"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   j .do30.86_0 ->   j .do30.86_0
// [Asm] subst   mv v4, v2 ->   mv s0, a0
// [Asm] subst   mv v8, zero ->   mv a0, zero
// [Asm] subst   addi v3, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v3, -8 ->   andi s11, a0, -8
// [Asm] subst   la v13, yield25.87 ->   la a1, yield25.87
// [Asm] subst   sd v13, 0(v3) ->   sd a1, 0(a0)
// [Asm] subst   mv s10, v4 ->   mv s10, s0
// [Asm] subst   ld v10, 0(v4) ->   ld a1, 0(s0)
// [Asm] subst   jalr v10 ->   jalr a1
// [Asm] subst   li v9, 1 ->   li a1, 1
// [Asm] subst   bne v6, v9, .do30.86_2 ->   bne a0, a1, .do30.86_2
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f16) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main33.80 ->   call main33.80
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0, FnParam(fref=f0, fpref=$f.3) -> v5, BlockParam(bref=b0, bpref=$b.3) -> v9, BlockParam(bref=b0, bpref=$b.0) -> v6, BlockParam(bref=b0, bpref=$b.1) -> v7, BlockParam(bref=b0, bpref=$b.2) -> v8, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%5) -> v18, Insn(iref=%0) -> v10, Insn(iref=%4) -> v15, Insn(iref=%3) -> v14, FnParam(fref=f0, fpref=$f.1) -> v3, FnParam(fref=f0, fpref=$f.2) -> v4, BlockParam(bref=b5, bpref=$b.0) -> v16, BlockParam(bref=b6, bpref=$b.0) -> v17, Insn(iref=%2) -> v13, Insn(iref=%1) -> v11, Insn(iref=%6) -> v12
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%3), Bool(val=true)])
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Asm] defs: [v16]
// [Asm] live_set: [v16]
// [Asm] move_origin: [zero]
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v17]
// [Asm] move_origin: [zero]
// [Asm] defined: v17 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v10, zero, v8, v7, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v6, v9, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, a3, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, a3, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, a3, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, a3, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, zero, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v4, v6, v5, zero, v7]
// [Asm] move_origin: [v3]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v6, v5, zero, v8]
// [Asm] move_origin: [v4]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v5]
// [Asm] defined: v9 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v17]
// [Asm] move_origin: [v16]
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v17]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v17]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [zero, v13, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [s10]
// [Asm] live_set: [zero, v13, v7, v8, v6, v9]
// [Asm] move_origin: [v9]
// [Asm] defined: s10 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v21, zero, v13, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v21, zero, v13, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v21, zero, a0, v7, v8, v6, v9]
// [Asm] move_origin: [v13]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v14]
// [Asm] live_set: [v14, zero, v7, v8, v6, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v14, zero, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defs: [v20]
// [Asm] live_set: [v14, zero, v20, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v7, v18, v9, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v18]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v8]
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of next9.82"];
// [Asm]   r0 [label="v16 ← a0", color=green];
// [Asm]   r20 [label="t1", color=blue];
// [Asm]   r23 [label="t4", color=blue];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="a2", color=blue];
// [Asm]   r26 [label="a6", color=blue];
// [Asm]   r27 [label="a7", color=blue];
// [Asm]   r6 [label="v6 ← s2", color=green];
// [Asm]   r13 [label="v4 ← a2", color=green];
// [Asm]   r4 [label="v8 ← s0", color=green];
// [Asm]   r1 [label="v17 ← a0", color=green];
// [Asm]   r29 [label="v20 ← a1", color=green];
// [Asm]   r28 [label="v14 ← a0", color=green];
// [Asm]   r11 [label="a3", color=blue];
// [Asm]   r7 [label="v9 ← s3", color=green];
// [Asm]   r10 [label="a1", color=blue];
// [Asm]   r22 [label="t3", color=blue];
// [Asm]   r14 [label="v5 ← a3", color=green];
// [Asm]   r8 [label="v2 ← a0", color=green];
// [Asm]   r30 [label="v18 ← a0", color=green];
// [Asm]   r5 [label="v7 ← s1", color=green];
// [Asm]   r24 [label="a4", color=blue];
// [Asm]   r15 [label="a0", color=blue];
// [Asm]   r25 [label="a5", color=blue];
// [Asm]   r2 [label="v10 ← a0", color=green];
// [Asm]   r16 [label="v13 ← a0", color=green];
// [Asm]   r18 [label="v21 ← a1", color=green];
// [Asm]   r19 [label="t0", color=blue];
// [Asm]   r21 [label="t2", color=blue];
// [Asm]   r17 [label="s10", color=blue];
// [Asm]   r12 [label="v3 ← a1", color=green];
// [Asm]   r6 -- r21;
// [Asm]   r5 -- r21;
// [Asm]   r7 -- r21;
// [Asm]   r3 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r7 -- r25;
// [Asm]   r5 -- r18;
// [Asm]   r6 -- r29;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r5 -- r29;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r7 -- r27;
// [Asm]   r15 -- r25;
// [Asm]   r3 -- r5;
// [Asm]   r16 -- r17;
// [Asm]   r8 -- r12;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r6 -- r13;
// [Asm]   r15 -- r18;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r30;
// [Asm]   r3 -- r4;
// [Asm]   r11 -- r13;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r7 -- r10;
// [Asm]   r4 -- r28;
// [Asm]   r9 -- r12;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r29;
// [Asm]   r2 -- r5;
// [Asm]   r28 -- r29;
// [Asm]   r3 -- r27;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r25;
// [Asm]   r5 -- r7;
// [Asm]   r5 -- r14;
// [Asm]   r15 -- r23;
// [Asm]   r11 -- r15;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r6 -- r23;
// [Asm]   r8 -- r14;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r6 -- r25;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r7 -- r29;
// [Asm]   r6 -- r11;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r20;
// [Asm]   r15 -- r26;
// [Asm]   r9 -- r15;
// [Asm]   r6 -- r14;
// [Asm]   r7 -- r24;
// [Asm]   r5 -- r23;
// [Asm]   r15 -- r22;
// [Asm]   r8 -- r9;
// [Asm]   r3 -- r12;
// [Asm]   r7 -- r26;
// [Asm]   r5 -- r13;
// [Asm]   r7 -- r20;
// [Asm]   r11 -- r12;
// [Asm]   r5 -- r19;
// [Asm]   r4 -- r20;
// [Asm]   r6 -- r16;
// [Asm]   r3 -- r28;
// [Asm]   r7 -- r30;
// [Asm]   r4 -- r30;
// [Asm]   r4 -- r18;
// [Asm]   r6 -- r22;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r16;
// [Asm]   r5 -- r11;
// [Asm]   r6 -- r26;
// [Asm]   r6 -- r12;
// [Asm]   r15 -- r27;
// [Asm]   r16 -- r18;
// [Asm]   r6 -- r24;
// [Asm]   r6 -- r20;
// [Asm]   r7 -- r28;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r19;
// [Asm]   r6 -- r27;
// [Asm]   r7 -- r22;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r7 -- r19;
// [Asm]   r12 -- r13;
// [Asm]   r5 -- r28;
// [Asm]   r8 -- r13;
// [Asm]   r3 -- r21;
// [Asm]   r15 -- r21;
// [Asm]   r5 -- r9;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r6 -- r28;
// [Asm]   r7 -- r15;
// [Asm]   r10 -- r15;
// [Asm]   r13 -- r14;
// [Asm]   r3 -- r29;
// [Asm]   r3 -- r20;
// [Asm]   r7 -- r11;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r8 -- r10;
// [Asm]   r15 -- r24;
// [Asm]   r4 -- r7;
// [Asm]   r5 -- r25;
// [Asm]   r12 -- r14;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r7 -- r23;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r26;
// [Asm]   r15 -- r20;
// [Asm]   r5 -- r30;
// [Asm]   r15 -- r19;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r5 -- r15;
// [Asm]   r4 -- r19;
// [Asm]   comment = "0:v16-> 1:v17-> 2:v10-> 3:zero-> 4:v8-> 5:v7-> 6:v6-> 7:v9-> 9:a2-> 15:a0-> 10:a1-> 11:a3-> 18:v21-> 16:v13-> 19:t0-> 20:t1-> 21:t2-> 22:t3-> 23:t4-> 24:a4-> 25:a5-> 26:a6-> 27:a7-> 17:s10-> 28:v14-> 29:v20-> 8:v2-> 12:v3-> 13:v4-> 14:v5-> 30:v18"
// [Asm]   comment = "v16<-a0;v6<-s2;v4<-a2;v8<-s0;v17<-a0;v20<-a1;v14<-a0;v9<-s3;v5<-a3;v2<-a0;v18<-a0;v7<-s1;v10<-a0;v13<-a0;v21<-a1;v3<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of next9.82"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v16, zero ->   mv a0, zero
// [Asm] subst   mv v17, zero ->   mv a0, zero
// [Asm] subst   addi v10, v7, -1 ->   addi a0, s1, -1
// [Asm] subst   blt v10, v6, .next9.82_2 ->   blt a0, s2, .next9.82_2
// [Asm] subst   mv v6, v2 ->   mv s2, a0
// [Asm] subst   mv v7, v3 ->   mv s1, a1
// [Asm] subst   mv v8, v4 ->   mv s0, a2
// [Asm] subst   mv v9, v5 ->   mv s3, a3
// [Asm] subst   j .next9.82_6 ->   j .next9.82_6
// [Asm] subst   ret ->   ret
// [Asm] subst   th.lurw v13, v8, v6, 2 ->   th.lurw a0, s0, s2, 2
// [Asm] subst   mv s10, v9 ->   mv s10, s3
// [Asm] subst   ld v21, 0(v9) ->   ld a1, 0(s3)
// [Asm] subst   jalr v21 ->   jalr a1
// [Asm] subst   li v20, 1 ->   li a1, 1
// [Asm] subst   bne v14, v20, .next9.82_4 ->   bne a0, a1, .next9.82_4
// [Asm] subst   addi v18, v6, 1 ->   addi a0, s2, 1
// [Asm] subst   mv v6, v18 ->   mv s2, a0
// [Asm] subst   j .next9.82_0 ->   j .next9.82_0
// [Asm] pre_assigned_registers: FnParam(fref=f1, fpref=$f.1) -> v3, Self(fref=f1) -> v0, FnParam(fref=f1, fpref=$f.0) -> v2, FnParam(fref=f1, fpref=$f.2) -> v4, Insn(iref=%0) -> v5
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, a2, zero, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v4, a0, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, a0, v2]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [a2, a1, a3, a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a3 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of do6.81"];
// [Asm]   r0 [label="v2 ← a3", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r13 [label="a4", color=blue];
// [Asm]   r4 [label="v3 ← a1", color=green];
// [Asm]   r1 [label="a2", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a3", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r14 [label="a5", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r5 [label="v4 ← a2", color=green];
// [Asm]   r15 [label="a6", color=blue];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="a7", color=blue];
// [Asm]   r17 [label="v5 ← a0", color=green];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r6 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r6 -- r14;
// [Asm]   r6 -- r10;
// [Asm]   r1 -- r7;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r6 -- r16;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r6 -- r12;
// [Asm]   r3 -- r5;
// [Asm]   r6 -- r8;
// [Asm]   r0 -- r6;
// [Asm]   r6 -- r13;
// [Asm]   comment = "0:v2-> 1:a2-> 2:a1-> 6:a0-> 4:v3-> 5:v4-> 3:zero-> 7:a3-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:a4-> 14:a5-> 15:a6-> 16:a7-> 17:v5"
// [Asm]   comment = "v2<-a3;v3<-a1;v4<-a2;v5<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of do6.81"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v2, a0 ->   mv a3, a0
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   call next9.82 ->   call next9.82
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f11, fpref=$f.0) -> v2, Self(fref=f11) -> v0, Insn(iref=%0) -> v3
// [Asm] defs: []
// [Asm] live_set: [a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of yield25.87"];
// [Asm]   r8 [label="a1", color=blue];
// [Asm]   r0 [label="v0 ← a1", color=green];
// [Asm]   r5 [label="t2", color=blue];
// [Asm]   r15 [label="v3 ← a0", color=green];
// [Asm]   r3 [label="t0", color=blue];
// [Asm]   r2 [label="v2 ← a0", color=green];
// [Asm]   r9 [label="a2", color=blue];
// [Asm]   r6 [label="t3", color=blue];
// [Asm]   r13 [label="a6", color=blue];
// [Asm]   r4 [label="t1", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a4", color=blue];
// [Asm]   r7 [label="t4", color=blue];
// [Asm]   r10 [label="a3", color=blue];
// [Asm]   r14 [label="a7", color=blue];
// [Asm]   r12 [label="a5", color=blue];
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:v0-> 1:a0-> 3:t0-> 4:t1-> 5:t2-> 6:t3-> 7:t4-> 8:a1-> 9:a2-> 10:a3-> 11:a4-> 12:a5-> 13:a6-> 14:a7-> 2:v2-> 15:v3"
// [Asm]   comment = "v0<-a1;v3<-a0;v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of yield25.87"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   call yield25.85 ->   call yield25.85
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Mem(fref=f5, mref=m1) -> v3, Insn(iref=%3) -> v7, Mem(fref=f5, mref=m0) -> v2, Self(fref=f5) -> v0, Insn(iref=%7) -> v11, Insn(iref=%2) -> v6, Insn(iref=%1) -> v5, Insn(iref=%6) -> v10, Insn(iref=%5) -> v9, Insn(iref=%0) -> v4, Insn(iref=%4) -> v8
// [Asm] defs: []
// [Asm] live_set: [s11]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [s11, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v22]
// [Asm] live_set: [s11, v22, v2]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [s11, v22, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, v22, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, v22, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, v22, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v20]
// [Asm] live_set: [s11, v20, v2]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v19, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [s11, v18, v2]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v17, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v16, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v2, v14, v3]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v2, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: [a0]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main33.80"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r20 [label="a4", color=blue];
// [Asm]   r23 [label="a7", color=blue];
// [Asm]   r3 [label="v20 ← a1", color=green];
// [Asm]   r9 [label="v14 ← a2", color=green];
// [Asm]   r6 [label="v17 ← a1", color=green];
// [Asm]   r13 [label="t1", color=blue];
// [Asm]   r4 [label="v19 ← a1", color=green];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r11 [label="a0", color=blue];
// [Asm]   r7 [label="v16 ← a1", color=green];
// [Asm]   r10 [label="v15 ← a2", color=green];
// [Asm]   r22 [label="a6", color=blue];
// [Asm]   r14 [label="t2", color=blue];
// [Asm]   r8 [label="v3 ← a1", color=green];
// [Asm]   r5 [label="v18 ← a1", color=green];
// [Asm]   r15 [label="t3", color=blue];
// [Asm]   r24 [label="v11 ← a0", color=green];
// [Asm]   r2 [label="v22 ← a1", color=green];
// [Asm]   r16 [label="t4", color=blue];
// [Asm]   r18 [label="a2", color=blue];
// [Asm]   r19 [label="a3", color=blue];
// [Asm]   r21 [label="a5", color=blue];
// [Asm]   r17 [label="a1", color=blue];
// [Asm]   r12 [label="t0", color=blue];
// [Asm]   r11 -- r20;
// [Asm]   r11 -- r13;
// [Asm]   r11 -- r17;
// [Asm]   r1 -- r8;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r11 -- r14;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r8 -- r9;
// [Asm]   r11 -- r16;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r2;
// [Asm]   r0 -- r1;
// [Asm]   r11 -- r12;
// [Asm]   r8 -- r10;
// [Asm]   r0 -- r10;
// [Asm]   r11 -- r23;
// [Asm]   r11 -- r22;
// [Asm]   r11 -- r15;
// [Asm]   r11 -- r18;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r11 -- r19;
// [Asm]   r11 -- r21;
// [Asm]   r0 -- r6;
// [Asm]   comment = "0:v2-> 1:s11-> 2:v22-> 3:v20-> 4:v19-> 5:v18-> 6:v17-> 7:v16-> 8:v3-> 9:v14-> 10:v15-> 11:a0-> 12:t0-> 13:t1-> 14:t2-> 15:t3-> 16:t4-> 17:a1-> 18:a2-> 19:a3-> 20:a4-> 21:a5-> 22:a6-> 23:a7-> 24:v11"
// [Asm]   comment = "v2<-a0;v20<-a1;v14<-a2;v17<-a1;v19<-a1;v16<-a1;v15<-a2;v3<-a1;v18<-a1;v11<-a0;v22<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main33.80"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v2, s11, -20 ->   addi a0, s11, -20
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a0, -8
// [Asm] subst   li v22, 1 ->   li a1, 1
// [Asm] subst   sw v22, 0(v2) ->   sw a1, 0(a0)
// [Asm] subst   sw v22, 4(v2) ->   sw a1, 4(a0)
// [Asm] subst   sw v22, 8(v2) ->   sw a1, 8(a0)
// [Asm] subst   sw v22, 12(v2) ->   sw a1, 12(a0)
// [Asm] subst   sw v22, 16(v2) ->   sw a1, 16(a0)
// [Asm] subst   li v20, 1 ->   li a1, 1
// [Asm] subst   sw v20, 0(v2) ->   sw a1, 0(a0)
// [Asm] subst   li v19, 2 ->   li a1, 2
// [Asm] subst   sw v19, 4(v2) ->   sw a1, 4(a0)
// [Asm] subst   li v18, 3 ->   li a1, 3
// [Asm] subst   sw v18, 8(v2) ->   sw a1, 8(a0)
// [Asm] subst   li v17, 4 ->   li a1, 4
// [Asm] subst   sw v17, 12(v2) ->   sw a1, 12(a0)
// [Asm] subst   li v16, 5 ->   li a1, 5
// [Asm] subst   sw v16, 16(v2) ->   sw a1, 16(a0)
// [Asm] subst   addi v3, s11, -24 ->   addi a1, s11, -24
// [Asm] subst   andi s11, v3, -8 ->   andi s11, a1, -8
// [Asm] subst   la v14, do6.83 ->   la a2, do6.83
// [Asm] subst   sd v14, 0(v3) ->   sd a2, 0(a1)
// [Asm] subst   li v15, 5 ->   li a2, 5
// [Asm] subst   sd v15, 8(v3) ->   sd a2, 8(a1)
// [Asm] subst   sd v2, 16(v3) ->   sd a0, 16(a1)
// [Asm] subst   mv a0, v3 ->   mv a0, a1
// [Asm] subst   call do30.86 ->   call do30.86
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, FnParam(fref=f2, fpref=$f.0) -> v2, Insn(iref=%0) -> v3
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of print59.84"];
// [Asm]   r8 [label="a2", color=blue];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r5 [label="t3", color=blue];
// [Asm]   r3 [label="t1", color=blue];
// [Asm]   r2 [label="t0", color=blue];
// [Asm]   r9 [label="a3", color=blue];
// [Asm]   r6 [label="t4", color=blue];
// [Asm]   r13 [label="a7", color=blue];
// [Asm]   r4 [label="t2", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a5", color=blue];
// [Asm]   r7 [label="a1", color=blue];
// [Asm]   r10 [label="a4", color=blue];
// [Asm]   r12 [label="a6", color=blue];
// [Asm]   r14 [label="v3 ← a0", color=green];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:v2-> 1:a0-> 2:t0-> 3:t1-> 4:t2-> 5:t3-> 6:t4-> 7:a1-> 8:a2-> 9:a3-> 10:a4-> 11:a5-> 12:a6-> 13:a7-> 14:v3"
// [Asm]   comment = "v2<-a0;v3<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of print59.84"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f3, fpref=$f.0) -> v2, Self(fref=f3) -> v0, Insn(iref=%0) -> v3
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: []
// [Asm] move_origin: [a0]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of yield25.85"];
// [Asm]   r8 [label="a2", color=blue];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r5 [label="t3", color=blue];
// [Asm]   r15 [label="v4 ← a0", color=green];
// [Asm]   r3 [label="t1", color=blue];
// [Asm]   r2 [label="t0", color=blue];
// [Asm]   r9 [label="a3", color=blue];
// [Asm]   r6 [label="t4", color=blue];
// [Asm]   r13 [label="a7", color=blue];
// [Asm]   r4 [label="t2", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a5", color=blue];
// [Asm]   r7 [label="a1", color=blue];
// [Asm]   r10 [label="a4", color=blue];
// [Asm]   r12 [label="a6", color=blue];
// [Asm]   r14 [label="v3 ← a0", color=green];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:v2-> 1:a0-> 2:t0-> 3:t1-> 4:t2-> 5:t3-> 6:t4-> 7:a1-> 8:a2-> 9:a3-> 10:a4-> 11:a5-> 12:a6-> 13:a7-> 14:v3-> 15:v4"
// [Asm]   comment = "v2<-a0;v4<-a0;v3<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of yield25.85"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call print59.84 ->   call print59.84
// [Asm] subst   li v4, 1 ->   li a0, 1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, FnParam(fref=f14, fpref=$f.0) -> v2, Self(fref=f14) -> v0, Insn(iref=%0) -> v5
// [Asm] defs: []
// [Asm] live_set: [a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v0, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of do6.83"];
// [Asm]   r0 [label="v0 ← a1", color=green];
// [Asm]   r3 [label="v3 ← a2", color=green];
// [Asm]   r9 [label="t2", color=blue];
// [Asm]   r6 [label="a2", color=blue];
// [Asm]   r13 [label="a4", color=blue];
// [Asm]   r4 [label="v4 ← a3", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="t4", color=blue];
// [Asm]   r7 [label="t0", color=blue];
// [Asm]   r10 [label="t3", color=blue];
// [Asm]   r14 [label="a5", color=blue];
// [Asm]   r8 [label="t1", color=blue];
// [Asm]   r5 [label="a1", color=blue];
// [Asm]   r15 [label="a6", color=blue];
// [Asm]   r2 [label="v2 ← a0", color=green];
// [Asm]   r16 [label="a7", color=blue];
// [Asm]   r17 [label="v5 ← a0", color=green];
// [Asm]   r12 [label="a3", color=blue];
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r5 -- r6;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r5;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r16;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r3;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r2 -- r3;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:v0-> 1:a0-> 3:v3-> 2:v2-> 4:v4-> 5:a1-> 6:a2-> 7:t0-> 8:t1-> 9:t2-> 10:t3-> 11:t4-> 12:a3-> 13:a4-> 14:a5-> 15:a6-> 16:a7-> 17:v5"
// [Asm]   comment = "v0<-a1;v3<-a2;v4<-a3;v2<-a0;v5<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of do6.83"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   lw v3, 8(v0) ->   lw a2, 8(a1)
// [Asm] subst   ld v4, 16(v0) ->   ld a3, 16(a1)
// [Asm] subst   mv a1, v3 ->   mv a1, a2
// [Asm] subst   mv a2, v4 ->   mv a2, a3
// [Asm] subst   call do6.81 ->   call do6.81
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] do6.81:
// [Asm] # block info: defs: [v2, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, v4, ft5, ft10, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, v5, a0, zero, a2, v4, a1, a3, v3], upward_exposed: [a2, a1, a0, zero], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .do6.81_0:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v3, a2, zero, v2]
// [Asm]   mv v4, a2  # live: [v3, v4, zero, v2]
// [Asm]   # save_ctx2  # live: [v3, v4, zero, v2]
// [Asm]   mv a0, zero  # live: [v3, v4, a0, v2]
// [Asm]   mv a1, v3  # live: [v4, a1, a0, v2]
// [Asm]   mv a2, v4  # live: [a2, a1, a0, v2]
// [Asm]   mv a3, v2  # live: [a2, a1, a3, a0]
// [Asm]   call next9.82  # live: [a0]
// [Asm]   mv v5, a0  # live: [v5]
// [Asm]   # restore_ctx2  # live: [v5]
// [Asm] # control
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] do6.83:
// [Asm] # block info: defs: [v2, t1, v0, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, v4, ft5, ft10, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, v5, a0, v0, v4, a2, a1, s10, v3], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .do6.83_0:
// [Asm]   # save_ctx1  # live: [a0, s10]
// [Asm]   mv v0, s10  # live: [v0, a0]
// [Asm]   mv v2, a0  # live: [v0, v2]
// [Asm]   lw v3, 8(v0)  # live: [v2, v0, v3]
// [Asm]   ld v4, 16(v0)  # live: [v2, v4, v3]
// [Asm]   # save_ctx2  # live: [v2, v4, v3]
// [Asm]   mv a0, v2  # live: [v4, a0, v3]
// [Asm]   mv a1, v3  # live: [v4, a1, a0]
// [Asm]   mv a2, v4  # live: [a2, a1, a0]
// [Asm]   call do6.81  # live: [a0]
// [Asm]   mv v5, a0  # live: [v5]
// [Asm]   # restore_ctx2  # live: [v5]
// [Asm] # control
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] yield25.85:
// [Asm] # block info: defs: [v3, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v4, a0, v2], upward_exposed: [a0], params_defs: []
// [Asm] # live_in: [a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .yield25.85_0:
// [Asm]   # save_ctx1  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # save_ctx2  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   call print59.84  # live: [a0]
// [Asm]   mv v3, a0  # live: []
// [Asm]   # restore_ctx2  # live: []
// [Asm] # control
// [Asm]   li v4, 1  # live: [v4]
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] print59.84:
// [Asm] # block info: defs: [v3, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v3, a0, v2], upward_exposed: [a0], params_defs: []
// [Asm] # live_in: [a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .print59.84_0:
// [Asm]   # save_ctx1  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # save_ctx2  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v3, a0  # live: [v3]
// [Asm]   # restore_ctx2  # live: [v3]
// [Asm] # control
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main33.80:
// [Asm] # block info: defs: [v3, t1, v16, v14, v22, ft0, ft1, a1, s11, fa1, fa2, ft6, v20, a4, fa6, a6, v19, ft10, ft5, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v15, v2], uses: [v2, v11, v16, v14, a0, v22, v17, s11, v18, v20, v19, v15, v3], upward_exposed: [s11], params_defs: []
// [Asm] # live_in: [s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .main33.80_0:
// [Asm]   # save_ctx1  # live: [s11]
// [Asm]   addi v2, s11, -20  # live: [v2]
// [Asm]   andi s11, v2, -8  # live: [s11, v2]
// [Asm]   li v22, 1  # live: [s11, v22, v2]
// [Asm]   sw v22, 0(v2)  # live: [s11, v22, v2]
// [Asm]   sw v22, 4(v2)  # live: [s11, v22, v2]
// [Asm]   sw v22, 8(v2)  # live: [s11, v22, v2]
// [Asm]   sw v22, 12(v2)  # live: [s11, v22, v2]
// [Asm]   sw v22, 16(v2)  # live: [s11, v2]
// [Asm]   li v20, 1  # live: [s11, v20, v2]
// [Asm]   sw v20, 0(v2)  # live: [s11, v2]
// [Asm]   li v19, 2  # live: [v19, s11, v2]
// [Asm]   sw v19, 4(v2)  # live: [s11, v2]
// [Asm]   li v18, 3  # live: [s11, v18, v2]
// [Asm]   sw v18, 8(v2)  # live: [s11, v2]
// [Asm]   li v17, 4  # live: [v17, s11, v2]
// [Asm]   sw v17, 12(v2)  # live: [s11, v2]
// [Asm]   li v16, 5  # live: [v16, s11, v2]
// [Asm]   sw v16, 16(v2)  # live: [s11, v2]
// [Asm]   addi v3, s11, -24  # live: [v2, v3]
// [Asm]   andi s11, v3, -8  # live: [v2, v3]
// [Asm]   la v14, do6.83  # live: [v2, v14, v3]
// [Asm]   sd v14, 0(v3)  # live: [v2, v3]
// [Asm]   li v15, 5  # live: [v2, v15, v3]
// [Asm]   sd v15, 8(v3)  # live: [v2, v3]
// [Asm]   sd v2, 16(v3)  # live: [v3]
// [Asm]   # save_ctx2  # live: [v3]
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   call do30.86  # live: [a0]
// [Asm]   mv v11, a0  # live: [v11]
// [Asm]   # restore_ctx2  # live: [v11]
// [Asm] # control
// [Asm]   mv a0, v11  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] do30.86:
// [Asm] # block info: defs: [v4, v2], uses: [a0, v2], upward_exposed: [a0], params_defs: []
// [Asm] # live_in: [s11, a0, zero], live_out: [v4, s11, zero]
// [Asm] # block parameters: []
// [Asm] .do30.86_5:
// [Asm]   # save_ctx1  # live: [s11, zero, a0]
// [Asm]   mv v2, a0  # live: [s11, zero, v2]
// [Asm] # control
// [Asm]   mv v4, v2  # live: [v4, s11, zero]
// [Asm] 
// [Asm] # block info: defs: [t1, v13, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v6, ft7, ft4, v10, ft9, a5, a0, fa4, ft2, a2, a3, s10, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v10, v13, a0, v4, v6, s11, v9, v3], upward_exposed: [v4, s11], params_defs: [v4]
// [Asm] # live_in: [v4, s11, zero], live_out: [v4, s11, zero]
// [Asm] # block parameters: [v4]
// [Asm] .do30.86_0:
// [Asm]   addi v3, s11, -8  # live: [v4, zero, v3]
// [Asm]   andi s11, v3, -8  # live: [v4, s11, zero, v3]
// [Asm]   la v13, yield25.87  # live: [v4, s11, zero, v13, v3]
// [Asm]   sd v13, 0(v3)  # live: [v4, s11, zero, v3]
// [Asm]   mv s10, v4  # live: [v4, s11, zero, v3]
// [Asm]   ld v10, 0(v4)  # live: [v4, s11, v10, zero, v3]
// [Asm]   # save_ctx2  # live: [v4, s11, v10, zero, v3]
// [Asm]   mv a0, v3  # live: [v4, s11, v10, zero, a0]
// [Asm]   jalr v10  # live: [v4, s11, zero, a0]
// [Asm]   mv v6, a0  # live: [v4, v6, s11, zero]
// [Asm]   # restore_ctx2  # live: [v4, v6, s11, zero]
// [Asm] # control
// [Asm]   li v9, 1  # live: [v4, v6, s11, zero, v9]
// [Asm]   bne v6, v9, .do30.86_2  # live: [v4, s11, zero]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v4], upward_exposed: [v4], params_defs: []
// [Asm] # live_in: [v4, s11, zero], live_out: [v4, s11, zero]
// [Asm] # block parameters: []
// [Asm] .do30.86_1:
// [Asm] # control
// [Asm]   mv v4, v4  # live: [v4, s11, zero]
// [Asm]   j .do30.86_0  # live: [v4, s11, zero]
// [Asm] 
// [Asm] # block info: defs: [v8], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v8]
// [Asm] # block parameters: []
// [Asm] .do30.86_2:
// [Asm] # control
// [Asm]   mv v8, zero  # live: [v8]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v8], upward_exposed: [v8], params_defs: [v8]
// [Asm] # live_in: [v8], live_out: []
// [Asm] # block parameters: [v8]
// [Asm] .do30.86_3:
// [Asm] # control
// [Asm]   mv a0, v8  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] next9.82:
// [Asm] # block info: defs: [v2, v5, v7, v8, v4, v6, v9, v3], uses: [v2, v5, a0, a2, v4, a1, a3, v3], upward_exposed: [a2, a1, a3, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a3, a0, zero], live_out: [v8, v6, v9, zero, v7]
// [Asm] # block parameters: []
// [Asm] .next9.82_8:
// [Asm]   # save_ctx1  # live: [a2, a1, a3, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, a3, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, a3, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, a3, zero, v3]
// [Asm]   mv v5, a3  # live: [v2, v4, v5, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v2  # live: [v4, v6, v5, zero, v3]
// [Asm]   mv v7, v3  # live: [v4, v6, v5, zero, v7]
// [Asm]   mv v8, v4  # live: [v7, v6, v5, zero, v8]
// [Asm]   mv v9, v5  # live: [v7, v6, v9, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [v6, v10, v7], upward_exposed: [v6, v7], params_defs: [v8, v6, v9, v7]
// [Asm] # live_in: [v7, v6, v9, zero, v8], live_out: [v7, v6, v9, zero, v8]
// [Asm] # block parameters: [v6, v7, v8, v9]
// [Asm] .next9.82_0:
// [Asm]   addi v10, v7, -1  # live: [v10, zero, v8, v7, v6, v9]
// [Asm] # control
// [Asm]   blt v10, v6, .next9.82_2  # live: [v8, v6, v9, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v13, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v20, a6, ft10, ft5, ft7, ft4, v21, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v14, v21, v13, a0, v20, v8, v6, v9], upward_exposed: [v6, v9, v8], params_defs: []
// [Asm] # live_in: [v7, v6, v9, zero, v8], live_out: [v8, v6, v9, zero, v7]
// [Asm] # block parameters: []
// [Asm] .next9.82_1:
// [Asm]   th.lurw v13, v8, v6, 2  # live: [zero, v13, v7, v8, v6, v9]
// [Asm]   mv s10, v9  # live: [zero, v13, v7, v8, v6, v9]
// [Asm]   ld v21, 0(v9)  # live: [v21, zero, v13, v7, v8, v6, v9]
// [Asm]   # save_ctx2  # live: [v21, zero, v13, v7, v8, v6, v9]
// [Asm]   mv a0, v13  # live: [v21, zero, a0, v7, v8, v6, v9]
// [Asm]   jalr v21  # live: [zero, a0, v7, v8, v6, v9]
// [Asm]   mv v14, a0  # live: [v14, zero, v7, v8, v6, v9]
// [Asm]   # restore_ctx2  # live: [v14, zero, v7, v8, v6, v9]
// [Asm] # control
// [Asm]   li v20, 1  # live: [v14, zero, v20, v7, v8, v6, v9]
// [Asm]   bne v14, v20, .next9.82_4  # live: [v7, v6, v9, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v6, v18], uses: [v8, v6, v18, v9, v7], upward_exposed: [v8, v6, v9, v7], params_defs: []
// [Asm] # live_in: [v7, v6, v9, zero, v8], live_out: [v8, v6, v9, zero, v7]
// [Asm] # block parameters: []
// [Asm] .next9.82_3:
// [Asm]   addi v18, v6, 1  # live: [v7, v18, v9, zero, v8]
// [Asm] # control
// [Asm]   mv v6, v18  # live: [v7, v6, v9, zero, v8]
// [Asm]   mv v7, v7  # live: [v7, v6, v9, zero, v8]
// [Asm]   mv v8, v8  # live: [v7, v6, v9, zero, v8]
// [Asm]   mv v9, v9  # live: [v7, v6, v9, zero, v8]
// [Asm]   j .next9.82_0  # live: [v7, v6, v9, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v17], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v17]
// [Asm] # block parameters: []
// [Asm] .next9.82_2:
// [Asm] # control
// [Asm]   mv v17, zero  # live: [v17]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v17, a0], upward_exposed: [v17], params_defs: [v17]
// [Asm] # live_in: [v17], live_out: []
// [Asm] # block parameters: [v17]
// [Asm] .next9.82_6:
// [Asm] # control
// [Asm]   mv a0, v17  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v16], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v16]
// [Asm] # block parameters: []
// [Asm] .next9.82_4:
// [Asm] # control
// [Asm]   mv v16, zero  # live: [v16]
// [Asm] 
// [Asm] # block info: defs: [v17], uses: [v16], upward_exposed: [v16], params_defs: [v16]
// [Asm] # live_in: [v16], live_out: [v17]
// [Asm] # block parameters: [v16]
// [Asm] .next9.82_5:
// [Asm] # control
// [Asm]   mv v17, v16  # live: [v17]
// [Asm]   j .next9.82_6  # live: [v17]
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main33.80  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] yield25.87:
// [Asm] # block info: defs: [v3, t1, v0, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v3, s10, a0, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .yield25.87_0:
// [Asm]   # save_ctx1  # live: [a0, s10]
// [Asm]   mv v0, s10  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # save_ctx2  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   call yield25.85  # live: [a0]
// [Asm]   mv v3, a0  # live: [v3]
// [Asm]   # restore_ctx2  # live: [v3]
// [Asm] # control
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("iter", Fun([Fun([Int], Bool)], Bool)), args: [("arr", Array(Int)), ("len", Int)], body: LetRec({name: ("do", Bool), args: [("yield", Var({val: Some(Fun([Int], Bool))}))], body: LetRec({name: ("next", Bool), args: [("i", Var({val: Some(Int)}))], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), If(App(Var("yield"), [Get(Var("arr"), Var("i"))]), App(Var("next"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Bool(false)), Bool(false))}, App(Var("next"), [Int(0)]))}, Var("do"))}, LetRec({name: ("each", Unit), args: [("iter", Fun([Fun([Int], Bool)], Bool)), ("f", Fun([Int], Unit))], body: LetRec({name: ("yield", Bool), args: [("x", Var({val: Some(Int)}))], body: Let(("_", Var({val: Some(Unit)})), App(Var("f"), [Var("x")]), Bool(true))}, LetRec({name: ("do", Var({val: Some(Unit)})), args: [], body: If(App(Var("iter"), [Var("yield")]), App(Var("do"), []), Unit)}, App(Var("do"), [])))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("arr", Var({val: Some(Array(Int))})), Array(Int(5), Int(1)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(0), Int(1)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(1), Int(2)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(4), Int(5)), Let(("f", Var({val: Some(Fun([Fun([Int], Bool)], Bool))})), App(Var("iter"), [Var("arr"), Int(5)]), LetRec({name: ("print", Unit), args: [("x", Var({val: Some(Int)}))], body: App(Var("print_int"), [Var("x")])}, App(Var("each"), [Var("f"), Var("print")])))))))))}, App(Var("main"), []))))
// [Knf] build_knf: LetRec({name: ("do", Bool), args: [("yield", Var({val: Some(Fun([Int], Bool))}))], body: LetRec({name: ("next", Bool), args: [("i", Var({val: Some(Int)}))], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), If(App(Var("yield"), [Get(Var("arr"), Var("i"))]), App(Var("next"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Bool(false)), Bool(false))}, App(Var("next"), [Int(0)]))}, Var("do"))
// [Knf] build_knf: LetRec({name: ("next", Bool), args: [("i", Var({val: Some(Int)}))], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), If(App(Var("yield"), [Get(Var("arr"), Var("i"))]), App(Var("next"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Bool(false)), Bool(false))}, App(Var("next"), [Int(0)]))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), If(App(Var("yield"), [Get(Var("arr"), Var("i"))]), App(Var("next"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Bool(false)), Bool(false))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(App(Var("yield"), [Get(Var("arr"), Var("i"))]), App(Var("next"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Bool(false))
// [Knf] build_knf: App(Var("yield"), [Get(Var("arr"), Var("i"))])
// [Knf] build_knf: Var("yield")
// [Knf] build_knf: Get(Var("arr"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("next"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("next")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Bool(false)
// [Knf] build_knf: Bool(true)
// [Knf] build_knf: Bool(false)
// [Knf] build_knf: App(Var("next"), [Int(0)])
// [Knf] build_knf: Var("next")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("do")
// [Knf] build_knf: LetRec({name: ("each", Unit), args: [("iter", Fun([Fun([Int], Bool)], Bool)), ("f", Fun([Int], Unit))], body: LetRec({name: ("yield", Bool), args: [("x", Var({val: Some(Int)}))], body: Let(("_", Var({val: Some(Unit)})), App(Var("f"), [Var("x")]), Bool(true))}, LetRec({name: ("do", Var({val: Some(Unit)})), args: [], body: If(App(Var("iter"), [Var("yield")]), App(Var("do"), []), Unit)}, App(Var("do"), [])))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("arr", Var({val: Some(Array(Int))})), Array(Int(5), Int(1)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(0), Int(1)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(1), Int(2)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(4), Int(5)), Let(("f", Var({val: Some(Fun([Fun([Int], Bool)], Bool))})), App(Var("iter"), [Var("arr"), Int(5)]), LetRec({name: ("print", Unit), args: [("x", Var({val: Some(Int)}))], body: App(Var("print_int"), [Var("x")])}, App(Var("each"), [Var("f"), Var("print")])))))))))}, App(Var("main"), [])))
// [Knf] build_knf: LetRec({name: ("yield", Bool), args: [("x", Var({val: Some(Int)}))], body: Let(("_", Var({val: Some(Unit)})), App(Var("f"), [Var("x")]), Bool(true))}, LetRec({name: ("do", Var({val: Some(Unit)})), args: [], body: If(App(Var("iter"), [Var("yield")]), App(Var("do"), []), Unit)}, App(Var("do"), [])))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("f"), [Var("x")]), Bool(true))
// [Knf] build_knf: App(Var("f"), [Var("x")])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Bool(true)
// [Knf] build_knf: LetRec({name: ("do", Var({val: Some(Unit)})), args: [], body: If(App(Var("iter"), [Var("yield")]), App(Var("do"), []), Unit)}, App(Var("do"), []))
// [Knf] build_knf: If(App(Var("iter"), [Var("yield")]), App(Var("do"), []), Unit)
// [Knf] build_knf: App(Var("iter"), [Var("yield")])
// [Knf] build_knf: Var("iter")
// [Knf] build_knf: Var("yield")
// [Knf] build_knf: App(Var("do"), [])
// [Knf] build_knf: Var("do")
// [Knf] build_knf: Unit
// [Knf] build_knf: Bool(true)
// [Knf] build_knf: App(Var("do"), [])
// [Knf] build_knf: Var("do")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("arr", Var({val: Some(Array(Int))})), Array(Int(5), Int(1)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(0), Int(1)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(1), Int(2)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(4), Int(5)), Let(("f", Var({val: Some(Fun([Fun([Int], Bool)], Bool))})), App(Var("iter"), [Var("arr"), Int(5)]), LetRec({name: ("print", Unit), args: [("x", Var({val: Some(Int)}))], body: App(Var("print_int"), [Var("x")])}, App(Var("each"), [Var("f"), Var("print")])))))))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("arr", Var({val: Some(Array(Int))})), Array(Int(5), Int(1)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(0), Int(1)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(1), Int(2)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(4), Int(5)), Let(("f", Var({val: Some(Fun([Fun([Int], Bool)], Bool))})), App(Var("iter"), [Var("arr"), Int(5)]), LetRec({name: ("print", Unit), args: [("x", Var({val: Some(Int)}))], body: App(Var("print_int"), [Var("x")])}, App(Var("each"), [Var("f"), Var("print")])))))))))
// [Knf] build_knf: Array(Int(5), Int(1))
// [Knf] build_knf: Int(5)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(0), Int(1)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(1), Int(2)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(4), Int(5)), Let(("f", Var({val: Some(Fun([Fun([Int], Bool)], Bool))})), App(Var("iter"), [Var("arr"), Int(5)]), LetRec({name: ("print", Unit), args: [("x", Var({val: Some(Int)}))], body: App(Var("print_int"), [Var("x")])}, App(Var("each"), [Var("f"), Var("print")]))))))))
// [Knf] build_knf: Put(Var("arr"), Int(0), Int(1))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(1), Int(2)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(4), Int(5)), Let(("f", Var({val: Some(Fun([Fun([Int], Bool)], Bool))})), App(Var("iter"), [Var("arr"), Int(5)]), LetRec({name: ("print", Unit), args: [("x", Var({val: Some(Int)}))], body: App(Var("print_int"), [Var("x")])}, App(Var("each"), [Var("f"), Var("print")])))))))
// [Knf] build_knf: Put(Var("arr"), Int(1), Int(2))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(4), Int(5)), Let(("f", Var({val: Some(Fun([Fun([Int], Bool)], Bool))})), App(Var("iter"), [Var("arr"), Int(5)]), LetRec({name: ("print", Unit), args: [("x", Var({val: Some(Int)}))], body: App(Var("print_int"), [Var("x")])}, App(Var("each"), [Var("f"), Var("print")]))))))
// [Knf] build_knf: Put(Var("arr"), Int(2), Int(3))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(4), Int(5)), Let(("f", Var({val: Some(Fun([Fun([Int], Bool)], Bool))})), App(Var("iter"), [Var("arr"), Int(5)]), LetRec({name: ("print", Unit), args: [("x", Var({val: Some(Int)}))], body: App(Var("print_int"), [Var("x")])}, App(Var("each"), [Var("f"), Var("print")])))))
// [Knf] build_knf: Put(Var("arr"), Int(3), Int(4))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Int(4)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(4), Int(5)), Let(("f", Var({val: Some(Fun([Fun([Int], Bool)], Bool))})), App(Var("iter"), [Var("arr"), Int(5)]), LetRec({name: ("print", Unit), args: [("x", Var({val: Some(Int)}))], body: App(Var("print_int"), [Var("x")])}, App(Var("each"), [Var("f"), Var("print")]))))
// [Knf] build_knf: Put(Var("arr"), Int(4), Int(5))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Int(4)
// [Knf] build_knf: Int(5)
// [Knf] build_knf: Let(("f", Var({val: Some(Fun([Fun([Int], Bool)], Bool))})), App(Var("iter"), [Var("arr"), Int(5)]), LetRec({name: ("print", Unit), args: [("x", Var({val: Some(Int)}))], body: App(Var("print_int"), [Var("x")])}, App(Var("each"), [Var("f"), Var("print")])))
// [Knf] build_knf: App(Var("iter"), [Var("arr"), Int(5)])
// [Knf] build_knf: Var("iter")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Int(5)
// [Knf] build_knf: LetRec({name: ("print", Unit), args: [("x", Var({val: Some(Int)}))], body: App(Var("print_int"), [Var("x")])}, App(Var("each"), [Var("f"), Var("print")]))
// [Knf] build_knf: App(Var("print_int"), [Var("x")])
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("each"), [Var("f"), Var("print")])
// [Knf] build_knf: Var("each")
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("print")
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl do6.81
// [Main]   .type do6.81, @function
// [Main] # leaf false
// [Main] do6.81:
// [Main] .do6.81_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a3, a0
// [Main]   mv a0, zero
// [Main]   call next9.82
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl do6.83
// [Main]   .type do6.83, @function
// [Main] # leaf false
// [Main] do6.83:
// [Main] .do6.83_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a1, s10
// [Main]   lw a2, 8(a1)
// [Main]   ld a3, 16(a1)
// [Main]   mv a1, a2
// [Main]   mv a2, a3
// [Main]   call do6.81
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl yield25.85
// [Main]   .type yield25.85, @function
// [Main] # leaf false
// [Main] yield25.85:
// [Main] .yield25.85_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call print59.84
// [Main]   li a0, 1
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl print59.84
// [Main]   .type print59.84, @function
// [Main] # leaf false
// [Main] print59.84:
// [Main] .print59.84_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main33.80
// [Main]   .type main33.80, @function
// [Main] # leaf false
// [Main] main33.80:
// [Main] .main33.80_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   addi a0, s11, -20
// [Main]   andi s11, a0, -8
// [Main]   li a1, 1
// [Main]   sw a1, 0(a0)
// [Main]   sw a1, 4(a0)
// [Main]   sw a1, 8(a0)
// [Main]   sw a1, 12(a0)
// [Main]   sw a1, 16(a0)
// [Main]   li a1, 1
// [Main]   sw a1, 0(a0)
// [Main]   li a1, 2
// [Main]   sw a1, 4(a0)
// [Main]   li a1, 3
// [Main]   sw a1, 8(a0)
// [Main]   li a1, 4
// [Main]   sw a1, 12(a0)
// [Main]   li a1, 5
// [Main]   sw a1, 16(a0)
// [Main]   addi a1, s11, -24
// [Main]   andi s11, a1, -8
// [Main]   la a2, do6.83
// [Main]   sd a2, 0(a1)
// [Main]   li a2, 5
// [Main]   sd a2, 8(a1)
// [Main]   sd a0, 16(a1)
// [Main]   mv a0, a1
// [Main]   call do30.86
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl do30.86
// [Main]   .type do30.86, @function
// [Main] # leaf false
// [Main] do30.86:
// [Main] .do30.86_5:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   mv s0, a0
// [Main] 
// [Main] .do30.86_0:
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   la a1, yield25.87
// [Main]   sd a1, 0(a0)
// [Main]   mv s10, s0
// [Main]   ld a1, 0(s0)
// [Main]   jalr a1
// [Main]   li a1, 1
// [Main]   bne a0, a1, .do30.86_2
// [Main] 
// [Main] .do30.86_1:
// [Main]   j .do30.86_0
// [Main] 
// [Main] .do30.86_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .do30.86_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl next9.82
// [Main]   .type next9.82, @function
// [Main] # leaf false
// [Main] next9.82:
// [Main] .next9.82_8:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   mv s2, a0
// [Main]   mv s1, a1
// [Main]   mv s0, a2
// [Main]   mv s3, a3
// [Main] 
// [Main] .next9.82_0:
// [Main]   addi a0, s1, -1
// [Main]   blt a0, s2, .next9.82_2
// [Main] 
// [Main] .next9.82_1:
// [Main]   th.lurw a0, s0, s2, 2
// [Main]   mv s10, s3
// [Main]   ld a1, 0(s3)
// [Main]   jalr a1
// [Main]   li a1, 1
// [Main]   bne a0, a1, .next9.82_4
// [Main] 
// [Main] .next9.82_3:
// [Main]   addi a0, s2, 1
// [Main]   mv s2, a0
// [Main]   j .next9.82_0
// [Main] 
// [Main] .next9.82_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .next9.82_6:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main] .next9.82_4:
// [Main]   mv a0, zero
// [Main] 
// [Main] .next9.82_5:
// [Main]   j .next9.82_6
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main33.80
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl yield25.87
// [Main]   .type yield25.87, @function
// [Main] # leaf false
// [Main] yield25.87:
// [Main] .yield25.87_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a1, s10
// [Main]   call yield25.85
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function do30.86
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Bool), mref=m0, fills=[Field(index=0, val=Fn(fref=f11))])
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Lowering insn Apply(ty=Bool, f=BlockParam(bref=b0, bpref=$b.0), args=[Mem(fref=f4, mref=m0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Bool(val=true)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f4, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function do30.86 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f5, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [Wasm] Lowering function next9.82
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%5), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[Bool(val=false)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.2), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Apply(ty=Bool, f=BlockParam(bref=b0, bpref=$b.3), args=[Insn(iref=%2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%3), Bool(val=true)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Branch(cond=Insn(iref=%4), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b6, args=[Bool(val=false)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b7, args=[FnParam(fref=f0, fpref=$f.0), FnParam(fref=f0, fpref=$f.1), FnParam(fref=f0, fpref=$f.2), FnParam(fref=f0, fpref=$f.3)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.3) -> $$f.3
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function next9.82 to wasm
// [Wasm] Lowering function do6.81
// [Wasm] Lowering insn Call(ty=Bool, f=f0, args=[Int32(val=0), FnParam(fref=f1, fpref=$f.1), FnParam(fref=f1, fpref=$f.2), FnParam(fref=f1, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function do6.81 to wasm
// [Wasm] Lowering function yield25.87
// [Wasm] Lowering insn Call(ty=Bool, f=f3, args=[FnParam(fref=f11, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f11, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f11, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function yield25.87 to wasm
// [Wasm] Lowering function main33.80
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Int32(val=1))])
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f5, mref=m0), index=0, width=@32), val=Int32(val=1))
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f5, mref=m0), index=1, width=@32), val=Int32(val=2))
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f5, mref=m0), index=2, width=@32), val=Int32(val=3))
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f5, mref=m0), index=3, width=@32), val=Int32(val=4))
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f5, mref=m0), index=4, width=@32), val=Int32(val=5))
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[ClosureFn(params=[Int32], ty=Bool)], ty=Bool), mref=m1, fills=[Field(index=0, val=Fn(fref=f14)), Field(index=1, val=Int32(val=5)), Field(index=2, val=Mem(fref=f5, mref=m0))])
// [Wasm] Get Local name Mem(fref=f5, mref=m1) -> $f5.m1
// [Wasm] Get Local name Mem(fref=f5, mref=m1) -> $f5.m1
// [Wasm] Get Local name Mem(fref=f5, mref=m1) -> $f5.m1
// [Wasm] Get Local name Mem(fref=f5, mref=m1) -> $f5.m1
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[Mem(fref=f5, mref=m1)])
// [Wasm] Get Local name Mem(fref=f5, mref=m1) -> $f5.m1
// [Wasm] Lowering control Return(args=[Insn(iref=%7)])
// [Wasm] Local Mem(fref=f5, mref=m1) -> $f5.m1
// [Wasm] Local Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Lowered function main33.80 to wasm
// [Wasm] Lowering function print59.84
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[FnParam(fref=f2, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Lowered function print59.84 to wasm
// [Wasm] Lowering function yield25.85
// [Wasm] Lowering insn Call(ty=Unit, f=f2, args=[FnParam(fref=f3, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Lowering control Return(args=[Bool(val=true)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Lowered function yield25.85 to wasm
// [Wasm] Lowering function do6.83
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Lowering insn Call(ty=Bool, f=f1, args=[FnParam(fref=f14, fpref=$f.0), FreeVar(fvref=^1), FreeVar(fvref=^2)])
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f14, fpref=$f.0) -> $$f.0
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function do6.83 to wasm
// [KnfOpt] freq: {iter1: Once, do6: AsClosure, next9: Many(2), each20: Once, yield25: AsClosure, do30: Many(2), main33: Once, print59: AsClosure}
// [KnfOpt] Inline threshold 2 19
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 19
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 7
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 7
// [KnfOpt] Inline decision rejected
// [KnfOpt] Knf inline Some(iter1)
// [KnfOpt] Knf inline Some(each20)
// [KnfOpt] Numbers of let rec: 6 8 2
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %3: Call(ty=Unit, f=f4, args=[FnParam(fref=f4, fpref=$f.0)])
// [CoreOpt] eliminated tail rec call %6: Call(ty=Bool, f=f0, args=[Insn(iref=%5), FnParam(fref=f0, fpref=$f.1), FnParam(fref=f0, fpref=$f.2), FnParam(fref=f0, fpref=$f.3)])
// [CoreOpt] Call frequnce: FnCallFreq({f4: Once, f16: Once, f0: Once, f1: Once, f11: MaybeInClosure, f5: Once, f2: Once, f3: Once, f14: MaybeInClosure})
