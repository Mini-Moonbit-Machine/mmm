// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f6) -> v0, Insn(iref=%0) -> v2
// [Asm] LoweringOrder: [5, 0, 15, 7, 9, 8, 11, 12, 13, 6, 2, 3, 1, 10]
// [Asm] LoweringOrder: [[4], [15], [14], [8, 9], [13], [10, 11], [12], [13], [6], [1, 2], [3], [], [0], [7]]
// [Asm] LoweringOrder: HashMap::of([(b6, 1), (b12, 1), (b8, 0), (b9, 2), (b0, 0), (b13, 1), (b15, 0), (b10, 0), (b11, 1), (b1, 1), (b5, 0), (b2, 5), (b3, 5), (b7, 0)])
// [Asm] LoweringOrder: [b5, b0, b15, b7, b8, b10, b11, b12, b13, b6, b1, b9, b2, b3]
// [Asm] LoweringOrder: HashMap::of([(b6, 3), (b12, 1), (b8, 4), (b9, 0), (b0, 1), (b13, 2), (b15, 2), (b10, 5), (b11, 0), (b1, 4), (b5, 0), (b2, 0), (b3, 1), (b7, 3)])
// [Asm] pre_assigned_registers: BlockParam(bref=b13, bpref=$b.0) -> v12, BlockParam(bref=b12, bpref=$b.0) -> v11, Insn(iref=%3) -> v8, Insn(iref=%7) -> v7, FnParam(fref=f1, fpref=$f.0) -> v2, BlockParam(bref=b7, bpref=$b.1) -> v5, BlockParam(bref=b7, bpref=$b.0) -> v4, BlockParam(bref=b6, bpref=$b.0) -> v13, BlockParam(bref=b3, bpref=$b.0) -> v15, Insn(iref=%2) -> v6, Insn(iref=%1) -> v14, BlockParam(bref=b0, bpref=$b.0) -> v3, Self(fref=f1) -> v0, Insn(iref=%6) -> v16, Insn(iref=%5) -> v10, Insn(iref=%4) -> v9
// [Asm] succs: [7]
// [Asm] critical edges for b10: []
// [Asm] critical color seq for b10: []
// [Asm] succs: [0]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b6: []
// [Asm] critical color seq for b6: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b6, bpref=$b.0), Bool(val=true)])
// [Asm] succs: [6]
// [Asm] critical edges for b13: []
// [Asm] critical color seq for b13: []
// [Asm] succs: [13]
// [Asm] critical edges for b12: []
// [Asm] critical color seq for b12: []
// [Asm] succs: [12]
// [Asm] critical edges for b11: []
// [Asm] critical color seq for b11: []
// [Asm] succs: [10, 11]
// [Asm] critical edges for b8: []
// [Asm] critical color seq for b8: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Bool(val=true), Bool(val=true)])
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b7, bpref=$b.0), width=@32))
// [Asm] succs: [13]
// [Asm] critical edges for b9: []
// [Asm] critical color seq for b9: []
// [Asm] succs: [8, 9]
// [Asm] critical edges for b7: []
// [Asm] critical color seq for b7: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b7, bpref=$b.0), Int32(val=4)])
// [Asm] succs: [14]
// [Asm] critical edges for b15: []
// [Asm] critical color seq for b15: []
// [Asm] succs: [15]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] succs: [4]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] defs: [v12]
// [Asm] live_set: [v12, zero, v3]
// [Asm] move: v12 <- zero
// [Asm] defined: v12 is X
// [Asm] skip edge 1 -> 0
// [Asm] defs: []
// [Asm] live_set: [v12, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [zero, v3]
// [Asm] move: v3 <- v3
// [Asm] defs: []
// [Asm] live_set: [zero, v3]
// [Asm] defs: [v15]
// [Asm] live_set: [v15]
// [Asm] move: v15 <- zero
// [Asm] defined: v15 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v13, zero, v3]
// [Asm] move: v13 <- v12
// [Asm] defined: v13 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v4, v5, zero, v22, v3]
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] defs: [v18]
// [Asm] live_set: [v18, zero, v13, v3]
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v3]
// [Asm] defs: [v11]
// [Asm] live_set: [v11, zero, v3]
// [Asm] move: v11 <- zero
// [Asm] defined: v11 is X
// [Asm] skip edge 9 -> 0
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v4, v5, zero, v3]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v4, v5, zero, v3]
// [Asm] defs: [a0]
// [Asm] live_set: [v4, v5, zero, a0, v3]
// [Asm] move: a0 <- v8
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, v5, zero, a0, v3]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move: v9 <- a0
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] defs: [v19]
// [Asm] live_set: [v19, v4, v5, zero, v3]
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] defs: [v12]
// [Asm] live_set: [v12, zero, v3]
// [Asm] move: v12 <- v11
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [zero, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [zero, v3]
// [Asm] move: v3 <- v2
// [Asm] defined: v3 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v5, v16, zero, v3]
// [Asm] defined: v16 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move: v4 <- v16
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move: v5 <- v5
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v15
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v4]
// [Asm] live_set: [v4, zero, v3]
// [Asm] move: v4 <- zero
// [Asm] defined: v4 is X
// [Asm] skip edge 6 -> 0
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move: v5 <- v3
// [Asm] defined: v5 is X
// [Asm] skip edge 7 -> 2
// [Asm] Label("do.92") clobbered_x: @hashset.of([s0, a1, a0, s1])
// [Asm] Label("do.92") clobbered_f: @hashset.of([])
// [Asm] subst   mv v12, zero ->   mv a0, zero
// [Asm] subst   j .do.92_13 ->   j .do.92_13
// [Asm] subst   j .do.92_0 ->   j .do.92_0
// [Asm] subst   mv v15, zero ->   mv a0, zero
// [Asm] subst   li v22, 4 ->   li a0, 4
// [Asm] subst   blt v22, v4, .do.92_9 ->   blt a0, s1, .do.92_9
// [Asm] subst   li v18, 1 ->   li a1, 1
// [Asm] subst   bne v13, v18, .do.92_2 ->   bne a0, a1, .do.92_2
// [Asm] subst   mv v11, zero ->   mv a0, zero
// [Asm] subst   th.lurw v8, v5, v4, 2 ->   th.lurw a0, s0, s1, 2
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v19, 1 ->   li a0, 1
// [Asm] subst   bne v19, v19, .do.92_11 ->   bne a0, a0, .do.92_11
// [Asm] subst   mv v3, v2 ->   mv s0, a0
// [Asm] subst   addi v16, v4, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v4, v16 ->   mv s1, a0
// [Asm] subst   j .do.92_7 ->   j .do.92_7
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v4, zero ->   mv s1, zero
// [Asm] retarget: {Label(".do.92_1"): Label(".do.92_0")}
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v6, Mem(fref=f2, mref=m0) -> v2, Insn(iref=%2) -> v5, Insn(iref=%1) -> v4, Self(fref=f2) -> v0, Insn(iref=%6) -> v9, Insn(iref=%5) -> v8, Insn(iref=%0) -> v3, Insn(iref=%4) -> v7
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [s11]
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2]
// [Asm] defined: s11 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v17, v2]
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v17, v2]
// [Asm] defs: []
// [Asm] live_set: [v17, v2]
// [Asm] defs: []
// [Asm] live_set: [v17, v2]
// [Asm] defs: []
// [Asm] live_set: [v17, v2]
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] defs: [v15]
// [Asm] live_set: [v15, v2]
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] defs: [v14]
// [Asm] live_set: [v14, v2]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] defs: [v13]
// [Asm] live_set: [v13, v2]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] defs: [v12]
// [Asm] live_set: [v12, v2]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v2]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v2
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move: v9 <- a0
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v9]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v9
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main.91") clobbered_x: @hashset.of([a1, a0])
// [Asm] Label("main.91") clobbered_f: @hashset.of([])
// [Asm] subst   addi v2, s11, -20 ->   addi a0, s11, -20
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a0, -8
// [Asm] subst   li v17, 1 ->   li a1, 1
// [Asm] subst   sw v17, 0(v2) ->   sw a1, 0(a0)
// [Asm] subst   sw v17, 4(v2) ->   sw a1, 4(a0)
// [Asm] subst   sw v17, 8(v2) ->   sw a1, 8(a0)
// [Asm] subst   sw v17, 12(v2) ->   sw a1, 12(a0)
// [Asm] subst   sw v17, 16(v2) ->   sw a1, 16(a0)
// [Asm] subst   li v15, 1 ->   li a1, 1
// [Asm] subst   sw v15, 0(v2) ->   sw a1, 0(a0)
// [Asm] subst   li v14, 2 ->   li a1, 2
// [Asm] subst   sw v14, 4(v2) ->   sw a1, 4(a0)
// [Asm] subst   li v13, 3 ->   li a1, 3
// [Asm] subst   sw v13, 8(v2) ->   sw a1, 8(a0)
// [Asm] subst   li v12, 4 ->   li a1, 4
// [Asm] subst   sw v12, 12(v2) ->   sw a1, 12(a0)
// [Asm] subst   li v11, 5 ->   li a1, 5
// [Asm] subst   sw v11, 16(v2) ->   sw a1, 16(a0)
// [Asm] subst   call do.92 ->   call do.92
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] do.92:
// [Asm] # block info: defs: [v3, v2], uses: [a0, v2], upward_exposed: [a0], params_defs: []
// [Asm] # live_in: [a0, zero], live_out: [zero, v3]
// [Asm] # block parameters: []
// [Asm] .do.92_5:
// [Asm]   # save_ctx1  # live: [zero, a0]
// [Asm]   mv v2, a0  # live: [zero, v2]
// [Asm] # control
// [Asm]   mv v3, v2  # live: [zero, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [], upward_exposed: [], params_defs: [v3]
// [Asm] # live_in: [zero, v3], live_out: [zero, v3]
// [Asm] # block parameters: [v3]
// [Asm] .do.92_0:
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v4, v5], uses: [zero, v3], upward_exposed: [zero, v3], params_defs: []
// [Asm] # live_in: [zero, v3], live_out: [v4, v5, zero, v3]
// [Asm] # block parameters: []
// [Asm] .do.92_15:
// [Asm] # control
// [Asm]   mv v4, zero  # live: [v4, zero, v3]
// [Asm]   mv v5, v3  # live: [v4, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v22], uses: [v4, v22], upward_exposed: [v4], params_defs: [v4, v5]
// [Asm] # live_in: [v4, v5, zero, v3], live_out: [v4, v5, zero, v3]
// [Asm] # block parameters: [v4, v5]
// [Asm] .do.92_7:
// [Asm] # control
// [Asm]   li v22, 4  # live: [v4, v5, zero, v22, v3]
// [Asm]   blt v22, v4, .do.92_9  # live: [v4, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, v19, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v19, v4, v5, a0, v8], upward_exposed: [v4, v5], params_defs: []
// [Asm] # live_in: [v4, v5, zero, v3], live_out: [v4, v5, zero, v3]
// [Asm] # block parameters: []
// [Asm] .do.92_8:
// [Asm]   th.lurw v8, v5, v4, 2  # live: [v8, v4, v5, zero, v3]
// [Asm]   # save_ctx2  # live: [v8, v4, v5, zero, v3]
// [Asm]   mv a0, v8  # live: [v4, v5, zero, a0, v3]
// [Asm]   call minimbt_print_int  # live: [v4, v5, zero, a0, v3]
// [Asm]   mv v9, a0  # live: [v4, v5, zero, v3]
// [Asm]   # restore_ctx2  # live: [v4, v5, zero, v3]
// [Asm] # control
// [Asm]   li v19, 1  # live: [v19, v4, v5, zero, v3]
// [Asm]   bne v19, v19, .do.92_11  # live: [v4, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v4, v16], uses: [v4, v16, v5], upward_exposed: [v4, v5], params_defs: []
// [Asm] # live_in: [v4, v5, zero, v3], live_out: [v4, v5, zero, v3]
// [Asm] # block parameters: []
// [Asm] .do.92_10:
// [Asm]   addi v16, v4, 1  # live: [v5, v16, zero, v3]
// [Asm] # control
// [Asm]   mv v4, v16  # live: [v4, v5, zero, v3]
// [Asm]   mv v5, v5  # live: [v4, v5, zero, v3]
// [Asm]   j .do.92_7  # live: [v4, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v11], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero, v3], live_out: [v11, zero, v3]
// [Asm] # block parameters: []
// [Asm] .do.92_11:
// [Asm] # control
// [Asm]   mv v11, zero  # live: [v11, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v13], uses: [v12], upward_exposed: [v12], params_defs: [v12]
// [Asm] # live_in: [v12, zero, v3], live_out: [v13, zero, v3]
// [Asm] # block parameters: [v12]
// [Asm] .do.92_13:
// [Asm] # control
// [Asm]   mv v13, v12  # live: [v13, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v18], uses: [v18, v13], upward_exposed: [v13], params_defs: [v13]
// [Asm] # live_in: [v13, zero, v3], live_out: [zero, v3]
// [Asm] # block parameters: [v13]
// [Asm] .do.92_6:
// [Asm] # control
// [Asm]   li v18, 1  # live: [v18, zero, v13, v3]
// [Asm]   bne v13, v18, .do.92_2  # live: [zero, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v3], upward_exposed: [v3], params_defs: []
// [Asm] # live_in: [zero, v3], live_out: [zero, v3]
// [Asm] # block parameters: []
// [Asm] .do.92_1:
// [Asm] # control
// [Asm]   mv v3, v3  # live: [zero, v3]
// [Asm]   j .do.92_0  # live: [zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v12], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero, v3], live_out: [v12, zero, v3]
// [Asm] # block parameters: []
// [Asm] .do.92_9:
// [Asm] # control
// [Asm]   mv v12, zero  # live: [v12, zero, v3]
// [Asm]   j .do.92_13  # live: [v12, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v15], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v15]
// [Asm] # block parameters: []
// [Asm] .do.92_2:
// [Asm] # control
// [Asm]   mv v15, zero  # live: [v15]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v15, a0], upward_exposed: [v15], params_defs: [v15]
// [Asm] # live_in: [v15], live_out: []
// [Asm] # block parameters: [v15]
// [Asm] .do.92_3:
// [Asm] # control
// [Asm]   mv a0, v15  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main.91:
// [Asm] # block info: defs: [t1, v14, v13, ft0, ft1, a1, v12, s11, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15, v2], uses: [v11, v14, v13, a0, v17, v15, s11, v12, v9, v2], upward_exposed: [s11], params_defs: []
// [Asm] # live_in: [s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.91_0:
// [Asm]   # save_ctx1  # live: [s11]
// [Asm]   addi v2, s11, -20  # live: [v2]
// [Asm]   andi s11, v2, -8  # live: [v2]
// [Asm]   li v17, 1  # live: [v17, v2]
// [Asm]   sw v17, 0(v2)  # live: [v17, v2]
// [Asm]   sw v17, 4(v2)  # live: [v17, v2]
// [Asm]   sw v17, 8(v2)  # live: [v17, v2]
// [Asm]   sw v17, 12(v2)  # live: [v17, v2]
// [Asm]   sw v17, 16(v2)  # live: [v2]
// [Asm]   li v15, 1  # live: [v15, v2]
// [Asm]   sw v15, 0(v2)  # live: [v2]
// [Asm]   li v14, 2  # live: [v14, v2]
// [Asm]   sw v14, 4(v2)  # live: [v2]
// [Asm]   li v13, 3  # live: [v13, v2]
// [Asm]   sw v13, 8(v2)  # live: [v2]
// [Asm]   li v12, 4  # live: [v12, v2]
// [Asm]   sw v12, 12(v2)  # live: [v2]
// [Asm]   li v11, 5  # live: [v11, v2]
// [Asm]   sw v11, 16(v2)  # live: [v2]
// [Asm]   # save_ctx2  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   call do.92  # live: [a0]
// [Asm]   mv v9, a0  # live: [v9]
// [Asm]   # restore_ctx2  # live: [v9]
// [Asm] # control
// [Asm]   mv a0, v9  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call main.91  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Main] beta reduce f.58 = do.62
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 2013265920 # 2GB - 128MB
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 67108864 # 64MB
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl do.92
// [Main]   .type do.92, @function
// [Main] # leaf false
// [Main] do.92:
// [Main] .do.92_5:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   mv s0, a0
// [Main] 
// [Main] .do.92_0:
// [Main] 
// [Main] .do.92_15:
// [Main]   mv s1, zero
// [Main] 
// [Main] .do.92_7:
// [Main]   li a0, 4
// [Main]   blt a0, s1, .do.92_9
// [Main] 
// [Main] .do.92_8:
// [Main]   th.lurw a0, s0, s1, 2
// [Main]   call minimbt_print_int
// [Main]   li a0, 1
// [Main]   bne a0, a0, .do.92_11
// [Main] 
// [Main] .do.92_10:
// [Main]   addi s1, s1, 1
// [Main]   j .do.92_7
// [Main] 
// [Main] .do.92_11:
// [Main]   mv a0, zero
// [Main] 
// [Main] .do.92_13:
// [Main] 
// [Main] .do.92_6:
// [Main]   li a1, 1
// [Main]   bne a0, a1, .do.92_2
// [Main] 
// [Main] .do.92_1:
// [Main]   j .do.92_0
// [Main] 
// [Main] .do.92_9:
// [Main]   mv a0, zero
// [Main]   j .do.92_13
// [Main] 
// [Main] .do.92_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .do.92_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.91
// [Main]   .type main.91, @function
// [Main] # leaf false
// [Main] main.91:
// [Main] .main.91_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   addi a0, s11, -20
// [Main]   andi s11, a0, -8
// [Main]   li a1, 1
// [Main]   sw a1, 0(a0)
// [Main]   sw a1, 4(a0)
// [Main]   sw a1, 8(a0)
// [Main]   sw a1, 12(a0)
// [Main]   sw a1, 16(a0)
// [Main]   li a1, 1
// [Main]   sw a1, 0(a0)
// [Main]   li a1, 2
// [Main]   sw a1, 4(a0)
// [Main]   li a1, 3
// [Main]   sw a1, 8(a0)
// [Main]   li a1, 4
// [Main]   sw a1, 12(a0)
// [Main]   li a1, 5
// [Main]   sw a1, 16(a0)
// [Main]   call do.92
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call main.91
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Typer] resolve: LetRec({tyvars: [], name: ("iter", ((Int) -> Bool) -> Bool), args: [("arr", Array[Int]), ("len", Int)], body: LetRec({tyvars: [], name: ("do", Bool), args: [("yield", Var(None))], body: LetRec({tyvars: [], name: ("next", Bool), args: [("i", Var(None))], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=None)), If(App(Var("yield"), targs=None, [Get(Var("arr"), Var("i"))]), App(Var("next"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Bool(false)), Bool(false))}, App(Var("next"), targs=None, [Int(0)]))}, Var("do"))}, LetRec({tyvars: [], name: ("each", Unit), args: [("iter", ((Int) -> Bool) -> Bool), ("f", (Int) -> Unit)], body: LetRec({tyvars: [], name: ("yield", Bool), args: [("x", Var(None))], body: Let(("_", Var(None)), App(Var("f"), targs=None, [Var("x")]), Bool(true))}, LetRec({tyvars: [], name: ("do", Var(None)), args: [], body: If(App(Var("iter"), targs=None, [Var("yield")]), App(Var("do"), targs=None, []), Unit)}, App(Var("do"), targs=None, [])))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("arr", Var(None)), Array(Int(5), Int(1)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Int(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Int(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Int(5)), Let(("f", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, App(Var("each"), targs=None, [Var("f"), Var("print")])))))))))}, Unit)))
// [Typer] resolve: LetRec({tyvars: [], name: ("do", Bool), args: [("yield", Var(None))], body: LetRec({tyvars: [], name: ("next", Bool), args: [("i", Var(None))], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=None)), If(App(Var("yield"), targs=None, [Get(Var("arr"), Var("i"))]), App(Var("next"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Bool(false)), Bool(false))}, App(Var("next"), targs=None, [Int(0)]))}, Var("do"))
// [Typer] resolve: LetRec({tyvars: [], name: ("next", Bool), args: [("i", Var(None))], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=None)), If(App(Var("yield"), targs=None, [Get(Var("arr"), Var("i"))]), App(Var("next"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Bool(false)), Bool(false))}, App(Var("next"), targs=None, [Int(0)]))
// [Typer] resolve: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=None)), If(App(Var("yield"), targs=None, [Get(Var("arr"), Var("i"))]), App(Var("next"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Bool(false)), Bool(false))
// [Typer] resolve: LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=None))
// [Typer] resolve: Var("i")
// [Typer] resolve: Prim(Var("len"), Int(1), Sub, kind=None)
// [Typer] resolve: Var("len")
// [Typer] resolve: Int(1)
// [Typer] resolve: If(App(Var("yield"), targs=None, [Get(Var("arr"), Var("i"))]), App(Var("next"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Bool(false))
// [Typer] resolve: App(Var("yield"), targs=None, [Get(Var("arr"), Var("i"))])
// [Typer] resolve: Get(Var("arr"), Var("i"))
// [Typer] resolve: Var("arr")
// [Typer] resolve: Var("i")
// [Typer] resolve: Var("yield")
// [Typer] resolve: App(Var("next"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)])
// [Typer] resolve: Prim(Var("i"), Int(1), Add, kind=None)
// [Typer] resolve: Var("i")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("next")
// [Typer] resolve: Bool(false)
// [Typer] resolve: Bool(false)
// [Typer] resolve: App(Var("next"), targs=None, [Int(0)])
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("next")
// [Typer] resolve: Var("do")
// [Typer] resolve: LetRec({tyvars: [], name: ("each", Unit), args: [("iter", ((Int) -> Bool) -> Bool), ("f", (Int) -> Unit)], body: LetRec({tyvars: [], name: ("yield", Bool), args: [("x", Var(None))], body: Let(("_", Var(None)), App(Var("f"), targs=None, [Var("x")]), Bool(true))}, LetRec({tyvars: [], name: ("do", Var(None)), args: [], body: If(App(Var("iter"), targs=None, [Var("yield")]), App(Var("do"), targs=None, []), Unit)}, App(Var("do"), targs=None, [])))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("arr", Var(None)), Array(Int(5), Int(1)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Int(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Int(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Int(5)), Let(("f", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, App(Var("each"), targs=None, [Var("f"), Var("print")])))))))))}, Unit))
// [Typer] resolve: LetRec({tyvars: [], name: ("yield", Bool), args: [("x", Var(None))], body: Let(("_", Var(None)), App(Var("f"), targs=None, [Var("x")]), Bool(true))}, LetRec({tyvars: [], name: ("do", Var(None)), args: [], body: If(App(Var("iter"), targs=None, [Var("yield")]), App(Var("do"), targs=None, []), Unit)}, App(Var("do"), targs=None, [])))
// [Typer] resolve: Let(("_", Var(None)), App(Var("f"), targs=None, [Var("x")]), Bool(true))
// [Typer] resolve: App(Var("f"), targs=None, [Var("x")])
// [Typer] resolve: Var("x")
// [Typer] resolve: Var("f")
// [Typer] resolve: Bool(true)
// [Typer] resolve: LetRec({tyvars: [], name: ("do", Var(None)), args: [], body: If(App(Var("iter"), targs=None, [Var("yield")]), App(Var("do"), targs=None, []), Unit)}, App(Var("do"), targs=None, []))
// [Typer] resolve: If(App(Var("iter"), targs=None, [Var("yield")]), App(Var("do"), targs=None, []), Unit)
// [Typer] resolve: App(Var("iter"), targs=None, [Var("yield")])
// [Typer] resolve: Var("yield")
// [Typer] resolve: Var("iter")
// [Typer] resolve: App(Var("do"), targs=None, [])
// [Typer] resolve: Var("do")
// [Typer] resolve: Unit
// [Typer] resolve: App(Var("do"), targs=None, [])
// [Typer] resolve: Var("do")
// [Typer] resolve: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("arr", Var(None)), Array(Int(5), Int(1)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Int(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Int(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Int(5)), Let(("f", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, App(Var("each"), targs=None, [Var("f"), Var("print")])))))))))}, Unit)
// [Typer] resolve: Let(("arr", Var(None)), Array(Int(5), Int(1)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Int(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Int(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Int(5)), Let(("f", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, App(Var("each"), targs=None, [Var("f"), Var("print")])))))))))
// [Typer] resolve: Array(Int(5), Int(1))
// [Typer] resolve: Int(5)
// [Typer] resolve: Int(1)
// [Typer] resolve: Let(("_", Var(None)), Put(Var("arr"), Int(0), Int(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Int(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Int(5)), Let(("f", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, App(Var("each"), targs=None, [Var("f"), Var("print")]))))))))
// [Typer] resolve: Put(Var("arr"), Int(0), Int(1))
// [Typer] resolve: Var("arr")
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(1)
// [Typer] resolve: Let(("_", Var(None)), Put(Var("arr"), Int(1), Int(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Int(5)), Let(("f", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, App(Var("each"), targs=None, [Var("f"), Var("print")])))))))
// [Typer] resolve: Put(Var("arr"), Int(1), Int(2))
// [Typer] resolve: Var("arr")
// [Typer] resolve: Int(1)
// [Typer] resolve: Int(2)
// [Typer] resolve: Let(("_", Var(None)), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Int(5)), Let(("f", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, App(Var("each"), targs=None, [Var("f"), Var("print")]))))))
// [Typer] resolve: Put(Var("arr"), Int(2), Int(3))
// [Typer] resolve: Var("arr")
// [Typer] resolve: Int(2)
// [Typer] resolve: Int(3)
// [Typer] resolve: Let(("_", Var(None)), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Int(5)), Let(("f", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, App(Var("each"), targs=None, [Var("f"), Var("print")])))))
// [Typer] resolve: Put(Var("arr"), Int(3), Int(4))
// [Typer] resolve: Var("arr")
// [Typer] resolve: Int(3)
// [Typer] resolve: Int(4)
// [Typer] resolve: Let(("_", Var(None)), Put(Var("arr"), Int(4), Int(5)), Let(("f", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, App(Var("each"), targs=None, [Var("f"), Var("print")]))))
// [Typer] resolve: Put(Var("arr"), Int(4), Int(5))
// [Typer] resolve: Var("arr")
// [Typer] resolve: Int(4)
// [Typer] resolve: Int(5)
// [Typer] resolve: Let(("f", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, App(Var("each"), targs=None, [Var("f"), Var("print")])))
// [Typer] resolve: App(Var("iter"), targs=None, [Var("arr"), Int(5)])
// [Typer] resolve: Var("arr")
// [Typer] resolve: Int(5)
// [Typer] resolve: Var("iter")
// [Typer] resolve: LetRec({tyvars: [], name: ("print", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, App(Var("each"), targs=None, [Var("f"), Var("print")]))
// [Typer] resolve: App(Var("print_int"), targs=None, [Var("x")])
// [Typer] resolve: Var("x")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: App(Var("each"), targs=None, [Var("f"), Var("print")])
// [Typer] resolve: Var("f")
// [Typer] resolve: Var("print")
// [Typer] resolve: Var("each")
// [Typer] resolve: Unit
// [Typer] check: LetRec({tyvars: [], name: ("iter", ((Int) -> Bool) -> Bool), args: [("arr", Array[Int]), ("len", Int)], body: LetRec({tyvars: [], name: ("do", Bool), args: [("yield", Var(None))], body: LetRec({tyvars: [], name: ("next", Bool), args: [("i", Var(None))], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=None)), If(App(Var("yield"), targs=None, [Get(Var("arr"), Var("i"))]), App(Var("next"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Bool(false)), Bool(false))}, App(Var("next"), targs=None, [Int(0)]))}, Var("do"))}, LetRec({tyvars: [], name: ("each", Unit), args: [("iter", ((Int) -> Bool) -> Bool), ("f", (Int) -> Unit)], body: LetRec({tyvars: [], name: ("yield", Bool), args: [("x", Var(None))], body: Let(("_", Var(None)), App(Var("f"), targs=None, [Var("x")]), Bool(true))}, LetRec({tyvars: [], name: ("do", Var(None)), args: [], body: If(App(Var("iter"), targs=None, [Var("yield")]), App(Var("do"), targs=None, []), Unit)}, App(Var("do"), targs=None, [])))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("arr", Var(None)), Array(Int(5), Int(1)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Int(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Int(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Int(5)), Let(("f", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, App(Var("each"), targs=None, [Var("f"), Var("print")])))))))))}, Unit))) against Unit
// [Typer] typevars: []
// [Typer] check: LetRec({tyvars: [], name: ("do", Bool), args: [("yield", Var(None))], body: LetRec({tyvars: [], name: ("next", Bool), args: [("i", Var(None))], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=None)), If(App(Var("yield"), targs=None, [Get(Var("arr"), Var("i"))]), App(Var("next"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Bool(false)), Bool(false))}, App(Var("next"), targs=None, [Int(0)]))}, Var("do")) against ((Int) -> Bool) -> Bool
// [Typer] typevars: []
// [Typer] check: LetRec({tyvars: [], name: ("next", Bool), args: [("i", Var(None))], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=None)), If(App(Var("yield"), targs=None, [Get(Var("arr"), Var("i"))]), App(Var("next"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Bool(false)), Bool(false))}, App(Var("next"), targs=None, [Int(0)])) against Bool
// [Typer] typevars: []
// [Typer] check: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=None)), If(App(Var("yield"), targs=None, [Get(Var("arr"), Var("i"))]), App(Var("next"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Bool(false)), Bool(false)) against Bool
// [Typer] check: LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=None)) against Bool
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Var(None)))
// [Typer] inst result: Var(None)
// [Typer] infer: Prim(Var("len"), Int(1), Sub, kind=None)
// [Typer] infer: Var("len")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: If(App(Var("yield"), targs=None, [Get(Var("arr"), Var("i"))]), App(Var("next"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]), Bool(false)) against Bool
// [Typer] check: App(Var("yield"), targs=None, [Get(Var("arr"), Var("i"))]) against Bool
// [Typer] infer: Get(Var("arr"), Var("i"))
// [Typer] infer: Var("arr")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] inst: TypeScheme(([], Var(None)))
// [Typer] inst result: Var(None)
// [Typer] unify: Var(None) and (Int) -> Bool
// [Typer] union: Var(None) and (Int) -> Bool
// [Typer] check: App(Var("next"), targs=None, [Prim(Var("i"), Int(1), Add, kind=None)]) against Bool
// [Typer] infer: Prim(Var("i"), Int(1), Add, kind=None)
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] inst: TypeScheme(([], (Int) -> Bool))
// [Typer] inst result: (Int) -> Bool
// [Typer] unify: (Int) -> Bool and (Int) -> Bool
// [Typer] unify: Int and Int
// [Typer] unify: Bool and Bool
// [Typer] check: Bool(false) against Bool
// [Typer] check: Bool(false) against Bool
// [Typer] check: App(Var("next"), targs=None, [Int(0)]) against Bool
// [Typer] infer: Int(0)
// [Typer] inst: TypeScheme(([], (Int) -> Bool))
// [Typer] inst result: (Int) -> Bool
// [Typer] unify: (Int) -> Bool and (Int) -> Bool
// [Typer] unify: Int and Int
// [Typer] unify: Bool and Bool
// [Typer] check: Var("do") against ((Int) -> Bool) -> Bool
// [Typer] inst: TypeScheme(([], ((Int) -> Bool) -> Bool))
// [Typer] inst result: ((Int) -> Bool) -> Bool
// [Typer] unify: ((Int) -> Bool) -> Bool and ((Int) -> Bool) -> Bool
// [Typer] unify: (Int) -> Bool and (Int) -> Bool
// [Typer] unify: Int and Int
// [Typer] unify: Bool and Bool
// [Typer] unify: Bool and Bool
// [Typer] check: LetRec({tyvars: [], name: ("each", Unit), args: [("iter", ((Int) -> Bool) -> Bool), ("f", (Int) -> Unit)], body: LetRec({tyvars: [], name: ("yield", Bool), args: [("x", Var(None))], body: Let(("_", Var(None)), App(Var("f"), targs=None, [Var("x")]), Bool(true))}, LetRec({tyvars: [], name: ("do", Var(None)), args: [], body: If(App(Var("iter"), targs=None, [Var("yield")]), App(Var("do"), targs=None, []), Unit)}, App(Var("do"), targs=None, [])))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("arr", Var(None)), Array(Int(5), Int(1)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Int(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Int(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Int(5)), Let(("f", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, App(Var("each"), targs=None, [Var("f"), Var("print")])))))))))}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: LetRec({tyvars: [], name: ("yield", Bool), args: [("x", Var(None))], body: Let(("_", Var(None)), App(Var("f"), targs=None, [Var("x")]), Bool(true))}, LetRec({tyvars: [], name: ("do", Var(None)), args: [], body: If(App(Var("iter"), targs=None, [Var("yield")]), App(Var("do"), targs=None, []), Unit)}, App(Var("do"), targs=None, []))) against Unit
// [Typer] typevars: []
// [Typer] check: Let(("_", Var(None)), App(Var("f"), targs=None, [Var("x")]), Bool(true)) against Bool
// [Typer] infer: App(Var("f"), targs=None, [Var("x")])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Var(None)))
// [Typer] inst result: Var(None)
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Bool(true) against Bool
// [Typer] check: LetRec({tyvars: [], name: ("do", Var(None)), args: [], body: If(App(Var("iter"), targs=None, [Var("yield")]), App(Var("do"), targs=None, []), Unit)}, App(Var("do"), targs=None, [])) against Unit
// [Typer] typevars: []
// [Typer] infer: If(App(Var("iter"), targs=None, [Var("yield")]), App(Var("do"), targs=None, []), Unit)
// [Typer] check: App(Var("iter"), targs=None, [Var("yield")]) against Bool
// [Typer] infer: Var("yield")
// [Typer] inst: TypeScheme(([], (Int) -> Bool))
// [Typer] inst result: (Int) -> Bool
// [Typer] inst: TypeScheme(([], ((Int) -> Bool) -> Bool))
// [Typer] inst result: ((Int) -> Bool) -> Bool
// [Typer] unify: ((Int) -> Bool) -> Bool and ((Int) -> Bool) -> Bool
// [Typer] unify: (Int) -> Bool and (Int) -> Bool
// [Typer] unify: Int and Int
// [Typer] unify: Bool and Bool
// [Typer] unify: Bool and Bool
// [Typer] infer: App(Var("do"), targs=None, [])
// [Typer] inst: TypeScheme(([], () -> Var(None)))
// [Typer] inst result: () -> Var(None)
// [Typer] infer: Unit
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] unify: Unit and Unit
// [Typer] check: App(Var("do"), targs=None, []) against Unit
// [Typer] inst: TypeScheme(([], () -> Unit))
// [Typer] inst result: () -> Unit
// [Typer] unify: () -> Unit and () -> Unit
// [Typer] unify: Unit and Unit
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("arr", Var(None)), Array(Int(5), Int(1)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Int(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Int(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Int(5)), Let(("f", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, App(Var("each"), targs=None, [Var("f"), Var("print")])))))))))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("arr", Var(None)), Array(Int(5), Int(1)), Let(("_", Var(None)), Put(Var("arr"), Int(0), Int(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Int(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Int(5)), Let(("f", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, App(Var("each"), targs=None, [Var("f"), Var("print")])))))))))
// [Typer] infer: Array(Int(5), Int(1))
// [Typer] infer: Int(1)
// [Typer] check: Int(5) against Int
// [Typer] unify: Var(None) and Array[Int]
// [Typer] union: Var(None) and Array[Int]
// [Typer] infer: Let(("_", Var(None)), Put(Var("arr"), Int(0), Int(1)), Let(("_", Var(None)), Put(Var("arr"), Int(1), Int(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Int(5)), Let(("f", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, App(Var("each"), targs=None, [Var("f"), Var("print")]))))))))
// [Typer] infer: Put(Var("arr"), Int(0), Int(1))
// [Typer] infer: Int(1)
// [Typer] check: Var("arr") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Var("arr"), Int(1), Int(2)), Let(("_", Var(None)), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Int(5)), Let(("f", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, App(Var("each"), targs=None, [Var("f"), Var("print")])))))))
// [Typer] infer: Put(Var("arr"), Int(1), Int(2))
// [Typer] infer: Int(2)
// [Typer] check: Var("arr") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var(None)), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Int(5)), Let(("f", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, App(Var("each"), targs=None, [Var("f"), Var("print")]))))))
// [Typer] infer: Put(Var("arr"), Int(2), Int(3))
// [Typer] infer: Int(3)
// [Typer] check: Var("arr") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(2) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var(None)), Put(Var("arr"), Int(4), Int(5)), Let(("f", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, App(Var("each"), targs=None, [Var("f"), Var("print")])))))
// [Typer] infer: Put(Var("arr"), Int(3), Int(4))
// [Typer] infer: Int(4)
// [Typer] check: Var("arr") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(3) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Var("arr"), Int(4), Int(5)), Let(("f", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, App(Var("each"), targs=None, [Var("f"), Var("print")]))))
// [Typer] infer: Put(Var("arr"), Int(4), Int(5))
// [Typer] infer: Int(5)
// [Typer] check: Var("arr") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(4) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("f", Var(None)), App(Var("iter"), targs=None, [Var("arr"), Int(5)]), LetRec({tyvars: [], name: ("print", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, App(Var("each"), targs=None, [Var("f"), Var("print")])))
// [Typer] infer: App(Var("iter"), targs=None, [Var("arr"), Int(5)])
// [Typer] inst: TypeScheme(([], (Array[Int], Int) -> ((Int) -> Bool) -> Bool))
// [Typer] inst result: (Array[Int], Int) -> ((Int) -> Bool) -> Bool
// [Typer] check: Var("arr") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(5) against Int
// [Typer] unify: Var(None) and ((Int) -> Bool) -> Bool
// [Typer] union: Var(None) and ((Int) -> Bool) -> Bool
// [Typer] infer: LetRec({tyvars: [], name: ("print", Unit), args: [("x", Var(None))], body: App(Var("print_int"), targs=None, [Var("x")])}, App(Var("each"), targs=None, [Var("f"), Var("print")]))
// [Typer] typevars: []
// [Typer] check: App(Var("print_int"), targs=None, [Var("x")]) against Unit
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Var(None)))
// [Typer] inst result: Var(None)
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] unify: (Int) -> Unit and (Var(None)) -> Unit
// [Typer] unify: Int and Var(None)
// [Typer] union: Int and Var(None)
// [Typer] unify: Unit and Unit
// [Typer] infer: App(Var("each"), targs=None, [Var("f"), Var("print")])
// [Typer] inst: TypeScheme(([], (((Int) -> Bool) -> Bool, (Int) -> Unit) -> Unit))
// [Typer] inst result: (((Int) -> Bool) -> Bool, (Int) -> Unit) -> Unit
// [Typer] check: Var("f") against ((Int) -> Bool) -> Bool
// [Typer] inst: TypeScheme(([], ((Int) -> Bool) -> Bool))
// [Typer] inst result: ((Int) -> Bool) -> Bool
// [Typer] unify: ((Int) -> Bool) -> Bool and ((Int) -> Bool) -> Bool
// [Typer] unify: (Int) -> Bool and (Int) -> Bool
// [Typer] unify: Int and Int
// [Typer] unify: Bool and Bool
// [Typer] unify: Bool and Bool
// [Typer] check: Var("print") against (Int) -> Unit
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] unify: (Int) -> Unit and (Int) -> Unit
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [KnfOpt] freq: {iter.1: Once, do.6: AsClosure, next.9: Many(2), each.20: Once, yield.25: AsClosure, do.30: Many(2), main.33: Once, print.59: AsClosure}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 19
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 19
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 7
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 7
// [KnfOpt] Inline decision rejected
// [KnfOpt] Knf inline Some(iter)
// [KnfOpt] Knf inline Some(each)
// [KnfOpt] freq: {main.33: Once, do.62: Once, next.64: Many(2), print.59: Once, yield.74: AsClosure, do.77: Many(2)}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 19
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 19
// [KnfOpt] Inline decision rejected
// [KnfOpt] Knf inline Some(print)
// [KnfOpt] Knf inline Some(do)
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 7
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 29
// [KnfOpt] Inline decision rejected
// [KnfOpt] freq: {main.33: Once, yield.74: Once, do.77: Many(2), next.80: Many(2)}
// [KnfOpt] Knf inline Some(yield)
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 19
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 21
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 29
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 31
// [KnfOpt] Inline decision rejected
// [KnfOpt] Numbers of let rec: 3 3 0
// [KnfOpt] Tuple freq: {_84: MayEscape, _88: MayEscape, arr.36: MayEscape, _89: MayEscape, _34: MayEscape, _35: MayEscape, _38: MayEscape, _42: MayEscape, _46: MayEscape, _50: MayEscape, _54: MayEscape}
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %5: Call(ty=Bool, f=f0, args=[Insn(iref=%4), FnParam(fref=f0, fpref=$f.1)])
// [CoreOpt] eliminated tail rec call %2: Call(ty=Unit, f=f1, args=[FnParam(fref=f1, fpref=$f.0)])
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f0: Once, f1: Once, f2: Once})
// [CoreOpt] allow_inline: false %0 main.91 false true true false true
// [CoreOpt] allow_inline: true %0 next.93 true true true false true
// [CoreOpt] post splitting: Insn(iref=%0) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%0) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%0) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%0) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%0) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] allow_inline: false %0 next.93 true true false false true
// [CoreOpt] allow_inline: false %6 do.92 false true true false true
// [CoreOpt] allow_inline: false %0 main.91 false true true false true
// [CoreOpt] allow_inline: true %0 next.93 true true true false true
// [CoreOpt] do.92 is inlining Call(ty=Bool, f=f0, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.0)])
// [CoreOpt] shifted callee .fn next.93 #f0 : fn(int32, array[int32]) -> bool
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b15 {
// [CoreOpt]   .bb #b7 (int32, array[int32]) {
// [CoreOpt]     let %2: bool = le($b7.0, 4)
// [CoreOpt]     br %2 b8() b9()
// [CoreOpt]   }
// [CoreOpt]   .bb #b8 () {
// [CoreOpt]     let %3: int32 = load int32 offset($b7.1, $b7.0 * @32)
// [CoreOpt]     let %4: unit = ext_call minimbt_print_int(%3)
// [CoreOpt]     let %5: bool = eq(true, true)
// [CoreOpt]     br %5 b10() b11()
// [CoreOpt]   }
// [CoreOpt]   .bb #b9 () {
// [CoreOpt]     jump b13(false)
// [CoreOpt]   }
// [CoreOpt]   .bb #b10 () {
// [CoreOpt]     let %6: int32 = add($b7.0, 1)
// [CoreOpt]     jump b7(%6, $b7.1)
// [CoreOpt]   }
// [CoreOpt]   .bb #b11 () {
// [CoreOpt]     jump b12(false)
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 (bool) {
// [CoreOpt]     jump b13($b12.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b13 (bool) {
// [CoreOpt]     return $b13.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b14 pre #Some(b15) header #b7 {
// [CoreOpt]     .block #b13
// [CoreOpt]     .block #b11
// [CoreOpt]     .block #b8
// [CoreOpt]     .block #b12
// [CoreOpt]     .block #b9
// [CoreOpt]     .block #b10
// [CoreOpt]   }
// [CoreOpt]   .bb #b15 () {
// [CoreOpt]     jump b14($f0, $f1)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] allow_inline: false %6 do.92 false true true false true
// [CoreOpt] Remove dead function: f0
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f1: Once, f2: Once})
// [CoreOpt] allow_inline: false %0 main.91 false true true false true
// [CoreOpt] allow_inline: false %6 do.92 false true true false true
// [CoreOpt] allow_inline: false %0 main.91 false true true false true
// [CoreOpt] allow_inline: false %6 do.92 false true true false true
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f1: Once, f2: Once})
// [CoreOpt] allow_inline: false %0 main.91 false true true false true
// [CoreOpt] allow_inline: false %6 do.92 false true true false true
// [CoreOpt] allow_inline: false %0 main.91 false true true false true
// [CoreOpt] allow_inline: false %6 do.92 false true true false true
