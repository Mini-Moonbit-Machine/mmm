// [Asm] pre_assigned_registers: Insn(iref=%3) -> v8, FnParam(fref=f4, fpref=$f.0) -> v2, BlockParam(bref=b6, bpref=$b.0) -> v9, BlockParam(bref=b3, bpref=$b.0) -> v11, Insn(iref=%2) -> v10, BlockParam(bref=b0, bpref=$b.0) -> v5, Self(fref=f4) -> v0, BlockParam(bref=b0, bpref=$b.1) -> v6, Mem(fref=f4, mref=m0) -> v4, FnParam(fref=f4, fpref=$f.1) -> v3, Insn(iref=%0) -> v7
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b6, bpref=$b.0), Bool(val=true)])
// [Asm] defs: []
// [Asm] live_set: [v5, v6, s11, zero]
// [Asm] move_origin: [v5]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, s11, zero]
// [Asm] move_origin: [v6]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: [zero]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, a0, zero, v4, v6, s11]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, a0, zero, v4, a1, v6, s11]
// [Asm] move_origin: [v5]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, a0, zero, a2, v4, a1, v6, s11]
// [Asm] move_origin: [v6]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v5, a0, zero, a2, v6, a1, s11, a3]
// [Asm] move_origin: [v4]
// [Asm] defined: a3 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, v6, s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v5, v6, s11, zero, v8]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v5, v6, s11, v9, zero]
// [Asm] move_origin: [v8]
// [Asm] defined: v9 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v5, v6, s11, v12, v9, zero]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, s11, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a1, s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, s11, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, s11, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v5, v6, s11, zero]
// [Asm] move_origin: [v3]
// [Asm] defined: v6 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero, v4, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v5, zero, v4, v6, s11, v15]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v6, s11, zero]
// [Asm] move_origin: []
// [Asm] Label("do30.85") clobbered_x: @hashset.of([s0, a1, a3, a0, s1])
// [Asm] Label("do30.85") clobbered_f: @hashset.of([])
// [Asm] subst   j .do30.85_0 ->   j .do30.85_0
// [Asm] subst   mv v11, zero ->   mv a0, zero
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v5 ->   mv a1, s0
// [Asm] subst   mv a2, v6 ->   mv a2, s1
// [Asm] subst   call next9.82 ->   call next9.82
// [Asm] subst   ret ->   ret
// [Asm] subst   li v12, 1 ->   li a1, 1
// [Asm] subst   bne v9, v12, .do30.85_2 ->   bne a0, a1, .do30.85_2
// [Asm] subst   mv v5, v2 ->   mv s0, a0
// [Asm] subst   mv v6, v3 ->   mv s1, a1
// [Asm] subst   addi v4, s11, -8 ->   addi a3, s11, -8
// [Asm] subst   andi s11, v4, -8 ->   andi s11, a3, -8
// [Asm] subst   la v15, yield25.86 ->   la a0, yield25.86
// [Asm] subst   sd v15, 0(v4) ->   sd a0, 0(a3)
// [Asm] pre_assigned_registers: FnParam(fref=f11, fpref=$f.0) -> v2, Self(fref=f11) -> v0, Insn(iref=%0) -> v3
// [Asm] defs: []
// [Asm] live_set: [a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] Label("yield25.86") clobbered_x: @hashset.of([a1, a0])
// [Asm] Label("yield25.86") clobbered_f: @hashset.of([])
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   call yield25.84 ->   call yield25.84
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v6, Mem(fref=f5, mref=m0) -> v2, Self(fref=f5) -> v0, Insn(iref=%2) -> v5, Insn(iref=%1) -> v4, Insn(iref=%6) -> v9, Insn(iref=%5) -> v8, Insn(iref=%0) -> v3, Insn(iref=%4) -> v7
// [Asm] defs: []
// [Asm] live_set: [s11]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v18, v2]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v18, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v18, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v18, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v18, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v16, v2]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14, v2]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v13, v2]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v12, v2]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10, v2]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v2]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v9]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] Label("main33.80") clobbered_x: @hashset.of([a1, a0])
// [Asm] Label("main33.80") clobbered_f: @hashset.of([])
// [Asm] subst   addi v2, s11, -20 ->   addi a1, s11, -20
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a1, -8
// [Asm] subst   li v18, 1 ->   li a0, 1
// [Asm] subst   sw v18, 0(v2) ->   sw a0, 0(a1)
// [Asm] subst   sw v18, 4(v2) ->   sw a0, 4(a1)
// [Asm] subst   sw v18, 8(v2) ->   sw a0, 8(a1)
// [Asm] subst   sw v18, 12(v2) ->   sw a0, 12(a1)
// [Asm] subst   sw v18, 16(v2) ->   sw a0, 16(a1)
// [Asm] subst   li v16, 1 ->   li a0, 1
// [Asm] subst   sw v16, 0(v2) ->   sw a0, 0(a1)
// [Asm] subst   li v15, 2 ->   li a0, 2
// [Asm] subst   sw v15, 4(v2) ->   sw a0, 4(a1)
// [Asm] subst   li v14, 3 ->   li a0, 3
// [Asm] subst   sw v14, 8(v2) ->   sw a0, 8(a1)
// [Asm] subst   li v13, 4 ->   li a0, 4
// [Asm] subst   sw v13, 12(v2) ->   sw a0, 12(a1)
// [Asm] subst   li v12, 5 ->   li a0, 5
// [Asm] subst   sw v12, 16(v2) ->   sw a0, 16(a1)
// [Asm] subst   li v10, 5 ->   li a0, 5
// [Asm] subst   call do30.85 ->   call do30.85
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, FnParam(fref=f2, fpref=$f.0) -> v2, Insn(iref=%0) -> v3
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] Label("print59.83") clobbered_x: @hashset.of([a0])
// [Asm] Label("print59.83") clobbered_f: @hashset.of([])
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f3, fpref=$f.0) -> v2, Self(fref=f3) -> v0, Insn(iref=%0) -> v3
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: []
// [Asm] move_origin: [a0]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] Label("yield25.84") clobbered_x: @hashset.of([a0])
// [Asm] Label("yield25.84") clobbered_f: @hashset.of([])
// [Asm] subst   call print59.83 ->   call print59.83
// [Asm] subst   li v4, 1 ->   li a0, 1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f14) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] Label("T$start") clobbered_x: @hashset.of([a0])
// [Asm] Label("T$start") clobbered_f: @hashset.of([])
// [Asm] subst   call main33.80 ->   call main33.80
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0, FnParam(fref=f0, fpref=$f.3) -> v5, BlockParam(bref=b0, bpref=$b.3) -> v9, BlockParam(bref=b0, bpref=$b.0) -> v6, BlockParam(bref=b0, bpref=$b.1) -> v7, BlockParam(bref=b0, bpref=$b.2) -> v8, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%5) -> v18, Insn(iref=%0) -> v10, Insn(iref=%4) -> v15, Insn(iref=%3) -> v14, FnParam(fref=f0, fpref=$f.1) -> v3, FnParam(fref=f0, fpref=$f.2) -> v4, BlockParam(bref=b5, bpref=$b.0) -> v16, BlockParam(bref=b6, bpref=$b.0) -> v17, Insn(iref=%2) -> v13, Insn(iref=%1) -> v11, Insn(iref=%6) -> v12
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%3), Bool(val=true)])
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Asm] defs: [v16]
// [Asm] live_set: [v16]
// [Asm] move_origin: [zero]
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v17]
// [Asm] move_origin: [zero]
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v17]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10, zero, v8, v7, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v6, v9, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, a3, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, a3, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, a3, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, a3, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, zero, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v4, v6, v5, zero, v7]
// [Asm] move_origin: [v3]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v6, v5, zero, v8]
// [Asm] move_origin: [v4]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v5]
// [Asm] defined: v9 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v17]
// [Asm] move_origin: [v16]
// [Asm] defined: v17 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v17]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [zero, v13, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [s10]
// [Asm] live_set: [zero, v13, v7, v8, v6, v9]
// [Asm] move_origin: [v9]
// [Asm] defined: s10 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v21, zero, v13, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v21, zero, v13, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v21, zero, a0, v7, v8, v6, v9]
// [Asm] move_origin: [v13]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v14]
// [Asm] live_set: [v14, zero, v7, v8, v6, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v14, zero, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defs: [v20]
// [Asm] live_set: [v14, zero, v20, v7, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v7, v18, v9, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v18]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v8]
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move_origin: []
// [Asm] Label("next9.82") clobbered_x: @hashset.of([a0, s1, s2, a2, s0, a1, a3, s3])
// [Asm] Label("next9.82") clobbered_f: @hashset.of([])
// [Asm] subst   mv v16, zero ->   mv a0, zero
// [Asm] subst   mv v17, zero ->   mv a0, zero
// [Asm] subst   j .next9.82_6 ->   j .next9.82_6
// [Asm] subst   addi v10, v7, -1 ->   addi a0, s1, -1
// [Asm] subst   blt v10, v6, .next9.82_2 ->   blt a0, s2, .next9.82_2
// [Asm] subst   mv v6, v2 ->   mv s2, a0
// [Asm] subst   mv v7, v3 ->   mv s1, a1
// [Asm] subst   mv v8, v4 ->   mv s0, a2
// [Asm] subst   mv v9, v5 ->   mv s3, a3
// [Asm] subst   ret ->   ret
// [Asm] subst   th.lurw v13, v8, v6, 2 ->   th.lurw a0, s0, s2, 2
// [Asm] subst   mv s10, v9 ->   mv s10, s3
// [Asm] subst   ld v21, 0(v9) ->   ld a1, 0(s3)
// [Asm] subst   jalr v21 ->   jalr a1
// [Asm] subst   li v20, 1 ->   li a1, 1
// [Asm] subst   bne v14, v20, .next9.82_4 ->   bne a0, a1, .next9.82_4
// [Asm] subst   addi v18, v6, 1 ->   addi a0, s2, 1
// [Asm] subst   mv v6, v18 ->   mv s2, a0
// [Asm] subst   j .next9.82_0 ->   j .next9.82_0
// [Asm] before colored: # leaf false
// [Asm] main33.80:
// [Asm] # block info: defs: [t1, v14, v16, v13, ft0, ft1, a1, s11, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, v10, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v15, v2], uses: [v16, v14, v18, v10, v13, a0, a1, v15, s11, v12, v9, v2], upward_exposed: [s11], params_defs: []
// [Asm] # live_in: [s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .main33.80_0:
// [Asm]   # save_ctx1  # live: [s11]
// [Asm]   addi v2, s11, -20  # live: [v2]
// [Asm]   andi s11, v2, -8  # live: [v2]
// [Asm]   li v18, 1  # live: [v18, v2]
// [Asm]   sw v18, 0(v2)  # live: [v18, v2]
// [Asm]   sw v18, 4(v2)  # live: [v18, v2]
// [Asm]   sw v18, 8(v2)  # live: [v18, v2]
// [Asm]   sw v18, 12(v2)  # live: [v18, v2]
// [Asm]   sw v18, 16(v2)  # live: [v2]
// [Asm]   li v16, 1  # live: [v16, v2]
// [Asm]   sw v16, 0(v2)  # live: [v2]
// [Asm]   li v15, 2  # live: [v15, v2]
// [Asm]   sw v15, 4(v2)  # live: [v2]
// [Asm]   li v14, 3  # live: [v14, v2]
// [Asm]   sw v14, 8(v2)  # live: [v2]
// [Asm]   li v13, 4  # live: [v13, v2]
// [Asm]   sw v13, 12(v2)  # live: [v2]
// [Asm]   li v12, 5  # live: [v12, v2]
// [Asm]   sw v12, 16(v2)  # live: [v2]
// [Asm]   # save_ctx2  # live: [v2]
// [Asm]   li v10, 5  # live: [v10, v2]
// [Asm]   mv a0, v10  # live: [a0, v2]
// [Asm]   mv a1, v2  # live: [a1, a0]
// [Asm]   call do30.85  # live: [a0]
// [Asm]   mv v9, a0  # live: [v9]
// [Asm]   # restore_ctx2  # live: [v9]
// [Asm] # control
// [Asm]   mv a0, v9  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] yield25.86:
// [Asm] # block info: defs: [v3, t1, v0, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v3, s10, a0, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .yield25.86_0:
// [Asm]   # save_ctx1  # live: [a0, s10]
// [Asm]   mv v0, s10  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # save_ctx2  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   call yield25.84  # live: [a0]
// [Asm]   mv v3, a0  # live: [v3]
// [Asm]   # restore_ctx2  # live: [v3]
// [Asm] # control
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] print59.83:
// [Asm] # block info: defs: [v3, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v3, a0, v2], upward_exposed: [a0], params_defs: []
// [Asm] # live_in: [a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .print59.83_0:
// [Asm]   # save_ctx1  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # save_ctx2  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v3, a0  # live: [v3]
// [Asm]   # restore_ctx2  # live: [v3]
// [Asm] # control
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] yield25.84:
// [Asm] # block info: defs: [v3, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v4, a0, v2], upward_exposed: [a0], params_defs: []
// [Asm] # live_in: [a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .yield25.84_0:
// [Asm]   # save_ctx1  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # save_ctx2  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   call print59.83  # live: [a0]
// [Asm]   mv v3, a0  # live: []
// [Asm]   # restore_ctx2  # live: []
// [Asm] # control
// [Asm]   li v4, 1  # live: [v4]
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] do30.85:
// [Asm] # block info: defs: [v3, v5, v6, v2], uses: [v3, a1, a0, v2], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, s11, a0, zero], live_out: [v5, v6, s11, zero]
// [Asm] # block parameters: []
// [Asm] .do30.85_5:
// [Asm]   # save_ctx1  # live: [a1, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, s11, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, s11, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v5, s11, zero, v3]
// [Asm]   mv v6, v3  # live: [v5, v6, s11, zero]
// [Asm] 
// [Asm] # block info: defs: [v4, s11, v15], uses: [v4, s11, v15], upward_exposed: [s11], params_defs: [v5, v6]
// [Asm] # live_in: [v5, v6, s11, zero], live_out: [v4, v5, v6, s11, zero]
// [Asm] # block parameters: [v5, v6]
// [Asm] .do30.85_0:
// [Asm]   addi v4, s11, -8  # live: [v5, zero, v4, v6]
// [Asm]   andi s11, v4, -8  # live: [v5, zero, v4, v6, s11]
// [Asm]   la v15, yield25.86  # live: [v5, zero, v4, v6, s11, v15]
// [Asm]   sd v15, 0(v4)  # live: [v4, v5, v6, s11, zero]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v5, zero, a0, v8, v4, a2, a1, v6, a3], upward_exposed: [v4, v5, v6, zero], params_defs: []
// [Asm] # live_in: [v4, v5, v6, s11, zero], live_out: [v5, v6, s11, v9, zero]
// [Asm] # block parameters: []
// [Asm] .do30.85_7:
// [Asm]   # save_ctx2  # live: [v5, zero, v4, v6, s11]
// [Asm]   mv a0, zero  # live: [v5, a0, zero, v4, v6, s11]
// [Asm]   mv a1, v5  # live: [v5, a0, zero, v4, a1, v6, s11]
// [Asm]   mv a2, v6  # live: [v5, a0, zero, a2, v4, a1, v6, s11]
// [Asm]   mv a3, v4  # live: [v5, a0, zero, a2, v6, a1, s11, a3]
// [Asm]   call next9.82  # live: [v5, v6, s11, zero, a0]
// [Asm]   mv v8, a0  # live: [v5, v6, s11, zero, v8]
// [Asm]   # restore_ctx2  # live: [v5, v6, s11, zero, v8]
// [Asm] # control
// [Asm]   mv v9, v8  # live: [v5, v6, s11, v9, zero]
// [Asm] 
// [Asm] # block info: defs: [v12], uses: [v12, v9], upward_exposed: [v9], params_defs: [v9]
// [Asm] # live_in: [v5, v6, s11, v9, zero], live_out: [v5, v6, s11, zero]
// [Asm] # block parameters: [v9]
// [Asm] .do30.85_6:
// [Asm] # control
// [Asm]   li v12, 1  # live: [v5, v6, s11, v12, v9, zero]
// [Asm]   bne v9, v12, .do30.85_2  # live: [v5, v6, s11, zero]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v5, v6], upward_exposed: [v5, v6], params_defs: []
// [Asm] # live_in: [v5, v6, s11, zero], live_out: [v5, v6, s11, zero]
// [Asm] # block parameters: []
// [Asm] .do30.85_1:
// [Asm] # control
// [Asm]   mv v5, v5  # live: [v5, v6, s11, zero]
// [Asm]   mv v6, v6  # live: [v5, v6, s11, zero]
// [Asm]   j .do30.85_0  # live: [v5, v6, s11, zero]
// [Asm] 
// [Asm] # block info: defs: [v11], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v11]
// [Asm] # block parameters: []
// [Asm] .do30.85_2:
// [Asm] # control
// [Asm]   mv v11, zero  # live: [v11]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v11, a0], upward_exposed: [v11], params_defs: [v11]
// [Asm] # live_in: [v11], live_out: []
// [Asm] # block parameters: [v11]
// [Asm] .do30.85_3:
// [Asm] # control
// [Asm]   mv a0, v11  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] next9.82:
// [Asm] # block info: defs: [v2, v5, v7, v8, v4, v6, v9, v3], uses: [v2, v5, a0, a2, v4, a1, a3, v3], upward_exposed: [a2, a1, a3, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a3, a0, zero], live_out: [v8, v6, v9, zero, v7]
// [Asm] # block parameters: []
// [Asm] .next9.82_8:
// [Asm]   # save_ctx1  # live: [a2, a1, a3, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, a3, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, a3, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, a3, zero, v3]
// [Asm]   mv v5, a3  # live: [v2, v4, v5, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v2  # live: [v4, v6, v5, zero, v3]
// [Asm]   mv v7, v3  # live: [v4, v6, v5, zero, v7]
// [Asm]   mv v8, v4  # live: [v7, v6, v5, zero, v8]
// [Asm]   mv v9, v5  # live: [v7, v6, v9, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [v6, v10, v7], upward_exposed: [v6, v7], params_defs: [v8, v6, v9, v7]
// [Asm] # live_in: [v7, v6, v9, zero, v8], live_out: [v7, v6, v9, zero, v8]
// [Asm] # block parameters: [v6, v7, v8, v9]
// [Asm] .next9.82_0:
// [Asm]   addi v10, v7, -1  # live: [v10, zero, v8, v7, v6, v9]
// [Asm] # control
// [Asm]   blt v10, v6, .next9.82_2  # live: [v8, v6, v9, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v13, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v20, a6, ft10, ft5, ft7, ft4, v21, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v14, v21, v13, a0, v20, v8, v6, v9], upward_exposed: [v6, v9, v8], params_defs: []
// [Asm] # live_in: [v7, v6, v9, zero, v8], live_out: [v8, v6, v9, zero, v7]
// [Asm] # block parameters: []
// [Asm] .next9.82_1:
// [Asm]   th.lurw v13, v8, v6, 2  # live: [zero, v13, v7, v8, v6, v9]
// [Asm]   mv s10, v9  # live: [zero, v13, v7, v8, v6, v9]
// [Asm]   ld v21, 0(v9)  # live: [v21, zero, v13, v7, v8, v6, v9]
// [Asm]   # save_ctx2  # live: [v21, zero, v13, v7, v8, v6, v9]
// [Asm]   mv a0, v13  # live: [v21, zero, a0, v7, v8, v6, v9]
// [Asm]   jalr v21  # live: [zero, a0, v7, v8, v6, v9]
// [Asm]   mv v14, a0  # live: [v14, zero, v7, v8, v6, v9]
// [Asm]   # restore_ctx2  # live: [v14, zero, v7, v8, v6, v9]
// [Asm] # control
// [Asm]   li v20, 1  # live: [v14, zero, v20, v7, v8, v6, v9]
// [Asm]   bne v14, v20, .next9.82_4  # live: [v7, v6, v9, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v6, v18], uses: [v8, v6, v18, v9, v7], upward_exposed: [v8, v6, v9, v7], params_defs: []
// [Asm] # live_in: [v7, v6, v9, zero, v8], live_out: [v8, v6, v9, zero, v7]
// [Asm] # block parameters: []
// [Asm] .next9.82_3:
// [Asm]   addi v18, v6, 1  # live: [v7, v18, v9, zero, v8]
// [Asm] # control
// [Asm]   mv v6, v18  # live: [v7, v6, v9, zero, v8]
// [Asm]   mv v7, v7  # live: [v7, v6, v9, zero, v8]
// [Asm]   mv v8, v8  # live: [v7, v6, v9, zero, v8]
// [Asm]   mv v9, v9  # live: [v7, v6, v9, zero, v8]
// [Asm]   j .next9.82_0  # live: [v7, v6, v9, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v16], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v16]
// [Asm] # block parameters: []
// [Asm] .next9.82_4:
// [Asm] # control
// [Asm]   mv v16, zero  # live: [v16]
// [Asm] 
// [Asm] # block info: defs: [v17], uses: [v16], upward_exposed: [v16], params_defs: [v16]
// [Asm] # live_in: [v16], live_out: [v17]
// [Asm] # block parameters: [v16]
// [Asm] .next9.82_5:
// [Asm] # control
// [Asm]   mv v17, v16  # live: [v17]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v17, a0], upward_exposed: [v17], params_defs: [v17]
// [Asm] # live_in: [v17], live_out: []
// [Asm] # block parameters: [v17]
// [Asm] .next9.82_6:
// [Asm] # control
// [Asm]   mv a0, v17  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v17], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v17]
// [Asm] # block parameters: []
// [Asm] .next9.82_2:
// [Asm] # control
// [Asm]   mv v17, zero  # live: [v17]
// [Asm]   j .next9.82_6  # live: [v17]
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main33.80  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("iter", Fun([Fun([Int], Bool)], Bool)), args: [("arr", Array(Int)), ("len", Int)], body: LetRec({name: ("do", Bool), args: [("yield", Var({val: Some(Fun([Int], Bool))}))], body: LetRec({name: ("next", Bool), args: [("i", Var({val: Some(Int)}))], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), If(App(Var("yield"), [Get(Var("arr"), Var("i"))]), App(Var("next"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Bool(false)), Bool(false))}, App(Var("next"), [Int(0)]))}, Var("do"))}, LetRec({name: ("each", Unit), args: [("iter", Fun([Fun([Int], Bool)], Bool)), ("f", Fun([Int], Unit))], body: LetRec({name: ("yield", Bool), args: [("x", Var({val: Some(Int)}))], body: Let(("_", Var({val: Some(Unit)})), App(Var("f"), [Var("x")]), Bool(true))}, LetRec({name: ("do", Var({val: Some(Unit)})), args: [], body: If(App(Var("iter"), [Var("yield")]), App(Var("do"), []), Unit)}, App(Var("do"), [])))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("arr", Var({val: Some(Array(Int))})), Array(Int(5), Int(1)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(0), Int(1)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(1), Int(2)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(4), Int(5)), Let(("f", Var({val: Some(Fun([Fun([Int], Bool)], Bool))})), App(Var("iter"), [Var("arr"), Int(5)]), LetRec({name: ("print", Unit), args: [("x", Var({val: Some(Int)}))], body: App(Var("print_int"), [Var("x")])}, App(Var("each"), [Var("f"), Var("print")])))))))))}, App(Var("main"), []))))
// [Knf] build_knf: LetRec({name: ("do", Bool), args: [("yield", Var({val: Some(Fun([Int], Bool))}))], body: LetRec({name: ("next", Bool), args: [("i", Var({val: Some(Int)}))], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), If(App(Var("yield"), [Get(Var("arr"), Var("i"))]), App(Var("next"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Bool(false)), Bool(false))}, App(Var("next"), [Int(0)]))}, Var("do"))
// [Knf] build_knf: LetRec({name: ("next", Bool), args: [("i", Var({val: Some(Int)}))], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), If(App(Var("yield"), [Get(Var("arr"), Var("i"))]), App(Var("next"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Bool(false)), Bool(false))}, App(Var("next"), [Int(0)]))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), If(App(Var("yield"), [Get(Var("arr"), Var("i"))]), App(Var("next"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Bool(false)), Bool(false))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(App(Var("yield"), [Get(Var("arr"), Var("i"))]), App(Var("next"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), Bool(false))
// [Knf] build_knf: App(Var("yield"), [Get(Var("arr"), Var("i"))])
// [Knf] build_knf: Var("yield")
// [Knf] build_knf: Get(Var("arr"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("next"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("next")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Bool(false)
// [Knf] build_knf: Bool(true)
// [Knf] build_knf: Bool(false)
// [Knf] build_knf: App(Var("next"), [Int(0)])
// [Knf] build_knf: Var("next")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("do")
// [Knf] build_knf: LetRec({name: ("each", Unit), args: [("iter", Fun([Fun([Int], Bool)], Bool)), ("f", Fun([Int], Unit))], body: LetRec({name: ("yield", Bool), args: [("x", Var({val: Some(Int)}))], body: Let(("_", Var({val: Some(Unit)})), App(Var("f"), [Var("x")]), Bool(true))}, LetRec({name: ("do", Var({val: Some(Unit)})), args: [], body: If(App(Var("iter"), [Var("yield")]), App(Var("do"), []), Unit)}, App(Var("do"), [])))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("arr", Var({val: Some(Array(Int))})), Array(Int(5), Int(1)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(0), Int(1)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(1), Int(2)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(4), Int(5)), Let(("f", Var({val: Some(Fun([Fun([Int], Bool)], Bool))})), App(Var("iter"), [Var("arr"), Int(5)]), LetRec({name: ("print", Unit), args: [("x", Var({val: Some(Int)}))], body: App(Var("print_int"), [Var("x")])}, App(Var("each"), [Var("f"), Var("print")])))))))))}, App(Var("main"), [])))
// [Knf] build_knf: LetRec({name: ("yield", Bool), args: [("x", Var({val: Some(Int)}))], body: Let(("_", Var({val: Some(Unit)})), App(Var("f"), [Var("x")]), Bool(true))}, LetRec({name: ("do", Var({val: Some(Unit)})), args: [], body: If(App(Var("iter"), [Var("yield")]), App(Var("do"), []), Unit)}, App(Var("do"), [])))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("f"), [Var("x")]), Bool(true))
// [Knf] build_knf: App(Var("f"), [Var("x")])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Bool(true)
// [Knf] build_knf: LetRec({name: ("do", Var({val: Some(Unit)})), args: [], body: If(App(Var("iter"), [Var("yield")]), App(Var("do"), []), Unit)}, App(Var("do"), []))
// [Knf] build_knf: If(App(Var("iter"), [Var("yield")]), App(Var("do"), []), Unit)
// [Knf] build_knf: App(Var("iter"), [Var("yield")])
// [Knf] build_knf: Var("iter")
// [Knf] build_knf: Var("yield")
// [Knf] build_knf: App(Var("do"), [])
// [Knf] build_knf: Var("do")
// [Knf] build_knf: Unit
// [Knf] build_knf: Bool(true)
// [Knf] build_knf: App(Var("do"), [])
// [Knf] build_knf: Var("do")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("arr", Var({val: Some(Array(Int))})), Array(Int(5), Int(1)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(0), Int(1)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(1), Int(2)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(4), Int(5)), Let(("f", Var({val: Some(Fun([Fun([Int], Bool)], Bool))})), App(Var("iter"), [Var("arr"), Int(5)]), LetRec({name: ("print", Unit), args: [("x", Var({val: Some(Int)}))], body: App(Var("print_int"), [Var("x")])}, App(Var("each"), [Var("f"), Var("print")])))))))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("arr", Var({val: Some(Array(Int))})), Array(Int(5), Int(1)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(0), Int(1)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(1), Int(2)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(4), Int(5)), Let(("f", Var({val: Some(Fun([Fun([Int], Bool)], Bool))})), App(Var("iter"), [Var("arr"), Int(5)]), LetRec({name: ("print", Unit), args: [("x", Var({val: Some(Int)}))], body: App(Var("print_int"), [Var("x")])}, App(Var("each"), [Var("f"), Var("print")])))))))))
// [Knf] build_knf: Array(Int(5), Int(1))
// [Knf] build_knf: Int(5)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(0), Int(1)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(1), Int(2)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(4), Int(5)), Let(("f", Var({val: Some(Fun([Fun([Int], Bool)], Bool))})), App(Var("iter"), [Var("arr"), Int(5)]), LetRec({name: ("print", Unit), args: [("x", Var({val: Some(Int)}))], body: App(Var("print_int"), [Var("x")])}, App(Var("each"), [Var("f"), Var("print")]))))))))
// [Knf] build_knf: Put(Var("arr"), Int(0), Int(1))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(1), Int(2)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(4), Int(5)), Let(("f", Var({val: Some(Fun([Fun([Int], Bool)], Bool))})), App(Var("iter"), [Var("arr"), Int(5)]), LetRec({name: ("print", Unit), args: [("x", Var({val: Some(Int)}))], body: App(Var("print_int"), [Var("x")])}, App(Var("each"), [Var("f"), Var("print")])))))))
// [Knf] build_knf: Put(Var("arr"), Int(1), Int(2))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(2), Int(3)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(4), Int(5)), Let(("f", Var({val: Some(Fun([Fun([Int], Bool)], Bool))})), App(Var("iter"), [Var("arr"), Int(5)]), LetRec({name: ("print", Unit), args: [("x", Var({val: Some(Int)}))], body: App(Var("print_int"), [Var("x")])}, App(Var("each"), [Var("f"), Var("print")]))))))
// [Knf] build_knf: Put(Var("arr"), Int(2), Int(3))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(3), Int(4)), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(4), Int(5)), Let(("f", Var({val: Some(Fun([Fun([Int], Bool)], Bool))})), App(Var("iter"), [Var("arr"), Int(5)]), LetRec({name: ("print", Unit), args: [("x", Var({val: Some(Int)}))], body: App(Var("print_int"), [Var("x")])}, App(Var("each"), [Var("f"), Var("print")])))))
// [Knf] build_knf: Put(Var("arr"), Int(3), Int(4))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Int(4)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(4), Int(5)), Let(("f", Var({val: Some(Fun([Fun([Int], Bool)], Bool))})), App(Var("iter"), [Var("arr"), Int(5)]), LetRec({name: ("print", Unit), args: [("x", Var({val: Some(Int)}))], body: App(Var("print_int"), [Var("x")])}, App(Var("each"), [Var("f"), Var("print")]))))
// [Knf] build_knf: Put(Var("arr"), Int(4), Int(5))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Int(4)
// [Knf] build_knf: Int(5)
// [Knf] build_knf: Let(("f", Var({val: Some(Fun([Fun([Int], Bool)], Bool))})), App(Var("iter"), [Var("arr"), Int(5)]), LetRec({name: ("print", Unit), args: [("x", Var({val: Some(Int)}))], body: App(Var("print_int"), [Var("x")])}, App(Var("each"), [Var("f"), Var("print")])))
// [Knf] build_knf: App(Var("iter"), [Var("arr"), Int(5)])
// [Knf] build_knf: Var("iter")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Int(5)
// [Knf] build_knf: LetRec({name: ("print", Unit), args: [("x", Var({val: Some(Int)}))], body: App(Var("print_int"), [Var("x")])}, App(Var("each"), [Var("f"), Var("print")]))
// [Knf] build_knf: App(Var("print_int"), [Var("x")])
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("each"), [Var("f"), Var("print")])
// [Knf] build_knf: Var("each")
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("print")
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] beta reduce f.58 = do6.62
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main33.80
// [Main]   .type main33.80, @function
// [Main] # leaf false
// [Main] main33.80:
// [Main] .main33.80_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   addi a1, s11, -20
// [Main]   andi s11, a1, -8
// [Main]   li a0, 1
// [Main]   sw a0, 0(a1)
// [Main]   sw a0, 4(a1)
// [Main]   sw a0, 8(a1)
// [Main]   sw a0, 12(a1)
// [Main]   sw a0, 16(a1)
// [Main]   li a0, 1
// [Main]   sw a0, 0(a1)
// [Main]   li a0, 2
// [Main]   sw a0, 4(a1)
// [Main]   li a0, 3
// [Main]   sw a0, 8(a1)
// [Main]   li a0, 4
// [Main]   sw a0, 12(a1)
// [Main]   li a0, 5
// [Main]   sw a0, 16(a1)
// [Main]   li a0, 5
// [Main]   call do30.85
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl yield25.86
// [Main]   .type yield25.86, @function
// [Main] # leaf false
// [Main] yield25.86:
// [Main] .yield25.86_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a1, s10
// [Main]   call yield25.84
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl print59.83
// [Main]   .type print59.83, @function
// [Main] # leaf false
// [Main] print59.83:
// [Main] .print59.83_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl yield25.84
// [Main]   .type yield25.84, @function
// [Main] # leaf false
// [Main] yield25.84:
// [Main] .yield25.84_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call print59.83
// [Main]   li a0, 1
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl do30.85
// [Main]   .type do30.85, @function
// [Main] # leaf false
// [Main] do30.85:
// [Main] .do30.85_5:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main] 
// [Main] .do30.85_0:
// [Main]   addi a3, s11, -8
// [Main]   andi s11, a3, -8
// [Main]   la a0, yield25.86
// [Main]   sd a0, 0(a3)
// [Main] 
// [Main] .do30.85_7:
// [Main]   mv a0, zero
// [Main]   mv a1, s0
// [Main]   mv a2, s1
// [Main]   call next9.82
// [Main] 
// [Main] .do30.85_6:
// [Main]   li a1, 1
// [Main]   bne a0, a1, .do30.85_2
// [Main] 
// [Main] .do30.85_1:
// [Main]   j .do30.85_0
// [Main] 
// [Main] .do30.85_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .do30.85_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl next9.82
// [Main]   .type next9.82, @function
// [Main] # leaf false
// [Main] next9.82:
// [Main] .next9.82_8:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   mv s2, a0
// [Main]   mv s1, a1
// [Main]   mv s0, a2
// [Main]   mv s3, a3
// [Main] 
// [Main] .next9.82_0:
// [Main]   addi a0, s1, -1
// [Main]   blt a0, s2, .next9.82_2
// [Main] 
// [Main] .next9.82_1:
// [Main]   th.lurw a0, s0, s2, 2
// [Main]   mv s10, s3
// [Main]   ld a1, 0(s3)
// [Main]   jalr a1
// [Main]   li a1, 1
// [Main]   bne a0, a1, .next9.82_4
// [Main] 
// [Main] .next9.82_3:
// [Main]   addi a0, s2, 1
// [Main]   mv s2, a0
// [Main]   j .next9.82_0
// [Main] 
// [Main] .next9.82_4:
// [Main]   mv a0, zero
// [Main] 
// [Main] .next9.82_5:
// [Main] 
// [Main] .next9.82_6:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main] .next9.82_2:
// [Main]   mv a0, zero
// [Main]   j .next9.82_6
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main33.80
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function do30.85
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b6, bpref=$b.0), Bool(val=true)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Call(ty=Bool, f=f0, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Mem(fref=f4, mref=m0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b6, args=[Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Bool), mref=m0, fills=[Field(index=0, val=Fn(fref=f11))])
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Lowering control Jump(target=b7, args=[])
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f4, fpref=$f.0), FnParam(fref=f4, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function do30.85 to wasm
// [Wasm] Lowering function yield25.86
// [Wasm] Lowering insn Call(ty=Bool, f=f3, args=[FnParam(fref=f11, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f11, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f11, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function yield25.86 to wasm
// [Wasm] Lowering function main33.80
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Int32(val=1))])
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f5, mref=m0), index=0, width=@32), val=Int32(val=1))
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f5, mref=m0), index=1, width=@32), val=Int32(val=2))
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f5, mref=m0), index=2, width=@32), val=Int32(val=3))
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f5, mref=m0), index=3, width=@32), val=Int32(val=4))
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f5, mref=m0), index=4, width=@32), val=Int32(val=5))
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[Int32(val=5), Mem(fref=f5, mref=m0)])
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Lowering control Return(args=[Insn(iref=%6)])
// [Wasm] Local Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Lowered function main33.80 to wasm
// [Wasm] Lowering function print59.83
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[FnParam(fref=f2, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Lowered function print59.83 to wasm
// [Wasm] Lowering function yield25.84
// [Wasm] Lowering insn Call(ty=Unit, f=f2, args=[FnParam(fref=f3, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Lowering control Return(args=[Bool(val=true)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Lowered function yield25.84 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f5, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [Wasm] Lowering function next9.82
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%5), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[Bool(val=false)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.2), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Apply(ty=Bool, f=BlockParam(bref=b0, bpref=$b.3), args=[Insn(iref=%2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%3), Bool(val=true)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Branch(cond=Insn(iref=%4), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b6, args=[Bool(val=false)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b7, args=[FnParam(fref=f0, fpref=$f.0), FnParam(fref=f0, fpref=$f.1), FnParam(fref=f0, fpref=$f.2), FnParam(fref=f0, fpref=$f.3)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.3) -> $$f.3
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function next9.82 to wasm
// [KnfOpt] freq: {iter1: Once, do6: AsClosure, next9: Many(2), each20: Once, yield25: AsClosure, do30: Many(2), main33: Once, print59: AsClosure}
// [KnfOpt] Inline threshold 2 19
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 19
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 7
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 7
// [KnfOpt] Inline decision rejected
// [KnfOpt] Knf inline Some(iter1)
// [KnfOpt] Knf inline Some(each20)
// [KnfOpt] Numbers of let rec: 6 7 1
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %3: Call(ty=Unit, f=f4, args=[FnParam(fref=f4, fpref=$f.0), FnParam(fref=f4, fpref=$f.1)])
// [CoreOpt] eliminated tail rec call %6: Call(ty=Bool, f=f0, args=[Insn(iref=%5), FnParam(fref=f0, fpref=$f.1), FnParam(fref=f0, fpref=$f.2), FnParam(fref=f0, fpref=$f.3)])
// [CoreOpt] Call frequnce: FnCallFreq({f4: Once, f1: Once, f11: MaybeInClosure, f5: Once, f2: Once, f3: Once, f14: Once, f0: Once})
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] do30.85 is inlining Call(ty=Bool, f=f1, args=[Mem(fref=f4, mref=m0), BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1)])
// [CoreOpt] shifted callee .fn do6.81 #f1 : fn(closure(int32) -> bool, int32, array[int32]) -> bool
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b7 {
// [CoreOpt]   .bb #b7 () {
// [CoreOpt]     let %3: bool = call f0(0, $f1, $f2, $f0)
// [CoreOpt]     return %3
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f1
