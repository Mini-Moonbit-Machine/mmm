let rec fold84: Int = (stream85.86: Fun([Unit], Tuple([Int, Int])), f87.88: Fun([Int, Int], Int), acc89.90: Int) {
  let _91: Unit = Unit
  let _92: Tuple([Int, Int]) = Apply(stream85.86, [_91, ])
  let (ok93.94: Var({val: Some(Int)}), val95.96: Var({val: Some(Int)})) = _92
  let _97: Int = Int(0)
  if (ok93.94 == _97) then {
    Var(acc89.90)
  } else {
    let _98: Int = Apply(f87.88, [acc89.90, val95.96, ])
    Apply(fold84, [stream85.86, f87.88, _98, ])
  }
}
let rec main120: Var({val: Some(Unit)}) = () {
  let _121: Int = Int(0)
  let _122: Int = Int(100)
  let _143: Int = Int(1)
  let state.144: Array(Int) = ExtApply(minimbt_create_array, [_143, _121, ])
  let _124: Int = Int(0)
  let _125: Int = Int(1000)
  let _156: Int = Int(1)
  let state.157: Array(Int) = ExtApply(minimbt_create_array, [_156, _124, ])
  let _128: Int = Int(1)
  let _131: Int = Int(50)
  let rec aux25.193: Tuple([Int, Int]) = (u26.194: Var({val: Some(Unit)})) {
    let _195: Unit = Unit
    let _268: Unit = Unit
    let _270: Unit = Unit
    let _272: Int = Int(0)
    let val.273: Int = Get state.144[_272]
    let _271: Tuple([Int, Int]) = if (val.273 == _122) then {
      let _274: Int = Int(0)
      let _275: Int = Int(0)
      Tuple([_274, _275, ])
    } else {
      let _276: Int = Int(0)
      let _277: Int = Int(1)
      let _278: Int = Add(val.273, _277)
      let _279: Unit = Put state.144[_276] = _278
      let _280: Int = Int(1)
      Tuple([_280, val.273, ])
    }
    let (ok51.281: Var({val: Some(Int)}), val53.282: Var({val: Some(Int)})) = _271
    let _283: Int = Int(0)
    let _269: Tuple([Int, Int]) = if (ok51.281 == _283) then {
      let _284: Unit = Unit
      let _285: Int = Int(0)
      let val.286: Int = Get state.157[_285]
      if (val.286 == _125) then {
        let _287: Int = Int(0)
        let _288: Int = Int(0)
        Tuple([_287, _288, ])
      } else {
        let _289: Int = Int(0)
        let _290: Int = Int(1)
        let _291: Int = Add(val.286, _290)
        let _292: Unit = Put state.157[_289] = _291
        let _293: Int = Int(1)
        Tuple([_293, val.286, ])
      }
    } else {
      let _294: Int = Int(1)
      Tuple([_294, val53.282, ])
    }
    let (ok11.295: Var({val: Some(Int)}), val13.296: Var({val: Some(Int)})) = _269
    let _297: Int = Int(0)
    let _196: Tuple([Int, Int]) = if (ok11.295 == _297) then {
      let _298: Int = Int(0)
      let _299: Int = Int(0)
      Tuple([_298, _299, ])
    } else {
      let _300: Int = Int(1)
      let _301: Int = Add(_128, val13.296)
      Tuple([_300, _301, ])
    }
    let (ok30.197: Var({val: Some(Int)}), val32.198: Var({val: Some(Int)})) = _196
    let _199: Int = Int(0)
    if (ok30.197 == _199) then {
      let _200: Int = Int(0)
      let _201: Int = Int(0)
      Tuple([_200, _201, ])
    } else {
      let r.202: Int = if (_131 <= val32.198) then {
        Int(0)
      } else {
        Int(1)
      }
      let _203: Int = Int(0)
      if (r.202 == _203) then {
        let _204: Int = Int(1)
        Tuple([_204, val32.198, ])
      } else {
        let _205: Unit = Unit
        Apply(aux25.193, [_205, ])
      }
    }
  }
  let _134: Int = Int(1200)
  let rec aux25.208: Tuple([Int, Int]) = (u26.209: Var({val: Some(Unit)})) {
    let _210: Unit = Unit
    let _211: Tuple([Int, Int]) = Apply(aux25.193, [_210, ])
    let (ok30.212: Var({val: Some(Int)}), val32.213: Var({val: Some(Int)})) = _211
    let _214: Int = Int(0)
    if (ok30.212 == _214) then {
      let _215: Int = Int(0)
      let _216: Int = Int(0)
      Tuple([_215, _216, ])
    } else {
      let r.217: Int = if (val32.213 <= _134) then {
        Int(0)
      } else {
        Int(1)
      }
      let _218: Int = Int(0)
      if (r.217 == _218) then {
        let _219: Int = Int(1)
        Tuple([_219, val32.213, ])
      } else {
        let _220: Unit = Unit
        Apply(aux25.208, [_220, ])
      }
    }
  }
  let rec add102.221: Int = (x103.222: Int, y105.223: Int) {
    Add(x103.222, y105.223)
  }
  let _224: Int = Int(0)
  let sum.137: Int = Apply(fold84, [aux25.208, add102.221, _224, ])
  let _139: Unit = ExtApply(minimbt_print_int, [sum.137, ])
  let _140: Int = Int(10)
  let _142: Unit = ExtApply(minimbt_print_char, [_140, ])
  Unit
}
Apply(main120, [])
