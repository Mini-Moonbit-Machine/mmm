let unmem_magic.1: Int = Int(-1919810)
let rec mem.2: Fun([Int], Int) = (func.4: Fun([Fun([Int], Int), Int], Int), max_n.6: Int) {
  let cache.7: Array(Int) = ExtApply(minimbt_create_array, [max_n.6, unmem_magic.1, ])
  let rec memed.8: Int = (n.10: Int) {
    let _11: Int = Get cache.7[n.10]
    if (_11 == unmem_magic.1) then {
      let res.12: Int = Apply(func.4, [memed.8, n.10, ])
      let _14: Unit = Put cache.7[n.10] = res.12
      Var(res.12)
    } else {
      Get cache.7[n.10]
    }
  }
  Var(memed.8)
}
let rec mem_fib.15: Int = (f.17: Fun([Int], Int), n.19: Int) {
  let _20: Int = Int(1)
  if (n.19 <= _20) then {
    Var(n.19)
  } else {
    let _21: Int = Int(1)
    let _22: Int = Sub(n.19, _21)
    let _23: Int = Apply(f.17, [_22, ])
    let _24: Int = Int(2)
    let _25: Int = Sub(n.19, _24)
    let _26: Int = Apply(f.17, [_25, ])
    Add(_23, _26)
  }
}
let rec fib.27: Int = (n.29: Int) {
  let _30: Int = Int(1)
  let _31: Int = Add(n.29, _30)
  let f.32: Fun([Int], Int) = Apply(mem.2, [mem_fib.15, _31, ])
  Apply(f.32, [n.29, ])
}
let rec main.33: Var({val: Some(Unit)}) = () {
  let n.34: Int = ExtApply(minimbt_read_int, [])
  let _35: Int = Apply(fib.27, [n.34, ])
  let _37: Unit = ExtApply(minimbt_print_int, [_35, ])
  let _38: Int = Int(10)
  let _40: Unit = ExtApply(minimbt_print_char, [_38, ])
  Unit
}
Apply(main.33, [])
