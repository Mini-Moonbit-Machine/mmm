let unmem_magic.1: Int = Int(-1919810)
let rec memed.6l1: Int = (n.7: Int, func.3: Fun([Fun([Int], Int), Int], Int), cache.5: Array(Int), unmem_magic.1: Int) {
  let _8: Int = Get cache.5[n.7]
  if (_8 == unmem_magic.1) then {
    let rec memed.6l1c0: Int = (n.7: Int) {
      Apply(memed.6l1, [n.7, func.3, cache.5, unmem_magic.1, ])
    }
    let res.9: Int = Apply(func.3, [memed.6l1c0, n.7, ])
    let _10: Unit = Put cache.5[n.7] = res.9
    Var(res.9)
  } else {
    Get cache.5[n.7]
  }
}
let rec mem.2l0: Fun([Int], Int) = (func.3: Fun([Fun([Int], Int), Int], Int), max_n.4: Int, unmem_magic.1: Int) {
  let cache.5: Array(Int) = ExtApply(minimbt_create_array, [max_n.4, unmem_magic.1, ])
  let rec memed.6l1c0: Int = (n.7: Int) {
    Apply(memed.6l1, [n.7, func.3, cache.5, unmem_magic.1, ])
  }
  Var(memed.6l1c0)
}
let rec mem_fib.11l1: Int = (f.12: Fun([Int], Int), n.13: Int) {
  let _14: Int = Int(1)
  if (n.13 <= _14) then {
    Var(n.13)
  } else {
    let _15: Int = Int(1)
    let _16: Int = Sub(n.13, _15)
    let _17: Int = Apply(f.12, [_16, ])
    let _18: Int = Int(2)
    let _19: Int = Sub(n.13, _18)
    let _20: Int = Apply(f.12, [_19, ])
    Add(_17, _20)
  }
}
let rec main.26l2: Var({val: Some(Unit)}) = (unmem_magic.1: Int) {
  let n.27: Int = ExtApply(minimbt_read_int, [])
  let _38: Int = Int(1)
  let _39: Int = Add(n.27, _38)
  let rec mem_fib.11l1c0: Int = (f.12: Fun([Int], Int), n.13: Int) {
    Apply(mem_fib.11l1, [f.12, n.13, ])
  }
  let f.40: Fun([Int], Int) = Apply(mem.2l0, [mem_fib.11l1c0, _39, unmem_magic.1, ])
  let _28: Int = Apply(f.40, [n.27, ])
  let _29: Unit = ExtApply(minimbt_print_int, [_28, ])
  let _30: Int = Int(10)
  let _31: Unit = ExtApply(minimbt_print_char, [_30, ])
  Unit
}
Apply(main.26l2, [unmem_magic.1, ])