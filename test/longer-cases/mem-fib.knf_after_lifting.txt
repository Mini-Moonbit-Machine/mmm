let unmem_magic.1: Int = Int(-1919810)
let rec mem_fib.38: Int = (f.12: Fun([Int], Int), n.13: Int) {
  let _14: Int = Int(1)
  if (n.13 <= _14) then {
    Var(n.13)
  } else {
    let _15: Int = Int(1)
    let _16: Int = Sub(n.13, _15)
    let _17: Int = Apply(f.12, [_16, ])
    let _18: Int = Int(2)
    let _19: Int = Sub(n.13, _18)
    let _20: Int = Apply(f.12, [_19, ])
    Add(_17, _20)
  }
}
let rec memed.40: Int = (n.34: Int, cache.32: Array(Int), unmem_magic.1: Int) {
  let _35: Int = Get cache.32[n.34]
  if (_35 == unmem_magic.1) then {
    let rec memed.41: Int = (n.34: Int) {
      Apply(memed.40, [n.34, cache.32, unmem_magic.1, ])
    }
    let res.36: Int = Apply(mem_fib.38, [memed.41, n.34, ])
    let _37: Unit = Put cache.32[n.34] = res.36
    Var(res.36)
  } else {
    Get cache.32[n.34]
  }
}
let rec fib.39: Int = (n.22: Int, unmem_magic.1: Int) {
  let _23: Int = Int(1)
  let _24: Int = Add(n.22, _23)
  let cache.32: Array(Int) = ExtApply(minimbt_create_array, [_24, unmem_magic.1, ])
  Apply(memed.40, [n.22, cache.32, unmem_magic.1, ])
}
let rec main.42: Var({val: Some(Unit)}) = (unmem_magic.1: Int) {
  let n.27: Int = ExtApply(minimbt_read_int, [])
  let _28: Int = Apply(fib.39, [n.27, unmem_magic.1, ])
  let _29: Unit = ExtApply(minimbt_print_int, [_28, ])
  let _30: Int = Int(10)
  let _31: Unit = ExtApply(minimbt_print_char, [_30, ])
  Unit
}
Apply(main.42, [unmem_magic.1, ])