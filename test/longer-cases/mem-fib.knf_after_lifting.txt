let unmem_magic.1: Int = Int(-1919810)
let rec memed8.51: Int = (n9.10: Int, cache.7: Array(Int), func3.4: Fun([Fun([Int], Int), Int], Int), unmem_magic.1: Int) {
  let _11: Int = Get cache.7[n9.10]
  if (_11 == unmem_magic.1) then {
    let rec memed8.52: Int = (n9.10: Int) {
      Apply(memed8.51, [n9.10, cache.7, func3.4, unmem_magic.1, ])
    }
    let res.12: Int = Apply(func3.4, [memed8.52, n9.10, ])
    let _14: Unit = Put cache.7[n9.10] = res.12
    Var(res.12)
  } else {
    Get cache.7[n9.10]
  }
}
let rec mem2.50: Fun([Int], Int) = (func3.4: Fun([Fun([Int], Int), Int], Int), max_n5.6: Int, unmem_magic.1: Int) {
  let cache.7: Array(Int) = ExtApply(minimbt_create_array, [max_n5.6, unmem_magic.1, ])
  let rec memed8.53: Int = (n9.10: Int) {
    Apply(memed8.51, [n9.10, cache.7, func3.4, unmem_magic.1, ])
  }
  Var(memed8.53)
}
let rec mem_fib15.54: Int = (f16.17: Fun([Int], Int), n18.19: Int) {
  let _20: Int = Int(1)
  if (n18.19 <= _20) then {
    Var(n18.19)
  } else {
    let _21: Int = Int(1)
    let _22: Int = Sub(n18.19, _21)
    let _23: Int = Apply(f16.17, [_22, ])
    let _24: Int = Int(2)
    let _25: Int = Sub(n18.19, _24)
    let _26: Int = Apply(f16.17, [_25, ])
    Add(_23, _26)
  }
}
let rec main33.55: Var({val: Some(Unit)}) = (unmem_magic.1: Int) {
  let n.34: Int = ExtApply(minimbt_read_int, [])
  let _47: Int = Int(1)
  let _48: Int = Add(n.34, _47)
  let rec mem_fib15.56: Int = (f16.17: Fun([Int], Int), n18.19: Int) {
    Apply(mem_fib15.54, [f16.17, n18.19, ])
  }
  let f.49: Fun([Int], Int) = Apply(mem2.50, [mem_fib15.56, _48, unmem_magic.1, ])
  let _35: Int = Apply(f.49, [n.34, ])
  let _37: Unit = ExtApply(minimbt_print_int, [_35, ])
  let _38: Int = Int(10)
  let _40: Unit = ExtApply(minimbt_print_char, [_38, ])
  Unit
}
Apply(main33.55, [unmem_magic.1, ])