let rec fold84: Int = (stream85.86: Fun([Unit], Tuple([Int, Int])), f87.88: Fun([Int, Int], Int), acc89.90: Int) {
  let _91: Unit = Unit
  let _92: Tuple([Int, Int]) = Apply(stream85.86, [_91, ])
  let (ok93.94: Var({val: Some(Int)}), val95.96: Var({val: Some(Int)})) = _92let _97: Int = Int(0)
  if (ok93.94 == _97) then {
    Var(acc89.90)
  } else {
    let _98: Int = Apply(f87.88, [acc89.90, val95.96, ])
    let _143: Unit = Unit
    let _144: Tuple([Int, Int]) = Apply(stream85.86, [_143, ])
    let (ok93.145: Var({val: Some(Int)}), val95.146: Var({val: Some(Int)})) = _144let _147: Int = Int(0)
    if (ok93.145 == _147) then {
      Var(_98)
    } else {
      let _148: Int = Apply(f87.88, [_98, val95.146, ])
      Apply(fold84, [stream85.86, f87.88, _148, ])
    }
  }
}
let rec main120: Var({val: Some(Unit)}) = () {
  let _121: Int = Int(0)
  let _122: Int = Int(100)
  let range100.123: Fun([Unit], Tuple([Int, Int])) = 
    let _155: Int = Int(1)
    let state.156: Array(Int) = ExtApply(minimbt_create_array, [_155, _121, ])
    let rec aux65.157: Tuple([Int, Int]) = (u66.158: Var({val: Some(Unit)})) {
      let _159: Int = Int(0)
      let val.160: Int = Get state.156[_159]
      if (val.160 == _122) then {
        let _161: Int = Int(0)
        let _162: Int = Int(0)
        Tuple([_161, _162, ])
      } else {
        let _163: Int = Int(0)
        let _164: Int = Int(1)
        let _165: Int = Add(val.160, _164)
        let _166: Unit = Put state.156[_163] = _165
        let _167: Int = Int(1)
        Tuple([_167, val.160, ])
      }
    }
    Var(aux65.157)
  let _124: Int = Int(0)
  let _125: Int = Int(1000)
  let range1000.126: Fun([Unit], Tuple([Int, Int])) = 
    let _168: Int = Int(1)
    let state.169: Array(Int) = ExtApply(minimbt_create_array, [_168, _124, ])
    let rec aux65.170: Tuple([Int, Int]) = (u66.171: Var({val: Some(Unit)})) {
      let _172: Int = Int(0)
      let val.173: Int = Get state.169[_172]
      if (val.173 == _125) then {
        let _174: Int = Int(0)
        let _175: Int = Int(0)
        Tuple([_174, _175, ])
      } else {
        let _176: Int = Int(0)
        let _177: Int = Int(1)
        let _178: Int = Add(val.173, _177)
        let _179: Unit = Put state.169[_176] = _178
        let _180: Int = Int(1)
        Tuple([_180, val.173, ])
      }
    }
    Var(aux65.170)
  let catt.127: Fun([Unit], Tuple([Int, Int])) = 
    let rec aux46.181: Tuple([Int, Int]) = (u47.182: Var({val: Some(Unit)})) {
      let _183: Unit = Unit
      let _184: Tuple([Int, Int]) = Apply(range100.123, [_183, ])
      let (ok51.185: Var({val: Some(Int)}), val53.186: Var({val: Some(Int)})) = _184let _187: Int = Int(0)
      if (ok51.185 == _187) then {
        let _188: Unit = Unit
        Apply(range1000.126, [_188, ])
      } else {
        let _189: Int = Int(1)
        Tuple([_189, val53.186, ])
      }
    }
    Var(aux46.181)
  let _128: Int = Int(1)
  let _129: Fun([Int], Int) = 
    let rec aux81.190: Int = (y82.191: Int) {
      Add(_128, y82.191)
    }
    Var(aux81.190)
  let addone.130: Fun([Unit], Tuple([Int, Int])) = 
    let rec aux6.192: Tuple([Int, Int]) = (u7.193: Var({val: Some(Unit)})) {
      let _194: Unit = Unit
      let _195: Tuple([Int, Int]) = Apply(catt.127, [_194, ])
      let (ok11.196: Var({val: Some(Int)}), val13.197: Var({val: Some(Int)})) = _195let _198: Int = Int(0)
      if (ok11.196 == _198) then {
        let _199: Int = Int(0)
        let _200: Int = Int(0)
        Tuple([_199, _200, ])
      } else {
        let _201: Int = Int(1)
        let _202: Int = Apply(_129, [val13.197, ])
        Tuple([_201, _202, ])
      }
    }
    Var(aux6.192)
  let _131: Int = Int(50)
  let _132: Fun([Int], Int) = 
    let rec aux111.203: Int = (y112.204: Int) {
      if (_131 <= y112.204) then {
        Int(0)
      } else {
        Int(1)
      }
    }
    Var(aux111.203)
  let over50.133: Fun([Unit], Tuple([Int, Int])) = 
    let rec aux25.205: Tuple([Int, Int]) = (u26.206: Var({val: Some(Unit)})) {
      let _207: Unit = Unit
      let _208: Tuple([Int, Int]) = Apply(addone.130, [_207, ])
      let (ok30.209: Var({val: Some(Int)}), val32.210: Var({val: Some(Int)})) = _208let _211: Int = Int(0)
      if (ok30.209 == _211) then {
        let _212: Int = Int(0)
        let _213: Int = Int(0)
        Tuple([_212, _213, ])
      } else {
        let r.214: Int = Apply(_132, [val32.210, ])
        let _215: Int = Int(0)
        if (r.214 == _215) then {
          let _216: Int = Int(1)
          Tuple([_216, val32.210, ])
        } else {
          let _217: Unit = Unit
          Apply(aux25.205, [_217, ])
        }
      }
    }
    Var(aux25.205)
  let _134: Int = Int(1200)
  let _135: Fun([Int], Int) = 
    let rec aux117.218: Int = (y118.219: Int) {
      if (y118.219 <= _134) then {
        Int(0)
      } else {
        Int(1)
      }
    }
    Var(aux117.218)
  let under1200.136: Fun([Unit], Tuple([Int, Int])) = 
    let rec aux25.220: Tuple([Int, Int]) = (u26.221: Var({val: Some(Unit)})) {
      let _222: Unit = Unit
      let _223: Tuple([Int, Int]) = Apply(over50.133, [_222, ])
      let (ok30.224: Var({val: Some(Int)}), val32.225: Var({val: Some(Int)})) = _223let _226: Int = Int(0)
      if (ok30.224 == _226) then {
        let _227: Int = Int(0)
        let _228: Int = Int(0)
        Tuple([_227, _228, ])
      } else {
        let r.229: Int = Apply(_135, [val32.225, ])
        let _230: Int = Int(0)
        if (r.229 == _230) then {
          let _231: Int = Int(1)
          Tuple([_231, val32.225, ])
        } else {
          let _232: Unit = Unit
          Apply(aux25.220, [_232, ])
        }
      }
    }
    Var(aux25.220)
  let sum.137: Int = 
    let rec add102.233: Int = (x103.234: Int, y105.235: Int) {
      Add(x103.234, y105.235)
    }
    let _236: Int = Int(0)
    Apply(fold84, [under1200.136, add102.233, _236, ])
  let _139: Unit = ExtApply(minimbt_print_int, [sum.137, ])
  let _140: Int = Int(10)
  let _142: Unit = ExtApply(minimbt_print_char, [_140, ])
  Unit
}
Apply(main120, [])