let rec fold.84: Int = (stream.86: (Unit) -> (Int, Int), f.88: (Int, Int) -> Int, acc.90: Int) {
  let _91: Unit = Unit
  let _92: (Int, Int) = Apply(stream.86, [_91, ])
  let (ok.94: Int, val.96: Int) = _92
  let _97: Int = Int(0)
  if (ok.94 == _97) then {
    Var(acc.90)
  } else {
    let _98: Int = Apply(f.88, [acc.90, val.96, ])
    Apply(fold.84, [stream.86, f.88, _98, ])
  }
}
let rec main.120: Unit = () {
  let _121: Int = Int(0)
  let _122: Int = Int(100)
  let _143: Int = Int(1)
  let state.144: Array[Int] = ExtApply(minimbt_create_array, [_143, _121, ])
  let rec aux.145: (Int, Int) = (u.146: Unit) {
    let _147: Int = Int(0)
    let val.148: Int = Get state.144[_147]
    if (val.148 == _122) then {
      let _149: Int = Int(0)
      let _150: Int = Int(0)
      Tuple([_149, _150, ])
    } else {
      let _151: Int = Int(0)
      let _152: Int = Int(1)
      let _153: Int = Add(val.148, _152)
      let _154: Unit = Put state.144[_151] = _153
      let _155: Int = Int(1)
      Tuple([_155, val.148, ])
    }
  }
  let _124: Int = Int(0)
  let _125: Int = Int(1000)
  let _156: Int = Int(1)
  let state.157: Array[Int] = ExtApply(minimbt_create_array, [_156, _124, ])
  let rec aux.158: (Int, Int) = (u.159: Unit) {
    let _160: Int = Int(0)
    let val.161: Int = Get state.157[_160]
    if (val.161 == _125) then {
      let _162: Int = Int(0)
      let _163: Int = Int(0)
      Tuple([_162, _163, ])
    } else {
      let _164: Int = Int(0)
      let _165: Int = Int(1)
      let _166: Int = Add(val.161, _165)
      let _167: Unit = Put state.157[_164] = _166
      let _168: Int = Int(1)
      Tuple([_168, val.161, ])
    }
  }
  let rec aux.169: (Int, Int) = (u.170: Unit) {
    let _171: Unit = Unit
    let _172: (Int, Int) = Apply(aux.145, [_171, ])
    let (ok.173: Int, val.174: Int) = _172
    let _175: Int = Int(0)
    if (ok.173 == _175) then {
      let _176: Unit = Unit
      Apply(aux.158, [_176, ])
    } else {
      let _177: Int = Int(1)
      Tuple([_177, val.174, ])
    }
  }
  let _128: Int = Int(1)
  let rec aux.178: Int = (y.179: Int) {
    Add(_128, y.179)
  }
  let rec aux.180: (Int, Int) = (u.181: Unit) {
    let _182: Unit = Unit
    let _183: (Int, Int) = Apply(aux.169, [_182, ])
    let (ok.184: Int, val.185: Int) = _183
    let _186: Int = Int(0)
    if (ok.184 == _186) then {
      let _187: Int = Int(0)
      let _188: Int = Int(0)
      Tuple([_187, _188, ])
    } else {
      let _189: Int = Int(1)
      let _190: Int = Apply(aux.178, [val.185, ])
      Tuple([_189, _190, ])
    }
  }
  let _131: Int = Int(50)
  let rec aux.191: Int = (y.192: Int) {
    if (_131 <= y.192) then {
      Int(0)
    } else {
      Int(1)
    }
  }
  let rec aux.193: (Int, Int) = (u.194: Unit) {
    let _195: Unit = Unit
    let _196: (Int, Int) = Apply(aux.180, [_195, ])
    let (ok.197: Int, val.198: Int) = _196
    let _199: Int = Int(0)
    if (ok.197 == _199) then {
      let _200: Int = Int(0)
      let _201: Int = Int(0)
      Tuple([_200, _201, ])
    } else {
      let r.202: Int = Apply(aux.191, [val.198, ])
      let _203: Int = Int(0)
      if (r.202 == _203) then {
        let _204: Int = Int(1)
        Tuple([_204, val.198, ])
      } else {
        let _205: Unit = Unit
        Apply(aux.193, [_205, ])
      }
    }
  }
  let _134: Int = Int(1200)
  let rec aux.206: Int = (y.207: Int) {
    if (y.207 <= _134) then {
      Int(0)
    } else {
      Int(1)
    }
  }
  let rec aux.208: (Int, Int) = (u.209: Unit) {
    let _210: Unit = Unit
    let _211: (Int, Int) = Apply(aux.193, [_210, ])
    let (ok.212: Int, val.213: Int) = _211
    let _214: Int = Int(0)
    if (ok.212 == _214) then {
      let _215: Int = Int(0)
      let _216: Int = Int(0)
      Tuple([_215, _216, ])
    } else {
      let r.217: Int = Apply(aux.206, [val.213, ])
      let _218: Int = Int(0)
      if (r.217 == _218) then {
        let _219: Int = Int(1)
        Tuple([_219, val.213, ])
      } else {
        let _220: Unit = Unit
        Apply(aux.208, [_220, ])
      }
    }
  }
  let rec add.221: Int = (x.222: Int, y.223: Int) {
    Add(x.222, y.223)
  }
  let _224: Int = Int(0)
  let sum.137: Int = Apply(fold.84, [aux.208, add.221, _224, ])
  let _139: Unit = ExtApply(minimbt_print_int, [sum.137, ])
  let _140: Int = Int(10)
  let _142: Unit = ExtApply(minimbt_print_char, [_140, ])
  Unit
}
Apply(main.120, [])
