# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn insert.148 #f1 : fn(array[int32], int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1($f0, $f1)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
    .block #b6
    .block #b7
    .block #b8
  }
  .bb #b2 (array[int32], int32) {
    let %0: bool = eq($b2.1, 0)
    br %0 b3() b4()
  }
  .bb #b3 () {
    jump b8(())
  }
  .bb #b4 () {
    let %1: int32 = sub($b2.1, 1)
    let %2: int32 = load int32 offset($b2.0, %1 * @32)
    let %3: int32 = load int32 offset($b2.0, $b2.1 * @32)
    let %4: bool = le(%2, %3)
    br %4 b5() b6()
  }
  .bb #b5 () {
    jump b7(())
  }
  .bb #b6 () {
    let %5: int32 = load int32 offset($b2.0, $b2.1 * @32)
    let %6: int32 = sub($b2.1, 1)
    let %7: int32 = load int32 offset($b2.0, %6 * @32)
    let _ = store int32 offset($b2.0, $b2.1 * @32) <- %7
    let %9: int32 = sub($b2.1, 1)
    let _ = store int32 offset($b2.0, %9 * @32) <- %5
    let %11: int32 = sub($b2.1, 1)
    jump b2($b2.0, %11)
  }
  .bb #b7 (unit) {
    jump b8($b7.0)
  }
  .bb #b8 (unit) {
    return $b8.0
  }
}
.fn print_array.149 #f3 : fn(array[int32], int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1(0)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
  }
  .bb #b2 (int32) {
    let %0: bool = eq($b2.0, $f1)
    br %0 b3() b4()
  }
  .bb #b3 () {
    jump b5(())
  }
  .bb #b4 () {
    let %1: int32 = load int32 offset($f0, $b2.0 * @32)
    let %2: unit = ext_call minimbt_print_int(%1)
    let %3: unit = ext_call minimbt_print_char(32)
    let %4: int32 = add($b2.0, 1)
    jump b2(%4)
  }
  .bb #b5 (unit) {
    return $b5.0
  }
}
.fn isort.147 #f2 : fn(array[int32], int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1(1)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
  }
  .bb #b2 (int32) {
    let %0: bool = eq($b2.0, $f1)
    br %0 b3() b4()
  }
  .bb #b3 () {
    jump b5(())
  }
  .bb #b4 () {
    jump b7()
  }
  .bb #b5 (unit) {
    return $b5.0
  }
  .bb #b6 (unit) {
    let %2: int32 = add($b2.0, 1)
    jump b2(%2)
  }
  .bb #b7 () {
    jump b8($f0, $b2.0)
  }
  .loop #b8 pre #Some(b7) header #b9 {
    .block #b10
    .block #b11
    .block #b12
    .block #b13
    .block #b14
    .block #b15
  }
  .bb #b9 (array[int32], int32) {
    let %3: bool = eq($b9.1, 0)
    br %3 b10() b11()
  }
  .bb #b10 () {
    jump b15(())
  }
  .bb #b11 () {
    let %4: int32 = sub($b9.1, 1)
    let %5: int32 = load int32 offset($b9.0, %4 * @32)
    let %6: int32 = load int32 offset($b9.0, $b9.1 * @32)
    let %7: bool = le(%5, %6)
    br %7 b12() b13()
  }
  .bb #b12 () {
    jump b14(())
  }
  .bb #b13 () {
    let %8: int32 = load int32 offset($b9.0, $b9.1 * @32)
    let %9: int32 = sub($b9.1, 1)
    let %10: int32 = load int32 offset($b9.0, %9 * @32)
    let _ = store int32 offset($b9.0, $b9.1 * @32) <- %10
    let %12: int32 = sub($b9.1, 1)
    let _ = store int32 offset($b9.0, %12 * @32) <- %8
    let %14: int32 = sub($b9.1, 1)
    jump b9($b9.0, %14)
  }
  .bb #b14 (unit) {
    jump b15($b14.0)
  }
  .bb #b15 (unit) {
    jump b6($b15.0)
  }
}
.fn fill_buffer.146 #f0 : fn(array[int32], int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1(0, 12345)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
  }
  .bb #b2 (int32, int32) {
    let %0: bool = eq($b2.0, $f1)
    br %0 b3() b4()
  }
  .bb #b3 () {
    jump b5(())
  }
  .bb #b4 () {
    let %1: int32 = mul($b2.1, 75)
    let %2: int32 = add(%1, 74)
    let %3: int32 = div(%2, 65537)
    let %4: int32 = mul(%3, 65537)
    let %5: int32 = sub(%2, %4)
    let _ = store int32 offset($f0, $b2.0 * @32) <- %5
    let %7: int32 = add($b2.0, 1)
    jump b2(%7, %5)
  }
  .bb #b5 (unit) {
    return $b5.0
  }
}
.fn T$start #f10 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f4()
    return %0
  }
}
.fn main.150 #f4 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap(100)> <- [..] = 0
    let %1: unit = call f0(f4.m0, 100)
    let %2: unit = call f2(f4.m0, 100)
    let %3: unit = call f3(f4.m0, 100)
    return %3
  }
}
.thunk ::0 start
