let rec swap1l0: Unit = (arr2.3: Array(Int), i4.5: Int, j6.7: Int) {
  let tmp.8: Int = Get arr2.3[i4.5]
  let _9: Int = Get arr2.3[j6.7]
  let _11: Unit = Put arr2.3[i4.5] = _9
  let _13: Unit = Put arr2.3[j6.7] = tmp.8
  Unit
}
let rec output14l1: Unit = (arr15.16: Array(Int), i17.18: Int, len19.20: Int) {
  let _21: Int = Int(1)
  let _22: Int = Sub(len19.20, _21)
  if (i17.18 <= _22) then {
    let _23: Int = Get arr15.16[i17.18]
    let _25: Unit = ExtApply(minimbt_print_int, [_23, ])
    let _27: Unit = ExtApply(minimbt_print_endline, [])
    let _28: Int = Int(1)
    let _29: Int = Add(i17.18, _28)
    Apply(output14l1, [arr15.16, _29, len19.20, ])
  } else {
    Unit
  }
}
let rec g37l3: Unit = (j38.39: Int, arr31.32: Array(Int), low33.34: Int) {
  let _40: Int = Int(1)
  let _41: Int = Add(_40, low33.34)
  if (_41 <= j38.39) then {
    let _42: Int = Get arr31.32[j38.39]
    let _43: Int = Int(1)
    let _44: Int = Sub(j38.39, _43)
    let _45: Int = Get arr31.32[_44]
    let _46: Int = Int(1)
    let _47: Int = Sub(_45, _46)
    if (_42 <= _47) then {
      let _48: Int = Int(1)
      let _49: Int = Sub(j38.39, _48)
      let _51: Unit = Apply(swap1l0, [arr31.32, j38.39, _49, ])
      let _52: Int = Int(1)
      let _53: Int = Sub(j38.39, _52)
      Apply(g37l3, [_53, arr31.32, low33.34, ])
    } else {
      Unit
    }
  } else {
    Unit
  }
}
let rec f54l4: Unit = (i55.56: Int, arr31.32: Array(Int), low33.34: Int, high35.36: Int) {
  let _57: Int = Int(1)
  let _58: Int = Sub(high35.36, _57)
  if (i55.56 <= _58) then {
    let _60: Unit = Apply(g37l3, [i55.56, arr31.32, low33.34, ])
    let _61: Int = Int(1)
    let _62: Int = Add(i55.56, _61)
    Apply(f54l4, [_62, arr31.32, low33.34, high35.36, ])
  } else {
    Unit
  }
}
let rec insertion_sort30l2: Unit = (arr31.32: Array(Int), low33.34: Int, high35.36: Int) {
  let _63: Int = Int(1)
  let _64: Int = Add(low33.34, _63)
  Apply(f54l4, [_64, arr31.32, low33.34, high35.36, ])
}
let rec partition65l3: Tuple([Int, Bool]) = (arr66.67: Array(Int), pivot_index68.69: Int, low70.71: Int, high72.73: Int) {
  let _74: Int = Int(1)
  let _75: Int = Sub(high72.73, _74)
  let _77: Unit = Apply(swap1l0, [arr66.67, pivot_index68.69, _75, ])
  let _78: Int = Int(1)
  let _79: Int = Sub(high72.73, _78)
  let pivot.80: Int = Get arr66.67[_79]
  let _81: Int = Int(1)
  let i.82: Array(Int) = ExtApply(minimbt_create_array, [_81, low70.71, ])
  let _83: Int = Int(1)
  let _84: Int = Int(1)
  let partitioned.85: Array(Int) = ExtApply(minimbt_create_array, [_83, _84, ])
  let rec aux86: Var({val: Some(Unit)}) = (j87.88: Int) {
    let _89: Int = Int(2)
    let _90: Int = Sub(high72.73, _89)
    if (j87.88 <= _90) then {
      let _91: Int = Get arr66.67[j87.88]
      let _92: Int = Int(1)
      let _93: Int = Sub(pivot.80, _92)
      let _112: Unit = if (_91 <= _93) then {
        let _94: Int = Int(0)
        let _95: Int = Get i.82[_94]
        let _103: Unit = if (_95 == j87.88) then {
          Unit
        } else {
          let _96: Int = Int(0)
          let _97: Int = Get i.82[_96]
          let _99: Unit = Apply(swap1l0, [arr66.67, _97, j87.88, ])
          let _100: Int = Int(0)
          let _101: Int = Int(0)
          Put partitioned.85[_100] = _101
        }
        let _104: Int = Int(0)
        let _105: Int = Int(0)
        let _106: Int = Get i.82[_105]
        let _107: Int = Int(1)
        let _108: Int = Add(_106, _107)
        let _110: Unit = Put i.82[_104] = _108
        Unit
      } else {
        Unit
      }
      let _113: Int = Int(1)
      let _114: Int = Add(j87.88, _113)
      Apply(aux86, [_114, ])
    } else {
      Unit
    }
  }
  let _116: Var({val: Some(Unit)}) = Apply(aux86, [low70.71, ])
  let _117: Int = Int(0)
  let _118: Int = Get i.82[_117]
  let _119: Int = Int(1)
  let _120: Int = Sub(high72.73, _119)
  let _122: Unit = Apply(swap1l0, [arr66.67, _118, _120, ])
  let _123: Int = Int(0)
  let _124: Int = Get i.82[_123]
  let _125: Int = Int(0)
  let _126: Int = Get partitioned.85[_125]
  let _127: Int = Int(1)
  let _128: Int = if (_126 == _127) then {
    Bool(true)
  } else {
    Bool(false)
  }
  Tuple([_124, _128, ])
}
let rec sort_2157l5: Var({val: Some(Unit)}) = (a158.159: Int, b160.161: Int, swaps.139: Array(Int), arr130.131: Array(Int)) {
  let _162: Int = Get arr130.131[b160.161]
  let _163: Int = Get arr130.131[a158.159]
  let _164: Int = Int(1)
  let _165: Int = Sub(_163, _164)
  if (_162 <= _165) then {
    let _167: Unit = Apply(swap1l0, [arr130.131, a158.159, b160.161, ])
    let _168: Int = Int(0)
    let _169: Int = Int(0)
    let _170: Int = Get swaps.139[_169]
    let _171: Int = Int(1)
    let _172: Int = Add(_170, _171)
    Put swaps.139[_168] = _172
  } else {
    Unit
  }
}
let rec sort_3173l6: Var({val: Some(Unit)}) = (a174.175: Int, b176.177: Int, c178.179: Int, swaps.139: Array(Int), arr130.131: Array(Int)) {
  let _181: Var({val: Some(Unit)}) = Apply(sort_2157l5, [a174.175, b176.177, swaps.139, arr130.131, ])
  let _183: Var({val: Some(Unit)}) = Apply(sort_2157l5, [b176.177, c178.179, swaps.139, arr130.131, ])
  Apply(sort_2157l5, [a174.175, b176.177, swaps.139, arr130.131, ])
}
let rec choose_pivot129l4: Tuple([Int, Bool]) = (arr130.131: Array(Int), low132.133: Int, high134.135: Int) {
  let use_median_of_medians.136: Int = Int(50)
  let _137: Int = Int(1)
  let _138: Int = Int(0)
  let swaps.139: Array(Int) = ExtApply(minimbt_create_array, [_137, _138, ])
  let len.140: Int = Sub(high134.135, low132.133)
  let _141: Int = Int(4)
  let _142: Int = Div(len.140, _141)
  let _143: Int = Int(2)
  let _144: Int = Mul(_142, _143)
  let b.145: Int = Add(low132.133, _144)
  let _146: Int = Int(8)
  let _205: Var({val: Some(Unit)}) = if (_146 <= len.140) then {
    let _147: Int = Int(4)
    let _148: Int = Div(len.140, _147)
    let _149: Int = Int(1)
    let _150: Int = Mul(_148, _149)
    let a.151: Int = Add(low132.133, _150)
    let _152: Int = Int(4)
    let _153: Int = Div(len.140, _152)
    let _154: Int = Int(3)
    let _155: Int = Mul(_153, _154)
    let c.156: Int = Add(low132.133, _155)
    let _184: Int = Int(1)
    let _185: Int = Sub(len.140, _184)
    let _203: Var({val: Some(Unit)}) = if (use_median_of_medians.136 <= _185) then {
      let _186: Int = Int(1)
      let _187: Int = Sub(a.151, _186)
      let _188: Int = Int(1)
      let _189: Int = Add(a.151, _188)
      let _191: Var({val: Some(Unit)}) = Apply(sort_3173l6, [_187, a.151, _189, swaps.139, arr130.131, ])
      let _192: Int = Int(1)
      let _193: Int = Sub(b.145, _192)
      let _194: Int = Int(1)
      let _195: Int = Add(b.145, _194)
      let _197: Var({val: Some(Unit)}) = Apply(sort_3173l6, [_193, b.145, _195, swaps.139, arr130.131, ])
      let _198: Int = Int(1)
      let _199: Int = Sub(c.156, _198)
      let _200: Int = Int(1)
      let _201: Int = Add(c.156, _200)
      Apply(sort_3173l6, [_199, c.156, _201, swaps.139, arr130.131, ])
    } else {
      Unit
    }
    Apply(sort_3173l6, [a.151, b.145, c.156, swaps.139, arr130.131, ])
  } else {
    Unit
  }
  let _206: Int = Int(0)
  let _207: Int = Get swaps.139[_206]
  let _208: Int = Int(0)
  let _209: Int = if (_207 == _208) then {
    Bool(true)
  } else {
    Bool(false)
  }
  Tuple([b.145, _209, ])
}
let rec quick_sort210l5: Unit = (arr211.212: Array(Int), low213.214: Int, high215.216: Int) {
  let len.217: Int = Sub(high215.216, low213.214)
  let _218: Int = Int(16)
  if (len.217 <= _218) then {
    Apply(insertion_sort30l2, [arr211.212, low213.214, high215.216, ])
  } else {
    let _219: Tuple([Int, Bool]) = Apply(choose_pivot129l4, [arr211.212, low213.214, high215.216, ])
    let (, pivot_index220.221: Var({val: Some(Int)})likely_sorted222.223: Var({val: Some(Bool)})) = _219let _224: Tuple([Int, Bool]) = Apply(partition65l3, [arr211.212, pivot_index220.221, low213.214, high215.216, ])
    let (, pivot225.226: Var({val: Some(Int)})partitioned227.228: Var({val: Some(Bool)})) = _224let _230: Unit = Apply(quick_sort210l5, [arr211.212, low213.214, pivot225.226, ])
    let _231: Int = Int(1)
    let _232: Int = Add(pivot225.226, _231)
    Apply(quick_sort210l5, [arr211.212, _232, high215.216, ])
  }
}
let rec sort233l6: Unit = (x234.235: Array(Int), len236.237: Int) {
  let _238: Int = Int(0)
  Apply(quick_sort210l5, [x234.235, _238, len236.237, ])
}
let rec input243l8: Var({val: Some(Unit)}) = (i244.245: Int, arr.242: Array(Int), len.240: Int) {
  let _246: Int = Int(1)
  let _247: Int = Sub(len.240, _246)
  if (i244.245 <= _247) then {
    let _248: Int = ExtApply(minimbt_read_int, [])
    let _250: Unit = Put arr.242[i244.245] = _248
    let _251: Int = Int(1)
    let _252: Int = Add(i244.245, _251)
    Apply(input243l8, [_252, arr.242, len.240, ])
  } else {
    Unit
  }
}
let rec main239l7: Var({val: Some(Unit)}) = () {
  let len.240: Int = ExtApply(minimbt_read_int, [])
  let _241: Int = Int(0)
  let arr.242: Array(Int) = ExtApply(minimbt_create_array, [len.240, _241, ])
  let _253: Int = Int(0)
  let _255: Var({val: Some(Unit)}) = Apply(input243l8, [_253, arr.242, len.240, ])
  let _257: Unit = Apply(sort233l6, [arr.242, len.240, ])
  let _258: Int = Int(0)
  Apply(output14l1, [arr.242, _258, len.240, ])
}
Apply(main239l7, [])