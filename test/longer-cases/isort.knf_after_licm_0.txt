let rec random1.142: Int = (state2.3: Int) {
  let _4: Int = Int(75)
  let _5: Int = Mul(state2.3, _4)
  let _6: Int = Int(74)
  Add(_5, _6)
}
let rec modulo7.143: Int = (x8.9: Int, y10.11: Int) {
  let q.12: Int = Div(x8.9, y10.11)
  let _13: Int = Mul(q.12, y10.11)
  Sub(x8.9, _13)
}
let rec aux19.145: Unit = (i20.99: Int, state22.100: Int, n.86: Int, arr.88: Array(Int)) {
  if (i20.99 == n.86) then {
    Unit
  } else {
    let new_state.101: Int = Apply(random1.142, [state22.100, ])
    let _102: Int = Int(65537)
    let res.103: Int = Apply(modulo7.143, [new_state.101, _102, ])
    let _104: Unit = Put arr.88[i20.99] = res.103
    let _105: Int = Int(1)
    let _106: Int = Add(i20.99, _105)
    Apply(aux19.145, [_106, res.103, n.86, arr.88, ])
  }
}
let rec insert38.146: Unit = (arr39.110: Array(Int), i41.111: Int) {
  let _112: Int = Int(0)
  if (i41.111 == _112) then {
    Unit
  } else {
    let _113: Int = Int(1)
    let _114: Int = Sub(i41.111, _113)
    let _115: Int = Get arr39.110[_114]
    let _116: Int = Get arr39.110[i41.111]
    if (_115 <= _116) then {
      Unit
    } else {
      let tmp.117: Int = Get arr39.110[i41.111]
      let _118: Int = Int(1)
      let _119: Int = Sub(i41.111, _118)
      let _120: Int = Get arr39.110[_119]
      let _121: Unit = Put arr39.110[i41.111] = _120
      let _122: Int = Int(1)
      let _123: Int = Sub(i41.111, _122)
      let _124: Unit = Put arr39.110[_123] = tmp.117
      let _125: Int = Int(1)
      let _126: Int = Sub(i41.111, _125)
      Apply(insert38.146, [arr39.110, _126, ])
    }
  }
}
let rec aux60.147: Unit = (i61.128: Int, n.86: Int, arr.88: Array(Int)) {
  if (i61.128 == n.86) then {
    Unit
  } else {
    let _129: Unit = Apply(insert38.146, [arr.88, i61.128, ])
    let _130: Int = Int(1)
    let _131: Int = Add(i61.128, _130)
    Apply(aux60.147, [_131, n.86, arr.88, ])
  }
}
let rec aux73.148: Unit = (i74.134: Int, n.86: Int, arr.88: Array(Int)) {
  if (i74.134 == n.86) then {
    Unit
  } else {
    let _135: Int = Get arr.88[i74.134]
    let _136: Unit = ExtApply(minimbt_print_int, [_135, ])
    let _137: Int = Int(32)
    let _138: Unit = ExtApply(minimbt_print_char, [_137, ])
    let _139: Int = Int(1)
    let _140: Int = Add(i74.134, _139)
    Apply(aux73.148, [_140, n.86, arr.88, ])
  }
}
let rec main85.144: Var({val: Some(Unit)}) = () {
  let n.86: Int = Int(100)
  let _87: Int = Int(0)
  let arr.88: Array(Int) = ExtApply(minimbt_create_array, [n.86, _87, ])
  let _107: Int = Int(0)
  let _108: Int = Int(12345)
  let _90: Unit = Apply(aux19.145, [_107, _108, n.86, arr.88, ])
  let _132: Int = Int(1)
  let _92: Unit = Apply(aux60.147, [_132, n.86, arr.88, ])
  let _141: Int = Int(0)
  Apply(aux73.148, [_141, n.86, arr.88, ])
}
Apply(main85.144, [])