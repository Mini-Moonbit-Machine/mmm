let rec random1l0: Int = (state2.3: Int) {
  let _4: Int = Int(75)
  let _5: Int = Mul(state2.3, _4)
  let _6: Int = Int(74)
  Add(_5, _6)
}
let rec modulo7l1: Int = (x8.9: Int, y10.11: Int) {
  let q.12: Int = Div(x8.9, y10.11)
  let _13: Int = Mul(q.12, y10.11)
  Sub(x8.9, _13)
}
let rec aux19.158l3: Unit = (i20.159: Int, state22.160: Int, n.86: Int, arr.88: Array(Int)) {
  if (i20.159 == n.86) then {
    Unit
  } else {
    let new_state.161: Int = Apply(random1l0, [state22.160, ])
    let _162: Int = Int(65537)
    let res.163: Int = Apply(modulo7l1, [new_state.161, _162, ])
    let _164: Unit = Put arr.88[i20.159] = res.163
    let _165: Int = Int(1)
    let _166: Int = Add(i20.159, _165)
    Apply(aux19.158l3, [_166, res.163, n.86, arr.88, ])
  }
}
let rec insert38.169l4: Unit = (arr39.170: Array(Int), i41.171: Int) {
  let _172: Int = Int(0)
  if (i41.171 == _172) then {
    Unit
  } else {
    let _173: Int = Int(1)
    let _174: Int = Sub(i41.171, _173)
    let _175: Int = Get arr39.170[_174]
    let _176: Int = Get arr39.170[i41.171]
    if (_175 <= _176) then {
      Unit
    } else {
      let tmp.177: Int = Get arr39.170[i41.171]
      let _178: Int = Int(1)
      let _179: Int = Sub(i41.171, _178)
      let _180: Int = Get arr39.170[_179]
      let _181: Unit = Put arr39.170[i41.171] = _180
      let _182: Int = Int(1)
      let _183: Int = Sub(i41.171, _182)
      let _184: Unit = Put arr39.170[_183] = tmp.177
      let _185: Int = Int(1)
      let _186: Int = Sub(i41.171, _185)
      Apply(insert38.169l4, [arr39.170, _186, ])
    }
  }
}
let rec aux60.187l5: Unit = (i61.188: Int, n.86: Int, arr.88: Array(Int)) {
  if (i61.188 == n.86) then {
    Unit
  } else {
    let _189: Unit = Apply(insert38.169l4, [arr.88, i61.188, ])
    let _190: Int = Int(1)
    let _191: Int = Add(i61.188, _190)
    Apply(aux60.187l5, [_191, n.86, arr.88, ])
  }
}
let rec aux73.193l6: Unit = (i74.194: Int, n.86: Int, arr.88: Array(Int)) {
  if (i74.194 == n.86) then {
    Unit
  } else {
    let _195: Int = Get arr.88[i74.194]
    let _196: Unit = ExtApply(minimbt_print_int, [_195, ])
    let _197: Int = Int(32)
    let _198: Unit = ExtApply(minimbt_print_char, [_197, ])
    let _199: Int = Int(1)
    let _200: Int = Add(i74.194, _199)
    Apply(aux73.193l6, [_200, n.86, arr.88, ])
  }
}
let rec main85l2: Var({val: Some(Unit)}) = () {
  let n.86: Int = Int(100)
  let _87: Int = Int(0)
  let arr.88: Array(Int) = ExtApply(minimbt_create_array, [n.86, _87, ])
  let _167: Int = Int(0)
  let _168: Int = Int(12345)
  let _90: Unit = Apply(aux19.158l3, [_167, _168, n.86, arr.88, ])
  let _192: Int = Int(1)
  let _92: Unit = Apply(aux60.187l5, [_192, n.86, arr.88, ])
  let _201: Int = Int(0)
  Apply(aux73.193l6, [_201, n.86, arr.88, ])
}
Apply(main85l2, [])