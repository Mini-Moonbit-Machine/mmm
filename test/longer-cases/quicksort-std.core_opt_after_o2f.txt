# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn output.394 #f1 : fn(array[int32], int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = sub($f2, 1)
    let %1: bool = le($f1, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = load int32 offset($f0, $f1 * @32)
    let %3: unit = ext_call minimbt_print_int(%2)
    let %4: unit = ext_call minimbt_print_endline()
    let %5: int32 = add($f1, 1)
    let %6: unit = call f1($f0, %5, $f2)
    jump b3(%6)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn aux.400 #f6 : fn(int32, array[int32], array[int32], int32, int32, array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = sub($f3, 2)
    let %1: bool = le($f0, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = load int32 offset($f2, $f0 * @32)
    let %3: int32 = sub($f4, 1)
    let %4: bool = le(%2, %3)
    br %4 b3() b4()
  }
  .bb #b2 () {
    jump b9(())
  }
  .bb #b3 () {
    let %5: int32 = load int32 field($f1, 0 * @32)
    let %6: bool = eq(%5, $f0)
    br %6 b5() b6()
  }
  .bb #b4 () {
    jump b8(())
  }
  .bb #b5 () {
    jump b7(())
  }
  .bb #b6 () {
    let %7: int32 = load int32 field($f1, 0 * @32)
    let %8: unit = call f0($f2, %7, $f0)
    let _ = store int32 field($f5, 0 * @32) <- 0
    jump b7(())
  }
  .bb #b7 (unit) {
    let %10: int32 = load int32 field($f1, 0 * @32)
    let %11: int32 = add(%10, 1)
    let _ = store int32 field($f1, 0 * @32) <- %11
    jump b8(())
  }
  .bb #b8 (unit) {
    let %13: int32 = add($f0, 1)
    let %14: unit = call f6(%13, $f1, $f2, $f3, $f4, $f5)
    jump b9(%14)
  }
  .bb #b9 (unit) {
    return $b9.0
  }
}
.fn swap.393 #f0 : fn(array[int32], int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 offset($f0, $f1 * @32)
    let %1: int32 = load int32 offset($f0, $f2 * @32)
    let _ = store int32 offset($f0, $f1 * @32) <- %1
    let _ = store int32 offset($f0, $f2 * @32) <- %0
    return ()
  }
}
.fn f.397 #f3 : fn(int32, array[int32], int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = sub($f3, 1)
    let %1: bool = le($f0, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: unit = call f2($f0, $f1, $f2)
    let %3: int32 = add($f0, 1)
    let %4: unit = call f3(%3, $f1, $f2, $f3)
    jump b3(%4)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn quick_sort.395 #f7 : fn(array[int32], int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = sub($f2, $f1)
    let %1: bool = le(%0, 16)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = add($f1, 1)
    let %3: unit = call f3(%2, $f0, $f1, $f2)
    jump b15(%3)
  }
  .bb #b2 () {
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = 0
    let %5: int32 = sub($f2, $f1)
    let %6: int32 = div(%5, 4)
    let %7: int32 = mul(%6, 2)
    let %8: int32 = add($f1, %7)
    let %9: bool = le(8, %5)
    br %9 b3() b4()
  }
  .bb #b3 () {
    let %10: int32 = div(%5, 4)
    let %11: int32 = mul(%10, 1)
    let %12: int32 = add($f1, %11)
    let %13: int32 = div(%5, 4)
    let %14: int32 = mul(%13, 3)
    let %15: int32 = add($f1, %14)
    let %16: int32 = sub(%5, 1)
    let %17: bool = le(50, %16)
    br %17 b5() b6()
  }
  .bb #b4 () {
    jump b8(())
  }
  .bb #b5 () {
    let %18: int32 = sub(%12, 1)
    let %19: int32 = add(%12, 1)
    let %20: unit = call f5(%18, %12, %19, $f0, f7.m0)
    let %21: int32 = sub(%8, 1)
    let %22: int32 = add(%8, 1)
    let %23: unit = call f5(%21, %8, %22, $f0, f7.m0)
    let %24: int32 = sub(%15, 1)
    let %25: int32 = add(%15, 1)
    let %26: unit = call f5(%24, %15, %25, $f0, f7.m0)
    jump b7(%26)
  }
  .bb #b6 () {
    jump b7(())
  }
  .bb #b7 (unit) {
    let %27: unit = call f5(%12, %8, %15, $f0, f7.m0)
    jump b8(%27)
  }
  .bb #b8 (unit) {
    let %28: int32 = load int32 field(f7.m0, 0 * @32)
    let %29: bool = eq(%28, 0)
    br %29 b9() b10()
  }
  .bb #b9 () {
    jump b11(true)
  }
  .bb #b10 () {
    jump b11(false)
  }
  .bb #b11 (bool) {
    let _ = alloc <m1: (int32, bool) heap(2)> <- [0] = %8, [1] = $b11.0
    let %31: int32 = load int32 field(f7.m1, 0 * @(@32, @(@32, @32)))
    let %32: bool = load bool field(f7.m1, 1 * @(@32, @(@32, @32)))
    let %33: int32 = sub($f2, 1)
    let %34: unit = call f0($f0, %31, %33)
    let %35: int32 = sub($f2, 1)
    let %36: int32 = load int32 offset($f0, %35 * @32)
    let _ = alloc <m2: array[int32] heap(1)> <- [..] = $f1
    let _ = alloc <m3: array[int32] heap(1)> <- [..] = 1
    let %39: unit = call f6($f1, f7.m2, $f0, $f2, %36, f7.m3)
    let %40: int32 = load int32 field(f7.m2, 0 * @32)
    let %41: int32 = sub($f2, 1)
    let %42: unit = call f0($f0, %40, %41)
    let %43: int32 = load int32 field(f7.m2, 0 * @32)
    let %44: int32 = load int32 field(f7.m3, 0 * @32)
    let %45: bool = eq(%44, 1)
    br %45 b12() b13()
  }
  .bb #b12 () {
    jump b14(true)
  }
  .bb #b13 () {
    jump b14(false)
  }
  .bb #b14 (bool) {
    let _ = alloc <m4: (int32, bool) heap(2)> <- [0] = %43, [1] = $b14.0
    let %47: int32 = load int32 field(f7.m4, 0 * @(@32, @(@32, @32)))
    let %48: bool = load bool field(f7.m4, 1 * @(@32, @(@32, @32)))
    let %49: unit = call f7($f0, $f1, %47)
    let %50: int32 = add(%47, 1)
    let %51: unit = call f7($f0, %50, $f2)
    jump b15(%51)
  }
  .bb #b15 (unit) {
    return $b15.0
  }
}
.fn main.401 #f9 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = ext_call minimbt_read_int()
    let _ = alloc <m0: array[int32] heap(%0)> <- [..] = 0
    let %2: unit = call f8(0, f9.m0, %0)
    let %3: unit = call f7(f9.m0, 0, %0)
    let %4: unit = call f1(f9.m0, 0, %0)
    return %4
  }
}
.fn sort_3.399 #f5 : fn(int32, int32, int32, array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f4($f0, $f1, $f3, $f4)
    let %1: unit = call f4($f1, $f2, $f3, $f4)
    let %2: unit = call f4($f0, $f1, $f3, $f4)
    return %2
  }
}
.fn g.396 #f2 : fn(int32, array[int32], int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add(1, $f2)
    let %1: bool = le(%0, $f0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = load int32 offset($f1, $f0 * @32)
    let %3: int32 = sub($f0, 1)
    let %4: int32 = load int32 offset($f1, %3 * @32)
    let %5: int32 = sub(%4, 1)
    let %6: bool = le(%2, %5)
    br %6 b3() b4()
  }
  .bb #b2 () {
    jump b6(())
  }
  .bb #b3 () {
    let %7: int32 = sub($f0, 1)
    let %8: unit = call f0($f1, $f0, %7)
    let %9: int32 = sub($f0, 1)
    let %10: unit = call f2(%9, $f1, $f2)
    jump b5(%10)
  }
  .bb #b4 () {
    jump b5(())
  }
  .bb #b5 (unit) {
    jump b6($b5.0)
  }
  .bb #b6 (unit) {
    return $b6.0
  }
}
.fn input.402 #f8 : fn(int32, array[int32], int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = sub($f2, 1)
    let %1: bool = le($f0, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = ext_call minimbt_read_int()
    let _ = store int32 offset($f1, $f0 * @32) <- %2
    let %4: int32 = add($f0, 1)
    let %5: unit = call f8(%4, $f1, $f2)
    jump b3(%5)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn sort_2.398 #f4 : fn(int32, int32, array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 offset($f2, $f1 * @32)
    let %1: int32 = load int32 offset($f2, $f0 * @32)
    let %2: int32 = sub(%1, 1)
    let %3: bool = le(%0, %2)
    br %3 b1() b2()
  }
  .bb #b1 () {
    let %4: unit = call f0($f2, $f0, $f1)
    let %5: int32 = load int32 field($f3, 0 * @32)
    let %6: int32 = add(%5, 1)
    let _ = store int32 field($f3, 0 * @32) <- %6
    jump b3(())
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn T$start #f20 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f9()
    return %0
  }
}
.thunk ::0 start

