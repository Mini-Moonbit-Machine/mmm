# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn partition.207 #f6 : fn(array[int32], int32, int32, int32) -> (int32, bool)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = sub($f3, 1)
    let %1: unit = call f0($f0, $f1, %0)
    let %2: int32 = sub($f3, 1)
    let %3: int32 = load int32 offset($f0, %2 * @32)
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = $f2
    let _ = alloc <m1: array[int32] heap(1)> <- [..] = 1
    let %6: unit = call f5($f2, f6.m0, $f0, $f3, %3, f6.m1)
    let %7: int32 = load int32 field(f6.m0, 0 * @32)
    let %8: int32 = sub($f3, 1)
    let %9: unit = call f0($f0, %7, %8)
    let %10: int32 = load int32 field(f6.m0, 0 * @32)
    let %11: int32 = load int32 field(f6.m1, 0 * @32)
    let %12: bool = eq(%11, 1)
    br %12 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m2: (int32, bool) heap(2)> <- [0] = %10, [1] = true
    jump b3(f6.m2)
  }
  .bb #b2 () {
    let _ = alloc <m3: (int32, bool) heap(2)> <- [0] = %10, [1] = false
    jump b3(f6.m3)
  }
  .bb #b3 ((int32, bool)) {
    return $b3.0
  }
}
.fn swap.202 #f0 : fn(array[int32], int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 offset($f0, $f1 * @32)
    let %1: int32 = load int32 offset($f0, $f2 * @32)
    let _ = store int32 offset($f0, $f1 * @32) <- %1
    let _ = store int32 offset($f0, $f2 * @32) <- %0
    return ()
  }
}
.fn g.205 #f2 : fn(int32, array[int32], int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add(1, $f2)
    let %1: bool = le(%0, $f0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = load int32 offset($f1, $f0 * @32)
    let %3: int32 = sub($f0, 1)
    let %4: int32 = load int32 offset($f1, %3 * @32)
    let %5: int32 = sub(%4, 1)
    let %6: bool = le(%2, %5)
    br %6 b3() b4()
  }
  .bb #b2 () {
    jump b6(())
  }
  .bb #b3 () {
    let %7: int32 = sub($f0, 1)
    let %8: unit = call f0($f1, $f0, %7)
    let %9: int32 = sub($f0, 1)
    let %10: unit = call f2(%9, $f1, $f2)
    jump b5(%10)
  }
  .bb #b4 () {
    jump b5(())
  }
  .bb #b5 (unit) {
    jump b6($b5.0)
  }
  .bb #b6 (unit) {
    return $b6.0
  }
}
.fn f.206 #f3 : fn(int32, array[int32], int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = sub($f3, 1)
    let %1: bool = le($f0, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: unit = call f2($f0, $f1, $f2)
    let %3: int32 = add($f0, 1)
    let %4: unit = call f3(%3, $f1, $f2, $f3)
    jump b3(%4)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn sort_3.211 #f8 : fn(int32, int32, int32, array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f7($f0, $f1, $f3, $f4)
    let %1: unit = call f7($f1, $f2, $f3, $f4)
    let %2: unit = call f7($f0, $f1, $f3, $f4)
    return %2
  }
}
.fn insertion_sort.204 #f4 : fn(array[int32], int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add($f1, 1)
    let %1: unit = call f3(%0, $f0, $f1, $f2)
    return %1
  }
}
.fn output.203 #f1 : fn(array[int32], int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = sub($f2, 1)
    let %1: bool = le($f1, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = load int32 offset($f0, $f1 * @32)
    let %3: unit = ext_call minimbt_print_int(%2)
    let %4: unit = ext_call minimbt_print_endline()
    let %5: int32 = add($f1, 1)
    let %6: unit = call f1($f0, %5, $f2)
    jump b3(%6)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn main.213 #f12 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = ext_call minimbt_read_int()
    let _ = alloc <m0: array[int32] heap(%0)> <- [..] = 0
    let %2: unit = call f11(0, f12.m0, %0)
    let %3: unit = call f10(f12.m0, 0, %0)
    let %4: unit = call f1(f12.m0, 0, %0)
    return %4
  }
}
.fn quick_sort.212 #f10 : fn(array[int32], int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = sub($f2, $f1)
    let %1: bool = le(%0, 16)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: unit = call f4($f0, $f1, $f2)
    jump b3(%2)
  }
  .bb #b2 () {
    let %3: (int32, bool) = call f9($f0, $f1, $f2)
    let %4: int32 = load int32 field(%3, 0 * @(@32, @(@32, @32)))
    let %5: bool = load bool field(%3, 1 * @(@32, @(@32, @32)))
    let %6: (int32, bool) = call f6($f0, %4, $f1, $f2)
    let %7: int32 = load int32 field(%6, 0 * @(@32, @(@32, @32)))
    let %8: bool = load bool field(%6, 1 * @(@32, @(@32, @32)))
    let %9: unit = call f10($f0, $f1, %7)
    let %10: int32 = add(%7, 1)
    let %11: unit = call f10($f0, %10, $f2)
    jump b3(%11)
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn input.214 #f11 : fn(int32, array[int32], int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = sub($f2, 1)
    let %1: bool = le($f0, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = ext_call minimbt_read_int()
    let _ = store int32 offset($f1, $f0 * @32) <- %2
    let %4: int32 = add($f0, 1)
    let %5: unit = call f11(%4, $f1, $f2)
    jump b3(%5)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn choose_pivot.209 #f9 : fn(array[int32], int32, int32) -> (int32, bool)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = 0
    let %1: int32 = sub($f2, $f1)
    let %2: int32 = div(%1, 4)
    let %3: int32 = mul(%2, 2)
    let %4: int32 = add($f1, %3)
    let %5: bool = le(8, %1)
    br %5 b1() b2()
  }
  .bb #b1 () {
    let %6: int32 = div(%1, 4)
    let %7: int32 = mul(%6, 1)
    let %8: int32 = add($f1, %7)
    let %9: int32 = div(%1, 4)
    let %10: int32 = mul(%9, 3)
    let %11: int32 = add($f1, %10)
    let %12: int32 = sub(%1, 1)
    let %13: bool = le(50, %12)
    br %13 b3() b4()
  }
  .bb #b2 () {
    let %33: int32 = load int32 field(f9.m0, 0 * @32)
    let %34: bool = eq(%33, 0)
    br %34 b12() b13()
  }
  .bb #b3 () {
    let %14: int32 = sub(%8, 1)
    let %15: int32 = add(%8, 1)
    let %16: unit = call f8(%14, %8, %15, $f0, f9.m0)
    let %17: int32 = sub(%4, 1)
    let %18: int32 = add(%4, 1)
    let %19: unit = call f8(%17, %4, %18, $f0, f9.m0)
    let %20: int32 = sub(%11, 1)
    let %21: int32 = add(%11, 1)
    let %22: unit = call f8(%20, %11, %21, $f0, f9.m0)
    let %23: unit = call f8(%8, %4, %11, $f0, f9.m0)
    let %24: int32 = load int32 field(f9.m0, 0 * @32)
    let %25: bool = eq(%24, 0)
    br %25 b5() b6()
  }
  .bb #b4 () {
    let %28: unit = call f8(%8, %4, %11, $f0, f9.m0)
    let %29: int32 = load int32 field(f9.m0, 0 * @32)
    let %30: bool = eq(%29, 0)
    br %30 b8() b9()
  }
  .bb #b5 () {
    let _ = alloc <m1: (int32, bool) heap(2)> <- [0] = %4, [1] = true
    jump b7(f9.m1)
  }
  .bb #b6 () {
    let _ = alloc <m2: (int32, bool) heap(2)> <- [0] = %4, [1] = false
    jump b7(f9.m2)
  }
  .bb #b7 ((int32, bool)) {
    jump b11($b7.0)
  }
  .bb #b8 () {
    let _ = alloc <m3: (int32, bool) heap(2)> <- [0] = %4, [1] = true
    jump b10(f9.m3)
  }
  .bb #b9 () {
    let _ = alloc <m4: (int32, bool) heap(2)> <- [0] = %4, [1] = false
    jump b10(f9.m4)
  }
  .bb #b10 ((int32, bool)) {
    jump b11($b10.0)
  }
  .bb #b11 ((int32, bool)) {
    jump b15($b11.0)
  }
  .bb #b12 () {
    let _ = alloc <m5: (int32, bool) heap(2)> <- [0] = %4, [1] = true
    jump b14(f9.m5)
  }
  .bb #b13 () {
    let _ = alloc <m6: (int32, bool) heap(2)> <- [0] = %4, [1] = false
    jump b14(f9.m6)
  }
  .bb #b14 ((int32, bool)) {
    jump b15($b14.0)
  }
  .bb #b15 ((int32, bool)) {
    return $b15.0
  }
}
.fn sort_2.210 #f7 : fn(int32, int32, array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 offset($f2, $f1 * @32)
    let %1: int32 = load int32 offset($f2, $f0 * @32)
    let %2: int32 = sub(%1, 1)
    let %3: bool = le(%0, %2)
    br %3 b1() b2()
  }
  .bb #b1 () {
    let %4: unit = call f0($f2, $f0, $f1)
    let %5: int32 = load int32 field($f3, 0 * @32)
    let %6: int32 = add(%5, 1)
    let _ = store int32 field($f3, 0 * @32) <- %6
    jump b3(())
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn T$start #f26 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f12()
    return %0
  }
}
.fn aux.208 #f5 : fn(int32, array[int32], array[int32], int32, int32, array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = sub($f3, 2)
    let %1: bool = le($f0, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = load int32 offset($f2, $f0 * @32)
    let %3: int32 = sub($f4, 1)
    let %4: bool = le(%2, %3)
    br %4 b3() b4()
  }
  .bb #b2 () {
    jump b9(())
  }
  .bb #b3 () {
    let %5: int32 = load int32 field($f1, 0 * @32)
    let %6: bool = eq(%5, $f0)
    br %6 b5() b6()
  }
  .bb #b4 () {
    let %20: int32 = add($f0, 1)
    let %21: unit = call f5(%20, $f1, $f2, $f3, $f4, $f5)
    jump b8(%21)
  }
  .bb #b5 () {
    let %7: int32 = load int32 field($f1, 0 * @32)
    let %8: int32 = add(%7, 1)
    let _ = store int32 field($f1, 0 * @32) <- %8
    let %10: int32 = add($f0, 1)
    let %11: unit = call f5(%10, $f1, $f2, $f3, $f4, $f5)
    jump b7(%11)
  }
  .bb #b6 () {
    let %12: int32 = load int32 field($f1, 0 * @32)
    let %13: unit = call f0($f2, %12, $f0)
    let _ = store int32 field($f5, 0 * @32) <- 0
    let %15: int32 = load int32 field($f1, 0 * @32)
    let %16: int32 = add(%15, 1)
    let _ = store int32 field($f1, 0 * @32) <- %16
    let %18: int32 = add($f0, 1)
    let %19: unit = call f5(%18, $f1, $f2, $f3, $f4, $f5)
    jump b7(%19)
  }
  .bb #b7 (unit) {
    jump b8($b7.0)
  }
  .bb #b8 (unit) {
    jump b9($b8.0)
  }
  .bb #b9 (unit) {
    return $b9.0
  }
}
.thunk ::0 start
