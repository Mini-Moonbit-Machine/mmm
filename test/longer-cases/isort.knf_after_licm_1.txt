let rec fill_buffer.144: Unit = (arr.12: Array(Int), n.13: Int) {
  let _23: Int = Int(0)
  let _24: Int = Int(12345)
  let join aux.117: Unit = (i.118: Int, state.119: Int) {
    if (i.118 == n.13) then {
      Unit
    } else {
      let _120: Int = Int(75)
      let _121: Int = Mul(state.119, _120)
      let _122: Int = Int(74)
      let new_state.123: Int = Add(_121, _122)
      let _124: Int = Int(65537)
      let q.125: Int = Div(new_state.123, _124)
      let _126: Int = Mul(q.125, _124)
      let res.127: Int = Sub(new_state.123, _126)
      let _128: Unit = Put arr.12[i.118] = res.127
      let _129: Int = Int(1)
      let _130: Int = Add(i.118, _129)
      Jump(aux.117, [_130, res.127, ])
    }
  }
  Jump(aux.117, [_23, _24, ])
}
let rec insert.146: Unit = (arr.29: Array(Int), i.30: Int) {
  let join insert.79: Unit = (arr.80: Array(Int), i.81: Int) {
    let _82: Int = Int(0)
    if (i.81 == _82) then {
      Unit
    } else {
      let _83: Int = Int(1)
      let _84: Int = Sub(i.81, _83)
      let _85: Int = Get arr.80[_84]
      let _86: Int = Get arr.80[i.81]
      if (_85 <= _86) then {
        Unit
      } else {
        let tmp.87: Int = Get arr.80[i.81]
        let _88: Int = Int(1)
        let _89: Int = Sub(i.81, _88)
        let _90: Int = Get arr.80[_89]
        let _91: Unit = Put arr.80[i.81] = _90
        let _92: Int = Int(1)
        let _93: Int = Sub(i.81, _92)
        let _94: Unit = Put arr.80[_93] = tmp.87
        let _95: Int = Int(1)
        let _96: Int = Sub(i.81, _95)
        Jump(insert.79, [arr.80, _96, ])
      }
    }
  }
  Jump(insert.79, [arr.29, i.30, ])
}
let rec isort.145: Unit = (arr.26: Array(Int), n.27: Int) {
  let _51: Int = Int(1)
  let join aux.131: Unit = (i.132: Int) {
    if (i.132 == n.27) then {
      Unit
    } else {
      let _133: Unit = Apply(insert.146, [arr.26, i.132, ])
      let _134: Int = Int(1)
      let _135: Int = Add(i.132, _134)
      Jump(aux.131, [_135, ])
    }
  }
  Jump(aux.131, [_51, ])
}
let rec print_array.147: Unit = (arr.53: Array(Int), n.54: Int) {
  let _63: Int = Int(0)
  let join aux.136: Unit = (i.137: Int) {
    if (i.137 == n.54) then {
      Unit
    } else {
      let _138: Int = Get arr.53[i.137]
      let _139: Unit = ExtApply(minimbt_print_int, [_138, ])
      let _140: Int = Int(32)
      let _141: Unit = ExtApply(minimbt_print_char, [_140, ])
      let _142: Int = Int(1)
      let _143: Int = Add(i.137, _142)
      Jump(aux.136, [_143, ])
    }
  }
  Jump(aux.136, [_63, ])
}
let rec main.148: Var({val: Some(Unit)}) = () {
  let n.65: Int = Int(100)
  let _66: Int = Int(0)
  let arr.67: Array(Int) = ExtApply(minimbt_create_array, [n.65, _66, ])
  let _68: Unit = Apply(fill_buffer.144, [arr.67, n.65, ])
  let _69: Unit = Apply(isort.145, [arr.67, n.65, ])
  Apply(print_array.147, [arr.67, n.65, ])
}
Apply(main.148, [])