let rec random.70: Int = (state.2: Int) {
  let _3: Int = Int(75)
  let _4: Int = Mul(state.2, _3)
  let _5: Int = Int(74)
  Add(_4, _5)
}
let rec modulo.71: Int = (x.7: Int, y.8: Int) {
  let q.9: Int = Div(x.7, y.8)
  let _10: Int = Mul(q.9, y.8)
  Sub(x.7, _10)
}
let rec aux.73: Unit = (i.15: Int, state.16: Int, n.13: Int, arr.12: Array(Int)) {
  if (i.15 == n.13) then {
    Unit
  } else {
    let new_state.17: Int = Apply(random.70, [state.16, ])
    let _18: Int = Int(65537)
    let res.19: Int = Apply(modulo.71, [new_state.17, _18, ])
    let _20: Unit = Put arr.12[i.15] = res.19
    let _21: Int = Int(1)
    let _22: Int = Add(i.15, _21)
    Apply(aux.73, [_22, res.19, n.13, arr.12, ])
  }
}
let rec fill_buffer.72: Unit = (arr.12: Array(Int), n.13: Int) {
  let _23: Int = Int(0)
  let _24: Int = Int(12345)
  Apply(aux.73, [_23, _24, n.13, arr.12, ])
}
let rec insert.75: Unit = (arr.29: Array(Int), i.30: Int) {
  let _31: Int = Int(0)
  if (i.30 == _31) then {
    Unit
  } else {
    let _32: Int = Int(1)
    let _33: Int = Sub(i.30, _32)
    let _34: Int = Get arr.29[_33]
    let _35: Int = Get arr.29[i.30]
    if (_34 <= _35) then {
      Unit
    } else {
      let tmp.36: Int = Get arr.29[i.30]
      let _37: Int = Int(1)
      let _38: Int = Sub(i.30, _37)
      let _39: Int = Get arr.29[_38]
      let _40: Unit = Put arr.29[i.30] = _39
      let _41: Int = Int(1)
      let _42: Int = Sub(i.30, _41)
      let _43: Unit = Put arr.29[_42] = tmp.36
      let _44: Int = Int(1)
      let _45: Int = Sub(i.30, _44)
      Apply(insert.75, [arr.29, _45, ])
    }
  }
}
let rec aux.76: Unit = (i.47: Int, n.27: Int, arr.26: Array(Int)) {
  if (i.47 == n.27) then {
    Unit
  } else {
    let _48: Unit = Apply(insert.75, [arr.26, i.47, ])
    let _49: Int = Int(1)
    let _50: Int = Add(i.47, _49)
    Apply(aux.76, [_50, n.27, arr.26, ])
  }
}
let rec isort.74: Unit = (arr.26: Array(Int), n.27: Int) {
  let _51: Int = Int(1)
  Apply(aux.76, [_51, n.27, arr.26, ])
}
let rec aux.78: Unit = (i.56: Int, n.54: Int, arr.53: Array(Int)) {
  if (i.56 == n.54) then {
    Unit
  } else {
    let _57: Int = Get arr.53[i.56]
    let _58: Unit = ExtApply(minimbt_print_int, [_57, ])
    let _59: Int = Int(32)
    let _60: Unit = ExtApply(minimbt_print_char, [_59, ])
    let _61: Int = Int(1)
    let _62: Int = Add(i.56, _61)
    Apply(aux.78, [_62, n.54, arr.53, ])
  }
}
let rec print_array.77: Unit = (arr.53: Array(Int), n.54: Int) {
  let _63: Int = Int(0)
  Apply(aux.78, [_63, n.54, arr.53, ])
}
let rec main.79: Var({val: Some(Unit)}) = () {
  let n.65: Int = Int(100)
  let _66: Int = Int(0)
  let arr.67: Array(Int) = ExtApply(minimbt_create_array, [n.65, _66, ])
  let _68: Unit = Apply(fill_buffer.72, [arr.67, n.65, ])
  let _69: Unit = Apply(isort.74, [arr.67, n.65, ])
  Apply(print_array.77, [arr.67, n.65, ])
}
Apply(main.79, [])