let rec swap1: Unit = (arr2.3: Array(Int), i4.5: Int, j6.7: Int) {
  let tmp.8: Int = Get arr2.3[i4.5]
  let _9: Int = Get arr2.3[j6.7]
  let _11: Unit = Put arr2.3[i4.5] = _9
  let _13: Unit = Put arr2.3[j6.7] = tmp.8
  Unit
}
let rec partition14: Int = (arr15.16: Array(Int), low17.18: Int, high19.20: Int) {
  let pivot.21: Int = Get arr15.16[high19.20]
  let _22: Int = Int(1)
  let _23: Int = Int(1)
  let _24: Int = Sub(low17.18, _23)
  let i.25: Array(Int) = ExtApply(minimbt_create_array, [_22, _24, ])
  let rec l26: Var({val: Some(Unit)}) = (j27.28: Var({val: Some(Int)})) {
    let _29: Int = Int(1)
    let _30: Int = Sub(high19.20, _29)
    if (j27.28 <= _30) then {
      let _31: Int = Get arr15.16[j27.28]
      let _42: Unit = if (_31 <= pivot.21) then {
        let _32: Int = Int(0)
        let _33: Int = Int(0)
        let _34: Int = Get i.25[_33]
        let _35: Int = Int(1)
        let _36: Int = Add(_34, _35)
        let _38: Unit = Put i.25[_32] = _36
        let _39: Int = Int(0)
        let _40: Int = Get i.25[_39]
        Apply(swap1, [arr15.16, _40, j27.28, ])
      } else {
        Unit
      }
      let _43: Int = Int(1)
      let _44: Int = Add(j27.28, _43)
      Apply(l26, [_44, ])
    } else {
      Unit
    }
  }
  let _46: Var({val: Some(Unit)}) = Apply(l26, [low17.18, ])
  let _47: Int = Int(0)
  let _48: Int = Int(0)
  let _49: Int = Get i.25[_48]
  let _50: Int = Int(1)
  let _51: Int = Add(_49, _50)
  let _53: Unit = Put i.25[_47] = _51
  let _54: Int = Int(0)
  let _55: Int = Get i.25[_54]
  let _57: Unit = Apply(swap1, [arr15.16, _55, high19.20, ])
  let _58: Int = Int(0)
  Get i.25[_58]
}
let rec quicksort59: Unit = (arr60.61: Array(Int), low62.63: Int, high64.65: Int) {
  let _66: Int = Int(1)
  let _67: Int = Sub(high64.65, _66)
  if (low62.63 <= _67) then {
    let pi.68: Int = Apply(partition14, [arr60.61, low62.63, high64.65, ])
    let _69: Int = Int(1)
    let _70: Int = Sub(pi.68, _69)
    let _72: Unit = Apply(quicksort59, [arr60.61, low62.63, _70, ])
    let _73: Int = Int(1)
    let _74: Int = Add(pi.68, _73)
    Apply(quicksort59, [arr60.61, _74, high64.65, ])
  } else {
    Unit
  }
}
let rec main75: Var({val: Some(Unit)}) = () {
  let len.76: Int = ExtApply(minimbt_read_int, [])
  let _77: Int = Int(0)
  let arr.78: Array(Int) = ExtApply(minimbt_create_array, [len.76, _77, ])
  let rec input79: Var({val: Some(Unit)}) = (i80.81: Int) {
    let _82: Int = Int(1)
    let _83: Int = Sub(len.76, _82)
    if (i80.81 <= _83) then {
      let _84: Int = ExtApply(minimbt_read_int, [])
      let _86: Unit = Put arr.78[i80.81] = _84
      let _87: Int = Int(1)
      let _88: Int = Add(i80.81, _87)
      Apply(input79, [_88, ])
    } else {
      Unit
    }
  }
  let _89: Int = Int(0)
  let _91: Var({val: Some(Unit)}) = Apply(input79, [_89, ])
  let _92: Int = Int(0)
  let _93: Int = Int(1)
  let _94: Int = Sub(len.76, _93)
  let _96: Unit = Apply(quicksort59, [arr.78, _92, _94, ])
  let rec output97: Var({val: Some(Unit)}) = (i98.99: Int) {
    let _100: Int = Int(1)
    let _101: Int = Sub(len.76, _100)
    if (i98.99 <= _101) then {
      let _102: Int = Get arr.78[i98.99]
      let _104: Unit = ExtApply(minimbt_print_int, [_102, ])
      let _106: Unit = ExtApply(minimbt_print_endline, [])
      let _107: Int = Int(1)
      let _108: Int = Add(i98.99, _107)
      Apply(output97, [_108, ])
    } else {
      Unit
    }
  }
  let _109: Int = Int(0)
  Apply(output97, [_109, ])
}
Apply(main75, [])
