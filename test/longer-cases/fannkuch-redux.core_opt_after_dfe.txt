# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn move_perm1_forward.4503 #f5 : fn(int32, array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 field($f1, 0 * @32)
    let %1: int32 = sub(%0, 1)
    let %2: bool = le($f0, %1)
    br %2 b1() b2()
  }
  .bb #b1 () {
    let %3: int32 = add($f0, 1)
    let %4: int32 = load int32 offset($f2, %3 * @32)
    let _ = store int32 offset($f2, $f0 * @32) <- %4
    let %6: int32 = add($f0, 1)
    let %7: unit = call f5(%6, $f1, $f2)
    jump b3(())
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn move_perm1_forward.4505 #f7 : fn(int32, array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 field($f1, 0 * @32)
    let %1: int32 = sub(%0, 1)
    let %2: bool = le($f0, %1)
    br %2 b1() b2()
  }
  .bb #b1 () {
    let %3: int32 = add($f0, 1)
    let %4: int32 = load int32 offset($f2, %3 * @32)
    let _ = store int32 offset($f2, $f0 * @32) <- %4
    let %6: int32 = add($f0, 1)
    let %7: unit = call f7(%6, $f1, $f2)
    jump b3(())
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn init_arr.4497 #f0 : fn(int32, int32, array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1($f0)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
  }
  .bb #b2 (int32) {
    let %0: int32 = sub($f1, 1)
    let %1: bool = le($b2.0, %0)
    br %1 b3() b4()
  }
  .bb #b3 () {
    let _ = store int32 offset($f2, $b2.0 * @32) <- $b2.0
    let %3: int32 = add($b2.0, 1)
    jump b2(%3)
  }
  .bb #b4 () {
    jump b5(())
  }
  .bb #b5 (any) {
    return $b5.0
  }
}
.fn go_loop.4504 #f8 : fn(int32, array[int32], array[int32], array[bool], array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1()
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
    .block #b6
    .block #b7
    .block #b8
    .block #b9
    .block #b10
    .block #b11
  }
  .bb #b2 () {
    let %0: bool = load bool field($f3, 0 * @32)
    let %1: bool = eq(%0, true)
    br %1 b3() b4()
  }
  .bb #b3 () {
    let %2: int32 = load int32 field($f1, 0 * @32)
    let %3: bool = eq(%2, $f0)
    br %3 b5() b6()
  }
  .bb #b4 () {
    jump b11(())
  }
  .bb #b5 () {
    let _ = store bool field($f3, 0 * @32) <- false
    let _ = store int32 field($f1, 0 * @32) <- 0
    jump b2()
  }
  .bb #b6 () {
    let %6: int32 = load int32 field($f4, 0 * @32)
    let _ = store int32 field($f2, 0 * @32) <- %6
    let %8: unit = call f7(0, $f1, $f4)
    let %9: int32 = load int32 field($f1, 0 * @32)
    let %10: int32 = load int32 field($f2, 0 * @32)
    let _ = store int32 offset($f4, %9 * @32) <- %10
    let %12: int32 = load int32 field($f1, 0 * @32)
    let %13: int32 = load int32 field($f1, 0 * @32)
    let %14: int32 = load int32 offset($f5, %13 * @32)
    let %15: int32 = sub(%14, 1)
    let _ = store int32 offset($f5, %12 * @32) <- %15
    let %17: int32 = load int32 field($f1, 0 * @32)
    let %18: int32 = load int32 offset($f5, %17 * @32)
    let %19: bool = le(1, %18)
    br %19 b7() b8()
  }
  .bb #b7 () {
    let _ = store bool field($f3, 0 * @32) <- false
    jump b2()
  }
  .bb #b8 () {
    let %21: int32 = load int32 field($f1, 0 * @32)
    let %22: int32 = add(%21, 1)
    let _ = store int32 field($f1, 0 * @32) <- %22
    jump b2()
  }
  .bb #b9 (any) {
    jump b10($b9.0)
  }
  .bb #b10 (any) {
    jump b11($b10.0)
  }
  .bb #b11 (any) {
    return $b11.0
  }
}
.fn main.4496 #f9 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap(9)> <- [..] = 0
    let %1: unit = call f0(0, 9, f9.m0)
    let _ = alloc <m1: array[int32] heap(9)> <- [..] = 0
    let _ = alloc <m2: array[int32] heap(9)> <- [..] = 0
    let _ = alloc <m3: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m4: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m5: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m6: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m7: array[int32] heap(1)> <- [..] = 9
    jump b1(f9.m7)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
    .block #b6
    .block #b7
    .block #b8
  }
  .bb #b2 (array[int32]) {
    let %9: int32 = load int32 field($b2.0, 0 * @32)
    let %10: bool = le(1, %9)
    br %10 b3() b4()
  }
  .bb #b3 () {
    let %11: unit = call f1(0, 9, f9.m0, f9.m1)
    let %12: unit = call f2($b2.0, f9.m2)
    let _ = store int32 field(f9.m3, 0 * @32) <- 0
    let %14: int32 = load int32 field(f9.m1, 0 * @32)
    let _ = alloc <m8: array[int32] heap(1)> <- [..] = %14
    let %16: unit = call f4(f9.m8, f9.m1, f9.m3)
    let %17: int32 = load int32 field(f9.m4, 0 * @32)
    let %18: int32 = load int32 field(f9.m3, 0 * @32)
    let %19: bool = le(%17, %18)
    br %19 b5() b6()
  }
  .bb #b4 () {
    let %58: int32 = load int32 field(f9.m4, 0 * @32)
    let %59: int32 = load int32 field(f9.m5, 0 * @32)
    let _ = alloc <m13: (int32, int32) heap(2)> <- [0] = %58, [1] = %59
    let %61: int32 = load int32 field(f9.m13, 0 * @(@32, @(@32, @32)))
    let %62: int32 = load int32 field(f9.m13, 1 * @(@32, @(@32, @32)))
    let %63: unit = ext_call minimbt_print_int(%62)
    let %64: unit = ext_call minimbt_print_int(%61)
    jump b8(%64)
  }
  .bb #b5 () {
    let %20: int32 = load int32 field(f9.m3, 0 * @32)
    let _ = store int32 field(f9.m4, 0 * @32) <- %20
    let %22: int32 = load int32 field(f9.m5, 0 * @32)
    let %23: int32 = load int32 field(f9.m3, 0 * @32)
    let %24: int32 = load int32 field(f9.m6, 0 * @32)
    let %25: int32 = load int32 field(f9.m6, 0 * @32)
    let %26: int32 = div(%25, 2)
    let %27: int32 = mul(%26, 2)
    let %28: int32 = sub(%24, %27)
    let %29: int32 = mul(%28, 2)
    let %30: int32 = sub(1, %29)
    let %31: int32 = mul(%23, %30)
    let %32: int32 = add(%22, %31)
    let _ = store int32 field(f9.m5, 0 * @32) <- %32
    let _ = alloc <m9: array[int32] heap(1)> <- [..] = true
    let _ = alloc <m10: array[int32] heap(1)> <- [..] = 0
    let %36: unit = call f6(9, $b2.0, f9.m10, f9.m9, f9.m0, f9.m2)
    let %37: int32 = load int32 field(f9.m6, 0 * @32)
    let %38: int32 = add(%37, 1)
    let _ = store int32 field(f9.m6, 0 * @32) <- %38
    jump b2($b2.0)
  }
  .bb #b6 () {
    let %40: int32 = load int32 field(f9.m5, 0 * @32)
    let %41: int32 = load int32 field(f9.m3, 0 * @32)
    let %42: int32 = load int32 field(f9.m6, 0 * @32)
    let %43: int32 = load int32 field(f9.m6, 0 * @32)
    let %44: int32 = div(%43, 2)
    let %45: int32 = mul(%44, 2)
    let %46: int32 = sub(%42, %45)
    let %47: int32 = mul(%46, 2)
    let %48: int32 = sub(1, %47)
    let %49: int32 = mul(%41, %48)
    let %50: int32 = add(%40, %49)
    let _ = store int32 field(f9.m5, 0 * @32) <- %50
    let _ = alloc <m11: array[int32] heap(1)> <- [..] = true
    let _ = alloc <m12: array[int32] heap(1)> <- [..] = 0
    let %54: unit = call f8(9, $b2.0, f9.m12, f9.m11, f9.m0, f9.m2)
    let %55: int32 = load int32 field(f9.m6, 0 * @32)
    let %56: int32 = add(%55, 1)
    let _ = store int32 field(f9.m6, 0 * @32) <- %56
    jump b2($b2.0)
  }
  .bb #b7 (any) {
    jump b8($b7.0)
  }
  .bb #b8 (any) {
    return $b8.0
  }
}
.fn copy_perm.4498 #f1 : fn(int32, int32, array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1($f0)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
  }
  .bb #b2 (int32) {
    let %0: int32 = sub($f1, 1)
    let %1: bool = le($b2.0, %0)
    br %1 b3() b4()
  }
  .bb #b3 () {
    let %2: int32 = load int32 offset($f2, $b2.0 * @32)
    let _ = store int32 offset($f3, $b2.0 * @32) <- %2
    let %4: int32 = add($b2.0, 1)
    jump b2(%4)
  }
  .bb #b4 () {
    jump b5(())
  }
  .bb #b5 (any) {
    return $b5.0
  }
}
.fn init_count.4499 #f2 : fn(array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 field($f0, 0 * @32)
    let %1: bool = eq(%0, 1)
    br %1 b1() b2()
  }
  .bb #b1 () {
    jump b3(())
  }
  .bb #b2 () {
    let %2: int32 = load int32 field($f0, 0 * @32)
    let %3: int32 = sub(%2, 1)
    let %4: int32 = load int32 field($f0, 0 * @32)
    let _ = store int32 offset($f1, %3 * @32) <- %4
    let %6: int32 = load int32 field($f0, 0 * @32)
    let %7: int32 = sub(%6, 1)
    let _ = store int32 field($f0, 0 * @32) <- %7
    let %9: unit = call f2($f0, $f1)
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn go_loop.4502 #f6 : fn(int32, array[int32], array[int32], array[bool], array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1()
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
    .block #b6
    .block #b7
    .block #b8
    .block #b9
    .block #b10
    .block #b11
  }
  .bb #b2 () {
    let %0: bool = load bool field($f3, 0 * @32)
    let %1: bool = eq(%0, true)
    br %1 b3() b4()
  }
  .bb #b3 () {
    let %2: int32 = load int32 field($f1, 0 * @32)
    let %3: bool = eq(%2, $f0)
    br %3 b5() b6()
  }
  .bb #b4 () {
    jump b11(())
  }
  .bb #b5 () {
    let _ = store bool field($f3, 0 * @32) <- false
    let _ = store int32 field($f1, 0 * @32) <- 0
    jump b2()
  }
  .bb #b6 () {
    let %6: int32 = load int32 field($f4, 0 * @32)
    let _ = store int32 field($f2, 0 * @32) <- %6
    let %8: unit = call f5(0, $f1, $f4)
    let %9: int32 = load int32 field($f1, 0 * @32)
    let %10: int32 = load int32 field($f2, 0 * @32)
    let _ = store int32 offset($f4, %9 * @32) <- %10
    let %12: int32 = load int32 field($f1, 0 * @32)
    let %13: int32 = load int32 field($f1, 0 * @32)
    let %14: int32 = load int32 offset($f5, %13 * @32)
    let %15: int32 = sub(%14, 1)
    let _ = store int32 offset($f5, %12 * @32) <- %15
    let %17: int32 = load int32 field($f1, 0 * @32)
    let %18: int32 = load int32 offset($f5, %17 * @32)
    let %19: bool = le(1, %18)
    br %19 b7() b8()
  }
  .bb #b7 () {
    let _ = store bool field($f3, 0 * @32) <- false
    jump b2()
  }
  .bb #b8 () {
    let %21: int32 = load int32 field($f1, 0 * @32)
    let %22: int32 = add(%21, 1)
    let _ = store int32 field($f1, 0 * @32) <- %22
    jump b2()
  }
  .bb #b9 (any) {
    jump b10($b9.0)
  }
  .bb #b10 (any) {
    jump b11($b10.0)
  }
  .bb #b11 (any) {
    return $b11.0
  }
}
.fn T$start #f20 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f9()
    return %0
  }
}
.fn do_flip.4500 #f4 : fn(array[int32], array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1($f0)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
  }
  .bb #b2 (array[int32]) {
    let %0: int32 = load int32 field($b2.0, 0 * @32)
    let %1: bool = eq(%0, 0)
    br %1 b3() b4()
  }
  .bb #b3 () {
    jump b5(())
  }
  .bb #b4 () {
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = 0
    jump b9()
  }
  .bb #b5 (unit) {
    return $b5.0
  }
  .bb #b6 (unit) {
    let %4: int32 = load int32 field($f1, 0 * @32)
    let _ = store int32 field($b2.0, 0 * @32) <- %4
    let %6: int32 = load int32 field($f2, 0 * @32)
    let %7: int32 = add(%6, 1)
    let _ = store int32 field($f2, 0 * @32) <- %7
    jump b2($b2.0)
  }
  .bb #b9 () {
    jump b10(0)
  }
  .loop #b10 pre #Some(b9) header #b11 {
    .block #b12
    .block #b13
    .block #b14
  }
  .bb #b11 (int32) {
    let %9: int32 = load int32 field($b2.0, 0 * @32)
    let %10: int32 = div(%9, 2)
    let %11: bool = le($b11.0, %10)
    br %11 b12() b13()
  }
  .bb #b12 () {
    let %12: int32 = load int32 offset($f1, $b11.0 * @32)
    let _ = store int32 field(f4.m0, 0 * @32) <- %12
    let %14: int32 = load int32 field($b2.0, 0 * @32)
    let %15: int32 = sub(%14, $b11.0)
    let %16: int32 = load int32 offset($f1, %15 * @32)
    let _ = store int32 offset($f1, $b11.0 * @32) <- %16
    let %18: int32 = load int32 field($b2.0, 0 * @32)
    let %19: int32 = sub(%18, $b11.0)
    let %20: int32 = load int32 field(f4.m0, 0 * @32)
    let _ = store int32 offset($f1, %19 * @32) <- %20
    let %22: int32 = add($b11.0, 1)
    jump b11(%22)
  }
  .bb #b13 () {
    jump b14(())
  }
  .bb #b14 (any) {
    jump b6($b14.0)
  }
}
.thunk ::0 start
