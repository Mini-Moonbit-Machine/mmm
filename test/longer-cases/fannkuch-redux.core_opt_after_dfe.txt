# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn fannkuch1l0_8 #f8 : fn(int32) -> (int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b13($f0)
  }
  .bb #b1 (array[int32]) {
    let _ = alloc <m0: array[int32] heap($f0)> <- [..] = 0
    let _ = alloc <m1: array[int32] heap($f0)> <- [..] = 0
    let _ = alloc <m2: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m3: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m4: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m5: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m6: array[int32] heap(1)> <- [..] = $f0
    let _ = alloc <m7: closure(array[int32]) -> unit heap(9)> <- [0] = f19, [1] = $f0, [2] = f8.m0, [3] = $b1.0, [4] = f8.m1, [5] = f8.m2, [6] = f8.m3, [7] = f8.m4, [8] = f8.m5
    let %9: unit = apply f8.m7(f8.m6)
    let %10: int32 = load int32 field(f8.m3, 0 * @32)
    let %11: int32 = load int32 field(f8.m4, 0 * @32)
    let _ = alloc <m8: (int32, int32) heap(2)> <- [0] = %10, [1] = %11
    return f8.m8
  }
  .bb #b13 (int32) {
    let _ = alloc <m13: array[int32] heap($f0)> <- [..] = 0
    let %14: unit = call f0(0, f8.m13, $f0)
    jump b1(f8.m13)
  }
}
.fn main262l1_9 #f9 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: (int32, int32) = call f8(9)
    let %1: int32 = load int32 field(%0, 0 * @(@32, @(@32, @32)))
    let %2: int32 = load int32 field(%0, 1 * @(@32, @(@32, @32)))
    let %3: unit = ext_call minimbt_print_int(%2)
    let %4: unit = ext_call minimbt_print_int(%1)
    return %4
  }
}
.fn init_count59l3_3 #f3 : fn(array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 field($f0, 0 * @32)
    let %1: bool = eq(%0, 1)
    br %1 b1() b2()
  }
  .bb #b1 () {
    jump b3(())
  }
  .bb #b2 () {
    let %2: int32 = load int32 field($f0, 0 * @32)
    let %3: int32 = sub(%2, 1)
    let %4: int32 = load int32 field($f0, 0 * @32)
    let _ = store int32 offset($f1, %3 * @32) <- %4
    let %6: int32 = load int32 field($f0, 0 * @32)
    let %7: int32 = sub(%6, 1)
    let _ = store int32 field($f0, 0 * @32) <- %7
    let %9: unit = call f3($f0, $f1)
    jump b3(%9)
  }
  .bb #b3 (unit) {
    return ()
  }
}
.fn compute40_19 #f19 : closure(array[int32]) -> unit
.freevars (int32, array[int32], array[int32], array[int32], array[int32], array[int32], array[int32], array[int32])
.entry b8 {
  .bb #b0 (array[int32]) {
    let %0: int32 = load int32 field($b0.0, 0 * @32)
    let %1: bool = le(1, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    jump b45(0, ^1, ^2, ^3)
  }
  .bb #b2 () {
    jump b6(())
  }
  .bb #b3 () {
    let %11: int32 = load int32 field(^5, 0 * @32)
    let _ = store int32 field(^6, 0 * @32) <- %11
    jump b5(())
  }
  .bb #b4 () {
    jump b5(())
  }
  .bb #b5 (unit) {
    let %13: int32 = load int32 field(^7, 0 * @32)
    let %14: int32 = load int32 field(^5, 0 * @32)
    let %15: int32 = load int32 field(^8, 0 * @32)
    let %16: int32 = load int32 field(^8, 0 * @32)
    let %17: int32 = div(%16, 2)
    let %18: int32 = mul(%17, 2)
    let %19: int32 = sub(%15, %18)
    let %20: int32 = mul(%19, 2)
    let %21: int32 = sub(1, %20)
    let %22: int32 = mul(%14, %21)
    let %23: int32 = add(%13, %22)
    let _ = store int32 field(^7, 0 * @32) <- %23
    let _ = alloc <m1: array[int32] heap(1)> <- [..] = true
    let _ = alloc <m2: array[int32] heap(1)> <- [..] = 0
    jump b57(f19.m2, f19.m1, ^1, $b0.0, ^4, ^3)
  }
  .bb #b6 (unit) {
    return $b6.0
  }
  .loop #b7 header #b0 {
    .block #b6
    .block #b4
    .block #b1
    .block #b5
    .block #b2
    .block #b3
  }
  .bb #b8 () {
    jump b7($f0)
  }
  .bb #b9 (unit) {
    let %3: unit = call f3($b0.0, ^4)
    let _ = store int32 field(^5, 0 * @32) <- 0
    let %5: int32 = load int32 field(^2, 0 * @32)
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = %5
    jump b36(f19.m0, ^2, ^5)
  }
  .bb #b10 (unit) {
    let %8: int32 = load int32 field(^6, 0 * @32)
    let %9: int32 = load int32 field(^5, 0 * @32)
    let %10: bool = le(%8, %9)
    br %10 b3() b4()
  }
  .bb #b11 (unit) {
    let %28: int32 = load int32 field(^8, 0 * @32)
    let %29: int32 = add(%28, 1)
    let _ = store int32 field(^8, 0 * @32) <- %29
    jump b0($b0.0)
  }
  .bb #b31 (array[int32], array[int32], array[int32]) {
    let %31: int32 = load int32 field($b31.0, 0 * @32)
    let %32: bool = eq(%31, 0)
    br %32 b32() b33()
  }
  .bb #b32 () {
    jump b34(())
  }
  .bb #b33 () {
    let _ = alloc <m31: array[int32] heap(1)> <- [..] = 0
    let %34: unit = call f4(0, f19.m31, $b31.0, $b31.1)
    jump b37(%34)
  }
  .bb #b34 (unit) {
    jump b10($b34.0)
  }
  .loop #b35 header #b31 {
    .block #b32
    .block #b33
    .block #b34
  }
  .bb #b36 (array[int32], array[int32], array[int32]) {
    jump b35(f19.m0, ^2, ^5)
  }
  .bb #b37 (unit) {
    let %35: int32 = load int32 field($b31.1, 0 * @32)
    let _ = store int32 field($b31.0, 0 * @32) <- %35
    let %37: int32 = load int32 field($b31.2, 0 * @32)
    let %38: int32 = add(%37, 1)
    let _ = store int32 field($b31.2, 0 * @32) <- %38
    jump b31($b31.0, $b31.1, $b31.2)
  }
  .bb #b40 (int32, int32, array[int32], array[int32]) {
    let %40: int32 = sub($b40.1, 1)
    let %41: bool = le($b40.0, %40)
    br %41 b41() b42()
  }
  .bb #b41 () {
    let %42: int32 = load int32 offset($b40.3, $b40.0 * @32)
    let _ = store int32 offset($b40.2, $b40.0 * @32) <- %42
    let %44: int32 = add($b40.0, 1)
    jump b40(%44, $b40.1, $b40.2, $b40.3)
  }
  .bb #b42 () {
    jump b43(())
  }
  .bb #b43 (unit) {
    jump b9($b43.0)
  }
  .loop #b44 header #b40 {
    .block #b41
    .block #b42
    .block #b43
  }
  .bb #b45 (int32, int32, array[int32], array[int32]) {
    jump b44(0, ^1, ^2, ^3)
  }
  .bb #b46 (array[int32], array[bool], int32, array[int32], array[int32], array[int32]) {
    let %45: bool = load bool field($b46.1, 0 * @32)
    let %46: bool = eq(%45, true)
    br %46 b47() b48()
  }
  .bb #b47 () {
    let %47: int32 = load int32 field($b46.3, 0 * @32)
    let %48: bool = eq(%47, $b46.2)
    br %48 b49() b50()
  }
  .bb #b48 () {
    jump b55(())
  }
  .bb #b49 () {
    let _ = store bool field($b46.1, 0 * @32) <- false
    let _ = store int32 field($b46.3, 0 * @32) <- 0
    jump b54(())
  }
  .bb #b50 () {
    let %51: int32 = load int32 field($b46.5, 0 * @32)
    let _ = store int32 field($b46.0, 0 * @32) <- %51
    let %53: unit = call f6(0, $b46.3, $b46.5)
    let %54: int32 = load int32 field($b46.3, 0 * @32)
    let %55: int32 = load int32 field($b46.0, 0 * @32)
    let _ = store int32 offset($b46.5, %54 * @32) <- %55
    let %57: int32 = load int32 field($b46.3, 0 * @32)
    let %58: int32 = load int32 field($b46.3, 0 * @32)
    let %59: int32 = load int32 offset($b46.4, %58 * @32)
    let %60: int32 = sub(%59, 1)
    let _ = store int32 offset($b46.4, %57 * @32) <- %60
    let %62: int32 = load int32 field($b46.3, 0 * @32)
    let %63: int32 = load int32 offset($b46.4, %62 * @32)
    let %64: bool = le(1, %63)
    br %64 b51() b52()
  }
  .bb #b51 () {
    let _ = store bool field($b46.1, 0 * @32) <- false
    jump b53(())
  }
  .bb #b52 () {
    let %66: int32 = load int32 field($b46.3, 0 * @32)
    let %67: int32 = add(%66, 1)
    let _ = store int32 field($b46.3, 0 * @32) <- %67
    jump b53(())
  }
  .bb #b53 (unit) {
    jump b54(())
  }
  .bb #b54 (unit) {
    jump b46($b46.0, $b46.1, $b46.2, $b46.3, $b46.4, $b46.5)
  }
  .bb #b55 (unit) {
    jump b11($b55.0)
  }
  .loop #b56 header #b46 {
    .block #b52
    .block #b50
    .block #b54
    .block #b55
    .block #b47
    .block #b51
    .block #b48
    .block #b49
    .block #b53
  }
  .bb #b57 (array[int32], array[bool], int32, array[int32], array[int32], array[int32]) {
    jump b56(f19.m2, f19.m1, ^1, $b0.0, ^4, ^3)
  }
}
.fn init_arr9l2_0 #f0 : fn(int32, array[int32], int32) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (int32, array[int32], int32) {
    let %0: int32 = sub($b0.2, 1)
    let %1: bool = le($b0.0, %0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let _ = store int32 offset($b0.1, $b0.0 * @32) <- $b0.0
    let %3: int32 = add($b0.0, 1)
    jump b0(%3, $b0.1, $b0.2)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1, $f2)
  }
}
.fn flip_loop99l5_4 #f4 : fn(int32, array[int32], array[int32], array[int32]) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (int32, array[int32], array[int32], array[int32]) {
    let %0: int32 = load int32 field($b0.2, 0 * @32)
    let %1: int32 = div(%0, 2)
    let %2: bool = le($b0.0, %1)
    br %2 b1() b2()
  }
  .bb #b1 () {
    let %3: int32 = load int32 offset($b0.3, $b0.0 * @32)
    let _ = store int32 field($b0.1, 0 * @32) <- %3
    let %5: int32 = load int32 field($b0.2, 0 * @32)
    let %6: int32 = sub(%5, $b0.0)
    let %7: int32 = load int32 offset($b0.3, %6 * @32)
    let _ = store int32 offset($b0.3, $b0.0 * @32) <- %7
    let %9: int32 = load int32 field($b0.2, 0 * @32)
    let %10: int32 = sub(%9, $b0.0)
    let %11: int32 = load int32 field($b0.1, 0 * @32)
    let _ = store int32 offset($b0.3, %10 * @32) <- %11
    let %13: int32 = add($b0.0, 1)
    jump b0(%13, $b0.1, $b0.2, $b0.3)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1, $f2, $f3)
  }
}
.fn move_perm1_forward197l6_6 #f6 : fn(int32, array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 field($f1, 0 * @32)
    let %1: int32 = sub(%0, 1)
    let %2: bool = le($f0, %1)
    br %2 b1() b2()
  }
  .bb #b1 () {
    let %3: int32 = add($f0, 1)
    let %4: int32 = load int32 offset($f2, %3 * @32)
    let _ = store int32 offset($f2, $f0 * @32) <- %4
    let %6: int32 = add($f0, 1)
    let %7: unit = call f6(%6, $f1, $f2)
    jump b3(())
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn T$start_22 #f22 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f9()
    return %0
  }
}
.thunk ::0 start
