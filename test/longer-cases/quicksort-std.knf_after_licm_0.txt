let rec swap1l0: Unit = (arr2.3: Array(Int), i4.5: Int, j6.7: Int) {
  let tmp.8: Int = Get arr2.3[i4.5]
  let _9: Int = Get arr2.3[j6.7]
  let _11: Unit = Put arr2.3[i4.5] = _9
  let _13: Unit = Put arr2.3[j6.7] = tmp.8
  Unit
}
let rec output14l1: Unit = (arr15.16: Array(Int), i17.18: Int, len19.20: Int) {
  let _21: Int = Int(1)
  let _22: Int = Sub(len19.20, _21)
  if (i17.18 <= _22) then {
    let _23: Int = Get arr15.16[i17.18]
    let _25: Unit = ExtApply(minimbt_print_int, [_23, ])
    let _27: Unit = ExtApply(minimbt_print_endline, [])
    let _28: Int = Int(1)
    let _29: Int = Add(i17.18, _28)
    let _259: Int = Int(1)
    let _260: Int = Sub(len19.20, _259)
    if (_29 <= _260) then {
      let _261: Int = Get arr15.16[_29]
      let _262: Unit = ExtApply(minimbt_print_int, [_261, ])
      let _263: Unit = ExtApply(minimbt_print_endline, [])
      let _264: Int = Int(1)
      let _265: Int = Add(_29, _264)
      Apply(output14l1, [arr15.16, _265, len19.20, ])
    } else {
      Unit
    }
  } else {
    Unit
  }
}
let rec g37l3: Unit = (j38.39: Int, arr31.32: Array(Int), low33.34: Int) {
  let _40: Int = Int(1)
  let _41: Int = Add(_40, low33.34)
  if (_41 <= j38.39) then {
    let _42: Int = Get arr31.32[j38.39]
    let _43: Int = Int(1)
    let _44: Int = Sub(j38.39, _43)
    let _45: Int = Get arr31.32[_44]
    let _46: Int = Int(1)
    let _47: Int = Sub(_45, _46)
    if (_42 <= _47) then {
      let _48: Int = Int(1)
      let _49: Int = Sub(j38.39, _48)
      let tmp.266: Int = Get arr31.32[j38.39]
      let _267: Int = Get arr31.32[_49]
      let _268: Unit = Put arr31.32[j38.39] = _267
      let _269: Unit = Put arr31.32[_49] = tmp.266
      let _51: Unit = Unit
      let _52: Int = Int(1)
      let _53: Int = Sub(j38.39, _52)
      let _270: Int = Int(1)
      let _271: Int = Add(_270, low33.34)
      if (_271 <= _53) then {
        let _272: Int = Get arr31.32[_53]
        let _273: Int = Int(1)
        let _274: Int = Sub(_53, _273)
        let _275: Int = Get arr31.32[_274]
        let _276: Int = Int(1)
        let _277: Int = Sub(_275, _276)
        if (_272 <= _277) then {
          let _278: Int = Int(1)
          let _279: Int = Sub(_53, _278)
          let _280: Unit = Apply(swap1l0, [arr31.32, _53, _279, ])
          let _281: Int = Int(1)
          let _282: Int = Sub(_53, _281)
          Apply(g37l3, [_282, arr31.32, low33.34, ])
        } else {
          Unit
        }
      } else {
        Unit
      }
    } else {
      Unit
    }
  } else {
    Unit
  }
}
let rec f54l4: Unit = (i55.56: Int, arr31.32: Array(Int), low33.34: Int, high35.36: Int) {
  let _57: Int = Int(1)
  let _58: Int = Sub(high35.36, _57)
  if (i55.56 <= _58) then {
    let _283: Int = Int(1)
    let _284: Int = Add(_283, low33.34)
    let _60: Unit = if (_284 <= i55.56) then {
      let _285: Int = Get arr31.32[i55.56]
      let _286: Int = Int(1)
      let _287: Int = Sub(i55.56, _286)
      let _288: Int = Get arr31.32[_287]
      let _289: Int = Int(1)
      let _290: Int = Sub(_288, _289)
      if (_285 <= _290) then {
        let _291: Int = Int(1)
        let _292: Int = Sub(i55.56, _291)
        let _293: Unit = Apply(swap1l0, [arr31.32, i55.56, _292, ])
        let _294: Int = Int(1)
        let _295: Int = Sub(i55.56, _294)
        Apply(g37l3, [_295, arr31.32, low33.34, ])
      } else {
        Unit
      }
    } else {
      Unit
    }
    let _61: Int = Int(1)
    let _62: Int = Add(i55.56, _61)
    let _296: Int = Int(1)
    let _297: Int = Sub(high35.36, _296)
    if (_62 <= _297) then {
      let _298: Unit = Apply(g37l3, [_62, arr31.32, low33.34, ])
      let _299: Int = Int(1)
      let _300: Int = Add(_62, _299)
      Apply(f54l4, [_300, arr31.32, low33.34, high35.36, ])
    } else {
      Unit
    }
  } else {
    Unit
  }
}
let rec insertion_sort30l2: Unit = (arr31.32: Array(Int), low33.34: Int, high35.36: Int) {
  let _63: Int = Int(1)
  let _64: Int = Add(low33.34, _63)
  let _301: Int = Int(1)
  let _302: Int = Sub(high35.36, _301)
  if (_64 <= _302) then {
    let _303: Unit = Apply(g37l3, [_64, arr31.32, low33.34, ])
    let _304: Int = Int(1)
    let _305: Int = Add(_64, _304)
    Apply(f54l4, [_305, arr31.32, low33.34, high35.36, ])
  } else {
    Unit
  }
}
let rec aux86l4: Var({val: Some(Unit)}) = (j87.88: Int, i.82: Array(Int), arr66.67: Array(Int), pivot.80: Int, high72.73: Int, partitioned.85: Array(Int)) {
  let _89: Int = Int(2)
  let _90: Int = Sub(high72.73, _89)
  if (j87.88 <= _90) then {
    let _91: Int = Get arr66.67[j87.88]
    let _92: Int = Int(1)
    let _93: Int = Sub(pivot.80, _92)
    let _112: Unit = if (_91 <= _93) then {
      let _94: Int = Int(0)
      let _95: Int = Get i.82[_94]
      let _103: Unit = if (_95 == j87.88) then {
        Unit
      } else {
        let _96: Int = Int(0)
        let _97: Int = Get i.82[_96]
        let tmp.310: Int = Get arr66.67[_97]
        let _311: Int = Get arr66.67[j87.88]
        let _312: Unit = Put arr66.67[_97] = _311
        let _313: Unit = Put arr66.67[j87.88] = tmp.310
        let _99: Unit = Unit
        let _100: Int = Int(0)
        let _101: Int = Int(0)
        Put partitioned.85[_100] = _101
      }
      let _104: Int = Int(0)
      let _105: Int = Int(0)
      let _106: Int = Get i.82[_105]
      let _107: Int = Int(1)
      let _108: Int = Add(_106, _107)
      let _110: Unit = Put i.82[_104] = _108
      Unit
    } else {
      Unit
    }
    let _113: Int = Int(1)
    let _114: Int = Add(j87.88, _113)
    Apply(aux86l4, [_114, i.82, arr66.67, pivot.80, high72.73, partitioned.85, ])
  } else {
    Unit
  }
}
let rec partition65l3: Tuple([Int, Bool]) = (arr66.67: Array(Int), pivot_index68.69: Int, low70.71: Int, high72.73: Int) {
  let _74: Int = Int(1)
  let _75: Int = Sub(high72.73, _74)
  let tmp.306: Int = Get arr66.67[pivot_index68.69]
  let _307: Int = Get arr66.67[_75]
  let _308: Unit = Put arr66.67[pivot_index68.69] = _307
  let _309: Unit = Put arr66.67[_75] = tmp.306
  let _77: Unit = Unit
  let _78: Int = Int(1)
  let _79: Int = Sub(high72.73, _78)
  let pivot.80: Int = Get arr66.67[_79]
  let _81: Int = Int(1)
  let i.82: Array(Int) = ExtApply(minimbt_create_array, [_81, low70.71, ])
  let _83: Int = Int(1)
  let _84: Int = Int(1)
  let partitioned.85: Array(Int) = ExtApply(minimbt_create_array, [_83, _84, ])
  let _116: Var({val: Some(Unit)}) = Apply(aux86l4, [low70.71, i.82, arr66.67, pivot.80, high72.73, partitioned.85, ])
  let _117: Int = Int(0)
  let _118: Int = Get i.82[_117]
  let _119: Int = Int(1)
  let _120: Int = Sub(high72.73, _119)
  let tmp.314: Int = Get arr66.67[_118]
  let _315: Int = Get arr66.67[_120]
  let _316: Unit = Put arr66.67[_118] = _315
  let _317: Unit = Put arr66.67[_120] = tmp.314
  let _122: Unit = Unit
  let _123: Int = Int(0)
  let _124: Int = Get i.82[_123]
  let _125: Int = Int(0)
  let _126: Int = Get partitioned.85[_125]
  let _127: Int = Int(1)
  let _128: Int = if (_126 == _127) then {
    Bool(true)
  } else {
    Bool(false)
  }
  Tuple([_124, _128, ])
}
let rec sort_2157l5: Var({val: Some(Unit)}) = (a158.159: Int, b160.161: Int, swaps.139: Array(Int), arr130.131: Array(Int)) {
  let _162: Int = Get arr130.131[b160.161]
  let _163: Int = Get arr130.131[a158.159]
  let _164: Int = Int(1)
  let _165: Int = Sub(_163, _164)
  if (_162 <= _165) then {
    let tmp.318: Int = Get arr130.131[a158.159]
    let _319: Int = Get arr130.131[b160.161]
    let _320: Unit = Put arr130.131[a158.159] = _319
    let _321: Unit = Put arr130.131[b160.161] = tmp.318
    let _167: Unit = Unit
    let _168: Int = Int(0)
    let _169: Int = Int(0)
    let _170: Int = Get swaps.139[_169]
    let _171: Int = Int(1)
    let _172: Int = Add(_170, _171)
    Put swaps.139[_168] = _172
  } else {
    Unit
  }
}
let rec choose_pivot129l4: Tuple([Int, Bool]) = (arr130.131: Array(Int), low132.133: Int, high134.135: Int) {
  let use_median_of_medians.136: Int = Int(50)
  let _137: Int = Int(1)
  let _138: Int = Int(0)
  let swaps.139: Array(Int) = ExtApply(minimbt_create_array, [_137, _138, ])
  let len.140: Int = Sub(high134.135, low132.133)
  let _141: Int = Int(4)
  let _142: Int = Div(len.140, _141)
  let _143: Int = Int(2)
  let _144: Int = Mul(_142, _143)
  let b.145: Int = Add(low132.133, _144)
  let _146: Int = Int(8)
  let _205: Var({val: Some(Unit)}) = if (_146 <= len.140) then {
    let _147: Int = Int(4)
    let _148: Int = Div(len.140, _147)
    let _149: Int = Int(1)
    let _150: Int = Mul(_148, _149)
    let a.151: Int = Add(low132.133, _150)
    let _152: Int = Int(4)
    let _153: Int = Div(len.140, _152)
    let _154: Int = Int(3)
    let _155: Int = Mul(_153, _154)
    let c.156: Int = Add(low132.133, _155)
    let _184: Int = Int(1)
    let _185: Int = Sub(len.140, _184)
    let _203: Var({val: Some(Unit)}) = if (use_median_of_medians.136 <= _185) then {
      let _186: Int = Int(1)
      let _187: Int = Sub(a.151, _186)
      let _188: Int = Int(1)
      let _189: Int = Add(a.151, _188)
      let _352: Var({val: Some(Unit)}) = Apply(sort_2157l5, [_187, a.151, swaps.139, arr130.131, ])
      let _353: Var({val: Some(Unit)}) = Apply(sort_2157l5, [a.151, _189, swaps.139, arr130.131, ])
      let _191: Var({val: Some(Unit)}) = Apply(sort_2157l5, [_187, a.151, swaps.139, arr130.131, ])
      let _192: Int = Int(1)
      let _193: Int = Sub(b.145, _192)
      let _194: Int = Int(1)
      let _195: Int = Add(b.145, _194)
      let _354: Var({val: Some(Unit)}) = Apply(sort_2157l5, [_193, b.145, swaps.139, arr130.131, ])
      let _355: Var({val: Some(Unit)}) = Apply(sort_2157l5, [b.145, _195, swaps.139, arr130.131, ])
      let _197: Var({val: Some(Unit)}) = Apply(sort_2157l5, [_193, b.145, swaps.139, arr130.131, ])
      let _198: Int = Int(1)
      let _199: Int = Sub(c.156, _198)
      let _200: Int = Int(1)
      let _201: Int = Add(c.156, _200)
      let _356: Var({val: Some(Unit)}) = Apply(sort_2157l5, [_199, c.156, swaps.139, arr130.131, ])
      let _357: Var({val: Some(Unit)}) = Apply(sort_2157l5, [c.156, _201, swaps.139, arr130.131, ])
      Apply(sort_2157l5, [_199, c.156, swaps.139, arr130.131, ])
    } else {
      Unit
    }
    let _358: Var({val: Some(Unit)}) = Apply(sort_2157l5, [a.151, b.145, swaps.139, arr130.131, ])
    let _359: Var({val: Some(Unit)}) = Apply(sort_2157l5, [b.145, c.156, swaps.139, arr130.131, ])
    Apply(sort_2157l5, [a.151, b.145, swaps.139, arr130.131, ])
  } else {
    Unit
  }
  let _206: Int = Int(0)
  let _207: Int = Get swaps.139[_206]
  let _208: Int = Int(0)
  let _209: Int = if (_207 == _208) then {
    Bool(true)
  } else {
    Bool(false)
  }
  Tuple([b.145, _209, ])
}
let rec g37.360l6: Unit = (j38.361: Int, arr211.212: Array(Int), low213.214: Int) {
  let _362: Int = Int(1)
  let _363: Int = Add(_362, low213.214)
  if (_363 <= j38.361) then {
    let _364: Int = Get arr211.212[j38.361]
    let _365: Int = Int(1)
    let _366: Int = Sub(j38.361, _365)
    let _367: Int = Get arr211.212[_366]
    let _368: Int = Int(1)
    let _369: Int = Sub(_367, _368)
    if (_364 <= _369) then {
      let _370: Int = Int(1)
      let _371: Int = Sub(j38.361, _370)
      let _372: Unit = Apply(swap1l0, [arr211.212, j38.361, _371, ])
      let _373: Int = Int(1)
      let _374: Int = Sub(j38.361, _373)
      Apply(g37.360l6, [_374, arr211.212, low213.214, ])
    } else {
      Unit
    }
  } else {
    Unit
  }
}
let rec f54.375l7: Unit = (i55.376: Int, arr211.212: Array(Int), low213.214: Int, high215.216: Int) {
  let _377: Int = Int(1)
  let _378: Int = Sub(high215.216, _377)
  if (i55.376 <= _378) then {
    let _379: Unit = Apply(g37.360l6, [i55.376, arr211.212, low213.214, ])
    let _380: Int = Int(1)
    let _381: Int = Add(i55.376, _380)
    Apply(f54.375l7, [_381, arr211.212, low213.214, high215.216, ])
  } else {
    Unit
  }
}
let rec sort_2157.406l6: Var({val: Some(Unit)}) = (a158.407: Int, b160.408: Int, swaps.387: Array(Int), arr211.212: Array(Int)) {
  let _409: Int = Get arr211.212[b160.408]
  let _410: Int = Get arr211.212[a158.407]
  let _411: Int = Int(1)
  let _412: Int = Sub(_410, _411)
  if (_409 <= _412) then {
    let _413: Unit = Apply(swap1l0, [arr211.212, a158.407, b160.408, ])
    let _414: Int = Int(0)
    let _415: Int = Int(0)
    let _416: Int = Get swaps.387[_415]
    let _417: Int = Int(1)
    let _418: Int = Add(_416, _417)
    Put swaps.387[_414] = _418
  } else {
    Unit
  }
}
let rec sort_3173.419l7: Var({val: Some(Unit)}) = (a174.420: Int, b176.421: Int, c178.422: Int, swaps.387: Array(Int), arr211.212: Array(Int)) {
  let _423: Var({val: Some(Unit)}) = Apply(sort_2157.406l6, [a174.420, b176.421, swaps.387, arr211.212, ])
  let _424: Var({val: Some(Unit)}) = Apply(sort_2157.406l6, [b176.421, c178.422, swaps.387, arr211.212, ])
  Apply(sort_2157.406l6, [a174.420, b176.421, swaps.387, arr211.212, ])
}
let rec aux86.457l6: Var({val: Some(Unit)}) = (j87.458: Int, i.453: Array(Int), pivot.451: Int, arr211.212: Array(Int), high215.216: Int, partitioned.456: Array(Int)) {
  let _459: Int = Int(2)
  let _460: Int = Sub(high215.216, _459)
  if (j87.458 <= _460) then {
    let _461: Int = Get arr211.212[j87.458]
    let _462: Int = Int(1)
    let _463: Int = Sub(pivot.451, _462)
    let _464: Unit = if (_461 <= _463) then {
      let _465: Int = Int(0)
      let _466: Int = Get i.453[_465]
      let _467: Unit = if (_466 == j87.458) then {
        Unit
      } else {
        let _468: Int = Int(0)
        let _469: Int = Get i.453[_468]
        let _470: Unit = Apply(swap1l0, [arr211.212, _469, j87.458, ])
        let _471: Int = Int(0)
        let _472: Int = Int(0)
        Put partitioned.456[_471] = _472
      }
      let _473: Int = Int(0)
      let _474: Int = Int(0)
      let _475: Int = Get i.453[_474]
      let _476: Int = Int(1)
      let _477: Int = Add(_475, _476)
      let _478: Unit = Put i.453[_473] = _477
      Unit
    } else {
      Unit
    }
    let _479: Int = Int(1)
    let _480: Int = Add(j87.458, _479)
    Apply(aux86.457l6, [_480, i.453, pivot.451, arr211.212, high215.216, partitioned.456, ])
  } else {
    Unit
  }
}
let rec quick_sort210l5: Unit = (arr211.212: Array(Int), low213.214: Int, high215.216: Int) {
  let len.217: Int = Sub(high215.216, low213.214)
  let _218: Int = Int(16)
  if (len.217 <= _218) then {
    let _382: Int = Int(1)
    let _383: Int = Add(low213.214, _382)
    Apply(f54.375l7, [_383, arr211.212, low213.214, high215.216, ])
  } else {
    let use_median_of_medians.384: Int = Int(50)
    let _385: Int = Int(1)
    let _386: Int = Int(0)
    let swaps.387: Array(Int) = ExtApply(minimbt_create_array, [_385, _386, ])
    let len.388: Int = Sub(high215.216, low213.214)
    let _389: Int = Int(4)
    let _390: Int = Div(len.388, _389)
    let _391: Int = Int(2)
    let _392: Int = Mul(_390, _391)
    let b.393: Int = Add(low213.214, _392)
    let _394: Int = Int(8)
    let _395: Var({val: Some(Unit)}) = if (_394 <= len.388) then {
      let _396: Int = Int(4)
      let _397: Int = Div(len.388, _396)
      let _398: Int = Int(1)
      let _399: Int = Mul(_397, _398)
      let a.400: Int = Add(low213.214, _399)
      let _401: Int = Int(4)
      let _402: Int = Div(len.388, _401)
      let _403: Int = Int(3)
      let _404: Int = Mul(_402, _403)
      let c.405: Int = Add(low213.214, _404)
      let _425: Int = Int(1)
      let _426: Int = Sub(len.388, _425)
      let _427: Var({val: Some(Unit)}) = if (use_median_of_medians.384 <= _426) then {
        let _428: Int = Int(1)
        let _429: Int = Sub(a.400, _428)
        let _430: Int = Int(1)
        let _431: Int = Add(a.400, _430)
        let _432: Var({val: Some(Unit)}) = Apply(sort_3173.419l7, [_429, a.400, _431, swaps.387, arr211.212, ])
        let _433: Int = Int(1)
        let _434: Int = Sub(b.393, _433)
        let _435: Int = Int(1)
        let _436: Int = Add(b.393, _435)
        let _437: Var({val: Some(Unit)}) = Apply(sort_3173.419l7, [_434, b.393, _436, swaps.387, arr211.212, ])
        let _438: Int = Int(1)
        let _439: Int = Sub(c.405, _438)
        let _440: Int = Int(1)
        let _441: Int = Add(c.405, _440)
        Apply(sort_3173.419l7, [_439, c.405, _441, swaps.387, arr211.212, ])
      } else {
        Unit
      }
      Apply(sort_3173.419l7, [a.400, b.393, c.405, swaps.387, arr211.212, ])
    } else {
      Unit
    }
    let _442: Int = Int(0)
    let _443: Int = Get swaps.387[_442]
    let _444: Int = Int(0)
    let _445: Int = if (_443 == _444) then {
      Bool(true)
    } else {
      Bool(false)
    }
    let _219: Tuple([Int, Bool]) = Tuple([b.393, _445, ])
    let (pivot_index220.221: Var({val: Some(Int)}), likely_sorted222.223: Var({val: Some(Bool)})) = _219
    let _446: Int = Int(1)
    let _447: Int = Sub(high215.216, _446)
    let _448: Unit = Apply(swap1l0, [arr211.212, pivot_index220.221, _447, ])
    let _449: Int = Int(1)
    let _450: Int = Sub(high215.216, _449)
    let pivot.451: Int = Get arr211.212[_450]
    let _452: Int = Int(1)
    let i.453: Array(Int) = ExtApply(minimbt_create_array, [_452, low213.214, ])
    let _454: Int = Int(1)
    let _455: Int = Int(1)
    let partitioned.456: Array(Int) = ExtApply(minimbt_create_array, [_454, _455, ])
    let _481: Var({val: Some(Unit)}) = Apply(aux86.457l6, [low213.214, i.453, pivot.451, arr211.212, high215.216, partitioned.456, ])
    let _482: Int = Int(0)
    let _483: Int = Get i.453[_482]
    let _484: Int = Int(1)
    let _485: Int = Sub(high215.216, _484)
    let _486: Unit = Apply(swap1l0, [arr211.212, _483, _485, ])
    let _487: Int = Int(0)
    let _488: Int = Get i.453[_487]
    let _489: Int = Int(0)
    let _490: Int = Get partitioned.456[_489]
    let _491: Int = Int(1)
    let _492: Int = if (_490 == _491) then {
      Bool(true)
    } else {
      Bool(false)
    }
    let _224: Tuple([Int, Bool]) = Tuple([_488, _492, ])
    let (pivot225.226: Var({val: Some(Int)}), partitioned227.228: Var({val: Some(Bool)})) = _224
    let len.493: Int = Sub(pivot225.226, low213.214)
    let _494: Int = Int(16)
    let _230: Unit = if (len.493 <= _494) then {
      Apply(insertion_sort30l2, [arr211.212, low213.214, pivot225.226, ])
    } else {
      let _495: Tuple([Int, Bool]) = Apply(choose_pivot129l4, [arr211.212, low213.214, pivot225.226, ])
      let (pivot_index220.496: Var({val: Some(Int)}), likely_sorted222.497: Var({val: Some(Bool)})) = _495
      let _498: Tuple([Int, Bool]) = Apply(partition65l3, [arr211.212, pivot_index220.496, low213.214, pivot225.226, ])
      let (pivot225.499: Var({val: Some(Int)}), partitioned227.500: Var({val: Some(Bool)})) = _498
      let _501: Unit = Apply(quick_sort210l5, [arr211.212, low213.214, pivot225.499, ])
      let _502: Int = Int(1)
      let _503: Int = Add(pivot225.499, _502)
      Apply(quick_sort210l5, [arr211.212, _503, pivot225.226, ])
    }
    let _231: Int = Int(1)
    let _232: Int = Add(pivot225.226, _231)
    let len.504: Int = Sub(high215.216, _232)
    let _505: Int = Int(16)
    if (len.504 <= _505) then {
      Apply(insertion_sort30l2, [arr211.212, _232, high215.216, ])
    } else {
      let _506: Tuple([Int, Bool]) = Apply(choose_pivot129l4, [arr211.212, _232, high215.216, ])
      let (pivot_index220.507: Var({val: Some(Int)}), likely_sorted222.508: Var({val: Some(Bool)})) = _506
      let _509: Tuple([Int, Bool]) = Apply(partition65l3, [arr211.212, pivot_index220.507, _232, high215.216, ])
      let (pivot225.510: Var({val: Some(Int)}), partitioned227.511: Var({val: Some(Bool)})) = _509
      let _512: Unit = Apply(quick_sort210l5, [arr211.212, _232, pivot225.510, ])
      let _513: Int = Int(1)
      let _514: Int = Add(pivot225.510, _513)
      Apply(quick_sort210l5, [arr211.212, _514, high215.216, ])
    }
  }
}
let rec input243l7: Var({val: Some(Unit)}) = (i244.245: Int, arr.242: Array(Int), len.240: Int) {
  let _246: Int = Int(1)
  let _247: Int = Sub(len.240, _246)
  if (i244.245 <= _247) then {
    let _248: Int = ExtApply(minimbt_read_int, [])
    let _250: Unit = Put arr.242[i244.245] = _248
    let _251: Int = Int(1)
    let _252: Int = Add(i244.245, _251)
    let _526: Int = Int(1)
    let _527: Int = Sub(len.240, _526)
    if (_252 <= _527) then {
      let _528: Int = ExtApply(minimbt_read_int, [])
      let _529: Unit = Put arr.242[_252] = _528
      let _530: Int = Int(1)
      let _531: Int = Add(_252, _530)
      Apply(input243l7, [_531, arr.242, len.240, ])
    } else {
      Unit
    }
  } else {
    Unit
  }
}
let rec main239l6: Var({val: Some(Unit)}) = () {
  let len.240: Int = ExtApply(minimbt_read_int, [])
  let _241: Int = Int(0)
  let arr.242: Array(Int) = ExtApply(minimbt_create_array, [len.240, _241, ])
  let _253: Int = Int(0)
  let _532: Int = Int(1)
  let _533: Int = Sub(len.240, _532)
  let _255: Var({val: Some(Unit)}) = if (_253 <= _533) then {
    let _534: Int = ExtApply(minimbt_read_int, [])
    let _535: Unit = Put arr.242[_253] = _534
    let _536: Int = Int(1)
    let _537: Int = Add(_253, _536)
    Apply(input243l7, [_537, arr.242, len.240, ])
  } else {
    Unit
  }
  let _538: Int = Int(0)
  let _257: Unit = Apply(quick_sort210l5, [arr.242, _538, len.240, ])
  let _258: Int = Int(0)
  let _539: Int = Int(1)
  let _540: Int = Sub(len.240, _539)
  if (_258 <= _540) then {
    let _541: Int = Get arr.242[_258]
    let _542: Unit = ExtApply(minimbt_print_int, [_541, ])
    let _543: Unit = ExtApply(minimbt_print_endline, [])
    let _544: Int = Int(1)
    let _545: Int = Add(_258, _544)
    Apply(output14l1, [arr.242, _545, len.240, ])
  } else {
    Unit
  }
}
Apply(main239l6, [])