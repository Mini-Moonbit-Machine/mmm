# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn move_perm1_forward.606 #f3 : fn(int32, array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 field($f1, 0 * @32)
    let %1: int32 = sub(%0, 1)
    let %2: bool = le($f0, %1)
    br %2 b1() b2()
  }
  .bb #b1 () {
    let %3: int32 = add($f0, 1)
    let %4: int32 = load int32 offset($f2, %3 * @32)
    let _ = store int32 offset($f2, $f0 * @32) <- %4
    let %6: int32 = add($f0, 1)
    let %7: unit = call f3(%6, $f1, $f2)
    jump b3(())
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn go_loop.607 #f6 : fn(int32, array[int32], array[int32], array[bool], array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1()
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
    .block #b6
    .block #b7
    .block #b8
    .block #b9
    .block #b10
    .block #b11
  }
  .bb #b2 () {
    let %0: bool = load bool field($f3, 0 * @32)
    let %1: bool = eq(%0, true)
    br %1 b3() b4()
  }
  .bb #b3 () {
    let %2: int32 = load int32 field($f1, 0 * @32)
    let %3: bool = eq(%2, $f0)
    br %3 b5() b6()
  }
  .bb #b4 () {
    jump b11(())
  }
  .bb #b5 () {
    let _ = store bool field($f3, 0 * @32) <- false
    let _ = store int32 field($f1, 0 * @32) <- 0
    jump b2()
  }
  .bb #b6 () {
    let %6: int32 = load int32 field($f4, 0 * @32)
    let _ = store int32 field($f2, 0 * @32) <- %6
    let %8: unit = call f5(0, $f1, $f4)
    let %9: int32 = load int32 field($f1, 0 * @32)
    let %10: int32 = load int32 field($f2, 0 * @32)
    let _ = store int32 offset($f4, %9 * @32) <- %10
    let %12: int32 = load int32 field($f1, 0 * @32)
    let %13: int32 = load int32 field($f1, 0 * @32)
    let %14: int32 = load int32 offset($f5, %13 * @32)
    let %15: int32 = sub(%14, 1)
    let _ = store int32 offset($f5, %12 * @32) <- %15
    let %17: int32 = load int32 field($f1, 0 * @32)
    let %18: int32 = load int32 offset($f5, %17 * @32)
    let %19: bool = le(1, %18)
    br %19 b7() b8()
  }
  .bb #b7 () {
    let _ = store bool field($f3, 0 * @32) <- false
    jump b2()
  }
  .bb #b8 () {
    let %21: int32 = load int32 field($f1, 0 * @32)
    let %22: int32 = add(%21, 1)
    let _ = store int32 field($f1, 0 * @32) <- %22
    jump b2()
  }
  .bb #b9 (any) {
    jump b10($b9.0)
  }
  .bb #b10 (any) {
    jump b11($b10.0)
  }
  .bb #b11 (any) {
    return $b11.0
  }
}
.fn compute.601 #f7 : fn(array[int32], int32, array[int32], array[int32], array[int32], array[int32], array[int32], array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1($f0)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b13
  }
  .bb #b2 (array[int32]) {
    let %0: int32 = load int32 field($b2.0, 0 * @32)
    let %1: bool = le(1, %0)
    br %1 b3() b4()
  }
  .bb #b3 () {
    jump b5(0)
  }
  .bb #b4 () {
    jump b13(())
  }
  .loop #b5 pre #Some(b3) header #b6 {
    .block #b7
    .block #b8
    .block #b9
    .block #b10
    .block #b11
    .block #b12
  }
  .bb #b6 (int32) {
    let %2: int32 = sub($f1, 1)
    let %3: bool = le($b6.0, %2)
    br %3 b7() b8()
  }
  .bb #b7 () {
    let %4: int32 = load int32 offset($f2, $b6.0 * @32)
    let _ = store int32 offset($f3, $b6.0 * @32) <- %4
    let %6: int32 = add($b6.0, 1)
    jump b6(%6)
  }
  .bb #b8 () {
    let %7: unit = call f0($b2.0, $f4)
    let _ = store int32 field($f5, 0 * @32) <- 0
    let %9: int32 = load int32 field($f3, 0 * @32)
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = %9
    let %11: unit = call f2(f7.m0, $f3, $f5)
    let %12: int32 = load int32 field($f8, 0 * @32)
    let %13: int32 = load int32 field($f5, 0 * @32)
    let %14: bool = le(%12, %13)
    br %14 b9() b10()
  }
  .bb #b9 () {
    let %15: int32 = load int32 field($f5, 0 * @32)
    let _ = store int32 field($f8, 0 * @32) <- %15
    let %17: int32 = load int32 field($f7, 0 * @32)
    let %18: int32 = load int32 field($f5, 0 * @32)
    let %19: int32 = load int32 field($f6, 0 * @32)
    let %20: int32 = load int32 field($f6, 0 * @32)
    let %21: int32 = div(%20, 2)
    let %22: int32 = mul(%21, 2)
    let %23: int32 = sub(%19, %22)
    let %24: int32 = mul(%23, 2)
    let %25: int32 = sub(1, %24)
    let %26: int32 = mul(%18, %25)
    let %27: int32 = add(%17, %26)
    let _ = store int32 field($f7, 0 * @32) <- %27
    let _ = alloc <m1: array[int32] heap(1)> <- [..] = true
    let _ = alloc <m2: array[int32] heap(1)> <- [..] = 0
    let %31: unit = call f4($f1, $b2.0, f7.m2, f7.m1, $f2, $f4)
    let %32: int32 = load int32 field($f6, 0 * @32)
    let %33: int32 = add(%32, 1)
    let _ = store int32 field($f6, 0 * @32) <- %33
    jump b2($b2.0)
  }
  .bb #b10 () {
    let %35: int32 = load int32 field($f7, 0 * @32)
    let %36: int32 = load int32 field($f5, 0 * @32)
    let %37: int32 = load int32 field($f6, 0 * @32)
    let %38: int32 = load int32 field($f6, 0 * @32)
    let %39: int32 = div(%38, 2)
    let %40: int32 = mul(%39, 2)
    let %41: int32 = sub(%37, %40)
    let %42: int32 = mul(%41, 2)
    let %43: int32 = sub(1, %42)
    let %44: int32 = mul(%36, %43)
    let %45: int32 = add(%35, %44)
    let _ = store int32 field($f7, 0 * @32) <- %45
    let _ = alloc <m3: array[int32] heap(1)> <- [..] = true
    let _ = alloc <m4: array[int32] heap(1)> <- [..] = 0
    let %49: unit = call f6($f1, $b2.0, f7.m4, f7.m3, $f2, $f4)
    let %50: int32 = load int32 field($f6, 0 * @32)
    let %51: int32 = add(%50, 1)
    let _ = store int32 field($f6, 0 * @32) <- %51
    jump b2($b2.0)
  }
  .bb #b11 (any) {
    jump b12($b11.0)
  }
  .bb #b12 (any) {
    return $b12.0
  }
  .bb #b13 (any) {
    return $b13.0
  }
}
.fn fannkuch.600 #f8 : fn(int32) -> (int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap($f0)> <- [..] = 0
    jump b1(0)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
  }
  .bb #b2 (int32) {
    let %1: int32 = sub($f0, 1)
    let %2: bool = le($b2.0, %1)
    br %2 b3() b4()
  }
  .bb #b3 () {
    let _ = store int32 offset(f8.m0, $b2.0 * @32) <- $b2.0
    let %4: int32 = add($b2.0, 1)
    jump b2(%4)
  }
  .bb #b4 () {
    let _ = alloc <m1: array[int32] heap($f0)> <- [..] = 0
    let _ = alloc <m2: array[int32] heap($f0)> <- [..] = 0
    let _ = alloc <m3: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m4: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m5: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m6: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m7: array[int32] heap(1)> <- [..] = $f0
    let %12: unit = call f7(f8.m7, $f0, f8.m0, f8.m1, f8.m2, f8.m3, f8.m6, f8.m5, f8.m4)
    let %13: int32 = load int32 field(f8.m4, 0 * @32)
    let %14: int32 = load int32 field(f8.m5, 0 * @32)
    let _ = alloc <m8: (int32, int32) heap(2)> <- [0] = %13, [1] = %14
    jump b5(f8.m8)
  }
  .bb #b5 (any) {
    return $b5.0
  }
}
.fn do_flip.603 #f2 : fn(array[int32], array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1($f0)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
  }
  .bb #b2 (array[int32]) {
    let %0: int32 = load int32 field($b2.0, 0 * @32)
    let %1: bool = eq(%0, 0)
    br %1 b3() b4()
  }
  .bb #b3 () {
    jump b5(())
  }
  .bb #b4 () {
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = 0
    let %3: unit = call f1(0, $b2.0, f2.m0, $f1)
    let %4: int32 = load int32 field($f1, 0 * @32)
    let _ = store int32 field($b2.0, 0 * @32) <- %4
    let %6: int32 = load int32 field($f2, 0 * @32)
    let %7: int32 = add(%6, 1)
    let _ = store int32 field($f2, 0 * @32) <- %7
    jump b2($b2.0)
  }
  .bb #b5 (unit) {
    return $b5.0
  }
}
.fn main.609 #f9 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: (int32, int32) = call f8(9)
    let %1: int32 = load int32 field(%0, 0 * @(@32, @(@32, @32)))
    let %2: int32 = load int32 field(%0, 1 * @(@32, @(@32, @32)))
    let %3: unit = ext_call minimbt_print_int(%2)
    let %4: unit = ext_call minimbt_print_int(%1)
    return %4
  }
}
.fn go_loop.605 #f4 : fn(int32, array[int32], array[int32], array[bool], array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1()
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
    .block #b6
    .block #b7
    .block #b8
    .block #b9
    .block #b10
    .block #b11
  }
  .bb #b2 () {
    let %0: bool = load bool field($f3, 0 * @32)
    let %1: bool = eq(%0, true)
    br %1 b3() b4()
  }
  .bb #b3 () {
    let %2: int32 = load int32 field($f1, 0 * @32)
    let %3: bool = eq(%2, $f0)
    br %3 b5() b6()
  }
  .bb #b4 () {
    jump b11(())
  }
  .bb #b5 () {
    let _ = store bool field($f3, 0 * @32) <- false
    let _ = store int32 field($f1, 0 * @32) <- 0
    jump b2()
  }
  .bb #b6 () {
    let %6: int32 = load int32 field($f4, 0 * @32)
    let _ = store int32 field($f2, 0 * @32) <- %6
    let %8: unit = call f3(0, $f1, $f4)
    let %9: int32 = load int32 field($f1, 0 * @32)
    let %10: int32 = load int32 field($f2, 0 * @32)
    let _ = store int32 offset($f4, %9 * @32) <- %10
    let %12: int32 = load int32 field($f1, 0 * @32)
    let %13: int32 = load int32 field($f1, 0 * @32)
    let %14: int32 = load int32 offset($f5, %13 * @32)
    let %15: int32 = sub(%14, 1)
    let _ = store int32 offset($f5, %12 * @32) <- %15
    let %17: int32 = load int32 field($f1, 0 * @32)
    let %18: int32 = load int32 offset($f5, %17 * @32)
    let %19: bool = le(1, %18)
    br %19 b7() b8()
  }
  .bb #b7 () {
    let _ = store bool field($f3, 0 * @32) <- false
    jump b2()
  }
  .bb #b8 () {
    let %21: int32 = load int32 field($f1, 0 * @32)
    let %22: int32 = add(%21, 1)
    let _ = store int32 field($f1, 0 * @32) <- %22
    jump b2()
  }
  .bb #b9 (any) {
    jump b10($b9.0)
  }
  .bb #b10 (any) {
    jump b11($b10.0)
  }
  .bb #b11 (any) {
    return $b11.0
  }
}
.fn flip_loop.604 #f1 : fn(int32, array[int32], array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1($f0)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
  }
  .bb #b2 (int32) {
    let %0: int32 = load int32 field($f1, 0 * @32)
    let %1: int32 = div(%0, 2)
    let %2: bool = le($b2.0, %1)
    br %2 b3() b4()
  }
  .bb #b3 () {
    let %3: int32 = load int32 offset($f3, $b2.0 * @32)
    let _ = store int32 field($f2, 0 * @32) <- %3
    let %5: int32 = load int32 field($f1, 0 * @32)
    let %6: int32 = sub(%5, $b2.0)
    let %7: int32 = load int32 offset($f3, %6 * @32)
    let _ = store int32 offset($f3, $b2.0 * @32) <- %7
    let %9: int32 = load int32 field($f1, 0 * @32)
    let %10: int32 = sub(%9, $b2.0)
    let %11: int32 = load int32 field($f2, 0 * @32)
    let _ = store int32 offset($f3, %10 * @32) <- %11
    let %13: int32 = add($b2.0, 1)
    jump b2(%13)
  }
  .bb #b4 () {
    jump b5(())
  }
  .bb #b5 (any) {
    return $b5.0
  }
}
.fn move_perm1_forward.608 #f5 : fn(int32, array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 field($f1, 0 * @32)
    let %1: int32 = sub(%0, 1)
    let %2: bool = le($f0, %1)
    br %2 b1() b2()
  }
  .bb #b1 () {
    let %3: int32 = add($f0, 1)
    let %4: int32 = load int32 offset($f2, %3 * @32)
    let _ = store int32 offset($f2, $f0 * @32) <- %4
    let %6: int32 = add($f0, 1)
    let %7: unit = call f5(%6, $f1, $f2)
    jump b3(())
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn T$start #f20 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f9()
    return %0
  }
}
.fn init_count.602 #f0 : fn(array[int32], array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 field($f0, 0 * @32)
    let %1: bool = eq(%0, 1)
    br %1 b1() b2()
  }
  .bb #b1 () {
    jump b3(())
  }
  .bb #b2 () {
    let %2: int32 = load int32 field($f0, 0 * @32)
    let %3: int32 = sub(%2, 1)
    let %4: int32 = load int32 field($f0, 0 * @32)
    let _ = store int32 offset($f1, %3 * @32) <- %4
    let %6: int32 = load int32 field($f0, 0 * @32)
    let %7: int32 = sub(%6, 1)
    let _ = store int32 field($f0, 0 * @32) <- %7
    let %9: unit = call f0($f0, $f1)
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.thunk ::0 start
