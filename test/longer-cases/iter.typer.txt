let rec iter: (arr: Array[Int], len: Int) -> ((Int) -> Bool) -> Bool {
  let rec do: (yield: (Int) -> Bool) -> Bool {
    let rec next: (i: Int) -> Bool {
      if (LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int)))) then {
        if (App(Var("yield"), [Get(Var("arr"), Var("i"))])) then {
          Apply(Var("next"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), ])
        } else {
          Bool(false)
        }
      } else {
        Bool(false)
      }
    }
    Apply(Var("next"), [Int(0), ])
  }
  Var(do)
}
let rec each: (iter: ((Int) -> Bool) -> Bool, f: (Int) -> Unit) -> Unit {
  let rec yield: (x: Int) -> Bool {
    let _: Unit = Apply(Var("f"), [Var("x"), ])
    Bool(true)
  }
  let rec do: () -> Unit {
    if (App(Var("iter"), [Var("yield")])) then {
      Apply(Var("do"), [])
    } else {
      Unit
    }
  }
  Apply(Var("do"), [])
}
let rec main: () -> Unit {
  let arr: Array[Int] = Array::make(Int(5), Int(1))
  let _: Unit = Put Var("arr")[Int(0)] = Int(1)
  let _: Unit = Put Var("arr")[Int(1)] = Int(2)
  let _: Unit = Put Var("arr")[Int(2)] = Int(3)
  let _: Unit = Put Var("arr")[Int(3)] = Int(4)
  let _: Unit = Put Var("arr")[Int(4)] = Int(5)
  let f: ((Int) -> Bool) -> Bool = Apply(Var("iter"), [Var("arr"), Int(5), ])
  let rec print: (x: Int) -> Unit {
    Apply(Var("print_int"), [Var("x"), ])
  }
  Apply(Var("each"), [Var("f"), Var("print"), ])
}
Unit
