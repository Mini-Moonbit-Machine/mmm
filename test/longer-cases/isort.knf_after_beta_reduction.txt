let rec random1: Int = (state2.3: Int) {
  let _4: Int = Int(75)
  let _5: Int = Mul(state2.3, _4)
  let _6: Int = Int(74)
  Add(_5, _6)
}
let rec modulo7: Int = (x8.9: Int, y10.11: Int) {
  let q.12: Int = Div(x8.9, y10.11)
  let _13: Int = Mul(q.12, y10.11)
  Sub(x8.9, _13)
}
let rec main85: Var({val: Some(Unit)}) = () {
  let n.86: Int = Int(100)
  let _87: Int = Int(0)
  let arr.88: Array(Int) = ExtApply(minimbt_create_array, [n.86, _87, ])
  let rec aux19.104: Unit = (i20.105: Int, state22.106: Int) {
    if (i20.105 == n.86) then {
      Unit
    } else {
      let new_state.107: Int = Apply(random1, [state22.106, ])
      let _108: Int = Int(65537)
      let res.109: Int = Apply(modulo7, [new_state.107, _108, ])
      let _110: Unit = Put arr.88[i20.105] = res.109
      let _111: Int = Int(1)
      let _112: Int = Add(i20.105, _111)
      Apply(aux19.104, [_112, res.109, ])
    }
  }
  let _113: Int = Int(0)
  let _114: Int = Int(12345)
  let _90: Unit = Apply(aux19.104, [_113, _114, ])
  let rec insert38.115: Unit = (arr39.116: Array(Int), i41.117: Int) {
    let _118: Int = Int(0)
    if (i41.117 == _118) then {
      Unit
    } else {
      let _119: Int = Int(1)
      let _120: Int = Sub(i41.117, _119)
      let _121: Int = Get arr39.116[_120]
      let _122: Int = Get arr39.116[i41.117]
      if (_121 <= _122) then {
        Unit
      } else {
        let tmp.123: Int = Get arr39.116[i41.117]
        let _124: Int = Int(1)
        let _125: Int = Sub(i41.117, _124)
        let _126: Int = Get arr39.116[_125]
        let _127: Unit = Put arr39.116[i41.117] = _126
        let _128: Int = Int(1)
        let _129: Int = Sub(i41.117, _128)
        let _130: Unit = Put arr39.116[_129] = tmp.123
        let _131: Int = Int(1)
        let _132: Int = Sub(i41.117, _131)
        Apply(insert38.115, [arr39.116, _132, ])
      }
    }
  }
  let rec aux60.133: Unit = (i61.134: Int) {
    if (i61.134 == n.86) then {
      Unit
    } else {
      let _135: Unit = Apply(insert38.115, [arr.88, i61.134, ])
      let _136: Int = Int(1)
      let _137: Int = Add(i61.134, _136)
      Apply(aux60.133, [_137, ])
    }
  }
  let _138: Int = Int(1)
  let _92: Unit = Apply(aux60.133, [_138, ])
  let rec aux73.139: Unit = (i74.140: Int) {
    if (i74.140 == n.86) then {
      Unit
    } else {
      let _141: Int = Get arr.88[i74.140]
      let _142: Unit = ExtApply(minimbt_print_int, [_141, ])
      let _143: Int = Int(32)
      let _144: Unit = ExtApply(minimbt_print_char, [_143, ])
      let _145: Int = Int(1)
      let _146: Int = Add(i74.140, _145)
      Apply(aux73.139, [_146, ])
    }
  }
  let _147: Int = Int(0)
  Apply(aux73.139, [_147, ])
}
Apply(main85, [])