// [Asm] pre_assigned_registers: Self(fref=f12) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main.96 ->   call main.96
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v13, Insn(iref=%3) -> v12, FnParam(fref=f4, fpref=$f.0) -> v2, BlockParam(bref=b3, bpref=$b.0) -> v10, FnParam(fref=f4, fpref=$f.2) -> v4, Insn(iref=%2) -> v11, Insn(iref=%1) -> v9, BlockParam(bref=b0, bpref=$b.0) -> v5, Self(fref=f4) -> v0, BlockParam(bref=b0, bpref=$b.1) -> v6, BlockParam(bref=b0, bpref=$b.2) -> v7, FnParam(fref=f4, fpref=$f.1) -> v3, Insn(iref=%5) -> v14, Insn(iref=%0) -> v8
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Asm] defs: [v18]
// [Asm] live_set: [v6, v5, v18, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v19, v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v6, v5, zero, a0, v7]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, v5, zero, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v12]
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, v5, zero, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v13]
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v6, v14, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v14]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v6]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move_origin: [v3]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v4]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [zero]
// [Asm] defined: v10 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of output.98"];
// [Asm]   r0 [label="v18 ← a0", color=green];
// [Asm]   r20 [label="v12 ← a0", color=green];
// [Asm]   r23 [label="v2 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="a2", color=blue];
// [Asm]   r26 [label="v8 ← a0", color=green];
// [Asm]   r27 [label="v10 ← a0", color=green];
// [Asm]   r6 [label="v11 ← a0", color=green];
// [Asm]   r13 [label="a6", color=blue];
// [Asm]   r4 [label="v7 ← s2", color=green];
// [Asm]   r1 [label="v6 ← s0", color=green];
// [Asm]   r11 [label="a4", color=blue];
// [Asm]   r7 [label="a0", color=blue];
// [Asm]   r10 [label="a3", color=blue];
// [Asm]   r22 [label="v14 ← a0", color=green];
// [Asm]   r14 [label="a7", color=blue];
// [Asm]   r8 [label="a1", color=blue];
// [Asm]   r5 [label="v19 ← a0", color=green];
// [Asm]   r15 [label="t0", color=blue];
// [Asm]   r24 [label="v3 ← a1", color=green];
// [Asm]   r25 [label="v4 ← a2", color=green];
// [Asm]   r2 [label="v5 ← s1", color=green];
// [Asm]   r16 [label="t1", color=blue];
// [Asm]   r18 [label="t3", color=blue];
// [Asm]   r19 [label="t4", color=blue];
// [Asm]   r17 [label="t2", color=blue];
// [Asm]   r21 [label="v13 ← a0", color=green];
// [Asm]   r12 [label="a5", color=blue];
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r7 -- r10;
// [Asm]   r9 -- r23;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r8 -- r23;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r23 -- r24;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r8;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r24;
// [Asm]   r7 -- r8;
// [Asm]   r24 -- r25;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r26;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r22;
// [Asm]   r7 -- r13;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r20;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r7 -- r9;
// [Asm]   r3 -- r22;
// [Asm]   r7 -- r17;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r23 -- r25;
// [Asm]   r7 -- r19;
// [Asm]   r2 -- r14;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r7 -- r15;
// [Asm]   r9 -- r24;
// [Asm]   r3 -- r20;
// [Asm]   r7 -- r11;
// [Asm]   r1 -- r25;
// [Asm]   r2 -- r21;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r4 -- r17;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r14;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r4 -- r26;
// [Asm]   r7 -- r12;
// [Asm]   r2 -- r3;
// [Asm]   r7 -- r14;
// [Asm]   r3 -- r23;
// [Asm]   r4 -- r19;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:v18-> 1:v6-> 2:v5-> 3:zero-> 4:v7-> 5:v19-> 6:v11-> 7:a0-> 8:a1-> 9:a2-> 10:a3-> 11:a4-> 12:a5-> 13:a6-> 14:a7-> 15:t0-> 16:t1-> 17:t2-> 18:t3-> 19:t4-> 20:v12-> 21:v13-> 26:v8-> 22:v14-> 23:v2-> 24:v3-> 25:v4-> 27:v10"
// [Asm]   comment = "v18<-a0;v12<-a0;v2<-a0;v8<-a0;v10<-a0;v11<-a0;v7<-s2;v6<-s0;v14<-a0;v19<-a0;v3<-a1;v4<-a2;v5<-s1;v13<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of output.98"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   slliw v18, v5, 2 ->   slliw a0, s1, 2
// [Asm] subst   add v19, v6, v18 ->   add a0, s0, a0
// [Asm] subst   lw v11, 0(v19) ->   lw a0, 0(a0)
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   addi v14, v5, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v5, v14 ->   mv s1, a0
// [Asm] subst   j .output.98_0 ->   j .output.98_0
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v5, v2 ->   mv s1, a0
// [Asm] subst   mv v6, v3 ->   mv s0, a1
// [Asm] subst   mv v7, v4 ->   mv s2, a2
// [Asm] subst   addi v8, v7, -1 ->   addi a0, s2, -1
// [Asm] subst   blt v8, v5, .output.98_2 ->   blt a0, s1, .output.98_2
// [Asm] subst   mv v10, zero ->   mv a0, zero
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v7, Insn(iref=%1) -> v4, Insn(iref=%3) -> v6, Mem(fref=f5, mref=m0) -> v2, Self(fref=f5) -> v0, Insn(iref=%5) -> v8, Insn(iref=%0) -> v3, Insn(iref=%2) -> v5
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [s11, zero, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [s11, zero, v13, v3]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, zero, a0, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, a1, zero, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v2, a2, a1, zero, a0, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, zero, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v6, zero, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, a1, v6, zero, a0, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v2, a2, a1, zero, a0, v3]
// [Asm] move_origin: [v6]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, zero, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, a0, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.96"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="v7 ← a0", color=green];
// [Asm]   r3 [label="a1", color=blue];
// [Asm]   r9 [label="a7", color=blue];
// [Asm]   r6 [label="a4", color=blue];
// [Asm]   r13 [label="t3", color=blue];
// [Asm]   r4 [label="a2", color=blue];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r11 [label="t1", color=blue];
// [Asm]   r7 [label="a5", color=blue];
// [Asm]   r10 [label="t0", color=blue];
// [Asm]   r14 [label="t4", color=blue];
// [Asm]   r8 [label="a6", color=blue];
// [Asm]   r5 [label="a3", color=blue];
// [Asm]   r15 [label="v3 ← s0", color=green];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="v13 ← a0", color=green];
// [Asm]   r18 [label="v5 ← a0", color=green];
// [Asm]   r19 [label="v6 ← a2", color=green];
// [Asm]   r17 [label="v2 ← s1", color=green];
// [Asm]   r21 [label="v8 ← a0", color=green];
// [Asm]   r12 [label="t2", color=blue];
// [Asm]   r0 -- r15;
// [Asm]   r17 -- r18;
// [Asm]   r3 -- r19;
// [Asm]   r0 -- r13;
// [Asm]   r13 -- r15;
// [Asm]   r1 -- r12;
// [Asm]   r3 -- r15;
// [Asm]   r6 -- r15;
// [Asm]   r14 -- r17;
// [Asm]   r11 -- r17;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r9 -- r15;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r4;
// [Asm]   r5 -- r17;
// [Asm]   r0 -- r17;
// [Asm]   r12 -- r15;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r10;
// [Asm]   r0 -- r14;
// [Asm]   r2 -- r10;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r17;
// [Asm]   r2 -- r16;
// [Asm]   r9 -- r17;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r1 -- r16;
// [Asm]   r0 -- r19;
// [Asm]   r17 -- r19;
// [Asm]   r0 -- r6;
// [Asm]   r7 -- r17;
// [Asm]   r1 -- r9;
// [Asm]   r15 -- r18;
// [Asm]   r2 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r15 -- r17;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r7 -- r15;
// [Asm]   r10 -- r15;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r0 -- r5;
// [Asm]   r13 -- r17;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r6 -- r17;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r17;
// [Asm]   r0 -- r10;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r0 -- r12;
// [Asm]   r11 -- r15;
// [Asm]   r0 -- r11;
// [Asm]   r4 -- r17;
// [Asm]   r1 -- r6;
// [Asm]   r12 -- r17;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r0 -- r7;
// [Asm]   r15 -- r16;
// [Asm]   r15 -- r20;
// [Asm]   r15 -- r19;
// [Asm]   r2 -- r3;
// [Asm]   r14 -- r15;
// [Asm]   r5 -- r15;
// [Asm]   r17 -- r20;
// [Asm]   r10 -- r17;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:a0-> 1:s11-> 2:zero-> 3:a1-> 4:a2-> 15:v3-> 17:v2-> 5:a3-> 6:a4-> 7:a5-> 8:a6-> 9:a7-> 10:t0-> 11:t1-> 12:t2-> 13:t3-> 14:t4-> 19:v6-> 16:v13-> 18:v5-> 20:v7-> 21:v8"
// [Asm]   comment = "v7<-a0;v3<-s0;v13<-a0;v5<-a0;v6<-a2;v2<-s1;v8<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.96"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call minimbt_read_int ->   call minimbt_read_int
// [Asm] subst   mv v3, a0 ->   mv s0, a0
// [Asm] subst   slliw v13, v3, 2 ->   slliw a0, s0, 2
// [Asm] subst   sub v2, s11, v13 ->   sub s1, s11, a0
// [Asm] subst   andi s11, v2, -8 ->   andi s11, s1, -8
// [Asm] subst   mv a1, v3 ->   mv a1, s0
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v2 ->   mv a1, s1
// [Asm] subst   mv a2, v3 ->   mv a2, s0
// [Asm] subst   call input.97 ->   call input.97
// [Asm] subst   addi v6, v3, -1 ->   addi a2, s0, -1
// [Asm] subst   mv a0, v2 ->   mv a0, s1
// [Asm] subst   mv a1, zero ->   mv a1, zero
// [Asm] subst   call quicksort.95 ->   call quicksort.95
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v2 ->   mv a1, s1
// [Asm] subst   mv a2, v3 ->   mv a2, s0
// [Asm] subst   call output.98 ->   call output.98
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Mem(fref=f2, mref=m7) -> v5, Insn(iref=%15) -> v29, BlockParam(bref=b20, bpref=$b.4) -> v19, Insn(iref=%33) -> v39, Insn(iref=%8) -> v14, Insn(iref=%10) -> v24, Insn(iref=%27) -> v44, Insn(iref=%14) -> v28, Insn(iref=%25) -> v42, BlockParam(bref=b26, bpref=$b.0) -> v22, Insn(iref=%4) -> v35, BlockParam(bref=b20, bpref=$b.1) -> v16, BlockParam(bref=b6, bpref=$b.0) -> v33, BlockParam(bref=b20, bpref=$b.3) -> v18, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%1) -> v10, Insn(iref=%11) -> v25, Insn(iref=%26) -> v43, Insn(iref=%6) -> v12, FnParam(fref=f2, fpref=$f.0) -> v2, Insn(iref=%31) -> v48, FnParam(fref=f2, fpref=$f.2) -> v4, Insn(iref=%28) -> v45, BlockParam(bref=b3, bpref=$b.0) -> v11, Insn(iref=%16) -> v30, Insn(iref=%24) -> v41, Self(fref=f2) -> v0, BlockParam(bref=b0, bpref=$b.0) -> v6, BlockParam(bref=b0, bpref=$b.1) -> v7, BlockParam(bref=b0, bpref=$b.2) -> v8, Insn(iref=%29) -> v46, BlockParam(bref=b8, bpref=$b.0) -> v23, Insn(iref=%5) -> v36, Insn(iref=%0) -> v9, Insn(iref=%19) -> v20, Insn(iref=%18) -> v32, Insn(iref=%3) -> v34, Insn(iref=%13) -> v27, BlockParam(bref=b20, bpref=$b.2) -> v17, Insn(iref=%7) -> v13, Insn(iref=%22) -> v38, Insn(iref=%17) -> v31, Insn(iref=%23) -> v40, Insn(iref=%20) -> v21, Insn(iref=%30) -> v47, Insn(iref=%21) -> v37, BlockParam(bref=b20, bpref=$b.0) -> v15, Insn(iref=%12) -> v26
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%21), BlockParam(bref=b20, bpref=$b.4)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b20, bpref=$b.0), Insn(iref=%19)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%0)])
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: [zero]
// [Asm] defined: v11 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v5, zero, v23, v8, v7, v6, s11]
// [Asm] move_origin: [v22]
// [Asm] defined: v23 is X
// [Asm] defs: [v87]
// [Asm] live_set: [v87, zero, v7, v8, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: v87 is X
// [Asm] defs: [v88]
// [Asm] live_set: [zero, v7, v8, v88, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: v88 is X
// [Asm] defs: [v12]
// [Asm] live_set: [zero, v7, v8, v6, v12, s11]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [zero, v13, v7, v8, v6, v12, s11]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero, v13, v7, v8, v6, v12]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero, v13, v7, v8, v6, v12, s11]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v6, v12, s11]
// [Asm] move_origin: []
// [Asm] defs: [v39]
// [Asm] live_set: [v16, v5, v18, zero, v7, v8, v19, v17, v6, s11, v39]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v16, v5, v18, zero, v7, v8, v19, v17, v6, v15, s11]
// [Asm] move_origin: [v39]
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v5, v18, zero, v7, v8, v19, v17, v6, v15, s11]
// [Asm] move_origin: [v16]
// [Asm] defs: []
// [Asm] live_set: [v16, v5, v18, zero, v7, v8, v19, v17, v6, v15, s11]
// [Asm] move_origin: [v17]
// [Asm] defs: []
// [Asm] live_set: [v16, v5, v18, zero, v7, v8, v19, v17, v6, v15, s11]
// [Asm] move_origin: [v18]
// [Asm] defs: []
// [Asm] live_set: [v16, v5, v18, zero, v7, v8, v19, v17, v6, v15, s11]
// [Asm] move_origin: [v19]
// [Asm] defs: []
// [Asm] live_set: [v16, v5, v18, zero, v7, v8, v19, v17, v6, v15, s11]
// [Asm] move_origin: []
// [Asm] defs: [v20]
// [Asm] live_set: [v16, v5, v18, zero, v20, v7, v8, v19, v17, v6, v15, s11]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v5, v18, zero, v7, v8, v19, v17, v6, v15, s11]
// [Asm] move_origin: []
// [Asm] defs: [v64]
// [Asm] live_set: [v16, v5, v18, zero, v7, v8, v19, v17, v6, v15, s11, v64]
// [Asm] move_origin: []
// [Asm] defined: v64 is X
// [Asm] defs: [v65]
// [Asm] live_set: [v16, v5, v18, zero, v7, v8, v19, v65, v17, v6, v15, s11]
// [Asm] move_origin: []
// [Asm] defined: v65 is X
// [Asm] defs: [v37]
// [Asm] live_set: [v16, v5, v18, zero, v7, v8, v19, v37, v6, v17, s11, v15]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v5, v18, zero, v7, v8, v19, v17, v6, v15, s11]
// [Asm] move_origin: []
// [Asm] defs: [v40]
// [Asm] live_set: [v16, v5, v7, v17, s11, v18, zero, v8, v19, v6, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: v40 is X
// [Asm] defs: [v41]
// [Asm] live_set: [v16, v5, v7, v41, v17, s11, v18, zero, v8, v19, v6, v15]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v5, v7, v17, s11, v18, zero, v8, v19, v6, v15]
// [Asm] move_origin: []
// [Asm] defs: [v43]
// [Asm] live_set: [v16, v5, v7, v17, v43, s11, v18, zero, v8, v19, v6, v15]
// [Asm] move_origin: []
// [Asm] defined: v43 is X
// [Asm] defs: [v57]
// [Asm] live_set: [v16, v5, v7, v17, v43, s11, v18, zero, v8, v19, v6, v15, v57]
// [Asm] move_origin: []
// [Asm] defined: v57 is X
// [Asm] defs: [v58]
// [Asm] live_set: [v16, v5, v58, v7, v17, v43, s11, v18, zero, v8, v19, v6, v15]
// [Asm] move_origin: []
// [Asm] defined: v58 is X
// [Asm] defs: [v44]
// [Asm] live_set: [v16, v5, v7, v17, v43, s11, v44, v18, zero, v8, v19, v6, v15]
// [Asm] move_origin: []
// [Asm] defined: v44 is X
// [Asm] defs: [v54]
// [Asm] live_set: [v16, v5, v7, v17, v43, s11, v44, v18, zero, v8, v19, v6, v15, v54]
// [Asm] move_origin: []
// [Asm] defined: v54 is X
// [Asm] defs: [v55]
// [Asm] live_set: [v16, v5, v7, v17, v43, s11, v44, v18, zero, v8, v19, v6, v15, v55]
// [Asm] move_origin: []
// [Asm] defined: v55 is X
// [Asm] defs: [v45]
// [Asm] live_set: [v16, v5, v7, v17, v43, s11, v44, v18, zero, v8, v45, v19, v6, v15]
// [Asm] move_origin: []
// [Asm] defined: v45 is X
// [Asm] defs: [v52]
// [Asm] live_set: [v16, v5, v7, v17, s11, v52, v44, v18, zero, v8, v45, v19, v6, v15]
// [Asm] move_origin: []
// [Asm] defined: v52 is X
// [Asm] defs: [v53]
// [Asm] live_set: [v16, v5, v53, v7, v17, s11, v44, v18, zero, v8, v45, v19, v6, v15]
// [Asm] move_origin: []
// [Asm] defined: v53 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v5, v18, zero, v7, v8, v19, v17, v6, s11, v15, v44]
// [Asm] move_origin: []
// [Asm] defs: [v50]
// [Asm] live_set: [v16, v5, v18, zero, v50, v7, v8, v19, v17, v6, s11, v15, v44]
// [Asm] move_origin: []
// [Asm] defined: v50 is X
// [Asm] defs: [v51]
// [Asm] live_set: [v16, v5, v18, zero, v7, v8, v19, v17, v6, s11, v15, v44, v51]
// [Asm] move_origin: []
// [Asm] defined: v51 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v5, v18, zero, v7, v8, v19, v17, v6, s11, v15]
// [Asm] move_origin: []
// [Asm] defs: [v48]
// [Asm] live_set: [v16, v5, v18, v48, zero, v7, v8, v19, v17, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: v48 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v16, v5, v18, zero, v7, v8, v19, v17, v6, v15, s11]
// [Asm] move_origin: [v48]
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v5, v18, zero, v7, v8, v19, v17, v6, v15, s11]
// [Asm] move_origin: [v16]
// [Asm] defs: []
// [Asm] live_set: [v16, v5, v18, zero, v7, v8, v19, v17, v6, v15, s11]
// [Asm] move_origin: [v17]
// [Asm] defs: []
// [Asm] live_set: [v16, v5, v18, zero, v7, v8, v19, v17, v6, v15, s11]
// [Asm] move_origin: [v18]
// [Asm] defs: []
// [Asm] live_set: [v16, v5, v18, zero, v7, v8, v19, v17, v6, v15, s11]
// [Asm] move_origin: [v19]
// [Asm] defs: []
// [Asm] live_set: [v16, v5, v18, zero, v7, v8, v19, v17, v6, v15, s11]
// [Asm] move_origin: []
// [Asm] defs: [v22]
// [Asm] live_set: [v5, zero, v22, v8, v7, v6, s11]
// [Asm] move_origin: [zero]
// [Asm] defined: v22 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v34]
// [Asm] live_set: [zero, v8, v7, v6, s11, v33, v34]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v8, v7, v6, s11, v33, v34]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v8, v7, v6, s11, v33, v34]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, a0, v8, v6, a1, s11, v33, v34]
// [Asm] move_origin: [v7]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [zero, a0, v8, a2, v6, a1, s11, v33]
// [Asm] move_origin: [v34]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v8, v6, s11, zero, v33, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v35]
// [Asm] live_set: [v6, s11, zero, v33, v8]
// [Asm] move_origin: [a0]
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [v6, s11, zero, v33, v8]
// [Asm] move_origin: []
// [Asm] defs: [v36]
// [Asm] live_set: [v36, v6, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [v36, v6, s11, zero, v8]
// [Asm] move_origin: [v6]
// [Asm] defs: [v7]
// [Asm] live_set: [v7, v6, s11, zero, v8]
// [Asm] move_origin: [v36]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, s11, zero, v8]
// [Asm] move_origin: [v8]
// [Asm] defs: []
// [Asm] live_set: [v7, v6, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v5, zero, v7, v8, v6, v15, s11, v12]
// [Asm] move_origin: [v7]
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v16, v5, zero, v7, v8, v6, v15, s11, v12]
// [Asm] move_origin: [v5]
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v16, v5, zero, v7, v8, v17, v6, v15, s11, v12]
// [Asm] move_origin: [v6]
// [Asm] defined: v17 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v16, v5, v18, zero, v7, v8, v17, v6, v15, s11, v12]
// [Asm] move_origin: [v8]
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v16, v5, v18, zero, v7, v8, v19, v17, v6, v15, s11]
// [Asm] move_origin: [v12]
// [Asm] defined: v19 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v5, zero, v8, v7, v6, s11, v24]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v5, zero, v8, v7, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v7, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: [v27]
// [Asm] live_set: [v5, zero, v27, v8, v7, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v78]
// [Asm] live_set: [v5, zero, v27, v78, v8, v7, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: v78 is X
// [Asm] defs: [v79]
// [Asm] live_set: [v5, zero, v79, v27, v7, v8, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: v79 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v5, zero, v27, v8, v7, v6, s11, v28]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: [v75]
// [Asm] live_set: [v5, v75, zero, v27, v8, v7, v6, s11, v28]
// [Asm] move_origin: []
// [Asm] defined: v75 is X
// [Asm] defs: [v76]
// [Asm] live_set: [v5, zero, v27, v8, v7, v6, s11, v28, v76]
// [Asm] move_origin: []
// [Asm] defined: v76 is X
// [Asm] defs: [v29]
// [Asm] live_set: [v5, zero, v29, v27, v8, v7, v6, s11, v28]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [v73]
// [Asm] live_set: [v5, zero, v29, v7, v8, v6, s11, v28, v73]
// [Asm] move_origin: []
// [Asm] defined: v73 is X
// [Asm] defs: [v74]
// [Asm] live_set: [v5, zero, v29, v7, v8, v6, v74, s11, v28]
// [Asm] move_origin: []
// [Asm] defined: v74 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v6, s11, v28]
// [Asm] move_origin: []
// [Asm] defs: [v71]
// [Asm] live_set: [v5, v71, zero, v7, v8, v6, s11, v28]
// [Asm] move_origin: []
// [Asm] defined: v71 is X
// [Asm] defs: [v72]
// [Asm] live_set: [v72, v5, zero, v7, v8, v6, s11, v28]
// [Asm] move_origin: []
// [Asm] defined: v72 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v5, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v32]
// [Asm] live_set: [v7, v32, v6, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: [v33]
// [Asm] live_set: [v7, v6, s11, zero, v33, v8]
// [Asm] move_origin: [v32]
// [Asm] defined: v33 is X
// [Asm] defs: [v9]
// [Asm] live_set: [zero, v8, v7, v6, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v6, s11, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, s11, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, s11, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, s11, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v4, v6, s11, zero, v7]
// [Asm] move_origin: [v3]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v6, s11, zero, v8]
// [Asm] move_origin: [v4]
// [Asm] defined: v8 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of quicksort.95"];
// [Asm]   r0 [label="v11 ← a0", color=green];
// [Asm]   r46 [label="a7", color=blue];
// [Asm]   r33 [label="v50 ← a6", color=green];
// [Asm]   r59 [label="v28 ← a3", color=green];
// [Asm]   r9 [label="v88 ← a0", color=green];
// [Asm]   r26 [label="v58 ← a7", color=green];
// [Asm]   r44 [label="a5", color=blue];
// [Asm]   r53 [label="v36 ← a0", color=green];
// [Asm]   r56 [label="v27 ← a0", color=green];
// [Asm]   r10 [label="v12 ← a0", color=green];
// [Asm]   r5 [label="v7 ← a2", color=green];
// [Asm]   r54 [label="v24 ← a0", color=green];
// [Asm]   r24 [label="v43 ← a6", color=green];
// [Asm]   r43 [label="a4", color=blue];
// [Asm]   r31 [label="v52 ← a6", color=green];
// [Asm]   r39 [label="v33 ← s2", color=green];
// [Asm]   r17 [label="v15 ← a3", color=green];
// [Asm]   r52 [label="v35 ← a0", color=green];
// [Asm]   r65 [label="v71 ← a0", color=green];
// [Asm]   r20 [label="v65 ← a6", color=green];
// [Asm]   r61 [label="v76 ← a4", color=green];
// [Asm]   r23 [label="v41 ← a6", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r67 [label="v32 ← a0", color=green];
// [Asm]   r27 [label="v44 ← a7", color=green];
// [Asm]   r62 [label="v29 ← a4", color=green];
// [Asm]   r40 [label="a1", color=blue];
// [Asm]   r11 [label="v13 ← a3", color=green];
// [Asm]   r58 [label="v79 ← a3", color=green];
// [Asm]   r34 [label="v51 ← a6", color=green];
// [Asm]   r14 [label="v18 ← a4", color=green];
// [Asm]   r51 [label="t4", color=blue];
// [Asm]   r55 [label="v25 ← a0", color=green];
// [Asm]   r16 [label="v17 ← a5", color=green];
// [Asm]   r21 [label="v37 ← a6", color=green];
// [Asm]   r60 [label="v75 ← a4", color=green];
// [Asm]   r38 [label="v34 ← a3", color=green];
// [Asm]   r47 [label="t0", color=blue];
// [Asm]   r6 [label="v6 ← s1", color=green];
// [Asm]   r13 [label="v16 ← a1", color=green];
// [Asm]   r42 [label="a3", color=blue];
// [Asm]   r4 [label="v8 ← s0", color=green];
// [Asm]   r29 [label="v55 ← t0", color=green];
// [Asm]   r35 [label="v48 ← a3", color=green];
// [Asm]   r7 [label="s11", color=blue];
// [Asm]   r64 [label="v74 ← a0", color=green];
// [Asm]   r8 [label="v87 ← a0", color=green];
// [Asm]   r36 [label="v22 ← a0", color=green];
// [Asm]   r66 [label="v72 ← a0", color=green];
// [Asm]   r32 [label="v53 ← a6", color=green];
// [Asm]   r15 [label="v19 ← a0", color=green];
// [Asm]   r49 [label="t2", color=blue];
// [Asm]   r57 [label="v78 ← a3", color=green];
// [Asm]   r68 [label="v9 ← a0", color=green];
// [Asm]   r70 [label="v3 ← a1", color=green];
// [Asm]   r12 [label="v39 ← a3", color=green];
// [Asm]   r48 [label="t1", color=blue];
// [Asm]   r37 [label="a0", color=blue];
// [Asm]   r1 [label="v23 ← a0", color=green];
// [Asm]   r28 [label="v54 ← t0", color=green];
// [Asm]   r41 [label="a2", color=blue];
// [Asm]   r71 [label="v4 ← a3", color=green];
// [Asm]   r69 [label="v2 ← a0", color=green];
// [Asm]   r22 [label="v40 ← a6", color=green];
// [Asm]   r50 [label="t3", color=blue];
// [Asm]   r30 [label="v45 ← t0", color=green];
// [Asm]   r45 [label="a6", color=blue];
// [Asm]   r25 [label="v57 ← a7", color=green];
// [Asm]   r63 [label="v73 ← a0", color=green];
// [Asm]   r2 [label="v5 ← a1", color=green];
// [Asm]   r18 [label="v20 ← a6", color=green];
// [Asm]   r19 [label="v64 ← a6", color=green];
// [Asm]   r3 -- r52;
// [Asm]   r2 -- r31;
// [Asm]   r6 -- r70;
// [Asm]   r6 -- r48;
// [Asm]   r16 -- r20;
// [Asm]   r3 -- r15;
// [Asm]   r4 -- r51;
// [Asm]   r3 -- r16;
// [Asm]   r39 -- r41;
// [Asm]   r3 -- r53;
// [Asm]   r15 -- r31;
// [Asm]   r6 -- r68;
// [Asm]   r59 -- r66;
// [Asm]   r7 -- r25;
// [Asm]   r3 -- r62;
// [Asm]   r4 -- r64;
// [Asm]   r4 -- r44;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r4 -- r48;
// [Asm]   r5 -- r65;
// [Asm]   r27 -- r28;
// [Asm]   r2 -- r7;
// [Asm]   r3 -- r26;
// [Asm]   r27 -- r34;
// [Asm]   r3 -- r70;
// [Asm]   r3 -- r31;
// [Asm]   r7 -- r62;
// [Asm]   r15 -- r25;
// [Asm]   r7 -- r32;
// [Asm]   r7 -- r35;
// [Asm]   r17 -- r19;
// [Asm]   r4 -- r57;
// [Asm]   r14 -- r34;
// [Asm]   r3 -- r48;
// [Asm]   r3 -- r8;
// [Asm]   r5 -- r35;
// [Asm]   r13 -- r30;
// [Asm]   r5 -- r6;
// [Asm]   r13 -- r33;
// [Asm]   r59 -- r65;
// [Asm]   r62 -- r64;
// [Asm]   r59 -- r60;
// [Asm]   r3 -- r39;
// [Asm]   r56 -- r57;
// [Asm]   r16 -- r33;
// [Asm]   r69 -- r71;
// [Asm]   r7 -- r59;
// [Asm]   r5 -- r58;
// [Asm]   r5 -- r32;
// [Asm]   r5 -- r54;
// [Asm]   r5 -- r60;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r29;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r33;
// [Asm]   r3 -- r71;
// [Asm]   r3 -- r17;
// [Asm]   r39 -- r40;
// [Asm]   r6 -- r50;
// [Asm]   r3 -- r35;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r39 -- r49;
// [Asm]   r24 -- r25;
// [Asm]   r17 -- r27;
// [Asm]   r6 -- r56;
// [Asm]   r5 -- r36;
// [Asm]   r6 -- r25;
// [Asm]   r59 -- r61;
// [Asm]   r4 -- r13;
// [Asm]   r39 -- r47;
// [Asm]   r7 -- r44;
// [Asm]   r16 -- r30;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r62;
// [Asm]   r6 -- r62;
// [Asm]   r14 -- r26;
// [Asm]   r2 -- r4;
// [Asm]   r6 -- r41;
// [Asm]   r16 -- r32;
// [Asm]   r15 -- r35;
// [Asm]   r7 -- r20;
// [Asm]   r13 -- r16;
// [Asm]   r5 -- r19;
// [Asm]   r6 -- r46;
// [Asm]   r6 -- r53;
// [Asm]   r17 -- r24;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r5 -- r11;
// [Asm]   r24 -- r29;
// [Asm]   r5 -- r38;
// [Asm]   r24 -- r26;
// [Asm]   r16 -- r18;
// [Asm]   r6 -- r59;
// [Asm]   r13 -- r19;
// [Asm]   r10 -- r16;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r19;
// [Asm]   r7 -- r22;
// [Asm]   r14 -- r33;
// [Asm]   r4 -- r55;
// [Asm]   r3 -- r65;
// [Asm]   r7 -- r19;
// [Asm]   r2 -- r14;
// [Asm]   r14 -- r25;
// [Asm]   r38 -- r40;
// [Asm]   r13 -- r14;
// [Asm]   r5 -- r68;
// [Asm]   r3 -- r29;
// [Asm]   r7 -- r36;
// [Asm]   r3 -- r66;
// [Asm]   r15 -- r34;
// [Asm]   r4 -- r36;
// [Asm]   r15 -- r24;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r60;
// [Asm]   r4 -- r63;
// [Asm]   r15 -- r33;
// [Asm]   r6 -- r39;
// [Asm]   r5 -- r25;
// [Asm]   r12 -- r16;
// [Asm]   r6 -- r38;
// [Asm]   r4 -- r10;
// [Asm]   r15 -- r19;
// [Asm]   r39 -- r48;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   r7 -- r46;
// [Asm]   r6 -- r52;
// [Asm]   r2 -- r58;
// [Asm]   r5 -- r12;
// [Asm]   r2 -- r62;
// [Asm]   r3 -- r67;
// [Asm]   r14 -- r20;
// [Asm]   r4 -- r41;
// [Asm]   r6 -- r36;
// [Asm]   r5 -- r63;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r37 -- r38;
// [Asm]   r69 -- r70;
// [Asm]   r3 -- r56;
// [Asm]   r7 -- r56;
// [Asm]   r4 -- r58;
// [Asm]   r6 -- r66;
// [Asm]   r4 -- r54;
// [Asm]   r10 -- r13;
// [Asm]   r3 -- r32;
// [Asm]   r27 -- r32;
// [Asm]   r6 -- r54;
// [Asm]   r39 -- r42;
// [Asm]   r6 -- r63;
// [Asm]   r2 -- r16;
// [Asm]   r13 -- r28;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r18;
// [Asm]   r17 -- r33;
// [Asm]   r4 -- r35;
// [Asm]   r37 -- r48;
// [Asm]   r41 -- r69;
// [Asm]   r14 -- r30;
// [Asm]   r14 -- r28;
// [Asm]   r2 -- r59;
// [Asm]   r2 -- r54;
// [Asm]   r14 -- r19;
// [Asm]   r4 -- r33;
// [Asm]   r3 -- r30;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r43;
// [Asm]   r7 -- r63;
// [Asm]   r6 -- r10;
// [Asm]   r4 -- r28;
// [Asm]   r3 -- r40;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r3 -- r27;
// [Asm]   r3 -- r69;
// [Asm]   r13 -- r18;
// [Asm]   r5 -- r7;
// [Asm]   r59 -- r64;
// [Asm]   r13 -- r22;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r4 -- r49;
// [Asm]   r16 -- r23;
// [Asm]   r7 -- r54;
// [Asm]   r14 -- r22;
// [Asm]   r2 -- r23;
// [Asm]   r6 -- r32;
// [Asm]   r17 -- r20;
// [Asm]   r10 -- r17;
// [Asm]   r37 -- r50;
// [Asm]   r13 -- r24;
// [Asm]   r16 -- r31;
// [Asm]   r7 -- r52;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r15 -- r26;
// [Asm]   r6 -- r49;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r23;
// [Asm]   r15 -- r22;
// [Asm]   r56 -- r59;
// [Asm]   r13 -- r26;
// [Asm]   r17 -- r26;
// [Asm]   r16 -- r19;
// [Asm]   r7 -- r71;
// [Asm]   r4 -- r20;
// [Asm]   r3 -- r47;
// [Asm]   r4 -- r30;
// [Asm]   r2 -- r55;
// [Asm]   r16 -- r28;
// [Asm]   r6 -- r12;
// [Asm]   r13 -- r25;
// [Asm]   r6 -- r24;
// [Asm]   r24 -- r30;
// [Asm]   r2 -- r63;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r7 -- r37;
// [Asm]   r6 -- r37;
// [Asm]   r2 -- r57;
// [Asm]   r4 -- r11;
// [Asm]   r15 -- r17;
// [Asm]   r7 -- r60;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r7 -- r33;
// [Asm]   r6 -- r28;
// [Asm]   r3 -- r55;
// [Asm]   r7 -- r11;
// [Asm]   r7 -- r47;
// [Asm]   r6 -- r67;
// [Asm]   r4 -- r47;
// [Asm]   r7 -- r39;
// [Asm]   r7 -- r43;
// [Asm]   r40 -- r41;
// [Asm]   r37 -- r45;
// [Asm]   r4 -- r39;
// [Asm]   r12 -- r14;
// [Asm]   r7 -- r50;
// [Asm]   r3 -- r54;
// [Asm]   r7 -- r68;
// [Asm]   r1 -- r3;
// [Asm]   r5 -- r30;
// [Asm]   r7 -- r69;
// [Asm]   r4 -- r52;
// [Asm]   r37 -- r41;
// [Asm]   r4 -- r19;
// [Asm]   r2 -- r64;
// [Asm]   r3 -- r44;
// [Asm]   r4 -- r53;
// [Asm]   r7 -- r51;
// [Asm]   r37 -- r39;
// [Asm]   r2 -- r32;
// [Asm]   r5 -- r21;
// [Asm]   r4 -- r68;
// [Asm]   r5 -- r33;
// [Asm]   r37 -- r51;
// [Asm]   r4 -- r34;
// [Asm]   r6 -- r35;
// [Asm]   r5 -- r10;
// [Asm]   r13 -- r32;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r3 -- r42;
// [Asm]   r5 -- r22;
// [Asm]   r5 -- r59;
// [Asm]   r5 -- r18;
// [Asm]   r13 -- r31;
// [Asm]   r41 -- r70;
// [Asm]   r5 -- r29;
// [Asm]   r3 -- r37;
// [Asm]   r3 -- r68;
// [Asm]   r7 -- r27;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r31;
// [Asm]   r2 -- r34;
// [Asm]   r5 -- r31;
// [Asm]   r16 -- r29;
// [Asm]   r2 -- r25;
// [Asm]   r6 -- r60;
// [Asm]   r5 -- r62;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r57;
// [Asm]   r4 -- r67;
// [Asm]   r39 -- r51;
// [Asm]   r4 -- r65;
// [Asm]   r7 -- r38;
// [Asm]   r2 -- r12;
// [Asm]   r39 -- r45;
// [Asm]   r5 -- r67;
// [Asm]   r4 -- r56;
// [Asm]   r6 -- r64;
// [Asm]   r4 -- r25;
// [Asm]   r5 -- r55;
// [Asm]   r3 -- r49;
// [Asm]   r2 -- r36;
// [Asm]   r15 -- r23;
// [Asm]   r5 -- r66;
// [Asm]   r13 -- r35;
// [Asm]   r16 -- r21;
// [Asm]   r6 -- r55;
// [Asm]   r17 -- r31;
// [Asm]   r6 -- r23;
// [Asm]   r7 -- r42;
// [Asm]   r6 -- r65;
// [Asm]   r56 -- r58;
// [Asm]   r16 -- r24;
// [Asm]   r3 -- r46;
// [Asm]   r15 -- r30;
// [Asm]   r7 -- r65;
// [Asm]   r7 -- r67;
// [Asm]   r14 -- r15;
// [Asm]   r17 -- r34;
// [Asm]   r27 -- r31;
// [Asm]   r14 -- r32;
// [Asm]   r3 -- r19;
// [Asm]   r3 -- r45;
// [Asm]   r7 -- r29;
// [Asm]   r13 -- r15;
// [Asm]   r2 -- r26;
// [Asm]   r37 -- r43;
// [Asm]   r17 -- r29;
// [Asm]   r4 -- r23;
// [Asm]   r3 -- r38;
// [Asm]   r7 -- r24;
// [Asm]   r5 -- r71;
// [Asm]   r30 -- r32;
// [Asm]   r6 -- r33;
// [Asm]   r6 -- r30;
// [Asm]   r2 -- r65;
// [Asm]   r37 -- r47;
// [Asm]   r7 -- r48;
// [Asm]   r6 -- r22;
// [Asm]   r17 -- r25;
// [Asm]   r7 -- r49;
// [Asm]   r24 -- r28;
// [Asm]   r6 -- r20;
// [Asm]   r3 -- r50;
// [Asm]   r14 -- r35;
// [Asm]   r7 -- r17;
// [Asm]   r3 -- r57;
// [Asm]   r6 -- r27;
// [Asm]   r4 -- r15;
// [Asm]   r39 -- r46;
// [Asm]   r12 -- r13;
// [Asm]   r5 -- r28;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r13 -- r23;
// [Asm]   r4 -- r32;
// [Asm]   r14 -- r21;
// [Asm]   r7 -- r15;
// [Asm]   r6 -- r57;
// [Asm]   r16 -- r35;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r13 -- r17;
// [Asm]   r5 -- r56;
// [Asm]   r5 -- r61;
// [Asm]   r7 -- r41;
// [Asm]   r2 -- r17;
// [Asm]   r37 -- r49;
// [Asm]   r2 -- r30;
// [Asm]   r5 -- r39;
// [Asm]   r27 -- r33;
// [Asm]   r7 -- r57;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r35;
// [Asm]   r59 -- r62;
// [Asm]   r4 -- r6;
// [Asm]   r7 -- r12;
// [Asm]   r15 -- r20;
// [Asm]   r7 -- r14;
// [Asm]   r56 -- r60;
// [Asm]   r59 -- r63;
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r71;
// [Asm]   r6 -- r21;
// [Asm]   r4 -- r38;
// [Asm]   r37 -- r46;
// [Asm]   r4 -- r66;
// [Asm]   r17 -- r21;
// [Asm]   r16 -- r25;
// [Asm]   r7 -- r21;
// [Asm]   r6 -- r47;
// [Asm]   r14 -- r27;
// [Asm]   r14 -- r16;
// [Asm]   r3 -- r43;
// [Asm]   r7 -- r40;
// [Asm]   r27 -- r29;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r3 -- r60;
// [Asm]   r30 -- r31;
// [Asm]   r6 -- r29;
// [Asm]   r7 -- r53;
// [Asm]   r2 -- r10;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r39 -- r50;
// [Asm]   r4 -- r40;
// [Asm]   r4 -- r42;
// [Asm]   r3 -- r51;
// [Asm]   r3 -- r34;
// [Asm]   r16 -- r17;
// [Asm]   r27 -- r30;
// [Asm]   r37 -- r40;
// [Asm]   r37 -- r42;
// [Asm]   r4 -- r21;
// [Asm]   r16 -- r34;
// [Asm]   r6 -- r13;
// [Asm]   r15 -- r18;
// [Asm]   r7 -- r34;
// [Asm]   r2 -- r33;
// [Asm]   r7 -- r55;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r43;
// [Asm]   r7 -- r10;
// [Asm]   r17 -- r22;
// [Asm]   r24 -- r27;
// [Asm]   r7 -- r70;
// [Asm]   r40 -- r69;
// [Asm]   r70 -- r71;
// [Asm]   r6 -- r31;
// [Asm]   r7 -- r61;
// [Asm]   r6 -- r45;
// [Asm]   r4 -- r50;
// [Asm]   r4 -- r8;
// [Asm]   r5 -- r14;
// [Asm]   r14 -- r31;
// [Asm]   r3 -- r61;
// [Asm]   r2 -- r24;
// [Asm]   r13 -- r21;
// [Asm]   r7 -- r8;
// [Asm]   r15 -- r28;
// [Asm]   r13 -- r29;
// [Asm]   r6 -- r61;
// [Asm]   r4 -- r9;
// [Asm]   r3 -- r58;
// [Asm]   r16 -- r22;
// [Asm]   r16 -- r27;
// [Asm]   r5 -- r34;
// [Asm]   r7 -- r64;
// [Asm]   r2 -- r61;
// [Asm]   r6 -- r58;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r17 -- r18;
// [Asm]   r4 -- r24;
// [Asm]   r14 -- r18;
// [Asm]   r14 -- r17;
// [Asm]   r6 -- r15;
// [Asm]   r15 -- r29;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r18;
// [Asm]   r4 -- r37;
// [Asm]   r7 -- r45;
// [Asm]   r6 -- r44;
// [Asm]   r12 -- r15;
// [Asm]   r14 -- r23;
// [Asm]   r62 -- r63;
// [Asm]   r4 -- r59;
// [Asm]   r3 -- r12;
// [Asm]   r7 -- r26;
// [Asm]   r5 -- r13;
// [Asm]   r7 -- r13;
// [Asm]   r39 -- r43;
// [Asm]   r6 -- r51;
// [Asm]   r3 -- r28;
// [Asm]   r7 -- r30;
// [Asm]   r14 -- r29;
// [Asm]   r16 -- r26;
// [Asm]   r14 -- r24;
// [Asm]   r7 -- r9;
// [Asm]   r6 -- r26;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r40;
// [Asm]   r15 -- r27;
// [Asm]   r4 -- r60;
// [Asm]   r13 -- r20;
// [Asm]   r7 -- r66;
// [Asm]   r15 -- r32;
// [Asm]   r7 -- r28;
// [Asm]   r56 -- r61;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r34;
// [Asm]   r5 -- r64;
// [Asm]   r39 -- r44;
// [Asm]   r17 -- r23;
// [Asm]   r4 -- r46;
// [Asm]   r13 -- r34;
// [Asm]   r4 -- r45;
// [Asm]   r15 -- r21;
// [Asm]   r5 -- r37;
// [Asm]   r2 -- r56;
// [Asm]   r37 -- r44;
// [Asm]   r3 -- r64;
// [Asm]   r2 -- r66;
// [Asm]   r6 -- r42;
// [Asm]   r2 -- r21;
// [Asm]   r3 -- r41;
// [Asm]   r56 -- r62;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r7 -- r58;
// [Asm]   r39 -- r52;
// [Asm]   r3 -- r59;
// [Asm]   r7 -- r31;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r38 -- r39;
// [Asm]   r17 -- r30;
// [Asm]   r7 -- r23;
// [Asm]   r17 -- r32;
// [Asm]   r2 -- r19;
// [Asm]   r4 -- r26;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r63;
// [Asm]   r17 -- r28;
// [Asm]   r13 -- r27;
// [Asm]   r4 -- r61;
// [Asm]   r5 -- r15;
// [Asm]   r10 -- r14;
// [Asm]   comment = "0:v11-> 1:v23-> 2:v5-> 3:zero-> 4:v8-> 5:v7-> 6:v6-> 7:s11-> 10:v12-> 11:v13-> 17:v15-> 13:v16-> 14:v18-> 15:v19-> 16:v17-> 18:v20-> 19:v64-> 20:v65-> 21:v37-> 22:v40-> 23:v41-> 24:v43-> 25:v57-> 26:v58-> 27:v44-> 28:v54-> 29:v55-> 30:v45-> 31:v52-> 32:v53-> 33:v50-> 34:v51-> 12:v39-> 35:v48-> 54:v24-> 55:v25-> 56:v27-> 57:v78-> 58:v79-> 59:v28-> 60:v75-> 61:v76-> 62:v29-> 63:v73-> 64:v74-> 65:v71-> 66:v72-> 8:v87-> 9:v88-> 36:v22-> 37:a0-> 38:v34-> 39:v33-> 40:a1-> 41:a2-> 42:a3-> 43:a4-> 44:a5-> 45:a6-> 46:a7-> 47:t0-> 48:t1-> 49:t2-> 50:t3-> 51:t4-> 52:v35-> 67:v32-> 68:v9-> 53:v36-> 69:v2-> 70:v3-> 71:v4"
// [Asm]   comment = "v11<-a0;v50<-a6;v28<-a3;v88<-a0;v58<-a7;v36<-a0;v27<-a0;v12<-a0;v7<-a2;v24<-a0;v43<-a6;v52<-a6;v33<-s2;v15<-a3;v35<-a0;v71<-a0;v65<-a6;v76<-a4;v41<-a6;v32<-a0;v44<-a7;v29<-a4;v13<-a3;v79<-a3;v51<-a6;v18<-a4;v25<-a0;v17<-a5;v37<-a6;v75<-a4;v34<-a3;v6<-s1;v16<-a1;v8<-s0;v55<-t0;v48<-a3;v74<-a0;v87<-a0;v22<-a0;v72<-a0;v53<-a6;v19<-a0;v78<-a3;v9<-a0;v3<-a1;v39<-a3;v23<-a0;v54<-t0;v4<-a3;v2<-a0;v40<-a6;v45<-t0;v57<-a7;v73<-a0;v5<-a1;v20<-a6;v64<-a6;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of quicksort.95"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v11, zero ->   mv a0, zero
// [Asm] subst   slliw v87, v8, 2 ->   slliw a0, s0, 2
// [Asm] subst   add v88, v6, v87 ->   add a0, s1, a0
// [Asm] subst   lw v12, 0(v88) ->   lw a0, 0(a0)
// [Asm] subst   addi v13, v7, -1 ->   addi a3, a2, -1
// [Asm] subst   addi v5, s11, -4 ->   addi a1, s11, -4
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a1, -8
// [Asm] subst   sw v13, 0(v5) ->   sw a3, 0(a1)
// [Asm] subst   addi v39, v15, 1 ->   addi a3, a3, 1
// [Asm] subst   j .quicksort.95_20 ->   j .quicksort.95_20
// [Asm] subst   addi v20, v18, -1 ->   addi a6, a4, -1
// [Asm] subst   blt v20, v15, .quicksort.95_22 ->   blt a6, a3, .quicksort.95_22
// [Asm] subst   slliw v64, v15, 2 ->   slliw a6, a3, 2
// [Asm] subst   add v65, v17, v64 ->   add a6, a5, a6
// [Asm] subst   lw v37, 0(v65) ->   lw a6, 0(a6)
// [Asm] subst   blt v19, v37, .quicksort.95_24 ->   blt a0, a6, .quicksort.95_24
// [Asm] subst   lw v40, 0(v16) ->   lw a6, 0(a1)
// [Asm] subst   addi v41, v40, 1 ->   addi a6, a6, 1
// [Asm] subst   sw v41, 0(v16) ->   sw a6, 0(a1)
// [Asm] subst   lw v43, 0(v16) ->   lw a6, 0(a1)
// [Asm] subst   slliw v57, v43, 2 ->   slliw a7, a6, 2
// [Asm] subst   add v58, v17, v57 ->   add a7, a5, a7
// [Asm] subst   lw v44, 0(v58) ->   lw a7, 0(a7)
// [Asm] subst   slliw v54, v15, 2 ->   slliw t0, a3, 2
// [Asm] subst   add v55, v17, v54 ->   add t0, a5, t0
// [Asm] subst   lw v45, 0(v55) ->   lw t0, 0(t0)
// [Asm] subst   slliw v52, v43, 2 ->   slliw a6, a6, 2
// [Asm] subst   add v53, v17, v52 ->   add a6, a5, a6
// [Asm] subst   sw v45, 0(v53) ->   sw t0, 0(a6)
// [Asm] subst   slliw v50, v15, 2 ->   slliw a6, a3, 2
// [Asm] subst   add v51, v17, v50 ->   add a6, a5, a6
// [Asm] subst   sw v44, 0(v51) ->   sw a7, 0(a6)
// [Asm] subst   addi v48, v15, 1 ->   addi a3, a3, 1
// [Asm] subst   j .quicksort.95_20 ->   j .quicksort.95_20
// [Asm] subst   mv v22, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] subst   addi v34, v33, -1 ->   addi a3, s2, -1
// [Asm] subst   mv a0, v6 ->   mv a0, s1
// [Asm] subst   mv a1, v7 ->   mv a1, a2
// [Asm] subst   mv a2, v34 ->   mv a2, a3
// [Asm] subst   call quicksort.95 ->   call quicksort.95
// [Asm] subst   addi v36, v33, 1 ->   addi a0, s2, 1
// [Asm] subst   mv v7, v36 ->   mv a2, a0
// [Asm] subst   j .quicksort.95_0 ->   j .quicksort.95_0
// [Asm] subst   mv v15, v7 ->   mv a3, a2
// [Asm] subst   mv v17, v6 ->   mv a5, s1
// [Asm] subst   mv v18, v8 ->   mv a4, s0
// [Asm] subst   lw v24, 0(v5) ->   lw a0, 0(a1)
// [Asm] subst   addi v25, v24, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v25, 0(v5) ->   sw a0, 0(a1)
// [Asm] subst   lw v27, 0(v5) ->   lw a0, 0(a1)
// [Asm] subst   slliw v78, v27, 2 ->   slliw a3, a0, 2
// [Asm] subst   add v79, v6, v78 ->   add a3, s1, a3
// [Asm] subst   lw v28, 0(v79) ->   lw a3, 0(a3)
// [Asm] subst   slliw v75, v8, 2 ->   slliw a4, s0, 2
// [Asm] subst   add v76, v6, v75 ->   add a4, s1, a4
// [Asm] subst   lw v29, 0(v76) ->   lw a4, 0(a4)
// [Asm] subst   slliw v73, v27, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v74, v6, v73 ->   add a0, s1, a0
// [Asm] subst   sw v29, 0(v74) ->   sw a4, 0(a0)
// [Asm] subst   slliw v71, v8, 2 ->   slliw a0, s0, 2
// [Asm] subst   add v72, v6, v71 ->   add a0, s1, a0
// [Asm] subst   sw v28, 0(v72) ->   sw a3, 0(a0)
// [Asm] subst   lw v32, 0(v5) ->   lw a0, 0(a1)
// [Asm] subst   mv v33, v32 ->   mv s2, a0
// [Asm] subst   addi v9, v8, -1 ->   addi a0, s0, -1
// [Asm] subst   blt v9, v7, .quicksort.95_2 ->   blt a0, a2, .quicksort.95_2
// [Asm] subst   mv v4, a2 ->   mv a3, a2
// [Asm] subst   mv v6, v2 ->   mv s1, a0
// [Asm] subst   mv v7, v3 ->   mv a2, a1
// [Asm] subst   mv v8, v4 ->   mv s0, a3
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v13, FnParam(fref=f3, fpref=$f.2) -> v4, Insn(iref=%3) -> v12, FnParam(fref=f3, fpref=$f.1) -> v3, BlockParam(bref=b3, bpref=$b.0) -> v10, Insn(iref=%2) -> v11, Insn(iref=%1) -> v9, BlockParam(bref=b0, bpref=$b.0) -> v5, BlockParam(bref=b0, bpref=$b.1) -> v6, FnParam(fref=f3, fpref=$f.0) -> v2, BlockParam(bref=b0, bpref=$b.2) -> v7, Self(fref=f3) -> v0, Insn(iref=%0) -> v8
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, v5, zero, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v6, v5, zero, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v11, v6, v5, v15, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v6, v5, v16, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v6, zero, v13, v7]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v13]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v6]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move_origin: [v3]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v4]
// [Asm] defined: v7 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [zero]
// [Asm] defined: v10 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of input.97"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="v13 ← a0", color=green];
// [Asm]   r23 [label="v4 ← a2", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="a5", color=blue];
// [Asm]   r6 [label="a2", color=blue];
// [Asm]   r13 [label="t1", color=blue];
// [Asm]   r4 [label="v7 ← s2", color=green];
// [Asm]   r1 [label="v6 ← s0", color=green];
// [Asm]   r11 [label="a7", color=blue];
// [Asm]   r7 [label="a3", color=blue];
// [Asm]   r10 [label="a6", color=blue];
// [Asm]   r22 [label="v3 ← a1", color=green];
// [Asm]   r14 [label="t2", color=blue];
// [Asm]   r8 [label="a4", color=blue];
// [Asm]   r5 [label="a1", color=blue];
// [Asm]   r15 [label="t3", color=blue];
// [Asm]   r24 [label="v8 ← a0", color=green];
// [Asm]   r25 [label="v10 ← a0", color=green];
// [Asm]   r2 [label="v5 ← s1", color=green];
// [Asm]   r16 [label="t4", color=blue];
// [Asm]   r18 [label="v15 ← a1", color=green];
// [Asm]   r19 [label="v16 ← a1", color=green];
// [Asm]   r21 [label="v2 ← a0", color=green];
// [Asm]   r17 [label="v11 ← a0", color=green];
// [Asm]   r12 [label="t0", color=blue];
// [Asm]   r4 -- r9;
// [Asm]   r4 -- r19;
// [Asm]   r1 -- r24;
// [Asm]   r6 -- r21;
// [Asm]   r4 -- r13;
// [Asm]   r0 -- r15;
// [Asm]   r17 -- r18;
// [Asm]   r3 -- r19;
// [Asm]   r0 -- r13;
// [Asm]   r4 -- r16;
// [Asm]   r5 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r16;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r23;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r0 -- r14;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r1 -- r15;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r20;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r3 -- r24;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r18;
// [Asm]   r0 -- r16;
// [Asm]   r3 -- r5;
// [Asm]   r17 -- r19;
// [Asm]   r21 -- r23;
// [Asm]   r3 -- r22;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r8;
// [Asm]   r3 -- r13;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r22 -- r23;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r0 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r8;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r4 -- r17;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r21 -- r22;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r24;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r0 -- r7;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r23;
// [Asm]   comment = "0:a0-> 1:v6-> 2:v5-> 3:zero-> 4:v7-> 5:a1-> 6:a2-> 7:a3-> 8:a4-> 9:a5-> 10:a6-> 11:a7-> 12:t0-> 13:t1-> 14:t2-> 15:t3-> 16:t4-> 17:v11-> 18:v15-> 19:v16-> 24:v8-> 20:v13-> 21:v2-> 22:v3-> 23:v4-> 25:v10"
// [Asm]   comment = "v13<-a0;v4<-a2;v7<-s2;v6<-s0;v3<-a1;v8<-a0;v10<-a0;v5<-s1;v15<-a1;v16<-a1;v2<-a0;v11<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of input.97"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call minimbt_read_int ->   call minimbt_read_int
// [Asm] subst   slliw v15, v5, 2 ->   slliw a1, s1, 2
// [Asm] subst   add v16, v6, v15 ->   add a1, s0, a1
// [Asm] subst   sw v11, 0(v16) ->   sw a0, 0(a1)
// [Asm] subst   addi v13, v5, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v5, v13 ->   mv s1, a0
// [Asm] subst   j .input.97_0 ->   j .input.97_0
// [Asm] subst   mv v5, v2 ->   mv s1, a0
// [Asm] subst   mv v6, v3 ->   mv s0, a1
// [Asm] subst   mv v7, v4 ->   mv s2, a2
// [Asm] subst   addi v8, v7, -1 ->   addi a0, s2, -1
// [Asm] subst   blt v8, v5, .input.97_2 ->   blt a0, s1, .input.97_2
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v10, zero ->   mv a0, zero
// [Asm] before colored: # leaf false
// [Asm] main.96:
// [Asm] # block info: defs: [v2, t1, v13, v7, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v3, a0, v13, zero, v8, a2, a1, v6, s11, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.96_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   # save_ctx2  # live: [s11, zero]
// [Asm]   call minimbt_read_int  # live: [s11, zero, a0]
// [Asm]   mv v3, a0  # live: [s11, zero, v3]
// [Asm]   # restore_ctx2  # live: [s11, zero, v3]
// [Asm]   slliw v13, v3, 2  # live: [s11, zero, v13, v3]
// [Asm]   sub v2, s11, v13  # live: [v2, zero, v3]
// [Asm]   andi s11, v2, -8  # live: [v2, zero, v3]
// [Asm]   mv a1, v3  # live: [v2, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, v3]
// [Asm]   mv a0, zero  # live: [v2, zero, a0, v3]
// [Asm]   mv a1, v2  # live: [v2, a1, zero, a0, v3]
// [Asm]   mv a2, v3  # live: [v2, a2, a1, zero, a0, v3]
// [Asm]   call input.97  # live: [v2, zero, a0, v3]
// [Asm]   mv v5, a0  # live: [v2, zero, v3]
// [Asm]   # restore_ctx2  # live: [v2, zero, v3]
// [Asm]   addi v6, v3, -1  # live: [v2, v6, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, v6, zero, v3]
// [Asm]   mv a0, v2  # live: [v2, v6, zero, a0, v3]
// [Asm]   mv a1, zero  # live: [v2, a1, v6, zero, a0, v3]
// [Asm]   mv a2, v6  # live: [v2, a2, a1, zero, a0, v3]
// [Asm]   call quicksort.95  # live: [v2, zero, a0, v3]
// [Asm]   mv v7, a0  # live: [v2, zero, v3]
// [Asm]   # restore_ctx2  # live: [v2, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, v3]
// [Asm]   mv a0, zero  # live: [v2, a0, v3]
// [Asm]   mv a1, v2  # live: [a1, a0, v3]
// [Asm]   mv a2, v3  # live: [a2, a1, a0]
// [Asm]   call output.98  # live: [a0]
// [Asm]   mv v8, a0  # live: [v8]
// [Asm]   # restore_ctx2  # live: [v8]
// [Asm] # control
// [Asm]   mv a0, v8  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] output.98:
// [Asm] # block info: defs: [v3, v7, v4, v6, v5, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .output.98_5:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm]   mv v6, v3  # live: [v4, v5, v6, zero]
// [Asm]   mv v7, v4  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v8], uses: [v8, v5, v7], upward_exposed: [v5, v7], params_defs: [v5, v6, v7]
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: [v5, v6, v7]
// [Asm] .output.98_0:
// [Asm]   addi v8, v7, -1  # live: [v8, v5, v6, zero, v7]
// [Asm] # control
// [Asm]   blt v8, v5, .output.98_2  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v13, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, v19, a6, ft5, ft10, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v11, v5, v14, v18, a0, v7, v19, v6], upward_exposed: [v5, v6, v7], params_defs: []
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .output.98_1:
// [Asm]   slliw v18, v5, 2  # live: [v6, v5, v18, zero, v7]
// [Asm]   add v19, v6, v18  # live: [v19, v6, v5, zero, v7]
// [Asm]   lw v11, 0(v19)  # live: [v11, v6, v5, zero, v7]
// [Asm]   # save_ctx2  # live: [v11, v6, v5, zero, v7]
// [Asm]   mv a0, v11  # live: [v6, v5, zero, a0, v7]
// [Asm]   call minimbt_print_int  # live: [v6, v5, zero, a0, v7]
// [Asm]   mv v12, a0  # live: [v6, v5, zero, v7]
// [Asm]   # restore_ctx2  # live: [v6, v5, zero, v7]
// [Asm]   # save_ctx2  # live: [v6, v5, zero, v7]
// [Asm]   call minimbt_print_endline  # live: [v6, v5, zero, a0, v7]
// [Asm]   mv v13, a0  # live: [v6, v5, zero, v7]
// [Asm]   # restore_ctx2  # live: [v6, v5, zero, v7]
// [Asm]   addi v14, v5, 1  # live: [v6, v14, zero, v7]
// [Asm] # control
// [Asm]   mv v5, v14  # live: [v5, v6, zero, v7]
// [Asm]   mv v6, v6  # live: [v5, v6, zero, v7]
// [Asm]   mv v7, v7  # live: [v5, v6, zero, v7]
// [Asm]   j .output.98_0  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .output.98_2:
// [Asm] # control
// [Asm]   mv v10, zero  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .output.98_3:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] quicksort.95:
// [Asm] # block info: defs: [v3, v7, v8, v4, v6, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, s11, a0, zero], live_out: [v8, v6, s11, zero, v7]
// [Asm] # block parameters: []
// [Asm] .quicksort.95_5:
// [Asm]   # save_ctx1  # live: [a2, a1, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, s11, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, s11, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, s11, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v2  # live: [v4, v6, s11, zero, v3]
// [Asm]   mv v7, v3  # live: [v4, v6, s11, zero, v7]
// [Asm]   mv v8, v4  # live: [v7, v6, s11, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v9], uses: [v7, v9, v8], upward_exposed: [v7, v8], params_defs: [v8, v6, v7]
// [Asm] # live_in: [v7, v6, s11, zero, v8], live_out: [v7, v6, s11, zero, v8]
// [Asm] # block parameters: [v6, v7, v8]
// [Asm] .quicksort.95_0:
// [Asm]   addi v9, v8, -1  # live: [zero, v8, v7, v6, s11, v9]
// [Asm] # control
// [Asm]   blt v9, v7, .quicksort.95_2  # live: [v8, v6, s11, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [], uses: [], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v8, v6, s11, zero, v7], live_out: [v7, v6, s11, zero, v8]
// [Asm] # block parameters: []
// [Asm] .quicksort.95_1:
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v88, v87, v5, v12, s11, v13], uses: [v87, v5, v13, v7, v8, v88, v6, s11], upward_exposed: [v7, v6, s11, v8], params_defs: []
// [Asm] # live_in: [v8, v6, s11, zero, v7], live_out: [v5, zero, v8, v7, v6, v12, s11]
// [Asm] # block parameters: []
// [Asm] .quicksort.95_7:
// [Asm]   slliw v87, v8, 2  # live: [v87, zero, v7, v8, v6, s11]
// [Asm]   add v88, v6, v87  # live: [zero, v7, v8, v88, v6, s11]
// [Asm]   lw v12, 0(v88)  # live: [zero, v7, v8, v6, v12, s11]
// [Asm]   addi v13, v7, -1  # live: [zero, v13, v7, v8, v6, v12, s11]
// [Asm]   addi v5, s11, -4  # live: [v5, zero, v13, v7, v8, v6, v12]
// [Asm]   andi s11, v5, -8  # live: [v5, zero, v13, v7, v8, v6, v12, s11]
// [Asm]   sw v13, 0(v5)  # live: [v5, zero, v7, v8, v6, v12, s11]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v19, v16, v17, v15, v18], uses: [v8, v5, v6, v12, v7], upward_exposed: [v8, v5, v6, v12, v7], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v8, v6, v12, s11], live_out: [v16, v5, v18, zero, v8, v7, v19, v17, v6, v15, s11]
// [Asm] # block parameters: []
// [Asm] .quicksort.95_28:
// [Asm] # control
// [Asm]   mv v15, v7  # live: [v5, zero, v7, v8, v6, v15, s11, v12]
// [Asm]   mv v16, v5  # live: [v16, v5, zero, v7, v8, v6, v15, s11, v12]
// [Asm]   mv v17, v6  # live: [v16, v5, zero, v7, v8, v17, v6, v15, s11, v12]
// [Asm]   mv v18, v8  # live: [v16, v5, v18, zero, v7, v8, v17, v6, v15, s11, v12]
// [Asm]   mv v19, v12  # live: [v16, v5, v18, zero, v7, v8, v19, v17, v6, v15, s11]
// [Asm] 
// [Asm] # block info: defs: [v20], uses: [v18, v15, v20], upward_exposed: [v18, v15], params_defs: [v19, v16, v17, v15, v18]
// [Asm] # live_in: [v16, v5, v18, zero, v8, v7, v19, v17, v6, v15, s11], live_out: [v16, v5, v18, zero, v8, v7, v19, v17, v6, v15, s11]
// [Asm] # block parameters: [v15, v16, v17, v18, v19]
// [Asm] .quicksort.95_20:
// [Asm]   addi v20, v18, -1  # live: [v16, v5, v18, zero, v20, v7, v8, v19, v17, v6, v15, s11]
// [Asm] # control
// [Asm]   blt v20, v15, .quicksort.95_22  # live: [v16, v5, v18, zero, v7, v8, v19, v17, v6, v15, s11]
// [Asm] 
// [Asm] # block info: defs: [v65, v37, v64], uses: [v19, v65, v37, v17, v15, v64], upward_exposed: [v19, v17, v15], params_defs: []
// [Asm] # live_in: [v16, v5, v18, zero, v8, v7, v19, v17, v6, v15, s11], live_out: [v16, v5, v18, zero, v8, v7, v19, v17, v6, v15, s11]
// [Asm] # block parameters: []
// [Asm] .quicksort.95_21:
// [Asm]   slliw v64, v15, 2  # live: [v16, v5, v18, zero, v7, v8, v19, v17, v6, v15, s11, v64]
// [Asm]   add v65, v17, v64  # live: [v16, v5, v18, zero, v7, v8, v19, v65, v17, v6, v15, s11]
// [Asm]   lw v37, 0(v65)  # live: [v16, v5, v18, zero, v7, v8, v19, v37, v6, v17, s11, v15]
// [Asm] # control
// [Asm]   blt v19, v37, .quicksort.95_24  # live: [v16, v5, v18, zero, v7, v8, v19, v17, v6, v15, s11]
// [Asm] 
// [Asm] # block info: defs: [v58, v53, v41, v43, v52, v44, v51, v48, v50, v45, v57, v15, v55, v54, v40], uses: [v16, v58, v53, v41, v43, v17, v52, v44, v51, v48, v18, v50, v45, v19, v57, v15, v54, v55, v40], upward_exposed: [v19, v16, v17, v15, v18], params_defs: []
// [Asm] # live_in: [v16, v5, v18, zero, v8, v7, v19, v17, v6, v15, s11], live_out: [v16, v5, v18, zero, v8, v7, v19, v17, v6, v15, s11]
// [Asm] # block parameters: []
// [Asm] .quicksort.95_23:
// [Asm]   lw v40, 0(v16)  # live: [v16, v5, v7, v17, s11, v18, zero, v8, v19, v6, v15, v40]
// [Asm]   addi v41, v40, 1  # live: [v16, v5, v7, v41, v17, s11, v18, zero, v8, v19, v6, v15]
// [Asm]   sw v41, 0(v16)  # live: [v16, v5, v7, v17, s11, v18, zero, v8, v19, v6, v15]
// [Asm]   lw v43, 0(v16)  # live: [v16, v5, v7, v17, v43, s11, v18, zero, v8, v19, v6, v15]
// [Asm]   slliw v57, v43, 2  # live: [v16, v5, v7, v17, v43, s11, v18, zero, v8, v19, v6, v15, v57]
// [Asm]   add v58, v17, v57  # live: [v16, v5, v58, v7, v17, v43, s11, v18, zero, v8, v19, v6, v15]
// [Asm]   lw v44, 0(v58)  # live: [v16, v5, v7, v17, v43, s11, v44, v18, zero, v8, v19, v6, v15]
// [Asm]   slliw v54, v15, 2  # live: [v16, v5, v7, v17, v43, s11, v44, v18, zero, v8, v19, v6, v15, v54]
// [Asm]   add v55, v17, v54  # live: [v16, v5, v7, v17, v43, s11, v44, v18, zero, v8, v19, v6, v15, v55]
// [Asm]   lw v45, 0(v55)  # live: [v16, v5, v7, v17, v43, s11, v44, v18, zero, v8, v45, v19, v6, v15]
// [Asm]   slliw v52, v43, 2  # live: [v16, v5, v7, v17, s11, v52, v44, v18, zero, v8, v45, v19, v6, v15]
// [Asm]   add v53, v17, v52  # live: [v16, v5, v53, v7, v17, s11, v44, v18, zero, v8, v45, v19, v6, v15]
// [Asm]   sw v45, 0(v53)  # live: [v16, v5, v18, zero, v7, v8, v19, v17, v6, s11, v15, v44]
// [Asm]   slliw v50, v15, 2  # live: [v16, v5, v18, zero, v50, v7, v8, v19, v17, v6, s11, v15, v44]
// [Asm]   add v51, v17, v50  # live: [v16, v5, v18, zero, v7, v8, v19, v17, v6, s11, v15, v44, v51]
// [Asm]   sw v44, 0(v51)  # live: [v16, v5, v18, zero, v7, v8, v19, v17, v6, s11, v15]
// [Asm]   addi v48, v15, 1  # live: [v16, v5, v18, v48, zero, v7, v8, v19, v17, v6, s11]
// [Asm] # control
// [Asm]   mv v15, v48  # live: [v16, v5, v18, zero, v7, v8, v19, v17, v6, v15, s11]
// [Asm]   mv v16, v16  # live: [v16, v5, v18, zero, v7, v8, v19, v17, v6, v15, s11]
// [Asm]   mv v17, v17  # live: [v16, v5, v18, zero, v7, v8, v19, v17, v6, v15, s11]
// [Asm]   mv v18, v18  # live: [v16, v5, v18, zero, v7, v8, v19, v17, v6, v15, s11]
// [Asm]   mv v19, v19  # live: [v16, v5, v18, zero, v7, v8, v19, v17, v6, v15, s11]
// [Asm]   j .quicksort.95_20  # live: [v16, v5, v18, zero, v7, v8, v19, v17, v6, v15, s11]
// [Asm] 
// [Asm] # block info: defs: [v11], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v11]
// [Asm] # block parameters: []
// [Asm] .quicksort.95_2:
// [Asm] # control
// [Asm]   mv v11, zero  # live: [v11]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v11, a0], upward_exposed: [v11], params_defs: [v11]
// [Asm] # live_in: [v11], live_out: []
// [Asm] # block parameters: [v11]
// [Asm] .quicksort.95_3:
// [Asm] # control
// [Asm]   mv a0, v11  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v22], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v8, v6, s11], live_out: [v5, zero, v22, v7, v8, v6, s11]
// [Asm] # block parameters: []
// [Asm] .quicksort.95_22:
// [Asm] # control
// [Asm]   mv v22, zero  # live: [v5, zero, v22, v8, v7, v6, s11]
// [Asm] 
// [Asm] # block info: defs: [v23], uses: [v22], upward_exposed: [v22], params_defs: [v22]
// [Asm] # live_in: [v5, zero, v22, v7, v8, v6, s11], live_out: [v5, zero, v23, v7, v8, v6, s11]
// [Asm] # block parameters: [v22]
// [Asm] .quicksort.95_26:
// [Asm] # control
// [Asm]   mv v23, v22  # live: [v5, zero, v23, v8, v7, v6, s11]
// [Asm] 
// [Asm] # block info: defs: [v25, v71, v79, v78, v32, v24, v28, v33, v73, v72, v75, v29, v27, v74, v76], uses: [v25, v5, v71, v79, v78, v32, v24, v28, v73, v72, v75, v29, v27, v8, v6, v74, v76], upward_exposed: [v5, v6, v8], params_defs: [v23]
// [Asm] # live_in: [v5, zero, v23, v7, v8, v6, s11], live_out: [zero, v8, v7, v6, s11, v33]
// [Asm] # block parameters: [v23]
// [Asm] .quicksort.95_8:
// [Asm]   lw v24, 0(v5)  # live: [v5, zero, v8, v7, v6, s11, v24]
// [Asm]   addi v25, v24, 1  # live: [v25, v5, zero, v8, v7, v6, s11]
// [Asm]   sw v25, 0(v5)  # live: [v5, zero, v8, v7, v6, s11]
// [Asm]   lw v27, 0(v5)  # live: [v5, zero, v27, v8, v7, v6, s11]
// [Asm]   slliw v78, v27, 2  # live: [v5, zero, v27, v78, v8, v7, v6, s11]
// [Asm]   add v79, v6, v78  # live: [v5, zero, v79, v27, v7, v8, v6, s11]
// [Asm]   lw v28, 0(v79)  # live: [v5, zero, v27, v8, v7, v6, s11, v28]
// [Asm]   slliw v75, v8, 2  # live: [v5, v75, zero, v27, v8, v7, v6, s11, v28]
// [Asm]   add v76, v6, v75  # live: [v5, zero, v27, v8, v7, v6, s11, v28, v76]
// [Asm]   lw v29, 0(v76)  # live: [v5, zero, v29, v27, v8, v7, v6, s11, v28]
// [Asm]   slliw v73, v27, 2  # live: [v5, zero, v29, v7, v8, v6, s11, v28, v73]
// [Asm]   add v74, v6, v73  # live: [v5, zero, v29, v7, v8, v6, v74, s11, v28]
// [Asm]   sw v29, 0(v74)  # live: [v5, zero, v7, v8, v6, s11, v28]
// [Asm]   slliw v71, v8, 2  # live: [v5, v71, zero, v7, v8, v6, s11, v28]
// [Asm]   add v72, v6, v71  # live: [v72, v5, zero, v7, v8, v6, s11, v28]
// [Asm]   sw v28, 0(v72)  # live: [v7, v6, v5, s11, zero, v8]
// [Asm]   lw v32, 0(v5)  # live: [v7, v32, v6, s11, zero, v8]
// [Asm] # control
// [Asm]   mv v33, v32  # live: [v7, v6, s11, zero, v33, v8]
// [Asm] 
// [Asm] # block info: defs: [t1, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v34, ft7, ft4, ft9, a5, a0, fa4, v36, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, v35, t4, t2], uses: [a0, v7, v36, v8, a2, a1, v6, v33, v34], upward_exposed: [v8, v6, v33, v7], params_defs: [v33]
// [Asm] # live_in: [zero, v7, v8, v6, s11, v33], live_out: [v8, v6, s11, zero, v7]
// [Asm] # block parameters: [v33]
// [Asm] .quicksort.95_6:
// [Asm]   addi v34, v33, -1  # live: [zero, v8, v7, v6, s11, v33, v34]
// [Asm]   # save_ctx2  # live: [zero, v8, v7, v6, s11, v33, v34]
// [Asm]   mv a0, v6  # live: [zero, a0, v8, v7, v6, s11, v33, v34]
// [Asm]   mv a1, v7  # live: [zero, a0, v8, v6, a1, s11, v33, v34]
// [Asm]   mv a2, v34  # live: [zero, a0, v8, a2, v6, a1, s11, v33]
// [Asm]   call quicksort.95  # live: [v8, v6, s11, zero, v33, a0]
// [Asm]   mv v35, a0  # live: [v6, s11, zero, v33, v8]
// [Asm]   # restore_ctx2  # live: [v6, s11, zero, v33, v8]
// [Asm]   addi v36, v33, 1  # live: [v36, v6, s11, zero, v8]
// [Asm] # control
// [Asm]   mv v6, v6  # live: [v36, v6, s11, zero, v8]
// [Asm]   mv v7, v36  # live: [v7, v6, s11, zero, v8]
// [Asm]   mv v8, v8  # live: [v7, v6, s11, zero, v8]
// [Asm]   j .quicksort.95_0  # live: [v7, v6, s11, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v15, v39], uses: [v19, v16, v17, v15, v18, v39], upward_exposed: [v19, v16, v17, v15, v18], params_defs: []
// [Asm] # live_in: [v16, v5, v18, zero, v8, v7, v19, v17, v6, v15, s11], live_out: [v16, v5, v18, zero, v8, v7, v19, v17, v6, v15, s11]
// [Asm] # block parameters: []
// [Asm] .quicksort.95_24:
// [Asm]   addi v39, v15, 1  # live: [v16, v5, v18, zero, v7, v8, v19, v17, v6, s11, v39]
// [Asm] # control
// [Asm]   mv v15, v39  # live: [v16, v5, v18, zero, v7, v8, v19, v17, v6, v15, s11]
// [Asm]   mv v16, v16  # live: [v16, v5, v18, zero, v7, v8, v19, v17, v6, v15, s11]
// [Asm]   mv v17, v17  # live: [v16, v5, v18, zero, v7, v8, v19, v17, v6, v15, s11]
// [Asm]   mv v18, v18  # live: [v16, v5, v18, zero, v7, v8, v19, v17, v6, v15, s11]
// [Asm]   mv v19, v19  # live: [v16, v5, v18, zero, v7, v8, v19, v17, v6, v15, s11]
// [Asm]   j .quicksort.95_20  # live: [v16, v5, v18, zero, v7, v8, v19, v17, v6, v15, s11]
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main.96  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] input.97:
// [Asm] # block info: defs: [v3, v7, v4, v6, v5, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .input.97_5:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm]   mv v6, v3  # live: [v4, v5, v6, zero]
// [Asm]   mv v7, v4  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v8], uses: [v8, v5, v7], upward_exposed: [v5, v7], params_defs: [v5, v6, v7]
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: [v5, v6, v7]
// [Asm] .input.97_0:
// [Asm]   addi v8, v7, -1  # live: [v8, v5, v6, zero, v7]
// [Asm] # control
// [Asm]   blt v8, v5, .input.97_2  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, v16, v13, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v11, v5, v16, a0, v13, v7, v6, v15], upward_exposed: [v5, v6, v7], params_defs: []
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .input.97_1:
// [Asm]   # save_ctx2  # live: [v6, v5, zero, v7]
// [Asm]   call minimbt_read_int  # live: [v6, v5, zero, a0, v7]
// [Asm]   mv v11, a0  # live: [v11, v6, v5, zero, v7]
// [Asm]   # restore_ctx2  # live: [v11, v6, v5, zero, v7]
// [Asm]   slliw v15, v5, 2  # live: [v11, v6, v5, v15, zero, v7]
// [Asm]   add v16, v6, v15  # live: [v11, v6, v5, v16, zero, v7]
// [Asm]   sw v11, 0(v16)  # live: [v6, v5, zero, v7]
// [Asm]   addi v13, v5, 1  # live: [v6, zero, v13, v7]
// [Asm] # control
// [Asm]   mv v5, v13  # live: [v5, v6, zero, v7]
// [Asm]   mv v6, v6  # live: [v5, v6, zero, v7]
// [Asm]   mv v7, v7  # live: [v5, v6, zero, v7]
// [Asm]   j .input.97_0  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .input.97_2:
// [Asm] # control
// [Asm]   mv v10, zero  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .input.97_3:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("swap", Unit), args: [("arr", Array(Int)), ("i", Int), ("j", Int)], body: Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j"))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit)))}, LetRec({name: ("partition", Int), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Var("high")), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Prim(Var("low"), Int(1), Sub, kind=Some(Int))), LetRec({name: ("l", Var({val: Some(Unit)})), args: [("j", Var({val: Some(Int)}))], body: If(LE(Var("j"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit), App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("l"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0))))))))}, LetRec({name: ("quicksort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: If(LE(Var("low"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("pi", Var({val: Some(Int)})), App(Var("partition"), [Var("arr"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Var("low"), Prim(Var("pi"), Int(1), Sub, kind=Some(Int))]), App(Var("quicksort"), [Var("arr"), Prim(Var("pi"), Int(1), Add, kind=Some(Int)), Var("high")]))), Unit)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)])))))))}, App(Var("main"), [])))))
// [Knf] build_knf: Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j"))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit)))
// [Knf] build_knf: Get(Var("arr"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j"))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit))
// [Knf] build_knf: Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j")))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("arr"), Var("j"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit)
// [Knf] build_knf: Put(Var("arr"), Var("j"), Var("tmp"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Var("tmp")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("partition", Int), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Var("high")), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Prim(Var("low"), Int(1), Sub, kind=Some(Int))), LetRec({name: ("l", Var({val: Some(Unit)})), args: [("j", Var({val: Some(Int)}))], body: If(LE(Var("j"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit), App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("l"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0))))))))}, LetRec({name: ("quicksort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: If(LE(Var("low"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("pi", Var({val: Some(Int)})), App(Var("partition"), [Var("arr"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Var("low"), Prim(Var("pi"), Int(1), Sub, kind=Some(Int))]), App(Var("quicksort"), [Var("arr"), Prim(Var("pi"), Int(1), Add, kind=Some(Int)), Var("high")]))), Unit)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)])))))))}, App(Var("main"), []))))
// [Knf] build_knf: Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Var("high")), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Prim(Var("low"), Int(1), Sub, kind=Some(Int))), LetRec({name: ("l", Var({val: Some(Unit)})), args: [("j", Var({val: Some(Int)}))], body: If(LE(Var("j"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit), App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("l"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0))))))))
// [Knf] build_knf: Get(Var("arr"), Var("high"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Prim(Var("low"), Int(1), Sub, kind=Some(Int))), LetRec({name: ("l", Var({val: Some(Unit)})), args: [("j", Var({val: Some(Int)}))], body: If(LE(Var("j"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit), App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("l"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0)))))))
// [Knf] build_knf: Array(Int(1), Prim(Var("low"), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Prim(Var("low"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("l", Var({val: Some(Unit)})), args: [("j", Var({val: Some(Int)}))], body: If(LE(Var("j"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit), App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("l"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0))))))
// [Knf] build_knf: If(LE(Var("j"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit), App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Var("high"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit), App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit)
// [Knf] build_knf: Get(Var("arr"), Var("j"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Var("pivot")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]))
// [Knf] build_knf: Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])
// [Knf] build_knf: Var("swap")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("l")
// [Knf] build_knf: Prim(Var("j"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("l"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0)))))
// [Knf] build_knf: App(Var("l"), [Var("low")])
// [Knf] build_knf: Var("l")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0))))
// [Knf] build_knf: Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0)))
// [Knf] build_knf: App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")])
// [Knf] build_knf: Var("swap")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("quicksort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: If(LE(Var("low"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("pi", Var({val: Some(Int)})), App(Var("partition"), [Var("arr"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Var("low"), Prim(Var("pi"), Int(1), Sub, kind=Some(Int))]), App(Var("quicksort"), [Var("arr"), Prim(Var("pi"), Int(1), Add, kind=Some(Int)), Var("high")]))), Unit)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)])))))))}, App(Var("main"), [])))
// [Knf] build_knf: If(LE(Var("low"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("pi", Var({val: Some(Int)})), App(Var("partition"), [Var("arr"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Var("low"), Prim(Var("pi"), Int(1), Sub, kind=Some(Int))]), App(Var("quicksort"), [Var("arr"), Prim(Var("pi"), Int(1), Add, kind=Some(Int)), Var("high")]))), Unit)
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Prim(Var("high"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("pi", Var({val: Some(Int)})), App(Var("partition"), [Var("arr"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Var("low"), Prim(Var("pi"), Int(1), Sub, kind=Some(Int))]), App(Var("quicksort"), [Var("arr"), Prim(Var("pi"), Int(1), Add, kind=Some(Int)), Var("high")])))
// [Knf] build_knf: App(Var("partition"), [Var("arr"), Var("low"), Var("high")])
// [Knf] build_knf: Var("partition")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Var("low"), Prim(Var("pi"), Int(1), Sub, kind=Some(Int))]), App(Var("quicksort"), [Var("arr"), Prim(Var("pi"), Int(1), Add, kind=Some(Int)), Var("high")]))
// [Knf] build_knf: App(Var("quicksort"), [Var("arr"), Var("low"), Prim(Var("pi"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("quicksort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Prim(Var("pi"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("pi")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("quicksort"), [Var("arr"), Prim(Var("pi"), Int(1), Add, kind=Some(Int)), Var("high")])
// [Knf] build_knf: Var("quicksort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("pi"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pi")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)])))))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)])))))))
// [Knf] build_knf: App(Var("read_int"), [])
// [Knf] build_knf: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)]))))))
// [Knf] build_knf: Array(Var("len"), Int(0))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)])))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("arr"), Var("i"), App(Var("read_int"), []))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("read_int"), [])
// [Knf] build_knf: App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("input")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)]))))
// [Knf] build_knf: App(Var("input"), [Int(0)])
// [Knf] build_knf: Var("input")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)])))
// [Knf] build_knf: App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("quicksort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)]))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: App(Var("print_int"), [Get(Var("arr"), Var("i"))])
// [Knf] build_knf: Get(Var("arr"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("output")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("output"), [Int(0)])
// [Knf] build_knf: Var("output")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Core] b3 control: Panic -> Jump(target=b5, args=[Insn(iref=%13)])
// [Core] b4 control: Panic -> Jump(target=b5, args=[Insn(iref=%15)])
// [Core] b1 control: Panic -> Branch(cond=Insn(iref=%3), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b5 control: Panic -> Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b2 control: Panic -> Jump(target=b6, args=[Unit])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b6 control: Panic -> Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%12)])
// [Core] b1 control: Panic -> Jump(target=b3, args=[Insn(iref=%6)])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Unit])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b1 control: Panic -> Jump(target=b3, args=[Insn(iref=%5)])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Unit])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b1 control: Panic -> Jump(target=b3, args=[Insn(iref=%6)])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Unit])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%5)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.96
// [Main]   .type main.96, @function
// [Main] # leaf false
// [Main] main.96:
// [Main] .main.96_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   call minimbt_read_int
// [Main]   mv s0, a0
// [Main]   slliw a0, s0, 2
// [Main]   sub s1, s11, a0
// [Main]   andi s11, s1, -8
// [Main]   mv a1, s0
// [Main]   mv a0, zero
// [Main]   mv a1, s1
// [Main]   mv a2, s0
// [Main]   call input.97
// [Main]   addi a2, s0, -1
// [Main]   mv a0, s1
// [Main]   mv a1, zero
// [Main]   call quicksort.95
// [Main]   mv a0, zero
// [Main]   mv a1, s1
// [Main]   mv a2, s0
// [Main]   call output.98
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl output.98
// [Main]   .type output.98, @function
// [Main] # leaf false
// [Main] output.98:
// [Main] .output.98_5:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s1, a0
// [Main]   mv s0, a1
// [Main]   mv s2, a2
// [Main] 
// [Main] .output.98_0:
// [Main]   addi a0, s2, -1
// [Main]   blt a0, s1, .output.98_2
// [Main] 
// [Main] .output.98_1:
// [Main]   slliw a0, s1, 2
// [Main]   add a0, s0, a0
// [Main]   lw a0, 0(a0)
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   addi a0, s1, 1
// [Main]   mv s1, a0
// [Main]   j .output.98_0
// [Main] 
// [Main] .output.98_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .output.98_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl quicksort.95
// [Main]   .type quicksort.95, @function
// [Main] # leaf false
// [Main] quicksort.95:
// [Main] .quicksort.95_5:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv a3, a2
// [Main]   mv s1, a0
// [Main]   mv a2, a1
// [Main]   mv s0, a3
// [Main] 
// [Main] .quicksort.95_0:
// [Main]   addi a0, s0, -1
// [Main]   blt a0, a2, .quicksort.95_2
// [Main] 
// [Main] .quicksort.95_1:
// [Main] 
// [Main] .quicksort.95_7:
// [Main]   slliw a0, s0, 2
// [Main]   add a0, s1, a0
// [Main]   lw a0, 0(a0)
// [Main]   addi a3, a2, -1
// [Main]   addi a1, s11, -4
// [Main]   andi s11, a1, -8
// [Main]   sw a3, 0(a1)
// [Main] 
// [Main] .quicksort.95_28:
// [Main]   mv a3, a2
// [Main]   mv a5, s1
// [Main]   mv a4, s0
// [Main] 
// [Main] .quicksort.95_20:
// [Main]   addi a6, a4, -1
// [Main]   blt a6, a3, .quicksort.95_22
// [Main] 
// [Main] .quicksort.95_21:
// [Main]   slliw a6, a3, 2
// [Main]   add a6, a5, a6
// [Main]   lw a6, 0(a6)
// [Main]   blt a0, a6, .quicksort.95_24
// [Main] 
// [Main] .quicksort.95_23:
// [Main]   lw a6, 0(a1)
// [Main]   addi a6, a6, 1
// [Main]   sw a6, 0(a1)
// [Main]   lw a6, 0(a1)
// [Main]   slliw a7, a6, 2
// [Main]   add a7, a5, a7
// [Main]   lw a7, 0(a7)
// [Main]   slliw t0, a3, 2
// [Main]   add t0, a5, t0
// [Main]   lw t0, 0(t0)
// [Main]   slliw a6, a6, 2
// [Main]   add a6, a5, a6
// [Main]   sw t0, 0(a6)
// [Main]   slliw a6, a3, 2
// [Main]   add a6, a5, a6
// [Main]   sw a7, 0(a6)
// [Main]   addi a3, a3, 1
// [Main]   j .quicksort.95_20
// [Main] 
// [Main] .quicksort.95_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .quicksort.95_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .quicksort.95_22:
// [Main]   mv a0, zero
// [Main] 
// [Main] .quicksort.95_26:
// [Main] 
// [Main] .quicksort.95_8:
// [Main]   lw a0, 0(a1)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(a1)
// [Main]   lw a0, 0(a1)
// [Main]   slliw a3, a0, 2
// [Main]   add a3, s1, a3
// [Main]   lw a3, 0(a3)
// [Main]   slliw a4, s0, 2
// [Main]   add a4, s1, a4
// [Main]   lw a4, 0(a4)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s1, a0
// [Main]   sw a4, 0(a0)
// [Main]   slliw a0, s0, 2
// [Main]   add a0, s1, a0
// [Main]   sw a3, 0(a0)
// [Main]   lw a0, 0(a1)
// [Main]   mv s2, a0
// [Main] 
// [Main] .quicksort.95_6:
// [Main]   addi a3, s2, -1
// [Main]   mv a0, s1
// [Main]   mv a1, a2
// [Main]   mv a2, a3
// [Main]   call quicksort.95
// [Main]   addi a0, s2, 1
// [Main]   mv a2, a0
// [Main]   j .quicksort.95_0
// [Main] 
// [Main] .quicksort.95_24:
// [Main]   addi a3, a3, 1
// [Main]   j .quicksort.95_20
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main.96
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl input.97
// [Main]   .type input.97, @function
// [Main] # leaf false
// [Main] input.97:
// [Main] .input.97_5:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s1, a0
// [Main]   mv s0, a1
// [Main]   mv s2, a2
// [Main] 
// [Main] .input.97_0:
// [Main]   addi a0, s2, -1
// [Main]   blt a0, s1, .input.97_2
// [Main] 
// [Main] .input.97_1:
// [Main]   call minimbt_read_int
// [Main]   slliw a1, s1, 2
// [Main]   add a1, s0, a1
// [Main]   sw a0, 0(a1)
// [Main]   addi a0, s1, 1
// [Main]   mv s1, a0
// [Main]   j .input.97_0
// [Main] 
// [Main] .input.97_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .input.97_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f5, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [Wasm] Lowering function output.98
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%5), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f4, fpref=$f.0), FnParam(fref=f4, fpref=$f.1), FnParam(fref=f4, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function output.98 to wasm
// [Wasm] Lowering function main.96
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_int", args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Zero])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Lowering insn Call(ty=Unit, f=f3, args=[Int32(val=0), Mem(fref=f5, mref=m0), Insn(iref=%0)])
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Call(ty=Unit, f=f2, args=[Mem(fref=f5, mref=m0), Int32(val=0), Insn(iref=%3)])
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[Int32(val=0), Mem(fref=f5, mref=m0), Insn(iref=%0)])
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%5)])
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function main.96 to wasm
// [Wasm] Lowering function quicksort.95
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b20, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.1) -> $b20.$b.1
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%23), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b20, bpref=$b.1), index=0, width=@32), val=Insn(iref=%24))
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.1) -> $b20.$b.1
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b20, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.1) -> $b20.$b.1
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b20, bpref=$b.2), offset=Insn(iref=%26), width=@32))
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.2) -> $b20.$b.2
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b20, bpref=$b.2), offset=BlockParam(bref=b20, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.2) -> $b20.$b.2
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b20, bpref=$b.2), offset=Insn(iref=%26), width=@32), val=Insn(iref=%28))
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.2) -> $b20.$b.2
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b20, bpref=$b.2), offset=BlockParam(bref=b20, bpref=$b.0), width=@32), val=Insn(iref=%27))
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.2) -> $b20.$b.2
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b20, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering control Jump(target=b20, args=[Insn(iref=%31), BlockParam(bref=b20, bpref=$b.1), BlockParam(bref=b20, bpref=$b.2), BlockParam(bref=b20, bpref=$b.3), BlockParam(bref=b20, bpref=$b.4)])
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.1) -> $b20.$b.1
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.1) -> $b20.$b.1
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.2) -> $b20.$b.2
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.2) -> $b20.$b.2
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.3) -> $b20.$b.3
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.3) -> $b20.$b.3
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.4) -> $b20.$b.4
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.4) -> $b20.$b.4
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b20, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Get Local name Insn(iref=%33) -> $%33
// [Wasm] Lowering control Jump(target=b20, args=[Insn(iref=%33), BlockParam(bref=b20, bpref=$b.1), BlockParam(bref=b20, bpref=$b.2), BlockParam(bref=b20, bpref=$b.3), BlockParam(bref=b20, bpref=$b.4)])
// [Wasm] Get Local name Insn(iref=%33) -> $%33
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.1) -> $b20.$b.1
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.1) -> $b20.$b.1
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.2) -> $b20.$b.2
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.2) -> $b20.$b.2
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.3) -> $b20.$b.3
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.3) -> $b20.$b.3
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.4) -> $b20.$b.4
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.4) -> $b20.$b.4
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b20, bpref=$b.2), offset=BlockParam(bref=b20, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.2) -> $b20.$b.2
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%21), BlockParam(bref=b20, bpref=$b.4)])
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.4) -> $b20.$b.4
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering control Branch(cond=Insn(iref=%22), t=b23, t_args=[], f=b24, f_args=[])
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b6, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Call(ty=Unit, f=f2, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%3)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b6, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%5), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f2, mref=m7), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f2, mref=m7) -> $f2.m7
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%10), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f2, mref=m7), index=0, width=@32), val=Insn(iref=%11))
// [Wasm] Get Local name Mem(fref=f2, mref=m7) -> $f2.m7
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f2, mref=m7), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f2, mref=m7) -> $f2.m7
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), offset=Insn(iref=%13), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), offset=BlockParam(bref=b0, bpref=$b.2), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), offset=Insn(iref=%13), width=@32), val=Insn(iref=%15))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), offset=BlockParam(bref=b0, bpref=$b.2), width=@32), val=Insn(iref=%14))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f2, mref=m7), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f2, mref=m7) -> $f2.m7
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering control Jump(target=b6, args=[Insn(iref=%18)])
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b8, args=[BlockParam(bref=b26, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b26, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b20, bpref=$b.3), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.3) -> $b20.$b.3
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b20, bpref=$b.0), Insn(iref=%19)])
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering control Branch(cond=Insn(iref=%20), t=b21, t_args=[], f=b22, f_args=[])
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering control Jump(target=b27, args=[BlockParam(bref=b0, bpref=$b.1), Mem(fref=f2, mref=m7), BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.2), Insn(iref=%6)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Get Local name Mem(fref=f2, mref=m7) -> $f2.m7
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.1) -> $b20.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.2) -> $b20.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.3) -> $b20.$b.3
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name BlockParam(bref=b20, bpref=$b.4) -> $b20.$b.4
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), offset=BlockParam(bref=b0, bpref=$b.2), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m7, fills=[Init(val=Insn(iref=%7))])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Mem(fref=f2, mref=m7) -> $f2.m7
// [Wasm] Lowering control Jump(target=b28, args=[])
// [Wasm] Lowering control Jump(target=b7, args=[])
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f2, fpref=$f.0), FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Local Mem(fref=f2, mref=m7) -> $f2.m7
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local BlockParam(bref=b20, bpref=$b.4) -> $b20.$b.4
// [Wasm] Local Insn(iref=%33) -> $%33
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%27) -> $%27
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local BlockParam(bref=b20, bpref=$b.1) -> $b20.$b.1
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local BlockParam(bref=b20, bpref=$b.3) -> $b20.$b.3
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%31) -> $%31
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local Insn(iref=%24) -> $%24
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local BlockParam(bref=b20, bpref=$b.2) -> $b20.$b.2
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local BlockParam(bref=b20, bpref=$b.0) -> $b20.$b.0
// [Wasm] Lowered function quicksort.95 to wasm
// [Wasm] Lowering function input.97
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_int", args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), offset=BlockParam(bref=b0, bpref=$b.0), width=@32), val=Insn(iref=%2))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%4), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f3, fpref=$f.0), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function input.97 to wasm
// [KnfOpt] func_tre: swap.1 false
// [KnfOpt] func_tre: partition.9 false
// [KnfOpt] func_tre: l.18 true
// [KnfOpt] func_tre: quicksort.45 true
// [KnfOpt] func_tre: main.57 false
// [KnfOpt] func_tre: input.61 true
// [KnfOpt] func_tre: output.75 true
// [KnfOpt] freq: {swap.1: Many(2), partition.9: Once, l.18: Many(2), quicksort.45: Many(3), main.57: Once, input.61: Many(2), output.75: Many(2)}
// [KnfOpt] Inline threshold 9
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision swap.1 accepted
// [KnfOpt] Inline threshold 33
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision l.18 rejected
// [KnfOpt] Knf inline Some(swap) let _31: Unit = Unit
// [KnfOpt] let _32: Int = Int(1)
// [KnfOpt] let _33: Int = Add(j.19, _32)
// [KnfOpt] Apply(l.18, [_33, ])
// [KnfOpt] Inline threshold 33
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision l.18 rejected
// [KnfOpt] Inline threshold 33
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision l.18 rejected
// [KnfOpt] Inline threshold 33
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision l.18 rejected
// [KnfOpt] Inline threshold 9
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision swap.1 accepted
// [KnfOpt] Knf inline Some(swap) let _43: Unit = Unit
// [KnfOpt] let _44: Int = Int(0)
// [KnfOpt] Get i.17[_44]
// [KnfOpt] Inline threshold 67
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision partition.9 rejected
// [KnfOpt] Inline threshold 19
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision quicksort.45 rejected
// [KnfOpt] Inline threshold 19
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision quicksort.45 rejected
// [KnfOpt] Inline threshold 15
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision input.61 rejected
// [KnfOpt] Inline threshold 15
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision input.61 rejected
// [KnfOpt] Inline threshold 19
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision quicksort.45 rejected
// [KnfOpt] Inline threshold 17
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision output.75 rejected
// [KnfOpt] Inline threshold 17
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision output.75 rejected
// [KnfOpt] Numbers of let rec: 6 6 0
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %6: Call(ty=Unit, f=f4, args=[Insn(iref=%5), FnParam(fref=f4, fpref=$f.1), FnParam(fref=f4, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %6: Call(ty=Unit, f=f2, args=[FnParam(fref=f2, fpref=$f.0), Insn(iref=%5), FnParam(fref=f2, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %5: Call(ty=Unit, f=f3, args=[Insn(iref=%4), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %15: Call(ty=Unit, f=f0, args=[Insn(iref=%14), FnParam(fref=f0, fpref=$f.1), FnParam(fref=f0, fpref=$f.2), FnParam(fref=f0, fpref=$f.3), FnParam(fref=f0, fpref=$f.4)])
// [CoreOpt] eliminated tail rec call %13: Call(ty=Unit, f=f0, args=[Insn(iref=%12), FnParam(fref=f0, fpref=$f.1), FnParam(fref=f0, fpref=$f.2), FnParam(fref=f0, fpref=$f.3), FnParam(fref=f0, fpref=$f.4)])
// [CoreOpt] Call frequnce: FnCallFreq({f12: Once, f4: Once, f1: Once, f5: Once, f2: Multiple, f3: Once, f0: Once})
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b1, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] partition.93 is inlining Call(ty=Unit, f=f0, args=[FnParam(fref=f1, fpref=$f.1), Mem(fref=f1, mref=m0), FnParam(fref=f1, fpref=$f.0), FnParam(fref=f1, fpref=$f.2), Insn(iref=%0)])
// [CoreOpt] shifted callee .fn l.94 #f0 : fn(int32, array[int32], array[int32], int32, int32) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b21 {
// [CoreOpt]   .bb #b13 (int32, array[int32], array[int32], int32, int32) {
// [CoreOpt]     let %13: int32 = sub($b13.3, 1)
// [CoreOpt]     let %14: bool = le($b13.0, %13)
// [CoreOpt]     br %14 b14() b15()
// [CoreOpt]   }
// [CoreOpt]   .bb #b14 () {
// [CoreOpt]     let %15: int32 = load int32 offset($b13.2, $b13.0 * @32)
// [CoreOpt]     let %16: bool = le(%15, $b13.4)
// [CoreOpt]     br %16 b16() b17()
// [CoreOpt]   }
// [CoreOpt]   .bb #b15 () {
// [CoreOpt]     jump b19(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b16 () {
// [CoreOpt]     let %17: int32 = load int32 field($b13.1, 0 * @32)
// [CoreOpt]     let %18: int32 = add(%17, 1)
// [CoreOpt]     let _ = store int32 field($b13.1, 0 * @32) <- %18
// [CoreOpt]     let %20: int32 = load int32 field($b13.1, 0 * @32)
// [CoreOpt]     let %21: int32 = load int32 offset($b13.2, %20 * @32)
// [CoreOpt]     let %22: int32 = load int32 offset($b13.2, $b13.0 * @32)
// [CoreOpt]     let _ = store int32 offset($b13.2, %20 * @32) <- %22
// [CoreOpt]     let _ = store int32 offset($b13.2, $b13.0 * @32) <- %21
// [CoreOpt]     let %25: int32 = add($b13.0, 1)
// [CoreOpt]     jump b13(%25, $b13.1, $b13.2, $b13.3, $b13.4)
// [CoreOpt]   }
// [CoreOpt]   .bb #b17 () {
// [CoreOpt]     let %27: int32 = add($b13.0, 1)
// [CoreOpt]     jump b13(%27, $b13.1, $b13.2, $b13.3, $b13.4)
// [CoreOpt]   }
// [CoreOpt]   .bb #b18 (unit) {
// [CoreOpt]     jump b19($b18.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b19 (unit) {
// [CoreOpt]     return $b19.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b20 pre #Some(b21) header #b13 {
// [CoreOpt]     .block #b19
// [CoreOpt]     .block #b17
// [CoreOpt]     .block #b14
// [CoreOpt]     .block #b18
// [CoreOpt]     .block #b15
// [CoreOpt]     .block #b16
// [CoreOpt]   }
// [CoreOpt]   .bb #b21 () {
// [CoreOpt]     jump b20($f0, $f1, $f2, $f3, $f4)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] quicksort.95 is inlining Call(ty=Int32, f=f1, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [CoreOpt] shifted callee .fn partition.93 #f1 : fn(array[int32], int32, int32) -> int32
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b7 {
// [CoreOpt]   .bb #b7 () {
// [CoreOpt]     let %6: int32 = load int32 offset($f0, $f2 * @32)
// [CoreOpt]     let %7: int32 = sub($f1, 1)
// [CoreOpt]     let _ = alloc <m7: array[int32] heap(1)> <- [..] = %7
// [CoreOpt]     jump b28()
// [CoreOpt]   }
// [CoreOpt]   .bb #b8 (unit) {
// [CoreOpt]     let %10: int32 = load int32 field(f1.m7, 0 * @32)
// [CoreOpt]     let %11: int32 = add(%10, 1)
// [CoreOpt]     let _ = store int32 field(f1.m7, 0 * @32) <- %11
// [CoreOpt]     let %13: int32 = load int32 field(f1.m7, 0 * @32)
// [CoreOpt]     let %14: int32 = load int32 offset($f0, %13 * @32)
// [CoreOpt]     let %15: int32 = load int32 offset($f0, $f2 * @32)
// [CoreOpt]     let _ = store int32 offset($f0, %13 * @32) <- %15
// [CoreOpt]     let _ = store int32 offset($f0, $f2 * @32) <- %14
// [CoreOpt]     let %18: int32 = load int32 field(f1.m7, 0 * @32)
// [CoreOpt]     return %18
// [CoreOpt]   }
// [CoreOpt]   .bb #b20 (int32, array[int32], array[int32], int32, int32) {
// [CoreOpt]     let %19: int32 = sub($b20.3, 1)
// [CoreOpt]     let %20: bool = le($b20.0, %19)
// [CoreOpt]     br %20 b21() b22()
// [CoreOpt]   }
// [CoreOpt]   .bb #b21 () {
// [CoreOpt]     let %21: int32 = load int32 offset($b20.2, $b20.0 * @32)
// [CoreOpt]     let %22: bool = le(%21, $b20.4)
// [CoreOpt]     br %22 b23() b24()
// [CoreOpt]   }
// [CoreOpt]   .bb #b22 () {
// [CoreOpt]     jump b26(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b23 () {
// [CoreOpt]     let %23: int32 = load int32 field($b20.1, 0 * @32)
// [CoreOpt]     let %24: int32 = add(%23, 1)
// [CoreOpt]     let _ = store int32 field($b20.1, 0 * @32) <- %24
// [CoreOpt]     let %26: int32 = load int32 field($b20.1, 0 * @32)
// [CoreOpt]     let %27: int32 = load int32 offset($b20.2, %26 * @32)
// [CoreOpt]     let %28: int32 = load int32 offset($b20.2, $b20.0 * @32)
// [CoreOpt]     let _ = store int32 offset($b20.2, %26 * @32) <- %28
// [CoreOpt]     let _ = store int32 offset($b20.2, $b20.0 * @32) <- %27
// [CoreOpt]     let %31: int32 = add($b20.0, 1)
// [CoreOpt]     jump b20(%31, $b20.1, $b20.2, $b20.3, $b20.4)
// [CoreOpt]   }
// [CoreOpt]   .bb #b24 () {
// [CoreOpt]     let %33: int32 = add($b20.0, 1)
// [CoreOpt]     jump b20(%33, $b20.1, $b20.2, $b20.3, $b20.4)
// [CoreOpt]   }
// [CoreOpt]   .bb #b25 (unit) {
// [CoreOpt]     jump b26($b25.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b26 (unit) {
// [CoreOpt]     jump b8($b26.0)
// [CoreOpt]   }
// [CoreOpt]   .loop #b27 pre #Some(b28) header #b20 {
// [CoreOpt]     .block #b26
// [CoreOpt]     .block #b24
// [CoreOpt]     .block #b21
// [CoreOpt]     .block #b25
// [CoreOpt]     .block #b22
// [CoreOpt]     .block #b23
// [CoreOpt]   }
// [CoreOpt]   .bb #b28 () {
// [CoreOpt]     jump b27($f1, f1.m7, $f0, $f2, %6)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f1
// [CoreOpt] Remove dead function: f0
