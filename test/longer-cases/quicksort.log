// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f12) -> v0, Insn(iref=%0) -> v2
// [Asm] LoweringOrder: [5, 0, 2, 3, 1]
// [Asm] LoweringOrder: [[4], [1, 2], [3], [], [0]]
// [Asm] LoweringOrder: HashMap::of([(b1, 0), (b5, 0), (b2, 1), (b3, 1), (b0, 0)])
// [Asm] LoweringOrder: [b5, b0, b1, b2, b3]
// [Asm] LoweringOrder: HashMap::of([(b1, 2), (b5, 0), (b2, 0), (b3, 1), (b0, 1)])
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v14, Insn(iref=%3) -> v13, FnParam(fref=f4, fpref=$f.0) -> v2, BlockParam(bref=b3, bpref=$b.0) -> v10, FnParam(fref=f4, fpref=$f.2) -> v4, Insn(iref=%2) -> v12, Insn(iref=%1) -> v9, BlockParam(bref=b0, bpref=$b.0) -> v5, Self(fref=f4) -> v0, BlockParam(bref=b0, bpref=$b.1) -> v6, BlockParam(bref=b0, bpref=$b.2) -> v7, Insn(iref=%6) -> v11, FnParam(fref=f4, fpref=$f.1) -> v3, Insn(iref=%5) -> v15, Insn(iref=%0) -> v8
// [Asm] succs: [0]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Asm] succs: [4]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move: v10 <- zero
// [Asm] defined: v10 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v6, v5, zero, v7]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v10
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move: v4 <- a2
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move: v5 <- v2
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move: v6 <- v3
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move: v7 <- v4
// [Asm] defined: v7 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v6, v5, v12, zero, v7]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, v12, zero, v7]
// [Asm] defs: [a0]
// [Asm] live_set: [v6, v5, zero, a0, v7]
// [Asm] move: a0 <- v12
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, v5, zero, a0, v7]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v13]
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move: v13 <- a0
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, v5, zero, a0, v7]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v14]
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move: v14 <- a0
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] defs: [v15]
// [Asm] live_set: [v6, v15, zero, v7]
// [Asm] defined: v15 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move: v5 <- v15
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move: v6 <- v6
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move: v7 <- v7
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] Label("output97.147") clobbered_x: @hashset.of([s2, a2, s0, a1, a0, s1])
// [Asm] Label("output97.147") clobbered_f: @hashset.of([])
// [Asm] subst   mv v10, zero ->   mv a0, zero
// [Asm] subst   addi v8, v7, -1 ->   addi a0, s2, -1
// [Asm] subst   blt v8, v5, .output97.147_2 ->   blt a0, s1, .output97.147_2
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v5, v2 ->   mv s1, a0
// [Asm] subst   mv v6, v3 ->   mv s0, a1
// [Asm] subst   mv v7, v4 ->   mv s2, a2
// [Asm] subst   th.lurw v12, v6, v5, 2 ->   th.lurw a0, s0, s1, 2
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   addi v15, v5, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v5, v15 ->   mv s1, a0
// [Asm] subst   j .output97.147_0 ->   j .output97.147_0
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v7, Insn(iref=%1) -> v4, Insn(iref=%3) -> v6, Mem(fref=f5, mref=m0) -> v2, Self(fref=f5) -> v0, Insn(iref=%5) -> v8, Insn(iref=%0) -> v3, Insn(iref=%2) -> v5
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [s11, zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [s11, zero, v3]
// [Asm] move: v3 <- a0
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v3]
// [Asm] defs: [v13]
// [Asm] live_set: [s11, zero, v13, v3]
// [Asm] defined: v13 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v2, zero, v3]
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, zero, v3]
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move: a1 <- v3
// [Asm] defined: a1 is X
// [Asm] skip edge 8 -> 15
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] defs: [a0]
// [Asm] live_set: [v2, zero, a0, v3]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] skip edge 3 -> 2
// [Asm] defs: [a1]
// [Asm] live_set: [v2, a1, zero, a0, v3]
// [Asm] move: a1 <- v2
// [Asm] defined: a1 is X
// [Asm] skip edge 8 -> 17
// [Asm] defs: [a2]
// [Asm] live_set: [v2, a2, a1, zero, a0, v3]
// [Asm] move: a2 <- v3
// [Asm] defined: a2 is X
// [Asm] skip edge 9 -> 15
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, zero, a0, v3]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move: v5 <- a0
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v6, zero, v3]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v6, zero, v3]
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v6, zero, a0, v3]
// [Asm] move: a0 <- v2
// [Asm] defined: a0 is X
// [Asm] skip edge 3 -> 17
// [Asm] defs: [a1]
// [Asm] live_set: [v2, a1, v6, zero, a0, v3]
// [Asm] move: a1 <- zero
// [Asm] defined: a1 is X
// [Asm] skip edge 8 -> 2
// [Asm] defs: [a2]
// [Asm] live_set: [v2, a2, a1, zero, a0, v3]
// [Asm] move: a2 <- v6
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, zero, a0, v3]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move: v7 <- a0
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] defs: [a0]
// [Asm] live_set: [v2, a0, v3]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0, v3]
// [Asm] move: a1 <- v2
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0]
// [Asm] move: a2 <- v3
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move: v8 <- a0
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v8
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main75.145") clobbered_x: @hashset.of([a2, s0, a0, s1])
// [Asm] Label("main75.145") clobbered_f: @hashset.of([])
// [Asm] subst   call minimbt_read_int ->   call minimbt_read_int
// [Asm] subst   mv v3, a0 ->   mv s0, a0
// [Asm] subst   slliw v13, v3, 2 ->   slliw a0, s0, 2
// [Asm] subst   sub v2, s11, v13 ->   sub s1, s11, a0
// [Asm] subst   andi s11, v2, -8 ->   andi s11, s1, -8
// [Asm] subst   mv a1, v3 ->   mv a1, s0
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v2 ->   mv a1, s1
// [Asm] subst   mv a2, v3 ->   mv a2, s0
// [Asm] subst   call input79.146 ->   call input79.146
// [Asm] subst   addi v6, v3, -1 ->   addi a2, s0, -1
// [Asm] subst   mv a0, v2 ->   mv a0, s1
// [Asm] subst   mv a1, zero ->   mv a1, zero
// [Asm] subst   call quicksort59.143 ->   call quicksort59.143
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v2 ->   mv a1, s1
// [Asm] subst   mv a2, v3 ->   mv a2, s0
// [Asm] subst   call output97.147 ->   call output97.147
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [5, 0, 2, 3, 1, 27, 19, 21, 25, 6, 15, 7, 20, 23, 22, 29, 24]
// [Asm] LoweringOrder: [[4], [1, 2], [3], [], [27], [26], [20, 21], [25], [6], [15], [7], [0], [22, 23], [24], [29], [24], [19]]
// [Asm] LoweringOrder: HashMap::of([(b23, 1), (b19, 0), (b15, 2), (b1, 0), (b2, 4), (b24, 0), (b22, 0), (b21, 2), (b20, 0), (b6, 2), (b0, 0), (b25, 2), (b5, 0), (b29, 0), (b3, 4), (b7, 2), (b27, 0)])
// [Asm] LoweringOrder: [b5, b0, b1, b27, b19, b20, b22, b29, b24, b23, b21, b25, b6, b15, b7, b2, b3]
// [Asm] LoweringOrder: HashMap::of([(b23, 0), (b19, 4), (b15, 3), (b1, 2), (b2, 0), (b24, 8), (b22, 6), (b21, 0), (b20, 5), (b6, 2), (b0, 1), (b25, 1), (b5, 0), (b29, 7), (b3, 1), (b7, 4), (b27, 3)])
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v30, Insn(iref=%41) -> v31, BlockParam(bref=b7, bpref=$b.0) -> v35, Insn(iref=%8) -> v27, BlockParam(bref=b19, bpref=$b.3) -> v19, Insn(iref=%14) -> v39, Insn(iref=%25) -> v45, Insn(iref=%4) -> v15, BlockParam(bref=b25, bpref=$b.0) -> v23, BlockParam(bref=b19, bpref=$b.2) -> v18, Insn(iref=%42) -> v29, Insn(iref=%44) -> v40, Insn(iref=%32) -> v52, BlockParam(bref=b19, bpref=$b.4) -> v20, BlockParam(bref=b6, bpref=$b.0) -> v24, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%1) -> v10, Insn(iref=%11) -> v36, Insn(iref=%26) -> v46, BlockParam(bref=b24, bpref=$b.0) -> v53, Insn(iref=%6) -> v25, FnParam(fref=f2, fpref=$f.0) -> v2, Insn(iref=%31) -> v51, FnParam(fref=f2, fpref=$f.2) -> v4, BlockParam(bref=b19, bpref=$b.0) -> v16, Insn(iref=%28) -> v54, BlockParam(bref=b3, bpref=$b.0) -> v11, Insn(iref=%9) -> v28, Insn(iref=%16) -> v32, Insn(iref=%24) -> v44, Self(fref=f2) -> v0, Insn(iref=%53) -> v49, BlockParam(bref=b0, bpref=$b.0) -> v6, BlockParam(bref=b0, bpref=$b.1) -> v7, BlockParam(bref=b0, bpref=$b.2) -> v8, Insn(iref=%54) -> v47, Insn(iref=%29) -> v48, Insn(iref=%0) -> v9, Insn(iref=%19) -> v21, Insn(iref=%3) -> v14, Insn(iref=%18) -> v34, Insn(iref=%13) -> v38, Mem(fref=f2, mref=m0) -> v5, Insn(iref=%7) -> v26, Insn(iref=%22) -> v42, Insn(iref=%17) -> v33, Insn(iref=%23) -> v43, Insn(iref=%2) -> v13, Insn(iref=%20) -> v22, Insn(iref=%43) -> v12, Insn(iref=%30) -> v50, BlockParam(bref=b19, bpref=$b.1) -> v17, Insn(iref=%21) -> v41, Insn(iref=%12) -> v37
// [Asm] succs: [19]
// [Asm] critical edges for b24: []
// [Asm] critical color seq for b24: []
// [Asm] succs: [24]
// [Asm] critical edges for b29: []
// [Asm] critical color seq for b29: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b19, bpref=$b.0), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%26), width=@32))
// [Asm] succs: [29]
// [Asm] critical edges for b22: []
// [Asm] critical color seq for b22: []
// [Asm] succs: [24]
// [Asm] critical edges for b23: []
// [Asm] critical color seq for b23: []
// [Asm] succs: [22, 23]
// [Asm] critical edges for b20: []
// [Asm] critical color seq for b20: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%21), BlockParam(bref=b19, bpref=$b.3)])
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b19, bpref=$b.0), width=@32))
// [Asm] succs: [0]
// [Asm] critical edges for b7: []
// [Asm] critical color seq for b7: []
// [Asm] succs: [7]
// [Asm] critical edges for b15: []
// [Asm] critical color seq for b15: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b0, bpref=$b.2), width=@32))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%9), width=@32))
// [Asm] succs: [15]
// [Asm] critical edges for b6: []
// [Asm] critical color seq for b6: []
// [Asm] succs: [6]
// [Asm] critical edges for b25: []
// [Asm] critical color seq for b25: []
// [Asm] succs: [25]
// [Asm] critical edges for b21: []
// [Asm] critical color seq for b21: []
// [Asm] succs: [20, 21]
// [Asm] critical edges for b19: []
// [Asm] critical color seq for b19: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b19, bpref=$b.0), Insn(iref=%19)])
// [Asm] succs: [26]
// [Asm] critical edges for b27: []
// [Asm] critical color seq for b27: []
// [Asm] succs: [27]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b0, bpref=$b.2), width=@32))
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%0)])
// [Asm] succs: [4]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v5, zero, v8, v7, v6, s11]
// [Asm] defined: v25 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v5, zero, v26, v8, v7, v6, s11]
// [Asm] defined: v26 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v7, v6, s11]
// [Asm] defs: [v28]
// [Asm] live_set: [v5, zero, v8, v7, v6, s11, v28]
// [Asm] defined: v28 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move: v11 <- zero
// [Asm] defined: v11 is X
// [Asm] defs: [v43]
// [Asm] live_set: [v16, v5, v18, zero, v20, v8, v7, v19, v6, v17, v43, s11]
// [Asm] defined: v43 is X
// [Asm] defs: [v44]
// [Asm] live_set: [v16, v5, v18, zero, v20, v8, v7, v19, v6, v17, s11, v44]
// [Asm] defined: v44 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v5, v18, zero, v20, v8, v7, v19, v6, v17, s11]
// [Asm] defs: [v46]
// [Asm] live_set: [v46, v16, v5, v18, zero, v20, v8, v7, v19, v6, v17, s11]
// [Asm] defined: v46 is X
// [Asm] defs: [v54]
// [Asm] live_set: [v5, v18, zero, v20, v8, v7, v19, v17, v6, s11, v54]
// [Asm] defined: v54 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v16, v5, v18, zero, v20, v8, v7, v19, v17, v6, s11]
// [Asm] move: v16 <- v54
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v5, v18, zero, v20, v8, v7, v19, v17, v6, s11]
// [Asm] move: v17 <- v17
// [Asm] defs: []
// [Asm] live_set: [v16, v5, v18, zero, v20, v8, v7, v19, v17, v6, s11]
// [Asm] move: v18 <- v18
// [Asm] defs: []
// [Asm] live_set: [v16, v5, v18, zero, v20, v8, v7, v19, v17, v6, s11]
// [Asm] move: v19 <- v19
// [Asm] defs: []
// [Asm] live_set: [v16, v5, v18, zero, v20, v8, v7, v19, v17, v6, s11]
// [Asm] move: v20 <- v20
// [Asm] defs: []
// [Asm] live_set: [v16, v5, v18, zero, v20, v8, v7, v19, v17, v6, s11]
// [Asm] defs: [v48]
// [Asm] live_set: [v16, v5, v46, v7, v17, s11, v18, v48, zero, v20, v8, v19, v6]
// [Asm] defined: v48 is X
// [Asm] defs: [v50]
// [Asm] live_set: [v16, v5, v46, v7, v17, s11, v18, v48, zero, v20, v50, v8, v19, v6]
// [Asm] defined: v50 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v5, v18, v48, zero, v20, v7, v8, v19, v17, v6, s11]
// [Asm] defs: []
// [Asm] live_set: [v16, v5, v18, zero, v20, v8, v7, v19, v6, v17, s11]
// [Asm] defs: [v53]
// [Asm] live_set: [v16, v5, v18, v53, zero, v20, v8, v7, v19, v6, v17, s11]
// [Asm] move: v53 <- zero
// [Asm] defined: v53 is X
// [Asm] skip edge 21 -> 2
// [Asm] defs: [v24]
// [Asm] live_set: [v5, zero, v8, v7, v6, v24, s11]
// [Asm] move: v24 <- v23
// [Asm] defined: v24 is X
// [Asm] defs: [v9]
// [Asm] live_set: [zero, v7, v8, v6, s11, v9]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, s11, zero, v8]
// [Asm] defs: [v36]
// [Asm] live_set: [zero, v36, v8, v7, v6, s11]
// [Asm] defined: v36 is X
// [Asm] defs: [v37]
// [Asm] live_set: [zero, v36, v8, v7, v37, v6, s11]
// [Asm] defined: v37 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v36, v8, v7, v37, v6, s11]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v36, v8, v7, v37, v6, s11]
// [Asm] move: a0 <- v6
// [Asm] defined: a0 is X
// [Asm] skip edge 27 -> 5
// [Asm] defs: [a1]
// [Asm] live_set: [zero, a0, v36, v8, v37, v6, a1, s11]
// [Asm] move: a1 <- v7
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [zero, a0, v36, v8, a2, v6, a1, s11]
// [Asm] move: a2 <- v37
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v36, v6, s11, zero, a0, v8]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v38]
// [Asm] live_set: [v36, v6, s11, zero, v8]
// [Asm] move: v38 <- a0
// [Asm] defined: v38 is X
// [Asm] defs: []
// [Asm] live_set: [v36, v6, s11, zero, v8]
// [Asm] defs: [v39]
// [Asm] live_set: [v6, s11, zero, v39, v8]
// [Asm] defined: v39 is X
// [Asm] defs: []
// [Asm] live_set: [v6, s11, zero, v39, v8]
// [Asm] move: v6 <- v6
// [Asm] defs: [v7]
// [Asm] live_set: [v8, v6, s11, zero, v7]
// [Asm] move: v7 <- v39
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v6, s11, zero, v7]
// [Asm] move: v8 <- v8
// [Asm] defs: []
// [Asm] live_set: [v8, v6, s11, zero, v7]
// [Asm] defs: [v21]
// [Asm] live_set: [v16, v5, v18, v21, zero, v20, v7, v8, v19, v6, v17, s11]
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v5, v18, zero, v20, v8, v7, v19, v17, v6, s11]
// [Asm] defs: [v13]
// [Asm] live_set: [v13, zero, v7, v8, v6, s11]
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v14, v13, zero, v7, v8, v6, s11]
// [Asm] defined: v14 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v14, v13, zero, v7, v8, v6]
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, v14, v13, zero, v7, v8, v6, s11]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v13, zero, v7, v8, v6, s11]
// [Asm] defs: [v30]
// [Asm] live_set: [v5, zero, v30, v8, v7, v6, s11, v28]
// [Asm] defined: v30 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v5, zero, v30, v8, v7, v32, v6, s11, v28]
// [Asm] defined: v32 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v30, v8, v7, v6, s11]
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v7, v6, s11]
// [Asm] defs: [v35]
// [Asm] live_set: [v5, zero, v35, v8, v7, v6, s11]
// [Asm] move: v35 <- zero
// [Asm] defined: v35 is X
// [Asm] skip edge 47 -> 2
// [Asm] defs: [v23]
// [Asm] live_set: [v5, zero, v23, v8, v7, v6, s11]
// [Asm] move: v23 <- zero
// [Asm] defined: v23 is X
// [Asm] skip edge 23 -> 2
// [Asm] defs: [v16]
// [Asm] live_set: [v16, v5, zero, v13, v8, v7, v6, s11]
// [Asm] move: v16 <- v7
// [Asm] defined: v16 is X
// [Asm] skip edge 11 -> 4
// [Asm] defs: [v17]
// [Asm] live_set: [v16, v5, zero, v13, v8, v7, v17, v6, s11]
// [Asm] move: v17 <- v5
// [Asm] defined: v17 is X
// [Asm] skip edge 15 -> 1
// [Asm] defs: [v18]
// [Asm] live_set: [v16, v5, v18, zero, v13, v8, v7, v17, v6, s11]
// [Asm] move: v18 <- v6
// [Asm] defined: v18 is X
// [Asm] skip edge 12 -> 5
// [Asm] defs: [v19]
// [Asm] live_set: [v16, v5, v18, zero, v8, v7, v19, v17, v6, s11]
// [Asm] move: v19 <- v13
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v16, v5, v18, zero, v20, v8, v7, v19, v17, v6, s11]
// [Asm] move: v20 <- v8
// [Asm] defined: v20 is X
// [Asm] skip edge 13 -> 3
// [Asm] defs: [v41]
// [Asm] live_set: [v16, v5, v18, zero, v20, v8, v7, v19, v41, v6, v17, s11]
// [Asm] defined: v41 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v5, v18, zero, v20, v8, v7, v19, v17, v6, s11]
// [Asm] defs: [v53]
// [Asm] live_set: [v16, v5, v18, v53, zero, v20, v8, v7, v19, v6, v17, s11]
// [Asm] move: v53 <- zero
// [Asm] defined: v53 is X
// [Asm] skip edge 21 -> 2
// [Asm] defs: []
// [Asm] live_set: [v16, v5, v18, v53, zero, v20, v8, v7, v19, v6, v17, s11]
// [Asm] defs: []
// [Asm] live_set: [a2, a1, s11, zero, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, s11, zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, s11, zero, v3]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, s11, zero, v3]
// [Asm] move: v4 <- a2
// [Asm] defined: v4 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, s11, zero, v3]
// [Asm] move: v6 <- v2
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v4, v6, s11, zero, v7]
// [Asm] move: v7 <- v3
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v6, s11, zero, v8]
// [Asm] move: v8 <- v4
// [Asm] defined: v8 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v11
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("quicksort59.143") clobbered_x: @hashset.of([a7, t0, a5, a0, s1, a4, s2, a6, a2, a1, s0, a3])
// [Asm] Label("quicksort59.143") clobbered_f: @hashset.of([])
// [Asm] subst   lw v25, 0(v5) ->   lw a0, 0(a1)
// [Asm] subst   addi v26, v25, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v26, 0(v5) ->   sw a0, 0(a1)
// [Asm] subst   lw v28, 0(v5) ->   lw a0, 0(a1)
// [Asm] subst   mv v11, zero ->   mv a0, zero
// [Asm] subst   lw v43, 0(v17) ->   lw a0, 0(a1)
// [Asm] subst   addi v44, v43, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v44, 0(v17) ->   sw a0, 0(a1)
// [Asm] subst   lw v46, 0(v17) ->   lw a0, 0(a1)
// [Asm] subst   addi v54, v16, 1 ->   addi a0, a3, 1
// [Asm] subst   mv v16, v54 ->   mv a3, a0
// [Asm] subst   j .quicksort59.143_19 ->   j .quicksort59.143_19
// [Asm] subst   th.lurw v48, v18, v46, 2 ->   th.lurw a7, a5, a0, 2
// [Asm] subst   th.lurw v50, v18, v16, 2 ->   th.lurw t0, a5, a3, 2
// [Asm] subst   th.surw v50, v18, v46, 2 ->   th.surw t0, a5, a0, 2
// [Asm] subst   th.surw v48, v18, v16, 2 ->   th.surw a7, a5, a3, 2
// [Asm] subst   mv v53, zero ->   mv a0, zero
// [Asm] subst   addi v9, v8, -1 ->   addi a0, s0, -1
// [Asm] subst   blt v9, v7, .quicksort59.143_2 ->   blt a0, a2, .quicksort59.143_2
// [Asm] subst   lw v36, 0(v5) ->   lw s2, 0(a1)
// [Asm] subst   addi v37, v36, -1 ->   addi a3, s2, -1
// [Asm] subst   mv a0, v6 ->   mv a0, s1
// [Asm] subst   mv a1, v7 ->   mv a1, a2
// [Asm] subst   mv a2, v37 ->   mv a2, a3
// [Asm] subst   call quicksort59.143 ->   call quicksort59.143
// [Asm] subst   addi v39, v36, 1 ->   addi a0, s2, 1
// [Asm] subst   mv v7, v39 ->   mv a2, a0
// [Asm] subst   j .quicksort59.143_0 ->   j .quicksort59.143_0
// [Asm] subst   addi v21, v20, -1 ->   addi a0, a6, -1
// [Asm] subst   blt v21, v16, .quicksort59.143_21 ->   blt a0, a3, .quicksort59.143_21
// [Asm] subst   th.lurw v13, v6, v8, 2 ->   th.lurw a0, s1, s0, 2
// [Asm] subst   addi v14, v7, -1 ->   addi a3, a2, -1
// [Asm] subst   addi v5, s11, -4 ->   addi a1, s11, -4
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a1, -8
// [Asm] subst   sw v14, 0(v5) ->   sw a3, 0(a1)
// [Asm] subst   th.lurw v30, v6, v28, 2 ->   th.lurw a3, s1, a0, 2
// [Asm] subst   th.lurw v32, v6, v8, 2 ->   th.lurw a4, s1, s0, 2
// [Asm] subst   th.surw v32, v6, v28, 2 ->   th.surw a4, s1, a0, 2
// [Asm] subst   th.surw v30, v6, v8, 2 ->   th.surw a3, s1, s0, 2
// [Asm] subst   mv v35, zero ->   mv a0, zero
// [Asm] subst   mv v23, zero ->   mv a0, zero
// [Asm] subst   mv v16, v7 ->   mv a3, a2
// [Asm] subst   mv v18, v6 ->   mv a5, s1
// [Asm] subst   mv v19, v13 ->   mv a4, a0
// [Asm] subst   mv v20, v8 ->   mv a6, s0
// [Asm] subst   th.lurw v41, v18, v16, 2 ->   th.lurw a0, a5, a3, 2
// [Asm] subst   blt v19, v41, .quicksort59.143_23 ->   blt a4, a0, .quicksort59.143_23
// [Asm] subst   mv v53, zero ->   mv a0, zero
// [Asm] subst   j .quicksort59.143_24 ->   j .quicksort59.143_24
// [Asm] subst   mv v4, a2 ->   mv a3, a2
// [Asm] subst   mv v6, v2 ->   mv s1, a0
// [Asm] subst   mv v7, v3 ->   mv a2, a1
// [Asm] subst   mv v8, v4 ->   mv s0, a3
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [5, 0, 2, 3, 1]
// [Asm] LoweringOrder: [[4], [1, 2], [3], [], [0]]
// [Asm] LoweringOrder: HashMap::of([(b1, 0), (b5, 0), (b2, 1), (b3, 1), (b0, 0)])
// [Asm] LoweringOrder: [b5, b0, b1, b2, b3]
// [Asm] LoweringOrder: HashMap::of([(b1, 2), (b5, 0), (b2, 0), (b3, 1), (b0, 1)])
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v14, FnParam(fref=f3, fpref=$f.2) -> v4, Insn(iref=%3) -> v13, FnParam(fref=f3, fpref=$f.1) -> v3, BlockParam(bref=b3, bpref=$b.0) -> v10, Insn(iref=%2) -> v11, Insn(iref=%1) -> v9, BlockParam(bref=b0, bpref=$b.0) -> v5, BlockParam(bref=b0, bpref=$b.1) -> v6, FnParam(fref=f3, fpref=$f.0) -> v2, BlockParam(bref=b0, bpref=$b.2) -> v7, Insn(iref=%5) -> v12, Self(fref=f3) -> v0, Insn(iref=%0) -> v8
// [Asm] succs: [0]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Asm] succs: [4]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v10
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v6, v5, zero, v7]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move: v10 <- zero
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move: v4 <- a2
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move: v5 <- v2
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move: v6 <- v3
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move: v7 <- v4
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, v5, zero, a0, v7]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v6, v5, zero, v7]
// [Asm] move: v11 <- a0
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v6, v5, zero, v7]
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] defs: [v14]
// [Asm] live_set: [v6, v14, zero, v7]
// [Asm] defined: v14 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move: v5 <- v14
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move: v6 <- v6
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move: v7 <- v7
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] Label("input79.146") clobbered_x: @hashset.of([s2, a2, s0, a1, a0, s1])
// [Asm] Label("input79.146") clobbered_f: @hashset.of([])
// [Asm] subst   ret ->   ret
// [Asm] subst   addi v8, v7, -1 ->   addi a0, s2, -1
// [Asm] subst   blt v8, v5, .input79.146_2 ->   blt a0, s1, .input79.146_2
// [Asm] subst   mv v10, zero ->   mv a0, zero
// [Asm] subst   mv v5, v2 ->   mv s1, a0
// [Asm] subst   mv v6, v3 ->   mv s0, a1
// [Asm] subst   mv v7, v4 ->   mv s2, a2
// [Asm] subst   call minimbt_read_int ->   call minimbt_read_int
// [Asm] subst   th.surw v11, v6, v5, 2 ->   th.surw a0, s0, s1, 2
// [Asm] subst   addi v14, v5, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v5, v14 ->   mv s1, a0
// [Asm] subst   j .input79.146_0 ->   j .input79.146_0
// [Asm] before colored: # leaf false
// [Asm] main75.145:
// [Asm] # block info: defs: [v2, t1, v13, v7, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v3, a0, v13, zero, v8, a2, a1, v6, s11, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main75.145_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   # save_ctx2  # live: [s11, zero]
// [Asm]   call minimbt_read_int  # live: [s11, zero, a0]
// [Asm]   mv v3, a0  # live: [s11, zero, v3]
// [Asm]   # restore_ctx2  # live: [s11, zero, v3]
// [Asm]   slliw v13, v3, 2  # live: [s11, zero, v13, v3]
// [Asm]   sub v2, s11, v13  # live: [v2, zero, v3]
// [Asm]   andi s11, v2, -8  # live: [v2, zero, v3]
// [Asm]   mv a1, v3  # live: [v2, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, v3]
// [Asm]   mv a0, zero  # live: [v2, zero, a0, v3]
// [Asm]   mv a1, v2  # live: [v2, a1, zero, a0, v3]
// [Asm]   mv a2, v3  # live: [v2, a2, a1, zero, a0, v3]
// [Asm]   call input79.146  # live: [v2, zero, a0, v3]
// [Asm]   mv v5, a0  # live: [v2, zero, v3]
// [Asm]   # restore_ctx2  # live: [v2, zero, v3]
// [Asm]   addi v6, v3, -1  # live: [v2, v6, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, v6, zero, v3]
// [Asm]   mv a0, v2  # live: [v2, v6, zero, a0, v3]
// [Asm]   mv a1, zero  # live: [v2, a1, v6, zero, a0, v3]
// [Asm]   mv a2, v6  # live: [v2, a2, a1, zero, a0, v3]
// [Asm]   call quicksort59.143  # live: [v2, zero, a0, v3]
// [Asm]   mv v7, a0  # live: [v2, zero, v3]
// [Asm]   # restore_ctx2  # live: [v2, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, v3]
// [Asm]   mv a0, zero  # live: [v2, a0, v3]
// [Asm]   mv a1, v2  # live: [a1, a0, v3]
// [Asm]   mv a2, v3  # live: [a2, a1, a0]
// [Asm]   call output97.147  # live: [a0]
// [Asm]   mv v8, a0  # live: [v8]
// [Asm]   # restore_ctx2  # live: [v8]
// [Asm] # control
// [Asm]   mv a0, v8  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] input79.146:
// [Asm] # block info: defs: [v3, v7, v4, v6, v5, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .input79.146_5:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm]   mv v6, v3  # live: [v4, v5, v6, zero]
// [Asm]   mv v7, v4  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v8], uses: [v8, v5, v7], upward_exposed: [v5, v7], params_defs: [v5, v6, v7]
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v6, v5, zero, v7]
// [Asm] # block parameters: [v5, v6, v7]
// [Asm] .input79.146_0:
// [Asm]   addi v8, v7, -1  # live: [v8, v6, v5, zero, v7]
// [Asm] # control
// [Asm]   blt v8, v5, .input79.146_2  # live: [v6, v5, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v11, v6, v5, v14, a0, v7], upward_exposed: [v6, v5, v7], params_defs: []
// [Asm] # live_in: [v6, v5, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .input79.146_1:
// [Asm]   # save_ctx2  # live: [v6, v5, zero, v7]
// [Asm]   call minimbt_read_int  # live: [v6, v5, zero, a0, v7]
// [Asm]   mv v11, a0  # live: [v11, v6, v5, zero, v7]
// [Asm]   # restore_ctx2  # live: [v11, v6, v5, zero, v7]
// [Asm]   th.surw v11, v6, v5, 2  # live: [v6, v5, zero, v7]
// [Asm]   addi v14, v5, 1  # live: [v6, v14, zero, v7]
// [Asm] # control
// [Asm]   mv v5, v14  # live: [v5, v6, zero, v7]
// [Asm]   mv v6, v6  # live: [v5, v6, zero, v7]
// [Asm]   mv v7, v7  # live: [v5, v6, zero, v7]
// [Asm]   j .input79.146_0  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .input79.146_2:
// [Asm] # control
// [Asm]   mv v10, zero  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .input79.146_3:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] output97.147:
// [Asm] # block info: defs: [v3, v7, v4, v6, v5, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .output97.147_5:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm]   mv v6, v3  # live: [v4, v5, v6, zero]
// [Asm]   mv v7, v4  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v8], uses: [v8, v5, v7], upward_exposed: [v5, v7], params_defs: [v5, v6, v7]
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v6, v5, zero, v7]
// [Asm] # block parameters: [v5, v6, v7]
// [Asm] .output97.147_0:
// [Asm]   addi v8, v7, -1  # live: [v8, v6, v5, zero, v7]
// [Asm] # control
// [Asm]   blt v8, v5, .output97.147_2  # live: [v6, v5, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v13, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v6, v5, v12, v15, a0, v7], upward_exposed: [v6, v5, v7], params_defs: []
// [Asm] # live_in: [v6, v5, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .output97.147_1:
// [Asm]   th.lurw v12, v6, v5, 2  # live: [v6, v5, v12, zero, v7]
// [Asm]   # save_ctx2  # live: [v6, v5, v12, zero, v7]
// [Asm]   mv a0, v12  # live: [v6, v5, zero, a0, v7]
// [Asm]   call minimbt_print_int  # live: [v6, v5, zero, a0, v7]
// [Asm]   mv v13, a0  # live: [v6, v5, zero, v7]
// [Asm]   # restore_ctx2  # live: [v6, v5, zero, v7]
// [Asm]   # save_ctx2  # live: [v6, v5, zero, v7]
// [Asm]   call minimbt_print_endline  # live: [v6, v5, zero, a0, v7]
// [Asm]   mv v14, a0  # live: [v6, v5, zero, v7]
// [Asm]   # restore_ctx2  # live: [v6, v5, zero, v7]
// [Asm]   addi v15, v5, 1  # live: [v6, v15, zero, v7]
// [Asm] # control
// [Asm]   mv v5, v15  # live: [v5, v6, zero, v7]
// [Asm]   mv v6, v6  # live: [v5, v6, zero, v7]
// [Asm]   mv v7, v7  # live: [v5, v6, zero, v7]
// [Asm]   j .output97.147_0  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .output97.147_2:
// [Asm] # control
// [Asm]   mv v10, zero  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .output97.147_3:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call main75.145  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] quicksort59.143:
// [Asm] # block info: defs: [v3, v7, v8, v4, v6, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, s11, a0, zero], live_out: [v8, v6, s11, zero, v7]
// [Asm] # block parameters: []
// [Asm] .quicksort59.143_5:
// [Asm]   # save_ctx1  # live: [a2, a1, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, s11, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, s11, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, s11, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v2  # live: [v4, v6, s11, zero, v3]
// [Asm]   mv v7, v3  # live: [v4, v6, s11, zero, v7]
// [Asm]   mv v8, v4  # live: [v7, v6, s11, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v9], uses: [v7, v9, v8], upward_exposed: [v7, v8], params_defs: [v8, v6, v7]
// [Asm] # live_in: [v7, v6, s11, zero, v8], live_out: [v7, v6, s11, zero, v8]
// [Asm] # block parameters: [v6, v7, v8]
// [Asm] .quicksort59.143_0:
// [Asm]   addi v9, v8, -1  # live: [zero, v7, v8, v6, s11, v9]
// [Asm] # control
// [Asm]   blt v9, v7, .quicksort59.143_2  # live: [v7, v6, s11, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v14, v5, s11, v13], uses: [v5, v14, v7, v8, v6, s11], upward_exposed: [v7, v6, s11, v8], params_defs: []
// [Asm] # live_in: [v8, v6, s11, zero, v7], live_out: [v5, v13, zero, v8, v7, v6, s11]
// [Asm] # block parameters: []
// [Asm] .quicksort59.143_1:
// [Asm]   th.lurw v13, v6, v8, 2  # live: [v13, zero, v7, v8, v6, s11]
// [Asm]   addi v14, v7, -1  # live: [v14, v13, zero, v7, v8, v6, s11]
// [Asm]   addi v5, s11, -4  # live: [v5, v14, v13, zero, v7, v8, v6]
// [Asm]   andi s11, v5, -8  # live: [v5, v14, v13, zero, v7, v8, v6, s11]
// [Asm]   sw v14, 0(v5)  # live: [v5, v13, zero, v7, v8, v6, s11]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v19, v16, v17, v18, v20], uses: [v8, v5, v6, v13, v7], upward_exposed: [v8, v5, v6, v13, v7], params_defs: []
// [Asm] # live_in: [v5, v13, zero, v7, v8, v6, s11], live_out: [v16, v5, v18, zero, v20, v8, v7, v19, v17, v6, s11]
// [Asm] # block parameters: []
// [Asm] .quicksort59.143_27:
// [Asm] # control
// [Asm]   mv v16, v7  # live: [v16, v5, zero, v13, v8, v7, v6, s11]
// [Asm]   mv v17, v5  # live: [v16, v5, zero, v13, v8, v7, v17, v6, s11]
// [Asm]   mv v18, v6  # live: [v16, v5, v18, zero, v13, v8, v7, v17, v6, s11]
// [Asm]   mv v19, v13  # live: [v16, v5, v18, zero, v8, v7, v19, v17, v6, s11]
// [Asm]   mv v20, v8  # live: [v16, v5, v18, zero, v20, v8, v7, v19, v17, v6, s11]
// [Asm] 
// [Asm] # block info: defs: [v21], uses: [v16, v21, v20], upward_exposed: [v16, v20], params_defs: [v19, v16, v17, v18, v20]
// [Asm] # live_in: [v16, v5, v18, zero, v20, v8, v7, v19, v17, v6, s11], live_out: [v16, v5, v18, zero, v20, v8, v7, v19, v17, v6, s11]
// [Asm] # block parameters: [v16, v17, v18, v19, v20]
// [Asm] .quicksort59.143_19:
// [Asm]   addi v21, v20, -1  # live: [v16, v5, v18, v21, zero, v20, v7, v8, v19, v6, v17, s11]
// [Asm] # control
// [Asm]   blt v21, v16, .quicksort59.143_21  # live: [v16, v5, v18, zero, v20, v8, v7, v19, v17, v6, s11]
// [Asm] 
// [Asm] # block info: defs: [v41], uses: [v19, v41, v16, v18], upward_exposed: [v19, v16, v18], params_defs: []
// [Asm] # live_in: [v16, v5, v18, zero, v20, v8, v7, v19, v17, v6, s11], live_out: [v16, v5, v18, zero, v20, v8, v7, v19, v17, v6, s11]
// [Asm] # block parameters: []
// [Asm] .quicksort59.143_20:
// [Asm]   th.lurw v41, v18, v16, 2  # live: [v16, v5, v18, zero, v20, v8, v7, v19, v41, v6, v17, s11]
// [Asm] # control
// [Asm]   blt v19, v41, .quicksort59.143_23  # live: [v16, v5, v18, zero, v20, v8, v7, v19, v17, v6, s11]
// [Asm] 
// [Asm] # block info: defs: [v43, v46, v44], uses: [v17, v43, v44], upward_exposed: [v17], params_defs: []
// [Asm] # live_in: [v16, v5, v18, zero, v20, v8, v7, v19, v17, v6, s11], live_out: [v46, v16, v5, v18, zero, v20, v8, v7, v19, v6, v17, s11]
// [Asm] # block parameters: []
// [Asm] .quicksort59.143_22:
// [Asm]   lw v43, 0(v17)  # live: [v16, v5, v18, zero, v20, v8, v7, v19, v6, v17, v43, s11]
// [Asm]   addi v44, v43, 1  # live: [v16, v5, v18, zero, v20, v8, v7, v19, v6, v17, s11, v44]
// [Asm]   sw v44, 0(v17)  # live: [v16, v5, v18, zero, v20, v8, v7, v19, v6, v17, s11]
// [Asm]   lw v46, 0(v17)  # live: [v46, v16, v5, v18, zero, v20, v8, v7, v19, v6, v17, s11]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v48, v53, v50], uses: [v46, v16, v18, v48, zero, v50], upward_exposed: [v46, v16, v18, zero], params_defs: []
// [Asm] # live_in: [v46, v16, v5, v18, zero, v20, v8, v7, v19, v6, v17, s11], live_out: [v16, v5, v18, v53, zero, v20, v8, v7, v19, v6, v17, s11]
// [Asm] # block parameters: []
// [Asm] .quicksort59.143_29:
// [Asm]   th.lurw v48, v18, v46, 2  # live: [v16, v5, v46, v7, v17, s11, v18, v48, zero, v20, v8, v19, v6]
// [Asm]   th.lurw v50, v18, v16, 2  # live: [v16, v5, v46, v7, v17, s11, v18, v48, zero, v20, v50, v8, v19, v6]
// [Asm]   th.surw v50, v18, v46, 2  # live: [v16, v5, v18, v48, zero, v20, v7, v8, v19, v17, v6, s11]
// [Asm]   th.surw v48, v18, v16, 2  # live: [v16, v5, v18, zero, v20, v8, v7, v19, v6, v17, s11]
// [Asm] # control
// [Asm]   mv v53, zero  # live: [v16, v5, v18, v53, zero, v20, v8, v7, v19, v6, v17, s11]
// [Asm] 
// [Asm] # block info: defs: [v16, v54], uses: [v19, v16, v17, v18, v54, v20], upward_exposed: [v19, v16, v17, v18, v20], params_defs: [v53]
// [Asm] # live_in: [v16, v5, v18, v53, zero, v20, v8, v7, v19, v6, v17, s11], live_out: [v16, v5, v18, zero, v20, v8, v7, v19, v17, v6, s11]
// [Asm] # block parameters: [v53]
// [Asm] .quicksort59.143_24:
// [Asm]   addi v54, v16, 1  # live: [v5, v18, zero, v20, v8, v7, v19, v17, v6, s11, v54]
// [Asm] # control
// [Asm]   mv v16, v54  # live: [v16, v5, v18, zero, v20, v8, v7, v19, v17, v6, s11]
// [Asm]   mv v17, v17  # live: [v16, v5, v18, zero, v20, v8, v7, v19, v17, v6, s11]
// [Asm]   mv v18, v18  # live: [v16, v5, v18, zero, v20, v8, v7, v19, v17, v6, s11]
// [Asm]   mv v19, v19  # live: [v16, v5, v18, zero, v20, v8, v7, v19, v17, v6, s11]
// [Asm]   mv v20, v20  # live: [v16, v5, v18, zero, v20, v8, v7, v19, v17, v6, s11]
// [Asm]   j .quicksort59.143_19  # live: [v16, v5, v18, zero, v20, v8, v7, v19, v17, v6, s11]
// [Asm] 
// [Asm] # block info: defs: [v53], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v16, v5, v18, zero, v20, v8, v7, v19, v17, v6, s11], live_out: [v16, v5, v18, v53, zero, v20, v8, v7, v19, v6, v17, s11]
// [Asm] # block parameters: []
// [Asm] .quicksort59.143_23:
// [Asm] # control
// [Asm]   mv v53, zero  # live: [v16, v5, v18, v53, zero, v20, v8, v7, v19, v6, v17, s11]
// [Asm]   j .quicksort59.143_24  # live: [v16, v5, v18, v53, zero, v20, v8, v7, v19, v6, v17, s11]
// [Asm] 
// [Asm] # block info: defs: [v23], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v8, v6, s11], live_out: [v5, zero, v23, v7, v8, v6, s11]
// [Asm] # block parameters: []
// [Asm] .quicksort59.143_21:
// [Asm] # control
// [Asm]   mv v23, zero  # live: [v5, zero, v23, v8, v7, v6, s11]
// [Asm] 
// [Asm] # block info: defs: [v24], uses: [v23], upward_exposed: [v23], params_defs: [v23]
// [Asm] # live_in: [v5, zero, v23, v7, v8, v6, s11], live_out: [v5, zero, v7, v8, v6, v24, s11]
// [Asm] # block parameters: [v23]
// [Asm] .quicksort59.143_25:
// [Asm] # control
// [Asm]   mv v24, v23  # live: [v5, zero, v8, v7, v6, v24, s11]
// [Asm] 
// [Asm] # block info: defs: [v25, v28, v26], uses: [v25, v5, v26], upward_exposed: [v5], params_defs: [v24]
// [Asm] # live_in: [v5, zero, v7, v8, v6, v24, s11], live_out: [v5, zero, v7, v8, v6, s11, v28]
// [Asm] # block parameters: [v24]
// [Asm] .quicksort59.143_6:
// [Asm]   lw v25, 0(v5)  # live: [v25, v5, zero, v8, v7, v6, s11]
// [Asm]   addi v26, v25, 1  # live: [v5, zero, v26, v8, v7, v6, s11]
// [Asm]   sw v26, 0(v5)  # live: [v5, zero, v8, v7, v6, s11]
// [Asm]   lw v28, 0(v5)  # live: [v5, zero, v8, v7, v6, s11, v28]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v32, v30, v35], uses: [v32, v6, v28, zero, v30, v8], upward_exposed: [v6, v28, zero, v8], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v8, v6, s11, v28], live_out: [v5, zero, v7, v35, v8, v6, s11]
// [Asm] # block parameters: []
// [Asm] .quicksort59.143_15:
// [Asm]   th.lurw v30, v6, v28, 2  # live: [v5, zero, v30, v8, v7, v6, s11, v28]
// [Asm]   th.lurw v32, v6, v8, 2  # live: [v5, zero, v30, v8, v7, v32, v6, s11, v28]
// [Asm]   th.surw v32, v6, v28, 2  # live: [v5, zero, v30, v8, v7, v6, s11]
// [Asm]   th.surw v30, v6, v8, 2  # live: [v5, zero, v8, v7, v6, s11]
// [Asm] # control
// [Asm]   mv v35, zero  # live: [v5, zero, v35, v8, v7, v6, s11]
// [Asm] 
// [Asm] # block info: defs: [t1, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, v36, ft2, v37, a2, a3, v39, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, v38, t2], uses: [v5, a0, v7, v36, v8, a2, v37, v6, a1, v39], upward_exposed: [v8, v5, v6, v7], params_defs: [v35]
// [Asm] # live_in: [v5, zero, v8, v7, v35, v6, s11], live_out: [v8, v6, s11, zero, v7]
// [Asm] # block parameters: [v35]
// [Asm] .quicksort59.143_7:
// [Asm]   lw v36, 0(v5)  # live: [zero, v36, v8, v7, v6, s11]
// [Asm]   addi v37, v36, -1  # live: [zero, v36, v8, v7, v37, v6, s11]
// [Asm]   # save_ctx2  # live: [zero, v36, v8, v7, v37, v6, s11]
// [Asm]   mv a0, v6  # live: [zero, a0, v36, v8, v7, v37, v6, s11]
// [Asm]   mv a1, v7  # live: [zero, a0, v36, v8, v37, v6, a1, s11]
// [Asm]   mv a2, v37  # live: [zero, a0, v36, v8, a2, v6, a1, s11]
// [Asm]   call quicksort59.143  # live: [v36, v6, s11, zero, a0, v8]
// [Asm]   mv v38, a0  # live: [v36, v6, s11, zero, v8]
// [Asm]   # restore_ctx2  # live: [v36, v6, s11, zero, v8]
// [Asm]   addi v39, v36, 1  # live: [v6, s11, zero, v39, v8]
// [Asm] # control
// [Asm]   mv v6, v6  # live: [v6, s11, zero, v39, v8]
// [Asm]   mv v7, v39  # live: [v8, v6, s11, zero, v7]
// [Asm]   mv v8, v8  # live: [v8, v6, s11, zero, v7]
// [Asm]   j .quicksort59.143_0  # live: [v8, v6, s11, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v11], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v11]
// [Asm] # block parameters: []
// [Asm] .quicksort59.143_2:
// [Asm] # control
// [Asm]   mv v11, zero  # live: [v11]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v11, a0], upward_exposed: [v11], params_defs: [v11]
// [Asm] # live_in: [v11], live_out: []
// [Asm] # block parameters: [v11]
// [Asm] .quicksort59.143_3:
// [Asm] # control
// [Asm]   mv a0, v11  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("swap", Unit), args: [("arr", Array(Int)), ("i", Int), ("j", Int)], body: Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j"))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit)))}, LetRec({name: ("partition", Int), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Var("high")), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Prim(Var("low"), Int(1), Sub, kind=Some(Int))), LetRec({name: ("l", Var({val: Some(Unit)})), args: [("j", Var({val: Some(Int)}))], body: If(LE(Var("j"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit), App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("l"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0))))))))}, LetRec({name: ("quicksort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: If(LE(Var("low"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("pi", Var({val: Some(Int)})), App(Var("partition"), [Var("arr"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Var("low"), Prim(Var("pi"), Int(1), Sub, kind=Some(Int))]), App(Var("quicksort"), [Var("arr"), Prim(Var("pi"), Int(1), Add, kind=Some(Int)), Var("high")]))), Unit)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)])))))))}, App(Var("main"), [])))))
// [Knf] build_knf: Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j"))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit)))
// [Knf] build_knf: Get(Var("arr"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j"))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit))
// [Knf] build_knf: Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j")))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("arr"), Var("j"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit)
// [Knf] build_knf: Put(Var("arr"), Var("j"), Var("tmp"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Var("tmp")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("partition", Int), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Var("high")), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Prim(Var("low"), Int(1), Sub, kind=Some(Int))), LetRec({name: ("l", Var({val: Some(Unit)})), args: [("j", Var({val: Some(Int)}))], body: If(LE(Var("j"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit), App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("l"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0))))))))}, LetRec({name: ("quicksort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: If(LE(Var("low"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("pi", Var({val: Some(Int)})), App(Var("partition"), [Var("arr"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Var("low"), Prim(Var("pi"), Int(1), Sub, kind=Some(Int))]), App(Var("quicksort"), [Var("arr"), Prim(Var("pi"), Int(1), Add, kind=Some(Int)), Var("high")]))), Unit)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)])))))))}, App(Var("main"), []))))
// [Knf] build_knf: Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Var("high")), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Prim(Var("low"), Int(1), Sub, kind=Some(Int))), LetRec({name: ("l", Var({val: Some(Unit)})), args: [("j", Var({val: Some(Int)}))], body: If(LE(Var("j"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit), App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("l"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0))))))))
// [Knf] build_knf: Get(Var("arr"), Var("high"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Prim(Var("low"), Int(1), Sub, kind=Some(Int))), LetRec({name: ("l", Var({val: Some(Unit)})), args: [("j", Var({val: Some(Int)}))], body: If(LE(Var("j"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit), App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("l"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0)))))))
// [Knf] build_knf: Array(Int(1), Prim(Var("low"), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Prim(Var("low"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("l", Var({val: Some(Unit)})), args: [("j", Var({val: Some(Int)}))], body: If(LE(Var("j"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit), App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("l"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0))))))
// [Knf] build_knf: If(LE(Var("j"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit), App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Var("high"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit), App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit)
// [Knf] build_knf: Get(Var("arr"), Var("j"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Var("pivot")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]))
// [Knf] build_knf: Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])
// [Knf] build_knf: Var("swap")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("l")
// [Knf] build_knf: Prim(Var("j"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("l"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0)))))
// [Knf] build_knf: App(Var("l"), [Var("low")])
// [Knf] build_knf: Var("l")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0))))
// [Knf] build_knf: Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0)))
// [Knf] build_knf: App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")])
// [Knf] build_knf: Var("swap")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("quicksort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: If(LE(Var("low"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("pi", Var({val: Some(Int)})), App(Var("partition"), [Var("arr"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Var("low"), Prim(Var("pi"), Int(1), Sub, kind=Some(Int))]), App(Var("quicksort"), [Var("arr"), Prim(Var("pi"), Int(1), Add, kind=Some(Int)), Var("high")]))), Unit)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)])))))))}, App(Var("main"), [])))
// [Knf] build_knf: If(LE(Var("low"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("pi", Var({val: Some(Int)})), App(Var("partition"), [Var("arr"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Var("low"), Prim(Var("pi"), Int(1), Sub, kind=Some(Int))]), App(Var("quicksort"), [Var("arr"), Prim(Var("pi"), Int(1), Add, kind=Some(Int)), Var("high")]))), Unit)
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Prim(Var("high"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("pi", Var({val: Some(Int)})), App(Var("partition"), [Var("arr"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Var("low"), Prim(Var("pi"), Int(1), Sub, kind=Some(Int))]), App(Var("quicksort"), [Var("arr"), Prim(Var("pi"), Int(1), Add, kind=Some(Int)), Var("high")])))
// [Knf] build_knf: App(Var("partition"), [Var("arr"), Var("low"), Var("high")])
// [Knf] build_knf: Var("partition")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Var("low"), Prim(Var("pi"), Int(1), Sub, kind=Some(Int))]), App(Var("quicksort"), [Var("arr"), Prim(Var("pi"), Int(1), Add, kind=Some(Int)), Var("high")]))
// [Knf] build_knf: App(Var("quicksort"), [Var("arr"), Var("low"), Prim(Var("pi"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("quicksort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Prim(Var("pi"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("pi")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("quicksort"), [Var("arr"), Prim(Var("pi"), Int(1), Add, kind=Some(Int)), Var("high")])
// [Knf] build_knf: Var("quicksort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("pi"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pi")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)])))))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)])))))))
// [Knf] build_knf: App(Var("read_int"), [])
// [Knf] build_knf: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)]))))))
// [Knf] build_knf: Array(Var("len"), Int(0))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)])))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("arr"), Var("i"), App(Var("read_int"), []))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("read_int"), [])
// [Knf] build_knf: App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("input")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)]))))
// [Knf] build_knf: App(Var("input"), [Int(0)])
// [Knf] build_knf: Var("input")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)])))
// [Knf] build_knf: App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("quicksort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)]))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: App(Var("print_int"), [Get(Var("arr"), Var("i"))])
// [Knf] build_knf: Get(Var("arr"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("output")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("output"), [Int(0)])
// [Knf] build_knf: Var("output")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main75.145
// [Main]   .type main75.145, @function
// [Main] # leaf false
// [Main] main75.145:
// [Main] .main75.145_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   call minimbt_read_int
// [Main]   mv s0, a0
// [Main]   slliw a0, s0, 2
// [Main]   sub s1, s11, a0
// [Main]   andi s11, s1, -8
// [Main]   mv a1, s0
// [Main]   mv a0, zero
// [Main]   mv a1, s1
// [Main]   mv a2, s0
// [Main]   call input79.146
// [Main]   addi a2, s0, -1
// [Main]   mv a0, s1
// [Main]   mv a1, zero
// [Main]   call quicksort59.143
// [Main]   mv a0, zero
// [Main]   mv a1, s1
// [Main]   mv a2, s0
// [Main]   call output97.147
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl input79.146
// [Main]   .type input79.146, @function
// [Main] # leaf false
// [Main] input79.146:
// [Main] .input79.146_5:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s1, a0
// [Main]   mv s0, a1
// [Main]   mv s2, a2
// [Main] 
// [Main] .input79.146_0:
// [Main]   addi a0, s2, -1
// [Main]   blt a0, s1, .input79.146_2
// [Main] 
// [Main] .input79.146_1:
// [Main]   call minimbt_read_int
// [Main]   th.surw a0, s0, s1, 2
// [Main]   addi a0, s1, 1
// [Main]   mv s1, a0
// [Main]   j .input79.146_0
// [Main] 
// [Main] .input79.146_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .input79.146_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl output97.147
// [Main]   .type output97.147, @function
// [Main] # leaf false
// [Main] output97.147:
// [Main] .output97.147_5:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s1, a0
// [Main]   mv s0, a1
// [Main]   mv s2, a2
// [Main] 
// [Main] .output97.147_0:
// [Main]   addi a0, s2, -1
// [Main]   blt a0, s1, .output97.147_2
// [Main] 
// [Main] .output97.147_1:
// [Main]   th.lurw a0, s0, s1, 2
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   addi a0, s1, 1
// [Main]   mv s1, a0
// [Main]   j .output97.147_0
// [Main] 
// [Main] .output97.147_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .output97.147_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call main75.145
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl quicksort59.143
// [Main]   .type quicksort59.143, @function
// [Main] # leaf false
// [Main] quicksort59.143:
// [Main] .quicksort59.143_5:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv a3, a2
// [Main]   mv s1, a0
// [Main]   mv a2, a1
// [Main]   mv s0, a3
// [Main] 
// [Main] .quicksort59.143_0:
// [Main]   addi a0, s0, -1
// [Main]   blt a0, a2, .quicksort59.143_2
// [Main] 
// [Main] .quicksort59.143_1:
// [Main]   th.lurw a0, s1, s0, 2
// [Main]   addi a3, a2, -1
// [Main]   addi a1, s11, -4
// [Main]   andi s11, a1, -8
// [Main]   sw a3, 0(a1)
// [Main] 
// [Main] .quicksort59.143_27:
// [Main]   mv a3, a2
// [Main]   mv a5, s1
// [Main]   mv a4, a0
// [Main]   mv a6, s0
// [Main] 
// [Main] .quicksort59.143_19:
// [Main]   addi a0, a6, -1
// [Main]   blt a0, a3, .quicksort59.143_21
// [Main] 
// [Main] .quicksort59.143_20:
// [Main]   th.lurw a0, a5, a3, 2
// [Main]   blt a4, a0, .quicksort59.143_23
// [Main] 
// [Main] .quicksort59.143_22:
// [Main]   lw a0, 0(a1)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(a1)
// [Main]   lw a0, 0(a1)
// [Main] 
// [Main] .quicksort59.143_29:
// [Main]   th.lurw a7, a5, a0, 2
// [Main]   th.lurw t0, a5, a3, 2
// [Main]   th.surw t0, a5, a0, 2
// [Main]   th.surw a7, a5, a3, 2
// [Main]   mv a0, zero
// [Main] 
// [Main] .quicksort59.143_24:
// [Main]   addi a0, a3, 1
// [Main]   mv a3, a0
// [Main]   j .quicksort59.143_19
// [Main] 
// [Main] .quicksort59.143_23:
// [Main]   mv a0, zero
// [Main]   j .quicksort59.143_24
// [Main] 
// [Main] .quicksort59.143_21:
// [Main]   mv a0, zero
// [Main] 
// [Main] .quicksort59.143_25:
// [Main] 
// [Main] .quicksort59.143_6:
// [Main]   lw a0, 0(a1)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(a1)
// [Main]   lw a0, 0(a1)
// [Main] 
// [Main] .quicksort59.143_15:
// [Main]   th.lurw a3, s1, a0, 2
// [Main]   th.lurw a4, s1, s0, 2
// [Main]   th.surw a4, s1, a0, 2
// [Main]   th.surw a3, s1, s0, 2
// [Main]   mv a0, zero
// [Main] 
// [Main] .quicksort59.143_7:
// [Main]   lw s2, 0(a1)
// [Main]   addi a3, s2, -1
// [Main]   mv a0, s1
// [Main]   mv a1, a2
// [Main]   mv a2, a3
// [Main]   call quicksort59.143
// [Main]   addi a0, s2, 1
// [Main]   mv a2, a0
// [Main]   j .quicksort59.143_0
// [Main] 
// [Main] .quicksort59.143_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .quicksort59.143_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f5, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [Wasm] LoweringOrder: [5, 0, 2, 3, 1]
// [Wasm] LoweringOrder: [[4], [1, 2], [3], [], [0]]
// [Wasm] LoweringOrder: HashMap::of([(b1, 0), (b5, 0), (b2, 1), (b3, 1), (b0, 0)])
// [Wasm] LoweringOrder: [b5, b0, b1, b2, b3]
// [Wasm] LoweringOrder: HashMap::of([(b1, 2), (b5, 0), (b2, 0), (b3, 1), (b0, 1)])
// [Wasm] Lowering function output97.147
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%5), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f4, fpref=$f.0), FnParam(fref=f4, fpref=$f.1), FnParam(fref=f4, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function output97.147 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function main75.145
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_int", args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Zero])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Lowering insn Call(ty=Unit, f=f3, args=[Int32(val=0), Mem(fref=f5, mref=m0), Insn(iref=%0)])
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Call(ty=Unit, f=f2, args=[Mem(fref=f5, mref=m0), Int32(val=0), Insn(iref=%3)])
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[Int32(val=0), Mem(fref=f5, mref=m0), Insn(iref=%0)])
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%5)])
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function main75.145 to wasm
// [Wasm] LoweringOrder: [5, 0, 2, 3, 1, 27, 19, 21, 25, 6, 15, 7, 20, 23, 22, 29, 24]
// [Wasm] LoweringOrder: [[4], [1, 2], [3], [], [27], [26], [20, 21], [25], [6], [15], [7], [0], [22, 23], [24], [29], [24], [19]]
// [Wasm] LoweringOrder: HashMap::of([(b23, 1), (b19, 0), (b15, 2), (b1, 0), (b2, 4), (b24, 0), (b22, 0), (b21, 2), (b20, 0), (b6, 2), (b0, 0), (b25, 2), (b5, 0), (b29, 0), (b3, 4), (b7, 2), (b27, 0)])
// [Wasm] LoweringOrder: [b5, b0, b1, b27, b19, b20, b22, b29, b24, b23, b21, b25, b6, b15, b7, b2, b3]
// [Wasm] LoweringOrder: HashMap::of([(b23, 0), (b19, 4), (b15, 3), (b1, 2), (b2, 0), (b24, 8), (b22, 6), (b21, 0), (b20, 5), (b6, 2), (b0, 1), (b25, 1), (b5, 0), (b29, 7), (b3, 1), (b7, 4), (b27, 3)])
// [Wasm] Lowering function quicksort59.143
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b19, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.0) -> $b19.$b.0
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering control Jump(target=b19, args=[Insn(iref=%28), BlockParam(bref=b19, bpref=$b.1), BlockParam(bref=b19, bpref=$b.2), BlockParam(bref=b19, bpref=$b.3), BlockParam(bref=b19, bpref=$b.4)])
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.0) -> $b19.$b.0
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.1) -> $b19.$b.1
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.1) -> $b19.$b.1
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.2) -> $b19.$b.2
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.2) -> $b19.$b.2
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.3) -> $b19.$b.3
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.3) -> $b19.$b.3
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.4) -> $b19.$b.4
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.4) -> $b19.$b.4
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b19, bpref=$b.2), offset=Insn(iref=%26), width=@32))
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.2) -> $b19.$b.2
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b19, bpref=$b.2), offset=BlockParam(bref=b19, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.2) -> $b19.$b.2
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.0) -> $b19.$b.0
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b19, bpref=$b.2), offset=Insn(iref=%26), width=@32), val=Insn(iref=%30))
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.2) -> $b19.$b.2
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b19, bpref=$b.2), offset=BlockParam(bref=b19, bpref=$b.0), width=@32), val=Insn(iref=%29))
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.2) -> $b19.$b.2
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.0) -> $b19.$b.0
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering control Jump(target=b24, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b19, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.1) -> $b19.$b.1
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%23), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b19, bpref=$b.1), index=0, width=@32), val=Insn(iref=%24))
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.1) -> $b19.$b.1
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b19, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.1) -> $b19.$b.1
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering control Jump(target=b29, args=[])
// [Wasm] Lowering control Jump(target=b24, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b19, bpref=$b.2), offset=BlockParam(bref=b19, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.2) -> $b19.$b.2
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.0) -> $b19.$b.0
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%21), BlockParam(bref=b19, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.3) -> $b19.$b.3
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering control Branch(cond=Insn(iref=%22), t=b22, t_args=[], f=b23, f_args=[])
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f2, mref=m0), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%11), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Call(ty=Unit, f=f2, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%12)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%11), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%14), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), offset=Insn(iref=%9), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), offset=BlockParam(bref=b0, bpref=$b.2), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), offset=Insn(iref=%9), width=@32), val=Insn(iref=%16))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), offset=BlockParam(bref=b0, bpref=$b.2), width=@32), val=Insn(iref=%15))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering control Jump(target=b7, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f2, mref=m0), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f2, mref=m0), index=0, width=@32), val=Insn(iref=%7))
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f2, mref=m0), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering control Jump(target=b15, args=[])
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b25, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b25, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b19, bpref=$b.4), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.4) -> $b19.$b.4
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b19, bpref=$b.0), Insn(iref=%19)])
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.0) -> $b19.$b.0
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering control Branch(cond=Insn(iref=%20), t=b20, t_args=[], f=b21, f_args=[])
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering control Jump(target=b26, args=[BlockParam(bref=b0, bpref=$b.1), Mem(fref=f2, mref=m0), BlockParam(bref=b0, bpref=$b.0), Insn(iref=%2), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.0) -> $b19.$b.0
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.1) -> $b19.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.2) -> $b19.$b.2
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.3) -> $b19.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.4) -> $b19.$b.4
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), offset=BlockParam(bref=b0, bpref=$b.2), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Insn(iref=%3))])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Lowering control Jump(target=b27, args=[])
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f2, fpref=$f.0), FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local BlockParam(bref=b19, bpref=$b.0) -> $b19.$b.0
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local Insn(iref=%24) -> $%24
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b19, bpref=$b.3) -> $b19.$b.3
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local Insn(iref=%29) -> $%29
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local BlockParam(bref=b19, bpref=$b.2) -> $b19.$b.2
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local BlockParam(bref=b19, bpref=$b.4) -> $b19.$b.4
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local Insn(iref=%30) -> $%30
// [Wasm] Local BlockParam(bref=b19, bpref=$b.1) -> $b19.$b.1
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function quicksort59.143 to wasm
// [Wasm] LoweringOrder: [5, 0, 2, 3, 1]
// [Wasm] LoweringOrder: [[4], [1, 2], [3], [], [0]]
// [Wasm] LoweringOrder: HashMap::of([(b1, 0), (b5, 0), (b2, 1), (b3, 1), (b0, 0)])
// [Wasm] LoweringOrder: [b5, b0, b1, b2, b3]
// [Wasm] LoweringOrder: HashMap::of([(b1, 2), (b5, 0), (b2, 0), (b3, 1), (b0, 1)])
// [Wasm] Lowering function input79.146
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_int", args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), offset=BlockParam(bref=b0, bpref=$b.0), width=@32), val=Insn(iref=%2))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%4), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f3, fpref=$f.0), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function input79.146 to wasm
// [KnfOpt] freq: {swap1: Many(2), partition14: Once, l26: Many(2), quicksort59: Many(3), main75: Once, input79: Many(2), output97: Many(2)}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 33
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 33
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Knf inline Some(partition14)
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 19
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 19
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 85
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Inline decision rejected
// [KnfOpt] freq: {swap1: Many(2), quicksort59: Many(3), l26.115: Many(2), main75: Once, input79: Many(2), output97: Many(2)}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 33
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 33
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 85
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 85
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 85
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Inline decision rejected
// [KnfOpt] freq: {swap1: Many(2), quicksort59: Many(3), l26.115: Many(2), main75: Once, input79: Many(2), output97: Many(2)}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 33
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 33
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 85
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 85
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 85
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Inline decision rejected
// [KnfOpt] Numbers of let rec: 6 6 0
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %6: Call(ty=Unit, f=f4, args=[Insn(iref=%5), FnParam(fref=f4, fpref=$f.1), FnParam(fref=f4, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %10: Call(ty=Unit, f=f1, args=[Insn(iref=%9), FnParam(fref=f1, fpref=$f.1), FnParam(fref=f1, fpref=$f.2), FnParam(fref=f1, fpref=$f.3), FnParam(fref=f1, fpref=$f.4)])
// [CoreOpt] eliminated tail rec call %15: Call(ty=Unit, f=f2, args=[FnParam(fref=f2, fpref=$f.0), Insn(iref=%14), FnParam(fref=f2, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %5: Call(ty=Unit, f=f3, args=[Insn(iref=%4), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2)])
// [CoreOpt] Call frequnce: FnCallFreq({f12: Once, f4: Once, f1: Once, f5: Once, f2: Multiple, f3: Once, f0: Multiple})
// [CoreOpt] allow_inline: false %0 main75.145 false true true false true
// [CoreOpt] allow_inline: true %8 swap1.142 true false true true true
// [CoreOpt] allow_inline: false %2 input79.146 false true true false true
// [CoreOpt] allow_inline: false %4 quicksort59.143 false false true false true
// [CoreOpt] allow_inline: false %5 output97.147 false true true false true
// [CoreOpt] allow_inline: true %5 l26.144 true true true false true
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] allow_inline: true %10 swap1.142 true false true true true
// [CoreOpt] post splitting: Insn(iref=%10) -> BlockParam(bref=b7, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%10) -> BlockParam(bref=b7, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%10) -> BlockParam(bref=b7, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%10) -> BlockParam(bref=b7, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%10) -> BlockParam(bref=b7, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%10) -> BlockParam(bref=b7, bpref=$b.0)
// [CoreOpt] allow_inline: false %10 swap1.142 true false false true true
// [CoreOpt] allow_inline: false %5 l26.144 true true false false true
// [CoreOpt] allow_inline: false %13 quicksort59.143 true false true false true
// [CoreOpt] allow_inline: false %0 main75.145 false true true false true
// [CoreOpt] allow_inline: true %8 swap1.142 true false true true true
// [CoreOpt] l26.144 is inlining Call(ty=Unit, f=f0, args=[BlockParam(bref=b0, bpref=$b.2), Insn(iref=%7), BlockParam(bref=b0, bpref=$b.0)])
// [CoreOpt] shifted callee .fn swap1.142 #f0 : fn(array[int32], int32, int32) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b10 {
// [CoreOpt]   .bb #b10 () {
// [CoreOpt]     let %10: int32 = load int32 offset($f0, $f1 * @32)
// [CoreOpt]     let %11: int32 = load int32 offset($f0, $f2 * @32)
// [CoreOpt]     let _ = store int32 offset($f0, $f1 * @32) <- %11
// [CoreOpt]     let _ = store int32 offset($f0, $f2 * @32) <- %10
// [CoreOpt]     return ()
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] allow_inline: false %2 input79.146 false true true false true
// [CoreOpt] allow_inline: false %4 quicksort59.143 false false true false true
// [CoreOpt] allow_inline: false %5 output97.147 false true true false true
// [CoreOpt] allow_inline: true %10 swap1.142 true false true true true
// [CoreOpt] quicksort59.143 is inlining Call(ty=Unit, f=f0, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%9), BlockParam(bref=b0, bpref=$b.2)])
// [CoreOpt] shifted callee .fn swap1.142 #f0 : fn(array[int32], int32, int32) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b15 {
// [CoreOpt]   .bb #b15 () {
// [CoreOpt]     let %15: int32 = load int32 offset($f0, $f1 * @32)
// [CoreOpt]     let %16: int32 = load int32 offset($f0, $f2 * @32)
// [CoreOpt]     let _ = store int32 offset($f0, $f1 * @32) <- %16
// [CoreOpt]     let _ = store int32 offset($f0, $f2 * @32) <- %15
// [CoreOpt]     return ()
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] allow_inline: true %5 l26.144 true true true false true
// [CoreOpt] quicksort59.143 is inlining Call(ty=Unit, f=f1, args=[BlockParam(bref=b0, bpref=$b.1), Mem(fref=f2, mref=m0), BlockParam(bref=b0, bpref=$b.0), Insn(iref=%2), BlockParam(bref=b0, bpref=$b.2)])
// [CoreOpt] shifted callee .fn l26.144 #f1 : fn(int32, array[int32], array[int32], int32, int32) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b27 {
// [CoreOpt]   .bb #b19 (int32, array[int32], array[int32], int32, int32) {
// [CoreOpt]     let %19: int32 = sub($b19.4, 1)
// [CoreOpt]     let %20: bool = le($b19.0, %19)
// [CoreOpt]     br %20 b20() b21()
// [CoreOpt]   }
// [CoreOpt]   .bb #b20 () {
// [CoreOpt]     let %21: int32 = load int32 offset($b19.2, $b19.0 * @32)
// [CoreOpt]     let %22: bool = le(%21, $b19.3)
// [CoreOpt]     br %22 b22() b23()
// [CoreOpt]   }
// [CoreOpt]   .bb #b21 () {
// [CoreOpt]     jump b25(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b22 () {
// [CoreOpt]     let %23: int32 = load int32 field($b19.1, 0 * @32)
// [CoreOpt]     let %24: int32 = add(%23, 1)
// [CoreOpt]     let _ = store int32 field($b19.1, 0 * @32) <- %24
// [CoreOpt]     let %26: int32 = load int32 field($b19.1, 0 * @32)
// [CoreOpt]     jump b29()
// [CoreOpt]   }
// [CoreOpt]   .bb #b23 () {
// [CoreOpt]     jump b24(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b24 (unit) {
// [CoreOpt]     let %28: int32 = add($b19.0, 1)
// [CoreOpt]     jump b19(%28, $b19.1, $b19.2, $b19.3, $b19.4)
// [CoreOpt]   }
// [CoreOpt]   .bb #b25 (unit) {
// [CoreOpt]     return $b25.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b26 pre #Some(b27) header #b19 {
// [CoreOpt]     .block #b25
// [CoreOpt]     .block #b23
// [CoreOpt]     .block #b20
// [CoreOpt]     .block #b24
// [CoreOpt]     .block #b21
// [CoreOpt]     .block #b22
// [CoreOpt]   }
// [CoreOpt]   .bb #b27 () {
// [CoreOpt]     jump b26($f0, $f1, $f2, $f3, $f4)
// [CoreOpt]   }
// [CoreOpt]   .bb #b29 () {
// [CoreOpt]     let %29: int32 = load int32 offset($b19.2, %26 * @32)
// [CoreOpt]     let %30: int32 = load int32 offset($b19.2, $b19.0 * @32)
// [CoreOpt]     let _ = store int32 offset($b19.2, %26 * @32) <- %30
// [CoreOpt]     let _ = store int32 offset($b19.2, $b19.0 * @32) <- %29
// [CoreOpt]     jump b24(())
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] allow_inline: false %13 quicksort59.143 true false true false true
// [CoreOpt] Remove dead function: f1
// [CoreOpt] Remove dead function: f0
// [CoreOpt] allow_inline: false %0 main75.145 false true true false true
// [CoreOpt] allow_inline: false %2 input79.146 false true true false true
// [CoreOpt] allow_inline: false %4 quicksort59.143 false false true false true
// [CoreOpt] allow_inline: false %5 output97.147 false true true false true
// [CoreOpt] allow_inline: false %13 quicksort59.143 true false true false true
// [CoreOpt] allow_inline: false %0 main75.145 false true true false true
// [CoreOpt] allow_inline: false %2 input79.146 false true true false true
// [CoreOpt] allow_inline: false %4 quicksort59.143 false false true false true
// [CoreOpt] allow_inline: false %5 output97.147 false true true false true
// [CoreOpt] allow_inline: false %13 quicksort59.143 true false true false true
// [CoreOpt] allow_inline: false %0 main75.145 false true true false true
// [CoreOpt] allow_inline: false %2 input79.146 false true true false true
// [CoreOpt] allow_inline: false %4 quicksort59.143 false false true false true
// [CoreOpt] allow_inline: false %5 output97.147 false true true false true
// [CoreOpt] allow_inline: false %13 quicksort59.143 true false true false true
// [CoreOpt] allow_inline: false %0 main75.145 false true true false true
// [CoreOpt] allow_inline: false %2 input79.146 false true true false true
// [CoreOpt] allow_inline: false %4 quicksort59.143 false false true false true
// [CoreOpt] allow_inline: false %5 output97.147 false true true false true
// [CoreOpt] allow_inline: false %13 quicksort59.143 true false true false true
// [CoreOpt2] LVN subst Insn(iref=%39) with Insn(iref=%42)
// [CoreOpt2] LVN subst Insn(iref=%36) with Insn(iref=%41)
// [CoreOpt2] LVN subst Insn(iref=%51) with Insn(iref=%54)
// [CoreOpt2] LVN subst Insn(iref=%48) with Insn(iref=%53)
