// [Asm] pre_assigned_registers: FnParam(fref=f6, fpref=$f.0) -> v2, Insn(iref=%9) -> v19, Insn(iref=%8) -> v18, FnParam(fref=f6, fpref=$f.2) -> v4, Insn(iref=%10) -> v20, BlockParam(bref=b0, bpref=$b.0) -> v5, BlockParam(bref=b0, bpref=$b.1) -> v6, BlockParam(bref=b0, bpref=$b.2) -> v7, Self(fref=f6) -> v0, Insn(iref=%5) -> v13, Insn(iref=%0) -> v8, Insn(iref=%4) -> v12, FnParam(fref=f6, fpref=$f.1) -> v3, Insn(iref=%3) -> v11, Insn(iref=%7) -> v15, BlockParam(bref=b5, bpref=$b.0) -> v16, BlockParam(bref=b6, bpref=$b.0) -> v17, Insn(iref=%2) -> v10, Insn(iref=%1) -> v9, Insn(iref=%11) -> v21, Insn(iref=%6) -> v14
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%5), Insn(iref=%6)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Asm] defs: [v32]
// [Asm] live_set: [v32, v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: [v33]
// [Asm] live_set: [v6, v5, zero, v33, v7]
// [Asm] move_origin: []
// [Asm] defined: v33 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v6, v5, v10, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, v10, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v6, v5, zero, a0, v7]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, v5, zero, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, v5, zero, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v12]
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v6, v13, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v6, v14, v13, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v13, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v6, zero, v13, v7]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v7, v6, zero, v13, v26]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v6, v18, zero, v13, v7]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v18, zero, v13, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v7, v6, zero, v13, a0]
// [Asm] move_origin: [v18]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v7, v6, zero, v13, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v19]
// [Asm] live_set: [v6, zero, v13, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero, v13, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6, zero, v13, v7]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v7, v6, zero, v13, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v20]
// [Asm] live_set: [v6, zero, v13, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero, v13, v7]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v6, v21, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v21]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v6]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v17]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v17]
// [Asm] move_origin: [v16]
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v17]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v16]
// [Asm] move_origin: [zero]
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v17]
// [Asm] move_origin: [zero]
// [Asm] defined: v17 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move_origin: [v3]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v4]
// [Asm] defined: v7 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of output97l5_6"];
// [Asm]   r0 [label="v32 ← a0", color=green];
// [Asm]   r33 [label="v2 ← a0", color=green];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r26 [label="v18 ← a0", color=green];
// [Asm]   r6 [label="v10 ← a0", color=green];
// [Asm]   r13 [label="a1", color=blue];
// [Asm]   r4 [label="v7 ← s2", color=green];
// [Asm]   r29 [label="v21 ← a0", color=green];
// [Asm]   r35 [label="v4 ← a2", color=green];
// [Asm]   r7 [label="a0", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r5 [label="v33 ← a0", color=green];
// [Asm]   r32 [label="v8 ← a0", color=green];
// [Asm]   r15 [label="a3", color=blue];
// [Asm]   r24 [label="v25 ← a0", color=green];
// [Asm]   r31 [label="v16 ← a0", color=green];
// [Asm]   r17 [label="a5", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r20 [label="v11 ← a0", color=green];
// [Asm]   r23 [label="v14 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r27 [label="v19 ← a0", color=green];
// [Asm]   r1 [label="v6 ← s0", color=green];
// [Asm]   r28 [label="v20 ← a0", color=green];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r34 [label="v3 ← a1", color=green];
// [Asm]   r22 [label="v13 ← s1", color=green];
// [Asm]   r14 [label="a2", color=blue];
// [Asm]   r30 [label="v17 ← a0", color=green];
// [Asm]   r25 [label="v26 ← a0", color=green];
// [Asm]   r2 [label="v5 ← s1", color=green];
// [Asm]   r16 [label="a4", color=blue];
// [Asm]   r18 [label="a6", color=blue];
// [Asm]   r19 [label="a7", color=blue];
// [Asm]   r21 [label="v12 ← a0", color=green];
// [Asm]   r2 -- r32;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r32;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r4 -- r22;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r34;
// [Asm]   r3 -- r5;
// [Asm]   r14 -- r34;
// [Asm]   r2 -- r34;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r9;
// [Asm]   r22 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r13 -- r33;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r7 -- r10;
// [Asm]   r4 -- r28;
// [Asm]   r19 -- r22;
// [Asm]   r17 -- r22;
// [Asm]   r2 -- r12;
// [Asm]   r22 -- r27;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r4 -- r12;
// [Asm]   r10 -- r22;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r29;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r33;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r27;
// [Asm]   r4 -- r25;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r8 -- r22;
// [Asm]   r4 -- r8;
// [Asm]   r13 -- r22;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r35;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r1 -- r35;
// [Asm]   r7 -- r8;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r14 -- r22;
// [Asm]   r16 -- r22;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r34 -- r35;
// [Asm]   r4 -- r23;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r23;
// [Asm]   r15 -- r22;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r22;
// [Asm]   r7 -- r13;
// [Asm]   r1 -- r32;
// [Asm]   r1 -- r15;
// [Asm]   r22 -- r26;
// [Asm]   r4 -- r20;
// [Asm]   r1 -- r13;
// [Asm]   r11 -- r22;
// [Asm]   r3 -- r28;
// [Asm]   r33 -- r35;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r18 -- r22;
// [Asm]   r7 -- r9;
// [Asm]   r22 -- r24;
// [Asm]   r1 -- r28;
// [Asm]   r3 -- r22;
// [Asm]   r7 -- r17;
// [Asm]   r33 -- r34;
// [Asm]   r9 -- r22;
// [Asm]   r7 -- r22;
// [Asm]   r14 -- r33;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r7 -- r19;
// [Asm]   r2 -- r14;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r4 -- r32;
// [Asm]   r22 -- r28;
// [Asm]   r7 -- r15;
// [Asm]   r1 -- r29;
// [Asm]   r12 -- r22;
// [Asm]   r22 -- r23;
// [Asm]   r3 -- r29;
// [Asm]   r7 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r1 -- r25;
// [Asm]   r2 -- r21;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r4 -- r17;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r35;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r26;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r7 -- r12;
// [Asm]   r2 -- r3;
// [Asm]   r7 -- r14;
// [Asm]   r3 -- r23;
// [Asm]   r4 -- r19;
// [Asm]   r1 -- r24;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:v32-> 1:v6-> 2:v5-> 3:zero-> 4:v7-> 5:v33-> 6:v10-> 7:a0-> 8:t0-> 9:t1-> 22:v13-> 10:t2-> 11:t3-> 12:t4-> 13:a1-> 14:a2-> 15:a3-> 16:a4-> 17:a5-> 18:a6-> 19:a7-> 20:v11-> 21:v12-> 23:v14-> 24:v25-> 25:v26-> 26:v18-> 27:v19-> 28:v20-> 32:v8-> 29:v21-> 33:v2-> 34:v3-> 35:v4-> 30:v17-> 31:v16"
// [Asm]   comment = "v32<-a0;v2<-a0;v18<-a0;v10<-a0;v7<-s2;v21<-a0;v4<-a2;v33<-a0;v8<-a0;v25<-a0;v16<-a0;v11<-a0;v14<-a0;v19<-a0;v6<-s0;v20<-a0;v3<-a1;v13<-s1;v17<-a0;v26<-a0;v5<-s1;v12<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of output97l5_6"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   slliw v32, v5, 2 ->   slliw a0, s1, 2
// [Asm] subst   add v33, v6, v32 ->   add a0, s0, a0
// [Asm] subst   lw v10, 0(v33) ->   lw a0, 0(a0)
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   addi v13, v5, 1 ->   addi s1, s1, 1
// [Asm] subst   addi v14, v7, -1 ->   addi a0, s2, -1
// [Asm] subst   blt v14, v13, .output97l5_6_4 ->   blt a0, s1, .output97l5_6_4
// [Asm] subst   slliw v25, v13, 2 ->   slliw a0, s1, 2
// [Asm] subst   add v26, v6, v25 ->   add a0, s0, a0
// [Asm] subst   lw v18, 0(v26) ->   lw a0, 0(a0)
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   addi v21, v13, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v5, v21 ->   mv s1, a0
// [Asm] subst   j .output97l5_6_0 ->   j .output97l5_6_0
// [Asm] subst   ret ->   ret
// [Asm] subst   j .output97l5_6_6 ->   j .output97l5_6_6
// [Asm] subst   mv v16, zero ->   mv a0, zero
// [Asm] subst   mv v17, zero ->   mv a0, zero
// [Asm] subst   addi v8, v7, -1 ->   addi a0, s2, -1
// [Asm] subst   blt v8, v5, .output97l5_6_2 ->   blt a0, s1, .output97l5_6_2
// [Asm] subst   mv v5, v2 ->   mv s1, a0
// [Asm] subst   mv v6, v3 ->   mv s0, a1
// [Asm] subst   mv v7, v4 ->   mv s2, a2
// [Asm] pre_assigned_registers: BlockParam(bref=b12, bpref=$b.0) -> v22, Insn(iref=%15) -> v32, Insn(iref=%33) -> v51, Insn(iref=%8) -> v25, Insn(iref=%10) -> v27, Insn(iref=%27) -> v19, Insn(iref=%14) -> v31, Insn(iref=%25) -> v45, BlockParam(bref=b27, bpref=$b.3) -> v17, Insn(iref=%4) -> v13, BlockParam(bref=b27, bpref=$b.1) -> v15, Insn(iref=%32) -> v50, FnParam(fref=f4, fpref=$f.2) -> v4, Insn(iref=%1) -> v10, Insn(iref=%11) -> v28, Insn(iref=%26) -> v46, Insn(iref=%6) -> v23, Mem(fref=f4, mref=m0) -> v5, BlockParam(bref=b9, bpref=$b.0) -> v42, Insn(iref=%31) -> v49, Insn(iref=%35) -> v53, BlockParam(bref=b32, bpref=$b.0) -> v54, FnParam(fref=f4, fpref=$f.0) -> v2, Insn(iref=%28) -> v20, Insn(iref=%9) -> v26, Insn(iref=%16) -> v33, Insn(iref=%24) -> v44, BlockParam(bref=b0, bpref=$b.0) -> v6, BlockParam(bref=b0, bpref=$b.1) -> v7, BlockParam(bref=b0, bpref=$b.2) -> v8, Insn(iref=%29) -> v47, BlockParam(bref=b8, bpref=$b.0) -> v41, FnParam(fref=f4, fpref=$f.1) -> v3, Insn(iref=%0) -> v9, Insn(iref=%19) -> v36, Insn(iref=%3) -> v12, Insn(iref=%18) -> v35, Insn(iref=%13) -> v30, BlockParam(bref=b33, bpref=$b.0) -> v21, BlockParam(bref=b27, bpref=$b.0) -> v14, Insn(iref=%7) -> v24, BlockParam(bref=b5, bpref=$b.0) -> v37, Insn(iref=%22) -> v40, Insn(iref=%17) -> v34, Insn(iref=%23) -> v43, Insn(iref=%2) -> v11, BlockParam(bref=b27, bpref=$b.4) -> v18, Insn(iref=%20) -> v38, BlockParam(bref=b27, bpref=$b.2) -> v16, Insn(iref=%30) -> v48, Self(fref=f4) -> v0, Insn(iref=%21) -> v39, Insn(iref=%34) -> v52, Insn(iref=%36) -> v55, Insn(iref=%12) -> v29
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%29), BlockParam(bref=b27, bpref=$b.3)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%20), Insn(iref=%21)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%13)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b27, bpref=$b.0), Insn(iref=%27)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%0)])
// [Asm] defs: [v61]
// [Asm] live_set: [v16, v14, v5, v18, zero, v8, v7, v17, v6, v15, s11, v61]
// [Asm] move_origin: []
// [Asm] defined: v61 is X
// [Asm] defs: [v62]
// [Asm] live_set: [v62, v16, v14, v5, v18, zero, v8, v7, v17, v6, v15, s11]
// [Asm] move_origin: []
// [Asm] defined: v62 is X
// [Asm] defs: [v47]
// [Asm] live_set: [v16, v14, v5, v18, zero, v8, v7, v47, v17, v6, v15, s11]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v14, v5, v18, zero, v8, v7, v17, v6, v15, s11]
// [Asm] move_origin: []
// [Asm] defs: [v49]
// [Asm] live_set: [v14, v16, v5, v49, v7, v17, s11, v18, zero, v8, v6, v15]
// [Asm] move_origin: []
// [Asm] defined: v49 is X
// [Asm] defs: [v50]
// [Asm] live_set: [v14, v16, v5, v7, v17, s11, v18, zero, v50, v8, v6, v15]
// [Asm] move_origin: []
// [Asm] defined: v50 is X
// [Asm] defs: []
// [Asm] live_set: [v14, v16, v5, v7, v17, s11, v18, zero, v8, v6, v15]
// [Asm] move_origin: []
// [Asm] defs: [v52]
// [Asm] live_set: [v14, v16, v5, v7, v17, s11, v52, v18, zero, v8, v6, v15]
// [Asm] move_origin: []
// [Asm] defined: v52 is X
// [Asm] defs: []
// [Asm] live_set: [v14, v16, v5, v7, v17, s11, v52, v18, zero, v8, v6, v15]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v14, v16, v5, a0, v7, v17, s11, v52, v18, zero, v8, v6, v15]
// [Asm] move_origin: [v16]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v14, v16, v5, a0, v7, v17, a1, s11, v18, zero, v8, v6, v15]
// [Asm] move_origin: [v52]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v14, v16, v5, a0, v7, a2, v17, a1, s11, v18, zero, v8, v6, v15]
// [Asm] move_origin: [v14]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v14, v16, v5, v18, zero, a0, v8, v7, v17, v6, v15, s11]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v53]
// [Asm] live_set: [v14, v16, v5, v18, v53, zero, v7, v8, v17, v6, v15, s11]
// [Asm] move_origin: [a0]
// [Asm] defined: v53 is X
// [Asm] defs: []
// [Asm] live_set: [v14, v16, v5, v18, v53, zero, v7, v8, v17, v6, v15, s11]
// [Asm] move_origin: []
// [Asm] defs: [v54]
// [Asm] live_set: [v14, v16, v5, v18, zero, v8, v7, v17, v6, v15, s11, v54]
// [Asm] move_origin: [v53]
// [Asm] defined: v54 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v42]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v5, v21, zero, v8, v7, v6, s11]
// [Asm] move_origin: [zero]
// [Asm] defined: v21 is X
// [Asm] defs: [v85]
// [Asm] live_set: [zero, v7, v8, v85, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: v85 is X
// [Asm] defs: [v86]
// [Asm] live_set: [zero, v7, v8, v6, s11, v86]
// [Asm] move_origin: []
// [Asm] defined: v86 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, zero, v7, v8, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, zero, v7, v8, v6, v12, s11]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v11, v5, zero, v7, v8, v6, v12]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v5, zero, v7, v8, v6, s11, v12]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, zero, v7, v8, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: [v38]
// [Asm] live_set: [zero, v8, v38, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: v38 is X
// [Asm] defs: [v39]
// [Asm] live_set: [zero, v8, v38, v6, s11, v39]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: []
// [Asm] live_set: [v38, v6, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v37]
// [Asm] live_set: [v37, v6, s11, v28, zero, v8]
// [Asm] move_origin: [zero]
// [Asm] defined: v37 is X
// [Asm] defs: []
// [Asm] live_set: [v37, v6, s11, v28, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v29, v8, v7, v6, s11, v28]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, v29, a0, v8, v7, v6, s11, v28]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, v29, a0, v8, v7, a1, v6, s11, v28]
// [Asm] move_origin: [v7]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [zero, v29, a0, v8, v7, a2, a1, v6, s11, v28]
// [Asm] move_origin: [v29]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, v29, a0, v7, v8, v6, s11, v28]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v32]
// [Asm] live_set: [zero, v29, v8, v7, v32, v6, s11, v28]
// [Asm] move_origin: [a0]
// [Asm] defined: v32 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v29, v8, v7, v32, v6, s11, v28]
// [Asm] move_origin: []
// [Asm] defs: [v33]
// [Asm] live_set: [zero, v29, v8, v7, v32, v6, s11, v28, v33]
// [Asm] move_origin: []
// [Asm] defined: v33 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v29, v8, v7, v32, v6, s11, v28, v33]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, v29, a0, v8, v7, v32, v6, s11, v28, v33]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, v29, a0, v8, v32, a1, v6, s11, v28, v33]
// [Asm] move_origin: [v7]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [zero, v29, a0, v8, v32, a2, a1, v6, s11, v28]
// [Asm] move_origin: [v33]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, v29, a0, v8, v32, v6, s11, v28]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v34]
// [Asm] live_set: [zero, v29, v8, v32, v6, s11, v28]
// [Asm] move_origin: [a0]
// [Asm] defined: v34 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v29, v8, v32, v6, s11, v28]
// [Asm] move_origin: []
// [Asm] defs: [v35]
// [Asm] live_set: [zero, v29, v8, v35, v6, s11, v28]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v29, v8, v35, v6, s11, v28]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v29, v8, v35, v6, s11, v28]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, a0, v29, v8, v6, a1, s11, v28]
// [Asm] move_origin: [v35]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [zero, a0, v8, a2, v6, a1, s11, v28]
// [Asm] move_origin: [v29]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, s11, v28, zero, a0, v8]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v36]
// [Asm] live_set: [v36, v6, s11, v28, zero, v8]
// [Asm] move_origin: [a0]
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [v36, v6, s11, v28, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v37]
// [Asm] live_set: [v37, v6, s11, v28, zero, v8]
// [Asm] move_origin: [v36]
// [Asm] defined: v37 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v14, v16, v5, v18, zero, v8, v7, v19, v17, v6, v15, s11]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v14, v16, v5, v18, zero, v8, v7, v17, v6, v15, s11]
// [Asm] move_origin: []
// [Asm] defs: [v55]
// [Asm] live_set: [v16, v5, v18, zero, v8, v7, v17, v6, v15, s11, v55]
// [Asm] move_origin: []
// [Asm] defined: v55 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v14, v16, v5, v18, zero, v8, v7, v17, v6, v15, s11]
// [Asm] move_origin: [v55]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v14, v16, v5, v18, zero, v8, v7, v17, v6, v15, s11]
// [Asm] move_origin: [v15]
// [Asm] defs: []
// [Asm] live_set: [v14, v16, v5, v18, zero, v8, v7, v17, v6, v15, s11]
// [Asm] move_origin: [v16]
// [Asm] defs: []
// [Asm] live_set: [v14, v16, v5, v18, zero, v8, v7, v17, v6, v15, s11]
// [Asm] move_origin: [v17]
// [Asm] defs: []
// [Asm] live_set: [v14, v16, v5, v18, zero, v8, v7, v17, v6, v15, s11]
// [Asm] move_origin: [v18]
// [Asm] defs: []
// [Asm] live_set: [v14, v16, v5, v18, zero, v8, v7, v17, v6, v15, s11]
// [Asm] move_origin: []
// [Asm] defs: [v41]
// [Asm] live_set: [v41]
// [Asm] move_origin: [zero]
// [Asm] defined: v41 is X
// [Asm] defs: [v54]
// [Asm] live_set: [v14, v16, v5, v18, zero, v8, v7, v17, v6, v15, s11, v54]
// [Asm] move_origin: [zero]
// [Asm] defined: v54 is X
// [Asm] defs: []
// [Asm] live_set: [v14, v16, v5, v18, zero, v8, v7, v17, v6, v15, s11, v54]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v11, v14, v5, zero, v8, v7, v6, s11]
// [Asm] move_origin: [v7]
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v11, v14, v5, zero, v8, v7, v6, v15, s11]
// [Asm] move_origin: [v5]
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v14, v16, v5, zero, v8, v7, v6, v15, s11]
// [Asm] move_origin: [v6]
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v14, v16, v5, zero, v8, v7, v17, v6, v15, s11]
// [Asm] move_origin: [v11]
// [Asm] defined: v17 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v14, v16, v5, v18, zero, v8, v7, v17, v6, v15, s11]
// [Asm] move_origin: [v8]
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v8, v38, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v8, v38, v6, s11]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, a0, v8, v38, a1, v6, s11]
// [Asm] move_origin: [v38]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [zero, a0, v8, v38, a2, a1, v6, s11]
// [Asm] move_origin: [v8]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, v8, v38, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v43]
// [Asm] live_set: [zero, v8, v38, v6, v43, s11]
// [Asm] move_origin: [a0]
// [Asm] defined: v43 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v8, v38, v6, v43, s11]
// [Asm] move_origin: []
// [Asm] defs: [v44]
// [Asm] live_set: [zero, v8, v38, v6, v43, s11, v44]
// [Asm] move_origin: []
// [Asm] defined: v44 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v8, v38, v6, v43, s11, v44]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v8, v38, v6, v43, s11, v44]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, a0, v8, v6, v43, a1, s11, v44]
// [Asm] move_origin: [v38]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [zero, a0, v8, a2, v6, v43, a1, s11]
// [Asm] move_origin: [v44]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, v43, s11, zero, a0, v8]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v45]
// [Asm] live_set: [v6, v43, s11, zero, v8]
// [Asm] move_origin: [a0]
// [Asm] defined: v45 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v43, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v46]
// [Asm] live_set: [v6, v46, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v46, s11, zero, v8]
// [Asm] move_origin: [v6]
// [Asm] defs: [v7]
// [Asm] live_set: [v7, v6, s11, zero, v8]
// [Asm] move_origin: [v46]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, s11, zero, v8]
// [Asm] move_origin: [v8]
// [Asm] defs: []
// [Asm] live_set: [v7, v6, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, s11, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, s11, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, s11, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v4, v6, s11, zero, v7]
// [Asm] move_origin: [v3]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v6, s11, zero, v8]
// [Asm] move_origin: [v4]
// [Asm] defined: v8 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v5, zero, v23, v7, v8, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v5, zero, v7, v8, v6, s11, v24]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: [v26]
// [Asm] live_set: [v5, zero, v26, v7, v8, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v26, v7, v8, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v26, v7, v8, v6, s11]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, a0, v8, v7, v6, a1, s11]
// [Asm] move_origin: [v26]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, zero, a0, v8, v7, a2, v6, a1, s11]
// [Asm] move_origin: [v8]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0, v8, v7, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v27]
// [Asm] live_set: [v5, zero, v8, v7, v6, s11]
// [Asm] move_origin: [a0]
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v7, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: [v28]
// [Asm] live_set: [zero, v8, v7, v6, s11, v28]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: [v29]
// [Asm] live_set: [v29, zero, v8, v7, v6, s11, v28]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [v30]
// [Asm] live_set: [v29, zero, v30, v8, v7, v6, s11, v28]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: []
// [Asm] live_set: [v29, zero, v7, v8, v6, s11, v28]
// [Asm] move_origin: []
// [Asm] defs: [v42]
// [Asm] live_set: [v42]
// [Asm] move_origin: [v41]
// [Asm] defined: v42 is X
// [Asm] defs: []
// [Asm] live_set: [v42]
// [Asm] move_origin: []
// [Asm] defs: [v42]
// [Asm] live_set: [v42]
// [Asm] move_origin: [zero]
// [Asm] defined: v42 is X
// [Asm] defs: [v9]
// [Asm] live_set: [zero, v8, v7, v6, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v6, s11, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v22]
// [Asm] live_set: [v5, zero, v22, v8, v7, v6, s11]
// [Asm] move_origin: [v21]
// [Asm] defined: v22 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of quicksort59l2_4"];
// [Asm]   r0 [label="v61 ← a0", color=green];
// [Asm]   r46 [label="v36 ← a0", color=green];
// [Asm]   r33 [label="v85 ← a0", color=green];
// [Asm]   r59 [label="v26 ← a1", color=green];
// [Asm]   r9 [label="v6 ← s0", color=green];
// [Asm]   r26 [label="a4", color=blue];
// [Asm]   r44 [label="v34 ← a0", color=green];
// [Asm]   r53 [label="v46 ← a0", color=green];
// [Asm]   r56 [label="v4 ← a2", color=green];
// [Asm]   r10 [label="v15 ← s2", color=green];
// [Asm]   r5 [label="zero", color=blue];
// [Asm]   r54 [label="v2 ← a0", color=green];
// [Asm]   r24 [label="t4", color=blue];
// [Asm]   r43 [label="v33 ← a2", color=green];
// [Asm]   r31 [label="v54 ← a0", color=green];
// [Asm]   r39 [label="v37 ← a0", color=green];
// [Asm]   r17 [label="a0", color=blue];
// [Asm]   r52 [label="v45 ← a0", color=green];
// [Asm]   r20 [label="t0", color=blue];
// [Asm]   r61 [label="v30 ← a0", color=green];
// [Asm]   r23 [label="t3", color=blue];
// [Asm]   r3 [label="v5 ← s2", color=green];
// [Asm]   r27 [label="a5", color=blue];
// [Asm]   r62 [label="v42 ← a0", color=green];
// [Asm]   r40 [label="v28 ← s1", color=green];
// [Asm]   r11 [label="s11", color=blue];
// [Asm]   r58 [label="v24 ← a0", color=green];
// [Asm]   r34 [label="v86 ← a0", color=green];
// [Asm]   r14 [label="v49 ← a0", color=green];
// [Asm]   r51 [label="v44 ← a2", color=green];
// [Asm]   r55 [label="v3 ← a1", color=green];
// [Asm]   r16 [label="v52 ← a1", color=green];
// [Asm]   r21 [label="t1", color=blue];
// [Asm]   r60 [label="v27 ← a0", color=green];
// [Asm]   r38 [label="v39 ← a0", color=green];
// [Asm]   r47 [label="v19 ← a0", color=green];
// [Asm]   r6 [label="v8 ← s3", color=green];
// [Asm]   r13 [label="v47 ← a0", color=green];
// [Asm]   r42 [label="v32 ← s5", color=green];
// [Asm]   r4 [label="v18 ← s3", color=green];
// [Asm]   r29 [label="a7", color=blue];
// [Asm]   r35 [label="v11 ← a0", color=green];
// [Asm]   r7 [label="v7 ← s4", color=green];
// [Asm]   r64 [label="v22 ← a0", color=green];
// [Asm]   r8 [label="v17 ← s5", color=green];
// [Asm]   r36 [label="v12 ← a1", color=green];
// [Asm]   r15 [label="v50 ← a0", color=green];
// [Asm]   r32 [label="v21 ← a0", color=green];
// [Asm]   r49 [label="v41 ← a0", color=green];
// [Asm]   r57 [label="v23 ← a0", color=green];
// [Asm]   r48 [label="v55 ← a0", color=green];
// [Asm]   r12 [label="v62 ← a0", color=green];
// [Asm]   r37 [label="v38 ← s1", color=green];
// [Asm]   r1 [label="v16 ← s0", color=green];
// [Asm]   r41 [label="v29 ← s2", color=green];
// [Asm]   r28 [label="a6", color=blue];
// [Asm]   r22 [label="t2", color=blue];
// [Asm]   r50 [label="v43 ← s2", color=green];
// [Asm]   r30 [label="v53 ← a0", color=green];
// [Asm]   r45 [label="v35 ← a1", color=green];
// [Asm]   r25 [label="a3", color=blue];
// [Asm]   r63 [label="v9 ← a0", color=green];
// [Asm]   r2 [label="v14 ← s1", color=green];
// [Asm]   r18 [label="a1", color=blue];
// [Asm]   r19 [label="a2", color=blue];
// [Asm]   r17 -- r42;
// [Asm]   r2 -- r31;
// [Asm]   r6 -- r48;
// [Asm]   r11 -- r61;
// [Asm]   r9 -- r53;
// [Asm]   r1 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r11 -- r35;
// [Asm]   r24 -- r40;
// [Asm]   r3 -- r16;
// [Asm]   r7 -- r25;
// [Asm]   r29 -- r41;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r4 -- r48;
// [Asm]   r9 -- r26;
// [Asm]   r11 -- r55;
// [Asm]   r2 -- r7;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r31;
// [Asm]   r7 -- r32;
// [Asm]   r7 -- r35;
// [Asm]   r17 -- r19;
// [Asm]   r11 -- r19;
// [Asm]   r9 -- r14;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r48;
// [Asm]   r3 -- r8;
// [Asm]   r9 -- r56;
// [Asm]   r24 -- r41;
// [Asm]   r5 -- r35;
// [Asm]   r5 -- r6;
// [Asm]   r8 -- r16;
// [Asm]   r19 -- r41;
// [Asm]   r1 -- r48;
// [Asm]   r10 -- r18;
// [Asm]   r9 -- r12;
// [Asm]   r7 -- r59;
// [Asm]   r5 -- r58;
// [Asm]   r27 -- r50;
// [Asm]   r5 -- r54;
// [Asm]   r8 -- r23;
// [Asm]   r5 -- r60;
// [Asm]   r10 -- r22;
// [Asm]   r29 -- r40;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r29;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r11 -- r43;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r39 -- r40;
// [Asm]   r5 -- r51;
// [Asm]   r11 -- r15;
// [Asm]   r6 -- r50;
// [Asm]   r18 -- r37;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r35;
// [Asm]   r1 -- r5;
// [Asm]   r25 -- r37;
// [Asm]   r1 -- r35;
// [Asm]   r17 -- r27;
// [Asm]   r9 -- r39;
// [Asm]   r18 -- r43;
// [Asm]   r5 -- r36;
// [Asm]   r40 -- r42;
// [Asm]   r28 -- r50;
// [Asm]   r6 -- r25;
// [Asm]   r4 -- r13;
// [Asm]   r27 -- r40;
// [Asm]   r27 -- r42;
// [Asm]   r3 -- r25;
// [Asm]   r2 -- r4;
// [Asm]   r6 -- r41;
// [Asm]   r27 -- r41;
// [Asm]   r23 -- r50;
// [Asm]   r9 -- r40;
// [Asm]   r42 -- r44;
// [Asm]   r7 -- r20;
// [Asm]   r9 -- r61;
// [Asm]   r5 -- r19;
// [Asm]   r18 -- r40;
// [Asm]   r6 -- r46;
// [Asm]   r6 -- r53;
// [Asm]   r11 -- r23;
// [Asm]   r17 -- r24;
// [Asm]   r9 -- r30;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r5 -- r11;
// [Asm]   r11 -- r46;
// [Asm]   r8 -- r25;
// [Asm]   r19 -- r37;
// [Asm]   r11 -- r51;
// [Asm]   r40 -- r61;
// [Asm]   r5 -- r38;
// [Asm]   r11 -- r37;
// [Asm]   r6 -- r59;
// [Asm]   r10 -- r16;
// [Asm]   r3 -- r22;
// [Asm]   r18 -- r51;
// [Asm]   r19 -- r50;
// [Asm]   r6 -- r19;
// [Asm]   r7 -- r22;
// [Asm]   r9 -- r11;
// [Asm]   r7 -- r19;
// [Asm]   r2 -- r14;
// [Asm]   r11 -- r52;
// [Asm]   r9 -- r63;
// [Asm]   r28 -- r41;
// [Asm]   r9 -- r24;
// [Asm]   r10 -- r15;
// [Asm]   r8 -- r18;
// [Asm]   r9 -- r36;
// [Asm]   r3 -- r29;
// [Asm]   r11 -- r41;
// [Asm]   r7 -- r36;
// [Asm]   r23 -- r42;
// [Asm]   r4 -- r7;
// [Asm]   r25 -- r42;
// [Asm]   r6 -- r39;
// [Asm]   r5 -- r25;
// [Asm]   r20 -- r42;
// [Asm]   r9 -- r46;
// [Asm]   r6 -- r38;
// [Asm]   r9 -- r58;
// [Asm]   r4 -- r10;
// [Asm]   r17 -- r50;
// [Asm]   r54 -- r56;
// [Asm]   r11 -- r28;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   r11 -- r56;
// [Asm]   r11 -- r29;
// [Asm]   r1 -- r24;
// [Asm]   r9 -- r21;
// [Asm]   r6 -- r52;
// [Asm]   r5 -- r12;
// [Asm]   r41 -- r45;
// [Asm]   r11 -- r44;
// [Asm]   r9 -- r25;
// [Asm]   r6 -- r36;
// [Asm]   r5 -- r63;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r37 -- r38;
// [Asm]   r7 -- r56;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r10 -- r13;
// [Asm]   r10 -- r19;
// [Asm]   r17 -- r41;
// [Asm]   r3 -- r32;
// [Asm]   r5 -- r42;
// [Asm]   r6 -- r63;
// [Asm]   r1 -- r17;
// [Asm]   r9 -- r45;
// [Asm]   r9 -- r31;
// [Asm]   r2 -- r16;
// [Asm]   r42 -- r43;
// [Asm]   r10 -- r47;
// [Asm]   r11 -- r24;
// [Asm]   r11 -- r60;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r18;
// [Asm]   r9 -- r41;
// [Asm]   r11 -- r53;
// [Asm]   r1 -- r31;
// [Asm]   r26 -- r41;
// [Asm]   r22 -- r41;
// [Asm]   r10 -- r20;
// [Asm]   r3 -- r30;
// [Asm]   r50 -- r51;
// [Asm]   r11 -- r48;
// [Asm]   r9 -- r28;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r43;
// [Asm]   r7 -- r63;
// [Asm]   r6 -- r10;
// [Asm]   r4 -- r28;
// [Asm]   r17 -- r59;
// [Asm]   r11 -- r54;
// [Asm]   r9 -- r59;
// [Asm]   r4 -- r12;
// [Asm]   r3 -- r27;
// [Asm]   r19 -- r42;
// [Asm]   r8 -- r29;
// [Asm]   r5 -- r7;
// [Asm]   r0 -- r11;
// [Asm]   r8 -- r11;
// [Asm]   r10 -- r25;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r11 -- r47;
// [Asm]   r10 -- r35;
// [Asm]   r21 -- r37;
// [Asm]   r29 -- r50;
// [Asm]   r2 -- r23;
// [Asm]   r9 -- r47;
// [Asm]   r24 -- r50;
// [Asm]   r55 -- r56;
// [Asm]   r6 -- r32;
// [Asm]   r27 -- r37;
// [Asm]   r11 -- r25;
// [Asm]   r17 -- r20;
// [Asm]   r10 -- r17;
// [Asm]   r37 -- r50;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r41 -- r61;
// [Asm]   r4 -- r5;
// [Asm]   r9 -- r57;
// [Asm]   r9 -- r60;
// [Asm]   r11 -- r57;
// [Asm]   r28 -- r37;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r23;
// [Asm]   r5 -- r23;
// [Asm]   r5 -- r48;
// [Asm]   r9 -- r29;
// [Asm]   r8 -- r19;
// [Asm]   r22 -- r42;
// [Asm]   r17 -- r26;
// [Asm]   r1 -- r15;
// [Asm]   r4 -- r20;
// [Asm]   r3 -- r47;
// [Asm]   r6 -- r16;
// [Asm]   r4 -- r30;
// [Asm]   r10 -- r27;
// [Asm]   r6 -- r12;
// [Asm]   r6 -- r24;
// [Asm]   r9 -- r51;
// [Asm]   r9 -- r44;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r6 -- r37;
// [Asm]   r10 -- r28;
// [Asm]   r4 -- r11;
// [Asm]   r9 -- r34;
// [Asm]   r9 -- r38;
// [Asm]   r7 -- r60;
// [Asm]   r5 -- r26;
// [Asm]   r5 -- r24;
// [Asm]   r7 -- r33;
// [Asm]   r9 -- r33;
// [Asm]   r0 -- r8;
// [Asm]   r6 -- r28;
// [Asm]   r25 -- r41;
// [Asm]   r11 -- r39;
// [Asm]   r10 -- r23;
// [Asm]   r11 -- r50;
// [Asm]   r7 -- r11;
// [Asm]   r7 -- r47;
// [Asm]   r21 -- r42;
// [Asm]   r9 -- r37;
// [Asm]   r4 -- r47;
// [Asm]   r7 -- r43;
// [Asm]   r11 -- r26;
// [Asm]   r40 -- r41;
// [Asm]   r9 -- r16;
// [Asm]   r9 -- r32;
// [Asm]   r11 -- r58;
// [Asm]   r3 -- r36;
// [Asm]   r9 -- r19;
// [Asm]   r11 -- r27;
// [Asm]   r17 -- r45;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r5 -- r43;
// [Asm]   r5 -- r30;
// [Asm]   r10 -- r21;
// [Asm]   r9 -- r50;
// [Asm]   r11 -- r21;
// [Asm]   r4 -- r19;
// [Asm]   r8 -- r31;
// [Asm]   r26 -- r42;
// [Asm]   r5 -- r21;
// [Asm]   r5 -- r33;
// [Asm]   r37 -- r51;
// [Asm]   r6 -- r35;
// [Asm]   r1 -- r30;
// [Asm]   r5 -- r10;
// [Asm]   r11 -- r14;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r18 -- r42;
// [Asm]   r5 -- r22;
// [Asm]   r5 -- r59;
// [Asm]   r5 -- r18;
// [Asm]   r5 -- r47;
// [Asm]   r5 -- r29;
// [Asm]   r11 -- r45;
// [Asm]   r9 -- r17;
// [Asm]   r11 -- r18;
// [Asm]   r1 -- r16;
// [Asm]   r7 -- r27;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r31;
// [Asm]   r8 -- r12;
// [Asm]   r5 -- r31;
// [Asm]   r8 -- r24;
// [Asm]   r2 -- r25;
// [Asm]   r6 -- r60;
// [Asm]   r40 -- r46;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r57;
// [Asm]   r11 -- r13;
// [Asm]   r10 -- r12;
// [Asm]   r0 -- r9;
// [Asm]   r24 -- r42;
// [Asm]   r9 -- r23;
// [Asm]   r18 -- r54;
// [Asm]   r2 -- r12;
// [Asm]   r8 -- r48;
// [Asm]   r10 -- r31;
// [Asm]   r20 -- r50;
// [Asm]   r41 -- r42;
// [Asm]   r21 -- r50;
// [Asm]   r0 -- r1;
// [Asm]   r9 -- r20;
// [Asm]   r0 -- r10;
// [Asm]   r6 -- r64;
// [Asm]   r4 -- r25;
// [Asm]   r5 -- r55;
// [Asm]   r20 -- r40;
// [Asm]   r0 -- r4;
// [Asm]   r6 -- r23;
// [Asm]   r7 -- r42;
// [Asm]   r23 -- r37;
// [Asm]   r11 -- r36;
// [Asm]   r4 -- r14;
// [Asm]   r8 -- r30;
// [Asm]   r3 -- r19;
// [Asm]   r19 -- r40;
// [Asm]   r7 -- r29;
// [Asm]   r2 -- r26;
// [Asm]   r11 -- r20;
// [Asm]   r4 -- r23;
// [Asm]   r17 -- r29;
// [Asm]   r1 -- r8;
// [Asm]   r11 -- r64;
// [Asm]   r1 -- r47;
// [Asm]   r7 -- r24;
// [Asm]   r8 -- r27;
// [Asm]   r6 -- r33;
// [Asm]   r8 -- r9;
// [Asm]   r11 -- r16;
// [Asm]   r6 -- r30;
// [Asm]   r40 -- r44;
// [Asm]   r1 -- r22;
// [Asm]   r11 -- r12;
// [Asm]   r1 -- r13;
// [Asm]   r10 -- r29;
// [Asm]   r9 -- r64;
// [Asm]   r11 -- r22;
// [Asm]   r10 -- r48;
// [Asm]   r7 -- r48;
// [Asm]   r6 -- r22;
// [Asm]   r17 -- r25;
// [Asm]   r8 -- r20;
// [Asm]   r8 -- r47;
// [Asm]   r6 -- r20;
// [Asm]   r9 -- r52;
// [Asm]   r7 -- r17;
// [Asm]   r3 -- r57;
// [Asm]   r6 -- r27;
// [Asm]   r4 -- r15;
// [Asm]   r5 -- r28;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r9;
// [Asm]   r0 -- r3;
// [Asm]   r28 -- r42;
// [Asm]   r41 -- r44;
// [Asm]   r8 -- r15;
// [Asm]   r11 -- r59;
// [Asm]   r7 -- r15;
// [Asm]   r1 -- r29;
// [Asm]   r29 -- r42;
// [Asm]   r6 -- r57;
// [Asm]   r5 -- r45;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r5 -- r56;
// [Asm]   r5 -- r61;
// [Asm]   r41 -- r43;
// [Asm]   r7 -- r41;
// [Asm]   r11 -- r34;
// [Asm]   r8 -- r10;
// [Asm]   r26 -- r50;
// [Asm]   r2 -- r17;
// [Asm]   r2 -- r30;
// [Asm]   r5 -- r39;
// [Asm]   r23 -- r40;
// [Asm]   r8 -- r26;
// [Asm]   r7 -- r57;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r9 -- r48;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r35;
// [Asm]   r9 -- r13;
// [Asm]   r7 -- r12;
// [Asm]   r7 -- r14;
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r21;
// [Asm]   r5 -- r41;
// [Asm]   r17 -- r21;
// [Asm]   r7 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r40 -- r45;
// [Asm]   r22 -- r40;
// [Asm]   r6 -- r47;
// [Asm]   r17 -- r40;
// [Asm]   r26 -- r40;
// [Asm]   r9 -- r27;
// [Asm]   r7 -- r40;
// [Asm]   r10 -- r26;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r3 -- r60;
// [Asm]   r6 -- r29;
// [Asm]   r11 -- r31;
// [Asm]   r2 -- r10;
// [Asm]   r11 -- r32;
// [Asm]   r1 -- r20;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r22 -- r50;
// [Asm]   r16 -- r17;
// [Asm]   r9 -- r18;
// [Asm]   r18 -- r50;
// [Asm]   r4 -- r21;
// [Asm]   r6 -- r13;
// [Asm]   r7 -- r34;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r54 -- r55;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r5 -- r53;
// [Asm]   r7 -- r10;
// [Asm]   r2 -- r47;
// [Asm]   r17 -- r22;
// [Asm]   r2 -- r8;
// [Asm]   r50 -- r52;
// [Asm]   r23 -- r41;
// [Asm]   r1 -- r27;
// [Asm]   r6 -- r31;
// [Asm]   r40 -- r43;
// [Asm]   r11 -- r63;
// [Asm]   r10 -- r30;
// [Asm]   r7 -- r61;
// [Asm]   r6 -- r45;
// [Asm]   r8 -- r22;
// [Asm]   r4 -- r8;
// [Asm]   r8 -- r21;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r5 -- r50;
// [Asm]   r2 -- r24;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r11 -- r30;
// [Asm]   r24 -- r37;
// [Asm]   r25 -- r50;
// [Asm]   r6 -- r61;
// [Asm]   r3 -- r58;
// [Asm]   r4 -- r9;
// [Asm]   r5 -- r34;
// [Asm]   r7 -- r64;
// [Asm]   r6 -- r58;
// [Asm]   r35 -- r36;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r28 -- r40;
// [Asm]   r17 -- r18;
// [Asm]   r17 -- r43;
// [Asm]   r19 -- r55;
// [Asm]   r22 -- r37;
// [Asm]   r4 -- r24;
// [Asm]   r11 -- r40;
// [Asm]   r6 -- r15;
// [Asm]   r9 -- r35;
// [Asm]   r11 -- r17;
// [Asm]   r19 -- r54;
// [Asm]   r5 -- r20;
// [Asm]   r9 -- r15;
// [Asm]   r2 -- r18;
// [Asm]   r21 -- r40;
// [Asm]   r6 -- r44;
// [Asm]   r20 -- r37;
// [Asm]   r3 -- r12;
// [Asm]   r7 -- r26;
// [Asm]   r5 -- r13;
// [Asm]   r7 -- r13;
// [Asm]   r6 -- r51;
// [Asm]   r5 -- r52;
// [Asm]   r9 -- r42;
// [Asm]   r5 -- r44;
// [Asm]   r7 -- r30;
// [Asm]   r3 -- r28;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r26;
// [Asm]   r6 -- r40;
// [Asm]   r1 -- r28;
// [Asm]   r7 -- r28;
// [Asm]   r17 -- r37;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r34;
// [Asm]   r5 -- r64;
// [Asm]   r8 -- r28;
// [Asm]   r20 -- r41;
// [Asm]   r9 -- r22;
// [Asm]   r11 -- r42;
// [Asm]   r11 -- r33;
// [Asm]   r17 -- r23;
// [Asm]   r18 -- r19;
// [Asm]   r5 -- r46;
// [Asm]   r8 -- r13;
// [Asm]   r17 -- r51;
// [Asm]   r5 -- r37;
// [Asm]   r29 -- r37;
// [Asm]   r9 -- r43;
// [Asm]   r3 -- r64;
// [Asm]   r6 -- r42;
// [Asm]   r2 -- r21;
// [Asm]   r18 -- r41;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r9 -- r55;
// [Asm]   r7 -- r58;
// [Asm]   r21 -- r41;
// [Asm]   r3 -- r59;
// [Asm]   r11 -- r38;
// [Asm]   r7 -- r31;
// [Asm]   r26 -- r37;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r7 -- r23;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r26;
// [Asm]   r2 -- r19;
// [Asm]   r2 -- r3;
// [Asm]   r25 -- r40;
// [Asm]   r10 -- r24;
// [Asm]   r17 -- r28;
// [Asm]   r5 -- r40;
// [Asm]   r5 -- r15;
// [Asm]   r10 -- r14;
// [Asm]   comment = "0:v61-> 1:v16-> 2:v14-> 3:v5-> 4:v18-> 5:zero-> 7:v7-> 8:v17-> 11:s11-> 6:v8-> 9:v6-> 10:v15-> 12:v62-> 13:v47-> 14:v49-> 15:v50-> 16:v52-> 17:a0-> 18:a1-> 19:a2-> 20:t0-> 21:t1-> 22:t2-> 23:t3-> 24:t4-> 40:v28-> 41:v29-> 42:v32-> 25:a3-> 26:a4-> 27:a5-> 28:a6-> 37:v38-> 50:v43-> 29:a7-> 30:v53-> 31:v54-> 47:v19-> 43:v33-> 48:v55-> 35:v11-> 51:v44-> 36:v12-> 44:v34-> 45:v35-> 59:v26-> 61:v30-> 57:v23-> 58:v24-> 60:v27-> 64:v22-> 32:v21-> 33:v85-> 34:v86-> 38:v39-> 39:v37-> 46:v36-> 52:v45-> 63:v9-> 53:v46-> 54:v2-> 55:v3-> 56:v4-> 49:v41-> 62:v42"
// [Asm]   comment = "v61<-a0;v36<-a0;v85<-a0;v26<-a1;v6<-s0;v34<-a0;v46<-a0;v4<-a2;v15<-s2;v2<-a0;v33<-a2;v54<-a0;v37<-a0;v45<-a0;v30<-a0;v5<-s2;v42<-a0;v28<-s1;v24<-a0;v86<-a0;v49<-a0;v44<-a2;v3<-a1;v52<-a1;v27<-a0;v39<-a0;v19<-a0;v8<-s3;v47<-a0;v32<-s5;v18<-s3;v11<-a0;v7<-s4;v22<-a0;v17<-s5;v12<-a1;v50<-a0;v21<-a0;v41<-a0;v23<-a0;v55<-a0;v62<-a0;v38<-s1;v16<-s0;v29<-s2;v43<-s2;v53<-a0;v35<-a1;v9<-a0;v14<-s1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of quicksort59l2_4"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   slliw v61, v14, 2 ->   slliw a0, s1, 2
// [Asm] subst   add v62, v16, v61 ->   add a0, s0, a0
// [Asm] subst   lw v47, 0(v62) ->   lw a0, 0(a0)
// [Asm] subst   blt v17, v47, .quicksort59l2_4_31 ->   blt s5, a0, .quicksort59l2_4_31
// [Asm] subst   lw v49, 0(v15) ->   lw a0, 0(s2)
// [Asm] subst   addi v50, v49, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v50, 0(v15) ->   sw a0, 0(s2)
// [Asm] subst   lw v52, 0(v15) ->   lw a1, 0(s2)
// [Asm] subst   mv a0, v16 ->   mv a0, s0
// [Asm] subst   mv a2, v14 ->   mv a2, s1
// [Asm] subst   call swap1l0_0 ->   call swap1l0_0
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v21, zero ->   mv a0, zero
// [Asm] subst   slliw v85, v8, 2 ->   slliw a0, s3, 2
// [Asm] subst   add v86, v6, v85 ->   add a0, s0, a0
// [Asm] subst   lw v11, 0(v86) ->   lw a0, 0(a0)
// [Asm] subst   addi v12, v7, -1 ->   addi a1, s4, -1
// [Asm] subst   addi v5, s11, -4 ->   addi s2, s11, -4
// [Asm] subst   andi s11, v5, -8 ->   andi s11, s2, -8
// [Asm] subst   sw v12, 0(v5) ->   sw a1, 0(s2)
// [Asm] subst   addi v38, v28, 1 ->   addi s1, s1, 1
// [Asm] subst   addi v39, v8, -1 ->   addi a0, s3, -1
// [Asm] subst   blt v39, v38, .quicksort59l2_4_7 ->   blt a0, s1, .quicksort59l2_4_7
// [Asm] subst   mv v37, zero ->   mv a0, zero
// [Asm] subst   j .quicksort59l2_4_5 ->   j .quicksort59l2_4_5
// [Asm] subst   mv a0, v6 ->   mv a0, s0
// [Asm] subst   mv a1, v7 ->   mv a1, s4
// [Asm] subst   mv a2, v29 ->   mv a2, s2
// [Asm] subst   call partition14l1_2 ->   call partition14l1_2
// [Asm] subst   mv v32, a0 ->   mv s5, a0
// [Asm] subst   addi v33, v32, -1 ->   addi a2, s5, -1
// [Asm] subst   mv a0, v6 ->   mv a0, s0
// [Asm] subst   mv a1, v7 ->   mv a1, s4
// [Asm] subst   call quicksort59l2_4 ->   call quicksort59l2_4
// [Asm] subst   addi v35, v32, 1 ->   addi a1, s5, 1
// [Asm] subst   mv a0, v6 ->   mv a0, s0
// [Asm] subst   mv a2, v29 ->   mv a2, s2
// [Asm] subst   call quicksort59l2_4 ->   call quicksort59l2_4
// [Asm] subst   addi v19, v18, -1 ->   addi a0, s3, -1
// [Asm] subst   blt v19, v14, .quicksort59l2_4_29 ->   blt a0, s1, .quicksort59l2_4_29
// [Asm] subst   addi v55, v14, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v14, v55 ->   mv s1, a0
// [Asm] subst   j .quicksort59l2_4_27 ->   j .quicksort59l2_4_27
// [Asm] subst   mv v41, zero ->   mv a0, zero
// [Asm] subst   mv v54, zero ->   mv a0, zero
// [Asm] subst   j .quicksort59l2_4_32 ->   j .quicksort59l2_4_32
// [Asm] subst   mv v14, v7 ->   mv s1, s4
// [Asm] subst   mv v17, v11 ->   mv s5, a0
// [Asm] subst   mv a0, v6 ->   mv a0, s0
// [Asm] subst   mv a1, v38 ->   mv a1, s1
// [Asm] subst   mv a2, v8 ->   mv a2, s3
// [Asm] subst   call partition14l1_2 ->   call partition14l1_2
// [Asm] subst   mv v43, a0 ->   mv s2, a0
// [Asm] subst   addi v44, v43, -1 ->   addi a2, s2, -1
// [Asm] subst   mv a0, v6 ->   mv a0, s0
// [Asm] subst   mv a1, v38 ->   mv a1, s1
// [Asm] subst   call quicksort59l2_4 ->   call quicksort59l2_4
// [Asm] subst   addi v46, v43, 1 ->   addi a0, s2, 1
// [Asm] subst   mv v7, v46 ->   mv s4, a0
// [Asm] subst   j .quicksort59l2_4_0 ->   j .quicksort59l2_4_0
// [Asm] subst   mv v6, v2 ->   mv s0, a0
// [Asm] subst   mv v7, v3 ->   mv s4, a1
// [Asm] subst   mv v8, v4 ->   mv s3, a2
// [Asm] subst   lw v23, 0(v5) ->   lw a0, 0(s2)
// [Asm] subst   addi v24, v23, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v24, 0(v5) ->   sw a0, 0(s2)
// [Asm] subst   lw v26, 0(v5) ->   lw a1, 0(s2)
// [Asm] subst   mv a0, v6 ->   mv a0, s0
// [Asm] subst   mv a2, v8 ->   mv a2, s3
// [Asm] subst   call swap1l0_0 ->   call swap1l0_0
// [Asm] subst   lw v28, 0(v5) ->   lw s1, 0(s2)
// [Asm] subst   addi v29, v28, -1 ->   addi s2, s1, -1
// [Asm] subst   addi v30, v29, -1 ->   addi a0, s2, -1
// [Asm] subst   blt v30, v7, .quicksort59l2_4_4 ->   blt a0, s4, .quicksort59l2_4_4
// [Asm] subst   j .quicksort59l2_4_9 ->   j .quicksort59l2_4_9
// [Asm] subst   mv v42, zero ->   mv a0, zero
// [Asm] subst   addi v9, v8, -1 ->   addi a0, s3, -1
// [Asm] subst   blt v9, v7, .quicksort59l2_4_2 ->   blt a0, s4, .quicksort59l2_4_2
// [Asm] pre_assigned_registers: Self(fref=f16) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_16"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_16"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main75l3_7 ->   call main75l3_7
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v6, Insn(iref=%3) -> v8, FnParam(fref=f0, fpref=$f.1) -> v3, FnParam(fref=f0, fpref=$f.2) -> v4, Self(fref=f0) -> v0, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%0) -> v5, Insn(iref=%2) -> v7
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, a2, zero, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v3, v4, v16, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v3, v4, v17, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v4, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v3, v4, v5, zero, v13, v2]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v3, v4, v5, v14, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v3, v4, v5, v6, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v4, v5, v6, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v4, v5, v6, v12, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of swap1l0_0"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="v13 ← a4", color=green];
// [Asm]   r6 [label="v16 ← a3", color=green];
// [Asm]   r13 [label="v12 ← a1", color=green];
// [Asm]   r4 [label="v3 ← a1", color=green];
// [Asm]   r1 [label="a2", color=blue];
// [Asm]   r11 [label="v6 ← a4", color=green];
// [Asm]   r7 [label="v17 ← a3", color=green];
// [Asm]   r10 [label="v14 ← a4", color=green];
// [Asm]   r14 [label="v9 ← a1", color=green];
// [Asm]   r8 [label="v5 ← a3", color=green];
// [Asm]   r5 [label="v4 ← a2", color=green];
// [Asm]   r15 [label="v10 ← a0", color=green];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="a0", color=blue];
// [Asm]   r12 [label="v11 ← a1", color=green];
// [Asm]   r5 -- r6;
// [Asm]   r0 -- r13;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r15;
// [Asm]   r8 -- r13;
// [Asm]   r11 -- r13;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r9;
// [Asm]   r5 -- r8;
// [Asm]   r0 -- r3;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r9;
// [Asm]   r5 -- r10;
// [Asm]   r0 -- r8;
// [Asm]   r3 -- r13;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r8 -- r9;
// [Asm]   r0 -- r5;
// [Asm]   r3 -- r10;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r0 -- r14;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r9;
// [Asm]   r11 -- r12;
// [Asm]   r3 -- r14;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r3 -- r11;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r5 -- r11;
// [Asm]   r8 -- r14;
// [Asm]   r0 -- r7;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r9;
// [Asm]   r8 -- r12;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v2-> 1:a2-> 4:v3-> 3:zero-> 5:v4-> 6:v16-> 7:v17-> 8:v5-> 9:v13-> 10:v14-> 11:v6-> 12:v11-> 13:v12-> 14:v9-> 15:v10-> 2:a1-> 16:a0"
// [Asm]   comment = "v2<-a0;v13<-a4;v16<-a3;v12<-a1;v3<-a1;v6<-a4;v17<-a3;v14<-a4;v9<-a1;v5<-a3;v4<-a2;v10<-a0;v11<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of swap1l0_0"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   slliw v16, v3, 2 ->   slliw a3, a1, 2
// [Asm] subst   add v17, v2, v16 ->   add a3, a0, a3
// [Asm] subst   lw v5, 0(v17) ->   lw a3, 0(a3)
// [Asm] subst   slliw v13, v4, 2 ->   slliw a4, a2, 2
// [Asm] subst   add v14, v2, v13 ->   add a4, a0, a4
// [Asm] subst   lw v6, 0(v14) ->   lw a4, 0(a4)
// [Asm] subst   slliw v11, v3, 2 ->   slliw a1, a1, 2
// [Asm] subst   add v12, v2, v11 ->   add a1, a0, a1
// [Asm] subst   sw v6, 0(v12) ->   sw a4, 0(a1)
// [Asm] subst   slliw v9, v4, 2 ->   slliw a1, a2, 2
// [Asm] subst   add v10, v2, v9 ->   add a0, a0, a1
// [Asm] subst   sw v5, 0(v10) ->   sw a3, 0(a0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f5, fpref=$f.2) -> v4, Insn(iref=%9) -> v19, Insn(iref=%8) -> v18, BlockParam(bref=b0, bpref=$b.0) -> v5, BlockParam(bref=b0, bpref=$b.1) -> v6, BlockParam(bref=b0, bpref=$b.2) -> v7, Insn(iref=%5) -> v13, Insn(iref=%0) -> v8, Insn(iref=%4) -> v12, Insn(iref=%3) -> v11, FnParam(fref=f5, fpref=$f.0) -> v2, Self(fref=f5) -> v0, Insn(iref=%7) -> v17, BlockParam(bref=b5, bpref=$b.0) -> v15, BlockParam(bref=b6, bpref=$b.0) -> v16, Insn(iref=%2) -> v10, Insn(iref=%1) -> v9, Insn(iref=%6) -> v14, FnParam(fref=f5, fpref=$f.1) -> v3
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%4), Insn(iref=%5)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Asm] defs: []
// [Asm] live_set: [v6, v12, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, v12, zero, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v17]
// [Asm] live_set: [v6, v17, v12, zero, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v17, v12, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v6, v17, v12, v21, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v6, v17, v12, zero, v22, v7]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v12, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v19, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v19]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v6]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v16]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, v5, zero, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v10]
// [Asm] live_set: [v6, v5, v10, zero, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, v10, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v26]
// [Asm] live_set: [v6, v5, v10, zero, v26, v7]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v6, v5, v10, zero, v27, v7]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v6, v12, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v6, v12, zero, v13, v7]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v12, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v16]
// [Asm] move_origin: [v15]
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v16]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v15]
// [Asm] move_origin: [zero]
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move_origin: [v3]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v4]
// [Asm] defined: v7 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v16]
// [Asm] move_origin: [zero]
// [Asm] defined: v16 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of input79l4_5"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r20 [label="v19 ← a0", color=green];
// [Asm]   r23 [label="v26 ← a1", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="t4", color=blue];
// [Asm]   r26 [label="v16 ← a0", color=green];
// [Asm]   r27 [label="v8 ← a0", color=green];
// [Asm]   r6 [label="t1", color=blue];
// [Asm]   r13 [label="a4", color=blue];
// [Asm]   r4 [label="a0", color=blue];
// [Asm]   r29 [label="v2 ← a0", color=green];
// [Asm]   r1 [label="v6 ← s0", color=green];
// [Asm]   r28 [label="v15 ← a0", color=green];
// [Asm]   r11 [label="a2", color=blue];
// [Asm]   r7 [label="t2", color=blue];
// [Asm]   r10 [label="a1", color=blue];
// [Asm]   r22 [label="v10 ← a0", color=green];
// [Asm]   r14 [label="a5", color=blue];
// [Asm]   r8 [label="t3", color=blue];
// [Asm]   r30 [label="v3 ← a1", color=green];
// [Asm]   r5 [label="v7 ← s2", color=green];
// [Asm]   r24 [label="v27 ← a1", color=green];
// [Asm]   r15 [label="a6", color=blue];
// [Asm]   r25 [label="v13 ← a0", color=green];
// [Asm]   r2 [label="v12 ← s1", color=green];
// [Asm]   r16 [label="a7", color=blue];
// [Asm]   r18 [label="v21 ← a1", color=green];
// [Asm]   r19 [label="v22 ← a1", color=green];
// [Asm]   r31 [label="v4 ← a2", color=green];
// [Asm]   r21 [label="v5 ← s1", color=green];
// [Asm]   r17 [label="v17 ← a0", color=green];
// [Asm]   r12 [label="a3", color=blue];
// [Asm]   r6 -- r21;
// [Asm]   r21 -- r24;
// [Asm]   r5 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r7 -- r21;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r5 -- r18;
// [Asm]   r1 -- r10;
// [Asm]   r30 -- r31;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r29 -- r31;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r31;
// [Asm]   r3 -- r5;
// [Asm]   r17 -- r19;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r31;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r30;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r21 -- r27;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r27;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r8 -- r21;
// [Asm]   r5 -- r14;
// [Asm]   r16 -- r21;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r12 -- r21;
// [Asm]   r1 -- r5;
// [Asm]   r21 -- r22;
// [Asm]   r0 -- r4;
// [Asm]   r13 -- r21;
// [Asm]   r11 -- r30;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r17 -- r18;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r5;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r23;
// [Asm]   r5 -- r23;
// [Asm]   r29 -- r30;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r22;
// [Asm]   r5 -- r13;
// [Asm]   r0 -- r21;
// [Asm]   r5 -- r19;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r10 -- r29;
// [Asm]   r2 -- r11;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r22 -- r24;
// [Asm]   r21 -- r23;
// [Asm]   r3 -- r22;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r21 -- r31;
// [Asm]   r2 -- r14;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r15 -- r21;
// [Asm]   r5 -- r24;
// [Asm]   r21 -- r30;
// [Asm]   r0 -- r3;
// [Asm]   r14 -- r21;
// [Asm]   r22 -- r23;
// [Asm]   r3 -- r29;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r5 -- r25;
// [Asm]   r5 -- r27;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r10 -- r21;
// [Asm]   r11 -- r21;
// [Asm]   r11 -- r29;
// [Asm]   r5 -- r15;
// [Asm]   r9 -- r21;
// [Asm]   r1 -- r24;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:t0-> 1:v6-> 2:v12-> 3:zero-> 4:a0-> 5:v7-> 6:t1-> 21:v5-> 7:t2-> 8:t3-> 9:t4-> 10:a1-> 11:a2-> 12:a3-> 13:a4-> 14:a5-> 15:a6-> 16:a7-> 17:v17-> 18:v21-> 19:v22-> 22:v10-> 23:v26-> 24:v27-> 25:v13-> 27:v8-> 20:v19-> 29:v2-> 30:v3-> 31:v4-> 26:v16-> 28:v15"
// [Asm]   comment = "v19<-a0;v26<-a1;v16<-a0;v8<-a0;v2<-a0;v6<-s0;v15<-a0;v10<-a0;v3<-a1;v7<-s2;v27<-a1;v13<-a0;v12<-s1;v21<-a1;v22<-a1;v4<-a2;v5<-s1;v17<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of input79l4_5"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call minimbt_read_int ->   call minimbt_read_int
// [Asm] subst   slliw v21, v12, 2 ->   slliw a1, s1, 2
// [Asm] subst   add v22, v6, v21 ->   add a1, s0, a1
// [Asm] subst   sw v17, 0(v22) ->   sw a0, 0(a1)
// [Asm] subst   addi v19, v12, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v5, v19 ->   mv s1, a0
// [Asm] subst   j .input79l4_5_0 ->   j .input79l4_5_0
// [Asm] subst   ret ->   ret
// [Asm] subst   call minimbt_read_int ->   call minimbt_read_int
// [Asm] subst   slliw v26, v5, 2 ->   slliw a1, s1, 2
// [Asm] subst   add v27, v6, v26 ->   add a1, s0, a1
// [Asm] subst   sw v10, 0(v27) ->   sw a0, 0(a1)
// [Asm] subst   addi v12, v5, 1 ->   addi s1, s1, 1
// [Asm] subst   addi v13, v7, -1 ->   addi a0, s2, -1
// [Asm] subst   blt v13, v12, .input79l4_5_4 ->   blt a0, s1, .input79l4_5_4
// [Asm] subst   j .input79l4_5_6 ->   j .input79l4_5_6
// [Asm] subst   addi v8, v7, -1 ->   addi a0, s2, -1
// [Asm] subst   blt v8, v5, .input79l4_5_2 ->   blt a0, s1, .input79l4_5_2
// [Asm] subst   mv v15, zero ->   mv a0, zero
// [Asm] subst   mv v5, v2 ->   mv s1, a0
// [Asm] subst   mv v6, v3 ->   mv s0, a1
// [Asm] subst   mv v7, v4 ->   mv s2, a2
// [Asm] subst   mv v16, zero ->   mv a0, zero
// [Asm] pre_assigned_registers: BlockParam(bref=b1, bpref=$b.0) -> v17, BlockParam(bref=b13, bpref=$b.3) -> v12, Insn(iref=%15) -> v27, Insn(iref=%8) -> v22, Insn(iref=%10) -> v24, BlockParam(bref=b13, bpref=$b.4) -> v13, Insn(iref=%14) -> v15, Insn(iref=%25) -> v38, BlockParam(bref=b18, bpref=$b.0) -> v37, Insn(iref=%4) -> v18, BlockParam(bref=b13, bpref=$b.2) -> v11, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%1) -> v7, Insn(iref=%11) -> v25, Insn(iref=%6) -> v20, BlockParam(bref=b13, bpref=$b.1) -> v10, FnParam(fref=f2, fpref=$f.0) -> v2, FnParam(fref=f2, fpref=$f.2) -> v4, BlockParam(bref=b19, bpref=$b.0) -> v16, Insn(iref=%9) -> v23, Insn(iref=%16) -> v28, Insn(iref=%24) -> v36, Self(fref=f2) -> v0, Insn(iref=%5) -> v19, Insn(iref=%0) -> v6, Insn(iref=%19) -> v31, BlockParam(bref=b13, bpref=$b.0) -> v9, Insn(iref=%18) -> v30, Insn(iref=%13) -> v14, Mem(fref=f2, mref=m0) -> v5, Insn(iref=%7) -> v21, Insn(iref=%22) -> v34, Insn(iref=%17) -> v29, Insn(iref=%23) -> v35, Insn(iref=%2) -> v8, Insn(iref=%20) -> v32, Insn(iref=%21) -> v33, Insn(iref=%12) -> v26
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%15), BlockParam(bref=b13, bpref=$b.3)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b13, bpref=$b.0), Insn(iref=%13)])
// [Asm] defs: [v16]
// [Asm] live_set: [v4, v16, v5, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: v16 is X
// [Asm] defs: [v37]
// [Asm] live_set: [v11, v5, v10, v13, zero, v37, v4, v12, v9, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: v37 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, zero, v37, v4, v12, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v53]
// [Asm] live_set: [v11, v5, v10, v53, zero, v13, v4, v12, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v53 is X
// [Asm] defs: [v54]
// [Asm] live_set: [v11, v5, v10, zero, v13, v4, v12, v9, v54, v2]
// [Asm] move_origin: []
// [Asm] defined: v54 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v11, v5, v10, zero, v13, v27, v4, v12, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, zero, v13, v4, v12, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v38]
// [Asm] live_set: [v11, v5, v10, v13, zero, v4, v38, v12, v2]
// [Asm] move_origin: []
// [Asm] defined: v38 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v11, v5, v10, v13, zero, v4, v12, v9, v2]
// [Asm] move_origin: [v38]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, zero, v4, v12, v9, v2]
// [Asm] move_origin: [v10]
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, zero, v4, v12, v9, v2]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, zero, v4, v12, v9, v2]
// [Asm] move_origin: [v12]
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, zero, v4, v12, v9, v2]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, zero, v4, v12, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v4, v17, v5, v2]
// [Asm] move_origin: [v16]
// [Asm] defined: v17 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v11, v5, v14, v10, zero, v13, v4, v12, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, zero, v13, v4, v12, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v29]
// [Asm] live_set: [v11, v5, v10, v13, zero, v29, v4, v12, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [v30]
// [Asm] live_set: [v11, v5, v10, v13, zero, v30, v4, v12, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, zero, v4, v12, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v32]
// [Asm] live_set: [v11, v5, v10, v13, zero, v4, v32, v12, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: [v47]
// [Asm] live_set: [v11, v5, v10, v13, zero, v4, v32, v47, v12, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: [v48]
// [Asm] live_set: [v11, v5, v10, v48, v13, zero, v4, v32, v12, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v48 is X
// [Asm] defs: [v33]
// [Asm] live_set: [v11, v5, v10, v13, zero, v4, v32, v12, v9, v33, v2]
// [Asm] move_origin: []
// [Asm] defined: v33 is X
// [Asm] defs: [v44]
// [Asm] live_set: [v11, v5, v10, v13, zero, v4, v32, v12, v44, v9, v33, v2]
// [Asm] move_origin: []
// [Asm] defined: v44 is X
// [Asm] defs: [v45]
// [Asm] live_set: [v11, v5, v10, v13, zero, v45, v4, v32, v12, v9, v33, v2]
// [Asm] move_origin: []
// [Asm] defined: v45 is X
// [Asm] defs: [v34]
// [Asm] live_set: [v2, v11, v5, v10, v13, zero, v4, v32, v12, v9, v33, v34]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: [v42]
// [Asm] live_set: [v2, v11, v5, v10, v13, zero, v42, v4, v12, v9, v33, v34]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: [v43]
// [Asm] live_set: [v2, v11, v5, v10, v13, zero, v4, v43, v12, v9, v33, v34]
// [Asm] move_origin: []
// [Asm] defined: v43 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, zero, v4, v12, v9, v33, v2]
// [Asm] move_origin: []
// [Asm] defs: [v40]
// [Asm] live_set: [v40, v11, v5, v10, v13, zero, v4, v12, v9, v33, v2]
// [Asm] move_origin: []
// [Asm] defined: v40 is X
// [Asm] defs: [v41]
// [Asm] live_set: [v11, v5, v10, v13, zero, v4, v41, v12, v9, v33, v2]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, zero, v4, v12, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v37]
// [Asm] live_set: [v11, v5, v10, v13, zero, v37, v4, v12, v9, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: v37 is X
// [Asm] defs: []
// [Asm] live_set: [zero, a0, a2, a1, s11]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, a2, a1, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, zero, a2, s11, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, zero, v4, s11, v2]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v73]
// [Asm] live_set: [v3, v73, zero, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v73 is X
// [Asm] defs: [v74]
// [Asm] live_set: [v3, zero, v4, v74, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v74 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v3, zero, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, zero, v7, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v5, zero, v7, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, v5, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v4, v6, v9, v2]
// [Asm] move_origin: [v3]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero, v4, v6, v9, v2]
// [Asm] move_origin: [v5]
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, v10, zero, v4, v6, v9, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v5, v10, zero, v4, v12, v9, v2]
// [Asm] move_origin: [v6]
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v5, v10, v13, zero, v4, v12, v9, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: v13 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v4, v5, v18, v2]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v19, v4, v5, v2]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v2]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v4, v5, v21, v2]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v64]
// [Asm] live_set: [v4, v5, v21, v64, v2]
// [Asm] move_origin: []
// [Asm] defined: v64 is X
// [Asm] defs: [v65]
// [Asm] live_set: [v4, v65, v5, v21, v2]
// [Asm] move_origin: []
// [Asm] defined: v65 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v4, v5, v21, v22, v2]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v61]
// [Asm] live_set: [v4, v5, v21, v61, v22, v2]
// [Asm] move_origin: []
// [Asm] defined: v61 is X
// [Asm] defs: [v62]
// [Asm] live_set: [v62, v4, v5, v21, v22, v2]
// [Asm] move_origin: []
// [Asm] defined: v62 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v2, v4, v5, v21, v22, v23]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v59]
// [Asm] live_set: [v2, v4, v59, v5, v22, v23]
// [Asm] move_origin: []
// [Asm] defined: v59 is X
// [Asm] defs: [v60]
// [Asm] live_set: [v60, v2, v4, v5, v22, v23]
// [Asm] move_origin: []
// [Asm] defined: v60 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v22, v2]
// [Asm] move_origin: []
// [Asm] defs: [v57]
// [Asm] live_set: [v5, v57, v22, v2]
// [Asm] move_origin: []
// [Asm] defined: v57 is X
// [Asm] defs: [v58]
// [Asm] live_set: [v5, v58, v22]
// [Asm] move_origin: []
// [Asm] defined: v58 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [v26]
// [Asm] live_set: [v26]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v26]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of partition14l1_2"];
// [Asm]   r0 [label="v16 ← a0", color=green];
// [Asm]   r46 [label="v23 ← a5", color=green];
// [Asm]   r38 [label="v18 ← a0", color=green];
// [Asm]   r33 [label="v3 ← a4", color=green];
// [Asm]   r9 [label="v12 ← a4", color=green];
// [Asm]   r26 [label="v42 ← a0", color=green];
// [Asm]   r47 [label="v59 ← a0", color=green];
// [Asm]   r6 [label="v10 ← a2", color=green];
// [Asm]   r44 [label="v61 ← a5", color=green];
// [Asm]   r13 [label="v27 ← a0", color=green];
// [Asm]   r42 [label="v65 ← a4", color=green];
// [Asm]   r4 [label="v37 ← a0", color=green];
// [Asm]   r29 [label="v41 ← a0", color=green];
// [Asm]   r35 [label="v74 ← a0", color=green];
// [Asm]   r7 [label="v13 ← a1", color=green];
// [Asm]   r10 [label="v9 ← a5", color=green];
// [Asm]   r8 [label="zero", color=blue];
// [Asm]   r5 [label="v11 ← a3", color=green];
// [Asm]   r36 [label="v6 ← a0", color=green];
// [Asm]   r15 [label="v17 ← a0", color=green];
// [Asm]   r24 [label="v45 ← a7", color=green];
// [Asm]   r32 [label="s11", color=blue];
// [Asm]   r49 [label="v57 ← a0", color=green];
// [Asm]   r43 [label="v22 ← a4", color=green];
// [Asm]   r31 [label="a1", color=blue];
// [Asm]   r39 [label="v19 ← a0", color=green];
// [Asm]   r17 [label="v29 ← a0", color=green];
// [Asm]   r52 [label="a0", color=blue];
// [Asm]   r48 [label="v60 ← a0", color=green];
// [Asm]   r12 [label="v54 ← a0", color=green];
// [Asm]   r37 [label="v7 ← a5", color=green];
// [Asm]   r20 [label="v47 ← a6", color=green];
// [Asm]   r23 [label="v44 ← a7", color=green];
// [Asm]   r3 [label="v2 ← a3", color=green];
// [Asm]   r27 [label="v43 ← a0", color=green];
// [Asm]   r1 [label="v4 ← a1", color=green];
// [Asm]   r40 [label="v21 ← a0", color=green];
// [Asm]   r28 [label="v40 ← a0", color=green];
// [Asm]   r41 [label="v64 ← a4", color=green];
// [Asm]   r11 [label="v53 ← a0", color=green];
// [Asm]   r34 [label="v73 ← a0", color=green];
// [Asm]   r22 [label="v33 ← a6", color=green];
// [Asm]   r14 [label="v38 ← a0", color=green];
// [Asm]   r50 [label="v58 ← a0", color=green];
// [Asm]   r30 [label="a2", color=blue];
// [Asm]   r51 [label="v26 ← a0", color=green];
// [Asm]   r45 [label="v62 ← a5", color=green];
// [Asm]   r25 [label="v34 ← a7", color=green];
// [Asm]   r2 [label="v5 ← a2", color=green];
// [Asm]   r16 [label="v14 ← a0", color=green];
// [Asm]   r18 [label="v30 ← a0", color=green];
// [Asm]   r19 [label="v32 ← a0", color=green];
// [Asm]   r21 [label="v48 ← a6", color=green];
// [Asm]   r2 -- r32;
// [Asm]   r2 -- r38;
// [Asm]   r5 -- r21;
// [Asm]   r32 -- r36;
// [Asm]   r1 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r8 -- r36;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r43 -- r48;
// [Asm]   r2 -- r49;
// [Asm]   r3 -- r42;
// [Asm]   r5 -- r22;
// [Asm]   r2 -- r43;
// [Asm]   r7 -- r25;
// [Asm]   r5 -- r18;
// [Asm]   r1 -- r45;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r9 -- r26;
// [Asm]   r5 -- r29;
// [Asm]   r3 -- r37;
// [Asm]   r2 -- r37;
// [Asm]   r9 -- r17;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r31;
// [Asm]   r7 -- r27;
// [Asm]   r2 -- r41;
// [Asm]   r2 -- r42;
// [Asm]   r8 -- r12;
// [Asm]   r9 -- r14;
// [Asm]   r3 -- r48;
// [Asm]   r3 -- r8;
// [Asm]   r8 -- r34;
// [Asm]   r8 -- r24;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r32 -- r35;
// [Asm]   r22 -- r25;
// [Asm]   r40 -- r46;
// [Asm]   r5 -- r6;
// [Asm]   r8 -- r16;
// [Asm]   r1 -- r48;
// [Asm]   r2 -- r48;
// [Asm]   r10 -- r18;
// [Asm]   r3 -- r39;
// [Asm]   r10 -- r12;
// [Asm]   r9 -- r23;
// [Asm]   r19 -- r22;
// [Asm]   r9 -- r12;
// [Asm]   r1 -- r40;
// [Asm]   r22 -- r27;
// [Asm]   r2 -- r12;
// [Asm]   r8 -- r23;
// [Asm]   r10 -- r22;
// [Asm]   r1 -- r2;
// [Asm]   r3 -- r33;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r9 -- r20;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r49;
// [Asm]   r32 -- r34;
// [Asm]   r2 -- r36;
// [Asm]   r1 -- r38;
// [Asm]   r1 -- r41;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r35;
// [Asm]   r8 -- r32;
// [Asm]   r1 -- r5;
// [Asm]   r6 -- r23;
// [Asm]   r1 -- r35;
// [Asm]   r3 -- r46;
// [Asm]   r5 -- r36;
// [Asm]   r40 -- r42;
// [Asm]   r6 -- r25;
// [Asm]   r3 -- r19;
// [Asm]   r3 -- r45;
// [Asm]   r7 -- r29;
// [Asm]   r3 -- r25;
// [Asm]   r2 -- r26;
// [Asm]   r1 -- r43;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r38;
// [Asm]   r1 -- r34;
// [Asm]   r1 -- r47;
// [Asm]   r7 -- r24;
// [Asm]   r8 -- r27;
// [Asm]   r8 -- r9;
// [Asm]   r1 -- r22;
// [Asm]   r40 -- r44;
// [Asm]   r7 -- r20;
// [Asm]   r2 -- r50;
// [Asm]   r5 -- r19;
// [Asm]   r33 -- r36;
// [Asm]   r22 -- r26;
// [Asm]   r1 -- r13;
// [Asm]   r10 -- r29;
// [Asm]   r33 -- r35;
// [Asm]   r6 -- r22;
// [Asm]   r2 -- r11;
// [Asm]   r43 -- r45;
// [Asm]   r8 -- r20;
// [Asm]   r5 -- r11;
// [Asm]   r8 -- r25;
// [Asm]   r6 -- r20;
// [Asm]   r10 -- r16;
// [Asm]   r3 -- r22;
// [Asm]   r7 -- r17;
// [Asm]   r6 -- r19;
// [Asm]   r2 -- r44;
// [Asm]   r6 -- r27;
// [Asm]   r2 -- r40;
// [Asm]   r7 -- r22;
// [Asm]   r9 -- r11;
// [Asm]   r7 -- r19;
// [Asm]   r5 -- r28;
// [Asm]   r2 -- r14;
// [Asm]   r32 -- r33;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r9;
// [Asm]   r0 -- r3;
// [Asm]   r22 -- r28;
// [Asm]   r1 -- r29;
// [Asm]   r9 -- r24;
// [Asm]   r33 -- r37;
// [Asm]   r8 -- r18;
// [Asm]   r8 -- r35;
// [Asm]   r3 -- r29;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r1 -- r25;
// [Asm]   r2 -- r17;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r5 -- r25;
// [Asm]   r8 -- r26;
// [Asm]   r10 -- r36;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r43 -- r44;
// [Asm]   r9 -- r13;
// [Asm]   r7 -- r12;
// [Asm]   r19 -- r25;
// [Asm]   r7 -- r14;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   r9 -- r21;
// [Asm]   r1 -- r24;
// [Asm]   r1 -- r42;
// [Asm]   r5 -- r12;
// [Asm]   r2 -- r39;
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r21;
// [Asm]   r2 -- r45;
// [Asm]   r9 -- r25;
// [Asm]   r1 -- r12;
// [Asm]   r7 -- r21;
// [Asm]   r6 -- r36;
// [Asm]   r40 -- r45;
// [Asm]   r1 -- r37;
// [Asm]   r2 -- r15;
// [Asm]   r9 -- r27;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r43;
// [Asm]   r43 -- r49;
// [Asm]   r10 -- r26;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r10 -- r13;
// [Asm]   r10 -- r19;
// [Asm]   r2 -- r10;
// [Asm]   r6 -- r29;
// [Asm]   r3 -- r32;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r3 -- r24;
// [Asm]   r19 -- r21;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r34;
// [Asm]   r9 -- r18;
// [Asm]   r46 -- r48;
// [Asm]   r1 -- r46;
// [Asm]   r6 -- r13;
// [Asm]   r43 -- r47;
// [Asm]   r2 -- r33;
// [Asm]   r10 -- r20;
// [Asm]   r3 -- r30;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r9 -- r28;
// [Asm]   r1 -- r21;
// [Asm]   r8 -- r37;
// [Asm]   r2 -- r46;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r7 -- r10;
// [Asm]   r2 -- r47;
// [Asm]   r43 -- r46;
// [Asm]   r3 -- r40;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r40 -- r43;
// [Asm]   r3 -- r27;
// [Asm]   r8 -- r29;
// [Asm]   r8 -- r22;
// [Asm]   r5 -- r7;
// [Asm]   r8 -- r21;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r8 -- r11;
// [Asm]   r10 -- r25;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r44;
// [Asm]   r2 -- r24;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r23;
// [Asm]   r30 -- r33;
// [Asm]   r36 -- r37;
// [Asm]   r10 -- r17;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r32 -- r37;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r18;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r23;
// [Asm]   r5 -- r23;
// [Asm]   r9 -- r29;
// [Asm]   r8 -- r19;
// [Asm]   r25 -- r27;
// [Asm]   r3 -- r12;
// [Asm]   r7 -- r26;
// [Asm]   r46 -- r47;
// [Asm]   r5 -- r13;
// [Asm]   r22 -- r29;
// [Asm]   r43 -- r50;
// [Asm]   r7 -- r13;
// [Asm]   r1 -- r32;
// [Asm]   r1 -- r15;
// [Asm]   r3 -- r47;
// [Asm]   r19 -- r24;
// [Asm]   r25 -- r26;
// [Asm]   r6 -- r16;
// [Asm]   r3 -- r28;
// [Asm]   r10 -- r27;
// [Asm]   r8 -- r33;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r26;
// [Asm]   r6 -- r12;
// [Asm]   r22 -- r24;
// [Asm]   r6 -- r24;
// [Asm]   r1 -- r28;
// [Asm]   r7 -- r28;
// [Asm]   r1 -- r39;
// [Asm]   r6 -- r8;
// [Asm]   r33 -- r34;
// [Asm]   r8 -- r28;
// [Asm]   r9 -- r22;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r10 -- r28;
// [Asm]   r19 -- r23;
// [Asm]   r8 -- r13;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r6 -- r28;
// [Asm]   r10 -- r23;
// [Asm]   r22 -- r23;
// [Asm]   r7 -- r11;
// [Asm]   r2 -- r21;
// [Asm]   r3 -- r41;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r40 -- r41;
// [Asm]   r9 -- r16;
// [Asm]   r3 -- r36;
// [Asm]   r5 -- r27;
// [Asm]   r9 -- r19;
// [Asm]   r7 -- r23;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r36;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r2 -- r3;
// [Asm]   r10 -- r24;
// [Asm]   r10 -- r21;
// [Asm]   r19 -- r20;
// [Asm]   r3 -- r44;
// [Asm]   comment = "0:v16-> 1:v4-> 2:v5-> 3:v2-> 4:v37-> 9:v12-> 10:v9-> 5:v11-> 6:v10-> 7:v13-> 8:zero-> 11:v53-> 12:v54-> 13:v27-> 16:v14-> 17:v29-> 18:v30-> 19:v32-> 20:v47-> 21:v48-> 22:v33-> 23:v44-> 24:v45-> 25:v34-> 26:v42-> 27:v43-> 28:v40-> 29:v41-> 14:v38-> 36:v6-> 32:s11-> 33:v3-> 37:v7-> 34:v73-> 35:v74-> 15:v17-> 38:v18-> 39:v19-> 40:v21-> 41:v64-> 42:v65-> 43:v22-> 44:v61-> 45:v62-> 46:v23-> 47:v59-> 48:v60-> 49:v57-> 30:a2-> 50:v58-> 31:a1-> 51:v26-> 52:a0"
// [Asm]   comment = "v16<-a0;v23<-a5;v18<-a0;v3<-a4;v12<-a4;v42<-a0;v59<-a0;v10<-a2;v61<-a5;v27<-a0;v65<-a4;v37<-a0;v41<-a0;v74<-a0;v13<-a1;v9<-a5;v11<-a3;v6<-a0;v17<-a0;v45<-a7;v57<-a0;v22<-a4;v19<-a0;v29<-a0;v60<-a0;v54<-a0;v7<-a5;v47<-a6;v44<-a7;v2<-a3;v43<-a0;v4<-a1;v21<-a0;v40<-a0;v64<-a4;v53<-a0;v73<-a0;v33<-a6;v38<-a0;v58<-a0;v26<-a0;v62<-a5;v34<-a7;v5<-a2;v14<-a0;v30<-a0;v32<-a0;v48<-a6;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of partition14l1_2"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v16, zero ->   mv a0, zero
// [Asm] subst   mv v37, zero ->   mv a0, zero
// [Asm] subst   j .partition14l1_2_18 ->   j .partition14l1_2_18
// [Asm] subst   slliw v53, v9, 2 ->   slliw a0, a5, 2
// [Asm] subst   add v54, v11, v53 ->   add a0, a3, a0
// [Asm] subst   lw v27, 0(v54) ->   lw a0, 0(a0)
// [Asm] subst   blt v12, v27, .partition14l1_2_17 ->   blt a4, a0, .partition14l1_2_17
// [Asm] subst   addi v38, v9, 1 ->   addi a0, a5, 1
// [Asm] subst   mv v9, v38 ->   mv a5, a0
// [Asm] subst   j .partition14l1_2_13 ->   j .partition14l1_2_13
// [Asm] subst   addi v14, v13, -1 ->   addi a0, a1, -1
// [Asm] subst   blt v14, v9, .partition14l1_2_15 ->   blt a0, a5, .partition14l1_2_15
// [Asm] subst   lw v29, 0(v10) ->   lw a0, 0(a2)
// [Asm] subst   addi v30, v29, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v30, 0(v10) ->   sw a0, 0(a2)
// [Asm] subst   lw v32, 0(v10) ->   lw a0, 0(a2)
// [Asm] subst   slliw v47, v32, 2 ->   slliw a6, a0, 2
// [Asm] subst   add v48, v11, v47 ->   add a6, a3, a6
// [Asm] subst   lw v33, 0(v48) ->   lw a6, 0(a6)
// [Asm] subst   slliw v44, v9, 2 ->   slliw a7, a5, 2
// [Asm] subst   add v45, v11, v44 ->   add a7, a3, a7
// [Asm] subst   lw v34, 0(v45) ->   lw a7, 0(a7)
// [Asm] subst   slliw v42, v32, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v43, v11, v42 ->   add a0, a3, a0
// [Asm] subst   sw v34, 0(v43) ->   sw a7, 0(a0)
// [Asm] subst   slliw v40, v9, 2 ->   slliw a0, a5, 2
// [Asm] subst   add v41, v11, v40 ->   add a0, a3, a0
// [Asm] subst   sw v33, 0(v41) ->   sw a6, 0(a0)
// [Asm] subst   mv v37, zero ->   mv a0, zero
// [Asm] subst   mv v2, a0 ->   mv a3, a0
// [Asm] subst   mv v3, a1 ->   mv a4, a1
// [Asm] subst   mv v4, a2 ->   mv a1, a2
// [Asm] subst   slliw v73, v4, 2 ->   slliw a0, a1, 2
// [Asm] subst   add v74, v2, v73 ->   add a0, a3, a0
// [Asm] subst   lw v6, 0(v74) ->   lw a0, 0(a0)
// [Asm] subst   addi v7, v3, -1 ->   addi a5, a4, -1
// [Asm] subst   addi v5, s11, -4 ->   addi a2, s11, -4
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a2, -8
// [Asm] subst   sw v7, 0(v5) ->   sw a5, 0(a2)
// [Asm] subst   mv v9, v3 ->   mv a5, a4
// [Asm] subst   mv v12, v6 ->   mv a4, a0
// [Asm] subst   lw v18, 0(v5) ->   lw a0, 0(a2)
// [Asm] subst   addi v19, v18, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v19, 0(v5) ->   sw a0, 0(a2)
// [Asm] subst   lw v21, 0(v5) ->   lw a0, 0(a2)
// [Asm] subst   slliw v64, v21, 2 ->   slliw a4, a0, 2
// [Asm] subst   add v65, v2, v64 ->   add a4, a3, a4
// [Asm] subst   lw v22, 0(v65) ->   lw a4, 0(a4)
// [Asm] subst   slliw v61, v4, 2 ->   slliw a5, a1, 2
// [Asm] subst   add v62, v2, v61 ->   add a5, a3, a5
// [Asm] subst   lw v23, 0(v62) ->   lw a5, 0(a5)
// [Asm] subst   slliw v59, v21, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v60, v2, v59 ->   add a0, a3, a0
// [Asm] subst   sw v23, 0(v60) ->   sw a5, 0(a0)
// [Asm] subst   slliw v57, v4, 2 ->   slliw a0, a1, 2
// [Asm] subst   add v58, v2, v57 ->   add a0, a3, a0
// [Asm] subst   sw v22, 0(v58) ->   sw a4, 0(a0)
// [Asm] subst   lw v26, 0(v5) ->   lw a0, 0(a2)
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Mem(fref=f7, mref=m0) -> v2, Insn(iref=%15) -> v19, Self(fref=f7) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v11, Insn(iref=%9) -> v13, Insn(iref=%16) -> v21, Insn(iref=%8) -> v12, Insn(iref=%10) -> v14, Insn(iref=%14) -> v18, Insn(iref=%5) -> v8, Insn(iref=%0) -> v3, Insn(iref=%19) -> v24, Insn(iref=%4) -> v7, Insn(iref=%3) -> v6, Insn(iref=%18) -> v23, Insn(iref=%13) -> v17, Insn(iref=%7) -> v10, Insn(iref=%22) -> v27, BlockParam(bref=b6, bpref=$b.0) -> v20, Insn(iref=%17) -> v22, Insn(iref=%2) -> v5, Insn(iref=%1) -> v4, Insn(iref=%20) -> v25, Insn(iref=%11) -> v15, Insn(iref=%21) -> v26, Insn(iref=%6) -> v9, BlockParam(bref=b9, bpref=$b.0) -> v28, Insn(iref=%12) -> v16
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), Insn(iref=%16)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), Insn(iref=%9)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), Insn(iref=%2)])
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v12, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, zero, a0, v12, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, zero, a0, a1, v12, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v2, zero, a0, a2, a1, v12, v3]
// [Asm] move_origin: [v12]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, zero, a0, v12, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v15]
// [Asm] live_set: [v2, zero, v12, v15, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v12, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v2, v16, zero, v12, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v16, zero, v12, v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v16, zero, a0, v12, v15, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, v16, zero, a0, a1, v12, v15, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v2, zero, a0, a2, a1, v12, v15, v3]
// [Asm] move_origin: [v16]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v3, v12, v15, zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v17]
// [Asm] live_set: [v3, v12, v15, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v12, v15, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v3, v12, v18, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v12, v18, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v12, v18, zero, a0, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v3, a1, v12, zero, a0, v2]
// [Asm] move_origin: [v18]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v3, a2, a1, zero, a0, v2]
// [Asm] move_origin: [v12]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v3, zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v19]
// [Asm] live_set: [v3, v19, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v19, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v20]
// [Asm] live_set: [v3, zero, v20, v2]
// [Asm] move_origin: [v19]
// [Asm] defined: v20 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v28]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v2, v12, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v2, v12, zero, v13, v3]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v12, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v3, v11, zero, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v11, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [s11, zero, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v48]
// [Asm] live_set: [s11, v48, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v48 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, a1, zero, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v2, a1, zero, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v2, a2, a1, zero, a0, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v20]
// [Asm] live_set: [v3, zero, v20, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v3, zero, v20, v2]
// [Asm] move_origin: []
// [Asm] defs: [v28]
// [Asm] live_set: [v28]
// [Asm] move_origin: [zero]
// [Asm] defined: v28 is X
// [Asm] defs: []
// [Asm] live_set: [v28]
// [Asm] move_origin: []
// [Asm] defs: [v23]
// [Asm] live_set: [v2, v23, v3]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v23, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, a0, v3]
// [Asm] move_origin: [v23]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v24]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v24 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v25]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v25 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: [v30]
// [Asm] live_set: [v2, v30, v3]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v2, v26, v3]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v26, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, a0, v3]
// [Asm] move_origin: [v26]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v27]
// [Asm] live_set: [v27]
// [Asm] move_origin: [a0]
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v27]
// [Asm] move_origin: []
// [Asm] defs: [v28]
// [Asm] live_set: [v28]
// [Asm] move_origin: [v27]
// [Asm] defined: v28 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v2, v21, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v3, zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v7, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v7, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v44]
// [Asm] live_set: [v3, v44, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v44 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v3, zero, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v3, zero, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v3, zero, a0, v2]
// [Asm] move_origin: [v9]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v3, a1, zero, a0, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v3, a2, a1, zero, a0, v2]
// [Asm] move_origin: [v3]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v3, zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v10]
// [Asm] live_set: [v3, v10, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v10, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v3, v11, zero, v2]
// [Asm] move_origin: [v10]
// [Asm] defined: v11 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main75l3_7"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r38 [label="v9 ← a0", color=green];
// [Asm]   r33 [label="v26 ← a0", color=green];
// [Asm]   r9 [label="t2", color=blue];
// [Asm]   r26 [label="v48 ← a0", color=green];
// [Asm]   r6 [label="a2", color=blue];
// [Asm]   r13 [label="a4", color=blue];
// [Asm]   r4 [label="v3 ← s2", color=green];
// [Asm]   r29 [label="v23 ← a0", color=green];
// [Asm]   r35 [label="v21 ← a0", color=green];
// [Asm]   r7 [label="t0", color=blue];
// [Asm]   r10 [label="t3", color=blue];
// [Asm]   r8 [label="t1", color=blue];
// [Asm]   r5 [label="a1", color=blue];
// [Asm]   r36 [label="v7 ← a0", color=green];
// [Asm]   r15 [label="a6", color=blue];
// [Asm]   r32 [label="v30 ← a0", color=green];
// [Asm]   r24 [label="v11 ← a0", color=green];
// [Asm]   r31 [label="v25 ← a0", color=green];
// [Asm]   r39 [label="v10 ← a0", color=green];
// [Asm]   r17 [label="v15 ← s3", color=green];
// [Asm]   r12 [label="a3", color=blue];
// [Asm]   r37 [label="v44 ← a0", color=green];
// [Asm]   r20 [label="v18 ← a1", color=green];
// [Asm]   r23 [label="v13 ← a0", color=green];
// [Asm]   r3 [label="v12 ← s1", color=green];
// [Asm]   r27 [label="v5 ← a0", color=green];
// [Asm]   r1 [label="v2 ← s0", color=green];
// [Asm]   r28 [label="v28 ← a0", color=green];
// [Asm]   r11 [label="t4", color=blue];
// [Asm]   r34 [label="v27 ← a0", color=green];
// [Asm]   r22 [label="v20 ← a0", color=green];
// [Asm]   r14 [label="a5", color=blue];
// [Asm]   r30 [label="v24 ← a0", color=green];
// [Asm]   r25 [label="s11", color=blue];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="a7", color=blue];
// [Asm]   r18 [label="v16 ← a2", color=green];
// [Asm]   r19 [label="v17 ← a0", color=green];
// [Asm]   r21 [label="v19 ← a0", color=green];
// [Asm]   r2 -- r20;
// [Asm]   r2 -- r39;
// [Asm]   r12 -- r25;
// [Asm]   r4 -- r38;
// [Asm]   r2 -- r38;
// [Asm]   r0 -- r13;
// [Asm]   r9 -- r25;
// [Asm]   r16 -- r25;
// [Asm]   r1 -- r12;
// [Asm]   r3 -- r15;
// [Asm]   r1 -- r37;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r30;
// [Asm]   r3 -- r16;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r5 -- r17;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r7 -- r25;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r5 -- r18;
// [Asm]   r0 -- r25;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r27;
// [Asm]   r2 -- r37;
// [Asm]   r9 -- r17;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r4 -- r22;
// [Asm]   r1 -- r33;
// [Asm]   r3 -- r18;
// [Asm]   r0 -- r16;
// [Asm]   r15 -- r25;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r35;
// [Asm]   r17 -- r19;
// [Asm]   r16 -- r17;
// [Asm]   r4 -- r31;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r31;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r4 -- r33;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r0 -- r9;
// [Asm]   r3 -- r13;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r29;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r10;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r25;
// [Asm]   r4 -- r8;
// [Asm]   r2 -- r36;
// [Asm]   r0 -- r11;
// [Asm]   r1 -- r38;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r2 -- r22;
// [Asm]   r10 -- r25;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r1 -- r35;
// [Asm]   r2 -- r24;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r23;
// [Asm]   r11 -- r25;
// [Asm]   r10 -- r17;
// [Asm]   r0 -- r18;
// [Asm]   r6 -- r25;
// [Asm]   r4 -- r13;
// [Asm]   r0 -- r15;
// [Asm]   r17 -- r18;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r26;
// [Asm]   r14 -- r17;
// [Asm]   r11 -- r17;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r4 -- r37;
// [Asm]   r1 -- r23;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r22;
// [Asm]   r1 -- r32;
// [Asm]   r0 -- r14;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r20;
// [Asm]   r25 -- r26;
// [Asm]   r4 -- r30;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r8 -- r25;
// [Asm]   r13 -- r25;
// [Asm]   r1 -- r39;
// [Asm]   r7 -- r17;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r15 -- r17;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r8;
// [Asm]   r4 -- r32;
// [Asm]   r14 -- r25;
// [Asm]   r1 -- r29;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r13 -- r17;
// [Asm]   r1 -- r25;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r4 -- r36;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r0 -- r12;
// [Asm]   r5 -- r25;
// [Asm]   r4 -- r39;
// [Asm]   r4 -- r17;
// [Asm]   r12 -- r17;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r35;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r36;
// [Asm]   r4 -- r26;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r2 -- r3;
// [Asm]   r0 -- r20;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   r4 -- r19;
// [Asm]   r1 -- r24;
// [Asm]   comment = "0:a0-> 1:v2-> 2:zero-> 3:v12-> 4:v3-> 5:a1-> 6:a2-> 17:v15-> 18:v16-> 7:t0-> 25:s11-> 8:t1-> 9:t2-> 10:t3-> 11:t4-> 12:a3-> 13:a4-> 14:a5-> 15:a6-> 16:a7-> 19:v17-> 20:v18-> 23:v13-> 21:v19-> 22:v20-> 24:v11-> 26:v48-> 27:v5-> 35:v21-> 36:v7-> 37:v44-> 38:v9-> 39:v10-> 29:v23-> 30:v24-> 31:v25-> 32:v30-> 33:v26-> 28:v28-> 34:v27"
// [Asm]   comment = "v9<-a0;v26<-a0;v48<-a0;v3<-s2;v23<-a0;v21<-a0;v7<-a0;v30<-a0;v11<-a0;v25<-a0;v10<-a0;v15<-s3;v44<-a0;v18<-a1;v13<-a0;v12<-s1;v5<-a0;v2<-s0;v28<-a0;v27<-a0;v20<-a0;v24<-a0;v16<-a2;v17<-a0;v19<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main75l3_7"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   mv a1, zero ->   mv a1, zero
// [Asm] subst   mv a2, v12 ->   mv a2, s1
// [Asm] subst   call partition14l1_2 ->   call partition14l1_2
// [Asm] subst   mv v15, a0 ->   mv s3, a0
// [Asm] subst   addi v16, v15, -1 ->   addi a2, s3, -1
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   mv a1, zero ->   mv a1, zero
// [Asm] subst   call quicksort59l2_4 ->   call quicksort59l2_4
// [Asm] subst   addi v18, v15, 1 ->   addi a1, s3, 1
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   mv a2, v12 ->   mv a2, s1
// [Asm] subst   call quicksort59l2_4 ->   call quicksort59l2_4
// [Asm] subst   ret ->   ret
// [Asm] subst   addi v12, v3, -1 ->   addi s1, s2, -1
// [Asm] subst   addi v13, v12, -1 ->   addi a0, s1, -1
// [Asm] subst   blt v13, zero, .main75l3_7_5 ->   blt a0, zero, .main75l3_7_5
// [Asm] subst   mv v11, zero ->   mv a0, zero
// [Asm] subst   j .main75l3_7_3 ->   j .main75l3_7_3
// [Asm] subst   call minimbt_read_int ->   call minimbt_read_int
// [Asm] subst   mv v3, a0 ->   mv s2, a0
// [Asm] subst   slliw v48, v3, 2 ->   slliw a0, s2, 2
// [Asm] subst   sub v2, s11, v48 ->   sub s0, s11, a0
// [Asm] subst   andi s11, v2, -8 ->   andi s11, s0, -8
// [Asm] subst   mv a1, v3 ->   mv a1, s2
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   call memseti32 ->   call memseti32
// [Asm] subst   addi v5, v3, -1 ->   addi a0, s2, -1
// [Asm] subst   blt v5, zero, .main75l3_7_2 ->   blt a0, zero, .main75l3_7_2
// [Asm] subst   mv v20, zero ->   mv a0, zero
// [Asm] subst   j .main75l3_7_6 ->   j .main75l3_7_6
// [Asm] subst   mv v28, zero ->   mv a0, zero
// [Asm] subst   j .main75l3_7_9 ->   j .main75l3_7_9
// [Asm] subst   lw v23, 0(v2) ->   lw a0, 0(s0)
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   li v30, 1 ->   li a0, 1
// [Asm] subst   addi v26, v30, 0 ->   addi a0, a0, 0
// [Asm] subst   mv a1, v2 ->   mv a1, s0
// [Asm] subst   mv a2, v3 ->   mv a2, s2
// [Asm] subst   call output97l5_6 ->   call output97l5_6
// [Asm] subst   addi v21, v3, -1 ->   addi a0, s2, -1
// [Asm] subst   blt v21, zero, .main75l3_7_8 ->   blt a0, zero, .main75l3_7_8
// [Asm] subst   call minimbt_read_int ->   call minimbt_read_int
// [Asm] subst   sw v7, 0(v2) ->   sw a0, 0(s0)
// [Asm] subst   li v44, 1 ->   li a0, 1
// [Asm] subst   addi v9, v44, 0 ->   addi a0, a0, 0
// [Asm] subst   mv a1, v2 ->   mv a1, s0
// [Asm] subst   mv a2, v3 ->   mv a2, s2
// [Asm] subst   call input79l4_5 ->   call input79l4_5
// [Asm] before colored: # leaf false
// [Asm] quicksort59l2_4:
// [Asm] # block info: defs: [v3, v7, v8, v4, v6, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, s11, a0, zero], live_out: [v8, v6, s11, zero, v7]
// [Asm] # block parameters: []
// [Asm] .quicksort59l2_4_11:
// [Asm]   # save_ctx1  # live: [a2, a1, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, s11, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, s11, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, s11, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v2  # live: [v4, v6, s11, zero, v3]
// [Asm]   mv v7, v3  # live: [v4, v6, s11, zero, v7]
// [Asm]   mv v8, v4  # live: [v7, v6, s11, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v9], uses: [v7, v9, v8], upward_exposed: [v7, v8], params_defs: [v8, v6, v7]
// [Asm] # live_in: [v7, v6, s11, zero, v8], live_out: [v7, v6, s11, zero, v8]
// [Asm] # block parameters: [v6, v7, v8]
// [Asm] .quicksort59l2_4_0:
// [Asm]   addi v9, v8, -1  # live: [zero, v8, v7, v6, s11, v9]
// [Asm] # control
// [Asm]   blt v9, v7, .quicksort59l2_4_2  # live: [v8, v6, s11, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v11, v5, v12, s11, v86, v85], uses: [v5, v85, v7, v8, v6, s11, v12, v86], upward_exposed: [v7, v6, s11, v8], params_defs: []
// [Asm] # live_in: [v8, v6, s11, zero, v7], live_out: [v11, v5, zero, v8, v7, v6, s11]
// [Asm] # block parameters: []
// [Asm] .quicksort59l2_4_1:
// [Asm]   slliw v85, v8, 2  # live: [zero, v7, v8, v85, v6, s11]
// [Asm]   add v86, v6, v85  # live: [zero, v7, v8, v6, s11, v86]
// [Asm]   lw v11, 0(v86)  # live: [v11, zero, v7, v8, v6, s11]
// [Asm]   addi v12, v7, -1  # live: [v11, zero, v7, v8, v6, v12, s11]
// [Asm]   addi v5, s11, -4  # live: [v11, v5, zero, v7, v8, v6, v12]
// [Asm]   andi s11, v5, -8  # live: [v11, v5, zero, v7, v8, v6, s11, v12]
// [Asm]   sw v12, 0(v5)  # live: [v11, v5, zero, v7, v8, v6, s11]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v14, v16, v17, v15, v18], uses: [v8, v11, v5, v6, v7], upward_exposed: [v8, v11, v5, v6, v7], params_defs: []
// [Asm] # live_in: [v11, v5, zero, v7, v8, v6, s11], live_out: [v14, v16, v5, v18, zero, v8, v7, v17, v6, v15, s11]
// [Asm] # block parameters: []
// [Asm] .quicksort59l2_4_35:
// [Asm] # control
// [Asm]   mv v14, v7  # live: [v11, v14, v5, zero, v8, v7, v6, s11]
// [Asm]   mv v15, v5  # live: [v11, v14, v5, zero, v8, v7, v6, v15, s11]
// [Asm]   mv v16, v6  # live: [v11, v14, v16, v5, zero, v8, v7, v6, v15, s11]
// [Asm]   mv v17, v11  # live: [v14, v16, v5, zero, v8, v7, v17, v6, v15, s11]
// [Asm]   mv v18, v8  # live: [v14, v16, v5, v18, zero, v8, v7, v17, v6, v15, s11]
// [Asm] 
// [Asm] # block info: defs: [v19], uses: [v19, v14, v18], upward_exposed: [v14, v18], params_defs: [v14, v16, v17, v15, v18]
// [Asm] # live_in: [v14, v16, v5, v18, zero, v8, v7, v17, v6, v15, s11], live_out: [v14, v16, v5, v18, zero, v8, v7, v17, v6, v15, s11]
// [Asm] # block parameters: [v14, v15, v16, v17, v18]
// [Asm] .quicksort59l2_4_27:
// [Asm]   addi v19, v18, -1  # live: [v14, v16, v5, v18, zero, v8, v7, v19, v17, v6, v15, s11]
// [Asm] # control
// [Asm]   blt v19, v14, .quicksort59l2_4_29  # live: [v14, v16, v5, v18, zero, v8, v7, v17, v6, v15, s11]
// [Asm] 
// [Asm] # block info: defs: [v62, v47, v61], uses: [v62, v47, v14, v16, v17, v61], upward_exposed: [v14, v16, v17], params_defs: []
// [Asm] # live_in: [v14, v16, v5, v18, zero, v8, v7, v17, v6, v15, s11], live_out: [v16, v14, v5, v18, zero, v8, v7, v17, v6, v15, s11]
// [Asm] # block parameters: []
// [Asm] .quicksort59l2_4_28:
// [Asm]   slliw v61, v14, 2  # live: [v16, v14, v5, v18, zero, v8, v7, v17, v6, v15, s11, v61]
// [Asm]   add v62, v16, v61  # live: [v62, v16, v14, v5, v18, zero, v8, v7, v17, v6, v15, s11]
// [Asm]   lw v47, 0(v62)  # live: [v16, v14, v5, v18, zero, v8, v7, v47, v17, v6, v15, s11]
// [Asm] # control
// [Asm]   blt v17, v47, .quicksort59l2_4_31  # live: [v16, v14, v5, v18, zero, v8, v7, v17, v6, v15, s11]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, v50, a4, fa6, a6, ft10, ft5, v54, ft7, ft4, v49, ft9, v53, a5, fa4, a0, ft2, a2, v52, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v16, v14, v49, v53, a0, v50, a2, a1, v52, v15], upward_exposed: [v16, v14, v15], params_defs: []
// [Asm] # live_in: [v16, v14, v5, v18, zero, v8, v7, v17, v6, v15, s11], live_out: [v14, v16, v5, v18, zero, v8, v7, v17, v6, v15, s11, v54]
// [Asm] # block parameters: []
// [Asm] .quicksort59l2_4_30:
// [Asm]   lw v49, 0(v15)  # live: [v14, v16, v5, v49, v7, v17, s11, v18, zero, v8, v6, v15]
// [Asm]   addi v50, v49, 1  # live: [v14, v16, v5, v7, v17, s11, v18, zero, v50, v8, v6, v15]
// [Asm]   sw v50, 0(v15)  # live: [v14, v16, v5, v7, v17, s11, v18, zero, v8, v6, v15]
// [Asm]   lw v52, 0(v15)  # live: [v14, v16, v5, v7, v17, s11, v52, v18, zero, v8, v6, v15]
// [Asm]   # save_ctx2  # live: [v14, v16, v5, v7, v17, s11, v52, v18, zero, v8, v6, v15]
// [Asm]   mv a0, v16  # live: [v14, v16, v5, a0, v7, v17, s11, v52, v18, zero, v8, v6, v15]
// [Asm]   mv a1, v52  # live: [v14, v16, v5, a0, v7, v17, a1, s11, v18, zero, v8, v6, v15]
// [Asm]   mv a2, v14  # live: [v14, v16, v5, a0, v7, a2, v17, a1, s11, v18, zero, v8, v6, v15]
// [Asm]   call swap1l0_0  # live: [v14, v16, v5, v18, zero, a0, v8, v7, v17, v6, v15, s11]
// [Asm]   mv v53, a0  # live: [v14, v16, v5, v18, v53, zero, v7, v8, v17, v6, v15, s11]
// [Asm]   # restore_ctx2  # live: [v14, v16, v5, v18, v53, zero, v7, v8, v17, v6, v15, s11]
// [Asm] # control
// [Asm]   mv v54, v53  # live: [v14, v16, v5, v18, zero, v8, v7, v17, v6, v15, s11, v54]
// [Asm] 
// [Asm] # block info: defs: [v14, v55], uses: [v14, v16, v17, v15, v18, v55], upward_exposed: [v14, v16, v17, v15, v18], params_defs: [v54]
// [Asm] # live_in: [v14, v16, v5, v18, zero, v8, v7, v17, v6, v15, s11, v54], live_out: [v14, v16, v5, v18, zero, v8, v7, v17, v6, v15, s11]
// [Asm] # block parameters: [v54]
// [Asm] .quicksort59l2_4_32:
// [Asm]   addi v55, v14, 1  # live: [v16, v5, v18, zero, v8, v7, v17, v6, v15, s11, v55]
// [Asm] # control
// [Asm]   mv v14, v55  # live: [v14, v16, v5, v18, zero, v8, v7, v17, v6, v15, s11]
// [Asm]   mv v15, v15  # live: [v14, v16, v5, v18, zero, v8, v7, v17, v6, v15, s11]
// [Asm]   mv v16, v16  # live: [v14, v16, v5, v18, zero, v8, v7, v17, v6, v15, s11]
// [Asm]   mv v17, v17  # live: [v14, v16, v5, v18, zero, v8, v7, v17, v6, v15, s11]
// [Asm]   mv v18, v18  # live: [v14, v16, v5, v18, zero, v8, v7, v17, v6, v15, s11]
// [Asm]   j .quicksort59l2_4_27  # live: [v14, v16, v5, v18, zero, v8, v7, v17, v6, v15, s11]
// [Asm] 
// [Asm] # block info: defs: [v42], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v42]
// [Asm] # block parameters: []
// [Asm] .quicksort59l2_4_2:
// [Asm] # control
// [Asm]   mv v42, zero  # live: [v42]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v42, a0], upward_exposed: [v42], params_defs: [v42]
// [Asm] # live_in: [v42], live_out: []
// [Asm] # block parameters: [v42]
// [Asm] .quicksort59l2_4_9:
// [Asm] # control
// [Asm]   mv a0, v42  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v21], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v5, zero, v8, v7, v6, s11], live_out: [v5, v21, zero, v7, v8, v6, s11]
// [Asm] # block parameters: []
// [Asm] .quicksort59l2_4_29:
// [Asm] # control
// [Asm]   mv v21, zero  # live: [v5, v21, zero, v8, v7, v6, s11]
// [Asm] 
// [Asm] # block info: defs: [v22], uses: [v21], upward_exposed: [v21], params_defs: [v21]
// [Asm] # live_in: [v5, v21, zero, v8, v7, v6, s11], live_out: [v5, zero, v22, v7, v8, v6, s11]
// [Asm] # block parameters: [v21]
// [Asm] .quicksort59l2_4_33:
// [Asm] # control
// [Asm]   mv v22, v21  # live: [v5, zero, v22, v8, v7, v6, s11]
// [Asm] 
// [Asm] # block info: defs: [t1, v26, ft0, ft1, a1, v28, fa1, fa2, ft6, v29, fa6, v27, a4, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, v30, ft2, a2, v24, a3, ft8, t3, a7, fa7, t0, fa5, fa3, v23, ft3, fa0, t4, t2], uses: [v28, v5, v26, a0, v29, v23, v30, v8, v7, a2, a1, v6, v24], upward_exposed: [v7, v5, v6, v8], params_defs: [v22]
// [Asm] # live_in: [v5, zero, v22, v8, v7, v6, s11], live_out: [v29, zero, v8, v7, v6, s11, v28]
// [Asm] # block parameters: [v22]
// [Asm] .quicksort59l2_4_12:
// [Asm]   lw v23, 0(v5)  # live: [v5, zero, v23, v7, v8, v6, s11]
// [Asm]   addi v24, v23, 1  # live: [v5, zero, v7, v8, v6, s11, v24]
// [Asm]   sw v24, 0(v5)  # live: [v5, zero, v7, v8, v6, s11]
// [Asm]   lw v26, 0(v5)  # live: [v5, zero, v26, v7, v8, v6, s11]
// [Asm]   # save_ctx2  # live: [v5, zero, v26, v7, v8, v6, s11]
// [Asm]   mv a0, v6  # live: [v5, zero, a0, v26, v7, v8, v6, s11]
// [Asm]   mv a1, v26  # live: [v5, zero, a0, v8, v7, v6, a1, s11]
// [Asm]   mv a2, v8  # live: [v5, zero, a0, v8, v7, a2, v6, a1, s11]
// [Asm]   call swap1l0_0  # live: [v5, zero, a0, v8, v7, v6, s11]
// [Asm]   mv v27, a0  # live: [v5, zero, v8, v7, v6, s11]
// [Asm]   # restore_ctx2  # live: [v5, zero, v8, v7, v6, s11]
// [Asm]   lw v28, 0(v5)  # live: [zero, v8, v7, v6, s11, v28]
// [Asm]   addi v29, v28, -1  # live: [v29, zero, v8, v7, v6, s11, v28]
// [Asm]   addi v30, v29, -1  # live: [v29, zero, v30, v8, v7, v6, s11, v28]
// [Asm] # control
// [Asm]   blt v30, v7, .quicksort59l2_4_4  # live: [v29, zero, v7, v8, v6, s11, v28]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, v32, a1, fa1, v33, fa2, ft6, a4, fa6, a6, ft5, ft10, v34, ft7, ft4, ft9, a5, a0, fa4, v36, ft2, a2, v37, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, v35, t4, t2], uses: [v29, a0, v7, v35, v36, v32, a2, v6, a1, v33], upward_exposed: [v6, v29, v7], params_defs: []
// [Asm] # live_in: [v29, zero, v8, v7, v6, s11, v28], live_out: [zero, v8, v37, v6, s11, v28]
// [Asm] # block parameters: []
// [Asm] .quicksort59l2_4_3:
// [Asm]   # save_ctx2  # live: [zero, v29, v8, v7, v6, s11, v28]
// [Asm]   mv a0, v6  # live: [zero, v29, a0, v8, v7, v6, s11, v28]
// [Asm]   mv a1, v7  # live: [zero, v29, a0, v8, v7, a1, v6, s11, v28]
// [Asm]   mv a2, v29  # live: [zero, v29, a0, v8, v7, a2, a1, v6, s11, v28]
// [Asm]   call partition14l1_2  # live: [zero, v29, a0, v7, v8, v6, s11, v28]
// [Asm]   mv v32, a0  # live: [zero, v29, v8, v7, v32, v6, s11, v28]
// [Asm]   # restore_ctx2  # live: [zero, v29, v8, v7, v32, v6, s11, v28]
// [Asm]   addi v33, v32, -1  # live: [zero, v29, v8, v7, v32, v6, s11, v28, v33]
// [Asm]   # save_ctx2  # live: [zero, v29, v8, v7, v32, v6, s11, v28, v33]
// [Asm]   mv a0, v6  # live: [zero, v29, a0, v8, v7, v32, v6, s11, v28, v33]
// [Asm]   mv a1, v7  # live: [zero, v29, a0, v8, v32, a1, v6, s11, v28, v33]
// [Asm]   mv a2, v33  # live: [zero, v29, a0, v8, v32, a2, a1, v6, s11, v28]
// [Asm]   call quicksort59l2_4  # live: [zero, v29, a0, v8, v32, v6, s11, v28]
// [Asm]   mv v34, a0  # live: [zero, v29, v8, v32, v6, s11, v28]
// [Asm]   # restore_ctx2  # live: [zero, v29, v8, v32, v6, s11, v28]
// [Asm]   addi v35, v32, 1  # live: [zero, v29, v8, v35, v6, s11, v28]
// [Asm]   # save_ctx2  # live: [zero, v29, v8, v35, v6, s11, v28]
// [Asm]   mv a0, v6  # live: [zero, a0, v29, v8, v35, v6, s11, v28]
// [Asm]   mv a1, v35  # live: [zero, a0, v29, v8, v6, a1, s11, v28]
// [Asm]   mv a2, v29  # live: [zero, a0, v8, a2, v6, a1, s11, v28]
// [Asm]   call quicksort59l2_4  # live: [v6, s11, v28, zero, a0, v8]
// [Asm]   mv v36, a0  # live: [v36, v6, s11, v28, zero, v8]
// [Asm]   # restore_ctx2  # live: [v36, v6, s11, v28, zero, v8]
// [Asm] # control
// [Asm]   mv v37, v36  # live: [v37, v6, s11, v28, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v38, v39], uses: [v38, v28, v39, v8], upward_exposed: [v28, v8], params_defs: [v37]
// [Asm] # live_in: [zero, v8, v37, v6, s11, v28], live_out: [v38, v6, s11, zero, v8]
// [Asm] # block parameters: [v37]
// [Asm] .quicksort59l2_4_5:
// [Asm]   addi v38, v28, 1  # live: [zero, v8, v38, v6, s11]
// [Asm]   addi v39, v8, -1  # live: [zero, v8, v38, v6, s11, v39]
// [Asm] # control
// [Asm]   blt v39, v38, .quicksort59l2_4_7  # live: [v38, v6, s11, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [t1, v7, ft0, ft1, a1, v44, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, v46, ft9, a5, a0, fa4, ft2, a2, v43, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, v45, t4, t2], uses: [v46, a0, v8, v38, a2, a1, v6, v43, v44], upward_exposed: [v38, v6, v8], params_defs: []
// [Asm] # live_in: [v38, v6, s11, zero, v8], live_out: [v8, v6, s11, zero, v7]
// [Asm] # block parameters: []
// [Asm] .quicksort59l2_4_6:
// [Asm]   # save_ctx2  # live: [zero, v8, v38, v6, s11]
// [Asm]   mv a0, v6  # live: [zero, a0, v8, v38, v6, s11]
// [Asm]   mv a1, v38  # live: [zero, a0, v8, v38, a1, v6, s11]
// [Asm]   mv a2, v8  # live: [zero, a0, v8, v38, a2, a1, v6, s11]
// [Asm]   call partition14l1_2  # live: [zero, a0, v8, v38, v6, s11]
// [Asm]   mv v43, a0  # live: [zero, v8, v38, v6, v43, s11]
// [Asm]   # restore_ctx2  # live: [zero, v8, v38, v6, v43, s11]
// [Asm]   addi v44, v43, -1  # live: [zero, v8, v38, v6, v43, s11, v44]
// [Asm]   # save_ctx2  # live: [zero, v8, v38, v6, v43, s11, v44]
// [Asm]   mv a0, v6  # live: [zero, a0, v8, v38, v6, v43, s11, v44]
// [Asm]   mv a1, v38  # live: [zero, a0, v8, v6, v43, a1, s11, v44]
// [Asm]   mv a2, v44  # live: [zero, a0, v8, a2, v6, v43, a1, s11]
// [Asm]   call quicksort59l2_4  # live: [v6, v43, s11, zero, a0, v8]
// [Asm]   mv v45, a0  # live: [v6, v43, s11, zero, v8]
// [Asm]   # restore_ctx2  # live: [v6, v43, s11, zero, v8]
// [Asm]   addi v46, v43, 1  # live: [v6, v46, s11, zero, v8]
// [Asm] # control
// [Asm]   mv v6, v6  # live: [v6, v46, s11, zero, v8]
// [Asm]   mv v7, v46  # live: [v7, v6, s11, zero, v8]
// [Asm]   mv v8, v8  # live: [v7, v6, s11, zero, v8]
// [Asm]   j .quicksort59l2_4_0  # live: [v7, v6, s11, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v37], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v6, s11, v28, zero, v8], live_out: [zero, v8, v37, v6, s11, v28]
// [Asm] # block parameters: []
// [Asm] .quicksort59l2_4_4:
// [Asm] # control
// [Asm]   mv v37, zero  # live: [v37, v6, s11, v28, zero, v8]
// [Asm]   j .quicksort59l2_4_5  # live: [v37, v6, s11, v28, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v41], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v41]
// [Asm] # block parameters: []
// [Asm] .quicksort59l2_4_7:
// [Asm] # control
// [Asm]   mv v41, zero  # live: [v41]
// [Asm] 
// [Asm] # block info: defs: [v42], uses: [v41], upward_exposed: [v41], params_defs: [v41]
// [Asm] # live_in: [v41], live_out: [v42]
// [Asm] # block parameters: [v41]
// [Asm] .quicksort59l2_4_8:
// [Asm] # control
// [Asm]   mv v42, v41  # live: [v42]
// [Asm]   j .quicksort59l2_4_9  # live: [v42]
// [Asm] 
// [Asm] # block info: defs: [v54], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v14, v16, v5, v18, zero, v8, v7, v17, v6, v15, s11], live_out: [v14, v16, v5, v18, zero, v8, v7, v17, v6, v15, s11, v54]
// [Asm] # block parameters: []
// [Asm] .quicksort59l2_4_31:
// [Asm] # control
// [Asm]   mv v54, zero  # live: [v14, v16, v5, v18, zero, v8, v7, v17, v6, v15, s11, v54]
// [Asm]   j .quicksort59l2_4_32  # live: [v14, v16, v5, v18, zero, v8, v7, v17, v6, v15, s11, v54]
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_16:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_16_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main75l3_7  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] partition14l1_2:
// [Asm] # block info: defs: [v73, v2, v5, v7, v4, v74, v6, s11, v3], uses: [v2, v3, v5, a0, v7, a2, v4, a1, v74, s11, v73], upward_exposed: [a2, a1, s11, a0], params_defs: []
// [Asm] # live_in: [a2, a1, s11, a0, zero], live_out: [v3, v5, zero, v4, v6, v2]
// [Asm] # block parameters: []
// [Asm] .partition14l1_2_0:
// [Asm]   # save_ctx1  # live: [zero, a0, a2, a1, s11]
// [Asm]   mv v2, a0  # live: [zero, a2, a1, s11, v2]
// [Asm]   mv v3, a1  # live: [v3, zero, a2, s11, v2]
// [Asm]   mv v4, a2  # live: [v3, zero, v4, s11, v2]
// [Asm]   slliw v73, v4, 2  # live: [v3, v73, zero, v4, s11, v2]
// [Asm]   add v74, v2, v73  # live: [v3, zero, v4, v74, s11, v2]
// [Asm]   lw v6, 0(v74)  # live: [v3, zero, v4, v6, s11, v2]
// [Asm]   addi v7, v3, -1  # live: [v3, zero, v7, v4, v6, s11, v2]
// [Asm]   addi v5, s11, -4  # live: [v3, v5, zero, v7, v4, v6, v2]
// [Asm]   andi s11, v5, -8  # live: [v3, v5, zero, v7, v4, v6, v2]
// [Asm]   sw v7, 0(v5)  # live: [v2, v4, v5, v6, zero, v3]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v11, v10, v12, v9, v13], uses: [v2, v4, v5, v6, v3], upward_exposed: [v2, v4, v5, v6, v3], params_defs: []
// [Asm] # live_in: [v2, v5, zero, v4, v6, v3], live_out: [v11, v5, v10, v13, zero, v4, v12, v9, v2]
// [Asm] # block parameters: []
// [Asm] .partition14l1_2_21:
// [Asm] # control
// [Asm]   mv v9, v3  # live: [v5, zero, v4, v6, v9, v2]
// [Asm]   mv v10, v5  # live: [v5, v10, zero, v4, v6, v9, v2]
// [Asm]   mv v11, v2  # live: [v11, v5, v10, zero, v4, v6, v9, v2]
// [Asm]   mv v12, v6  # live: [v11, v5, v10, zero, v4, v12, v9, v2]
// [Asm]   mv v13, v4  # live: [v11, v5, v10, v13, zero, v4, v12, v9, v2]
// [Asm] 
// [Asm] # block info: defs: [v14], uses: [v14, v13, v9], upward_exposed: [v13, v9], params_defs: [v11, v10, v12, v9, v13]
// [Asm] # live_in: [v11, v5, v10, v13, zero, v4, v12, v9, v2], live_out: [v11, v5, v10, zero, v13, v4, v12, v9, v2]
// [Asm] # block parameters: [v9, v10, v11, v12, v13]
// [Asm] .partition14l1_2_13:
// [Asm]   addi v14, v13, -1  # live: [v11, v5, v14, v10, zero, v13, v4, v12, v9, v2]
// [Asm] # control
// [Asm]   blt v14, v9, .partition14l1_2_15  # live: [v11, v5, v10, zero, v13, v4, v12, v9, v2]
// [Asm] 
// [Asm] # block info: defs: [v53, v54, v27], uses: [v11, v53, v12, v9, v54, v27], upward_exposed: [v11, v12, v9], params_defs: []
// [Asm] # live_in: [v11, v5, v10, zero, v13, v4, v12, v9, v2], live_out: [v11, v5, v10, zero, v13, v4, v12, v9, v2]
// [Asm] # block parameters: []
// [Asm] .partition14l1_2_14:
// [Asm]   slliw v53, v9, 2  # live: [v11, v5, v10, v53, zero, v13, v4, v12, v9, v2]
// [Asm]   add v54, v11, v53  # live: [v11, v5, v10, zero, v13, v4, v12, v9, v54, v2]
// [Asm]   lw v27, 0(v54)  # live: [v11, v5, v10, zero, v13, v27, v4, v12, v9, v2]
// [Asm] # control
// [Asm]   blt v12, v27, .partition14l1_2_17  # live: [v11, v5, v10, zero, v13, v4, v12, v9, v2]
// [Asm] 
// [Asm] # block info: defs: [v42, v30, v32, v41, v37, v43, v44, v33, v48, v29, v45, v47, v34, v40], uses: [v11, v10, v42, v30, v32, v41, v43, v44, v9, v33, v48, v29, zero, v45, v47, v34, v40], upward_exposed: [v11, v10, v9, zero], params_defs: []
// [Asm] # live_in: [v11, v5, v10, zero, v13, v4, v12, v9, v2], live_out: [v11, v5, v10, v13, zero, v37, v4, v12, v9, v2]
// [Asm] # block parameters: []
// [Asm] .partition14l1_2_16:
// [Asm]   lw v29, 0(v10)  # live: [v11, v5, v10, v13, zero, v29, v4, v12, v9, v2]
// [Asm]   addi v30, v29, 1  # live: [v11, v5, v10, v13, zero, v30, v4, v12, v9, v2]
// [Asm]   sw v30, 0(v10)  # live: [v11, v5, v10, v13, zero, v4, v12, v9, v2]
// [Asm]   lw v32, 0(v10)  # live: [v11, v5, v10, v13, zero, v4, v32, v12, v9, v2]
// [Asm]   slliw v47, v32, 2  # live: [v11, v5, v10, v13, zero, v4, v32, v47, v12, v9, v2]
// [Asm]   add v48, v11, v47  # live: [v11, v5, v10, v48, v13, zero, v4, v32, v12, v9, v2]
// [Asm]   lw v33, 0(v48)  # live: [v11, v5, v10, v13, zero, v4, v32, v12, v9, v33, v2]
// [Asm]   slliw v44, v9, 2  # live: [v11, v5, v10, v13, zero, v4, v32, v12, v44, v9, v33, v2]
// [Asm]   add v45, v11, v44  # live: [v11, v5, v10, v13, zero, v45, v4, v32, v12, v9, v33, v2]
// [Asm]   lw v34, 0(v45)  # live: [v2, v11, v5, v10, v13, zero, v4, v32, v12, v9, v33, v34]
// [Asm]   slliw v42, v32, 2  # live: [v2, v11, v5, v10, v13, zero, v42, v4, v12, v9, v33, v34]
// [Asm]   add v43, v11, v42  # live: [v2, v11, v5, v10, v13, zero, v4, v43, v12, v9, v33, v34]
// [Asm]   sw v34, 0(v43)  # live: [v11, v5, v10, v13, zero, v4, v12, v9, v33, v2]
// [Asm]   slliw v40, v9, 2  # live: [v40, v11, v5, v10, v13, zero, v4, v12, v9, v33, v2]
// [Asm]   add v41, v11, v40  # live: [v11, v5, v10, v13, zero, v4, v41, v12, v9, v33, v2]
// [Asm]   sw v33, 0(v41)  # live: [v11, v5, v10, v13, zero, v4, v12, v9, v2]
// [Asm] # control
// [Asm]   mv v37, zero  # live: [v11, v5, v10, v13, zero, v37, v4, v12, v9, v2]
// [Asm] 
// [Asm] # block info: defs: [v38, v9], uses: [v11, v38, v10, v12, v9, v13], upward_exposed: [v11, v10, v12, v9, v13], params_defs: [v37]
// [Asm] # live_in: [v11, v5, v10, v13, zero, v37, v4, v12, v9, v2], live_out: [v11, v5, v10, v13, zero, v4, v12, v9, v2]
// [Asm] # block parameters: [v37]
// [Asm] .partition14l1_2_18:
// [Asm]   addi v38, v9, 1  # live: [v11, v5, v10, v13, zero, v4, v38, v12, v2]
// [Asm] # control
// [Asm]   mv v9, v38  # live: [v11, v5, v10, v13, zero, v4, v12, v9, v2]
// [Asm]   mv v10, v10  # live: [v11, v5, v10, v13, zero, v4, v12, v9, v2]
// [Asm]   mv v11, v11  # live: [v11, v5, v10, v13, zero, v4, v12, v9, v2]
// [Asm]   mv v12, v12  # live: [v11, v5, v10, v13, zero, v4, v12, v9, v2]
// [Asm]   mv v13, v13  # live: [v11, v5, v10, v13, zero, v4, v12, v9, v2]
// [Asm]   j .partition14l1_2_13  # live: [v11, v5, v10, v13, zero, v4, v12, v9, v2]
// [Asm] 
// [Asm] # block info: defs: [v16], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v4, v5, zero, v2], live_out: [v4, v16, v5, v2]
// [Asm] # block parameters: []
// [Asm] .partition14l1_2_15:
// [Asm] # control
// [Asm]   mv v16, zero  # live: [v4, v16, v5, v2]
// [Asm] 
// [Asm] # block info: defs: [v17], uses: [v16], upward_exposed: [v16], params_defs: [v16]
// [Asm] # live_in: [v4, v16, v5, v2], live_out: [v4, v17, v5, v2]
// [Asm] # block parameters: [v16]
// [Asm] .partition14l1_2_19:
// [Asm] # control
// [Asm]   mv v17, v16  # live: [v4, v17, v5, v2]
// [Asm] 
// [Asm] # block info: defs: [v62, v58, v21, v26, a0, v22, v65, v64, v60, v18, v23, v19, v59, v61, v57], uses: [v62, v5, v58, v21, v26, a0, v22, v65, v64, v60, v18, v23, v19, v4, v59, v61, v57, v2], upward_exposed: [v4, v5, v2], params_defs: [v17]
// [Asm] # live_in: [v4, v17, v5, v2], live_out: []
// [Asm] # block parameters: [v17]
// [Asm] .partition14l1_2_1:
// [Asm]   lw v18, 0(v5)  # live: [v4, v5, v18, v2]
// [Asm]   addi v19, v18, 1  # live: [v19, v4, v5, v2]
// [Asm]   sw v19, 0(v5)  # live: [v4, v5, v2]
// [Asm]   lw v21, 0(v5)  # live: [v4, v5, v21, v2]
// [Asm]   slliw v64, v21, 2  # live: [v4, v5, v21, v64, v2]
// [Asm]   add v65, v2, v64  # live: [v4, v65, v5, v21, v2]
// [Asm]   lw v22, 0(v65)  # live: [v4, v5, v21, v22, v2]
// [Asm]   slliw v61, v4, 2  # live: [v4, v5, v21, v61, v22, v2]
// [Asm]   add v62, v2, v61  # live: [v62, v4, v5, v21, v22, v2]
// [Asm]   lw v23, 0(v62)  # live: [v2, v4, v5, v21, v22, v23]
// [Asm]   slliw v59, v21, 2  # live: [v2, v4, v59, v5, v22, v23]
// [Asm]   add v60, v2, v59  # live: [v60, v2, v4, v5, v22, v23]
// [Asm]   sw v23, 0(v60)  # live: [v4, v5, v22, v2]
// [Asm]   slliw v57, v4, 2  # live: [v5, v57, v22, v2]
// [Asm]   add v58, v2, v57  # live: [v5, v58, v22]
// [Asm]   sw v22, 0(v58)  # live: [v5]
// [Asm]   lw v26, 0(v5)  # live: [v26]
// [Asm] # control
// [Asm]   mv a0, v26  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v37], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v11, v5, v10, zero, v13, v4, v12, v9, v2], live_out: [v11, v5, v10, v13, zero, v37, v4, v12, v9, v2]
// [Asm] # block parameters: []
// [Asm] .partition14l1_2_17:
// [Asm] # control
// [Asm]   mv v37, zero  # live: [v11, v5, v10, v13, zero, v37, v4, v12, v9, v2]
// [Asm]   j .partition14l1_2_18  # live: [v11, v5, v10, v13, zero, v37, v4, v12, v9, v2]
// [Asm] 
// [Asm] # leaf false
// [Asm] input79l4_5:
// [Asm] # block info: defs: [v3, v7, v4, v6, v5, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .input79l4_5_8:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm]   mv v6, v3  # live: [v4, v5, v6, zero]
// [Asm]   mv v7, v4  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v8], uses: [v8, v5, v7], upward_exposed: [v5, v7], params_defs: [v5, v6, v7]
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: [v5, v6, v7]
// [Asm] .input79l4_5_0:
// [Asm]   addi v8, v7, -1  # live: [v8, v5, v6, zero, v7]
// [Asm] # control
// [Asm]   blt v8, v5, .input79l4_5_2  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, v26, v13, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, v27, a6, ft10, ft5, ft7, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v5, v10, a0, v26, v13, v27, v7, v6, v12], upward_exposed: [v5, v6, v7], params_defs: []
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v6, v12, zero, v7]
// [Asm] # block parameters: []
// [Asm] .input79l4_5_1:
// [Asm]   # save_ctx2  # live: [v6, v5, zero, v7]
// [Asm]   call minimbt_read_int  # live: [v6, v5, zero, a0, v7]
// [Asm]   mv v10, a0  # live: [v6, v5, v10, zero, v7]
// [Asm]   # restore_ctx2  # live: [v6, v5, v10, zero, v7]
// [Asm]   slliw v26, v5, 2  # live: [v6, v5, v10, zero, v26, v7]
// [Asm]   add v27, v6, v26  # live: [v6, v5, v10, zero, v27, v7]
// [Asm]   sw v10, 0(v27)  # live: [v6, v5, zero, v7]
// [Asm]   addi v12, v5, 1  # live: [v6, v12, zero, v7]
// [Asm]   addi v13, v7, -1  # live: [v6, v12, zero, v13, v7]
// [Asm] # control
// [Asm]   blt v13, v12, .input79l4_5_4  # live: [v6, v12, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, v22, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, v19, ft10, ft5, ft7, ft4, v5, ft9, v21, a5, fa4, a0, ft2, a2, v17, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v21, a0, v22, v7, v19, v6, v17, v12], upward_exposed: [v6, v12, v7], params_defs: []
// [Asm] # live_in: [v6, v12, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .input79l4_5_3:
// [Asm]   # save_ctx2  # live: [v6, v12, zero, v7]
// [Asm]   call minimbt_read_int  # live: [v6, v12, zero, a0, v7]
// [Asm]   mv v17, a0  # live: [v6, v17, v12, zero, v7]
// [Asm]   # restore_ctx2  # live: [v6, v17, v12, zero, v7]
// [Asm]   slliw v21, v12, 2  # live: [v6, v17, v12, v21, zero, v7]
// [Asm]   add v22, v6, v21  # live: [v6, v17, v12, zero, v22, v7]
// [Asm]   sw v17, 0(v22)  # live: [v6, v12, zero, v7]
// [Asm]   addi v19, v12, 1  # live: [v19, v6, zero, v7]
// [Asm] # control
// [Asm]   mv v5, v19  # live: [v5, v6, zero, v7]
// [Asm]   mv v6, v6  # live: [v5, v6, zero, v7]
// [Asm]   mv v7, v7  # live: [v5, v6, zero, v7]
// [Asm]   j .input79l4_5_0  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v16], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v16]
// [Asm] # block parameters: []
// [Asm] .input79l4_5_2:
// [Asm] # control
// [Asm]   mv v16, zero  # live: [v16]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v16, a0], upward_exposed: [v16], params_defs: [v16]
// [Asm] # live_in: [v16], live_out: []
// [Asm] # block parameters: [v16]
// [Asm] .input79l4_5_6:
// [Asm] # control
// [Asm]   mv a0, v16  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v15], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v15]
// [Asm] # block parameters: []
// [Asm] .input79l4_5_4:
// [Asm] # control
// [Asm]   mv v15, zero  # live: [v15]
// [Asm] 
// [Asm] # block info: defs: [v16], uses: [v15], upward_exposed: [v15], params_defs: [v15]
// [Asm] # live_in: [v15], live_out: [v16]
// [Asm] # block parameters: [v15]
// [Asm] .input79l4_5_5:
// [Asm] # control
// [Asm]   mv v16, v15  # live: [v16]
// [Asm]   j .input79l4_5_6  # live: [v16]
// [Asm] 
// [Asm] # leaf false
// [Asm] output97l5_6:
// [Asm] # block info: defs: [v3, v7, v4, v6, v5, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .output97l5_6_8:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm]   mv v6, v3  # live: [v4, v5, v6, zero]
// [Asm]   mv v7, v4  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v8], uses: [v8, v5, v7], upward_exposed: [v5, v7], params_defs: [v5, v6, v7]
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: [v5, v6, v7]
// [Asm] .output97l5_6_0:
// [Asm]   addi v8, v7, -1  # live: [v8, v5, v6, zero, v7]
// [Asm] # control
// [Asm]   blt v8, v5, .output97l5_6_2  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v13, v32, ft0, ft1, a1, v12, fa1, v33, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, v10, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v5, v14, v10, a0, v13, v7, v32, v6, v33], upward_exposed: [v5, v6, v7], params_defs: []
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v6, v13, zero, v7]
// [Asm] # block parameters: []
// [Asm] .output97l5_6_1:
// [Asm]   slliw v32, v5, 2  # live: [v32, v6, v5, zero, v7]
// [Asm]   add v33, v6, v32  # live: [v6, v5, zero, v33, v7]
// [Asm]   lw v10, 0(v33)  # live: [v6, v5, v10, zero, v7]
// [Asm]   # save_ctx2  # live: [v6, v5, v10, zero, v7]
// [Asm]   mv a0, v10  # live: [v6, v5, zero, a0, v7]
// [Asm]   call minimbt_print_int  # live: [v6, v5, zero, a0, v7]
// [Asm]   mv v11, a0  # live: [v6, v5, zero, v7]
// [Asm]   # restore_ctx2  # live: [v6, v5, zero, v7]
// [Asm]   # save_ctx2  # live: [v6, v5, zero, v7]
// [Asm]   call minimbt_print_endline  # live: [v6, v5, zero, a0, v7]
// [Asm]   mv v12, a0  # live: [v6, v5, zero, v7]
// [Asm]   # restore_ctx2  # live: [v6, v5, zero, v7]
// [Asm]   addi v13, v5, 1  # live: [v6, v13, zero, v7]
// [Asm]   addi v14, v7, -1  # live: [v6, v14, v13, zero, v7]
// [Asm] # control
// [Asm]   blt v14, v13, .output97l5_6_4  # live: [v6, v13, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v25, t1, v26, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v20, v19, a6, ft5, ft10, ft7, ft4, v5, ft9, v21, a5, fa4, a0, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v25, v18, v21, v13, v26, a0, v7, v6], upward_exposed: [v6, v13, v7], params_defs: []
// [Asm] # live_in: [v6, v13, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .output97l5_6_3:
// [Asm]   slliw v25, v13, 2  # live: [v25, v6, zero, v13, v7]
// [Asm]   add v26, v6, v25  # live: [v7, v6, zero, v13, v26]
// [Asm]   lw v18, 0(v26)  # live: [v6, v18, zero, v13, v7]
// [Asm]   # save_ctx2  # live: [v6, v18, zero, v13, v7]
// [Asm]   mv a0, v18  # live: [v7, v6, zero, v13, a0]
// [Asm]   call minimbt_print_int  # live: [v7, v6, zero, v13, a0]
// [Asm]   mv v19, a0  # live: [v6, zero, v13, v7]
// [Asm]   # restore_ctx2  # live: [v6, zero, v13, v7]
// [Asm]   # save_ctx2  # live: [v6, zero, v13, v7]
// [Asm]   call minimbt_print_endline  # live: [v7, v6, zero, v13, a0]
// [Asm]   mv v20, a0  # live: [v6, zero, v13, v7]
// [Asm]   # restore_ctx2  # live: [v6, zero, v13, v7]
// [Asm]   addi v21, v13, 1  # live: [v6, v21, zero, v7]
// [Asm] # control
// [Asm]   mv v5, v21  # live: [v5, v6, zero, v7]
// [Asm]   mv v6, v6  # live: [v5, v6, zero, v7]
// [Asm]   mv v7, v7  # live: [v5, v6, zero, v7]
// [Asm]   j .output97l5_6_0  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v17], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v17]
// [Asm] # block parameters: []
// [Asm] .output97l5_6_2:
// [Asm] # control
// [Asm]   mv v17, zero  # live: [v17]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v17, a0], upward_exposed: [v17], params_defs: [v17]
// [Asm] # live_in: [v17], live_out: []
// [Asm] # block parameters: [v17]
// [Asm] .output97l5_6_6:
// [Asm] # control
// [Asm]   mv a0, v17  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v16], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v16]
// [Asm] # block parameters: []
// [Asm] .output97l5_6_4:
// [Asm] # control
// [Asm]   mv v16, zero  # live: [v16]
// [Asm] 
// [Asm] # block info: defs: [v17], uses: [v16], upward_exposed: [v16], params_defs: [v16]
// [Asm] # live_in: [v16], live_out: [v17]
// [Asm] # block parameters: [v16]
// [Asm] .output97l5_6_5:
// [Asm] # control
// [Asm]   mv v17, v16  # live: [v17]
// [Asm]   j .output97l5_6_6  # live: [v17]
// [Asm] 
// [Asm] # leaf true
// [Asm] swap1l0_0:
// [Asm] # block info: defs: [v3, v11, v16, v5, v14, v10, v13, a0, v17, v12, v9, v4, v6, v2], uses: [v2, v11, v16, v14, v5, v10, v13, a0, a2, v17, a1, v12, v9, zero, v4, v6, v3], upward_exposed: [a2, a1, a0, zero], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .swap1l0_0_0:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v3, a2, zero, v2]
// [Asm]   mv v4, a2  # live: [v3, v4, zero, v2]
// [Asm]   slliw v16, v3, 2  # live: [v3, v4, v16, zero, v2]
// [Asm]   add v17, v2, v16  # live: [v3, v4, v17, zero, v2]
// [Asm]   lw v5, 0(v17)  # live: [v3, v4, v5, zero, v2]
// [Asm]   slliw v13, v4, 2  # live: [v3, v4, v5, zero, v13, v2]
// [Asm]   add v14, v2, v13  # live: [v3, v4, v5, v14, zero, v2]
// [Asm]   lw v6, 0(v14)  # live: [v3, v4, v5, v6, zero, v2]
// [Asm]   slliw v11, v3, 2  # live: [v11, v4, v5, v6, zero, v2]
// [Asm]   add v12, v2, v11  # live: [v4, v5, v6, v12, zero, v2]
// [Asm]   sw v6, 0(v12)  # live: [v4, v5, zero, v2]
// [Asm]   slliw v9, v4, 2  # live: [v5, zero, v9, v2]
// [Asm]   add v10, v2, v9  # live: [v5, v10, zero]
// [Asm]   sw v5, 0(v10)  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_16  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main75l3_7:
// [Asm] # block info: defs: [v2, t1, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, v48, fa3, ft3, fa0, t4, t2, v3], uses: [v3, v5, v48, a0, zero, a2, a1, s11, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: [v3, zero, v2]
// [Asm] # block parameters: []
// [Asm] .main75l3_7_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   # save_ctx2  # live: [s11, zero]
// [Asm]   call minimbt_read_int  # live: [s11, zero, a0]
// [Asm]   mv v3, a0  # live: [s11, zero, v3]
// [Asm]   # restore_ctx2  # live: [s11, zero, v3]
// [Asm]   slliw v48, v3, 2  # live: [s11, v48, zero, v3]
// [Asm]   sub v2, s11, v48  # live: [v2, zero, v3]
// [Asm]   andi s11, v2, -8  # live: [v2, zero, v3]
// [Asm]   mv a1, v3  # live: [v2, a1, zero, v3]
// [Asm]   mv a0, v2  # live: [v2, a1, zero, a0, v3]
// [Asm]   mv a2, zero  # live: [v2, a2, a1, zero, a0, v3]
// [Asm]   call memseti32  # live: [v2, zero, v3]
// [Asm]   addi v5, v3, -1  # live: [v2, v5, zero, v3]
// [Asm] # control
// [Asm]   blt v5, zero, .main75l3_7_2  # live: [v2, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v7, ft0, ft1, a1, v44, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v3, v10, a0, v7, a2, a1, v44, v9, v2], upward_exposed: [v3, v2], params_defs: []
// [Asm] # live_in: [v2, zero, v3], live_out: [v2, v11, zero, v3]
// [Asm] # block parameters: []
// [Asm] .main75l3_7_1:
// [Asm]   # save_ctx2  # live: [v3, zero, v2]
// [Asm]   call minimbt_read_int  # live: [v3, zero, a0, v2]
// [Asm]   mv v7, a0  # live: [v3, v7, zero, v2]
// [Asm]   # restore_ctx2  # live: [v3, v7, zero, v2]
// [Asm]   sw v7, 0(v2)  # live: [v3, zero, v2]
// [Asm]   li v44, 1  # live: [v3, v44, zero, v2]
// [Asm]   addi v9, v44, 0  # live: [v3, zero, v9, v2]
// [Asm]   # save_ctx2  # live: [v3, zero, v9, v2]
// [Asm]   mv a0, v9  # live: [v3, zero, a0, v2]
// [Asm]   mv a1, v2  # live: [v3, a1, zero, a0, v2]
// [Asm]   mv a2, v3  # live: [v3, a2, a1, zero, a0, v2]
// [Asm]   call input79l4_5  # live: [v3, zero, a0, v2]
// [Asm]   mv v10, a0  # live: [v3, v10, zero, v2]
// [Asm]   # restore_ctx2  # live: [v3, v10, zero, v2]
// [Asm] # control
// [Asm]   mv v11, v10  # live: [v3, v11, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [v12, v13], uses: [v12, v13, zero, v3], upward_exposed: [zero, v3], params_defs: [v11]
// [Asm] # live_in: [v2, v11, zero, v3], live_out: [v3, v12, zero, v2]
// [Asm] # block parameters: [v11]
// [Asm] .main75l3_7_3:
// [Asm]   addi v12, v3, -1  # live: [v2, v12, zero, v3]
// [Asm]   addi v13, v12, -1  # live: [v2, v12, zero, v13, v3]
// [Asm] # control
// [Asm]   blt v13, zero, .main75l3_7_5  # live: [v2, v12, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v16, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v20, v19, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v15], uses: [v16, v18, zero, a0, v19, a2, a1, v12, v15, v2], upward_exposed: [v12, zero, v2], params_defs: []
// [Asm] # live_in: [v3, v12, zero, v2], live_out: [v2, zero, v20, v3]
// [Asm] # block parameters: []
// [Asm] .main75l3_7_4:
// [Asm]   # save_ctx2  # live: [v2, zero, v12, v3]
// [Asm]   mv a0, v2  # live: [v2, zero, a0, v12, v3]
// [Asm]   mv a1, zero  # live: [v2, zero, a0, a1, v12, v3]
// [Asm]   mv a2, v12  # live: [v2, zero, a0, a2, a1, v12, v3]
// [Asm]   call partition14l1_2  # live: [v2, zero, a0, v12, v3]
// [Asm]   mv v15, a0  # live: [v2, zero, v12, v15, v3]
// [Asm]   # restore_ctx2  # live: [v2, zero, v12, v15, v3]
// [Asm]   addi v16, v15, -1  # live: [v2, v16, zero, v12, v15, v3]
// [Asm]   # save_ctx2  # live: [v2, v16, zero, v12, v15, v3]
// [Asm]   mv a0, v2  # live: [v2, v16, zero, a0, v12, v15, v3]
// [Asm]   mv a1, zero  # live: [v2, v16, zero, a0, a1, v12, v15, v3]
// [Asm]   mv a2, v16  # live: [v2, zero, a0, a2, a1, v12, v15, v3]
// [Asm]   call quicksort59l2_4  # live: [v3, v12, v15, zero, a0, v2]
// [Asm]   mv v17, a0  # live: [v3, v12, v15, zero, v2]
// [Asm]   # restore_ctx2  # live: [v3, v12, v15, zero, v2]
// [Asm]   addi v18, v15, 1  # live: [v3, v12, v18, zero, v2]
// [Asm]   # save_ctx2  # live: [v3, v12, v18, zero, v2]
// [Asm]   mv a0, v2  # live: [v3, v12, v18, zero, a0, v2]
// [Asm]   mv a1, v18  # live: [v3, a1, v12, zero, a0, v2]
// [Asm]   mv a2, v12  # live: [v3, a2, a1, zero, a0, v2]
// [Asm]   call quicksort59l2_4  # live: [v3, zero, a0, v2]
// [Asm]   mv v19, a0  # live: [v3, v19, zero, v2]
// [Asm]   # restore_ctx2  # live: [v3, v19, zero, v2]
// [Asm] # control
// [Asm]   mv v20, v19  # live: [v3, zero, v20, v2]
// [Asm] 
// [Asm] # block info: defs: [v21], uses: [v21, zero, v3], upward_exposed: [zero, v3], params_defs: [v20]
// [Asm] # live_in: [v2, zero, v20, v3], live_out: [v3, zero, v2]
// [Asm] # block parameters: [v20]
// [Asm] .main75l3_7_6:
// [Asm]   addi v21, v3, -1  # live: [v2, v21, zero, v3]
// [Asm] # control
// [Asm]   blt v21, zero, .main75l3_7_8  # live: [v2, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v25, t1, v26, ft0, ft1, a1, v28, fa1, fa2, ft6, a4, fa6, v27, a6, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, v30, ft2, a2, a3, v24, ft8, t3, a7, fa7, t0, fa5, fa3, v23, ft3, fa0, t4, t2], uses: [v3, a0, v26, v23, v30, v27, a2, a1, v2], upward_exposed: [v3, v2], params_defs: []
// [Asm] # live_in: [v2, v3], live_out: [v28]
// [Asm] # block parameters: []
// [Asm] .main75l3_7_7:
// [Asm]   lw v23, 0(v2)  # live: [v2, v23, v3]
// [Asm]   # save_ctx2  # live: [v2, v23, v3]
// [Asm]   mv a0, v23  # live: [v2, a0, v3]
// [Asm]   call minimbt_print_int  # live: [v2, a0, v3]
// [Asm]   mv v24, a0  # live: [v2, v3]
// [Asm]   # restore_ctx2  # live: [v2, v3]
// [Asm]   # save_ctx2  # live: [v2, v3]
// [Asm]   call minimbt_print_endline  # live: [v2, a0, v3]
// [Asm]   mv v25, a0  # live: [v2, v3]
// [Asm]   # restore_ctx2  # live: [v2, v3]
// [Asm]   li v30, 1  # live: [v2, v30, v3]
// [Asm]   addi v26, v30, 0  # live: [v2, v26, v3]
// [Asm]   # save_ctx2  # live: [v2, v26, v3]
// [Asm]   mv a0, v26  # live: [v2, a0, v3]
// [Asm]   mv a1, v2  # live: [a1, a0, v3]
// [Asm]   mv a2, v3  # live: [a2, a1, a0]
// [Asm]   call output97l5_6  # live: [a0]
// [Asm]   mv v27, a0  # live: [v27]
// [Asm]   # restore_ctx2  # live: [v27]
// [Asm] # control
// [Asm]   mv v28, v27  # live: [v28]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v28, a0], upward_exposed: [v28], params_defs: [v28]
// [Asm] # live_in: [v28], live_out: []
// [Asm] # block parameters: [v28]
// [Asm] .main75l3_7_9:
// [Asm] # control
// [Asm]   mv a0, v28  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v11], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v2, zero, v3], live_out: [v2, v11, zero, v3]
// [Asm] # block parameters: []
// [Asm] .main75l3_7_2:
// [Asm] # control
// [Asm]   mv v11, zero  # live: [v3, v11, zero, v2]
// [Asm]   j .main75l3_7_3  # live: [v3, v11, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [v20], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v2, zero, v3], live_out: [v2, zero, v20, v3]
// [Asm] # block parameters: []
// [Asm] .main75l3_7_5:
// [Asm] # control
// [Asm]   mv v20, zero  # live: [v3, zero, v20, v2]
// [Asm]   j .main75l3_7_6  # live: [v3, zero, v20, v2]
// [Asm] 
// [Asm] # block info: defs: [v28], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v28]
// [Asm] # block parameters: []
// [Asm] .main75l3_7_8:
// [Asm] # control
// [Asm]   mv v28, zero  # live: [v28]
// [Asm]   j .main75l3_7_9  # live: [v28]
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("swap", Unit), args: [("arr", Array(Int)), ("i", Int), ("j", Int)], body: Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j"))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit)))}, LetRec({name: ("partition", Int), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Var("high")), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Prim(Var("low"), Int(1), Sub, kind=Some(Int))), LetRec({name: ("l", Var({val: Some(Unit)})), args: [("j", Var({val: Some(Int)}))], body: If(LE(Var("j"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit), App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("l"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0))))))))}, LetRec({name: ("quicksort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: If(LE(Var("low"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("pi", Var({val: Some(Int)})), App(Var("partition"), [Var("arr"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Var("low"), Prim(Var("pi"), Int(1), Sub, kind=Some(Int))]), App(Var("quicksort"), [Var("arr"), Prim(Var("pi"), Int(1), Add, kind=Some(Int)), Var("high")]))), Unit)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)])))))))}, App(Var("main"), [])))))
// [Knf] build_knf: Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j"))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit)))
// [Knf] build_knf: Get(Var("arr"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j"))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit))
// [Knf] build_knf: Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j")))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("arr"), Var("j"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit)
// [Knf] build_knf: Put(Var("arr"), Var("j"), Var("tmp"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Var("tmp")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("partition", Int), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Var("high")), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Prim(Var("low"), Int(1), Sub, kind=Some(Int))), LetRec({name: ("l", Var({val: Some(Unit)})), args: [("j", Var({val: Some(Int)}))], body: If(LE(Var("j"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit), App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("l"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0))))))))}, LetRec({name: ("quicksort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: If(LE(Var("low"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("pi", Var({val: Some(Int)})), App(Var("partition"), [Var("arr"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Var("low"), Prim(Var("pi"), Int(1), Sub, kind=Some(Int))]), App(Var("quicksort"), [Var("arr"), Prim(Var("pi"), Int(1), Add, kind=Some(Int)), Var("high")]))), Unit)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)])))))))}, App(Var("main"), []))))
// [Knf] build_knf: Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Var("high")), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Prim(Var("low"), Int(1), Sub, kind=Some(Int))), LetRec({name: ("l", Var({val: Some(Unit)})), args: [("j", Var({val: Some(Int)}))], body: If(LE(Var("j"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit), App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("l"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0))))))))
// [Knf] build_knf: Get(Var("arr"), Var("high"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Prim(Var("low"), Int(1), Sub, kind=Some(Int))), LetRec({name: ("l", Var({val: Some(Unit)})), args: [("j", Var({val: Some(Int)}))], body: If(LE(Var("j"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit), App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("l"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0)))))))
// [Knf] build_knf: Array(Int(1), Prim(Var("low"), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Prim(Var("low"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("l", Var({val: Some(Unit)})), args: [("j", Var({val: Some(Int)}))], body: If(LE(Var("j"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit), App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("l"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0))))))
// [Knf] build_knf: If(LE(Var("j"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit), App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Var("high"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit), App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit)
// [Knf] build_knf: Get(Var("arr"), Var("j"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Var("pivot")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]))
// [Knf] build_knf: Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])
// [Knf] build_knf: Var("swap")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("l")
// [Knf] build_knf: Prim(Var("j"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("l"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0)))))
// [Knf] build_knf: App(Var("l"), [Var("low")])
// [Knf] build_knf: Var("l")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0))))
// [Knf] build_knf: Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0)))
// [Knf] build_knf: App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")])
// [Knf] build_knf: Var("swap")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("quicksort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: If(LE(Var("low"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("pi", Var({val: Some(Int)})), App(Var("partition"), [Var("arr"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Var("low"), Prim(Var("pi"), Int(1), Sub, kind=Some(Int))]), App(Var("quicksort"), [Var("arr"), Prim(Var("pi"), Int(1), Add, kind=Some(Int)), Var("high")]))), Unit)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)])))))))}, App(Var("main"), [])))
// [Knf] build_knf: If(LE(Var("low"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("pi", Var({val: Some(Int)})), App(Var("partition"), [Var("arr"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Var("low"), Prim(Var("pi"), Int(1), Sub, kind=Some(Int))]), App(Var("quicksort"), [Var("arr"), Prim(Var("pi"), Int(1), Add, kind=Some(Int)), Var("high")]))), Unit)
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Prim(Var("high"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("pi", Var({val: Some(Int)})), App(Var("partition"), [Var("arr"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Var("low"), Prim(Var("pi"), Int(1), Sub, kind=Some(Int))]), App(Var("quicksort"), [Var("arr"), Prim(Var("pi"), Int(1), Add, kind=Some(Int)), Var("high")])))
// [Knf] build_knf: App(Var("partition"), [Var("arr"), Var("low"), Var("high")])
// [Knf] build_knf: Var("partition")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Var("low"), Prim(Var("pi"), Int(1), Sub, kind=Some(Int))]), App(Var("quicksort"), [Var("arr"), Prim(Var("pi"), Int(1), Add, kind=Some(Int)), Var("high")]))
// [Knf] build_knf: App(Var("quicksort"), [Var("arr"), Var("low"), Prim(Var("pi"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("quicksort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Prim(Var("pi"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("pi")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("quicksort"), [Var("arr"), Prim(Var("pi"), Int(1), Add, kind=Some(Int)), Var("high")])
// [Knf] build_knf: Var("quicksort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("pi"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pi")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)])))))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)])))))))
// [Knf] build_knf: App(Var("read_int"), [])
// [Knf] build_knf: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)]))))))
// [Knf] build_knf: Array(Var("len"), Int(0))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)])))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("arr"), Var("i"), App(Var("read_int"), []))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("read_int"), [])
// [Knf] build_knf: App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("input")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)]))))
// [Knf] build_knf: App(Var("input"), [Int(0)])
// [Knf] build_knf: Var("input")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)])))
// [Knf] build_knf: App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("quicksort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)]))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: App(Var("print_int"), [Get(Var("arr"), Var("i"))])
// [Knf] build_knf: Get(Var("arr"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("output")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("output"), [Int(0)])
// [Knf] build_knf: Var("output")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memseti32
// [Main]   .type memseti32, @function
// [Main] memseti32:
// [Main]   blez a1, .memseti32_b1
// [Main]   slli a1, a1, 2
// [Main]   add a1, a1, a0
// [Main] .memseti32_b0:
// [Main]   sw a2, 0(a0)
// [Main]   addi a0, a0, 4
// [Main]   bne a0, a1, .memseti32_b0
// [Main] .memseti32_b1:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl quicksort59l2_4
// [Main]   .type quicksort59l2_4, @function
// [Main] # leaf false
// [Main] quicksort59l2_4:
// [Main] .quicksort59l2_4_11:
// [Main]   addi sp, sp, -64
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   mv s0, a0
// [Main]   mv s4, a1
// [Main]   mv s3, a2
// [Main] 
// [Main] .quicksort59l2_4_0:
// [Main]   addi a0, s3, -1
// [Main]   blt a0, s4, .quicksort59l2_4_2
// [Main] 
// [Main] .quicksort59l2_4_1:
// [Main]   slliw a0, s3, 2
// [Main]   add a0, s0, a0
// [Main]   lw a0, 0(a0)
// [Main]   addi a1, s4, -1
// [Main]   addi s2, s11, -4
// [Main]   andi s11, s2, -8
// [Main]   sw a1, 0(s2)
// [Main] 
// [Main] .quicksort59l2_4_35:
// [Main]   mv s1, s4
// [Main]   mv s5, a0
// [Main] 
// [Main] .quicksort59l2_4_27:
// [Main]   addi a0, s3, -1
// [Main]   blt a0, s1, .quicksort59l2_4_29
// [Main] 
// [Main] .quicksort59l2_4_28:
// [Main]   slliw a0, s1, 2
// [Main]   add a0, s0, a0
// [Main]   lw a0, 0(a0)
// [Main]   blt s5, a0, .quicksort59l2_4_31
// [Main] 
// [Main] .quicksort59l2_4_30:
// [Main]   lw a0, 0(s2)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s2)
// [Main]   lw a1, 0(s2)
// [Main]   mv a0, s0
// [Main]   mv a2, s1
// [Main]   call swap1l0_0
// [Main] 
// [Main] .quicksort59l2_4_32:
// [Main]   addi a0, s1, 1
// [Main]   mv s1, a0
// [Main]   j .quicksort59l2_4_27
// [Main] 
// [Main] .quicksort59l2_4_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .quicksort59l2_4_9:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   addi sp, sp, 64
// [Main]   ret
// [Main] 
// [Main] .quicksort59l2_4_29:
// [Main]   mv a0, zero
// [Main] 
// [Main] .quicksort59l2_4_33:
// [Main] 
// [Main] .quicksort59l2_4_12:
// [Main]   lw a0, 0(s2)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s2)
// [Main]   lw a1, 0(s2)
// [Main]   mv a0, s0
// [Main]   mv a2, s3
// [Main]   call swap1l0_0
// [Main]   lw s1, 0(s2)
// [Main]   addi s2, s1, -1
// [Main]   addi a0, s2, -1
// [Main]   blt a0, s4, .quicksort59l2_4_4
// [Main] 
// [Main] .quicksort59l2_4_3:
// [Main]   mv a0, s0
// [Main]   mv a1, s4
// [Main]   mv a2, s2
// [Main]   call partition14l1_2
// [Main]   mv s5, a0
// [Main]   addi a2, s5, -1
// [Main]   mv a0, s0
// [Main]   mv a1, s4
// [Main]   call quicksort59l2_4
// [Main]   addi a1, s5, 1
// [Main]   mv a0, s0
// [Main]   mv a2, s2
// [Main]   call quicksort59l2_4
// [Main] 
// [Main] .quicksort59l2_4_5:
// [Main]   addi s1, s1, 1
// [Main]   addi a0, s3, -1
// [Main]   blt a0, s1, .quicksort59l2_4_7
// [Main] 
// [Main] .quicksort59l2_4_6:
// [Main]   mv a0, s0
// [Main]   mv a1, s1
// [Main]   mv a2, s3
// [Main]   call partition14l1_2
// [Main]   mv s2, a0
// [Main]   addi a2, s2, -1
// [Main]   mv a0, s0
// [Main]   mv a1, s1
// [Main]   call quicksort59l2_4
// [Main]   addi a0, s2, 1
// [Main]   mv s4, a0
// [Main]   j .quicksort59l2_4_0
// [Main] 
// [Main] .quicksort59l2_4_4:
// [Main]   mv a0, zero
// [Main]   j .quicksort59l2_4_5
// [Main] 
// [Main] .quicksort59l2_4_7:
// [Main]   mv a0, zero
// [Main] 
// [Main] .quicksort59l2_4_8:
// [Main]   j .quicksort59l2_4_9
// [Main] 
// [Main] .quicksort59l2_4_31:
// [Main]   mv a0, zero
// [Main]   j .quicksort59l2_4_32
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_16
// [Main]   .type T$start_16, @function
// [Main] # leaf false
// [Main] T$start_16:
// [Main] .T$start_16_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main75l3_7
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl partition14l1_2
// [Main]   .type partition14l1_2, @function
// [Main] # leaf true
// [Main] partition14l1_2:
// [Main] .partition14l1_2_0:
// [Main]   mv a3, a0
// [Main]   mv a4, a1
// [Main]   mv a1, a2
// [Main]   slliw a0, a1, 2
// [Main]   add a0, a3, a0
// [Main]   lw a0, 0(a0)
// [Main]   addi a5, a4, -1
// [Main]   addi a2, s11, -4
// [Main]   andi s11, a2, -8
// [Main]   sw a5, 0(a2)
// [Main] 
// [Main] .partition14l1_2_21:
// [Main]   mv a5, a4
// [Main]   mv a4, a0
// [Main] 
// [Main] .partition14l1_2_13:
// [Main]   addi a0, a1, -1
// [Main]   blt a0, a5, .partition14l1_2_15
// [Main] 
// [Main] .partition14l1_2_14:
// [Main]   slliw a0, a5, 2
// [Main]   add a0, a3, a0
// [Main]   lw a0, 0(a0)
// [Main]   blt a4, a0, .partition14l1_2_17
// [Main] 
// [Main] .partition14l1_2_16:
// [Main]   lw a0, 0(a2)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(a2)
// [Main]   lw a0, 0(a2)
// [Main]   slliw a6, a0, 2
// [Main]   add a6, a3, a6
// [Main]   lw a6, 0(a6)
// [Main]   slliw a7, a5, 2
// [Main]   add a7, a3, a7
// [Main]   lw a7, 0(a7)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, a3, a0
// [Main]   sw a7, 0(a0)
// [Main]   slliw a0, a5, 2
// [Main]   add a0, a3, a0
// [Main]   sw a6, 0(a0)
// [Main]   mv a0, zero
// [Main] 
// [Main] .partition14l1_2_18:
// [Main]   addi a0, a5, 1
// [Main]   mv a5, a0
// [Main]   j .partition14l1_2_13
// [Main] 
// [Main] .partition14l1_2_15:
// [Main]   mv a0, zero
// [Main] 
// [Main] .partition14l1_2_19:
// [Main] 
// [Main] .partition14l1_2_1:
// [Main]   lw a0, 0(a2)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(a2)
// [Main]   lw a0, 0(a2)
// [Main]   slliw a4, a0, 2
// [Main]   add a4, a3, a4
// [Main]   lw a4, 0(a4)
// [Main]   slliw a5, a1, 2
// [Main]   add a5, a3, a5
// [Main]   lw a5, 0(a5)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, a3, a0
// [Main]   sw a5, 0(a0)
// [Main]   slliw a0, a1, 2
// [Main]   add a0, a3, a0
// [Main]   sw a4, 0(a0)
// [Main]   lw a0, 0(a2)
// [Main]   ret
// [Main] 
// [Main] .partition14l1_2_17:
// [Main]   mv a0, zero
// [Main]   j .partition14l1_2_18
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl input79l4_5
// [Main]   .type input79l4_5, @function
// [Main] # leaf false
// [Main] input79l4_5:
// [Main] .input79l4_5_8:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s1, a0
// [Main]   mv s0, a1
// [Main]   mv s2, a2
// [Main] 
// [Main] .input79l4_5_0:
// [Main]   addi a0, s2, -1
// [Main]   blt a0, s1, .input79l4_5_2
// [Main] 
// [Main] .input79l4_5_1:
// [Main]   call minimbt_read_int
// [Main]   slliw a1, s1, 2
// [Main]   add a1, s0, a1
// [Main]   sw a0, 0(a1)
// [Main]   addi s1, s1, 1
// [Main]   addi a0, s2, -1
// [Main]   blt a0, s1, .input79l4_5_4
// [Main] 
// [Main] .input79l4_5_3:
// [Main]   call minimbt_read_int
// [Main]   slliw a1, s1, 2
// [Main]   add a1, s0, a1
// [Main]   sw a0, 0(a1)
// [Main]   addi a0, s1, 1
// [Main]   mv s1, a0
// [Main]   j .input79l4_5_0
// [Main] 
// [Main] .input79l4_5_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .input79l4_5_6:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .input79l4_5_4:
// [Main]   mv a0, zero
// [Main] 
// [Main] .input79l4_5_5:
// [Main]   j .input79l4_5_6
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl output97l5_6
// [Main]   .type output97l5_6, @function
// [Main] # leaf false
// [Main] output97l5_6:
// [Main] .output97l5_6_8:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s1, a0
// [Main]   mv s0, a1
// [Main]   mv s2, a2
// [Main] 
// [Main] .output97l5_6_0:
// [Main]   addi a0, s2, -1
// [Main]   blt a0, s1, .output97l5_6_2
// [Main] 
// [Main] .output97l5_6_1:
// [Main]   slliw a0, s1, 2
// [Main]   add a0, s0, a0
// [Main]   lw a0, 0(a0)
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   addi s1, s1, 1
// [Main]   addi a0, s2, -1
// [Main]   blt a0, s1, .output97l5_6_4
// [Main] 
// [Main] .output97l5_6_3:
// [Main]   slliw a0, s1, 2
// [Main]   add a0, s0, a0
// [Main]   lw a0, 0(a0)
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   addi a0, s1, 1
// [Main]   mv s1, a0
// [Main]   j .output97l5_6_0
// [Main] 
// [Main] .output97l5_6_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .output97l5_6_6:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .output97l5_6_4:
// [Main]   mv a0, zero
// [Main] 
// [Main] .output97l5_6_5:
// [Main]   j .output97l5_6_6
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl swap1l0_0
// [Main]   .type swap1l0_0, @function
// [Main] # leaf true
// [Main] swap1l0_0:
// [Main] .swap1l0_0_0:
// [Main]   slliw a3, a1, 2
// [Main]   add a3, a0, a3
// [Main]   lw a3, 0(a3)
// [Main]   slliw a4, a2, 2
// [Main]   add a4, a0, a4
// [Main]   lw a4, 0(a4)
// [Main]   slliw a1, a1, 2
// [Main]   add a1, a0, a1
// [Main]   sw a4, 0(a1)
// [Main]   slliw a1, a2, 2
// [Main]   add a0, a0, a1
// [Main]   sw a3, 0(a0)
// [Main]   mv a0, zero
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_16
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main75l3_7
// [Main]   .type main75l3_7, @function
// [Main] # leaf false
// [Main] main75l3_7:
// [Main] .main75l3_7_0:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   call minimbt_read_int
// [Main]   mv s2, a0
// [Main]   slliw a0, s2, 2
// [Main]   sub s0, s11, a0
// [Main]   andi s11, s0, -8
// [Main]   mv a1, s2
// [Main]   mv a0, s0
// [Main]   mv a2, zero
// [Main]   call memseti32
// [Main]   addi a0, s2, -1
// [Main]   blt a0, zero, .main75l3_7_2
// [Main] 
// [Main] .main75l3_7_1:
// [Main]   call minimbt_read_int
// [Main]   sw a0, 0(s0)
// [Main]   li a0, 1
// [Main]   addi a0, a0, 0
// [Main]   mv a1, s0
// [Main]   mv a2, s2
// [Main]   call input79l4_5
// [Main] 
// [Main] .main75l3_7_3:
// [Main]   addi s1, s2, -1
// [Main]   addi a0, s1, -1
// [Main]   blt a0, zero, .main75l3_7_5
// [Main] 
// [Main] .main75l3_7_4:
// [Main]   mv a0, s0
// [Main]   mv a1, zero
// [Main]   mv a2, s1
// [Main]   call partition14l1_2
// [Main]   mv s3, a0
// [Main]   addi a2, s3, -1
// [Main]   mv a0, s0
// [Main]   mv a1, zero
// [Main]   call quicksort59l2_4
// [Main]   addi a1, s3, 1
// [Main]   mv a0, s0
// [Main]   mv a2, s1
// [Main]   call quicksort59l2_4
// [Main] 
// [Main] .main75l3_7_6:
// [Main]   addi a0, s2, -1
// [Main]   blt a0, zero, .main75l3_7_8
// [Main] 
// [Main] .main75l3_7_7:
// [Main]   lw a0, 0(s0)
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   li a0, 1
// [Main]   addi a0, a0, 0
// [Main]   mv a1, s0
// [Main]   mv a2, s2
// [Main]   call output97l5_6
// [Main] 
// [Main] .main75l3_7_9:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main] .main75l3_7_2:
// [Main]   mv a0, zero
// [Main]   j .main75l3_7_3
// [Main] 
// [Main] .main75l3_7_5:
// [Main]   mv a0, zero
// [Main]   j .main75l3_7_6
// [Main] 
// [Main] .main75l3_7_8:
// [Main]   mv a0, zero
// [Main]   j .main75l3_7_9
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function output97l5_6
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), offset=Insn(iref=%5), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%5), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%11), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%5), Insn(iref=%6)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Branch(cond=Insn(iref=%7), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Jump(target=b6, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b7, args=[FnParam(fref=f6, fpref=$f.0), FnParam(fref=f6, fpref=$f.1), FnParam(fref=f6, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function output97l5_6 to wasm
// [Wasm] Lowering function quicksort59l2_4
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b27, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering control Jump(target=b27, args=[Insn(iref=%36), BlockParam(bref=b27, bpref=$b.1), BlockParam(bref=b27, bpref=$b.2), BlockParam(bref=b27, bpref=$b.3), BlockParam(bref=b27, bpref=$b.4)])
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.1) -> $b27.$b.1
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.1) -> $b27.$b.1
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.2) -> $b27.$b.2
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.2) -> $b27.$b.2
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.3) -> $b27.$b.3
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.3) -> $b27.$b.3
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.4) -> $b27.$b.4
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.4) -> $b27.$b.4
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b27, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.1) -> $b27.$b.1
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%31), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b27, bpref=$b.1), index=0, width=@32), val=Insn(iref=%32))
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.1) -> $b27.$b.1
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b27, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.1) -> $b27.$b.1
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[BlockParam(bref=b27, bpref=$b.2), Insn(iref=%34), BlockParam(bref=b27, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.2) -> $b27.$b.2
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Lowering control Jump(target=b32, args=[Insn(iref=%35)])
// [Wasm] Lowering control Jump(target=b32, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b27, bpref=$b.2), offset=BlockParam(bref=b27, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.2) -> $b27.$b.2
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%29), BlockParam(bref=b27, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.3) -> $b27.$b.3
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering control Branch(cond=Insn(iref=%30), t=b30, t_args=[], f=b31, f_args=[])
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering insn Call(ty=Int32, f=f2, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%20), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%23), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%20), Insn(iref=%24)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%23), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%26), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b9, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b9, args=[BlockParam(bref=b8, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b8, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%11), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%20), Insn(iref=%21)])
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering control Branch(cond=Insn(iref=%22), t=b6, t_args=[], f=b7, f_args=[])
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Call(ty=Int32, f=f2, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%12)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%15), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%16)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%15), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%18), Insn(iref=%12)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering control Jump(target=b5, args=[Insn(iref=%19)])
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f4, mref=m0), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f4, mref=m0), index=0, width=@32), val=Insn(iref=%7))
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f4, mref=m0), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%9), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f4, mref=m0), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%11), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%12), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%13)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering control Branch(cond=Insn(iref=%14), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering control Jump(target=b12, args=[BlockParam(bref=b33, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b33, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b27, bpref=$b.4), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.4) -> $b27.$b.4
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b27, bpref=$b.0), Insn(iref=%27)])
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering control Branch(cond=Insn(iref=%28), t=b28, t_args=[], f=b29, f_args=[])
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering control Jump(target=b34, args=[BlockParam(bref=b0, bpref=$b.1), Mem(fref=f4, mref=m0), BlockParam(bref=b0, bpref=$b.0), Insn(iref=%2), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.1) -> $b27.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.2) -> $b27.$b.2
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.3) -> $b27.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.4) -> $b27.$b.4
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), offset=BlockParam(bref=b0, bpref=$b.2), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Insn(iref=%3))])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Lowering control Jump(target=b35, args=[])
// [Wasm] Lowering control Jump(target=b9, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b10, args=[FnParam(fref=f4, fpref=$f.0), FnParam(fref=f4, fpref=$f.1), FnParam(fref=f4, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local Insn(iref=%27) -> $%27
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local BlockParam(bref=b27, bpref=$b.3) -> $b27.$b.3
// [Wasm] Local BlockParam(bref=b27, bpref=$b.1) -> $b27.$b.1
// [Wasm] Local Insn(iref=%32) -> $%32
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Local Insn(iref=%31) -> $%31
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local Insn(iref=%24) -> $%24
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local Insn(iref=%29) -> $%29
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local BlockParam(bref=b27, bpref=$b.4) -> $b27.$b.4
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local BlockParam(bref=b27, bpref=$b.2) -> $b27.$b.2
// [Wasm] Local Insn(iref=%30) -> $%30
// [Wasm] Local Insn(iref=%34) -> $%34
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local Insn(iref=%36) -> $%36
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function quicksort59l2_4 to wasm
// [Wasm] Lowering function T$start_16
// [Wasm] Lowering insn Call(ty=Unit, f=f7, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start_16 to wasm
// [Wasm] Lowering function swap1l0_0
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f0, fpref=$f.0), offset=FnParam(fref=f0, fpref=$f.1), width=@32))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f0, fpref=$f.0), offset=FnParam(fref=f0, fpref=$f.2), width=@32))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f0, fpref=$f.0), offset=FnParam(fref=f0, fpref=$f.1), width=@32), val=Insn(iref=%1))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f0, fpref=$f.0), offset=FnParam(fref=f0, fpref=$f.2), width=@32), val=Insn(iref=%0))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function swap1l0_0 to wasm
// [Wasm] Lowering function input79l4_5
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_int", args=[])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), offset=Insn(iref=%4), width=@32), val=Insn(iref=%7))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%4), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%9), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_int", args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), offset=BlockParam(bref=b0, bpref=$b.0), width=@32), val=Insn(iref=%2))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%4), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Branch(cond=Insn(iref=%6), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Jump(target=b6, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b7, args=[FnParam(fref=f5, fpref=$f.0), FnParam(fref=f5, fpref=$f.1), FnParam(fref=f5, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function input79l4_5 to wasm
// [Wasm] Lowering function partition14l1_2
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b13, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b13, bpref=$b.0) -> $b13.$b.0
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering control Jump(target=b13, args=[Insn(iref=%25), BlockParam(bref=b13, bpref=$b.1), BlockParam(bref=b13, bpref=$b.2), BlockParam(bref=b13, bpref=$b.3), BlockParam(bref=b13, bpref=$b.4)])
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Get Local name BlockParam(bref=b13, bpref=$b.0) -> $b13.$b.0
// [Wasm] Get Local name BlockParam(bref=b13, bpref=$b.1) -> $b13.$b.1
// [Wasm] Get Local name BlockParam(bref=b13, bpref=$b.1) -> $b13.$b.1
// [Wasm] Get Local name BlockParam(bref=b13, bpref=$b.2) -> $b13.$b.2
// [Wasm] Get Local name BlockParam(bref=b13, bpref=$b.2) -> $b13.$b.2
// [Wasm] Get Local name BlockParam(bref=b13, bpref=$b.3) -> $b13.$b.3
// [Wasm] Get Local name BlockParam(bref=b13, bpref=$b.3) -> $b13.$b.3
// [Wasm] Get Local name BlockParam(bref=b13, bpref=$b.4) -> $b13.$b.4
// [Wasm] Get Local name BlockParam(bref=b13, bpref=$b.4) -> $b13.$b.4
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b13, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b13, bpref=$b.1) -> $b13.$b.1
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%17), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b13, bpref=$b.1), index=0, width=@32), val=Insn(iref=%18))
// [Wasm] Get Local name BlockParam(bref=b13, bpref=$b.1) -> $b13.$b.1
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b13, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b13, bpref=$b.1) -> $b13.$b.1
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b13, bpref=$b.2), offset=Insn(iref=%20), width=@32))
// [Wasm] Get Local name BlockParam(bref=b13, bpref=$b.2) -> $b13.$b.2
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b13, bpref=$b.2), offset=BlockParam(bref=b13, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b13, bpref=$b.2) -> $b13.$b.2
// [Wasm] Get Local name BlockParam(bref=b13, bpref=$b.0) -> $b13.$b.0
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b13, bpref=$b.2), offset=Insn(iref=%20), width=@32), val=Insn(iref=%22))
// [Wasm] Get Local name BlockParam(bref=b13, bpref=$b.2) -> $b13.$b.2
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b13, bpref=$b.2), offset=BlockParam(bref=b13, bpref=$b.0), width=@32), val=Insn(iref=%21))
// [Wasm] Get Local name BlockParam(bref=b13, bpref=$b.2) -> $b13.$b.2
// [Wasm] Get Local name BlockParam(bref=b13, bpref=$b.0) -> $b13.$b.0
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering control Jump(target=b18, args=[Unit])
// [Wasm] Lowering control Jump(target=b18, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b13, bpref=$b.2), offset=BlockParam(bref=b13, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b13, bpref=$b.2) -> $b13.$b.2
// [Wasm] Get Local name BlockParam(bref=b13, bpref=$b.0) -> $b13.$b.0
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%15), BlockParam(bref=b13, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name BlockParam(bref=b13, bpref=$b.3) -> $b13.$b.3
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering control Branch(cond=Insn(iref=%16), t=b16, t_args=[], f=b17, f_args=[])
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f2, mref=m0), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%4), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f2, mref=m0), index=0, width=@32), val=Insn(iref=%5))
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f2, mref=m0), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f2, fpref=$f.0), offset=Insn(iref=%7), width=@32))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f2, fpref=$f.0), offset=FnParam(fref=f2, fpref=$f.2), width=@32))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f2, fpref=$f.0), offset=Insn(iref=%7), width=@32), val=Insn(iref=%9))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f2, fpref=$f.0), offset=FnParam(fref=f2, fpref=$f.2), width=@32), val=Insn(iref=%8))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f2, mref=m0), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering control Return(args=[Insn(iref=%12)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering control Jump(target=b1, args=[BlockParam(bref=b19, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b19, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b13, bpref=$b.4), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b13, bpref=$b.4) -> $b13.$b.4
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b13, bpref=$b.0), Insn(iref=%13)])
// [Wasm] Get Local name BlockParam(bref=b13, bpref=$b.0) -> $b13.$b.0
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering control Branch(cond=Insn(iref=%14), t=b14, t_args=[], f=b15, f_args=[])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering control Jump(target=b20, args=[FnParam(fref=f2, fpref=$f.1), Mem(fref=f2, mref=m0), FnParam(fref=f2, fpref=$f.0), Insn(iref=%0), FnParam(fref=f2, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b13, bpref=$b.0) -> $b13.$b.0
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name BlockParam(bref=b13, bpref=$b.1) -> $b13.$b.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b13, bpref=$b.2) -> $b13.$b.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name BlockParam(bref=b13, bpref=$b.3) -> $b13.$b.3
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b13, bpref=$b.4) -> $b13.$b.4
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f2, fpref=$f.0), offset=FnParam(fref=f2, fpref=$f.2), width=@32))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f2, fpref=$f.1), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Insn(iref=%1))])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Lowering control Jump(target=b21, args=[])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Local BlockParam(bref=b13, bpref=$b.3) -> $b13.$b.3
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local BlockParam(bref=b13, bpref=$b.4) -> $b13.$b.4
// [Wasm] Local Insn(iref=%25) -> $%25
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local BlockParam(bref=b13, bpref=$b.0) -> $b13.$b.0
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local BlockParam(bref=b13, bpref=$b.2) -> $b13.$b.2
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local BlockParam(bref=b13, bpref=$b.1) -> $b13.$b.1
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function partition14l1_2 to wasm
// [Wasm] Lowering function main75l3_7
// [Wasm] Lowering control Return(args=[BlockParam(bref=b9, bpref=$b.0)])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f7, mref=m0), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%18)])
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Int32(val=0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Call(ty=Unit, f=f6, args=[Insn(iref=%21), Mem(fref=f7, mref=m0), Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b9, args=[Insn(iref=%22)])
// [Wasm] Lowering control Jump(target=b9, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), Insn(iref=%16)])
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering control Branch(cond=Insn(iref=%17), t=b7, t_args=[], f=b8, f_args=[])
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Call(ty=Int32, f=f2, args=[Mem(fref=f7, mref=m0), Int32(val=0), Insn(iref=%8)])
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%11), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[Mem(fref=f7, mref=m0), Int32(val=0), Insn(iref=%12)])
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%11), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[Mem(fref=f7, mref=m0), Insn(iref=%14), Insn(iref=%8)])
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering control Jump(target=b6, args=[Insn(iref=%15)])
// [Wasm] Lowering control Jump(target=b6, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%8), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Branch(cond=Insn(iref=%10), t=b4, t_args=[], f=b5, f_args=[])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_int", args=[])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f7, mref=m0), index=0, width=@32), val=Insn(iref=%4))
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Int32(val=0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Call(ty=Unit, f=f5, args=[Insn(iref=%6), Mem(fref=f7, mref=m0), Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%7)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_int", args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function main75l3_7 to wasm
// [KnfOpt] freq: {swap1: Many(2), partition14: Once, l26: Many(2), quicksort59: Many(3), main75: Once, input79: Many(2), output97: Many(2)}
// [KnfOpt] Inline threshold 2 9
// [KnfOpt] Knf inline Some(swap1)
// [KnfOpt] Inline threshold 2 33
// [KnfOpt] Inline threshold 2 33
// [KnfOpt] Inline threshold 2 9
// [KnfOpt] Knf inline Some(swap1)
// [KnfOpt] Knf inline Some(partition14)
// [KnfOpt] Inline threshold 3 19
// [KnfOpt] Knf inline Some(quicksort59)
// [KnfOpt] Inline threshold 3 19
// [KnfOpt] Knf inline Some(quicksort59)
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Knf inline Some(input79)
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Knf inline Some(input79)
// [KnfOpt] Inline threshold 3 19
// [KnfOpt] Knf inline Some(quicksort59)
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Knf inline Some(output97)
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Knf inline Some(output97)
// [KnfOpt] Numbers of let rec: 8 8 0
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %12: Call(ty=Unit, f=f6, args=[Insn(iref=%11), FnParam(fref=f6, fpref=$f.1), FnParam(fref=f6, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %27: Call(ty=Unit, f=f4, args=[FnParam(fref=f4, fpref=$f.0), Insn(iref=%26), FnParam(fref=f4, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %13: Call(ty=Unit, f=f1, args=[Insn(iref=%12), FnParam(fref=f1, fpref=$f.1), FnParam(fref=f1, fpref=$f.2), FnParam(fref=f1, fpref=$f.3), FnParam(fref=f1, fpref=$f.4)])
// [CoreOpt] eliminated tail rec call %10: Call(ty=Unit, f=f5, args=[Insn(iref=%9), FnParam(fref=f5, fpref=$f.1), FnParam(fref=f5, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %10: Call(ty=Unit, f=f3, args=[Insn(iref=%9), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4)])
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f4: Multiple, f16: Once, f0: Multiple, f1: Once, f5: Once, f2: Multiple, f3: Once, f7: Once})
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b12, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b12, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b12, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b12, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b12, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b12, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b12, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b12, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b12, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b12, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b12, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b1, bpref=$b.0)
// [CoreOpt] quicksort59l2_4 is inlining Call(ty=Unit, f=f3, args=[BlockParam(bref=b0, bpref=$b.1), Mem(fref=f4, mref=m0), BlockParam(bref=b0, bpref=$b.0), Insn(iref=%2), BlockParam(bref=b0, bpref=$b.2)])
// [CoreOpt] shifted callee .fn l26.123l3_3 #f3 : fn(int32, array[int32], array[int32], int32, int32) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b35 {
// [CoreOpt]   .bb #b27 (int32, array[int32], array[int32], int32, int32) {
// [CoreOpt]     let %27: int32 = sub($b27.4, 1)
// [CoreOpt]     let %28: bool = le($b27.0, %27)
// [CoreOpt]     br %28 b28() b29()
// [CoreOpt]   }
// [CoreOpt]   .bb #b28 () {
// [CoreOpt]     let %29: int32 = load int32 offset($b27.2, $b27.0 * @32)
// [CoreOpt]     let %30: bool = le(%29, $b27.3)
// [CoreOpt]     br %30 b30() b31()
// [CoreOpt]   }
// [CoreOpt]   .bb #b29 () {
// [CoreOpt]     jump b33(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b30 () {
// [CoreOpt]     let %31: int32 = load int32 field($b27.1, 0 * @32)
// [CoreOpt]     let %32: int32 = add(%31, 1)
// [CoreOpt]     let _ = store int32 field($b27.1, 0 * @32) <- %32
// [CoreOpt]     let %34: int32 = load int32 field($b27.1, 0 * @32)
// [CoreOpt]     let %35: unit = call f0($b27.2, %34, $b27.0)
// [CoreOpt]     jump b32(%35)
// [CoreOpt]   }
// [CoreOpt]   .bb #b31 () {
// [CoreOpt]     jump b32(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b32 (unit) {
// [CoreOpt]     let %36: int32 = add($b27.0, 1)
// [CoreOpt]     jump b27(%36, $b27.1, $b27.2, $b27.3, $b27.4)
// [CoreOpt]   }
// [CoreOpt]   .bb #b33 (unit) {
// [CoreOpt]     return $b33.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b34 header #b27 {
// [CoreOpt]     .block #b33
// [CoreOpt]     .block #b31
// [CoreOpt]     .block #b28
// [CoreOpt]     .block #b32
// [CoreOpt]     .block #b29
// [CoreOpt]     .block #b30
// [CoreOpt]   }
// [CoreOpt]   .bb #b35 () {
// [CoreOpt]     jump b34($f0, $f1, $f2, $f3, $f4)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] partition14l1_2 is inlining Call(ty=Unit, f=f1, args=[FnParam(fref=f2, fpref=$f.1), Mem(fref=f2, mref=m0), FnParam(fref=f2, fpref=$f.0), Insn(iref=%0), FnParam(fref=f2, fpref=$f.2)])
// [CoreOpt] shifted callee .fn l26l2_1 #f1 : fn(int32, array[int32], array[int32], int32, int32) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b21 {
// [CoreOpt]   .bb #b13 (int32, array[int32], array[int32], int32, int32) {
// [CoreOpt]     let %13: int32 = sub($b13.4, 1)
// [CoreOpt]     let %14: bool = le($b13.0, %13)
// [CoreOpt]     br %14 b14() b15()
// [CoreOpt]   }
// [CoreOpt]   .bb #b14 () {
// [CoreOpt]     let %15: int32 = load int32 offset($b13.2, $b13.0 * @32)
// [CoreOpt]     let %16: bool = le(%15, $b13.3)
// [CoreOpt]     br %16 b16() b17()
// [CoreOpt]   }
// [CoreOpt]   .bb #b15 () {
// [CoreOpt]     jump b19(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b16 () {
// [CoreOpt]     let %17: int32 = load int32 field($b13.1, 0 * @32)
// [CoreOpt]     let %18: int32 = add(%17, 1)
// [CoreOpt]     let _ = store int32 field($b13.1, 0 * @32) <- %18
// [CoreOpt]     let %20: int32 = load int32 field($b13.1, 0 * @32)
// [CoreOpt]     let %21: int32 = load int32 offset($b13.2, %20 * @32)
// [CoreOpt]     let %22: int32 = load int32 offset($b13.2, $b13.0 * @32)
// [CoreOpt]     let _ = store int32 offset($b13.2, %20 * @32) <- %22
// [CoreOpt]     let _ = store int32 offset($b13.2, $b13.0 * @32) <- %21
// [CoreOpt]     jump b18(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b17 () {
// [CoreOpt]     jump b18(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b18 (unit) {
// [CoreOpt]     let %25: int32 = add($b13.0, 1)
// [CoreOpt]     jump b13(%25, $b13.1, $b13.2, $b13.3, $b13.4)
// [CoreOpt]   }
// [CoreOpt]   .bb #b19 (unit) {
// [CoreOpt]     return $b19.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b20 header #b13 {
// [CoreOpt]     .block #b19
// [CoreOpt]     .block #b17
// [CoreOpt]     .block #b14
// [CoreOpt]     .block #b18
// [CoreOpt]     .block #b15
// [CoreOpt]     .block #b16
// [CoreOpt]   }
// [CoreOpt]   .bb #b21 () {
// [CoreOpt]     jump b20($f0, $f1, $f2, $f3, $f4)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f1
// [CoreOpt] Remove dead function: f3
