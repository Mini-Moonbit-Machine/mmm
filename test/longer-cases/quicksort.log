// [Asm] pre_assigned_registers: Insn(iref=%2) -> v5, Insn(iref=%4) -> v7, Insn(iref=%1) -> v4, Insn(iref=%3) -> v6, Self(fref=f6) -> v0, Insn(iref=%5) -> v8, Mem(fref=f6, mref=m0) -> v2, Insn(iref=%0) -> v3
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [s11, zero, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [s11, zero, v13, v3]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v14, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, a1, zero, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v2, a1, zero, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v2, a2, a1, zero, a0, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, zero, a0, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, a1, zero, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v2, a2, a1, zero, a0, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, zero, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v6, zero, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, a1, v6, zero, a0, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v2, a2, a1, zero, a0, v3]
// [Asm] move_origin: [v6]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, zero, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, a0, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main75l3_6"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r20 [label="v6 ← a2", color=green];
// [Asm]   r3 [label="a0", color=blue];
// [Asm]   r9 [label="a2", color=blue];
// [Asm]   r6 [label="t3", color=blue];
// [Asm]   r13 [label="a6", color=blue];
// [Asm]   r4 [label="t1", color=blue];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r11 [label="a4", color=blue];
// [Asm]   r7 [label="t4", color=blue];
// [Asm]   r10 [label="a3", color=blue];
// [Asm]   r22 [label="v8 ← a0", color=green];
// [Asm]   r14 [label="a7", color=blue];
// [Asm]   r8 [label="a1", color=blue];
// [Asm]   r5 [label="t2", color=blue];
// [Asm]   r15 [label="v3 ← s0", color=green];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="v13 ← a0", color=green];
// [Asm]   r18 [label="v2 ← s1", color=green];
// [Asm]   r19 [label="v5 ← a0", color=green];
// [Asm]   r21 [label="v7 ← a0", color=green];
// [Asm]   r17 [label="v14 ← a0", color=green];
// [Asm]   r12 [label="a5", color=blue];
// [Asm]   r0 -- r15;
// [Asm]   r13 -- r15;
// [Asm]   r1 -- r12;
// [Asm]   r3 -- r15;
// [Asm]   r14 -- r18;
// [Asm]   r6 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r9 -- r15;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r12 -- r15;
// [Asm]   r1 -- r7;
// [Asm]   r8 -- r9;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r10;
// [Asm]   r5 -- r18;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r1 -- r15;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r13;
// [Asm]   r18 -- r21;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r11 -- r18;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r18;
// [Asm]   r8 -- r20;
// [Asm]   r3 -- r5;
// [Asm]   r9 -- r18;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r15 -- r18;
// [Asm]   r2 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r3 -- r4;
// [Asm]   r18 -- r19;
// [Asm]   r15 -- r17;
// [Asm]   r2 -- r14;
// [Asm]   r10 -- r18;
// [Asm]   r0 -- r2;
// [Asm]   r15 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r8 -- r15;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r7 -- r15;
// [Asm]   r10 -- r15;
// [Asm]   r2 -- r12;
// [Asm]   r8 -- r18;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r20;
// [Asm]   r3 -- r10;
// [Asm]   r2 -- r21;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r13 -- r18;
// [Asm]   r1 -- r11;
// [Asm]   r11 -- r15;
// [Asm]   r18 -- r20;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r15 -- r16;
// [Asm]   r15 -- r20;
// [Asm]   r15 -- r19;
// [Asm]   r2 -- r3;
// [Asm]   r14 -- r15;
// [Asm]   r12 -- r18;
// [Asm]   r5 -- r15;
// [Asm]   r0 -- r18;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:t0-> 1:s11-> 2:zero-> 3:a0-> 15:v3-> 4:t1-> 18:v2-> 5:t2-> 6:t3-> 7:t4-> 8:a1-> 9:a2-> 10:a3-> 11:a4-> 12:a5-> 13:a6-> 14:a7-> 20:v6-> 16:v13-> 19:v5-> 21:v7-> 17:v14-> 22:v8"
// [Asm]   comment = "v6<-a2;v8<-a0;v3<-s0;v13<-a0;v2<-s1;v5<-a0;v7<-a0;v14<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main75l3_6"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call minimbt_read_int ->   call minimbt_read_int
// [Asm] subst   mv v3, a0 ->   mv s0, a0
// [Asm] subst   slliw v13, v3, 2 ->   slliw a0, s0, 2
// [Asm] subst   sub v14, s11, v13 ->   sub a0, s11, a0
// [Asm] subst   andi v2, v14, -8 ->   andi s1, a0, -8
// [Asm] subst   mv s11, v2 ->   mv s11, s1
// [Asm] subst   mv a1, v3 ->   mv a1, s0
// [Asm] subst   mv a0, v2 ->   mv a0, s1
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   call memseti32 ->   call memseti32
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v2 ->   mv a1, s1
// [Asm] subst   mv a2, v3 ->   mv a2, s0
// [Asm] subst   call input79l4_4 ->   call input79l4_4
// [Asm] subst   addi v6, v3, -1 ->   addi a2, s0, -1
// [Asm] subst   mv a0, v2 ->   mv a0, s1
// [Asm] subst   mv a1, zero ->   mv a1, zero
// [Asm] subst   call quicksort59l2_3 ->   call quicksort59l2_3
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v2 ->   mv a1, s1
// [Asm] subst   mv a2, v3 ->   mv a2, s0
// [Asm] subst   call output97l5_5 ->   call output97l5_5
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v12, FnParam(fref=f4, fpref=$f.0) -> v2, BlockParam(bref=b3, bpref=$b.0) -> v10, FnParam(fref=f4, fpref=$f.2) -> v4, Insn(iref=%2) -> v11, Insn(iref=%1) -> v9, BlockParam(bref=b0, bpref=$b.0) -> v5, Self(fref=f4) -> v0, BlockParam(bref=b0, bpref=$b.1) -> v6, BlockParam(bref=b0, bpref=$b.2) -> v7, FnParam(fref=f4, fpref=$f.1) -> v3, Insn(iref=%0) -> v8, Insn(iref=%4) -> v13
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [zero]
// [Asm] defined: v10 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move_origin: [v3]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v4]
// [Asm] defined: v7 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, v5, zero, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v6, v5, zero, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v11, v6, v5, v15, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v6, v5, v16, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v6, zero, v13, v7]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v13]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v6]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of input79l4_4"];
// [Asm]   r0 [label="v10 ← a0", color=green];
// [Asm]   r20 [label="a6", color=blue];
// [Asm]   r23 [label="v15 ← a1", color=green];
// [Asm]   r3 [label="v6 ← s1", color=green];
// [Asm]   r9 [label="v3 ← a1", color=green];
// [Asm]   r6 [label="v2 ← a0", color=green];
// [Asm]   r13 [label="t1", color=blue];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r1 [label="v8 ← a0", color=green];
// [Asm]   r11 [label="a0", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="v4 ← a2", color=green];
// [Asm]   r22 [label="v11 ← a0", color=green];
// [Asm]   r14 [label="t2", color=blue];
// [Asm]   r8 [label="a1", color=blue];
// [Asm]   r5 [label="v7 ← s2", color=green];
// [Asm]   r24 [label="v16 ← a1", color=green];
// [Asm]   r15 [label="t3", color=blue];
// [Asm]   r25 [label="v13 ← a0", color=green];
// [Asm]   r2 [label="v5 ← s0", color=green];
// [Asm]   r16 [label="t4", color=blue];
// [Asm]   r18 [label="a4", color=blue];
// [Asm]   r19 [label="a5", color=blue];
// [Asm]   r17 [label="a3", color=blue];
// [Asm]   r21 [label="a7", color=blue];
// [Asm]   r12 [label="t0", color=blue];
// [Asm]   r5 -- r15;
// [Asm]   r5 -- r12;
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r5 -- r21;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r15;
// [Asm]   r11 -- r20;
// [Asm]   r2 -- r15;
// [Asm]   r11 -- r17;
// [Asm]   r4 -- r23;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r11 -- r14;
// [Asm]   r1 -- r4;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r23;
// [Asm]   r5 -- r22;
// [Asm]   r11 -- r16;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r5 -- r18;
// [Asm]   r2 -- r10;
// [Asm]   r11 -- r12;
// [Asm]   r5 -- r19;
// [Asm]   r3 -- r11;
// [Asm]   r4 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r3 -- r24;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r2 -- r7;
// [Asm]   r11 -- r18;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r18;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r16;
// [Asm]   r5 -- r11;
// [Asm]   r3 -- r5;
// [Asm]   r22 -- r24;
// [Asm]   r11 -- r19;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r8;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r11 -- r13;
// [Asm]   r2 -- r14;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r24;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r10;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r22 -- r23;
// [Asm]   r3 -- r20;
// [Asm]   r7 -- r11;
// [Asm]   r3 -- r10;
// [Asm]   r2 -- r21;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r25;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r11 -- r15;
// [Asm]   r5 -- r25;
// [Asm]   r8 -- r11;
// [Asm]   r4 -- r17;
// [Asm]   r3 -- r7;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r24;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r11 -- r21;
// [Asm]   r4 -- r19;
// [Asm]   comment = "0:v10-> 1:v8-> 2:v5-> 3:v6-> 4:zero-> 5:v7-> 7:a2-> 11:a0-> 8:a1-> 12:t0-> 13:t1-> 14:t2-> 15:t3-> 16:t4-> 17:a3-> 18:a4-> 19:a5-> 20:a6-> 21:a7-> 22:v11-> 23:v15-> 24:v16-> 6:v2-> 9:v3-> 10:v4-> 25:v13"
// [Asm]   comment = "v10<-a0;v15<-a1;v6<-s1;v3<-a1;v2<-a0;v8<-a0;v4<-a2;v11<-a0;v7<-s2;v16<-a1;v13<-a0;v5<-s0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of input79l4_4"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v10, zero ->   mv a0, zero
// [Asm] subst   addi v8, v7, -1 ->   addi a0, s2, -1
// [Asm] subst   blt v8, v5, .input79l4_4_2 ->   blt a0, s0, .input79l4_4_2
// [Asm] subst   mv v5, v2 ->   mv s0, a0
// [Asm] subst   mv v6, v3 ->   mv s1, a1
// [Asm] subst   mv v7, v4 ->   mv s2, a2
// [Asm] subst   ret ->   ret
// [Asm] subst   call minimbt_read_int ->   call minimbt_read_int
// [Asm] subst   slliw v15, v5, 2 ->   slliw a1, s0, 2
// [Asm] subst   add v16, v6, v15 ->   add a1, s1, a1
// [Asm] subst   sw v11, 0(v16) ->   sw a0, 0(a1)
// [Asm] subst   addi v13, v5, 1 ->   addi a0, s0, 1
// [Asm] subst   mv v5, v13 ->   mv s0, a0
// [Asm] subst   j .input79l4_4_0 ->   j .input79l4_4_0
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v13, Insn(iref=%3) -> v12, FnParam(fref=f5, fpref=$f.0) -> v2, Self(fref=f5) -> v0, FnParam(fref=f5, fpref=$f.2) -> v4, BlockParam(bref=b3, bpref=$b.0) -> v10, Insn(iref=%2) -> v11, Insn(iref=%1) -> v9, BlockParam(bref=b0, bpref=$b.0) -> v5, BlockParam(bref=b0, bpref=$b.1) -> v6, BlockParam(bref=b0, bpref=$b.2) -> v7, Insn(iref=%5) -> v14, Insn(iref=%0) -> v8, FnParam(fref=f5, fpref=$f.1) -> v3
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [zero]
// [Asm] defined: v10 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v6, v5, v18, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v19, v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v6, v5, zero, a0, v7]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, v5, zero, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v12]
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, v5, zero, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v13]
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v6, v14, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v14]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v6]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move_origin: [v3]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v6, zero, v7]
// [Asm] move_origin: [v4]
// [Asm] defined: v7 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of output97l5_5"];
// [Asm]   r0 [label="v10 ← a0", color=green];
// [Asm]   r20 [label="a7", color=blue];
// [Asm]   r23 [label="v14 ← a0", color=green];
// [Asm]   r3 [label="v5 ← s1", color=green];
// [Asm]   r9 [label="t0", color=blue];
// [Asm]   r26 [label="v3 ← a1", color=green];
// [Asm]   r27 [label="v4 ← a2", color=green];
// [Asm]   r6 [label="v19 ← a0", color=green];
// [Asm]   r13 [label="t4", color=blue];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r1 [label="v18 ← a0", color=green];
// [Asm]   r11 [label="t2", color=blue];
// [Asm]   r7 [label="v11 ← a0", color=green];
// [Asm]   r10 [label="t1", color=blue];
// [Asm]   r22 [label="v13 ← a0", color=green];
// [Asm]   r14 [label="a1", color=blue];
// [Asm]   r8 [label="a0", color=blue];
// [Asm]   r5 [label="v7 ← s2", color=green];
// [Asm]   r15 [label="a2", color=blue];
// [Asm]   r24 [label="v8 ← a0", color=green];
// [Asm]   r25 [label="v2 ← a0", color=green];
// [Asm]   r2 [label="v6 ← s0", color=green];
// [Asm]   r16 [label="a3", color=blue];
// [Asm]   r18 [label="a5", color=blue];
// [Asm]   r19 [label="a6", color=blue];
// [Asm]   r21 [label="v12 ← a0", color=green];
// [Asm]   r17 [label="a4", color=blue];
// [Asm]   r12 [label="t3", color=blue];
// [Asm]   r5 -- r21;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r5 -- r18;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r15 -- r25;
// [Asm]   r3 -- r5;
// [Asm]   r8 -- r12;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r26 -- r27;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r8 -- r16;
// [Asm]   r3 -- r13;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r27;
// [Asm]   r4 -- r25;
// [Asm]   r3 -- r17;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r5 -- r14;
// [Asm]   r8 -- r11;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r2 -- r24;
// [Asm]   r8 -- r14;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r23;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r4 -- r23;
// [Asm]   r5 -- r20;
// [Asm]   r15 -- r26;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r5 -- r23;
// [Asm]   r8 -- r19;
// [Asm]   r8 -- r9;
// [Asm]   r25 -- r27;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r5 -- r19;
// [Asm]   r4 -- r20;
// [Asm]   r25 -- r26;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r8 -- r20;
// [Asm]   r3 -- r22;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r8 -- r13;
// [Asm]   r2 -- r14;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r24;
// [Asm]   r8 -- r15;
// [Asm]   r14 -- r25;
// [Asm]   r8 -- r18;
// [Asm]   r3 -- r20;
// [Asm]   r2 -- r21;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r4 -- r17;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r2 -- r19;
// [Asm]   r4 -- r26;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r3;
// [Asm]   r2 -- r27;
// [Asm]   r5 -- r15;
// [Asm]   r4 -- r19;
// [Asm]   r5 -- r12;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:v10-> 1:v18-> 2:v6-> 3:v5-> 4:zero-> 5:v7-> 6:v19-> 7:v11-> 8:a0-> 9:t0-> 10:t1-> 11:t2-> 12:t3-> 13:t4-> 14:a1-> 15:a2-> 16:a3-> 17:a4-> 18:a5-> 19:a6-> 20:a7-> 21:v12-> 22:v13-> 24:v8-> 23:v14-> 25:v2-> 26:v3-> 27:v4"
// [Asm]   comment = "v10<-a0;v14<-a0;v5<-s1;v3<-a1;v4<-a2;v19<-a0;v18<-a0;v11<-a0;v13<-a0;v7<-s2;v8<-a0;v2<-a0;v6<-s0;v12<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of output97l5_5"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v10, zero ->   mv a0, zero
// [Asm] subst   slliw v18, v5, 2 ->   slliw a0, s1, 2
// [Asm] subst   add v19, v6, v18 ->   add a0, s0, a0
// [Asm] subst   lw v11, 0(v19) ->   lw a0, 0(a0)
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   addi v14, v5, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v5, v14 ->   mv s1, a0
// [Asm] subst   j .output97l5_5_0 ->   j .output97l5_5_0
// [Asm] subst   addi v8, v7, -1 ->   addi a0, s2, -1
// [Asm] subst   blt v8, v5, .output97l5_5_2 ->   blt a0, s1, .output97l5_5_2
// [Asm] subst   mv v5, v2 ->   mv s1, a0
// [Asm] subst   mv v6, v3 ->   mv s0, a1
// [Asm] subst   mv v7, v4 ->   mv s2, a2
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v37, BlockParam(bref=b7, bpref=$b.1) -> v13, BlockParam(bref=b7, bpref=$b.0) -> v12, Insn(iref=%8) -> v17, Insn(iref=%10) -> v32, BlockParam(bref=b25, bpref=$b.3) -> v21, Insn(iref=%14) -> v36, Insn(iref=%25) -> v50, FnParam(fref=f3, fpref=$f.0) -> v2, Self(fref=f3) -> v0, Insn(iref=%4) -> v40, BlockParam(bref=b25, bpref=$b.0) -> v18, BlockParam(bref=b6, bpref=$b.0) -> v38, Insn(iref=%1) -> v10, BlockParam(bref=b25, bpref=$b.2) -> v20, Insn(iref=%11) -> v33, BlockParam(bref=b23, bpref=$b.0) -> v30, Insn(iref=%6) -> v15, BlockParam(bref=b25, bpref=$b.1) -> v19, FnParam(fref=f3, fpref=$f.2) -> v4, BlockParam(bref=b17, bpref=$b.2) -> v25, BlockParam(bref=b7, bpref=$b.2) -> v14, BlockParam(bref=b22, bpref=$b.0) -> v49, BlockParam(bref=b17, bpref=$b.0) -> v23, BlockParam(bref=b3, bpref=$b.0) -> v11, Insn(iref=%16) -> v28, Insn(iref=%24) -> v48, BlockParam(bref=b0, bpref=$b.0) -> v6, BlockParam(bref=b0, bpref=$b.1) -> v7, BlockParam(bref=b0, bpref=$b.2) -> v8, BlockParam(bref=b17, bpref=$b.4) -> v27, BlockParam(bref=b8, bpref=$b.0) -> v31, BlockParam(bref=b17, bpref=$b.3) -> v26, Insn(iref=%5) -> v41, Insn(iref=%0) -> v9, Insn(iref=%19) -> v43, Insn(iref=%3) -> v39, Insn(iref=%18) -> v42, Insn(iref=%13) -> v35, Insn(iref=%7) -> v16, Insn(iref=%22) -> v46, Insn(iref=%17) -> v29, Insn(iref=%23) -> v47, BlockParam(bref=b17, bpref=$b.1) -> v24, FnParam(fref=f3, fpref=$f.1) -> v3, Mem(fref=f3, mref=m7) -> v5, Insn(iref=%20) -> v44, Insn(iref=%21) -> v45, BlockParam(bref=b25, bpref=$b.4) -> v22, Insn(iref=%12) -> v34
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%18), BlockParam(bref=b17, bpref=$b.3)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b17, bpref=$b.0), Insn(iref=%16)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%0)])
// [Asm] defs: [v49]
// [Asm] live_set: [v25, v5, v49, v26, zero, v27, v23, v8, v7, v6, v24, s11]
// [Asm] move_origin: [zero]
// [Asm] defined: v49 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v5, v49, v26, zero, v27, v23, v8, v7, v6, v24, s11]
// [Asm] move_origin: []
// [Asm] defs: [v56]
// [Asm] live_set: [v25, v5, v56, zero, v26, v27, v23, v7, v8, v6, s11, v24]
// [Asm] move_origin: []
// [Asm] defined: v56 is X
// [Asm] defs: [v57]
// [Asm] live_set: [v25, v5, zero, v26, v27, v23, v7, v8, v6, s11, v24, v57]
// [Asm] move_origin: []
// [Asm] defined: v57 is X
// [Asm] defs: [v42]
// [Asm] live_set: [v25, v5, zero, v26, v42, v27, v23, v7, v8, v6, s11, v24]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v5, zero, v26, v23, v27, v8, v7, v6, v24, s11]
// [Asm] move_origin: []
// [Asm] defs: [v30]
// [Asm] live_set: [v5, zero, v30, v8, v7, v6, s11]
// [Asm] move_origin: [zero]
// [Asm] defined: v30 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v5, zero, v8, v7, v6, s11, v31]
// [Asm] move_origin: [v30]
// [Asm] defined: v31 is X
// [Asm] defs: [v71]
// [Asm] live_set: [v71, zero, v8, v7, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: v71 is X
// [Asm] defs: [v72]
// [Asm] live_set: [v72, zero, v8, v7, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: v72 is X
// [Asm] defs: [v15]
// [Asm] live_set: [zero, v8, v7, v6, v15, s11]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v16, zero, v8, v7, v6, v15, s11]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v68]
// [Asm] live_set: [v16, zero, v68, v8, v7, v6, v15]
// [Asm] move_origin: []
// [Asm] defined: v68 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v16, zero, v8, v7, v6, v15]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, v16, zero, v8, v7, v6, v15, s11]
// [Asm] move_origin: [v5]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v7, v6, v15, s11]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v5, v18, zero, v8, v7, v6, v15, s11]
// [Asm] move_origin: [v7]
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v5, v18, zero, v8, v7, v19, v6, v15, s11]
// [Asm] move_origin: [v5]
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v5, v18, zero, v20, v8, v7, v19, v6, v15, s11]
// [Asm] move_origin: [v6]
// [Asm] defined: v20 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v5, v18, v21, zero, v20, v8, v7, v19, v6, v15, s11]
// [Asm] move_origin: [v15]
// [Asm] defined: v21 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v5, v18, v21, zero, v20, v22, v8, v7, v19, v6, v15, s11]
// [Asm] move_origin: [v8]
// [Asm] defined: v22 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v5, zero, v7, v8, v32, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: [v33]
// [Asm] live_set: [v5, zero, v7, v8, v6, s11, v33]
// [Asm] move_origin: []
// [Asm] defined: v33 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: [v35]
// [Asm] live_set: [v5, zero, v7, v8, v35, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v35, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v7, v8, v35, v6, s11]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, a0, v7, v8, v6, a1, s11]
// [Asm] move_origin: [v35]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, zero, a0, v7, v8, a2, v6, a1, s11]
// [Asm] move_origin: [v8]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0, v7, v8, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v36]
// [Asm] live_set: [v7, v6, v5, s11, zero, v8]
// [Asm] move_origin: [a0]
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v5, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v37]
// [Asm] live_set: [v7, v37, v6, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: [v38]
// [Asm] live_set: [v7, v38, v6, s11, zero, v8]
// [Asm] move_origin: [v37]
// [Asm] defined: v38 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v25, v5, v26, zero, v23, v27, v8, v7, v6, v24, s11, v28]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v5, v26, zero, v23, v27, v8, v7, v6, v24, s11]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v23]
// [Asm] live_set: [v5, zero, v23, v8, v7, v6, s11, v15]
// [Asm] move_origin: [v7]
// [Asm] defined: v23 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v5, zero, v23, v8, v7, v6, v24, s11, v15]
// [Asm] move_origin: [v5]
// [Asm] defined: v24 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v5, zero, v23, v8, v7, v6, v24, s11, v15]
// [Asm] move_origin: [v6]
// [Asm] defined: v25 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v25, v5, v26, zero, v23, v8, v7, v6, v24, s11]
// [Asm] move_origin: [v15]
// [Asm] defined: v26 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v25, v5, v26, zero, v27, v23, v8, v7, v6, v24, s11]
// [Asm] move_origin: [v8]
// [Asm] defined: v27 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: [zero]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [a2, a1, s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, s11, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, s11, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, s11, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v4, v6, s11, zero, v7]
// [Asm] move_origin: [v3]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v6, s11, zero, v8]
// [Asm] move_origin: [v4]
// [Asm] defined: v8 is X
// [Asm] defs: [v50]
// [Asm] live_set: [v25, v5, v26, zero, v27, v50, v7, v8, v6, s11, v24]
// [Asm] move_origin: []
// [Asm] defined: v50 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v25, v5, v26, zero, v27, v23, v8, v7, v6, v24, s11]
// [Asm] move_origin: [v50]
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v5, v26, zero, v27, v23, v8, v7, v6, v24, s11]
// [Asm] move_origin: [v24]
// [Asm] defs: []
// [Asm] live_set: [v25, v5, v26, zero, v27, v23, v8, v7, v6, v24, s11]
// [Asm] move_origin: [v25]
// [Asm] defs: []
// [Asm] live_set: [v25, v5, v26, zero, v27, v23, v8, v7, v6, v24, s11]
// [Asm] move_origin: [v26]
// [Asm] defs: []
// [Asm] live_set: [v25, v5, v26, zero, v27, v23, v8, v7, v6, v24, s11]
// [Asm] move_origin: [v27]
// [Asm] defs: []
// [Asm] live_set: [v25, v5, v26, zero, v27, v23, v8, v7, v6, v24, s11]
// [Asm] move_origin: []
// [Asm] defs: [v39]
// [Asm] live_set: [zero, v8, v7, v38, v6, s11, v39]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v8, v7, v38, v6, s11, v39]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v8, v7, v38, v6, s11, v39]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, a0, v8, v38, a1, v6, s11, v39]
// [Asm] move_origin: [v7]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [zero, a0, v8, v38, a2, a1, v6, s11]
// [Asm] move_origin: [v39]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v38, v6, s11, zero, a0, v8]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v40]
// [Asm] live_set: [v38, v6, s11, zero, v8]
// [Asm] move_origin: [a0]
// [Asm] defined: v40 is X
// [Asm] defs: []
// [Asm] live_set: [v38, v6, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v41]
// [Asm] live_set: [v41, v6, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: []
// [Asm] live_set: [v41, v6, s11, zero, v8]
// [Asm] move_origin: [v6]
// [Asm] defs: [v7]
// [Asm] live_set: [v7, v6, s11, zero, v8]
// [Asm] move_origin: [v41]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, s11, zero, v8]
// [Asm] move_origin: [v8]
// [Asm] defs: []
// [Asm] live_set: [v7, v6, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [zero, v7, v8, v6, v12, s11]
// [Asm] move_origin: [v6]
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v13, zero, v7, v8, v6, v12, s11]
// [Asm] move_origin: [v7]
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v14, v13, zero, v7, v8, v6, v12, s11]
// [Asm] move_origin: [v8]
// [Asm] defined: v14 is X
// [Asm] defs: [v9]
// [Asm] live_set: [zero, v7, v8, v6, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v44]
// [Asm] live_set: [v25, v5, v26, v7, s11, v24, v44, zero, v27, v23, v8, v6]
// [Asm] move_origin: []
// [Asm] defined: v44 is X
// [Asm] defs: [v45]
// [Asm] live_set: [v25, v5, v26, v7, s11, v24, zero, v27, v23, v8, v45, v6]
// [Asm] move_origin: []
// [Asm] defined: v45 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v5, v26, v7, s11, v24, zero, v27, v23, v8, v6]
// [Asm] move_origin: []
// [Asm] defs: [v47]
// [Asm] live_set: [v25, v5, v26, v7, s11, v24, zero, v27, v23, v8, v47, v6]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v5, v26, v7, s11, v24, zero, v27, v23, v8, v47, v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v25, v5, v26, a0, v7, s11, v24, zero, v27, v23, v8, v47, v6]
// [Asm] move_origin: [v25]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v25, v5, v26, a0, v7, a1, s11, v24, zero, v27, v23, v8, v6]
// [Asm] move_origin: [v47]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v25, v5, v26, a0, v7, a2, a1, s11, v24, zero, v27, v23, v8, v6]
// [Asm] move_origin: [v23]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v25, v5, v26, zero, a0, v23, v27, v7, v8, v6, s11, v24]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v48]
// [Asm] live_set: [v25, v5, v48, v26, zero, v27, v23, v8, v7, v6, v24, s11]
// [Asm] move_origin: [a0]
// [Asm] defined: v48 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v5, v48, v26, zero, v27, v23, v8, v7, v6, v24, s11]
// [Asm] move_origin: []
// [Asm] defs: [v49]
// [Asm] live_set: [v25, v5, v49, v26, zero, v27, v23, v8, v7, v6, v24, s11]
// [Asm] move_origin: [v48]
// [Asm] defined: v49 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of quicksort59l2_3"];
// [Asm]   r0 [label="v49 ← a0", color=green];
// [Asm]   r46 [label="v28 ← a0", color=green];
// [Asm]   r38 [label="a3", color=blue];
// [Asm]   r33 [label="t0", color=blue];
// [Asm]   r59 [label="v44 ← a0", color=green];
// [Asm]   r9 [label="v6 ← s0", color=green];
// [Asm]   r26 [label="v22 ← a4", color=green];
// [Asm]   r47 [label="v11 ← a0", color=green];
// [Asm]   r6 [label="v23 ← s4", color=green];
// [Asm]   r44 [label="v37 ← a0", color=green];
// [Asm]   r13 [label="v57 ← a0", color=green];
// [Asm]   r42 [label="a7", color=blue];
// [Asm]   r53 [label="v40 ← a0", color=green];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r29 [label="v35 ← a1", color=green];
// [Asm]   r35 [label="t2", color=blue];
// [Asm]   r7 [label="v8 ← s3", color=green];
// [Asm]   r56 [label="v13 ← a1", color=green];
// [Asm]   r10 [label="v24 ← s1", color=green];
// [Asm]   r8 [label="v7 ← s5", color=green];
// [Asm]   r5 [label="v27 ← s3", color=green];
// [Asm]   r36 [label="t3", color=blue];
// [Asm]   r54 [label="v41 ← a0", color=green];
// [Asm]   r32 [label="a2", color=blue];
// [Asm]   r15 [label="v30 ← a0", color=green];
// [Asm]   r24 [label="v20 ← a3", color=green];
// [Asm]   r49 [label="v3 ← a1", color=green];
// [Asm]   r57 [label="v14 ← a2", color=green];
// [Asm]   r43 [label="v36 ← a0", color=green];
// [Asm]   r31 [label="a1", color=blue];
// [Asm]   r39 [label="a4", color=blue];
// [Asm]   r17 [label="v71 ← a0", color=green];
// [Asm]   r52 [label="v39 ← a2", color=green];
// [Asm]   r12 [label="v56 ← a0", color=green];
// [Asm]   r48 [label="v2 ← a0", color=green];
// [Asm]   r37 [label="t4", color=blue];
// [Asm]   r20 [label="v16 ← a1", color=green];
// [Asm]   r61 [label="v47 ← a1", color=green];
// [Asm]   r23 [label="v19 ← a2", color=green];
// [Asm]   r3 [label="v26 ← s2", color=green];
// [Asm]   r27 [label="v32 ← a0", color=green];
// [Asm]   r62 [label="v48 ← a0", color=green];
// [Asm]   r40 [label="a5", color=blue];
// [Asm]   r1 [label="v25 ← s0", color=green];
// [Asm]   r41 [label="a6", color=blue];
// [Asm]   r28 [label="v33 ← a0", color=green];
// [Asm]   r11 [label="s11", color=blue];
// [Asm]   r58 [label="v9 ← a0", color=green];
// [Asm]   r34 [label="t1", color=blue];
// [Asm]   r22 [label="v18 ← a1", color=green];
// [Asm]   r14 [label="v42 ← a0", color=green];
// [Asm]   r50 [label="v4 ← a2", color=green];
// [Asm]   r51 [label="v50 ← a0", color=green];
// [Asm]   r30 [label="a0", color=blue];
// [Asm]   r45 [label="v38 ← s1", color=green];
// [Asm]   r25 [label="v21 ← a0", color=green];
// [Asm]   r55 [label="v12 ← a0", color=green];
// [Asm]   r2 [label="v5 ← s1", color=green];
// [Asm]   r16 [label="v31 ← a0", color=green];
// [Asm]   r18 [label="v72 ← a0", color=green];
// [Asm]   r19 [label="v15 ← a0", color=green];
// [Asm]   r21 [label="v68 ← a2", color=green];
// [Asm]   r60 [label="v45 ← a0", color=green];
// [Asm]   r2 -- r38;
// [Asm]   r32 -- r48;
// [Asm]   r2 -- r31;
// [Asm]   r11 -- r61;
// [Asm]   r9 -- r53;
// [Asm]   r11 -- r35;
// [Asm]   r4 -- r51;
// [Asm]   r8 -- r36;
// [Asm]   r31 -- r45;
// [Asm]   r7 -- r25;
// [Asm]   r3 -- r62;
// [Asm]   r4 -- r44;
// [Asm]   r30 -- r61;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r4 -- r48;
// [Asm]   r9 -- r26;
// [Asm]   r2 -- r51;
// [Asm]   r11 -- r55;
// [Asm]   r2 -- r7;
// [Asm]   r3 -- r31;
// [Asm]   r7 -- r62;
// [Asm]   r2 -- r41;
// [Asm]   r2 -- r42;
// [Asm]   r7 -- r35;
// [Asm]   r7 -- r32;
// [Asm]   r4 -- r57;
// [Asm]   r11 -- r19;
// [Asm]   r0 -- r6;
// [Asm]   r9 -- r14;
// [Asm]   r9 -- r56;
// [Asm]   r8 -- r34;
// [Asm]   r3 -- r8;
// [Asm]   r9 -- r62;
// [Asm]   r22 -- r25;
// [Asm]   r5 -- r35;
// [Asm]   r5 -- r6;
// [Asm]   r8 -- r16;
// [Asm]   r3 -- r39;
// [Asm]   r56 -- r57;
// [Asm]   r10 -- r33;
// [Asm]   r9 -- r12;
// [Asm]   r48 -- r50;
// [Asm]   r7 -- r59;
// [Asm]   r8 -- r23;
// [Asm]   r5 -- r32;
// [Asm]   r5 -- r60;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r29;
// [Asm]   r8 -- r59;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r33;
// [Asm]   r2 -- r13;
// [Asm]   r1 -- r51;
// [Asm]   r11 -- r43;
// [Asm]   r1 -- r11;
// [Asm]   r5 -- r51;
// [Asm]   r11 -- r15;
// [Asm]   r1 -- r38;
// [Asm]   r1 -- r41;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r35;
// [Asm]   r8 -- r32;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r35;
// [Asm]   r24 -- r25;
// [Asm]   r9 -- r39;
// [Asm]   r38 -- r45;
// [Asm]   r5 -- r36;
// [Asm]   r4 -- r13;
// [Asm]   r7 -- r44;
// [Asm]   r11 -- r62;
// [Asm]   r4 -- r62;
// [Asm]   r6 -- r62;
// [Asm]   r2 -- r4;
// [Asm]   r6 -- r41;
// [Asm]   r29 -- r30;
// [Asm]   r9 -- r40;
// [Asm]   r7 -- r20;
// [Asm]   r9 -- r61;
// [Asm]   r22 -- r26;
// [Asm]   r6 -- r46;
// [Asm]   r11 -- r23;
// [Asm]   r9 -- r30;
// [Asm]   r4 -- r18;
// [Asm]   r8 -- r42;
// [Asm]   r11 -- r46;
// [Asm]   r5 -- r11;
// [Asm]   r8 -- r25;
// [Asm]   r11 -- r51;
// [Asm]   r33 -- r45;
// [Asm]   r5 -- r38;
// [Asm]   r11 -- r37;
// [Asm]   r6 -- r59;
// [Asm]   r24 -- r26;
// [Asm]   r23 -- r26;
// [Asm]   r6 -- r19;
// [Asm]   r7 -- r22;
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r55;
// [Asm]   r8 -- r62;
// [Asm]   r7 -- r19;
// [Asm]   r2 -- r14;
// [Asm]   r11 -- r52;
// [Asm]   r48 -- r49;
// [Asm]   r8 -- r18;
// [Asm]   r8 -- r35;
// [Asm]   r9 -- r36;
// [Asm]   r11 -- r41;
// [Asm]   r7 -- r36;
// [Asm]   r4 -- r36;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r60;
// [Asm]   r6 -- r39;
// [Asm]   r35 -- r45;
// [Asm]   r10 -- r36;
// [Asm]   r9 -- r46;
// [Asm]   r9 -- r58;
// [Asm]   r6 -- r38;
// [Asm]   r10 -- r32;
// [Asm]   r4 -- r10;
// [Asm]   r11 -- r28;
// [Asm]   r2 -- r27;
// [Asm]   r11 -- r56;
// [Asm]   r7 -- r46;
// [Asm]   r11 -- r29;
// [Asm]   r9 -- r21;
// [Asm]   r1 -- r42;
// [Asm]   r5 -- r12;
// [Asm]   r10 -- r62;
// [Asm]   r41 -- r45;
// [Asm]   r11 -- r44;
// [Asm]   r2 -- r62;
// [Asm]   r9 -- r25;
// [Asm]   r30 -- r42;
// [Asm]   r4 -- r41;
// [Asm]   r10 -- r60;
// [Asm]   r6 -- r36;
// [Asm]   r1 -- r37;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r7 -- r56;
// [Asm]   r4 -- r58;
// [Asm]   r30 -- r40;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r4 -- r54;
// [Asm]   r10 -- r13;
// [Asm]   r10 -- r19;
// [Asm]   r3 -- r32;
// [Asm]   r5 -- r42;
// [Asm]   r9 -- r31;
// [Asm]   r9 -- r45;
// [Asm]   r2 -- r16;
// [Asm]   r11 -- r24;
// [Asm]   r11 -- r60;
// [Asm]   r4 -- r22;
// [Asm]   r9 -- r41;
// [Asm]   r1 -- r62;
// [Asm]   r11 -- r53;
// [Asm]   r4 -- r35;
// [Asm]   r1 -- r31;
// [Asm]   r42 -- r45;
// [Asm]   r2 -- r59;
// [Asm]   r4 -- r33;
// [Asm]   r3 -- r30;
// [Asm]   r11 -- r48;
// [Asm]   r9 -- r28;
// [Asm]   r2 -- r46;
// [Asm]   r3 -- r13;
// [Asm]   r4 -- r28;
// [Asm]   r6 -- r10;
// [Asm]   r3 -- r40;
// [Asm]   r11 -- r54;
// [Asm]   r9 -- r59;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r8 -- r29;
// [Asm]   r0 -- r11;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r4 -- r49;
// [Asm]   r10 -- r35;
// [Asm]   r7 -- r54;
// [Asm]   r55 -- r56;
// [Asm]   r30 -- r33;
// [Asm]   r6 -- r32;
// [Asm]   r11 -- r25;
// [Asm]   r4 -- r16;
// [Asm]   r7 -- r52;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r9 -- r57;
// [Asm]   r9 -- r60;
// [Asm]   r11 -- r57;
// [Asm]   r6 -- r14;
// [Asm]   r9 -- r29;
// [Asm]   r8 -- r19;
// [Asm]   r11 -- r49;
// [Asm]   r8 -- r43;
// [Asm]   r4 -- r20;
// [Asm]   r1 -- r60;
// [Asm]   r25 -- r26;
// [Asm]   r4 -- r30;
// [Asm]   r10 -- r41;
// [Asm]   r6 -- r12;
// [Asm]   r22 -- r24;
// [Asm]   r9 -- r51;
// [Asm]   r1 -- r39;
// [Asm]   r9 -- r44;
// [Asm]   r32 -- r45;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r7 -- r37;
// [Asm]   r6 -- r37;
// [Asm]   r4 -- r11;
// [Asm]   r9 -- r34;
// [Asm]   r30 -- r45;
// [Asm]   r9 -- r38;
// [Asm]   r7 -- r60;
// [Asm]   r8 -- r52;
// [Asm]   r0 -- r8;
// [Asm]   r7 -- r33;
// [Asm]   r9 -- r33;
// [Asm]   r1 -- r59;
// [Asm]   r11 -- r39;
// [Asm]   r11 -- r50;
// [Asm]   r22 -- r23;
// [Asm]   r7 -- r11;
// [Asm]   r9 -- r37;
// [Asm]   r7 -- r39;
// [Asm]   r7 -- r43;
// [Asm]   r30 -- r36;
// [Asm]   r11 -- r26;
// [Asm]   r8 -- r58;
// [Asm]   r37 -- r45;
// [Asm]   r9 -- r16;
// [Asm]   r9 -- r32;
// [Asm]   r11 -- r58;
// [Asm]   r4 -- r39;
// [Asm]   r3 -- r36;
// [Asm]   r9 -- r19;
// [Asm]   r31 -- r32;
// [Asm]   r11 -- r27;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r5 -- r30;
// [Asm]   r9 -- r54;
// [Asm]   r49 -- r50;
// [Asm]   r9 -- r50;
// [Asm]   r4 -- r52;
// [Asm]   r4 -- r19;
// [Asm]   r4 -- r53;
// [Asm]   r8 -- r31;
// [Asm]   r7 -- r51;
// [Asm]   r2 -- r32;
// [Asm]   r5 -- r33;
// [Asm]   r8 -- r51;
// [Asm]   r4 -- r34;
// [Asm]   r10 -- r61;
// [Asm]   r6 -- r35;
// [Asm]   r1 -- r30;
// [Asm]   r5 -- r10;
// [Asm]   r11 -- r14;
// [Asm]   r3 -- r6;
// [Asm]   r3 -- r42;
// [Asm]   r2 -- r43;
// [Asm]   r36 -- r45;
// [Asm]   r5 -- r59;
// [Asm]   r55 -- r57;
// [Asm]   r3 -- r37;
// [Asm]   r11 -- r45;
// [Asm]   r2 -- r37;
// [Asm]   r9 -- r17;
// [Asm]   r11 -- r18;
// [Asm]   r1 -- r33;
// [Asm]   r10 -- r40;
// [Asm]   r9 -- r49;
// [Asm]   r7 -- r27;
// [Asm]   r30 -- r34;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r31;
// [Asm]   r8 -- r12;
// [Asm]   r8 -- r61;
// [Asm]   r2 -- r34;
// [Asm]   r8 -- r45;
// [Asm]   r5 -- r31;
// [Asm]   r8 -- r24;
// [Asm]   r6 -- r60;
// [Asm]   r2 -- r25;
// [Asm]   r5 -- r62;
// [Asm]   r2 -- r6;
// [Asm]   r11 -- r13;
// [Asm]   r10 -- r38;
// [Asm]   r10 -- r12;
// [Asm]   r0 -- r9;
// [Asm]   r9 -- r23;
// [Asm]   r19 -- r22;
// [Asm]   r7 -- r38;
// [Asm]   r1 -- r40;
// [Asm]   r2 -- r12;
// [Asm]   r39 -- r45;
// [Asm]   r10 -- r31;
// [Asm]   r45 -- r52;
// [Asm]   r4 -- r56;
// [Asm]   r0 -- r1;
// [Asm]   r9 -- r20;
// [Asm]   r10 -- r42;
// [Asm]   r0 -- r10;
// [Asm]   r23 -- r24;
// [Asm]   r4 -- r25;
// [Asm]   r2 -- r36;
// [Asm]   r7 -- r42;
// [Asm]   r0 -- r4;
// [Asm]   r11 -- r36;
// [Asm]   r3 -- r46;
// [Asm]   r4 -- r14;
// [Asm]   r8 -- r30;
// [Asm]   r10 -- r59;
// [Asm]   r7 -- r29;
// [Asm]   r2 -- r26;
// [Asm]   r11 -- r20;
// [Asm]   r4 -- r23;
// [Asm]   r1 -- r8;
// [Asm]   r3 -- r38;
// [Asm]   r30 -- r35;
// [Asm]   r1 -- r34;
// [Asm]   r7 -- r24;
// [Asm]   r8 -- r27;
// [Asm]   r30 -- r32;
// [Asm]   r8 -- r9;
// [Asm]   r6 -- r33;
// [Asm]   r11 -- r16;
// [Asm]   r6 -- r30;
// [Asm]   r11 -- r12;
// [Asm]   r1 -- r13;
// [Asm]   r11 -- r22;
// [Asm]   r8 -- r20;
// [Asm]   r10 -- r51;
// [Asm]   r9 -- r52;
// [Asm]   r7 -- r17;
// [Asm]   r8 -- r41;
// [Asm]   r2 -- r40;
// [Asm]   r23 -- r25;
// [Asm]   r5 -- r9;
// [Asm]   r0 -- r3;
// [Asm]   r8 -- r15;
// [Asm]   r4 -- r32;
// [Asm]   r11 -- r59;
// [Asm]   r7 -- r15;
// [Asm]   r10 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r10 -- r46;
// [Asm]   r5 -- r61;
// [Asm]   r7 -- r41;
// [Asm]   r1 -- r61;
// [Asm]   r8 -- r10;
// [Asm]   r11 -- r34;
// [Asm]   r2 -- r30;
// [Asm]   r5 -- r39;
// [Asm]   r8 -- r26;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r30 -- r41;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r35;
// [Asm]   r4 -- r6;
// [Asm]   r7 -- r12;
// [Asm]   r9 -- r13;
// [Asm]   r7 -- r14;
// [Asm]   r20 -- r21;
// [Asm]   r8 -- r50;
// [Asm]   r8 -- r60;
// [Asm]   r2 -- r39;
// [Asm]   r2 -- r20;
// [Asm]   r8 -- r57;
// [Asm]   r4 -- r38;
// [Asm]   r5 -- r41;
// [Asm]   r1 -- r12;
// [Asm]   r7 -- r21;
// [Asm]   r40 -- r45;
// [Asm]   r9 -- r27;
// [Asm]   r7 -- r40;
// [Asm]   r30 -- r38;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r3 -- r60;
// [Asm]   r30 -- r31;
// [Asm]   r7 -- r53;
// [Asm]   r11 -- r31;
// [Asm]   r11 -- r32;
// [Asm]   r4 -- r27;
// [Asm]   r30 -- r52;
// [Asm]   r19 -- r21;
// [Asm]   r4 -- r40;
// [Asm]   r4 -- r42;
// [Asm]   r3 -- r51;
// [Asm]   r3 -- r34;
// [Asm]   r9 -- r18;
// [Asm]   r1 -- r46;
// [Asm]   r4 -- r21;
// [Asm]   r6 -- r13;
// [Asm]   r7 -- r34;
// [Asm]   r2 -- r33;
// [Asm]   r7 -- r55;
// [Asm]   r10 -- r37;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r43;
// [Asm]   r0 -- r2;
// [Asm]   r8 -- r37;
// [Asm]   r7 -- r10;
// [Asm]   r2 -- r8;
// [Asm]   r6 -- r31;
// [Asm]   r8 -- r44;
// [Asm]   r8 -- r39;
// [Asm]   r30 -- r39;
// [Asm]   r7 -- r61;
// [Asm]   r10 -- r30;
// [Asm]   r4 -- r50;
// [Asm]   r8 -- r21;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r3 -- r61;
// [Asm]   r2 -- r24;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r11 -- r30;
// [Asm]   r6 -- r61;
// [Asm]   r4 -- r9;
// [Asm]   r5 -- r34;
// [Asm]   r2 -- r61;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r24;
// [Asm]   r11 -- r40;
// [Asm]   r11 -- r17;
// [Asm]   r9 -- r35;
// [Asm]   r4 -- r37;
// [Asm]   r7 -- r45;
// [Asm]   r9 -- r15;
// [Asm]   r4 -- r59;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r7 -- r13;
// [Asm]   r31 -- r48;
// [Asm]   r1 -- r32;
// [Asm]   r9 -- r42;
// [Asm]   r8 -- r55;
// [Asm]   r19 -- r24;
// [Asm]   r8 -- r38;
// [Asm]   r7 -- r30;
// [Asm]   r8 -- r33;
// [Asm]   r19 -- r26;
// [Asm]   r7 -- r9;
// [Asm]   r10 -- r34;
// [Asm]   r6 -- r40;
// [Asm]   r30 -- r37;
// [Asm]   r31 -- r52;
// [Asm]   r4 -- r60;
// [Asm]   r7 -- r28;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r34;
// [Asm]   r8 -- r28;
// [Asm]   r9 -- r22;
// [Asm]   r45 -- r53;
// [Asm]   r11 -- r42;
// [Asm]   r11 -- r33;
// [Asm]   r4 -- r46;
// [Asm]   r19 -- r23;
// [Asm]   r5 -- r46;
// [Asm]   r4 -- r45;
// [Asm]   r8 -- r13;
// [Asm]   r34 -- r45;
// [Asm]   r5 -- r37;
// [Asm]   r32 -- r49;
// [Asm]   r8 -- r40;
// [Asm]   r9 -- r43;
// [Asm]   r6 -- r42;
// [Asm]   r10 -- r39;
// [Asm]   r3 -- r41;
// [Asm]   r3 -- r14;
// [Asm]   r7 -- r58;
// [Asm]   r3 -- r59;
// [Asm]   r11 -- r38;
// [Asm]   r7 -- r31;
// [Asm]   r4 -- r17;
// [Asm]   r7 -- r23;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r36;
// [Asm]   r4 -- r26;
// [Asm]   r2 -- r19;
// [Asm]   r2 -- r3;
// [Asm]   r8 -- r46;
// [Asm]   r4 -- r61;
// [Asm]   r5 -- r40;
// [Asm]   r19 -- r20;
// [Asm]   r10 -- r14;
// [Asm]   comment = "0:v49-> 1:v25-> 2:v5-> 3:v26-> 4:zero-> 5:v27-> 6:v23-> 8:v7-> 7:v8-> 9:v6-> 10:v24-> 11:s11-> 12:v56-> 13:v57-> 14:v42-> 30:a0-> 31:a1-> 32:a2-> 33:t0-> 34:t1-> 35:t2-> 36:t3-> 37:t4-> 45:v38-> 38:a3-> 39:a4-> 40:a5-> 41:a6-> 42:a7-> 61:v47-> 46:v28-> 59:v44-> 60:v45-> 62:v48-> 51:v50-> 19:v15-> 52:v39-> 20:v16-> 29:v35-> 16:v31-> 21:v68-> 22:v18-> 23:v19-> 24:v20-> 25:v21-> 26:v22-> 27:v32-> 28:v33-> 43:v36-> 15:v30-> 17:v71-> 18:v72-> 44:v37-> 53:v40-> 58:v9-> 48:v2-> 49:v3-> 50:v4-> 54:v41-> 55:v12-> 56:v13-> 57:v14-> 47:v11"
// [Asm]   comment = "v49<-a0;v28<-a0;v44<-a0;v6<-s0;v22<-a4;v11<-a0;v23<-s4;v37<-a0;v57<-a0;v40<-a0;v35<-a1;v8<-s3;v13<-a1;v24<-s1;v7<-s5;v27<-s3;v41<-a0;v30<-a0;v20<-a3;v3<-a1;v14<-a2;v36<-a0;v71<-a0;v39<-a2;v56<-a0;v2<-a0;v16<-a1;v47<-a1;v19<-a2;v26<-s2;v32<-a0;v48<-a0;v25<-s0;v33<-a0;v9<-a0;v18<-a1;v42<-a0;v4<-a2;v50<-a0;v38<-s1;v21<-a0;v12<-a0;v5<-s1;v31<-a0;v72<-a0;v15<-a0;v68<-a2;v45<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of quicksort59l2_3"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v49, zero ->   mv a0, zero
// [Asm] subst   j .quicksort59l2_3_22 ->   j .quicksort59l2_3_22
// [Asm] subst   slliw v56, v23, 2 ->   slliw a0, s4, 2
// [Asm] subst   add v57, v25, v56 ->   add a0, s0, a0
// [Asm] subst   lw v42, 0(v57) ->   lw a0, 0(a0)
// [Asm] subst   blt v26, v42, .quicksort59l2_3_21 ->   blt s2, a0, .quicksort59l2_3_21
// [Asm] subst   mv v30, zero ->   mv a0, zero
// [Asm] subst   slliw v71, v8, 2 ->   slliw a0, s3, 2
// [Asm] subst   add v72, v6, v71 ->   add a0, s0, a0
// [Asm] subst   lw v15, 0(v72) ->   lw a0, 0(a0)
// [Asm] subst   addi v16, v7, -1 ->   addi a1, s5, -1
// [Asm] subst   addi v68, s11, -4 ->   addi a2, s11, -4
// [Asm] subst   andi v5, v68, -8 ->   andi s1, a2, -8
// [Asm] subst   mv s11, v5 ->   mv s11, s1
// [Asm] subst   sw v16, 0(v5) ->   sw a1, 0(s1)
// [Asm] subst   mv v18, v7 ->   mv a1, s5
// [Asm] subst   mv v19, v5 ->   mv a2, s1
// [Asm] subst   mv v20, v6 ->   mv a3, s0
// [Asm] subst   mv v22, v8 ->   mv a4, s3
// [Asm] subst   lw v32, 0(v5) ->   lw a0, 0(s1)
// [Asm] subst   addi v33, v32, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v33, 0(v5) ->   sw a0, 0(s1)
// [Asm] subst   lw v35, 0(v5) ->   lw a1, 0(s1)
// [Asm] subst   mv a0, v6 ->   mv a0, s0
// [Asm] subst   mv a2, v8 ->   mv a2, s3
// [Asm] subst   call swap1l0_0 ->   call swap1l0_0
// [Asm] subst   lw v37, 0(v5) ->   lw a0, 0(s1)
// [Asm] subst   mv v38, v37 ->   mv s1, a0
// [Asm] subst   addi v28, v27, -1 ->   addi a0, s3, -1
// [Asm] subst   blt v28, v23, .quicksort59l2_3_19 ->   blt a0, s4, .quicksort59l2_3_19
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v23, v7 ->   mv s4, s5
// [Asm] subst   mv v26, v15 ->   mv s2, a0
// [Asm] subst   mv v11, zero ->   mv a0, zero
// [Asm] subst   mv v6, v2 ->   mv s0, a0
// [Asm] subst   mv v7, v3 ->   mv s5, a1
// [Asm] subst   mv v8, v4 ->   mv s3, a2
// [Asm] subst   addi v50, v23, 1 ->   addi a0, s4, 1
// [Asm] subst   mv v23, v50 ->   mv s4, a0
// [Asm] subst   j .quicksort59l2_3_17 ->   j .quicksort59l2_3_17
// [Asm] subst   addi v39, v38, -1 ->   addi a2, s1, -1
// [Asm] subst   mv a0, v6 ->   mv a0, s0
// [Asm] subst   mv a1, v7 ->   mv a1, s5
// [Asm] subst   call quicksort59l2_3 ->   call quicksort59l2_3
// [Asm] subst   addi v41, v38, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v7, v41 ->   mv s5, a0
// [Asm] subst   j .quicksort59l2_3_0 ->   j .quicksort59l2_3_0
// [Asm] subst   mv v12, v6 ->   mv a0, s0
// [Asm] subst   mv v13, v7 ->   mv a1, s5
// [Asm] subst   mv v14, v8 ->   mv a2, s3
// [Asm] subst   addi v9, v8, -1 ->   addi a0, s3, -1
// [Asm] subst   blt v9, v7, .quicksort59l2_3_2 ->   blt a0, s5, .quicksort59l2_3_2
// [Asm] subst   lw v44, 0(v24) ->   lw a0, 0(s1)
// [Asm] subst   addi v45, v44, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v45, 0(v24) ->   sw a0, 0(s1)
// [Asm] subst   lw v47, 0(v24) ->   lw a1, 0(s1)
// [Asm] subst   mv a0, v25 ->   mv a0, s0
// [Asm] subst   mv a2, v23 ->   mv a2, s4
// [Asm] subst   call swap1l0_0 ->   call swap1l0_0
// [Asm] pre_assigned_registers: Self(fref=f14) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_14"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_14"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main75l3_6 ->   call main75l3_6
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v6, Insn(iref=%3) -> v8, FnParam(fref=f0, fpref=$f.1) -> v3, FnParam(fref=f0, fpref=$f.2) -> v4, Self(fref=f0) -> v0, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%0) -> v5, Insn(iref=%2) -> v7
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, a2, zero, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v3, v4, v16, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v3, v4, v17, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v4, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v3, v4, v5, zero, v13, v2]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v3, v4, v5, v14, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v3, v4, v5, v6, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v4, v5, v6, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v4, v5, v6, v12, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of swap1l0_0"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="v13 ← a4", color=green];
// [Asm]   r6 [label="v16 ← a3", color=green];
// [Asm]   r13 [label="v12 ← a1", color=green];
// [Asm]   r4 [label="v3 ← a1", color=green];
// [Asm]   r1 [label="a2", color=blue];
// [Asm]   r11 [label="v6 ← a4", color=green];
// [Asm]   r7 [label="v17 ← a3", color=green];
// [Asm]   r10 [label="v14 ← a4", color=green];
// [Asm]   r14 [label="v9 ← a1", color=green];
// [Asm]   r8 [label="v5 ← a3", color=green];
// [Asm]   r5 [label="v4 ← a2", color=green];
// [Asm]   r15 [label="v10 ← a0", color=green];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="a0", color=blue];
// [Asm]   r12 [label="v11 ← a1", color=green];
// [Asm]   r5 -- r6;
// [Asm]   r0 -- r13;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r15;
// [Asm]   r8 -- r13;
// [Asm]   r11 -- r13;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r9;
// [Asm]   r5 -- r8;
// [Asm]   r0 -- r3;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r9;
// [Asm]   r5 -- r10;
// [Asm]   r0 -- r8;
// [Asm]   r3 -- r13;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r8 -- r9;
// [Asm]   r0 -- r5;
// [Asm]   r3 -- r10;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r0 -- r14;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r9;
// [Asm]   r11 -- r12;
// [Asm]   r3 -- r14;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r3 -- r11;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r5 -- r11;
// [Asm]   r8 -- r14;
// [Asm]   r0 -- r7;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r9;
// [Asm]   r8 -- r12;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v2-> 1:a2-> 4:v3-> 3:zero-> 5:v4-> 6:v16-> 7:v17-> 8:v5-> 9:v13-> 10:v14-> 11:v6-> 12:v11-> 13:v12-> 14:v9-> 15:v10-> 2:a1-> 16:a0"
// [Asm]   comment = "v2<-a0;v13<-a4;v16<-a3;v12<-a1;v3<-a1;v6<-a4;v17<-a3;v14<-a4;v9<-a1;v5<-a3;v4<-a2;v10<-a0;v11<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of swap1l0_0"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   slliw v16, v3, 2 ->   slliw a3, a1, 2
// [Asm] subst   add v17, v2, v16 ->   add a3, a0, a3
// [Asm] subst   lw v5, 0(v17) ->   lw a3, 0(a3)
// [Asm] subst   slliw v13, v4, 2 ->   slliw a4, a2, 2
// [Asm] subst   add v14, v2, v13 ->   add a4, a0, a4
// [Asm] subst   lw v6, 0(v14) ->   lw a4, 0(a4)
// [Asm] subst   slliw v11, v3, 2 ->   slliw a1, a1, 2
// [Asm] subst   add v12, v2, v11 ->   add a1, a0, a1
// [Asm] subst   sw v6, 0(v12) ->   sw a4, 0(a1)
// [Asm] subst   slliw v9, v4, 2 ->   slliw a1, a2, 2
// [Asm] subst   add v10, v2, v9 ->   add a0, a0, a1
// [Asm] subst   sw v5, 0(v10) ->   sw a3, 0(a0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] input79l4_4:
// [Asm] # block info: defs: [v3, v7, v4, v6, v5, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .input79l4_4_5:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm]   mv v6, v3  # live: [v4, v5, v6, zero]
// [Asm]   mv v7, v4  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v8], uses: [v8, v5, v7], upward_exposed: [v5, v7], params_defs: [v5, v6, v7]
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: [v5, v6, v7]
// [Asm] .input79l4_4_0:
// [Asm]   addi v8, v7, -1  # live: [v8, v5, v6, zero, v7]
// [Asm] # control
// [Asm]   blt v8, v5, .input79l4_4_2  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, v16, v13, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v11, v5, v16, a0, v13, v7, v6, v15], upward_exposed: [v5, v6, v7], params_defs: []
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .input79l4_4_1:
// [Asm]   # save_ctx2  # live: [v6, v5, zero, v7]
// [Asm]   call minimbt_read_int  # live: [v6, v5, zero, a0, v7]
// [Asm]   mv v11, a0  # live: [v11, v6, v5, zero, v7]
// [Asm]   # restore_ctx2  # live: [v11, v6, v5, zero, v7]
// [Asm]   slliw v15, v5, 2  # live: [v11, v6, v5, v15, zero, v7]
// [Asm]   add v16, v6, v15  # live: [v11, v6, v5, v16, zero, v7]
// [Asm]   sw v11, 0(v16)  # live: [v6, v5, zero, v7]
// [Asm]   addi v13, v5, 1  # live: [v6, zero, v13, v7]
// [Asm] # control
// [Asm]   mv v5, v13  # live: [v5, v6, zero, v7]
// [Asm]   mv v6, v6  # live: [v5, v6, zero, v7]
// [Asm]   mv v7, v7  # live: [v5, v6, zero, v7]
// [Asm]   j .input79l4_4_0  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .input79l4_4_2:
// [Asm] # control
// [Asm]   mv v10, zero  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .input79l4_4_3:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] quicksort59l2_3:
// [Asm] # block info: defs: [v3, v7, v8, v4, v6, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, s11, a0, zero], live_out: [v8, v6, s11, zero, v7]
// [Asm] # block parameters: []
// [Asm] .quicksort59l2_3_5:
// [Asm]   # save_ctx1  # live: [a2, a1, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, s11, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, s11, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, s11, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v2  # live: [v4, v6, s11, zero, v3]
// [Asm]   mv v7, v3  # live: [v4, v6, s11, zero, v7]
// [Asm]   mv v8, v4  # live: [v7, v6, s11, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v9], uses: [v7, v9, v8], upward_exposed: [v7, v8], params_defs: [v8, v6, v7]
// [Asm] # live_in: [v7, v6, s11, zero, v8], live_out: [v8, v6, s11, zero, v7]
// [Asm] # block parameters: [v6, v7, v8]
// [Asm] .quicksort59l2_3_0:
// [Asm]   addi v9, v8, -1  # live: [zero, v7, v8, v6, s11, v9]
// [Asm] # control
// [Asm]   blt v9, v7, .quicksort59l2_3_2  # live: [v7, v6, s11, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v14, v12, v13], uses: [v8, v6, v7], upward_exposed: [v8, v6, v7], params_defs: []
// [Asm] # live_in: [v7, v6, s11, zero, v8], live_out: [v14, v13, zero, v8, v7, v6, v12, s11]
// [Asm] # block parameters: []
// [Asm] .quicksort59l2_3_1:
// [Asm] # control
// [Asm]   mv v12, v6  # live: [zero, v7, v8, v6, v12, s11]
// [Asm]   mv v13, v7  # live: [v13, zero, v7, v8, v6, v12, s11]
// [Asm]   mv v14, v8  # live: [v14, v13, zero, v7, v8, v6, v12, s11]
// [Asm] 
// [Asm] # block info: defs: [v72, v71, v16, v5, v18, v21, v68, v20, v22, v19, v15, s11], uses: [v72, v71, v5, v16, v68, v7, v8, v6, s11, v15], upward_exposed: [v7, v6, s11, v8], params_defs: [v14, v12, v13]
// [Asm] # live_in: [v14, v13, zero, v7, v8, v6, v12, s11], live_out: [v5, v18, v21, zero, v20, v22, v8, v7, v19, v6, v15, s11]
// [Asm] # block parameters: [v12, v13, v14]
// [Asm] .quicksort59l2_3_7:
// [Asm]   slliw v71, v8, 2  # live: [v71, zero, v8, v7, v6, s11]
// [Asm]   add v72, v6, v71  # live: [v72, zero, v8, v7, v6, s11]
// [Asm]   lw v15, 0(v72)  # live: [zero, v8, v7, v6, v15, s11]
// [Asm]   addi v16, v7, -1  # live: [v16, zero, v8, v7, v6, v15, s11]
// [Asm]   addi v68, s11, -4  # live: [v16, zero, v68, v8, v7, v6, v15]
// [Asm]   andi v5, v68, -8  # live: [v5, v16, zero, v8, v7, v6, v15]
// [Asm]   mv s11, v5  # live: [v5, v16, zero, v8, v7, v6, v15, s11]
// [Asm]   sw v16, 0(v5)  # live: [v5, zero, v8, v7, v6, v15, s11]
// [Asm] # control
// [Asm]   mv v18, v7  # live: [v5, v18, zero, v8, v7, v6, v15, s11]
// [Asm]   mv v19, v5  # live: [v5, v18, zero, v8, v7, v19, v6, v15, s11]
// [Asm]   mv v20, v6  # live: [v5, v18, zero, v20, v8, v7, v19, v6, v15, s11]
// [Asm]   mv v21, v15  # live: [v5, v18, v21, zero, v20, v8, v7, v19, v6, v15, s11]
// [Asm]   mv v22, v8  # live: [v5, v18, v21, zero, v20, v22, v8, v7, v19, v6, v15, s11]
// [Asm] 
// [Asm] # block info: defs: [v25, v24, v26, v23, v27], uses: [v8, v5, v6, v15, v7], upward_exposed: [v8, v5, v6, v15, v7], params_defs: [v19, v18, v21, v20, v22]
// [Asm] # live_in: [v5, v18, v21, zero, v20, v22, v8, v7, v19, v6, v15, s11], live_out: [v25, v5, v26, zero, v23, v27, v8, v7, v6, v24, s11]
// [Asm] # block parameters: [v18, v19, v20, v21, v22]
// [Asm] .quicksort59l2_3_25:
// [Asm] # control
// [Asm]   mv v23, v7  # live: [v5, zero, v23, v8, v7, v6, s11, v15]
// [Asm]   mv v24, v5  # live: [v5, zero, v23, v8, v7, v6, v24, s11, v15]
// [Asm]   mv v25, v6  # live: [v25, v5, zero, v23, v8, v7, v6, v24, s11, v15]
// [Asm]   mv v26, v15  # live: [v25, v5, v26, zero, v23, v8, v7, v6, v24, s11]
// [Asm]   mv v27, v8  # live: [v25, v5, v26, zero, v27, v23, v8, v7, v6, v24, s11]
// [Asm] 
// [Asm] # block info: defs: [v28], uses: [v28, v27, v23], upward_exposed: [v27, v23], params_defs: [v25, v24, v26, v23, v27]
// [Asm] # live_in: [v25, v5, v26, zero, v23, v27, v8, v7, v6, v24, s11], live_out: [v25, v5, v26, zero, v27, v23, v8, v7, v6, v24, s11]
// [Asm] # block parameters: [v23, v24, v25, v26, v27]
// [Asm] .quicksort59l2_3_17:
// [Asm]   addi v28, v27, -1  # live: [v25, v5, v26, zero, v23, v27, v8, v7, v6, v24, s11, v28]
// [Asm] # control
// [Asm]   blt v28, v23, .quicksort59l2_3_19  # live: [v25, v5, v26, zero, v23, v27, v8, v7, v6, v24, s11]
// [Asm] 
// [Asm] # block info: defs: [v56, v57, v42], uses: [v25, v56, v57, v26, v42, v23], upward_exposed: [v25, v26, v23], params_defs: []
// [Asm] # live_in: [v25, v5, v26, zero, v27, v23, v8, v7, v6, v24, s11], live_out: [v25, v5, zero, v26, v27, v23, v8, v7, v6, v24, s11]
// [Asm] # block parameters: []
// [Asm] .quicksort59l2_3_18:
// [Asm]   slliw v56, v23, 2  # live: [v25, v5, v56, zero, v26, v27, v23, v7, v8, v6, s11, v24]
// [Asm]   add v57, v25, v56  # live: [v25, v5, zero, v26, v27, v23, v7, v8, v6, s11, v24, v57]
// [Asm]   lw v42, 0(v57)  # live: [v25, v5, zero, v26, v42, v27, v23, v7, v8, v6, s11, v24]
// [Asm] # control
// [Asm]   blt v26, v42, .quicksort59l2_3_21  # live: [v25, v5, zero, v26, v23, v27, v8, v7, v6, v24, s11]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, v44, fa1, fa2, ft6, a4, fa6, a6, v47, ft5, ft10, ft7, ft4, ft9, v49, a5, fa4, a0, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, v48, fa3, ft3, fa0, v45, t4, t2], uses: [v25, v48, a0, v23, v45, v47, a2, a1, v24, v44], upward_exposed: [v25, v24, v23], params_defs: []
// [Asm] # live_in: [v25, v5, v26, zero, v23, v27, v8, v7, v6, v24, s11], live_out: [v25, v5, v49, v26, zero, v27, v23, v8, v7, v6, v24, s11]
// [Asm] # block parameters: []
// [Asm] .quicksort59l2_3_20:
// [Asm]   lw v44, 0(v24)  # live: [v25, v5, v26, v7, s11, v24, v44, zero, v27, v23, v8, v6]
// [Asm]   addi v45, v44, 1  # live: [v25, v5, v26, v7, s11, v24, zero, v27, v23, v8, v45, v6]
// [Asm]   sw v45, 0(v24)  # live: [v25, v5, v26, v7, s11, v24, zero, v27, v23, v8, v6]
// [Asm]   lw v47, 0(v24)  # live: [v25, v5, v26, v7, s11, v24, zero, v27, v23, v8, v47, v6]
// [Asm]   # save_ctx2  # live: [v25, v5, v26, v7, s11, v24, zero, v27, v23, v8, v47, v6]
// [Asm]   mv a0, v25  # live: [v25, v5, v26, a0, v7, s11, v24, zero, v27, v23, v8, v47, v6]
// [Asm]   mv a1, v47  # live: [v25, v5, v26, a0, v7, a1, s11, v24, zero, v27, v23, v8, v6]
// [Asm]   mv a2, v23  # live: [v25, v5, v26, a0, v7, a2, a1, s11, v24, zero, v27, v23, v8, v6]
// [Asm]   call swap1l0_0  # live: [v25, v5, v26, zero, a0, v23, v27, v7, v8, v6, s11, v24]
// [Asm]   mv v48, a0  # live: [v25, v5, v48, v26, zero, v27, v23, v8, v7, v6, v24, s11]
// [Asm]   # restore_ctx2  # live: [v25, v5, v48, v26, zero, v27, v23, v8, v7, v6, v24, s11]
// [Asm] # control
// [Asm]   mv v49, v48  # live: [v25, v5, v49, v26, zero, v27, v23, v8, v7, v6, v24, s11]
// [Asm] 
// [Asm] # block info: defs: [v50, v23], uses: [v27, v25, v24, v26, v23, v50], upward_exposed: [v25, v24, v26, v23, v27], params_defs: [v49]
// [Asm] # live_in: [v25, v5, v49, v26, zero, v27, v23, v8, v7, v6, v24, s11], live_out: [v25, v5, v26, zero, v23, v27, v8, v7, v6, v24, s11]
// [Asm] # block parameters: [v49]
// [Asm] .quicksort59l2_3_22:
// [Asm]   addi v50, v23, 1  # live: [v25, v5, v26, zero, v27, v50, v7, v8, v6, s11, v24]
// [Asm] # control
// [Asm]   mv v23, v50  # live: [v25, v5, v26, zero, v27, v23, v8, v7, v6, v24, s11]
// [Asm]   mv v24, v24  # live: [v25, v5, v26, zero, v27, v23, v8, v7, v6, v24, s11]
// [Asm]   mv v25, v25  # live: [v25, v5, v26, zero, v27, v23, v8, v7, v6, v24, s11]
// [Asm]   mv v26, v26  # live: [v25, v5, v26, zero, v27, v23, v8, v7, v6, v24, s11]
// [Asm]   mv v27, v27  # live: [v25, v5, v26, zero, v27, v23, v8, v7, v6, v24, s11]
// [Asm]   j .quicksort59l2_3_17  # live: [v25, v5, v26, zero, v27, v23, v8, v7, v6, v24, s11]
// [Asm] 
// [Asm] # block info: defs: [v11], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v11]
// [Asm] # block parameters: []
// [Asm] .quicksort59l2_3_2:
// [Asm] # control
// [Asm]   mv v11, zero  # live: [v11]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v11, a0], upward_exposed: [v11], params_defs: [v11]
// [Asm] # live_in: [v11], live_out: []
// [Asm] # block parameters: [v11]
// [Asm] .quicksort59l2_3_3:
// [Asm] # control
// [Asm]   mv a0, v11  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v30], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v8, v6, s11], live_out: [v5, zero, v30, v7, v8, v6, s11]
// [Asm] # block parameters: []
// [Asm] .quicksort59l2_3_19:
// [Asm] # control
// [Asm]   mv v30, zero  # live: [v5, zero, v30, v8, v7, v6, s11]
// [Asm] 
// [Asm] # block info: defs: [v31], uses: [v30], upward_exposed: [v30], params_defs: [v30]
// [Asm] # live_in: [v5, zero, v30, v7, v8, v6, s11], live_out: [v5, zero, v7, v8, v6, s11, v31]
// [Asm] # block parameters: [v30]
// [Asm] .quicksort59l2_3_23:
// [Asm] # control
// [Asm]   mv v31, v30  # live: [v5, zero, v8, v7, v6, s11, v31]
// [Asm] 
// [Asm] # block info: defs: [t1, v32, ft0, ft1, a1, v33, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, v36, ft2, a2, v37, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, v35, fa0, t4, v38, t2], uses: [v5, a0, v8, v35, v32, a2, v37, v6, a1, v33], upward_exposed: [v5, v6, v8], params_defs: [v31]
// [Asm] # live_in: [v5, zero, v7, v8, v6, s11, v31], live_out: [zero, v8, v7, v38, v6, s11]
// [Asm] # block parameters: [v31]
// [Asm] .quicksort59l2_3_8:
// [Asm]   lw v32, 0(v5)  # live: [v5, zero, v7, v8, v32, v6, s11]
// [Asm]   addi v33, v32, 1  # live: [v5, zero, v7, v8, v6, s11, v33]
// [Asm]   sw v33, 0(v5)  # live: [v5, zero, v7, v8, v6, s11]
// [Asm]   lw v35, 0(v5)  # live: [v5, zero, v7, v8, v35, v6, s11]
// [Asm]   # save_ctx2  # live: [v5, zero, v7, v8, v35, v6, s11]
// [Asm]   mv a0, v6  # live: [v5, zero, a0, v7, v8, v35, v6, s11]
// [Asm]   mv a1, v35  # live: [v5, zero, a0, v7, v8, v6, a1, s11]
// [Asm]   mv a2, v8  # live: [v5, zero, a0, v7, v8, a2, v6, a1, s11]
// [Asm]   call swap1l0_0  # live: [v5, zero, a0, v7, v8, v6, s11]
// [Asm]   mv v36, a0  # live: [v7, v6, v5, s11, zero, v8]
// [Asm]   # restore_ctx2  # live: [v7, v6, v5, s11, zero, v8]
// [Asm]   lw v37, 0(v5)  # live: [v7, v37, v6, s11, zero, v8]
// [Asm] # control
// [Asm]   mv v38, v37  # live: [v7, v38, v6, s11, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [t1, v7, ft0, ft1, v41, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v39, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v40], uses: [a0, v7, v8, v38, a2, v41, v6, a1, v39], upward_exposed: [v8, v38, v6, v7], params_defs: [v38]
// [Asm] # live_in: [zero, v7, v8, v38, v6, s11], live_out: [v8, v6, s11, zero, v7]
// [Asm] # block parameters: [v38]
// [Asm] .quicksort59l2_3_6:
// [Asm]   addi v39, v38, -1  # live: [zero, v8, v7, v38, v6, s11, v39]
// [Asm]   # save_ctx2  # live: [zero, v8, v7, v38, v6, s11, v39]
// [Asm]   mv a0, v6  # live: [zero, a0, v8, v7, v38, v6, s11, v39]
// [Asm]   mv a1, v7  # live: [zero, a0, v8, v38, a1, v6, s11, v39]
// [Asm]   mv a2, v39  # live: [zero, a0, v8, v38, a2, a1, v6, s11]
// [Asm]   call quicksort59l2_3  # live: [v38, v6, s11, zero, a0, v8]
// [Asm]   mv v40, a0  # live: [v38, v6, s11, zero, v8]
// [Asm]   # restore_ctx2  # live: [v38, v6, s11, zero, v8]
// [Asm]   addi v41, v38, 1  # live: [v41, v6, s11, zero, v8]
// [Asm] # control
// [Asm]   mv v6, v6  # live: [v41, v6, s11, zero, v8]
// [Asm]   mv v7, v41  # live: [v7, v6, s11, zero, v8]
// [Asm]   mv v8, v8  # live: [v7, v6, s11, zero, v8]
// [Asm]   j .quicksort59l2_3_0  # live: [v7, v6, s11, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v49], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v25, v5, zero, v26, v27, v23, v8, v7, v6, v24, s11], live_out: [v25, v5, v49, v26, zero, v27, v23, v8, v7, v6, v24, s11]
// [Asm] # block parameters: []
// [Asm] .quicksort59l2_3_21:
// [Asm] # control
// [Asm]   mv v49, zero  # live: [v25, v5, v49, v26, zero, v27, v23, v8, v7, v6, v24, s11]
// [Asm]   j .quicksort59l2_3_22  # live: [v25, v5, v49, v26, zero, v27, v23, v8, v7, v6, v24, s11]
// [Asm] 
// [Asm] # leaf false
// [Asm] output97l5_5:
// [Asm] # block info: defs: [v3, v7, v4, v6, v5, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .output97l5_5_5:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm]   mv v6, v3  # live: [v4, v5, v6, zero]
// [Asm]   mv v7, v4  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v8], uses: [v8, v5, v7], upward_exposed: [v5, v7], params_defs: [v5, v6, v7]
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: [v5, v6, v7]
// [Asm] .output97l5_5_0:
// [Asm]   addi v8, v7, -1  # live: [v8, v5, v6, zero, v7]
// [Asm] # control
// [Asm]   blt v8, v5, .output97l5_5_2  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v13, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, v19, a6, ft5, ft10, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v11, v5, v14, v18, a0, v7, v19, v6], upward_exposed: [v5, v6, v7], params_defs: []
// [Asm] # live_in: [v5, v6, zero, v7], live_out: [v5, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .output97l5_5_1:
// [Asm]   slliw v18, v5, 2  # live: [v6, v5, v18, zero, v7]
// [Asm]   add v19, v6, v18  # live: [v19, v6, v5, zero, v7]
// [Asm]   lw v11, 0(v19)  # live: [v11, v6, v5, zero, v7]
// [Asm]   # save_ctx2  # live: [v11, v6, v5, zero, v7]
// [Asm]   mv a0, v11  # live: [v6, v5, zero, a0, v7]
// [Asm]   call minimbt_print_int  # live: [v6, v5, zero, a0, v7]
// [Asm]   mv v12, a0  # live: [v6, v5, zero, v7]
// [Asm]   # restore_ctx2  # live: [v6, v5, zero, v7]
// [Asm]   # save_ctx2  # live: [v6, v5, zero, v7]
// [Asm]   call minimbt_print_endline  # live: [v6, v5, zero, a0, v7]
// [Asm]   mv v13, a0  # live: [v6, v5, zero, v7]
// [Asm]   # restore_ctx2  # live: [v6, v5, zero, v7]
// [Asm]   addi v14, v5, 1  # live: [v6, v14, zero, v7]
// [Asm] # control
// [Asm]   mv v5, v14  # live: [v5, v6, zero, v7]
// [Asm]   mv v6, v6  # live: [v5, v6, zero, v7]
// [Asm]   mv v7, v7  # live: [v5, v6, zero, v7]
// [Asm]   j .output97l5_5_0  # live: [v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .output97l5_5_2:
// [Asm] # control
// [Asm]   mv v10, zero  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .output97l5_5_3:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] swap1l0_0:
// [Asm] # block info: defs: [v3, v11, v16, v5, v14, v10, v13, a0, v17, v12, v9, v4, v6, v2], uses: [v2, v11, v16, v14, v5, v10, v13, a0, a2, v17, a1, v12, v9, zero, v4, v6, v3], upward_exposed: [a2, a1, a0, zero], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .swap1l0_0_0:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v3, a2, zero, v2]
// [Asm]   mv v4, a2  # live: [v3, v4, zero, v2]
// [Asm]   slliw v16, v3, 2  # live: [v3, v4, v16, zero, v2]
// [Asm]   add v17, v2, v16  # live: [v3, v4, v17, zero, v2]
// [Asm]   lw v5, 0(v17)  # live: [v3, v4, v5, zero, v2]
// [Asm]   slliw v13, v4, 2  # live: [v3, v4, v5, zero, v13, v2]
// [Asm]   add v14, v2, v13  # live: [v3, v4, v5, v14, zero, v2]
// [Asm]   lw v6, 0(v14)  # live: [v3, v4, v5, v6, zero, v2]
// [Asm]   slliw v11, v3, 2  # live: [v11, v4, v5, v6, zero, v2]
// [Asm]   add v12, v2, v11  # live: [v4, v5, v6, v12, zero, v2]
// [Asm]   sw v6, 0(v12)  # live: [v4, v5, zero, v2]
// [Asm]   slliw v9, v4, 2  # live: [v5, zero, v9, v2]
// [Asm]   add v10, v2, v9  # live: [v5, v10, zero]
// [Asm]   sw v5, 0(v10)  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_14  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main75l3_6:
// [Asm] # block info: defs: [v2, t1, v14, v13, v7, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v3, v14, a0, v13, zero, v8, a2, a1, v6, s11, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main75l3_6_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   # save_ctx2  # live: [s11, zero]
// [Asm]   call minimbt_read_int  # live: [s11, zero, a0]
// [Asm]   mv v3, a0  # live: [s11, zero, v3]
// [Asm]   # restore_ctx2  # live: [s11, zero, v3]
// [Asm]   slliw v13, v3, 2  # live: [s11, zero, v13, v3]
// [Asm]   sub v14, s11, v13  # live: [v14, zero, v3]
// [Asm]   andi v2, v14, -8  # live: [v2, zero, v3]
// [Asm]   mv s11, v2  # live: [v2, zero, v3]
// [Asm]   mv a1, v3  # live: [v2, a1, zero, v3]
// [Asm]   mv a0, v2  # live: [v2, a1, zero, a0, v3]
// [Asm]   mv a2, zero  # live: [v2, a2, a1, zero, a0, v3]
// [Asm]   call memseti32  # live: [v2, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, v3]
// [Asm]   mv a0, zero  # live: [v2, zero, a0, v3]
// [Asm]   mv a1, v2  # live: [v2, a1, zero, a0, v3]
// [Asm]   mv a2, v3  # live: [v2, a2, a1, zero, a0, v3]
// [Asm]   call input79l4_4  # live: [v2, zero, a0, v3]
// [Asm]   mv v5, a0  # live: [v2, zero, v3]
// [Asm]   # restore_ctx2  # live: [v2, zero, v3]
// [Asm]   addi v6, v3, -1  # live: [v2, v6, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, v6, zero, v3]
// [Asm]   mv a0, v2  # live: [v2, v6, zero, a0, v3]
// [Asm]   mv a1, zero  # live: [v2, a1, v6, zero, a0, v3]
// [Asm]   mv a2, v6  # live: [v2, a2, a1, zero, a0, v3]
// [Asm]   call quicksort59l2_3  # live: [v2, zero, a0, v3]
// [Asm]   mv v7, a0  # live: [v2, zero, v3]
// [Asm]   # restore_ctx2  # live: [v2, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, v3]
// [Asm]   mv a0, zero  # live: [v2, a0, v3]
// [Asm]   mv a1, v2  # live: [a1, a0, v3]
// [Asm]   mv a2, v3  # live: [a2, a1, a0]
// [Asm]   call output97l5_5  # live: [a0]
// [Asm]   mv v8, a0  # live: [v8]
// [Asm]   # restore_ctx2  # live: [v8]
// [Asm] # control
// [Asm]   mv a0, v8  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_14:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_14_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main75l3_6  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("swap", Unit), args: [("arr", Array(Int)), ("i", Int), ("j", Int)], body: Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j"))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit)))}, LetRec({name: ("partition", Int), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Var("high")), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Prim(Var("low"), Int(1), Sub, kind=Some(Int))), LetRec({name: ("l", Var({val: Some(Unit)})), args: [("j", Var({val: Some(Int)}))], body: If(LE(Var("j"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit), App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("l"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0))))))))}, LetRec({name: ("quicksort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: If(LE(Var("low"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("pi", Var({val: Some(Int)})), App(Var("partition"), [Var("arr"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Var("low"), Prim(Var("pi"), Int(1), Sub, kind=Some(Int))]), App(Var("quicksort"), [Var("arr"), Prim(Var("pi"), Int(1), Add, kind=Some(Int)), Var("high")]))), Unit)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)])))))))}, App(Var("main"), [])))))
// [Knf] build_knf: Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j"))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit)))
// [Knf] build_knf: Get(Var("arr"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j"))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit))
// [Knf] build_knf: Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j")))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("arr"), Var("j"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit)
// [Knf] build_knf: Put(Var("arr"), Var("j"), Var("tmp"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Var("tmp")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("partition", Int), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Var("high")), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Prim(Var("low"), Int(1), Sub, kind=Some(Int))), LetRec({name: ("l", Var({val: Some(Unit)})), args: [("j", Var({val: Some(Int)}))], body: If(LE(Var("j"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit), App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("l"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0))))))))}, LetRec({name: ("quicksort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: If(LE(Var("low"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("pi", Var({val: Some(Int)})), App(Var("partition"), [Var("arr"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Var("low"), Prim(Var("pi"), Int(1), Sub, kind=Some(Int))]), App(Var("quicksort"), [Var("arr"), Prim(Var("pi"), Int(1), Add, kind=Some(Int)), Var("high")]))), Unit)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)])))))))}, App(Var("main"), []))))
// [Knf] build_knf: Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Var("high")), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Prim(Var("low"), Int(1), Sub, kind=Some(Int))), LetRec({name: ("l", Var({val: Some(Unit)})), args: [("j", Var({val: Some(Int)}))], body: If(LE(Var("j"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit), App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("l"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0))))))))
// [Knf] build_knf: Get(Var("arr"), Var("high"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Prim(Var("low"), Int(1), Sub, kind=Some(Int))), LetRec({name: ("l", Var({val: Some(Unit)})), args: [("j", Var({val: Some(Int)}))], body: If(LE(Var("j"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit), App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("l"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0)))))))
// [Knf] build_knf: Array(Int(1), Prim(Var("low"), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Prim(Var("low"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("l", Var({val: Some(Unit)})), args: [("j", Var({val: Some(Int)}))], body: If(LE(Var("j"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit), App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("l"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0))))))
// [Knf] build_knf: If(LE(Var("j"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit), App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Var("high"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit), App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit)
// [Knf] build_knf: Get(Var("arr"), Var("j"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Var("pivot")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]))
// [Knf] build_knf: Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])
// [Knf] build_knf: Var("swap")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("l")
// [Knf] build_knf: Prim(Var("j"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("l"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0)))))
// [Knf] build_knf: App(Var("l"), [Var("low")])
// [Knf] build_knf: Var("l")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0))))
// [Knf] build_knf: Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0)))
// [Knf] build_knf: App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")])
// [Knf] build_knf: Var("swap")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("quicksort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: If(LE(Var("low"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("pi", Var({val: Some(Int)})), App(Var("partition"), [Var("arr"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Var("low"), Prim(Var("pi"), Int(1), Sub, kind=Some(Int))]), App(Var("quicksort"), [Var("arr"), Prim(Var("pi"), Int(1), Add, kind=Some(Int)), Var("high")]))), Unit)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)])))))))}, App(Var("main"), [])))
// [Knf] build_knf: If(LE(Var("low"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("pi", Var({val: Some(Int)})), App(Var("partition"), [Var("arr"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Var("low"), Prim(Var("pi"), Int(1), Sub, kind=Some(Int))]), App(Var("quicksort"), [Var("arr"), Prim(Var("pi"), Int(1), Add, kind=Some(Int)), Var("high")]))), Unit)
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Prim(Var("high"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("pi", Var({val: Some(Int)})), App(Var("partition"), [Var("arr"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Var("low"), Prim(Var("pi"), Int(1), Sub, kind=Some(Int))]), App(Var("quicksort"), [Var("arr"), Prim(Var("pi"), Int(1), Add, kind=Some(Int)), Var("high")])))
// [Knf] build_knf: App(Var("partition"), [Var("arr"), Var("low"), Var("high")])
// [Knf] build_knf: Var("partition")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Var("low"), Prim(Var("pi"), Int(1), Sub, kind=Some(Int))]), App(Var("quicksort"), [Var("arr"), Prim(Var("pi"), Int(1), Add, kind=Some(Int)), Var("high")]))
// [Knf] build_knf: App(Var("quicksort"), [Var("arr"), Var("low"), Prim(Var("pi"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("quicksort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Prim(Var("pi"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("pi")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("quicksort"), [Var("arr"), Prim(Var("pi"), Int(1), Add, kind=Some(Int)), Var("high")])
// [Knf] build_knf: Var("quicksort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("pi"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pi")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)])))))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)])))))))
// [Knf] build_knf: App(Var("read_int"), [])
// [Knf] build_knf: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)]))))))
// [Knf] build_knf: Array(Var("len"), Int(0))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)])))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("arr"), Var("i"), App(Var("read_int"), []))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("read_int"), [])
// [Knf] build_knf: App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("input")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)]))))
// [Knf] build_knf: App(Var("input"), [Int(0)])
// [Knf] build_knf: Var("input")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)])))
// [Knf] build_knf: App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("quicksort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)]))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: App(Var("print_int"), [Get(Var("arr"), Var("i"))])
// [Knf] build_knf: Get(Var("arr"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("output")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("output"), [Int(0)])
// [Knf] build_knf: Var("output")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memseti32
// [Main]   .type memseti32, @function
// [Main] memseti32:
// [Main]   blez a1, .memseti32_b1
// [Main]   slli a1, a1, 2
// [Main]   add a1, a1, a0
// [Main] .memseti32_b0:
// [Main]   sw a2, 0(a0)
// [Main]   addi a0, a0, 4
// [Main]   bne a0, a1, .memseti32_b0
// [Main] .memseti32_b1:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl input79l4_4
// [Main]   .type input79l4_4, @function
// [Main] # leaf false
// [Main] input79l4_4:
// [Main] .input79l4_4_5:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   mv s2, a2
// [Main] 
// [Main] .input79l4_4_0:
// [Main]   addi a0, s2, -1
// [Main]   blt a0, s0, .input79l4_4_2
// [Main] 
// [Main] .input79l4_4_1:
// [Main]   call minimbt_read_int
// [Main]   slliw a1, s0, 2
// [Main]   add a1, s1, a1
// [Main]   sw a0, 0(a1)
// [Main]   addi a0, s0, 1
// [Main]   mv s0, a0
// [Main]   j .input79l4_4_0
// [Main] 
// [Main] .input79l4_4_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .input79l4_4_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl quicksort59l2_3
// [Main]   .type quicksort59l2_3, @function
// [Main] # leaf false
// [Main] quicksort59l2_3:
// [Main] .quicksort59l2_3_5:
// [Main]   addi sp, sp, -64
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   mv s0, a0
// [Main]   mv s5, a1
// [Main]   mv s3, a2
// [Main] 
// [Main] .quicksort59l2_3_0:
// [Main]   addi a0, s3, -1
// [Main]   blt a0, s5, .quicksort59l2_3_2
// [Main] 
// [Main] .quicksort59l2_3_1:
// [Main]   mv a0, s0
// [Main]   mv a1, s5
// [Main]   mv a2, s3
// [Main] 
// [Main] .quicksort59l2_3_7:
// [Main]   slliw a0, s3, 2
// [Main]   add a0, s0, a0
// [Main]   lw a0, 0(a0)
// [Main]   addi a1, s5, -1
// [Main]   addi a2, s11, -4
// [Main]   andi s1, a2, -8
// [Main]   mv s11, s1
// [Main]   sw a1, 0(s1)
// [Main]   mv a1, s5
// [Main]   mv a2, s1
// [Main]   mv a3, s0
// [Main]   mv a4, s3
// [Main] 
// [Main] .quicksort59l2_3_25:
// [Main]   mv s4, s5
// [Main]   mv s2, a0
// [Main] 
// [Main] .quicksort59l2_3_17:
// [Main]   addi a0, s3, -1
// [Main]   blt a0, s4, .quicksort59l2_3_19
// [Main] 
// [Main] .quicksort59l2_3_18:
// [Main]   slliw a0, s4, 2
// [Main]   add a0, s0, a0
// [Main]   lw a0, 0(a0)
// [Main]   blt s2, a0, .quicksort59l2_3_21
// [Main] 
// [Main] .quicksort59l2_3_20:
// [Main]   lw a0, 0(s1)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s1)
// [Main]   lw a1, 0(s1)
// [Main]   mv a0, s0
// [Main]   mv a2, s4
// [Main]   call swap1l0_0
// [Main] 
// [Main] .quicksort59l2_3_22:
// [Main]   addi a0, s4, 1
// [Main]   mv s4, a0
// [Main]   j .quicksort59l2_3_17
// [Main] 
// [Main] .quicksort59l2_3_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .quicksort59l2_3_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   addi sp, sp, 64
// [Main]   ret
// [Main] 
// [Main] .quicksort59l2_3_19:
// [Main]   mv a0, zero
// [Main] 
// [Main] .quicksort59l2_3_23:
// [Main] 
// [Main] .quicksort59l2_3_8:
// [Main]   lw a0, 0(s1)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s1)
// [Main]   lw a1, 0(s1)
// [Main]   mv a0, s0
// [Main]   mv a2, s3
// [Main]   call swap1l0_0
// [Main]   lw a0, 0(s1)
// [Main]   mv s1, a0
// [Main] 
// [Main] .quicksort59l2_3_6:
// [Main]   addi a2, s1, -1
// [Main]   mv a0, s0
// [Main]   mv a1, s5
// [Main]   call quicksort59l2_3
// [Main]   addi a0, s1, 1
// [Main]   mv s5, a0
// [Main]   j .quicksort59l2_3_0
// [Main] 
// [Main] .quicksort59l2_3_21:
// [Main]   mv a0, zero
// [Main]   j .quicksort59l2_3_22
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl output97l5_5
// [Main]   .type output97l5_5, @function
// [Main] # leaf false
// [Main] output97l5_5:
// [Main] .output97l5_5_5:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s1, a0
// [Main]   mv s0, a1
// [Main]   mv s2, a2
// [Main] 
// [Main] .output97l5_5_0:
// [Main]   addi a0, s2, -1
// [Main]   blt a0, s1, .output97l5_5_2
// [Main] 
// [Main] .output97l5_5_1:
// [Main]   slliw a0, s1, 2
// [Main]   add a0, s0, a0
// [Main]   lw a0, 0(a0)
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   addi a0, s1, 1
// [Main]   mv s1, a0
// [Main]   j .output97l5_5_0
// [Main] 
// [Main] .output97l5_5_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .output97l5_5_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl swap1l0_0
// [Main]   .type swap1l0_0, @function
// [Main] # leaf true
// [Main] swap1l0_0:
// [Main] .swap1l0_0_0:
// [Main]   slliw a3, a1, 2
// [Main]   add a3, a0, a3
// [Main]   lw a3, 0(a3)
// [Main]   slliw a4, a2, 2
// [Main]   add a4, a0, a4
// [Main]   lw a4, 0(a4)
// [Main]   slliw a1, a1, 2
// [Main]   add a1, a0, a1
// [Main]   sw a4, 0(a1)
// [Main]   slliw a1, a2, 2
// [Main]   add a0, a0, a1
// [Main]   sw a3, 0(a0)
// [Main]   mv a0, zero
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_14
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main75l3_6
// [Main]   .type main75l3_6, @function
// [Main] # leaf false
// [Main] main75l3_6:
// [Main] .main75l3_6_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   call minimbt_read_int
// [Main]   mv s0, a0
// [Main]   slliw a0, s0, 2
// [Main]   sub a0, s11, a0
// [Main]   andi s1, a0, -8
// [Main]   mv s11, s1
// [Main]   mv a1, s0
// [Main]   mv a0, s1
// [Main]   mv a2, zero
// [Main]   call memseti32
// [Main]   mv a0, zero
// [Main]   mv a1, s1
// [Main]   mv a2, s0
// [Main]   call input79l4_4
// [Main]   addi a2, s0, -1
// [Main]   mv a0, s1
// [Main]   mv a1, zero
// [Main]   call quicksort59l2_3
// [Main]   mv a0, zero
// [Main]   mv a1, s1
// [Main]   mv a2, s0
// [Main]   call output97l5_5
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_14
// [Main]   .type T$start_14, @function
// [Main] # leaf false
// [Main] T$start_14:
// [Main] .T$start_14_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main75l3_6
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function main75l3_6
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_int", args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Int32(val=0))])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Mem(fref=f6, mref=m0) -> $f6.m0
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[Int32(val=0), Mem(fref=f6, mref=m0), Insn(iref=%0)])
// [Wasm] Get Local name Mem(fref=f6, mref=m0) -> $f6.m0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Call(ty=Unit, f=f3, args=[Mem(fref=f6, mref=m0), Int32(val=0), Insn(iref=%3)])
// [Wasm] Get Local name Mem(fref=f6, mref=m0) -> $f6.m0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Call(ty=Unit, f=f5, args=[Int32(val=0), Mem(fref=f6, mref=m0), Insn(iref=%0)])
// [Wasm] Get Local name Mem(fref=f6, mref=m0) -> $f6.m0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%5)])
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Mem(fref=f6, mref=m0) -> $f6.m0
// [Wasm] Lowered function main75l3_6 to wasm
// [Wasm] Lowering function input79l4_4
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_int", args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), offset=BlockParam(bref=b0, bpref=$b.0), width=@32), val=Insn(iref=%2))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%4), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f4, fpref=$f.0), FnParam(fref=f4, fpref=$f.1), FnParam(fref=f4, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function input79l4_4 to wasm
// [Wasm] Lowering function output97l5_5
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), offset=BlockParam(bref=b0, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%5), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f5, fpref=$f.0), FnParam(fref=f5, fpref=$f.1), FnParam(fref=f5, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function output97l5_5 to wasm
// [Wasm] Lowering function quicksort59l2_3
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b17, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b17, bpref=$b.0) -> $b17.$b.0
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering control Jump(target=b17, args=[Insn(iref=%25), BlockParam(bref=b17, bpref=$b.1), BlockParam(bref=b17, bpref=$b.2), BlockParam(bref=b17, bpref=$b.3), BlockParam(bref=b17, bpref=$b.4)])
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Get Local name BlockParam(bref=b17, bpref=$b.0) -> $b17.$b.0
// [Wasm] Get Local name BlockParam(bref=b17, bpref=$b.1) -> $b17.$b.1
// [Wasm] Get Local name BlockParam(bref=b17, bpref=$b.1) -> $b17.$b.1
// [Wasm] Get Local name BlockParam(bref=b17, bpref=$b.2) -> $b17.$b.2
// [Wasm] Get Local name BlockParam(bref=b17, bpref=$b.2) -> $b17.$b.2
// [Wasm] Get Local name BlockParam(bref=b17, bpref=$b.3) -> $b17.$b.3
// [Wasm] Get Local name BlockParam(bref=b17, bpref=$b.3) -> $b17.$b.3
// [Wasm] Get Local name BlockParam(bref=b17, bpref=$b.4) -> $b17.$b.4
// [Wasm] Get Local name BlockParam(bref=b17, bpref=$b.4) -> $b17.$b.4
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b17, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b17, bpref=$b.1) -> $b17.$b.1
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%20), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b17, bpref=$b.1), index=0, width=@32), val=Insn(iref=%21))
// [Wasm] Get Local name BlockParam(bref=b17, bpref=$b.1) -> $b17.$b.1
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b17, bpref=$b.1), index=0, width=@32))
// [Wasm] Get Local name BlockParam(bref=b17, bpref=$b.1) -> $b17.$b.1
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[BlockParam(bref=b17, bpref=$b.2), Insn(iref=%23), BlockParam(bref=b17, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b17, bpref=$b.2) -> $b17.$b.2
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name BlockParam(bref=b17, bpref=$b.0) -> $b17.$b.0
// [Wasm] Lowering control Jump(target=b22, args=[Insn(iref=%24)])
// [Wasm] Lowering control Jump(target=b22, args=[Unit])
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b17, bpref=$b.2), offset=BlockParam(bref=b17, bpref=$b.0), width=@32))
// [Wasm] Get Local name BlockParam(bref=b17, bpref=$b.2) -> $b17.$b.2
// [Wasm] Get Local name BlockParam(bref=b17, bpref=$b.0) -> $b17.$b.0
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%18), BlockParam(bref=b17, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name BlockParam(bref=b17, bpref=$b.3) -> $b17.$b.3
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering control Branch(cond=Insn(iref=%19), t=b20, t_args=[], f=b21, f_args=[])
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b6, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Call(ty=Unit, f=f3, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%3)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b6, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%5), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f3, mref=m7), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f3, mref=m7) -> $f3.m7
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%10), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f3, mref=m7), index=0, width=@32), val=Insn(iref=%11))
// [Wasm] Get Local name Mem(fref=f3, mref=m7) -> $f3.m7
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f3, mref=m7), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f3, mref=m7) -> $f3.m7
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%13), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f3, mref=m7), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f3, mref=m7) -> $f3.m7
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering control Jump(target=b6, args=[Insn(iref=%15)])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b8, args=[BlockParam(bref=b23, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b23, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b17, bpref=$b.4), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b17, bpref=$b.4) -> $b17.$b.4
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b17, bpref=$b.0), Insn(iref=%16)])
// [Wasm] Get Local name BlockParam(bref=b17, bpref=$b.0) -> $b17.$b.0
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering control Branch(cond=Insn(iref=%17), t=b18, t_args=[], f=b19, f_args=[])
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering control Jump(target=b24, args=[BlockParam(bref=b0, bpref=$b.1), Mem(fref=f3, mref=m7), BlockParam(bref=b0, bpref=$b.0), Insn(iref=%6), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b17, bpref=$b.0) -> $b17.$b.0
// [Wasm] Get Local name Mem(fref=f3, mref=m7) -> $f3.m7
// [Wasm] Get Local name BlockParam(bref=b17, bpref=$b.1) -> $b17.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b17, bpref=$b.2) -> $b17.$b.2
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name BlockParam(bref=b17, bpref=$b.3) -> $b17.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b17, bpref=$b.4) -> $b17.$b.4
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.0), offset=BlockParam(bref=b0, bpref=$b.2), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m7, fills=[Init(val=Insn(iref=%7))])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Mem(fref=f3, mref=m7) -> $f3.m7
// [Wasm] Lowering control Jump(target=b25, args=[BlockParam(bref=b0, bpref=$b.1), Mem(fref=f3, mref=m7), BlockParam(bref=b0, bpref=$b.0), Insn(iref=%6), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.0) -> $b25.$b.0
// [Wasm] Get Local name Mem(fref=f3, mref=m7) -> $f3.m7
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.1) -> $b25.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.2) -> $b25.$b.2
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.3) -> $b25.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b25, bpref=$b.4) -> $b25.$b.4
// [Wasm] Lowering control Jump(target=b7, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.2) -> $b7.$b.2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f3, fpref=$f.0), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Local BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b25, bpref=$b.3) -> $b25.$b.3
// [Wasm] Local Insn(iref=%25) -> $%25
// [Wasm] Local BlockParam(bref=b25, bpref=$b.0) -> $b25.$b.0
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local BlockParam(bref=b25, bpref=$b.2) -> $b25.$b.2
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local BlockParam(bref=b25, bpref=$b.1) -> $b25.$b.1
// [Wasm] Local BlockParam(bref=b17, bpref=$b.2) -> $b17.$b.2
// [Wasm] Local BlockParam(bref=b7, bpref=$b.2) -> $b7.$b.2
// [Wasm] Local BlockParam(bref=b17, bpref=$b.0) -> $b17.$b.0
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local BlockParam(bref=b17, bpref=$b.4) -> $b17.$b.4
// [Wasm] Local BlockParam(bref=b17, bpref=$b.3) -> $b17.$b.3
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local BlockParam(bref=b17, bpref=$b.1) -> $b17.$b.1
// [Wasm] Local Mem(fref=f3, mref=m7) -> $f3.m7
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local BlockParam(bref=b25, bpref=$b.4) -> $b25.$b.4
// [Wasm] Lowered function quicksort59l2_3 to wasm
// [Wasm] Lowering function T$start_14
// [Wasm] Lowering insn Call(ty=Unit, f=f6, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start_14 to wasm
// [Wasm] Lowering function swap1l0_0
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f0, fpref=$f.0), offset=FnParam(fref=f0, fpref=$f.1), width=@32))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f0, fpref=$f.0), offset=FnParam(fref=f0, fpref=$f.2), width=@32))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f0, fpref=$f.0), offset=FnParam(fref=f0, fpref=$f.1), width=@32), val=Insn(iref=%1))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f0, fpref=$f.0), offset=FnParam(fref=f0, fpref=$f.2), width=@32), val=Insn(iref=%0))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function swap1l0_0 to wasm
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %5: Call(ty=Unit, f=f4, args=[Insn(iref=%4), FnParam(fref=f4, fpref=$f.1), FnParam(fref=f4, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %10: Call(ty=Unit, f=f1, args=[Insn(iref=%9), FnParam(fref=f1, fpref=$f.1), FnParam(fref=f1, fpref=$f.2), FnParam(fref=f1, fpref=$f.3), FnParam(fref=f1, fpref=$f.4)])
// [CoreOpt] eliminated tail rec call %6: Call(ty=Unit, f=f5, args=[Insn(iref=%5), FnParam(fref=f5, fpref=$f.1), FnParam(fref=f5, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %6: Call(ty=Unit, f=f3, args=[FnParam(fref=f3, fpref=$f.0), Insn(iref=%5), FnParam(fref=f3, fpref=$f.2)])
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f4: Once, f1: Once, f5: Once, f2: Once, f3: Multiple, f14: Once, f0: Multiple})
// [CoreOpt] post splitting: Insn(iref=%3) -> BlockParam(bref=b1, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] partition14l1_2 is inlining Call(ty=Unit, f=f1, args=[FnParam(fref=f2, fpref=$f.1), Mem(fref=f2, mref=m0), FnParam(fref=f2, fpref=$f.0), Insn(iref=%0), FnParam(fref=f2, fpref=$f.2)])
// [CoreOpt] shifted callee .fn l26l2_1 #f1 : fn(int32, array[int32], array[int32], int32, int32) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b18 {
// [CoreOpt]   .bb #b10 (int32, array[int32], array[int32], int32, int32) {
// [CoreOpt]     let %10: int32 = sub($b10.4, 1)
// [CoreOpt]     let %11: bool = le($b10.0, %10)
// [CoreOpt]     br %11 b11() b12()
// [CoreOpt]   }
// [CoreOpt]   .bb #b11 () {
// [CoreOpt]     let %12: int32 = load int32 offset($b10.2, $b10.0 * @32)
// [CoreOpt]     let %13: bool = le(%12, $b10.3)
// [CoreOpt]     br %13 b13() b14()
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 () {
// [CoreOpt]     jump b16(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b13 () {
// [CoreOpt]     let %14: int32 = load int32 field($b10.1, 0 * @32)
// [CoreOpt]     let %15: int32 = add(%14, 1)
// [CoreOpt]     let _ = store int32 field($b10.1, 0 * @32) <- %15
// [CoreOpt]     let %17: int32 = load int32 field($b10.1, 0 * @32)
// [CoreOpt]     let %18: unit = call f0($b10.2, %17, $b10.0)
// [CoreOpt]     jump b15(%18)
// [CoreOpt]   }
// [CoreOpt]   .bb #b14 () {
// [CoreOpt]     jump b15(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b15 (unit) {
// [CoreOpt]     let %19: int32 = add($b10.0, 1)
// [CoreOpt]     jump b10(%19, $b10.1, $b10.2, $b10.3, $b10.4)
// [CoreOpt]   }
// [CoreOpt]   .bb #b16 (unit) {
// [CoreOpt]     return $b16.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b17 header #b10 {
// [CoreOpt]     .block #b16
// [CoreOpt]     .block #b14
// [CoreOpt]     .block #b11
// [CoreOpt]     .block #b15
// [CoreOpt]     .block #b12
// [CoreOpt]     .block #b13
// [CoreOpt]   }
// [CoreOpt]   .bb #b18 () {
// [CoreOpt]     jump b17($f0, $f1, $f2, $f3, $f4)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] quicksort59l2_3 is inlining Call(ty=Int32, f=f2, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [CoreOpt] shifted callee .fn partition14l1_2 #f2 : fn(array[int32], int32, int32) -> int32
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b7 {
// [CoreOpt]   .bb #b7 () {
// [CoreOpt]     let %6: int32 = load int32 offset($f0, $f2 * @32)
// [CoreOpt]     let %7: int32 = sub($f1, 1)
// [CoreOpt]     let _ = alloc <m7: array[int32] heap(1)> <- [..] = %7
// [CoreOpt]     jump b25($f1, f2.m7, $f0, %6, $f2)
// [CoreOpt]   }
// [CoreOpt]   .bb #b8 (unit) {
// [CoreOpt]     let %10: int32 = load int32 field(f2.m7, 0 * @32)
// [CoreOpt]     let %11: int32 = add(%10, 1)
// [CoreOpt]     let _ = store int32 field(f2.m7, 0 * @32) <- %11
// [CoreOpt]     let %13: int32 = load int32 field(f2.m7, 0 * @32)
// [CoreOpt]     let %14: unit = call f0($f0, %13, $f2)
// [CoreOpt]     let %15: int32 = load int32 field(f2.m7, 0 * @32)
// [CoreOpt]     return %15
// [CoreOpt]   }
// [CoreOpt]   .bb #b17 (int32, array[int32], array[int32], int32, int32) {
// [CoreOpt]     let %16: int32 = sub($b17.4, 1)
// [CoreOpt]     let %17: bool = le($b17.0, %16)
// [CoreOpt]     br %17 b18() b19()
// [CoreOpt]   }
// [CoreOpt]   .bb #b18 () {
// [CoreOpt]     let %18: int32 = load int32 offset($b17.2, $b17.0 * @32)
// [CoreOpt]     let %19: bool = le(%18, $b17.3)
// [CoreOpt]     br %19 b20() b21()
// [CoreOpt]   }
// [CoreOpt]   .bb #b19 () {
// [CoreOpt]     jump b23(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b20 () {
// [CoreOpt]     let %20: int32 = load int32 field($b17.1, 0 * @32)
// [CoreOpt]     let %21: int32 = add(%20, 1)
// [CoreOpt]     let _ = store int32 field($b17.1, 0 * @32) <- %21
// [CoreOpt]     let %23: int32 = load int32 field($b17.1, 0 * @32)
// [CoreOpt]     let %24: unit = call f0($b17.2, %23, $b17.0)
// [CoreOpt]     jump b22(%24)
// [CoreOpt]   }
// [CoreOpt]   .bb #b21 () {
// [CoreOpt]     jump b22(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b22 (unit) {
// [CoreOpt]     let %25: int32 = add($b17.0, 1)
// [CoreOpt]     jump b17(%25, $b17.1, $b17.2, $b17.3, $b17.4)
// [CoreOpt]   }
// [CoreOpt]   .bb #b23 (unit) {
// [CoreOpt]     jump b8($b23.0)
// [CoreOpt]   }
// [CoreOpt]   .loop #b24 header #b17 {
// [CoreOpt]     .block #b23
// [CoreOpt]     .block #b21
// [CoreOpt]     .block #b18
// [CoreOpt]     .block #b22
// [CoreOpt]     .block #b19
// [CoreOpt]     .block #b20
// [CoreOpt]   }
// [CoreOpt]   .bb #b25 (int32, array[int32], array[int32], int32, int32) {
// [CoreOpt]     jump b24($f1, f2.m7, $f0, %6, $f2)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f1
// [CoreOpt] Remove dead function: f2
