let rec init_arr.4497: Unit = (i.3576: Int, _224: Int, arr.3574: Array(Int)) {
  let join init_arr.3577: Unit = (i.3578: Int) {
    let _3579: Int = Int(1)
    let _3580: Int = Sub(_224, _3579)
    if (i.3578 <= _3580) then {
      let _3581: Unit = Put arr.3574[i.3578] = i.3578
      let _3582: Int = Int(1)
      let _3583: Int = Add(i.3578, _3582)
      Jump(init_arr.3577, [_3583, ])
    } else {
      Unit
    }
  }
  Jump(init_arr.3577, [i.3576, ])
}
let rec copy_perm.4498: Unit = (i.4212: Int, _224: Int, arr.3574: Array(Int), perm.2350: Array(Int)) {
  let join copy_perm.4213: Unit = (i.4214: Int) {
    let _4215: Int = Int(1)
    let _4216: Int = Sub(_224, _4215)
    if (i.4214 <= _4216) then {
      let _4217: Int = Get arr.3574[i.4214]
      let _4218: Unit = Put perm.2350[i.4214] = _4217
      let _4219: Int = Int(1)
      let _4220: Int = Add(i.4214, _4219)
      Jump(copy_perm.4213, [_4220, ])
    } else {
      Unit
    }
  }
  Jump(copy_perm.4213, [i.4212, ])
}
let rec init_count.4499: Unit = (r.4207: Array(Int), count.2352: Array(Int)) {
  let _4224: Int = Int(0)
  let _4225: Int = Get r.4207[_4224]
  let _4226: Int = Int(1)
  if (_4225 == _4226) then {
    let _4227: Unit = Unit
    Unit
  } else {
    let _4228: Int = Int(0)
    let _4229: Int = Get r.4207[_4228]
    let _4230: Int = Int(1)
    let _4231: Int = Sub(_4229, _4230)
    let _4232: Int = Int(0)
    let _4233: Int = Get r.4207[_4232]
    let _4234: Unit = Put count.2352[_4231] = _4233
    let _4235: Int = Int(0)
    let _4236: Int = Int(0)
    let _4237: Int = Get r.4207[_4236]
    let _4238: Int = Int(1)
    let _4239: Int = Sub(_4237, _4238)
    let _4240: Unit = Put r.4207[_4235] = _4239
    let _4241: Unit = Apply(init_count.4499, [r.4207, count.2352, ])
    Unit
  }
}
let rec flip_loop.4501: Unit = (i.4261: Int, k.4253: Array(Int), t.4259: Array(Int), perm.2350: Array(Int)) {
  let join flip_loop.4262: Unit = (i.4263: Int) {
    let _4264: Int = Int(0)
    let _4265: Int = Get k.4253[_4264]
    let _4266: Int = Int(2)
    let _4267: Int = Div(_4265, _4266)
    if (i.4263 <= _4267) then {
      let _4268: Int = Int(0)
      let _4269: Int = Get perm.2350[i.4263]
      let _4270: Unit = Put t.4259[_4268] = _4269
      let _4271: Int = Int(0)
      let _4272: Int = Get k.4253[_4271]
      let _4273: Int = Sub(_4272, i.4263)
      let _4274: Int = Get perm.2350[_4273]
      let _4275: Unit = Put perm.2350[i.4263] = _4274
      let _4276: Int = Int(0)
      let _4277: Int = Get k.4253[_4276]
      let _4278: Int = Sub(_4277, i.4263)
      let _4279: Int = Int(0)
      let _4280: Int = Get t.4259[_4279]
      let _4281: Unit = Put perm.2350[_4278] = _4280
      let _4282: Int = Int(1)
      let _4283: Int = Add(i.4263, _4282)
      Jump(flip_loop.4262, [_4283, ])
    } else {
      Unit
    }
  }
  Jump(flip_loop.4262, [i.4261, ])
}
let rec do_flip.4500: Unit = (k.4251: Array(Int), perm.2350: Array(Int), flips.2355: Array(Int)) {
  let join do_flip.4252: Unit = (k.4253: Array(Int)) {
    let _4254: Int = Int(0)
    let _4255: Int = Get k.4253[_4254]
    let _4256: Int = Int(0)
    if (_4255 == _4256) then {
      Unit
    } else {
      let _4257: Int = Int(1)
      let _4258: Int = Int(0)
      let t.4259: Array(Int) = ExtApply(minimbt_create_array, [_4257, _4258, ])
      let _4284: Int = Int(0)
      let _4285: Unit = Apply(flip_loop.4501, [_4284, k.4253, t.4259, perm.2350, ])
      let _4286: Int = Int(0)
      let _4287: Int = Int(0)
      let _4288: Int = Get perm.2350[_4287]
      let _4289: Unit = Put k.4253[_4286] = _4288
      let _4290: Int = Int(0)
      let _4291: Int = Int(0)
      let _4292: Int = Get flips.2355[_4291]
      let _4293: Int = Int(1)
      let _4294: Int = Add(_4292, _4293)
      let _4295: Unit = Put flips.2355[_4290] = _4294
      Jump(do_flip.4252, [k.4253, ])
    }
  }
  Jump(do_flip.4252, [k.4251, ])
}
let rec move_perm1_forward.4503: Unit = (i.4351: Int, r.4207: Array(Int), arr.3574: Array(Int)) {
  let _4352: Int = Int(0)
  let _4353: Int = Get r.4207[_4352]
  let _4354: Int = Int(1)
  let _4355: Int = Sub(_4353, _4354)
  if (i.4351 <= _4355) then {
    let _4356: Int = Int(1)
    let _4357: Int = Add(i.4351, _4356)
    let _4358: Int = Get arr.3574[_4357]
    let _4359: Unit = Put arr.3574[i.4351] = _4358
    let _4360: Int = Int(1)
    let _4361: Int = Add(i.4351, _4360)
    let _4362: Unit = Apply(move_perm1_forward.4503, [_4361, r.4207, arr.3574, ])
    Unit
  } else {
    Unit
  }
}
let rec go_loop.4502: Unit = (_224: Int, r.4207: Array(Int), t.4331: Array(Int), go.4328: Array(Bool), arr.3574: Array(Int), count.2352: Array(Int)) {
  let join go_loop.4333: Unit = () {
    let _4334: Int = Int(0)
    let _4335: Bool = Get go.4328[_4334]
    let _4336: Bool = Bool(true)
    if (_4335 == _4336) then {
      let _4337: Int = Int(0)
      let _4338: Int = Get r.4207[_4337]
      if (_4338 == _224) then {
        let _4339: Int = Int(0)
        let _4340: Bool = Bool(false)
        let _4341: Unit = Put go.4328[_4339] = _4340
        let _4342: Int = Int(0)
        let _4343: Int = Int(0)
        let _4344: Unit = Put r.4207[_4342] = _4343
        let _4345: Unit = Unit
        Jump(go_loop.4333, [])
      } else {
        let _4346: Int = Int(0)
        let _4347: Int = Int(0)
        let _4348: Int = Get arr.3574[_4347]
        let _4349: Unit = Put t.4331[_4346] = _4348
        let _4363: Int = Int(0)
        let _4364: Unit = Apply(move_perm1_forward.4503, [_4363, r.4207, arr.3574, ])
        let _4365: Int = Int(0)
        let _4366: Int = Get r.4207[_4365]
        let _4367: Int = Int(0)
        let _4368: Int = Get t.4331[_4367]
        let _4369: Unit = Put arr.3574[_4366] = _4368
        let _4370: Int = Int(0)
        let _4371: Int = Get r.4207[_4370]
        let _4372: Int = Int(0)
        let _4373: Int = Get r.4207[_4372]
        let _4374: Int = Get count.2352[_4373]
        let _4375: Int = Int(1)
        let _4376: Int = Sub(_4374, _4375)
        let _4377: Unit = Put count.2352[_4371] = _4376
        let _4378: Int = Int(1)
        let _4379: Int = Int(0)
        let _4380: Int = Get r.4207[_4379]
        let _4381: Int = Get count.2352[_4380]
        if (_4378 <= _4381) then {
          let _4382: Int = Int(0)
          let _4383: Bool = Bool(false)
          let _4384: Unit = Put go.4328[_4382] = _4383
          let _4385: Unit = Unit
          Jump(go_loop.4333, [])
        } else {
          let _4386: Int = Int(0)
          let _4387: Int = Int(0)
          let _4388: Int = Get r.4207[_4387]
          let _4389: Int = Int(1)
          let _4390: Int = Add(_4388, _4389)
          let _4391: Unit = Put r.4207[_4386] = _4390
          let _4392: Unit = Unit
          Jump(go_loop.4333, [])
        }
      }
    } else {
      Unit
    }
  }
  Jump(go_loop.4333, [])
}
let rec move_perm1_forward.4505: Unit = (i.4447: Int, r.4207: Array(Int), arr.3574: Array(Int)) {
  let _4448: Int = Int(0)
  let _4449: Int = Get r.4207[_4448]
  let _4450: Int = Int(1)
  let _4451: Int = Sub(_4449, _4450)
  if (i.4447 <= _4451) then {
    let _4452: Int = Int(1)
    let _4453: Int = Add(i.4447, _4452)
    let _4454: Int = Get arr.3574[_4453]
    let _4455: Unit = Put arr.3574[i.4447] = _4454
    let _4456: Int = Int(1)
    let _4457: Int = Add(i.4447, _4456)
    let _4458: Unit = Apply(move_perm1_forward.4505, [_4457, r.4207, arr.3574, ])
    Unit
  } else {
    Unit
  }
}
let rec go_loop.4504: Unit = (_224: Int, r.4207: Array(Int), t.4427: Array(Int), go.4424: Array(Bool), arr.3574: Array(Int), count.2352: Array(Int)) {
  let join go_loop.4429: Unit = () {
    let _4430: Int = Int(0)
    let _4431: Bool = Get go.4424[_4430]
    let _4432: Bool = Bool(true)
    if (_4431 == _4432) then {
      let _4433: Int = Int(0)
      let _4434: Int = Get r.4207[_4433]
      if (_4434 == _224) then {
        let _4435: Int = Int(0)
        let _4436: Bool = Bool(false)
        let _4437: Unit = Put go.4424[_4435] = _4436
        let _4438: Int = Int(0)
        let _4439: Int = Int(0)
        let _4440: Unit = Put r.4207[_4438] = _4439
        let _4441: Unit = Unit
        Jump(go_loop.4429, [])
      } else {
        let _4442: Int = Int(0)
        let _4443: Int = Int(0)
        let _4444: Int = Get arr.3574[_4443]
        let _4445: Unit = Put t.4427[_4442] = _4444
        let _4459: Int = Int(0)
        let _4460: Unit = Apply(move_perm1_forward.4505, [_4459, r.4207, arr.3574, ])
        let _4461: Int = Int(0)
        let _4462: Int = Get r.4207[_4461]
        let _4463: Int = Int(0)
        let _4464: Int = Get t.4427[_4463]
        let _4465: Unit = Put arr.3574[_4462] = _4464
        let _4466: Int = Int(0)
        let _4467: Int = Get r.4207[_4466]
        let _4468: Int = Int(0)
        let _4469: Int = Get r.4207[_4468]
        let _4470: Int = Get count.2352[_4469]
        let _4471: Int = Int(1)
        let _4472: Int = Sub(_4470, _4471)
        let _4473: Unit = Put count.2352[_4467] = _4472
        let _4474: Int = Int(1)
        let _4475: Int = Int(0)
        let _4476: Int = Get r.4207[_4475]
        let _4477: Int = Get count.2352[_4476]
        if (_4474 <= _4477) then {
          let _4478: Int = Int(0)
          let _4479: Bool = Bool(false)
          let _4480: Unit = Put go.4424[_4478] = _4479
          let _4481: Unit = Unit
          Jump(go_loop.4429, [])
        } else {
          let _4482: Int = Int(0)
          let _4483: Int = Int(0)
          let _4484: Int = Get r.4207[_4483]
          let _4485: Int = Int(1)
          let _4486: Int = Add(_4484, _4485)
          let _4487: Unit = Put r.4207[_4482] = _4486
          let _4488: Unit = Unit
          Jump(go_loop.4429, [])
        }
      }
    } else {
      Unit
    }
  }
  Jump(go_loop.4429, [])
}
let rec main.4496: Var({val: Some(Unit)}) = () {
  let _224: Int = Int(9)
  let _3573: Int = Int(0)
  let arr.3574: Array(Int) = ExtApply(minimbt_create_array, [_224, _3573, ])
  let _3584: Int = Int(0)
  let _3585: Unit = Apply(init_arr.4497, [_3584, _224, arr.3574, ])
  let _2349: Int = Int(0)
  let perm.2350: Array(Int) = ExtApply(minimbt_create_array, [_224, _2349, ])
  let _2351: Int = Int(0)
  let count.2352: Array(Int) = ExtApply(minimbt_create_array, [_224, _2351, ])
  let _2353: Int = Int(1)
  let _2354: Int = Int(0)
  let flips.2355: Array(Int) = ExtApply(minimbt_create_array, [_2353, _2354, ])
  let _2356: Int = Int(1)
  let _2357: Int = Int(0)
  let max_flips.2358: Array(Int) = ExtApply(minimbt_create_array, [_2356, _2357, ])
  let _2359: Int = Int(1)
  let _2360: Int = Int(0)
  let check_sum.2361: Array(Int) = ExtApply(minimbt_create_array, [_2359, _2360, ])
  let _2362: Int = Int(1)
  let _2363: Int = Int(0)
  let nperm.2364: Array(Int) = ExtApply(minimbt_create_array, [_2362, _2363, ])
  let _2365: Int = Int(1)
  let r.2366: Array(Int) = ExtApply(minimbt_create_array, [_2365, _224, ])
  let join compute.4206: Unit = (r.4207: Array(Int)) {
    let _4208: Int = Int(1)
    let _4209: Int = Int(0)
    let _4210: Int = Get r.4207[_4209]
    if (_4208 <= _4210) then {
      let _4221: Int = Int(0)
      let _4222: Unit = Apply(copy_perm.4498, [_4221, _224, arr.3574, perm.2350, ])
      let _4242: Unit = Apply(init_count.4499, [r.4207, count.2352, ])
      let _4243: Int = Int(0)
      let _4244: Int = Int(0)
      let _4245: Unit = Put flips.2355[_4243] = _4244
      let _4246: Int = Int(1)
      let _4247: Int = Int(0)
      let _4248: Int = Get perm.2350[_4247]
      let k.4249: Array(Int) = ExtApply(minimbt_create_array, [_4246, _4248, ])
      let _4296: Unit = Apply(do_flip.4500, [k.4249, perm.2350, flips.2355, ])
      let _4297: Int = Int(0)
      let _4298: Int = Get max_flips.2358[_4297]
      let _4299: Int = Int(0)
      let _4300: Int = Get flips.2355[_4299]
      if (_4298 <= _4300) then {
        let _4301: Int = Int(0)
        let _4302: Int = Int(0)
        let _4303: Int = Get flips.2355[_4302]
        let _4304: Unit = Put max_flips.2358[_4301] = _4303
        let _4305: Int = Int(0)
        let _4306: Int = Int(0)
        let _4307: Int = Get check_sum.2361[_4306]
        let _4308: Int = Int(0)
        let _4309: Int = Get flips.2355[_4308]
        let _4310: Int = Int(1)
        let _4311: Int = Int(0)
        let _4312: Int = Get nperm.2364[_4311]
        let _4313: Int = Int(0)
        let _4314: Int = Get nperm.2364[_4313]
        let _4315: Int = Int(2)
        let _4316: Int = Div(_4314, _4315)
        let _4317: Int = Int(2)
        let _4318: Int = Mul(_4316, _4317)
        let _4319: Int = Sub(_4312, _4318)
        let _4320: Int = Int(2)
        let _4321: Int = Mul(_4319, _4320)
        let _4322: Int = Sub(_4310, _4321)
        let _4323: Int = Mul(_4309, _4322)
        let _4324: Int = Add(_4307, _4323)
        let _4325: Unit = Put check_sum.2361[_4305] = _4324
        let _4326: Int = Int(1)
        let _4327: Bool = Bool(true)
        let go.4328: Array(Bool) = ExtApply(minimbt_create_array, [_4326, _4327, ])
        let _4329: Int = Int(1)
        let _4330: Int = Int(0)
        let t.4331: Array(Int) = ExtApply(minimbt_create_array, [_4329, _4330, ])
        let _4393: Unit = Apply(go_loop.4502, [_224, r.4207, t.4331, go.4328, arr.3574, count.2352, ])
        let _4394: Int = Int(0)
        let _4395: Int = Int(0)
        let _4396: Int = Get nperm.2364[_4395]
        let _4397: Int = Int(1)
        let _4398: Int = Add(_4396, _4397)
        let _4399: Unit = Put nperm.2364[_4394] = _4398
        Jump(compute.4206, [r.4207, ])
      } else {
        let _4400: Unit = Unit
        let _4401: Int = Int(0)
        let _4402: Int = Int(0)
        let _4403: Int = Get check_sum.2361[_4402]
        let _4404: Int = Int(0)
        let _4405: Int = Get flips.2355[_4404]
        let _4406: Int = Int(1)
        let _4407: Int = Int(0)
        let _4408: Int = Get nperm.2364[_4407]
        let _4409: Int = Int(0)
        let _4410: Int = Get nperm.2364[_4409]
        let _4411: Int = Int(2)
        let _4412: Int = Div(_4410, _4411)
        let _4413: Int = Int(2)
        let _4414: Int = Mul(_4412, _4413)
        let _4415: Int = Sub(_4408, _4414)
        let _4416: Int = Int(2)
        let _4417: Int = Mul(_4415, _4416)
        let _4418: Int = Sub(_4406, _4417)
        let _4419: Int = Mul(_4405, _4418)
        let _4420: Int = Add(_4403, _4419)
        let _4421: Unit = Put check_sum.2361[_4401] = _4420
        let _4422: Int = Int(1)
        let _4423: Bool = Bool(true)
        let go.4424: Array(Bool) = ExtApply(minimbt_create_array, [_4422, _4423, ])
        let _4425: Int = Int(1)
        let _4426: Int = Int(0)
        let t.4427: Array(Int) = ExtApply(minimbt_create_array, [_4425, _4426, ])
        let _4489: Unit = Apply(go_loop.4504, [_224, r.4207, t.4427, go.4424, arr.3574, count.2352, ])
        let _4490: Int = Int(0)
        let _4491: Int = Int(0)
        let _4492: Int = Get nperm.2364[_4491]
        let _4493: Int = Int(1)
        let _4494: Int = Add(_4492, _4493)
        let _4495: Unit = Put nperm.2364[_4490] = _4494
        Jump(compute.4206, [r.4207, ])
      }
    } else {
      let _2651: Unit = Unit
      let _2652: Int = Int(0)
      let _2653: Int = Get max_flips.2358[_2652]
      let _2654: Int = Int(0)
      let _2655: Int = Get check_sum.2361[_2654]
      let _225: Tuple([Int, Int]) = Tuple([_2653, _2655, ])
      let (max_flips.226: Var({val: Some(Int)}), check_sum.227: Var({val: Some(Int)})) = _225
      let _228: Unit = ExtApply(minimbt_print_int, [check_sum.227, ])
      ExtApply(minimbt_print_int, [max_flips.226, ])
    }
  }
  Jump(compute.4206, [r.2366, ])
}
Apply(main.4496, [])