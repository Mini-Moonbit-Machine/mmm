let rec init_arr9.342l2: Unit = (i10.343: Int, arr.341: Array(Int), len5.339: Int) {
  let _344: Int = Int(1)
  let _345: Int = Sub(len5.339, _344)
  if (i10.343 <= _345) then {
    let _346: Unit = Put arr.341[i10.343] = i10.343
    let _347: Int = Int(1)
    let _348: Int = Add(i10.343, _347)
    Apply(init_arr9.342l2, [_348, arr.341, len5.339, ])
  } else {
    Unit
  }
}
let rec gen_perm14.338l1: Array(Int) = (len5.339: Int) {
  let _340: Int = Int(0)
  let arr.341: Array(Int) = ExtApply(minimbt_create_array, [len5.339, _340, ])
  let _349: Int = Int(0)
  let _350: Unit = Apply(init_arr9.342l2, [_349, arr.341, len5.339, ])
  Var(arr.341)
}
let rec copy_perm46.375l2: Unit = (i47.376: Int, _263: Int, perm.353: Array(Int), perm1.351: Array(Int)) {
  let _377: Int = Int(1)
  let _378: Int = Sub(_263, _377)
  if (i47.376 <= _378) then {
    let _379: Int = Get perm1.351[i47.376]
    let _380: Unit = Put perm.353[i47.376] = _379
    let _381: Int = Int(1)
    let _382: Int = Add(i47.376, _381)
    Apply(copy_perm46.375l2, [_382, _263, perm.353, perm1.351, ])
  } else {
    Unit
  }
}
let rec init_count59.385l3: Unit = (r41.371: Array(Int), count.355: Array(Int)) {
  let _386: Int = Int(0)
  let _387: Int = Get r41.371[_386]
  let _388: Int = Int(1)
  let _389: Unit = if (_387 == _388) then {
    Unit
  } else {
    let _390: Int = Int(0)
    let _391: Int = Get r41.371[_390]
    let _392: Int = Int(1)
    let _393: Int = Sub(_391, _392)
    let _394: Int = Int(0)
    let _395: Int = Get r41.371[_394]
    let _396: Unit = Put count.355[_393] = _395
    let _397: Int = Int(0)
    let _398: Int = Int(0)
    let _399: Int = Get r41.371[_398]
    let _400: Int = Int(1)
    let _401: Int = Sub(_399, _400)
    let _402: Unit = Put r41.371[_397] = _401
    Apply(init_count59.385l3, [r41.371, count.355, ])
  }
  Unit
}
let rec flip_loop99.419l5: Unit = (i100.420: Int, t.418: Array(Int), k91.412: Array(Int), perm.353: Array(Int)) {
  let _421: Int = Int(0)
  let _422: Int = Get k91.412[_421]
  let _423: Int = Int(2)
  let _424: Int = Div(_422, _423)
  if (i100.420 <= _424) then {
    let _425: Int = Int(0)
    let _426: Int = Get perm.353[i100.420]
    let _427: Unit = Put t.418[_425] = _426
    let _428: Int = Int(0)
    let _429: Int = Get k91.412[_428]
    let _430: Int = Sub(_429, i100.420)
    let _431: Int = Get perm.353[_430]
    let _432: Unit = Put perm.353[i100.420] = _431
    let _433: Int = Int(0)
    let _434: Int = Get k91.412[_433]
    let _435: Int = Sub(_434, i100.420)
    let _436: Int = Int(0)
    let _437: Int = Get t.418[_436]
    let _438: Unit = Put perm.353[_435] = _437
    let _439: Int = Int(1)
    let _440: Int = Add(i100.420, _439)
    Apply(flip_loop99.419l5, [_440, t.418, k91.412, perm.353, ])
  } else {
    Unit
  }
}
let rec do_flip90.411l4: Unit = (k91.412: Array(Int), perm.353: Array(Int), flips.358: Array(Int)) {
  let _413: Int = Int(0)
  let _414: Int = Get k91.412[_413]
  let _415: Int = Int(0)
  if (_414 == _415) then {
    Unit
  } else {
    let _416: Int = Int(1)
    let _417: Int = Int(0)
    let t.418: Array(Int) = ExtApply(minimbt_create_array, [_416, _417, ])
    let _441: Int = Int(0)
    let _442: Unit = Apply(flip_loop99.419l5, [_441, t.418, k91.412, perm.353, ])
    let _443: Int = Int(0)
    let _444: Int = Int(0)
    let _445: Int = Get perm.353[_444]
    let _446: Unit = Put k91.412[_443] = _445
    let _447: Int = Int(0)
    let _448: Int = Int(0)
    let _449: Int = Get flips.358[_448]
    let _450: Int = Int(1)
    let _451: Int = Add(_449, _450)
    let _452: Unit = Put flips.358[_447] = _451
    Apply(do_flip90.411l4, [k91.412, perm.353, flips.358, ])
  }
}
let rec move_perm1_forward197.506l6: Unit = (i198.507: Int, r41.371: Array(Int), perm1.351: Array(Int)) {
  let _508: Int = Int(0)
  let _509: Int = Get r41.371[_508]
  let _510: Int = Int(1)
  let _511: Int = Sub(_509, _510)
  if (i198.507 <= _511) then {
    let _512: Int = Int(1)
    let _513: Int = Add(i198.507, _512)
    let _514: Int = Get perm1.351[_513]
    let _515: Unit = Put perm1.351[i198.507] = _514
    let _516: Int = Int(1)
    let _517: Int = Add(i198.507, _516)
    let _518: Unit = Apply(move_perm1_forward197.506l6, [_517, r41.371, perm1.351, ])
    Unit
  } else {
    Unit
  }
}
let rec go_loop179.489l5: Unit = (_263: Int, t.488: Array(Int), go.485: Array(Bool), r41.371: Array(Int), count.355: Array(Int), perm1.351: Array(Int)) {
  let _490: Int = Int(0)
  let _491: Bool = Get go.485[_490]
  let _492: Bool = Bool(true)
  if (_491 == _492) then {
    let _493: Int = Int(0)
    let _494: Int = Get r41.371[_493]
    let _495: Unit = if (_494 == _263) then {
      let _496: Int = Int(0)
      let _497: Bool = Bool(false)
      let _498: Unit = Put go.485[_496] = _497
      let _499: Int = Int(0)
      let _500: Int = Int(0)
      let _501: Unit = Put r41.371[_499] = _500
      Unit
    } else {
      let _502: Int = Int(0)
      let _503: Int = Int(0)
      let _504: Int = Get perm1.351[_503]
      let _505: Unit = Put t.488[_502] = _504
      let _519: Int = Int(0)
      let _520: Unit = Apply(move_perm1_forward197.506l6, [_519, r41.371, perm1.351, ])
      let _521: Int = Int(0)
      let _522: Int = Get r41.371[_521]
      let _523: Int = Int(0)
      let _524: Int = Get t.488[_523]
      let _525: Unit = Put perm1.351[_522] = _524
      let _526: Int = Int(0)
      let _527: Int = Get r41.371[_526]
      let _528: Int = Int(0)
      let _529: Int = Get r41.371[_528]
      let _530: Int = Get count.355[_529]
      let _531: Int = Int(1)
      let _532: Int = Sub(_530, _531)
      let _533: Unit = Put count.355[_527] = _532
      let _534: Int = Int(1)
      let _535: Int = Int(0)
      let _536: Int = Get r41.371[_535]
      let _537: Int = Get count.355[_536]
      let _538: Unit = if (_534 <= _537) then {
        let _539: Int = Int(0)
        let _540: Bool = Bool(false)
        Put go.485[_539] = _540
      } else {
        let _541: Int = Int(0)
        let _542: Int = Int(0)
        let _543: Int = Get r41.371[_542]
        let _544: Int = Int(1)
        let _545: Int = Add(_543, _544)
        Put r41.371[_541] = _545
      }
      Unit
    }
    Apply(go_loop179.489l5, [_263, t.488, go.485, r41.371, count.355, perm1.351, ])
  } else {
    Unit
  }
}
let rec main262l0: Var({val: Some(Unit)}) = () {
  let _263: Int = Int(9)
  let perm1.351: Array(Int) = Apply(gen_perm14.338l1, [_263, ])
  let _352: Int = Int(0)
  let perm.353: Array(Int) = ExtApply(minimbt_create_array, [_263, _352, ])
  let _354: Int = Int(0)
  let count.355: Array(Int) = ExtApply(minimbt_create_array, [_263, _354, ])
  let _356: Int = Int(1)
  let _357: Int = Int(0)
  let flips.358: Array(Int) = ExtApply(minimbt_create_array, [_356, _357, ])
  let _359: Int = Int(1)
  let _360: Int = Int(0)
  let max_flips.361: Array(Int) = ExtApply(minimbt_create_array, [_359, _360, ])
  let _362: Int = Int(1)
  let _363: Int = Int(0)
  let check_sum.364: Array(Int) = ExtApply(minimbt_create_array, [_362, _363, ])
  let _365: Int = Int(1)
  let _366: Int = Int(0)
  let nperm.367: Array(Int) = ExtApply(minimbt_create_array, [_365, _366, ])
  let _368: Int = Int(1)
  let r.369: Array(Int) = ExtApply(minimbt_create_array, [_368, _263, ])
  let rec compute40.370: Unit = (r41.371: Array(Int)) {
    let _372: Int = Int(1)
    let _373: Int = Int(0)
    let _374: Int = Get r41.371[_373]
    if (_372 <= _374) then {
      let _383: Int = Int(0)
      let _384: Unit = Apply(copy_perm46.375l2, [_383, _263, perm.353, perm1.351, ])
      let _403: Unit = Apply(init_count59.385l3, [r41.371, count.355, ])
      let _404: Int = Int(0)
      let _405: Int = Int(0)
      let _406: Unit = Put flips.358[_404] = _405
      let _407: Int = Int(1)
      let _408: Int = Int(0)
      let _409: Int = Get perm.353[_408]
      let k.410: Array(Int) = ExtApply(minimbt_create_array, [_407, _409, ])
      let _453: Unit = Apply(do_flip90.411l4, [k.410, perm.353, flips.358, ])
      let _454: Int = Int(0)
      let _455: Int = Get max_flips.361[_454]
      let _456: Int = Int(0)
      let _457: Int = Get flips.358[_456]
      let _458: Unit = if (_455 <= _457) then {
        let _459: Int = Int(0)
        let _460: Int = Int(0)
        let _461: Int = Get flips.358[_460]
        Put max_flips.361[_459] = _461
      } else {
        Unit
      }
      let _462: Int = Int(0)
      let _463: Int = Int(0)
      let _464: Int = Get check_sum.364[_463]
      let _465: Int = Int(0)
      let _466: Int = Get flips.358[_465]
      let _467: Int = Int(1)
      let _468: Int = Int(0)
      let _469: Int = Get nperm.367[_468]
      let _470: Int = Int(0)
      let _471: Int = Get nperm.367[_470]
      let _472: Int = Int(2)
      let _473: Int = Div(_471, _472)
      let _474: Int = Int(2)
      let _475: Int = Mul(_473, _474)
      let _476: Int = Sub(_469, _475)
      let _477: Int = Int(2)
      let _478: Int = Mul(_476, _477)
      let _479: Int = Sub(_467, _478)
      let _480: Int = Mul(_466, _479)
      let _481: Int = Add(_464, _480)
      let _482: Unit = Put check_sum.364[_462] = _481
      let _483: Int = Int(1)
      let _484: Bool = Bool(true)
      let go.485: Array(Bool) = ExtApply(minimbt_create_array, [_483, _484, ])
      let _486: Int = Int(1)
      let _487: Int = Int(0)
      let t.488: Array(Int) = ExtApply(minimbt_create_array, [_486, _487, ])
      let _546: Unit = Apply(go_loop179.489l5, [_263, t.488, go.485, r41.371, count.355, perm1.351, ])
      let _547: Int = Int(0)
      let _548: Int = Int(0)
      let _549: Int = Get nperm.367[_548]
      let _550: Int = Int(1)
      let _551: Int = Add(_549, _550)
      let _552: Unit = Put nperm.367[_547] = _551
      Apply(compute40.370, [r41.371, ])
    } else {
      Unit
    }
  }
  let _553: Unit = Apply(compute40.370, [r.369, ])
  let _554: Int = Int(0)
  let _555: Int = Get max_flips.361[_554]
  let _556: Int = Int(0)
  let _557: Int = Get check_sum.364[_556]
  let _264: Tuple([Int, Int]) = Tuple([_555, _557, ])
  let (max_flips265.266: Var({val: Some(Int)}), check_sum267.268: Var({val: Some(Int)})) = _264
  let _270: Unit = ExtApply(minimbt_print_int, [check_sum267.268, ])
  ExtApply(minimbt_print_int, [max_flips265.266, ])
}
Apply(main262l0, [])