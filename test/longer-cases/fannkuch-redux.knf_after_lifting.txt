let rec init_arr.244l2: Unit = (i.245: Int, arr.243: Array(Int), len.241: Int) {
  let _246: Int = Int(1)
  let _247: Int = Sub(len.241, _246)
  if (i.245 <= _247) then {
    let _248: Unit = Put arr.243[i.245] = i.245
    let _249: Int = Int(1)
    let _250: Int = Add(i.245, _249)
    Apply(init_arr.244l2, [_250, arr.243, len.241, ])
  } else {
    Unit
  }
}
let rec gen_perm1.240l1: Array(Int) = (len.241: Int) {
  let _242: Int = Int(0)
  let arr.243: Array(Int) = ExtApply(minimbt_create_array, [len.241, _242, ])
  let _251: Int = Int(0)
  let _252: Unit = Apply(init_arr.244l2, [_251, arr.243, len.241, ])
  Var(arr.243)
}
let rec copy_perm.277l3: Unit = (i.278: Int, _224: Int, perm.255: Array(Int), perm1.253: Array(Int)) {
  let _279: Int = Int(1)
  let _280: Int = Sub(_224, _279)
  if (i.278 <= _280) then {
    let _281: Int = Get perm1.253[i.278]
    let _282: Unit = Put perm.255[i.278] = _281
    let _283: Int = Int(1)
    let _284: Int = Add(i.278, _283)
    Apply(copy_perm.277l3, [_284, _224, perm.255, perm1.253, ])
  } else {
    Unit
  }
}
let rec init_count.287l4: Unit = (r.273: Array(Int), count.257: Array(Int)) {
  let _288: Int = Int(0)
  let _289: Int = Get r.273[_288]
  let _290: Int = Int(1)
  let _291: Unit = if (_289 == _290) then {
    Unit
  } else {
    let _292: Int = Int(0)
    let _293: Int = Get r.273[_292]
    let _294: Int = Int(1)
    let _295: Int = Sub(_293, _294)
    let _296: Int = Int(0)
    let _297: Int = Get r.273[_296]
    let _298: Unit = Put count.257[_295] = _297
    let _299: Int = Int(0)
    let _300: Int = Int(0)
    let _301: Int = Get r.273[_300]
    let _302: Int = Int(1)
    let _303: Int = Sub(_301, _302)
    let _304: Unit = Put r.273[_299] = _303
    Apply(init_count.287l4, [r.273, count.257, ])
  }
  Unit
}
let rec flip_loop.321l6: Unit = (i.322: Int, k.314: Array(Int), t.320: Array(Int), perm.255: Array(Int)) {
  let _323: Int = Int(0)
  let _324: Int = Get k.314[_323]
  let _325: Int = Int(2)
  let _326: Int = Div(_324, _325)
  if (i.322 <= _326) then {
    let _327: Int = Int(0)
    let _328: Int = Get perm.255[i.322]
    let _329: Unit = Put t.320[_327] = _328
    let _330: Int = Int(0)
    let _331: Int = Get k.314[_330]
    let _332: Int = Sub(_331, i.322)
    let _333: Int = Get perm.255[_332]
    let _334: Unit = Put perm.255[i.322] = _333
    let _335: Int = Int(0)
    let _336: Int = Get k.314[_335]
    let _337: Int = Sub(_336, i.322)
    let _338: Int = Int(0)
    let _339: Int = Get t.320[_338]
    let _340: Unit = Put perm.255[_337] = _339
    let _341: Int = Int(1)
    let _342: Int = Add(i.322, _341)
    Apply(flip_loop.321l6, [_342, k.314, t.320, perm.255, ])
  } else {
    Unit
  }
}
let rec do_flip.313l5: Unit = (k.314: Array(Int), perm.255: Array(Int), flips.260: Array(Int)) {
  let _315: Int = Int(0)
  let _316: Int = Get k.314[_315]
  let _317: Int = Int(0)
  if (_316 == _317) then {
    Unit
  } else {
    let _318: Int = Int(1)
    let _319: Int = Int(0)
    let t.320: Array(Int) = ExtApply(minimbt_create_array, [_318, _319, ])
    let _343: Int = Int(0)
    let _344: Unit = Apply(flip_loop.321l6, [_343, k.314, t.320, perm.255, ])
    let _345: Int = Int(0)
    let _346: Int = Int(0)
    let _347: Int = Get perm.255[_346]
    let _348: Unit = Put k.314[_345] = _347
    let _349: Int = Int(0)
    let _350: Int = Int(0)
    let _351: Int = Get flips.260[_350]
    let _352: Int = Int(1)
    let _353: Int = Add(_351, _352)
    let _354: Unit = Put flips.260[_349] = _353
    Apply(do_flip.313l5, [k.314, perm.255, flips.260, ])
  }
}
let rec move_perm1_forward.408l7: Unit = (i.409: Int, r.273: Array(Int), perm1.253: Array(Int)) {
  let _410: Int = Int(0)
  let _411: Int = Get r.273[_410]
  let _412: Int = Int(1)
  let _413: Int = Sub(_411, _412)
  if (i.409 <= _413) then {
    let _414: Int = Int(1)
    let _415: Int = Add(i.409, _414)
    let _416: Int = Get perm1.253[_415]
    let _417: Unit = Put perm1.253[i.409] = _416
    let _418: Int = Int(1)
    let _419: Int = Add(i.409, _418)
    let _420: Unit = Apply(move_perm1_forward.408l7, [_419, r.273, perm1.253, ])
    Unit
  } else {
    Unit
  }
}
let rec go_loop.391l6: Unit = (_224: Int, r.273: Array(Int), t.390: Array(Int), go.387: Array(Bool), count.257: Array(Int), perm1.253: Array(Int)) {
  let _392: Int = Int(0)
  let _393: Bool = Get go.387[_392]
  let _394: Bool = Bool(true)
  if (_393 == _394) then {
    let _395: Int = Int(0)
    let _396: Int = Get r.273[_395]
    let _397: Unit = if (_396 == _224) then {
      let _398: Int = Int(0)
      let _399: Bool = Bool(false)
      let _400: Unit = Put go.387[_398] = _399
      let _401: Int = Int(0)
      let _402: Int = Int(0)
      let _403: Unit = Put r.273[_401] = _402
      Unit
    } else {
      let _404: Int = Int(0)
      let _405: Int = Int(0)
      let _406: Int = Get perm1.253[_405]
      let _407: Unit = Put t.390[_404] = _406
      let _421: Int = Int(0)
      let _422: Unit = Apply(move_perm1_forward.408l7, [_421, r.273, perm1.253, ])
      let _423: Int = Int(0)
      let _424: Int = Get r.273[_423]
      let _425: Int = Int(0)
      let _426: Int = Get t.390[_425]
      let _427: Unit = Put perm1.253[_424] = _426
      let _428: Int = Int(0)
      let _429: Int = Get r.273[_428]
      let _430: Int = Int(0)
      let _431: Int = Get r.273[_430]
      let _432: Int = Get count.257[_431]
      let _433: Int = Int(1)
      let _434: Int = Sub(_432, _433)
      let _435: Unit = Put count.257[_429] = _434
      let _436: Int = Int(1)
      let _437: Int = Int(0)
      let _438: Int = Get r.273[_437]
      let _439: Int = Get count.257[_438]
      let _440: Unit = if (_436 <= _439) then {
        let _441: Int = Int(0)
        let _442: Bool = Bool(false)
        Put go.387[_441] = _442
      } else {
        let _443: Int = Int(0)
        let _444: Int = Int(0)
        let _445: Int = Get r.273[_444]
        let _446: Int = Int(1)
        let _447: Int = Add(_445, _446)
        Put r.273[_443] = _447
      }
      Unit
    }
    Apply(go_loop.391l6, [_224, r.273, t.390, go.387, count.257, perm1.253, ])
  } else {
    Unit
  }
}
let rec compute.272l2: Unit = (r.273: Array(Int), _224: Int, perm.255: Array(Int), count.257: Array(Int), flips.260: Array(Int), nperm.269: Array(Int), perm1.253: Array(Int), check_sum.266: Array(Int), max_flips.263: Array(Int)) {
  let _274: Int = Int(1)
  let _275: Int = Int(0)
  let _276: Int = Get r.273[_275]
  if (_274 <= _276) then {
    let _285: Int = Int(0)
    let _286: Unit = Apply(copy_perm.277l3, [_285, _224, perm.255, perm1.253, ])
    let _305: Unit = Apply(init_count.287l4, [r.273, count.257, ])
    let _306: Int = Int(0)
    let _307: Int = Int(0)
    let _308: Unit = Put flips.260[_306] = _307
    let _309: Int = Int(1)
    let _310: Int = Int(0)
    let _311: Int = Get perm.255[_310]
    let k.312: Array(Int) = ExtApply(minimbt_create_array, [_309, _311, ])
    let _355: Unit = Apply(do_flip.313l5, [k.312, perm.255, flips.260, ])
    let _356: Int = Int(0)
    let _357: Int = Get max_flips.263[_356]
    let _358: Int = Int(0)
    let _359: Int = Get flips.260[_358]
    let _360: Unit = if (_357 <= _359) then {
      let _361: Int = Int(0)
      let _362: Int = Int(0)
      let _363: Int = Get flips.260[_362]
      Put max_flips.263[_361] = _363
    } else {
      Unit
    }
    let _364: Int = Int(0)
    let _365: Int = Int(0)
    let _366: Int = Get check_sum.266[_365]
    let _367: Int = Int(0)
    let _368: Int = Get flips.260[_367]
    let _369: Int = Int(1)
    let _370: Int = Int(0)
    let _371: Int = Get nperm.269[_370]
    let _372: Int = Int(0)
    let _373: Int = Get nperm.269[_372]
    let _374: Int = Int(2)
    let _375: Int = Div(_373, _374)
    let _376: Int = Int(2)
    let _377: Int = Mul(_375, _376)
    let _378: Int = Sub(_371, _377)
    let _379: Int = Int(2)
    let _380: Int = Mul(_378, _379)
    let _381: Int = Sub(_369, _380)
    let _382: Int = Mul(_368, _381)
    let _383: Int = Add(_366, _382)
    let _384: Unit = Put check_sum.266[_364] = _383
    let _385: Int = Int(1)
    let _386: Bool = Bool(true)
    let go.387: Array(Bool) = ExtApply(minimbt_create_array, [_385, _386, ])
    let _388: Int = Int(1)
    let _389: Int = Int(0)
    let t.390: Array(Int) = ExtApply(minimbt_create_array, [_388, _389, ])
    let _448: Unit = Apply(go_loop.391l6, [_224, r.273, t.390, go.387, count.257, perm1.253, ])
    let _449: Int = Int(0)
    let _450: Int = Int(0)
    let _451: Int = Get nperm.269[_450]
    let _452: Int = Int(1)
    let _453: Int = Add(_451, _452)
    let _454: Unit = Put nperm.269[_449] = _453
    Apply(compute.272l2, [r.273, _224, perm.255, count.257, flips.260, nperm.269, perm1.253, check_sum.266, max_flips.263, ])
  } else {
    Unit
  }
}
let rec main.223l0: Var({val: Some(Unit)}) = () {
  let _224: Int = Int(9)
  let perm1.253: Array(Int) = Apply(gen_perm1.240l1, [_224, ])
  let _254: Int = Int(0)
  let perm.255: Array(Int) = ExtApply(minimbt_create_array, [_224, _254, ])
  let _256: Int = Int(0)
  let count.257: Array(Int) = ExtApply(minimbt_create_array, [_224, _256, ])
  let _258: Int = Int(1)
  let _259: Int = Int(0)
  let flips.260: Array(Int) = ExtApply(minimbt_create_array, [_258, _259, ])
  let _261: Int = Int(1)
  let _262: Int = Int(0)
  let max_flips.263: Array(Int) = ExtApply(minimbt_create_array, [_261, _262, ])
  let _264: Int = Int(1)
  let _265: Int = Int(0)
  let check_sum.266: Array(Int) = ExtApply(minimbt_create_array, [_264, _265, ])
  let _267: Int = Int(1)
  let _268: Int = Int(0)
  let nperm.269: Array(Int) = ExtApply(minimbt_create_array, [_267, _268, ])
  let _270: Int = Int(1)
  let r.271: Array(Int) = ExtApply(minimbt_create_array, [_270, _224, ])
  let _455: Unit = Apply(compute.272l2, [r.271, _224, perm.255, count.257, flips.260, nperm.269, perm1.253, check_sum.266, max_flips.263, ])
  let _456: Int = Int(0)
  let _457: Int = Get max_flips.263[_456]
  let _458: Int = Int(0)
  let _459: Int = Get check_sum.266[_458]
  let _225: Tuple([Int, Int]) = Tuple([_457, _459, ])
  let (max_flips.226: Var({val: Some(Int)}), check_sum.227: Var({val: Some(Int)})) = _225
  let _228: Unit = ExtApply(minimbt_print_int, [check_sum.227, ])
  ExtApply(minimbt_print_int, [max_flips.226, ])
}
Apply(main.223l0, [])