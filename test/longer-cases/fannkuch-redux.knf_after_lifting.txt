let rec init_arr9.404l2: Unit = (i10.405: Int, arr.403: Array(Int), len5.401: Int) {
  let _406: Int = Int(1)
  let _407: Int = Sub(len5.401, _406)
  if (i10.405 <= _407) then {
    let _408: Unit = Put arr.403[i10.405] = i10.405
    let _409: Int = Int(1)
    let _410: Int = Add(i10.405, _409)
    Apply(init_arr9.404l2, [_410, arr.403, len5.401, ])
  } else {
    Unit
  }
}
let rec gen_perm14.400l1: Array(Int) = (len5.401: Int) {
  let _402: Int = Int(0)
  let arr.403: Array(Int) = ExtApply(minimbt_create_array, [len5.401, _402, ])
  let _411: Int = Int(0)
  let _412: Unit = Apply(init_arr9.404l2, [_411, arr.403, len5.401, ])
  Var(arr.403)
}
let rec copy_perm46.437l2: Unit = (i47.438: Int, _263: Int, perm.415: Array(Int), perm1.413: Array(Int)) {
  let _439: Int = Int(1)
  let _440: Int = Sub(_263, _439)
  if (i47.438 <= _440) then {
    let _441: Int = Get perm1.413[i47.438]
    let _442: Unit = Put perm.415[i47.438] = _441
    let _443: Int = Int(1)
    let _444: Int = Add(i47.438, _443)
    Apply(copy_perm46.437l2, [_444, _263, perm.415, perm1.413, ])
  } else {
    Unit
  }
}
let rec init_count59.447l3: Unit = (r41.433: Array(Int), count.417: Array(Int)) {
  let _448: Int = Int(0)
  let _449: Int = Get r41.433[_448]
  let _450: Int = Int(1)
  let _451: Unit = if (_449 == _450) then {
    Unit
  } else {
    let _452: Int = Int(0)
    let _453: Int = Get r41.433[_452]
    let _454: Int = Int(1)
    let _455: Int = Sub(_453, _454)
    let _456: Int = Int(0)
    let _457: Int = Get r41.433[_456]
    let _458: Unit = Put count.417[_455] = _457
    let _459: Int = Int(0)
    let _460: Int = Int(0)
    let _461: Int = Get r41.433[_460]
    let _462: Int = Int(1)
    let _463: Int = Sub(_461, _462)
    let _464: Unit = Put r41.433[_459] = _463
    Apply(init_count59.447l3, [r41.433, count.417, ])
  }
  Unit
}
let rec flip_loop99.481l5: Unit = (i100.482: Int, t.480: Array(Int), k91.474: Array(Int), perm.415: Array(Int)) {
  let _483: Int = Int(0)
  let _484: Int = Get k91.474[_483]
  let _485: Int = Int(2)
  let _486: Int = Div(_484, _485)
  if (i100.482 <= _486) then {
    let _487: Int = Int(0)
    let _488: Int = Get perm.415[i100.482]
    let _489: Unit = Put t.480[_487] = _488
    let _490: Int = Int(0)
    let _491: Int = Get k91.474[_490]
    let _492: Int = Sub(_491, i100.482)
    let _493: Int = Get perm.415[_492]
    let _494: Unit = Put perm.415[i100.482] = _493
    let _495: Int = Int(0)
    let _496: Int = Get k91.474[_495]
    let _497: Int = Sub(_496, i100.482)
    let _498: Int = Int(0)
    let _499: Int = Get t.480[_498]
    let _500: Unit = Put perm.415[_497] = _499
    let _501: Int = Int(1)
    let _502: Int = Add(i100.482, _501)
    Apply(flip_loop99.481l5, [_502, t.480, k91.474, perm.415, ])
  } else {
    Unit
  }
}
let rec do_flip90.473l4: Unit = (k91.474: Array(Int), perm.415: Array(Int), flips.420: Array(Int)) {
  let _475: Int = Int(0)
  let _476: Int = Get k91.474[_475]
  let _477: Int = Int(0)
  if (_476 == _477) then {
    Unit
  } else {
    let _478: Int = Int(1)
    let _479: Int = Int(0)
    let t.480: Array(Int) = ExtApply(minimbt_create_array, [_478, _479, ])
    let _503: Int = Int(0)
    let _504: Unit = Apply(flip_loop99.481l5, [_503, t.480, k91.474, perm.415, ])
    let _505: Int = Int(0)
    let _506: Int = Int(0)
    let _507: Int = Get perm.415[_506]
    let _508: Unit = Put k91.474[_505] = _507
    let _509: Int = Int(0)
    let _510: Int = Int(0)
    let _511: Int = Get flips.420[_510]
    let _512: Int = Int(1)
    let _513: Int = Add(_511, _512)
    let _514: Unit = Put flips.420[_509] = _513
    Apply(do_flip90.473l4, [k91.474, perm.415, flips.420, ])
  }
}
let rec move_perm1_forward197.568l6: Unit = (i198.569: Int, r41.433: Array(Int), perm1.413: Array(Int)) {
  let _570: Int = Int(0)
  let _571: Int = Get r41.433[_570]
  let _572: Int = Int(1)
  let _573: Int = Sub(_571, _572)
  if (i198.569 <= _573) then {
    let _574: Int = Int(1)
    let _575: Int = Add(i198.569, _574)
    let _576: Int = Get perm1.413[_575]
    let _577: Unit = Put perm1.413[i198.569] = _576
    let _578: Int = Int(1)
    let _579: Int = Add(i198.569, _578)
    let _580: Unit = Apply(move_perm1_forward197.568l6, [_579, r41.433, perm1.413, ])
    Unit
  } else {
    Unit
  }
}
let rec go_loop179.551l5: Unit = (_263: Int, t.550: Array(Int), go.547: Array(Bool), r41.433: Array(Int), count.417: Array(Int), perm1.413: Array(Int)) {
  let _552: Int = Int(0)
  let _553: Bool = Get go.547[_552]
  let _554: Bool = Bool(true)
  if (_553 == _554) then {
    let _555: Int = Int(0)
    let _556: Int = Get r41.433[_555]
    let _557: Unit = if (_556 == _263) then {
      let _558: Int = Int(0)
      let _559: Bool = Bool(false)
      let _560: Unit = Put go.547[_558] = _559
      let _561: Int = Int(0)
      let _562: Int = Int(0)
      let _563: Unit = Put r41.433[_561] = _562
      Unit
    } else {
      let _564: Int = Int(0)
      let _565: Int = Int(0)
      let _566: Int = Get perm1.413[_565]
      let _567: Unit = Put t.550[_564] = _566
      let _581: Int = Int(0)
      let _582: Unit = Apply(move_perm1_forward197.568l6, [_581, r41.433, perm1.413, ])
      let _583: Int = Int(0)
      let _584: Int = Get r41.433[_583]
      let _585: Int = Int(0)
      let _586: Int = Get t.550[_585]
      let _587: Unit = Put perm1.413[_584] = _586
      let _588: Int = Int(0)
      let _589: Int = Get r41.433[_588]
      let _590: Int = Int(0)
      let _591: Int = Get r41.433[_590]
      let _592: Int = Get count.417[_591]
      let _593: Int = Int(1)
      let _594: Int = Sub(_592, _593)
      let _595: Unit = Put count.417[_589] = _594
      let _596: Int = Int(1)
      let _597: Int = Int(0)
      let _598: Int = Get r41.433[_597]
      let _599: Int = Get count.417[_598]
      let _600: Unit = if (_596 <= _599) then {
        let _601: Int = Int(0)
        let _602: Bool = Bool(false)
        Put go.547[_601] = _602
      } else {
        let _603: Int = Int(0)
        let _604: Int = Int(0)
        let _605: Int = Get r41.433[_604]
        let _606: Int = Int(1)
        let _607: Int = Add(_605, _606)
        Put r41.433[_603] = _607
      }
      Unit
    }
    Apply(go_loop179.551l5, [_263, t.550, go.547, r41.433, count.417, perm1.413, ])
  } else {
    Unit
  }
}
let rec main262l0: Var({val: Some(Unit)}) = () {
  let _263: Int = Int(9)
  let perm1.413: Array(Int) = Apply(gen_perm14.400l1, [_263, ])
  let _414: Int = Int(0)
  let perm.415: Array(Int) = ExtApply(minimbt_create_array, [_263, _414, ])
  let _416: Int = Int(0)
  let count.417: Array(Int) = ExtApply(minimbt_create_array, [_263, _416, ])
  let _418: Int = Int(1)
  let _419: Int = Int(0)
  let flips.420: Array(Int) = ExtApply(minimbt_create_array, [_418, _419, ])
  let _421: Int = Int(1)
  let _422: Int = Int(0)
  let max_flips.423: Array(Int) = ExtApply(minimbt_create_array, [_421, _422, ])
  let _424: Int = Int(1)
  let _425: Int = Int(0)
  let check_sum.426: Array(Int) = ExtApply(minimbt_create_array, [_424, _425, ])
  let _427: Int = Int(1)
  let _428: Int = Int(0)
  let nperm.429: Array(Int) = ExtApply(minimbt_create_array, [_427, _428, ])
  let _430: Int = Int(1)
  let r.431: Array(Int) = ExtApply(minimbt_create_array, [_430, _263, ])
  let rec compute40.432: Unit = (r41.433: Array(Int)) {
    let _434: Int = Int(1)
    let _435: Int = Int(0)
    let _436: Int = Get r41.433[_435]
    if (_434 <= _436) then {
      let _445: Int = Int(0)
      let _446: Unit = Apply(copy_perm46.437l2, [_445, _263, perm.415, perm1.413, ])
      let _465: Unit = Apply(init_count59.447l3, [r41.433, count.417, ])
      let _466: Int = Int(0)
      let _467: Int = Int(0)
      let _468: Unit = Put flips.420[_466] = _467
      let _469: Int = Int(1)
      let _470: Int = Int(0)
      let _471: Int = Get perm.415[_470]
      let k.472: Array(Int) = ExtApply(minimbt_create_array, [_469, _471, ])
      let _515: Unit = Apply(do_flip90.473l4, [k.472, perm.415, flips.420, ])
      let _516: Int = Int(0)
      let _517: Int = Get max_flips.423[_516]
      let _518: Int = Int(0)
      let _519: Int = Get flips.420[_518]
      let _520: Unit = if (_517 <= _519) then {
        let _521: Int = Int(0)
        let _522: Int = Int(0)
        let _523: Int = Get flips.420[_522]
        Put max_flips.423[_521] = _523
      } else {
        Unit
      }
      let _524: Int = Int(0)
      let _525: Int = Int(0)
      let _526: Int = Get check_sum.426[_525]
      let _527: Int = Int(0)
      let _528: Int = Get flips.420[_527]
      let _529: Int = Int(1)
      let _530: Int = Int(0)
      let _531: Int = Get nperm.429[_530]
      let _532: Int = Int(0)
      let _533: Int = Get nperm.429[_532]
      let _534: Int = Int(2)
      let _535: Int = Div(_533, _534)
      let _536: Int = Int(2)
      let _537: Int = Mul(_535, _536)
      let _538: Int = Sub(_531, _537)
      let _539: Int = Int(2)
      let _540: Int = Mul(_538, _539)
      let _541: Int = Sub(_529, _540)
      let _542: Int = Mul(_528, _541)
      let _543: Int = Add(_526, _542)
      let _544: Unit = Put check_sum.426[_524] = _543
      let _545: Int = Int(1)
      let _546: Bool = Bool(true)
      let go.547: Array(Bool) = ExtApply(minimbt_create_array, [_545, _546, ])
      let _548: Int = Int(1)
      let _549: Int = Int(0)
      let t.550: Array(Int) = ExtApply(minimbt_create_array, [_548, _549, ])
      let _608: Unit = Apply(go_loop179.551l5, [_263, t.550, go.547, r41.433, count.417, perm1.413, ])
      let _609: Int = Int(0)
      let _610: Int = Int(0)
      let _611: Int = Get nperm.429[_610]
      let _612: Int = Int(1)
      let _613: Int = Add(_611, _612)
      let _614: Unit = Put nperm.429[_609] = _613
      Apply(compute40.432, [r41.433, ])
    } else {
      Unit
    }
  }
  let _615: Unit = Apply(compute40.432, [r.431, ])
  let _616: Int = Int(0)
  let _617: Int = Get max_flips.423[_616]
  let _618: Int = Int(0)
  let _619: Int = Get check_sum.426[_618]
  let _264: Tuple([Int, Int]) = Tuple([_617, _619, ])
  let (max_flips265.266: Var({val: Some(Int)}), check_sum267.268: Var({val: Some(Int)})) = _264
  let _270: Unit = ExtApply(minimbt_print_int, [check_sum267.268, ])
  ExtApply(minimbt_print_int, [max_flips265.266, ])
}
Apply(main262l0, [])