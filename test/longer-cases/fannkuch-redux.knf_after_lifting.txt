let rec init_arr9.504: Unit = (i10.287: Int, arr.285: Array(Int), len5.283: Int) {
  let _288: Int = Int(1)
  let _289: Int = Sub(len5.283, _288)
  if (i10.287 <= _289) then {
    let _290: Unit = Put arr.285[i10.287] = i10.287
    let _291: Int = Int(1)
    let _292: Int = Add(i10.287, _291)
    Apply(init_arr9.504, [_292, arr.285, len5.283, ])
  } else {
    Unit
  }
}
let rec gen_perm14.503: Array(Int) = (len5.283: Int) {
  let _284: Int = Int(0)
  let arr.285: Array(Int) = ExtApply(minimbt_create_array, [len5.283, _284, ])
  let _293: Int = Int(0)
  let _294: Unit = Apply(init_arr9.504, [_293, arr.285, len5.283, ])
  Var(arr.285)
}
let rec copy_perm46.506: Unit = (i47.320: Int, _263: Int, perm.297: Array(Int), perm1.295: Array(Int)) {
  let _321: Int = Int(1)
  let _322: Int = Sub(_263, _321)
  if (i47.320 <= _322) then {
    let _323: Int = Get perm1.295[i47.320]
    let _324: Unit = Put perm.297[i47.320] = _323
    let _325: Int = Int(1)
    let _326: Int = Add(i47.320, _325)
    Apply(copy_perm46.506, [_326, _263, perm.297, perm1.295, ])
  } else {
    Unit
  }
}
let rec init_count59.507: Unit = (r41.315: Array(Int), count.299: Array(Int)) {
  let _330: Int = Int(0)
  let _331: Int = Get r41.315[_330]
  let _332: Int = Int(1)
  let _333: Unit = if (_331 == _332) then {
    Unit
  } else {
    let _334: Int = Int(0)
    let _335: Int = Get r41.315[_334]
    let _336: Int = Int(1)
    let _337: Int = Sub(_335, _336)
    let _338: Int = Int(0)
    let _339: Int = Get r41.315[_338]
    let _340: Unit = Put count.299[_337] = _339
    let _341: Int = Int(0)
    let _342: Int = Int(0)
    let _343: Int = Get r41.315[_342]
    let _344: Int = Int(1)
    let _345: Int = Sub(_343, _344)
    let _346: Unit = Put r41.315[_341] = _345
    Apply(init_count59.507, [r41.315, count.299, ])
  }
  Unit
}
let rec flip_loop99.509: Unit = (i100.364: Int, t.362: Array(Int), k91.356: Array(Int), perm.297: Array(Int)) {
  let _365: Int = Int(0)
  let _366: Int = Get k91.356[_365]
  let _367: Int = Int(2)
  let _368: Int = Div(_366, _367)
  if (i100.364 <= _368) then {
    let _369: Int = Int(0)
    let _370: Int = Get perm.297[i100.364]
    let _371: Unit = Put t.362[_369] = _370
    let _372: Int = Int(0)
    let _373: Int = Get k91.356[_372]
    let _374: Int = Sub(_373, i100.364)
    let _375: Int = Get perm.297[_374]
    let _376: Unit = Put perm.297[i100.364] = _375
    let _377: Int = Int(0)
    let _378: Int = Get k91.356[_377]
    let _379: Int = Sub(_378, i100.364)
    let _380: Int = Int(0)
    let _381: Int = Get t.362[_380]
    let _382: Unit = Put perm.297[_379] = _381
    let _383: Int = Int(1)
    let _384: Int = Add(i100.364, _383)
    Apply(flip_loop99.509, [_384, t.362, k91.356, perm.297, ])
  } else {
    Unit
  }
}
let rec do_flip90.508: Unit = (k91.356: Array(Int), perm.297: Array(Int), flips.302: Array(Int)) {
  let _357: Int = Int(0)
  let _358: Int = Get k91.356[_357]
  let _359: Int = Int(0)
  if (_358 == _359) then {
    Unit
  } else {
    let _360: Int = Int(1)
    let _361: Int = Int(0)
    let t.362: Array(Int) = ExtApply(minimbt_create_array, [_360, _361, ])
    let _385: Int = Int(0)
    let _386: Unit = Apply(flip_loop99.509, [_385, t.362, k91.356, perm.297, ])
    let _387: Int = Int(0)
    let _388: Int = Int(0)
    let _389: Int = Get perm.297[_388]
    let _390: Unit = Put k91.356[_387] = _389
    let _391: Int = Int(0)
    let _392: Int = Int(0)
    let _393: Int = Get flips.302[_392]
    let _394: Int = Int(1)
    let _395: Int = Add(_393, _394)
    let _396: Unit = Put flips.302[_391] = _395
    Apply(do_flip90.508, [k91.356, perm.297, flips.302, ])
  }
}
let rec move_perm1_forward197.511: Unit = (i198.451: Int, r41.315: Array(Int), perm1.295: Array(Int)) {
  let _452: Int = Int(0)
  let _453: Int = Get r41.315[_452]
  let _454: Int = Int(1)
  let _455: Int = Sub(_453, _454)
  if (i198.451 <= _455) then {
    let _456: Int = Int(1)
    let _457: Int = Add(i198.451, _456)
    let _458: Int = Get perm1.295[_457]
    let _459: Unit = Put perm1.295[i198.451] = _458
    let _460: Int = Int(1)
    let _461: Int = Add(i198.451, _460)
    let _462: Unit = Apply(move_perm1_forward197.511, [_461, r41.315, perm1.295, ])
    Unit
  } else {
    Unit
  }
}
let rec go_loop179.510: Unit = (_263: Int, t.432: Array(Int), go.429: Array(Bool), r41.315: Array(Int), count.299: Array(Int), perm1.295: Array(Int)) {
  let _434: Int = Int(0)
  let _435: Bool = Get go.429[_434]
  let _436: Bool = Bool(true)
  if (_435 == _436) then {
    let _437: Int = Int(0)
    let _438: Int = Get r41.315[_437]
    let _439: Unit = if (_438 == _263) then {
      let _440: Int = Int(0)
      let _441: Bool = Bool(false)
      let _442: Unit = Put go.429[_440] = _441
      let _443: Int = Int(0)
      let _444: Int = Int(0)
      let _445: Unit = Put r41.315[_443] = _444
      Unit
    } else {
      let _446: Int = Int(0)
      let _447: Int = Int(0)
      let _448: Int = Get perm1.295[_447]
      let _449: Unit = Put t.432[_446] = _448
      let _463: Int = Int(0)
      let _464: Unit = Apply(move_perm1_forward197.511, [_463, r41.315, perm1.295, ])
      let _465: Int = Int(0)
      let _466: Int = Get r41.315[_465]
      let _467: Int = Int(0)
      let _468: Int = Get t.432[_467]
      let _469: Unit = Put perm1.295[_466] = _468
      let _470: Int = Int(0)
      let _471: Int = Get r41.315[_470]
      let _472: Int = Int(0)
      let _473: Int = Get r41.315[_472]
      let _474: Int = Get count.299[_473]
      let _475: Int = Int(1)
      let _476: Int = Sub(_474, _475)
      let _477: Unit = Put count.299[_471] = _476
      let _478: Int = Int(1)
      let _479: Int = Int(0)
      let _480: Int = Get r41.315[_479]
      let _481: Int = Get count.299[_480]
      let _482: Unit = if (_478 <= _481) then {
        let _483: Int = Int(0)
        let _484: Bool = Bool(false)
        Put go.429[_483] = _484
      } else {
        let _485: Int = Int(0)
        let _486: Int = Int(0)
        let _487: Int = Get r41.315[_486]
        let _488: Int = Int(1)
        let _489: Int = Add(_487, _488)
        Put r41.315[_485] = _489
      }
      Unit
    }
    Apply(go_loop179.510, [_263, t.432, go.429, r41.315, count.299, perm1.295, ])
  } else {
    Unit
  }
}
let rec compute40.505: Unit = (r41.315: Array(Int), _263: Int, perm.297: Array(Int), count.299: Array(Int), flips.302: Array(Int), nperm.311: Array(Int), perm1.295: Array(Int), check_sum.308: Array(Int), max_flips.305: Array(Int)) {
  let _316: Int = Int(1)
  let _317: Int = Int(0)
  let _318: Int = Get r41.315[_317]
  if (_316 <= _318) then {
    let _327: Int = Int(0)
    let _328: Unit = Apply(copy_perm46.506, [_327, _263, perm.297, perm1.295, ])
    let _347: Unit = Apply(init_count59.507, [r41.315, count.299, ])
    let _348: Int = Int(0)
    let _349: Int = Int(0)
    let _350: Unit = Put flips.302[_348] = _349
    let _351: Int = Int(1)
    let _352: Int = Int(0)
    let _353: Int = Get perm.297[_352]
    let k.354: Array(Int) = ExtApply(minimbt_create_array, [_351, _353, ])
    let _397: Unit = Apply(do_flip90.508, [k.354, perm.297, flips.302, ])
    let _398: Int = Int(0)
    let _399: Int = Get max_flips.305[_398]
    let _400: Int = Int(0)
    let _401: Int = Get flips.302[_400]
    let _402: Unit = if (_399 <= _401) then {
      let _403: Int = Int(0)
      let _404: Int = Int(0)
      let _405: Int = Get flips.302[_404]
      Put max_flips.305[_403] = _405
    } else {
      Unit
    }
    let _406: Int = Int(0)
    let _407: Int = Int(0)
    let _408: Int = Get check_sum.308[_407]
    let _409: Int = Int(0)
    let _410: Int = Get flips.302[_409]
    let _411: Int = Int(1)
    let _412: Int = Int(0)
    let _413: Int = Get nperm.311[_412]
    let _414: Int = Int(0)
    let _415: Int = Get nperm.311[_414]
    let _416: Int = Int(2)
    let _417: Int = Div(_415, _416)
    let _418: Int = Int(2)
    let _419: Int = Mul(_417, _418)
    let _420: Int = Sub(_413, _419)
    let _421: Int = Int(2)
    let _422: Int = Mul(_420, _421)
    let _423: Int = Sub(_411, _422)
    let _424: Int = Mul(_410, _423)
    let _425: Int = Add(_408, _424)
    let _426: Unit = Put check_sum.308[_406] = _425
    let _427: Int = Int(1)
    let _428: Bool = Bool(true)
    let go.429: Array(Bool) = ExtApply(minimbt_create_array, [_427, _428, ])
    let _430: Int = Int(1)
    let _431: Int = Int(0)
    let t.432: Array(Int) = ExtApply(minimbt_create_array, [_430, _431, ])
    let _490: Unit = Apply(go_loop179.510, [_263, t.432, go.429, r41.315, count.299, perm1.295, ])
    let _491: Int = Int(0)
    let _492: Int = Int(0)
    let _493: Int = Get nperm.311[_492]
    let _494: Int = Int(1)
    let _495: Int = Add(_493, _494)
    let _496: Unit = Put nperm.311[_491] = _495
    Apply(compute40.505, [r41.315, _263, perm.297, count.299, flips.302, nperm.311, perm1.295, check_sum.308, max_flips.305, ])
  } else {
    Unit
  }
}
let rec main262.502: Var({val: Some(Unit)}) = () {
  let _263: Int = Int(9)
  let perm1.295: Array(Int) = Apply(gen_perm14.503, [_263, ])
  let _296: Int = Int(0)
  let perm.297: Array(Int) = ExtApply(minimbt_create_array, [_263, _296, ])
  let _298: Int = Int(0)
  let count.299: Array(Int) = ExtApply(minimbt_create_array, [_263, _298, ])
  let _300: Int = Int(1)
  let _301: Int = Int(0)
  let flips.302: Array(Int) = ExtApply(minimbt_create_array, [_300, _301, ])
  let _303: Int = Int(1)
  let _304: Int = Int(0)
  let max_flips.305: Array(Int) = ExtApply(minimbt_create_array, [_303, _304, ])
  let _306: Int = Int(1)
  let _307: Int = Int(0)
  let check_sum.308: Array(Int) = ExtApply(minimbt_create_array, [_306, _307, ])
  let _309: Int = Int(1)
  let _310: Int = Int(0)
  let nperm.311: Array(Int) = ExtApply(minimbt_create_array, [_309, _310, ])
  let _312: Int = Int(1)
  let r.313: Array(Int) = ExtApply(minimbt_create_array, [_312, _263, ])
  let _497: Unit = Apply(compute40.505, [r.313, _263, perm.297, count.299, flips.302, nperm.311, perm1.295, check_sum.308, max_flips.305, ])
  let _498: Int = Int(0)
  let _499: Int = Get max_flips.305[_498]
  let _500: Int = Int(0)
  let _501: Int = Get check_sum.308[_500]
  let _264: Tuple([Int, Int]) = Tuple([_499, _501, ])
  let (max_flips265.266: Var({val: Some(Int)}), check_sum267.268: Var({val: Some(Int)})) = _264
  let _270: Unit = ExtApply(minimbt_print_int, [check_sum267.268, ])
  ExtApply(minimbt_print_int, [max_flips265.266, ])
}
Apply(main262.502, [])