let rec init_arr9.330l2: Unit = (i10.331: Int, arr.329: Array(Int), len5.327: Int) {
  let _332: Int = Int(1)
  let _333: Int = Sub(len5.327, _332)
  if (i10.331 <= _333) then {
    let _334: Unit = Put arr.329[i10.331] = i10.331
    let _335: Int = Int(1)
    let _336: Int = Add(i10.331, _335)
    Apply(init_arr9.330l2, [_336, arr.329, len5.327, ])
  } else {
    Unit
  }
}
let rec gen_perm14.326l1: Array(Int) = (len5.327: Int) {
  let _328: Int = Int(0)
  let arr.329: Array(Int) = ExtApply(minimbt_create_array, [len5.327, _328, ])
  let _337: Int = Int(0)
  let _338: Unit = Apply(init_arr9.330l2, [_337, arr.329, len5.327, ])
  Var(arr.329)
}
let rec copy_perm46.363l2: Unit = (i47.364: Int, _263: Int, perm.341: Array(Int), perm1.339: Array(Int)) {
  let _365: Int = Int(1)
  let _366: Int = Sub(_263, _365)
  if (i47.364 <= _366) then {
    let _367: Int = Get perm1.339[i47.364]
    let _368: Unit = Put perm.341[i47.364] = _367
    let _369: Int = Int(1)
    let _370: Int = Add(i47.364, _369)
    Apply(copy_perm46.363l2, [_370, _263, perm.341, perm1.339, ])
  } else {
    Unit
  }
}
let rec init_count59.373l3: Unit = (r41.359: Array(Int), count.343: Array(Int)) {
  let _374: Int = Int(0)
  let _375: Int = Get r41.359[_374]
  let _376: Int = Int(1)
  let _377: Unit = if (_375 == _376) then {
    Unit
  } else {
    let _378: Int = Int(0)
    let _379: Int = Get r41.359[_378]
    let _380: Int = Int(1)
    let _381: Int = Sub(_379, _380)
    let _382: Int = Int(0)
    let _383: Int = Get r41.359[_382]
    let _384: Unit = Put count.343[_381] = _383
    let _385: Int = Int(0)
    let _386: Int = Int(0)
    let _387: Int = Get r41.359[_386]
    let _388: Int = Int(1)
    let _389: Int = Sub(_387, _388)
    let _390: Unit = Put r41.359[_385] = _389
    Apply(init_count59.373l3, [r41.359, count.343, ])
  }
  Unit
}
let rec flip_loop99.407l5: Unit = (i100.408: Int, t.406: Array(Int), k91.400: Array(Int), perm.341: Array(Int)) {
  let _409: Int = Int(0)
  let _410: Int = Get k91.400[_409]
  let _411: Int = Int(2)
  let _412: Int = Div(_410, _411)
  if (i100.408 <= _412) then {
    let _413: Int = Int(0)
    let _414: Int = Get perm.341[i100.408]
    let _415: Unit = Put t.406[_413] = _414
    let _416: Int = Int(0)
    let _417: Int = Get k91.400[_416]
    let _418: Int = Sub(_417, i100.408)
    let _419: Int = Get perm.341[_418]
    let _420: Unit = Put perm.341[i100.408] = _419
    let _421: Int = Int(0)
    let _422: Int = Get k91.400[_421]
    let _423: Int = Sub(_422, i100.408)
    let _424: Int = Int(0)
    let _425: Int = Get t.406[_424]
    let _426: Unit = Put perm.341[_423] = _425
    let _427: Int = Int(1)
    let _428: Int = Add(i100.408, _427)
    Apply(flip_loop99.407l5, [_428, t.406, k91.400, perm.341, ])
  } else {
    Unit
  }
}
let rec do_flip90.399l4: Unit = (k91.400: Array(Int), perm.341: Array(Int), flips.346: Array(Int)) {
  let _401: Int = Int(0)
  let _402: Int = Get k91.400[_401]
  let _403: Int = Int(0)
  if (_402 == _403) then {
    Unit
  } else {
    let _404: Int = Int(1)
    let _405: Int = Int(0)
    let t.406: Array(Int) = ExtApply(minimbt_create_array, [_404, _405, ])
    let _429: Int = Int(0)
    let _430: Unit = Apply(flip_loop99.407l5, [_429, t.406, k91.400, perm.341, ])
    let _431: Int = Int(0)
    let _432: Int = Int(0)
    let _433: Int = Get perm.341[_432]
    let _434: Unit = Put k91.400[_431] = _433
    let _435: Int = Int(0)
    let _436: Int = Int(0)
    let _437: Int = Get flips.346[_436]
    let _438: Int = Int(1)
    let _439: Int = Add(_437, _438)
    let _440: Unit = Put flips.346[_435] = _439
    Apply(do_flip90.399l4, [k91.400, perm.341, flips.346, ])
  }
}
let rec move_perm1_forward197.494l6: Unit = (i198.495: Int, r41.359: Array(Int), perm1.339: Array(Int)) {
  let _496: Int = Int(0)
  let _497: Int = Get r41.359[_496]
  let _498: Int = Int(1)
  let _499: Int = Sub(_497, _498)
  if (i198.495 <= _499) then {
    let _500: Int = Int(1)
    let _501: Int = Add(i198.495, _500)
    let _502: Int = Get perm1.339[_501]
    let _503: Unit = Put perm1.339[i198.495] = _502
    let _504: Int = Int(1)
    let _505: Int = Add(i198.495, _504)
    let _506: Unit = Apply(move_perm1_forward197.494l6, [_505, r41.359, perm1.339, ])
    Unit
  } else {
    Unit
  }
}
let rec go_loop179.477l5: Unit = (_263: Int, t.476: Array(Int), go.473: Array(Bool), r41.359: Array(Int), count.343: Array(Int), perm1.339: Array(Int)) {
  let _478: Int = Int(0)
  let _479: Bool = Get go.473[_478]
  let _480: Bool = Bool(true)
  if (_479 == _480) then {
    let _481: Int = Int(0)
    let _482: Int = Get r41.359[_481]
    let _483: Unit = if (_482 == _263) then {
      let _484: Int = Int(0)
      let _485: Bool = Bool(false)
      let _486: Unit = Put go.473[_484] = _485
      let _487: Int = Int(0)
      let _488: Int = Int(0)
      let _489: Unit = Put r41.359[_487] = _488
      Unit
    } else {
      let _490: Int = Int(0)
      let _491: Int = Int(0)
      let _492: Int = Get perm1.339[_491]
      let _493: Unit = Put t.476[_490] = _492
      let _507: Int = Int(0)
      let _508: Unit = Apply(move_perm1_forward197.494l6, [_507, r41.359, perm1.339, ])
      let _509: Int = Int(0)
      let _510: Int = Get r41.359[_509]
      let _511: Int = Int(0)
      let _512: Int = Get t.476[_511]
      let _513: Unit = Put perm1.339[_510] = _512
      let _514: Int = Int(0)
      let _515: Int = Get r41.359[_514]
      let _516: Int = Int(0)
      let _517: Int = Get r41.359[_516]
      let _518: Int = Get count.343[_517]
      let _519: Int = Int(1)
      let _520: Int = Sub(_518, _519)
      let _521: Unit = Put count.343[_515] = _520
      let _522: Int = Int(1)
      let _523: Int = Int(0)
      let _524: Int = Get r41.359[_523]
      let _525: Int = Get count.343[_524]
      let _526: Unit = if (_522 <= _525) then {
        let _527: Int = Int(0)
        let _528: Bool = Bool(false)
        Put go.473[_527] = _528
      } else {
        let _529: Int = Int(0)
        let _530: Int = Int(0)
        let _531: Int = Get r41.359[_530]
        let _532: Int = Int(1)
        let _533: Int = Add(_531, _532)
        Put r41.359[_529] = _533
      }
      Unit
    }
    Apply(go_loop179.477l5, [_263, t.476, go.473, r41.359, count.343, perm1.339, ])
  } else {
    Unit
  }
}
let rec main262l0: Var({val: Some(Unit)}) = () {
  let _263: Int = Int(9)
  let perm1.339: Array(Int) = Apply(gen_perm14.326l1, [_263, ])
  let _340: Int = Int(0)
  let perm.341: Array(Int) = ExtApply(minimbt_create_array, [_263, _340, ])
  let _342: Int = Int(0)
  let count.343: Array(Int) = ExtApply(minimbt_create_array, [_263, _342, ])
  let _344: Int = Int(1)
  let _345: Int = Int(0)
  let flips.346: Array(Int) = ExtApply(minimbt_create_array, [_344, _345, ])
  let _347: Int = Int(1)
  let _348: Int = Int(0)
  let max_flips.349: Array(Int) = ExtApply(minimbt_create_array, [_347, _348, ])
  let _350: Int = Int(1)
  let _351: Int = Int(0)
  let check_sum.352: Array(Int) = ExtApply(minimbt_create_array, [_350, _351, ])
  let _353: Int = Int(1)
  let _354: Int = Int(0)
  let nperm.355: Array(Int) = ExtApply(minimbt_create_array, [_353, _354, ])
  let _356: Int = Int(1)
  let r.357: Array(Int) = ExtApply(minimbt_create_array, [_356, _263, ])
  let rec compute40.358: Unit = (r41.359: Array(Int)) {
    let _360: Int = Int(1)
    let _361: Int = Int(0)
    let _362: Int = Get r41.359[_361]
    if (_360 <= _362) then {
      let _371: Int = Int(0)
      let _372: Unit = Apply(copy_perm46.363l2, [_371, _263, perm.341, perm1.339, ])
      let _391: Unit = Apply(init_count59.373l3, [r41.359, count.343, ])
      let _392: Int = Int(0)
      let _393: Int = Int(0)
      let _394: Unit = Put flips.346[_392] = _393
      let _395: Int = Int(1)
      let _396: Int = Int(0)
      let _397: Int = Get perm.341[_396]
      let k.398: Array(Int) = ExtApply(minimbt_create_array, [_395, _397, ])
      let _441: Unit = Apply(do_flip90.399l4, [k.398, perm.341, flips.346, ])
      let _442: Int = Int(0)
      let _443: Int = Get max_flips.349[_442]
      let _444: Int = Int(0)
      let _445: Int = Get flips.346[_444]
      let _446: Unit = if (_443 <= _445) then {
        let _447: Int = Int(0)
        let _448: Int = Int(0)
        let _449: Int = Get flips.346[_448]
        Put max_flips.349[_447] = _449
      } else {
        Unit
      }
      let _450: Int = Int(0)
      let _451: Int = Int(0)
      let _452: Int = Get check_sum.352[_451]
      let _453: Int = Int(0)
      let _454: Int = Get flips.346[_453]
      let _455: Int = Int(1)
      let _456: Int = Int(0)
      let _457: Int = Get nperm.355[_456]
      let _458: Int = Int(0)
      let _459: Int = Get nperm.355[_458]
      let _460: Int = Int(2)
      let _461: Int = Div(_459, _460)
      let _462: Int = Int(2)
      let _463: Int = Mul(_461, _462)
      let _464: Int = Sub(_457, _463)
      let _465: Int = Int(2)
      let _466: Int = Mul(_464, _465)
      let _467: Int = Sub(_455, _466)
      let _468: Int = Mul(_454, _467)
      let _469: Int = Add(_452, _468)
      let _470: Unit = Put check_sum.352[_450] = _469
      let _471: Int = Int(1)
      let _472: Bool = Bool(true)
      let go.473: Array(Bool) = ExtApply(minimbt_create_array, [_471, _472, ])
      let _474: Int = Int(1)
      let _475: Int = Int(0)
      let t.476: Array(Int) = ExtApply(minimbt_create_array, [_474, _475, ])
      let _534: Unit = Apply(go_loop179.477l5, [_263, t.476, go.473, r41.359, count.343, perm1.339, ])
      let _535: Int = Int(0)
      let _536: Int = Int(0)
      let _537: Int = Get nperm.355[_536]
      let _538: Int = Int(1)
      let _539: Int = Add(_537, _538)
      let _540: Unit = Put nperm.355[_535] = _539
      Apply(compute40.358, [r41.359, ])
    } else {
      Unit
    }
  }
  let _541: Unit = Apply(compute40.358, [r.357, ])
  let _542: Int = Int(0)
  let _543: Int = Get max_flips.349[_542]
  let _544: Int = Int(0)
  let _545: Int = Get check_sum.352[_544]
  let _264: Tuple([Int, Int]) = Tuple([_543, _545, ])
  let (max_flips265.266: Var({val: Some(Int)}), check_sum267.268: Var({val: Some(Int)})) = _264let _270: Unit = ExtApply(minimbt_print_int, [check_sum267.268, ])
  ExtApply(minimbt_print_int, [max_flips265.266, ])
}
Apply(main262l0, [])