let rec swap.1: Unit = (arr.2: Array(Int), i.3: Int, j.4: Int) {
  let tmp.5: Int = Get arr.2[i.3]
  let _6: Int = Get arr.2[j.4]
  let _7: Unit = Put arr.2[i.3] = _6
  let _8: Unit = Put arr.2[j.4] = tmp.5
  Unit
}
let rec quicksort.45: Unit = (arr.46: Array(Int), low.47: Int, high.48: Int) {
  let join quicksort.101: Unit = (arr.102: Array(Int), low.103: Int, high.104: Int) {
    let _105: Int = Int(1)
    let _106: Int = Sub(high.104, _105)
    if (low.103 <= _106) then {
      let pivot.160: Int = Get arr.102[high.104]
      let _161: Int = Int(1)
      let _162: Int = Int(1)
      let _163: Int = Sub(low.103, _162)
      let i.164: Array(Int) = ExtApply(minimbt_create_array, [_161, _163, ])
      let join l.230: Var({val: Some(Unit)}) = (j.231: Var({val: Some(Int)})) {
        let _232: Int = Int(1)
        let _233: Int = Sub(high.104, _232)
        if (j.231 <= _233) then {
          let _234: Int = Get arr.102[j.231]
          if (_234 <= pivot.160) then {
            let _235: Int = Int(0)
            let _236: Int = Int(0)
            let _237: Int = Get i.164[_236]
            let _238: Int = Int(1)
            let _239: Int = Add(_237, _238)
            let _240: Unit = Put i.164[_235] = _239
            let _241: Int = Int(0)
            let _242: Int = Get i.164[_241]
            let _243: Unit = Apply(swap.1, [arr.102, _242, j.231, ])
            let _244: Int = Int(1)
            let _245: Int = Add(j.231, _244)
            Jump(l.230, [_245, ])
          } else {
            let _246: Unit = Unit
            let _247: Int = Int(1)
            let _248: Int = Add(j.231, _247)
            Jump(l.230, [_248, ])
          }
        } else {
          let _185: Var({val: Some(Unit)}) = Unit
          let _186: Int = Int(0)
          let _187: Int = Int(0)
          let _188: Int = Get i.164[_187]
          let _189: Int = Int(1)
          let _190: Int = Add(_188, _189)
          let _191: Unit = Put i.164[_186] = _190
          let _192: Int = Int(0)
          let _193: Int = Get i.164[_192]
          let tmp.249: Int = Get arr.102[_193]
          let _250: Int = Get arr.102[high.104]
          let _251: Unit = Put arr.102[_193] = _250
          let _252: Unit = Put arr.102[high.104] = tmp.249
          let _194: Unit = Unit
          let _195: Int = Int(0)
          let pi.107: Int = Get i.164[_195]
          let _108: Int = Int(1)
          let _109: Int = Sub(pi.107, _108)
          let _110: Unit = Apply(quicksort.45, [arr.102, low.103, _109, ])
          let _111: Int = Int(1)
          let _112: Int = Add(pi.107, _111)
          Jump(quicksort.101, [arr.102, _112, high.104, ])
        }
      }
      Jump(l.230, [low.103, ])
    } else {
      Unit
    }
  }
  Jump(quicksort.101, [arr.46, low.47, high.48, ])
}
let rec main.57: Var({val: Some(Unit)}) = () {
  let len.58: Int = ExtApply(minimbt_read_int, [])
  let _59: Int = Int(0)
  let arr.60: Array(Int) = ExtApply(minimbt_create_array, [len.58, _59, ])
  let _69: Int = Int(0)
  let join input.205: Var({val: Some(Unit)}) = (i.206: Int) {
    let _207: Int = Int(1)
    let _208: Int = Sub(len.58, _207)
    if (i.206 <= _208) then {
      let _209: Int = ExtApply(minimbt_read_int, [])
      let _210: Unit = Put arr.60[i.206] = _209
      let _211: Int = Int(1)
      let _212: Int = Add(i.206, _211)
      Jump(input.205, [_212, ])
    } else {
      let _70: Var({val: Some(Unit)}) = Unit
      let _71: Int = Int(0)
      let _72: Int = Int(1)
      let _73: Int = Sub(len.58, _72)
      let _74: Unit = Apply(quicksort.45, [arr.60, _71, _73, ])
      let _84: Int = Int(0)
      let join output.213: Var({val: Some(Unit)}) = (i.214: Int) {
        let _215: Int = Int(1)
        let _216: Int = Sub(len.58, _215)
        if (i.214 <= _216) then {
          let _217: Int = Get arr.60[i.214]
          let _218: Unit = ExtApply(minimbt_print_int, [_217, ])
          let _219: Unit = ExtApply(minimbt_print_endline, [])
          let _220: Int = Int(1)
          let _221: Int = Add(i.214, _220)
          Jump(output.213, [_221, ])
        } else {
          Unit
        }
      }
      Jump(output.213, [_84, ])
    }
  }
  Jump(input.205, [_69, ])
}
Apply(main.57, [])